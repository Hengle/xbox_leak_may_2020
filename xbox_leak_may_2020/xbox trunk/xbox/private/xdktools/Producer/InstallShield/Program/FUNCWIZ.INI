[FuncWiz - Category]
Item1=All
Item2=Batch file
Item3=Built-in dialog box
Item4=Component
Item5=Configuration file
Item6=Custom dialog box
Item7=Extensibility
Item8=File and folder
Item9=Information
Item10=Initialization file
Item11=List processing
Item12=Long filename
Item13=Miscellaneous
Item14=Path buffer
Item15=Registry
Item16=Sd dialog box
Item17=Shared and locked File
Item18=Shell
Item19=String
Item20=Version checking
Item21=Uninstallation
Item22=User interface

[FuncWiz - Category - All]
Item1=AddFolderIcon
Item2=AddProfString
Item3=AppCommand
Item4=AskDestPath
Item5=AskOptions
Item6=AskPath
Item7=AskText
Item8=AskYesNo
Item9=BatchAdd
Item10=BatchDeleteEx
Item11=BatchFileLoad
Item12=BatchFileSave
Item13=BatchFind
Item14=BatchGetFileName
Item15=BatchMoveEx
Item16=BatchSetFileName
Item17=CallDLLFx
Item18=ChangeDirectory
Item19=CloseFile
Item20=CmdGetHwndDlg
Item21=CommitSharedFiles
Item22=ComponentAddItem
Item23=ComponentCompareSizeRequired
Item24=ComponentDialog
Item25=ComponentError
Item26=ComponentFileEnum
Item27=ComponentFileInfo
Item28=ComponentFilterLanguage
Item29=ComponentFilterOS
Item30=ComponentGetData
Item31=ComponentGetItemSize
Item32=ComponentIsItemSelected
Item33=ComponentListItems
Item34=ComponentMoveData
Item35=ComponentSelectItem
Item36=ComponentSetData
Item37=ComponentSetTarget
Item38=ComponentSetupTypeEnum
Item39=ComponentSetupTypeGetData
Item40=ComponentSetupTypeSet
Item41=ComponentTotalSize
Item42=ComponentValidate
Item43=ConfigAdd
Item44=ConfigDelete
Item45=ConfigFileLoad
Item46=ConfigFileSave
Item47=ConfigFind
Item48=ConfigGetFileName
Item49=ConfigGetInt
Item50=ConfigMove
Item51=ConfigSetFileName
Item52=ConfigSetInt
Item53=CopyBytes
Item54=CopyFile
Item55=CreateDir
Item56=CreateFile
Item57=CreateProgramFolder
Item58=CtrlClear
Item59=CtrlDir
Item60=CtrlGetCurSel
Item61=CtrlGetMLEText
Item62=CtrlGetMultCurSel
Item63=CtrlGetState
Item64=CtrlGetSubCommand
Item65=CtrlGetText
Item66=CtrlPGroups
Item67=CtrlSelectText
Item68=CtrlSetCurSel
Item69=CtrlSetFont
Item70=CtrlSetList
Item71=CtrlSetMLEText
Item72=CtrlSetMultCurSel
Item73=CtrlSetState
Item74=CtrlSetText
Item75=DefineDialog
Item76=DeinstallSetReference
Item77=DeinstallStart
Item78=Delay
Item79=DeleteDir
Item80=DeleteFile
Item81=DeleteFolderIcon
Item82=DeleteProgramFolder
Item83=DialogSetInfo
Item84=Disable
Item85=Do
Item86=DoInstall
Item87=Enable
Item88=EndDialog
Item89=EnterDisk
Item90=ExistsDir
Item91=ExistsDisk
Item92=ExitProgMan
Item93=EzBatchAddPath
Item94=EzBatchAddString
Item95=EzBatchReplace
Item96=EzConfigAddDriver
Item97=EzConfigAddString
Item98=EzConfigGetValue
Item99=EzConfigSetValue
Item100=EzDefineDialog
Item101=FileCompare
Item102=FileDeleteLine
Item103=FileGrep
Item104=FileInsertLine
Item105=FindAllDirs
Item106=FindAllFiles
Item107=FindFile
Item108=FindWindow
Item109=GetDir
Item110=GetDisk
Item111=GetDiskSpace
Item112=GetEnvVar
Item113=GetExtents
Item114=GetFileInfo
Item115=GetFolderNameList
Item116=GetFont
Item117=GetGroupNameList
Item118=GetItemNameList
Item119=GetLine
Item120=GetMemFree
Item121=GetMode
Item122=GetProfInt
Item123=GetProfString
Item124=GetSystemInfo
Item125=GetValidDrivesList
Item126=GetWindowHandle
Item127=Handler
Item128=HIWORD
Item129=InstallationInfo
Item130=Is
Item131=LaunchApp
Item132=LaunchAppAndWait
Item133=ListAddItem
Item134=ListAddString
Item135=ListCount
Item136=ListCreate
Item137=ListCurrentItem
Item138=ListCurrentString
Item139=ListDeleteItem
Item140=ListDeleteString
Item141=ListDestroy
Item142=ListFindItem
Item143=ListFindString
Item144=ListGetFirstItem
Item145=ListGetFirstString
Item146=ListGetNextItem
Item147=ListGetNextString
Item148=ListReadFromFile
Item149=ListSetCurrentItem
Item150=ListSetCurrentString
Item151=ListSetIndex
Item152=ListWriteToFile
Item153=LongPathFromShortPath
Item154=LongPathToQuote
Item155=LongPathToShortPath
Item156=LOWORD
Item157=MessageBeep
Item158=MessageBox
Item159=NumToStr
Item160=OpenFile
Item161=OpenFileMode
Item162=ParsePath
Item163=PathAdd
Item164=PathDelete
Item165=PathFind
Item166=PathGet
Item167=PathMove
Item168=PathSet
Item169=PlaceBitmap
Item170=PlaceWindow
Item171=PlayMMedia
Item172=ProgDefGroupType
Item173=QueryProgGroup
Item174=QueryProgItem
Item175=QueryShellMgr
Item176=ReadBytes
Item177=RebootDialog
Item178=RegDBConnectRegistry
Item179=RegDBCreateKeyEx
Item180=RegDBDeleteKey
Item181=RegDBDeleteValue
Item182=RegDBDisConnectRegistry
Item183=RegDBGetAppInfo
Item184=RegDBGetItem
Item185=RegDBGetKeyValueEx
Item186=RegDBKeyExist
Item187=RegDBQueryKey
Item188=RegDBSetAppInfo
Item189=RegDBSetDefaultRoot
Item190=RegDBSetItem
Item191=RegDBSetKeyValueEx
Item192=ReleaseDialog
Item193=ReloadProgGroup
Item194=RenameFile
Item195=ReplaceFolderIcon
Item196=ReplaceProfString
Item197=SdAskDestPath
Item198=SdAskOptions
Item199=SdAskOptionsList
Item200=SdBitmap
Item201=SdComponentDialog
Item202=SdComponentDialog2
Item203=SdComponentDialogAdv
Item204=SdComponentMult
Item205=SdConfirmNewDir
Item206=SdConfirmRegistration
Item207=SdDisplayTopics
Item208=SdFinish
Item209=SdFinishReboot
Item210=SdLicense
Item211=SdMakeName
Item212=SdOptionsButtons
Item213=SdProductName
Item214=SdRegisterUser
Item215=SdRegisterUserEx
Item216=SdSelectFolder
Item217=SdSetupType
Item218=SdSetupTypeEx
Item219=SdShowAnyDialog
Item220=SdShowDlgEdit1
Item221=SdShowDlgEdit2
Item222=SdShowDlgEdit3
Item223=SdShowFileMods
Item224=SdShowInfoList
Item225=SdShowMsg
Item226=SdStartCopy
Item227=SdWelcome
Item228=SeekBytes
Item229=SelectDir
Item230=SelectFolder
Item231=SendMessage
Item232=SetColor
Item233=SetDialogTitle
Item234=SetDisplayEffect
Item235=SetErrorMsg
Item236=SetErrorTitle
Item237=SetFileInfo
Item238=SetFont
Item239=SetStatusWindow
Item240=SetTitle
Item241=SetupType
Item242=ShowGroup
Item243=ShowProgramFolder
Item244=SilentReadData
Item245=SilentWriteData
Item246=SizeWindow
Item247=Sprintf
Item248=SprintfBox
Item249=StatusUpdate
Item250=StrCompare
Item251=StrFind
Item252=StrGetTokens
Item253=StrLength
Item254=StrRemoveLastSlash
Item255=StrSub
Item256=StrToLower
Item257=StrToNum
Item258=StrToUpper
Item259=System
Item260=UnUseDLL
Item261=UseDLL
Item262=VarRestore
Item263=VarSave
Item264=VerCompare
Item265=VerFindFileVersion
Item266=VerGetFileVersion
Item267=VerSearchAndUpdateFile
Item268=VerUpdateFile
Item269=WaitOnDialog
Item270=Welcome
Item271=WriteBytes
Item272=WriteLine
Item273=WriteProfString
Item274=XCopyFile

[FuncWiz - Category - Batch file]
Item1=BatchAdd                     
Item2=BatchDeleteEx                
Item3=BatchFileLoad                
Item4=BatchFileSave                
Item5=BatchFind                    
Item6=BatchGetFileName             
Item7=BatchMoveEx                  
Item8=BatchSetFileName             
Item9=EzBatchAddPath               
Item10=EzBatchAddString             
Item11=EzBatchReplace               

[FuncWiz - Category - Built-in dialog box]
Item1=AskDestPath                  
Item2=AskOptions                   
Item3=AskPath                      
Item4=AskText                      
Item5=AskYesNo                     
Item6=ComponentDialog              
Item7=EnterDisk                    
Item8=MessageBox                   
Item9=RebootDialog                 
Item10=SelectDir                    
Item11=SelectFolder                 
Item12=SetupType                    
Item13=SprintfBox                   
Item14=Welcome                      

[FuncWiz - Category - Component]
Item1=ComponentAddItem             
Item2=ComponentCompareSizeRequired             
Item3=ComponentDialog              
Item4=ComponentError
Item5=ComponentFileEnum
Item6=ComponentFileInfo
Item7=ComponentFilterLanguage
Item8=ComponentFilterOS
Item9=ComponentGetData             
Item10=ComponentGetItemSize         
Item11=ComponentIsItemSelected      
Item12=ComponentListItems           
Item13=ComponentMoveData
Item14=ComponentSelectItem          
Item15=ComponentSetData             
Item16=ComponentSetTarget
Item17=ComponentSetupTypeEnum
Item18=ComponentSetupTypeGetData
Item19=ComponentSetupTypeSet
Item20=ComponentTotalSize           
Item21=ComponentValidate
Item22=SdComponentDialog
Item23=SdComponentDialog2
Item24=SdComponentDialogAdv
Item25=SdComponentMult
Item26=SdSetupType
Item27=SdSetupTypeEx
Item28=SetupType

[FuncWiz - Category - Configuration file]
Item1=ConfigAdd                    
Item2=ConfigDelete                 
Item3=ConfigFileLoad               
Item4=ConfigFileSave               
Item5=ConfigFind                   
Item6=ConfigGetFileName            
Item7=ConfigGetInt                 
Item8=ConfigMove                   
Item9=ConfigSetFileName            
Item10=ConfigSetInt                 
Item11=EzConfigAddDriver            
Item12=EzConfigAddString            
Item13=EzConfigGetValue             
Item14=EzConfigSetValue             

[FuncWiz - Category - Custom dialog box]
Item1=CmdGetHwndDlg                
Item2=CtrlClear                    
Item3=CtrlDir                      
Item4=CtrlGetCurSel                
Item5=CtrlGetMLEText               
Item6=CtrlGetMultCurSel            
Item7=CtrlGetState                 
Item8=CtrlGetSubCommand            
Item9=CtrlGetText                  
Item10=CtrlPGroups                  
Item11=CtrlSelectText               
Item12=CtrlSetCurSel                
Item13=CtrlSetFont                  
Item14=CtrlSetList                  
Item15=CtrlSetMLEText               
Item16=CtrlSetMultCurSel            
Item17=CtrlSetState                 
Item18=CtrlSetText                  
Item19=DefineDialog                 
Item20=EndDialog                    
Item21=EzDefineDialog               
Item22=GetFont                      
Item23=HIWORD                       
Item24=LOWORD                       
Item25=ReleaseDialog
Item26=SdMakeName
Item27=SilentReadData
Item28=SilentWriteData            
Item29=WaitOnDialog                 

[FuncWiz - Category - Extensibility]
Item1=AppCommand                   
Item2=CallDLLFx                    
Item3=Delay                        
Item4=LaunchApp                    
Item5=LaunchAppAndWait             
Item6=UnUseDLL                     
Item7=UseDLL                       

[FuncWiz - Category - File and folder]
Item1=ChangeDirectory              
Item2=CloseFile                    
Item3=CopyFile                     
Item4=CreateDir                    
Item5=CreateFile                   
Item6=DeleteDir                    
Item7=DeleteFile                   
Item8=ExistsDir                    
Item9=ExistsDisk                   
Item10=FileCompare                  
Item11=FileDeleteLine               
Item12=FileGrep                     
Item13=FileInsertLine               
Item14=FindAllDirs                  
Item15=FindAllFiles                 
Item16=FindFile                     
Item17=GetFileInfo                  
Item18=GetLine                      
Item19=OpenFile                     
Item20=OpenFileMode                 
Item21=ReadBytes                    
Item22=RenameFile                   
Item23=SeekBytes                    
Item24=SelectDir                    
Item25=SetFileInfo                  
Item26=WriteBytes                   
Item27=WriteLine                    
Item28=XCopyFile                    

[FuncWiz - Category - Information]
Item1=GetDiskSpace                 
Item2=GetEnvVar                    
Item3=GetExtents                   
Item4=GetMemFree                   
Item5=GetMode                      
Item6=GetSystemInfo                
Item7=GetValidDrivesList           
Item8=GetWindowHandle              
Item9=Is                           

[FuncWiz - Category - Initialization file]
Item1=AddProfString                
Item2=GetProfInt                   
Item3=GetProfString                
Item4=ReplaceProfString            
Item5=WriteProfString              

[FuncWiz - Category - List processing]
Item1=ListAddItem                  
Item2=ListAddString                
Item3=ListCount                    
Item4=ListCreate                   
Item5=ListCurrentItem              
Item6=ListCurrentString            
Item7=ListDeleteItem               
Item8=ListDeleteString             
Item9=ListDestroy                  
Item10=ListFindItem                 
Item11=ListFindString               
Item12=ListGetFirstItem          
Item13=ListGetFirstString             
Item14=ListGetNextItem              
Item15=ListGetNextString            
Item16=ListReadFromFile             
Item17=ListSetCurrentItem           
Item18=ListSetCurrentString         
Item19=ListSetIndex                 
Item20=ListWriteToFile              

[FuncWiz - Category - Long filename]
Item1=LongPathFromShortPath        
Item2=LongPathToQuote              
Item3=LongPathToShortPath          

[FuncWiz - Category - Miscellaneous]
Item1=Do                           
Item2=DoInstall                    
Item3=Handler                      
Item4=MessageBeep                  
Item5=SendMessage                  
Item6=Sprintf                      
Item7=System                       
Item8=VarRestore                   
Item9=VarSave                      

[FuncWiz - Category - Path buffer]
Item1=PathAdd                      
Item2=PathDelete                   
Item3=PathFind                     
Item4=PathGet                      
Item5=PathMove                     
Item6=PathSet                      

[FuncWiz - Category - Registry]
Item1=DeinstallStart               
Item2=InstallationInfo 
Item3=RegDBConnectRegistry            
Item4=RegDBCreateKeyEx             
Item5=RegDBDeleteKey               
Item6=RegDBDeleteValue  
Item7=RegDBDisConnectRegistry           
Item8=RegDBGetAppInfo              
Item9=RegDBGetItem                 
Item10=RegDBGetKeyValueEx           
Item11=RegDBKeyExist                
Item12=RegDBQueryKey                
Item13=RegDBSetAppInfo              
Item14=RegDBSetDefaultRoot          
Item15=RegDBSetItem                 
Item16=RegDBSetKeyValueEx           

[FuncWiz - Category - Sd dialog box]
Item1=DialogSetInfo                
Item2=SdAskDestPath                
Item3=SdAskOptions                 
Item4=SdAskOptionsList             
Item5=SdBitmap                     
Item6=SdComponentDialog            
Item7=SdComponentDialog2           
Item8=SdComponentDialogAdv         
Item9=SdComponentMult              
Item10=SdConfirmNewDir              
Item11=SdConfirmRegistration        
Item12=SdDisplayTopics              
Item13=SdFinish                     
Item14=SdFinishReboot               
Item15=SdLicense
Item16=SdMakeName                  
Item17=SdOptionsButtons             
Item18=SdProductName                
Item19=SdRegisterUser               
Item20=SdRegisterUserEx             
Item21=SdSelectFolder               
Item22=SdSetupType
Item23=SdSetupTypeEx               
Item24=SdShowAnyDialog              
Item25=SdShowDlgEdit1               
Item26=SdShowDlgEdit2               
Item27=SdShowDlgEdit3               
Item28=SdShowFileMods               
Item29=SdShowInfoList               
Item30=SdShowMsg                    
Item31=SdStartCopy                  
Item32=SdWelcome                    

[FuncWiz - Category - Shared and locked file]
Item1=CommitSharedFiles            
Item2=Is                
Item3=RebootDialog                           
Item4=SdFinishReboot               
Item5=VerUpdateFile                
Item6=XCopyFile                    

[FuncWiz - Category - Shell]
Item1=AddFolderIcon                
Item2=CreateProgramFolder          
Item3=DeleteFolderIcon             
Item4=DeleteProgramFolder          
Item5=ExitProgMan                  
Item6=GetFolderNameList            
Item7=GetGroupNameList             
Item8=GetItemNameList              
Item9=ProgDefGroupType             
Item10=QueryProgGroup               
Item11=QueryProgItem                
Item12=QueryShellMgr                
Item13=ReloadProgGroup              
Item14=ReplaceFolderIcon            
Item15=SelectFolder                 
Item16=ShowGroup                    
Item17=ShowProgramFolder            

[FuncWiz - Category - String]
Item1=CopyBytes                    
Item2=GetDir                       
Item3=GetDisk                      
Item4=NumToStr                     
Item5=ParsePath                    
Item6=StrCompare                   
Item7=StrFind                      
Item8=StrGetTokens                 
Item9=StrLength                    
Item10=StrRemoveLastSlash           
Item11=StrSub                       
Item12=StrToLower                   
Item13=StrToNum                     
Item14=StrToUpper                   

[FuncWiz - Category - Uninstallation]
Item1=DeinstallSetReference
Item2=DeinstallStart
Item3=InstallationInfo
Item4=RegDBSetItem                     
              
[FuncWiz - Category - User interface]
Item1=Disable                      
Item2=Enable                       
Item3=FindWindow                   
Item4=PlaceBitmap                  
Item5=PlaceWindow  
Item6=PlayMMedia 
Item7=RGB 
Item8=SetColor                     
Item9=SetDialogTitle  
Item10=SetDisplayEffect             
Item11=SetErrorMsg                  
Item12=SetErrorTitle                
Item13=SetFont                      
Item14=SetStatusWindow              
Item15=SetTitle                     
Item16=SizeWindow                   
Item17=StatusUpdate 

[FuncWiz - Category - Version checking]
Item1=VerCompare                   
Item2=VerFindFileVersion           
Item3=VerGetFileVersion            
Item4=VerSearchAndUpdateFile       
Item5=VerUpdateFile              

[AddFolderIcon]
SampleLine=AddFolderIcon(szProgramFolder, szItemName, szCommandLine, szWorkingDir, szIconPath, nIcon, szShortCutKey, nFlag)
Description=Adds or replaces an icon in a specific folder. If the program folder specified in szProgramFolder does not exist, AddFolderIcon will create it.
Param1Name=szProgramFolder
Param1Desc=The name of the folder to which you are adding the icon. If you are calling AddFolderIcon to add a shortcut icon to the Windows 95 Start Programs menu, use a null string ("") in this parameter.
Param1Type=EdCombo
Param1Val1=szProgramFolder
Param1Val2=""
Param1Val3=FOLDER_DESKTOP
Param1Val4=FOLDER_STARTMENU
Param1Val5=FOLDER_STARTUP
Param1Val6=FOLDER_PROGRAMS
Param2Name=szItemName
Param2Desc=Enter the name of the icon that you are adding to the folder or to the Windows 95 Start Programs menu.
Param3Name=szCommandLine
Param3Desc=Enter either the fully qualified path and filename of the executable associated with the icon you are adding, including any command line parameters.
Param4Name=szWorkingDir
Param4Desc=Enter the folder where your application's program files are located.
Param5Name=szIconPath
Param5Desc=Enter the filename for the icon you want to display.
Param6Name=nIcon
Param6Desc=Enter the icon ordinal in the Windows executable specified in szIconPath.
Param7Name=szShortCutKey
Param7Desc=Enter the shortcut key (in the form of a string) that allows you to quickly start your application.
Param8Name=nFlag
Param8Desc=Specify icon appearance. You can combine constants with the bitwise OR operator ( | ).
Param8Type=EdCombo
Param8Val1=REPLACE
Param8Val2=RUN_MAXIMIZED
Param8Val3=RUN_MINIMIZED
Param8Val4=RUN_SEPARATEMEMORY
Param8Val5=NULL

[AddProfString]
SampleLine=AddProfString(szFileName, szSectionName, szKeyName, szValue)
Description=Unconditionally adds a profile string to an INI file. Use AddProfString only to add non-unique keys. AddProfString adds the KEY=VALUE line to the beginning of the specified INI file section. \n\n** Available in Professional Edition Only ** 
Param1Name=szFileName
Param1Desc=The fully qualified path and name of the INI file to which you are adding the profile string. If you do not specify a path, Windows assumes the file is located in the Windows folder.
Param2Name=szSectionName
Param2Desc=The name of the section of the INI file where you want to add the profile string. Do not include section name delimiting brackets ( [] ). If the section does not exist, InstallShield creates it for you.
Param3Name=szKeyName
Param3Desc=The name of the key you are placing in the section. The line szKeyName = szValue is placed at the beginning of the section, even if a szKeyName entry already exists.
Param4Name=szValue
Param4Desc=The value you are placing after szKeyName.

[AppCommand]
SampleLine=AppCommand(nObject, nCommand)
Description=Controls the Program Manager. If the target system does not have the Program Manager, this function may not work. AppCommand has no effect under the Windows 95 shell. \n\n** Available in Professional Edition Only ** 
Param1Name=nObject
Param1Desc=The name of the Program Manager. Use the constant PROGMAN for this parameter.
Param2Name=nCommand
Param2Desc=Specify the command (message) you want to send to the Program Manager.
Param2Type=Combo
Param2Val1=CMD_CLOSE
Param2Val2=CMD_MAXIMIZE
Param2Val3=CMD_MINIMIZE
Param2Val4=CMD_PUSHDOWN
Param2Val5=CMD_RESTORE

[AskDestPath]
SampleLine=AskDestPath(szTitle, szMsg, svDir, nReserved)
Description=Creates the dialog box which queries the user for where the application is to be installed.
Param1Name=szTitle
Param1Desc=Enter the text you want to set as the title of the dialog box.
Param2Name=szMsg
Param2Desc=Enter the message you want to display. You can enter multiple lines of static text in this parameter.
Param3Name=svDir
Param3Desc=Enter the default path you want to display. This parameter will also contain the selected folder entered after the function executes.
Param4Name=nReserved
Param4Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param4Dflt=0

[AskOptions]
SampleLine=AskOptions(nValue, szMsg, szText1, nvCheck1, szText2, nvCheck2[, szTextn, nvCheckn] [, ..., ...])
Description=Displays a dialog box offering selection from one or more options using check boxes or radio buttons. You can display up to nine options (szTextn, nvCheckn pairs).
Param1Name=nValue
Param1Desc=Specify the controls as radio buttons (EXCLUSIVE) or check boxes (NONEXCLUSIVE).
Param1Type=Combo
Param1Val1=EXCLUSIVE
Param1Val2=NONEXCLUSIVE
Param2Name=szMsg
Param2Desc=Enter a message to display in the dialog box.
Param3Name=szText1
Param3Desc=Enter text (up to 47 characters) to display next to the first check box or radio button.
Param4Name=nvCheck1
Param4Desc=When AskOptions returns, nvCheck1 is set to TRUE if the first check box or radio button was selected, FALSE if deselected.
Param5Name=szText2
Param5Desc=Enter text (up to 47 characters) to display next to the second check box or radio button.
Param6Name=nvCheck2
Param6Desc=When AskOptions returns, nvCheck2 is set to TRUE if the second check box or radio button was selected, FALSE if deselected.

[AskPath]
SampleLine=AskPath(szMsg, szDefPath, svResultPath)
Description=Displays a dialog box that asks the user to enter a destination location path.
Param1Name=szMsg
Param1Desc=The message you want to display.
Param2Name=szDefPath
Param2Desc=The default path you want to display in the edit field. The user can modify this string.
Param3Name=svResultPath
Param3Desc=AskPath returns the resulting path string in svResultPath,  regardless of whether the user accepts the default path or modifies it and clicks Next. AskPath adds a backslash to the end of the path before placing it into svResultPath.

[AskText]
SampleLine=AskText(szQuestion, szDefault, svResult)
Description=Builds a dialog box displaying a question or a statement.
Param1Name=szQuestion
Param1Desc=Enter the question or statement to display.
Param2Name=szDefault
Param2Desc=Enter the default text that you want to appear in the edit field.
Param3Name=svResult
Param3Desc=When the user clicks the Next button, svResult returns the text string the user has entered.

[AskYesNo]
SampleLine=AskYesNo(szQuestion, nDefault)
Description=Asks a question that the user can answer by clicking on a Yes or No push button. 
Param1Name=szQuestion
Param1Desc=Enter the question you want to display in the message box.
Param2Name=nDefault
Param2Desc=Set the default focus to either the Yes or the No pushbutton.
Param2Type=Combo
Param2Val1=YES
Param2Val2=NO

[BatchAdd]
SampleLine=BatchAdd(szKey, szValue, szRefKey, nOptions)
Description=Adds a DOS command to the Autoexec.bat file. You can specify the position of the statement relative to a reference key, add the statement as the first or last line, or replace an existing line in the file.
Param1Name=szKey
Param1Desc=The key word you are adding to the Autoexec.bat file. PATH, TEMP, and MYENV are examples of valid keys you can use for this parameter.
Param2Name=szValue
Param2Desc=The value of the key you are adding to the Autoexec.bat file.
Param3Name=szRefKey
Param3Desc=The reference key relative to which you are adding szKey in the Autoexec.bat file.
Param4Name=nOptions
Param4Desc=This specifies the placement of the new command relative to szRefKey.
Param4Type=Combo
Param4Val1=BEFORE
Param4Val2=AFTER
Param4Val3=REPLACE

[BatchDeleteEx]
SampleLine=BatchDeleteEx(szKey, nOptions)
Description=Deletes a line or multiple lines identified in the szKey parameter. You must call the BatchFileLoad function prior to calling the BatchDeleteEx function.
Param1Name=szKey
Param1Desc=The reference keyword that identifies the line or lines you are deleting.
Param2Name=nOptions
Param2Desc=Indicate whether szKey contains a command statement or an environment variable.
Param2Type=Combo
Param2Val1=0
Param2Val2=COMMAND

[BatchFileLoad]
SampleLine=BatchFileLoad(szBatchFile)
Description=Loads a copy of a specified file into memory so that all advanced batch file functions can operate on the file. Before using any of the advanced batch file functions you must call BatchFileLoad to load a copy of the batch file into memory.
Param1Name=szBatchFile
Param1Desc=The fully qualified path and filename of the batch file you are loading into memory.

[BatchFileSave]
SampleLine=BatchFileSave(szBackupFile)
Description=Saves the batch file loaded in memory back to the disk. You must call this function to save the batch file you loaded into memory and modified using the advanced batch file functions. Otherwise, all modifications will be lost. The original file is renamed to the specified backup filename.
Param1Name=szBackupFile
Param1Desc=The new filename you are giving to the original file you loaded into memory. This parameter can contain only the filename. Do not include path information here.

[BatchFind]
SampleLine=BatchFind(szRefKey, svResult, nOptions)
Description=Searches a batch file for one or more occurrences of the reference key specified in szRefKey. You must call the BatchFileLoad function prior to calling the BatchFind function.
Param1Name=szRefKey
Param1Desc=The reference key you are searching for. The reference key can be either an environment variable or a command.
Param2Name=svResult
Param2Desc=BatchFind returns the value of the reference key that was found in the batch file in svResult. 
Param3Name=nOptions
Param3Desc=Indicate whether to start searching for szRefKey from the beginning of the file (RESTART), or to continue from the current position in the file (CONTINUE). COMMAND indicates szRefKey is a command. 
Param3Type=Combo
Param3Val1=COMMAND
Param3Val2=CONTINUE
Param3Val4=RESTART

[BatchGetFileName]
SampleLine=BatchGetFileName(svFileName)
Description=Retrieves the fully qualified path and filename of the default batch file.
Param1Name=svFileName
Param1Desc=BatchGetFileName returns the fully qualified name of the default batch file in svFileName.

[BatchMoveEx]
SampleLine=BatchMoveEx(szMove, szRefKey, nOptions, nMoveOption)
Description=Moves one line relative to another line in a batch file.
Param1Name=szMove
Param1Desc=The string that identifies the line you are moving.
Param2Name=szRefKey
Param2Desc=The key that identifies the reference line used to position the line you are moving.
Param3Name=nOptions
Param3Desc=Identify where to move the line. BEFORE means before the szRefKey line or to  the start of the file if szRefKey is "". After means after the szRefKey line or to the end of the file if szRefKey is "". COMMAND means szRefKey is a command.
Param3Type=Combo
Param3Val1=BEFORE
Param3Val2=AFTER
Param3Val3=COMMAND
Param4Name=nMoveOption
Param4Desc=Specify whether szMove is an environment variable (0) or a command (COMMAND).
Param4Type=Combo
Param4Val1=0
Param4Val2=COMMAND

[BatchSetFileName]
SampleLine=BatchSetFileName(szBatchFile)
Description=Specifies the path and filename of the file you want to use as the default batch file. The default batch file is initially set to be the bootup batch file. This function does not check to see if the file exists.
Param1Name=szBatchFile
Param1Desc=The fully qualified path and filename of the file you want to use as the default batch file.

[CallDLLFx]
SampleLine=CallDLLFx(szDLL, szFunction, lvValue, svValue)
Description=Calls a function within a specified DLL.
Param1Name=szDLL
Param1Desc=Enter the path and filename of the DLL that contains the function you wish to call.
Param2Name=szFunction
Param2Desc=Enter the name of the function you are calling from the DLL specified in szDLL.
Param3Name=lvValue
Param3Desc=You can use this parameter to pass data to your DLL function. This parameter is of type LONG (four bytes). It is passed by reference to the DLL function. 
Param4Name=svValue
Param4Desc=Enter the string you want to pass to the DLL function.

[ChangeDirectory]
SampleLine=ChangeDirectory(szPath)
Description=Sets the current folder.
Param1Name=szPath
Param1Desc=The fully qualified path of the folder you are setting as the new current folder. If the path in szPath contains a trailing backslash, you must strip it off using StrRemoveLastSlash.

[CloseFile]
SampleLine=CloseFile(nvFileHandle)
Description=Closes a file after you have read from or written to the file. You cannot read from or write to the file after you close it.
Param1Name=nvFileHandle
Param1Desc=Enter the file handle that specifies the file you want to close.

[CmdGetHwndDlg]
SampleLine=CmdGetHwndDlg(szDialogName)
Description=Retrieves the window handle of the dialog box identified by szDialogName. The dialog box already must have been defined with the DefineDialog function and created with the WaitOnDialog function. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid dialog box.

[CommitSharedFiles]
SampleLine=CommitSharedFiles(lReserved)
Description=Ensures that when Windows is restarted, .dll and .exe files that were locked during file transfer will be updated based on date.
Param1Name=lReserved
Param1Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param1Dflt=0

[ComponentAddItem]
SampleLine=ComponentAddItem(szMedia, szComponent, nDataSize, bSelected)
Description=Adds a component to a set of script-created components. If the specified media does not exist, it will be created. ComponentAddItem does not work with file media libraries.
Param1Name=szMedia
Param1Desc=The media name of a script-created component set to be added to and created, if necessary.
Param2Name=szComponent
Param2Desc=The name of the component to be added.
Param3Name=nDataSize
Param3Desc=The size in bytes of the data the component represents. If the component is a series of files, enter the total uncompressed size of all the files.
Param4Name=bSelected
Param4Desc=Specify the default selection setting of the component: TRUE for selected, FALSE for unselected.
Param4Type=Combo
Param4Val1=TRUE
Param4Val2=FALSE

[ComponentCompareSizeRequired]
SampleLine=ComponentCompareSizeRequired(szMedia, svTarget, nvSize)
Description=Determines if there is enough available space on the target drive for all selected components. If the drive does not have enough space, the target path and size required will be returned.
Param1Name=szMedia
Param1Desc=Name of the media containing the components.
Param1Dflt=MEDIA
Param2Name=svTarget
Param2Desc=If the target drive does not have enough space, the target path is returned in svTarget.
Param3Name=nvSize
Param3Desc=Required size returned if the target drive does not have enough space.

[ComponentDialog]
SampleLine=ComponentDialog(szTitle, szMsg, svDir, szComponent)
Description=Displays a list of components the user can install. The user can also select a destination folder. 
Param1Name=szTitle
Param1Desc=The text you want to appear as the dialog box title.
Param2Name=szMsg
Param2Desc=The message you want to display in the dialog box. For example, the message might read "Please select one or more of the following components to install on your system."
Param3Name=svDir
Param3Desc=The destination location. svDir will contain the selected location when the function returns. You must assign it to TARGETDIR or to a script-defined variable to affect file transfer.
Param4Name=szComponent
Param4Desc=The name of the component(s) you want to display. If szComponent is a null string (""), all top-level components are displayed. If szComponent is a component name, its subcomponents are displayed.

[ComponentError]
SampleLine=ComponentError(svMedia, svComponent, svFileGroup, svFile, nvError)
Description=Retrieves extra error information after a component function returns a value less than zero. Do not use ComponentError after ComponentSetupTypeEnum or ComponentSetupTypeSet.
Param1Name=svMedia
Param1Desc=When relevant to the error indicated in nvError, the name of the media involved is returned in svMedia.
Param2Name=svComponent
Param2Desc=When relevant to the error indicated in nvError, the name of the component involved is returned in svComponent.
Param3Name=svFileGroup
Param3Desc=When relevant to the error indicated in nvError, the name of the file group involved is returned in svFileGroup.
Param4Name=svFile
Param4Desc=When relevant to the error indicated in nvError, the name of the file involved is returned in svFile.
Param5Name=nvError
Param5Desc=When ComponentError is called after a component-related function returns a value less than zero, the error code is stored in nvError.

[ComponentFileEnum]
SampleLine=ComponentFileEnum(szMedia, szComponent, szQuery, listFiles, nOption)
Description=Enumerates files in a component. Does not work with script-created components.
Param1Name=szMedia
Param1Desc=The name of the media containing the component.
Param1Dflt=MEDIA
Param2Name=szComponent
Param2Desc=The name of the component to be file-enumerated.
Param3Name=szQuery
Param3Desc=Enumeration specification.
Param4Name=listFiles
Param4Desc=List storing the enumeration results.
Param5Name=nOption
Param5Desc=Specify whether or not to include subdirectories in the enumeration.
Param5Type=Combo
Param5Val1=INCLUDE_SUBDIR
Param5Val2=NO_SUBDIR

[ComponentFileInfo]
SampleLine=ComponentFileInfo(szMedia, szComponent, szFile, nInfo, nvResult, svResult)
Description=Retrieves all available information on the specified file in the media. Does not work with script-created components.
Param1Name=szMedia
Param1Desc=The name of the media containing the file.
Param1Dflt=MEDIA
Param2Name=szComponent
Param2Desc=The name of the component containing the file.
Param3Name=szFile
Param3Desc=Query specification.
Param4Name=nInfo
Param4Desc=Type of information to be retrieved.
Param4Type=Combo
Param4Val1=COMPONENT_INFO_LANGUAGE
Param4Val2=COMPONENT_INFO_OS
Param4Val3=COMPONENT_INFO_ORIGSIZE
Param4Val4=COMPONENT_INFO_COMPSIZE
Param4Val5=COMPONENT_INFO_DATE
Param4Val6=COMPONENT_INFO_DATE_EX
Param4Val7=COMPONENT_INFO_TIME
Param4Val8=COMPONENT_INFO_ATTRIBUTE
Param4Val9=COMPONENT_INFO_VERSIONMS
Param4Val10=COMPONENT_INFO_VERSIONLS
Param4Val11=COMPONENT_INFO_VERSIONSTR
Param5Name=nvResult
Param5Desc=Stores a numeric query result. (Stores a number list ID if nInfo is COMPONENT_INFO_LANGUAGE or COMPONENT_INFO_OS.)
Param6Name=svResult
Param6Desc=Stores a string query result.

[ComponentFilterLanguage]
SampleLine=ComponentFilterLanguage(szMedia, nLangID, bFiltered)
Description=Filters (excludes) files from file transfer based on language. By default, all languages included in the media build are unfiltered (included). You must call ComponentFilterLanguage for each language you wish to filter or unfilter. \n\n** Available in Professional Edition Only **
Param1Name=szMedia
Param1Desc=The name of the media being filtered.
Param1Dflt=MEDIA
Param2Name=nLangID
Param2Desc=The language ID for the language to be filtered. You cannot combine language IDs.
Param2Type=Combo
Param2Val1=ISLANG_ALL
Param2Val2=ISLANG_ARABIC
Param2Val3=ISLANG_ARABIC_SAUDIARABIA
Param2Val4=ISLANG_ARABIC_IRAQ
Param2Val5=ISLANG_ARABIC_EGYPT
Param2Val6=ISLANG_ARABIC_LIBYA
Param2Val7=ISLANG_ARABIC_ALGERIA
Param2Val8=ISLANG_ARABIC_MOROCCO
Param2Val9=ISLANG_ARABIC_TUNISIA
Param2Val10=ISLANG_ARABIC_OMAN
Param2Val11=ISLANG_ARABIC_YEMEN
Param2Val12=ISLANG_ARABIC_SYRIA
Param2Val13=ISLANG_ARABIC_JORDAN
Param2Val14=ISLANG_ARABIC_LEBANON
Param2Val15=ISLANG_ARABIC_KUWAIT
Param2Val16=ISLANG_ARABIC_UAE
Param2Val17=ISLANG_ARABIC_BAHRAIN
Param2Val18=ISLANG_ARABIC_QATAR
Param2Val19=ISLANG_AFRIKAANS
Param2Val20=ISLANG_AFRIKAANS_STANDARD
Param2Val21=ISLANG_ALBANIAN
Param2Val22=ISLANG_ALBANIAN_STANDARD
Param2Val23=ISLANG_BASQUE
Param2Val24=ISLANG_BASQUE_STANDARD
Param2Val25=ISLANG_BULGARIAN
Param2Val26=ISLANG_BULGARIAN_STANDARD
Param2Val27=ISLANG_BELARUSIAN
Param2Val28=ISLANG_BELARUSIAN_STANDARD
Param2Val29=ISLANG_CATALAN
Param2Val30=ISLANG_CATALAN_STANDARD
Param2Val31=ISLANG_CHINESE
Param2Val32=ISLANG_CHINESE_TAIWAN
Param2Val33=ISLANG_CHINESE_PRC
Param2Val34=ISLANG_CHINESE_HONGKONG
Param2Val35=ISLANG_CHINESE_SINGAPORE
Param2Val36=ISLANG_CROATIAN
Param2Val37=ISLANG_CROATIAN_STANDARD
Param2Val38=ISLANG_CZECH
Param2Val39=ISLANG_CZECH_STANDARD
Param2Val40=ISLANG_DANISH
Param2Val41=ISLANG_DANISH_STANDARD
Param2Val42=ISLANG_DUTCH
Param2Val43=ISLANG_DUTCH_STANDARD
Param2Val44=ISLANG_DUTCH_BELGIAN
Param2Val45=ISLANG_ENGLISH
Param2Val46=ISLANG_ENGLISH_UNITEDSTATES
Param2Val47=ISLANG_ENGLISH_UNITEDKINGDOM
Param2Val48=ISLANG_ENGLISH_AUSTRALIAN
Param2Val49=ISLANG_ENGLISH_CANADIAN
Param2Val50=ISLANG_ENGLISH_NEWZEALAND
Param2Val51=ISLANG_ENGLISH_IRELAND
Param2Val52=ISLANG_ENGLISH_SOUTHAFRICA
Param2Val53=ISLANG_ENGLISH_JAMAICA
Param2Val54=ISLANG_ENGLISH_CARIBBEAN
Param2Val55=ISLANG_ENGLISH_BELIZE
Param2Val56=ISLANG_ENGLISH_TRINIDAD
Param2Val57=ISLANG_ESTONIAN
Param2Val58=ISLANG_ESTONIAN_STANDARD
Param2Val59=ISLANG_FAEROESE
Param2Val60=ISLANG_FAEROESE_STANDARD
Param2Val61=ISLANG_FARSI
Param2Val62=ISLANG_FARSI_STANDARD
Param2Val63=ISLANG_FINNISH
Param2Val64=ISLANG_FINNISH_STANDARD
Param2Val65=ISLANG_FRENCH
Param2Val66=ISLANG_FRENCH_STANDARD
Param2Val67=ISLANG_FRENCH_BELGIAN
Param2Val68=ISLANG_FRENCH_CANADIAN
Param2Val69=ISLANG_FRENCH_SWISS
Param2Val70=ISLANG_FRENCH_LUXEMBOURG
Param2Val71=ISLANG_GERMAN
Param2Val72=ISLANG_GERMAN_STANDARD
Param2Val73=ISLANG_GERMAN_SWISS
Param2Val74=ISLANG_GERMAN_AUSTRIAN
Param2Val75=ISLANG_GERMAN_LUXEMBOURG
Param2Val76=ISLANG_GERMAN_LIECHTENSTEIN
Param2Val77=ISLANG_GREEK
Param2Val78=ISLANG_GREEK_STANDARD
Param2Val79=ISLANG_HEBREW
Param2Val80=ISLANG_HEBREW_STANDARD
Param2Val81=ISLANG_HUNGARIAN
Param2Val82=ISLANG_HUNGARIAN_STANDARD
Param2Val83=ISLANG_ICELANDIC
Param2Val84=ISLANG_ICELANDIC_STANDARD
Param2Val85=ISLANG_INDONESIAN
Param2Val86=ISLANG_INDONESIAN_STANDARD
Param2Val87=ISLANG_ITALIAN
Param2Val88=ISLANG_ITALIAN_STANDARD
Param2Val89=ISLANG_ITALIAN_SWISS
Param2Val90=ISLANG_JAPANESE
Param2Val91=ISLANG_JAPANESE_STANDARD
Param2Val92=ISLANG_KOREAN
Param2Val93=ISLANG_KOREAN_STANDARD
Param2Val94=ISLANG_KOREAN_JOHAB
Param2Val95=ISLANG_LATVIAN
Param2Val96=ISLANG_LATVIAN_STANDARD
Param2Val97=ISLANG_LITHUANIAN
Param2Val98=ISLANG_LITHUANIAN_STANDARD
Param2Val99=ISLANG_NORWEGIAN
Param2Val100=ISLANG_NORWEGIAN_BOKMAL
Param2Val101=ISLANG_NORWEGIAN_NYNORSK
Param2Val102=ISLANG_POLISH
Param2Val103=ISLANG_POLISH_STANDARD
Param2Val104=ISLANG_PORTUGUESE
Param2Val105=ISLANG_PORTUGUESE_BRAZILIAN
Param2Val106=ISLANG_PORTUGUESE_STANDARD
Param2Val107=ISLANG_ROMANIAN
Param2Val108=ISLANG_ROMANIAN_STANDARD
Param2Val109=ISLANG_RUSSIAN
Param2Val110=ISLANG_RUSSIAN_STANDARD
Param2Val111=ISLANG_SLOVAK
Param2Val112=ISLANG_SLOVAK_STANDARD
Param2Val113=ISLANG_SLOVENIAN
Param2Val114=ISLANG_SLOVENIAN_STANDARD
Param2Val115=ISLANG_SERBIAN
Param2Val116=ISLANG_SERBIAN_LATIN
Param2Val117=ISLANG_SERBIAN_CYRILLIC
Param2Val118=ISLANG_SPANISH
Param2Val119=ISLANG_SPANISH_TRADITIONALSORT
Param2Val120=ISLANG_SPANISH_MEXICAN
Param2Val121=ISLANG_SPANISH_MODERNSORT
Param2Val122=ISLANG_SPANISH_GUATEMALA
Param2Val123=ISLANG_SPANISH_COSTARICA
Param2Val124=ISLANG_SPANISH_PANAMA
Param2Val125=ISLANG_SPANISH_DOMINICANREPUBLIC
Param2Val126=ISLANG_SPANISH_VENEZUELA
Param2Val127=ISLANG_SPANISH_COLOMBIA
Param2Val128=ISLANG_SPANISH_PERU
Param2Val129=ISLANG_SPANISH_ARGENTINA
Param2Val130=ISLANG_SPANISH_ECUADOR
Param2Val131=ISLANG_SPANISH_CHILE
Param2Val132=ISLANG_SPANISH_URUGUAY
Param2Val133=ISLANG_SPANISH_PARAGUAY
Param2Val134=ISLANG_SPANISH_BOLIVIA
Param2Val135=ISLANG_SPANISH_ELSALVADOR
Param2Val136=ISLANG_SPANISH_HONDURAS
Param2Val137=ISLANG_SPANISH_NICARAGUA
Param2Val138=ISLANG_SPANISH_PUERTORICO
Param2Val139=ISLANG_SWEDISH
Param2Val140=ISLANG_SWEDISH_STANDARD
Param2Val141=ISLANG_SWEDISH_FINLAND
Param2Val142=ISLANG_THAI
Param2Val143=ISLANG_THAI_STANDARD
Param2Val144=ISLANG_TURKISH
Param2Val145=ISLANG_TURKISH_STANDARD
Param2Val146=ISLANG_UKRAINIAN
Param2Val147=ISLANG_UKRAINIAN_STANDARD
Param2Val148=ISLANG_VIETNAMESE
Param2Val149=ISLANG_VIETNAMESE_STANDARD
Param3Name=bFiltered
Param3Desc=Use one of the following constants to specify whether or not you want the specified language(s) filtered (excluded).
Param3Type=Combo
Param3Val1=TRUE
param3Val2=FALSE

[ComponentFilterOS]
SampleLine=ComponentFilterOS(szMedia, nUpperOS, nLowerOS, bFiltered)
Description=Filters file groups that are flagged for specified operating systems. By default, no operating systems are filtered. \n\n** Available in Professional Edition Only **
Param1Name=szMedia
Param1Desc=The name of the media being filtered.
Param1Dflt=MEDIA
Param2Name=nUpperOS
Param2Desc=The upper 32 bits of a 64-bit operating system identifier field. nUpperOS is currently not used. Enter zero in this parameter. No other value is allowed.
Param2Dflt=0
Param3Name=nLowerOS
Param3Desc=The lower 32 bits of a 64-bit operating system identifier field. nLowerOS specifies the operating system(s) you wish to filter. You can combine values using the bitwise OR operator ( | ).
Param3Type=EdCombo
Param3Val1=ISOSL_ALL
Param3Val2=ISOSL_WIN31
Param3Val3=ISOSL_WIN95
Param3Val4=ISOSL_NT351
Param3Val5=ISOSL_NT351_ALPHA
Param3Val6=ISOSL_NT351_MIPS
Param3Val7=ISOSL_NT40
Param3Val8=ISOSL_NT40_ALPHA
Param3Val9=ISOSL_NT40_MIPS
Param4Name=bEnable
Param4Desc=Specifies whether or not you want to filter the operating systems specified in nLowerOS. Use one of the following constants.
Param4Type=Combo
Param4Val1=TRUE
param4Val2=FALSE

[ComponentGetData]
SampleLine=ComponentGetData(szMedia, szComponent, nInfo, nvResult, svResult)
Description=Retrieves all available information on a component. If the specified media is for script-created components, some information cannot be retrieved.
Param1Name=szMedia
Param1Desc=The name of the media containing the component.
Param1Dflt=MEDIA
Param2Name=szComponent
Param2Desc=The name of the component whose information you wish to retrieve.
Param3Name=nInfo
Param3Desc=The type of information to retrieve.
Param3Type=Combo
Param3Val1=COMPONENT_FIELD_DESCRIPTION
Param3Val2=COMPONENT_FIELD_DISPLAYNAME
Param3Val3=COMPONENT_FIELD_FILENEED
Param3Val4=COMPONENT_FIELD_FTPLOCATION
Param3Val5=COMPONENT_FIELD_HTTPLOCATION
Param3Val6=COMPONENT_FIELD_IMAGE
Param3Val7=COMPONENT_FIELD_OVERWRITE
Param3Val8=COMPONENT_FIELD_MISC
Param3Val9=COMPONENT_FIELD_PASSWORD
Param3Val10=COMPONENT_FIELD_SELECTED
Param3Val11=COMPONENT_FIELD_SIZE
Param3Val12=COMPONENT_FIELD_STATUS
Param3Val13=COMPONENT_FIELD_DESTINATION
Param3Val14=COMPONENT_FIELD_CDROM_FOLDER
Param3Val15=COMPONENT_FIELD_VISIBLE
Param4Name=nvResult
Param4Desc=Stores a numeric query result.
Param5Name=svResult
Param5Desc=Stores a string query result.

[ComponentGetItemSize]
SampleLine=ComponentGetItemSize(szMedia, szComponent, nvSize)
Description=Determines the size in bytes of a component. Does not include sizes of subcomponents.
Param1Name=szMedia
Param1Desc=The name of the media containing the component.
Param1Dflt=MEDIA
Param2Name=szComponent
Param2Desc=The name of the component whose size you want to retrieve.
Param3Name=nvSize
Param3Desc=The component size in bytes is returned in nvSize.

[ComponentIsItemSelected]
SampleLine=ComponentIsItemSelected(szMedia, szComponent)
Description=Determines whether a specified component is selected.
Param1Name=szMedia
Param1Desc=The name of the media containing the component whose selection setting you want to test.
Param1Dflt=MEDIA
Param2Name=szComponent
Param2Desc=The name of the component whose selection setting you want to test.

[ComponentListItems]
SampleLine=ComponentListItems(szMedia, szComponent, listComponents)
Description=Enumerates all top-level components (if szComponent is "") or all subcomponents of the component specified in szComponent.
Param1Name=szMedia
Param1Desc=The media containing the components and/or subcomponents you wish to enumerate.
Param1Dflt=MEDIA
Param2Name=szComponent
Param2Desc=The component whose subcomponents you wish to enumerate. If szComponent is a null string (""), all top-level components are enumerated.
Param3Name=listComponents
Param3Desc=String list to receive the enumerated components or subcomponents.

[ComponentMoveData]
SampleLine=ComponentMoveData(szMedia, nvDisk, nReserved)
Description=Transfers/decompresses files from the file media library referenced by szMedia.
Param1Name=szMedia
Param1Desc=The media name of the file media library. Enter a null string ("") to reset internal structures before subsequent calls to ComponentMoveData.
Param1Dflt=MEDIA
Param2Name=nvDisk
Param2Desc=Contains the number of the last disk accessed by ComponentMoveData.
Param3Name=nReserved
Param3Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param3Dflt=0

[ComponentSelectItem]
SampleLine=ComponentSelectItem(szMedia, szComponent, bSelected)
Description=Sets a component's selection status to either selected or unselected.
Param1Name=szMedia
Param1Desc=The media name of the file media library or script-created component set containing the component whose selection status you wish to set.
Param2Name=szComponent
Param2Desc=The component whose selection status you wisth to set.
Param3Name=bSelected
Param3Desc=Specify whether the component is selected (TRUE) or unselected (FALSE).
Param3Type=Combo
Param3Val1=TRUE
Param3Val2=FALSE

[ComponentSetData]
SampleLine=ComponentSetData(szMedia, szComponent, nInfo, nData, szData)
Description=Sets field data for the specified component. If the media is for script-created components, some fields cannot be set.
Param1Name=szMedia
Param1Desc=The name of the media containing the component.
Param1Dflt=MEDIA
Param2Name=szComponent
Param2Desc=The name of the component whose field data you wish to set.
Param3Name=nInfo
Param3Desc=The type of information to be set.
Param3Type=Combo
Param3Val1=COMPONENT_FIELD_DESCRIPTION
Param3Val2=COMPONENT_FIELD_DISPLAYNAME
Param3Val3=COMPONENT_FIELD_FTPLOCATION
Param3Val4=COMPONENT_FIELD_HTTPLOCATION
Param3Val5=COMPONENT_FIELD_IMAGE
Param3Val6=COMPONENT_FIELD_OVERWRITE
Param3Val7=COMPONENT_FIELD_MISC
Param3Val8=COMPONENT_FIELD_SELECTED
Param3Val9=COMPONENT_FIELD_SIZE
Param3Val10=COMPONENT_FIELD_STATUS
Param3Val11=COMPONENT_FIELD_DESTINATION
Param3Val12=COMPONENT_FIELD_CDROM_FOLDER
Param3Val13=COMPONENT_FIELD_UNINSTALLABLE
Param3Val14=COMPONENT_FIELD_VISIBLE
Param4Name=nData
Param4Desc=The numeric data to be set.
Param4Type=EdCombo
Param4Val1=nData
Param4Val2=TRUE
Param4Val3=FALSE
Param4Val4=COMPONENT_VALUE_ALWAYSOVERWRITE
Param4Val5=COMPONENT_VALUE_SAMEORNEWERDATE
Param4Val6=COMPONENT_VALUE_NEWERDATE
Param4Val7=COMPONENT_VALUE_OLDERDATE
Param4Val8=COMPONENT_VALUE_SAMEORNEWERVERSION
Param4Val9=COMPONENT_VALUE_NEWERVERSION
Param4Val10=COMPONENT_VALUE_OLDERVERSION
Param4Val11=COMPONENT_VALUE_NEVEROVERWRITE
Param5Name=szData
Param5Desc=The string value to be set.

[ComponentSetTarget]
SampleLine=ComponentSetTarget(szMedia, szUserVar, szLocation)
Description=Associates a script variable with a user-defined variable in the Destination field of the Component Properties window. Call ComponentSetTarget before calling ComponentMoveData. Does not work with script-created components.
Param1Name=szMedia
Param1Desc=The name of the media for which you wish to set the target location.
Param1Dflt=MEDIA
Param2Name=szUserVar
Param2Desc=The user-defined variable entered in the Destination field of the Component Properties window. Enclose in quotes and include < > symbols: "<szVar>".
Param2Dflt="<szVar>"
Param3Name=szLocation
Param3Desc=The variable whose value you wish to associate with the szUserVar user-defined variable.

[ComponentSetupTypeEnum]
SampleLine=ComponentSetupTypeEnum(szMedia, listSetupTypes)
Description=Enumerates all setup types associated with the specified media. These setup types are defined by you in the IDE and stored in the file media library. Does not work with script-created components.
Param1Name=szMedia
Param1Desc=Enter the name of the media.
Param1Dflt=MEDIA
Param2Name=listSetupTypes
Param2Desc=String list to receive the enumerated setup types.

[ComponentSetupTypeGetData]
SampleLine=ComponentSetupTypeGetData(zMedia, szSetupType, nInfo, nvResult, svResult)
Description=Retrieves data associated with a specified setup type created in the InstallShield IDE. You can then use this data for any purpose.
Param1Name=szMedia
Param1Desc=Enter the name of the media containing the setup type.
Param1Dflt=MEDIA
Param2Name=szSetupType
Param2Desc=Enter the name of the setup type.
Param3Name=nInfo
Param3Desc=Indicate the kind of setup type information you want to get.
Param3Type=Combo
Param3Val1=SETUPTYPE_INFO_DESCRIPTION
Param3Val2=SETUPTYPE_INFO_DISPLAYNAME
Param4Name=nvResult
Param4Desc=Receives a numeric result when nInfo gets numerica data.
Param5Name=svResult
Param5Desc=Receives a string result when nInfo when nInfo gets string data.

[ComponentSetupTypeSet]
SampleLine=ComponentSetupTypeSet(szMedia, szSetupType)
Description=Selects the specified setup type in the file media library referenced by szMedia. You can use ComponentSetupTypeSet to override the selection made in a setup type dialog such as SdSetupTypeEx.
Param1Name=szMedia
Param1Desc=The name of the media containing the setup type you are setting.
Param1Dflt=MEDIA
Param2Name=szSetupType
Param2Desc=The setup type you are selecting.

[ComponentTotalSize]
SampleLine=ComponentTotalSize(szMedia, szComponent, bIncludeSubComp, bTargetSize)
Description=Retrieves the total size in bytes of the selected components, including all subcomponents, if specified.
Param1Name=szMedia
Param1Desc=The name of the media containing the components.
Param1Dflt=MEDIA
Param2Name=szComponent
Param2Desc=The name of the component. Place a null string ("") here to retrieve the size of the entire media.
Param3Name=bIncludeSubComp
Param3Desc=Indicate if you wish to include subcomponents in the size total (TRUE) or not (FALSE).
Param3Type=Combo
Param3Val1=TRUE
Param3Val2=FALSE
Param4Name=bTargetSize
Param4Desc=Specify whether you want to retrieve the original (before including in library) size (TRUE) or the size inside the file media library (FALSE).
Param4Type=Combo
Param4Val1=TRUE
Param4Val2=FALSE

[ComponentValidate]
SampleLine=ComponentValidate(szMedia, szComponent, szPassword)
Description=Validates the password for a component or for the entire file media library. Does not work with script-created components.
Param1Name=szMedia
Param1Desc=The name of the media.
Param1Dflt=MEDIA
Param2Name=szComponent
Param2Desc=The name of the component. If szComponent is a null string (""), validates the password for the file media library.
Param3Name=szPassword
Param3Desc=The password. Component passwords are set in the Component Properties window. File media library passwords are set in the Advanced Build Type property sheet of the Media Build wizard.

[ConfigAdd]
SampleLine=ConfigAdd(szKey, szValue, szRefKey, nOptions)
Description=Adds a statement to the Config.sys file. You can specify the position of the statement relative to a reference key, add the statement as the first or last line of the file, or replace an existing line in the file.
Param1Name=szKey
Param1Desc=The reference key (statement) you are adding to the Config.sys file.
Param2Name=szValue
Param2Desc=The value of the reference key you are adding to the Config.sys file.
Param3Name=szRefKey
Param3Desc=The reference key relative to which you are adding szKey in the Config.sys file. If you enter a null string, the line is added as the first or last line in the file depending on the nOptions constant you use.
Param4Name=nOptions
Param4Desc=Specify whether you are adding the line before or after the line containing the reference key, or whether you are replacing an existing line.
Param4Type=Combo
Param4Val1=BEFORE
Param4Val2=AFTER
Param4Val3=REPLACE

[ConfigDelete]
SampleLine=ConfigDelete(szKey)
Description=Removes all lines containing the reference key you specify in the szKey parameter. You must use the ConfigFileLoad function to call the Config.sys file into memory before calling ConfigDelete.
Param1Name=szKey
Param1Desc=The reference key that identifies the line or lines you want to delete. Common reference keys include HIMEM.SYS, FILES, and STACKS.

[ConfigFileLoad]
SampleLine=ConfigFileLoad(szConfigFile)
Description=Loads a copy of the specified Config.sys file into memory so that advanced configuration file functions can operate on the file.
Param1Name=szConfigFile
Param1Desc=The fully qualified path and filename of the Config.sys file you are loading into memory. If you enter a null string, InstallShield loads the default configuration file.

[ConfigFileSave]
SampleLine=ConfigFileSave(szBackupFile)
Description=Saves the configuration file loaded in memory back to the disk. Depending on the value passed in the szBackupFile parameter, ConfigFileSave may also create a backup of the original (unchanged) configuration file.
Param1Name=szBackupFile
Param1Desc=The backup filename to use to back up the original file you loaded into memory. This parameter must contain only the filename -- do not include path information here.

[ConfigFind]
SampleLine=ConfigFind(szRefKey, svResult, nOptions)
Description=Searches a batch file for the reference key contained in szRefKey. If you specify the RESTART constant in nOptions, the first occurrence of the reference key's value is returned. You can find subsequent occurrences of szRefKey by repeatedly calling this function with nOptions set to CONTINUE.
Param1Name=szRefKey
Param1Desc=The reference key you are searching for. You must use only acceptable reference keys. If the reference key is a filename and you do not specify a file extension, all file extensions are included in the search.
Param2Name=svResult
Param2Desc=ConfigFind returns the value of the reference key that was found in the configuration file in svResult. 
Param3Name=nOptions
Param3Desc=Indicate whether to start the search from the beginning of the file, or to continue from where the previous search was terminated.
Param3Type=Combo
Param3Val1=RESTART
Param3Val2=CONTINUE
Param3Val3=COMMAND

[ConfigGetFileName]
SampleLine=ConfigGetFileName(svFileName)
Description=Retrieves the fully qualified path and filename of the default Config.sys file. InstallShield automatically stores the fully qualified path and filename of the Config.sys file that executed when the target system was started.
Param1Name=svFileName
Param1Desc=ConfigGetFileName returns the fully qualified path and filename of the default configuration file in svFileName.

[ConfigGetInt]
SampleLine=ConfigGetInt(szKey, nvValue)
Description=Retrieves a specified integer value from the file loaded in memory. ConfigGetInt retrieves values from commands that have only one value to the right of the equal sign.
Param1Name=szKey
Param1Desc=The reference key of the statement from which you want to retrieve the integer value.
Param2Name=nvValue
Param2Desc=ConfigGetInt returns the integer value of the reference key in nvValue.

[ConfigMove]
SampleLine=ConfigMove(szMove, szRefKey, nOptions)
Description=Moves a line relative to a reference line in a configuration file. You can specify whether to move the line before or after the reference line. You can also move the line to the first or last line position in a file.
Param1Name=szMove
Param1Desc=The line you are moving as a string.
Param2Name=szRefKey
Param2Desc=The key that identifies the reference line used to position the line you are moving. 
Param3Name=nOptions
Param3Desc=Identify where you want to move the line specified by szMove.
Param3Type=Combo
Param3Val1=BEFORE
Param3Val2=AFTER

[ConfigSetFileName]
SampleLine=ConfigSetFileName(szConfigFile)
Description=Specifies the fully qualified path and filename of the file you want to use as the default Config.sys file. However, you usually do not need to call this function because InstallShield automatically determines the path and filename of the default Config.sys file used on the target system.
Param1Name=szConfigFile
Param1Desc=The fully qualified path and filename of the file you want to use as the default Config.sys file.

[ConfigSetInt]
SampleLine=ConfigSetInt(szKey, nValue)
Description=Changes a specified integer value in the Config.sys file loaded in memory. ConfigSetInt sets values for commands that have only one value to the right of the equal sign (=). It does not work on a command that has more than one value.
Param1Name=szKey
Param1Desc=The reference keyword for the integer value you want to set.
Param2Name=nValue
Param2Desc=The integer value you want to set.

[CopyBytes]
SampleLine=CopyBytes(svDest, nIndexDest, svSrc, nIndexSrc, nCount)
Description=Copies a specified number of bytes from one string to another string. You can specify the offset indexes into the source and destination strings. \n\n** Available in Professional Edition Only ** 
Param1Name=svDest
Param1Desc=The destination string.
Param2Name=nIndexDest
Param2Desc=The offset index (starting point) in the destination string where the bytes are to be added. The first byte in the string is at position 0.
Param3Name=svSrc
Param3Desc=The source string.
Param4Name=nIndexSrc
Param4Desc=The offset index (starting point) in the source string where bytes begin to be copied from. The first byte in the string is at position 0.
Param5Name=nCount
Param5Desc=The total number of bytes you want to copy from szSrc to svDest.

[CopyFile]
SampleLine=CopyFile(szSrcFile, szTargetFile)
Description=Copies a file from the source folder to the target folder. InstallShield uses the SRCDIR and TARGETDIR system variables as the source and target paths for the function.
Param1Name=szSrcFile
Param1Desc=Enter the name of the file you are copying from the source folder (as specified by the current value of SRCDIR). You cannot specify a path in this parameter, only the filename. You can use wild card characters to copy groups of files.
Param2Name=szTargetFile
Param2Desc=Enter the name you are giving to the file you are copying to TARGETDIR. If you specify a wild card in szSrcFile, szTargetFile is essentially ignored. You cannot specify a path in this parameter, only the filename.

[CreateDir]
SampleLine=CreateDir(szDirPath)
Description=Creates one or more subfolders on the target drive. You can use a path that contains subfolders on more than one level, such as C:\PROGRAMS\WINAPPS\MYAPP. If any subfolder in the path does not exist, CreateDir creates it.
Param1Name=szDirPath
Param1Desc=Enter the fully qualified path of the subdirectory(ies) you are creating.

[CreateFile]
SampleLine=CreateFile(nvFileHandle, szPath, szFileName)
Description=Creates a new file. If a file with the same name exists, CreateFile overwrites it. Before you create a new file with CreateFile, you must set the file mode with OpenFileMode.
Param1Name=nvFileHandle
Param1Desc=After CreateFile creates the file, it returns the file handle for the new file in this parameter.
Param2Name=szPath
Param2Desc=Enter the fully qualified path of the subfolder where you want to create the new file.
Param3Name=szFileName
Param3Desc=Enter the name of the file you are creating.

[CreateProgramFolder]
SampleLine=CreateProgramFolder(szFolderName)
Description=Creates a new folder on the target system. If the folder already exists, it is highlighted. Under Windows 95, the folder is created in the Start Programs menu. When creating program groups under Windows NT, call the ProgDefGroupType function first to establish the group as either COMMON or PERSONAL.
Param1Name=szFolderName
Param1Desc=Enter the name of the folder you want to add to the target system.

[CtrlClear]
SampleLine=CtrlClear(szDialogName, nControlID)
Description=Clears the contents of various controls. CtrlClear deletes the contents of a single- or multi-line edit field, static text field, single- or multi-selection list box, or the edit field of a combo box in a custom dialog box. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of the dialog box that contains the control you want to delete.
Param2Name=nControlID
Param2Desc=The control ID of a valid custom dialog box.

[CtrlDir]
SampleLine=CtrlDir(szDialogName, nControlID, szDir, nItems)
Description=Fills a list box or a combo box control with a file listing that matches the specified path or filename in szDir. You can include names of files, subfolders, and disk drives in the listing. The CtrlDir function works only with custom dialog boxes. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid dialog box.
Param2Name=nControlID
Param2Desc=The resource ID of the list box or combo box control.
Param3Name=szDir
Param3Desc=The fully qualified path or filename, which may include wild card characters.
Param4Name=nItems
Param4Desc=Specify the type of listing you want to display in the control.
Param4Type=Combo
Param4Val1=DLG_DIR_FILE
Param4Val2=DLG_DIR_DIRECTORY
Param4Val3=DLG_DIR_DRIVE

[CtrlGetCurSel]
SampleLine=CtrlGetCurSel(szDialogName, nControlID, svText)
Description=Retrieves the currently selected item from a single selection list box or combo box control in a custom dialog box. Use the CtrlGetMultCurSel function to retrieve items from multi-selection list boxes. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid custom dialog box that contains the item you want to retrieve.
Param2Name=nControlID
Param2Desc=The resource ID of the single selection list box or combo box control.
Param3Name=svText
Param3Desc=CtrlGetCurSel returns the currently selected item from the control in svText.

[CtrlGetMLEText]
SampleLine=CtrlGetMLEText(szDialogName, nControlID, listID)
Description=Retrieves the contents of a multi-line edit field control in a custom dialog box. InstallShield places each line of the multi-line edit field into a valid string list identified by listID. Use the CtrlGetText function to retrieve the contents of a single line edit field control. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid custom dialog box that contains the multi-line edit control whose contents you want to retrieve.
Param2Name=nControlID
Param2Desc=The resource ID of the multi-line edit control.
Param3Name=listID
Param3Desc=The name of a valid string list where you want to place the lines of the edit field.

[CtrlGetMultCurSel]
SampleLine=CtrlGetMultCurSel(szDialogName, nControlID, listID)
Description=Retrieves the currently selected lines from a multi-selection list box control. Each selected line of the multi-selection list box is placed into a string list identified by listID. To retrieve selected text from a single selection list box control, use the CtrlGetCurSel function. The CtrlGetMultCurSel function is only for use with custom dialog boxes. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid custom dialog box that contains the list box control whose contents you want to retrieve.
Param2Name=nControlID
Param2Desc=The resource ID of the multi-line edit control.
Param3Name=listID
Param3Desc=The name of a valid string list where you want to place the lines of the list box.

[CtrlGetState]
SampleLine=CtrlGetState(szDialogName, nControlID)
Description=Gets the current state of a check box or radio button control from a custom dialog box. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of the dialog box that contains the control.
Param2Name=nControlID
Param2Desc=The resource ID of the check box or radio button control whose state you want to retrieve.

[CtrlGetSubCommand]
SampleLine=CtrlGetSubCommand(szDialogName)
Description=Retrieves the action performed on a control in a custom dialog box. For example, CtrlGetSubCommand can tell you if the user single-clicked or double-clicked a list box or combo box control. It can also tell you when the contents of an edit field have changed. Advanced developers can use the CmdGetHwndDlg function to handle additional information. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid custom dialog box.

[CtrlGetText]
SampleLine=CtrlGetText(szDialogName, nControlID, svText)
Description=Retrieves the text from an edit field, static text field, or button control of a custom dialog box. To retrieve the text from multi-line edit field controls, use the CtrlGetMLEText function. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid dialog box that contains the field or control whose text you want to retrieve.
Param2Name=nControlID
Param2Desc=The resource ID of the edit field, static text field, or push button control.
Param3Name=svText
Param3Desc=CtrlGetText returns the text from the control or field in svText. 

[CtrlPGroups]
SampleLine=CtrlPGroups(szDialogName, nControlID)
Description=Places a list of existing program folders in a list box or combo box control. The CtrlPGroups function is only for use with custom dialog boxes. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid custom dialog box that contains the control you want to use.
Param2Name=nControlID
Param2Desc=The resource ID of a valid list box or combo box control.

[CtrlSelectText]
SampleLine=CtrlSelectText(szDialogName, nControlID)
Description=Selects all the text in an edit field or the edit field of a combo box. If the control is a multi-line edit field, this function selects all the text on all lines. The CtrlSelectText function is only for use with custom dialog boxes. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid dialog box that contains the edit field you want to select.
Param2Name=nControlID
Param2Desc=The resource ID of the edit field or combo box control you want to select.

[CtrlSetCurSel]
SampleLine=CtrlSetCurSel(szDialogName, nControlID, szText)
Description=Searches the specified list or combo box control for a string. If found, CtrlSetCurSel selects (highlights) the item. Use the CtrlSetMultCurSel function for multi-selection list box and combo box controls. The CtrlSetCurSel function is only for use with custom dialog boxes. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid custom dialog box that contains the control you want to find.
Param2Name=nControlID
Param2Desc=The resource ID of the control that contains the string you are searching for.
Param3Name=szText
Param3Desc=The string you are searching for. If CtrlSetCurSel finds the item, it is selected (highlighted).

[CtrlSetFont]
SampleLine=CtrlSetFont(szDialogName, hFont, nControlID)
Description=Specifies a font for a control in a custom dialog box. Call CtrlSetFont from within the case DLG_INIT: section of the dialog box message processing loop. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid dialog box.
Param2Name=hFont
Param2Desc=A valid handle to a font created by the GetFont function.
Param3Name=nControlID
Param3Desc=The resource ID of the control in the dialog box whose font you want to set. To set the font for all the controls in the dialog box, enter ALLCONTROLS in this parameter.
Param3Type=EdCombo
Param3Val1=nControlID
Param3Val2=ALLCONTROLS

[CtrlSetList]
SampleLine=CtrlSetList(szDialogName, nControlID, listID)
Description=Places the contents of a string list into the specified single- or multi-selection list box or combo box control. Any pre-existing contents are replaced with the items contained in listID. InstallShield places each element of the string list into each element of the list box or combo box control. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid dialog box that contains the list box or combo box.
Param2Name=nControlID
Param2Desc=The resource ID of the list box or combo box.
Param3Name=listID
Param3Desc=The name of a valid string list that contains the elements you want to copy into the list box or combo box control.

[CtrlSetMLEText]
SampleLine=CtrlSetMLEText(szDialogName, nControlID, listID)
Description=Sets the text of a multi-line edit box control. InstallShield separately places each string in listID into the multi-line edit box control. The CtrlSetMLEText function is only for use with custom dialog boxes. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid dialog box.
Param2Name=nControlID
Param2Desc=The resource ID of the multi-line edit box control in the dialog box.
Param3Name=listID
Param3Desc=The name of a valid string list that contains the elements you want to copy into the multi-line edit control.

[CtrlSetMultCurSel]
SampleLine=CtrlSetMultCurSel(szDialogName, nControlID, szText, nSelectFlag)
Description=Searches the specified multi-selection list or combo box control. If nSelectFlag is set to TRUE, CtrlSetMultCurSel selects (highlights) the item when it is found. The CtrlSetMultCurSel function is only for use with custom dialog boxes. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid custom dialog box.
Param2Name=nControlID
Param2Desc=The resource ID of the multi-selection list box control in the dialog box.
Param3Name=szText
Param3Desc=The string you are searching for.
Param4Name=nSelectFlag
Param4Desc=Either TRUE or FALSE, indicating whether you want to highlight an item when CtrlSetMultCurSel finds it. TRUE indicates you want the item highlighted. FALSE indicates you do not want the item highlighted.
Param4Type=Combo
Param4Val1=TRUE
Param4Val2=FALSE

[CtrlSetState]
SampleLine=CtrlSetState(szDialogName, nControlID, nState)
Description=Sets the current state of a check box or radio button control in a custom dialog box. You can set certain characteristics of radio buttons and check boxes when you create them using a resource or dialog editor. If you experience difficulties with the behavior of a button control, check the characteristics of the control in the editor. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid dialog box that contains the check box or radio button control. 
Param2Name=nControlID
Param2Desc=The resource ID of the check box or radio button control.
Param3Name=nState
Param3Desc=Specify the new state of the button control.
Param3Type=Combo
Param3Val1=BUTTON_CHECKED
Param3Val2=BUTTON_UNCHECKED

[CtrlSetText]
SampleLine=CtrlSetText(szDialogName, nControlID, szText)
Description=Sets the text of a single-line edit field, static text field, or button control in a custom dialog box. To set the text in multi-line edit fields, use the CtrlSetMLEText function. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid dialog box.
Param2Name=nControlID
Param2Desc=The resource ID of the single line edit field, static text field, or button control in a dialog box you are setting the text for.
Param3Name=szText
Param3Desc=The text you want to place in the control.

[DefineDialog]
SampleLine=DefineDialog(szDialogName, hInstance, szDLLName, nDialog, szDialog, nReserved, hwndOwner, lStyle)
Description=Registers a custom dialog with InstallShield when you need more control than that offered by the EzDefineDialog function. DefineDialog does not display the dialog. The dialog is displayed when you call WaitOnDialog. Under normal circumstances you can use the EzDefineDialog function in place of the DefineDialog function. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of the custom dialog you want to register. The dialog's name is case-sensitive -- you must use it exactly as you specify in this parameter.
Param2Name=hInstance
Param2Desc=The Windows' instance. In most cases, you can enter zero in this parameter. To obtain the hInstance from a DLL, call the Microsoft Windows API LoadLibrary.
Param3Name=szDLLName
Param3Desc=The fully qualified path and filename of the DLL that contains the dialog resource. Advanced developers specifying their own instance using the hInstance parameter enter a null string here.
Param4Name=nDialog
Param4Desc=The dialog's resource ID if you use a number to identify the resource (rather than a string). This parameter is used only when szDialog is a null string ("").
Param5Name=szDialog
Param5Desc=The dialog's resource ID if you use a string to identify the resource (rather than a number). If this parameter is a null string, InstallShield uses nDialog to identify the dialog resources. 
Param6Name=nReserved
Param6Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param6Dflt=0
Param7Name=hwndOwner
Param7Desc=The window handle of the owner. InstallShield uses the HWND_INSTALL constant to set the owner of the dialog to the InstallShield main window.
Param7Dflt=HWND_INSTALL
Param8Name=lStyle
Param8Desc=The level of control you want when responding to dialog box commands. In most cases, use the DLG_MSG_STANDARD constant here.
Param8Type=Combo
Param8Val1=DLG_MSG_STANDARD
Param8Val2=DLG_CENTERED

[DeinstallSetReference]
SampleLine=DeinstallSetReference(szReferenceFile)
Description=Specifies a reference file to be checked before the uninstallation process begins. If the file is in use, uninstallation will not proceed. The end user must close the application that is using this file and start uninstallation again.
Param1Name=szReferenceFile
Param1Desc=Enter the fully-qualified name of the file to be checked by unInstallShield before uninstallation begins. This file can be either an EXE or a DLL that only the application to be uninstalled uses.

[DeinstallStart]
SampleLine=DeinstallStart(szDefLogPath, svLogFile, szKey, lStyle)
Description=Enables unInstallShield functionality. DeinstallStart creates the application uninstallation key and initializes creation of or appending to the uninstall log file.
Param1Name=szDefLogPath
Param1Desc=Enter the fully qualified path where you want the log file to reside. InstallShield will create the filename and append it to the path you provide. If the path does not exist, it is created for you when possible.
Param2Name=svLogFile
Param2Desc=If svLogfile is a null string, InstallShield creates a new uninstall log file. If you provide the name of a valid existing log file, InstallShield will append to it.
Param3Name=szKey
Param3Desc=Enter the name of the application uninstallation key to be created.
Param4Name=lStyle
Param4Desc=Enter zero in this parameter. No other value is allowed.
Param4Dflt=0

[Delay]
SampleLine=Delay(nSeconds)
Description=Delays the execution of the setup script by a specified number of seconds. Other tasks running simultaneously with InstallShield proceed normally while InstallShield is delayed.
Param1Name=nSeconds
Param1Desc=Enter the number of seconds you want to delay program execution.

[DeleteDir]
SampleLine=DeleteDir(szDir, nFlag)
Description=Deletes a subfolder. Depending on the value you use in the nFlag parameter, you can delete a subfolder only if it is empty, delete a subfolder even if it contains files, or delete an entire root folder. Set the nFlag parameter with extreme caution.
Param1Name=szDir
Param1Desc=Enter the path and the name of the folder you want to delete.
Param2Name=nFlag
Param2Desc=Specify what you want the function to delete.
Param2Type=Combo
Param2Val1=ALLCONTENTS
Param2Val2=ONLYDIR
Param2Val3=ROOT

[DeleteFile]
SampleLine=DeleteFile(szFile)
Description=Deletes one or more files in the target folder. The system variable TARGETDIR contains the target folder. DeleteFile cannot delete read-only, hidden, or system files. This function may not work if you try to delete files on a network system without the appropriate file-deletion rights.
Param1Name=szFile
Param1Desc=Enter the filename of the file(s) you want to delete. You must use the TARGETDIR system variable to tell DeleteDir the target folder path. Use wild card characters to delete more than one file.

[DeleteFolderIcon]
SampleLine=DeleteFolderIcon(szProgramFolder, szItemName)
Description=Removes a program icon from a folder.
Param1Name=szProgramFolder
Param1Desc=Enter the name of the folder that contains the icon you want to remove.
Param2Name=szItemName
Param2Desc=Enter the name of the icon you want to delete.

[DeleteProgramFolder]
SampleLine=DeleteProgramFolder(szFolderName)
Description=Deletes a program folder and its contents, including all folders that reside under the specified folder. It cannot delete the Programs folder.
Param1Name=szFolderName
Param1Desc=Enter the name of the folder you want to remove.

[DialogSetInfo]
SampleLine=DialogSetInfo(nInfoType, szInfoString, nParameter)
Description=Changes certain elements of some script dialog (Sd) boxes. It can change the bitmap image displayed in the dialog, the style of check box used, and the units for displaying available hard drive space. \n\n** Available in Professional Edition Only ** 
Param1Name=nInfoType
Param1Desc=Specifies the type of dialog information to be set.
Param1Type=Combo
Param1Val1=DLG_INFO_USEDECIMAL
Param1Val2=DLG_INFO_KUNITS
Param1Val3=DLG_INFO_ALTIMAGE
Param1Val4=DLG_INFO_CHECKSELECTION
Param2Name=szInfoString
Param2Desc=This string points to the alternate bitmap image used when DLG_INFO_ALTIMAGE is used.
Param3Name=nParameter
Param3Desc=This parameter works with the nInfoType parameter to control various aspects of the dialog.
Param3Type=Combo
Param3Val1=CHECKBOX
Param3Val2=CHECKBOX95
Param3Val3=CHECKLINE
Param3Val4=CHECKMARK
Param3Val5=TRUE
Param3Val6=FALSE
Param3Val7=-1

[Disable]
SampleLine=Disable(nConstant)
Description=Disables specific user interface objects, graphical capabilities, or functionality in the setup program. When you disable a user interface object, it is either not visible or is grayed out.
Param1Name=nConstant
Param1Desc=Specify the object or event you want to disable.
Param1Type=Combo
Param1Val1=BACKBUTTON
Param1Val2=BACKGROUND
Param1Val3=BACKGROUNDCAPTION
Param1Val4=BITMAP256COLORS
Param1Val5=CANCEL
Param1Val6=DIALOGCACHE
Param1Val7=FEEDBACK_FULL
Param1Val8=HOURGLASS
Param1Val9=INDVFILESTATUS
Param1Val10=LOGGING
Param1Val11=NEXTBUTTON
Param1Val12=SELFREGISTERBATCH
Param1Val13=STATUS

[Do]
SampleLine=Do(nOperation)
Description=Executes the currently defined EXIT and HELP handlers. The Do function gives you greater control over launching Help- and Exit-related events, which normally rely upon the user pressing the F1 key (HELP), the F3 key (EXIT), or the Cancel push button (EXIT).
Param1Name=nOperation
Param1Desc=Specify the type of operation you want to perform.
Param1Type=Combo
Param1Val1=EXIT
Param1Val2=HELP
Param1Val3=SELFREGISTRATIONPROCESS

[DoInstall]
SampleLine=DoInstall(szInsFile, szCmdLine, lWait)
Description=Launches another setup script. The new session runs at the same time as the currently running script. \n\n** Available in Professional Edition Only **
Param1Name=szInsFile
Param1Desc=The fully qualified path and filename of the .ins compiled script file you want to launch.
Param2Name=szCmdLine
Param2Desc=A string containing an InstallShield command line. You can specify any valid startup InstallShield command line here.
Param3Name=lWait
Param3Desc=Indicate whether or not you want your setup script to wait for the the called setup script to complete before continuing.
Param3Type=Combo
Param3Val1=NOWAIT
Param3Val2=WAIT

[Enable]
SampleLine=Enable(nConstant)
Description=Individually enables specific user interface objects, graphical capabilities, or functionality. When you enable a user interface object, it appears. You can enable a user interface object at any point in the script.
Param1Name=nConstant
Param1Desc=Specify the object or event you want to enable.
Param1Type=Combo
Param1Val1=BACKBUTTON
Param1Val2=BACKGROUND
Param1Val3=BACKGROUNDCAPTION
Param1Val4=BITMAP256COLORS
Param1Val5=CORECOMPONENTHANDLING
Param1Val6=DEFWINDOWMODE
Param1Val7=DIALOGCACHE
Param1Val8=FULLWINDOWMODE
Param1Val9=HOURGLASS
Param1Val10=INDVFILESTATUS
Param1Val11=LOGGING
Param1Val12=NEXTBUTTON
Param1Val13=SELFREGISTERBATCH
Param1Val14=STATUS
Param1Val15=STATUSDLG
Param1Val16=STATUSOLD

[EndDialog]
SampleLine=EndDialog(szDialogName)
Description=Closes a custom dialog box. It removes the dialog box and initiates the dialog closing process. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=The name of a valid dialog box you want to close.

[EnterDisk]
SampleLine=EnterDisk(szMsg, szTagFile)
Description=Displays a dialog box that prompts you to insert the next disk. EnterDisk recognizes the correct disk by searching the disk for a tag file (szTagFile). If the disk does not contain the tag file, an error message prompts the user to enter the correct disk.
Param1Name=szMsg
Param1Desc=The message that prompts the user to insert the proper disk.
Param2Name=szTagFile
Param2Desc=The name of the tag file expected on the inserted disk. If the file is not found, a message is displayed that asks the user to insert the correct disk.

[ExistsDir]
SampleLine=ExistsDir(szPath)
Description=Checks for the existence of a specified folder on the target system.
Param1Name=szPath
Param1Desc=Enter the fully qualified path of the folder you are looking for on the target system.

[ExistsDisk]
SampleLine=ExistsDisk(szDisk)
Description=Checks for the existence of a specified disk drive on the target system.
Param1Name=szDisk
Param1Desc=Enter the letter of the disk you are checking for.

[ExitProgMan]
SampleLine=ExitProgMan(bSaveGroup)
Description=Exits a shell that was launched as a secondary shell during the setup. ExitProgMan is for use only on Windows 3.1 and Windows NT 3.5 systems.
Param1Name=bSaveGroup
Param1Desc=Specify whether you want the Program Manager to save its group information when the program exits.
Param1Type=Combo
Param1Val1=TRUE
Param1Val2=FALSE

[EzBatchAddPath]
SampleLine=EzBatchAddPath(szKey, szPath, szRefDir, nPosition)
Description=Modifies the PATH statement in the default Autoexec.bat file by adding a subfolder. You can also use EzBatchAddPath to modify other environment variables.
Param1Name=szKey
Param1Desc=The name of the environment variable you want to modify. For example, if you are modifying the PATH statement, enter "PATH" here.
Param2Name=szPath
Param2Desc=The subfolder you are adding to the environment variable.
Param3Name=szRefDir
Param3Desc=The reference key relative to which you are adding the subfolder in szPath. If this is a null string, the subfolder is added as the first or last subfolder in the path statement, depending on the value you enter in nPosition.
Param4Name=nPosition
Param4Desc=Specify where to add the subfolder in the environment variable statement. The values of szRefDir and nPosition work together to specify where the subfolder is added.
Param4Type=Combo
Param4Val1=BEFORE
Param4Val2=AFTER

[EzBatchAddString]
SampleLine=EzBatchAddString(szLine, szRefKey, nOptions)
Description=Adds a line of text to the default Autoexec.bat file. Specify the position of the line you are adding in reference to another statement in the file.
Param1Name=szLine
Param1Desc=The line of text you want to add to the file.
Param2Name=szRefKey
Param2Desc=The reference key relative to which you want to add szLine in the Autoexec.bat file.
Param3Name=nOptions
Param3Desc=EzBatchAddString searches the batch file for the reference key and places the contents of szLine before or after the line containing the reference key depending on the constant you enter in the nOptions parameter.
Param3Type=Combo
Param3Val1=BEFORE
Param3Val2=AFTER
Param3Val3=COMMAND
Param3Val4=REPLACE

[EzBatchReplace]
SampleLine=EzBatchReplace(szNewString)
Description=Replaces an existing line of text in the default Autoexec.bat file.
Param1Name=szNewString
Param1Desc=The new string you are inserting to replace an existing line in the file.

[EzConfigAddDriver]
SampleLine=EzConfigAddDriver(szDriver, szRefKey, nPosition)
Description=Adds a device driver statement to the default Config.sys file. You can specify the position of the device statement relative to another device driver.
Param1Name=szDriver
Param1Desc=The fully qualified path and name of the driver you want to add to the file. If the driver already exists in one or more places in the configuration file, this function replaces only the last occurrence of the line containing the driver.
Param2Name=szRefKey
Param2Desc=The name of the device driver relative to which you are adding szDriver.
Param3Name=nPosition
Param3Desc=Specify if you want szDriver added before or after the szRefKey.
Param3Type=Combo
Param3Val1=BEFORE
Param3Val2=AFTER

[EzConfigAddString]
SampleLine=EzConfigAddString(szLine, szRefKey, nOptions)
Description=Adds a line of text to the default Config.sys file. You can specify the position of the line you add in reference to another statement in the file.
Param1Name=szLine
Param1Desc=The line of text you want to add to the Config.sys file.
Param2Name=szRefKey
Param2Desc=The reference key relative to which you want to position szLine in the Config.sys file.
Param3Name=nOptions
Param3Desc=Specify whether you want szLine placed before or after the line containing szRefKey.
Param3Type=Combo
Param3Val1=BEFORE
Param3Val2=AFTER

[EzConfigGetValue]
SampleLine=EzConfigGetValue(szRefKey, nvValue)
Description=Retrieves the numeric value of a parameter from the default Config.sys file. You can use EzConfigGetValue to retrieve the values of parameters such as FILES and BUFFERS.
Param1Name=szRefKey
Param1Desc=The name of the parameter whose value you are retrieving.
Param2Name=nvValue
Param2Desc=EzConfigGetValue returns the numeric value in nvValue.

[EzConfigSetValue]
SampleLine=EzConfigSetValue(szRefKey, nValue)
Description=Sets the value of a command in the Config.sys file. EzConfigSetValue automatically determines the Config.sys file used at bootup time and makes the appropriate modifications. InstallShield automatically determines the fully qualified path and filename of the default Config.sys file.
Param1Name=szRefKey
Param1Desc=The command whose value you want to change or add in the Config.sys file. If InstallShield cannot find the key in the Config.sys file, it is added for you.
Param2Name=nValue
Param2Desc=The new value of szRefKey you want to set.

[EzDefineDialog]
SampleLine=EzDefineDialog(szDialogName, szDLL, szID, nID)
Description=Defines a dialog to InstallShield. Use EzDefineDialog in place of DefineDialog when the DefineDialog function's added capability is not needed. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=A unique name for the dialog. InstallShield uses this name to identify and register the dialog in the script.
Param2Name=szDLL
Param2Desc=The fully qualified name of the DLL that contains the dialog box you are registering. If you enter a null string (""), InstallShield will look in _ISUSER.DLL and _ISRES.DLL for the dialog.
Param3Name=szID
Param3Desc=The name (identifier) of the dialog box. Enter the string identifier only. If the dialog box has a numeric identifier, enter a null string ("") in this parameter.
Param4Name=nID
Param4Desc=The numeric identifier of the dialog box. Only enter the numeric identifier. If the dialog box has a string identifier, enter zero in this parameter.

[FileCompare]
SampleLine=FileCompare(szFileName1, szFileName2, nCompareFlag)
Description=Compares the size, dates, or versions of two files. \n\n** Available in Professional Edition Only ** 
Param1Name=szFileName1
Param1Desc=The name of the first file you want to compare. InstallShield uses the SRCDIR system variable as the path of the file.
Param2Name=szFileName2
Param2Desc=The name of the second file you want to compare. InstallShield uses the TARGETDIR system variable as the path of the file.
Param3Name=nCompareFlag
Param3Desc=Specify the options you want to include in the comparison.
Param3Type=Combo
Param3Val1=COMPARE_SIZE
Param3Val2=COMPARE_DATE
Param3Val3=COMPARE_VERSION

[FileDeleteLine]
SampleLine=FileDeleteLine(szFileName, nStartLineNum, nEndLineNum)
Description=Deletes a range of lines (including the starting line and ending line) from a text file using a starting and ending line number. This function works on line-oriented text files with lines whose length is less than 512 bytes (Windows 3.1) or 1,024 bytes (Windows NT 3.5 and Windows 95). FileDeleteLine will not work with binary files. \n\n** Available in Professional Edition Only ** 
Param1Name=szFileName
Param1Desc=The name of the file that contains the lines you want to delete. InstallShield uses the SRCDIR system variable as the path of the file.
Param2Name=nStartLineNum
Param2Desc=The number of the first line you want to delete.
Param3Name=nEndLineNum
Param3Desc=The number of the last line for deletion. You can set this parameter to DELETE_EOF. This action causes InstallShield to delete from nStartLineNum to the end of the file.
Param3Dflt=DELETE_EOF

[FileGrep]
SampleLine=FileGrep(szFileName, szSearchStr, svReturnLine, nvLineNumber, nFlag)
Description=Searches a file for the specified string. If found, the entire line and the line number are returned. The search is not case-sensitive. FileGrep works on line-oriented text files with lines whose length is less than 512 bytes (Windows 3.1) or 1,024 bytes (Windows NT 3.5 and Windows 95). FileGrep will not work with binary files. \n\n** Available in Professional Edition Only ** 
Param1Name=szFileName
Param1Desc=The name of the file you want to search. InstallShield uses the SRCDIR system variable as the path of the file.
Param2Name=szSearchStr
Param2Desc=The string you are searching for in the file. 
Param3Name=svReturnLine
Param3Desc=FileGrep uses svReturnLine to return the line where szSearchStr was found.
Param4Name=nvLineNumber
Param4Desc=FileGrep uses nvLineNumber to return the line number where szSearchStr was found. Line numbering starts on line 0.
Param5Name=nFlag
Param5Desc=Specify the flag you want to set.
Param5Type=Combo
Param5Val1=CONTINUE
Param5Val2=RESTART

[FileInsertLine]
SampleLine=FileInsertLine(szFileName, szInsertLine, nLineNumber, nInsertFlag)
Description=Inserts or replaces a line using line numbers. You can use FileInsertLine with FileGrepFileGrep, which finds lines and returns their line numbers. FileInsertLine works on line-oriented text files with lines with a length less than 512 bytes (Windows 3.x) or 1,024 bytes (Windows NT and Windows 95). \n\n** Available in Professional Edition Only **  
Param1Name=szFileName
Param1Desc=The name of the file you want to insert szInsertLine into. FileInsertLine uses the SRCDIR system variable as the path of the file.
Param2Name=szInsertLine
Param2Desc=The string you are inserting into the file. 
Param3Name=nLineNumber
Param3Desc=The line number where you want to insert szInsertLine. The first possible line number is 0.
Param4Name=nInsertFlag
Param4Desc=Specify where you want to place szInsertLine. 
Param4Type=Combo
Param4Val1=BEFORE
Param4Val2=AFTER
Param4Val3=APPEND
Param4Val4=REPLACE

[FindAllDirs]
SampleLine=FindAllDirs(szDir, nOp, listDirs)
Description=Searches an entire disk or folder structure and returns a string list of subfolder names. If nOp is INCLUDE_SUBDIR, the search starts at the folder specified by szDir and continues searching the subfolder structure.
Param1Name=szDir
Param1Desc=The name of the folder where you want to begin the search.
Param2Name=nOp
Param2Desc=Specify if you want the subfolders of szDir included in the list.
Param2Type=Combo
Param2Val1=EXCLUDE_SUBDIR
Param2Val2=INCLUDE_SUBDIR
Param3Name=listDirs
Param3Desc=The name of a valid string list where the folder names will be placed.

[FindAllFiles]
SampleLine=FindAllFiles(szDir, szFileName, svResult, nOp)
Description=Searches an entire subfolder structure and returns the name of the first file with a particular file specification. If the argument passed to nOp is RESET, InstallShield starts searching at the folder specified in the szDir parameter and continues searching the subfolder structure until it finds a file matching szFileName. If nOp equals CONTINUE, the search continues where it left off the last time the function was called.
Param1Name=szDir
Param1Desc=Enter the name of the folder where you want to start searching for the files.
Param2Name=szFileName
Param2Desc=Enter the file specification you want to search for. You can use wild card characters in this parameter.
Param3Name=svResult
Param3Desc=InstallShield sets this parameter to the fully qualified path of the first matching file it found. If the function fails, InstallShield does not alter this parameter.
Param4Name=nOp
Param4Desc=Specify whether you want the search to start at the beginning of the folder in szDir or if you want it to resume from the point where it stopped after a previous search.
Param4Type=Combo
Param4Val1=CONTINUE
Param4Val2=RESET

[FindFile]
SampleLine=FindFile(szPath, szFileName, svResult)
Description=Searches a subfolder for a specified file. InstallShield returns the first file that matches the file specification in the svResult parameter.
Param1Name=szPath
Param1Desc=Enter the name of the subfolder you want to search. Only the subfolder you specify in this parameter is searched.
Param2Name=szFileName
Param2Desc=Enter the name of the file you want to search for. You can use wild card characters in this parameter.
Param3Name=svResult
Param3Desc=Returns the name of the first file that matches szFileName. This parameter contains the filename only -- it does not contain the path of the file.

[FindWindow]
SampleLine=FindWindow(szClassName, szWinName)
Description=Gets a handle to a window that you specify by window class and window name. If you know the class and window name of an application, you can get its handle. You can use the window handle to send messages directly to the window. FindWindow is for advanced developers. \n\n** Available in Professional Edition Only **
Param1Name=szClassName
Param1Desc=The name of the class to which the window belongs.
Param2Name=szWinName
Param2Desc=The Window caption (title) whose handle you want to retrieve.

[GetDir]
SampleLine=GetDir(szPath, svDir)
Description=Gets the name of a folder, including the filename, if applicable, from a specified full path. GetDir extracts the folder path and the filename and discards the drive letter. The function does return the initial backslash.
Param1Name=szPath
Param1Desc=Enter the fully qualified path that you want to extract the folder from.
Param2Name=svDir
Param2Desc=Returns the path and filename, less the drive letter.

[GetDisk]
SampleLine=GetDisk(szPath, svDisk)
Description=Extracts the disk drive letter and colon from a fully qualified path and filename, if included.
Param1Name=szPath
Param1Desc=Enter the full path (including the colon) that contains the drive letter you want.
Param2Name=svDisk
Param2Desc=Returns the drive letter, including the colon.

[GetDiskSpace]
SampleLine=GetDiskSpace(szDrive)
Description=Determines how much free disk space is available on a particular drive. The maximum value returned is 2 GB. Free disk space greater than that still returns as 2 GB.
Param1Name=szDrive
Param1Desc=Enter the letter of the drive you want to check, including the colon. Even if szDrive is only a drive letter and not a path, it still must include a colon.

[GetEnvVar]
SampleLine=GetEnvVar(szParameter, svValue)
Description=Retrieves the current value of an environment variable.
Param1Name=szParameter
Param1Desc=Enter the name of the variable you want to retrieve a value for.
Param2Name=svValue
Param2Desc=Returns the current value of the environment variable.

[GetExtents]
SampleLine=GetExtents(nvDx, nvDy)
Description=Retrieves the dimensions of a screen in pixels. This function returns the width of the screen, in pixels, in the nvDx parameter, and the height, in pixels, in the nvDy parameter. For example, a standard VGA monitor returns 640 in nvDx and 480 in nvDy.
Param1Name=nvDx
Param1Desc=Returns the width of the screen in pixels.
Param2Name=nvDy
Param2Desc=Returns the height of the screen in pixels.

[GetFileInfo]
SampleLine=GetFileInfo(szPathName, nType, nvResult, svResult)
Description=Retrieves the access rights, date, time, and/or size information from a file. In each GetFileInfo statement, you can ask for only one of these items of data. For example, to get the date and time information for a file, type one GetFileInfo call asking for the date, and a second asking for the time.
Param1Name=szPathName
Param1Desc=Enter the fully qualified path and name of the file for which you want to retrieve the information.
Param2Name=nType
Param2Desc=Specify what type of file information you want. If the information you want is a number, GetFileInfo places it in nvResult. If the information is a string, GetFileInfo places it in svResult.
Param2Type=Combo
Param2Val1=FILE_ATTRIBUTE
Param2Val2=FILE_DATE
Param2Val3=FILE_SIZE
Param2Val4=FILE_TIME
Param3Name=nvResult
Param3Desc=If the information you request is a number, it appears in this variable.
Param4Name=svResult
Param4Desc=If you ask for the time or date, they appear as string values in svResult. Time is returned as HH:MM:SS. The date is returned as YYYY\MM\DD.

[GetFolderNameList]
SampleLine=GetFolderNameList(szFolderName, listItemsID, listSubFoldersID)
Description=Retrieves a list of program item shortcuts and a list of subfolder names from a specified folder. GetFolderNameList is recommended for use with Windows NT version 4.0 and Windows 95. Under Windows 3.x and Windows NT 3.51, GetFolderNameList returns listItemsID but ignores listSubFoldersID. On Windows NT, call ProgDefGroupType first to establish the group as either COMMON or PERSONAL. By default, InstallShield searches under COMMON.
Param1Name=szFolderName
Param1Desc=The name of the folder to be queried.
Param1Type=EdCombo
Param1Val1=szFolderName
Param1Val2=FOLDER_DESKTOP
Param1Val3=FOLDER_STARTMENU
Param1Val4=FOLDER_STARTUP
Param2Name=listItemsID
Param2Desc=Returns a list with the names of the program items in szFolderName.
Param3Name=listSubFoldersID
Param3Desc=Returns a list with the names of the subfolders in szFolderName.

[GetFont]
SampleLine=GetFont(szFontName, nPointSize, nAttributes)
Description=Builds a font and retrieves its handle. You can use the font handle to specify the font used by the controls in a custom dialog box.
Param1Name=szFontName
Param1Desc=The font face name you want to build.
Param2Name=nPointSize
Param2Desc=The point size of the font you want to build.
Param3Name=nAttributes
Param3Desc=Specify the style of the font you are building. You can combine style options using the bitwise OR operator ( | ).
Param3Type=EdCombo
Param3Val1=STYLE_BOLD
Param3Val2=STYLE_ITALIC
Param3Val3=STYLE_NORMAL
Param3Val4=STYLE_UNDERLINE

[GetGroupNameList]
SampleLine=GetGroupNameList(listID)
Description=Retrieves all the program folder names that currently exist in the shell. GetGroupNameList returns the folder names in the form of a list. If the target system has a shell other than the Windows 95 shell or Program Manager, this function may return an error.
Param1Name=listID
Param1Desc=The name of a valid string list. InstallShield places a folder name in each element of this list.

[GetItemNameList]
SampleLine=GetItemNameList(szGroup, listID)
Description=Retrieves all the program items from a specified program folder. If the target system has a shell other than the Windows 95 shell or Program Manager, this function may return an error.
Param1Name=szGroup
Param1Desc=The name of the folder whose program items you want to retrieve.
Param2Name=listID
Param2Desc=The name of a valid string list. InstallShield uses this list to return the names of each program icons in the folder defined in szGroup.

[GetLine]
SampleLine=GetLine(nvFileHandle, svLine)
Description=Reads a line of text from an open text file. Before you can use GetLine, you must open the file using the OpenFile function. The first time you use GetLine it reads the first line of text from the file. After reading a line, GetLine repositions the file pointer to the next line. The second time you use GetLine, it reads the second line, and so forth. GetLine strips the carriage return and line feed characters from the end of the line it returns. 
Param1Name=nvFileHandle
Param1Desc=Enter the name of the handle that opens the file.
Param2Name=svLine
Param2Desc=Enter a string variable large enough to hold the lines of text you are receiving.

[GetMemFree]
SampleLine=GetMemFree()
Description=Determines how much memory is available to an application running under Microsoft Windows. Because Microsoft Windows is a virtual memory system, this function does not return the actual physical memory (called RAM), but the memory available to a Windows application. Use the GetSystemInfo function to determine the amount of actual physical memory available on the target system.
Param1Desc=No parameters.

[GetMode]
SampleLine=GetMode()
Description=Determines if Microsoft Windows is running in standard mode or enhanced mode. You can also use the GetSystemInfo function to retrieve the version of Windows on the target system.
Param1Desc=No parameters.

[GetProfInt]
SampleLine=GetProfInt(szFile, szSectionName, szKeyName, nvValue)
Description=Retrieves a profile string from the specified INI file. GetProfInt works like the Windows API GetPrivateProfileString. \n\n** Available in Professional Edition Only ** 
Param1Name=szFile
Param1Desc=The name of the INI file you want to search that contains szSectionName and szKeyName. If you do not specify a path, InstallShield searches for the INI file in the Windows folder. 
Param2Name=szSectionName
Param2Desc=A string that identifies the section name in the INI file you are searching through. Do not include section name delimiting brackets ( [] ). 
Param3Name=szKeyName
Param3Desc=A string that contains the key name identifier you are looking for.
Param4Name=nvValue
Param4Desc=GetProfInt returns an integer value in nvValue. The integer can be a maximum of 2 bytes in length. If the integer in the INI file is greater than 65,535, GetProfInt cannot return an accurate value. This is a Microsoft Windows system limitation.

[GetProfString]
SampleLine=GetProfString(szFile, szSectionName, szKeyName, svResult)
Description=Retrieves a profile string from the specified INI file. GetProfString works like the Windows API GetPrivateProfileString. \n\n** Available in Professional Edition Only ** 
Param1Name=szFile
Param1Desc=The fully qualified path of the INI file that contains the szSectionName and szKeyName you are searching for. If you do not specify a path in this parameter, InstallShield looks for the file in the Windows folder.
Param2Name=szSectionName
Param2Desc=The name of the application section of the INI file you want to search through. Do not include section name delimiting brackets ( [] ). 
Param3Name=szKeyName
Param3Desc=The name of the key you want to retrieve from the application section. If you enter a null string, InstallShield returns all the application's key names (separated by NULL characters) in svResult.
Param4Name=svResult
Param4Desc=GetProfString returns the value retrieved from the INI file in svResult.

[GetSystemInfo]
SampleLine=GetSystemInfo(nItem, nvResult, svResult)
Description=Gets information about the target system. In each GetSystemInfo function call, you can only get one piece of information returned.
Param1Name=nItem
Param1Desc=Specify the information you want to retrieve from the target system.
Param1Type=Combo
Param1Val1=BASEMEMORY
Param1Val2=BOOTUPDRIVE
Param1Val3=CDROM
Param1Val4=COLORS
Param1Val5=CPU
Param1Val6=DATE
Param1Val7=DISK_TOTALSPACE
Param1Val8=DRIVE
Param1Val9=ENVSPACE
Param1Val10=EXTENDEDMEMORY
Param1Val11=FREEENVSPACE
Param1Val12=ISTYPE
Param1Val13=LANGUAGE
Param1Val14=LANGUAGE_DRV
Param1Val15=MOUSE
Param1Val16=MOUSE_DRV
Param1Val17=NETWORK
Param1Val18=NETWORK_DRV
Param1Val19=OS
Param1Val20=OSMAJOR
Param1Val21=OSMINOR
Param1Val22=PARALLEL
Param1Val23=SERIAL
Param1Val24=SHARE
Param1Val25=TIME
Param1Val26=VIDEO
Param1Val27=VOLUMELABEL
Param1Val28=WINMAJOR
Param1Val29=WINMINOR
Param1Val30=WIN32SINSTALLED
Param1Val31=WIN32SMAJOR
Param1Val32=WIN32SMINOR
Param2Name=nvResult
Param2Desc=When the data you want is numeric, GetSystemInfo returns it in this parameter.
Param3Name=svResult
Param3Desc=When the data you want is alphanumeric, GetSystemInfo returns it here.

[GetValidDrivesList]
SampleLine=GetValidDrivesList(listID, nDriveType, nMinDriveSpace)
Description=Retrieves a list of all the drives attached to the target system that meet a certain criterion. This criterion includes the type of drive and the minimum amount of space on the drive. 
Param1Name=listID
Param1Desc=The name of a valid string list. This list will contain the valid drive letters when the function is completed.
Param2Name=nDriveType
Param2Desc=Specify the type of drive you are searching for.
Param2Type=Combo
Param2Val1=FIXED_DRIVE
Param2Val2=REMOTE_DRIVE
Param2Val3=REMOVEABLE_DRIVE
Param2Val4=CDROM_DRIVE
Param3Name=nMinDriveSpace
Param3Desc=The minimum amount of disk space in bytes that must be free on the drive to allow the drive to be included in the return list. If nMinDriveSpace is less than zero, GetValidDrivesList will not check for the minimum space on the drive.

[GetWindowHandle]
SampleLine=GetWindowHandle(nHwndFlag)
Description=Gets the handle for the main window of the setup.
Param1Name=nHwndFlag
Param1Desc=HWND_INSTALL is the only constant available for this parameter. It specifies that you want to retrieve the window handle to InstallShield's main window.

[Handler]
SampleLine=Handler(nObject, Label)
Description=Creates custom handlers for events such as the Help accelerator key (F1), the Cancel push button, and the Exit accelerator key (F3).
Param1Name=nObject
Param1Desc=Specify the event for which you want to execute a custom handler.
Param1Type=Combo
Param1Val1=EXIT
Param1Val2=HELP
Param2Name=Label
Param2Desc=The name of the label to which you want the program to jump if the specified push button or accelerator key is pressed. Do not define this label as a numeric value or as a string variable. 

[HIWORD]
SampleLine=HIWORD(nValue)
Description=Retrieves the high-order word from the 32-bit integer value you specify in nValue.
Param1Name=nValue
Param1Desc=The value you want to convert.

[InstallationInfo]
SampleLine=InstallationInfo(szCompany, szProduct, szVersion, szProductKey)
Description=Specifies a company name, a product name, a product version number, and an application executable filename. The information you specify is used to create an application information key and a per application paths key for the program you are installing.
Param1Name=szCompany
Param1Desc=Enter the name of your company. InstallShield uses szCompany to create a \<company> key under the [HKEY_LOCAL_MACHINE]\Software key in the registry.
Param2Name=szProduct
Param2Desc=Enter the name of the product you are installing. InstallShield uses szProduct to create a \<product> key under the [HKEY_LOCAL_MACHINE]\Software\<company> registry key. szProduct is also inserted into the welcome dialog box.
Param3Name=szVersion
Param3Desc=Enter the version number of the product. InstallShield uses szVersion to create a \<version> key under the [HKEY_LOCAL_MACHINE]\Software\<company>\<product> key in the registry.
Param4Name=szProductKey
Param4Desc=Your application's main executable filename. Used to create a per application paths key under [HKEY_LOCAL_MACHINE]\Software\Microsoft\Windows\CurrentVersion\App Paths.

[Is]
SampleLine=Is(nIsFlag, szIsData)
Description=Retrieves commonly needed information for the script.
Param1Name=nIsFlag
Param1Desc=Specify the type of information you want to retrieve. You can specify only one constant in each Is function call.
Param1Type=Combo
Param1Val1=DIR_WRITEABLE
Param1Val2=FILE_EXISTS
Param1Val3=FILE_LOCKED
Param1Val4=FILE_WRITEABLE
Param1Val5=MATH_COPROCESSOR
Param1Val6=PATH_EXISTS
Param1Val7=USER_ADMINISTRATOR
Param1Val8=VALID_PATH
Param1Val9=WINDOWS_SHARED
Param2Name=szIsData
Param2Desc=The information you pass to this parameter varies depending on the constant used in the nIsFlag parameter.

[LaunchApp]
SampleLine=LaunchApp(szCommand, szCmdLine)
Description=Allows you to launch another application program from within the script. The launched application and the script run simultaneously. \n\n** Available in Professional Edition Only ** 
Param1Name=szCommand
Param1Desc=Enter the fully qualified path and filename of the application to launch. If you do not specify a path, InstallShield searches the current folder, the Windows folder, the Windows System folder, and the folders in the PATH environment variable.
Param2Name=szCmdLine
Param2Desc=Enter the command line parameters (if there are any) you want to pass to the launched application. Otherwise, enter a null string.

[LaunchAppAndWait]
SampleLine=LaunchAppAndWait(szProgram, szCmdLine, lWait)
Description=Launches an application, szProgram, with the command line szCmdLine. Unlike LaunchApp, this function allows the script to wait at this statement until the launched application terminates. \n\n** Available in Professional Edition Only ** 
Param1Name=szProgram
Param1Desc=Enter the fully qualified path and filename of the application launch. If you do not specify the path and filename, InstallShield may not be able to launch the application.
Param2Name=szCmdLine
Param2Desc=Enter the command line parameters you want to pass to the launched application. Otherwise, enter a null string. Do not enter a string literal - use a variable to specify the command line and pass the variable in this parameter.
Param3Name=lWait
Param3Desc=Specify whether or not you want InstallShield to wait for the launched application to terminate before it continues with the next line in the setup script.
Param3Type=Combo
Param3Val1=NOWAIT
Param3Val2=WAIT

[ListAddItem]
SampleLine=ListAddItem(listID, nItem, nPlacementFlag)
Description=Adds a numeric element to a number list before or after the current element. Use the ListGetFirstItem, ListGetNextItem, and ListSetIndex functions to traverse the list.
Param1Name=listID
Param1Desc=The name of a valid number list.
Param2Name=nItem
Param2Desc=The numeric element you want to add to the list.
Param3Name=nPlacementFlag
Param3Desc=Specifies where to place nItem with respect to the current element.
Param3Type=Combo
Param3Val1=AFTER
Param3Val2=BEFORE

[ListAddString]
SampleLine=ListAddString(listID, szString, nPlacementFlag)
Description=Adds a string to a string list before or after the current element. The ListGetFirstString, ListGetNextString, and ListSetIndex functions allow you to traverse the list and make any element the current element. 
Param1Name=listID
Param1Desc=Enter the name of a valid string list.
Param2Name=szString
Param2Desc=Enter the string you want to add to the list.
Param3Name=nPlacementFlag
Param3Desc=Specify where you want to put szString with respect to the current element. The string you are adding to the list will go either before or after the current element.
Param3Type=Combo
Param3Val1=AFTER
Param3Val2=BEFORE

[ListCount]
SampleLine=ListCount(listID)
Description=Determines how many string or numeric elements a specified list contains.
Param1Name=listID
Param1Desc=The name of a valid string or number list.

[ListCreate]
SampleLine=ListCreate(nListType)
Description=Builds an empty string or number list.
Param1Name=nListType
Param1Desc=Specify the type of list you want to build.
Param1Type=Combo
Param1Val1=NUMBERLIST
Param1Val2=STRINGLIST

[ListCurrentItem]
SampleLine=ListCurrentItem(listID, nvItem)
Description=Retrieves the current element from the number list you specify in listID. You can also use the ListGetFirstItem and ListGetNextItem functions to traverse the list and make any element the current element. 
Param1Name=listID
Param1Desc=Enter the name of a valid number list whose current element you want to retrieve.
Param2Name=nvItem
Param2Desc=Contains the number of the current element in the list returned by the function.

[ListCurrentString]
SampleLine=ListCurrentString(listID, svString)
Description=Retrieves the current element from the string list you specify in listID. You can also use the ListGetFirstString and ListGetNextString functions to traverse the list and make any element the current element.
Param1Name=listID
Param1Desc=Enter the name of a valid string list whose current element you want to retrieve.
Param2Name=svString
Param2Desc=Contains the number of the current element in the list returned by the function.

[ListDeleteItem]
SampleLine=ListDeleteItem(listID)
Description=Removes the current element from the number list you specify in listID. You can also use the ListGetFirstItem and ListGetNextItem functions to traverse the list and make any element the current element.
Param1Name=listID
Param1Desc=Enter the name of a valid number list whose current element you want to remove.

[ListDeleteString]
SampleLine=ListDeleteString(listID)
Description=Removes the current element from the string list you specify in listID. You can also use the ListGetFirstString and ListGetNextString functions to traverse the list and make any element the current element.
Param1Name=listID
Param1Desc=Enter the name of a valid string list whose current element you want to remove.

[ListDestroy]
SampleLine=ListDestroy(listID)
Description=Removes a string or number list you identify in listID. This function destroys the contents of the list and the list itself. Once you destroy a list, do not use that listID with any list function.
Param1Name=listID
Param1Desc=Enter the name of the string or number list you want to destroy.

[ListFindItem]
SampleLine=ListFindItem(listID, nItem)
Description=Searches for a specific element in a number list. This function begins its search at the current element and continues down through the list from that point. If you want to start the search from the beginning of the list, use the ListGetFirstItem function. When ListFindItem finds the element, it becomes the current element in the list.
Param1Name=listID
Param1Desc=Enter the name of a valid number list whose elements you want to search.
Param2Name=nItem
Param2Desc=Enter the item you are searching for in the list.

[ListFindString]
SampleLine=ListFindString(listID, szString)
Description=Searches for a specified element in a string list. This function begins its search at the current element and continues from that point. If you want to start the search from the beginning of the string list, use the ListGetFirstString function. When ListFindString finds the string, it becomes the current element in the list. This function performs a case-sensitive comparison of the strings.
Param1Name=listID
Param1Desc=Enter the name of a valid string list whose elements you want to search.
Param2Name=szString
Param2Desc=Enter the string you are searching for in the list. InstallShield performs a case-sensitive comparison.

[ListGetFirstItem]
SampleLine=ListGetFirstItem(listID, nvItem)
Description=Retrieves the first element in a number list. The first item becomes the current element in the list.
Param1Name=listID
Param1Desc=Enter the name of a valid number list whose first element you want to retrieve.
Param2Name=nvItem
Param2Desc=Contains the first element of the number list returned by this function.

[ListGetFirstString]
SampleLine=ListGetFirstString(listID, svString)
Description=Retrieves the first element in a string list. The first string becomes the current element in the list.
Param1Name=listID
Param1Desc=Enter the name of a valid string list whose first element you want to retrieve.
Param2Name=svString
Param2Desc=Contains the first element of the string list returned by this function.

[ListGetNextItem]
SampleLine=ListGetNextItem(listID, nvItem)
Description=Retrieves the item after the current element in a number list. The retrieved item becomes the current element in the list.
Param1Name=listID
Param1Desc=Enter the name of a valid number list whose element you want to retrieve.
Param2Name=nvItem
Param2Desc=Contains the item after the current element in the number list. This item becomes the current element in the list.

[ListGetNextString]
SampleLine=ListGetNextString(listID, svString)
Description=Retrieves the element after the current element in a string list. The retrieved element becomes the current element in the list.
Param1Name=listID
Param1Desc=Enter the name of a valid string list whose element you want to retrieve.
Param2Name=svString
Param2Desc=Contains the string after the current element of the string list. This string becomes the current element in the list.

[ListReadFromFile]
SampleLine=ListReadFromFile(listID, szFile)
Description=Reads a text file into a list. Once you load a text file into a list, you can use it for various functions in the setup, such as displaying a README file at the end of the setup, or writing a string list to the disk using the ListWriteToFile function. This function gives you an easy way to load an entire file into a list, rather than building the list one item at a time.
Param1Name=listID
Param1Desc=Enter the name of a valid empty string list created with the ListCreate function. This function reads the file and dumps each line of the file into each element of the string list.
Param2Name=szFile
Param2Desc=Enter the fully qualified name of the file you are creating the list from in this parameter.

[ListSetCurrentItem]
SampleLine=ListSetCurrentItem(listID, nItem)
Description=Updates the value of the current element in a number list to the value in nItem.
Param1Name=listID
Param1Desc=Enter the name of a valid number list whose current element you want to update.
Param2Name=nItem
Param2Desc=Enter the numeric value you want to replace the current element with.

[ListSetCurrentString]
SampleLine=ListSetCurrentString(listID, szString)
Description=Updates the current element in the string list identified by listID to be equal to szString.
Param1Name=listID
Param1Desc=Enter the name of a valid string list whose current element you want to update.
Param2Name=szString
Param2Desc=Enter the string you want to replace the current element with.

[ListSetIndex]
SampleLine=ListSetIndex(listID, nIndex)
Description=Makes a specific element in a string or number list the current element using an index. You can also use constants to traverse a list an element at a time or to jump to the beginning or end of a list. By using indexes to access items in a list, ListSetIndex allows you to treat numeric and string lists as arrays. Index numbers start at zero (0).
Param1Name=listID
Param1Desc=Enter the name of a valid list (either string or item) whose current element you want to update.
Param2Name=nIndex
Param2Desc=Enter the number of the location you want to set as the current location. The numbering convention for this parameter begins with zero (0). You can also enter one of the constants listed.
Param2Type=Combo
Param2Val1=LISTFIRST
Param2Val2=LISTLAST
Param2Val3=LISTNEXT
Param2Val4=LISTPREV

[ListWriteToFile]
SampleLine=ListWriteToFile(listID, szFileName)
Description=Writes a string list into a text file on the disk. Without this function you must write the list one element at a time into the text file. This function detects the newline characters at the end of each element and uses the characters as delimiters for each string in the list. This function operates on string lists and text files only.
Param1Name=listID
Param1Desc=Enter the name of a valid string list you would like to write into a file.
Param2Name=szFileName
Param2Desc=Enter the fully qualified path and name of the file you are creating on the disk to accept the list elements.

[LongPathFromShortPath]
SampleLine=LongPathFromShortPath(svPath)
Description=Converts a short filename to its equivalent long filename.
Param1Name=svPath
Param1Desc=Enter the short filename that you want to convert. When you call the function, the long filename is returned in this variable.

[LongPathToQuote]
SampleLine=LongPathToQuote(svPath, nParameter)
Description=Places double quotation marks around long filenames. Add double quotation marks to long filenames that contain spaces before passing the long filenames to the command line. You must remove the double quotation marks from long filenames before converting them to short filenames using the LongPathToShortPath function.
Param1Name=svPath
Param1Desc=Enter the long filename that you want to convert. When you call the function, the converted filename is returned in this variable.
Param2Name=nParameter
Param2Desc=Determines whether the quotation marks are added to the long path or removed from the long path.
Param2Type=Combo
Param2Val1=TRUE
Param2Val2=FALSE

[LongPathToShortPath]
SampleLine=LongPathToShortPath(svPath)
Description=Converts a long filename to its equivalent short filename. Short filenames are compatible with 16-bit programs such as NOTEPAD.EXE or MVIEWER2.EXE. 16-bit programs cannot accept long filenames.
Param1Name=svPath
Param1Desc=Enter the long filename that you want to convert. When you call the function, the short filename is returned in this variable.

[LOWORD]
SampleLine=LOWORD(lValue)
Description=Extracts the low-order word (two bytes) from the 32-bit integer value specified by lValue. Advanced Microsoft Windows developers will recognize this as the LOWORD macro.
Param1Name=lValue
Param1Desc=Enter the 32-bit integer from which you want to extract the lower two bytes.

[MessageBeep]
SampleLine=MessageBeep(nReserved)
Description=Sounds a standard warning beep. You can use a message beep anywhere in the script. You may also find it useful to place message beeps at appropriate places in your script when you are testing your setup. When you use a message beep this way, it can tell you if and when the script reaches a certain point.
Param1Name=nReserved
Param1Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param1Dflt=0

[MessageBox]
SampleLine=MessageBox(szMsg, nType)
Description=Creates and displays a message box. The message box contains a message and an icon. You can change the contents of message box title bars with the SetDialogTitle function.
Param1Name=szMsg
Param1Desc=Enter the message you want to display.
Param2Name=nType
Param2Desc=Specify the type of message box to create and the type of icon you want to appear in the message box.
Param2Type=Combo
Param2Val1=INFORMATION
Param2Val2=SEVERE
Param2Val3=WARNING

[NumToStr]
SampleLine=NumToStr(svString, nValue)
Description=Converts a number to a string.
Param1Name=svString
Param1Desc=Returns the string equivalent of nValue.
Param2Name=nValue
Param2Desc=Enter the number you want to convert into a string.

[OpenFile]
SampleLine=OpenFile(nvFileHandle, szPath, szFileName)
Description=Opens an existing text file or binary file. Before you open the file, you must set the file mode using the OpenFileMode function. Once you open a text file you can use GetLine to read from the file or WriteLine to write to the file. Use ReadBytes and WriteBytes to read from and write to a binary file.
Param1Name=nvFileHandle
Param1Desc=Returns the file handle of the file you are opening. Use this handle to identify the file when you use other file-related InstallShield functions.
Param2Name=szPath
Param2Desc=Enter only the path of the file you want to open.
Param3Name=szFileName
Param3Desc=Enter only the name of the file you want to open.

[OpenFileMode]
SampleLine=OpenFileMode(nMode)
Description=Sets the mode of the file you want to open or create. The argument you pass as the nMode parameter sets the file mode to text file in read/write mode, text file in read-only mode, or binary file in read/write mode.
Param1Name=nMode
Param1Desc=Specify which mode you want to use to open a file.
Param1Type=Combo
Param1Val1=FILE_MODE_APPEND
Param1Val2=FILE_MODE_NORMAL
Param1Val3=FILE_MODE_BINARY
Param1Val4=FILE_MODE_BINARYREADONLY

[ParsePath]
SampleLine=ParsePath(svReturnString, szPath, nOperation)
Description=Separates a full path string into its component parts without using the string manipulation functions. \n\n** Available in Professional Edition Only ** 
Param1Name=svReturnString
Param1Desc=Contains the return value returned by this function based on the operation you specify.
Param2Name=szPath
Param2Desc=Enter the path you want to parse (separate).
Param3Name=nOperation
Param3Desc=Specify what you want to parse from the path.
Param3Type=Combo
Param3Val1=DIRECTORY
Param3Val2=DISK
Param3Val3=EXTENSION_ONLY
Param3Val4=FILENAME
Param3Val5=FILENAME_ONLY
Param3Val6=PATH

[PathAdd]
SampleLine=PathAdd(szDir, szRefDir, bRefDir, bPosition)
Description=Adds a search folder to the Path Buffer. Specify the position of the folder in relation to an existing folder in the Path Buffer. The folder can be added as the first or the last folder of the Path Buffer.
Param1Name=szDir
Param1Desc=Enter the folder you want to add to the Path Buffer. You can enter either the full path and folder, or the folder name only.
Param2Name=szRefDir
Param2Desc=Enter the folder name you are using as a reference to locate szDir in the path. You can enter either the fully qualified path or just the folder name.
Param3Name=bRefDir
Param3Desc=Specifies if szRefDir includes a fully qualified path or the folder name only. FULL indicates that szRefDir contains a fully qualified path. PARTIAL indicates that szRefDir contains the folder name only.
Param3Type=Combo
Param3Val1=FULL
Param3Val2=PARTIAL
Param4Name=bPosition
Param4Desc=Enter where you want szDir added to the path temporary buffer. BEFORE specifies that you want to add szDir before szRefDir. AFTER specifies that you want to add szDir after szRefDir.
Param4Type=Combo
Param4Val1=BEFORE
Param4Val2=AFTER

[PathDelete]
SampleLine=PathDelete(szDir, bDir)
Description=Deletes a specific folder in the Path Buffer. You can specify the name of the folder or enter a fully qualified path. This function has no relationship to the path statement in the Autoexec.bat file or the path environment variable. It acts only on the Path Buffer, which helps you build, modify, and manipulate search paths. Use the PathGet and PathSet functions to get and set the contents of the Path Buffer.
Param1Name=szDir
Param1Desc=Enter the folder you want to remove from the Path Buffer. You can enter either the full path and folder name, or the folder name only.
Param2Name=bDir
Param2Desc=Specify if the folder in szDir is a fully qualified path and folder or a folder name only.
Param2Val1=FULL
Param2Val2=PARTIAL

[PathFind]
SampleLine=PathFind(szDir, svResult, bDir, bSearch)
Description=Searches the Path Buffer for a specific folder. You can specify the folder with either a fully qualified path or the folder name only. This function has no relationship to the path statement in the Autoexec.bat file or the path environment variable. It acts only on the Path Buffer, which helps you build, modify, and manipulate search paths. You can then add this temporary path string to the Autoexec.bat file using the various Batch file functions.
Param1Name=szDir
Param1Desc=Enter the name of the folder you are searching for in the Path Buffer. You can enter either the fully qualified folder and path, or the folder name only.
Param2Name=svResult
Param2Desc=Contains the full folder and path found in the Path Buffer returned by the function.
Param3Name=bDir
Param3Desc=Specify whether the folder in szDir is a fully qualified path and folder or a folder name only.
Param3Type=Combo
Param3Val1=FULL
Param3Val2=PARTIAL
Param4Name=bSearch
Param4Desc=Specify if you want the function to continue the search from where it left off after the previous search, or to start the search from the beginning of the Path Buffer.
Param4Type=Combo
Param4Val1=CONTINUE
Param4Val2=RESTART

[PathGet]
SampleLine=PathGet(svString)
Description=Retrieves the path string currently stored in the temporary path string buffer. You can use Path functions to manipulate the Path Buffer. The PathGet function is used to retrieve the path string. This function has no relationship to the path statement in the Autoexec.bat file or the path environment variable. It acts on the Path Buffer only, which helps you build, modify, and manipulate search paths. You can then add this temporary path string to the Autoexec.bat file using the various Batch file functions.
Param1Name=svString
Param1Desc=Contains the contents of the temporary path string buffer returned by the function.

[PathMove]
SampleLine=PathMove(szDir, szRefDir, bDir, bRefDir, bPosition)
Description=Repositions a folder in the Path Buffer to another location. You can also use this function to position the folder relative to another folder or, as the first or the last item in the path string. Use the PathGet and PathSet functions to get and set contents of the Path Buffer. This function has no relation to the PATH statement in the Autoexec.bat file or the PATH environment variable. It acts only on the Path Buffer, which helps you build, modify, and manipulate search paths.
Param1Name=szDir
Param1Desc=Enter the name of the folder you want to reposition in the Path Buffer. You can enter either the full path and folder name, or the folder name only.
Param2Name=szRefDir
Param2Desc=Enter the folder relative to where szDir will be repositioned. If you enter a null string in this parameter, szDir becomes the first or the last item.
Param3Name=bDir
Param3Desc=Specify whether the folder in szDir is a fully qualified path and folder or a folder name only.
Param3Type=Combo
Param3Val1=FULL
Param3Val2=PARTIAL
Param4Name=bRefDir
Param4Desc=Specify whether szRefDir contains a fully qualified path and folder or just a folder name.
Param4Type=Combo
Param4Val1=FULL
Param4Val2=PARTIAL
Param5Name=bPosition
Param5Desc=Specify where you want the function to move szDir in the path temporary buffer.
Param5Type=Combo
Param5Val1=AFTER
Param5Val2=BEFORE

[PathSet]
SampleLine=PathSet(szString)
Description=Stores a search path string in the Path Buffer. You can then manipulate this buffer using the other path functions. This function has no relation to the PATH statement in the Autoexec.bat file or the PATH environment variable. It acts only on the Path Buffer, which helps you build, modify, and manipulate search paths. You can then add this temporary path string to the Autoexec.bat file or PATH environment variable.
Param1Name=szString
Param1Desc=The path to store in a temporary Path Buffer. You can then use other Path functions to modify/manipulate it. szString must contain a drive letter, a colon, and a root folder (a backslash).

[PlaceBitmap]
SampleLine=PlaceBitmap(szName, nID_BITMAP, nDx, nDy, nDrawOp)
Description=Places a bitmap anywhere on the user's screen. Bitmaps can either be included in a DLL or they can be read in from a .bmp or .wmf file. The bitmap is placed in the specified corner of the screen. You specify the distance between the sides of the bitmap and the edges of the screen in the nDx and nDy parameters. You can also center bitmaps automatically in the main window. If you are going to place multiple bitmaps in the same location during the setup, remove the current bitmap before placing the next bitmap. 
Param1Name=szName
Param1Desc=Enter the fully qualified path and filename of the DLL containing the bitmaps, or of the .bmp or .wmf file. If  you do not include an extension, InstallShield assumes the value you enter is a DLL filename.
Param2Name=nID_BITMAP
Param2Desc=Enter a unique ID that identifies the bitmap. If the bitmap is from a DLL, this ID must be the resource ID of the bitmap in the DLL.
Param3Name=nDx
Param3Desc=Enter the horizontal distance in pixels between the appropriate edge of the bitmap and the edge of the screen. You can enter CENTERED in this parameter to center the bitmap horizontally in the Main window.
Param4Name=nDy
Param4Desc=Enter the vertical pixel distance between the appropriate edge of the bitmap and the edge of the screen. You can enter CENTERED in this parameter to center the bitmap vertically in the Main window.
Param5Name=nDrawOp
Param5Desc=Specify the corner of the screen relative to where you want your bitmap placed. Use the REMOVE constant to remove a previously placed bitmap.
Param5Type=Combo
Param5Val1=BITMAPICON
Param5Val2=CENTERED
Param5Val3=FULLSCREEN
Param5Val4=FULLSCREENSIZE
Param5Val5=LOWER_LEFT
Param5Val6=LOWER_RIGHT
Param5Val7=TILED
Param5Val8=UPPER_LEFT
Param5Val9=UPPER_RIGHT
Param5Val10=REMOVE

[PlaceWindow]
SampleLine=PlaceWindow(nObject, nDx, nDy, nCorner)
Description=Changes the position of user interface objects, including billboards and AVI playback windows. You specify the distance between the sides of the object and the edges of the screen in the nDx and nDy parameters.
Param1Name=nObject
Param1Desc=Specify the object whose position you want to change.
Param1Type=Combo
Param1Val1=ASKOPTIONS
Param1Val2=ASKPATH
Param1Val3=ASKTEXT
Param1Val4=BACKGROUND
Param1Val5=BILLBOARD
Param1Val6=ENTERDISK
Param1Val7=FEEDBACK
Param1Val8=MMEDIA_AVI
Param1Val9=STATUS
Param1Val10=STATUSDLG
Param2Name=nDx
Param2Desc=Enter the distance in pixels between the edge of the object and the edge of the screen on the horizontal axis. When passing FEEDBACK as the nObject parameter, CENTERED centers the information gauge horizontally.
Param3Name=nDy
Param3Desc=Enter the distance in pixels between the edge of the object and the edge of the screen on the vertical axis. When passing FEEDBACK as the nObject parameter, CENTERED centers the information gauge vertically.
Param4Name=nCorner
Param4Desc=Specify from which corner to measure the distances, expressed in nDx and nDy.
Param4Type=Combo
Param4Val1=LOWER_LEFT
Param4Val2=LOWER_RIGHT
Param4Val3=UPPER_LEFT
Param4Val4=UPPER_RIGHT
Param4Val5=CENTERED

[PlayMMedia]
SampleLine=PlayMMedia(nType, szFileName, nOperation, nReserved)
Description=Plays a sound (WAVE or MIDI) or video (AVI) file. \n\n** Available in Professional Edition Only ** 
Param1Name=nType
Param1Desc=Enter the type of file you want to play.
Param1Type=Combo
Param1Val1=MMEDIA_AVI
Param1Val2=MMEDIA_MIDI
Param1Val3=MMEDIA_WAVE
Param2Name=szFileName
Param2Desc=Enter the fully qualified path and filename of the sound or AVI file to be played.
Param3Name=nOperation
Param3Desc=Enter the playing mode. You can join MMEDIA_PLAYASYNCH and MMEDIA_PLAYCONTINUOUS with the bitwise OR operator ( | ) to play a WAVE or AVI file continuously.
Param3Type=EdCombo
Param3Val1=MMEDIA_PLAYSYNCH
Param3Val2=MMEDIA_PLAYASYNCH
Param3Val3=MMEDIA_PLAYCONTINUOUS
Param3Val4=MMEDIA_STOP
Param4Name=nReserved
Param4Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param4Dflt=0

[ProgDefGroupType]
SampleLine=ProgDefGroupType(nType)
Description=Designates a program group as either Personal or Common under Windows NT. Call the ProgDefGroupType function before you call AddFolderIcon or CreateProgramFolder. The default program group type is Common. This function is only for use in a Windows NT environment.
Param1Name=nType
Param1Desc=Enter a constant to specify a program group type.
Param1Type=Combo
Param1Val1=PERSONAL
Param1Val2=COMMON

[QueryProgGroup]
SampleLine=QueryProgGroup(szGroupName, svGroupPath, nvItemCount)
Description=Checks for the existence of a specific program group. On Windows NT systems, QueryProgGroup also determines whether a program group is of Common or Personal type. If InstallShield finds the program group, QueryProgGroup returns the program group's attributes. The attributes include the path of the group and the number of items in the group, and the group type (Windows NT only). Since there are no program groups in Windows 95, this function does not apply to it.
Param1Name=szGroupName
Param1Desc=Enter the name of the program group you are looking for.
Param2Name=svGroupPath
Param2Desc=Contains the fully qualified path of the group specified in szGroupName. Note  Under Windows NT, svGroupPath is ignored because it is stored in the registry.
Param3Name=nvItemCount
Param3Desc=Under Windows 3.1, nvItemCount contains the number of program items in the group.

[QueryProgItem]
SampleLine=QueryProgItem(szFolderName, szItemName, svCmdLine, svWrkDir, svIconPath, nvIconIndex, svShortCutKey, nvMinimizeFlag)
Description=Checks for the existence of a specific program item or subfolder name. If InstallShield finds the item or subfolder, QueryProgItem returns its attributes. The attributes include the application's command line, working folder, icon path, shortcut key, and minimize flag. QueryProgItem only checks for the existence of subfolder names successfully under Windows NT version 4.0 and Windows 95.
Param1Name=szFolderName
Param1Desc=Enter the name of the folder containing the item or subfolder.
Param1Type=EdCombo
Param1Val1=szFolderName
Param1Val2=FOLDER_DESKTOP
Param1Val3=FOLDER_STARTMENU
Param1Val4=FOLDER_STARTUP
Param2Name=szItemName
Param2Desc=Enter the name of the program item or subfolder you are looking for.
Param3Name=svCmdLine
Param3Desc=Contains either the command line of the item's executable file or the complete path of the subfolder (under Windows 95 and Windows NT 4.0).
Param4Name=svWrkDir
Param4Desc=Contains the full path of the working folder of the program item. (Not applicable if szItemName is a subfolder.)
Param5Name=svIconPath
Param5Desc=Contains the full path and filename of the ICO file or .exe file. (Not applicable if szItemName is a subfolder.)
Param6Name=nvIconIndex
Param6Desc=Contains the index of the icon used for the program item. (Not applicable if szItemName is a subfolder.)
Param7Name=svShortCutKey
Param7Desc=Contains the item's shortcut key. (Not applicable if szItemName is a subfolder.)
Param8Name=nvMinimizeFlag
Param8Desc=(Not applicable if szItemName is a subfolder.) Contains a numeric value indicating whether an application window is minimized when first displayed. 

[QueryShellMgr]
SampleLine=QueryShellMgr(svShellMgrName)
Description=Retrieves the name of the program shell. For example, if the program shell is Program Manager, InstallShield returns the string "PROGMAN.EXE" with this function.
Param1Name=svShellMgrName
Param1Desc=Returns the name of the shell manager that is currently running. Only the program name is returned, even though a path may be specified in the Win.ini file.

[ReadBytes]
SampleLine=ReadBytes(nFileHandle, svString, nIndex, nBytes)
Description=Reads a specific number of bytes from a file starting at the current file pointer location. You must open the file in binary mode using the OpenFileMode and OpenFile functions before you can read from the file. The nIndex parameter is an index into the svString parameter. \n\n** Available in Professional Edition Only **  
Param1Name=nFileHandle
Param1Desc=Enter the file handle to a file opened in binary mode.
Param2Name=svString
Param2Desc=Contains the bytes read from the file and returned by this function. This variable must be long enough to accommodate the requested number of bytes.
Param3Name=nIndex
Param3Desc=Enter the index into svString where the bytes are written. In most cases you enter zero in this parameter, so the bytes are copied to the first location of svString.
Param4Name=nBytes
Param4Desc=Enter the number of bytes you want to read from the file. Bytes are read starting from the current location of the file pointer. InstallShield relocates the file pointer as the bytes are read.

[RebootDialog]
SampleLine=RebootDialog(szTitle, szMsg, nDefChoice)
Description=Displays a dialog box that allows the user to reboot the machine or restart Windows. If the user selects either of these options, InstallShield exits the setup script and attempts to carry out the selected operation. If the user chooses not to reboot the machine or restart Windows, execution returns to the setup script. If the reboot operation fails, the RebootDialog continues to display.
Param1Name=szTitle
Param1Desc=Enter the text you want to display in the title of the dialog box.
Param2Name=szMsg
Param2Desc=Enter the message you want to display.
Param3Name=nDefChoice
Param3Desc=Specify the default radio button selection.
Param3Type=Combo
Param3Val1=SYS_BOOTWIN
Param3Val2=SYS_BOOTMACHINE
Param3Val3=0

[RegDBConnectRegistry]
SampleLine=RegDBConnectRegistry(szRemoteSystem, nKeyType, nReserved)
Description=Creates a connection to a remote registry. \n\n** Available in Professional Edition Only ** 
Param1Name=szRemoteSystem
Param1Desc=Enter the name of the system you want to connect to, such as "RemoteSys".
Param2Name=nKeyType
Param2Desc=Specify which key you wish to access.
Param2Type=Combo
Param2Val1=HKEY_LOCAL_MACHINE
Param2Val2=HKEY_USERS
Param3Name=nReserved
Param3Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param3Dflt=0

[RegDBCreateKeyEx]
SampleLine=RegDBCreateKeyEx(szKey, szClass)
Description=Creates a key in the registry. You can also associate a class object with the newly created key (advanced users only). The newly created key does not have a value associated with it. Unless you specify otherwise, InstallShield creates the key as a subkey of HKEY_CLASSES_ROOT.
Param1Name=szKey
Param1Desc=Enter the name of the key you want to create under one of the four root keys. 
Param2Name=szClass
Param2Desc=Enter the class name you are associating with this key.

[RegDBDeleteKey]
SampleLine=RegDBDeleteKey(szSubKey)
Description=Deletes a specific key and its associated value from the registry. All subkeys of the deleted key are also deleted, along with their associated values. InstallShield assumes the key specified in szSubKey is a subkey of HKEY_CLASSES_ROOT. You can use RegDBSetDefaultRoot to specify another root key.
Param1Name=szSubKey
Param1Desc=Enter the name of the key you want to delete.

[RegDBDeleteValue]
SampleLine=RegDBDeleteValue(szSubKey, szValue)
Description=Deletes a value from a specifice key in the registry. InstallShield assumes that the key specified in szSubKey is a subkey of HKEY_CLASSES_ROOT. You must use RegDBSetDefaultRoot to specify another root key.
Param1Name=szSubKey
Param1Desc=Enter the name of the registry key that contains the value name you want to delete.
Param2Name=szValue
Param2Desc=Enter the name of the value you want to delete.

[RegDBDisConnectRegistry]
SampleLine=RegDBDisConnectRegistry(nReserved)
Description=Closes a connection to a remote registry that you established by calling RegDBConnectRegistry. \n\n** Available in Professional Edition Only ** 
Param1Name=nReserved
Param1Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param1Dflt=0

[RegDBGetAppInfo]
SampleLine=RegDBGetAppInfo(szName, nvType, svValue, nvSize)
Description=Retrieves the value of a particular value name under the application information key of your main application in the registry. The application information key is created by InstallShield as a result of calling the InstallationInfo function. You must call InstallationInfo to create an application information key before calling RegDBGetAppInfo.
Param1Name=szName
Param1Desc=Enter the value name whose value you want to retrieve.
Param2Name=nvType
Param2Desc=Returns the type of data, identified by one of these constants: REGDB_STRING, REGDB_STRING_EXPAND, REGDB_STRING_MULTI, REGDB_NUMBER, or REGDB_BINARY.
Param3Name=svValue
Param3Desc=Returns the value of the value name specified in szName.
Param4Name=nvSize
Param4Desc=Returns the size, in bytes, of the return value.

[RegDBGetItem]
SampleLine=RegDBGetItem(nItem, svValue)
Description=Retrieves values under the per-application paths key or the application uninstallation key, depending on the value of nItem.
Param1Name=nItem
Param1Desc=Enter the predefined item you want to retrieve.
Param1Type=Combo
Param1Val1=REGDB_APPPATH
Param1Val2=REGDB_APPPATH_DEFAULT
Param1Val3=REGDB_UNINSTALL_NAME
Param2Name=svValue
Param2Desc=Returns the value of the item.

[RegDBGetKeyValueEx]
SampleLine=RegDBGetKeyValueEx(szKey, szName, nvType, svValue, nvSize)
Description=Retrieves the value of a particular value name under a specified key in the registry. By default, InstallShield assumes this key is a subkey of HKEY_CLASSES_ROOT. You can use RegDBSetDefaultRoot to specify another root key.
Param1Name=szKey
Param1Desc=Enter the key name whose value you want to retrieve.
Param2Name=szName
Param2Desc=Enter the value name under szKey for which you want to retrieve the value. When you pass a null string (""), RegDBGetKeyValueEx retrieves the default value for the key.
Param3Name=nvType
Param3Desc=Returns the type of data, identified by one of these constants: REGDB_STRING, REGDB_STRING_EXPAND, REGDB_STRING_MULTI, REGDB_NUMBER, or REGDB_BINARY.
Param4Name=svValue
Param4Desc=Points to the string containing the data. Numbers are converted in the string.
Param5Name=nvSize
Param5Desc=Returns size, in bytes, of the data you are retrieving.

[RegDBKeyExist]
SampleLine=RegDBKeyExist(szSubKey)
Description=Determines if a specific key exists in the registry. By default, InstallShield assumes this key is a subkey of HKEY_CLASSES_ROOT. If you want to use a different main key, use RegDBSetDefaultRoot to specify another root key.
Param1Name=szSubKey
Param1Desc=Enter the name of the key whose existence you want to check.

[RegDBQueryKey]
SampleLine=RegDBQueryKey(szSubKey, nItem, listResults)
Description=Queries a key for its subkeys and value names. The keys can be enumerated dynamically at run time using this function.
Param1Name=szSubKey
Param1Desc=Specify a subkey. This can be a null string (""), in which case the data retrieved is the root key.
Param2Name=nItem
Param2Desc=This indicates which items should be placed in the list.
Param2Type=Combo
Param2Val1=REGDB_KEYS
Param2Val2=REGDB_NAMES
Param3Name=listResults
Param3Desc=String list which will contain the results of the query.

[RegDBSetAppInfo]
SampleLine=RegDBSetAppInfo(szName, nType, szValue, nSize)
Description=Sets the value of a particular value name under the application information key in the registry. You must call InstallationInfo to create an application information key before calling RegDBSetAppInfo.
Param1Name=szName
Param1Desc=Enter the value name whose information you want to set.
Param2Name=nType
Param2Desc=Enter the type of data you are setting.
Param3Name=szValue
Param3Desc=Enter the value you are setting for the value name.
Param4Name=nSize
Param4Desc=Enter the size, in bytes, of the data you are passing. If you enter -1 in this parameter  InstallShield automatically determines the size of the data.

[RegDBSetDefaultRoot]
SampleLine=RegDBSetDefaultRoot(nRootKey)
Description=Sets a different root key to be used by other registry functions. Most InstallShield registry functions work on the HKEY_CLASSES_ROOT as the default base of the registry tree. Using this function, you can specify another key, such as HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER or HKEY_USERS, as the root key.
Param1Name=nRootKey
Param1Desc=Specify the key you want to set as the root key.
Param1Type=Combo
Param1Val1=HKEY_CLASSES_ROOT
Param1Val2=HKEY_CURRENT_USER
Param1Val3=HKEY_LOCAL_MACHINE
Param1Val4=HKEY_USERS
Param1Val5=HKEY_CURRENT_CONFIG
Param1Val6=HKEY_DYN_DATA

[RegDBSetItem]
SampleLine=RegDBSetItem(nItem, szValue)
Description=Assigns values under the per application paths key or the application uninstallation key, depending on the value of nItem. Calling RegDBSetItem with either the REGDB_APPPATH or the REGDB_APPPATH_DEFAULT option results in the creation of the per application paths key (InstallationInfo only provides information used to create it).
Param1Name=nItem
Param1Desc=Enter the item you want to set. 
Param1Type=Combo
Param1Val1=REGDB_APPPATH
Param1Val2=REGDB_APPPATH_DEFAULT
Param1Val3=REGDB_UNINSTALL_NAME
Param2Name=szValue
Param2Desc=Enter the value you are setting to the specified item.

[RegDBSetKeyValueEx]
SampleLine=RegDBSetKeyValueEx(szKey, szName, nType, szValue, nSize)
Description=Sets the value of a specified value name under a key in the registry. If the key does not already exist, RegDBSetKeyValueEx will create it for you. However, the newly created key will not be logged for uninstallation unless it is a subkey of a key already logged for uninstallation. InstallShield assumes the value name in szKey is a subkey of the HKEY_CLASSES_ROOT key. If you want to use a different main key, use the RegDBSetDefaultRoot function to set the main root key.
Param1Name=szKey
Param1Desc=Enter the name of the key you want to set after you have created it with RegDBCreateKeyEx.
Param2Name=szName
Param2Desc=Enter the value name for the value data you want to set.
Param3Name=nType
Param3Desc=Enter the type of data you are setting.
Param3Type=Combo
Param3Val1=REGDB_STRING
Param3Val2=REGDB_STRING_EXPAND
Param3Val3=REGDB_STRING_MULTI
Param3Val4=REGDB_NUMBER
Param3Val5=REGDB_BINARY
Param4Name=szValue
Param4Desc=Enter the value you are associating with the value as a string variable. Numbers must be expressed as strings.
Param5Name=nSize
Param5Desc=Data size in bytes. Enter -1 when nType is REGDB_STRING, REGDB_STRING_EXPAND, or REGDB_NUMBER, and InstallShield sets the size. With REGDB_BINARY and REGDB_STRING_MULTI, you specify the size.

[ReleaseDialog]
SampleLine=ReleaseDialog(szDialogName)
Description=Frees all memory associated with the custom dialog identified in szDialogName. Call this function after calling the EndDialog function. Call this function outside the message handling case statement. \n\n** Available in Professional Edition Only **
Param1Name=szDialogName
Param1Desc=Enter the name of the dialog you want to destroy. 

[ReloadProgGroup]
SampleLine=ReloadProgGroup(szGroupName)
Description=Instructs the shell to remove and reload a specific folder. If you make modifications to program folder files directly and wish to immediately view the changes, call this function to force the shell to update the folder. This function is for advanced users who want to directly modify folder files.
Param1Name=szGroupName
Param1Desc=Enter the name of the program folder you want to reload.

[RenameFile]
SampleLine=RenameFile(szFileOld, szFileNew)
Description=Changes the name of a file. Enter only the filename in each parameter, not the path. RenameFile uses the SRCDIR system variable as the path for the szFileOld parameter, and the TARGETDIR system variable as the path for the szFileNew parameter. You can also use RenameFile to move a file. To move a file, make SRCDIR equal to the current folder of the file, and TARGETDIR equal to the new folder. You can only rename one file with each RenameFile statement. You cannot use wild card characters in this function.
Param1Name=szFileOld
Param1Desc=Enter only the name of the file you want to rename. Do not enter the path. RenameFile uses the path in the SRCDIR system variable.
Param2Name=szFileNew
Param2Desc=Enter only the new name of the file. Do not enter the path. RenameFile uses the path in the TARGETDIR system variable.

[ReplaceFolderIcon]
SampleLine=ReplaceFolderIcon(szProgramFolder, szItemName, szNewItem, szCmdLine, szWorkingDir, szIconPath, nIcon, szShortCutKey, nFlag)
Description=Replaces an icon in a specified folder. You must specify an existing folder, either one you have created with the CreateProgramFolder function or one that already exists on the user's system.
Param1Name=szProgramFolder
Param1Desc=Enter the name of the folder that contains the icon you want to replace.
Param2Name=szItemName
Param2Desc=Enter the name of the icon you are replacing.
Param3Name=szNewItem
Param3Desc=Enter the name of the icon as it should appear after the replacement.
Param4Name=szCmdLine
Param4Desc=Enter the full path and filename of the icon you are replacing.
Param5Name=szWorkingDir
Param5Desc=Enter the full path and filename of the icon you want to use to replace the current icon.
Param6Name=szIconPath
Param6Desc=Enter the name of an alternate icon file or a valid Windows executable that contains the new icon.
Param7Name=nIcon
Param7Desc=Enter the icon ordinal if you specified a Window executable icon. Otherwise, enter zero in this parameter.
Param8Name=szShortCutKey
Param8Desc=Enter the string that contains the shortcut key sequence the user can press to start the program. For example, "Ctrl + Alt + 1".
Param9Name=nFlag
Param9Desc=Specify how you want the icon to appear.
Param9Type=Combo
Param9Val1=NULL
Param9Val2=REPLACE
Param9Val3=RUN_MAXIMIZED
Param9Val4=RUN_MINIMIZED
Param9Val5=RUN_SEPARATEMEMORY

[ReplaceProfString]
SampleLine=ReplaceProfString(szFile, szSectionName, szKeyName, szOrigValue, szReplaceValue)
Description=Replaces a profile string in an INI file. This function can replace values of duplicate keys. If you are adding unique keys (i.e., keys that are all different for a given section), use the WriteProfString function. Use this function to replace only non-unique key names such as the device= line in the System.ini file. \n\n** Available in Professional Edition Only ** 
Param1Name=szFile
Param1Desc=Enter the name of the INI file. If you do not include a fully qualified path and filename, ReplaceProfString searches the Windows folder. If the file does not exist, this function creates the file in the Windows folder.
Param2Name=szSectionName
Param2Desc=Enter the section where you want to search for szKeyName. Do not include section name delimiting brackets ( [] ). If the section does not exist, InstallShield creates it for you.
Param3Name=szKeyName
Param3Desc=Enter the name of the key you want to place in the INI file. If the key does not exist, InstallShield creates it for you.
Param4Name=szOrigValue
Param4Desc=Enter the value of the key=value line you want to search for and replace.
Param5Name=szReplaceValue
Param5Desc=Enter the new value you want to associate with szKeyName.

[SdAskDestPath]
SampleLine=SdAskDestPath(szTitle, szMsg, svDir, nReserved)
Description=Creates a dialog box that allows you to select an alternate destination folder. If you enter a folder that does not exist, the function requests confirmation.
Param1Name=szTitle
Param1Desc=Enter the text you want to display in the title of the dialog box. 
Param2Name=szMsg
Param2Desc=Enter the text you want to display in the dialog box. The text is considered a static control.
Param3Name=svDir
Param3Desc=Enter the name of the folder you want to appear as the default folder. This variable contains the chosen folder after the function executes.
Param4Name=nReserved
Param4Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param4Dflt=0

[SdAskOptions]
SampleLine=SdAskOptions(szTitle, szMsg1, szMsg2, szId, szComponent, nExclusiveFlag)
Description=Offers selection from up to four options, which are typically components or subcomponents. Also allows use of a modified copy of the SdAskOptions dialog. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. 
Param2Name=szMsg1
Param2Desc=Enter a message you want to appear in the dialog box. If using a modified copy of the SdAskOptions dialog, note that this static field has an ID of 801.
Param3Name=szMsg2
Param3Desc=Enter a second message you want to appear in the dialog box. If using a modified copy of the SdAskOptions dialog, note that this static field has an ID of 802.
Param4Name=szId
Param4Desc=Enter a null string ("") to use the standard SdAskOptions dialog box. Or, enter the ID of a modifed copy of the SdAskOptions dialog. Use a numeric ID in string form (e.g., 13001 as "13001").
Param5Name=szComponent
Param5Desc=Enter a null string ("") to show top-level components. Or, enter the name of a component whose subcomponents you want to display for selection.
Param6Name=nExclusiveFlag
Param6Desc=Specify whether you want the options to use radio buttons (EXCLUSIVE) or check boxes (NONEXCLUSIVE).
Param6Type=Combo
Param6Val1=EXCLUSIVE
Param6Val2=NONEXCLUSIVE

[SdAskOptionsList]
SampleLine=SdAskOptionsList(szTitle, szMsg, szComponent, nStyle)
Description=Offers list box selection of options, which are typically components or subcomponents. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box.
Param2Name=szMsg
Param2Desc=Enter the text you want to appear in the dialog box.
Param3Name=szComponent
Param3Desc=Enter a null string ("") to show top-level components. Or, enter the name of a component whose subcomponents you want to display for selection.
Param4Name=nStyle
Param4Desc=Specify whether users can select only one (EXCLUSIVE) or multiple (NONEXCLUSIVE) options.
Param4Type=Combo
Param4Val1=EXCLUSIVE
Param4Val2=NONEXCLUSIVE

[SdBitmap]
SampleLine=SdBitmap(szTitle, szMsg, szBitmap)
Description=Displays a bitmap in a dialog box. The maximum allowable size of the bitmap is 440 pixels wide by 275 pixels high. You can also display a message in the SdBitmap dialog box, but only if you use a resource editor to modify the SdBitmap dialog box resource so that the control that displays the message is made visible. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. 
Param2Name=szMsg
Param2Desc=Enter a null string ("") in the szMsg parameter, unless you use a resource editor to modify the SdBitmap dialog box to display a message.
Param3Name=szBitmap
Param3Desc=Enter the name of the bitmap you want to display. InstallShield searches in SUPPORTDIR for the bitmap, unless you specify a full qualified path and filename for the bitmap.

[SdComponentDialog]
SampleLine=SdComponentDialog(szTitle, szMsg, svDir, szComponent)
Description=Displays a list of components the user can install and the amount of disk space available and required. The user can also select a destination folder. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. 
Param2Name=szMsg
Param2Desc=Enter the text you want to appear in the dialog box.
Param3Name=svDir
Param3Desc=Enter the name of a folder you want to appear as the default folder. This variable contains the chosen folder after the function executes.
Param4Name=szComponent
Param4Desc=The name of the component(s) you want to display. If szComponent is a null string (""), all components are displayed. If szComponent is a component name, just that component is displayed.

[SdComponentDialog2]
SampleLine=SdComponentDialog2(szTitle, szMsg, szDir, szComponent)
Description=Displays a list of components and subcomponents the user can install. Also displays the amount of disk space available and required.
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. 
Param2Name=szMsg
Param2Desc=Enter the text you want to appear in the dialog box.
Param3Name=szDir
Param3Desc=Enter the name of the target folder (destination location).
Param4Name=szComponent
Param4Desc=The component(s) you want to display. If szComponent is a null string (""), all components and subcomponents are displayed. If szComponent is a component name, just that component and its subcomponents are displayed.

[SdComponentDialogAdv]
SampleLine=SdComponentDialogAdv(szTitle, szMsg, svDir, szComponent)
Description=Displays a list of components the user can install and the amount of disk space available and required. The user can also select the destination folder. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. 
Param2Name=szMsg
Param2Desc=Enter the text you want to appear in the dialog box.
Param3Name=svDir
Param3Desc=Enter the name of a folder you want to appear as the default folder. This parameter contains the chosen folder after the function executes.
Param4Name=szComponent
Param4Desc=The name of the component(s) you want to display. If szComponent is a null string (""), all components are displayed. If szComponent is a component name, just that component is displayed.

[SdComponentMult]
SampleLine=SdComponentMult(szTitle, szMsg, szDir, szComponent)
Description=Displays a list of components and subcomponents the user can install and shows the amount of disk space available and required. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. 
Param2Name=szMsg
Param2Desc=Enter the text you want to appear in the dialog box.
Param3Name=szDir
Param3Desc=Enter the destination location, typically TARGETDIR. SdComponentMult uses this location to calculate the free space, displayed in the dialog.
Param4Name=szComponent
Param4Desc=The component(s) you want to display. If szComponent is a null string (""), all components and subcomponents are displayed. If szComponent is a component name, just that component and its subcomponents are displayed.

[SdConfirmNewDir]
SampleLine=SdConfirmNewDir(szTitle, szDir, nReserved)
Description=Creates a dialog box that displays a folder for confirmation. If Yes is clicked, the new folder is automatically created by this function.
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. 
Param2Name=szDir
Param2Desc=Enter the name of the folder to confirm. You can use the information returned by the SdAskDestPath function. 
Param3Name=nReserved
Param3Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param3Dflt=0

[SdConfirmRegistration]
SampleLine=SdConfirmRegistration(szTitle, szName, szCompany, szSerial, nReserved)
Description=Creates a dialog box that displays a folder for confirmation. If Yes is clicked, the new folder is automatically created by this function. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. 
Param2Name=szName
Param2Desc=Enter the name returned by either the SdRegisterUser or the SdRegisterUserEx function. 
Param3Name=szCompany
Param3Desc=Enter the company name returned by either the SdRegisterUser or the SdRegisterUserEx function.
Param4Name=szSerial
Param4Desc=Enter the serial number returned by the SdRegisterUserEx function. If ("") is entered, this field is cleared and no entry is displayed.
Param5Name=nReserved
Param5Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param5Dflt=0

[SdDisplayTopics]
SampleLine=SdDisplayTopics(szTitle, szMsg, listTopics, listDetails, nReserved)
Description=Creates a dialog box that displays information based on topic data. The dialog box provides a heading and then topics of titles and descriptions. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box.
Param2Name=szMsg
Param2Desc=Enter the message you want to appear in the Topics dialog box.
Param3Name=listTopics
Param3Desc=Enter the name of a string list that contains the topic choices you want to display.
Param4Name=listDetails
Param4Desc=Enter the name of a string list that contains the descriptions of the topics you want to display.
Param5Name=nReserved
Param5Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param5Dflt=0

[SdFinish]
SampleLine=SdFinish(szTitle, szMsg1, szMsg2, szOpt1, szOpt2, bvOpt1, bvOpt2)
Description=Announces that the setup is complete and gives the user information or options.
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box.
Param2Name=szMsg1
Param2Desc=Enter the text to display at the top of the dialog box, informing the user about the end of the setup.
Param3Name=szMsg2
Param3Desc=Enter the text to display at the bottom of the dialog box, giving the user information about what to do.
Param4Name=szOpt1
Param4Desc=Enter the text to display beside the first check box. Enter a null string ("") to hide the check box.
Param5Name=szOpt2
Param5Desc=Enter the text to display beside the second check box. Enter a null string ("") to hide the check box.
Param6Name=bvOpt1
Param6Desc=Returns the selection state (TRUE or FALSE) of the first check box. 
Param7Name=bvOpt2
Param7Desc=Returns the selection state (TRUE or FALSE) of the second check box.

[SdFinishReboot]
SampleLine=SdFinishReboot(szTitle, szMsg1, nDefOption, szMsg2, nReserved)
Description=Announces that the setup is complete and gives the user the option to restart the system.
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box.
Param2Name=szMsg1
Param2Desc=Enter the text to display at the top of the dialog box, informing the user about the end of the setup.
Param3Name=nDefOption
Param3Desc=Specify a default radio button option selection.
Param3Type=Combo
Param3Val1=SYS_BOOTWIN
Param3Val2=SYS_BOOTMACHINE
Param3Val3=0
Param4Name=szMsg2
Param4Desc=Enter the text to display at the bottom of the dialog box, giving the user information about what to do.
Param5Name=nReserved
Param5Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param5Dflt=0

[SdLicense]
SampleLine=SdLicense(szTitle, szMsg, szQuestion, szLicenseFile)
Description=Displays a dialog box containing a license agreement in a multi-line edit field.
Param1Name=szTitle
Param1Desc=Enter the text you want to display as the title of the dialog box.
Param2Name=szMsg
Param2Desc=Enter the message you want to display in the static text field above the multi-line edit field.
Param3Name=szQuestion
Param3Desc=Enter the text you want to display in the static text field below the multi-line edit field. You would likely place a question here, to which the user should respond by selecting either Yes and No.
Param4Name=szLicenseFile
Param4Desc=Enter the filename of your license text file, which you specify in the Setup Files pane of the project workspace.

[SdMakeName]
SampleLine=SdMakeName(svSection, szDlg, szUnused, nvDlgName)
Description=Creates a section name for a custom dialog. This section name is used in writing to and reading from an .iss file, which is used by InstallShield Silent. \n\n** Available in Professional Edition Only ** 
Param1Name=svSection
Param1Desc=The section name (for example, "MyDlg-0"). InstallShield places a value into this variable using the variables szDlg and nvDlgName. This value is used by SilentReadData and SilentWriteData.
Param2Name=szDlg
Param2Desc=The name of the custom dialog (for example, "MyDlg") for which you are creating a section name.
Param3Name=szUnused
Param3Desc=This parameter is not used; you can enter a null string or an empty string variable here.
Param4Name=nvDlgName
Param4Desc=The counter that records the number of times SdMakeName is called for the dialog named in szDlg. InstallShield automatically increments this counter. Use a unique variable name for each custom dialog.

[SdOptionsButtons]
SampleLine=SdOptionsButtons(szTitle, szMsg, listButtons, listDescription)
Description=Displays a dialog box containing up to four bitmap buttons with accompanying text representing selection options. SdOptionsButtons is ideal for allowing the user to choose a setup type. \n\n** Available in Professional Edition Only **
Param1Name=szTitle
Param1Desc=The script dialog box title.
Param2Name=szMsg
Param2Desc=The message you want to be displayed in the dialog box.
Param3Name=listButtons
Param3Desc=The list of formatted strings specifying the bitmaps to be displayed on the push buttons.
Param4Name=listDescription
Param4Desc=The list strings forming the descriptions of the corresponding bitmaps in the listButtons list.

[SdProductName]
SampleLine=SdProductName(szProductName)
Description=Makes your product name available to all instances of the %P place holder.
Param1Name=szProductName
Param1Desc=Enter the name of your product. This name will appear by default wherever %P appears in the appropriate static fields in Sd dialogs.

[SdRegisterUser]
SampleLine=SdRegisterUser(szTitle, szMsg, svName, svCompany)
Description=Creates a dialog box that retrieves the user name and company name. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box.
Param2Name=szMsg
Param2Desc=Enter the text you want to appear in the dialog box. This text is considered a static control.
Param3Name=svName
Param3Desc=Returns the name entered by the user. You can use this information and write it to another file or display it in a confirmation dialog if you desire.
Param4Name=svCompany
Param4Desc=Returns the company name entered by the user. You can use this information and write it to another file or display it in a confirmation dialog if you desire.

[SdRegisterUserEx]
SampleLine=SdRegisterUserEx(szTitle, szMsg, svName, svCompany, svSerial)
Description=Creates a dialog box that retrieves the user name, company name, and serial number. 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box.
Param2Name=szMsg
Param2Desc=Enter the text you want to appear in the dialog box. This text is considered a static control.
Param3Name=svName
Param3Desc=Returns the name entered by the user. You can use this information and write it to a file or display it in a confirmation dialog if you desire.
Param4Name=svCompany
Param4Desc=Returns the company name entered by the user. You can use this information and write it to a file or display it in a confirmation dialog if you desire.
Param5Name=svSerial
Param5Desc=Returns the serial number entered by the user. You can use this information and write it to a file or display it in a confirmation dialog if you desire.

[SdSelectFolder]
SampleLine=SdSelectFolder(szTitle, szMsg, svDefGroup)
Description=Displays program folders for selection. SdSelectFolder allows you to offer a default selection. The user can also enter a new folder name. 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box.
Param2Name=szMsg
Param2Desc=Enter the text you want to appear in the dialog box. This text is considered a static control.
Param3Name=svDefGroup
Param3Desc=Returns the name of the selected folder.

[SdSetupType]
SampleLine=SdSetupType(szTitle, szMsg, svDir, nReserved)
Description=Displays a dialog box allowing the user to select from the standard setup types: Typical, Compact, and Custom. \n\n** Available in Professional Edition Only **
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. 
Param2Name=szMsg
Param2Desc=Enter the text you want to appear in the dialog box.
Param3Name=svDir
Param3Desc=Returns the selected folder. The user can select a folder using the Browse button, which initiates the SelectDir function.
Param4Name=nReserved
Param4Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param5Dflt=0

[SdSetupTypeEx]
SampleLine=SdSetupTypeEx(szTitle, szMsg, szReserved, svSetupType, nStyle)
Description=Displays a dialog box allowing the user to select the setup from those defined in the current file media library.
Param1Name=szTitle
Param1Desc=The title you wish to display in the SdSetupTypeEx dialog box.
Param2Name=szMsg
Param2Desc=The message you wish to display in the SdSetupTypeEx dialog box.
Param3Name=szReserved
Param3Desc=Enter a null string ("") in this parameter. No other value is allowed.
Param3Dflt=""
Param4Name=svSetupType
Param4Desc=SdSetupTypeEx returns the selected setup type in svSetupType.
Param5Name=nStyle
Param5Desc=Enter zero in this parameter. No other value is allowed.
Param5Dflt=0

[SdShowAnyDialog]
SampleLine=SdShowAnyDialog(szTitle, szID, nID, nReserved)
Description=Displays a custom or modified dialog box. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box.
Param2Name=szID
Param2Desc=Enter the string identifier that identifies the dialog. If you enter a null string ("") in this parameter, the function uses the value in nID.
Param3Name=nID
Param3Desc=Enter the numeric value that identifies the dialog. If you entered a value in szID, this parameter is ignored.
Param4Name=nReserved
Param4Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param4Dflt=0

[SdShowDlgEdit1]
SampleLine=SdShowDlgEdit1(szTitle, szMsg, szField1, svEdit1)
Description=Creates a general dialog box that displays a message and one single-line edit field. You can specify a title for the dialog box. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. If you enter a null string (""), the default title ("Edit Data") is displayed.
Param2Name=szMsg
Param2Desc=Enter the message you want to appear in the dialog box. You can use the %P place holder in your message string. %P is replaced by the product name made available by calling the SdProductName function.
Param3Name=szField1
Param3Desc=Enter a name (up to 11 characters) to be displayed to the left of the svEdit1 edit field.
Param4Name=svEdit1
Param4Desc=This variable both initializes and saves the contents of the edit field.

[SdShowDlgEdit2]
SampleLine=SdShowDlgEdit2(szTitle, szMsg, szField1, szField2, svEdit1, svEdit2)
Description=Creates a general dialog box that displays a message and two single-line edit fields. You can specify a title for the dialog box. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. If you enter a null string (""), the default title ("Edit Data") is displayed.
Param2Name=szMsg
Param2Desc=Enter the message you want to appear in the dialog box. You can use the %P place holder in your message string. %P is replaced by the product name made available by calling the SdProductName function.
Param3Name=szField1
Param3Desc=Enter a name (up to 11 characters) to be displayed to the left of the svEdit1 edit field.
Param4Name=szField2
Param4Desc=Enter a name (up to 11 characters) to be displayed to the left of the svEdit2 edit field.
Param5Name=svEdit1
Param5Desc=This variable both initializes and saves the contents of the first edit field.
Param6Name=svEdit2
Param6Desc=This variable both initializes and saves the contents of the second edit field.

[SdShowDlgEdit3]
SampleLine=SdShowDlgEdit3(szTitle, szMsg, szField1, szField2, szField3, svEdit1, svEdit2, svEdit3)
Description=Creates a general dialog box that displays a message and three single-line edit fields. You can specify a title for the dialog box. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. If you enter a null string (""), the default title ("Edit Data") is displayed.
Param2Name=szMsg
Param2Desc=Enter the message you want to appear in the dialog box. You can use the %P place holder in your message string. %P is replaced by the product name made available by calling the SdProductName function.
Param3Name=szField1
Param3Desc=Enter a name (up to 11 characters) to be displayed to the left of the svEdit1 edit field.
Param4Name=szField2
Param4Desc=Enter a name (up to 11 characters) to be displayed to the left of the svEdit2 edit field.
Param5Name=szField3
Param5Desc=Enter a name (up to 11 characters) to be displayed to the left of the svEdit3 edit field.
Param6Name=svEdit1
Param6Desc=This variable both initializes and saves the contents of the first edit field.
Param7Name=svEdit2
Param7Desc=This variable both initializes and saves the contents of the second edit field.
Param8Name=svEdit3
Param8Desc=This variable both initializes and saves the contents of the third edit field.

[SdShowFileMods]
SampleLine=SdShowFileMods(szTitle, szMsg, szTargetFile, szAltFile, listChanges, nvSelection)
Description=Creates a dialog box that displays changes you want to make to a file. \n\n** Available in Professional Edition Only ** 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. 
Param2Name=szMsg
Param2Desc=Enter the message you want to appear in the dialog box.
Param3Name=szTargetFile
Param3Desc=Enter the name of the file you want to modify. This will be displayed with the first radio button.
Param4Name=szAltFile
Param4Desc=Enter an alternate name you may want to give the file if you decide to make the changes. This will be displayed with the second radio button.
Param5Name=listChanges
Param5Desc=Enter the name of a string list that contains the list of changes you want to make to the file. This list is placed in a multi-line edit field that allows you to select the changes to be implemented.
Param6Name=nvSelection
Param6Desc=Returns the ID value of the selection.

[SdShowInfoList]
SampleLine=SdShowInfoList(szTitle, szMsg, listID)
Description=Create a dialog box that displays a list of scrollable messages. 
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. 
Param2Name=szMsg
Param2Desc=Enter the message you want to appear above the information box.
Param3Name=listID
Param3Desc=Enter the name of the list whose contents you want to appear in the dialog box. All messages that appear in the dialog box are read-only.

[SdShowMsg]
SampleLine=SdShowMsg(szMsg, bShow)
Description=Creates a general dialog box that displays a message or other information in a small window. \n\n** Available in Professional Edition Only ** 
Param1Name=szMsg
Param1Desc=Enter the text you want to appear in the dialog box.
Param2Name=bShow
Param2Desc=Specify TRUE to display the message box, and FALSE to remove it.
Param2Type=Combo
Param2Val1=TRUE
Param2Val2=FALSE

[SdStartCopy]
SampleLine=SdStartCopy(szTitle, szMsg, listData)
Description=Creates a multi-line edit field displaying the settings and selections made during the setup.
Param1Name=szTitle
Param1Desc=Enter the title you want to appear in the caption bar of the dialog box.
Param2Name=szMsg
Param2Desc=Enter the message you want to appear in the static text field above the multi-line edit field.
Param3Name=listData
Param3Desc=Place the string list in which you have collected the information retrieved from the user in the listData parameter. SdStartCopy will automatically place the strings separately into the mutli-line edit field. 

[SdWelcome]
SampleLine=SdWelcome(szTitle, szMsg)
Description=Creates a general welcome dialog box.
Param1Name=szTitle
Param1Desc=Enter the text you want to appear in the title of the dialog box. 
Param2Name=szMsg
Param2Desc=Enter the message you want to appear in the welcome dialog box.

[SeekBytes]
SampleLine=SeekBytes(nFileHandle, nBytes, nPosition)
Description=Repositions the file pointer within an open binary file. \n\n** Available in Professional Edition Only ** 
Param1Name=nFileHandle
Param1Desc=Enter the file handle of a file opened in the binary mode.
Param2Name=nBytes
Param2Desc=Enter the number of bytes you want to move the file pointer relative to the position specified by nPosition. 
Param3Name=nPosition
Param3Desc=Specify where you want to move the pointer relative to where it is currently located.
Param3Type=Combo
Param3Val1=FILE_BIN_CUR
Param3Val2=FILE_BIN_END
Param3Val3=FILE_BIN_START

[SelectDir]
SampleLine=SelectDir(szTitle, szMsg, svDir, bCreate)
Description=Displays a dialog box that allows the user to select a target folder on which the application will be installed.
Param1Name=szTitle
Param1Desc=Enter the text you want to display as the caption of this dialog box.
Param2Name=szMsg
Param2Desc=Enter the message you want to display.
Param3Name=svDir
Param3Desc=Enter the name of a folder you want to set as the default folder. This parameter will contain the chosen folder if you pressed the Browse push button and selected an alternate folder.
Param4Name=bCreate
Param4Desc=Specify whether you want to create the specified folder.
Param4Type=Combo
Param4Val1=TRUE
Param4Val2=FALSE

[SelectFolder]
SampleLine=SelectFolder(szTitle, szDefFolder, svResultFolder)
Description=Displays a dialog box that allows the user to select from a list of folders.
Param1Name=szTitle
Param1Desc=Enter the text you want as the title for the dialog box.
Param2Name=szDefFolder
Param2Desc=Enter the name of the folder you want to specify as the default folder.
Param3Name=svResultFolder
Param3Desc=Returns the name of the selected folder. If the user enters a non-existent folder name, it will still be returned in this parameter, but remember that this function cannot create the folder.

[SendMessage]
SampleLine=SendMessage(nHwnd, nMsg, nwParam, nlParam)
Description=Sends a message to one or more windows. \n\n** Available in Professional Edition Only ** 
Param1Name=nHwnd
Param1Desc=Enter the handle that identifies the window you want to receive the message. 
Param2Name=nMsg
Param2Desc=Enter the message you want to send to the window(s).
Param3Name=nwParam
Param3Desc=Enter any additional message information.
Param4Name=nlParam
Param4Desc=Enter any additional message information.

[SetColor]
SampleLine=SetColor(nObject, nColor)
Description=Sets the color of the main setup window or the status bar (in the progress indicator).
Param1Name=nObject
Param1Desc=Specify which user interface object you want to change.
Param1Type=Combo
Param1Val1=BACKGROUND
Param1Val2=STATUSBAR
Param2Name=nColor
Param2Desc=Specify the color you want to apply to the user interface objects. You can specify the color using the constants listed below or by calling the RGB function in this parameter position.
Param2Type=Combo
Param2Val1=BK_BLUE
Param2Val2=BK_GREEN
Param2Val3=BK_MAGENTA
Param2Val4=BK_RED
Param2Val5=BK_YELLO
Param2Val6=BK_SOLIDBLUE
Param2Val7=BK_SOLIDGREEN
Param2Val8=BK_SOLIDMAGENTA
Param2Val9=BK_SOLIDRED
Param2Val10=BK_SOLIDYELLOW
Param2Val11=BK_SMOOTH
Param2Val12=GREEN
Param2Val13=RED
Param2Val14=BLUE
Param2Val15=MAGENTA
Param2Val16=YELLOW

[SetDialogTitle]
SampleLine=SetDialogTitle(nDialogId, szTitle)
Description=Changes the titles that appear in the title bars of some common built-in dialog boxes. 
Param1Name=nDialogId
Param1Desc=Identify the built-in dialog box whose title you are changing.
Param1Type=Combo
Param1Val1=DLG_ASK_OPTIONS
Param1Val2=DLG_ASK_PATH
Param1Val3=DLG_ASK_TEXT
Param1Val4=DLG_ASK_YESNO
Param1Val5=DLG_ENTER_DISK
Param1Val6=DLG_MSG_INFORMATION
Param1Val7=DLG_MSG_SEVERE
Param1Val8=DLG_STATUS
Param1Val9=DLG_MSG_WARNING
Param1Val10=DLG_USER_CAPTION
Param2Name=szTitle
Param2Desc=Enter the text you want as the new title.

[SetDisplayEffect]
SampleLine=SetDisplayEffect(nEffect)
Description=Sets the display effect for bitmap or metafile images. \n\n** Available in Professional Edition Only ** 
Param1Name=nEffect
Param1Desc=Choose a display effect option.
Param1Type=Combo
Param1Val1=EFF_FADE
Param1Val2=EFF_REVEAL
Param1Val3=EFF_HORZREVEAL
Param1Val4=EFF_HORZSTRIPE
Param1Val5=EFF_VERTSTRIPE
Param1Val6=EFF_BOXSTRIPE
Param1Val7=EFF_NONE

[SetErrorMsg]
SampleLine=SetErrorMsg(nErrorID, szText)
Description=Customizes InstallShield default error messages. 
Param1Name=nErrorID
Param1Desc=Specify which error message you want to customize.
Param1Type=Combo
Param1Val1=ERR_BOX_BADPATH
Param1Val2=ERR_BOX_BADTAGFILE
Param1Val3=ERR_BOX_DISKID
Param1Val4=ERR_BOX_DRIVEOPEN
Param1Val5=ERR_BOX_READONLY
Param1Val6=ERR_BOX_NOSPACE
Param2Name=szText
Param2Desc=Enter the error message you want to appear in the message box.

[SetErrorTitle]
SampleLine=SetErrorTitle(nErrorID, szText)
Description=Specifies custom text for the caption bar of InstallShield's built-in error message boxes. 
Param1Name=nErrorID
Param1Desc=Specify the error message box whose title you want to customize.
Param1Type=Combo
Param1Val1=ERR_BOX_BADPATH
Param1Val2=ERR_BOX_BADTAGFILE
Param1Val3=ERR_BOX_DISKID
Param1Val4=ERR_BOX_DRIVEOPEN
Param1Val5=ERR_BOX_READONLY
Param1Val6=ERR_BOX_NOSPACE
Param2Name=szText
Param2Desc=Enter the error message you want to appear in the error message box.

[SetFileInfo]
SampleLine=SetFileInfo(szPathFile, nType, nResult, szResult)
Description=Sets a file's date, time, or attributes. Attributes indicate whether the file is normal, archived, hidden, read-only, or system. 
Param1Name=szPathFile
Param1Desc=Enter the path and filename of the file whose characteristic you want to change.
Param2Name=nType
Param2Desc=Specify which file characteristic to change.
Param2Type=Combo
Param2Val1=FILE_ATTRIBUTE
Param2Val2=FILE_DATE
Param2Val3=FILE_TIME
Param3Name=nResult
Param3Desc=Enter the new values that you want in nResult. To change the file's date or time, enter 0. To change the file's access attributes, enter one of the other constants.
Param3Type=Combo
Param3Val1=0
Param3Val2=FILE_ATTR_ARCHIVED
Param3Val3=FILE_ATTR_HIDDEN
Param3Val4=FILE_ATTR_NORMAL
Param3Val5=FILE_ATTR_READONLY
Param3Val6=FILE_ATTR_SYSTEM
Param4Name=szResult
Param4Desc=Enter the new or existing file date or time. Date format is YYYY/MM/DD. Time format is HH:MM:SS, using a 24-hour clock format, with midnight at 00:00:00 or 24:00:00. Seconds must be a multiple of 2.

[SetFont]
SampleLine=SetFont(nItemID, nFontStyle, szFontName)
Description=Sets the font and style when displaying text strings. You may use standard Windows fonts with this function.
Param1Name=nItemID
Param1Desc=Specify the item whose font and font style you want to set. One option is currently allowed.
Param1Dflt=FONT_TITLE
Param2Name=nFontStyle
Param2Desc=Specify the font style(s). You can combine all styles (except STYLE_NORMAL) with the bitwise OR operator ( | ).
Param2Type=EdCombo
Param2Val1=STYLE_NORMAL
Param2Val2=STYLE_BOLD
Param2Val3=STYLE_ITALIC
Param2Val4=STYLE_SHADOW
Param2Val5=STYLE_UNDERLINE
Param3Name=szFontName
Param3Desc=Enter the name of an available Windows font. Valid font names include Courier, Helv, Helvetica, Modern, Roman, Script, Terminal, Times, and TmsRmn. Consult Windows SDK documentation for available fonts.

[SetStatusWindow]
SampleLine=SetStatusWindow(nPercent, szString)
Description=Enables the progress indicator and allows you to set an initial percentage number for the progress bar.
Param1Name=nPercent
Param1Desc=Enter a number that reflects the percentage of the setup process that is complete at that point in the script. This number will be the initial progress bar setting for the particular stage of the setup. 
Param2Name=szString
Param2Desc=Enter a brief message that explains which file is being copied or what the setup program is doing. The string is displayed in the upper left-hand corner of the progress indicator.

[SetTitle]
SampleLine=SetTitle(szString, nPointSize, nColor)
Description=Displays a title in large text on the main window. The title appears in the top-left corner of the window. You can also use the SetTitle function to set the caption on the title bar of the main window. 
Param1Name=szString
Param1Desc=Enter the string you want to use as the title. The title must be a single line of text, no more than 80 characters in length.
Param2Name=nPointSize
Param2Desc=Enter the size, in points, of the text you want. The recommended size is 28 points. Experiment to see which size you like best.
Param3Name=nColor
Param3Desc=Set the color of the text. You can specify the color using the constants listed below by calling the RGB function in this parameter position.
Param3Type=Combo
Param3Val1=RED
Param3Val2=GREEN
Param3Val3=BLUE
Param3Val4=MAGENTA
Param3Val5=YELLOW
Param3Val6=WHITE
Param3Val7=BACKGROUNDCAPTION

[SetupType]
SampleLine=SetupType(szTitle, szMsg, szReserved, nType, nReserved)
Description=Creates a simple dialog box that gives the user a choice of standard setup types: Typical, Compact, or Custom.
Param1Name=szTitle
Param1Desc=Enter the text you want to use as the title of this dialog.
Param2Name=szMsg
Param2Desc=Enter the message you want to display at the top of the dialog box. If you use a null string ("") in this parameter, InstallShield will display a default message.
Param3Name=szReserved
Param3Desc=Enter a null string ("") in this parameter. No other value is allowed.
Param3Dflt=""
Param4Name=nType
Param4Desc=Enter the default setup type when the dialog box is first displayed.
Param4Type=Combo
Param4Val1=TYPICAL
Param4Val2=COMPACT
Param4Val3=CUSTOM
Param5Name=nReserved
Param5Desc=Enter zero in this parameter. No other value is allowed.
Param5Dflt=0

[ShowGroup]
SampleLine=ShowGroup(szGrpName, nCommand)
Description=Displays or moves a Program Manager folder window. Use this function at the end of the setup to make the new program folder and its program icons visible.
Param1Name=szGrpName
Param1Desc=Enter the name of the program folder you want to display.
Param2Name=nCommand
Param2Desc=Specify how you want the folder window to be displayed. 
Param2Type=Combo
Param2Val1=SW_NORMAL
Param2Val2=SW_MAXIMIZE
Param2Val3=SW_MINIMIZE
Param2Val4=SW_SHOW
Param2Val5=SW_SHOWMINIMIZED
Param2Val6=SW_SHOWMINNOACTIVE
Param2Val7=SW_SHOWNA
Param2Val8=SW_SHOWNOACTIVATE

[ShowProgramFolder]
SampleLine=ShowProgramFolder(szFolder, nCommand)
Description=Displays a program folder.
Param1Name=szFolder
Param1Desc=Enter the name of the folder you want to display.
Param2Name=nCommand
Param2Desc=Specifies the state of the folder. 
Param2Type=Combo
Param2Val1=SW_SHOW
Param2Val2=SW_MAXIMIZE
Param2Val3=SW_MINIMIZE
Param2Val4=SW_RESTORE

[SilentReadData]
SampleLine=SilentReadData(szSection, szValName, nValType, svVal, nvVal)
Description=Instructs InstallShield Silent on how to read the .iss file dialog data for a custom dialog box when a setup runs in silent mode. \n\n** Available in Professional Edition Only **
Param1Name=szSection
Param1Desc=The name of the dialog data section in the .iss file. 
Param2Name=szValName
Param2Desc=The value name appearing in the dialog data section of the .iss file. Every dialog has at least one value for szValName - "Result" - which identifies the value returned by the dialog box push button controls. 
Param3Name=nValType
Param3Desc=Specify the data type of the value assigned to the value name in szValName. The value itself is stored in either szVal or nVal, depending upon the value of nValType.
Param3Type=Combo
Param3Val1=DATA_STRING
Param3Val2=DATA_NUMBER
Param3Val3=DATA_COMPONENT
Param3Val4=DATA_LIST
Param4Name=svVal
Param4Desc=The value assigned to the value name in szValName when nValType is DATA_STRING or DATA_COMPONENT.
Param5Name=nvVal
Param5Desc=The value assigned to the value name in szValName when nValType is DATA_NUMBER or DATA_LIST.

[SilentWriteData]
SampleLine=SilentWriteData(szSection, szValName, nValType, szVal, nVal)
Description=Records selections made in custom dialogs during the setup. \n\n** Available in Professional Edition Only ** 
Param1Name=szSection
Param1Desc=The name of the dialog data section in the .iss file. Do not include the square brackets ( [ ] ).
Param2Name=szValName
Param2Desc=The value name appearing in the dialog data section of the .iss file.
Param3Name=nValType
Param3Desc=Specify the data type of the value assigned to the value name in szValName. The value itself is stored in either szVal or nVal, depending upon the value of nValType. 
Param3Type=Combo
Param3Val1=DATA_STRING
Param3Val2=DATA_NUMBER
Param3Val3=DATA_COMPONENT
Param3Val4=DATA_LIST
Param4Name=szVal
Param4Desc=The value assigned to the value name in szValName when nValType is DATA_STRING or DATA_COMPONENT.
Param5Name=nVal
Param5Desc=The value assigned to the value name in szValName when nValType is DATA_NUMBER or DATA_LIST.

[SizeWindow]
SampleLine=SizeWindow(nObject, nDx, nDy)
Description=Changes the size of a specific user interface object. You specify the new size in pixels.
Param1Name=nObject
Param1Desc=Enter the object you want to size.
Param1Type=Combo
Param1Val1=BACKGROUND
Param1Val2=METAFILE
Param1Val3=MMEDIA_AVI
Param2Name=nDx
Param2Desc=Enter the horizontal size of the object in pixels.
Param3Name=nDy
Param3Desc=Enter the vertical size of the object in pixels.

[Sprintf]
SampleLine=Sprintf(svResult, szFormat, arg[, ...])
Description=Creates a string from variable data using format specifier expressions and matching variables. 
Param1Name=svResult
Param1Desc=Contains the formatted string returned by Sprintf.
Param2Name=szFormat
Param2Desc=Enter a string containing a valid format specification(s).
Param3Name=arg
Param3Desc=Enter an argument(s) corresponding to the format specification(s) in szFormat.

[SprintfBox]
SampleLine=SprintfBox(nType, szTitle, szFormat, arg[, ...])
Description=Formats and displays a series of characters and/or values in a message box.
Param1Name=nType
Param1Desc=Specify the message box type.
Param1Type=Combo
Param1Val1=INFORMATION
Param1Val2=SEVERE
Param1Val3=WARNING
Param2Name=szTitle
Param2Desc=The title of the message box.
Param3Name=szFormat
Param3Desc=Enter a string containing a valid format specification(s).
Param4Name=arg
Param4Desc=Enter an argument(s) corresponding to the format specification(s) in szFormat.

[StatusUpdate]
SampleLine=StatusUpdate(bLink, nFinalPercent)
Description=Sets the percent value to be displayed in the progress indicator at the end of the next file transfer operation.
Param1Name=bLink
Param1Desc=Specify whether or not you want to link the information gauge to the progress indicator.
Param1Type=Combo
Param1Val1=ON
Param1Val2=OFF
Param2Name=nFinalPercent
Param2Desc=Enter the final percentage value you want to appear in the progress indicator following the call to StatusUpdate. InstallShield evenly updates the progress bar from the current to the nFinalPercent value. 

[StrCompare]
SampleLine=StrCompare(szStringA, szStringB)
Description=Performs a lexicographic comparison of two strings. It is not case-sensitive.
Param1Name=szStringA
Param1Desc=Enter the first string to compare.
Param2Name=szStringB
Param2Desc=Enter the second string to compare.

[StrFind]
SampleLine=StrFind(szString, szFindMe)
Description=Determines if one string contains another string. 
Param1Name=szString
Param1Desc=Enter the string which you want to search for the szFindMe string.
Param2Name=szFindMe
Param2Desc=Enter the string you are searching for.

[StrGetTokens]
SampleLine=StrGetTokens(listID, szString, szDelimiterSet)
Description=Separates a string into a list of tokens. \n\n** Available in Professional Edition Only ** 
Param1Name=listID
Param1Desc=Enter the ID of a list you want to use to store the tokens. Before you use StrGetTokens, you need to create this list with the ListCreate function. After the StrGetTokens function executes, each element of this list contains one token.
Param2Name=szString
Param2Desc=Enter the string containing the tokens you want to separate.
Param3Name=szDelimiterSet
Param3Desc=Enter a set of one or more delimiters. Each delimiter is one character (1 byte). If you enter a null string, the function searches for NULL characters as the delimiters. This is useful if you are using the GetProfString function.

[StrLength]
SampleLine=StrLength(szString)
Description=Finds the length of a string.
Param1Name=szString
Param1Desc=Enter the string for which you want to determine the length.

[StrRemoveLastSlash]
SampleLine=StrRemoveLastSlash(svString)
Description=Removes the last backslash from a string.
Param1Name=svString
Param1Desc=Enter the string that contains the backslash you want to remove. After the function executes, this parameter will contain the modified string (without the last backslash).

[StrSub]
SampleLine=StrSub(svSubStr, szString, nStart, nLength)
Description=Extracts part of a string. StrSub allows you to specify the source string you wish to extract from, the position at which to begin the extraction, and the number of characters you want to extract.
Param1Name=svSubStr
Param1Desc=Returns the string extracted by the function.
Param2Name=szString
Param2Desc=Enter the source string.
Param3Name=nStart
Param3Desc=Enter the numeric position at which you want to start extracting the substring. The position of the first character in szString is 0 (zero).
Param4Name=nLength
Param4Desc=Enter the number of characters you want to copy from szString. This number cannot exceed the length of the source string.

[StrToLower]
SampleLine=StrToLower(svTarget, szSource)
Description=Converts all the letters in a string to lowercase. This function does not affect non-alphabetic characters.
Param1Name=svTarget
Param1Desc=Returns the converted string in lowercase letters.
Param2Name=szSource
Param2Desc=Enter the string you want to convert to all lowercase.

[StrToNum]
SampleLine=StrToNum(nvVar, szString)
Description=Converts a string into a number. StrToNum is similar to the C function atoi (ASCII to integer).
Param1Name=nvVar
Param1Desc=Returns the converted number.
Param2Name=szString
Param2Desc=Enter the numeric string you want to convert into a number. szString cannot contain letters.

[StrToUpper]
SampleLine=StrToUpper(svTarget, szSource)
Description=Converts all the letters in a string to uppercase. This function does not affect non-alphabetic characters.
Param1Name=svTarget
Param1Desc=Returns the converted string in uppercase letters.
Param2Name=szSource
Param2Desc=Enter the string you want to convert to all uppercase.

[System]
SampleLine=System(nOp)
Description=Restarts Windows or reboots the system.
Param1Name=nOp
Param1Desc=Specify which action you want to perform after terminating the setup. 
Param1Type=Combo
Param1Val1=SYS_BOOTMACHINE
Param1Val2=SYS_BOOTWIN
Param1Val3=SYS_TODOS

[UnUseDLL]
SampleLine=UnUseDLL(szDLLName)
Description=Unloads a DLL from memory when you are done using the DLL. \n\n** Available in Professional Edition Only ** 
Param1Name=szDLLName
Param1Desc=Enter the filename of the DLL. Do not include the path in this parameter.

[UseDLL]
SampleLine=UseDLL(szDLLName)
Description=Loads a DLL into memory. You must load the DLL into memory before you can call any function in the DLL from the script. If the loaded DLL accesses other DLLs, ensure that the other DLLs are in SUPPORTDIR. \n\n** Available in Professional Edition Only ** 
Param1Name=szDLLName
Param1Desc=Enter the fully qualified path and filename of the DLL you want to load into memory.

[VarRestore]
SampleLine=VarRestore(nType)
Description=Restores the SRCDIR and TARGETDIR system variables saved by the VarSave function.
Param1Name=nType
Param1Dflt=SRCTARGETDIR
Param1Desc=Enter SRCTARGETDIR to restore the previously saved values of the SRCDIR and TARGETDIR system variables.

[VarSave]
SampleLine=VarSave(nType)
Description=Saves the current value of the SRCDIR and TARGETDIR system variables.
Param1Name=nType
Param1Dflt=SRCTARGETDIR
Param1Desc=Enter SRCTARGETDIR to save the current values of the SRCDIR and TARGETDIR system variables.

[VerCompare]
SampleLine=VerCompare(szVersionInfo1, szVersionInfo2, nCompareFlag)
Description=Compares two strings that contain version information.
Param1Name=szVersionInfo1
Param1Desc=Enter the first version string in this format: Major version number. Minor version number.
Param2Name=szVersionInfo2
Param2Desc=Enter the second version string in the same format.
Param3Name=nCompareFlag
Param3Desc=Enter the constant VERSION to specify you are comparing version numbers. You cannot enter any other constant in this parameter.
Param3Dflt=VERSION

[VerFindFileVersion]
SampleLine=VerFindFileVersion(szFileName, svPath, svVersionNumber)
Description=Searches for a specified file and retrieves the file version and location. 
Param1Name=szFileName
Param1Desc=Enter only the name of the file whose version you want to find. You cannot specify a path in this parameter.
Param2Name=svPath
Param2Desc=Returns the fully qualified path of the file, if found.
Param3Name=svVersionNumber
Param3Desc=Returns the version number of the file, if found, in the following format: Major version number. Minor version number.

[VerGetFileVersion]
SampleLine=VerGetFileVersion(szFileName, svVersionNumber)
Description=Retrieves the version of a specified file.
Param1Name=szFileName
Param1Desc=Enter the fully qualified path and filename of the file whose version number you want to retrieve.
Param2Name=svVersionNumber
Param2Desc=Returns the version number in this format: Major version number.Minor version number.

[VerSearchAndUpdateFile]
SampleLine=VerSearchAndUpdateFile(szFileName, nUpdateFlag, svInstalledFile)
Description=Searches for the specified file and installs a newer version of the file if necessary.
Param1Name=szFileName
Param1Desc=Enter only the name of the file you want to install. You cannot include path information in this parameter.
Param2Name=nUpdateFlag
Param2Desc=Specifies whether the file should be updated unconditionally or only if the version of the file found on the target system is older than the version of the file that you have shipped.
Param2Type=Combo
Param2Val1=VER_UPDATE_COND
Param2Val2=VER_UPDATE_ALWAYS
Param3Name=svInstalledFile
Param3Desc=Contains the fully qualified path and filename of the file installed by the function.

[VerUpdateFile]
SampleLine=VerUpdateFile(szFileName, nUpdateFlag, svInstalledFilePath)
Description=Uses the version information of a specified file to determine whether or not to install the file on the target folder. 
Param1Name=szFileName
Param1Desc=Enter the name of the target file--the file on the target system that you want to update.
Param2Name=nUpdateFlag
Param2Desc=Specify how to update the file. You can combine options with the bitwise OR operator ( | ). You cannot combine SHAREDFILE with LOCKEDFILE.  
Param2Type=EdCombo
Param2Val1=LOCKEDFILE
Param2Val2=SHAREDFILE
Param2Val3=SELFREGISTER
Param2Val4=VER_UPDATE_ALWAYS
Param2Val5=VER_UPDATE_COND
Param3Name=svInstalledFilePath
Param3Desc=Returns the fully qualified path and filename of the file that the function installed. 

[WaitOnDialog]
SampleLine=WaitOnDialog(szDlgName)
Description=Displays a custom dialog box. You can write your script to handle different responses from the user based on the return value from this function. \n\n** Available in Professional Edition Only **
Param1Name=szDlgName
Param1Desc=Enter the ID of the dialog box you want to display.

[Welcome]
SampleLine=Welcome(szTitle, nReserved)
Description=Creates and displays the welcome dialog box.
Param1Name=szTitle
Param1Desc=Enter the text you want to appear as the title of this dialog box.
Param2Name=nReserved
Param2Desc=Enter 0 (zero) in this parameter. No other value is allowed.
Param2Dflt=0

[WriteBytes]
SampleLine=WriteBytes(nFile, svString, nIndex, nBytes)
Description=Writes a specific number of bytes to a file opened in the binary mode. \n\n** Available in Professional Edition Only ** 
Param1Name=nFile
Param1Desc=Enter the file handle of the file opened in binary mode.
Param2Name=svString
Param2Desc=The string containing the bytes you want to write to the output file.
Param3Name=nIndex
Param3Desc=Enter the starting location in svString where the bytes are written to the output file. The first byte is at index location 0.
Param4Name=nBytes
Param4Desc=Enter the number of bytes you want to write to the output file.

[WriteLine]
SampleLine=WriteLine(nvFileHandle, szLine)
Description=Writes a line of text to a text file opened in append mode.
Param1Name=nvFileHandle
Param1Desc=Enter the file handle of an open file. The handle is obtained from the OpenFile or CreateFile function.
Param2Name=szLine
Param2Desc=Enter a string containing the text you want to write to the file.

[WriteProfString]
SampleLine=WriteProfString(szFile, szSectionName, szKeyName, szValue)
Description=Writes a profile string to a specific INI file. \n\n** Available in Professional Edition Only ** 
Param1Name=szFile
Param1Desc=Enter the fully qualified path and filename of the INI file. If the INI file does not exist, this function creates the file. The specified folder must already exist.
Param2Name=szSectionName
Param2Desc=Enter the name of the section where szValue will be copied. Do not include section name delimiting brackets ( [] ). If the section does not exist, this function creates it for you. This parameter is case-independent.
Param3Name=szKeyName
Param3Desc=Enter the key you want to associate with szValue. 
Param4Name=szValue
Param4Desc=Enter the value you want to write to the INI file. 

[XCopyFile]
SampleLine=XCopyFile(szSrcFile, szTargetFile, nOp)
Description=Copies a file or files from the source folder to the target folder.
Param1Name=szSrcFile
Param1Desc=Enter the name of file you want to copy. You can copy multiple files using wild card characters in this parameter, but you cannot include a path. This parameter uses SRCDIR as its path.
Param2Name=szTargetFile
Param2Desc=Currently, szTargetFile is ignored. However, a string value must be present. Enter a null string or wildcard expression such as "*.*".
Param3Name=nOp
Param3Desc=Specify the type of copy operation you want to perform. You can combine options with the bitwise OR operator ( | ). You cannot combine SHAREDFILE with LOCKEDFILE.
Param3Type=EdCombo
Param3Val1=COMP_NORMAL
Param3Val2=COMP_UPDATE_SAME
Param3Val3=COMP_UPDATE_DATE
Param3Val4=COMP_UPDATE_VERSION
Param3Val5=SELFREGISTER
Param3Val6=SHAREDFILE
Param3Val7=LOCKEDFILE
Param3Val8=EXCLUDE_SUBDIR
Param3Val9=INCLUDE_SUBDIR
