/*************************/
/*************************/////////////////////////////////////////////////////////////////////////////////
/*************************///                                                                            
/*************************///  IIIIIII SSSSSS                                                            
/*************************///    II    SS                          InstallShield (R)                     
/*************************///    II    SSSSSS      (c) 1996-1997, InstallShield Software Corporation     
/*************************///    II        SS      (c) 1990-1996, InstallShield Corporation              
/*************************///  IIIIIII SSSSSS                     All Rights Reserved.                   
/*************************///                                                                            
/*************************///                                                                            
/*************************///  This code is generated as a starting setup template.  You should   
/*************************///  modify it to provide all necessary steps for your setup.
/*************************///                                                                            
/*************************///                                                                            
/*************************///    File Name:  Setup.rul                                                   
/*************************///                                                                            
/*************************///  Description:  InstallShield script                                        
/*************************///                                                                            
/*************************///     Comments:  This template script performs a basic setup on a     
/*************************///                Windows 95 or Windows NT 4.0 platform. With minor           
/*************************///                modifications, this template can be adapted to create       
/*************************///                new, customized setups.
/*************************///
/*************************/////////////////////////////////////////////////////////////////////////////////
/*************************/
/*************************/
/*************************/  // Include header file
/*************************/#include "sdlang.h"   
/*************************/#include "sddialog.h"
/*************************/
/*************************/////////////////////// string defines ////////////////////////////
/*************************/
/*************************/#define UNINST_LOGFILE_NAME      "Uninst.isu"
/*************************/
/*************************///////////////////// installation declarations ///////////////////
/*************************/
/*************************/  // ----- DLL prototypes -----
/*************************/
/*************************/
/*************************/     // your DLL prototypes
/*************************/
/*************************/
/*************************/  // ---- script prototypes -----
/*************************/
/*************************/     // generated
/*************************/     prototype ShowDialogs();
/*************************/     prototype MoveFileData();
/*************************/     prototype HandleMoveDataError( NUMBER );
/*************************/     prototype ProcessBeforeDataMove();
/*************************/     prototype ProcessAfterDataMove();
/*************************/     prototype SetupRegistry();
/*************************/     prototype SetupFolders();
/*************************/     prototype CleanUpInstall();
/*************************/     prototype SetupInstall();
/*************************/     prototype SetupScreen();
/*************************/     prototype CheckRequirements();
/*[sdwel]*****************/     prototype DialogShowSdWelcome();
/*[sdlic]*****************/     prototype DialogShowSdLicense();
/*[sdinfo]****************/     prototype DialogShowSdShowInfoList();
/*[sdregx]****************/     prototype DialogShowSdRegisterUserEx();
/*[sdadp]*****************/     prototype DialogShowSdAskDestPath();
/*[sdstype]***************/     prototype DialogShowSdSetupType();
/*[sdcd2]*****************/     prototype DialogShowSdComponentDialog2();
/*[sdfldr]****************/     prototype DialogShowSdSelectFolder();
/*[sdcfile]***************/     prototype DialogShowSdStartCopy();
/*[sdfinr]****************/     prototype DialogShowSdFinishReboot();
/*************************/
/*************************/     // your prototypes
/*************************/
/*************************/
/*************************/  // ----- global variables ------
/*************************/
/*************************/     // generated
/*************************/     BOOL        bWinNT, bIsShellExplorer, bInstallAborted, bIs32BitSetup;
/*************************/     STRING      svDir;
/*************************/     STRING      svName, svCompany, svSerial;
/*************************/     STRING      svDefGroup;
/*************************/     STRING      szAppPath;
/*************************/     STRING      svSetupType;
/*[sdcfile]***************/     LIST        listStartCopy;
/*************************/
/*************************/
/*************************/     // your global variables
/*************************/
/*************************/
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************///
/*************************///   MAIN PROGRAM                                                            
/*************************///
/*************************///      The setup begins here by hiding the visible setup   
/*************************///      window.  This is done to allow all the titles, images, etc. to   
/*************************///      be established before showing the main window.  The following     
/*************************///      logic then performs the setup in a series of steps.           
/*************************///
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************/program
/*************************/    Disable( BACKGROUND );
/*************************/
/*************************/    CheckRequirements();
/*************************/
/*************************/    SetupInstall();
/*************************/
/*************************/    SetupScreen();
/*************************/
/*************************/    if (ShowDialogs()<0) goto end_install;
/*************************/
/*************************/    if (ProcessBeforeDataMove()<0) goto end_install;
/*************************/
/*************************/    if (MoveFileData()<0) goto end_install;
/*************************/
/*************************/    if (ProcessAfterDataMove()<0) goto end_install;
/*************************/
/*************************/    if (SetupRegistry()<0) goto end_install;
/*************************/
/*************************/    if (SetupFolders()<0) goto end_install;
/*************************/
/*************************/
/*************************/  end_install:
/*************************/
/*************************/    CleanUpInstall();
/*************************/
/*************************/     // If an unrecoverable error occurred, clean up the partial installation.
/*************************/     // Otherwise, exit normally.
/*************************/
/*************************/    if (bInstallAborted) then
/*************************/        abort;
/*************************/    endif;
/*************************/
/*************************/endprogram
/*************************/
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************///                                                                           //
/*************************/// Function:  ShowDialogs                                                    //
/*************************///                                                                           //
/*************************///  Purpose:  This function manages the display and navigation               //
/*************************///            the standard dialogs that exist in a setup.                    //
/*************************///                                                                           //
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************/function ShowDialogs()
/*************************/    NUMBER  nResult;
/*************************/ begin
/*************************/
/***********************:*/    $$$Dlg_Start$$$:
/*************************/        // beginning of dialogs label
/*************************/
/*[sdwel]***************:*/    $$$Dlg_SdWelcome$$$:
/*[sdwel]*****************/        nResult = DialogShowSdWelcome();
/*[sdwel]***************:*/        if (nResult = BACK) goto $$$prevprev$$$;
/*[sdwel]*****************/
/*[sdlic]***************:*/    $$$Dlg_SdLicense$$$:
/*[sdlic]*****************/        nResult = DialogShowSdLicense();
/*[sdlic]***************:*/        if (nResult = BACK) goto $$$prevprev$$$;
/*[sdlic]*****************/
/*[sdinfo]**************:*/    $$$Dlg_SdShowInfoList$$$:
/*[sdinfo]****************/        nResult = DialogShowSdShowInfoList();
/*[sdinfo]**************:*/        if (nResult = BACK) goto $$$prevprev$$$;
/*[sdinfo]****************/
/*[sdregx]**************:*/    $$$Dlg_SdRegisterUserEx$$$:
/*[sdregx]****************/        nResult = DialogShowSdRegisterUserEx();
/*[sdregx]**************:*/        if (nResult = BACK) goto $$$prevprev$$$;
/*[sdregx]****************/
/*[sdadp]***************:*/    $$$Dlg_SdAskDestPath$$$:
/*[sdadp]*****************/        nResult = DialogShowSdAskDestPath();
/*[sdadp]***************:*/        if (nResult = BACK) goto $$$prevprev$$$;
/*[sdadp]*****************/
/*[sdstype]*************:*/    $$$Dlg_SdSetupType$$$:
/*[sdstype]***************/        nResult = DialogShowSdSetupType();
/*[sdstype]*************:*/        if (nResult = BACK) goto $$$prevprev$$$;
/*[sdstype]***************/
/*[sdcd2]***************:*/    $$$Dlg_SdComponentDialog2$$$:
/*[sdcd2]*****************/        if ((nResult = BACK) && (svSetupType != "Custom") && (svSetupType != "")) then
/*[sdcd2]***************:*/           goto $$$prevprev$$$;
/*[sdcd2]*****************/        endif;
/*[sdcd2]*****************/        nResult = DialogShowSdComponentDialog2();
/*[sdcd2]***************:*/        if (nResult = BACK) goto $$$prevprev$$$;
/*[sdcd2]*****************/
/*[sdfldr]**************:*/    $$$Dlg_SdSelectFolder$$$:
/*[sdfldr]****************/        nResult = DialogShowSdSelectFolder();
/*[sdfldr]**************:*/        if (nResult = BACK) goto $$$prevprev$$$;
/*[sdfldr]****************/
/*[sdcfile]*************:*/    $$$Dlg_SdStartCopy$$$:
/*[sdcfile]***************/        nResult = DialogShowSdStartCopy();
/*[sdcfile]*************:*/        if (nResult = BACK) goto $$$prevprev$$$;
/*[sdcfile]***************/
/*************************/    return 0;
/*************************/
/*************************/ end;
/*************************/
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************///                                                                           //
/*************************/// Function: ProcessBeforeDataMove                                           //
/*************************///                                                                           //
/*************************///  Purpose: This function performs any necessary operations prior to the    //
/*************************///           actual data move operation.                                     //
/*************************///                                                                           //
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************/function ProcessBeforeDataMove()
/*************************/    STRING svLogFile;
/*************************/    NUMBER nResult;
/*************************/ begin
/*************************/
/*************************/  InstallationInfo( @COMPANY_NAME, @PRODUCT_NAME, @PRODUCT_VERSION, @PRODUCT_KEY );
/*************************/
/*************************/  svLogFile = UNINST_LOGFILE_NAME;
/*************************/
/*************************/  nResult = DeinstallStart( svDir, svLogFile, @UNINST_KEY, 0 );
/*************************/  if (nResult < 0) then
/*************************/      MessageBox( @ERROR_UNINSTSETUP, WARNING );
/*************************/  endif;
/*************************/     
/*************************/  szAppPath = TARGETDIR; // TODO : if your application .exe is in a subdir of TARGETDIR then add subdir
/*************************/     
/*************************/  if ((bIs32BitSetup) && (bIsShellExplorer)) then 
/*************************/      RegDBSetItem( REGDB_APPPATH, szAppPath );
/*************************/      RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY );
/*************************/      RegDBSetItem( REGDB_UNINSTALL_NAME, @UNINST_DISPLAY_NAME );
/*************************/  endif;
/*************************/
/*************************/  // TODO : update any items you want to process before moving the data
/*************************/  //      
/*************************/
/*************************/  return 0;
/*************************/ end;
/*************************/
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************///                                                                           //
/*************************/// Function:  MoveFileData                                                   //
/*************************///                                                                           //
/*************************///  Purpose:  This function handles the data movement for                    //
/*************************///            the setup.                                                     //
/*************************///                                                                           //
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************/function MoveFileData()
/*************************/    NUMBER nResult, nDisk;
/*************************/ begin
/*************************/
/*************************/  nDisk = 1;
/*************************/  SetStatusWindow( 0, "" );
/*************************/  Disable( DIALOGCACHE );
/*************************/  Enable( STATUS );
/*************************/  StatusUpdate( ON, 100 );
/*************************/  nResult = ComponentMoveData( MEDIA, nDisk, 0 );
/*************************/
/*************************/  HandleMoveDataError( nResult );
/*************************/
/*************************/  Disable( STATUS );
/*************************/
/*************************/  return nResult;
/*************************/
/*************************/ end;
/*************************/
/*************************/
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************///                                                                           //
/*************************/// Function: HandleMoveDataError                                             //
/*************************///                                                                           //
/*************************///  Purpose: This function handles the error (if any) during the move data   //
/*************************///           operation.                                                      //
/*************************///                                                                           //
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************/function HandleMoveDataError( nResult )
/*************************/ begin
/*************************/
/*************************/  switch (nResult)
/*************************/  case 0:
/*************************/       return 0;
/*************************/  default:
/*************************/       SprintfBox( SEVERE, @TITLE_CAPTIONBAR, @ERROR_MOVEDATA, nResult );
/*************************/       bInstallAborted = TRUE;
/*************************/       return nResult;
/*************************/  endswitch;
/*************************/
/*************************/ end;
/*************************/
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************///                                                                           //
/*************************/// Function: ProcessAfterDataMove                                            //
/*************************///                                                                           //
/*************************///  Purpose: This function performs any necessary operations needed after    //
/*************************///           all data has been moved.                                        //
/*************************///                                                                           //
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************/function ProcessAfterDataMove()
/*************************/    STRING szReferenceFile;
/*************************/ begin
/*************************/
/*************************/  // TODO : update self-registered files and other processes that
/*************************/  //        should be performed after the data has been moved.
/*************************/
/*************************/  // DeinstallSetReference specifies a file to be checked before
/*************************/  // uninstallation. If the file is in use, uninstallation will not proceed.
/*************************/
/*************************/  szReferenceFile = svDir ^ @PRODUCT_KEY; // TODO : If your file is in a subdir of svDir add that here
/*************************/  DeinstallSetReference( szReferenceFile );
/*************************/
/*************************/
/*************************/  return 0;
/*************************/ end;
/*************************/
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************///                                                                           //
/*************************/// Function: SetupRegistry                                                   //
/*************************///                                                                           //
/*************************///  Purpose: This function makes the registry entries for this setup.        //
/*************************///                                                                           //
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************/function SetupRegistry()
/*************************/ begin
/*************************/
/*************************/  // TODO : Add all your registry entry keys here
/*************************/  //
/*************************/  //
/*************************/  //    RegDBCreateKeyEx, RegDBSetKeyValueEx....
/*************************/  //
/*************************/
/*************************/  return 0;
/*************************/ end;
/*************************/
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************/// 
/*************************/// Function: SetupFolders                                                    
/*************************/// 
/*************************///  Purpose: This function creates all the folders and shortcuts for the  
/*************************///           setup.  This includes program groups and items for Windows 3.1.    
/*************************/// 
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************/function SetupFolders()
/*************************/ begin
/*************************/
/*************************/
/*************************/  // TODO : Add all your folder (program group) along with shortcuts (program items)
/*************************/  //
/*************************/  //
/*************************/  //    CreateProgramFolder, AddFolderIcon....
/*************************/  //
/*************************/  //    Note : for 16-bit setups you should add an uninstaller icon pointing to 
/*************************/  //           your log file.  Under 32-bit this is automatically done by Windows.
/*************************/  
/*************************/  return 0;
/*************************/ end;
/*************************/
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************///                                                                           //
/*************************/// Function: CleanUpInstall                                                  //
/*************************///                                                                           //
/*************************///  Purpose: This cleans up the setup.  Anything that should                 //
/*************************///           be released or deleted at the end of the setup should           //
/*************************///           be done here.                                                   //
/*************************///                                                                           //
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************/function CleanUpInstall()
/*************************/ begin
/*************************/
/*[sdcfile]***************/  ListDestroy( listStartCopy );   
/*************************/
/*************************/  if (bInstallAborted) then
/*************************/      return 0;
/*************************/  endif;
/*************************/
/*[sdfinr]****************/  DialogShowSdFinishReboot();
/*[sdfinr]****************/
/*************************/  if (BATCH_INSTALL) then // ensure locked files are properly written
/*************************/      CommitSharedFiles(0);
/*************************/  endif;
/*************************/
/*************************/  return 0;
/*************************/ end;
/*************************/
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************///                                                                           //
/*************************/// Function: SetupInstall                                                    //
/*************************///                                                                           //
/*************************///  Purpose: This will setup the installation.  Any general initialization   //
/*************************///           needed for the installation should be performed here.           //
/*************************///                                                                           //
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************/function SetupInstall()
/*************************/ begin
/*************************/
/*************************/  Enable( CORECOMPONENTHANDLING );
/*************************/
/*************************/  bInstallAborted = FALSE;
/*[sdcfile]***************/
/*[sdcfile]***************/  listStartCopy = ListCreate(STRINGLIST);   
/*[sdcfile]***************/  
/*[sdcfile]***************/  ListAddString( listStartCopy, "Place the summary here.", AFTER );
/*************************/
/*************************/  if (bIs32BitSetup) then
/*************************/      svDir = PROGRAMFILES ^ @COMPANY_NAME ^ @PRODUCT_NAME;
/*************************/  else
/*************************/      svDir = PROGRAMFILES ^ @COMPANY_NAME16 ^ @PRODUCT_NAME16; // use shorten names
/*************************/  endif;
/*************************/
/*************************/  TARGETDIR  = svDir;
/*************************/
/*************************/  SdProductName( @PRODUCT_NAME );
/*************************/
/*************************/  Enable( DIALOGCACHE );
/*************************/
/*************************/  return 0;
/*************************/ end;
/*************************/
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************///                                                                           //
/*************************/// Function:  SetupScreen                                                    //
/*************************///                                                                           //
/*************************///  Purpose:  This function establishes  the screen look.  This includes     //
/*************************///            colors, fonts, and text to be displayed.                       //
/*************************///                                                                           //
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************/function SetupScreen()
/*************************/ begin
/*************************/
/*************************/  Enable( FULLWINDOWMODE );
/*************************/  SetTitle( @TITLE_MAIN, 24, WHITE );
/*************************/
/*************************/  SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION ); // Caption bar text.
/*************************/
/*************************/  Enable( BACKGROUND );
/*************************/
/*************************/  Delay( 1 );
/*************************/ end;
/*************************/
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************///                                                                           //
/*************************/// Function:  CheckRequirements                                              //
/*************************///                                                                           //
/*************************///  Purpose:  This function checks all minimum requirements for the          //
/*************************///            application being installed.  If any fail, then the user       //
/*************************///            is informed and the setup is terminated.                       //
/*************************///                                                                           //
/*************************////////////////////////////////////////////////////////////////////////////////
/*************************/function CheckRequirements()
/*************************/    NUMBER  nvDx, nvDy, nvResult;
/*************************/    STRING  svResult;
/*************************/
/*************************/ begin
/*************************/
/*************************/  bWinNT           = FALSE;
/*************************/  bIsShellExplorer = FALSE;
/*************************/
/*************************/  // Check screen resolution.
/*************************/  GetExtents( nvDx, nvDy );
/*************************/
/*************************/  if (nvDy < 480) then
/*************************/      MessageBox( @ERROR_VGARESOLUTION, WARNING );
/*************************/      abort;
/*************************/  endif;
/*************************/
/*************************/  // set 'setup' operation mode
/*************************/  bIs32BitSetup = TRUE;
/*************************/  GetSystemInfo( ISTYPE, nvResult, svResult );
/*************************/  if (nvResult = 16) then
/*************************/      bIs32BitSetup = FALSE; // running 16-bit setup
/*************************/      return 0; // no additional information required
/*************************/  endif;
/*************************/
/*************************/  // --- 32-bit testing after this point ---
/*************************/
/*************************/  // Determine the target system's operating system.
/*************************/  GetSystemInfo( OS, nvResult, svResult );
/*************************/
/*************************/  if (nvResult =  IS_WINDOWSNT) then
/*************************/      // Running Windows NT.
/*************************/      bWinNT = TRUE;
/*************************/
/*************************/      // Check to see if the shell being used is EXPLORER shell.
/*************************/      if (GetSystemInfo( OSMAJOR, nvResult, svResult ) = 0) then
/*************************/          if (nvResult >= 4) then
/*************************/              bIsShellExplorer = TRUE;
/*************************/          endif;
/*************************/      endif;
/*************************/
/*************************/  elseif (nvResult = IS_WINDOWS95 ) then
/*************************/      bIsShellExplorer = TRUE;
/*************************/
/*************************/  endif;
/*************************/
/*************************/ end;
/*************************/
/*************************/
/*[sdwel]*****************////////////////////////////////////////////////////////////////////////////////
/*[sdwel]*****************///                                                                           //
/*[sdwel]*****************/// Function: DialogShowSdWelcome                                             //
/*[sdwel]*****************///                                                                           //
/*[sdwel]*****************///  Purpose: This function handles the standard welcome dialog.              //
/*[sdwel]*****************///                                                                           //
/*[sdwel]*****************///                                                                           //
/*[sdwel]*****************////////////////////////////////////////////////////////////////////////////////
/*[sdwel]*****************/function DialogShowSdWelcome()
/*[sdwel]*****************/    NUMBER nResult;
/*[sdwel]*****************/    STRING szTitle, szMsg;
/*[sdwel]*****************/ begin
/*[sdwel]*****************/
/*[sdwel]*****************/  szTitle = "";
/*[sdwel]*****************/  szMsg   = "";
/*[sdwel]*****************/  nResult = SdWelcome( szTitle, szMsg );
/*[sdwel]*****************/
/*[sdwel]*****************/  return nResult;
/*[sdwel]*****************/ end;
/*[sdwel]*****************/
/*[sdwel]*****************/
/*[sdlic]*****************////////////////////////////////////////////////////////////////////////////////
/*[sdlic]*****************///                                                                           //
/*[sdlic]*****************/// Function: DialogShowSdLicense                                             //
/*[sdlic]*****************///                                                                           //
/*[sdlic]*****************///  Purpose: This function displays the license agreement dialog.            //
/*[sdlic]*****************///                                                                           //
/*[sdlic]*****************///                                                                           //
/*[sdlic]*****************////////////////////////////////////////////////////////////////////////////////
/*[sdlic]*****************/function DialogShowSdLicense()
/*[sdlic]*****************/    NUMBER nResult;
/*[sdlic]*****************/    STRING szTitle, szMsg, szQuestion, szLicenseFile;
/*[sdlic]*****************/ begin
/*[sdlic]*****************/
/*[sdlic]*****************/  szLicenseFile = SUPPORTDIR ^ "license.txt";
/*[sdlic]*****************/  szTitle    = "";
/*[sdlic]*****************/  szMsg      = "";
/*[sdlic]*****************/  szQuestion = "";
/*[sdlic]*****************/  nResult    = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );
/*[sdlic]*****************/
/*[sdlic]*****************/  return nResult;
/*[sdlic]*****************/ end;
/*[sdlic]*****************/
/*[sdlic]*****************/
/*[sdinfo]****************////////////////////////////////////////////////////////////////////////////////
/*[sdinfo]****************///                                                                           //
/*[sdinfo]****************/// Function: DialogShowSdShowInfoList                                        //
/*[sdinfo]****************///                                                                           //
/*[sdinfo]****************///  Purpose: This function displays the general information list dialog.     //
/*[sdinfo]****************///                                                                           //
/*[sdinfo]****************///                                                                           //
/*[sdinfo]****************////////////////////////////////////////////////////////////////////////////////
/*[sdinfo]****************/function DialogShowSdShowInfoList()
/*[sdinfo]****************/    NUMBER nResult;
/*[sdinfo]****************/    LIST   list;
/*[sdinfo]****************/    STRING szTitle, szMsg, szFile;
/*[sdinfo]****************/ begin
/*[sdinfo]****************/
/*[sdinfo]****************/  szFile = SUPPORTDIR ^ "infolist.txt";
/*[sdinfo]****************/
/*[sdinfo]****************/  list = ListCreate( STRINGLIST );
/*[sdinfo]****************/  ListReadFromFile( list, szFile );
/*[sdinfo]****************/  szTitle  = "";
/*[sdinfo]****************/  szMsg    = " ";
/*[sdinfo]****************/  nResult  = SdShowInfoList( szTitle, szMsg, list );
/*[sdinfo]****************/
/*[sdinfo]****************/  ListDestroy( list );
/*[sdinfo]****************/
/*[sdinfo]****************/  return nResult;
/*[sdinfo]****************/ end;
/*[sdinfo]****************/
/*[sdinfo]****************/
/*[sdregx]****************////////////////////////////////////////////////////////////////////////////////
/*[sdregx]****************///                                                                           //
/*[sdregx]****************/// Function: DialogShowSdRegisterUserEx                                      //
/*[sdregx]****************///                                                                           //
/*[sdregx]****************///  Purpose: This function displays the user registration dialog.            //
/*[sdregx]****************///                                                                           //
/*[sdregx]****************///                                                                           //
/*[sdregx]****************////////////////////////////////////////////////////////////////////////////////
/*[sdregx]****************/function DialogShowSdRegisterUserEx()
/*[sdregx]****************/    NUMBER nResult;
/*[sdregx]****************/    STRING szTitle, szMsg;
/*[sdregx]****************/ begin
/*[sdregx]****************/
/*[sdregx]****************/  
/*[sdregx]****************/  svName    = "";
/*[sdregx]****************/  svCompany = "";
/*[sdregx]****************/
/*[sdregx]****************/  szTitle = "";
/*[sdregx]****************/  szMsg   = "";
/*[sdregx]****************/  nResult = SdRegisterUserEx( szTitle, szMsg, svName, svCompany, svSerial );
/*[sdregx]****************/
/*[sdregx]****************/  return nResult;
/*[sdregx]****************/ end;
/*[sdregx]****************/
/*[sdregx]****************/
/*[sdadp]*****************////////////////////////////////////////////////////////////////////////////////
/*[sdadp]*****************///                                                                           //
/*[sdadp]*****************/// Function: DialogShowSdAskDestPath                                         //
/*[sdadp]*****************///                                                                           //
/*[sdadp]*****************///  Purpose: This function asks the user for the destination directory.      //
/*[sdadp]*****************///                                                                           //
/*[sdadp]*****************////////////////////////////////////////////////////////////////////////////////
/*[sdadp]*****************/function DialogShowSdAskDestPath()
/*[sdadp]*****************/    NUMBER nResult;
/*[sdadp]*****************/    STRING szTitle, szMsg;
/*[sdadp]*****************/ begin
/*[sdadp]*****************/
/*[sdadp]*****************/  szTitle = "";
/*[sdadp]*****************/  szMsg   = "";
/*[sdadp]*****************/  nResult = SdAskDestPath( szTitle, szMsg, svDir, 0 );
/*[sdadp]*****************/
/*[sdadp]*****************/  TARGETDIR = svDir;
/*[sdadp]*****************/
/*[sdadp]*****************/  return nResult;
/*[sdadp]*****************/ end;
/*[sdadp]*****************/
/*[sdadp]*****************/
/*[sdstypeex]*************////////////////////////////////////////////////////////////////////////////////
/*[sdstypeex]*************///                                                                           //
/*[sdstypeex]*************/// Function: DialogShowSdSetupType                                           //
/*[sdstypeex]*************///                                                                           //
/*[sdstypeex]*************///  Purpose: This function displays the standard setup type dialog.          //
/*[sdstypeex]*************///                                                                           //
/*[sdstypeex]*************////////////////////////////////////////////////////////////////////////////////
/*[sdstypeex]*************/function DialogShowSdSetupType()
/*[sdstypeex]*************/    NUMBER nResult;
/*[sdstypeex]*************/    STRING szTitle, szMsg;
/*[sdstypeex]*************/ begin
/*[sdstypeex]*************/
/*[sdstypeex]*************/  if (svSetupType = "") then
/*[sdstypeex]*************/      svSetupType = "Typical";
/*[sdstypeex]*************/  endif;
/*[sdstypeex]*************/
/*[sdstypeex]*************/  szTitle = "";
/*[sdstypeex]*************/  szMsg   = "";
/*[sdstypeex]************/   nResult = SdSetupTypeEx( szTitle, szMsg, "", svSetupType, 0 );
/*[sdstypeex]*************/
/*[sdstypeex]*************/  return nResult;
/*[sdstypeex]*************/ end;
/*[sdstypeex]*************/
/*[sdstypeex]*************/
/*[sdstypestd]************////////////////////////////////////////////////////////////////////////////////
/*[sdstypestd]************///                                                                           //
/*[sdstypestd]************/// Function: DialogShowSdSetupType                                           //
/*[sdstypestd]************///                                                                           //
/*[sdstypestd]************///  Purpose: This function displays the standard setup type dialog.          //
/*[sdstypestd]************///                                                                           //
/*[sdstypestd]************////////////////////////////////////////////////////////////////////////////////
/*[sdstypestd]************/function DialogShowSdSetupType()
/*[sdstypestd]************/    NUMBER nResult, nType;
/*[sdstypestd]************/    STRING szTitle, szMsg;
/*[sdstypestd]************/ begin
/*[sdstypestd]************/
/*[sdstypestd]************/  switch (svSetupType) 
/*[sdstypestd]************/  case "Typical":
/*[sdstypestd]************/       nType = TYPICAL;
/*[sdstypestd]************/  case "Custom":
/*[sdstypestd]************/       nType = CUSTOM;
/*[sdstypestd]************/  case "Compact":
/*[sdstypestd]************/       nType = COMPACT;
/*[sdstypestd]************/  case "":
/*[sdstypestd]************/       svSetupType = "Typical";
/*[sdstypestd]************/       nType = TYPICAL;
/*[sdstypestd]************/  endswitch;
/*[sdstypestd]************/
/*[sdstypestd]************/  szTitle = "";
/*[sdstypestd]************/  szMsg   = "";
/*[sdstypestd]************/  nResult = SetupType( szTitle, szMsg, "", nType, 0 );
/*[sdstypestd]************/
/*[sdstypestd]************/  switch (nResult)
/*[sdstypestd]************/  case COMPACT:
/*[sdstypestd]************/       svSetupType = "Compact";
/*[sdstypestd]************/  case TYPICAL:
/*[sdstypestd]************/       svSetupType = "Typical";
/*[sdstypestd]************/  case CUSTOM:
/*[sdstypestd]************/       svSetupType = "Custom";
/*[sdstypestd]************/  endswitch;
/*[sdstypestd]************/
/*[sdstypestd]************/  return nResult;
/*[sdstypestd]************/ end;
/*[sdstypestd]************/
/*[sdstypestd]************/
/*[sdcd2]*****************////////////////////////////////////////////////////////////////////////////////
/*[sdcd2]*****************///                                                                           //
/*[sdcd2]*****************/// Function: DialogShowSdComponentDialog2                                    //
/*[sdcd2]*****************///                                                                           //
/*[sdcd2]*****************///  Purpose: This function displays the custom component dialog.             //
/*[sdcd2]*****************///                                                                           //
/*[sdcd2]*****************///                                                                           //
/*[sdcd2]*****************////////////////////////////////////////////////////////////////////////////////
/*[sdcd2]*****************/function DialogShowSdComponentDialog2()
/*[sdcd2]*****************/    NUMBER nResult;
/*[sdcd2]*****************/    STRING szTitle, szMsg;
/*[sdcd2]*****************/ begin
/*[sdcd2]*****************/
/*[sdcd2]*****************/  if ((svSetupType != "Custom") && (svSetupType != "")) then
/*[sdcd2]*****************/      return 0;
/*[sdcd2]*****************/  endif;
/*[sdcd2]*****************/
/*[sdcd2]*****************/  szTitle  = "";
/*[sdcd2]*****************/  szMsg    = "";
/*[sdcd2]*****************/  nResult  = SdComponentDialog2( szTitle, szMsg, svDir, "" );
/*[sdcd2]*****************/
/*[sdcd2]*****************/  return nResult;
/*[sdcd2]*****************/ end;
/*[sdcd2]*****************/
/*[sdcd2]*****************/
/*[sdfldr]****************////////////////////////////////////////////////////////////////////////////////
/*[sdfldr]****************///                                                                           //
/*[sdfldr]****************/// Function: DialogShowSdSelectFolder                                        //
/*[sdfldr]****************///                                                                           //
/*[sdfldr]****************///  Purpose: This function displays the standard folder selection dialog.    //
/*[sdfldr]****************///                                                                           //
/*[sdfldr]****************///                                                                           //
/*[sdfldr]****************////////////////////////////////////////////////////////////////////////////////
/*[sdfldr]****************/function DialogShowSdSelectFolder()
/*[sdfldr]****************/    NUMBER nResult;
/*[sdfldr]****************/    STRING szTitle, szMsg;
/*[sdfldr]****************/ begin
/*[sdfldr]****************/
/*[sdfldr]****************/  if (svDefGroup = "") then
/*[sdfldr]****************/      svDefGroup = @FOLDER_NAME;
/*[sdfldr]****************/  endif;
/*[sdfldr]****************/
/*[sdfldr]****************/  szTitle    = "";
/*[sdfldr]****************/  szMsg      = "";
/*[sdfldr]****************/  nResult    = SdSelectFolder( szTitle, szMsg, svDefGroup );
/*[sdfldr]****************/
/*[sdfldr]****************/  return nResult;
/*[sdfldr]****************/ end;
/*[sdfldr]****************/
/*[sdfldr]****************/
/*[sdcfile]***************////////////////////////////////////////////////////////////////////////////////
/*[sdcfile]***************///                                                                           //
/*[sdcfile]***************/// Function: DialogShowSdStartCopy                                           //
/*[sdcfile]***************///                                                                           //
/*[sdcfile]***************///   Purpose: This function displays the dialog preceding the start of the   //
/*[sdcfile]***************///            file copying process.                                          //
/*[sdcfile]***************///                                                                           //
/*[sdcfile]***************////////////////////////////////////////////////////////////////////////////////
/*[sdcfile]***************/function DialogShowSdStartCopy()
/*[sdcfile]***************/    NUMBER nResult;
/*[sdcfile]***************/    STRING szTitle, szMsg;
/*[sdcfile]***************/ begin
/*[sdcfile]***************/  
/*[sdcfile]***************/  szTitle = "";
/*[sdcfile]***************/  szMsg   = "";
/*[sdcfile]***************/  nResult = SdStartCopy( szTitle, szMsg, listStartCopy );
/*[sdcfile]***************/
/*[sdcfile]***************/  return nResult;
/*[sdcfile]***************/ end;
/*[sdcfile]***************/
/*[sdcfile]***************/
/*[sdfinr]****************////////////////////////////////////////////////////////////////////////////////
/*[sdfinr]****************///                                                                           //
/*[sdfinr]****************/// Function: DialogShowSdFinishReboot                                        //
/*[sdfinr]****************///                                                                           //
/*[sdfinr]****************///  Purpose: This function will show the last dialog of the product.         //
/*[sdfinr]****************///           It will allow the user to reboot and/or show some readme text.  //
/*[sdfinr]****************///                                                                           //
/*[sdfinr]****************////////////////////////////////////////////////////////////////////////////////
/*[sdfinr]****************/function DialogShowSdFinishReboot()
/*[sdfinr]****************/    NUMBER nResult, nDefOptions;
/*[sdfinr]****************/    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
/*[sdfinr]****************/    NUMBER bOpt1, bOpt2;
/*[sdfinr]****************/ begin
/*[sdfinr]****************/
/*[sdfinr]****************/  if (!BATCH_INSTALL) then
/*[sdfinr]****************/      bOpt1 = FALSE;
/*[sdfinr]****************/      bOpt2 = FALSE;
/*[sdfinr]****************/      szMsg1 = "";
/*[sdfinr]****************/      szMsg2 = "";
/*[sdfinr]****************/      szOption1 = "";
/*[sdfinr]****************/      szOption2 = "";
/*[sdfinr]****************/      nResult = SdFinish( szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2 );
/*[sdfinr]****************/      return 0;
/*[sdfinr]****************/  endif;
/*[sdfinr]****************/
/*[sdfinr]****************/  nDefOptions = SYS_BOOTMACHINE;
/*[sdfinr]****************/  szTitle     = "";
/*[sdfinr]****************/  szMsg1      = "";
/*[sdfinr]****************/  szMsg2      = "";
/*[sdfinr]****************/  nResult     = SdFinishReboot( szTitle, szMsg1, nDefOptions, szMsg2, 0 );
/*[sdfinr]****************/
/*[sdfinr]****************/  return nResult;
/*[sdfinr]****************/ end;
/*[sdfinr]****************/
/*************************/ // --- include script file section ---
/*************************/
/*************************/#include "sddialog.rul"
/*************************/
