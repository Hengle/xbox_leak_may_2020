// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "regionkeyboard.h"

/////////////////////////////////////////////////////////////////////////////
// CRegionKeyboard

IMPLEMENT_DYNCREATE(CRegionKeyboard, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CRegionKeyboard properties

/////////////////////////////////////////////////////////////////////////////
// CRegionKeyboard operations

void CRegionKeyboard::InitializeKeyBoard(LPUNKNOWN RegionMap)
{
	static BYTE parms[] =
		VTS_UNKNOWN;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 RegionMap);
}

void CRegionKeyboard::SetCurrentRegion(short nLayer, short nStartNote)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nLayer, nStartNote);
}

void CRegionKeyboard::MidiEvent(short nMidiNote, short nNoteFlag, short nVelocity)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nMidiNote, nNoteFlag, nVelocity);
}

void CRegionKeyboard::SetRootNote(short nNote)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, nNote);
}

short CRegionKeyboard::InsertNewRegion(short nStartNote, short nEndNote, short nStartVelocity, short nEndVelocity)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		 nStartNote, nEndNote, nStartVelocity, nEndVelocity);

	return result;
}

short CRegionKeyboard::InsertRegion(short nLayer, short nStartNote, short nEndNote, short nStartVelocity, short nEndVelocity, LPCTSTR pszWaveName)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		 nLayer, nStartNote, nEndNote, nStartVelocity, nEndVelocity, pszWaveName);

	return result;
}

BOOL CRegionKeyboard::SetRange(short nStartNote, short nEndNote, short nStartVelocity, short nEndVelocity)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		 nStartNote, nEndNote, nStartVelocity, nEndVelocity);

	return result;
}

void CRegionKeyboard::DeleteRegion(short nLayer, short nStartNote)
{
	static BYTE parms[] = VTS_I2 VTS_I2;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, nLayer, nStartNote);
}

void CRegionKeyboard::DeleteAllRegions()
{
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRegionKeyboard::ReleaseMouseCapture()
{
	InvokeHelper(0xA, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRegionKeyboard::TurnOffMidiNotes()
{
	InvokeHelper(0xB, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CRegionKeyboard::SetCurrentLayer(short nLayer)
{
	short result;
	static BYTE parms[] = VTS_I2;
	InvokeHelper(12, DISPATCH_METHOD, VT_I2, (void*)&result, parms, nLayer);
	return result;
}

short CRegionKeyboard::SetFirstVisibleLayer(short nLayer)
{
	short result;
	static BYTE parms[] = VTS_I2;
	InvokeHelper(13, DISPATCH_METHOD, VT_I2, (void*)&result, parms, nLayer);
	return result;
}

short CRegionKeyboard::ScrollLayers(short nSBCode, short nCurPos)
{
	short result;
	static BYTE parms[] = VTS_I2 VTS_I2;
	InvokeHelper(14, DISPATCH_METHOD, VT_I2, (void*)&result, parms, nSBCode, nCurPos);
	return result;
}

short CRegionKeyboard::GetNumberOfLayers()
{
	short result;
	InvokeHelper(15, DISPATCH_METHOD, VT_I2, (void*)&result, NULL, NULL);
	return result;
}

short CRegionKeyboard::GetFirstVisibleLayer()
{
	short result;
	InvokeHelper(16, DISPATCH_METHOD, VT_I2, (void*)&result, NULL, NULL);
	return result;
}

short CRegionKeyboard::AddNewLayer() 
{
	short result;
	InvokeHelper(17, DISPATCH_METHOD, VT_I2, (void*)&result, NULL, NULL);
	return result;
}

short CRegionKeyboard::DeleteActiveLayer() 
{
	short result;
	InvokeHelper(18, DISPATCH_METHOD, VT_I2, (void*)&result, NULL, NULL);
	return result;
}

void CRegionKeyboard::SetAuditionMode(BOOL bAuditionMode)
{
	static BYTE parms[] = VTS_BOOL;
	InvokeHelper(19, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bAuditionMode);
}

void CRegionKeyboard::EnableRegion(short nLayer, short nStartNote, BOOL bEnable) 
{
	static BYTE parms[] = VTS_I2 VTS_I2 VTS_BOOL;
	InvokeHelper(20, DISPATCH_METHOD, VT_EMPTY, NULL, parms, nLayer, nStartNote, bEnable);
}

void CRegionKeyboard::SetNumberOfLayers(short nLayers)
{
	static BYTE parms[] = VTS_I2;
	InvokeHelper(21, DISPATCH_METHOD, VT_EMPTY, NULL, parms, nLayers);
}

void CRegionKeyboard::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRegionKeyboard::SetWaveName(short nLayer, short nStartNote, LPCTSTR pszWaveName) 
{
	static BYTE parms[] = VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(22, DISPATCH_METHOD, VT_EMPTY, NULL, parms, nLayer, nStartNote, pszWaveName);
}

