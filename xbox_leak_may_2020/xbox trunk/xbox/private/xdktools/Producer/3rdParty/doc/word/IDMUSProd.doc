{\rtf1\ansi \deff0\deflang1033

{\fonttbl
{\f0\froman Times New Roman;}
{\f2\fswiss Arial;}
{\f19\fmodern\fcharset0\fprq1 Courier New;}
}

{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red0\green255\blue0;
\red255\green0\blue255;
\red255\green0\blue0;
\red255\green255\blue0;
\red255\green255\blue255;
\red0\green0\blue127;
\red0\green127\blue127;
\red0\green127\blue0;
\red127\green0\blue127;
\red127\green0\blue0;
\red127\green127\blue0;
\red127\green127\blue127;
\red192\green192\blue192;
}


{\stylesheet
{\s243\li-1800\sl-210\tqr\tx6960 \b\f2\fs19\lang1033 header;}
{\s251\sb160\sa40\sl-280\keepn \b\f2\lang1033 heading 4;}
{\s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 heading 3;}
{\s253\li-1800\sb160\sa60\sl-380\keepn \b\f0\fs34\lang1033 heading 2;}
{\s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 heading 1;}
{\*\cs10 \additive Default Paragraph Font;}
{\sa160\sl240 \fs21\lang1033 Normal;}
{\s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 Ex;}
{\s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 header rule;}
{\s45\li-1800\sa180\sl-440\keepn\tx0 \b\f2\fs40\up8\lang1033 Rh1;}
{\s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Rmh;}
{\s50\sl-240\keepn \f0\fs21\lang1033 Term1;}
{\s53\li280\sl-240\keepn \f0\fs21\lang1033 Term2;}
{\s54\li280\sa80\sl-240 \f0\fs21\lang1033 Def1;}
{\s55\li560\sa80\sl-240 \f0\fs21\lang1033 Def2;}
{\s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 Rule;}
{\s93\sl240 \fs21\lang1033 
Index Link;}
{\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 Table Text;}
}

\paperw12240\paperh15840\margl3330\margr1530\margt-2540\margb-2220\gutter420 
\facingp\deftab280\widowctrl\ftnbj 

\sectd \binfsxn1\binsxn1\linex0\headery1990\footery360\endnhere\titlepg 

{\headerl \pard\plain \s243\li-1800\sl-210\tqr\tx6960 \b\f2\fs19\lang1033 
{\field\flddirty{\*\fldinst PAGE}{\fldrslt 4}}{\expnd50  }Autoduck Output - 10/05/99\par 
\pard\plain \s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 \par }

{\headerr \pard\plain \s243\li-1800\sl-210\tqr\tx6960 \b\f2\fs19\lang1033 
\tab Autoduck Output - 10/05/99{\expnd50   }
{\field\flddirty{\*\fldinst PAGE}{\fldrslt 3}}
\par \pard\plain \s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 
\par }
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Component Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Represents a DirectMusic Producer plug-in module.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdComponent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Defines the startup and shut down behavior for a DirectMusic 
Producer Component. Implementation is required.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdRIFFExt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Components implementing IDMUSProdRIFFExt agree to load RIFF 
chunks and participate in the management of {\b Node}s for other Components.  For 
example, the Band Component implements IDMUSProdRIFFExt and provides file I/O and 
an editor for Bands in existing in Styles and Segment Band tracks. Implementation 
is optional.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 DirectMusic Producer Components are standard registered COM objects.  These objects 
must implement the {\b IDMUSProdComponent} interface and understand the 
{\b IDMUSProdFramework} interface.\par 
During DirectMusic Producer launch, the {\b Framework} object calls CoCreateInstance 
to obtain an {\b IDMUSProdComponent} interface pointer for each of the DirectMusic 
Producer Component CLSID's registered under:\par 
[HKEY_LOCAL_MACHINE\\Software\\Microsoft\\DMUSProducer\\Components]\par 
DirectMusic Producer Component objects exist until the DirectMusic Producer application 
shuts down.\par 
After all registered DirectMusic Producer Components have been instantiated, the 
Framework turns around and calls each Component's {\b IDMUSProdComponent::Initialize}
 
method.  This method receives a pointer to the Framework's {\b IDMUSProdFramework} 
interface.\par 
DirectMusic Producer Components are not required to create any other "standard" 
DirectMusic Producer objects. The purpose of a Component may simply be to provide 
functionality to other DirectMusic Producer Components through custom interfaces. 
However, {\b IDMUSProdComponent::Initialize}
 will more than likely create one or more 
of the following DirectMusic Producer objects:  {\b Menu} object, {\b Toolbar} object, 
{\b DocType} object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DocType Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Represents a type of document, or file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Primary interface.  Implementation is required.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A DirectMusic Producer {\b Component} can add additional document types to the 
{\b Framework}'s File New, File Open and File Save dialogs.  One DocType object must 
be created for each type of file that the Component wants to process.  These objects 
must implement {\b IDMUSProdDocType}.\par 
After creation, the object's {\b IDMUSProdDocType} interface gets handed to the Framework 
via the Framework's {\b IDMUSProdFramework::AddDocType}
 method.  This method registers 
the DocType with DirectMusic Producer so that it will appear in the Framework's File New, 
File Open and File Save dialogs.\par 
DirectMusic Producer DocType objects must be created and registered with the Framework 
from within their Component's {\b IDMUSProdComponent::Initialize}
 method.  These objects 
exist throughout the entire DirectMusic Producer work session.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Editor Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Represents a {\b Node}'s Editor.  Normally, the node will appear in the 
Project Tree but this is not necessary.  A Band in a Segment's Band track is 
an example of a node that does not display in the Project Tree.  Editors are 
opened one of two ways:  double-clicking its corresponding node in the Project 
Tree, or via the {\b IDMUSProdFramework::OpenEditor}
 method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdEditor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Defines interaction with {\b Framework}.  Implementation is required.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IOleObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Implementation is required.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IViewObjectEx}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Implementation is required.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IOleControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Implementation is required.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IOleInPlaceObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Implementation is required.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IOleInPlaceActiveObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Implementation is required.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 DirectMusic Producer Editors are standard registered COM objects.  These objects must 
implement the {\b IDMUSProdEditor}, {\b IOleObject}, {\b IViewObjectEx}, {\b IOleControl}, 
{\b IOleInPlaceObject} and {\b IOleInPlaceActiveObject} interfaces.\par 
The following methods are called when opening an editor for a node:\par 
1. {\b IDMUSProdNode::GetEditorClsId}
 - returns the CLSID of the node's editor\par 
2. {\b OleCreate} - creates an embedded Editor object\par 
3. {\b IDMUSProdEditor::AttachObjects}
 - hands IDMUSProdNode to the Editor object\par 
4. {\b IOleObject::DoVerb}
 - displays Editor object (OLEIVERB_SHOW)\par 
The DirectMusic Producer Editor object is destroyed when its parent window closes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b IDMUSProdFramework::OpenEditor}
, {\b IDMUSProdFramework::CloseEditor}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Framework Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Represents DMUSProd.exe.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdFramework}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Provides the means for a DirectMusic Producer {\b Component} 
to plug into the DirectMusic Producer application.  Implemented by DirectMusic 
Producer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdFileRefChunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Methods to save and load Producer specific file 
reference RIFF chunks.  Implemented by DirectMusic Producer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdLoaderRefChunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Embeds file reference RIFF chunks into a stream for the 
purpose of enabling an implementation of IDirectMusicLoader to resolve file references. 
Implemented by DirectMusic Producer.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 DMUSProd.exe manages the one and only Framework object.  This object is created 
during application launch and exists throughout the entire DirectMusic Producer 
work session.\par 
The Framework object is responsible for managing DirectMusic Producer projects. 
It owns the Project Tree and implements {\b IDMUSProdFramework} so that DirectMusic 
Producer Components can plug into its functionality.  It also implements 
{\b IDMUSProdFileRefChunk} and {\b IDMUSProdLoaderRefChunk} to help Components 
manage file references.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdComponent Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 DirectMusic Producer Components extend the functionality of DirectMusic Producer by 
way of a module mechanism.  They are standard registered COM objects that implement 
{\b IDMUSProdComponent}.  The vast majority of Producer's functionality resides in 
{\b Component} objects.  The {\b IDMUSProdComponent} interface contains the methods 
to initialize and free a DirectMusic Producer Component.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Implementation of {\b IDMUSProdComponent} is mandatory.  The {\b Framework} object obtains 
a pointer to a Component's {\b IDMUSProdComponent} interface by passing the Component's 
CLSID to CoCreateInstance.  DirectMusic Producer calls CoCreateInstance for each of the 
Component CLSID's registered under:\par 
[HKEY_LOCAL_MACHINE\\Software\\Microsoft\\DMUSProducer\\Components].\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Component} Object, {\b Framework} Object, {\b IDMUSProdFramework}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Initialize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Initializes the Component. Called during DirectMusic Producer launch.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CleanUp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Counterpart to Initialize method. Called during DirectMusic Producer exit.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns name of Component.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AllocReferenceNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allocates a reference Node of type {\i guidRefNodeId}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnActivateApp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Notifies a Component that DirectMusic Producer is being 
activated or deactivated.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdComponent::AllocReferenceNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AllocReferenceNode(}{\b GUID} {\i guidRefNodeId}{\b , IDMUSProdNode**} {\i ppIRefNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allocates a reference {\b Node} of type {\i guidRefNodeId}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The reference Node was returned in {\i ppIRefNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIRefNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i guidRefNodeId} is not valid.  For example, the Component may not 
know how to create a reference for that particular type of Node.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the reference Node was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guidRefNodeId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Reference Node ID.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIRefNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the 
requested {\b IDMUSProdNode} interface. \tab If an error occurs, the implementation sets 
{\i ppIRefNode} to NULL.  On success, the caller is responsible for calling 
{\b IDMUSProdNode::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use {\b IDMUSProdReferenceNode::SetReferencedFile}
 to link the reference Node to a file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example allocates a reference Node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMyComponent::AllocReferenceNode( GUID guidRefNodeId, IDMUSProdNode** ppIRefNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( ppIRefNode == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *ppIRefNode = NULL;\par 
\par 
\tab // Make sure Component can create Nodes of type guidRefNodeId\par 
\tab if( !( IsEqualGUID ( guidRefNodeId, GUID_StyleRefNode ) ) )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab // Create StyleRefNode\par 
\tab CStyleRef* pStyleRef = new CStyleRef( this );\par 
\tab if( pStyleRef == NULL )\par 
\tab \{\par 
\tab \tab return E_OUTOFMEMORY ;\par 
\tab \}\par 
\par 
\tab *ppIRefNode = (IDMUSProdNode *)pStyleRef;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdComponent}, {\b IDMUSProdFileRefChunk}, {\b IDMUSProdNode}, {\b IDMUSProdReferenceNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdComponent::CleanUp Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CleanUp(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Notifies a DirectMusic Producer {\b Component} that the application is closing.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Clean up processing completed successfully.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Counterpart to {\b Initialize}.  The {\b Framework} calls this method 
once when DirectMusic Producer exits.\par 
Provides an opportunity for a DirectMusic Producer Component to release the objects 
it manages that contain references to itself.\par 
In addition, {\b CleanUp} must also remove all {\b Menu}s and 
{\b ToolBar}s that the Component added to the Framework.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example contains clean up processing for a DirectMusic Producer Component:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMyComponent::CleanUp( void )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab CStyle *pStyle;\par 
\par 
\tab while( !m_lstStyles.IsEmpty() )\par 
\tab \{\par 
\tab \tab pStyle = static_cast<CStyle*>( m_lstStyles.RemoveHead() );\par 
\tab \tab pStyle->Release();\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdComponent}, {\b Initialize}, {\b IDMUSProdFramework::RemoveMenuItem}
, {\b IDMUSProdFramework::RemoveToolBar}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdComponent::GetName Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetName(}{\b BSTR*} {\i pbstrName}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the name of a DirectMusic Producer Component.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The name was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the name was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out, retval] Pointer to the caller-allocated variable that 
receives the copy of the name.  The caller must free {\i pbstrName} with SysFreeString 
when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The Framework uses this text, for example, when reporting errors during {\b Component} 
initialization.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example retrieves the name of a DirectMusic Producer Component:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdComponent* pIComponent;\par 
CString strName;\par 
BSTR bstrName;\par 
\par 
pIComponent->GetName( &bstrName );\par 
strName = bstrName;\par 
::SysFreeString( bstrName );\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdComponent}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdComponent::Initialize Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Initialize(}{\b IDMUSProdFramework*} {\i pIFramework}{\b , BSTR*} {\i pbstrErrMsg}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Initializes a DirectMusic Producer {\b Component} object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The Component was successfully initialized.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIFramework} or {\i pbstrErrMsg} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell The Component could not be initialized due to lack of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell The Component could not be initialized for some reason other than 
lack of memory or invalid arguments.  {\i pbstrErrMsg} must briefly decribe the error.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIFramework}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b Framework} object's {\b IDMUSProdFramework} 
interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrErrMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Pointer to a brief string that describes the error. 
Only used when an error has occurred.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\b Framework} calls this method once during DirectMusic Producer startup.\par 
In addition to allocating necessary resources, a Component may use the following 
{\b IDMUSProdFramework} methods to further integrate itself into DirectMusic Producer: 
{\b IDMUSProdFramework::AddDocType}
, {\b IDMUSProdFramework::AddClipFormatForFile}
, 
{\b IDMUSProdFramework::AddNodeImageList}
, {\b IDMUSProdFramework::AddMenuItem}
, 
{\b IDMUSProdFramework::AddToolBar}
.\par 
Components which depend on other DirectMusic Producer Components should call 
{\b IDMUSProdFramework::FindComponent}
 from within their {\b Initialize} 
method to ensure the needed Components are available.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example initializes a DirectMusic Producer Component:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMyComponent::Initialize( IDMUSProdFramework* pIFramework, BSTR* pbstrErrMsg )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab TCHAR achErrMsg[MID_BUFFER];\par 
\tab CString strErrMsg;\par 
\par 
\tab if( m_pIFramework )\tab \tab // already initialized\par 
\tab \{\par 
\tab \tab return S_OK;\par 
\tab \}\par 
\par 
\tab if( pIFramework == NULL\par 
\tab ||  pbstrErrMsg == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab m_pIFramework = pIFramework;\par 
\tab m_pIFramework->AddRef();\par 
\par 
\tab // Make sure all dependent DirectMusic Producer Components are available\par 
\tab // Get the IDMUSProdComponent interface for the Band component\par 
\tab if( !SUCCEEDED ( pIFramework->FindComponent( CLSID_BandComponent,  &m_pIBandComponent ) ) )\par 
\tab \{\par 
\tab \tab CleanUp();\par 
\tab \tab ::LoadString( theApp.m_hInstance, IDS_ERR_MISSING_BAND, achErrMsg, MID_BUFFER );\par 
\tab \tab strErrMsg = achErrMsg;\par 
\tab \tab *pbstrErrMsg = strErrMsg.AllocSysString();\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab // Add applicable images to the Project Tree control's image list\par 
\tab if( !SUCCEEDED ( AddNodeImageLists() ) )\par 
\tab \{\par 
\tab \tab CleanUp();\par 
\tab \tab ::LoadString( theApp.m_hInstance, IDS_ERR_ADD_IMAGELIST, achErrMsg, MID_BUFFER );\par 
\tab \tab strErrMsg = achErrMsg;\par 
\tab \tab *pbstrErrMsg = strErrMsg.AllocSysString();\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab // Add menu item to Framework's Add-Ins menu\par 
\tab if( !SUCCEEDED ( pIFramework->AddMenuItem( (IDMUSProdMenu *)this ) ) )\par 
\tab \{\par 
\tab \tab CleanUp();\par 
\tab \tab ::LoadString( theApp.m_hInstance, IDS_ERR_ADD_MENUITEM, achErrMsg, MID_BUFFER );\par 
\tab \tab strErrMsg = achErrMsg;\par 
\tab \tab *pbstrErrMsg = strErrMsg.AllocSysString();\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\tab else\par 
\tab \{\par 
\tab \tab m_fMenuWasAdded = TRUE;\par 
\tab \}\par 
\par 
\tab // Register applicable doc types with the Framework\par 
\tab // Register doc types after all other initialization has completed successfully\par 
\tab m_pIDocType = new CStyleDocType( this );\par 
\tab if( m_pIDocType == NULL )\par 
\tab \{\par 
\tab \tab CleanUp();\par 
\tab \tab return E_OUTOFMEMORY;\par 
\tab \}\par 
\par 
\tab m_pIDocType->AddRef();\par 
\par 
\tab if( !SUCCEEDED ( pIFramework->AddDocType(m_pIDocType) ) )\par 
\tab \{\par 
\tab \tab CleanUp();\par 
\tab \tab ::LoadString( theApp.m_hInstance, IDS_ERR_ADD_DOCTYPE, achErrMsg, MID_BUFFER );\par 
\tab \tab strErrMsg = achErrMsg;\par 
\tab \tab *pbstrErrMsg = strErrMsg.AllocSysString();\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\par 
\par 
HRESULT CMyComponent::AddNodeImageLists( void )\par 
\{\par 
\tab CImageList lstImages;\par 
\tab HICON hIcon;\par 
\par 
\tab lstImages.Create( 16, 16, TRUE, 2, 0 );\par 
\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDR_STYLE_DOCTYPE) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DeleteObject( hIcon );\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDI_STYLE_DOCTYPE_SEL) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DeleteObject( hIcon );\par 
\par 
\tab if( !SUCCEEDED (m_pIFramework->AddNodeImageList( lstImages.Detach(), &m_nFirstStyleImage ) ) )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab lstImages.Create( 16, 16, TRUE, 2, 0 );\par 
\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDI_PERSONALITY) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DeleteObject( hIcon );\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDI_PERSONALITY_SEL) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DeleteObject( hIcon );\par 
\par 
\tab if( !SUCCEEDED (m_pIFramework->AddNodeImageList( lstImages.Detach(), &m_nFirstPersonalityImage ) ) )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab lstImages.Create( 16, 16, TRUE, 2, 0 );\par 
\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDI_FOLDER) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DeleteObject( hIcon );\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDI_FOLDER_SEL) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DeleteObject( hIcon );\par 
\par 
\tab if( !SUCCEEDED (m_pIFramework->AddNodeImageList( lstImages.Detach(), &m_nFirstFolderImage ) ) )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Component} Object, {\b Framework} Object, {\b IDMUSProdComponent}, {\b CleanUp}, {\b IDMUSProdFramework}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdComponent::OnActivateApp Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnActivateApp(}{\b BOOL} {\i fActivate}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Notifies a {\b Component} that DirectMusic Producer is being activated or deactivated.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell This method completed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell Not implemented.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fActivate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies whether DirectMusic Producer is being activated 
or deactivated. This parameter is TRUE if the application is being activated; it 
is FALSE if the application is being deactivated.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The Framework calls this method when it receives a WM_ACTIVATEAPP message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdComponent}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Coordinates global access to the DirectMusic Engine for other DirectMusic Producer components.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetPerformanceEngine}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an AddRef()'d reference to the 
IDirectMusicPerformance interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetPort}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an AddRef()'d pointer to the first active 
port that supports DLS.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RegisterTransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Adds a transport to the list of items in 
the Transport Control toolbar's combo box.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT UnRegisterTransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Removes a transport from the list of items 
in the Transport Control toolbar's combo box.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetActiveTransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the owner of the Transport Control toolbar's 
controls to a specified transport.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT IsTransportPlaying}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Helps determine whether or not music is playing.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT PlayMIDIEvent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Plays a MIDI event.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetBtnStates}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the button states of a transport.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetTempo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the tempo displayed in the Transport Control toolbar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RegisterNotify}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Registers an interface to receive a specific notification 
from the performance engine.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT UnregisterNotify}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Stops a specific notification from being sent to an 
interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetTransportName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Updates the name of a transport that is displayed in 
the Transport Control toolbar's combo box.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT TransportStopped}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Notifies Conductor that a transport has stopped 
playing.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetTransitionOptions}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns a structure containing the transition options 
set for the Transport Control toolbar's Transition button.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RegisterSecondaryTransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Adds a secondary transport to the list of items in 
the Secondary Segment toolbar's combo boxes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT UnRegisterSecondaryTransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Removes a secondary transport from the list of items in 
the Secondary Segment toolbar's combo boxes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetSecondaryTransportName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Update the name of a secondary transport that is 
displayed in the Secondary Segment toolbar's combo boxes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT IsSecondaryTransportPlaying}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Helps determine whether or not a secondary segment 
is playing.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetPChannelThru}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Starts a thru connection from a specified MIDI input channel to a 
specified output PChannel.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CancelPChannelThru}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Stops the thru connection from a specified MIDI input channel.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT IsTrackCursorEnabled}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Queries the state of the Transport Options toolbar's Track Cursor button.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTransport}, {\b IDMUSProdSecondaryTransport}, {\b IDMUSProdNotifyCPt}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::CancelPChannelThru Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CancelPChannelThru(}{\b DWORD} {\i dwInputChannel}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Stops the thru connection from the 
specified MIDI input channel.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation succeeded.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell No PChannel Thru is already active on that input channel\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The Performance engine does not exist.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell There is no DirectMusic MIDI input port.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i dwInputChannel} is greater than 15.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwInputChannel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 MIDI Input channel number. Must be between 0 and 15, inclusive.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b SetPChannelThru}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::GetPerformanceEngine Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetPerformanceEngine(}{\b IUnknown**} {\i ppIPerformance}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function returns an AddRef()'d 
reference to the IDirectMusicPerformance interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i ppIPerformance}\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIPerformance}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Location of an IUnknown interface from 
which an IDirectMusicPerformance interface can be obtained. On success, the caller is responsible 
for calling {\b IUnknown::Release}
() when this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::GetPort Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetPort(}{\b IUnknown**} {\i ppIPort}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function returns an AddRef()'d pointer to 
the first active port that supports DLS.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell A NULL was passed as {\i ppIPort}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DMUS_E_TYPE_UNSUPPORTED\cell No currently active port supports DLS.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 DMUS_E_TYPE_DISABLED\cell The output is currently disabled.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIPort}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Location of an IUnknown interface from which an 
IDirectMusicPort interface can be obtained. On success, the caller is responsible for calling 
{\b IUnknown::Release}
() when this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::GetTransitionOptions Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetTransitionOptions(}{\b ConductorTransitionOptions*} {\i pTransitionOptions}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a structure containing parameters 
defining what type of transition the user desires.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation succeeded.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pTransitionOptions} is NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pTransitionOptions}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to the {\b ConductorTransitionOptions} structure to fill in\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method should be called in response to a call to the {\b IDMUSProdTransport::Transition}
 method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b ConductorTransitionOptions}, {\b IDMUSProdTransport::Transition}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::IsSecondaryTransportPlaying Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT IsSecondaryTransportPlaying(}{\b IDMUSProdSecondaryTransport*} {\i pISecondaryTransport}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns S_OK if 
{\i pISecondaryTransport} is playing, and S_FALSE if it is not.  If {\i pISecondaryTransport} 
is NULL, returns S_OK if nothing is playing, and S_FALSE if something is playing.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell If {\i pISecondaryTransport} is not NULL, the transport is playing. 
Otherwise, no transport is playing.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell If {\i pISecondaryTransport} is not NULL, the transport is not playing. 
Otherwise, a transport is playing.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pISecondaryTransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to the secondary transport to check. 
If NULL, check whether anything is playing.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b RegisterSecondaryTransport}, 
{\b UnRegisterSecondaryTransport}, {\b SetSecondaryTransportName}, 
{\b IDMUSProdSecondaryTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::IsTrackCursorEnabled Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT IsTrackCursorEnabled(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Queries the state of the Transport Options toolbar's Track Cursor button.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The Track Cursor button is down (Time cursor should be tracked).\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The Track Cursor button is up (Time cursor should not be tracked).\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 When the Track Cursor button is down, the playing transport should display an indication 
of the current play position and the display should scroll to keep the current play position 
in view.  When the Track Cursor button is up, the display should not automatically scroll.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::IsTransportPlaying Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT IsTransportPlaying(}{\b IDMUSProdTransport*} {\i pITransport}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns S_OK if {\i pITransport} is playing, and 
S_FALSE if it is not.  If {\i pITransport} is NULL, returns S_OK if nothing is playing, and 
S_FALSE if something is playing.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell If {\i pITransport} is not NULL, the transport is playing.  Otherwise, no transport is playing.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell If {\i pITransport} is not NULL, the transport is not playing.  Otherwise, a transport is playing.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to the transport to check.  If NULL, 
check whether any transport is playing.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method will return S_OK if the Conductor thinks the {\i pITransport} is the currently 
playing transport.  This may not be the case, so ideally transports should query 
{\b IDirectMusicPerformance::IsPlaying}
\tab with their segment state to truly know 
if they are playing or not.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b RegisterTransport}, 
{\b UnRegisterTransport}, {\b SetActiveTransport}, 
{\b SetTransportName}, {\b TransportStopped}, 
{\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::PlayMIDIEvent Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT PlayMIDIEvent(}{\b BYTE} {\i bStatus}{\b , BYTE} {\i bData1}
{\b , BYTE} {\i bData2}
{\b , DWORD} {\i dwTime}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Play a MIDI event now, or in the future.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The event was successfully played or queued.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The Conductor was unable to initialize DirectMusic.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bStatus}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Status byte\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bData1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Data byte 1\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bData2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Data byte 2\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The number of milliseconds into the future to play this 
event.  If zero, play the event as soon as possible.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The MIDI event is played on PChannel 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::RegisterNotify Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RegisterNotify(}{\b IDMUSProdNotifyCPt*} {\i pINotifyCPt}{\b , REFGUID} {\i rguidNotify}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Adds a notification type to the list of 
types that should be sent to this {\b IDMUSProdTransport} from the performance engine.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pINotifyCPt} was successfully registered to received the specified notifications.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pINotifyCPt} is NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The Conductor was unable to initialize DirectMusic.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINotifyCPt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The notification interface to send the notification event to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguidNotify}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The guid corresponding to the type of notifications to send.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The parameter {\i rguidNotify} is passed to the DirectMusic method 
{\b IDirectMusicPerformance::AddNotificationType}
.  Valid values are listed in the DirectX SDK 
documentation.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b UnregisterNotify}, {\b IDMUSProdNotifyCPt}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::RegisterSecondaryTransport Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RegisterSecondaryTransport(}{\b {\b IDMUSProdSecondaryTransport}*} {\i pISecondaryTransport}{\b , IDMUSProdTransport*} {\i pITransport}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Add {\i pISecondaryTransport} 
to the Secondary Segment toolbar's combo boxes. \tab If {\i pISecondaryTransport} is already 
listed, increment its reference count.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The secondary segment transport was successfully added.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pISecondaryTransport} is NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pISecondaryTransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the {\b IDMUSProdSecondaryTransport} 
interface to add to the Secondary Segment toolbar's combo boxes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the {\b IDMUSProdTransport} interface to 
be removed from the Transport Control toolbar's combo box.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b UnRegisterSecondaryTransport}, 
{\b SetSecondaryTransportName}, {\b IsSecondaryTransportPlaying}, 
{\b IDMUSProdSecondaryTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::RegisterTransport Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RegisterTransport(}{\b IDMUSProdTransport*} {\i pITransport}{\b , DWORD} {\i dwFlags}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Add {\i pITransport} 
to the list of items in the Transport Control toolbar's combo box. 
If {\i pITransport} is already in the combo box, increment its reference count.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pITransport} was successfully added.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and {\i pITransport} was not added to the Transport Control 
toolbar's combo box.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the {\b IDMUSProdTransport} interface which 
will be added to the Transport Control toolbar's combo box.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A combination of {\b ButtonStateFlags} determining the initial state of the 
transport buttons when this transport is active.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b UnRegisterTransport}, 
{\b SetActiveTransport}, {\b SetTransportName}, 
{\b IsTransportPlaying}, {\b TransportStopped}, 
{\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::SetActiveTransport Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetActiveTransport(}{\b IDMUSProdTransport*} {\i pITransport}{\b , DWORD} {\i dwFlags}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets {\i pITransport} as the active 
transport and uses {\i dwFlags} to set the initial state of the Transport Control buttons.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The active transport was successfully set.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pITransport} was not previously added by calling 
{\b RegisterTransport}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the {\b IDMUSProdTransport} interface to 
set as active in the Transport Control toolbar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A combination of {\b ButtonStateFlags} determining the state of the 
transport buttons.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b RegisterTransport}, 
{\b UnRegisterTransport}, {\b SetTransportName}, 
{\b IsTransportPlaying}, {\b TransportStopped}, 
{\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::SetBtnStates Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetBtnStates(}{\b IDMUSProdTransport*} {\i pITransport}{\b , DWORD} {\i dwFlags}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the button states of {\i pITransport} 
according to the flags in {\i dwFlags}.  The method is typically only used if the transport 
is not using the DirectMusic performance engine for playback, or if the transport needs to 
enable or disable the record button.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The button states were successfully set.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pITransport} is NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pITransport} is not the currently active or currently playing transport.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to the transport to change the button states for.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A combination of {\b ButtonStateFlags} determining the state of the 
transport buttons.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::SetPChannelThru Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetPChannelThru(}{\b DWORD} {\i dwInputChannel}{\b , DWORD} {\i dwPChannel}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Starts a thru connection from the 
specified MIDI input channel to the specified output PChannel.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation succeeded.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Already thruing {\i dwInputChannel} to {\i dwPChannel}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The Performance engine does not exist.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell There is no DirectMusic MIDI input port, {\i dwPChannel} does not exist in the 
current port configuration, or the port that {\i dwPChannel} plays on has a latency greater 
than 40ms.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i dwInputChannel} is greater than 15.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwInputChannel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 MIDI Input channel number. Must be between 0 and 15, inclusive.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwPChannel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Output PChannel number.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b CancelPChannelThru}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::SetSecondaryTransportName Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetSecondaryTransportName(}{\b IDMUSProdSecondaryTransport*} {\i pISecondaryTransport}{\b , BSTR} {\i bstrName}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Update the name displayed for 
{\i pISecondaryTransport} with the text in {\i bstrName}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Successfully set the name of {\i pISecondaryTransport} to {\i pbstrName}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell Either {\i pISecondaryTransport} or {\i bstrName} is NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pISecondaryTransport} was not previously added by calling {\b RegisterSecondaryTransport}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pISecondaryTransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to an {\b IDMUSProdSecondaryTransport} 
interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Text to display in the Secondary Segment toolbar's combo boxes 
for {\i pISecondaryTransport}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b RegisterSecondaryTransport}, 
{\b UnRegisterSecondaryTransport}, {\b IsSecondaryTransportPlaying}, 
{\b IDMUSProdSecondaryTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::SetTempo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetTempo(}{\b IDMUSProdTransport*} {\i pITransport}{\b , double} {\i dblTempo}
{\b , BOOL} {\i fEnable}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the tempo displayed in the toolbar if 
{\i pITransport} is the transport that currently "owns" the toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The tempo was successfully set.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pITransport} is NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The transport does not currently "own" the toolbar, or {\i dblTempo} 
is out of range.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to the transport that currently "owns" the toolbar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dblTempo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The tempo to change to, in the range DMUS_TEMPO_MIN to DMUS_TEMPO_MAX.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fEnable}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If TRUE, enable editing of the tempo.  If FALSE, disable editing of the tempo.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i fEnable} is FALSE and {\i dblTempo} is negative, the tempo edit box will be 
display as empty and disabled.\line  
If a transport is currently playing, that transport "owns" the toolbar.  If no transport is currently 
playing, the active transport "owns" the toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::SetTransportName Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetTransportName(}{\b IDMUSProdTransport*} {\i pITransport}{\b , BSTR} {\i bstrName}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the name of {\i pITransport} 
to {\i bstrName}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Successfully set the name of {\i pITransport} to {\i pbstrName}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell Either {\i pITransport} or {\i bstrName} is NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pITransport} was not previously added by calling 
{\b RegisterTransport}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to an {\b IDMUSProdTransport} interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Text to display in the Transport Control toolbar's combo box for {\i pITransport}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b RegisterTransport}, 
{\b UnRegisterTransport}, {\b SetActiveTransport}, 
{\b IsTransportPlaying}, {\b TransportStopped}, 
{\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::TransportStopped Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT TransportStopped(}{\b IDMUSProdTransport*} {\i pITransport}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Notifies the Conductor that a transport has stopped playing.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation succeeded.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pITransport} is NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pITransport} does not point to the currently playing transport.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to the transport that has stopped playing\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method must be called when a transport stops playing so the Transport Control toolbar 
can switch from displaying a Stop button to displaying a Play button.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b RegisterTransport}, 
{\b UnRegisterTransport}, {\b SetActiveTransport}, 
{\b SetTransportName}, {\b IsTransportPlaying}, 
{\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::UnregisterNotify Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT UnregisterNotify(}{\b IDMUSProdNotifyCPt*} {\i pINotifyCPt}{\b , REFGUID} {\i rguidNotify}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes a notification type from the list of 
notifications that should be sent to this {\b IDMUSProdTransport}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pINotifyCPt} was successfully removed from receiving the specified events\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pINotifyCPt} is NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The Conductor was unable to initialize DirectMusic.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\b RegisterNotify} was not previously called for this 
{\i pINotifyCPt} and {\i rguidNotify}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINotifyCPt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The notification interface to stop sending notification events to\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguidNotify}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The guid corresponding to the type of notifications to stop sending\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b RegisterNotify}, {\b IDMUSProdNotifyCPt}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::UnRegisterSecondaryTransport Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT UnRegisterSecondaryTransport(}{\b IDMUSProdSecondaryTransport*} {\i pISecondaryTransport}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Remove {\i pISecondaryTransport} 
from the Secondary Segment toolbar's combo boxes, and stop it if it is playing.  If it was 
added more than once, remove one reference to it.  When all references are removed, 
it will then be removed from the Secondary Segment toolbar's combo boxes and stopped 
if it is playing.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pISecondaryTransport} was successfully removed.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pISecondaryTransport} was not previously added via {\b RegisterSecondaryTransport}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pISecondaryTransport} is NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pISecondaryTransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the {\b IDMUSProdSecondaryTransport} 
interface to be removed from the Secondary Segment toolbar's combo boxes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b RegisterSecondaryTransport}, 
{\b SetSecondaryTransportName}, {\b IsSecondaryTransportPlaying}, 
{\b IDMUSProdSecondaryTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductor::UnRegisterTransport Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT UnRegisterTransport(}{\b IDMUSProdTransport*} {\i pITransport}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Remove {\i pITransport} from 
the Transport Control toolbar's combo box, and stop it if it is playing.  If it was 
added more than once, remove one reference to it.  When all references are removed, 
it will then be removed from the Transport Control toolbar's combo box and stopped 
if it is playing.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pITransport} was successfully removed.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell {\i pITransport} was not previously added via {\b RegisterTransport}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pITransport} is NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the {\b IDMUSProdTransport} interface to 
be removed from the Transport Control toolbar's combo box.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b RegisterTransport}, 
{\b SetActiveTransport}, {\b SetTransportName}, 
{\b IsTransportPlaying}, {\b TransportStopped}, 
{\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductorTempo Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The Conductor uses this interface to interact with the editors 
that need to use the functionality provided by the Tempo edit control in the transport toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetTempo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Called when the user changes the tempo in the tempo edit control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetTempo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Called to get the tempo displayed in the tempo edit control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 To support tempo editing from the Transport Control toolbar, this interface must be supported 
by the same object that implements {\b IDMUSProdTransport}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductorTempo::GetTempo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetTempo(}{\b double*} {\i pdblTempo}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called to update the tempo 
displayed in the Transport toolbar's Tempo edit control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Depending on the return code from this method, the tempo edit control 
will display and allow editing of the tempo, display and disallow editing of 
the tempo, or clear the display and disallow editing of the tempo.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful, and the tempo should be editable.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The operation was successful, but disallow editing of the tempo information.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell Clear the tempo edit control, and disallow editing of the tempo information.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdblTempo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to the location to store the tempo in. 
The returned tempo should be within the range DMUS_TEMPO_MIN to DMUS_TEMPO_MAX.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductorTempo}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdConductorTempo::SetTempo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetTempo(}{\b double} {\i dblTempo}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called when the user changes 
the tempo displayed in the Tempo edit control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dblTempo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The new tempo set by the user.  It is limited to the 
range DMUS_TEMPO_MIN to DMUS_TEMPO_MAX.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductorTempo}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdDocType Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Additional document types can be added to the Framework's File New, File Open and File 
Save dialogs through creation of one or more {\b DocType} objects.  One DocType object must 
be created for each type of file that a DirectMusic Producer Component wants to process. 
DocType objects must implement the {\b IDMUSProdDocType} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A Component's {\b IDMUSProdComponent::Initialize}
 method should register its DocType 
object(s) through call(s) to {\b IDMUSProdFramework::AddDocType}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b DocType} Objects, {\b IDMUSProdFramework::AddDocType}
, {\b IDMUSProdNode}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetResourceId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns HINSTANCE and resource ID for DocType's icon, 
accelerator table and string resource.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT DoesExtensionMatch}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns S_OK if specified file extension matches 
this DocType's extension.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT DoesIdMatch}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns S_OK if specified node ID is associated with this 
DocType.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AllocNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Creates a new Node object and returns a pointer to its 
IDMUSProdNode interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnFileNew}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Creates a new file and adds the file's corresponding Node 
object(s) to the Project Tree.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnFileOpen}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Loads the specified stream and adds the corresponding 
Node object(s) to the Project Tree.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnFileSave}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Saves the file to the specified stream.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetListInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Fills a DMUSProdListInfo structure with information describing 
the object in {\i pIStream}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT IsFileTypeExtension}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether the specified extension 
is valid for the specified file type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdDocType::AllocNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AllocNode(}{\b REFGUID} {\i rguid}{\b , IDMUSProdNode**} {\i ppINode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates a new {\b Node} object and returns a pointer 
to its {\b IDMUSProdNode} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The newly created object's {\b IDMUSProdNode} was returned in {\i ppINode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppINode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Cannot create Node object of type {\i rguid}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Identifies type of Node object to create.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdNode} interface.  If an error occurs, the implementation sets {\i ppINode} 
to NULL.  On success, the caller is responsible for calling {\b IDMUSProdNode::Release}
 
when this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\b AllocNode} method knows how to create new instances of one or more 
types of Node objects.  This method differs from {\b OnFileNew} in that it 
does not create a new file.  It simply provides an {\b IDMUSProdNode} interface to a newly 
created Node that can then be inserted within a file.  The newly created Node may have 
children.\par 
This method must call {\b IDMUSProdNode::AddRef}
 on {\i ppINode} before returning.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example creates a Band Node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT STDMETHODCALLTYPE CBandDocType::AllocNode( REFGUID rguid, IDMUSProdNode** ppINode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab ASSERT( m_pBandComponent != NULL );\par 
\par 
\tab if( ppINode == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *ppINode = NULL;\par 
\par 
\tab if( ::IsEqualGUID(rguid, GUID_BandNode) == FALSE )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab // Create a new Band\par 
\tab CBand* pBand = new CBand( m_pBandComponent );\par 
\tab if( pBand == NULL )\par 
\tab \{\par 
\tab \tab return E_OUTOFMEMORY ;\par 
\tab \}\par 
\par 
\tab pBand->AddRef();\par 
\tab *ppINode = (IDMUSProdNode *)pBand;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 The {\b AllocNode} method knows how to create new instances of Node objects. 
This method differs from {\b OnFileNew} in that it does not create a new 
file.  It simply provides an {\b IDMUSProdNode} interface to a newly created Project Tree 
Node that can then be inserted within another file.\par 
A Style file contains Band Nodes.  The Style file's Band Nodes are actually created and 
managed by a different DirectMusic Producer Component.  When the Style Editor Component 
recognizes that the user wants to insert a new Band into a Style, it must locate the 
{\b IDMUSProdDocType} interface whose {\b AllocNode} method knows how to 
create Band Nodes. This is accomplished by calling {\b IDMUSProdFramework::FindDocTypeByNodeId}
. 
{\b IDMUSProdFramework::FindDocTypeByNodeId}
 enumerates the registered {\b IDMUSProdDocType} interfaces 
calling {\b DoesIdMatch} to find the requested {\b IDMUSProdDocType} interface.\par 
The following code inserts a new Band into the 'Bands' folder of a Style:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleBands::InsertChildNode( IDMUSProdNode* pIChildNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab IDMUSProdDocType* pIDocType;\par 
\par 
\tab ASSERT( m_pStyleComponent != NULL );\par 
\tab ASSERT( m_pStyleComponent->m_pIFramework != NULL );\par 
\tab ASSERT( m_pStyle != NULL );\par 
\par 
\tab if( pIChildNode == NULL )\tab // Create a new Band\par 
\tab \{\par 
\tab \tab HRESULT hr;\par 
\par 
\tab \tab hr = m_pStyleComponent->m_pIFramework->FindDocTypeByNodeId( GUID_BandNode, &pIDocType );\par 
\tab \tab if( SUCCEEDED ( hr ) )\par 
\tab \tab \{\par 
\tab \tab \tab // Create a new Band\par 
\tab \tab \tab hr = pIDocType->AllocNode( GUID_BandNode, &pIChildNode );\par 
\tab \tab \tab if( !SUCCEEDED ( hr ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab pIChildNode = NULL;\par 
\tab \tab \tab \}\par 
\par 
\tab \tab \tab pIDocType->Release();\par 
\tab \tab \}\par 
\par 
\tab \tab if( pIChildNode == NULL )\par 
\tab \tab \{\par 
\tab \tab \tab return E_OUTOFMEMORY;\par 
\tab \tab \}\par 
\tab \}\par 
\tab else\par 
\tab \{\par 
\tab \tab pIChildNode->AddRef();\par 
\tab \}\par 
\par 
\tab // add to CStyle Band list\par 
\tab m_lstBands.AddTail( pIChildNode );\par 
\par 
\tab // Set DocRoot node and parent Node of ALL children\par 
\tab theApp.SetNodePointers( pIChildNode, (IDMUSProdNode *)m_pStyle, (IDMUSProdNode *)this );\par 
\par 
\tab // Add Node to Project Tree\par 
\tab if( !SUCCEEDED ( m_pStyleComponent->m_pIFramework->AddNode(pIChildNode, (IDMUSProdNode *)this) ) )\par 
\tab \{\par 
\tab \tab DeleteChildNode( pIChildNode );\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab m_pStyleComponent->m_pIFramework->SetModifiedFlag( (IDMUSProdNode *)this, TRUE );\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdDocType}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdDocType::DoesExtensionMatch Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT DoesExtensionMatch(}{\b BSTR} {\i bstrExt}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns S_OK if {\i bstrExt} matches 
this {\b DocType}'s file extension.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i bstrExt} matches the file extension of this DocType.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell {\i bstrExt} does not match the file extension of this DocType.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and {\i bstrExt} could not be checked against this DocType.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrExt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] File extension (i.e. ".sty").  This method must free 
{\i bstrExt} with SysFreeString when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\b IDMUSProdDocType} interface provides methods for handling File New and File Open 
commands.  After the user has invoked File New or File Open, the Framework enumerates 
the registered {\b IDMUSProdDocType} interfaces calling {\b DoesExtensionMatch} 
to find the appropriate {\b IDMUSProdDocType} interface for the requested operation.  Once 
found, either {\b OnFileNew} or {\b OnFileOpen} are called to 
complete the user's request.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example determines whether or not the specified file extension matches 
this DocType:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleDocType::DoesExtensionMatch( BSTR bstrExt )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab CString strExt = bstrExt;\par 
\tab ::SysFreeString( bstrExt );\par 
\par 
\tab CString strDocTypeExt;\par 
\tab TCHAR   achBuffer[MAX_BUFFER];\par 
\par 
\tab if( ::LoadString(theApp.m_hInstance, IDR_STYLE_DOCTYPE, achBuffer, MID_BUFFER) == 0 )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab if( AfxExtractSubString(strDocTypeExt, achBuffer, CDocTemplate::filterExt) )\par 
\tab \{\par 
\tab \tab ASSERT( strDocTypeExt[0] == '.' );\par 
\par 
\tab \tab BOOL fContinue = TRUE;\par 
\tab \tab CString strDocExt;\par 
\tab \tab int nFindPos;\par 
\par 
\tab \tab nFindPos = strDocTypeExt.Find( _T(";") );\par 
\tab \tab while( fContinue )\par 
\tab \tab \{\par 
\tab \tab \tab if( nFindPos == -1 )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab fContinue = FALSE;\par 
\par 
\tab \tab \tab \tab nFindPos = strDocTypeExt.Find( _T(".") );\par 
\tab \tab \tab \tab if( nFindPos != 0 )\par 
\tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab break;\par 
\tab \tab \tab \tab \}\par 
\tab \tab \tab \tab strDocExt = strDocTypeExt;\par 
\tab \tab \tab \}\par 
\tab \tab \tab else\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab strDocExt = strDocTypeExt.Left( nFindPos );\par 
\tab \tab \tab \tab strDocTypeExt = strDocTypeExt.Right( strDocTypeExt.GetLength() - (nFindPos + 1) );\par 
\tab \tab \tab \}\par 
\par 
\tab \tab \tab if( _tcsicmp(strExt, strDocExt) == 0 )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab return S_OK;\tab // extension matches\par 
\tab \tab \tab \}\par 
\par 
\tab \tab \tab nFindPos = strDocTypeExt.Find( _T(";") );\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab return S_FALSE;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdDocType}, {\b IDMUSProdFramework::FindDocTypeByExtension}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdDocType::DoesIdMatch Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT DoesIdMatch(}{\b REFGUID} {\i rguid}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns S_OK if this {\b DocType} knows how 
to manage/allocate {\b Node}s of type {\i rguid}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i rguid} matches one of the node ID's supported by this DocType.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell {\i rguid} is not supported by this DocType.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and {\i rguid} could not be checked against this DocType.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Node ID.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A GUID identifies a type of Node.  For example, all Style Nodes have the same 
GUID, or node ID.\par 
A DocType may be associated with more than one node ID, meaning that it knows how to 
process more than one type of Node object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following {\b DoesIdMatch} method determines whether or not the specified 
ID is supported by the DocType object:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CBandDocType::DoesIdMatch( REFGUID rguid )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( ::IsEqualGUID(rguid, GUID_BandNode) )\par 
\tab \{\par 
\tab \tab return S_OK;\par 
\tab \}\par 
\par 
\tab return S_FALSE;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdDocType}, {\b IDMUSProdFramework::FindDocTypeByNodeId}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdDocType::GetListInfo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetListInfo(}{\b IStream*} {\i pIStream}{\b , DMUSProdListInfo*} {\i pListInfo}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Fills a {\b DMUSProdListInfo} structure with information 
describing the object in {\i pIStream}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Information was successfully placed in the DMUSProdListInfo structure.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in either {\i pIStream} or {\i pListInfo} is not valid. 
For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the information was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the stream from which the object should be 
loaded.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pListInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to a DMUSProdListInfo structure.  The caller must free 
pListInfo->bstrDescriptor and pListInfo->bstrName with SysFreeString when they are no longer 
needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\b Framework} calls {\b GetListInfo} to retrieve information later returned 
by {\b IDMUSProdNode::GetNodeListInfo}
 for files that exist in the Project Tree but have not yet 
been loaded.\par 
Lists of specific types of Nodes can be built by calling {\b IDMUSProdProject::GetFirstFileByDocType}
 
and {\b IDMUSProdProject::GetNextFileByDocType}
.  After acquiring each {\b IDMUSProdNode} pointer, 
{\b IDMUSProdNode::GetNodeListInfo}
 can be called to obtain text for the combo box item. 
After a selection is made, {\b IDMUSProdFramework::FindDocRootNode}
 can be called to obtain an 
IDMUSProdNode pointer for the selected item.\par 
The caller must set DMUSProdListInfo.wSize to the size of the DMUSProdListInfo structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example fills a DMUSProdListInfo structure for a Style file:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleDocType::GetListInfo( IStream* pIStream, DMUSProdListInfo* pListInfo)\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab IDMUSProdRIFFStream* pIRiffStream;\par 
\tab MMCKINFO ckMain;\par 
\tab MMCKINFO ck;\par 
\tab HRESULT hr;\par 
\par 
\tab ASSERT( pIStream != NULL );\par 
\tab ASSERT( pListInfo != NULL );\par 
\par 
\tab if( pIStream == NULL\par 
\tab ||  pListInfo == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab hr = E_FAIL;\par 
\par 
\tab if( SUCCEEDED( AllocRIFFStream( pIStream, &pIRiffStream ) ) )\par 
\tab \{\par 
\tab \tab ckMain.fccType = FOURCC_STYLE_FORM;\par 
\par 
\tab \tab if( pIRiffStream->Descend( &ckMain, NULL, MMIO_FINDRIFF ) == 0 )\par 
\tab \tab \{\par 
\tab \tab \tab ck.ckid = FOURCC_STYLE;\par 
\par 
\tab \tab \tab if( pIRiffStream->Descend( &ck, &ckMain, MMIO_FINDCHUNK ) == 0 )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab ioStyle iStyle;\par 
\tab \tab \tab \tab DWORD dwSize;\par 
\tab \tab \tab \tab DWORD dwByteCount;\par 
\par 
\tab \tab \tab \tab dwSize = min( ck.cksize, sizeof( iStyle ) );\par 
\tab \tab \tab \tab hr = pIStream->Read( &iStyle, dwSize, &dwByteCount );\par 
\tab \tab \tab \tab if( FAILED( hr )\par 
\tab \tab \tab \tab ||  dwByteCount != dwSize )\par 
\tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab hr = E_FAIL;\par 
\tab \tab \tab \tab \}\par 
\tab \tab \tab \tab else\par 
\tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab CString strName;\par 
\tab \tab \tab \tab \tab CString strDescriptor;\par 
\par 
\tab \tab \tab \tab \tab strName = iStyle.wstrName;\par 
\tab \tab \tab \tab \tab pListInfo->bstrName = strName.AllocSysString();\par 
\par 
\tab \tab \tab \tab \tab WORD wClicksPerBeat = iStyle.wClocksPerBeat / iStyle.wClocksPerClick;\par 
\tab \tab \tab \tab \tab strDescriptor.Format( "%d/%d", iStyle.wBPM, iStyle.wBeat );\par 
\tab \tab \tab \tab \tab if( !(wClicksPerBeat % 3) )\par 
\tab \tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab \tab strDescriptor += _T("  3");\par 
\tab \tab \tab \tab \tab \}\par 
\tab \tab \tab \tab \tab pListInfo->bstrDescriptor = strDescriptor.AllocSysString();\par 
\par 
\tab \tab \tab \tab \tab hr = S_OK;\par 
\tab \tab \tab \tab \}\par 
\tab \tab \tab \}\par 
\tab \tab \}\par 
\par 
\tab \tab pIRiffStream->Release();\par 
\tab \}\par 
\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdDocType}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdDocType::GetResourceId Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetResourceId(}{\b HINSTANCE*} {\i phInstance}{\b , UINT*} {\i pnResourceId}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 A Component can call 
{\b IDMUSProdFramework::AddDocType}
 to add an additional {\b DocType} to the Framework's 
File New, FileOpen and File Save dialogs.  GetResourceId returns the HINSTANCE and 
resource ID storing the DocType's icon, accelerator table (if needed) and 
string resource.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell HINSTANCE and resource ID were returned in {\i phInstance} and {\i pnResourceId}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in either {\i phInstance} or {\i pnResourceId} is not valid. 
For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i phInstance}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Pointer to handle of the module containing the resources 
for this DocType.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pnResourceId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Pointer to ID of the resources used for this DocType.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The string resource consists of up to seven substrings separated by the '\\n' character 
(the '\\n' character is needed as a place holder if a substring is not included; however, 
trailing '\\n' characters are not necessary); these substrings describe the DocType:\par 
1. {\i windowTitle}   Name that appears in the application window's title bar (for example, 
"Style Editor").  Only used in SDI applications.\par 
2. {\i docName}   Root for the default document name (for example, "Style"). This root, 
plus a number, is used for the default name of a new document of this type whenever the 
user chooses the New command from the File menu (for example, "Style1" or "Style2"). 
If not specified, "Untitled" is used as the default.\par 
3. {\i fileName}\tab   Name of this DocType. If the application supports more than one type 
of document, this string is displayed in the File New dialog box (for example, "Style"). 
If not specified, the DocType is inaccessible using the File New command.\par 
4. {\i filterName}   Description of the DocType and a wildcard filter matching documents 
of this type. This string is displayed in the List Files Of Type drop-down list in the 
File Open dialog box (for example, "Style Files (*.sty;*.stp)").  If not specified, the 
DocType  is inaccessible using the File Open command.  Filters should include both the 
runtime and design-time extensions.\par 
5. {\i filterExt}  Extension for documents of this type (for example, ".sty;.stp"). If not 
specified, the DocType is inaccessible using the File Open command.  Filters should 
nclude both the runtime and design-time extensions.\par 
6. {\i regTypeId}   Identifier for the DocType to be stored in the registration database 
maintained by Windows.  This string is for internal use only (for example, "DirectMusic.Style"). 
If not specified, the DocType cannot be registered with the Windows File Manager.\par 
7. {\i regTypeName}   Name of the DocType to be stored in the registration database. 
This string may be displayed in dialog boxes of applications that access the registration 
database (for example, "DirectMusic Style").\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The resources are found in the Component DLL's resource file.  For example:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDR_STYLE_DOCTYPE ICON\tab DISCARDABLE     "res\\\\Style.ico"\par 
\par 
STRINGTABLE DISCARDABLE\par 
BEGIN\par 
\tab IDR_STYLE_DOCTYPE\tab "\\nStyle\\nStyle\\nStyle Files (*.sty;*.stp)\\n.sty;.stp\\nDirectMusic.Style\\nDirectMusic Style"\par 
END\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 Note that the string begins with a '\\n' character; this is because the first substring is not 
used for MDI applications and so is not included.  You can edit this string using the string 
editor; the entire string appears as a single entry in the String Editor, not as seven separate 
entries.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following example returns the HINSTANCE and resource ID for the DocType:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleDocType::GetResourceId( HINSTANCE* phInstance, UINT* pnResourceId )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( phInstance == NULL\par 
\tab ||  pnResourceId == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *phInstance   = theApp.m_hInstance;\par 
\tab *pnResourceId = IDR_STYLE_DOCTYPE;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdDocType}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdDocType::IsFileTypeExtension Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT IsFileTypeExtension(}{\b FileType} {\i ftFileType}{\b , BSTR} {\i bstrExt}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines whether {\i bstrExt} is a 
valid extension for files with a file type of {\i ftFileType}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i bstrExt} is a valid extension for files with a FileType of {\i ftFileType}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell {\i bstrExt} is not a valid extension for files with a FileType of 
{\i ftFileType}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and {\i bstrExt} could not be checked against {\i ftFileType}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ftFileType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Type of file.  {\i ftFileType} must be FT_DESIGN or 
FT_RUNTIME.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrExt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] File extension (i.e. ".sty").  This method must free 
{\i bstrExt} with SysFreeString when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 DirectMusic Producer allows users to save files in either design-time or runtime format. 
This method associates {\i bstrExt} with a specific file type.\par 
The following file types are valid for use in {\i ftFileType}:\par 
FT_DESIGN        Design-time file.  File contains UI state information for use by its editor(s).\par 
FT_RUNTIME      Runtime file.  File stores content in its most compact form.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example determines whether or not {\i bstrExt} is a valid extension for 
files with a type of {\i ftFileType}:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleDocType::IsFileTypeExtension( FileType ftFileType, BSTR bstrExt )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab CString strExt = bstrExt;\par 
\tab ::SysFreeString( bstrExt );\par 
\par 
\tab strExt.MakeLower();\par 
\par 
\tab switch( ftFileType )\par 
\tab \{\par 
\tab \tab case FT_DESIGN:\par 
\tab \tab \tab if( strExt == _T(".stp") )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab return S_OK;\par 
\tab \tab \tab \}\par 
\tab \tab \tab break;\par 
\par 
\tab \tab case FT_RUNTIME:\par 
\tab \tab \tab if( strExt == _T(".sty") )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab return S_OK;\par 
\tab \tab \tab \}\par 
\tab \tab \tab break;\par 
\tab \}\par 
\par 
\tab return S_FALSE;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdDocType}, {\b IDMUSProdPersistInfo}, {\b IDMUSProdPersistInfo::GetStreamInfo}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdDocType::OnFileNew Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnFileNew(}{\b IDMUSProdProject*} {\i pITargetProject}{\b , IDMUSProdNode*} {\i pITargetDirectoryNode}
{\b , IDMUSProdNode**} {\i ppIDocRootNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates a new file and adds the corresponding 
{\b Node} object(s) to the Project Tree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The newly created object's top {\b IDMUSProdNode} was returned in 
{\i ppIDocRootNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIDocRootNode} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITargetProject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] {\b IDMUSProdProject} interface pointer to the 
{\b Project} that will contain this file.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITargetDirectoryNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] {\b IDMUSProdNode} interface pointer to the 
Project Tree Directory {\b Node} that will contain this file.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the 
requested {\b IDMUSProdNode} interface.  If an error occurs, the implementation sets 
{\i ppIDocRootNode} to NULL.  On success, the caller is responsible for calling 
{\b IDMUSProdNode::Release}
 when this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method gets called in response to a File New command.\par 
A file may consist of one or more {\b Node} objects.  The top Node is the Node that must 
be returned in {\i ppIDocRootNode}.  The Framework associates {\i ppIDocRootNode} with 
its own representation of a file object.\par 
This method must call {\b IDMUSProdNode::AddRef}
 on {\i ppIDocRootNode} before returning.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example creates a new Band file and places its DocRoot node into the 
active folder of the Project Tree.  Notice that the {\b AllocNode} method 
is actually responsible for creating the Band object:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CBandDocType::OnFileNew( IDMUSProdProject* pITargetProject, IDMUSProdNode* pITargetDirectoryNode, IDMUSProdNode** ppIDocRootNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab IDMUSProdNode* pIBandNode;\par 
\tab HRESULT hr;\par 
\par 
\tab ASSERT( m_pComponent != NULL );\par 
\tab ASSERT( m_pComponent->m_pIFramework != NULL );\par 
\par 
\tab if( ppIDocRootNode == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *ppIDocRootNode = NULL;\par 
\par 
\tab // Create a new Band\par 
\tab hr = AllocNode( GUID_BandNode, &pIBandNode );\tab // performs AddRef()\par 
\tab if( SUCCEEDED ( hr ) )\par 
\tab \{\par 
\tab \tab // Insert the Band Node into the Project Tree\par 
\tab \tab hr = InsertChildNode( pIBandNode );\par 
\tab \tab if( SUCCEEDED ( hr ) )\par 
\tab \tab \{\par 
\tab \tab \tab *ppIDocRootNode = pIBandNode;\par 
\tab \tab \tab m_pComponent->m_pIFramework->SetModifiedFlag( pIBandNode, TRUE );\par 
\tab \tab \tab hr = S_OK;\par 
\tab \tab \}\par 
\tab \tab else\par 
\tab \tab \{\par 
\tab \tab \tab pIBandNode->Release();\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdDocType}, {\b OnFileOpen}, {\b OnFileSave}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdDocType::OnFileOpen Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnFileOpen(}{\b IStream*} {\i pIStream}{\b , IDMUSProdProject*} {\i pITargetProject}
{\b , IDMUSProdNode*} {\i pITargetDirectoryNode}
{\b , IDMUSProdNode**} {\i ppIDocRootNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Loads the specified stream and adds the 
corresponding {\b Node} object(s) to the Project Tree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The newly created object's top {\b IDMUSProdNode} was returned in 
{\i ppIDocRootNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIDocRootNode} is not valid.  For example, 
it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the stream from which the object should be 
loaded.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITargetProject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] {\b IDMUSProdProject} interface pointer to the 
{\b Project} that will contain this file.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITargetDirectoryNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] {\b IDMUSProdNode} interface pointer to the 
Project Tree Directory {\b Node} that will contain this file.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the 
requested {\b IDMUSProdNode} interface.  If an error occurs, the implementation sets 
{\i ppIDocRootNode} to NULL.  On success, the caller is responsible for calling 
{\b IDMUSProdNode::Release}
 when this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method gets called in response to a File Open command.\par 
A file may consist of one or more {\b Node} objects.  The top Node is the Node that 
must be returned in {\i ppIDocRootNode}.  The Framework associates {\i ppIDocRootNode} 
with its own representation of a file object.\par 
This method must call {\b IDMUSProdNode::AddRef}
 on {\i ppIDocRootNode} before returning.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example loads a Band file and places its DocRoot node into the Project 
Tree's active folder.  Notice that the Band Editor Component's 
{\b IDMUSProdComponent::LoadRIFFChunk}
 method is actually responsible for loading the Band 
object:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CBandDocType::OnFileOpen( IStream* pIStream, IDMUSProdProject* pITargetProject, IDMUSProdNode* pITargetDirectoryNode, IDMUSProdNode** ppIDocRootNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab IDMUSProdNode* pINode;\par 
\tab HRESULT hr;\par 
\par 
\tab ASSERT( pIStream != NULL );\par 
\tab ASSERT( m_pComponent != NULL );\par 
\par 
\tab if( ppIDocRootNode == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *ppIDocRootNode = NULL;\par 
\par 
\tab if( SUCCEEDED ( m_pComponent->LoadRIFFChunk( pIStream, &pINode ) ) )\tab // performs AddRef()\par 
\tab \{\par 
\tab \tab // Insert a Node into the Project Tree\par 
\tab \tab hr = InsertChildNode( pINode );\par 
\tab \tab if( !SUCCEEDED ( hr ) )\par 
\tab \tab \{\par 
\tab \tab \tab pINode->Release();\par 
\tab \tab \tab return hr;\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab *ppIDocRootNode = pINode;\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdDocType}, {\b OnFileNew}, {\b OnFileSave}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdDocType::OnFileSave Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnFileSave(}{\b IStream*} {\i pIStream}{\b , IDMUSProdNode*} {\i pIDocRootNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Saves the file to the specified stream.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The file specified in {\i pIDocRootNode} was saved successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the file was not saved.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the stream into which the object should be 
saved.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the file's DocRoot {\b IDMUSProdNode} 
interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method gets called in response to a File Save or File Save As command.\par 
A file may consist of one or more {\b Node} objects.  The top Node of the file is the 
Node specified in {\i pIDocRootNode}.  The Framework associates {\i pIDocRootNode} 
with its own representation of a file object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdDocType}, {\b OnFileNew}, {\b OnFileOpen}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdEditor Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 This interface defines interaction between the {\b Framework} and the {\b Editor} that opens 
when a node in the Project Tree is double-clicked.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 DirectMusic Producer Editors are standard registered COM objects.  In addition to 
{\b IDMUSProdEditor}, these objects must implement {\b IOleObject}, {\b IViewObjectEx}, 
{\b IOleControl}, {\b IOleInPlaceObject}, and {\b IOleInPlaceActiveObject}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b IDMUSProdFramework::OpenEditor}
, {\b IDMUSProdFramework::CloseEditor}
\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AttachObjects}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Hands corresponding IDMUSProdNode interface pointer to 
the Editor.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnInitMenuFilePrint}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Initializes state of Framework's File Print menu 
item.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnInitMenuFilePrintPreview}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Initializes state of Framework's File 
Print Preview menu item.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnFilePrint}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Performs action associated with Framework's File Print 
menu item.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnFilePrintPreview}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Performs action associated with Framework's File 
Print Preview menu item.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnViewProperties}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Performs action associated with Framework's View 
Properties menu item.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnF1Help}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Performs context help action associated with F1.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdEditor::AttachObjects Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AttachObjects(}{\b IDMUSProdNode*} {\i pINode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Hands corresponding {\b IDMUSProdNode} 
interface pointer to the {\b Editor}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Pointer was stored successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pINode} is not valid.  For example, the address may be NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to Editor's corresponding {\b IDMUSProdNode} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The Framework calls AttachObjects immediately after contructing the Editor OLE Control 
so that the pointers are avaliable for the Editor's WM_CREATE handler.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example stores pointers supplied by AttachObjects:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMyEditor::AttachObjects( IDMUSProdNode* pINode )\par 
\{\par 
\tab if( pINode == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab m_pStyle = (CStyle *)pINode;\par 
\tab m_pStyle->AddRef();\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following code excerpt shows the Framework calling AttachObjects:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 ...\par 
...\par 
...\par 
\par 
pCntrItem = new CComponentCntrItem( this );\par 
ASSERT_VALID( pCntrItem );\par 
\par 
if( !pCntrItem->CreateNewItem( clsidEditor ) )\par 
\{\par 
\tab AfxThrowMemoryException();\tab \tab // any exception will do\par 
\}\par 
\par 
// Attach object to the control\par 
ASSERT( pCntrItem->m_lpObject != NULL );\par 
if( SUCCEEDED ( pCntrItem->m_lpObject->QueryInterface( IID_IDMUSProdEditor, (void**)&pIEditor ) ) )\par 
\{\par 
\tab pView->m_pIEditor = pIEditor;\par 
\tab pIEditor->AttachObjects( pINode, NULL );\par 
\}\par 
else\par 
\{\par 
\tab AfxThrowMemoryException();\tab \tab // any exception will do\par 
\}\par 
\par 
pCntrItem->DoVerb( OLEIVERB_SHOW, static_cast<CComponentView*>( pView ) );\par 
\par 
...\par 
...\par 
...\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdEditor}, {\b IDMUSProdNode::GetEditorClsId}
, {\b IDMUSProdFramework::OpenEditor}
, {\b IDMUSProdFramework::CloseEditor}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdEditor::OnF1Help Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnF1Help(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Performs the context help action associated 
with F1.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Context help was displayed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and context help could not be displayed.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell This {\b Editor} does not support context help.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdEditor}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdEditor::OnFilePrint Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnFilePrint(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Performs action associated with Framework's 
File Print menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Print was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell Print encountered a problem.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell This {\b Editor} does not support Print.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdEditor}, {\b OnInitMenuFilePrint}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdEditor::OnFilePrintPreview Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnFilePrintPreview(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Performs action associated with 
Framework's File Print Preview menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Print Preview was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell Print Preview encountered a problem.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell This {\b Editor} does not support Print Preview.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdEditor}, {\b OnInitMenuFilePrintPreview}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdEditor::OnInitMenuFilePrint Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnInitMenuFilePrint(}{\b HMENU} {\i hMenu}{\b , UINT} {\i nMenuId}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Initializes state of Framework's File 
Print menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Always succeeds.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Handle to Framework's File menu.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nMenuId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Command ID of Framework's File Print menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example enables the Framework's File Print menu item:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMyEditor::OnInitMenuFilePrint( HMENU hMenu, UINT nMenuId )\par 
\{\par 
\tab ::EnableMenuItem( hMenu, nMenuId, (MF_ENABLED | MF_BYCOMMAND) );\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdEditor}, {\b OnFilePrint}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdEditor::OnInitMenuFilePrintPreview Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnInitMenuFilePrintPreview(}{\b HMENU} {\i hMenu}{\b , UINT} {\i nMenuId}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Initializes state of Framework's 
File Print Preview menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Always succeeds.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Handle to Framework's File menu.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nMenuId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Command ID of Framework's File Print Preview menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example disables the Framework's File Print Preview menu item:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMyEditor::OnInitMenuFilePrintPreview( HMENU hMenu, UINT nMenuId )\par 
\{\par 
\tab ::EnableMenuItem( hMenu, nMenuId, (MF_GRAYED | MF_BYCOMMAND) );\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdEditor}, {\b OnFilePrintPreview}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdEditor::OnViewProperties Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnViewProperties(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Performs action associated with 
Framework's View Properties menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Display of properties was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and properties could not be displayed.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell This {\b Editor} does not support properties.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Called when an Editor is active and the user selects the Framework's View Properties 
menu item.\par 
Properties should be displayed for the control which has focus.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdEditor}, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFileRefChunk Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 This interface contains methods to manage DirectMusic Producer file reference RIFF chunks.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A file may need to associate itself with other files in its {\b Project}.  For example, 
a Band may use one or more DLS files.  In order to establish a connection to other files, 
the saved Band contains one or more file reference chunks each pointing to a DLS file.\par 
{\b IDMUSProdFileRefChunk} provides a standard way for DirectMusic Producer {\b Component}s 
to place DirectMusic Producer file reference RIFF chunks in the design-time version of 
their files.  These chunks contain enough information so that DirectMusic Producer can 
load the referenced file when the file is opened.\par 
{\b IDMUSProdFileRefChunk} places Producer specific file reference chunks in streams so that 
links can be re-established within Producer the next time the file is opened by Producer. 
{\b IDMUSProdLoaderRefChunk} places DirectMusic file reference chunks in streams so that links 
can be established when the file is loaded into the DirectMusic DLLs either externally or 
via Producer.\par 
A DirectMusic Producer Component can call {\b IDMUSProdFramework::QueryInterface}
 to 
obtain a pointer to the {\b Framework}'s {\b IDMUSProdFileRefChunk} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdComponent}, {\b IDMUSProdFramework}, {\b IDMUSProdNode}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT LoadRefChunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reads a DirectMusic Producer file reference RIFF chunk, 
loads the referenced file, and returns a pointer to the referenced file's DocRoot node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SaveRefChunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Saves a DirectMusic Producer file reference RIFF chunk.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetChunkSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the size of a DirectMusic Producer file reference RIFF 
chunk.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFileRefChunk::GetChunkSize Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetChunkSize(}{\b DWORD*} {\i pdwSize}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the size of a DirectMusic 
Producer file reference RIFF chunk.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The chunk size was returned in {\i pdwSize}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pdwSize} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to size of stream needed to save the 
chunk.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFileRefChunk}, {\b IDMUSProdReferenceNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFileRefChunk::LoadRefChunk Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT LoadRefChunk(}{\b IStream*} {\i pIStream}{\b , IDMUSProdNode**} {\i ppIDocRootNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reads a DirectMusic Producer file 
reference RIFF chunk, loads the referenced file, and returns a pointer to the 
referenced file's DocRoot node in {\i ppIDocRootNode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The top node of the referenced file was returned in {\i ppIDocRootNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIDocRootNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The value of {\i pIStream} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the top node of the refrenced file could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to IStream interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdNode} interface.  If an error occurs, the implementation 
sets {\i ppIDocRootNode} to NULL.  On success, the caller 
is responsible for calling {\b IDMUSProdNode::Release}
 when 
this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A DirectMusic Producer {\b Component} can call {\b IDMUSProdFramework::QueryInterface}
 
to obtain a pointer to the {\b Framework}'s {\b IDMUSProdFileRefChunk} interface.\par 
Call {\b SaveRefChunk} to create the DirectMusic Producer file 
reference RIFF chunk loaded by {\b LoadRefChunk}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example reads a DirectMusic Producer file reference chunk and creates a 
reference {\b Node}:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 const GUID GUID_StyleRefNode = \{0x408FBB21,0xB009,0x11D0,\{0x89,0xAD,0x00,0xA0,0xC9,0x05,0x41,0x29\}\};\par 
const GUID GUID_StyleNode = \{0xFAE21E45,0xA51A,0x11D0,\{0x89,0xAD,0x00,0xA0,0xC9,0x05,0x41,0x29\}\};\par 
const CLSID CLSID_StyleComponent = \{0x44207721,0x487B,0x11d0,\{0x89,0xAC,0x00,0xA0,0xC9,0x05,0x41,0x29\}\};\par 
\par 
IDMUSProdNode* m_pIStyleRefNode;\tab // member variable storing pointer to reference Node\par 
\par 
IDMUSProdFramework* pIFramework;\par 
IDMUSProdFileRefChunk* pIFileRefChunk;\par 
IStream* pIStream;\par 
IDMUSProdNode* pINode;\par 
\par 
IDMUSProdNode* pIDocRootNode = NULL;\par 
\par 
// Get an IDMUSProdNode* pointer to the top node of the referenced file\par 
if( SUCCEEDED ( pIFramework->QueryInterface( IID_IDMUSProdFileRefChunk, (void **)&pIFileRefChunk ) ) )\par 
\{\par 
\tab if( FAILED ( pIFileRefChunk->LoadRefChunk( pIStream, &pIDocRootNode ) ) )\par 
\tab \{\par 
\tab \tab if( AfxMessageBox( IDS_BROWSE_FOR_FILE, MB_YESNO ) == IDYES )\par 
\tab \tab \{\par 
\tab \tab \tab IDMUSProdDocType* pIDocType;\par 
\par 
\tab \tab \tab if( SUCCEEDED ( pIFramework->FindDocTypeByNodeId( GUID_StyleNode, &pIDocType ) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab pIFramework->OpenFile( pIDocType, NULL, pINode, &pIDocRootNode );\par 
\tab \tab \tab \tab pIDocType->Release();\par 
\tab \tab \tab \}\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab pIFileRefChunk->Release();\par 
\}\par 
\par 
// Create a reference node for the referenced file\par 
if( pIDocRootNode )\par 
\{\par 
\tab IDMUSProdComponent* pIComponent;\par 
\par 
\tab if( SUCCEEDED ( pIFramework->FindComponent( CLSID_StyleComponent, &pIComponent ) ) )\par 
\tab \{\par 
\tab \tab if( SUCCEEDED ( pIComponent->AllocReferenceNode( GUID_StyleRefNode, &m_pIStyleRefNode ) ) )\par 
\tab \tab \{\par 
\tab \tab \tab IDMUSProdReferenceNode* pIReferenceNode;\par 
\par 
\tab \tab \tab if( SUCCEEDED ( m_pIStyleRefNode->QueryInterface( IID_IDMUSProdReferenceNode, (void **)&pIReferenceNode ) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab pIReferenceNode->SetReferencedFile( pIDocRootNode );\par 
\tab \tab \tab \tab pIReferenceNode->Release();\par 
\tab \tab \tab \}\par 
\tab \tab \}\par 
\tab \tab pIComponent->Release();\par 
\tab \}\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdFileRefChunk}, {\b SaveRefChunk}, {\b GetChunkSize}, {\b IDMUSProdFramework::OpenFile}
, {\b IDMUSProdReferenceNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFileRefChunk::SaveRefChunk Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SaveRefChunk(}{\b IStream*} {\i pIStream}{\b , IDMUSProdNode*} {\i pIDocRootNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Saves a DirectMusic Producer file 
reference RIFF chunk.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The DirectMusic Producer file reference RIFF chunk was saved successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i pIStream} or {\i pIDocRootNode} is not valid.  For example, 
they may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the file reference chunk could not be saved.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to IStream interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an {\b IDMUSProdNode} interface for the DocRoot 
{\b Node} of the referenced file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A DirectMusic Producer {\b Component} can call {\b IDMUSProdFramework::QueryInterface}
 
to obtain a pointer to the {\b Framework}'s {\b IDMUSProdFileRefChunk} interface.\par 
Call {\b LoadRefChunk} to load the DirectMusic Producer file 
reference RIFF chunk created by {\b SaveRefChunk}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following code excerpt handles creation of file reference chunks correctly.  Reference 
chunks are saved differently when persisting directly into a DirectMusic object because Producer's 
implementation of IDirectMusicLoader will be called upon to resolve the reference.  When saving to 
a file, the file type (FT_RUNTIME, FT_DESIGN) returned by {\b IDMUSProdPersistInfo::GetStreamInfo}
 
determines whether or not it is necessary to save the Producer specific file reference chunk:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 // Write Reference chunk\par 
if( pIStyleDocRootNode )\par 
\{\par 
\tab if( ::IsEqualGUID( guidDataFormat, GUID_DirectMusicObject ) )\par 
\tab \{\par 
\tab \tab SaveDMRef( pIRiffStream, pIStyleDocRootNode, WL_PRODUCER );\par 
\tab \}\par 
\tab else if( ::IsEqualGUID( guidDataFormat, GUID_CurrentVersion ) )\par 
\tab \{\par 
\tab \tab SaveDMRef( pIRiffStream, pIStyleDocRootNode, WL_DIRECTMUSIC );\par 
\tab \tab if( ftFileType == FT_DESIGN )\par 
\tab \tab \{\par 
\tab \tab \tab SaveProducerRef( pIRiffStream, pIStyleDocRootNode );\par 
\tab \tab \}\par 
\tab \}\par 
\}\par 
\par 
\par 
HRESULT CStyleRefMgr::SaveProducerRef( IDMUSProdRIFFStream* pIRiffStream, IDMUSProdNode* pIDocRootNode )\par 
\{\par 
IDMUSProdFileRefChunk* pIFileRefChunk;\par 
\par 
ASSERT( m_pIFramework != NULL );\par 
if( m_pIFramework == NULL )\par 
\{\par 
\tab return E_FAIL;\par 
\}\par 
\par 
IStream* pIStream = pIRiffStream->GetStream();\par 
ASSERT( pIStream != NULL );\par 
\par 
if ( SUCCEEDED ( m_pIFramework->QueryInterface( IID_IDMUSProdFileRefChunk, (void**)&pIFileRefChunk ) ) )\par 
\{\par 
\tab pIFileRefChunk->SaveRefChunk( pIStream, pIDocRootNode );\par 
\tab pIFileRefChunk->Release();\par 
\}\par 
\par 
pIStream->Release();\par 
return S_OK;\par 
\}\par 
\par 
\par 
HRESULT CStyleRefMgr::SaveDMRef( IDMUSProdRIFFStream* pIRiffStream,\par 
\tab \tab \tab \tab \tab \tab \tab  IDMUSProdNode* pIDocRootNode, WhichLoader whichLoader )\par 
\{\par 
IDMUSProdLoaderRefChunk* pIRefChunkLoader;\par 
\par 
ASSERT( m_pIFramework != NULL );\par 
if( m_pIFramework == NULL )\par 
\{\par 
\tab return E_FAIL;\par 
\}\par 
\par 
HRESULT hr = E_FAIL;\par 
\par 
IStream* pIStream = pIRiffStream->GetStream();\par 
ASSERT( pIStream != NULL );\par 
\par 
if( SUCCEEDED( m_pIFramework->QueryInterface( IID_IDMUSProdLoaderRefChunk, (void**)&pIRefChunkLoader ) ) )\par 
\{\par 
\tab if( pIRefChunkLoader )\par 
\tab \{\par 
\tab \tab switch( whichLoader )\par 
\tab \tab \{\par 
\tab \tab \tab case WL_DIRECTMUSIC:\par 
\tab \tab \tab case WL_PRODUCER:\par 
\tab \tab \tab \tab hr = pIRefChunkLoader->SaveRefChunkForLoader( pIStream,\par 
\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab   pIDocRootNode,\par 
\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab   CLSID_DirectMusicStyle,\par 
\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab   NULL,\par 
\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab   whichLoader );\par 
\tab \tab \tab \tab break;\par 
\tab \tab \}\par 
\par 
\tab \tab pIRefChunkLoader->Release();\par 
\tab \}\par 
\}\par 
\par 
pIStream->Release();\par 
return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdLoaderRefChunk}, {\b IDMUSProdFileRefChunk}, {\b LoadRefChunk}, {\b GetChunkSize}, {\b IDMUSProdFramework::OpenFile}
, {\b IDMUSProdReferenceNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 This interface allows a DirectMusic Producer {\b Component} object to function within 
DMUSProd.exe.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework} provides the means for Components to hook into the {\b Framework} 
through the Framework's Project Tree and 'Add-Ins' menu.  In addition, it allows a Component 
to register additional file types that can be created, opened and saved through the 
Framework's File New, File Open and File Save commands.  It provides the doorway for 
communication amongst Components. It also provides access to the Framework's status bar 
and the ability to create application-wide toolbars.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Framework} Object, {\b IDMUSProdComponent}, {\b IDMUSProdDocType}, {\b IDMUSProdNode}, {\b IDMUSProdEditor}, {\b IDMUSProdRIFFExt}, {\b IDMUSProdMenu}, {\b IDMUSProdToolBar}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT FindComponent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns a pointer to the specified Component's IDMUSProdComponent 
interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetFirstComponent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdComponent interface pointer for the first 
Component in the Framework's list of registered Components.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetNextComponent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdComponent interface pointer for the next 
Component in the Framework's list of registered Components.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AddDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Registers a document type with the Framework.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT FindDocTypeByExtension}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns a pointer to the specified file extension's 
IDMUSProdDocType interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT FindDocTypeByNodeId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns a pointer to the specified id's IDMUSProdDocType 
interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetFirstDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdDocType interface pointer for the first 
DocType in the Framework's list of registered DocTypes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetNextDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdDocType interface pointer for the next 
DocType in the Framework's list of registered DocTypes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CreateNewFile}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Invokes the Framework's File New command and returns a new file of 
the type described through {\i pIDocType}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OpenFile}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Invokes the Framework's File Open command and returns a file of 
the type described through {\i pIDocType}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CopyFile}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns a copy of the file specified in {\i pIDocRootNode}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT ShowFile}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Displays a newly created file in the Project Tree.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RegisterClipFormatForFile}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Registers a file's clipboard format with the Framework.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SaveClipFormat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns a stream containing the specifed clipboard format for {\i pINode}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetDocRootNodeFromData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdNode interface pointer for the DocRoot node copied into 
{\i pIDataObject}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AllocFileStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IStream interface pointer for the file specified in {\i bstrFileName}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AllocMemoryStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IStream interface pointer for a newly created memory stream.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetFirstProject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdProject interface pointer for the first 
Project in the application's list of Projects.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetNextProject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdProject interface pointer for the next 
Project in the application's list of Projects.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT FindProject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdProject interface pointer for the Project 
containing {\i pINode}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT IsProjectEqual}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether {\i pIDocRootNode1} and {\i pIDocRootNode2} are 
in the same Project.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AddNodeImageList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Adds images to the Project Tree's image list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetNodeFileName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the path/filename of the file associated with {\i pINode}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetNodeFileGUID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the Producer generated GUID assigned to the file associated with {\i pINode}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RevertFileToSaved}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reverts the document associated with {\i pINode} to its 
last saved state.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SaveNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Invokes the Framework's File Save command for the document 
associated with the DocRoot node of {\i pINode}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SaveNodeAsNewFile}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Invokes the Framework's File Save As command to create a new 
file for the node specified in {\i pINode}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AddNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Adds one or more nodes to the Project Tree.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RemoveNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Removes one or more nodes from the Project Tree.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT FindDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdNode interface pointer for the matching DocRoot node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT FindDocRootNodeByFileGUID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdNode interface pointer for the matching DocRoot node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetBestGuessDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdNode interface pointer for the closest matching DocRoot node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetSelectedNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the Project Tree's currently selected node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetSelectedNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Highlights the Project Tree node associated with {\i pINode}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RefreshNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Refreshes and redraws the Project Tree node associated with {\i pINode}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SortChildNodes}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sorts the Project Tree child nodes associated with {\i pINode}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT EditNodeLabel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Begins in-place editing of the specified node's text.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OpenEditor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Opens an editor for {\i pINode}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CloseEditor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Closes the editor for {\i pINode}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AddToNotifyList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Adds {\i pINotifyThisNode} to the list of nodes notified when 
the state of {\i pIDocRootNode} changes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RemoveFromNotifyList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Removes {\i pINotifyThisNode} from the list of nodes notified 
when the state of {\i pIDocRootNode} changes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT NotifyNodes}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Notifies all nodes linked to {\i pIChangedDocRootNode} via calls to 
{\i AddToNotifyList()} that the state of {\i pIChangedDocRootNode} has changed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AddMenuItem}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Adds an item to the Framework's 'Add-Ins' menu.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RemoveMenuItem}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Removes an item from the Framework's 'Add-Ins' menu.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AddToolBar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Adds a toolbar to the Framework.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RemoveToolBar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Removes a toolbar from the Framework.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetNbrStatusBarPanes}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Creates panes in the Framework's status bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetStatusBarPaneInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the specified status bar pane to a new 
style and width.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetStatusBarPaneText}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the text of the specified status bar pane.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RestoreStatusBar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Removes panes from the Framework's status bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT StartProgressBar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Creates a progress bar control in the Framework's 
status bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetProgressBarPos}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the current position of the progress bar control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetProgressBarStep}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the step increment for the progress bar control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT StepProgressBar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Advances current position of the progress bar control by the step 
increment.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT EndProgressBar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Removes the progress bar control from the Framework's 
status bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetSharedObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allows one or more DirectMusic Producer Components to share 
the same COM object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::AddDocType Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AddDocType(}{\b IDMUSProdDocType*} {\i pIDocType}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Registers a {\b DocType} object with the 
{\b Framework}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIDocType} was registered successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIDocType} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell {\i pIDocType} could not be registered.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdDocType} interface 
being registered.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A Component's {\b IDMUSProdComponent::Initialize}
 method can call {\b AddDocType} 
to include additional document types in the Framework's File New, File Open and 
File Save dialogs.\par 
{\b AddDocType} must receive a successful return from 
{\b IDMUSProdDocType::GetResourceId}
 in order to complete successfully.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following excerpt from an {\b IDMUSProdComponent::Initialize}
 method registers 
an additional document type with the Framework:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdDocType* pIDocType;\par 
IDMUSProdFramework* pIFramework;\par 
\par 
pIDocType = new CStyleDocType( this );\par 
if( pIDocType == NULL )\par 
\{\par 
\tab CleanUp();\par 
\tab ::LoadString( theApp.m_hInstance, IDS_ERR_MEMORY, achErrMsg, MID_BUFFER );\par 
\tab strErrMsg = achErrMsg;\par 
\tab *pbstrErrMsg = strErrMsg.AllocSysString();\par 
\tab return E_OUTOFMEMORY;\par 
\}\par 
\par 
pIDocType->AddRef();\par 
\par 
if( FAILED ( pIFramework->AddDocType(pIDocType) ) )\par 
\{\par 
\tab CleanUp();\par 
\tab ::LoadString( theApp.m_hInstance, IDS_ERR_ADD_DOCTYPE, achErrMsg, MID_BUFFER );\par 
\tab strErrMsg = achErrMsg;\par 
\tab *pbstrErrMsg = strErrMsg.AllocSysString();\par 
\tab return E_FAIL;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b DocType} Object, {\b IDMUSProdDocType}, {\b IDMUSProdFramework}, {\b FindDocTypeByNodeId}, {\b FindDocTypeByExtension}, {\b GetFirstDocType}, {\b GetNextDocType}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::AddMenuItem Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AddMenuItem(}{\b IDMUSProdMenu*} {\i pIMenu}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Adds the {\b Menu} object defined by 
{\i pIMenu} to the Framework's 'Add-Ins' menu.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIMenu} was successfully added to the Framework's 'Add-Ins' menu.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIMenu} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell {\i pIMenu} was not added to the 'Add-Ins' menu.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIMenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdMenu} interface to be added.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b AddMenuItem} provides a way for a Component, that otherwise 
has no UI, to hook into the Framework.  For example, a Component may want to place a 
menu item in the Framework's 'Add-Ins' menu to provide a dialog that can be used to setup 
various options.\par 
A Component's {\b IDMUSProdComponent::Initialize}
 method should call 
{\b AddMenuItem} if it wants to add menu item(s) to the Framework's 
'Add-Ins' menu.  {\b RemoveMenuItem} should be called from within 
{\b IDMUSProdComponent::CleanUp}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following excerpt from an {\b IDMUSProdComponent::Initialize}
 method adds an 
item to the Framework's 'Add-Ins' menu:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 if( FAILED ( m_pIFramework->AddMenuItem( (IDMUSProdMenu *)this ) ) )\par 
\{\par 
\tab CleanUp();\par 
\tab ::LoadString( theApp.m_hInstance, IDS_ERR_ADD_MENUITEM, achErrMsg, MID_BUFFER );\par 
\tab strErrMsg = achErrMsg;\par 
\tab *pbstrErrMsg = strErrMsg.AllocSysString();\par 
\tab return E_FAIL;\par 
\}\par 
else\par 
\{\par 
\tab m_fMenuWasAdded = TRUE;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Menu} Object, {\b IDMUSProdFramework}, {\b RemoveMenuItem}, {\b IDMUSProdMenu}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::AddNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AddNode(}{\b IDMUSProdNode*} {\i pITopNode}{\b , IDMUSProdNode*} {\i pIParentNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Inserts {\i pITopNode}, along with its 
children, underneath {\i pIParentNode} in the Framework's Project Tree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pITopNode}, along with its children, was inserted successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pITopNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and {\i pITopNode} was not inserted into the Project Tree.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITopNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdNode} interface to be inserted.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIParentNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the parent {\b IDMUSProdNode} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i pIParentNode} is NULL, {\i pITopNode} is inserted into the selected folder of 
the Project Tree.\par 
The Framework uses {\b IDMUSProdNode::GetFirstChild}
 and {\b IDMUSProdNode::GetNextChild}
 
when inserting child nodes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example inserts a Style file into the active folder of the Project Tree:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleDocType::InsertChildNode( IDMUSProdNode* pIChildNode )\par 
\{\par 
\tab ASSERT( pIChildNode != NULL );\par 
\tab ASSERT( m_pComponent != NULL );\par 
\tab ASSERT( m_pComponent->m_pIFramework != NULL );\par 
\par 
\tab // Add Style to Style component list\par 
\tab pIChildNode->AddRef();\par 
\tab m_pComponent->m_lstStyles.AddTail( (CStyle *)pIChildNode );\par 
\par 
\tab // Set DocRoot and parent node of ALL children\par 
\tab theApp.SetNodePointers( pIChildNode, pIChildNode, (IDMUSProdNode *)this );\par 
\par 
\tab // Add node to Project Tree\par 
\tab if( FAILED ( m_pComponent->m_pIFramework->AddNode(pIChildNode, NULL) ) )\par 
\tab \{\par 
\tab \tab DeleteChildNode( pIChildNode );\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b RemoveNode}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::AddNodeImageList Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AddNodeImageList(}{\b HANDLE} {\i hNodeImageList}{\b , short*} {\i pnNbrFirstImage}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Adds images to the Project Tree's 
image list.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The image list was added successfully and the index to the first image in 
the list was returned in {\i pnNbrFirstImage}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pnNbrFirstImage} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell The images were not added to the Project Tree's image list.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hNodeImageList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Handle to image list to be added.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pnNbrFirstImage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to corresponding index into 
Project Tree's image list. 
{\b IDMUSProdNode::GetNodeImageIndex}
 returns an index 
based on {\i pnNbrFirstImage}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If a Component inserts nodes into the Project Tree, its {\b IDMUSProdComponent::Initialize}
 
method must call {\b AddNodeImageList} so that the Component can add 
its images to the Project Tree's image list.\par 
Project Tree images must be 16 X 16 and contain 256 colors.\par 
The Project Tree maintains a list of images used when drawing nodes.  As nodes are 
inserted into the Project Tree, the Framework calls {\b IDMUSProdNode::GetNodeImageIndex}
 
so that it can associate a pair of consecutive images in its list with the node 
being inserted.  The index returned by {\b IDMUSProdNode::GetNodeImageIndex}
 is based 
{\i pnNbrfirstImage}.  Images must always be added in pairs.  The 
{\b IDMUSProdNode::UseOpenCloseImages}
 method determines whether the consecutive images 
pertain to non-selected/selected states or closed/opened states (folders).\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example adds images to the Project Tree's image list:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotifComponent::AddNodeImageLists( void )\par 
\{\par 
\tab CImageList lstImages;\par 
\tab HICON hIcon;\par 
\par 
\tab lstImages.Create( 16, 16, ILC_COLOR16, 2, 0 );\par 
\tab lstImages.SetBkColor( GetSysColor(COLOR_WINDOW) );\par 
\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDR_MOTIF_DOCTYPE) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DestroyIcon( hIcon );\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDI_MOTIF_DOCTYPE_SEL) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DestroyIcon( hIcon );\par 
\par 
\tab if( FAILED (m_pIFramework->AddNodeImageList( lstImages.Detach(), &m_nFirstMotifImage ) ) )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab lstImages.Create( 16, 16, ILC_COLOR16, 2, 0 );\par 
\tab lstImages.SetBkColor( GetSysColor(COLOR_WINDOW) );\par 
\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDI_FOLDER) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DestroyIcon( hIcon );\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDI_FOLDER_SEL) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DestroyIcon( hIcon );\par 
\par 
\tab if( FAILED (m_pIFramework->AddNodeImageList( lstImages.Detach(), &m_nFirstFolderImage ) ) )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdComponent::Initialize}
, {\b IDMUSProdFramework}, {\b IDMUSProdNode}, {\b IDMUSProdNode::GetNodeImageIndex}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::AddToNotifyList Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AddToNotifyList(}{\b IDMUSProdNode*} {\i pIDocRootNode}{\b , IDMUSProdNode*} {\i pINotifyThisNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Adds {\i pINotifyThisNode} to the list 
of {\b Node}s notified when the state of {\i pIDocRootNode} changes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pINotifyThisNode} was added to the list of nodes to be notified when 
the state of {\i pIDocRootNode} changes.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i pIDocRootNode} or {\i pINotifyThisNode} is not valid. 
For example, they may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and {\i pINotifyThisNode} could not be added to the 
notify list attached to {\i pIDocRootNode}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an {\b IDMUSProdNode} interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINotifyThisNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdNode} requesting a 
callback when {\i pIDocRootNode} changes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i pIDocRootNode} must point to a DocRoot {\b Node}.  A DocRoot node is the top node of 
a document, or file.  For example, the Style node of a Style file would be considered 
the DocRoot node of the Style.  The Band node of a Band file would be considered the 
DocRoot node of the Band file.\par 
{\i pINotifyThisNode} must also implement {\b IDMUSProdNotifySink}.  The IDMUSProdNotifySink 
interface is used to notify {\i pINotifyThisNode} when the state of {\i pIDocRootNode} 
changes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example displays a File Open dialog for the purpose of selecting a Segment's Style:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdReferenceNode* pIReferenceNode;\par 
IDMUSProdDocType* pIDocType;\par 
\par 
if( SUCCEEDED( pSegment->m_pIStyleRefNode->QueryInterface( IID_IDMUSProdReferenceNode, (void**)&pIReferenceNode ) ) )\par 
\{\par 
\tab if( SUCCEEDED ( pIFramework->FindDocTypeByNodeId( GUID_StyleNode, &pIDocType ) ) )\par 
\tab \{\par 
\tab \tab if( pIFramework->OpenFile( pIDocType, NULL, pSegment, &pIStyleDocRootNode ) == S_OK )\par 
\tab \tab \{\par 
\tab \tab \tab if( SUCCEEDED( pIReferenceNode->SetReferencedFile( pIStyleDocRootNode ) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab pIFramework->AddToNotifyList( pIStyleDocRootNode, pSegment );\par 
\tab \tab \tab \}\par 
\tab \tab \tab pIStyleDocRootNode->Release();\par 
\tab \tab \}\par 
\tab \tab pIDocType->Release();\par 
\tab \}\par 
\tab pIReferenceNode->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b RemoveFromNotifyList}, {\b NotifyNodes}, {\b IDMUSProdNotifySink}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::AddToolBar Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AddToolBar(}{\b IDMUSProdToolBar*} {\i pIToolBar}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Adds the {\b ToolBar} object defined by 
{\i pIToolBar} to the Framework.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIToolBar} was successfully added to the Framework.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIToolBar} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell {\i pIToolBar} was not added to the Framework.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIToolBar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdToolBar} interface to be added.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b AddToolBar} provides a way for a {\b Component} to place a toolbar in 
the Framework so that it can be accessed by other Components.  For example, a Component 
may want to provide transport controls for other DirectMusic Producer Components.\par 
A Component's {\b IDMUSProdComponent::Initialize}
 method should call 
{\b AddToolBar} if it wants to add toolbar(s) to the Framework. 
{\b RemoveToolBar} should be called from within 
{\b IDMUSProdComponent::CleanUp}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following excerpt from an {\b IDMUSProdComponent::Initialize}
 method adds a toolbar 
to the Framework:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 CWnd* pWndParent = new CWnd;\par 
if( pWndParent )\par 
\{\par 
\tab if( pWndParent->CreateEx(0, AfxRegisterWndClass(0), NULL, WS_OVERLAPPED, 0, 0, 0, 0, NULL, NULL) )\par 
\tab \{\par 
\tab \tab CToolbarMsgHandler* pBarMsgHandler = new CToolbarMsgHandler;\par 
\tab \tab if( pBarMsgHandler )\par 
\tab \tab \{\par 
\tab \tab \tab CRect rect( 0, 0, 0, 0 );\par 
\tab \tab \tab if( (pBarMsgHandler->Create(AfxRegisterWndClass(0), NULL, WS_CHILD, rect, pWndParent, -1))\par 
\tab \tab \tab &&  (SUCCEEDED(pIFramework->AddToolBar(pBarMsgHandler))) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab m_pBarMsgHandler = pBarMsgHandler;\par 
\tab \tab \tab \}\par 
\tab \tab \tab else\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab if( pBarMsgHandler->GetSafeHwnd() )\par 
\tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab pBarMsgHandler->DestroyWindow();\par 
\tab \tab \tab \tab \}\par 
\tab \tab \tab \tab delete pBarMsgHandler;\par 
\tab \tab \tab \}\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab //  IDMUSProdFramework::AddToolBar reassigns parent so it is ok to destroy pWndParent\par 
\tab if( pWndParent->GetSafeHwnd() )\par 
\tab \{\par 
\tab \tab pWndParent->DestroyWindow();\par 
\tab \tab delete pWndParent;\par 
\tab \}\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b ToolBar} Object, {\b IDMUSProdFramework}, {\b RemoveToolBar}, {\b IDMUSProdToolBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::AllocFileStream Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AllocFileStream(}{\b BSTR} {\i bstrFileName}{\b , DWORD} {\i dwDesiredAccess}
{\b , FileType} {\i ftFileType}
{\b , GUID} {\i guidDataFormat}
{\b , IDMUSProdNode*} {\i pITargetDirectoryNode}
{\b , IStream **} {\i ppIStream}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an IStream interface pointer 
for the file specified in {\i bstrFileName}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The IStream interface pointer was returned in {\i ppIStream}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i dwDesiredAccess} or {\i ftFileType} is not valid. 
For example, {\i dwDesiredAccess} must be GENERIC_READ or GENERIC_WRITE.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the file could not be opened.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrFileName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Name of file.  This method frees {\i bstrFileName} 
with SysFreeString when it is no longer needed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwDesiredAccess}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] GENERIC_READ or GENERIC_WRITE.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ftFileType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Type of file. FT_DESIGN, FT_RUNTIME, or FT_UNKNOWN.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guidDataFormat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] GUID identifying data format of stream.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITargetDirectoryNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] {\b IDMUSProdNode} interface pointer 
to the Project Tree Directory {\b Node} that will contain 
this file.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IStream} interface. 
If an error occurs, the implementation sets {\i ppIStream} 
to NULL.  On success, the caller is responsible for calling 
{\b IStream::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Streams created through either {\b AllocFileStream} or 
{\b AllocMemoryStream} implement {\b IDMUSProdPersistInfo} for the purpose 
of making available additional information about the stream.  In particular, these methods 
associate a file type and data format with every stream they create.  In addition, 
{\b AllocFileStream} associates a target directory node with each stream 
having a {\i dwDesiredAccess} of GENERIC_READ.\par 
An object can obtain a pointer to a stream's {\b IDMUSProdPersistInfo} interface via a call to 
{\b IStream::QueryInterface}
.  {\b IDMUSProdPersistInfo::GetStreamInfo}
 returns the {\i ftFileType}, 
{\i guidDataFormat}, and {\i pITargetDirectoryNode} associated with a stream.  {\i pITargetDirectory} 
will always be NULL for streams created via {\b AllocMemoryStream}.\par 
The following file types are valid for use in {\i ftFileType}:\par 
FT_DESIGN: \tab Design-time saves may include chunks of UI related information only used 
during editing.\par 
FT_RUNTIME: \tab Runtime saves are invoked to create files for distribution.  Data should 
be saved in its most compact form.\par 
FT_UNKNOWN: \tab FT_UNKNOWN is only valid when {\b AllocFileStream} 
is called to open a file.\par 
{\i guidDataFormat} indicates the specific format to be used when writing data into the 
stream.  Objects may create additional GUIDs to communicate specific data formats they need 
when persisting data.  The {\b Framework} supplies the following GUIDs for general use:\par 
GUID_CurrentVersion: \tab \tab Current version of the file format.\par 
GUID_CurrentVersion_OnlyUI: \tab Current version of the file format (UI state information only).\par 
GUID_DirectMusicObject: \tab \tab Stream being prepared to persist into a DirectMusic object.\par 
GUID_Bookmark: \tab \tab \tab Framework uses this GUID when creating streams to include in bookmarks.\par 
GUID_AllZeros: \tab \tab \tab GUID_AllZeros is only valid when {\b AllocFileStream} 
is called to open a file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b AllocMemoryStream}, {\b IDMUSProdPersistInfo}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::AllocMemoryStream Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AllocMemoryStream(}{\b FileType} {\i ftFileType}{\b , GUID} {\i guidDataFormat}
{\b , IStream **} {\i ppIStream}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an IStream interface pointer 
for a newly created memory stream.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The IStream interface pointer was returned in {\i ppIStream}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i ftFileType} is not valid.  For example, {\i ftFileType} must be 
FT_DESIGN or FT_RUNTIME.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the stream could not be created.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ftFileType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Type of file. FT_DESIGN or FT_RUNTIME.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guidDataFormat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] GUID identifying data format of stream.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IStream} interface. 
If an error occurs, the implementation sets {\i ppIStream} 
to NULL.  On success, the caller is responsible for calling 
{\b IStream::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Streams created through either {\b AllocFileStream} or 
{\b AllocMemoryStream} implement {\b IDMUSProdPersistInfo} for the purpose 
of making available additional information about the stream.  In particular, these methods 
associate a file type and data format with every stream they create.  In addition, 
{\b AllocFileStream} associates a target directory node with each stream 
having a {\i dwDesiredAccess} of GENERIC_READ.\par 
An object can obtain a pointer to a stream's {\b IDMUSProdPersistInfo} interface via a call to 
{\b IStream::QueryInterface}
.  {\b IDMUSProdPersistInfo::GetStreamInfo}
 returns the {\i ftFileType}, 
{\i guidDataFormat}, and {\i pITargetDirectoryNode} associated with a stream.  {\i pITargetDirectory} 
will always be NULL for streams created via {\b AllocMemoryStream}.\par 
The following file types are valid for use in {\i ftFileType}:\par 
FT_DESIGN: \tab Design-time saves may include chunks of UI related information only used 
during editing.\par 
FT_RUNTIME: \tab Runtime saves are invoked to create files for distribution.  Data should 
be saved in its most compact form.\par 
{\i guidDataFormat} indicates the specific format to be used when writing data into the 
memory stream.  Objects may create additional GUIDs to communicate specific data formats 
they need when persisting data.  The {\b Framework} supplies the following GUIDs for general use:\par 
GUID_CurrentVersion: \tab \tab Current version of the file format.\par 
GUID_CurrentVersion_OnlyUI: \tab Current version of the file format (UI state information only).\par 
GUID_DirectMusicObject: \tab \tab Stream being prepared to persist into a DirectMusic object.\par 
GUID_Bookmark: \tab \tab \tab Framework uses this GUID when creating streams to include in bookmarks.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b AllocFileStream}, {\b IDMUSProdPersistInfo}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::CloseEditor Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CloseEditor(}{\b IDMUSProdNode*} {\i pINode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Closes the editor for the node 
specified in {\i pINode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pINode}'s editor was closed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pINode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the editor could not be closed.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdNode} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method provides the means for a Component to close an editor opened by 
the {\b OpenEditor} method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example closes the editor for {\i pINode}:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Editor} Object, {\b IDMUSProdFramework}, {\b OpenEditor}, {\b IDMUSProdNode}, {\b IDMUSProdEditor}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::CopyFile Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CopyFile(}{\b IDMUSProdNode*} {\i pIDocRootNode}{\b , IDMUSProdNode*} {\i pITreePositionNode}
{\b , IDMUSProdNode**} {\i ppINewDocRootNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a copy of the file specified in 
{\i pIDocRootNode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell A copy of the file specified in {\i pIDocRootNode} was returned in 
{\i ppINewDocRootNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppINewDocRootNode} is not valid.  For example, it 
may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The value of either {\i pIDocRootNode} or {\i pITreePositionNode} is 
not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the file could not be copied.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an {\b IDMUSProdNode} interface which 
specifies the file to be copied.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITreePositionNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the Node used to determine where 
the newly created file should be placed in the Project 
Tree.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppINewDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
IDMUSProdNode interface.  If an error occurs, the implementation 
sets {\i ppINewDocRootNode} to NULL.  On success, the 
caller is responsible for calling {\b IDMUSProdNode::Release}
 
when this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i pIDocRootNode} must point to a DocRoot {\b Node}.  A DocRoot node is the top node of 
a document, or file.  For example, the Style node of a Style file would be considered 
the DocRoot node of the Style.  The Band node of a Band file would be considered the 
DocRoot node of the Band file.\par 
This method saves the file specified in {\i pIDocRootNode} using a name built from 
appending the filename of {\i pIDocRootNode} to the path of {\i pITreePositionNode}. 
After the file has been successfully saved, {\b IDMUSProdDocType::OnFileOpen}
 loads the 
new file and places its nodes into the Project Tree.  The DocRoot node of the newly 
created file is returned in {\i ppINewDocRootNode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example makes sure that a referenced file exists in the same Project as the 
file it references.  m_pIStyleRefNode contains an IDMUSProdNode interface pointer to the node 
used to display a referenced Style file:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdReferenceNode* pIReferenceNode;\par 
\par 
if( SUCCEEDED ( m_pIStyleRefNode->QueryInterface( IID_IDMUSProdReferenceNode, (void **)&pIReferenceNode ) ) )\par 
\{\par 
\tab IDMUSProdNode* pIStyleDocRootNode;\par 
\par 
\tab if( SUCCEEDED ( pIReferenceNode->GetReferencedFile( &pIStyleDocRootNode ) ) )\par 
\tab \{\par 
\tab \tab if( pIFramework->IsProjectEqual( this, pIStyleDocRootNode ) == S_FALSE )\par 
\tab \tab \{\par 
\tab \tab \tab IDMUSProdNode* pINewDocRootNode;\par 
\par 
\tab \tab \tab if( SUCCEEDED ( pIFramework->CopyFile( pIStyleDocRootNode, this, &pINewDocRootNode ) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab pIReferenceNode->SetReferencedFile( pINewDocRootNode );\par 
\tab \tab \tab \tab pINewDocRootNode->Release();\par 
\tab \tab \tab \}\par 
\tab \tab \}\par 
\par 
\tab \tab pIStyleDocRootNode->Release();\par 
\tab \}\par 
\par 
\tab pIReferenceNode->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b IsProjectEqual}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::CreateNewFile Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CreateNewFile(}{\b IDMUSProdDocType*} {\i pIDocType}{\b , IDMUSProdNode*} {\i pITreePositionNode}
{\b , IDMUSProdNode**} {\i ppIDocRootNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Invokes the {\b Framework}'s File New 
command and returns a new file of the type described through {\i pIDocType}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The newly created file's top {\b IDMUSProdNode} was returned in {\i ppIDocRootNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIDocRootNode} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i pIDocType} or {\i pITreePositionNode} is not valid. 
For example, they may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell A new file could not be created.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdDocType} interface which 
is used to determine the kind of file to create.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITreePositionNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b Node} used to determine where 
the newly created file should be placed in the Project 
Tree.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdNode} interface.  If an error occurs, the implementation 
sets {\i ppIDocRootNode} to NULL.  On success, the caller 
is responsible for calling {\b IDMUSProdNode::Release}
 when 
this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method provides the means for a Component to initiate a File New command.\par 
Part of the Framework's File New processing uses {\i pIDocType} to call 
{\b IDMUSProdDocType::OnFileNew}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example creates a new Style file and places it in the Project Tree in the 
same directory as {\i pISegmentDocRootNode}:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdDocType* pIDocType;\par 
IDMUSProdNode* pIDocRootNode;\par 
\par 
if( SUCCEEDED ( m_pIFramework->FindDocTypeByNodeId( GUID_StyleNode, &pIDocType ) ) )\par 
\{\par 
\tab if( SUCCEEDED ( m_pIFramework->CreateNewFile( pIDocType, pISegmentDocRootNode, &pIDocRootNode ) ) )\par 
\tab \{\par 
\tab \tab pIDocRootNode->Release();\par 
\tab \}\par 
\par 
\tab pIDocType->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdDocType}, {\b IDMUSProdFramework}, {\b OpenFile}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::EditNodeLabel Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT EditNodeLabel(}{\b IDMUSProdNode*} {\i pINode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Begins in-place editing of the label 
associated with {\i pINode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell In-place editing of the node's label began successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pINode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell In-place editing of the node's label could not begin.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdNode} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method provides the means for a Component to initiate in-place editing of the 
node names in the Project Tree.  For example, it allows the right-click context menu 
associated with a node to contain a menu item for renaming itself.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example initiates in-place editing of a node's label:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::OnRightClickMenuSelect( long lCommandId )\par 
\{\par 
\tab ASSERT( m_pComponent != NULL );\par 
\tab ASSERT( m_pComponent->m_pIFramework != NULL );\par 
\par 
\tab HRESULT hr = E_FAIL;\par 
\par 
\tab switch( lCommandId )\par 
\tab \{\par 
\tab \tab case IDM_RENAME:\par 
\tab \tab \tab if( SUCCEEDED ( m_pComponent->m_pIFramework->EditNodeLabel((IDMUSProdNode *)this) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab hr = S_OK;\par 
\tab \tab \tab \}\par 
\tab \tab \tab break;\par 
\tab \}\par 
\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b IDMUSProdNode}, {\b IDMUSProdNode::GetNodeNameMaxLength}
, {\b IDMUSProdNode::ValidateNodeName}
, {\b IDMUSProdNode::SetNodeName}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::EndProgressBar Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT EndProgressBar(}{\b HANDLE} {\i hKey}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes the progress bar control 
from the {\b Framework}'s status bar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The progress bar control was removed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The value of {\i hKey} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell {\i hKey} does not match the HANDLE returned by the previous call 
to {\b StartProgressBar}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hKey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] HANDLE returned by {\b StartProgressBar}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\b Framework}'s "progress bar" can be used by DirectMusic Producer {\b Component}s 
to indicate the progress of a lengthy operation.  The progress bar control has a range 
and a current position.  The range represents the length of the entire operation, and 
the current position represents the progress the application has made toward completing 
the operation.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example creates a progress bar control in the Framework's status bar:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdFramework* pIFramework;\par 
HANDLE hKey;\par 
\par 
CString strPrompt = _T( "Preparing information" );\par 
BSTR bstrPrompt = strPrompt.AllocSysString();\par 
\par 
pIFramework->StartProgressBar( 0, 50, bstrPrompt, &hKey );\par 
for( int i = 0 ;  i < 50 ;  i++ )\par 
\{\par 
\tab Sleep( 50 );\par 
\tab pIFramework->SetProgressBarPos( hKey, i );\par 
\}\par 
pIFramework->EndProgressBar( hKey );\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b StartProgressBar}, {\b SetProgressBarPos}, {\b SetProgressBarStep}, {\b StepProgressBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::FindComponent Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT FindComponent(}{\b REFCLSID} {\i rclsid}{\b , IDMUSProdComponent**} {\i ppIComponent}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the specified 
Component's {\b IDMUSProdComponent} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The specified Component's {\b IDMUSProdComponent} was returned in {\i ppIComponent}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIComponent} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] CLSID of the Component to be found.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIComponent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the 
requested {\b IDMUSProdComponent} interface.  If an error 
occurs, the implementation sets {\i ppIComponent} 
to NULL.  On success, the caller is responsible 
for calling {\b IDMUSProdComponent::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The Framework calls CoCreateInstance to obtain an {\b IDMUSProdComponent} interface for each 
of the Component CLSID's registered under:\par 
[HKEY_LOCAL_MACHINE\\Software\\Microsoft\\DMUSProducer\\Components].\par 
{\b FindComponent} locates the {\b IDMUSProdComponent} whose CLSID matches 
{\i rclsid} and ensures the Component's {\b IDMUSProdComponent::Initialize}
 method has been 
called before returning its pointer in {\i ppIComponent}.\par 
A Component that uses other DirectMusic Producer Components must call 
{\b FindComponent} to obtain a pointer to each of the required Component's 
{\b IDMUSProdComponent} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following excerpt from an {\b IDMUSProdComponent::Initialize}
 method obtains interface 
pointers to the Conductor Component and the Band Editor Component:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 // Get IDMUSProdConductor interface pointers\par 
if( FAILED ( pIFramework->FindComponent( CLSID_CConductor,  &pIComponent ) )\par 
||  FAILED ( pIComponent->QueryInterface( IID_IDMUSProdConductor, (void**)&m_pIConductor ) ) )\par 
\{\par 
\tab CleanUp();\par 
\tab if( pIComponent )\par 
\tab \{\par 
\tab \tab pIComponent->Release();\par 
\tab \}\par 
\tab ::LoadString( theApp.m_hInstance, IDS_ERR_MISSING_CONDUCTOR, achErrMsg, MID_BUFFER );\par 
\tab strErrMsg = achErrMsg;\par 
\tab *pbstrErrMsg = strErrMsg.AllocSysString();\par 
\tab return E_FAIL;\par 
\}\par 
pIComponent->Release();\par 
\par 
// Get the IDMUSProdComponent interface for the Band Editor Component\par 
if( FAILED ( pIFramework->FindComponent( CLSID_BandComponent,  &m_pIBandComponent ) ) )\par 
\{\par 
\tab CleanUp();\par 
\tab ::LoadString( theApp.m_hInstance, IDS_ERR_MISSING_BAND, achErrMsg, MID_BUFFER );\par 
\tab strErrMsg = achErrMsg;\par 
\tab *pbstrErrMsg = strErrMsg.AllocSysString();\par 
\tab return E_FAIL;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdComponent}, {\b IDMUSProdFramework}, {\b GetFirstComponent}, {\b GetNextComponent}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::FindDocRootNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT FindDocRootNode(}{\b GUID} {\i guidProject}{\b , IDMUSProdDocType*} {\i pIDocType}
{\b , BSTR} {\i bstrNodeName}
{\b , BSTR} {\i bstrNodeDescriptor}
{\b , IDMUSProdNode**} {\i ppIDocRootNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdNode} interface 
pointer for the matching DocRoot {\b Node}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The matching DocRoot Node was returned in {\i ppIDocRootNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIDocRootNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i pIDocType} or {\i bstrNodeName} is not valid.  For example, they may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and a DocRoot Node could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guidProject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Project GUID.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] {\b DocType} object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrNodeName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Node name.  This method frees 
{\i bstrNodeName} with SysFreeString when it is no 
longer needed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrNodeDescriptor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Node descriptor.  This method frees 
{\i bstrNodeDescriptor} with SysFreeString when it is 
no longer needed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
IDMUSProdNode interface.  If an error occurs, the implementation 
sets {\i ppIDocRootNode} to NULL.  On success, the caller 
is responsible for calling {\b IDMUSProdNode::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A DocRoot Node is the top Node of a file.  For more information refer to {\b Node} 
Object.\par 
The search is confined to the {\b Project} specified in {\i guidProject}.\par 
A DocRoot Node is considered to be a match if its {\b DocType} matches {\i pIDocType}, 
and its {\b IDMUSProdNode::GetNodeListInfo}
 method returns a name and descriptor equal 
to {\i bstrNodeName} and {\i bstrNodeDescriptor}.\par 
The DocRoot Node for first file matching the criteria will be returned in {\i ppIDocRootNode}. 
{\b GetNodeFileGuid} should be used in conjunction with 
{\b FindDocRootNodeByFileGUID} when it is necessary to obtain the 
DocRoot Node of a specific file.\par 
{\i bstrNodeName} is required.  {\i bstrNodeDescriptor} may be NULL.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b GetBestGuessDocRootNode}, {\b FindDocRootNodeByFileGUID}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::FindDocRootNodeByFileGUID Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT FindDocRootNodeByFileGUID(}{\b GUID} {\i guidFile}{\b , IDMUSProdNode**} {\i ppIDocRootNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdNode} interface 
pointer for the matching DocRoot {\b Node}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The matching DocRoot Node was returned in {\i ppIDocRootNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIDocRootNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and a DocRoot Node could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guidFile}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] File's GUID.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
IDMUSProdNode interface.  If an error occurs, the implementation 
sets {\i ppIDocRootNode} to NULL.  On success, the caller 
is responsible for calling {\b IDMUSProdNode::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A DocRoot Node is the top Node of a file.  For more information refer to {\b Node} 
Object.\par 
Producer assigns a GUID to every file in the Project Tree.  This GUID can be obtained 
via the {\b GetNodeFileGuid} method.  {\i guidFile} refers to this 
GUID.\par 
The {\b IDMUSProdProject} interface provides methods to enumerate all files in a given 
Project.  The {\b IDMUSProdNode} interface pointer returned by the 
{\b IDMUSProdProject::GetFirstFileByDocType}
 and  {\b IDMUSProdProject::GetNextFileByDocType}
 
methods can be passed to {\b GetNodeFileGuid} and used in 
conjunction with {\b FindDocRootNodeByFileGUID} to retrieve 
the DocRoot node for a specific file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example retrieves the DocRoot node for the GUID returned by 
{\b GetNodeFileGuid}:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdFramework pIFramework;\par 
IDMUSProdNode* pIThisDocRootNode;\par 
IDMUSProdNode* pIDocRootNode;\par 
GUID guidFile;\par 
\par 
if( SUCCEEDED ( pIFramework->GetNodeFileGUID(pIThisDocRootNode, &guidFile) ) )\par 
\{\par 
\tab if( SUCCEEDED ( pIFramework->FindDocRootNodeByFileGUID(guidFile, &pIDocRootNode) ) )\par 
\tab \{\par 
\tab \tab ASSERT( pIDocRootNode == pIThisDocRootNode );\par 
\tab \}\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b IDMUSProdNode}, {\b GetNodeFileGUID}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::FindDocTypeByExtension Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT FindDocTypeByExtension(}{\b BSTR} {\i bstrExt}{\b , IDMUSProdDocType**} {\i ppIDocType}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the 
{\b IDMUSProdDocType} interface associated with file extension {\i bstrExt}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The specified file extension's {\b IDMUSProdDocType} was returned in {\i ppIDocType}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIDocType} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell A matching {\b IDMUSProdDocType} interface was not found.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrExt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] File extension.  This method frees 
{\i bstrExt} with SysFreeString when it is no 
longer needed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdDocType} interface.  If an error occurs, 
the implementation sets {\i ppIDocType} to NULL. 
On success, the caller is responsible for calling 
{\b IDMUSProdDocType::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A Component's {\b IDMUSProdComponent::Initialize}
 method can call {\b AddDocType} 
to include additional document types in the Framework's File New, File Open and 
File Save dialogs.\par 
{\b FindDocTypeByExtension} enumerates the {\b IDMUSProdDocType} interfaces 
registered through {\b AddDocType} and calls 
{\b IDMUSProdDocType::DoesExtensionMatch}
 to find the {\b IDMUSProdDocType} interface whose 
file extension matches {\i bstrExt}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example searches for the {\b IDMUSProdDocType} interface that manages 
Jazz Style files (*.sty):\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdFramework* pIFramework;\par 
IDMUSProdDocType* pIDocType;\par 
CString strExt;\par 
BSTR bstrExt;\par 
\par 
strExt = ".sty";\par 
bstrExt = strExt.AllocSysString();\par 
if( SUCCEEDED ( pIFramework->FindDocTypeByExtension( bstrExt, &pIDocType ) ) )\par 
\{\par 
\tab pIDocType->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdDocType}, {\b IDMUSProdDocType::DoesExtensionMatch}
{\b IDMUSProdFramework}, {\b AddDocType}, {\b FindDocTypeByNodeId}, {\b GetFirstDocType}, {\b GetNextDocType}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::FindDocTypeByNodeId Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT FindDocTypeByNodeId(}{\b REFGUID} {\i rguid}{\b , IDMUSProdDocType**} {\i ppIDocType}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the 
{\b IDMUSProdDocType} interface associated with node ID {\i rguid}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The specified id's {\b IDMUSProdDocType} was returned in {\i ppIDocType}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIDocType} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell A matching {\b IDMUSProdDocType} interface was not found.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Node ID.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdDocType} interface.  If an error occurs, the implementation 
sets {\i ppIDocType} to NULL.  On success, the caller 
is responsible for calling {\b IDMUSProdDocType::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A GUID identifies a type of Node.  For example, all Style Nodes have the same 
GUID, or node ID.\par 
A Component's {\b IDMUSProdComponent::Initialize}
 method can call {\b AddDocType} 
to include additional document types in the Framework's File New, File Open and 
File Save dialogs.\par 
{\b FindDocTypeByNodeId} enumerates the {\b IDMUSProdDocType} interfaces 
registered through {\b AddDocType} and calls 
{\b IDMUSProdDocType::DoesIdMatch}
 to find the {\b IDMUSProdDocType} interface associated with 
the node ID specified in {\i rguid}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 See {\b IDMUSProdDocType::DoesIdMatch}
 for sample code.\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdDocType}, {\b IDMUSProdDocType::DoesIdMatch}
, {\b IDMUSProdFramework}, {\b AddDocType}, {\b FindDocTypeByExtension}, {\b GetFirstDocType}, {\b GetNextDocType}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::FindProject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT FindProject(}{\b IDMUSProdNode*} {\i pINode}{\b , IDMUSProdProject**} {\i ppIProject}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdProject} interface 
pointer for the {\b Project} containing {\i pINode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pINode}'s Project was returned in {\i ppIProject}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIProject} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and {\i pINode}'s Project could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to the node whose Project 
will be returned in {\i ppIProject}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIProject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdProject} interface.  If an error occurs, the implementation 
sets {\i ppIProject} to NULL.  On success, the 
caller is responsible for calling 
{\b IDMUSProdProject::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b IDMUSProdProject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::GetBestGuessDocRootNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetBestGuessDocRootNode(}{\b IDMUSProdDocType*} {\i pIDocType}{\b , BSTR} {\i bstrNodeName}
{\b , IDMUSProdNode*} {\i pITreePositionNode}
{\b , IDMUSProdNode**} {\i ppIDocRootNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdNode} 
interface pointer for the closest matching DocRoot {\b Node}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell A matching DocRoot node was returned in {\i ppIDocRootNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIDocRootNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in either {\i pIDocType}, {\i bstrNodeName} or 
{\i pITreePositionNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and a matching node could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdDocType} interface 
associated with the desired type of DocRoot node. 
Used by search algorithm.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrNodeName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Name of desired DocRoot node.  Used by search 
algorithm.  This method frees {\i bstrNodeName} with 
SysFreeString when it is no longer needed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITreePositionNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies position in Project Tree.  Used by search 
algorithm.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdNode} interface.  If an error occurs, the implementation 
sets {\i ppIDocRootNode} to NULL.  On success, the caller 
is responsible for calling {\b IDMUSProdNode::Release}
 when 
this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A DocRoot Node is the top Node of a file.  For more information refer to {\b Node} 
Object.\par 
The search is confined to the {\b Project} containing {\i pITreePositionNode}.\par 
A DocRoot Node is considered to be a candidate for match if its {\b DocType} matches 
{\i pIDocType}, and its {\b IDMUSProdNode::GetNodeListInfo}
 method returns a name equal 
to {\i bstrNodeName}.\par 
If a matching DocRoot node cannot be located in the same directory as {\i pITreePositionNode}, 
{\b GetBestGuessDocRootNode} searches through the entire {\b Project} 
containing {\i pITreePositionNode}.  Other Projects are not searched.\par 
This method sets {\i ppIDocRootNode} to NULL and returns S_OK when the Project Tree 
does not contain a matching node.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b FindDocRootNode}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::GetDocRootNodeFromData Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetDocRootNodeFromData(}{\b IDataObject*} {\i pIDataObject}{\b , IDMUSProdNode**} {\i ppIDocRootNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdNode} 
interface pointer for the DocRoot {\b Node} in {\i pIDataObject}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The matching DocRoot Node was returned in {\i ppIDocRootNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIDocRootNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIDataObject} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and a DocRoot Node could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an IDataObject interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive 
the requested IDMUSProdNode interface. 
If an error occurs, the implementation 
sets {\i ppIDocRootNode} to NULL.  On success, the caller 
is responsible for calling {\b IDMUSProdNode::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A DocRoot Node is the top Node of a file.  For more information refer to {\b Node} 
Object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b SaveClipFormat}, {\b RegisterClipFormatForFile},\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::GetFirstComponent Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetFirstComponent(}{\b IDMUSProdComponent**} {\i ppIFirstComponent}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdComponent} 
interface pointer for the first {\b Component} in the {\b Framework}'s list of 
registered Components.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The first Component was returned in {\i ppIFirstComponent}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIFirstComponent} is not valid.  For example, it 
may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the first Component could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIFirstComponent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdComponent} interface.  If an error occurs, the 
implementation sets {\i ppIFirstComponent} to NULL.  On success, the 
caller is responsible for calling 
{\b IDMUSProdComponent::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i ppIFirstComponent} is set to NULL if the list is empty.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example calls {\b IDMUSProdComponent::Initialize}
 for all Components 
registered with the Framework:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 BOOL CFramework::InitComponents( void )\par 
\{\par 
\tab HRESULT hr;\par 
\tab IDMUSProdComponent* pIComponent;\par 
\tab IDMUSProdComponent* pINextComponent;\par 
\tab BOOL fSuccess = FALSE;\par 
\par 
\tab BSTR bstrErrMsg = NULL;\par 
\par 
\tab hr = GetFirstComponent( &pINextComponent );\par 
\par 
\tab while( SUCCEEDED( hr )  &&  pINextComponent )\par 
\tab \{\par 
\tab \tab pIComponent = pINextComponent;\par 
\par 
\tab \tab hr = pIComponent->Initialize( (IDMUSProdFramework *)this, &bstrErrMsg );\par 
\tab \tab if( SUCCEEDED( hr ) )\par 
\tab \tab \{\par 
\tab \tab \tab fSuccess = TRUE;\par 
\tab \tab \}\par 
\tab \tab else\par 
\tab \tab \{\par 
\tab \tab \tab ...\tab \tab // Display error message\par 
\tab \tab \tab ...\tab \tab // Free resources\par 
\tab \tab \}\par 
\par 
\tab \tab hr = GetNextComponent( pIComponent, &pINextComponent );\par 
\tab \tab pIComponent->Release();\par 
\tab \}\par 
\par 
\tab return fSuccess;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdComponent}, {\b IDMUSProdFramework}, {\b FindComponent}, {\b GetNextComponent}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::GetFirstDocType Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetFirstDocType(}{\b IDMUSProdDocType**} {\i ppIFirstDocType}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdDocType} 
interface pointer for the first {\b DocType} in the {\b Framework}'s list of 
registered DocTypes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The first DocType was returned in {\i ppIFirstDocType}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIFirstDocType} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the first DocType could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIFirstDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdDocType} interface.  If an error occurs, the implementation 
sets {\i ppIFirstDocType} to NULL.  On success, the 
caller is responsible for calling 
{\b IDMUSProdDocType::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i ppIFirstDocType} is set to NULL if the list is empty.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns a pointer to the {\b IDMUSProdDocType} interface associated 
with file extension {\i bstrExt}:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CFramework::FindDocTypeByExtension( BSTR bstrExt, IDMUSProdDocType** ppIDocType\tab )\par 
\{\par 
\tab AFX_MANAGE_STATE( AfxGetAppModuleState() );\par 
\par 
\tab HRESULT hr;\par 
\tab IDMUSProdDocType* pIDocType;\par 
\tab IDMUSProdDocType* pINextDocType;\par 
\par 
\tab if( ppIDocType == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *ppIDocType = NULL;\par 
\par 
\tab hr = GetFirstDocType( &pINextDocType );\par 
\par 
\tab while( SUCCEEDED( hr )  &&  pINextDocType )\par 
\tab \{\par 
\tab \tab pIDocType = pINextDocType;\par 
\par 
\tab \tab if( pIDocType->DoesExtensionMatch( bstrExt ) == S_OK )\par 
\tab \tab \{\par 
\tab \tab \tab *ppIDocType = pIDocType;\par 
\tab \tab \tab break;\par 
\tab \tab \}\par 
\par 
\tab \tab hr = GetNextDocType( pIDocType, &pINextDocType );\par 
\tab \tab pIDocType->Release();\par 
\tab \}\par 
\par 
\tab if( *ppIDocType )\par 
\tab \{\par 
\tab \tab return S_OK;\par 
\tab \}\par 
\par 
\tab return E_FAIL;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdDocType}, {\b IDMUSProdDocType::DoesIdMatch}
, {\b IDMUSProdFramework}, {\b AddDocType}, {\b FindDocTypeByExtension}, {\b GetNextDocType}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::GetFirstProject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetFirstProject(}{\b IDMUSProdProject**} {\i ppIFirstProject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdProject} interface 
pointer for the first {\b Project} in the application's list of Projects.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The first Project was returned in {\i ppIFirstProject}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIFirstProject} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the first Project could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIFirstProject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdProject} interface.  If an error occurs, the implementation 
sets {\i ppIFirstProject} to NULL.  On success, the 
caller is responsible for calling 
{\b IDMUSProdProject::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i ppIFirstProject} is set to NULL if the list is empty.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b GetNextProject}, {\b IDMUSProdProject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::GetNextComponent Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetNextComponent(}{\b IDMUSProdComponent*} {\i pIComponent}{\b , IDMUSProdComponent**} {\i ppINextComponent}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdComponent} 
interface pointer for the next {\b Component} in the {\b Framework}'s list of 
registered Components.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The next Component was returned in {\i ppINextComponent}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppINextComponent} is not valid.  For example, it 
may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIComponent} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the next Component could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIComponent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to the previous Component in 
the Framework's list of registered Components.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppINextComponent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the 
requested {\b IDMUSProdComponent} 
interface.  If an error occurs, the implementation 
sets {\i ppINextComponent} to NULL.  On success, the 
caller is responsible for calling 
{\b IDMUSProdComponent::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the Component located after {\i pIComponent} in the Framework's list of 
registered Components.\par 
{\i ppINextComponent} is set to NULL when the end of the list has been reached.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example calls {\b IDMUSProdComponent::Initialize}
 for all Components 
registered with the Framework:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 BOOL CFramework::InitComponents( void )\par 
\{\par 
\tab HRESULT hr;\par 
\tab IDMUSProdComponent* pIComponent;\par 
\tab IDMUSProdComponent* pINextComponent;\par 
\tab BOOL fSuccess = FALSE;\par 
\par 
\tab BSTR bstrErrMsg = NULL;\par 
\par 
\tab hr = GetFirstComponent( &pINextComponent );\par 
\par 
\tab while( SUCCEEDED( hr )  &&  pINextComponent )\par 
\tab \{\par 
\tab \tab pIComponent = pINextComponent;\par 
\par 
\tab \tab hr = pIComponent->Initialize( (IDMUSProdFramework *)this, &bstrErrMsg );\par 
\tab \tab if( SUCCEEDED( hr ) )\par 
\tab \tab \{\par 
\tab \tab \tab fSuccess = TRUE;\par 
\tab \tab \}\par 
\tab \tab else\par 
\tab \tab \{\par 
\tab \tab \tab ...\tab \tab // Display error message\par 
\tab \tab \tab ...\tab \tab // Free resources\par 
\tab \tab \}\par 
\par 
\tab \tab hr = GetNextComponent( pIComponent, &pINextComponent );\par 
\tab \tab pIComponent->Release();\par 
\tab \}\par 
\par 
\tab return fSuccess;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdComponent}, {\b IDMUSProdFramework}, {\b GetFirstComponent}, {\b FindComponent}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::GetNextDocType Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetNextDocType(}{\b IDMUSProdDocType*} {\i pIDocType}{\b , IDMUSProdDocType**} {\i ppINextDocType}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdDocType} 
interface pointer for the next {\b DocType} in the {\b Framework}'s list of 
registered DocTypes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The next DocType was returned in {\i ppINextDocType}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppINextDocType} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIDocType} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the next DocType could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to the previous DocType in 
the Framework's list of registered DocTypes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppINextDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdDocType} interface.  If an error occurs, the implementation 
sets {\i ppINextDocType} to NULL.  On success, the 
caller is responsible for calling 
{\b IDMUSProdDocType::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the DocType located after {\i pIDocType} in the Framework's list of 
registered DocTypes.\par 
{\i ppINextDocType} is set to NULL when the end of the list has been reached.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns a pointer to the {\b IDMUSProdDocType} interface associated 
with file extension {\i bstrExt}:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CFramework::FindDocTypeByExtension( BSTR bstrExt, IDMUSProdDocType** ppIDocType\tab )\par 
\{\par 
\tab AFX_MANAGE_STATE( AfxGetAppModuleState() );\par 
\par 
\tab HRESULT hr;\par 
\tab IDMUSProdDocType* pIDocType;\par 
\tab IDMUSProdDocType* pINextDocType;\par 
\par 
\tab if( ppIDocType == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *ppIDocType = NULL;\par 
\par 
\tab hr = GetFirstDocType( &pINextDocType );\par 
\par 
\tab while( SUCCEEDED( hr )  &&  pINextDocType )\par 
\tab \{\par 
\tab \tab pIDocType = pINextDocType;\par 
\par 
\tab \tab if( pIDocType->DoesExtensionMatch( bstrExt ) == S_OK )\par 
\tab \tab \{\par 
\tab \tab \tab *ppIDocType = pIDocType;\par 
\tab \tab \tab break;\par 
\tab \tab \}\par 
\par 
\tab \tab hr = GetNextDocType( pIDocType, &pINextDocType );\par 
\tab \tab pIDocType->Release();\par 
\tab \}\par 
\par 
\tab if( *ppIDocType )\par 
\tab \{\par 
\tab \tab return S_OK;\par 
\tab \}\par 
\par 
\tab return E_FAIL;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdDocType}, {\b IDMUSProdDocType::DoesIdMatch}
, {\b IDMUSProdFramework}, {\b AddDocType}, {\b FindDocTypeByExtension}, {\b GetFirstDocType}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::GetNextProject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetNextProject(}{\b IDMUSProdProject*} {\i pIProject}{\b , IDMUSProdProject**} {\i ppINextProject}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdProject} interface 
pointer for the next {\b Project} in the application's list of Projects.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The next Project was returned in {\i ppINextProject}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppINextProject} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIProject} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the next Project could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIProject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to the previous Project in 
the application's list of Projects.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppINextProject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdProject} interface.  If an error occurs, the implementation 
sets {\i ppINextProject} to NULL.  On success, the 
caller is responsible for calling 
{\b IDMUSProdProject::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the Project located after {\i pIProject} in the application's list of Projects.\par 
{\i ppINextProject} is set to NULL when the end of the list has been reached.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b GetFirstProject}, {\b IDMUSProdProject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::GetNodeFileGuid Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetNodeFileGuid(}{\b IDMUSProdNode*} {\i pINode}{\b , GUID*} {\i pguidFile}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the Producer generated 
GUID assigned to the file associated with {\i pINode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The file's GUID was placed in {\i pguidFile}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pguidFile} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pINode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the file's GUID was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to any {\b IDMUSProdNode} in the file.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pguidFile}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the caller-allocated variable 
that receives a copy of the file's GUID.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Producer assigns a GUID to every file in the Project Tree.  This GUID can be obtained 
via the {\b GetNodeFileGuid} method.  {\i pguidFile} refers to this 
GUID.\par 
The {\b IDMUSProdProject} interface provides methods to enumerate all files in a given 
Project.  The {\b IDMUSProdNode} interface pointer returned by the 
{\b IDMUSProdProject::GetFirstFileByDocType}
 and  {\b IDMUSProdProject::GetNextFileByDocType}
 
methods can be passed to {\b GetNodeFileGuid} and used in 
conjunction with {\b FindDocRootNodeByFileGUID} to retrieve 
the DocRoot node for a specific file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example retrieves the Producer generated GUID identifying the file which 
contains {\i pINode}:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdFramework pIFramework;\par 
IDMUSProdNode* pIThisDocRootNode;\par 
IDMUSProdNode* pIDocRootNode;\par 
GUID guidFile;\par 
\par 
if( SUCCEEDED ( pIFramework->GetNodeFileGUID(pIThisDocRootNode, &guidFile) ) )\par 
\{\par 
\tab if( SUCCEEDED ( pIFramework->FindDocRootNodeByFileGUID(guidFile, &pIDocRootNode) ) )\par 
\tab \{\par 
\tab \tab ASSERT( pIDocRootNode == pIThisDocRootNode );\par 
\tab \}\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b IDMUSProdProject}, {\b IDMUSProdNode}, {\b FindDocRootNodeByFileGUID}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::GetNodeFileName Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetNodeFileName(}{\b IDMUSProdNode*} {\i pINode}{\b , BSTR*} {\i pbstrFileName}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the path/filename of the 
file associated with {\i pINode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The filename was returned in {\i pbstrFileName}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pbstrFileName} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pINode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the filename was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to any {\b IDMUSProdNode} in the file.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrFileName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the caller-allocated variable 
that receives the copy of the filename.  The caller must 
free {\i pbstrFileName} with SysFreeString when it is no longer 
needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example retrieves the filename of the file which contains {\i pINode}:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdFramework pIFramework;\par 
CString strFileName;\par 
BSTR bstrFileName;\par 
\par 
if( SUCCEEDED ( pIFramework->GetNodeFileName((IDMUSProdNode *)this, &bstrFileName) ) )\par 
\{\par 
\tab strFileName = bstrFileName;\par 
\tab ::SysFreeString( bstrFileName );\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b SaveNode}, {\b SaveNodeAsNewFile}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::GetSelectedNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetSelectedNode(}{\b IDMUSProdNode**} {\i ppINode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the Project Tree's currently 
selected {\b Node}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The Project Tree's selected node was returned in {\i ppINode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppINode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the selected node could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdNode} interface.  If an error occurs, the implementation 
sets {\i ppINode} to NULL.  On success, the caller 
is responsible for calling {\b IDMUSProdNode::Release}
 
when this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b GetSelectedNode} sets {\i ppINode} to NULL and returns S_OK when 
either the Project Tree is empty or none of its nodes are selected.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example obtains the active node of the Project Tree:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdNode* pINode;\par 
\par 
if( SUCCEEDED ( pIFramework->GetSelectedNode( &pINode ) ) )\par 
\{\par 
\tab if( pINode )\par 
\tab \{\par 
\tab \tab ...\par 
\tab \tab ...\par 
\tab \tab ...\par 
\tab \tab pINode->Release();\par 
\tab \}\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::GetSharedObject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetSharedObject(}{\b REFCLSID} {\i rclsid}{\b , REFIID} {\i riid}
{\b , void**} {\i ppvObject}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allows one or more DirectMusic 
Producer {\b Component}s to share the same COM object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The interface specified in {\i riid} was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppvObject} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the interface specified in {\i riid} could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] CLSID of the requested object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Identifier of the requested interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppvObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive 
the requested object. On success, the caller is 
responsible for calling IUnknown::Release.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method calls CoCreateInstance to create objects of type {\i rclsid}.  The 
{\b Framework} holds a reference to the created object so that subsequent calls to 
{\b GetSharedObject} can simply return an additional reference 
to a previously created object whose CLSID matches {\i rclsid}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example obtains an interface to a shared DirectMusic Composer object:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDirectMusicComposer* pIComposer;\par 
HRESULT hr;\par 
\par 
hr = pIFramework->GetSharedObject( CLSID_DMCompos, IID_IDirectMusicComposer, (void**)&pIComposer )\par 
\par 
if( SUCCEEDED ( hr ) )\par 
\{\par 
\tab \tab .....\par 
\tab \tab .....\par 
\par 
\tab \tab pIComposer->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::IsProjectEqual Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT IsProjectEqual(}{\b IDMUSProdNode*} {\i pIDocRootNode1}{\b , IDMUSProdNode*} {\i pIDocRootNode2}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines whether {\i pIDocRootNode1} 
and {\i pIDocRootNode2} are in the same {\b Project}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIDocRootNode1} and {\i pIDocRootNode2} are in the same Project.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell {\i pIDocRootNode1} and {\i pIDocRootNode2} are not in the same Project.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The value of either {\i pIDocRootNode1} or {\i pIDocRootNode2} is 
not valid.  For example, it may not point to a DocRoot node.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred.  Cannot determine whether the specified DocRoot nodes 
are in the same Project.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocRootNode1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdNode} interface of 
a DocRoot node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocRootNode2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdNode} interface of 
a DocRoot node.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i pIDocRootNode1} and {\i pIDocRootNode2} must point to DocRoot {\b Node}s.\par 
A DocRoot node is the top node of a document, or file.  For example, the Style node of 
a Style file would be considered the DocRoot node of the Style.  The Band node of a Band 
file would be considered the DocRoot node of the Band file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example makes sure that a referenced file exists in the same Project as the 
file it references.  m_pIStyleRefNode contains an IDMUSProdNode interface pointer to the node 
used to display a referenced Style file:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdReferenceNode* pIReferenceNode;\par 
\par 
if( SUCCEEDED ( m_pIStyleRefNode->QueryInterface( IID_IDMUSProdReferenceNode, (void **)&pIReferenceNode ) ) )\par 
\{\par 
\tab IDMUSProdNode* pIStyleDocRootNode;\par 
\par 
\tab if( SUCCEEDED ( pIReferenceNode->GetReferencedFile( &pIStyleDocRootNode ) ) )\par 
\tab \{\par 
\tab \tab if( pIFramework->IsProjectEqual( this, pIStyleDocRootNode ) == S_FALSE )\par 
\tab \tab \{\par 
\tab \tab \tab IDMUSProdNode* pINewDocRootNode;\par 
\par 
\tab \tab \tab if( SUCCEEDED ( pIFramework->CopyFile( pIStyleDocRootNode, this, &pINewDocRootNode ) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab pIReferenceNode->SetReferencedFile( pINewDocRootNode );\par 
\tab \tab \tab \tab pINewDocRootNode->Release();\par 
\tab \tab \tab \}\par 
\tab \tab \}\par 
\par 
\tab \tab pIStyleDocRootNode->Release();\par 
\tab \}\par 
\par 
\tab pIReferenceNode->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b CopyFile}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::NotifyNodes Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT NotifyNodes(}{\b IDMUSProdNode*} {\i pIChangedDocRootNode}{\b , GUID} {\i guidUpdateType}
{\b , void*} {\i pData}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Notifies all {\b Node}s linked to 
{\i pIChangedDocRootNode} via calls to {\b AddToNotifyList} that 
the state of {\i pIChangedDocRootNode} has changed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Nodes linked to {\i pIDocRootNode} were notified successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIChangedDocRootNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the nodes linked to {\i pIDocRootNode} could not be 
notified.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIChangedDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the changed DocRoot's {\b IDMUSProdNode} 
interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guidUpdateType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Identifies type of change.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to additional data associated 
with the change.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i pIChangedDocRootNode} must point to a DocRoot {\b Node}.  A DocRoot node is the top 
node of a document, or file.  For example, the Style node of a Style file would be 
considered the DocRoot node of the Style.  The Band node of a Band file would be 
considered the DocRoot node of the Band file.\par 
{\i pData} may be NULL.\par 
Valid {\i guidUpdateType} and {\i pData} values must be defined and documented in the .h 
and .lib files distributed by the Component supporting nodes of type {\i pIDocRootNode}. 
For example, the Style Component's StyleDesigner.h and StyleDesignerGuid.lib files 
must contain and document the various {\i guidUpdateType} and {\i pData} values it 
uses to communicate Style file changes.\par 
The following list contains notifications provided by the Framework:\par 
\tab {\i guidUpdateType} \tab \tab \tab {\i pData} \tab \tab {\i Description}\par 
\tab FRAMEWORK_FileDeleted \tab \tab NULL \tab \tab  File deleted by user and is no longer in the Project Tree.\par 
\tab FRAMEWORK_FileReplaced \tab \tab NULL \tab \tab  Linked file being replaced by another version of the file.\par 
\tab FRAMEWORK_FileClosed \tab \tab NULL \tab \tab  File closed normally and is no longer in the Project Tree.\par 
\tab FRAMEWORK_FileNameChange \tab \tab NULL \tab \tab  File renamed by user.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example notifies interested nodes that the name of a Style has changed:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyle::SetNodeName( BSTR bstrName )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab ASSERT( m_pComponent != NULL );\par 
\tab ASSERT( m_pComponent->m_pIFramework != NULL );\par 
\par 
\tab CString strName = bstrName;\par 
\tab ::SysFreeString( bstrName );\par 
\par 
\tab m_strName = strName;\par 
\par 
\tab IDMUSProdPropSheet* pIPropSheet;\par 
\tab if( SUCCEEDED ( m_pComponent->m_pIFramework->QueryInterface( IID_IDMUSProdPropSheet, (void**)&pIPropSheet ) ) )\par 
\tab \{\par 
\tab \tab pIPropSheet->RefreshTitleByObject( this );\par 
\tab \tab pIPropSheet->Release();\par 
\tab \}\par 
\par 
\tab SetModified( TRUE );\par 
\par 
\tab // Notify connected nodes that the Style name has changed\par 
\tab m_pComponent->m_pIFramework->NotifyNodes( this, STYLE_NameChange, NULL );\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b AddToNotifyList}, {\b RemoveFromNotifyList}, {\b IDMUSProdNotifySink}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::OpenEditor Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OpenEditor(}{\b IDMUSProdNode*} {\i pINode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Opens an editor for the node specified 
in {\i pINode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell An editor was successfully opened for {\i pINode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pINode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the editor could not be opened.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdNode} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method provides the means for a Component to initiate in-place editing for a 
node in the Project Tree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example opens an editor for {\i pINode}:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Editor} Object, {\b IDMUSProdFramework}, {\b CloseEditor}, {\b IDMUSProdNode}, {\b IDMUSProdEditor}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::OpenFile Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OpenFile(}{\b IDMUSProdDocType*} {\i pIDocType}{\b , BSTR} {\i bstrTitle}
{\b , IDMUSProdNode*} {\i pITreePositionNode}
{\b , IDMUSProdNode**} {\i ppIDocRootNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Invokes the {\b Framework}'s File Open 
command and returns a file of the type described through {\i pIDocType}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The file's top {\b IDMUSProdNode} was returned in {\i ppIDocRootNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIDocRootNode} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i pIDocType} or {\i pITreePositionNode} is not valid. 
For example, they may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell The file could not be opened.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdDocType} interface which 
is used to determine the kind of file to open.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrTitle}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Title used for the File Open dialog.  This method 
frees {\i bstrTitle} with SysFreeString when it is no 
longer needed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITreePositionNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b Node} used to determine where 
the newly created file should be placed in the Project 
Tree.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdNode} interface.  If an error occurs, the implementation 
sets {\i ppIDocRootNode} to NULL.  On success, the caller 
is responsible for calling {\b IDMUSProdNode::Release}
 when 
this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method provides the means for a Component to initiate a File Open command.\par 
The title of the File Open dialog is set to 'Open' when {\i bstrTitle} is NULL.\par 
Part of the Framework's File Open processing uses {\i pIDocType} to call 
{\b IDMUSProdDocType::OnFileOpen}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example loads a Style file and places it in the Project Tree in the 
same directory as {\i pISegmentDocRootNode}:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdDocType* pIDocType;\par 
IDMUSProdNode* pIDocRootNode;\par 
\par 
if( SUCCEEDED ( m_pIFramework->FindDocTypeByNodeId( GUID_StyleNode, &pIDocType ) ) )\par 
\{\par 
\tab if( SUCCEEDED ( m_pIFramework->OpenFile( pIDocType, NULL, pISegmentDocRootNode, &pIDocRootNode ) ) )\par 
\tab \{\par 
\tab \tab pIDocRootNode->Release();\par 
\tab \}\par 
\par 
\tab pIDocType->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdDocType}, {\b IDMUSProdFramework}, {\b CreateNewFile}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::RefreshNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RefreshNode(}{\b IDMUSProdNode*} {\i pINode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Refreshes and redraws the Project Tree 
node associated with {\i pINode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pINode} was refreshed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pINode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and {\i pINode} could not be refreshed.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an {\b IDMUSProdNode} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method calls {\b IDMUSProdNode::GetNodeName}
 before updating the Project Tree with 
new label text for {\i pINode}.\par 
This method calls {\b IDMUSProdNode::GetNodeImageIndex}
 before updating the Project Tree 
with a new icon for {\i pINode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::RegisterClipFormatForFile Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RegisterClipFormatForFile(}{\b UINT} {\i uClipFormat}{\b , BSTR} {\i bstrExt}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Registers a file's clipboard 
format with the {\b Framework}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i uClipFormat} was registered successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i uClipFormat} or {\i bstrExt} is not valid.  For example, 
{\i uClipFormat} may be zero.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell {\i uClipFormat} could not be registered.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uClipFormat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Clipboard format used to create files 
with an extension equal to {\i bstrExt}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrExt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] File extension.  This method frees 
{\i bstrExt} with SysFreeString when it is no 
longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A {\b Component}'s {\b IDMUSProdComponent::Initialize}
 method can call 
{\b RegisterClipFormatForFile} to make the Framework aware of clipboard 
formats that can be used to create files in the Project Tree.\par 
Data objects which have the potential of being pasted as DirectMusic files must contain at 
least two clipboard formats:  CF_DMUSPROD_FILE, and their custom format for file content.  The 
custom format must be registered with the Framework via a call to 
{\b RegisterClipFormatForFile}.  CF_DMUSPROD_FILE clipboard formats are created 
by calling {\b SaveClipFormat}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following excerpt from an {\b IDMUSProdComponent::Initialize}
 method registers 
a Band file's clipboard format with the Framework:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 #define CF_BAND "DMUSProd v.1 Band"\par 
#define CF_BANDLIST "DMUSProd v.1 Band List"\par 
\par 
// Register clipboard formats\par 
m_cfBand = ::RegisterClipboardFormat( CF_BAND );\par 
m_cfBandList = ::RegisterClipboardFormat( CF_BANDLIST );\par 
if( m_cfBand == 0\par 
||  m_cfBandList == 0 )\par 
\{\par 
\tab CleanUp();\par 
\tab ::LoadString( theApp.m_hInstance, IDS_ERR_REGISTER_CF, achErrMsg, MID_BUFFER );\par 
\tab strErrMsg = achErrMsg;\par 
\tab *pbstrErrMsg = strErrMsg.AllocSysString();\par 
\tab return E_FAIL;\par 
\}\par 
\par 
// Tell Framework that the CF_BAND format can be used to create a .bnj file\par 
CString strExt = _T(".bnj");\par 
BSTR bstrExt = strExt.AllocSysString();\par 
if( !SUCCEEDED ( pIFramework->RegisterClipFormatForFile(m_cfBand, bstrExt) ) )\par 
\{\par 
\tab CleanUp();\par 
\tab ::LoadString( theApp.m_hInstance, IDS_ERR_ADD_CLIPFORMAT, achErrMsg, MID_BUFFER );\par 
\tab strErrMsg = achErrMsg;\par 
\tab *pbstrErrMsg = strErrMsg.AllocSysString();\par 
\tab return E_FAIL;\par 
\}\par 
\par 
// Register applicable doc types with the Framework\par 
m_pIDocType = new CBandDocType( this );\par 
if( m_pIDocType == NULL )\par 
\{\par 
\tab CleanUp();\par 
\tab ::LoadString( theApp.m_hInstance, IDS_ERR_MEMORY, achErrMsg, MID_BUFFER );\par 
\tab strErrMsg = achErrMsg;\par 
\tab *pbstrErrMsg = strErrMsg.AllocSysString();\par 
\tab return E_OUTOFMEMORY;\par 
\}\par 
\par 
m_pIDocType->AddRef();\par 
\par 
if( !SUCCEEDED ( pIFramework->AddDocType(m_pIDocType) ) )\par 
\{\par 
\tab CleanUp();\par 
\tab ::LoadString( theApp.m_hInstance, IDS_ERR_ADD_DOCTYPE, achErrMsg, MID_BUFFER );\par 
\tab strErrMsg = achErrMsg;\par 
\tab *pbstrErrMsg = strErrMsg.AllocSysString();\par 
\tab return E_FAIL;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b SaveClipFormat}, {\b GetDocRootNodeFromData}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::RemoveFromNotifyList Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RemoveFromNotifyList(}{\b IDMUSProdNode*} {\i pIDocRootNode}{\b , IDMUSProdNode*} {\i pINotifyThisNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes {\i pINotifyThisNode} from 
the list of {\b Node}s notified when the state of {\i pIDocRootNode} changes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pINotifyThisNode} was removed from the list of nodes to be notified when 
the state of {\i pIDocRootNode} changes.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i pIDocRootNode} or {\i pINotifyThisNode} is not valid. 
For example, they may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and {\i pINotifyThisNode} could not be removed from 
the notify list attached to {\i pIDocRootNode}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an {\b IDMUSProdNode} interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINotifyThisNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdNode} requesting a 
callback when {\i pIDocRootNode} changes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i pIDocRootNode} must point to a DocRoot {\b Node}.  A DocRoot node is the top node of 
a document, or file.  For example, the Style node of a Style file would be considered 
the DocRoot node of the Style.  The Band node of a Band file would be considered the 
DocRoot node of the Band file.\par 
{\b RemoveFromNotifyList} advises the Framework that {\i pINotifyThisNode} 
no longer references {\i pIDocRootNode}.  This method should not be called as part of normal 
shutdown procedure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b AddToNotifyList}, {\b NotifyNodes}, {\b IDMUSProdNotifySink}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::RemoveMenuItem Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RemoveMenuItem(}{\b IDMUSProdMenu*} {\i pIMenu}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes the menu item defined 
by {\i pIMenu} from the Framework's 'Add-Ins' menu.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIMenu} was successfully removed from the Framework's 'Add-Ins' menu.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIMenu} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell {\i pIMenu} was not removed from the 'Add-Ins' menu.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIMenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdMenu} interface to be removed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A Component's {\b IDMUSProdComponent::Initialize}
 method should call 
{\b AddMenuItem} if it wants to add menu item(s) to the Framework's 
'Add-Ins' menu.  {\b RemoveMenuItem} should be called from within 
{\b IDMUSProdComponent::CleanUp}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following excerpt from an {\b IDMUSProdComponent::Cleanup}
 method removes an 
item from the Framework's 'Add-Ins' menu:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 if( m_fMenuWasAdded )\par 
\{\par 
\tab m_pIFramework->RemoveMenuItem( (IDMUSProdMenu *)this );\par 
\tab m_fMenuWasAdded = FALSE;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b AddMenuItem}, {\b IDMUSProdMenu}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::RemoveNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RemoveNode(}{\b IDMUSProdNode*} {\i pITopNode}{\b , BOOL} {\i fPromptUser}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes {\i pITopNode}, along with its 
children, from the Project Tree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pITopNode}, along with its children, was removed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell User cancelled the delete.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pITopNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and {\i pITopNode} was not removed from the Project Tree.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pITopNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdNode} interface to be removed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fPromptUser}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Determines whether delete prompt is displayed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example removes a Style file from the Project Tree:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleDocType::DeleteChildNode( IDMUSProdNode* pIChildNode )\par 
\{\par 
\tab ASSERT( pIChildNode != NULL );\par 
\tab ASSERT( m_pComponent != NULL );\par 
\tab ASSERT( m_pComponent->m_pIFramework != NULL );\par 
\par 
\tab // Remove from Project Tree\par 
\tab if( m_pComponent->m_pIFramework->RemoveNode( pIChildNode, FALSE ) == S_FALSE )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab // Remove from Component Style list\par 
\tab POSITION pos = m_pComponent->m_lstStyles.Find( (CStyle *)pIChildNode );\par 
\tab if( pos )\par 
\tab \{\par 
\tab \tab m_pComponent->m_lstStyles.RemoveAt( pos );\par 
\tab \tab pIChildNode->Release();\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b AddNode}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::RemoveToolBar Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RemoveToolBar(}{\b IDMUSProdToolBar*} {\i pIToolBar}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes the {\b ToolBar} defined by 
{\i pIToolBar} from the Framework.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIToolBar} was successfully removed from the Framework.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIToolBar} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell {\i pIToolBar} was not removed from the Framework.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIToolBar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdToolBar} interface to be removed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A Component's {\b IDMUSProdComponent::Initialize}
 method should call 
{\b AddToolBar} if it wants to add toolbar(s) to the Framework. 
{\b RemoveToolBar} should be called from within 
{\b IDMUSProdComponent::CleanUp}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following excerpt from an {\b IDMUSProdComponent::Cleanup}
 method removes a toolbar 
from the Framework:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 if( m_pBarMsgHandler )\par 
\{\par 
\tab m_pIFramework->RemoveToolBar( m_pBarMsgHandler );\par 
\tab if( m_pBarMsgHandler->GetSafeHwnd() )\par 
\tab \{\par 
\tab \tab m_pBarMsgHandler->DestroyWindow();\par 
\tab \}\par 
\tab delete m_pBarMsgHandler;\par 
\tab m_pBarMsgHandler = NULL;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b AddToolBar}, {\b IDMUSProdToolBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::RestoreStatusBar Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RestoreStatusBar(}{\b HANDLE} {\i hKey}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes panes from the 
{\b Framework}'s status bar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The status bar panes were removed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The value of {\i hKey} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell {\i hKey} does not match a HANDLE returned by a previous call 
to {\b SetNbrStatusBarPanes}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hKey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] HANDLE returned by {\b SetNbrStatusBarPanes}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b SetNbrStatusBarPanes} creates one or more panes on the right-hand 
side of the Framework's status bar.  The Framework continues to use the left side of 
the status bar for its progress bar and to display help text.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b SetNbrStatusBarPanes}, {\b SetStatusBarPaneInfo}, {\b SetStatusBarPaneText}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::RevertFileToSaved Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RevertFileToSaved(}{\b IDMUSProdNode*} {\i pINode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reverts the document associated with 
{\i pINode} to its last saved state.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The file associated with {\i pINode} was successfully reverted to it last saved 
state.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pINode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the file was not reverted.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to any {\b IDMUSProdNode} in the file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method provides the means for a Component to undo changes by reloading a file.  For 
example, the right-click context menu associated with a node can contain a 'Revert to Saved' 
menu item.\par 
The Framework obtains the DocRoot node for the document by using {\i pINode} to call 
{\b IDMUSProdNode::GetDocRootNode}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example reverts the document containing {\i pINode} to its last saved state:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::OnRightClickMenuSelect( long lCommandId )\par 
\{\par 
\tab ASSERT( m_pComponent != NULL );\par 
\tab ASSERT( m_pComponent->m_pIFramework != NULL );\par 
\par 
\tab HRESULT hr = E_FAIL;\par 
\par 
\tab switch( lCommandId )\par 
\tab \{\par 
\tab \tab case IDM_REVERT:\par 
\tab \tab \tab if( SUCCEEDED ( m_pComponent->m_pIFramework->RevertFileToSaved((IDMUSProdNode *)this) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab hr = S_OK;\par 
\tab \tab \tab \}\par 
\tab \tab \tab break;\par 
\tab \}\par 
\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b GetNodeFileName}, {\b SaveNodeAsNewFile}, {\b IDMUSProdNode}, {\b IDMUSProdNode::GetDocRootNode}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::SaveClipFormat Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SaveClipFormat(}{\b UINT} {\i uClipFormat}{\b , IDMUSProdNode*} {\i pINode}
{\b , IStream **} {\i ppIStream}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a stream containing the 
specified clipboard format for {\i pINode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i uClipFormat} was created for {\i pINode} and was returned in {\i ppIStream}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIStream} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i uClipFormat} or {\i pINode} is not valid.  For example, 
{\i uClipFormat} may be zero.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the stream could not be created.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uClipFormat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Clipboard format.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to the {\b Node} whose clipboard 
format be returned in {\i ppIStream}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IStream} interface.  If an error occurs, the implementation 
sets {\i ppIStream} to NULL.  On success, the caller is responsible 
for calling {\b IStream::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A {\b Component}'s {\b IDMUSProdComponent::Initialize}
 method can call 
{\b RegisterClipFormatForFile} to make the Framework aware of clipboard 
formats that can be used to create files in the Project Tree.\par 
Data objects which have the potential of being pasted as DirectMusic files must contain at 
least two clipboard formats:  CF_DMUSPROD_FILE, and their custom format for file content.  The 
custom format must be registered with the Framework via a call to 
{\b RegisterClipFormatForFile}.  CF_DMUSPROD_FILE clipboard formats are created 
by calling {\b SaveClipFormat}.\par 
The following list contains valid values for {\i uClipFormat}:\par 
CF_DMUSPROD_FILE\tab \tab The Framework uses CF_DMUSPROD_FILE format when pasting streams into files.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example fills a data object with the clipboard formats needed to paste a Band 
file into the Project Tree:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CBand::CreateDataObject( IDataObject** ppIDataObject )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab ASSERT( m_pComponent != NULL );\par 
\par 
\tab if( ppIDataObject == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *ppIDataObject = NULL;\par 
\par 
\tab // Create the CDllJazzDataObject\par 
\tab CDllJazzDataObject* pDataObject = new CDllJazzDataObject();\par 
\tab if( pDataObject == NULL )\par 
\tab \{\par 
\tab \tab return E_OUTOFMEMORY;\par 
\tab \}\par 
\par 
\tab IStream* pIStream;\par 
\par 
\tab // Save Band into stream\par 
\tab HRESULT hr = E_FAIL;\par 
\par 
\tab if( SUCCEEDED ( theApp.m_pIFramework->AllocMemoryStream(FT_DESIGN, GUID_CurrentVersion, &pIStream) ) )\par 
\tab \{\par 
\tab \tab if( SUCCEEDED ( Save( pIStream, FALSE ) ) )\par 
\tab \tab \{\par 
\tab \tab \tab // Place CF_BAND into CDllJazzDataObject\par 
\tab \tab \tab if( SUCCEEDED ( pDataObject->AddClipFormat( m_pComponent->m_cfBand, pIStream ) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab hr = S_OK;\par 
\tab \tab \tab \}\par 
\tab \tab \}\par 
\par 
\tab \tab pIStream->Release();\par 
\tab \}\par 
\par 
\tab if( SUCCEEDED ( hr ) )\par 
\tab \{\par 
\tab \tab hr = E_FAIL;\par 
\par 
\tab \tab // Create a stream in CF_DMUSPROD_FILE format\par 
\tab \tab if( SUCCEEDED ( theApp.m_pIFramework->SaveClipFormat( m_pComponent->m_cfProducerFile, this, &pIStream ) ) )\par 
\tab \tab \{\par 
\tab \tab \tab // There is the potential for a Band node to become a file\par 
\tab \tab \tab // so we must also place CF_DMUSPROD_FILE into CDllJazzDataObject\par 
\tab \tab \tab if( SUCCEEDED ( pDataObject->AddClipFormat( m_pComponent->m_cfProducerFile, pIStream ) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab hr = S_OK;\par 
\tab \tab \tab \}\par 
\par 
\tab \tab \tab pIStream->Release();\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab if( SUCCEEDED ( hr ) )\par 
\tab \{\par 
\tab \tab *ppIDataObject = pDataObject;\tab // already AddRef'd\par 
\tab \}\par 
\tab else\par 
\tab \{\par 
\tab \tab pDataObject->Release();\par 
\tab \}\par 
\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b RegisterClipFormatForFile}, {\b GetDocRootNodeFromData}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::SaveNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SaveNode(}{\b IDMUSProdNode*} {\i pINode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Invokes the Framework's File Save command 
for the document associated with the DocRoot node of {\i pINode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The file associated with {\i pINode} was saved successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pINode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the file was not saved.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to any {\b IDMUSProdNode} in the file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method provides the means for a Component to initiate a File Save command.  For 
example, it allows the right-click context menu associated with a file's DocRoot node 
to contain a menu item for saving itself.\par 
The Framework obtains the DocRoot node for the document by using {\i pINode} to call 
{\b IDMUSProdNode::GetDocRootNode}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example saves the document which contains {\i pINode}:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::OnRightClickMenuSelect( long lCommandId )\par 
\{\par 
\tab ASSERT( m_pComponent != NULL );\par 
\tab ASSERT( m_pComponent->m_pIFramework != NULL );\par 
\par 
\tab HRESULT hr = E_FAIL;\par 
\par 
\tab IDMUSProdNode* pIDocRootNode;\par 
\par 
\tab switch( lCommandId )\par 
\tab \{\par 
\tab \tab case IDM_SAVE:\par 
\tab \tab \tab if( SUCCEEDED ( GetDocRootNode(&pIDocRootNode) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab if( SUCCEEDED ( m_pComponent->m_pIFramework->SaveNode(pIDocRootNode) ) )\par 
\tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab hr = S_OK;\par 
\tab \tab \tab \tab \}\par 
\tab \tab \tab \tab pIDocRootNode->Release();\par 
\tab \tab \tab \}\par 
\tab \tab \tab break;\par 
\tab \}\par 
\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b GetNodeFileName}, {\b SaveNodeAsNewFile}, {\b IDMUSProdNode}, {\b IDMUSProdNode::GetDocRootNode}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::SaveNodeAsNewFile Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SaveNodeAsNewFile(}{\b IDMUSProdNode*} {\i pINode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Invokes the {\b Framework}'s File 
Save As command to create a new file for the {\b Node} specified in {\i pINode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pINode} was saved successfully as a new file.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pINode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and a new file was not saved.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to any {\b IDMUSProdNode} in the file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method provides the means for a Component to initiate a File Save As command. 
For example, it allows the right-click context menu associated with a Project Tree 
node to contain a menu item for saving itself as a new file.\par 
???? Need to explain how to get a Style's Band node into a Band file node.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example saves the document containing {\i pINode} as a new file:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::OnRightClickMenuSelect( long lCommandId )\par 
\{\par 
\tab ASSERT( m_pComponent != NULL );\par 
\tab ASSERT( m_pComponent->m_pIFramework != NULL );\par 
\par 
\tab HRESULT hr = E_FAIL;\par 
\par 
\tab IDMUSProdNode* pIDocRootNode;\par 
\par 
\tab switch( lCommandId )\par 
\tab \{\par 
\tab \tab case IDM_SAVEAS:\par 
\tab \tab \tab if( SUCCEEDED ( GetDocRootNode(&pIDocRootNode) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab if( SUCCEEDED ( m_pComponent->m_pIFramework->SaveNodeAsNewFile(pIDocRootNode) ) )\par 
\tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab hr = S_OK;\par 
\tab \tab \tab \tab \}\par 
\tab \tab \tab \tab pIDocRootNode->Release();\par 
\tab \tab \tab \}\par 
\tab \tab \tab break;\par 
\tab \}\par 
\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b GetNodeFileName}, {\b SaveNode}, {\b IDMUSProdNode}, {\b IDMUSProdNode::GetDocRootNode}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::SetNbrStatusBarPanes Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetNbrStatusBarPanes(}{\b int} {\i nCount}{\b , short} {\i nLifeSpan}
{\b , HANDLE*} {\i phKey}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates panes in the 
{\b Framework}'s status bar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i nCount} status bar panes were created successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i nCount} or {\i phKey} is not valid.  {\i nCount} must be greater than zero 
and less than 16. {\i phKey} must not be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell There is no more free space in the status bar.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the panes were not created.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nCount}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Number of panes to be created.  Must be greater than zero 
and less than 16.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nLifeSpan}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Length of time the status bar panes are needed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i phKey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the caller-allocated variable 
that receives the HANDLE which allows access to the 
Framework's status bar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Creates {\i nCount} panes on the right-hand side of the Framework's status bar.  The 
Framework continues to use the left side of the status bar for its progress bar and 
to display help text.\par 
Panes created by other calls to {\b SetNbrStatusBarPanes} may 
exist simultaneously in the status bar.  {\i nLifeSpan} helps determine the position 
of newly created panes in relationship to the other panes currently displaying in the 
status bar.  Panes with higher {\i nLifeSpan} values are displayed to the left of panes 
with lower {\i nLifeSpan} values.  In other words, the more "permanent" panes are 
positioned to the right-hand side of the application window.\par 
The following values are valid for use in {\i nLifeSpan}:\par 
SBLS_APPLICATION: \tab The status bar panes will exist the entire time the application is running.\par 
SBLS_EDITOR: \tab \tab The status bar panes will only exist when a specific editor is active.\par 
SBLS_CONTROL: \tab \tab The status bar panes will only exist when a specific control has the focus.\par 
SBLS_MOUSEDOWNUP: \tab The status bar panes will only exist while the mouse button is down.\par 
For even more control over positioning, {\i nLifeSpan} may equal one of the defined values 
plus or minus an offset; i.e. SBLS_CONTROL + 1.\par 
The caller of {\b SetNbrStatusBarPanes} is responsible for removing the panes 
at the appropriate time.  For example, when {\i nLifeSpan} is set to SBLS_EDITOR it is expected 
that the status bar panes will exist only when their associated editor is active.  In this case, 
{\b SetNbrStatusBarPanes} should be called during in-place activation when 
the editor's in-place toolbar is being displayed and {\b RestoreStatusBar} 
should be called the same time the in-place toolbar is removed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example creates and initializes several panes in the Framework's status 
bar:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdFramework* pIFramework;\par 
HANDLE hKey;\par 
\par 
pIFramework->SetNbrStatusBarPanes( 2, SBLS_EDITOR, &hKey );\par 
\par 
BSTR bstrName = m_pStyle->m_strCategoryName.AllocSysString();\par 
pIFramework->SetStatusBarPaneInfo( hKey, 0, SBS_NOBORDERS, 16 );\par 
pIFramework->SetStatusBarPaneText( hKey, 0, bstrName, TRUE );\par 
\par 
bstrName = m_pStyle->m_strName.AllocSysString();\par 
pIFramework->SetStatusBarPaneInfo( hKey, 1, SBS_SUNKEN, 16 );\par 
pIFramework->SetStatusBarPaneText( hKey, 1, bstrName, TRUE );\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b SetStatusBarPaneInfo}, {\b SetStatusBarPaneText}, {\b RestoreStatusBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::SetProgressBarPos Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetProgressBarPos(}{\b HANDLE} {\i hKey}{\b , int} {\i nPos}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the current position of the 
{\b Framework}'s progress bar control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The position of the progress bar control was set successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The value of {\i hKey} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell {\i hKey} does not match the HANDLE returned by the previous call 
to {\b StartProgressBar}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hKey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] HANDLE returned by {\b StartProgressBar}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nPos}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] New position of the progress bar control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\b Framework}'s "progress bar" can be used by DirectMusic Producer {\b Component}s 
to indicate the progress of a lengthy operation.  The progress bar control has a range 
and a current position.  The range represents the length of the entire operation, and 
the current position represents the progress the application has made toward completing 
the operation.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example creates a progress bar control in the Framework's status bar:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdFramework* pIFramework;\par 
HANDLE hKey;\par 
\par 
CString strPrompt = _T( "Preparing information" );\par 
BSTR bstrPrompt = strPrompt.AllocSysString();\par 
\par 
pIFramework->StartProgressBar( 0, 50, bstrPrompt, &hKey );\par 
for( int i = 0 ;  i < 50 ;  i++ )\par 
\{\par 
\tab Sleep( 50 );\par 
\tab pIFramework->SetProgressBarPos( hKey, i );\par 
\}\par 
pIFramework->EndProgressBar( hKey );\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b StartProgressBar}, {\b SetProgressBarStep}, {\b StepProgressBar}, {\b EndProgressBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::SetProgressBarStep Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetProgressBarStep(}{\b HANDLE} {\i hKey}{\b , UINT} {\i nValue}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Specifies the step increment for 
the {\b Framework}'s progress bar control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The step increment of the progress bar control was set successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The value of {\i hKey} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell {\i hKey} does not match the HANDLE returned by the previous call 
to {\b StartProgressBar}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hKey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] HANDLE returned by {\b StartProgressBar}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] New step increment for the progress bar control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\b Framework}'s "progress bar" can be used by DirectMusic Producer {\b Component}s 
to indicate the progress of a lengthy operation.  The progress bar control has a range 
and a current position.  The range represents the length of the entire operation, and 
the current position represents the progress the application has made toward completing 
the operation.\par 
The step increment is the amount by which a call to {\b StepProgressBar} 
increases the progress bar's current position.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example creates a progress bar control in the Framework's status bar:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdFramework* pIFramework;\par 
HANDLE hKey;\par 
\par 
CString strPrompt = _T( "Preparing information" );\par 
BSTR bstrPrompt = strPrompt.AllocSysString();\par 
\par 
pIFramework->StartProgressBar( 0, 50, bstrPrompt, &hKey );\par 
pIFramework->SetProgressBarPos( hKey, 0 );\par 
pIFramework->SetProgressBarStep( hKey, 5 );\par 
\par 
for( int i = 0 ;  i < 10 ;  i++ )\par 
\{\par 
\tab Sleep( 50 );\par 
\tab pIFramework->StepProgressBar( hKey );\par 
\}\par 
\par 
pIFramework->EndProgressBar( hKey );\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b StartProgressBar}, {\b SetProgressBarPos}, {\b StepProgressBar}, {\b EndProgressBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::SetSelectedNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetSelectedNode(}{\b IDMUSProdNode*} {\i pINode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Highlights the Project Tree node 
associated with {\i pINode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pINode} was highlighted successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pINode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and {\i pINode} could not be highlighted.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an {\b IDMUSProdNode} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The Project Tree scrolls to make sure that the selected item is visible.\par 
{\b IDMUSProdNode::OnNodeSelChanged}
 gets invoked after calling this method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::SetStatusBarPaneInfo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetStatusBarPaneInfo(}{\b HANDLE} {\i hKey}{\b , int} {\i nIndex}
{\b , StatusBarStyle} {\i sbStyle}
{\b , int} {\i nMaxChars}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the specified status bar 
pane to a new style and width.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Status bar pane {\i nIndex} was updated successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i hKey}, {\i nIndex}, {\i sbStyle}, or {\i nMaxChars} is not 
valid.  For example, {\i hKey} may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell {\i hKey} does not match a HANDLE returned by a previous call 
to {\b SetNbrStatusBarPanes}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the pane was not modified.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hKey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] HANDLE returned by {\b SetNbrStatusBarPanes}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Zero based index of the pane whose 
information is to be set.  {\i nIndex} must be 
greater than or equal to zero, and less than 
the number of panes created by 
{\b SetNbrStatusBarPanes}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i sbStyle}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] New style for the pane.  {\i sbStyle} 
must be SBS_NOBORDERS, SBS_RAISED, or SBS_SUNKEN.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nMaxChars}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Maximum number of characters in pane text. 
{\i nMaxChars} must be greater than zero, and less 
than or equal to 48.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b SetNbrStatusBarPanes} creates one or more panes on the right-hand 
side of the Framework's status bar.  The Framework continues to use the left side of 
the status bar for its progress bar and to display help text.\par 
The {\b SetStatusBarPaneInfo} 
and {\b SetStatusBarPaneText} methods set the style, width and text of each 
pane.\par 
The following styles are valid for use in {\i sbStyle}:\par 
SBS_NOBORDERS\tab \tab No 3-D border around the pane.\par 
SBS_RAISED\tab \tab Reverse border so that text "pops out".\par 
SBS_SUNKEN\tab \tab Border is sunken.\par 
{\i nMaxChars} is used to set the width of the pane.  The Framework sets the width of the 
pane equal to {\i nMaxChars} * tm.tmAveCharWidth, where tm.tmAveCharWidth is the average 
character width of the status bar font.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example creates and initializes several panes in the Framework's status 
bar:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdFramework* pIFramework;\par 
HANDLE hKey;\par 
\par 
pIFramework->SetNbrStatusBarPanes( 2, SBLS_EDITOR, &hKey );\par 
\par 
BSTR bstrName = m_pStyle->m_strCategoryName.AllocSysString();\par 
pIFramework->SetStatusBarPaneInfo( hKey, 0, SBS_NOBORDERS, 16 );\par 
pIFramework->SetStatusBarPaneText( hKey, 0, bstrName, TRUE );\par 
\par 
bstrName = m_pStyle->m_strName.AllocSysString();\par 
pIFramework->SetStatusBarPaneInfo( hKey, 1, SBS_SUNKEN, 16 );\par 
pIFramework->SetStatusBarPaneText( hKey, 1, bstrName, TRUE );\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b SetNbrStatusBarPanes}, {\b SetStatusBarPaneText}, {\b RestoreStatusBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::SetStatusBarPaneText Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetStatusBarPaneText(}{\b HANDLE} {\i hKey}{\b , int} {\i nIndex}
{\b , BSTR} {\i bstrText}
{\b , BOOL} {\i bUpdate}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the text of the specified 
status bar pane.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Status bar pane text was updated successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i hKey} or {\i nIndex} is not valid. For example, 
{\i hKey} may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell {\i hKey} does not match a HANDLE returned by a previous call 
to {\b SetNbrStatusBarPanes}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the pane text was not modified.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hKey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] HANDLE returned by {\b SetNbrStatusBarPanes}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Zero based index of the pane whose 
information is to be set.  {\i nIndex} must be 
greater than or equal to zero, and less than 
the number of panes created by 
{\b SetNbrStatusBarPanes}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrText}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] New text.  This method must free {\i bstrText} with 
SysFreeString when it is no longer needed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bUpdate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] If TRUE, the pane is invalidated after the text update.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b SetNbrStatusBarPanes} creates one or more panes on the right-hand 
side of the Framework's status bar.  The Framework continues to use the left side of 
the status bar for its progress bar and to display help text.\par 
The {\b SetStatusBarPaneInfo} and 
{\b SetStatusBarPaneText} methods set the style, width and text of each 
pane.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example creates and initializes several panes in the Framework's status 
bar:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdFramework* pIFramework;\par 
HANDLE hKey;\par 
\par 
pIFramework->SetNbrStatusBarPanes( 2, SBLS_EDITOR, &hKey );\par 
\par 
BSTR bstrName = m_pStyle->m_strCategoryName.AllocSysString();\par 
pIFramework->SetStatusBarPaneInfo( hKey, 0, SBS_NOBORDERS, 16 );\par 
pIFramework->SetStatusBarPaneText( hKey, 0, bstrName, TRUE );\par 
\par 
bstrName = m_pStyle->m_strName.AllocSysString();\par 
pIFramework->SetStatusBarPaneInfo( hKey, 1, SBS_SUNKEN, 16 );\par 
pIFramework->SetStatusBarPaneText( hKey, 1, bstrName, TRUE );\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b SetNbrStatusBarPanes}, {\b SetStatusBarPaneInfo}, {\b RestoreStatusBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::ShowFile Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT ShowFile(}{\b BSTR} {\i bstrFileName}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Displays a newly created file in the 
Project Tree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The file specified in {\i bstrFileName} was added to the Project Tree.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The value of {\i bstrFileName} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the file could not be displayed in the Project Tree.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrFileName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Complete path and filename of the file to 
be added to the Project Tree.  This method frees 
{\i bstrFileName} with SysFreeString when it is 
no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 There may be times when a {\b Component} creates a new file.  For example, a MIDI export 
feature would generate a new MIDI file.  {\b ShowFile} provides the 
means for a Component to display a newly created file in an open {\b Project} in the 
Project Tree.\par 
{\i bstrFileName} must point to the complete path/filename of an existing file.\par 
This method neither creates nor opens Projects.  It returns E_FAIL if the Project Tree 
does not already contain a Project folder in which to place {\i bstrFileName}.  Sub-folders, 
however, will be created when necessary.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::SortChildNodes Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SortChildNodes(}{\b IDMUSProdNode*} {\i pINode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sorts the Project Tree child 
{\b Node}s associated with {\i pINode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The child nodes of {\i pINode} were sorted successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pINode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the Project Tree could not be sorted.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an {\b IDMUSProdNode} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::StartProgressBar Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT StartProgressBar(}{\b int} {\i nLower}{\b , int} {\i nUpper}
{\b , BSTR} {\i bstrPrompt}
{\b , HANDLE*} {\i phKey}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Creates a progress bar control 
in the {\b Framework}'s status bar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The progress bar was created successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The value of {\i phKey} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell The progress bar is already being used to track another operation.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the progress bar was not created.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nLower}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies lower limit of the progress bar range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nUpper}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies upper limit of the progress bar range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrPrompt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Text for the progress bar prompt.  This 
method must free {\i bstrPrompt} with SysFreeString 
when it is no longer needed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i phKey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the caller-allocated variable 
that receives the HANDLE which allows access to the 
Framework's progress bar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\b Framework}'s "progress bar" can be used by DirectMusic Producer {\b Component}s 
to indicate the progress of a lengthy operation.  The progress bar control has a range 
and a current position.  The range represents the length of the entire operation, and 
the current position represents the progress the application has made toward completing 
the operation.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example creates a progress bar control in the Framework's status bar:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdFramework* pIFramework;\par 
HANDLE hKey;\par 
\par 
CString strPrompt = _T( "Preparing information" );\par 
BSTR bstrPrompt = strPrompt.AllocSysString();\par 
\par 
pIFramework->StartProgressBar( 0, 50, bstrPrompt, &hKey );\par 
for( int i = 0 ;  i < 50 ;  i++ )\par 
\{\par 
\tab Sleep( 50 );\par 
\tab pIFramework->SetProgressBarPos( hKey, i );\par 
\}\par 
pIFramework->EndProgressBar( hKey );\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b SetProgressBarPos}, {\b SetProgressBarStep}, {\b StepProgressBar}, {\b EndProgressBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdFramework::StepProgressBar Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT StepProgressBar(}{\b HANDLE} {\i hKey}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Advances current position of the 
{\b Framework}'s progress bar control by the step increment.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The current position of the progress bar control was advanced successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The value of {\i hKey} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_ACCESSDENIED\cell {\i hKey} does not match the HANDLE returned by the previous call 
to {\b StartProgressBar}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hKey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] HANDLE returned by {\b StartProgressBar}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\b Framework}'s "progress bar" can be used by DirectMusic Producer {\b Component}s 
to indicate the progress of a lengthy operation.  The progress bar control has a range 
and a current position.  The range represents the length of the entire operation, and 
the current position represents the progress the application has made toward completing 
the operation.\par 
{\b SetProgressBarStep} sets the step increment for the progress bar control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example creates a progress bar control in the Framework's status bar:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdFramework* pIFramework;\par 
HANDLE hKey;\par 
\par 
CString strPrompt = _T( "Preparing information" );\par 
BSTR bstrPrompt = strPrompt.AllocSysString();\par 
\par 
pIFramework->StartProgressBar( 0, 50, bstrPrompt, &hKey );\par 
pIFramework->SetProgressBarPos( hKey, 0 );\par 
pIFramework->SetProgressBarStep( hKey, 5 );\par 
\par 
for( int i = 0 ;  i < 10 ;  i++ )\par 
\{\par 
\tab Sleep( 50 );\par 
\tab pIFramework->StepProgressBar( hKey );\par 
\}\par 
\par 
pIFramework->EndProgressBar( hKey );\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework}, {\b StartProgressBar}, {\b SetProgressBarPos}, {\b SetProgressBarStep}, {\b EndProgressBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdLoaderRefChunk Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 This interface provides the means to embed file reference chunks into a stream for the 
purpose of enabling an implementation of IDirectMusicLoader to resolve file references.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A file may need to associate itself with other files in its {\b Project}.  For example, 
a Band may use one or more DLS files.  In order to establish a connection to other files, 
the saved Band contains one or more file reference chunks each pointing to a DLS file.\par 
{\b IDMUSProdLoaderRefChunk} provides a standard way for DirectMusic Producer {\b Component}s 
to place file reference chunks in the runtime versions of their DirectMusic files.  The 
DirectMusic Loader object, as well as other implementations of IDirectMusicLoader, know how 
to resolve the file reference chunks written through this interface.\par 
{\b IDMUSProdFileRefChunk} places Producer specific file reference chunks in streams so that 
links can be re-established within Producer the next time the file is opened by Producer. 
{\b IDMUSProdLoaderRefChunk} places DirectMusic file reference chunks in streams so that links 
can be established when the file is loaded into the DirectMusic DLLs either externally or 
via Producer.\par 
A DirectMusic Producer Component can call {\b IDMUSProdFramework::QueryInterface}
 to 
obtain a pointer to the {\b Framework}'s {\b IDMUSProdLoaderRefChunk} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdComponent}, {\b IDMUSProdFramework}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SaveRefChunkForLoader}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Embeds a RIFF chunk into {\i pIStream} that enables an 
implementation of IDirectMusicLoader to resolve file references.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdLoaderRefChunk::SaveRefChunkForLoader Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SaveRefChunkForLoader(}{\b IStream*} {\i pIStream}{\b , IDMUSProdNode*} {\i pIDocRootNode}
{\b , REFCLSID} {\i rclsid}
{\b , void*} {\i pObjectDesc}
{\b , WhichLoader} {\i wlWhichLoader}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Embeds a RIFF chunk 
into {\i pIStream} that enables an implementation of IDirectMusicLoader to 
resolve file references.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The file reference chunk was saved successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i pIStream} or {\i pIDocRootNode} is not valid.  For example, 
they may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the file reference chunk could not be saved.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an IStream interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an {\b IDMUSProdNode} interface for the DocRoot 
{\b Node} of the referenced file.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] CLSID of the DirectMusic object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pObjectDesc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to a DirectMusic DMUS_OBJECTDESC structure.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wlWhichLoader}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies the target IDirectMusicLoader implementation\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A DirectMusic Producer Component can call {\b IDMUSProdFramework::QueryInterface}
 to 
obtain a pointer to the {\b Framework}'s {\b IDMUSProdLoaderRefChunk} interface.\par 
{\i pObjectDesc} is required when {\i pIDocRootNode's} IDMUSProdNode::GetObject method 
fails to return an IDirectMusicObject interface pointer.  {\i pObjectDesc} is ignored 
and should be set to NULL when {\i pIDocRootNode's} IDMUSProdNode::GetObject method 
returns an IDirectMusicObject interface pointer.\par 
The following values are valid for use in {\i wlWhichLoader}:\par 
WL_DIRECTMUSIC: \tab The Framework creates a file reference chunk with information 
that the DirectMusic Loader object can use to resolve the file reference.  Use this 
value when saving runtime files to disk.\par 
WL_PRODUCER: \tab The Framework creates a file reference chunk with information 
that the Producer implementation of IDirectMusicLoader can use to resolve the file 
reference.  Use this value when persisting into DirectMusic objects during the course 
of a DirectMusic Producer work session.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following code excerpt handles creation of file reference chunks correctly.  Reference 
chunks are saved differently when persisting directly into a DirectMusic object because Producer's 
implementation of IDirectMusicLoader will be called upon to resolve the reference.  When saving to 
a file, the file type (FT_RUNTIME, FT_DESIGN) returned by {\b IDMUSProdPersistInfo::GetStreamInfo}
 
determines whether or not it is necessary to save the Producer specific file reference chunk:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 // Write Reference chunk\par 
if( pIStyleDocRootNode )\par 
\{\par 
\tab if( ::IsEqualGUID( guidDataFormat, GUID_DirectMusicObject ) )\par 
\tab \{\par 
\tab \tab SaveDMRef( pIRiffStream, pIStyleDocRootNode, WL_PRODUCER );\par 
\tab \}\par 
\tab else if( ::IsEqualGUID( guidDataFormat, GUID_CurrentVersion ) )\par 
\tab \{\par 
\tab \tab SaveDMRef( pIRiffStream, pIStyleDocRootNode, WL_DIRECTMUSIC );\par 
\tab \tab if( ftFileType == FT_DESIGN )\par 
\tab \tab \{\par 
\tab \tab \tab SaveProducerRef( pIRiffStream, pIStyleDocRootNode );\par 
\tab \tab \}\par 
\tab \}\par 
\}\par 
\par 
\par 
HRESULT CStyleRefMgr::SaveProducerRef( IDMUSProdRIFFStream* pIRiffStream, IDMUSProdNode* pIDocRootNode )\par 
\{\par 
IDMUSProdFileRefChunk* pIFileRefChunk;\par 
\par 
ASSERT( m_pIFramework != NULL );\par 
if( m_pIFramework == NULL )\par 
\{\par 
\tab return E_FAIL;\par 
\}\par 
\par 
IStream* pIStream = pIRiffStream->GetStream();\par 
ASSERT( pIStream != NULL );\par 
\par 
if ( SUCCEEDED ( m_pIFramework->QueryInterface( IID_IDMUSProdFileRefChunk, (void**)&pIFileRefChunk ) ) )\par 
\{\par 
\tab pIFileRefChunk->SaveRefChunk( pIStream, pIDocRootNode );\par 
\tab pIFileRefChunk->Release();\par 
\}\par 
\par 
pIStream->Release();\par 
return S_OK;\par 
\}\par 
\par 
\par 
HRESULT CStyleRefMgr::SaveDMRef( IDMUSProdRIFFStream* pIRiffStream,\par 
\tab \tab \tab \tab \tab \tab \tab  IDMUSProdNode* pIDocRootNode, WhichLoader whichLoader )\par 
\{\par 
IDMUSProdLoaderRefChunk* pIRefChunkLoader;\par 
\par 
ASSERT( m_pIFramework != NULL );\par 
if( m_pIFramework == NULL )\par 
\{\par 
\tab return E_FAIL;\par 
\}\par 
\par 
HRESULT hr = E_FAIL;\par 
\par 
IStream* pIStream = pIRiffStream->GetStream();\par 
ASSERT( pIStream != NULL );\par 
\par 
if( SUCCEEDED( m_pIFramework->QueryInterface( IID_IDMUSProdLoaderRefChunk, (void**)&pIRefChunkLoader ) ) )\par 
\{\par 
\tab if( pIRefChunkLoader )\par 
\tab \{\par 
\tab \tab switch( whichLoader )\par 
\tab \tab \{\par 
\tab \tab \tab case WL_DIRECTMUSIC:\par 
\tab \tab \tab case WL_PRODUCER:\par 
\tab \tab \tab \tab hr = pIRefChunkLoader->SaveRefChunkForLoader( pIStream,\par 
\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab   pIDocRootNode,\par 
\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab   CLSID_DirectMusicStyle,\par 
\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab   NULL,\par 
\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab   whichLoader );\par 
\tab \tab \tab \tab break;\par 
\tab \tab \}\par 
\par 
\tab \tab pIRefChunkLoader->Release();\par 
\tab \}\par 
\}\par 
\par 
pIStream->Release();\par 
return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFileRefChunk}, {\b IDMUSProdLoaderRefChunk}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdMenu Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The {\b IDMUSProdMenu} interface defines behavior for menu items that DirectMusic 
Producer Components add to the Framework's 'Add-Ins' menu.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A DirectMusic Producer {\b Menu} object defines the behavior of a single menu item. 
A Menu object must implement {\b IDMUSProdMenu}.\par 
After creation, the object's {\b IDMUSProdMenu} interface gets handed to the Framework via the 
Framework's {\b IDMUSProdFramework::AddMenuItem}
 method.  This method adds the menu item to 
the Framework's 'Add-Ins' menu. {\b IDMUSProdFramework::AddMenuItem}
 provides a way for a 
DirectMusic Producer Component, that otherwise has no UI, to hook into the Framework.  For 
example, a Component may want to place a menu item in the Framework's 'Add-Ins' menu to 
provide a dialog that can be used to setup various options.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Menu} Object, {\b IDMUSProdFramework::AddMenuItem}
, {\b IDMUSProdFramework::RemoveMenuItem}
\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetMenuText}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the text asociated with the menu item.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetMenuHelpText}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the context help text associated with the menu item.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnMenuInit}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Initializes the state of the menu item.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnMenuSelect}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Performs the action associated with the menu item.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdMenu::GetMenuHelpText Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetMenuHelpText(}{\b BSTR*} {\i pbstrHelpText}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 A Component can call 
{\b IDMUSProdFramework::AddMenuItem}
 to add a {\b Menu} object to the Framework's 
'Add-Ins' menu.  GetMenuHelpText returns the context help text associated with 
that menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The context help text was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the context help text was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrHelpText}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the caller-allocated variable that 
receives a copy of the context help text.  The caller must free {\i pbstrHelpText} 
with SysFreeString when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This text appears in the Framework's status bar when the mouse pointer moves over the 
menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example provides context help for the menu item added to the Framework's 
'Add-Ins' menu:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMyMenu::GetMenuHelpText( BSTR* pbstrHelpText )\par 
\{\par 
\tab CString strHelpText= "Run WordPad";\par 
\par 
\tab *pbstrHelpText = strHelpText.AllocSysString();\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdMenu}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdMenu::GetMenuText Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetMenuText(}{\b BSTR*} {\i pbstrText}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 A Component can call 
{\b IDMUSProdFramework::AddMenuItem}
 to add a {\b Menu} object to the Framework's 
'Add-Ins' menu.  GetMenuText returns the text associated with that menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The menu text was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the menu text was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrText}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the caller-allocated variable that 
receives a copy of the menu text.  The caller must free {\i pbstrText} with 
SysFreeString when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This text appears in the Framework's 'Add-Ins' menu.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example places "WordPad" into the Framework's 'Add-Ins' menu:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMyMenu::GetMenuText( BSTR* pbstrText )\par 
\{\par 
\tab CString strText= "WordPad";\par 
\par 
\tab *pbstrText = strText.AllocSysString();\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdMenu}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdMenu::OnMenuInit Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnMenuInit(}{\b HMENU} {\i hMenu}{\b , UINT} {\i nMenuId}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 A Component can call 
{\b IDMUSProdFramework::AddMenuItem}
 to add a {\b Menu} object to the Framework's 
'Add-Ins' menu.  OnMenuInit initializes the state of that menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Always succeeds.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Handle to Framework's 'Add-Ins' menu.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nMenuId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Command ID of the menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example enables the menu item:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMyMenu::OnMenuInit( HMENU hMenu, UINT nMenuId )\par 
\{\par 
\tab ::EnableMenuItem( hMenu, nMenuId, (MF_ENABLED | MF_BYCOMMAND) );\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdMenu}, {\b OnMenuSelect}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdMenu::OnMenuSelect Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnMenuSelect(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 A Component can call 
{\b IDMUSProdFramework::AddMenuItem}
 to add a {\b Menu} object to the Framework's 
'Add-Ins' menu.  OnMenuSelect performs the action associated with that menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Action associated with menu item was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell Action failed.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example runs "WordPad" as a result of selecting the menu item:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMyMenu::OnMenuSelect( void )\par 
\{\par 
\tab if( ::WinExec("WordPad.exe", SW_SHOWNORMAL) > 31 )\par 
\tab \{\par 
\tab \tab return S_OK;\par 
\tab \}\par 
\par 
\tab return E_FAIL;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdMenu}, {\b OnMenuInit}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdMidiInCPt Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The Conductor uses this interface to communicate MIDI input 
messages to interested editors.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnMidiMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Called when a MIDI input message is available\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdMidiInCPt::OnMidiMsg Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnMidiMsg(}{\b REFERENCE_TIME} {\i rtTime}{\b , BYTE} {\i bStatus}
{\b , BYTE} {\i bData1}
{\b , BYTE} {\i bData2}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called when a MIDI input 
message is available for handling.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rtTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The time stamp of the event.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bStatus}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The MIDI status byte.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bData1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The first MIDI data byte.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bData2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The second MIDI data byte.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The implementation of this method should take as little time as possible, to ensure 
timely delivery of MIDI input to all editors.\line  
This method is called in a thread separate from the application's main message 
processing thread.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdMidiInCPt}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 This interface provides the functionality for a {\b Node} in the Framework's Project Tree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdComponent}, {\b IDMUSProdFramework},\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetNodeImageIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns index into Project Tree's image list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT UseOpenCloseImages}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether Project Tree images follow open/close 
paradigm or select/non-select paradigm.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetFirstChild}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdNode interface pointer for the first child Node 
in this Node's list of children.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetNextChild}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdNode interface pointer for the next child Node 
in this Node's list of children.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetComponent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns pointer to the IDMUSProdComponent interface responsible 
for this Node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns pointer to this Node's DocRoot node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets this Node's DocRoot node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetParentNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns pointer to this Node's parent node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetParentNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets this Node's parent node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetNodeId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns GUID used to determine type of Node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetNodeName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns text used for this Node's label.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetNodeNameMaxLength}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns max length of Node's label.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT ValidateNodeName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Validates new text for Node's label.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetNodeName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets text used for Node's label.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetNodeListInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Fills a DMUSProdListInfo structure with information describing 
this Node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetEditorClsId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns CLSID of Node's editor.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetEditorTitle}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns title for Node's editor window.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetEditorWindow}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns HWND of Node's editor.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetEditorWindow}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets HWND of Node's editor.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetRightClickMenuId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns HINSTANCE and resource ID of Node's right-click 
context menu.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnRightClickMenuInit}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Initializes state of menu items contained in Node's 
right-click context menu.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnRightClickMenuSelect}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Performs actions associated with Node's right-click 
context menu.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT DeleteChildNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Instructs parent node to delete specified Node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT InsertChildNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Instructs parent node to insert specified Node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT DeleteNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Deletes this Node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnNodeSelChanged}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Informs Node of changes to its selection state.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CreateDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns a pointer to an IDataObject interface containing 
the current contents of this Node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CanCut}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether this Node can be cut.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CanCopy}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether this Node can be copied.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CanDelete}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether this Node can be deleted.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CanDeleteChildNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether {\i pIChildNode} can be deleted.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CanPasteFromData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether {\i pIDataObject} contains data that can 
be pasted into this Node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT PasteFromData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Inserts data from {\i pIDataObject} into this Node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CanChildPasteFromData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether the {\i pIDataObject} dropped or 
pasted onto {\i pIChildNode} contains data that can be pasted into this Node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT ChildPasteFromData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Inserts data from the {\i pIDataObject} dropped or 
pasted onto {\i pIChildNode} into this Node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Retrieves a pointer to the requested interface for the object 
identified by {\i rclsid}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::CanChildPasteFromData Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CanChildPasteFromData(}{\b IDataObject*} {\i pIDataObject}{\b , IDMUSProdNode*} {\i pIChildNode}
{\b , BOOL*} {\i pfWillSetReference}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines whether the 
{\i pIDataObject} dropped or pasted onto {\i pIChildNode} contains data that can be 
pasted into this {\b Node}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell A paste operation can be performed using {\i pIDataObject}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell A paste operation cannot be performed using {\i pIDataObject}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i pIDataObject} or {\i pIChildNode} is not valid. 
For example, they may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pfWillSetReference} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell This Node does not support children.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and a paste operation cannot be performed using 
{\i pIDataObject}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to an IDataObject interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIChildNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to a child {\b Node} in this Node's list 
of children.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pfWillSetReference}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Communicates whether paste will create a file 
reference instead of actually copying the data.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns whether or not {\i pIDataObject} contains data that can 
be pasted into this Node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleBands::CanChildPasteFromData( IDataObject* pIDataObject, IDMUSProdNode* pIChildNode,\par 
\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab BOOL *pfWillSetReference )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\tab UNREFERENCED_PARAMETER(pIChildNode);\par 
\par 
\tab if( pfWillSetReference == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *pfWillSetReference = FALSE;\par 
\par 
\tab if( pIDataObject == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab // Create a new CDllJazzDataObject and see if it can read the data object's format.\par 
\tab // CDllJazzDataObject implements IDataObject and provides a few convenience functions.\par 
\tab CDllJazzDataObject* pDataObject = new CDllJazzDataObject();\par 
\tab if( pDataObject == NULL )\par 
\tab \{\par 
\tab \tab return E_OUTOFMEMORY;\par 
\tab \}\par 
\par 
\tab HRESULT hr = S_FALSE;\par 
\par 
\tab if( SUCCEEDED (\tab pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfBand ) )\par 
\tab ||  SUCCEEDED (\tab pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfBandList ) )\par 
\tab ||  SUCCEEDED (\tab pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfBandTrack ) )\par 
\tab ||  SUCCEEDED ( m_pStyle->ContainsClipFormat( pDataObject, pIDataObject, theApp.m_pStyleComponent->m_cfBandTrack ) ) )\par 
\tab \{\par 
\tab \tab hr = S_OK;\par 
\tab \}\par 
\par 
\tab RELEASE( pDataObject );\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b CreateDataObject}, {\b ChildPasteFromData}, {\b CanPasteFromData}, {\b PasteFromData}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::CanCopy Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CanCopy(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines whether this {\b Node} can be copied.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell This Node can be copied.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell This Node cannot be copied.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and this Node cannot be copied.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns whether or not this Node can be copied:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CBand::CanCopy( void )\par 
\{\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b CreateDataObject}, {\b CanCut}, {\b CanDelete}, {\b CanDeleteChildNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::CanCut Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CanCut(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines whether this {\b Node} can be cut.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell This Node can be cut.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell This Node cannot be cut.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and this Node cannot be cut.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns whether or not this Node can be cut:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CBand::CanCut( void )\par 
\{\par 
\tab return CanDelete();\par 
\}\par 
\par 
HRESULT CBand::CanDelete( void )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( m_pIDocRootNode != this )\par 
\tab \{\par 
\tab \tab // Let parent decide whether or not this Band can be deleted.\par 
\tab \tab // Styles, for example, do not allow their last Band to be deleted.\par 
\tab \tab if( m_pIParentNode )\par 
\tab \tab \{\par 
\tab \tab \tab return m_pIParentNode->CanDeleteChildNode( this );\par 
\tab \tab \}\par 
\tab \tab else\par 
\tab \tab \{\par 
\tab \tab \tab return S_FALSE;\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab // Band files can always be copied\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b CreateDataObject}, {\b CanCopy}, {\b CanDelete}, {\b CanDeleteChildNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::CanDelete Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CanDelete(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines whether this {\b Node} can be deleted.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell This Node can be deleted.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell This Node cannot be deleted.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and this Node cannot be deleted.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns whether or not this Node can be deleted:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CBand::CanDelete( void )\par 
\{\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following example defers the choice of whether or not this Node can be deleted to 
its parent Node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CBand::CanDelete( void )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( m_pIDocRootNode != this )\par 
\tab \{\par 
\tab \tab // Let parent decide whether or not this Band can be deleted.\par 
\tab \tab // Styles, for example, do not allow their last Band to be deleted.\par 
\tab \tab if( m_pIParentNode )\par 
\tab \tab \{\par 
\tab \tab \tab return m_pIParentNode->CanDeleteChildNode( this );\par 
\tab \tab \}\par 
\tab \tab else\par 
\tab \tab \{\par 
\tab \tab \tab return S_FALSE;\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab // Band files can always be copied\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b CreateDataObject}, {\b CanCut}, {\b CanCopy}, {\b CanDeleteChildNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::CanDeleteChildNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CanDeleteChildNode(}{\b IDMUSProdNode*} {\i pIChildNode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines whether {\i pIChildNode} 
can be deleted.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIChildNode} can be deleted.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell {\i pIChildNode} cannot be deleted.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIChildNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell This Node does not support children.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and {\i pIChildNode} cannot be deleted.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIChildNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to a child {\b Node} in this Node's list 
of children.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns whether or not {\i pIChildNode} can be deleted:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleBands::CanDeleteChildNode( IDMUSProdNode* pIChildNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab // Make sure node is in Band list\par 
\tab POSITION pos = m_lstBands.Find( pIChildNode );\par 
\tab if( pos == NULL )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab // Cannot delete the last Band from a Style\par 
\tab if( m_lstBands.GetCount() < 2 )\par 
\tab \{\par 
\tab \tab return S_FALSE;\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b CreateDataObject}, {\b CanCut}, {\b CanCopy}, {\b CanDelete}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::CanPasteFromData Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CanPasteFromData(}{\b IDataObject*} {\i pIDataObject}{\b , BOOL*} {\i pfWillSetReference}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines whether {\i pIDataObject} 
contains data that can be pasted into this {\b Node}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell A paste operation can be performed using {\i pIDataObject}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell A paste operation cannot be performed using {\i pIDataObject}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIDataObject} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pfWillSetReference} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and a paste operation cannot be performed using 
{\i pIDataObject}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to an IDataObject interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pfWillSetReference}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Communicates whether paste will create a file 
reference instead of actually copying the data.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns whether or not {\i pIDataObject} contains data that can 
be pasted into this Node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleBands::CanPasteFromData( IDataObject* pIDataObject, BOOL* pfWillSetReference )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pfWillSetReference == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *pfWillSetReference = FALSE;\par 
\par 
\tab if( pIDataObject == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab // Create a new CDllJazzDataObject and see if it can read the data object's format.\par 
\tab // CDllJazzDataObject implements IDataObject and provides a few convenience functions.\par 
\tab CDllJazzDataObject* pDataObject = new CDllJazzDataObject();\par 
\tab if( pDataObject == NULL )\par 
\tab \{\par 
\tab \tab return E_OUTOFMEMORY;\par 
\tab \}\par 
\par 
\tab HRESULT hr = S_FALSE;\par 
\par 
\tab if( SUCCEEDED (\tab pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfBand ) )\par 
\tab ||  SUCCEEDED (\tab pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfBandList ) )\par 
\tab ||  SUCCEEDED (\tab pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfBandTrack ) )\par 
\tab ||  SUCCEEDED ( m_pStyle->ContainsClipFormat( pDataObject, pIDataObject, theApp.m_pStyleComponent->m_cfBandTrack ) ) )\par 
\tab \{\par 
\tab \tab hr = S_OK;\par 
\tab \}\par 
\par 
\tab RELEASE( pDataObject );\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following example defers the choice of whether or not {\i pIDataObject} contains 
data that can be pasted to its parent Node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CBand::CanPasteFromData( IDataObject* pIDataObject, BOOL* pfWillSetReference )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pfWillSetReference == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *pfWillSetReference = FALSE;\par 
\par 
\tab if( m_pIDocRootNode != this )\par 
\tab \{\par 
\tab \tab if( m_pIParentNode )\par 
\tab \tab \{\par 
\tab \tab \tab // Let Style, for example, decide what can be dropped\par 
\tab \tab \tab return m_pIParentNode->CanChildPasteFromData( pIDataObject, this, pfWillSetReference );\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab // Can't drop anything on a Band file in the Project Tree\par 
\tab return S_FALSE;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b CreateDataObject}, {\b PasteFromData}, {\b CanChildPasteFromData}, {\b ChildPasteFromData}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::ChildPasteFromData Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT ChildPasteFromData(}{\b IDataObject*} {\i pIDataObject}{\b , IDMUSProdNode*} {\i pIChildNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Inserts data from the 
{\i pIDataObject} dropped or pasted onto {\i pIChildNode} into this {\b Node}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The paste operation completed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell Either {\i pIDataObject} or {\i pIChildNode} is not valid. 
For example, they may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell This Node does not support children.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the paste operation did not take place.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to an IDataObject interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIChildNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to a child {\b Node} in this Node's list 
of children.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example performs a paste operation:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleBands::ChildPasteFromData( IDataObject* pIDataObject, IDMUSProdNode* pIChildNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab ASSERT( m_pStyle != NULL );\par 
\par 
\tab if( pIDataObject == NULL\par 
\tab ||  pIChildNode == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab // Create a new CDllJazzDataObject to get the data object's stream.\par 
\tab // CDllJazzDataObject implements IDataObject and provides a few convenience functions.\par 
\tab CDllJazzDataObject* pDataObject = new CDllJazzDataObject();\par 
\tab if( pDataObject == NULL )\par 
\tab \{\par 
\tab \tab return E_OUTOFMEMORY;\par 
\tab \}\par 
\par 
\tab HRESULT hr = E_FAIL;\par 
\par 
\tab if( SUCCEEDED ( pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfBand ) ) )\par 
\tab \{\par 
\tab \tab // Handle CF_BAND format\par 
\tab \tab hr = m_pStyle->PasteCF_BAND( pDataObject, pIDataObject, NULL );\par 
\tab \}\par 
\par 
\tab else if( SUCCEEDED ( pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfBandList ) ) )\par 
\tab \{\par 
\tab \tab // Handle CF_BANDLIST format\par 
\tab \tab hr = m_pStyle->PasteCF_BANDLIST( pDataObject, pIDataObject, NULL );\par 
\tab \}\par 
\par 
\tab else if( SUCCEEDED ( pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfBandTrack ) ) )\par 
\tab \{\par 
\tab \tab // Handle CF_BANDTRACK format\par 
\tab \tab hr = m_pStyle->PasteCF_BANDTRACK( pDataObject, pIDataObject, NULL );\par 
\tab \}\par 
\par 
\tab else if( SUCCEEDED ( pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfTimeline ) ) )\par 
\tab \{\par 
\tab \tab // Handle CF_TIMELINE format\par 
\tab \tab hr = m_pStyle->PasteCF_TIMELINE ( pDataObject, pIDataObject, NULL );\par 
\tab \}\par 
\par 
\tab RELEASE( pDataObject );\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b CreateDataObject}, {\b CanChildPasteFromData}, {\b CanPasteFromData}, {\b PasteFromData}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::CreateDataObject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CreateDataObject(}{\b IDataObject**} {\i ppIDataObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to an IDataObject 
interface containing the current contents of this {\b Node}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The data object was created and {\i ppIDataObject} was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i ppIDataObject} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell This Node does not support drag/drop, cut, copy, or paste.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the data object could not be created.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the 
requested IDataObject interface.  On success, the caller is responsible for calling 
IUnknown::Release.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example creates an IDataObject for this Node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CBand::CreateDataObject( IDataObject** ppIDataObject )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab ASSERT( m_pComponent != NULL );\par 
\par 
\tab if( ppIDataObject == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *ppIDataObject = NULL;\par 
\par 
\tab // Create the CDllJazzDataObject\par 
\tab // CDllJazzDataObject implements IDataObject and provides a few convenience functions\par 
\tab CDllJazzDataObject* pDataObject = new CDllJazzDataObject();\par 
\tab if( pDataObject == NULL )\par 
\tab \{\par 
\tab \tab return E_OUTOFMEMORY;\par 
\tab \}\par 
\par 
\tab IStream* pIStream;\par 
\par 
\tab // Save Band into stream\par 
\tab HRESULT hr = E_FAIL;\par 
\par 
\tab if( SUCCEEDED ( theApp.m_pIFramework->AllocMemoryStream(FT_DESIGN, GUID_CurrentVersion, &pIStream) ) )\par 
\tab \{\par 
\tab \tab if( SUCCEEDED ( Save( pIStream, FALSE ) ) )\par 
\tab \tab \{\par 
\tab \tab \tab // Place CF_BAND into CDllJazzDataObject\par 
\tab \tab \tab if( SUCCEEDED ( pDataObject->AddClipFormat( m_pComponent->m_cfBand, pIStream ) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab hr = S_OK;\par 
\tab \tab \tab \}\par 
\tab \tab \}\par 
\par 
\tab \tab pIStream->Release();\par 
\tab \}\par 
\par 
\tab if( SUCCEEDED ( hr ) )\par 
\tab \{\par 
\tab \tab hr = E_FAIL;\par 
\par 
\tab \tab // Create a stream in CF_DMUSPROD_FILE format\par 
\tab \tab if( SUCCEEDED ( theApp.m_pIFramework->SaveClipFormat( m_pComponent->m_cfProducerFile, this, &pIStream ) ) )\par 
\tab \tab \{\par 
\tab \tab \tab // There is the potential for a Band node to become a file\par 
\tab \tab \tab // so we must also place CF_DMUSPROD_FILE into CDllJazzDataObject\par 
\tab \tab \tab if( SUCCEEDED ( pDataObject->AddClipFormat( m_pComponent->m_cfProducerFile, pIStream ) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab hr = S_OK;\par 
\tab \tab \tab \}\par 
\par 
\tab \tab \tab pIStream->Release();\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab if( SUCCEEDED ( hr ) )\par 
\tab \{\par 
\tab \tab *ppIDataObject = pDataObject;\tab // already AddRef'd\par 
\tab \}\par 
\tab else\par 
\tab \{\par 
\tab \tab pDataObject->Release();\par 
\tab \}\par 
\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b CanCut}, {\b CanCopy}, {\b CanDelete}, {\b CanDeleteChildNode}, 
{\b CanPasteFromData}, {\b PasteFromData}, {\b CanChildPasteFromData}, {\b ChildPasteFromData}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::DeleteChildNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT DeleteChildNode(}{\b IDMUSProdNode*} {\i pIChildNode}{\b , BOOL fPromptUser} {\i fPromptUser}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Instructs parent {\b Node} to delete the child 
Node specified in {\i pIChildNode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIChildNode} was deleted successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIChildNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and {\i pIChildNode} could not be deleted.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell This Node does not support children.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIChildNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdNode} interface to be 
deleted.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fPromptUser}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Determines whether delete prompt is displayed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example removes a child Node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotifDocType::DeleteChildNode( IDMUSProdNode* pIChildNode, BOOL fPromptUser )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab ASSERT( m_pComponent != NULL );\par 
\tab ASSERT( m_pComponent->m_pIFramework != NULL );\par 
\par 
\tab if( pIChildNode == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab // Remove from Project Tree\par 
\tab m_pComponent->m_pIFramework->RemoveNode( pIChildNode );\par 
\par 
\tab // Remove from Component Motif list\par 
\tab POSITION pos = m_pComponent->m_lstMotifs.Find( (CMotif *)pIChildNode );\par 
\tab if( pos )\par 
\tab \{\par 
\tab \tab m_pComponent->m_lstMotifs.RemoveAt( pos );\par 
\tab \tab pIChildNode->Release();\par 
\tab \}\par 
\par 
\tab m_pComponent->m_pIFramework->SetModifiedFlag( (IDMUSProdNode *)this, TRUE );\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b InsertChildNode}, {\b DeleteNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::DeleteNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT DeleteNode(}{\b BOOL fPromptUser} {\i fPromptUser}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Deletes this {\b Node}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Node was deleted successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and this Node could not be deleted.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell Node does not support deletion.  For example, a Style's Band folder cannot 
be deleted.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fPromptUser}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Determines whether delete prompt is displayed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b DeleteNode} also deletes the children belonging to this Node.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example deletes a Node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::DeleteNode( void, BOOL fPromptUser )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab IDMUSProdNode* pIParentNode;\par 
\par 
\tab if( SUCCEEDED ( GetParentNode(&pIParentNode) ) )\par 
\tab \{\par 
\tab \tab if( pIParentNode )\par 
\tab \tab \{\par 
\tab \tab \tab pIParentNode->DeleteChildNode( this, fPromptUser );\par 
\tab \tab \tab pIParentNode->Release();\par 
\tab \tab \tab return S_OK;\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab return E_FAIL;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b InsertChildNode}, {\b DeleteChildNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetComponent Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetComponent(}{\b IDMUSProdComponent**} {\i ppIComponent}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the {\b IDMUSProdComponent} 
interface responsible for this {\b Node}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The Node's corresponding {\b IDMUSProdComponent} was returned in {\i ppIComponent}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIComponent} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIComponent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval]  Address of a variable to receive the 
requested {\b IDMUSProdComponent} interface.  On success, the caller is responsible for 
calling {\b IDMUSProdComponent::Release}
 when this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetDocRootNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetDocRootNode(}{\b IDMUSProdNode**} {\i ppIDocRootNode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to this {\b Node}'s DocRoot 
node.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The DocRoot {\b IDMUSProdNode} was returned in {\i ppIDocRootNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIDocRootNode} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell Node is not part of a file.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the 
requested {\b IDMUSProdNode} interface.  On success, the caller is responsible for 
calling {\b Release} when this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A DocRoot node is the top {\b Node} of a file.  For example, the Style node of a DirectMusic 
Style would be considered the DocRoot node of a Style file.  The Band node of a 
DirectMusic Band would be considered the DocRoot node of a Band file.\par 
This method must call {\b AddRef} on {\i ppIDocRootNode} before returning.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns a Node's DocRoot node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::GetDocRootNode( IDMUSProdNode** ppIDocRootNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab ASSERT( m_pIDocRootNode != NULL );\par 
\par 
\tab if( ppIDocRootNode == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab m_pIDocRootNode->AddRef();\par 
\tab *ppIDocRootNode = m_pIDocRootNode;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdNode}, {\b SetDocRootNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetEditorClsId Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetEditorClsId(}{\b CLSID*} {\i pclsid}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns CLSID of {\b Node}'s editor.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Editor's CLSID was returned in {\i pclsid}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pclsid} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to CLSID of Node's editor.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 When a Project Tree node is double-clicked, the Framework calls OleCreate() with 
the CLSID returned from {\b GetEditorClsId} to create the Node's editor 
object.\par 
The Node's editor object must implement the following interfaces:  {\b IDMUSProdEditor}, 
{\b IOleObject}, {\b IViewObjectEx}, {\b IOleControl}, {\b IOleInPlaceObject}, 
{\b IOleInPlaceActiveObject}.\par 
FYI MFC's COleControl class also implements the following interfaces:  {\b IPersistStorage}, 
{\b IPersistStreamInit}, {\b IPersistMemory}, {\b IPersistPropertyBag}, {\b IDataObject}, 
{\b ISpecifyPropertyPages}, {\b IPerPropertyBrowsing}, {\b IPropertyNotifySink} for font 
updates (not exposed via QueryInterface), {\b IOleCache}, {\b IProvideClassInfo2}, 
{\b IQuickActivate}, and {\b IPointerInactive}.  Further research may indicate that 
MFC requires implementation of one or more of these interfaces.\par 
At the present time, it does not seem to make sense for a DirectMusic Producer editor object 
to implement {\b IPersistStorage}, {\b IPersistStreamInit}, {\b IPersistMemory}, 
{\b IPersistPropertyBag}, {\b IDataObject}, {\b ISpecifyPropertyPages}, {\b IPerPropertyBrowsing}, 
and {\b IPropertyNotifySink} because the data and properties must exist and persist whether or 
not the editor object exists. \tab A Node object represents the life of data and must implement 
these types of interfaces.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns the CLSID of a Node's editor:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::GetEditorClsId( CLSID* pClsId )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pClsId == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *pClsId = CLSID_MotifEditor;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b GetEditorTitle}, {\b GetEditorWindow}, {\b SetEditorWindow}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetEditorTitle Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetEditorTitle(}{\b BSTR*} {\i pbstrTitle}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns title for {\b Node}'s editor window.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The title was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pbstrTitle} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the title was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrTitle}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the caller-allocated variable that 
receives a copy of the title.  The caller must free {\i pbstrTitle} with SysFreeString 
when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns the window title used for a Project Tree node's editor:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMyStyleNode::GetEditorTitle( BSTR* pbstrTitle )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab CString strTitle;\par 
\tab TCHAR achTitle[MID_BUFFER];\par 
\par 
\tab if( pbstrTitle == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab ::LoadString( theApp.m_hInstance, IDS_STYLE_TEXT, achTitle, MID_BUFFER );\par 
\tab strTitle  = achTitle;\par 
\tab strTitle += _T(": " );\par 
\tab strTitle += m_strName;\par 
\par 
\tab *pbstrTitle = strTitle.AllocSysString();\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b GetEditorClsId}, {\b GetEditorWindow}, {\b SetEditorWindow}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetEditorWindow Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetEditorWindow(}{\b HWND*} {\i phwndEditor}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns HWND of {\b Node}'s editor.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Editor's HWND was returned in {\i phwndEditor}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i phwndEditor} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i phwndEditor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to HWND of Node's editor.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method refers to the HWND that contains the editor object.\par 
The {\b Framework} embeds the editor object in an MDI child window.  It uses the 
{\b SetEditorWindow} to hand the HWND of the MDI child window to the Node 
object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns the HWND of the Node's editor:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::GetEditorWindow( HWND* phWndEditor )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( phWndEditor == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *phWndEditor = m_hWndEditor;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b GetEditorClsId}, {\b GetEditorTitle}, {\b SetEditorWindow}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetFirstChild Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetFirstChild(}{\b IDMUSProdNode**} {\i ppIFirstChildNode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdNode} interface 
pointer for the first child {\b Node} in this Node's list of children.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The first child Node was returned in {\i ppIFirstChildNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIFirstChildNode} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the first child Node could not be returned.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell This Node does not support children.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIFirstChildNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval]  Address of a variable to receive the 
requested {\b IDMUSProdNode} interface.  If an error occurs, the implementation sets 
{\i ppIFirstChildNode} to NULL.  On success, the caller is responsible for calling 
{\b Release} when this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Every {\b Node} object in the Project Tree takes on the responsibility of managing its 
children. The Framework has no knowledge of objects in the Project Tree and relies 
on {\b GetFirstChild} and {\b GetNextChild} when building the 
Project Tree in its {\b IDMUSProdFramework::AddNode}
 method.\par 
The implementation sets {\i ppIFirstChildNode} to NULL when the list is empty.\par 
A Node object that never has children under any circumstances can return E_NOTIMPL.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 In the following example, a Node returns an IDMUSProdNode interface to its first child:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CDirectoryNode::GetFirstChild( IDMUSProdNode** ppIFirstChildNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( ppIFirstChildNode == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *ppIFirstChildNode = NULL;\par 
\par 
\tab if( !m_lstNodes.IsEmpty() )\par 
\tab \{\par 
\tab \tab IDMUSProdNode* pINode = static_cast<IDMUSProdNode*>( m_lstNodes.GetHead() );\par 
\par 
\tab \tab if( pINode )\par 
\tab \tab \{\par 
\tab \tab \tab pINode->AddRef();\par 
\tab \tab \tab *ppIFirstChildNode = pINode;\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdFramework::AddNode}
, {\b IDMUSProdNode}, {\b GetNextChild},\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetNextChild Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetNextChild(}{\b IDMUSProdNode*} {\i pIChildNode}{\b , IDMUSProdNode**} {\i ppINextChildNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdNode} interface 
pointer for the next child {\b Node} in this Node's list of children.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The next child Node was returned in {\i ppINextChildNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppINextChildNode} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the next child Node could not be returned.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell This Node does not support children.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIChildNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in]  A pointer to the previous child Node in this Node's 
list of children.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppINextChildNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval]  Address of a variable to receive the 
requested {\b IDMUSProdNode} interface.  If an error occurs, the implementation sets 
{\i ppINextChildNode} to NULL.  On success, the caller is responsible for calling 
{\b Release} when this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Every {\b Node} object in the Project Tree takes on the responsibility of managing its 
children. The Framework has no knowledge of objects in the Project Tree and relies 
on {\b GetFirstChild} and {\b GetNextChild} when building the 
Project Tree in its {\b IDMUSProdFramework::AddNode}
 method.\par 
Returns the Node located after {\i pIChildNode} in this Node's list of children.\par 
The implementation sets {\i ppINextChildNode} ito NULL when the end of the list has 
been reached.\par 
A Node object that never has children under any circumstances can return E_NOTIMPL.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 In the following example, a Node returns an IDMUSProdNode interface to its next child:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CDirectoryNode::GetNextChild( IDMUSProdNode* pIChildNode, IDMUSProdNode** ppINextChildNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( ppINextChildNode == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *ppINextChildNode = NULL;\par 
\par 
\tab if( pIChildNode == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab IDMUSProdNode* pINode;\par 
\par 
\tab POSITION pos = m_lstNodes.GetHeadPosition();\par 
\par 
\tab while( pos )\par 
\tab \{\par 
\tab \tab pINode = m_lstNodes.GetNext( pos );\par 
\tab \tab if( pINode == pIChildNode )\par 
\tab \tab \{\par 
\tab \tab \tab if( pos )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab pINode = m_lstNodes.GetNext( pos );\par 
\par 
\tab \tab \tab \tab pINode->AddRef();\par 
\tab \tab \tab \tab *ppINextChildNode = pINode;\par 
\tab \tab \tab \}\par 
\tab \tab \tab break;\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdFramework::AddNode}
, {\b IDMUSProdNode}, {\b GetFirstChild},\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetNodeId Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetNodeId(}{\b GUID*} {\i pguid}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a GUID used to determine type of {\b Node}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Node ID was returned in {\i pguid}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pguid} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pguid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Node ID.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A GUID identifies the type of Node.  For example, all Style Nodes have the same 
GUID, or node ID.\par 
Nodes created through {\b IDMUSProdDocType::AllocNode}
, {\b IDMUSProdDocType::OnFileNew}
, or 
{\b IDMUSProdDocType::OnFileOpen}
 must have the same node ID that was passed to the 
{\b IDMUSProdDocType::AllocNode}
 method responsible for creating the Node.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns a Node's ID:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::GetNodeId( GUID* pguid )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pguid == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *pguid = GUID_MotifNode;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdDocType::AllocNode}
, {\b IDMUSProdDocType::OnFileNew}
, {\b IDMUSProdDocType::OnFileOpen}
, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetNodeImageIndex Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetNodeImageIndex(}{\b short*} {\i pnNbrFirstImage}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns index into Project Tree's image 
list.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Image list index was returned in {\i pnNbrFirstImage}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pnNbrFirstImage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the image list index.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The Project Tree maintains a list of images used when drawing nodes.  As nodes are 
inserted into the Project Tree, the Framework calls {\b GetNodeImageIndex} 
so that it can associate a pair of consecutive images in its list with the node 
being inserted.  The {\b UseOpenCloseImages} method determines whether 
the consecutive images pertain to non-selected/selected states or closed/opened states 
(folders).\par 
How does the method know what index to return?  The corresponding Component's 
{\b IDMUSProdComponent::Initialize}
 method must call {\b IDMUSProdFramework::AddNodeImageList}
 
to add its images to the Project Tree's image list.  {\b IDMUSProdFramework::AddNodeImageList}
 
returns an index to the first item in the newly added image list. 
{\b GetNodeImageIndex} should return an index based on the index received from 
{\b IDMUSProdFramework::AddNodeImageList}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 In the following example, a Motif node asks the Motif Component to return the 
'Motif node' index into the Project Tree's image list:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::GetNodeImageIndex( short* pnFirstImage )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab ASSERT( m_pComponent != NULL );\par 
\par 
\tab return( m_pComponent->GetMotifImageIndex(pnFirstImage) );\par 
\}\par 
\par 
HRESULT CMotifComponent::GetMotifImageIndex( short* pnFirstImage )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab *pnFirstImage = m_nFirstMotifImage;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 Here is the code which actually adds the images to the Project Tree's image list:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotifComponent::AddNodeImageLists( void )\par 
\{\par 
\tab CImageList lstImages;\par 
\tab HICON hIcon;\par 
\par 
\tab lstImages.Create( 16, 16, TRUE, 2, 0 );\par 
\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDR_MOTIF_DOCTYPE) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DeleteObject( hIcon );\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDI_MOTIF_DOCTYPE_SEL) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DeleteObject( hIcon );\par 
\par 
\tab if( !SUCCEEDED (m_pIFramework->AddNodeImageList( lstImages.Detach(), &m_nFirstMotifImage ) ) )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab lstImages.Create( 16, 16, TRUE, 2, 0 );\par 
\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDI_FOLDER) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DeleteObject( hIcon );\par 
\tab hIcon = ::LoadIcon( theApp.m_hInstance, MAKEINTRESOURCE(IDI_FOLDER_SEL) );\par 
\tab lstImages.Add( hIcon );\par 
\tab ::DeleteObject( hIcon );\par 
\par 
\tab if( !SUCCEEDED (m_pIFramework->AddNodeImageList( lstImages.Detach(), &m_nFirstFolderImage ) ) )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdComponent::Initialize}
, {\b IDMUSProdFramework::AddNodeImageList}
, {\b IDMUSProdNode}, {\b UseOpenCloseImages}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetNodeListInfo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetNodeListInfo(}{\b DMUSProdListInfo*} {\i pListInfo}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Fills a {\b DMUSProdListInfo} structure with information 
describing this Node.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Information was successfully placed in the DMUSProdListInfo structure.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The address in {\i pListInfo} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the information was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pListInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to a DMUSProdListInfo structure.  The caller must free 
pListInfo->bstrDescriptor and pListInfo->bstrName with SysFreeString when they are no longer 
needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Lists of specific types of Nodes can be built by calling {\b IDMUSProdProject::GetFirstFileByDocType}
 
and {\b IDMUSProdProject::GetNextFileByDocType}
.  After acquiring each {\b IDMUSProdNode} pointer, 
{\b GetNodeListInfo} can be called to obtain text for the combo box item. 
After a selection is made, {\b IDMUSProdFramework::FindDocRootNode}
 can be called to obtain an 
IDMUSProdNode pointer for the selected item.\par 
The caller must set DMUSProdListInfo.wSize to the size of the DMUSProdListInfo structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example fills a DMUSProdListInfo structure for a Style node in the Project Tree:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyle::GetNodeListInfo( DMUSProdListInfo* pListInfo )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab CString strDescriptor;\par 
\par 
\tab strDescriptor.Format( "%d/%d", m_wBPM, m_wBeat );\par 
\par 
\tab if( !(m_wClicksPerBeat % 3) )\par 
\tab \{\par 
\tab \tab strDescriptor += _T("  3");\par 
\tab \}\par 
\par 
\tab pListInfo->bstrName = m_strName.AllocSysString();\par 
\tab pListInfo->bstrDescriptor = strDescriptor.AllocSysString();\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetNodeName Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetNodeName(}{\b BSTR*} {\i pbstrName}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns text used for this {\b Node}'s label.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The name was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pbstrName} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the name was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the caller-allocated variable that 
receives a copy of the name.  The caller must free {\i pbstrName} with SysFreeString 
when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns the name of a Node in the Project Tree:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMyStyleNode::GetNodeName( BSTR* pbstrName )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pbstrName == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *pbstrName = m_strName.AllocSysString();\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b GetNodeNameMaxLength}, {\b ValidateNodeName}, {\b SetNodeName}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetNodeNameMaxLength Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetNodeNameMaxLength(}{\b short*} {\i pnMaxLength}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns max length of {\b Node}'s label.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Max length was returned in {\i pnMaxLength}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pnMaxLength} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pnMaxLength}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to max length of Node name.  A value of 
-1 prevents the Project Tree from editing the Node's name.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Max length does not include the NULL terminator.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns the max length of a Node's label:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 #define MAX_LENGTH_MOTIF_NAME\tab 15\tab // excluding NULL\par 
\par 
HRESULT CMotif::GetNodeNameMaxLength( short* pnMaxLength )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pnMaxLength == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *pnMaxLength = MAX_LENGTH_MOTIF_NAME;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 Set {\i pnMaxLength} to -1 when a Node cannot be renamed:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotifDocType::GetNodeNameMaxLength( short* pnMaxLength )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab *pnMaxLength = -1;\tab // Can't rename a Motif List folder\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b GetNodeName}, {\b ValidateNodeName}, {\b SetNodeName}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetObject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetObject(}{\b REFCLSID} {\i rclsid}{\b , REFIID} {\i riid}
{\b , void**} {\i ppvObject}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Retrieves a pointer to the requested interface 
for an object of type {\i rclsid}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The interface specified in {\i riid} was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppvObject} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the interface specified in {\i riid} could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rclsid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] CLSID of the requested object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Identifier of the requested interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppvObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive a pointer to the 
requested object.  On success, the caller is responsible for calling IUnknown::Release.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns interfaces to a DirectMusic Style object:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyle::GetObject( REFCLSID rclsid, REFIID riid, void** ppvObject )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab // Must be asking for an interface to a CLSID_DMStyle object\par 
\tab if( ::IsEqualCLSID( rclsid, CLSID_DMStyle ) )\par 
\tab \{\par 
\tab \tab if( m_pIDMStyle )\par 
\tab \tab \{\par 
\tab \tab \tab return m_pIDMStyle->QueryInterface( riid, ppvObject );\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab *ppvObject = NULL;\par 
\tab return E_NOINTERFACE;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetParentNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetParentNode(}{\b IDMUSProdNode**} {\i ppIParentNode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to this {\b Node}'s parent 
node.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The parent {\b IDMUSProdNode} was returned in {\i ppIParentNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIParentNode} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell DirectMusic Producer Component does not manage this Node's parent.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIParentNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the 
requested {\b IDMUSProdNode} interface.  On success, the caller is responsible for 
calling {\b Release} when this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method must call {\b AddRef} on {\i ppIParentNode} before returning.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns a Node's parent node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::GetParentNode( IDMUSProdNode** ppIParentNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab ASSERT( m_pIParentNode != NULL );\par 
\par 
\tab if( ppIParentNode == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab m_pIParentNode->AddRef();\par 
\tab *ppIParentNode = m_pIParentNode;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b SetParentNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::GetRightClickMenuId Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetRightClickMenuId(}{\b HINSTANCE*} {\i phInstance}{\b , UINT*} {\i pnResourceId}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns HINSTANCE and resource ID of 
{\b Node}'s right-click context menu.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell HINSTANCE and resource ID were returned in {\i phInstance} and {\i pnResourceId}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in either {\i phInstance} or {\i pnResourceId} is not valid. 
For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i phInstance}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Pointer to handle of the module containing the menu 
resource.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pnResourceId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Pointer to ID of the menu resource.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The menu resource exists in the Component DLL's resource file.  For example:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDM_MOTIF_NODE_RMENU MENU DISCARDABLE\par 
BEGIN\par 
\tab POPUP "Motif"\par 
\tab BEGIN\par 
\tab \tab MENUITEM SEPARATOR\par 
\tab \tab MENUITEM "Delete",                      IDM_DELETE\par 
\tab \tab MENUITEM "Rename...",                   IDM_RENAME\par 
\tab \tab MENUITEM SEPARATOR\par 
\tab \tab MENUITEM "Properties",                  IDM_PROPERTIES\par 
\tab END\par 
END\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following example returns the HINSTANCE and resource ID for the Node's right-click 
menu:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::GetRightClickMenuId( HINSTANCE* phInstance, UINT* pnMenuId )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( phInstance == NULL\par 
\tab ||  pnResourceId == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *phInstance = theApp.m_hInstance;\par 
\tab *pnMenuId   = IDM_MOTIF_NODE_RMENU;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b OnRightClickMenuInit}, {\b OnRightClickMenuSelect}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::InsertChildNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT InsertChildNode(}{\b IDMUSProdNode*} {\i pIChildNode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Instructs parent {\b Node} to insert the child 
Node specified in {\i pIChildNode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIChildNode} was inserted successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIChildNode} is not valid.  For example, it may be NULL.  An 
implementation may consider a {\i pIChildNode} value of NULL valid.  See comments.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell {\i pIChildNode} could not be inserted.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell This Node does not support children.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIChildNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdNode} interface to be 
inserted.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The implementation may choose to accept a {\i pIChildNode} value of NULL.  If accepted, 
a value of NULL signifies that a new Node is to be allocated, initialized and 
inserted.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example inserts a child Node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotifDocType::InsertChildNode( IDMUSProdNode* pIChildNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab ASSERT( m_pComponent != NULL );\par 
\tab ASSERT( m_pComponent->m_pIFramework != NULL );\par 
\par 
\tab if( pIChildNode == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab // Add Motif to Motif component list\par 
\tab pIChildNode->AddRef();\par 
\tab m_pComponent->m_lstMotifs.AddTail( (CMotif *)pIChildNode );\par 
\par 
\tab // Set DocRoot and parent Node of ALL children\par 
\tab theApp.SetNodePointers( pIChildNode, pIChildNode, (IDMUSProdNode *)this );\par 
\par 
\tab // Add Node to Project Tree\par 
\tab if( !SUCCEEDED ( m_pComponent->m_pIFramework->AddNode(pIChildNode, (IDMUSProdNode *)this) ) )\par 
\tab \{\par 
\tab \tab DeleteChildNode( pIChildNode, FALSE );\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab m_pComponent->m_pIFramework->SetModifiedFlag( (IDMUSProdNode *)this, TRUE );\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \sa160\sl240 \fs21\lang1033 The following implementation accepts a {\i pIChildNode} value of NULL:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleMotifs::InsertChildNode( IDMUSProdNode* pIChildNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab IDMUSProdDocType* pIDocType;\par 
\par 
\tab ASSERT( m_pStyleComponent != NULL );\par 
\tab ASSERT( m_pStyleComponent->m_pIFramework != NULL );\par 
\tab ASSERT( m_pStyle != NULL );\par 
\par 
\tab if( pIChildNode == NULL )\par 
\tab \{\par 
\tab \tab HRESULT hr;\par 
\par 
\tab \tab hr = m_pStyleComponent->m_pIFramework->FindDocTypeByNodeId( GUID_MotifNode, &pIDocType );\par 
\tab \tab if( SUCCEEDED ( hr ) )\par 
\tab \tab \{\par 
\tab \tab \tab // Create a new Motif\par 
\tab \tab \tab hr = pIDocType->AllocNode( GUID_MotifNode, &pIChildNode );\par 
\tab \tab \tab if( !SUCCEEDED ( hr ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab pIChildNode = NULL;\par 
\tab \tab \tab \}\par 
\par 
\tab \tab \tab pIDocType->Release();\par 
\tab \tab \}\par 
\par 
\tab \tab if( pIChildNode == NULL )\par 
\tab \tab \{\par 
\tab \tab \tab return E_OUTOFMEMORY;\par 
\tab \tab \}\par 
\tab \}\par 
\tab else\par 
\tab \{\par 
\tab \tab pIChildNode->AddRef();\par 
\tab \}\par 
\par 
\tab // add to CStyle Motif list\par 
\tab m_lstMotifs.AddTail( pIChildNode );\par 
\par 
\tab // Set DocRoot and parent Node of ALL children\par 
\tab theApp.SetNodePointers( pIChildNode, (IDMUSProdNode *)m_pStyle, (IDMUSProdNode *)this );\par 
\par 
\tab // Add Node to Project Tree\par 
\tab if( !SUCCEEDED ( m_pStyleComponent->m_pIFramework->AddNode(pIChildNode, (IDMUSProdNode *)this) ) )\par 
\tab \{\par 
\tab \tab DeleteChildNode( pIChildNode, FALSE );\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab m_pStyleComponent->m_pIFramework->SetModifiedFlag( (IDMUSProdNode *)this, TRUE );\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b DeleteChildNode}, {\b DeleteNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::OnNodeSelChanged Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnNodeSelChanged(}{\b BOOL} {\i fSelected}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Informs {\b Node} of changes to its selection 
state.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Always successful.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fSelected}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Specifies whether the Node is being selected or deselected. 
TRUE means the Node is being selected.  FALSE means the Node is being deselected.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example changes the state of the 'Transport Controls' toolbar:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CDirectMusicPattern::OnNodeSelChanged( BOOL fSelected )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( fSelected )\par 
\tab \{\par 
\tab \tab DWORD dwButtonState = BS_AUTO_UPDATE;\par 
\par 
\tab \tab if( m_pPatternCtrl != NULL\par 
\tab \tab &&  m_pPatternCtrl->m_pPatternDlg != NULL\par 
\tab \tab &&\tab m_pPatternCtrl->m_pPatternDlg->m_punkMIDIStripMgr != NULL )\par 
\tab \tab \{\par 
\tab \tab \tab dwButtonState |= BS_RECORD_ENABLED;\par 
\tab \tab \tab if( m_fRecordPressed )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab dwButtonState |= BS_RECORD_CHECKED;\par 
\tab \tab \tab \}\par 
\tab \tab \}\par 
\par 
\tab \tab theApp.m_pStyleComponent->m_pIConductor->SetActiveTransport( this, dwButtonState );\par 
\tab \tab theApp.m_pStyleComponent->m_pIConductor->SetTempo( this, m_pStyle->m_dblTempo, TRUE );\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b IDMUSProdConductor}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::OnRightClickMenuInit Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnRightClickMenuInit(}{\b HMENU} {\i hMenu}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Initializes state of menu items 
contained in {\b Node}'s right-click context menu.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Menu was initialized successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell Menu could not be initialized.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Handle to Node's right-click context menu.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Menu items can be inserted, removed or modified.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example initializes a Node's right-click menu:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::OnRightClickMenuInit( HMENU hMenu )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab CMenu menu;\par 
\tab CString strMenuText;\par 
\tab SHFILEINFO shfi;\par 
\par 
\tab ASSERT( m_pComponent != NULL );\par 
\tab ASSERT( m_pComponent->m_pIFramework != NULL );\par 
\par 
\tab IDMUSProdNode* pIThisNode = (IDMUSProdNode *)this;\par 
\tab IDMUSProdNode* pIDocRootNode;\par 
\par 
\tab if( !SUCCEEDED ( GetDocRootNode(&pIDocRootNode) ) )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab if( menu.Attach(hMenu) )\par 
\tab \{\par 
\tab \tab TCHAR achMenuText[MID_BUFFER];\par 
\par 
\tab \tab if( pIThisNode == pIDocRootNode )\par 
\tab \tab \{\par 
\tab \tab \tab ::LoadString( theApp.m_hInstance, IDS_REVERT_TEXT, achMenuText, MID_BUFFER );\par 
\tab \tab \tab menu.InsertMenu( 0, MF_BYPOSITION | MF_STRING, IDM_REVERT, achMenuText );\par 
\tab \tab \tab ::LoadString( theApp.m_hInstance, IDS_SAVE_AS_TEXT, achMenuText, MID_BUFFER );\par 
\tab \tab \tab menu.InsertMenu( 0, MF_BYPOSITION | MF_STRING, IDM_SAVEAS, achMenuText );\par 
\tab \tab \tab ::LoadString( theApp.m_hInstance, IDS_SAVE_TEXT, achMenuText, MID_BUFFER );\par 
\tab \tab \tab menu.InsertMenu( 0, MF_BYPOSITION | MF_STRING, IDM_SAVE, achMenuText );\par 
\par 
\tab \tab \tab CString strFileName;\par 
\tab \tab \tab BSTR bstrFileName;\par 
\par 
\tab \tab \tab if( SUCCEEDED ( m_pComponent->m_pIFramework->GetNodeFileName((IDMUSProdNode *)this, &bstrFileName) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab strFileName = bstrFileName;\par 
\tab \tab \tab \tab ::SysFreeString( bstrFileName );\par 
\tab \tab \tab \}\par 
\tab \tab \tab else\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab strFileName.Empty();\par 
\tab \tab \tab \}\par 
\par 
\tab \tab \tab if( strFileName.IsEmpty() )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab menu.EnableMenuItem( IDM_SAVE, (MF_GRAYED | MF_BYCOMMAND) );\par 
\tab \tab \tab \tab menu.EnableMenuItem( IDM_REVERT, (MF_GRAYED | MF_BYCOMMAND) );\par 
\tab \tab \tab \}\par 
\tab \tab \tab else\par 
\tab \tab \tab \{\par 
\par 
\tab \tab \tab \tab SHGetFileInfo( strFileName, 0,\par 
\tab \tab \tab \tab \tab \tab \tab    (SHFILEINFO *)&shfi, sizeof(SHFILEINFO),\par 
\tab \tab \tab \tab \tab \tab \tab    SHGFI_DISPLAYNAME );\par 
\tab \tab \tab \tab menu.GetMenuString( IDM_SAVE, strMenuText, MF_BYCOMMAND );\par 
\tab \tab \tab \tab strMenuText += _T(" ");\par 
\tab \tab \tab \tab strMenuText += shfi.szDisplayName;\par 
\tab \tab \tab \tab menu.ModifyMenu( IDM_SAVE, (MF_STRING | MF_BYCOMMAND), IDM_SAVE, strMenuText );\par 
\par 
\tab \tab \tab \tab menu.EnableMenuItem( IDM_SAVE, (MF_ENABLED | MF_BYCOMMAND) );\par 
\tab \tab \tab \tab menu.EnableMenuItem( IDM_REVERT, (MF_ENABLED | MF_BYCOMMAND) );\par 
\tab \tab \tab \}\par 
\tab \tab \}\par 
\tab \tab else\par 
\tab \tab \{\par 
\tab \tab \tab ::LoadString( theApp.m_hInstance, IDS_CREATE_MOTIF_FILE, achMenuText, MID_BUFFER );\par 
\tab \tab \tab menu.InsertMenu( 0, MF_BYPOSITION | MF_STRING, IDM_CREATE_FILE, achMenuText );\par 
\tab \tab \}\par 
\par 
\tab \tab menu.Detach();\par 
\tab \}\par 
\par 
\tab pIDocRootNode->Release();\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b GetRightClickMenuId}, {\b OnRightClickMenuSelect}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::OnRightClickMenuSelect Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnRightClickMenuSelect(}{\b long} {\i lCommandId}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Performs actions associated with 
{\b Node}'s right-click context menu.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Action associated with {\i lCommandId} was completed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell Action associated with {\i lCommandId} failed.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lCommandId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Command ID of the selected menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example handles menu selections for a Node's right-click menu:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::OnRightClickMenuSelect( long lCommandId )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab ASSERT( m_pComponent != NULL );\par 
\tab ASSERT( m_pComponent->m_pIFramework != NULL );\par 
\par 
\tab HRESULT hr = E_FAIL;\par 
\par 
\tab IDMUSProdNode* pIDocRootNode;\par 
\tab IDMUSProdNode* pIParentNode;\par 
\par 
\tab switch( lCommandId )\par 
\tab \{\par 
\tab \tab case IDM_SAVE:\par 
\tab \tab \tab if( SUCCEEDED ( GetDocRootNode(&pIDocRootNode) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab if( SUCCEEDED ( m_pComponent->m_pIFramework->SaveNode(pIDocRootNode) ) )\par 
\tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab hr = S_OK;\par 
\tab \tab \tab \tab \}\par 
\tab \tab \tab \tab pIDocRootNode->Release();\par 
\tab \tab \tab \}\par 
\tab \tab \tab break;\par 
\par 
\tab \tab case IDM_SAVEAS:\par 
\tab \tab \tab if( SUCCEEDED ( GetDocRootNode(&pIDocRootNode) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab if( SUCCEEDED ( m_pComponent->m_pIFramework->SaveNodeAsNewFile(pIDocRootNode) ) )\par 
\tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab hr = S_OK;\par 
\tab \tab \tab \tab \}\par 
\tab \tab \tab \tab pIDocRootNode->Release();\par 
\tab \tab \tab \}\par 
\tab \tab \tab break;\par 
\par 
\tab \tab case IDM_REVERT:\par 
\tab \tab \tab ...\par 
\tab \tab \tab ...\par 
\tab \tab \tab ...\par 
\tab \tab \tab hr = S_OK;\par 
\tab \tab \tab break;\par 
\par 
\tab \tab case IDM_CREATE_FILE:\par 
\tab \tab \tab ...\par 
\tab \tab \tab ...\par 
\tab \tab \tab ...\par 
\tab \tab \tab hr = S_OK;\par 
\tab \tab \tab break;\par 
\par 
\tab \tab case IDM_RENAME:\par 
\tab \tab \tab if( SUCCEEDED ( m_pComponent->m_pIFramework->EditNodeLabel((IDMUSProdNode *)this) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab hr = S_OK;\par 
\tab \tab \tab \}\par 
\tab \tab \tab break;\par 
\par 
\tab \tab case IDM_DELETE:\par 
\tab \tab \tab if( SUCCEEDED ( GetParentNode(&pIParentNode) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab pIParentNode->DeleteChildNode( (IDMUSProdNode *)this, TRUE );\par 
\tab \tab \tab \tab pIParentNode->Release();\par 
\tab \tab \tab \tab hr = S_OK;\par 
\tab \tab \tab \}\par 
\tab \tab \tab break;\par 
\tab \}\par 
\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b GetRightClickMenuId}, {\b OnRightClickMenuInit}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::PasteFromData Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT PasteFromData(}{\b IDataObject*} {\i pIDataObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Inserts data from {\i pIDataObject} 
into this {\b Node}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The paste operation completed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIDataObject} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the paste operation did not take place.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to an IDataObject interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example performs a paste operation:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleBands::PasteFromData( IDataObject* pIDataObject )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pIDataObject == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab // Do not continue unless CStyleBands can accept data\par 
\tab BOOL fWillSetReference;\par 
\tab if( CanPasteFromData( pIDataObject, &fWillSetReference ) != S_OK )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab // Let CDirectMusicStyle do the work\par 
\tab return m_pStyle->PasteFromData( pIDataObject );\par 
\}\par 
\par 
HRESULT CDirectMusicStyle::PasteFromData( IDataObject* pIDataObject )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pIDataObject == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab // Create a new CDllJazzDataObject to get the data object's stream.\par 
\tab // CDllJazzDataObject implements IDataObject and provides a few convenience functions.\par 
\tab CDllJazzDataObject* pDataObject = new CDllJazzDataObject();\par 
\tab if( pDataObject == NULL )\par 
\tab \{\par 
\tab \tab return E_OUTOFMEMORY;\par 
\tab \}\par 
\par 
\tab HRESULT hr = E_FAIL;\par 
\par 
\tab if( SUCCEEDED (\tab pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfBand ) ) )\par 
\tab \{\par 
\tab \tab // Handle CF_BAND format\par 
\tab \tab hr = PasteCF_BAND( pDataObject, pIDataObject, NULL );\par 
\tab \}\par 
\par 
\tab else if( SUCCEEDED ( pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfBandList ) ) )\par 
\tab \{\par 
\tab \tab // Handle CF_BANDLIST format\par 
\tab \tab hr = PasteCF_BANDLIST( pDataObject, pIDataObject, NULL );\par 
\tab \}\par 
\par 
\tab else if( SUCCEEDED ( pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfBandTrack ) ) )\par 
\tab \{\par 
\tab \tab // Handle CF_BANDTRACK format\par 
\tab \tab hr = PasteCF_BANDTRACK( pDataObject, pIDataObject, NULL );\par 
\tab \}\par 
\par 
\tab else if( SUCCEEDED ( pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfTimeline ) ) )\par 
\tab \{\par 
\tab \tab // Handle CF_TIMELINE format\par 
\tab \tab hr = PasteCF_TIMELINE( pDataObject, pIDataObject, NULL );\par 
\tab \}\par 
\par 
\tab else if( SUCCEEDED ( pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfMotif ) ) )\par 
\tab \{\par 
\tab \tab // Handle CF_MOTIF format\par 
\tab \tab hr = PasteCF_MOTIF( pDataObject, pIDataObject, NULL );\par 
\tab \}\par 
\par 
\tab else if( SUCCEEDED ( pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfMotifList ) ) )\par 
\tab \{\par 
\tab \tab // Handle CF_MOTIFLIST format\par 
\tab \tab hr = PasteCF_MOTIFLIST( pDataObject, pIDataObject, NULL );\par 
\tab \}\par 
\par 
\tab else if( SUCCEEDED ( pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfPattern ) ) )\par 
\tab \{\par 
\tab \tab // Handle CF_PATTERN format\par 
\tab \tab hr = PasteCF_PATTERN( pDataObject, pIDataObject, NULL );\par 
\tab \}\par 
\par 
\tab else if( SUCCEEDED ( pDataObject->IsClipFormatAvailable( pIDataObject, theApp.m_pStyleComponent->m_cfPatternList ) ) )\par 
\tab \{\par 
\tab \tab // Handle CF_PATTERNLIST format\par 
\tab \tab hr = PasteCF_PATTERNLIST( pDataObject, pIDataObject, NULL );\par 
\tab \}\par 
\par 
\tab RELEASE( pDataObject );\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b CreateDataObject}, {\b CanPasteFromData}, {\b CanChildPasteFromData}, {\b ChildPasteFromData}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::SetDocRootNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetDocRootNode(}{\b IDMUSProdNode*} {\i pIDocRootNode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets this {\b Node}'s DocRoot node.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIDocRootNode} was stored successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIDocRootNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell Node is not part of a file.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the new DocRoot {\b IDMUSProdNode} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A DocRoot node is the top {\b Node} of a file.  For example, the Style node of a 
DirectMusic Style would be considered the DocRoot node of a Style file.  The Band node 
of a DirectMusic Band would be considered the DocRoot node of a Band file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example sets a Node's DocRoot node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::SetDocRootNode( IDMUSProdNode* pIDocRootNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pIDocRootNode == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab m_pIDocRootNode = pIDocRootNode;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdNode}, {\b GetDocRootNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::SetEditorWindow Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetEditorWindow(}{\b HWND} {\i hWndEditor}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets HWND of {\b Node}'s editor.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i hWndEditor} was stored successfully.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hWndEditor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] HWND of Node's editor.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method refers to the HWND that contains the editor object.\par 
The {\b Framework} embeds the editor object in an MDI child window.  It uses the 
{\b SetEditorWindow} to hand the HWND of the MDI child window to the Node 
object.  The Framework calls {\b SetEditorWindow} to set the HWND to NULL 
when the MDI child window closes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example stores the HWND of the Node's editor:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::SetEditorWindow( HWND hWndEditor )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab m_hWndEditor = hWndEditor;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b GetEditorClsId}, {\b GetEditorTitle}, {\b GetEditorWindow}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::SetNodeName Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetNodeName(}{\b BSTR} {\i bstrName}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets text used for a {\b Node}'s label.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell New name was stored successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] New name.  This method must free {\i bstrName} with SysFreeString 
when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b GetNodeNameMaxLength} and {\b ValidateNodeName} are called 
prior to {\b SetNodeName}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example sets the name of a Node in the Project Tree:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::SetNodeName( BSTR bstrName )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab m_strName = bstrName;\par 
\tab ::SysFreeString( bstrName );\par 
\par 
\tab SetModifiedFlag( TRUE );\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b GetNodeName}, {\b GetNodeNameMaxLength}, {\b ValidateNodeName}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::SetParentNode Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetParentNode(}{\b IDMUSProdNode*} {\i pIParentNode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets this {\b Node}'s parent node.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIParentNode} was stored successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIParentNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell DirectMusic Producer Component does not manage this Node's parent.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIParentNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the new parent {\b IDMUSProdNode} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example sets a Node's parent node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::SetParentNode( IDMUSProdNode* pIParentNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pIParentNode == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab m_pIParentNode = pIParentNode;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b GetParentNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::UseOpenCloseImages Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT UseOpenCloseImages(}{\b BOOL*} {\i pfUseOpenCloseImages}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines whether {\b Node}'s Project Tree 
images follow open/close paradigm (folder) or select/non-select paradigm.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Value was returned in {\i pfUseOpenCloseImages}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pfUseOpenCloseImages} is not valid.  For example, it 
may be NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pfUseOpenCloseImages}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to value indicating whether to 
follow open/close paradigm when drawing node's Project Tree images.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Set {\i pfUseOpenCloseImages} to TRUE if the Node is a Folder node, otherwise set 
{\i pfUseOpenCloseImages} to FALSE.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example instructs the Project Tree to use a select/non-select paradigm 
when drawing the node's images:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::UseOpenCloseImages( BOOL* pfUseOpenCloseImages )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pfUseOpenCloseImages == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *pfUseOpenCloseImages = FALSE;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b GetNodeImageIndex}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNode::ValidateNodeName Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT ValidateNodeName(}{\b BSTR} {\i bstrName}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Validates new text for {\b Node}'s label.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell New text was accepted.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell New text was rejected.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the new text could not be validated.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bstrName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] New name.  This method must free {\i bstrName} with SysFreeString 
when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The Framework strips leading and trailing spaces from the text before calling 
{\b ValidateNodeName}.\par 
{\b ValidateNodeName} gives a Node the opportunity to reject the new label 
that was entered through the Project Tree control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example accepts any text for the Node's new label:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMotif::ValidateNodeName( BSTR bstrName )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab CString strName;\par 
\par 
\tab strName = bstrName;\par 
\tab ::SysFreeString( bstrName );\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNode}, {\b GetNodeName}, {\b GetNodeNameMaxLength}, {\b SetNodeName}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNodeDrop Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The {\b IDMUSProdNodeDrop} interface allows files dragged from Explorer to be dropped 
on a {\b Node} in the Project Tree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnDropFiles}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Node's handler for WM_DROPFILES message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b Project} Object\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNodeDrop::OnDropFiles Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnDropFiles(}{\b HANDLE} {\i hDropInfo}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allows files dragged from Explorer 
to be dropped on a {\b Node} in the Project Tree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The files were dropped successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and one or more files could not be dropped.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDropInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Handle to an internal structure describing the dropped 
files.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNodeDrop} should be implemented by Node objects that want to provide a 
handler for the WM_DROPFILES message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example allows *.wav files to be dragged from Explorer and 
dropped on a Wave folder in a DLS Collection:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CCollectionWaves::OnDropFiles( HANDLE handleDropInfo )\par 
\{\par 
\tab AFX_MANAGE_STATE( _afxModuleAddrThis );\par 
\par 
\tab HDROP hDropInfo = (HDROP)handleDropInfo;\par 
\par 
\tab UINT nFiles = ::DragQueryFile( hDropInfo, (UINT)-1, NULL, 0 );\par 
\par 
\tab for( UINT iFile = 0 ;  iFile < nFiles ;  iFile++ )\par 
\tab \{\par 
\tab \tab TCHAR szFileName[_MAX_PATH];\par 
\tab \tab ::DragQueryFile( hDropInfo, iFile, szFileName, _MAX_PATH );\par 
\par 
\tab \tab if( FAILED ( InsertWaveFile( szFileName ) ) )\par 
\tab \tab \{\par 
\tab \tab \tab CString strErrMsg;\par 
\tab \tab \tab strErrMsg.Format( IDS_ERR_FAILED_WAVE_INSERT, szFileName );\par 
\tab \tab \tab AfxMessageBox(strErrMsg);\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab ::DragFinish( hDropInfo );\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNodeDrop}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNotifyCPt Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The Conductor uses this interface to communicate performance 
notification events to interested editors.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnNotify}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Called when a notification is available.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b IDMUSProdConductor::RegisterNotify}
, {\b IDMUSProdConductor::UnregisterNotify}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNotifyCPt::OnNotify Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnNotify(}{\b ConductorNotifyEvent*} {\i pConductorNotifyEvent}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called when a notification 
is available for an editor to process.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pConductorNotifyEvent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Contains a pointer to the {\b ConductorNotifyEvent} 
structure that contains the notification event.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The implementation of this method should take as little time as possible, to ensure timely 
delivery of notifications to all editors.  If too much time is spent here, notification messages 
will be lost.\line  
This method is called in a thread separate from the application's main message 
processing thread.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNotifyCPt}, {\b ConductorNotifyEvent}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNotifySink Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 If a {\b Node} object implementing {\b IDMUSProdNode} needs to know when a file it references 
changes it must also implement {\b IDMUSProdNotifySink} and make itself known to the Framework 
via a call to {\b IDMUSProdFramework::AddToNotifyList}
.  Once this is done, the Framework 
notifies the object of changes via the method in the {\b IDMUSProdNotifySink} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework::AddToNotifyList}
, {\b IDMUSProdFramework::RemoveFromNotifyList}
, {\b IDMUSProdFramework::NotifyNodes}
\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnUpdate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The Framework calls this method to notify interested nodes when 
the state of {\i pIDocRootNode} changes.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdNotifySink::OnUpdate Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnUpdate(}{\b IDMUSProdNode*} {\i pIDocRootNode}{\b , GUID} {\i guidUpdateType}
{\b , VOID*} {\i pData}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 The Framework calls this method to notify 
interested {\b Node}s when the state of {\i pIDocRootNode} changes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Always succeeds.  The Framework does not check the return code of 
{\b OnUpdate}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the changed DocRoot's {\b IDMUSProdNode} 
interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guidUpdateType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Identifies type of change.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to additional data associated with the change.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If a {\b Node} object implementing {\b IDMUSProdNode} needs to know when a file it references 
changes it must also implement {\b IDMUSProdNotifySink} and make itself known to the Framework 
via a call to {\b IDMUSProdFramework::AddToNotifyList}
.  Once this is done, the Framework 
notifies the object of changes via the {\b OnUpdate} method in the 
{\b IDMUSProdNotifySink} interface.\par 
{\i pIDocRootNode} is a pointer to the DocRoot node of the file that just changed.  A 
DocRoot node is the one and only child node of a File node.  DocRoot nodes mark the place 
in the Project Tree hierarchy where responsibility shifts from the {\b Framework} to the 
{\b Component}.\par 
{\i pData} may be NULL.\par 
Valid {\i guidUpdateType} and {\i pData} values must be defined and documented in the .h 
and .lib files distributed by the Component supporting nodes of type {\i pIDocRootNode}. 
For example, the Style Component's StyleDesigner.h and StyleDesignerGuid.lib files 
must contain and document the various {\i guidUpdateType} and {\i pData} values it 
uses to communicate Style file changes.\par 
The following list contains notifications provided by the Framework:\par 
\tab {\i guidUpdateType} \tab \tab \tab {\i pData} \tab \tab \tab {\i Description}\par 
\tab FRAMEWORK_FileDeleted \tab \tab NULL \tab \tab \tab File deleted by user and is no longer in the Project Tree.\par 
\tab FRAMEWORK_FileReplaced \tab IDMUSProdNode* pINewDocRoot \tab 'Revert to Saved' caused DocRoot pointer to change.\par 
\tab FRAMEWORK_FileClosed \tab \tab NULL \tab \tab \tab File closed normally and is no longer in the Project Tree.\par 
\tab FRAMEWORK_FileNameChange \tab NULL \tab \tab \tab File was renamed via the Project Tree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNotifySink}, {\b IDMUSProdFramework::AddToNotifyList}
, {\b IDMUSProdFramework::RemoveFromNotifyList}
, {\b IDMUSProdFramework::NotifyNodes}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPChannelName Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allows PChannel names to be assigned on a {\b Project} by Project basis.\par 
A pointer to a Project's IDMUSProdPChannelName interface can be obtained via its 
{\b IDMUSProdProject::QueryInterface}
 method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Project} Object, {\b IDMUSProdProject}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetPChannelName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Gets the PChannel name associated with {\i dwPChannel}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetPChannelName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the PChannel name associated with {\i dwPChannel}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPChannelName::GetPChannelName Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetPChannelName(}{\b DWORD} {\i dwPChannel}{\b , WCHAR*} {\i pwszName}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Gets the PChannel name associated 
with {\i dwPChannel}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The PChannel name was returned in {\i pwszName}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the PChannel name could not be returned.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed for {\i pwszName}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwPChannel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] PChannel number.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pwszName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
PChannel name.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Producer allows PChannel names to be assigned on a {\b Project} by Project basis.  A 
pointer to a Project's {\b IDMUSProdPChannelName} interface can be obtained via 
{\b IDMUSProdProject::QueryInterface}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The names of broadcast PChannels cannot be changed, and a fixed name will be returned 
for these PChannels.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example gets the name associated with PChannel 2:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdProject* pIProject;\par 
IDMUSProdPChannelName* pIPChannelName;\par 
\par 
// Get the Project that this node belongs to...\par 
if( SUCCEEDED ( m_pIFramework->FindProject( pINode, &pIProject ) ) )\par 
\{\par 
\tab if( SUCCEEDED( pIProject->QueryInterface( IID_IDMUSProdPChannelName, (void**)&pIPChannelName ) ) )\par 
\tab \{\par 
\tab \tab WCHAR wstrPChannelName[MAX_PATH];\par 
\par 
\tab \tab if( SUCCEEDED ( pIPChannelName->GetPChannelName( 2, wstrPChannelName ) ) )\par 
\tab \tab \{\par 
\tab \tab \tab ...\par 
\tab \tab \tab ...\par 
\tab \tab \tab ...\par 
\tab \tab \}\par 
\par 
\tab \tab pIPChannelName->Release();\par 
\tab \}\par 
\par 
\tab pIProject->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPChannelName}, {\b SetPChannelName}, {\b IDMUSProdProject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPChannelName::SetPChannelName Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetPChannelName(}{\b DWORD} {\i dwPChannel}{\b , WCHAR*} {\i pwszName}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the PChannel name associated 
with {\i dwPChannel}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The PChannel name was updated successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the PChannel name could not be changed.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed for {\i pwszName}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell A broadcast PChannel was passed for {\i dwPChannel}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwPChannel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] PChannel number.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pwszName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] PChannel's new name.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Producer allows PChannel names to be assigned on a {\b Project} by Project basis.  A 
pointer to a Project's {\b IDMUSProdPChannelName} interface can be obtained via 
{\b IDMUSProdProject::QueryInterface}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The names of broadcast PChannels cannot be changed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example sets the name associated with PChannel 2:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdProject* pIProject;\par 
IDMUSProdPChannelName* pIPChannelName;\par 
\par 
// Get the Project that this node belongs to...\par 
if( SUCCEEDED ( m_pIFramework->FindProject( pINode, &pIProject ) ) )\par 
\{\par 
\tab if( SUCCEEDED( pIProject->QueryInterface( IID_IDMUSProdPChannelName, (void**)&pIPChannelName ) ) )\par 
\tab \{\par 
\tab \tab WCHAR wstrOldPChannelName[MAX_PATH];\par 
\tab \tab WCHAR wstrNewPChannelName[MAX_PATH];\par 
\par 
\tab \tab if( SUCCEEDED( pIPChannelName->GetPChannelName( 2, wstrOldPChannelName) ) )\par 
\tab \tab \{\par 
\tab \tab \tab CString strOldPChannelName = wstrOldPChannelName;\par 
\par 
\tab \tab \tab if( strOldPChannelName.Compare( strNewPChannelName ) != 0 )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab MultiByteToWideChar( CP_ACP, 0, strNewPChannelName, -1, wstrNewPChannelName, MAX_PATH );\par 
\tab \tab \tab \tab pIPChannelName->SetPChannelName( 2, wstrNewPChannelName );\par 
\tab \tab \tab \}\par 
\tab \tab \}\par 
\par 
\tab \tab pIPChannelName->Release();\par 
\tab \}\par 
\par 
\tab pIProject->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPChannelName}, {\b GetPChannelName}, {\b IDMUSProdProject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPersistInfo Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 This interface provides access to additional information for consideration when 
persisting objects through an IStream interface.\par 
{\b IDMUSProdFramework} provides two methods which return pointers to an IStream interface: 
{\b IDMUSProdFramework::AllocFileStream}
 and {\b IDMUSProdFramework::AllocMemoryStream}
. 
Streams returned by these methods also implement the {\b IDMUSProdPersistInfo} 
interface for the purpose of making available additional information about the stream. 
In particular, these methods associate a file type and data format with the streams they 
create.  In addition, {\b IDMUSProdFramework::AllocFileStream}
 associates a target directory 
node with each stream having a {\i dwDesiredAccess} of GENERIC_READ.\par 
An object can obtain a pointer to a stream's {\b IDMUSProdPersistInfo} interface via a call to 
{\b IStream::QueryInterface}
.  {\b GetStreamInfo} returns the {\i ftFileType}, 
{\i guidDataFormat}, and {\i pITargetDirectoryNode} associated with a stream.  {\i pITargetDirectory} 
will always be NULL for streams created via {\b IDMUSProdFramework::AllocMemoryStream}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetFileName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the path/filename of the file associated with 
this stream.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetStreamInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Fills a DMUSProdStreamInfo structure with information about 
this stream.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework::AllocFileStream}
, {\b IDMUSProdFramework::AllocMemoryStream}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPersistInfo::GetFileName Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetFileName(}{\b BSTR*} {\i pbstrFileName}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the path/filename of the file 
associated with this stream.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The filename was returned in {\i pbstrFileName}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pbstrFileName} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the filename was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrFileName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval]  Pointer to the caller-allocated variable 
that receives the copy of the filename.  The caller must 
free {\i pbstrFileName} with SysFreeString when it is no longer 
needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPersistInfo}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPersistInfo::GetStreamInfo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetStreamInfo(}{\b DMUSProdStreamInfo*} {\i pStreamInfo}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Fills a {\b DMUSProdStreamInfo} 
structure with information about this stream.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The stream information was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pStreamInfo} is not valid. For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pStreamInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to a {\b DMUSProdStreamInfo} structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Streams created through either {\b IDMUSProdFramework::AllocFileStream}
 or 
{\b IDMUSProdFramework::AllocMemoryStream}
 carry information communicating their file type 
and data format.  {\b GetStreamInfo} provides the means for an object 
to obtain this information so that it can determine how to persist itself.\par 
The following file types may be returned in DMUSProdStreamInfo.ftFileType:\par 
FT_DESIGN: \tab Design-time saves may include chunks of UI related information only used 
during editing.\par 
FT_RUNTIME: \tab Runtime saves are invoked to create files for distribution.  Data should 
be saved in its most compact form.\par 
FT_UNKNOWN: \tab FT_UNKNOWN is only valid when {\b IDMUSProdFramework::AllocFileStream}
 
is called to open a file.\par 
DMUSProdStreamInfo.guidDataFormat indicates the specific format to be used when writing data 
into the stream.  Objects may create additional GUIDs to communicate specific data formats they 
need when persisting data.  The {\b Framework} supplies the following GUIDs for general use:\par 
GUID_CurrentVersion: \tab \tab Current version of the file format.\par 
GUID_CurrentVersion_OnlyUI: \tab Current version of the file format (UI state information only).\par 
GUID_DirectMusicObject: \tab \tab Stream being prepared to persist into a DirectMusic object.\par 
GUID_Bookmark: \tab \tab \tab Framework uses this GUID when creating streams to include in bookmarks.\par 
GUID_AllZeros: \tab \tab \tab GUID_AllZeros is only valid when {\b IDMUSProdFramework::AllocFileStream}
 
is called to open a file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPersistInfo}, {\b IDMUSProdFramework::AllocFileStream}
, {\b IDMUSProdFramework::AllocMemoryStream}
, {\b IDMUSProdDocType}, {\b IDMUSProdDocType::IsFileTypeExtension}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPortNotify Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The Conductor uses this interface to notify interested components when 
the user changes the output port configuration.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnOutputPortsChanged}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Called after the user changes which ports are active.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnOutputPortsRemoved}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Called when all output ports are removed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 When the output port configuration is changed, disabled, or re-enabled, the appropriate method 
will be called on each {\b IDMUSProdComponent} that supports this interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor} {\b IDMUSProdComponent}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPortNotify::OnOutputPortsChanged Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnOutputPortsChanged(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called after the output 
port configuration has been changed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method is called when:\line  
1. The user switches to the other port configuration by pressing the [1] or [2] button.\line  
2. The user changed the port configuration with the Port Configuration editor.\line  
3. Output is enabled by depressing the MIDI Enable button.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The UI will be frozen until this method returns.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b OnOutputPortsRemoved} will always be called prior to this method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following code gets the current port configuration:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDirectMusicPort *pPort;\par 
DMUS_PORTCAPS dmPortCaps;\par 
\par 
for(int iGroup = 0; iGroup <= 999/16; iGroup++)\par 
\{\par 
\tab pPort = NULL;\par 
\tab if( SUCCEEDED( m_pIPerformance->PChannelInfo( iGroup * 16, &pPort, NULL, NULL ) )\par 
\tab  && (pPort != NULL) )\par 
\tab \{\par 
\tab \tab // Check if the port supports DLS\par 
\tab \tab dmPortCaps.dwSize = sizeof(dmPortCaps);\par 
\tab \tab if( SUCCEEDED( pPort->GetCaps( &dmPortCaps ) ) )\par 
\tab \tab \{\par 
\tab \tab \tab if( dmPortCaps.dwFlags & DMUS_PC_DLS )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab // Port supports DLS - add it to our list\par 
\tab \tab \tab \}\par 
\tab \tab \}\par 
\par 
\tab \tab // Release our reference on the port\par 
\tab \tab pPort->Release();\par 
\tab \}\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPortNotify} {\b OnOutputPortsRemoved}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPortNotify::OnOutputPortsRemoved Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnOutputPortsRemoved(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called after all output 
ports have been removed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method is called when:\line  
1. The user changed the port configuration with the Port Configuration editor.\line  
2. Output is disabled by depressing the MIDI Enable button.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The UI will be frozen until this method returns.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b OnOutputPortsChanged} will be called after the output ports have 
been added to the performance.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPortNotify} {\b OnOutputPortsChanged}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdProject Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Allows DirectMusic Producer {\b Component}s to interact with other files and/or {\b Node}s 
in a specific {\b Project}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework::GetFirstProject}
 and {\b IDMUSProdFramework::GetNextProject}
 enumerate 
the currently loaded Projects.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Project} Object, {\b IDMUSProdFramework::FindProject}
, {\b IDMUSProdFramework::GetFirstProject}
, {\b IDMUSProdFramework::GetNextProject}
\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the Project name.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetGUID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the Project GUID.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetFirstFileByDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdNode interface pointer for the first File node 
in the Project Tree whose corresponding DocType matches {\i pIDocType}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetNextFileByDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an IDMUSProdNode interface pointer for the next File node 
in the Project Tree whose corresponding DocType matches that of {\i pIFileNode}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdProject::GetFirstFileByDocType Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetFirstFileByDocType(}{\b IDMUSProdDocType*} {\i pIDocType}{\b , IDMUSProdNode**} {\i ppIFirstFileNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdNode} interface 
pointer for the first File {\b Node} in the {\b Project} Tree whose corresponding 
{\b DocType} matches {\i pIDocType}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The first File Node was returned in {\i ppIFirstFileNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell A match was not found.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIFirstFileNode} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the first File Node could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] {\b DocType} object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIFirstFileNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the 
requested {\b IDMUSProdNode} interface.  If an error occurs, 
the implementation sets {\i ppIFirstFileNode} 
to NULL.  On success, the caller is responsible 
for calling {\b IDMUSProdNode::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i ppIFirstFileNode} is set to NULL if a match is not found.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example :\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdProject}, {\b GetNextFileByDocType}, {\b IDMUSProdFramework}, {\b IDMUSProdFramework::FindProject}
, {\b IDMUSProdFramework::GetFirstProject}
, {\b IDMUSProdFramework::GetNextProject}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdProject::GetGUID Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetGUID(}{\b GUID*} {\i pguid}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the GUID of a DirectMusic Producer 
{\b Project}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The GUID was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pguid} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the GUID was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pguid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the caller-allocated variable 
that receives a copy of the Project's GUID.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example retrieves the GUID of a DirectMusic Producer Project:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdProject* pIProject;\par 
GUID guidProject;\par 
\par 
pIProject->GetGUID( &guidProject );\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdProject}, {\b IDMUSProdFramework}, {\b IDMUSProdFramework::FindProject}
, {\b IDMUSProdFramework::GetFirstProject}
, {\b IDMUSProdFramework::GetNextProject}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdProject::GetName Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetName(}{\b BSTR*} {\i pbstrName}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the name of a DirectMusic Producer 
{\b Project}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The name was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pbstrName} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the name was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the caller-allocated variable 
that receives a copy of the name.  The caller must free 
{\i pbstrName} with SysFreeString when it is no longer 
needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example retrieves the name of a DirectMusic Producer Project:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdProject* pIProject;\par 
CString strName;\par 
BSTR bstrName;\par 
\par 
pIProject->GetName( &bstrName );\par 
strName = bstrName;\par 
::SysFreeString( bstrName );\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdProject}, {\b IDMUSProdFramework}, {\b IDMUSProdFramework::FindProject}
, {\b IDMUSProdFramework::GetFirstProject}
, {\b IDMUSProdFramework::GetNextProject}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdProject::GetNextFileByDocType Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetNextFileByDocType(}{\b IDMUSProdNode*} {\i pIFileNode}{\b , IDMUSProdNode**} {\i ppINextFileNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an {\b IDMUSProdNode} interface 
pointer for the next File {\b Node} in the {\b Project} Tree whose corresponding 
{\b DocType} matches that of {\i pIFileNode}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The next File Node was returned in {\i ppINextFileNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The end of the list was reached.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppINextFileNode} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIFileNode} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the next File Node could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIFileNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] A pointer to the previous File Node.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppINextFileNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the 
requested {\b IDMUSProdNode} interface.  If an error occurs, 
the implementation sets {\i ppINextFileNode} 
to NULL.  On success, the caller is responsible 
for calling {\b IDMUSProdNode::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the next File Node located after {\i pIFileNode} whose corresponding DocType 
matches that of {\i pIFileNode}.\par 
{\i ppINextFileNode} is set to NULL when another match cannot be found.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdProject}, {\b GetFirstFileByDocType}, {\b IDMUSProdFramework}, {\b IDMUSProdFramework::FindProject}
, {\b IDMUSProdFramework::GetFirstProject}
, {\b IDMUSProdFramework::GetNextProject}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageManager Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The {\b IDMUSProdPropPageManager} interface defines interaction with the Framework's 
property sheet control.  It also contains methods for setting and refreshing the data 
displaying in the property sheet control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\b Framework} exports an {\b IDMUSProdPropSheet} interface so that DirectMusic Producer 
{\b Component}s can hook into its global property sheet control.  A pointer to the Framework's 
IDMUSProdPropSheet interface can be obtained via {\b IDMUSProdFramework::QueryInterface}
.\par 
In order to use the global property sheet, a Component must implement {\b IDMUSProdPropPageManager}. 
The object behind this interface, the {\b PropPageManager} object, manages the set of pages 
placed in the property sheet as well as the data displayed in those pages.\par 
The PropPageManager uses the {\b IDMUSProdPropPageObject} interface to interact with the object 
whose data is being shown in its pages.  Calls to {\b SetObject} set 
the PropPageManager's current object so that the same set of pages can be used to display 
data for different objects.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetPropertySheetTitle}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns text to be used for the title of the 
Framework's property sheet control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetPropertySheetPages}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns an array of pages to be placed in the 
Framework's property sheet control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnRemoveFromPropertySheet}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Called when the PropPageManager object is 
being removed from the Framework's property sheet control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the object being displayed by the PropPageManager.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RemoveObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Removes the specified object from the PropPageManager.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT IsEqualObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether the specified object is being displayed 
by the PropPageManager.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RefreshData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Notifies the PropPageManager to refresh its data and redraw 
the active page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT IsEqualPageManagerGUID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether the specified GUID equals 
the PropPageManager's GUID.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageManager::GetPropertySheetPages Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetPropertySheetPages(}{\b IDMUSProdPropSheet*} {\i pIPropSheet}{\b , LONG*} {\i hPropSheetPage[]}
{\b , short*} {\i pnNbrPages}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns an array of pages to be placed in the {\b Framework}'s property sheet control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The array of pages was returned in {\i hPropSheetPage}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i hPropSheetPage} or {\i pnNbrPages} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIPropSheet} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the array of pages was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIPropSheet}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the Framework's {\b IDMUSProdPropSheet} 
interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hPropSheetPage[]}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Pointer to an array of HPROPSHEETPAGEs.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pnNbrPages}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Pointer to number of elements in the {\i hPropSheetPage} 
array.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method is called from within {\b IDMUSProdPropSheet::SetPageManager}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example creates and returns an array of HPROPSHEETPAGEs:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CProjectPropPageManager::GetPropertySheetPages( IDMUSProdPropSheet* pIPropSheet, LONG* hPropSheetPage[], short* pnNbrPages )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( (hPropSheetPage == NULL)\par 
\tab ||  (pnNbrPages == NULL) )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab if( pIPropSheet == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab m_pIPropSheet = pIPropSheet;\par 
\tab m_pIPropSheet->AddRef();\par 
\par 
\tab hPropSheetPage[0] = NULL;\par 
\tab *pnNbrPages = 0;\par 
\par 
\tab // Add General tab\par 
\tab HPROPSHEETPAGE hPage;\par 
\tab short nNbrPages = 0;\par 
\par 
\tab m_pTabGeneral = new CProjectPropTabGeneral();\par 
\tab if( m_pTabGeneral )\par 
\tab \{\par 
\tab \tab hPage = ::CreatePropertySheetPage( &m_pTabGeneral->m_psp );\par 
\tab \tab if( hPage )\par 
\tab \tab \{\par 
\tab \tab \tab hPropSheetPage[nNbrPages] = (LONG *)hPage;\par 
\tab \tab \tab nNbrPages++;\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab // Add Folders tab\par 
\tab m_pTabFolders = new CProjectPropTabFolders();\par 
\tab if( m_pTabFolders )\par 
\tab \{\par 
\tab \tab hPage = ::CreatePropertySheetPage( &m_pTabFolders->m_psp );\par 
\tab \tab if( hPage )\par 
\tab \tab \{\par 
\tab \tab \tab hPropSheetPage[nNbrPages] = (LONG *)hPage;\par 
\tab \tab \tab nNbrPages++;\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab // Set number of pages\par 
\tab *pnNbrPages = nNbrPages;\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageManager::GetPropertySheetTitle Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetPropertySheetTitle(}{\b BSTR*} {\i pbstrTitle}{\b , BOOL*} {\i pfAddPropertiesText}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the text to be used for the title of the {\b Framework}'s property sheet control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The title was returned in {\i pbstrTitle}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pbstrTitle} or {\i pfAddPropertiesText} is not valid.  For example, it 
may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the title was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrTitle}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Pointer to the caller-allocated variable that receives 
a copy of the property sheet title.  The caller must free {\i pbstrTitle} with 
SysFreeString when it is no longer needed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pfAddPropertiesText}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Points to value indicating whether the text 
"Properties" should be appended to the title returned in {\i pbstrTitle}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method is called from within {\b IDMUSProdPropSheet::SetPageManager}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns the title to be used for the Framework's property sheet 
control:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CProjectPropPageManager::GetPropertySheetTitle( BSTR* pbstrTitle, BOOL* pfAddPropertiesText )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( (pbstrTitle == NULL)\par 
\tab ||  (pfAddPropertiesText == NULL) )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *pfAddPropertiesText = TRUE;\par 
\par 
\tab CProject *pProject;\par 
\par 
\tab if( m_pIPropPageObject\par 
\tab && (SUCCEEDED (m_pIPropPageObject->GetData((void **)&pProject))) )\par 
\tab \{\par 
\tab \tab *pbstrTitle = pProject->m_strName.AllocSysString();\par 
\tab \}\par 
\tab else\par 
\tab \{\par 
\tab \tab CString strTitle;\par 
\par 
\tab \tab strTitle.LoadString( IDS_PROJECT_TEXT );\par 
\tab \tab *pbstrTitle = strTitle.AllocSysString();\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageManager::IsEqualObject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT IsEqualObject(}{\b IDMUSProdPropPageObject*} {\i pIPropPageObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines whether the object specified in {\i pIPropPageObject} is being displayed by 
the {\b PropPageManager}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The object specified in {\i pIPropPageObject} is being displayed by the 
PropPageManager.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The object specified in {\i pIPropPageObject} is not being displayed by 
the PropPageManager.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIPropPageObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdPropPageObject} 
interface to compare with the PropPageManager's current object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example determines whether the object specified in {\i pIPropPageObject} 
is currently being displayed by the PropPageManager:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT FAR EXPORT CProjectPropPageManager::IsEqualObject( IDMUSProdPropPageObject* pIPropPageObject )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pIPropPageObject == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab if( pIPropPageObject == m_pIPropPageObject )\par 
\tab \{\par 
\tab \tab return S_OK;\par 
\tab \}\par 
\par 
\tab return S_FALSE;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageManager::IsEqualPageManagerGUID Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT IsEqualPageManagerGUID(}{\b REFGUID} {\i rguidPageManager}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines whether the GUID specified in {\i rguidPageManager} equals the GUID of the 
{\b PropPageManager}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The GUID specified in {\i rguidPageManager} equals the PropPageManager's 
GUID.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The GUID specified in {\i rguidPageManager} does not equal the 
PropPageManager's GUID.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguidPageManager}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] GUID to compare with the PageManager's GUID.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example determines whether the GUID specified in {\i rguidPageManager} 
equals the GUID of the PropPageManager:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT FAR EXPORT CProjectPropPageManager::IsEqualPageManagerGUID( REFGUID rguidPageManager )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( ::IsEqualGUID(rguidPageManager, GUID_ProjectPropPageManager) )\par 
\tab \{\par 
\tab \tab return S_OK;\par 
\tab \}\par 
\par 
\tab return S_FALSE;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageManager::OnRemoveFromPropertySheet Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnRemoveFromPropertySheet(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Called when the {\b PropPageManager} object is being removed from the {\b Framework}'s 
property sheet control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Resources were freed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and resources could not be freed.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The Framework calls this method to notify the PropPageManager that it is being removed 
from the Framework's property sheet control.  This gives the PropPageManager an 
opportunity to perform cleanup processing.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example contains cleanup processing for a PropPageManager:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CProjectPropPageManager::OnRemoveFromPropertySheet()\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab RemoveCurrentObject();\par 
\tab Release();\tab // delete myself\par 
\par 
\tab return S_OK;\par 
\}\par 
\par 
void CProjectPropPageManager::RemoveCurrentObject( void )\par 
\{\par 
\tab if( m_pIPropPageObject == NULL )\par 
\tab \{\par 
\tab \tab return;\par 
\tab \}\par 
\par 
\tab m_pIPropPageObject->OnRemoveFromPageManager();\par 
\tab m_pIPropPageObject = NULL;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageManager::RefreshData Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RefreshData(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Notifies the {\b PropPageManager} to refresh its data and redraw the active page.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The PropPageObject's data was refreshed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the PropPageObject's data could not be refreshed.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method must be called when the {\b PropPageObject} being displayed changes by some 
means other than the {\b Framework}'s property sheet control.  For example, when the 
user changes a value in an editor for an object whose properties are being displayed, 
{\b RefreshData} must be called on order for the property sheet 
to display the new value.\par 
{\b IDMUSProdPropPageObject::GetData}
 must be called to retrieve the changed data before 
refreshing the property sheet's active page.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example refreshes the Framework's property sheet control with the 
new data associated with the PropPageObject currently being displayed:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CProjectPropPageManager::RefreshData( void )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab CProject* pProject;\par 
\par 
\tab if( m_pIPropPageObject == NULL )\par 
\tab \{\par 
\tab \tab pProject = NULL;\par 
\tab \}\par 
\tab else if( FAILED ( m_pIPropPageObject->GetData( (void **)&pProject ) ) )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab m_pTabGeneral->SetProject( pProject );\par 
\tab m_pTabFolders->SetProject( pProject );\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageManager::RemoveObject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RemoveObject(}{\b IDMUSProdPropPageObject*} {\i pIPropPageObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes the object specified in {\i pIPropPageObject} from the {\b PropPageManager}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIPropPageObject} was removed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIPropPageObject} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and {\i pIPropPageObject} was not removed.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIPropPageObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdPropPageObject} 
interface of the object to be removed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 When {\i pIPropPageObject} equals the object currently being displayed by the 
PropPageManager, it is removed from the PropPageManager and is no longer displayed 
in the {\b Framework}'s property sheet.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example removes the object specified in {\i pIPropPageManager} from 
the PropPageManager:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CProjectPropPageManager::RemoveObject( IDMUSProdPropPageObject* pIPropPageObject )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( (pIPropPageObject == NULL)\par 
\tab ||  (pIPropPageObject != m_pIPropPageObject) )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab RemoveCurrentObject();\par 
\tab RefreshData();\par 
\par 
\tab if( m_pIPropSheet )\par 
\tab \{\par 
\tab \tab m_pIPropSheet->RefreshTitle();\par 
\tab \tab m_pIPropSheet->RefreshActivePage();\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\par 
void CProjectPropPageManager::RemoveCurrentObject( void )\par 
\{\par 
\tab if( m_pIPropPageObject == NULL )\par 
\tab \{\par 
\tab \tab return;\par 
\tab \}\par 
\par 
\tab m_pIPropPageObject->OnRemoveFromPageManager();\par 
\tab m_pIPropPageObject = NULL;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b SetObject}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageManager::SetObject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetObject(}{\b IDMUSProdPropPageObject*} {\i pIPropPageObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the {\b PropPageObject} being displayed by the {\b PropPageManager}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The PropPageManager's current object was set to {\i pIPropPageObject}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIPropPageObject} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIPropPageObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdPropPageObject} 
interface of the object to be displayed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The PropPageManager object defines the set of pages placed in the Framework's property 
sheet.  For example, the PropPageManager used to display Style properties might place 
two (2) pages, or tabs, in the Framework's property sheet control.  Different Styles 
would use the same PropPageManager to show their properties.  Calls to 
{\b SetObject} would result in properties being displayed for 
different Styles.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example sets the PropPageObject being displayed by the PropPageManager:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CProjectPropPageManager::SetObject( IDMUSProdPropPageObject* pINewPropPageObject )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pINewPropPageObject == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab RemoveCurrentObject();\par 
\par 
\tab m_pIPropPageObject = pINewPropPageObject;\par 
\par 
\tab RefreshData();\par 
\par 
\tab if( m_pIPropSheet )\par 
\tab \{\par 
\tab \tab m_pIPropSheet->RefreshTitle();\par 
\tab \tab m_pIPropSheet->RefreshActivePage();\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\par 
void CProjectPropPageManager::RemoveCurrentObject( void )\par 
\{\par 
\tab if( m_pIPropPageObject == NULL )\par 
\tab \{\par 
\tab \tab return;\par 
\tab \}\par 
\par 
\tab m_pIPropPageObject->OnRemoveFromPageManager();\par 
\tab m_pIPropPageObject = NULL;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b RemoveObject}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageObject Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 This interface provides access to an object's data so that a {\b PropPageManager} object 
can display it in the {\b Framework}'s global property sheet.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The Framework exports an {\b IDMUSProdPropSheet} interface so that DirectMusic Producer 
{\b Component}s can hook into its global property sheet control.  A pointer to the 
Framework's IDMUSProdPropSheet interface can be obtained via {\b IDMUSProdFramework::QueryInterface}
.\par 
In order to use the global property sheet, a Component must implement {\b IDMUSProdPropPageManager}. 
The object behind this interface, the {\b PropPageManager} object, manages the set of pages 
placed in the property sheet as well as the data currently displayed in those pages.\par 
The PropPageManager uses the {\b IDMUSProdPropPageObject} interface to interact with the object 
whose data is being shown in its pages.  Calls to {\b IDMUSProdPropPageManager::SetObject}
 set 
the PropPageManager's current object so that the same set of pages can be used to display 
data for different objects.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Hands data to the PropPageManager so that it can be displayed 
in the PropPageManager's property sheet pages.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Receives data from the PropPageManager so that it can refresh 
itself with changes made through the PropPageManager's property sheet pages.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnShowProperties}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Displays the object's properties.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnRemoveFromPageManager}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Called when the PropPageObject is being 
removed from the PropPageManager.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageObject::GetData Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetData(}{\b void**} {\i ppData}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Hands data to the {\b PropPageManager} so that it can be displayed in the PropPageManager's 
property sheet pages.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The {\b PropPageObject}'s data was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i ppData} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell The data could not be returned due to lack of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the data could not be returned for some reason 
other than lack of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
PropPageObject's data.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageObject::OnRemoveFromPageManager Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnRemoveFromPageManager(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Called when the {\b PropPageObject} is being removed from the {\b PropPageManager}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Resources were freed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and resources could not be freed.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The PropPageManager calls this method to notify the PropPageObject that it is being 
removed from the {\b Framework}'s property sheet control.  This gives the PropPageObject 
an opportunity to perform cleanup processing.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageObject::OnShowProperties Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnShowProperties(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Displays the object's properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The properties were displayed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the properties could not be shown for some reason 
other than lack of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example displays properties for the {\b PropPageObject}:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CProject::OnShowProperties( void )\par 
\{\par 
\tab AFX_MANAGE_STATE( AfxGetAppModuleState() );\par 
\par 
\tab // Get the Project page manager\par 
\tab CProjectPropPageManager* pPageManager;\par 
\par 
\tab if( theApp.m_pIPageManager\par 
\tab &&  theApp.m_pIPageManager->IsEqualPageManagerGUID( GUID_ProjectPropPageManager ) == S_OK )\par 
\tab \{\par 
\tab \tab pPageManager = (CProjectPropPageManager *)theApp.m_pIPageManager;\par 
\tab \}\par 
\tab else\par 
\tab \{\par 
\tab \tab pPageManager = new CProjectPropPageManager();\par 
\tab \}\par 
\par 
\tab if( pPageManager == NULL )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab // Show the Project properties\par 
\tab IDMUSProdPropSheet* pIPropSheet = theApp.GetPropSheet();\par 
\tab if( pIPropSheet )\par 
\tab \{\par 
\tab \tab if( SUCCEEDED ( pIPropSheet->SetPageManager(pPageManager) ) )\par 
\tab \tab \{\par 
\tab \tab \tab theApp.m_pIPageManager = pPageManager;\par 
\tab \tab \tab pPageManager->SetObject( this );\par 
\tab \tab \}\par 
\par 
\tab \tab pIPropSheet->Show( TRUE );\par 
\tab \tab pIPropSheet->Release();\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropPageObject::SetData Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetData(}{\b void*} {\i pNewData}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Receives data from the {\b PropPageManager} so that it can refresh itself with changes 
made through the PropPageManager's property sheet pages.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The {\b PropPageObject}'s data was retrieved successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pNewData} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the PropPageManager could retrieve the object's 
data for some reason other than lack of memory or invalid arguments.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pNewData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the PropPageObject's data.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropSheet Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 This interface provides access to the {\b Framework}'s global property sheet control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet} provides the means for a {\b Component} to hook into the Framework's 
property sheet control, or {\b PropSheet} object.  The Framework creates the PropSheet 
object during application launch and it exists throughout the entire DirectMusic Producer 
work session. A pointer to the Framework's IDMUSProdPropSheet interface can be obtained via 
{\b IDMUSProdFramework::QueryInterface}
.\par 
In order to use the global property sheet, a Component must implement {\b IDMUSProdPropPageManager}. 
The object behind this interface, the {\b PropPageManager} object, manages the set of pages 
placed in the property sheet as well as the data currently displayed in those pages.\par 
The PropPageManager uses the {\b IDMUSProdPropPageObject} interface to interact with the object 
whose data is being shown in its pages.  Calls to {\b IDMUSProdPropPageManager::SetObject}
 set 
the PropPageManager's current object so that the same set of pages can be used to display 
data for different objects.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b PropSheet} Object, {\b PropPageManager} Object, {\b PropPageObject} Object, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetPageManager}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the property sheet PageManager.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RemovePageManager}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Removes the specified PageManager from the property 
sheet.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RemovePageManagerByObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Removes the current PageManager when the specified 
PropPageObject is being displayed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RefreshTitleByObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Redraws the property sheet title when the specified 
PropPageObject is being displayed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RefreshActivePageByObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Redraws the active page when the specified 
PropPageObject is being displayed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT IsEqualPageManagerObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether the specified object is 
currently being displayed in the property sheet.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RefreshTitle}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Redraws the title of the property sheet.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RefreshActivePage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Redraws the active page of the property sheet.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetActivePage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the active page of the property sheet.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetActivePage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the active page of the property sheet.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Show}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Shows/hides the property sheet.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT IsShowing}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines the visibility state of the property sheet.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropSheet::GetActivePage Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetActivePage(}{\b short*} {\i pnIndex}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns the active page of the 
{\b Framework}'s global property sheet.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The active page was returned in {\i pnIndex}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pnIndex} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the active page was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pnIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the caller-allocated variable 
in which the active page is to be returned.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet} provides the means for a {\b Component} to hook into the Framework's 
property sheet control, or {\b PropSheet} object.  The Framework creates the PropSheet 
object during application launch and it exists throughout the entire DirectMusic Producer 
work session. A pointer to the Framework's IDMUSProdPropSheet interface can be obtained via 
{\b IDMUSProdFramework::QueryInterface}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet}, {\b SetActivePage}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropSheet::IsEqualPageManagerObject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT IsEqualPageManagerObject(}{\b IDMUSProdPropPageObject*} {\i pIPropPageObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines whether 
{\i pIPropPageObject} is currently being displayed in the {\b Framework}'s global 
property sheet.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIPropPageObject} is being displayed in the property sheet.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell {\i pIPropPageObject} is not being displayed in the propertysheet.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIPropPageObject} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIPropPageObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an {\b IDMUSProdPropPageObject} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet} provides the means for a {\b Component} to hook into the Framework's 
property sheet control, or {\b PropSheet} object.  The Framework creates the PropSheet 
object during application launch and it exists throughout the entire DirectMusic Producer 
work session. A pointer to the Framework's IDMUSProdPropSheet interface can be obtained via 
{\b IDMUSProdFramework::QueryInterface}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following code excerpt initiates display of properties every time a different {\b Node} 
object is clicked in the Project Tree:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdPropSheet* pIPropSheet;\par 
if( SUCCEEDED ( pIFramework->QueryInterface( IID_IDMUSProdPropSheet, (void**)&pIPropSheet ) ) )\par 
\{\par 
\tab if( pIPropSheet->IsShowing() == S_OK )\par 
\tab \{\par 
\tab \tab // Get properties for node\par 
\tab \tab IDMUSProdPropPageObject* pIPageObject;\par 
\tab \tab if( SUCCEEDED ( pINode->QueryInterface( IID_IDMUSProdPropPageObject, (void **)&pIPageObject ) ) )\par 
\tab \tab \{\par 
\tab \tab \tab if( pIPropSheet->IsEqualPageManagerObject(pIPageObject) != S_OK )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab pIPageObject->OnShowProperties();\par 
\tab \tab \tab \}\par 
\tab \tab \tab pIPageObject->Release();\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab pIPropSheet->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropSheet::IsShowing Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT IsShowing(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines the visibilty state of the 
{\b Framework}'s global property sheet.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The property sheet is visible.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The property sheet is hidden.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet} provides the means for a {\b Component} to hook into the Framework's 
property sheet control, or {\b PropSheet} object.  The Framework creates the PropSheet 
object during application launch and it exists throughout the entire DirectMusic Producer 
work session. A pointer to the Framework's IDMUSProdPropSheet interface can be obtained via 
{\b IDMUSProdFramework::QueryInterface}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following code excerpt makes sure the property sheet is visible before changing its contents:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdPropSheet* pIPropSheet;\par 
if( SUCCEEDED ( pIFramework->QueryInterface( IID_IDMUSProdPropSheet, (void**)&pIPropSheet ) ) )\par 
\{\par 
\tab if( pIPropSheet->IsShowing() == S_OK )\par 
\tab \{\par 
\tab \tab // Get properties for node\par 
\tab \tab IDMUSProdPropPageObject* pIPageObject;\par 
\tab \tab if( SUCCEEDED ( pINode->QueryInterface( IID_IDMUSProdPropPageObject, (void **)&pIPageObject ) ) )\par 
\tab \tab \{\par 
\tab \tab \tab if( pIPropSheet->IsEqualPageManagerObject(pIPageObject) != S_OK )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab pIPageObject->OnShowProperties();\par 
\tab \tab \tab \}\par 
\tab \tab \tab pIPageObject->Release();\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab pIPropSheet->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet}, {\b Show}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropSheet::RefreshActivePage Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RefreshActivePage(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Redraws the active page of the 
{\b Framework}'s global property sheet.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Always succeeds.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet} provides the means for a {\b Component} to hook into the Framework's 
property sheet control, or {\b PropSheet} object.  The Framework creates the PropSheet 
object during application launch and it exists throughout the entire DirectMusic Producer 
work session. A pointer to the Framework's IDMUSProdPropSheet interface can be obtained via 
{\b IDMUSProdFramework::QueryInterface}
.\par 
Only use this method when you are sure that the object being displayed in the property sheet 
needs to be refreshed.  When an object changes and you do not know whether or not its properties 
are being displayed use the {\b RefreshActivePageByObject} method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet}, {\b RefreshActivePageByObject}, {\b RefreshTitleByObject}, 
{\b RefreshTitle}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropSheet::RefreshActivePageByObject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RefreshActivePageByObject(}{\b IDMUSProdPropPageObject*} {\i pIPropPageObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Redraws the active 
page when properties for {\i pIPropPageObject} are being displayed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The active page was refreshed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIPropPageObject} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the active page was not refreshed.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIPropPageObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an {\b IDMUSProdPropPageObject} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet} provides the means for a {\b Component} to hook into the Framework's 
property sheet control, or {\b PropSheet} object.  The Framework creates the PropSheet 
object during application launch and it exists throughout the entire DirectMusic Producer 
work session. A pointer to the Framework's IDMUSProdPropSheet interface can be obtained via 
{\b IDMUSProdFramework::QueryInterface}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following code excerpt refreshes properties after an object changes:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdPropSheet* pIPropSheet;\par 
if( SUCCEEDED( pIFramework->QueryInterface( IID_IDMUSProdPropSheet, (void **) &pIPropSheet ) ) )\par 
\{\par 
\tab pIPropSheet->RefreshTitleByObject( this );\par 
\tab pIPropSheet->RefreshActivePageByObject( this );\par 
\tab pIPropSheet->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet}, {\b RefreshTitleByObject}, {\b RefreshTitle}, 
{\b RefreshActivePage}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropSheet::RefreshTitle Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RefreshTitle(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Redraws the title of the {\b Framework}'s 
global property sheet.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Always succeeds.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet} provides the means for a {\b Component} to hook into the Framework's 
property sheet control, or {\b PropSheet} object.  The Framework creates the PropSheet 
object during application launch and it exists throughout the entire DirectMusic Producer 
work session. A pointer to the Framework's IDMUSProdPropSheet interface can be obtained via 
{\b IDMUSProdFramework::QueryInterface}
.\par 
Only use this method when you are sure that the object being displayed in the property sheet 
needs to be refreshed.  When an object changes and you do not know whether or not its properties 
are being displayed use the {\b RefreshTitleByObject} method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet}, {\b RefreshTitleByObject}, {\b RefreshActivePageByObject}, 
{\b RefreshActivePage}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropSheet::RefreshTitleByObject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RefreshTitleByObject(}{\b IDMUSProdPropPageObject*} {\i pIPropPageObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Redraws the property sheet 
title when properties for {\i pIPropPageObject} are being displayed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The property sheet title was refreshed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIPropPageObject} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the property sheet title was not refreshed.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIPropPageObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an {\b IDMUSProdPropPageObject} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet} provides the means for a {\b Component} to hook into the Framework's 
property sheet control, or {\b PropSheet} object.  The Framework creates the PropSheet 
object during application launch and it exists throughout the entire DirectMusic Producer 
work session. A pointer to the Framework's IDMUSProdPropSheet interface can be obtained via 
{\b IDMUSProdFramework::QueryInterface}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following code excerpt refreshes properties after an object changes:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdPropSheet* pIPropSheet;\par 
if( SUCCEEDED( pIFramework->QueryInterface( IID_IDMUSProdPropSheet, (void **) &pIPropSheet ) ) )\par 
\{\par 
\tab pIPropSheet->RefreshTitleByObject( this );\par 
\tab pIPropSheet->RefreshActivePageByObject( this );\par 
\tab pIPropSheet->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet}, {\b RefreshActivePageByObject}, {\b RefreshActivePage}, 
{\b RefreshTitle}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropSheet::RemovePageManager Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RemovePageManager(}{\b IDMUSProdPropPageManager*} {\i pIPageManager}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes {\i pIPageManager} from 
the {\b Framework}'s global property sheet.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIPageManager} was removed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIPageManager} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and {\i pIPageManager} was not removed.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIPageManager}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdPropPageManager} 
interface to be removed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet} provides the means for a {\b Component} to hook into the Framework's 
property sheet control, or {\b PropSheet} object.  The Framework creates the PropSheet 
object during application launch and it exists throughout the entire DirectMusic Producer 
work session. A pointer to the Framework's IDMUSProdPropSheet interface can be obtained via 
{\b IDMUSProdFramework::QueryInterface}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following code excerpt removes {\i pIPageManager} from the Framework's property sheet:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdPropSheet* pIPropSheet;\par 
if( SUCCEEDED( pIFramework->QueryInterface( IID_IDMUSProdPropSheet, (void **) &pIPropSheet ) ) )\par 
\{\par 
\tab pIPropSheet->RemovePageManager( pIPageManager );\par 
\tab pIPropSheet->Release();\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet}, {\b SetPageManager}, {\b RemovePageManagerByObject}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropSheet::RemovePageManagerByObject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RemovePageManagerByObject(}{\b IDMUSProdPropPageObject*} {\i pIPropPageObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Removes the current 
{\b PropPageManager} from the {\b Framework}'s global property sheet when properties 
for {\i pIPropPageObject} are being displayed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The current page manager was removed successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIPropPageObject} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the current page manager was not removed.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIPropPageObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an {\b IDMUSProdPropPageObject} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet} provides the means for a {\b Component} to hook into the Framework's 
property sheet control, or {\b PropSheet} object.  The Framework creates the PropSheet 
object during application launch and it exists throughout the entire DirectMusic Producer 
work session. A pointer to the Framework's IDMUSProdPropSheet interface can be obtained via 
{\b IDMUSProdFramework::QueryInterface}
.\par 
This method simply returns S_OK when {\i pIPropPageObject} is not being displayed in the 
property sheet.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example shows an easy way of ensuring the property sheet does not display 
objects that have been destructed:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 CFileNode::~CFileNode()\par 
\{\par 
\tab IDMUSProdPropSheet* pIPropSheet;\par 
\tab if( SUCCEEDED( pIFramework->QueryInterface( IID_IDMUSProdPropSheet, (void **) &pIPropSheet ) ) )\par 
\tab \{\par 
\tab \tab pIPropSheet->RemovePageManagerByObject( this );\par 
\tab \tab pIPropSheet->Release();\par 
\tab \}\par 
\par 
\tab ...\par 
\tab ...\par 
\tab ...\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet}, {\b SetPageManager}, {\b RemovePageManager}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropSheet::SetActivePage Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetActivePage(}{\b short} {\i nIndex}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the active page of the 
{\b Framework}'s global property sheet to {\i nIndex}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The active page was set to {\i nIndex}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i nIndex} is not valid.  For example, it may be less than zero.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the active page was not set.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Page number.  Zero based index.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet} provides the means for a {\b Component} to hook into the Framework's 
property sheet control, or {\b PropSheet} object.  The Framework creates the PropSheet 
object during application launch and it exists throughout the entire DirectMusic Producer 
work session. A pointer to the Framework's IDMUSProdPropSheet interface can be obtained via 
{\b IDMUSProdFramework::QueryInterface}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following implementation of {\b IDMUSProdPropPageObject::OnShowProperties}
 displays 
properties for a Pattern in a Style:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CDirectMusicPattern::OnShowProperties( void )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab CDllBasePropPageManager* pPageManager;\par 
\tab short nActiveTab = 0;\par 
\par 
\tab // Get the Pattern page manager\par 
\tab if( theApp.m_pIPageManager\par 
\tab &&  theApp.m_pIPageManager->IsEqualPageManagerGUID( GUID_PatternPropPageManager ) == S_OK )\par 
\tab \{\par 
\tab \tab pPageManager = (CDllBasePropPageManager *)theApp.m_pIPageManager;\par 
\tab \}\par 
\tab else\par 
\tab \{\par 
\tab \tab pPageManager = new CPatternPropPageManager();\par 
\tab \}\par 
\par 
\tab if( pPageManager == NULL )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab // Show the Pattern properties\par 
\tab IDMUSProdPropSheet* pIPropSheet;\par 
\par 
\tab if( SUCCEEDED ( theApp.m_pStyleComponent->m_pIFramework->QueryInterface( IID_IDMUSProdPropSheet, (void**)&pIPropSheet ) ) )\par 
\tab \{\par 
\tab \tab if( SUCCEEDED ( pIPropSheet->SetPageManager(pPageManager) ) )\par 
\tab \tab \{\par 
\tab \tab \tab theApp.m_pIPageManager = pPageManager;\par 
\tab \tab \tab pPageManager->SetObject( this );\par 
\tab \tab \tab pIPropSheet->SetActivePage( nActiveTab );\par 
\tab \tab \}\par 
\par 
\tab \tab pIPropSheet->Show( TRUE );\par 
\tab \tab pIPropSheet->Release();\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet}, {\b GetActivePage}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropSheet::SetPageManager Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetPageManager(}{\b IDMUSProdPropPageManager*} {\i pINewPageManager}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Sets the global property sheet's 
{\b PropPageManager} to {\i pINewPageManager}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The property sheet's page manager was successfully set to {\i pINewPageManager}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pINewPageManager} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the page manager could not be set.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINewPageManager}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the {\b IDMUSProdPropPageManager} 
interface to be attached to the property sheet 
control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet} provides the means for a {\b Component} to hook into the Framework's 
property sheet control, or {\b PropSheet} object.  The Framework creates the PropSheet 
object during application launch and it exists throughout the entire DirectMusic Producer 
work session. A pointer to the Framework's IDMUSProdPropSheet interface can be obtained via 
{\b IDMUSProdFramework::QueryInterface}
.\par 
This method simply returns S_OK when the page manager is already set to {\i pINewPageManager}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following implementation of {\b IDMUSProdPropPageObject::OnShowProperties}
 displays 
properties for a Pattern in a Style:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CDirectMusicPattern::OnShowProperties( void )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab CDllBasePropPageManager* pPageManager;\par 
\tab short nActiveTab = 0;\par 
\par 
\tab // Get the Pattern page manager\par 
\tab if( theApp.m_pIPageManager\par 
\tab &&  theApp.m_pIPageManager->IsEqualPageManagerGUID( GUID_PatternPropPageManager ) == S_OK )\par 
\tab \{\par 
\tab \tab pPageManager = (CDllBasePropPageManager *)theApp.m_pIPageManager;\par 
\tab \}\par 
\tab else\par 
\tab \{\par 
\tab \tab pPageManager = new CPatternPropPageManager();\par 
\tab \}\par 
\par 
\tab if( pPageManager == NULL )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab // Show the Pattern properties\par 
\tab IDMUSProdPropSheet* pIPropSheet;\par 
\par 
\tab if( SUCCEEDED ( theApp.m_pStyleComponent->m_pIFramework->QueryInterface( IID_IDMUSProdPropSheet, (void**)&pIPropSheet ) ) )\par 
\tab \{\par 
\tab \tab if( SUCCEEDED ( pIPropSheet->SetPageManager(pPageManager) ) )\par 
\tab \tab \{\par 
\tab \tab \tab theApp.m_pIPageManager = pPageManager;\par 
\tab \tab \tab pPageManager->SetObject( this );\par 
\tab \tab \tab pIPropSheet->SetActivePage( nActiveTab );\par 
\tab \tab \}\par 
\par 
\tab \tab pIPropSheet->Show( TRUE );\par 
\tab \tab pIPropSheet->Release();\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet}, {\b RemovePageManager}, {\b RemovePageManagerByObject}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdPropSheet::Show Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Show(}{\b BOOL} {\i fShow}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Shows/hides the {\b Framework}'s global 
property sheet.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Always succeeds.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fShow}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] TRUE = Show, FALSE = Hide.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet} provides the means for a {\b Component} to hook into the Framework's 
property sheet control, or {\b PropSheet} object.  The Framework creates the PropSheet 
object during application launch and it exists throughout the entire DirectMusic Producer 
work session. A pointer to the Framework's IDMUSProdPropSheet interface can be obtained via 
{\b IDMUSProdFramework::QueryInterface}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following implementation of {\b IDMUSProdPropPageObject::OnShowProperties}
 displays 
properties for a Pattern in a Style:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CDirectMusicPattern::OnShowProperties( void )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab CDllBasePropPageManager* pPageManager;\par 
\tab short nActiveTab = 0;\par 
\par 
\tab // Get the Pattern page manager\par 
\tab if( theApp.m_pIPageManager\par 
\tab &&  theApp.m_pIPageManager->IsEqualPageManagerGUID( GUID_PatternPropPageManager ) == S_OK )\par 
\tab \{\par 
\tab \tab pPageManager = (CDllBasePropPageManager *)theApp.m_pIPageManager;\par 
\tab \}\par 
\tab else\par 
\tab \{\par 
\tab \tab pPageManager = new CPatternPropPageManager();\par 
\tab \}\par 
\par 
\tab if( pPageManager == NULL )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab // Show the Pattern properties\par 
\tab IDMUSProdPropSheet* pIPropSheet;\par 
\par 
\tab if( SUCCEEDED ( theApp.m_pStyleComponent->m_pIFramework->QueryInterface( IID_IDMUSProdPropSheet, (void**)&pIPropSheet ) ) )\par 
\tab \{\par 
\tab \tab if( SUCCEEDED ( pIPropSheet->SetPageManager(pPageManager) ) )\par 
\tab \tab \{\par 
\tab \tab \tab theApp.m_pIPageManager = pPageManager;\par 
\tab \tab \tab pPageManager->SetObject( this );\par 
\tab \tab \tab pIPropSheet->SetActivePage( nActiveTab );\par 
\tab \tab \}\par 
\par 
\tab \tab pIPropSheet->Show( TRUE );\par 
\tab \tab pIPropSheet->Release();\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdPropSheet}, {\b IsShowing}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdReferenceNode Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 This interface contains methods used to link Reference {\b Node}s to actual files.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Reference nodes allow DirectMusic Producer files to bind themselves to other Producer 
files.\par 
Reference nodes must implement the {\b IDMUSProdReferenceNode} interface.  A pointer to a 
Node's IDMUSProdReferenceNode interface can be obtained via {\b IDMUSProdNode::QueryInterface}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdNode}, {\b IDMUSProdFileRefChunk}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetReferencedFile}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns a pointer to the DocRoot Node of the referenced 
file.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetReferencedFile}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Links a reference Node to a file.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdReferenceNode::GetReferencedFile Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetReferencedFile(}{\b IDMUSProdNode**} {\i ppIDocRootNode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the DocRoot 
{\b Node} of the referenced file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The DocRoot's {\b IDMUSProdNode} interface was returned in {\i ppIDocRootNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIDocRootNode} is not valid.  For example, it may 
be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the DocRoot Node could not be returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the requested 
{\b IDMUSProdNode} interface.  On success, the caller is responsible for calling {\b IDMUSProdNode::Release}
 
when this pointer is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Reference nodes allow DirectMusic Producer files to bind themselves to other Producer 
files.\par 
Reference nodes must implement the {\b IDMUSProdReferenceNode} interface.  A pointer to a 
Node's IDMUSProdReferenceNode interface can be obtained via {\b IDMUSProdNode::QueryInterface}
.\par 
The implementation should return E_FAIL if the Reference Node is not linked to a DocRoot 
Node.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns the DocRoot Node of the referenced file:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleRef::GetReferencedFile( IDMUSProdNode** ppIDocRootNode )\par 
\{\par 
\tab  AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( ppIDocRootNode == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *ppIDocRootNode = NULL;\par 
\par 
\tab if( m_pStyle )\par 
\tab \{\par 
\tab \tab m_pStyle->AddRef();\par 
\tab \tab *ppIDocRootNode = m_pStyle;\par 
\tab \tab return S_OK;\par 
\tab \}\par 
\par 
\tab return E_FAIL;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdReferenceNode}, {\b IDMUSProdNode}, {\b IDMUSProdFileRefChunk}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdReferenceNode::SetReferencedFile Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetReferencedFile(}{\b IDMUSProdNode*} {\i pIDocRootNode}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Links a file to reference {\b Node}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The reference Node link was linked to {\i pIDocRootNode} successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIDocRootNode} is not valid.  For example, it may not be a DocRoot node.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the link could not be established.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to an {\b IDMUSProdNode} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Reference nodes allow DirectMusic Producer files to bind themselves to other Producer 
files.\par 
Reference nodes must implement the {\b IDMUSProdReferenceNode} interface.  A pointer to a 
Node's IDMUSProdReferenceNode interface can be obtained via {\b IDMUSProdNode::QueryInterface}
.\par 
Use {\b IDMUSProdComponent::AllocReferenceNode}
 to create the reference Node.\par 
In the case where {\i pIDocRootNode} is NULL, the previous link is removed and the reference 
Node no longer points to a file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example links a file to a reference Node:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyleRef::SetReferencedFile( IDMUSProdNode* pIDocRootNode )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pIDocRootNode )\par 
\tab \{\par 
\tab \tab // Make sure method was passed a DocRootNode\par 
\tab \tab IDMUSProdNode* pINode;\par 
\tab \tab if( FAILED ( pIDocRootNode->GetDocRootNode ( &pINode ) ) )\par 
\tab \tab \{\par 
\tab \tab \tab pINode = NULL;\par 
\tab \tab \}\par 
\tab \tab if( pIDocRootNode != pINode )\par 
\tab \tab \{\par 
\tab \tab \tab if( pINode )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab pINode->Release();\par 
\tab \tab \tab \}\par 
\tab \tab \tab return E_INVALIDARG;\par 
\tab \tab \}\par 
\tab \tab pINode->Release();\par 
\par 
\tab \tab // Make sure method was passed a Style Node\par 
\tab \tab GUID guidNodeId;\par 
\tab \tab if( SUCCEEDED ( pIDocRootNode->GetNodeId ( &guidNodeId ) ) )\par 
\tab \tab \{\par 
\tab \tab \tab if( !( IsEqualGUID ( guidNodeId, GUID_StyleNode ) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab return E_INVALIDARG;\par 
\tab \tab \tab \}\par 
\tab \tab \}\par 
\tab \}\par 
\par 
\tab // Release previous DocRoot Node\par 
\tab if( m_pStyle )\par 
\tab \{\par 
\tab \tab m_pStyle->Release();\par 
\tab \tab m_pStyle = NULL;\par 
\tab \}\par 
\par 
\tab // Link to new DocRoot Node\par 
\tab if( pIDocRootNode )\par 
\tab \{\par 
\tab \tab m_pStyle = (CStyle *)pIDocRootNode;\par 
\tab \tab m_pStyle->AddRef();\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b IDMUSProdComponent::AllocReferenceNode}
, {\b IDMUSProdNode}, {\b IDMUSProdFileRefChunk}, {\b IDMUSProdReferenceNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdRIFFExt Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The IDMUSProdRIFFExt interface is an agreement between two Components.  Components implementing 
IDMUSProdRIFFExt agree to load RIFF chunks and manage Project Tree nodes for other Components.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 To obtain a pointer to another Component's IDMUSProdRIFFExt interface, call QueryInterface on 
the {\b IDMUSProdComponent} interface pointer returned by {\b IDMUSProdFramework::FindComponent}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework::FindComponent}
, {\b IDMUSProdNode}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT LoadRIFFChunk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Loads a RIFF chunk and returns an IDMUSProdNode interface 
pointer to the top node of data contained in the chunk.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdRIFFExt::LoadRIFFChunk Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT LoadRIFFChunk(}{\b IStream*} {\i pIStream}{\b , IDMUSProdNode**} {\i ppITopNode}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Loads a RIFF chunk and returns an {\b IDMUSProdNode} interface pointer to the top node of 
data contained in the chunk.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The RIFF chunk was successfully loaded and newly created {\b IDMUSProdNode} was 
returned in {\i ppITopNode}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell The RIFF chunk could not be loaded due to lack of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell The RIFF chunk could not be loaded for some reason other than lack 
of memory.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the stream from which the RIFF chunk should be 
loaded.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppITopNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out, retval] Address of a variable to receive the requested 
{\b IDMUSProdNode} interface.  If LoadRIFFChunk fails, *ppITopNode is set to NULL.  On success, 
the caller is responsible for calling {\b IDMUSProdNode::Release}
 when this pointer is no longer 
needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Components implementing IDMUSProdRIFFExt::LoadRIFFChunk agree to load RIFF chunks and manage 
Project Tree nodes for other Components.  A DirectMusic Producer Component obtains a pointer 
to another Component's IDMUSProdRIFFExt interface by calling QueryInterface on the 
{\b IDMUSProdComponent} interface pointer returned from {\b IDMUSProdFramework::FindComponent}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example parses a RIFF file and hands a RIFF chunk to a different 
component for loading:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CStyle::LoadStyle( IDMUSProdRIFFStream* pIRiffStream, MMCKINFO* pckMain )\par 
\{\par 
\tab IStream*        pIStream;\par 
\tab IDMUSProdComponent* pIComponent;\par 
\tab IDMUSProdRIFFExt*   pIRIFFExt;\par 
\tab IDMUSProdNode*      pITopNode;\par 
\tab MMCKINFO        ck;\par 
\tab DWORD           dwPos;\par 
\tab HRESULT         hr = S_OK;\par 
\par 
\tab pIStream = pIRiffStream->GetStream();\par 
\tab ASSERT( pIStream != NULL );\par 
\par 
\tab dwPos = StreamTell( pIStream );\par 
\par 
\tab while( pIRiffStream->Descend( &ck, pckMain, 0 ) == 0 )\par 
\tab \{\par 
\tab \tab switch( ck.ckid )\par 
\tab \tab \{\par 
\tab \tab \tab ...\par 
\tab \tab \tab ...\par 
\tab \tab \tab ...\par 
\par 
\tab \tab \tab case FOURCC_RIFF:\par 
\tab \tab \tab \tab switch( ck.fccType )\par 
\tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab ...\par 
\tab \tab \tab \tab \tab ...\par 
\tab \tab \tab \tab \tab ...\par 
\par 
\tab \tab \tab \tab \tab case FOURCC_BAND_FORM:\par 
\tab \tab \tab \tab \tab \tab hr = m_pIFramework->FindComponent( CLSID_BandComponent, &pIComponent );\par 
\tab \tab \tab \tab \tab \tab if( SUCCEEDED ( hr ) )\par 
\tab \tab \tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab \tab \tab hr = pIComponent->QueryInterface( IID_IDMUSProdRIFFExt, (void**)&pIRIFFExt );\par 
\tab \tab \tab \tab \tab \tab \tab if( SUCCEEDED ( hr ) )\par 
\tab \tab \tab \tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab \tab \tab \tab StreamSeek( pIStream, dwPos, STREAM_SEEK_SET );\par 
\tab \tab \tab \tab \tab \tab \tab \tab hr = pIRIFFExt->LoadRIFFChunk( pIStream, &pITopNode );\par 
\tab \tab \tab \tab \tab \tab \tab \tab if( SUCCEEDED ( hr ) )\par 
\tab \tab \tab \tab \tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab \tab \tab \tab \tab m_lstBands.AddTail( pITopNode );\par 
\tab \tab \tab \tab \tab \tab \tab \tab \}\par 
\tab \tab \tab \tab \tab \tab \tab \tab pIRIFFExt->Release();\par 
\tab \tab \tab \tab \tab \tab \tab \}\par 
\tab \tab \tab \tab \tab \tab \tab pIComponent->Release();\par 
\tab \tab \tab \tab \tab \tab \}\par 
\par 
\tab \tab \tab \tab \tab \tab if( FAILED ( hr ) )\par 
\tab \tab \tab \tab \tab \tab \{\par 
\tab \tab \tab \tab \tab \tab \tab go to ON_ERR;\par 
\tab \tab \tab \tab \tab \tab \}\par 
\tab \tab \tab \tab \tab \tab break;\par 
\tab \tab \tab \tab \}\par 
\tab \tab \tab \tab break;\par 
\tab \tab \}\par 
\par 
\tab \tab pIRiffStream->Ascend( &ck, 0 );\par 
\tab \tab dwPos = StreamTell( pIStream );\par 
\tab \}\par 
\par 
ON_ERR:\par 
\tab pIStream->Release();\par 
\tab return hr;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdFramework::FindComponent}
, {\b IDMUSProdRIFFExt}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdSecondaryTransport Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The Conductor uses this interface to interact with editors 
that want to use the functionality provided by the secondary segment toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetSecondaryTransportSegment}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 When the user hits a play button, this method is called to retrieve a segment to play.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetSecondaryTransportName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This method is called to retrieve the name that should be displayed in the secondary segment toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b IDMUSProdConductor::RegisterSecondaryTransport}
, {\b IDMUSProdConductor::UnRegisterSecondaryTransport}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdSecondaryTransport::GetSecondaryTransportName Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetSecondaryTransportName(}{\b BSTR*} {\i pbstrName}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns text used for the label 
displayed in the secondary segment dropdown.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The name was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pbstrName} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the name was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the caller-allocated variable that receives a copy of the name. 
The caller frees {\i pbstrName} with SysFreeString when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If the name of the secondary transport changes, the transport should call 
{\b IDMUSProdConductor::SetSecondaryTransportName}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdSecondaryTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdSecondaryTransport::GetSecondaryTransportSegment Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetSecondaryTransportSegment(}{\b IUnknown **} {\i ppunkSegment}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the 
segment to play.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The segment was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pIUnknown} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppunkSegment}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the location to store a the segment interface in.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method is called when the user presses a play button in the secondary segment toolbar 
while this {\b IDMUSProdSecondaryTransport} is chosen.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdSecondaryTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdSegmentEdit8 Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 This interface contains various helper methods for use when editing Segments.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AddStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Adds a track of type {\i clsidTrackType} to this Segment.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT ContainsTempoStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether this Segment contains a tempo track.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetObjectDescriptor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Fills a DMUS_OBJECTDESC strucure with information about this Segment.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdSegmentEdit8::AddStrip Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AddStrip(}{\b CLSID} {\i clsidTrackType}{\b , DWORD} {\i dwGroupBits}
{\b , IUnknown**} {\i ppIStripMgr}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Adds a track of type {\i clsidTrackType} 
to this Segment.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell A track of type {\i clsidTrackType} was created successfully and a pointer 
to its IUnknown interface was returned in {\i ppIStripMgr}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i ppIStripMgr} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Out of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and the track was not created.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i clsidTrackType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] DirectMusic CLSID of the track to be created.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Track group(s) of the newly created strip. 
Each bit in {\i dwGroupBits} corresponds to a track group. 
Up to 32 track groups can be specified.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIStripMgr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the 
IUnknown interface for the newly created 
strip.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following excerpt creates a Band track in track group 1:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 IDMUSProdNode* pISegmentNode;\par 
IDMUSProdSegmentEdit8* pISegmentEdit8;\par 
IUnknown *punkStripMgr;\par 
IDMUSProdStripMgr* pIStripMgr;\par 
\par 
...\par 
...\par 
...\par 
\par 
if( pISegmentNode )\par 
\{\par 
\tab if( SUCCEEDED( pISegmentNode->QueryInterface( IID_IDMUSProdSegmentEdit8, (void**)&pISegmentEdit8 ) ) )\par 
\tab \{\par 
\tab \tab if( SUCCEEDED ( pISegmentEdit8->AddStrip( CLSID_DirectMusicBandTrack, 0x01, &punkStripMgr ) ) )\par 
\tab \tab \{\par 
\tab \tab \tab if( SUCCEEDED ( punkStripMgr->QueryInterface( IID_IDMUSProdStripMgr, (void**)&pIStripMgr ) ) )\par 
\tab \tab \tab \{\par 
\tab \tab \tab \tab ...\par 
\tab \tab \tab \tab ...\par 
\tab \tab \tab \tab ...\par 
\tab \tab \tab \tab pIStripMgr->Release();\par 
\tab \tab \tab \}\par 
\tab \tab \tab punkStripMgr->Release();\par 
\tab \tab \}\par 
\tab \tab pISegmentEdit8->Release();\par 
\tab \}\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdSegmentEdit8}, {\b IDMUSProdStripMgr}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdSegmentEdit8::ContainsTempoStrip Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT ContainsTempoStrip(}{\b BOOL*} {\i pfTempoStripExists}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Determines whether this 
Segment contains a tempo track.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Always succeeds.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pfTempoStripExists}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Address of a variable to receive the 
flag specifying whether or not this Segment contains a 
tempo track. TRUE = Segment contains a tempo track. 
FALSE = Segment does not contain a tempo track.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdSegmentEdit8}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdSegmentEdit8::GetObjectDescriptor Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetObjectDescriptor(}{\b void *} {\i pObjectDesc}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Fills a DMUS_OBJECTDESC 
structure with information about this Segment.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Information about this Segment was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pObjectDesc} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i dwSize} in the supplied DMUS_OBJECTDESC structure was not 
initialized.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pObjectDesc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Address of a DMUS_OBJECTDESC structure 
to be filled with data about this Segment.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Check {\i dwValidData} in the returned DMUS_OBJECTDESC structure to know which 
members are valid.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdSegmentEdit8}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdSortNode Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The {\b IDMUSProdSortNode} interface attaches custom sorting algorithms to {\b Node} 
objects displayed in the {\b Framework}'s Project Tree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b Node} Object, {\b Framework} Object\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CompareNodes}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Provides the means to override alphabetical sorting of nodes 
in the Project Tree.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdSortNode::CompareNodes Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CompareNodes(}{\b IDMUSProdNode*} {\i pINode1}{\b , IDMUSProdNode*} {\i pINode2}
{\b , int*} {\i pnResult}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Provides the means to override alphabetical 
sorting of {\b Node}s in the Project Tree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The nodes were sorted successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the nodes could not be sorted.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the first child node to be sorted.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pINode2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Pointer to the second child node to be sorted.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pnResult}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Set to a negative value if {\i pINode1} should precede 
{\i pINode2}, a positive value if {\i pINode1} should follow {\i pINode2}, or zero 
if the two nodes are equivalent.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdSort} should be implemented by parent nodes that do not want their immediate 
child nodes to be sorted alphabetically.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example sorts two nodes:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CMyParentNode::CompareNodes( IDMUSProdNode* pINode1, IDMUSProdNode* pINode2, int* pnResult )\par 
\{\par 
\tab if( pINode1 == NULL\par 
\tab ||  pINode2 == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab if( pnResult == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab CMyNode* pNode1 = (CMyNode *)pINode1;\par 
\tab CMyNode* pNode2 = (CMyNode *)pINode2;\par 
\par 
\tab if( pNode1->m_nID < pNode2->m_nID )\par 
\tab \{\par 
\tab \tab *pnResult = -1;\par 
\tab \}\par 
\tab else if( pNode1->m_nID > pNode2->m_nID )\par 
\tab \{\par 
\tab \tab *pnResult = 1;\par 
\tab \}\par 
\tab else\par 
\tab \{\par 
\tab \tab *pnResult = 0;\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdSortNode}, {\b IDMUSProdNode}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStrip Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The Timeline uses this interface to interact with the editors that 
display DirectMusic tracks inside a Segment.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Draw}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Draw the client area of the strip.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetStripProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Get a property of the strip.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetStripProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set a property of the strip.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnWMMessage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pass window messages to a strip.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdTimeline::AddStrip}
, {\b IDMUSProdTimeline::RemoveStrip}
, 
{\b IDMUSProdTimeline::StripSetTimelineProperty}
, {\b IDMUSProdTimeline::StripGetTimelineProperty}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStrip::Draw Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Draw(}{\b HDC} {\i hDC}{\b , {\b STRIPVIEW}} {\i stripView}
{\b , LONG} {\i lXOffset}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method draws the client area of the strip in the Timeline control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDC}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A handle to the device context in which to draw.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i stripView}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The current strip view state, either SV_NORMAL or SV_MINIMIZED.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lXOffset}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The pixel amount that this strip has scrolled to the right.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 From the given {\i hDC}, the X position 0 will always be the left edge of the strip, as displayed 
on the screen.  Horizontal scrolling is accomplished by the Timeline changing {\i lXOffset}. 
The Y position 0 will by at the top edge of the strip, unless the strip's 
STP_VERTICAL_SCROLL is non-zero, in which case the Y position set by 
STP_VERTICAL_SCROLL will be at the top edge of the strip.  The clipping rectangle will 
always be set such that the strip is unable to draw outside of its screen boundaries.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStrip}, {\b STRIPVIEW}, {\b IDMUSProdStripFunctionBar::FBDraw}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStrip::GetStripProperty Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetStripProperty(}{\b {\b STRIPPROPERTY}} {\i stripProperty}{\b , VARIANT*} {\i pVar}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method gets a property of the strip.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If the method succeeds, the return value is S_OK. \line  
If it fails, the method may return one of the following error values:\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pVar} is NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i stripProperty} contains an unsupported property type.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i stripProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which property to get.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pVar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of the variant to return the property in.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown::AddRef}
 should be called on all valid {\b IUnknown} interfaces 
returned by this method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStrip}, {\b STRIPPROPERTY}, {\b SetStripProperty}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStrip::OnWMMessage Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnWMMessage(}{\b UINT} {\i nMsg}{\b , WPARAM} {\i wParam}
{\b , LPARAM} {\i lParam}
{\b , LONG} {\i lXPos}
{\b , LONG} {\i lYPos}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method passes window messages to a strip.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The window message identifier.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The wParam value.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The wParam value.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lXPos}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 For window messages that contain position information, this contains the X 
position in strip coordinates.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lYPos}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 For window messages that contain position information, this contains the Y 
position in strip coordinates.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The following window messages store valid data in {\i lXPos} and {\i lYPos}:\line  
WM_MOUSEMOVE WM_LBUTTONDBLCLK WM_LBUTTONDOWN WM_LBUTTONUP 
WM_RBUTTONDOWN WM_RBUTTONUP WM_SETCURSOR WM_CONTEXTMENU\par 
\pard\plain \sa160\sl240 \fs21\lang1033 A strip will receive the WM_CREATE message after it is added to the timeline, and a 
WM_DESTROY message after it is removed from the Timeline.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 A strip will receive the WM_MOVE message when its position is changed, via adding, 
removing, or resizing of a strip above it.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 A strip will receive the WM_SIZE message when its size is changed, via resizing the 
function bar, the user clicking the minimize/maximize button, the user double-clicking 
either a minimized strip or the title bar of the maximized strip, or the user vertically 
resizing the strip by dragging the separator line below it.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 A strip will receive the WM_KILLFOCUS message when it loses the active focus.  Graphically, 
this is represented by the strip's gutter color changing from yellow or orange to grey or red, 
respectively.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 A strip will receive the WM_SETFOCUS message when it gains the active focus.  Graphically, 
this is represented by the strip's gutter color changing from grey or red to yellow or orange, 
respectively.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStrip}, {\b IDMUSProdStripFunctionBar::FBOnWMMessage}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStrip::SetStripProperty Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetStripProperty(}{\b {\b STRIPPROPERTY}} {\i stripProperty}{\b , VARIANT} {\i var}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets a property of the strip.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If the method succeeds, the return value is S_OK. \line  
If it fails, the method may return one of the following error values:\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i var} contains a NULL pointer.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i stripProperty} contains an unsupported property type.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i stripProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which property to set.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i var}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The data to set the property with.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i var} is of type VT_UNKNOWN and the {\b IDMUSProdStrip} wishes to keep a local copy of 
the data, {\b IUnknown::AddRef}
\tab should be called on the passed interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStrip}, {\b STRIPPROPERTY}, {\b GetStripProperty}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStripFunctionBar Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The Timeline uses this interface to interact with the editors that 
display information in the functionbar area of a strip.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT FBDraw}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Draw the client area of the strip function bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT FBOnWMMessage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pass window messages to a strip function bar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStrip}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStripFunctionBar::FBDraw Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT FBDraw(}{\b HDC} {\i hDC}{\b , {\b STRIPVIEW}} {\i stripView}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method draws the client area of the strip's function 
bar in the Timeline control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDC}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A handle to the device context in which to draw.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i stripView}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The current strip view state, either SV_FUNCTIONBAR_NORMAL or 
SV_FUNCTIONBAR_MINIMIZED.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 From the given {\i hDC}, the X position 0 will always be the left edge of the function bar, as 
displayed on the screen.  The Y position 0 will by at the top edge of the strip, unless the 
strip's\tab STP_VERTICAL_SCROLL is non-zero, in which case the Y position set by 
STP_VERTICAL_SCROLL will be at the top edge of the strip.  The clipping rectangle will 
always be set such that the strip's function bar is unable to draw outside of its screen 
boundaries, and is unable to draw on the bar displaying the strip's name.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStripFunctionBar}, {\b STRIPVIEW}, {\b IDMUSProdStrip::Draw}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStripFunctionBar::FBOnWMMessage Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT FBOnWMMessage(}{\b UINT} {\i nMsg}{\b , WPARAM} {\i wParam}
{\b , LPARAM} {\i lParam}
{\b , LONG} {\i lXPos}
{\b , LONG} {\i lYPos}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method passes on window messages to a strip's 
function bar area.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The window message identifier.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The wParam value.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The wParam value.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lXPos}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 For window messages that contain position information, this contains the X 
position in strip coordinates.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lYPos}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 For window messages that contain position information, this contains the Y 
position in strip coordinates.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The following window messages store valid data in {\i lXPos} and {\i lYPos}:\line  
WM_MOUSEMOVE WM_LBUTTONDBLCLK WM_LBUTTONDOWN WM_LBUTTONUP 
WM_RBUTTONDOWN WM_RBUTTONUP WM_SETCURSOR WM_CONTEXTMENU\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStripFunctionBar}, {\b IDMUSProdStrip::OnWMMessage}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStripMgr Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The Timeline uses this interface to interact with the editors that 
edit DirectMusic tracks inside a Segment.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT IsParamSupported}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Determines whether the strip manager supports a given data type in the 
{\b GetParam} and {\b SetParam} methods.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Retrieve data from a strip manager.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set data in a strip manager.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnUpdate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Callback which notifies interested strip managers when data of type {\i rguidType} changes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetStripMgrProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Get a property of the strip manager.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetStripMgrProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set a property of the strip manager.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStrip}, {\b IDMUSProdStripFunctionBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStripMgr::GetParam Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetParam(}{\b REFGUID} {\i rguidType}{\b , MUSIC_TIME} {\i mtTime}
{\b , MUSIC_TIME*} {\i pmtNext}
{\b , void*} {\i pData}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is analagous to the 
{\b IDirectMusicTrack::GetParam}
.  This method retrieves data from a StripMgr.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If the method succeeds and the type is supported, the return value is S_OK. \line  
If it fails, the method may return one of the following error values:\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell An invalid pointer (usually NULL) was passed as a parameter.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell The parameter type is not supported.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguidType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reference to (C++) or address of (C) the identifier of the type 
of data to obtain. See {\b SegmentGUIDs} and the DirectMusic documentation of Track Parameter Types.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i mtTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Time from which to obtain the data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pmtNext}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the time (relative to 
the current time) until which the data is valid. If this returns a value of 0, it means 
either that the data will always be valid, or that it is unknown when it will become 
invalid. If this information is not needed, {\i pmtNext} can be set to NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of an allocated structure in which the data is to be 
returned.  The structure must be of the appropriate kind and size for the data type 
identified by {\i rguidType}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStripMgr}, {\b IsParamSupported} {\b SetParam} {\b SegmentGUIDs}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStripMgr::GetStripMgrProperty Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetStripMgrProperty(}{\b {\b STRIPMGRPROPERTY}} {\i stripMgrProperty}{\b , VARIANT*} {\i pVar}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method gets a property of the strip.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If the method succeeds, the return value is S_OK. \line  
If it fails, the method may return one of the following error values:\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pVar} is NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i stripMgrProperty} contains an unsupported property type.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i stripMgrProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which property to get.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pVar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of the variant to return the property in.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown::AddRef}
 should be called on all valid {\b IUnknown} interfaces 
returned by this method when S_OK is returned.  The caller is responsible for calling {\b IUnknown::Release}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStripMgr}, {\b STRIPMGRPROPERTY} {\b SetStripMgrProperty}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStripMgr::IsParamSupported Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT IsParamSupported(}{\b REFGUID} {\i rguidType}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is analagous to 
{\b IDirectMusicTrack::IsParamSupported}
.  This method determines whether the track 
supports a given data type in the {\b GetParam} and {\b SetParam} 
methods.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If the method succeeds and the type is supported, the return value is S_OK. \line  
If it fails, the method may return one of the following error values:\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell An invalid pointer (usually NULL) was passed as a parameter.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell The parameter type is not supported.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguidType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reference to (C++) or address of (C) the identifier of the type 
of data. See {\b SegmentGUIDs} and the DirectMusic documentation of Track Parameter Types.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStripMgr}, {\b GetParam} {\b SetParam} {\b SegmentGUIDs}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStripMgr::OnUpdate Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnUpdate(}{\b REFGUID} {\i rguidType}{\b , DWORD} {\i dwGroupBits}
{\b , void*} {\i pData}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 The Timeline calls this method to notify interested StripMgrs 
when data of type {\i rguidType} changes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 The most successful error code returned by this method will be returned by 
{\b IDMUSProdTimeline::NotifyStripMgrs}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguidType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reference to (C++) or address of (C) the identifier of the type 
of data that changed. See {\b SegmentGUIDs} and the DirectMusic documentation of Track Parameter Types.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Track groups in which the data changed. A value of 0 is invalid. Each 
bit in {\i dwGroupBits} corresponds to a track group. If the data affects all groups, this parameter 
will be 0xFFFFFFFF.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of structure containing the data, or NULL if no data is 
required. The structure must be of the appropriate kind and size for the data type 
identified by {\i rguidType}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline::AddToNotifyList}
 initiates the callback process. {\b IDMUSProdTimeline::RemoveFromNotifyList}
 
must be called when the StripMgr no longer wants to receive notifications.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStripMgr}, {\b SegmentGUIDs}, {\b IDMUSProdTimeline::NotifyStripMgrs}
, {\b IDMUSProdTimeline::AddToNotifyList}
, {\b IDMUSProdTimeline::RemoveFromNotifyList}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStripMgr::SetParam Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetParam(}{\b REFGUID} {\i rguidType}{\b , MUSIC_TIME} {\i mtTime}
{\b , void*} {\i pData}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is analagous to the 
{\b IDirectMusicTrack::SetParam}
.  This method sets data on a track.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If the method succeeds, the return value is S_OK. \line  
If it fails, the method may return one of the following error values:\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell An invalid pointer (usually NULL) was passed as a parameter.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_NOTIMPL\cell The parameter type is not supported.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Insufficient memory to complete task.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguidType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reference to (C++) or address of (C) the identifier of the type 
of data to obtain. See {\b SegmentGUIDs} and the DirectMusic documentation of Track Parameter Types.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i mtTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Time at which to set the data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of structure containing the data, or NULL if no data is 
required. The structure must be of the appropriate kind and size for the data type 
identified by {\i rguidType}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStripMgr}, {\b IsParamSupported} {\b GetParam} {\b SegmentGUIDs}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdStripMgr::SetStripMgrProperty Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetStripMgrProperty(}{\b {\b STRIPMGRPROPERTY}} {\i stripMgrProperty}{\b , VARIANT} {\i var}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets a property of the strip.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If the method succeeds, the return value is S_OK. \line  
If it fails, the method may return one of the following error values:\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i var} contains a NULL pointer (except for {\b SMP_ITIMELINECTL}
, 
where NULL is a valid value).\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i stripMgrProperty} contains an unsupported property type.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i stripMgrProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which property to set.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i var}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The data to set the property with.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i var} is of type VT_UNKNOWN and the {\b IDMUSProdStripMgr} wishes to keep a local copy of 
the data, {\b IUnknown::AddRef}
\tab should be called on the passed interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStripMgr}, {\b STRIPMGRPROPERTY} {\b GetStripMgrProperty}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Coordinates the display of strips in a Timeline format.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AddStripMgr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Add a strip manager to the Timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AddStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Add a strip to the Timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetMarkerTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set the location of one of the selection markers.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetMarkerTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Get the location of one of the selection markers.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT ClocksToPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert from a time in clocks to a horizontal pixel position.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT PositionToClocks}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert from a horizontal pixel position to a time in clocks.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT DrawMusicLines}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Draw vertical bar, beat, and grid lines in the specified device context.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetTimelineProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set a property of the Timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetTimelineProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Get a property of the Timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Refresh}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Redraw the entire Timeline window.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT ClocksToMeasureBeat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert from a time in clocks to a measure and beat value.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT PositionToMeasureBeat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert from a pixel position to a measure and beat value.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT MeasureBeatToClocks}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert from a measure and beat to a time in clocks.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT MeasureBeatToPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert from a measure and beat to a pixel position.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT StripInvalidateRect}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Invalidate the specified rectangle in a strip, causing the area to be redrawn.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetPropertyPage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Change the currently display property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RemovePropertyPageObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Remove a property page object from the currently displayed property sheet.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT StripSetTimelineProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set a strip property that is controlled by the Timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnDataChanged}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Notify the main editor that data has changed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT TrackPopupMenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Display a context menu at the specified position.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT ClocksToRefTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert from a time in clocks to a time in REFERENCE_TIME units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT PositionToRefTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert from a pixel position to a time in REFERENCE_TIME units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT MeasureBeatToRefTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert from a measure and beat to a time in REFERENCE_TIME units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RefTimeToClocks}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert from a time in REFERENCE_TIME units to a time in clocks.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RefTimeToPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert from a time in REFERENCE_TIME units to a pixel position.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RefTimeToMeasureBeat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert from a time in REFERENCE_TIME units to a measure and beat value.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT ScreenToStripPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert a point from screen coordinates to strip coordinates.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT StripGetTimelineProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Get a strip property that is controlled by the Timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RemoveStripMgr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Remove a strip manager from the Timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RemoveStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Remove a strip from the Timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Retrieve data from a strip manager in the Timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set data on a strip manager in the Timeline\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetStripMgr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Retrieve a specified strip manager.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT InsertStripAtDefaultPos}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Insert a strip into the Timeline, using the default sorting order.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT EnumStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Enumerate through all strips displayed within the Timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT InsertStripAtPos}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Insert a strip into the Timeline at a specified position.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT StripToWindowPos}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Convert a point from strip coordinates to Timeline Window coordinates.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AddToNotifyList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Register a StripMgr to receive notifications of a specified type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT RemoveFromNotifyList}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Unregister a StripMgr from receiving notifications of a specified type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT NotifyStripMgrs}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Broadcast the specified notification to all registered strip managers.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AllocTimelineDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allocate an object that implements the {\b IDMUSProdTimelineDataObject} interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetPasteType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the type of Paste operation to perform.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetPasteType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets the type of Paste operation to perform.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdStrip}, {\b IDMUSProdStripMgr}, {\b IDMUSProdStripFunctionBar}, 
{\b IDMUSProdTimelineEdit}, {\b IDMUSProdTimelineCallback}, {\b IDMUSProdTimelineDataObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::AddStrip Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AddStrip(}{\b {\b IDMUSProdStrip}*} {\i pIStrip}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method adds a strip at the 
bottom of the strips displayed by the Timeline.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i punkStrip}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell The strip is already displayed by the Timeline\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Unable to allocate memory while adding the strip\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The strip to add\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStrip}, {\b RemoveStrip}, 
{\b InsertStripAtDefaultPos}, {\b InsertStripAtPos}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::AddStripMgr Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AddStripMgr(}{\b {\b IDMUSProdStripMgr}*} {\i pIStripMgr}{\b , DWORD} {\i dwGroupBits}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method adds an {\b IDMUSProdStripMgr} to the 
list of strip managers within the Timeline.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i punkStripMgr}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The strip manager was previously added to the Timeline\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Unable to allocate memory while adding the strip manager\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStripMgr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The strip manager to add\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) this strip manager belongs to.  A value 
of 0 is invalid. Each bit in {\i dwGroupBits} corresponds to a track group.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Using the {\i dwGroupBits} parameter and the Strip manager's FourCCCKIds 
(returned by the method {\b IDMUSProdStripMgr::GetFourCCCKIDs}
), the Timeline determines a 
position for the StripMgr in its internal list.\line  
They are ordered first by the least track group number they belong to, then in the following order, 
then by the order they were inserted:\line  
Chord\line  
Signpost\line  
ChordMap Reference\line  
Groove\line  
Tempo\line  
Style Reference\line  
Sequence\line  
Time Signature\line  
Band\line  
Mute\line  
All other strips\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStripMgr}, {\b RemoveStripMgr}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::AddToNotifyList Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AddToNotifyList(}{\b {\b IDMUSProdStripMgr}*} {\i pIStripMgr}{\b , REFGUID} {\i rguidType}
{\b , DWORD} {\i dwGroupBits}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method enables a StripMgr to receive 
notifications of type {\i rguidType} send to at least one group of {\i dwGroupBits}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i pIStripMgr}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Not enough memory available\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStripMgr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The strip manager to add.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguidType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reference to the identifier of the notification type to start 
receiving notifications for.  See {\b SegmentGUIDs} and the list of track parameter types 
in the DirectX documentation for a list of possible notifications.  Strips can also define 
their own types for custom notifications.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to receive notifications for.  A value of 
0 is invalid. Each bit in {\i dwGroupBits} corresponds to a track group. To receive all notifications 
of the type specified by {\i rguidType} regardless of groups, set this parameter to 0xFFFFFFFF.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStripMgr::OnUpdate}
, {\b RemoveFromNotifyList}, 
{\b NotifyStripMgrs}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::AllocTimelineDataObject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AllocTimelineDataObject(}{\b {\b IDMUSProdTimelineDataObject}} {\i ppITimelineDataObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method allocates an object that 
implements the {\b IDMUSProdTimelineDataObject} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Not enough memory available to allocate a TimelineDataObject\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i ppITimelineDataObject} is NULL\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppITimelineDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive a pointer 
to the TimelineDataObject.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A Timeline DataObject simplifies dealing with the clipboard, and allows the Timeline to manage 
multiple-strip copy and paste operations.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdTimelineDataObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::ClocksToMeasureBeat Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT ClocksToMeasureBeat(}{\b DWORD} {\i dwGroupBits}{\b , DWORD} {\i dwIndex}
{\b , long} {\i lTime}
{\b , long*} {\i plMeasure}
{\b , long*} {\i plBeat}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts 
from a time in clocks to a time in measures and beats\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i plMeasure} and {\i plBeat}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The Time Signature was unable to be read by a call to {\b GetParam}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to look for a time signature in.  A value of 
0 is invalid.  Each bit in {\i dwGroupBits} corresponds to a track group.  To look for a time 
signature in any strip manager regardless of groups, set this parameter to 0xFFFFFFFF.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Zero-based index of the specified time signature to use.  This index 
will indicate to use the nth strip manager that provides time signature information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The time in clocks\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMeasure}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to recieve the measure number, with 
measure 0 as the first measure.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plBeat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the beat number, with beat 
0 as the first beat in each measure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i lTime} is less than 0, the Time Signature at time 0 will 
be used to compute {\i plMeasure} and {\i plBeat}.  {\i plMeasure} will 
contain the negative measure number, and {\i plBeat} will contain 
the beat in the measure that {\i lTime} falls in.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Either {\i plMeasure} or {\i lBeat} may be NULL, but not both.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b MeasureBeatToClocks}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::ClocksToPosition Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT ClocksToPosition(}{\b long} {\i lTime}{\b , long*} {\i plPosition}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts 
from a time in clocks to a horizontal pixel position\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as  {\i plPosition}\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The time in clocks\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the pixel position this 
time resolves to.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Negative values for {\i lTime} are valid.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Due to rounding errors, converting from a time to a pixel position and back 
will usually return a value different from the original one.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b PositionToClocks}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::ClocksToRefTime Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT ClocksToRefTime(}{\b long} {\i lTime}{\b , REFERENCE_TIME*} {\i pRefTime}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts 
from a time in clocks to a time in REFERENCE_TIME units\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as  {\i pRefTime}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The tempo is zero at some point.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The time in clocks\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pRefTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the time in 
REFERENCE_TIME units this time resolves to.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Negative values for {\i lTime} are valid.  The tempo at time 0 will be used 
to compute the value to return in {\i pRefTime}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b RefTimeToClocks}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::DrawMusicLines Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT DrawMusicLines(}{\b HDC} {\i hdc}{\b , {\b MUSICLINE_PROPERTY}} {\i mlp}
{\b , DWORD} {\i dwGroupBits}
{\b , DWORD} {\i dwIndex}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method draws 
vertical bar, beat, and grid lines in the specified device context.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell Unable to attach to {\i hdc}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i mlp} does not contain a valid value.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hdc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A handle to the device context to draw in\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i mlp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which type of lines to draw.  Must be one of {\b MUSICLINE_PROPERTY}\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to look for a time signature in.  A value of 
0 is invalid.  Each bit in {\i dwGroupBits} corresponds to a track group.  To look for a time 
signature in any strip manager regardless of groups, set this parameter to 0xFFFFFFFF.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Zero-based index of the specified time signature to use.  This index 
will indicate to use the nth strip manager that provides time signature information.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b MUSICLINE_PROPERTY}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::EnumStrip Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT EnumStrip(}{\b DWORD} {\i dwEnum}{\b , {\b IDMUSProdStrip}**} {\i ppIStrip}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method enumerates through all strips 
displayed within the Timeline.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i ppIStrip}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell There is no strip at the given index.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwEnum}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Zero-based index into the Timeline's strip list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive a pointer to the strip. 
The caller is responsible for Release()ing the pointer when it is done with it.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStrip}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::GetMarkerTime Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetMarkerTime(}{\b {\b MARKERID}} {\i idMarkerType}{\b , {\b TIMETYPE}} {\i ttType}
{\b , long*} {\i plTime}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method gets the location of 
one of the markers in the time strip.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i plTime} is NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i ttType} or {\i idMarkerType} do not contain valid values.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i idMarkerType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which marker to get the location of.  Must be 
one of {\b MARKERID}\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ttType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which units to use when computing {\i plTime}.  Must be 
one of {\b TIMETYPE}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the location of {\i idMarkerType}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b TIMETYPE}, {\b MARKERID}, {\b SetMarkerTime}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::GetParam Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetParam(}{\b REFGUID} {\i rguidType}{\b , DWORD} {\i dwGroupBits}
{\b , DWORD} {\i dwIndex}
{\b , MUSIC_TIME} {\i mtTime}
{\b , MUSIC_TIME*} {\i pmtNext}
{\b , void*} {\i pData}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves data of the specified type 
from a strip manager in the Timeline.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i pData}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell No strip managers support the requested {\i rguidType}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell An internal error occurred.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguidType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reference to the identifier of the type of data to obtain. 
See {\b SegmentGUIDs} and the list of track parameter types 
in the DirectX documentation for a list of possible data types.  Strips can also define 
their own types for custom data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to scan for the strip manager in.  A value of 
0 is invalid. Each bit in {\i dwGroupBits} corresponds to a track group. To scan all strip managers 
regardless of groups, set this parameter to 0xFFFFFFFF.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Index of the strip manager in the group(s) from which to obtain the data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i mtTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Time from which to obtain the data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pmtNext}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the time (relative to 
the current time) until which the data is valid. If this returns a value of 0, it means 
either that the data will always be valid, or that it is unknown when it will become 
invalid. If this information is not needed, {\i pmtNext} may be set to NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of an allocated structure in which the data is to be returned. This 
structure must be of the appropriate kind and size for the data type identified by {\i rguidType}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method is analagous to the DirectMusic method {\b IDirectMusicPerformance::GetParam}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Strip managers are searched in the order that they are listed in the Timeline.  See 
{\b AddStripMgr} for the order they are listed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStripMgr}, {\b SetParam}, {\b IDMUSProdStripMgr::GetParam}
 
[in] */  REFGUID\tab \tab guidType,\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::GetPasteType Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetPasteType(}{\b {\b TIMELINE_PASTE_TYPE}*} {\i ptlptPasteType}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method returns the type of Paste operation 
to perform.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i ptlptPasteType} is NULL\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ptlptPasteType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to store the 
{\b TIMELINE_PASTE_TYPE} in.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b SetPasteType}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::GetStripMgr Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetStripMgr(}{\b REFGUID} {\i rguidType}{\b , DWORD} {\i dwGroupBits}
{\b , DWORD} {\i dwIndex}
{\b , {\b IDMUSProdStripMgr}**} {\i ppIStripMgr}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves a pointer to the specified 
strip manager.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i ppIStripMgr}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell No matching strip manager was found\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell An internal error occurred.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguidType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reference to the identifier of the type of data to search for. 
See {\b SegmentGUIDs} and the list of track parameter types 
in the DirectX documentation for a list of possible data types.  Strips can also define 
their own types for custom data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to scan for the strip manager in.  A value of 
0 is invalid. Each bit in {\i dwGroupBits} corresponds to a track group. To scan all tracks 
regardless of groups, set this parameter to 0xFFFFFFFF.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Zero-based index into the list of tracks of type {\i rguidType} 
and in group {\i dwGroupBits} to return. If multiple groups are selected in {\i dwGroupBits}, 
this index will indicate the nth track of type {\i rguidType} encountered in the union of 
the groups selected.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIStripMgr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive a pointer to 
the strip manager.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method is analagous to the DirectMusic method {\b IDirectMusicPerformance::GetTrack}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStripMgr}, {\b IDMUSProdStripMgr::IsParamSupported}
 
[in] */ REFGUID\tab \tab \tab \tab guidType,\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::GetTimelineProperty Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetTimelineProperty(}{\b {\b TIMELINE_PROPERTY}} {\i tp}{\b , VARIANT*} {\i pVar}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method gets a property of 
the Timeline.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pVar} is NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i tp} does not contain a valid property type.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i tp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which property to get.  Must be one of {\b TIMELINE_PROPERTY}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pVar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of the variant to return the property's data in.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b DMUSProdTimeline}, {\b TIMELINE_PROPERTY}, {\b SetTimelineProperty}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::InsertStripAtDefaultPos Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT InsertStripAtDefaultPos(}{\b {\b IDMUSProdStrip}*} {\i pIStrip}{\b , REFCLSID} {\i rclsidType}
{\b , DWORD} {\i dwGroupBits}
{\b , DWORD} {\i dwIndex}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method inserts a strip into 
timeline, ordering them by using {\i rclsidType}, {\i dwGroupBits} and {\i dwIndex}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i pIStrip}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell {\i pIStrip} was previously added.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell 0 was passed as {\i dwGroupBits}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The strip to add.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rclsidType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The CLSID of the strip to add.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to add the strip in.  A value of 
0 is invalid. Each bit in {\i dwGroupBits} corresponds to a track group.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Where in the list of matching strips to add the strip..\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Using the {\i dwGroupBits} parameter and the {\i rclsidType} parameter, the Timeline determines a 
position for {\i pIStrip} in its display list.\line  
They are ordered first by the least track group number they belong to, then in the following order, 
then by the value of {\i dwIndex}, then by the order they were inserted:\line  
Chord\line  
Signpost\line  
ChordMap Reference\line  
Groove\line  
Tempo\line  
Style Reference\line  
Sequence\line  
Time Signature\line  
Band\line  
Mute\line  
All other strips\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStrip}, {\b RemoveStrip}, 
{\b InsertStripAtPos}, {\b AddStrip}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::InsertStripAtPos Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT InsertStripAtPos(}{\b {\b IDMUSProdStrip}*} {\i pIStrip}{\b , DWORD} {\i dwPosition}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method inserts a strip at the 
specified position.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i pIStrip}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell The operation failed.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell There was not enough available memory to complete the operation.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell dwPosition is 0.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The strip to add to the Timeline.  The strip must not 
have been previously added to the Timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The 0-based position to add the strip at.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 No strip may be inserted before the Time Strip, the first strip in the Timeline. 
Consequently, 0 is an invalid value for {\i dwPosition}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStrip}, {\b RemoveStrip}, 
{\b InsertStripAtDefaultPos}, {\b AddStrip}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::MeasureBeatToClocks Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT MeasureBeatToClocks(}{\b DWORD} {\i dwGroupBits}{\b , DWORD} {\i dwIndex}
{\b , long} {\i lMeasure}
{\b , long} {\i lBeat}
{\b , long*} {\i plTime}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts 
from a measure and beat to a time in clocks.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i plTime}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The Time Signature was unable to be read by a call to {\b GetParam}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to look for a time signature in.  A value of 
0 is invalid.  Each bit in {\i dwGroupBits} corresponds to a track group.  To look for a time 
signature in any strip manager regardless of groups, set this parameter to 0xFFFFFFFF.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Zero-based index of the specified time signature to use.  This index 
will indicate to use the nth strip manager that provides time signature information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lMeasure}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The measure number, with measure 0 as the first measure.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lBeat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The beat number, with beat 0 as the first beat in each measure.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the converted time in clocks.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i lMeasure} is less than 0, the Time Signature at time 0 will 
be used to compute {\i plTime}.  If {\i lBeat} is less than 0, the 
Time Signature in measure {\i lMeasure} will be used to compute the offset 
from the start of measure {\i lMeasure}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b ClocksToMeasureBeat}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::MeasureBeatToPosition Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT MeasureBeatToPosition(}{\b DWORD} {\i dwGroupBits}{\b , DWORD} {\i dwIndex}
{\b , long} {\i lMeasure}
{\b , long} {\i lBeat}
{\b , long*} {\i plPosition}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts 
from a measure and beat to a pixel position.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i plPosition}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The Time Signature was unable to be read by a call to {\b GetParam}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to look for a time signature in.  A value of 
0 is invalid.  Each bit in {\i dwGroupBits} corresponds to a track group.  To look for a time 
signature in any strip manager regardless of groups, set this parameter to 0xFFFFFFFF.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Zero-based index of the specified time signature to use.  This index 
will indicate to use the nth strip manager that provides time signature information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lMeasure}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The measure number, with measure 0 as the first measure.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lBeat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The beat number, with beat 0 as the first beat in each measure.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the pixel position.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i lMeasure} is less than 0, the Time Signature at time 0 will 
be used to compute {\i plPosition}.  If {\i lBeat} is less than 0, the 
Time Signature in measure {\i lMeasure} will be used to compute the offset 
from the start of measure {\i lMeasure}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b PositionToMeasureBeat}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::MeasureBeatToRefTime Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT MeasureBeatToRefTime(}{\b DWORD} {\i dwGroupBits}{\b , DWORD} {\i dwIndex}
{\b , long} {\i lMeasure}
{\b , long} {\i lBeat}
{\b , REFERENCE_TIME*} {\i pRefTime}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts 
from a measure and beat to a time in REFERENCE_TIME units.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i pRefTime}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The Time Signature was unable to be read by a call to {\b GetParam}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to look for a time signature in.  A value of 
0 is invalid.  Each bit in {\i dwGroupBits} corresponds to a track group.  To look for a time 
signature in any strip manager regardless of groups, set this parameter to 0xFFFFFFFF.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Zero-based index of the specified time signature to use.  This index 
will indicate to use the nth strip manager that provides time signature information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lMeasure}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The measure.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lBeat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The beat.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pRefTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the 
reference time.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i lMeasure} is less than 0, the Time Signature at time 0 will 
be used to compute {\i pRefTime}.  If {\i lBeat} is less than 0, the 
Time Signature in measure {\i lMeasure} will be used to compute the offset 
from the start of measure {\i lMeasure}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b RefTimeToMeasureBeat}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::NotifyStripMgrs Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT NotifyStripMgrs(}{\b REFGUID} {\i rguidType}{\b , DWORD} {\i dwGroupBits}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method broadcasts the specified 
notification to all registered strip managers that belong to at least one of {\i dwGroupBits}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell No matching strip managers were found, so no notifications were sent\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguidType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reference to the identifier of the notification type to send. 
See {\b SegmentGUIDs} and the list of track parameter types 
in the DirectX documentation for a list of possible notifications.  Strips can also define 
their own types for custom notifications.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to notify.  A value of 0 is invalid. Each bit in 
{\i dwGroupBits} corresponds to a track group.  To notify all strip managers that asked to hear 
notifications of the type specified by {\i rguidType} regardless of groups, set this parameter to 0xFFFFFFFF.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStripMgr::OnUpdate}
, {\b AddToNotifyList}, 
{\b RemoveFromNotifyList}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::OnDataChanged Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnDataChanged(}{\b IUnknown*} {\i punk}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method calls the registered 
{\b IDMUSProdTimelineCallback::OnDataChanged}
 method with {\i punk} as a 
parameter.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If there is an {\b IDMUSProdTimelineCallback::OnDataChanged}
 method registered, 
the return value is the value returned by {\b IDMUSProdTimelineCallback::OnDataChanged}
. 
Otherwise, the return value is E_FAIL.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The interface to pass.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 When used in the Segment Designer, an {\b IDMUSProdStripMgr} interface must be passed 
in {\i punk}.  The Segment Designer will then call the strip manager's {\b IStream::Save}
 
method to retrieve the new data.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStripMgr}, {\b IDMUSProdTimelineCallback::OnDataChanged}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::PositionToClocks Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT PositionToClocks(}{\b long} {\i lPosition}{\b , long*} {\i plTime}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts 
from a horizontal pixel position to a time in clocks.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as  {\i plTime}\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The horizontal position, in pixels.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the time in clocks this 
position resolves to.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Negative values for {\i lPosition} are valid.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Due to rounding errors, converting from a pixel position to a time and back 
may return a value different from the original one.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b ClocksToPosition}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::PositionToMeasureBeat Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT PositionToMeasureBeat(}{\b DWORD} {\i dwGroupBits}{\b , DWORD} {\i dwIndex}
{\b , long} {\i lPosition}
{\b , long*} {\i plMeasure}
{\b , long*} {\i plBeat}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts 
from a horizontal pixel position to a measure and beat value.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as  {\i plMeasure} and {\i plBeat}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The Time Signature was unable to be read by a call to {\b GetParam}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to look for a time signature in.  A value of 
0 is invalid.  Each bit in {\i dwGroupBits} corresponds to a track group.  To look for a time 
signature in any strip manager regardless of groups, set this parameter to 0xFFFFFFFF.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Zero-based index of the specified time signature to use.  This index 
will indicate to use the nth strip manager that provides time signature information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The horizontal pixel position.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMeasure}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the measure number, with 
measure 0 as the first measure.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plBeat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the beat number, with beat 
0 as the first beat in each measure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i lPosition} is less than 0, the Time Signature at time 0 will 
be used to compute {\i plMeasure} and {\i plBeat}.  {\i plMeasure} will 
contain the negative measure number, and {\i plBeat} will contain 
the beat in the measure that {\i lTime} falls in.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Either {\i plMeasure} or {\i lBeat} may be NULL, but not both.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b MeasureBeatToPosition}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::PositionToRefTime Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT PositionToRefTime(}{\b long} {\i lPosition}{\b , REFERENCE_TIME*} {\i pRefTime}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts 
from a horizontal pixel position to a time in REFERENCE_TIME units.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as  {\i pRefTime}\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The horizontal pixel position.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pRefTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the time 
in REFERENCE_TIME units this position resolves to.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Negative values for {\i lPosition} are valid, in which case the tempo at time 0 will be used 
to compute the value to return in {\i pRefTime}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b RefTimeToClocks}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::Refresh Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Refresh(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method causes a redraw of the 
entire Timeline.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method should be used sparingly.  If at all possible, 
{\b StripInvalidateRect} and {\b NotifyStripMgrs} 
should be used instead.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b StripInvalidateRect}, {\b NotifyStripMgrs}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::RefTimeToClocks Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RefTimeToClocks(}{\b REFERENCE_TIME} {\i RefTime}{\b , long*} {\i plTime}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts 
from a time in REFERENCE_TIME units to a time in clocks.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as  {\i plTime}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The tempo is zero at some point.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i RefTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The time in REFERENCE_TIME units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the time in clocks.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Negative values for {\i RefTime} are valid, in which case the tempo at time 0 will 
be used to compute the value of {\i plTime}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b ClocksToRefTime}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::RefTimeToMeasureBeat Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RefTimeToMeasureBeat(}{\b DWORD} {\i dwGroupBits}{\b , DWORD} {\i dwIndex}
{\b , REFERENCE_TIME} {\i RefTime}
{\b , long*} {\i plMeasure}
{\b , long*} {\i plBeat}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts 
from a time in REFERENCE_CLOCK units to a time in measures and beats\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i plMeasure} or {\i plBeat}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i RefTime} is less than 0.  {\i plMeasure} and {\i plBeat} are 
set to -1.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The tempo is zero at some point or the Time Signature was unable 
to be read by a call to {\b GetParam}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to look for a time signature in.  A value of 
0 is invalid.  Each bit in {\i dwGroupBits} corresponds to a track group.  To look for a time 
signature in any strip manager regardless of groups, set this parameter to 0xFFFFFFFF.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Zero-based index of the specified time signature to use.  This index 
will indicate to use the nth strip manager that provides time signature information.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i RefTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The time in REFERENCE_CLOCK units\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMeasure}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the measure this 
time resolves to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plBeat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the beat this 
time resolves to.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b MeasureBeatToRefTime}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::RefTimeToPosition Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RefTimeToPosition(}{\b REFERENCE_TIME} {\i RefTime}{\b , long*} {\i plPosition}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts 
from a time in REFERENCE_TIME units to a horizontal pixel position\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i plPosition}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell The tempo is zero at some point.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i RefTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The time in REFERENCE_TIME units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of a variable to receive the pixel position this 
time resolves to.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Negative values for {\i RefTime} are valid, in which case the tempo at time 0 will 
be used to compute the value of {\i plPosition}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b PositionToRefTime}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::RemoveFromNotifyList Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RemoveFromNotifyList(}{\b {\b IDMUSProdStripMgr}*} {\i pIStripMgr}{\b , REFGUID} {\i rguidType}
{\b , DWORD} {\i dwGroupBits}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method stops a StripMgr from 
receiving notifications of type {\i rguidType} for groups in {\i dwGroupBits}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i pIStripMgr}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The specified {\i pIStripMgr} can not be found\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStripMgr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The strip manager to remove.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguidType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reference to the identifier of the notification type to stop 
receiving notifications for.  See {\b SegmentGUIDs} and the list of track parameter types 
in the DirectX documentation for a list of possible notifications.  Strips can also define 
their own types for custom notifications.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to stop receiving notifications for.  A value of 
0 is invalid. Each bit in {\i dwGroupBits} corresponds to a track group. To stop receiving all notifications 
of the type specified by {\i rguidType} regardless of groups, set this parameter to 0xFFFFFFFF.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStripMgr::OnUpdate}
, {\b AddToNotifyList}, 
{\b NotifyStripMgrs}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::RemovePropertyPageObject Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RemovePropertyPageObject(}{\b IUnknown*} {\i punkPropPageObj}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method removes 
a property page object previously set by {\b SetPropertyPage}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as  {\i punkPropPageObj}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell {\b TP_DMUSPRODFRAMEWORK} was not set previous to calling this method.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punkPropPageObj}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reference to the {\b IDMUSProdPropPageObject} 
to remove from the current property sheet.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b TP_DMUSPRODFRAMEWORK} must be set to the DirectMusic Producer framework 
object (via a call to {\b SetTimelineProperty} prior to calling 
this method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdPropPageObject},\tab {\b SetPropertyPage} 
[in] */ IUnknown* punkPropPageObj )\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::RemoveStrip Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RemoveStrip(}{\b {\b IDMUSProdStrip}*} {\i pIStrip}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method removes a strip from 
the Timeline.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i pIStrip}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIStrip} was not previously added to the Timeline via 
{\b AddStrip}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The strip to remove\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStrip}, {\b AddStrip}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::RemoveStripMgr Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT RemoveStripMgr(}{\b {\b IDMUSProdStripMgr}*} {\i pIStripMgr}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method removes a strip manager 
from the Timeline.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i punkStripMgr}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIStripMgr} was not previously added to the Timeline via 
{\b AddStripMgr}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStripMgr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The strip manager to remove\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStripMgr}, {\b AddStripMgr}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::ScreenToStripPosition Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT ScreenToStripPosition(}{\b {\b IDMUSProdStrip}*} {\i pIStrip}{\b , {\b POINT}*} {\i pPoint}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts from a 
{\b POINT} in screen coordinates to a {\b POINT} in strip coordinates.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pIStrip} or {\i pPoint} are NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIStrip} was not previously added to the Timeline.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which strip to get the new coordinates from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPoint}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The screen point to convert.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStrip}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::SetMarkerTime Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetMarkerTime(}{\b {\b MARKERID}} {\i idMarkerType}{\b , {\b TIMETYPE}} {\i ttType}
{\b , long} {\i lTime}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets the location of 
one of the markers in the time strip.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i ttType} or {\i idMarkerType} do not contain valid values, or 
lTime is less than zero.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i idMarkerType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which marker to get the location of.  Must be 
one of {\b MARKERID}.  MARKER_LEFTDISPLAY is not supported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ttType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which units to use when computing {\i plTime}.  Must be 
one of {\b TIMETYPE}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The time the marker should be set to.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b TIMETYPE}, {\b MARKERID}, {\b GetMarkerTime}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::SetParam Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetParam(}{\b REFGUID} {\i rguidType}{\b , DWORD} {\i dwGroupBits}
{\b , DWORD} {\i dwIndex}
{\b , MUSIC_TIME} {\i mtTime}
{\b , void*} {\i pData}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets data on a 
strip manager in the timeline\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i pData}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell No strip managers support the requested {\i rguidType}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell An internal error occurred.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i rguidType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reference to the identifier of the type of data to set. 
See {\b SegmentGUIDs} and the list of track parameter types 
in the DirectX documentation for a list of possible data types.  Strips can also define 
their own types for custom data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwGroupBits}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which track group(s) to scan for the strip manager in.  A value of 
0 is invalid. Each bit in {\i dwGroupBits} corresponds to a track group. To scan all strip managers 
regardless of groups, set this parameter to 0xFFFFFFFF.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Index of the strip manager in the group(s) identified by {\i dwGroupBits} where data is to be set.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i mtTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Time at which to set the data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of structure containing the data. This structure must be of 
the appropriate kind and size for the data type identified by rguidType.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method is analagous to the DirectMusic method {\b IDirectMusicPerformance::SetParam}
.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Strip managers are searched in the order that they are listed in the Timeline.  See 
{\b AddStripMgr} for the order they are listed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStripMgr}, {\b GetParam}, {\b IDMUSProdStripMgr::SetParam}
 
[in] */ REFGUID\tab \tab guidType,\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::SetPasteType Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetPasteType(}{\b {\b TIMELINE_PASTE_TYPE}} {\i tlptPasteType}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets the type of Paste operation 
to perform.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i tlptPasteType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The type of {\b TIMELINE_PASTE_TYPE} to set\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b GetPasteType}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::SetPropertyPage Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetPropertyPage(}{\b IUnknown*} {\i punkPropPageMgr}{\b , IUnknown*} {\i punkPropPageObj}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method changes the 
currently displayed {\b IDMUSProdPropSheet} to refer to {\i punkPropPageMgr} 
and {\i punkPropPageObj}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If the property sheet is hidden, this method returns S_FALSE and does not 
set either {\i punkPropPageMgr} or {\i punkPropPageObj}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The current property sheet is hidden.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as  {\i punkPropPageObj} or {\i punkPropPageMgr}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell {\b TP_DMUSPRODFRAMEWORK} was not set previous to calling this method.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punkPropPageMgr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reference to the {\b IDMUSProdPropPageManager} 
to set for the currently displayed property sheet.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punkPropPageObj}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Reference to the {\b IDMUSProdPropPageObject} 
to set for the currently displayed property sheet.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b TP_DMUSPRODFRAMEWORK} must be set to the DirectMusic Producer framework 
object (via a call to {\b SetTimelineProperty} prior to calling 
this method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdPropPageManager}, {\b IDMUSProdPropPageObject}, 
{\b IDMUSProdPropSheet}, {\b RemovePropertyPageObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::SetTimelineProperty Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetTimelineProperty(}{\b {\b TIMELINE_PROPERTY}} {\i tp}{\b , VARIANT} {\i var}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets a property of 
the Timeline.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i tp} does not contain a valid property type.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell {\i var} contained an invalid value for the specified property type.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i tp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which property to get.  Must be one of {\b TIMELINE_PROPERTY}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i var}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The data to set the property with.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The TP_SNAPAMOUNT property is not supported.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b TIMELINE_PROPERTY}, {\b GetTimelineProperty}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::StripGetTimelineProperty Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT StripGetTimelineProperty(}{\b {\b IDMUSProdStrip}*} {\i pIStrip}{\b , {\b STRIP_TIMELINE_PROPERTY}} {\i stp}
{\b , VARIANT*} {\i pVariant}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method gets a strip property 
that is controlled by the Timeline.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pVariant} or {\i pIStrip} are NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i stp} does not contain a valid property type, {\i pIStrip} was not previously 
added to the Timeline,\tab or {\i pVariant} contained an invalid value for the specified property type.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which strip to get the property of.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i stp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which property to get.  Must be one of {\b STRIP_TIMELINE_PROPERTY}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pVariant}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The address to return to property's data in.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b STRIP_TIMELINE_PROPERTY}, 
{\b StripSetTimelineProperty}, {\b IDMUSProdStrip}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::StripInvalidateRect Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT StripInvalidateRect(}{\b {\b IDMUSProdStrip}*} {\i pStrip}{\b , RECT*} {\i pRect}
{\b , BOOL} {\i fErase}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method invalidates the 
specified rectangle in a strip, causing the area to be redrawn.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pStrip} was not added to the timeline by calling one of 
{\b AddStrip}, {\b InsertStripAtDefaultPos}, or 
{\b InsertStripAtPos}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which strip to invalidate the rectangle in.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pRect}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The rectangle to invalidate.  If NULL, invalidate the entire strip.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fErase}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If TRUE, erase the background of the rectangle first.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The parameter {\i fErase} is ignore, as the background of the strip is always filled 
before {\b IDMUSProdStrip::Draw}
 is called.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b Refresh}, {\b IDMUSProdStrip}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::StripSetTimelineProperty Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT StripSetTimelineProperty(}{\b {\b IDMUSProdStrip}*} {\i pIStrip}{\b , {\b STRIP_TIMELINE_PROPERTY}} {\i stp}
{\b , VARIANT} {\i variant}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets a strip property 
that is controlled by the Timeline.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pIStrip} is NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i stp} does not contain a valid property type, {\i variant} 
contains invalid data for the specified property type, or {\i pIStrip} was not previously 
added to the Timeline.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which strip to set the property for.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i stp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which property to set.  Must be one of {\b STRIP_TIMELINE_PROPERTY}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i variant}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The data to set the property with.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStrip}, {\b STRIP_TIMELINE_PROPERTY}, 
{\b StripGetTimelineProperty}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::StripToWindowPos Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT StripToWindowPos(}{\b {\b IDMUSProdStrip}*} {\i pIStrip}{\b , POINT*} {\i pPoint}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts a point from strip 
coordinates to Timeline Window coordinates\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i pPoint} or {\i pIStrip}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i pIStrip} was not previously added to the Timeline\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The strip from whose coordinates to convert from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPoint}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Address of the point to convert.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStrip}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimeline::TrackPopupMenu Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT TrackPopupMenu(}{\b HMENU} {\i hMenu}{\b , long} {\i lXPos}
{\b , long} {\i lYPos}
{\b , {\b DMUSProdStrip}*} {\i pIStrip}
{\b , BOOL} {\i fEditMenu}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method displays a 
context menu at the specified position.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i hMenu} is NULL and fEditMenu is FALSE.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hMenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The handle of the menu to add to the default menu.  If NULL, don't add 
any custom items.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lXPos}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The horizontal coordinate to display the menu at, in screen coordinates.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lYPos}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The vertical coordinate to display the menu at, in screen coordinates.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStrip}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Which strip to display the popup menu for.  If NULL, display the default 
edit menu and send the results to the Timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fEditMenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If TRUE, display the default edit menu.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If a custom menu is specified in {\i hMenu} and {\i fEditMenu} is TRUE, the items in {\i hMenu} 
will be added immediately before the "Properties" item in the edit menu.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 If a valid {\i pIStrip} is given, a WM_COMMAND message will be sent to {\b IDMUSProdStrip::OnWMMessage}
 
if the user chooses a menu item.  No message is sent if the user cancels the context menu.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 If {\i hMenu} is non-NULL, {\i pIStrip} should also be non-NULL to ensure the custom menu items 
are properly handled.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStrip}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineCallback Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The Timeline uses this interface to complete its 
{\b IDMUSProdTimeline::OnDataChanged}
 method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT OnDataChanged}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Called when data in one of the strips changes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStrip}, {\b IDMUSProdTimeline::OnDataChanged}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineCallback::OnDataChanged Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT OnDataChanged(}{\b IUnknown*} {\i punk}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
called in response to a call to {\b IDMUSProdTimeline::OnDataChanged}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i punk}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The interface to pass.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Typically an {\b IDMUSProdStripMgr} interface is passed in {\i punk} and this method 
is used to notify the component that created it that data in the strip has changed. 
The component should then get the new data from the {\i punk}, either by calling 
{\b IStream::Save}
 or another method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline::OnDataChanged}
 {\b IDMUSProdStripMgr}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineDataObject Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 Wrapper interface for data stored on the clipboard.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AddInternalClipFormat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Adds a stream to the clipboard for use by other DirectMusic Producer components.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AddExternalClipFormat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Adds a stream to the clipboard for use by other applications.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT IsClipFormatAvailable}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Checks for data in a specified clipboard format in this object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT AttemptRead}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Tries to read a stream for a specified clipboard format.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetBoundaries}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Get the boundaries of the data in this object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SetBoundaries}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set the boundaries of the data in this object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Import}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Import the data from an {\b IDataObject} into this object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Export}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Export the data from this object into an {\b IDataObject}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineDataObject::AddExternalClipFormat Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AddExternalClipFormat(}{\b UINT} {\i uClipFormat}{\b , IStream*} {\i pIStream}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method adds the specified 
{\i pIStream} with the format {\i uClipFormat} to the list of streams stored in this 
TimelineDataObject.  The stream will be available to other applications that support 
{\i uClipFormat}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i pIStream}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell An unexpected error occurred\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Unable to allocate memory while adding the stream\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uClipFormat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The clipboard format of the stream\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream containing data\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b AddInternalClipFormat} {\b IDMUSProdTimelineDataObject} {\b IDMUSProdTimeline::AllocTimelineDataObject}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineDataObject::AddInternalClipFormat Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AddInternalClipFormat(}{\b UINT} {\i uClipFormat}{\b , IStream*} {\i pIStream}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method adds the specified 
{\i pIStream} with the format {\i uClipFormat} to the internal list of streams stored 
in this TimelineDataObject.  The stream will be unavailable to other applications.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell NULL was passed as {\i pIStream}\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell Unable to allocate memory while adding the stream\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uClipFormat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The clipboard format of the stream\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The stream containing data\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b AddExternalClipFormat} {\b IDMUSProdTimelineDataObject} {\b IDMUSProdTimeline::AllocTimelineDataObject}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineDataObject::AttemptRead Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT AttemptRead(}{\b UINT} {\i uClipFormat}{\b , IStream} {\i ppIStream}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method searches the list 
of internal and external clipboard formats available, and if a match is found it fills 
{\i ppIStream} with a pointer to the stream containing the data.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The clipboard format is available. {\i ppIStream} contains a pointer to the 
stream containing the data.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell The clipboard format was not found.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i ppIStream} is NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uClipFormat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The clipboard format to search for\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to the location to store a pointer to the stream 
containing the data.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A subsequence call to this method with the same {\i uClipFormat} will return a different 
stream pointer, if one is availabe.  This allows multiple strips of the same type to be copied 
and pasted without losing data.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IsClipFormatAvailable} {\b IDMUSProdTimelineDataObject} {\b IDMUSProdTimeline::AllocTimelineDataObject}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineDataObject::Export Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Export(}{\b IDataObject} {\i ppIDataObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method exports the clipboard 
data formats stored in this {\b ITimleineDataObject} and creates an IDataObject 
that can be subsequently added to the clipboard.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i ppIDataObject} was successfully exported.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_UNEXPECTED\cell We failed to register the Timeline's clipboard format.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i ppIDataObject} is NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppIDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer location to store the pointer to the new {\b IDataObject}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineDataObject} {\b IDataObject} {\b IDMUSProdTimeline::AllocTimelineDataObject}
 {\b Import}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineDataObject::GetBoundaries Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetBoundaries(}{\b long} {\i plStartTime}{\b , long} {\i plEndTime}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method returns the 
start and edit times of the selection that was pasted to the clipboard.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i plStartTime} and/or {\i plEndTime} were successfully set.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_PENDING\cell The start and end boundaries are not available (they are both internally set to -1).\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell Both {\i plStartTime} and {\i plEndTime} are NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plStartTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to the location to store the start time in.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plEndTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to the location to store the end time in.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 These boundaries are only available if a {\b IDMUSProdTimelineDataObject} was 
pasted to the clipboard with valid boundaries.  Either {\i plStartTime} or {\i plEndTime} 
may be NULL, but not both.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineDataObject} {\b IDMUSProdTimeline::AllocTimelineDataObject}
 {\b SetBoundaries}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineDataObject::Import Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Import(}{\b IDataObject} {\i pIDataObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method imports the clipboard 
data formats from an IDataObject and makes them accessable from the methods of 
{\b IDMUSProdTimelineDataObject}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell {\i pIDataObject} was successfully imported.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell {\i pIDataObject} is NULL.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to {\b IDataObject} to import.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineDataObject} {\b IDataObject} {\b IDMUSProdTimeline::AllocTimelineDataObject}
 {\b Import}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineDataObject::IsClipFormatAvailable Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT IsClipFormatAvailable(}{\b UINT} {\i uClipFormat}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method searches the list 
of internal and external clipboard formats available, and returns S_OK if it finds 
{\i uClipFormat}.  S_FALSE is returned if {\i uClipFormat} is not found.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The clipboard format is available.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell The clipboard format is not available\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uClipFormat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The clipboard format to search for\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b AttemptRead} {\b IDMUSProdTimelineDataObject} {\b IDMUSProdTimeline::AllocTimelineDataObject}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineDataObject::SetBoundaries Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SetBoundaries(}{\b long} {\i lStartTime}{\b , long} {\i lEndTime}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets the 
boundaries to save to the clipboard and return with {\b GetBoundaries}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The start and end time were successfully set.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lStartTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The start time.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lEndTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The end time.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If {\i lStartTime} and {\i lEndTime} are both -1, the TimelineDataObject will not persist 
them to the clipboard, and {\b GetBoundaries} will return 
E_PENDING.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineDataObject} {\b IDMUSProdTimeline::AllocTimelineDataObject}
 {\b GetBoundaries}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineEdit Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 This interface is used to perform edit operations 
on strips in the Timeline.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Cut}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Copy the selected data, then delete it.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Copy}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Copy the selected data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Paste}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Paste data from the clipboard into the strip.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Insert}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Insert a new item into the strip.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Delete}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Delete the selected data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT SelectAll}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Select all data in the strip.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CanCut}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Checks to see if 'Cut' is supported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CanCopy}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Checks to see if 'Copy' is supported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CanPaste}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Checks to see if 'Paste' is supported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CanInsert}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Checks to see if 'Insert' is supported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CanDelete}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Checks to see if 'Delete' is supported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT CanSelectAll}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Checks to see if 'Select All' is supported.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 To allow editing of a strip, this interface should be implemented on the same object that 
implements the {\b IDMUSProdStrip} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimeline}, {\b IDMUSProdStrip}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineEdit::CanCopy Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CanCopy(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Checks to see if 'Copy' is supported.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Copying the selected data is currently supported.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Copy is currently unsupported.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineEdit}, {\b CanCut}, {\b CanDelete}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineEdit::CanCut Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CanCut(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Checks to see if 'Cut' is supported.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Cutting the selected data is currently supported.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Cut is currently unsupported.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineEdit}, {\b CanCopy}, {\b CanDelete}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineEdit::CanDelete Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CanDelete(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Checks to see if 'Delete' is supported.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Deleting the selected data is currently supported.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Delete is currently unsupported.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineEdit}, {\b CanInsert}, {\b CanCut}, {\b CanCopy}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineEdit::CanInsert Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CanInsert(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Checks to see if 'Insert' is supported.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Inserting new data is currently supported.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell Insert is currently unsupported.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineEdit}, {\b CanDelete}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineEdit::CanPaste Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CanPaste(}{\b {\b IDMUSProdTimelineDataObject}*} {\i pIDataObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Checks to see if 'Paste' is supported.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell A data format in either {\i pIDataObject} or the clipboard is supported.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell No supported data formats found.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If this is non-NULL, the method should check for 
supported formats in the passed {\i pIDataObject}.  If this is NULL, the method should check 
the clipboard directly, preferably by using an {\b IDMUSProdTimelineDataObject} object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineEdit}, {\b IDMUSProdTimelineDataObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineEdit::CanSelectAll Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT CanSelectAll(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Checks to see if 'Select All' is supported.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell There is data available to be selected.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_FALSE\cell No data is available to be selected.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineEdit}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineEdit::Copy Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Copy(}{\b {\b IDMUSProdTimelineDataObject}*} {\i pIDataObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Copy the selected data.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If this is non-NULL, the method should add its 
data to the passed {\i pIDataObject}.  If this is NULL, the method should add its data 
directly to the clipboard, preferably by using an {\b IDMUSProdTimelineDataObject} object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineEdit}, {\b Cut}, {\b IDMUSProdTimelineDataObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineEdit::Cut Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Cut(}{\b {\b IDMUSProdTimelineDataObject}*} {\i pIDataObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Copy the selected data, then delete it.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If this is non-NULL, the method should add its 
data to the passed {\i pIDataObject}.  If this is NULL, the method should add its data 
directly to the clipboard, preferably by using an {\b IDMUSProdTimelineDataObject} object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineEdit}, {\b Copy}, {\b Delete}, 
{\b IDMUSProdTimelineDataObject}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineEdit::Delete Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Delete(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Delete the selected data.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineEdit}, {\b Insert}, {\b Cut}, {\b Copy},\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineEdit::Insert Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Insert(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Insert a new item into the strip.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineEdit}, {\b Delete}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineEdit::Paste Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Paste(}{\b {\b IDMUSProdTimelineDataObject}*} {\i pIDataObject}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Paste data from the clipboard into the strip.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIDataObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If this is non-NULL, the method should get its 
data from the passed {\i pIDataObject}.  If this is NULL, the method should read its data 
directly to the clipboard, preferably by using an {\b IDMUSProdTimelineDataObject} object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Be sure to call {\b IDMUSProdTimeline::GetPasteType}
 to ensure the correct paste operation 
is completed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineEdit}, {\b IDMUSProdTimelineDataObject}, {\b IDMUSProdTimeline::GetPasteType}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTimelineEdit::SelectAll Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT SelectAll(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Select all data in the strip.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTimelineEdit}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdToolBar Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The {\b IDMUSProdToolBar} interface provides the means for a DirectMusic Producer 
{\b Component} to add a {\b ToolBar} to the {\b Framework}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The ToolBar object's {\b IDMUSProdToolBar} interface gets handed to the Framework via the 
Framework's {\b IDMUSProdFramework::AddToolBar}
 method.  This method adds the ToolBar to 
the Framework's toolbar space.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b ToolBar} Object, {\b IDMUSProdFramework::AddToolBar}
, {\b IDMUSProdFramework::RemoveToolBar}
\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the owner window, HINSTANCE, resource ID, and title used 
when the Framework creates the toolbar control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetMenuText}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns text for the menu item placed in the Framework's View 
menu that is used to show/hide the toolbar control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetMenuHelpText}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns context help text for the menu item placed in the 
Framework's View menu that is used to show/hide the toolbar control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Initialize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Initializes the toolbar control.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdToolBar::GetInfo Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetInfo(}{\b HWND*} {\i phWndOwner}{\b , HINSTANCE*} {\i phInstance}
{\b , UINT*} {\i pnResourceId}
{\b , BSTR*} {\i pbstrTitle}
{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 A {\b Component} can call 
{\b IDMUSProdFramework::AddToolBar}
 to add a {\b ToolBar} to the Framework's toolbar 
space.  {\b GetInfo} returns the owner window, HINSTANCE, resource 
ID, and title used when the Framework creates the toolbar control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The owner window, HINSTANCE, resource ID, and title were returned in {\i phWndOwner}, 
{\i phInstance}, {\i pnResourceId}, and {\i pbstrTitle}.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in either {\i phWndOwner}, {\i phInstance}, {\i pnResourceId} or 
{\i pbstrTitle} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred, and values were not returned in {\i phWndOwner}, {\i phInstance}, 
{\i pnResourceId} and {\i pbstrTitle}.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i phWndOwner}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Pointer to the handle of the window that receives notifications 
from the toolbar control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i phInstance}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Pointer to the handle of the module containing resources 
for the toolbar control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pnResourceId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Pointer to the ID of the TOOLBAR resource used when creating 
the toolbar.  A value of -1 indicates that the {\b Initialize} method 
takes care of adding buttons to the toolbar control.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrTitle}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out] Pointer to the caller-allocated variable that 
receives a copy of the ToolBar title.  The caller must free {\i pbstrTitle} with 
SysFreeString when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example returns the owner window, HINSTANCE, resource ID, and title used by the 
Framework when creating the toolbar control:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CTempTransportMsgHandler::GetInfo( HWND* phWndOwner, HINSTANCE* phInstance, UINT* pnResourceId, BSTR* pbstrTitle )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( (phWndOwner == NULL)\par 
\tab ||  (phInstance == NULL)\par 
\tab ||  (pnResourceId == NULL)\par 
\tab ||  (pbstrTitle == NULL) )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab *phWndOwner = GetSafeHwnd();\par 
\tab *phInstance = theApp.m_hInstance;\par 
\tab *pnResourceId = IDR_TEMP_TOOLBAR;\par 
\par 
\tab CString strTitle = _T("Transport");\par 
\tab *pbstrTitle = strTitle.AllocSysString();\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdToolBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdToolBar::GetMenuHelpText Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetMenuHelpText(}{\b BSTR*} {\i pbstrHelpText}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 A {\b Component} can call 
{\b IDMUSProdFramework::AddToolBar}
 to add a {\b ToolBar} to the Framework's toolbar 
space.  {\b GetMenuHelpText} returns context help text for the menu 
item placed in the Framework's View menu that is used to show/hide the toolbar 
control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The context help text was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pbstrHelpText} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the context help text was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrHelpText}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the caller-allocated variable that 
receives a copy of the context help text.  The caller must free {\i pbstrHelpText} 
with SysFreeString when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This text appears in the Framework's status bar when the mouse pointer moves over the 
menu item placed in the Framework's View menu that is used to show/hide the toolbar 
control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example provides context help for the menu item added to the Framework's 
View menu:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CTempTransportMsgHandler::GetMenuHelpText( BSTR* pbstrMenuHelpText )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pbstrMenuHelpText == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab CString strMenuHelpText;\par 
\tab TCHAR achBuffer[MID_BUFFER];\par 
\par 
\tab if( ::LoadString(theApp.m_hInstance, IDS_TEMP_TOOLBAR_HELP, achBuffer, MID_BUFFER) )\par 
\tab \{\par 
\tab \tab strMenuHelpText = achBuffer;\par 
\tab \}\par 
\par 
\tab *pbstrMenuHelpText = strMenuHelpText.AllocSysString();\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdToolBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdToolBar::GetMenuText Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetMenuText(}{\b BSTR*} {\i pbstrText}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 A {\b Component} can call 
{\b IDMUSProdFramework::AddToolBar}
 to add a {\b ToolBar} to the Framework's toolbar 
space.  {\b GetMenuText} returns the text for the menu item placed 
in the Framework's View menu that is used to show/hide the toolbar control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The menu text was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pbstrText} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the menu text was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrText}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [out,retval] Pointer to the caller-allocated variable that 
receives a copy of the menu text.  The caller must free {\i pbstrText} with 
SysFreeString when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This text appears in the Framework's View menu.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example places "Transport Controls" into the Framework's View menu:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CTempTransportMsgHandler::GetMenuText( BSTR* pbstrText )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( pbstrText == NULL )\par 
\tab \{\par 
\tab \tab return E_POINTER;\par 
\tab \}\par 
\par 
\tab CString strText = _T("Transport &Controls");\par 
\tab *pbstrText = strText.AllocSysString();\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdToolBar}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdToolBar::Initialize Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Initialize(}{\b HWND} {\i hWndToolBar}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 A {\b Component} can call {\b IDMUSProdFramework::AddToolBar}
 to add a {\b ToolBar} object to 
the Framework's toolbar space.  This method initializes the toolbar control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The toolbar control was initialized successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_INVALIDARG\cell {\i hWndToolBar} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_OUTOFMEMORY\cell The toolbar control could not be initialized due to lack of memory.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell The toolbar control could not be initialized for some reason other than 
lack of memory or invalid arguments.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hWndToolBar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 [in] Handle to the toolbar control's window.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Called immediately after the Framework creates the toolbar control.\par 
In addition to allocating necessary resources, this method may add additional controls 
to the toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Example\par \pard\plain \sa160\sl240 \fs21\lang1033 The following example adds a combo box to the toolbar control:\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 HRESULT CTempTransportMsgHandler::Initialize( HWND hWndToolBar )\par 
\{\par 
\tab AFX_MANAGE_STATE(_afxModuleAddrThis);\par 
\par 
\tab if( hWndToolBar == NULL )\par 
\tab \{\par 
\tab \tab return E_INVALIDARG;\par 
\tab \}\par 
\par 
\tab CToolBarCtrl* pToolBarCtrl = new CToolBarCtrl;\par 
\tab if( pToolBarCtrl == NULL )\par 
\tab \{\par 
\tab \tab return E_OUTOFMEMORY;\par 
\tab \}\par 
\par 
\tab pToolBarCtrl->Attach( hWndToolBar );\par 
\par 
\tab CClientDC* pDC = new CClientDC( pToolBarCtrl );\par 
\par 
\tab int nHeight = -( (pDC->GetDeviceCaps(LOGPIXELSY) * 8) / 72 );\par 
\par 
\tab m_font.CreateFont( nHeight, 0, 0, 0, FW_NORMAL, 0, 0, 0,\par 
\tab \tab DEFAULT_CHARSET, OUT_CHARACTER_PRECIS, CLIP_CHARACTER_PRECIS,\par 
\tab \tab DEFAULT_QUALITY, DEFAULT_PITCH | FF_DONTCARE, "MS Sans Serif" );\par 
\par 
\tab CFont* pOldFont = pDC->SelectObject( &m_font );\par 
\par 
\tab TEXTMETRIC tm;\par 
\tab pDC->GetTextMetrics( &tm );\par 
\tab int cxChar = tm.tmAveCharWidth;\par 
\tab int cyChar = tm.tmHeight + tm.tmExternalLeading;\par 
\par 
\tab pDC->SelectObject( pOldFont );\par 
\tab delete pDC;\par 
\par 
\tab TBBUTTON button;\par 
\par 
\tab button.iBitmap = (cxChar * 15);\tab // width\par 
\tab button.idCommand = 0;\par 
\tab button.fsStyle = TBSTYLE_SEP;\par 
\tab button.fsState = 0;\par 
\par 
\tab pToolBarCtrl->InsertButton( 0, &button );\par 
\par 
\tab CRect rect;\par 
\tab pToolBarCtrl->GetItemRect( 0, &rect );\par 
\tab rect.bottom = rect.top + (cyChar * 10);\par 
\par 
\tab if( !m_ctlComboBox.Create(WS_CHILD | WS_VISIBLE | WS_VSCROLL |\par 
\tab \tab \tab CBS_DROPDOWNLIST | CBS_SORT, rect, pToolBarCtrl, IDC_TEMP_TOOLBAR_COMBO) )\par 
\tab \{\par 
\tab \tab return E_FAIL;\par 
\tab \}\par 
\par 
\tab m_ctlComboBox.SetFont( &m_font );\par 
\par 
\tab if( pToolBarCtrl )\par 
\tab \{\par 
\tab \tab pToolBarCtrl->Detach();\par 
\tab \tab delete pToolBarCtrl;\par 
\tab \}\par 
\par 
\tab return S_OK;\par 
\}\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b ToolBar} Object, {\b Framework} Object, {\b IDMUSProdToolBar}, {\b IDMUSProdFramework}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTransport Interface\par
\pard\plain \sa160\sl240 \fs21\lang1033 The Conductor uses this interface to interact with the editors that 
need to use the functionality provided by the transport toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Methods\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Play}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Starts playback of the associated transport.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Stop}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Stops playback of the associated transport.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Record}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Starts or stops recording of the associated transport.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT Transition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Starts a transition to the associated transport.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT GetName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns text used for this Transport's label.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b HRESULT TrackCursor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Callback which receives the state of the 'Play Cursor' 
button on the 'Transport Options' toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Based On\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IUnknown}\par \pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor}, {\b IDMUSProdConductor::RegisterTransport}
, {\b IDMUSProdConductor::UnRegisterTransport}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTransport::GetName Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT GetName(}{\b BSTR*} {\i pbstrName}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Returns text used for this {\b IDMUSProdTransport}'s label.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The name was returned successfully.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_POINTER\cell The address in {\i pbstrName} is not valid.  For example, it may be NULL.\cell }\pard \intbl \row \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 E_FAIL\cell An error occurred and the name was not returned.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbstrName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the caller-allocated variable that receives a copy of the name. 
The caller must free {\i pbstrName} with SysFreeString when it is no longer needed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If the name of the transport changes, the transport should call 
{\b IDMUSProdConductor::SetTransportName}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTransport::Play Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Play(}{\b BOOL} {\i fPlayFromStart}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method starts playback of the associated transport. 
It is called in response to the user clicking on the play button in the transport toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If this method succeeds, the conductor assumes the transport was able to start playback. 
If this method fails, the conductor assumes the transport was not able to start playback.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fPlayFromStart}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 TRUE if the transport should play from its beginning.  If FALSE, the 
transport should start playback from the current cursor position.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTransport::Record Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Record(}{\b BOOL} {\i fPressed}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method starts or stops recording of the associated transport. 
It is called in response to the user clicking on the record button in the transport toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If this method succeeds, the conductor assumes the transport was able to start or stop recording. 
If this method fails, the conductor assumes the transport was not able to start or 
stop recording and will set the record button to its previous state.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fPressed}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 TRUE if the button was pressed. FALSE if the button was unpressed.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method will only be called after the record button has been enabled, by passing BS_REC_ENABLED 
as a flag to either {\b IDMUSProdConductor::SetBtnStates}
 or {\b IDMUSProdConductor::RegisterTransport}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTransport::Stop Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Stop(}{\b BOOL} {\i fStopImmediate}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method stops playback of the associated transport. 
It is called in response to the user clicking on the stop button in the transport toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If this method succeeds, the conductor assumes the transport was able to stop playback. 
If this method fails, the conductor assumes the transport was not able to stop playback.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fStopImmediate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 TRUE if the transport should stop immediately. FALSE if the transport 
should stop at its default boundary.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTransport::TrackCursor Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT TrackCursor(}{\b BOOL} {\i fTrackCursor}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Callback which receives the state of the 
Play Cursor button on the Transport Options toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell Always succeeds.\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fTrackCursor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 TRUE when the user wants the cursor to track playback. 
FALSE when the user does not want the cursor to move during playback.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This method is called when the user toggles the 'Play Cursor' button while 
{\b IDMUSProdTransport} "owns" the Transport Control toolbar.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 If a transport is currently playing, that transport "owns" the toolbar.  If no transport is currently 
playing, the active transport "owns" the toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IDMUSProdTransport::Transition Method\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT Transition(}{\b )}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method starts a transition to the associated transport. 
It is called in response to the user clicking on the transition button in the transport toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 If this method succeeds, the conductor assumes the transport was able to successfully 
transition.\line  
If this method fails, the conductor assumes the transport was unable to transition 
successfully.  It will then attempt a default transition by calling {\b Stop} on the 
currently playing transport, followed by {\b Play} on the currently 
active transport.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Codes\par
\trowd \trgaph72\trleft-72 \cellx3078\cellx7038 \pard\plain \intbl\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 {\fs18 S_OK\cell The operation was successful\cell }\pard \intbl \row \pard\plain \li240\sa0\sl240 \f2\fs20\lang1033 \par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdTransport}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Menu Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Represents a single menu item.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdMenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Defines the behavior of the menu item.  Implementation is required.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 A DirectMusic Producer Menu object consists of a label, a context help string, a method 
to initialize its state, and a method to perform when selected.  A Menu object must implement 
{\b IDMUSProdMenu}.\par 
After creation, the object's {\b IDMUSProdMenu} interface gets handed to the Framework via the 
Framework's {\b IDMUSProdFramework::AddMenuItem}
 method.  This method adds the menu item 
to the Framework's 'Add-Ins' menu. {\b IDMUSProdFramework::AddMenuItem}
 provides a way for a 
DirectMusic Producer {\b Component}, that otherwise has no UI, to hook into the Framework. 
For example, a Component may want to place a menu item in the Framework's 'Add-Ins' menu to 
provide a dialog that can be used to setup various options.\par 
A DirectMusic Producer Component determines the life span of a Menu object.  However, a typical 
Component using Menu objects would create its Menu(s) and call {\b IDMUSProdFramework::AddMenuItem}
 
from within in its {\b IDMUSProdComponent::Initialize}
 method.  {\b IDMUSProdComponent::CleanUp}
 
would then be used to call {\b IDMUSProdFramework::RemoveMenuItem}
 and delete existing 
Menu object(s).\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Node Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Represents a unit of data that can be edited and moved around within Producer. 
Originally, there was a one to one correspondence between Node objects and nodes in 
the Framework's Project Tree.  However, this is no longer the case.  A Band in a 
Segment's Band track is an example of a node that does not display in the Project Tree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Defines behavior of Node object.  Implementation is required.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdPropPageObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Defines behavior of an object displayed in Framework's global 
property sheet.  Implementation is optional.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdSortNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Overrides alphabetical sorting of Nodes in the Framework's Project 
Tree.  Implementation is optional.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdReferenceNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allows for file linking by providing the means to attach files 
to Nodes.  Implementation is required by DocRoot nodes representing files that can be 
referenced in other files; i.e. Styles, ChordMaps.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdNotifySink}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Callback to receive various notifications from linked files. 
Implementation is required by DocRoot nodes representing files that can contain 
links to other files; i.e. Segments, which may contain references to Styles, ChordMaps, 
and/or DLS Collections.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdNodeDrop}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allows files dragged from Explorer to be dropped on a Node in the 
Project Tree.  Implementation is optional.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdNotifyCPt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Callback to receive performance notification events from Conductor. 
Implementation is optional.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdTimelineCallback}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Callback to receive data changed notifications from Timeline. 
Implementation is required when a Node's editor uses the Timeline object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdConductorTempo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allows Node to use the Tempo edit control in the Transport Controls 
toolbar.  Implementation is optional.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdTransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allows Node to use the transport controls in the Transport Controls 
toolbar.  Implementation is optional.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdSecondaryTransport}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Places Node in the drop down list(s) found in the Secondary 
Segment toolbar.  Implementation is optional.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IPersistStream}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Saves/loads file.  Implementation by DocRoot nodes is required.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Node objects must implement {\b IDMUSProdNode}.  Also, since DirectMusic Producer does 
not understand the relationships between nodes, every Node object must take on the 
responsibility of managing its own children.  This means that every potential parent 
node must implement {\b IDMUSProdNode::GetFirstChild}
 and {\b IDMUSProdNode::GetNextChild}
 
for the purpose of enumerating their children.\par 
{\b IDMUSProdSortNode} can be implemented to override alphabetical sorting of Node objects in 
the Project Tree.  When required, the implementation of IDMUSProdSortNode must take place in 
the parent node whose children require a custom sort algorithm.\par 
{\b IDMUSProdNotifyCPt} receives notifications requested via {\b IDMUSProdConductor::RegisterNotify}
.\par 
There are seven (7) types of Node objects:  {\b Project Folder}, {\b Directory Folder}, {\b File}, 
{\b DocRoot}, {\b Folder}, {\b Data}, and {\b Reference}.\par 
{\b Project Folder}:  Project Folders are the top-most nodes in the Project Tree.  They represent 
an entire DirectMusic Producer {\b Project}.  Project Folders exist as folders in Explorer, and 
the Project Tree provides an Explorer-like view of their sub-directories and files.  The Framework 
creates and manages Project Folder nodes.\par 
{\b Directory Folder}:  Project Folders may contain one or more Directory Folders, which are nothing 
more than sub-folders created for the purpose of organizing a Project.  Directory Folders exist as 
folders in Explorer, and the Project Tree provides an Explorer-like view of their sub-directories 
and files.  The Framework creates and manages Directory Folder nodes.\par 
{\b File}:  There is a one-to-one correspondence between files in a Project and File nodes.  The 
Framework creates and manages File nodes.\par 
{\b DocRoot}:  A DocRoot node is the one and only child node of a File node.  DocRoot nodes 
mark the place in the Project Tree hierarchy where responsibility shifts from the {\b Framework} 
to the {\b Component}.  DocRoot nodes must also implement {\b IPersistStream}.\par 
DocRoot nodes are important to the Framework's own internal representation of a file contained 
within a DirectMusic Producer Project for a couple of reasons: they provide the pathway to the 
actual data in a file, and they are used by the mechanism which sets up references for the purpose 
of linking files.  {\b IDMUSProdDocType::OnFileNew}
 and {\b IDMUSProdDocType::OnFileOpen}
 hand the 
Framework a pointer to the DocRoot node (file) just inserted into the Project Tree.  The Framework 
expects the DocRoot node to provide an {\b IPersisStream} interface so that it can handle file I/O 
appropriately.\par 
{\b Folder}:  A file in a DirectMusic Producer project may contain lists of objects.  For 
example, a Style file contains lists of Bands, Motifs, and Patterns.  These lists are 
placed in Folder nodes.  Folder node objects do not contain file data.  They simply represent 
lists of objects.  A Style file contains the following three (3) Folder nodes:  'Bands', Motifs', 
and 'Patterns'.  Folder nodes exist as children under DocRoot nodes, other Folder nodes, or Data 
nodes.\par 
{\b Data}:  Data nodes represent chunks of data within a file.  They may or may not have children. 
Data nodes exist as children under DocRoot nodes, Folder nodes, or other Data nodes.\par 
{\b Reference}:  Files that may be referenced from within other files must be able to create a set 
of DocRoot/Folder/Data nodes to represent themselves in the Project Tree as well as create Reference 
nodes that other files can use to set up file references.  Reference nodes do not have children. 
They are simply nodes that point to other DocRoot nodes in the Project Tree.  Reference nodes 
must implement both {\b IDMUSProdNode} and {\b IDMUSProdReferenceNode}.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Project Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Represents a collection of files.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdProject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allows DirectMusic Producer {\b Component}s to interact with 
other files and/or {\b Node}s in a specific Project.  Implemented within the Framework.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdPChannelName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allows PChannel names to be assigned on a Project by 
Project basis.  Implemented within the Framework.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Every DirectMusic Producer Project corresponds to a directory residing on disk and 
contains all files located in that entire directory tree.  Adding and removing files 
from a Project affects the contents of the directory tree because the contents of a 
DirectMusic Producer Project mirrors the files on disk.\par 
If desired, Explorer can be used to place files into the directory tree of a DirectMusic 
Producer Project.  Both Producer files and non-Producer files are displayed in the 
application's Project Tree.  Double-clicking on a Producer file in the Project Tree 
will invoke the Node's {\b Editor}.  Double-clicking on a non-Producer file will open 
the application associated with its file extension.\par 
The {\b Framework} handles creation and management of Projects.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PropPageManager Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Represents a set of pages placed in the {\b Framework}'s property 
sheet control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdPropPageManager}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Defines the behavior of a PropPageManager object. 
Implementation is required.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The Framework's property sheet mechanism consists of three (3) objects: {\b PropSheet}, 
{\b PropPageManager}, and {\b PropPageObject}.\par 
The Framework creates and manages the one and only DirectMusic Producer PropSheet object. 
This object is created during application launch and exists throughout the entire 
DirectMusic Producer work session. The PropSheet object is nothing more than a property 
sheet control.  A DirectMusic Producer {\b Component} uses the {\b IDMUSProdPropSheet} 
interface to interact with the Framework's PropSheet object.\par 
The PropPageManager object defines the set of pages placed in the Framework's property 
sheet control.  {\b IDMUSProdPropSheet::SetPageManager}
 sets the current PropPageManager 
and places its pages into the Framework's property sheet.  PropPageManager objects must 
implement the {\b IDMUSProdPropPageManager} interface.\par 
A PropPageObject represents the data being displayed in the PropPageManager's pages. 
PropPageObjects must implement the {\b IDMUSProdPropPageObject} interface.  Calls to 
{\b IDMUSProdPropPageManager::SetObject}
 set the PropPageManager's current object so 
that the same set of pages can be used to display data for different objects.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PropPageObject Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Represents the data shown in the {\b Framework}'s property sheet 
control.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdPropPageObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Defines the behavior of a PropPageObject object. 
Implementation is required.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The Framework's property sheet mechanism consists of three (3) objects: {\b PropSheet}, 
{\b PropPageManager}, and {\b PropPageObject}.\par 
The Framework creates and manages the one and only DirectMusic Producer PropSheet object. 
This object is created during application launch and exists throughout the entire 
DirectMusic Producer work session. The PropSheet object is nothing more than a property 
sheet control.  A DirectMusic Producer {\b Component} uses the {\b IDMUSProdPropSheet} 
interface to interact with the Framework's PropSheet object.\par 
The PropPageManager object defines the set of pages placed in the Framework's property 
sheet control.  {\b IDMUSProdPropSheet::SetPageManager}
 sets the current PropPageManager 
and places its pages into the Framework's property sheet.  PropPageManager objects must 
implement the {\b IDMUSProdPropPageManager} interface.\par 
A PropPageObject represents the data being displayed in the PropPageManager's pages. 
PropPageObjects must implement the {\b IDMUSProdPropPageObject} interface.  Calls to 
{\b IDMUSProdPropPageManager::SetObject}
 set the PropPageManager's current object so 
that the same set of pages can be used to display data for different objects.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 PropSheet Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Represents the {\b Framework}'s global property sheet control. 
DirectMusic Producer {\b Component}s can access the Framework's property sheet control 
by calling {\b IDMUSProdFramework::QueryInterface}
 to obtain a pointer to its 
{\b IDMUSProdPropSheet} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdPropSheet}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Defines interaction with the Framework's PropSheet object. 
Implementation is handled by the Framework.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The Framework creates and manages a PropSheet object.  This object is created during 
application launch and exists throughout the entire DirectMusic Producer work session. 
Display of this property sheet is tied to the application's View/Properties menu item.\par 
In order to use the PropSheet object, Components must implement {\b IDMUSProdPropPageManager} 
for each set of pages that will be placed into the property sheet and {\b IDMUSProdPropPageObject} 
for each object that will be displayed by those pages.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ToolBar Object\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Represents a toolbar.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Supported Interfaces\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b IDMUSProdToolBar}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Provides the means for a DirectMusic Producer {\b Component} 
to add a ToolBar to the {\b Framework}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 DirectMusic Producer ToolBar objects are not tied to a specific editor.  They reside 
in the Framework's toolbar space and are accessible to all Components via custom interfaces.\par 
A DirectMusic Producer Component determines the life span of a ToolBar object.  However, 
a typical Component would create its ToolBar(s) and call {\b IDMUSProdFramework::AddToolBar}
 
from within its {\b IDMUSProdComponent::Initialize}
 method.  {\b IDMUSProdComponent::CleanUp}
 
would then be used to call {\b IDMUSProdFramework::RemoveToolBar}
 and delete existing 
ToolBar object(s).\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ButtonStateFlags\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum ButtonStateFlags \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BS_NO_AUTO_UPDATE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BS_PLAY_ENABLED,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BS_PLAY_CHECKED,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BS_STOP_ENABLED,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BS_STOP_CHECKED,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BS_REC_ENABLED,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BS_REC_CHECKED,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BS_TRANS_ENABLED,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BS_TRANS_CHECKED\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 State flags for the toolbar buttons\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BS_NO_AUTO_UPDATE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Don't automatigically update the transport buttons from the state 
of the DirectMusic Performance engine.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BS_PLAY_ENABLED}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Enable the play button\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BS_PLAY_CHECKED}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Depress the play button\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BS_STOP_ENABLED}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Enable the stop button\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BS_STOP_CHECKED}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Depress the stop button\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BS_REC_ENABLED}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Enable the record button\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BS_REC_CHECKED}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Depress the record button\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BS_TRANS_ENABLED}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Enable the transition button\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BS_TRANS_CHECKED}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Depress the transition button\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If BS_NO_AUTO_UPDATE is not set, then only the BS_REC_* flags are used.  If BS_NO_AUTO_UPDATE 
is set, then all BS_* flags are used.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor::RegisterTransport}
, {\b IDMUSProdConductor::SetActiveTransport}
, 
{\b IDMUSProdConductor::SetBtnStates}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ConductorNotifyEvent Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab long m_cbSize;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD m_dwType;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BYTE * m_pbData;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} ConductorNotifyEvent;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Contains the event structure passed to the 
{\b IDMUSProdNotifyCPt::OnNotify}
 method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b m_cbSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Size of the data passed in m_pbData.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b m_dwType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Type of event passed in m_pbData.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b m_pbData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a DMUS_NOTIFICATION_PMSG.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdNotifyCPt::OnNotify}
, {\b IDMUSProdConductor::RegisterNotify}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ConductorTransitionFlags\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum ConductorTransitionFlags \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TRANS_END_OF_SEGMENT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TRANS_REGULAR_PATTERN,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TRANS_NO_TRANSITION\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Flags used for setting the transition type\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TRANS_END_OF_SEGMENT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Transition at the end of the segment.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TRANS_REGULAR_PATTERN}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Transition using a regular pattern, not an Intro/End/Fill/Break.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TRANS_NO_TRANSITION}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Don't compose a transition - just switch to 
the next segment at the specified boundary.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor::GetTransitionOptions}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ConductorTransitionOptions Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwBoundaryFlags;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab WORD wPatternType;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwFlags;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} ConductorTransitionOptions;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Contains the transition options set via 
the Transport Control toolbar's Transition button.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwBoundaryFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 One of DMUS_COMPOSEF_IMMEDIATE, DMUS_COMPOSEF_GRID, 
DMUS_COMPOSEF_BEAT, DMUS_COMPOSEF_ALIGN, DMUS_COMPOSEF_MEASURE, or DMUS_COMPOSEF_NONE. 
Previous flags are mutually exclusive.  One or more of the following flags may also 
be set: DMUS_COMPOSEF_ENTIRE_TRANSITION, DMUS_COMPOSEF_1BAR_TRANSITION, 
DMUS_COMPOSEF_ENTIRE_ADDITION, DMUS_COMPOSEF_1BAR_ADDITION.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b wPatternType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 One of the DMUS_COMMANDT_TYPES flags or the custom embellishment id.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 More flags, defined in the {\b ConductorTransitionFlags} enumeration.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 {\i wPatternType} may either contain one of the DMUS_COMMANDT_TYPES flags or 
a custom embellishment id.  Values of 100 through 199 signify a custom 
embellishment id.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IDMUSProdConductor::GetTransitionOptions}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DMUSPROD_TIMELINE_SNAP_TO\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum DMUSPROD_TIMELINE_SNAP_TO \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DMUSPROD_TIMELINE_SNAP_NONE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DMUSPROD_TIMELINE_SNAP_GRID,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DMUSPROD_TIMELINE_SNAP_BEAT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DMUSPROD_TIMELINE_SNAP_BAR\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Snap-to settings\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b DMUSPROD_TIMELINE_SNAP_NONE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 No snap setting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b DMUSPROD_TIMELINE_SNAP_GRID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Snap to nearest grid.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b DMUSPROD_TIMELINE_SNAP_BEAT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Snap to nearest beat.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b DMUSPROD_TIMELINE_SNAP_BAR}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Snap to nearest bar.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DMUSProdFrameworkMsg Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID guidUpdateType;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab IUnknown* punkIDMUSProdNode;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab void* pData;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} DMUSProdFrameworkMsg;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Contains information from a {\b Framework} notification.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b guidUpdateType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The type of Framework notification.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b punkIDMUSProdNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The node that sent the notification.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pData}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A pointer to any data relevant to the notification.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 When a Segment receives a Framework notification via {\b IDMUSProdNotifySink::OnUpdate}
, it repackages 
the method's arguments into a {\b DMUSProdFrameworkMsg} structure and then sends interested StripMgrs a 
GUID_Segment_FrameworkMsg notification where {\i pData} points to the {\b DMUSProdFrameworkMsg} structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b SegmentGUIDs} {\b IDMUSProdNotifySink::OnUpdate}
\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DMUSProdListInfo Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab WORD wSize;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BSTR bstrName;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BSTR bstrDescriptor;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID guidObject;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} DMUSProdListInfo;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Contains information used to describe a {\b Node}.  Used when 
constructing lists to show available Nodes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b wSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Size of this structure.  Must be filled prior to calling a 
method that populates the remaining DMUSProdListInfo fields.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b bstrName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Node's name.  For example, the user name assigned to a Style.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b bstrDescriptor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Additional text to further describe this Node.  For example, 
a Style's time signature.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b guidObject}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 GUID associated with the object represented by this Node.  For 
example, the Component generated GUID stored in a Style file.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DMUSProdStreamInfo Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab FileType ftFileType;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID guidDataFormat;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab IDMUSProdNode pITargetDirectoryNode;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} DMUSProdStreamInfo;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Contains additional information about a stream created by 
calling either {\b IDMUSProdFramework::AllocFileStream}
 or {\b IDMUSProdFramework::AllocMemoryStream}
.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b ftFileType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Type of stream. FT_DESIGN, FT_RUNTIME, or FT_UNKNOWN.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b guidDataFormat}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 GUID identifying data format of stream.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pITargetDirectoryNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 {\b IDMUSProdNode} interface pointer to the 
Project Tree Directory {\b Node} that will contain this file.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 MARKERID\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum MARKERID \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab MARKER_CURRENTTIME,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab MARKER_BEGINSELECT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab MARKER_ENDSELECT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab MARKER_LEFTDISPLAY\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Marker types in the time strip\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b MARKER_CURRENTTIME}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The current time position, displayed as a infinitely tall 
line.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b MARKER_BEGINSELECT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The start of the edit selection.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b MARKER_ENDSELECT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The end of the edit selection.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b MARKER_LEFTDISPLAY}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The left edge of the strip display window.  Setting this 
parameter is unsupported.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 MUSICLINE_PROPERTY\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum MUSICLINE_PROPERTY \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab ML_DRAW_MEASURE_BEAT_GRID,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab ML_DRAW_MEASURE_BEAT\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Type of bar lines to draw\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b ML_DRAW_MEASURE_BEAT_GRID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Draw bar, beat, and grid lines.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b ML_DRAW_MEASURE_BEAT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Draw bar and beat lines.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SegmentGUIDs\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum SegmentGUIDs \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_ChordIndividualChordSharpsFlats,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_ChordKey,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_ChordSharpsFlats,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_AllTracksAdded,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_DocRootNode,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_Undo_BSTR,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_Length_Change,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_CreateTrack,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_DeletedTrack,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_RecordButton,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_WindowActive,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_Start,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_Stop,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_Set_Tempo,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_DisplayContextMenu,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_TimelineShowTimeSig,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_TimelineShowRealTime,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_TimelineSetSegStartTime,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_TimelineSetCursor,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_NewStyleSelected,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_FrameworkMsg,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID_Segment_BandTrackChange\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 GUIDs of Parameters or Notifications used in the Segment Designer\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_ChordIndividualChordSharpsFlats}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 {\i pData} is a pointer to a BOOL that gets or sets the 
sharps/flats flag for the chord at mtTime.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_ChordKey}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 {\i pData} is a pointer to a DWORD that stores the number of accidentals in the 
high word, and the key root in the low word.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_ChordSharpsFlats}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 {\i pData} is a pointer to a BOOL that stores whether the key signature 
uses flats or sharps.  If TRUE, it uses flats.  If FALSE, it uses sharps.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_AllTracksAdded}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This notification is broadcast after all strip managers have 
been added to the Timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_DocRootNode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 {\i pData} is a pointer to an {\b IDMUSProdNode} interface that is on the 
segment node.  It is set immediately after a strip manager is created, for strip managers that 
support it.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_Undo_BSTR}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 {\i pData} is a pointer to a BSTR that stores the strip to display 
for the undo and redo menu items.  After an {\b IDMUSProdStripMgr} calls {\b IDMUSProdTimeline::OnDataChanged}
, 
the segment designer asks the {\b IDMUSProdStripMgr} for this parameter.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_Length_Change}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This notification is broadcast after the length of the segment changes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_CreateTrack}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This notification is send to a strip manager after it is added to the 
segment while the segment editor is open.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_DeletedTrack}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This notification is sent to a strip manager after is is deleted from 
the segment while the segment editor is open.  {\i pData} is a pointer to the timeline.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_RecordButton}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This notification is broadcast when the state of the record button changes. 
It is also sent to each strip manager when they are first added to the segment so they will know the 
initial state of the record button. {\i pData} is a pointer to a BOOL that is TRUE when the record button 
is pressed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_WindowActive}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This notification is broadcast when the activation state of the segment 
designer window changes.  It is also sent to each strip manager when they are first added to the segment 
so they will know the initial activation state of the segment designer window.  {\i pData} is a pointer 
to a BOOL that is TRUE then the window is active.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_Start}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This notification is broadcast when a segment is queued to start.  {\i pData} 
is a pointer to an {\b IDirectMusicSegmentState}.  Is is also sent to each strip manager when they are 
added after the segment has been queued to start.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_Stop}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This notification is broadcast when the segment stops playing.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_Set_Tempo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 When the user changes the tempo in the transport toolbar, this notification is 
sent to the tempo strip manager that contains the currently active tempo.  {\i pData} is a pointer to a 
DMUS_TEMPO_PARAM structure containing the new tempo.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_DisplayContextMenu}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If an editor supports this parameter, the timeline will display a 
generic context menu when areas outside the strip display are right-clicked on.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_TimelineShowTimeSig}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If this parameter is set to FALSE, a time signature will note be displayed 
in the time strip.  If this parameter is not set, or set to TRUE, a time signature will be displayed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_TimelineShowRealTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 {\i pData} is a pointer to a HANDLE.  If the handle is NULL, or not set, no 
real-time display will be shown in the status bar.  If the handle is a valid handle from a call to 
{\b IDMUSProdFramework::SetNbrStatusBarPanes}
, a real-time display will be shown in the status bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_TimelineSetSegStartTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 {\i pData} is a pointer to a REFERENCE_TIME.  If the time is 0, the 
real-time display will be frozen at its last value.  If the time is not zero, the real-time display will 
show the amount of time elapsed since the given REFERENCE_TIME.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_TimelineSetCursor}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This notification is broadcast when the position of the time cursor changes. 
{\i pData} is a pointer to the MUSIC_TIME of the new cursor position.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_NewStyleSelected}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This notification is broadcast when a style is added to the style 
reference strip.  {\i pData} is a pointer to the MUSIC_TIME the style was added at. {\i dwGroupBits} contain 
the group the style was added to.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_FrameworkMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This notification is broadcast when the segment node receives a notification 
from the Framework.  {\i pData} is a pointer to a {\b DMUSProdFrameworkMsg} structure containing information 
about the message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b GUID_Segment_BandTrackChange}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This notification is broadcast when a change is made to a band strip in 
the segment.  {\i dwGroupBits} are the groups the band track belongs to.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 STRIP_TIMELINE_PROPERTY\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum STRIP_TIMELINE_PROPERTY \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab STP_VERTICAL_SCROLL,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab STP_GET_HDC,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab STP_HEIGHT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab STP_STRIPVIEW,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab STP_STRIP_RECT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab STP_FBAR_RECT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab STP_POSITION,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab STP_GUTTER_SELECTED,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab STP_ENTIRE_STRIP_RECT\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Timeline strip properties\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b STP_VERTICAL_SCROLL}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_I4.  The current vertical scroll position of the strip (in pixels).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b STP_GET_HDC}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_I4.  Gets a handle to the device context (a HDC stored as a VT_I4) that 
is used to draw the strip.  Setting this parameter is unsupported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b STP_HEIGHT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_I4.  The current height of the strip.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b STP_STRIPVIEW}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_I4.  The current {\b STRIPVIEW} of the strip.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b STP_STRIP_RECT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_BYREF.  Allows a strip to get its clipped boundaries in Timeline 
window coordinates.  The caller must pass a VARIANT of type VT_BYREF that contains 
a non-NULL pointer to a RECT structure.  Setting this parameter is unsupported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b STP_FBAR_RECT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_BYREF.  Allows a strip to get the clipped boundaries of its function 
bar in Timeline window coordinates.  The caller must pass a VARIANT of type 
VT_BYREF that contains a non-NULL pointer to a RECT structure.  Setting this 
parameter is unsupported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b STP_POSITION}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_I4.  Returns the position of the strip, with the top strip having the 
value of 0.  Setting this parameter is unsupported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b STP_GUTTER_SELECTED}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_BOOL.  Allows a strip to get or set its gutter selection state. 
When the strip is selectd, its gutter will display either as red or orange.  When 
the strip is unselected, its gutter will display as either grey or yellow.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b STP_ENTIRE_STRIP_RECT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_BYREF.  Allows a strip to get its unclipped boundaries in Timeline 
window coordinates.  The caller must pass a VARIANT of type VT_BYREF that contains 
a non-NULL pointer to a RECT structure.  Setting this parameter is unsupported.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 STRIPMGRPROPERTY\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum STRIPMGRPROPERTY \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SMP_ITIMELINECTL,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SMP_IDIRECTMUSICTRACK,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SMP_IDMUSPRODFRAMEWORK,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SMP_DMUSIOTRACKHEADER,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SMP_DMUSIOTRACKEXTRASHEADER,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SMP_PRODUCERONLY_FLAGS,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SMP_USER\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Strip Manager properties\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SMP_ITIMELINECTL}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_UNKNOWN.  Sets or retrieves an IUnknown pointer to the associated 
{\b IDMUSProdTimeline} for this strip manager.  When this {\b IDMUSProdStripMgr} is added to the Timeline by 
a call to {\b IDMUSProdTimeline::AddStripMgr}
, this property will be set on the {\b IDMUSProdStripMgr} 
with a pointer to the {\b IDMUSProdTimeline} that the {\b IDMUSProdStripMgr} was added to.  When this 
{\b IDMUSProdStripMgr} is removed from the Timeline by a call to {\b IDMUSProdTimeline::RemoveStripMgr}
, 
this property will be set with the value NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SMP_IDIRECTMUSICTRACK}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_UNKNOWN.  Sets or retrieves an IUnknown pointer to the associated 
{\b IDirectMusicTrack} for this strip manager.  When this {\b IDMUSProdStripMgr} is first created, before 
it is added to the Timeline, this property will be set on the {\b IDMUSProdStripMgr} with a pointer to 
the {\b IDirectMusicTrack} that the {\b IDMUSProdStripMgr} is associated with.  This property will be 
set only once over the lifetime of the {\b IDMUSProdStripMgr} object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SMP_IDMUSPRODFRAMEWORK}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_UNKNOWN.  Sets or retrieves an IUnknown pointer to the associated 
{\b IDMUSProdFramework} for this strip manager.  When this {\b IDMUSProdStripMgr} is first created, before 
it is added to the Timeline, this property will be set on the {\b IDMUSProdStripMgr} with a pointer to 
the {\b IDMUSProdFramework} that the {\b IDMUSProdStripMgr} is associated with.  This property will be 
set only once over the lifetime of the {\b IDMUSProdStripMgr} object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SMP_DMUSIOTRACKHEADER}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_BYREF.  Sets or retrieves the track header information for this 
{\b IDMUSProdStripMgr}.    When this {\b IDMUSProdStripMgr} is first created, before it is added to the Timeline, 
this property will be set on the {\b IDMUSProdStripMgr} with a pointer to the {\b DMUS_IO_TRACK_HEADER} 
assocated with this {\b IDMUSProdStripMgr}.  This property will be set only once over the lifetime of 
the {\b IDMUSProdStripMgr} object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SMP_DMUSIOTRACKEXTRASHEADER}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_BYREF.  Sets or retrieves the track extras header information for this 
{\b IDMUSProdStripMgr}.    When this {\b IDMUSProdStripMgr} is first created, before it is added to the Timeline, 
this property will be set on the {\b IDMUSProdStripMgr} with a pointer to the {\b DMUS_IO_TRACK_EXTRAS_HEADER} 
assocated with this {\b IDMUSProdStripMgr}.  This property will be set only once over the lifetime of 
the {\b IDMUSProdStripMgr} object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SMP_PRODUCERONLY_FLAGS}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_BYREF.  Sets or retrieves the producer-only information for this 
{\b IDMUSProdStripMgr}.    When this {\b IDMUSProdStripMgr} is first created, before it is added to the Timeline, 
this property will be set on the {\b IDMUSProdStripMgr} with a pointer to the {\b IOProducerOnlyChunk} 
assocated with this {\b IDMUSProdStripMgr}.  This property will be set only once over the lifetime of 
the {\b IDMUSProdStripMgr} object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SMP_USER}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 First available user-defined strip manager property.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 STRIPPROPERTY\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum STRIPPROPERTY \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_NAME,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_GUTTERSELECTABLE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_GUTTERSELECT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_BEGINSELECT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_ENDSELECT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_CURSOR_HANDLE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_DEFAULTHEIGHT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_RESIZEABLE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_MAXHEIGHT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_MINHEIGHT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_MINMAXABLE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_MINIMIZE_HEIGHT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_STRIPMGR,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_FUNCTIONBAR_EXCLUDE_WIDTH,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SP_USER\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Strip properties\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_NAME}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_BSTR.  Gets the name to display in the function bar title area.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_GUTTERSELECTABLE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_BOOL.  If supported and TRUE, the strip supports having its gutter 
selected.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_GUTTERSELECT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_BOOL.  Set when the gutter selection state of the strip changes.  If TRUE, 
the gutter is selected, otherwise the gutter is unselected.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_BEGINSELECT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_I4.  Sets the start of the timeline selection range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_ENDSELECT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_I4.  Sets the end of the timeline selection range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_CURSOR_HANDLE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 HCURSOR (as VT_I4).  Gets a handle to the cursor to display.  If unsupported, 
the default arrow cursor is used.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_DEFAULTHEIGHT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_I4.  Gets the default height of the strip, in pixels.  If not supported, 
the Timeline tries to get SP_MAXHEIGHT, then SP_MINHEIGHT.  If none of these properties 
are supported, the strip is created with a height of 100 pixels.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_RESIZEABLE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_BOOL.  If supported and TRUE, the strip supports being vertically resized.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_MAXHEIGHT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_I4.  Gets the maximum height of the strip, in pixels.  Used when vertically 
resizing a strip that supports the SP_RESIZABLE property.  If not supported, an unlimited 
height is supported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_MINHEIGHT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_I4.  Gets the minimum height of the strip, in pixels.  Used when vertically 
resizing a strip that supports the SP_RESIZABLE property.  If not supported, a default 
of 20 pixels is used.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_MINMAXABLE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_BOOL.  If supported and TRUE, the strip supports being minimized.  A resize 
button will be displayed in the strip's upper right-hand corner.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_MINIMIZE_HEIGHT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_I4.  Gets the height of the strip when it is in the SV_MINIMIZED view. 
If unsupported, a default of 20 pixels is used.  Only used when the strip supports the 
SP_MINMAXABLE property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_STRIPMGR}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_UNKNOWN.  Gets an IUnknown pointer to the associated {\b IDMUSProdStripMgr} 
for this strip.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_FUNCTIONBAR_EXCLUDE_WIDTH}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 VT_I4.  Get the width of the title bar (measured from the right 
edge of the function bar) to exclude from automatic\tab double-click to minimize mapping. 
Only useful for strips that support SP_MINMAXABLE.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SP_USER}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 First available user-defined strip property.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 STRIPVIEW\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum STRIPVIEW \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SV_NORMAL,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SV_MINIMIZED,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SV_FUNCTIONBAR_NORMAL,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab SV_FUNCTIONBAR_MINIMIZED\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Strip views\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SV_NORMAL}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Normal strip view.  If a strip supports minimizing, this is the maximized 
view.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SV_MINIMIZED}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Minimized strip view.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SV_FUNCTIONBAR_NORMAL}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Normal functionbar view.  If a strip supports minimizing, 
this is the maximized view.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SV_FUNCTIONBAR_MINIMIZED}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Minimized function bar view.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TIMELINE_PASTE_TYPE\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum TIMELINE_PASTE_TYPE \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TL_PASTE_MERGE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TL_PASTE_OVERWRITE\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Type of paste operation to do\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TL_PASTE_MERGE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Merge pasted data with existing data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TL_PASTE_OVERWRITE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Overwrite existing data with pasted data.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TIMELINE_PROPERTY\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum TIMELINE_PROPERTY \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TP_CLOCKLENGTH,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TP_STRIPMOUSECAPTURE,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TP_DMUSPRODFRAMEWORK,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TP_TIMELINECALLBACK,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TP_ACTIVESTRIP,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TP_FUNCTIONBAR_WIDTH,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TP_MAXIMUM_HEIGHT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TP_ZOOM,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TP_HORIZONTAL_SCROLL,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TP_VERTICAL_SCROLL,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TP_SNAPAMOUNT,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TP_FREEZE_UNDO,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TP_SNAP_TO\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Timeline properties\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TP_CLOCKLENGTH}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The length of the Timeline, in ticks.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TP_STRIPMOUSECAPTURE}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Allows a strip to capture the mouse cursor.  This should be 
set to true when a strip receives a WM_LBUTTONDOWN, WM_RBUTTONDOWN, or 
WM_LBUTTONDBLCLK message.  Getting this parameter is unsupported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TP_DMUSPRODFRAMEWORK}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets or gets a pointer to the DirectMusic Producer Framework.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TP_TIMELINECALLBACK}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets or gets a pointer to the object which receives notification 
when data changes in any of the strips.  The object must implement the 
{\b IDMUSProdTimelineCallback} interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TP_ACTIVESTRIP}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Sets or gets a pointer to the active strip.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TP_FUNCTIONBAR_WIDTH}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The width of the function bar.  Setting this parameter 
is unsupported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TP_MAXIMUM_HEIGHT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The maximum height of a strip, if the entire strip is to be shown 
at once.  Setting this parameter is unsupported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TP_ZOOM}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The horizontal zoom faction, as a VT_R8 parameter.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TP_HORIZONTAL_SCROLL}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The horizontal scroll amount.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TP_VERTICAL_SCROLL}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The vertical scroll amount.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TP_SNAPAMOUNT}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Returns the snap granularity for the given VT_I4 parameter.  Setting 
this parameter is unsupported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TP_FREEZE_UNDO}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Segment specific: When set to TRUE, any calls to OnDataChanged will 
not create undo states, but the changes will still be taken.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TP_SNAP_TO}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ({\b DMUSPROD_TIMELINE_SNAP_TO}) as a VT_I4.  Gets or sets the snap-to boundary.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TIMETYPE\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum TIMETYPE \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TIMETYPE_CLOCKS,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TIMETYPE_MS\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 Time unit types\par
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TIMETYPE_CLOCKS}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Use clocks units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TIMETYPE_MS}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Use millisecond units.  This is converted to and from clocks internally.\par 
}
