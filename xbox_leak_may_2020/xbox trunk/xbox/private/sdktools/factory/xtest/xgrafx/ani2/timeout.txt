animate.c:        if (Status == STATUS_TIMEOUT)
BlobRenderer.cpp:void TestBlobRenderer::advanceTime(float fElapsedTime, float fDt)
Blobs.cpp:void LavaLampInterior::advanceTime(float fElapsedTime, float fDt)
Blobs.cpp://MTS	m_BlobRenderer.advanceTime(fElapsedTime, fDt);
Blobs.cpp:		m_Blobs[i].advanceTime(fElapsedTime, fDt);
Blobs.cpp:void LLBlob::advanceTime(float fElapsedTime, float fDt)
bootsound.cpp:KTIMER    g_BootSoundTimer;
bootsound.cpp:    LARGE_INTEGER dueTime;
bootsound.cpp:    dueTime.QuadPart = 0;
bootsound.cpp:    KeInitializeTimerEx(&g_BootSoundTimer,NotificationTimer);
bootsound.cpp:    KeSetTimerEx(&g_BootSoundTimer,
bootsound.cpp:                 dueTime,
bootsound.cpp:    KeCancelTimer(&g_BootSoundTimer);
CamControl.cpp:		if (svCameraListData[i].ucTime == (unsigned char) 0) numPaths++;
CamControl.cpp:		svCameraList[i].fTime = FINISH_START_TIME * ((float)svCameraListData[i].ucTime) * 0.01f;
CamControl.cpp://MTS						(int) svCameraListData[i].ucTime, (int) svCameraListData[i].scTension, (int) svCameraListData[i].scBias,
CamControl.cpp://MTS		if (svCameraListData[i].ucTime==0) OutputDebugString("\n");
CamControl.cpp:		if (svCameraList[i].fTime == 0.0f)
CamControl.cpp:		if (svCameraList[i].fTime == 0.0f) break;
CamControl.cpp:		finishNodes[j].fTime = FINISH_START_TIME + FINISH_TRANSITION_TIME * ((float)j) / ((float)(NUM_FINISH_NODES-1));
CamControl.cpp:	fCameraLookatInterpStart = finishNodes[2].fTime;
CamControl.cpp:	fOOCameraLookatInterpDelta = 1.0f / (finishNodes[5].fTime - fCameraLookatInterpStart);
CamControl.cpp:	float start_time = plast->fTime;
CamControl.cpp:		Scale(&vel, 1.0f / (getNode(curVariableNodes-1)->fTime - getNode(curVariableNodes-2)->fTime));
CamControl.cpp:	AddScaled(&pthis->ptPosition, vel, (pthis->fTime - plast->fTime) * 0.7f);
CamControl.cpp:	if (t > FINISH_STOP_TIME)
CamControl.cpp:		if (getNode(i)->fTime > t) break;
CamControl.cpp:	float dtc = max(0.001f, pnext->fTime - pprev->fTime);
CamControl.cpp:	float dtp = max(0.001f, (i>=2) ? pprev->fTime - getNode(i-2)->fTime : dtc);
CamControl.cpp:	float dtn = max(0.001f, (i<curNumNodes-1) ? getNode(i+1)->fTime - pnext->fTime : dtc);
CamControl.cpp:	float uts = min(1.0f, max(0.0f, (t - pprev->fTime) / dtc));	// un-tweaked s
CamControl.cpp:	float s = (t - pprev->fTime) / ((1.0f-frac)*dtp + frac*dtc);
CF.C:extern struct timer_music music_timers[];
CF.C:extern	unsigned char	n_timers;
CF.C:	current_timer_priority = 0;
CF.C:void call_play_timer()
CF.C:void call_timer()
CF.C:void call_end_timer()
EVF.C:	current_process->timer += dp_word1;
EVF.C:	if (c_p->type == 0) {		/* first time						*/
EVF.C:		c_p->type = 1;			/* set not first time flag			*/
EVF.C:			c_p->mem_ptr.c = tmp_ptr + 7;		/* point to xtra time	*/
EVF.C:			c_p->timer += *c_p->mem_ptr.i++;	/* get xtra time*/
EVF.C:			c_p->timer += 4;
EVF.C:	current_process->timer += un_int;
EVF.C:	current_process->timer += dp_word1;
EVF.C:	current_process->timer += un_int;
GLOBALS.C:short 		system_clock_music ;/* global music system timer     	*/
GLOBALS.C:short 		system_clock_fx; /* global fx system timer	    	*/
GLOBALS.C:uchar		current_timer_priority;	/* priority of last timer call */
GreenFog.cpp:void GreenFog::advanceTime(float fElapsedTime, float fDt)
GreenFog.cpp:	float f_glow = 0.75f * max(0.0f, min(1.0f, (gApp.getElapsedTime() - GLOW_FADE_SCREEN_START) * GLOW_FADE_SCREEN_MUL));
GreenFog.cpp:	f_glow = max(0.0f, min(1.0f, (gApp.getElapsedTime() - GLOW_FADE_CIRCLE_START) * GLOW_FADE_CIRCLE_MUL));
GreenFog.cpp:	if (gApp.getElapsedTime() < BLOB_STATIC_END_TIME)
GreenFog.cpp:		float t = gApp.getElapsedTime();
GreenFog.cpp:		f_glow = (t < BLOB_STATIC_END_TIME * 0.2f) ? (t / (BLOB_STATIC_END_TIME*0.2f)) : (1.0f - (t-BLOB_STATIC_END_TIME * 0.2f)/BLOB_STATIC_END_TIME);
GreenFog.cpp:		if (gApp.getElapsedTime() < BLOB_STATIC_END_TIME)
GreenFog.cpp:			mul = gApp.getCameraRadiusFromBlob() * BLOB_STATIC_END_TIME / (gApp.getElapsedTime() * 8.0f);
PROC.C:	pp->timer = 0;		/* timer for process 	  */
PROC.C:		pp->prev_timer = system_clock_music;  /* make us current	  */
PROC.C:		pp->prev_timer = system_clock_fx;  /* make us current	  */
renderer.cpp:    // This delay should allow the TV enough time to lock and ensure
scene_renderer.cpp:void SceneRenderer::advanceTime(float fElapsedTime, float fDt)
scene_renderer.cpp:	float fpos = ((fElapsedTime-SCENE_ANIM_START_TIME) / SCENE_ANIM_LEN);
scene_renderer.cpp:	bUseLoDetail = fElapsedTime >= SCENE_LO_DETAIL_START;
Shield.cpp:void Shield::advanceTime(float fElapsedTime, float fDt)
Shield.cpp:	float pushout_radius = max(0.0f, (PUSHOUT_START_TIME + PUSHOUT_DELTA - fElapsedTime) * OO_PUSHOUT_DELTA);
Shield.cpp:	advanceTime(0.0f, 0.0f);
Shield.cpp:void ZShield::advanceTime(float fElapsedTime, float fDt)
Shield.cpp:	float pushout_radius = max(0.0f, (PUSHOUT_START_TIME + PUSHOUT_DELTA - fElapsedTime) * OO_PUSHOUT_DELTA);
Shield.cpp:	if (gApp.getElapsedTime() < SHIELD_FADE_IN_START_TIME + SHIELD_FADE_IN_DELTA)
Shield.cpp:		f_shading *= (gApp.getElapsedTime() - SHIELD_FADE_IN_START_TIME) * OO_SHIELD_FADE_IN_DELTA;
Shield.cpp:	else if (gApp.getElapsedTime() > SHIELD_FADE_OUT_START_TIME)
Shield.cpp:		f_shading *= (SHIELD_FADE_OUT_START_TIME + SHIELD_FADE_OUT_DELTA - gApp.getElapsedTime()) * OO_SHIELD_FADE_OUT_DELTA;
Shield.cpp:	float fscale = max(0.0f, min(1.0f, (gApp.getElapsedTime()-PUSHOUT_START_TIME) * OO_PUSHOUT_DELTA));
Shield.cpp:void ShieldMgr::advanceTime(float fElapsedTime, float fDt)
Shield.cpp:	for (i=0; i<m_NumShields; i++) m_Shields[i].advanceTime(fElapsedTime, fDt);
Shield.cpp:	for (i=0; i<m_NumZShields; i++) m_ZShields[i].advanceTime(fElapsedTime, fDt);
SOS.C:				c_p->timer = c_p->timer +c_p->prev_timer - system_clock_music;
SOS.C:				current_process->prev_timer = system_clock_music;
SOS.C:		    if (current_process->timer < 0) {
tex_gen.cpp:			gApp.sceneGeom.advanceTime(SCENE_ANIM_START_TIME + SCENE_ANIM_LEN,0.f);
VBlob.cpp://MTS	float f_jitter_mag = (gApp.getElapsedTime() - BLOB_JITTER_START) * OO_BLOB_JITTER_DELTA;
VBlob.cpp://MTS	cur_pos.x = m_Pos.x + f_jitter_mag * sinf((gApp.getElapsedTime() - cOffsets[0])*cScales[0]);
VBlob.cpp://MTS	cur_pos.y = m_Pos.y + f_jitter_mag * sinf((gApp.getElapsedTime() - cOffsets[1])*cScales[1]);
VBlob.cpp://MTS	cur_pos.z = m_Pos.z + f_jitter_mag * sinf((gApp.getElapsedTime() - cOffsets[2])*cScales[2]);
VBlob.cpp://MTS	f_color_intensity *= min(1.0f, gApp.getElapsedTime() * OO_BLOB_STATIC_END_TIME);
VBlob.cpp:	f_color_intensity *= min(1.0f, gApp.getElapsedTime() * 4.0f);
VBlob.cpp:	float sd_frac = max(1.0f, gApp.getElapsedTime() / 6.0f);
VBlob.cpp:void VBlob::advanceTime(float fElapsedTime, float fDt)
VBlob.cpp:	if (fElapsedTime < BLOB_STATIC_END_TIME)
VBlob.cpp:		if (fElapsedTime - fDt > BLOB_STATIC_END_TIME)
VBlob.cpp:		if (!m_Bloblets[i].update(fElapsedTime, fDt))
VBlob.cpp:				fElapsedTime,
VBlob.cpp:			))	// pass negative time so the blobs get a head start
VBlob.cpp:bool VBlobBump::create(float cur_time, VBloblet* p_bloblet)
VBlob.cpp:	if (cur_time < 0.0f) pMyBloblet = NULL;
VBlob.cpp:	float time_prog = max(0.0f, (cur_time-BLOB_STATIC_END_TIME) * OO_MAX_INTENSITY_DELTA);
VBlob.cpp:	fStartTime = cur_time + 0.4f * VBlob::fRand01();
VBlob.cpp:	fMaxMagnitude *= 0.5f + 0.5f * time_prog;
VBlob.cpp:		pMyBloblet->fStartTime = (cur_time<-1.0f) ? -VBlob::fRand01() * 0.3f : cur_time;
VBlob.cpp:		pMyBloblet->fTimeMultiple = 2.0f * Pi / period;
VBlob.cpp:		bStillAttachedToBloblet = (cur_time-fStartTime < 0.4f*period);
VBlob.cpp:		pMyBloblet->update(cur_time, 0.0f);
VBlob.cpp:		update(cur_time, 0.0f, NULL);
VBlob.cpp:		fTimeMul = Pi / sequence_len;
VBlob.cpp:		fTimeMul *= time_prog*0.2f + 0.8f;
VBlob.cpp:		if (cur_time < -1.0f) fStartTime = -VBlob::fRand01() * Pi / fTimeMul;
VBlob.cpp:bool VBlobBump::update(float elapsed_time, float dt, VBloblet* p_bloblet)
VBlob.cpp:				fTimeMul = 2.0f * Pi / sequence_len;
VBlob.cpp:				fStartTime = elapsed_time - 0.25f * sequence_len;
VBlob.cpp:	float t = (elapsed_time - fStartTime) * fTimeMul;
VBlob.cpp:			return create(elapsed_time, p_bloblet);
VBlob.cpp://MTS		float sequence_time_mul = 5.0f;
VBlob.cpp://MTS		p_bloblet->fRestoreForceConstant = 2.0f * Pi / (sequence_time_mul*(elapsed_time - fStartTime));
VBlob.cpp:bool VBloblet::update(float elapsed_time, float dt)
VBlob.cpp:	float time_prog = max(0.0f, (elapsed_time-BLOB_STATIC_END_TIME) * OO_MAX_INTENSITY_DELTA);
VBlob.cpp:	float t = fTimeMultiple * (elapsed_time - fStartTime);
VBlob.cpp:	t *= 1.4f * (1.0f + elapsed_time / 10.0f);	// speed up over time
VBlob.cpp:	fCurDist = fMaxDist * s * time_prog;
xbinput.cpp:                // Store the current state for the next time
logo_renderer.cpp:	bool b_want_wordmark = (gApp.getElapsedTime() >= TEXT_ANIM_START_TIME + TEXT_ANIM_LEN);
logo_renderer.cpp:void LogoRenderer::advanceTime(float fElapsedTime, float fDt)
logo_renderer.cpp:	if(fElapsedTime >= TEXT_ANIM_START_TIME)
logo_renderer.cpp:		float f_norm_pos = (fElapsedTime - TEXT_ANIM_START_TIME) / TEXT_ANIM_LEN;
logo_renderer.cpp:		fTMAlpha = (fElapsedTime - (TEXT_ANIM_START_TIME)) / (TEXT_ANIM_LEN);
logo_renderer.cpp:	if (fElapsedTime >= FINISH_STOP_TIME)
logo_renderer.cpp:	if (b_force_3d_render || (gApp.getElapsedTime() < FINISH_STOP_TIME))
logo_renderer.cpp:		float fmag = -1.0f + 2.0f * (gApp.getElapsedTime() - SLASH_GRADIENT_TRANSITION_START) * SLASH_GRADIENT_TRANSITION_MUL;
DEV.C:*   do_watchdog     function called to  kick watchdog timer
DEV.C:*   dtimer_int      function called to  disable timer interrupt
DEV.C:*   etimer_int      function called to  enable timer interrupt
DEV.C:dtimer_int()
DEV.C:etimer_int()
xbs_app.cpp:int g_TimeRecId = 0;
xbs_app.cpp:#define BEGIN_TIME gApp.startTimeRec(g_TimeRecId);
xbs_app.cpp:#define END_TIME gApp.endTimeRec(g_TimeRecId++);
xbs_app.cpp:#define BEGIN_TIME
xbs_app.cpp:#define END_TIME
xbs_app.cpp:    KeQuerySystemTime(&li);
xbs_app.cpp:        fTimeElapsed = 7.5f;
xbs_app.cpp:	    fTimeElapsed = 0.0f;
xbs_app.cpp:void XBoxStartupApp::advanceTime(float dt,float cam_dt)
xbs_app.cpp:	fTimeElapsed += dt;
xbs_app.cpp:		if (fTimeElapsed < BLOB_ZERO_INTENSE_END_TIME)
xbs_app.cpp:			float t = (fTimeElapsed - BLOB_ZERO_INTENSE_END_TIME) * OO_MAX_INTENSITY_DELTA;
xbs_app.cpp:		float pulses = sumIntensityPulses(fTimeElapsed);
xbs_app.cpp:		float f_time_vel = 0.02f;
xbs_app.cpp:		float f_jog_time = defaultGamepad.fX2 * f_time_vel;
xbs_app.cpp:		if (fast_fabs(defaultGamepad.fX2) > 0.9f) f_jog_time *= 3.0f;
xbs_app.cpp:		fTimeElapsed += f_jog_time;
xbs_app.cpp:		fJogDeltaTime += f_jog_time;
xbs_app.cpp:		if(fTimeElapsed < 0.f)
xbs_app.cpp:			fJogDeltaTime += 0.0f - fTimeElapsed;
xbs_app.cpp:			fTimeElapsed = 0.0f;
xbs_app.cpp:		if(fTimeElapsed > DEMO_TOTAL_TIME )
xbs_app.cpp:			fJogDeltaTime += (DEMO_TOTAL_TIME - 0.0001f) - fTimeElapsed;
xbs_app.cpp:			fTimeElapsed = DEMO_TOTAL_TIME - 0.0001f; 
xbs_app.cpp:	if(fTimeElapsed >= DEMO_TOTAL_TIME)
xbs_app.cpp:                fTimeElapsed = 7.5f;
xbs_app.cpp:	            fTimeElapsed = 0.0f;
xbs_app.cpp:		float fCamTime = (fTimeElapsed * fTimeElapsed / 6.0f)*.8f;
xbs_app.cpp:		fCamTime = fCamTime + .2f*(fTimeElapsed * fast_sin(min(3.14159265354f/2.f,fTimeElapsed * .2833f)));
xbs_app.cpp:		camController.getPosition(fCamTime, &pos, &look, &bRenderGeom, &bRenderSlash);
xbs_app.cpp:		sceneGeom.advanceTime(fTimeElapsed, dt);
xbs_app.cpp:		vblob.advanceTime(fTimeElapsed, dt);
xbs_app.cpp:			shieldMgr.advanceTime(fTimeElapsed, dt);
xbs_app.cpp:			greenFog.advanceTime(fTimeElapsed, dt);
xbs_app.cpp:		logoGeom.advanceTime(fTimeElapsed, dt);	
xbs_app.cpp:			if (fTimeElapsed >= BLOB_STATIC_END_TIME) vblob.render();
xbs_app.cpp:		bool b_render_fog = (bRenderGeom && bFogOn && ((getBlobIntensity() > 0.0f) || (fTimeElapsed < BLOB_STATIC_END_TIME)));
xbs_app.cpp:	BEGIN_TIME;
xbs_app.cpp:	END_TIME;
xbs_app.cpp:	BEGIN_TIME;
xbs_app.cpp:	END_TIME;
xbs_app.cpp:	BEGIN_TIME;
xbs_app.cpp:	END_TIME;
xbs_app.cpp:	BEGIN_TIME;
xbs_app.cpp:	END_TIME;
xbs_app.cpp:	BEGIN_TIME;
xbs_app.cpp:	END_TIME;
xbs_app.cpp:	BEGIN_TIME;
xbs_app.cpp:	END_TIME;
xbs_app.cpp:	BEGIN_TIME;
xbs_app.cpp:	END_TIME;
xbs_app.cpp:	BEGIN_TIME;
xbs_app.cpp:	END_TIME;
xbs_app.cpp:	BEGIN_TIME;
xbs_app.cpp:	END_TIME;
xbs_app.cpp:	BEGIN_TIME;
xbs_app.cpp:	END_TIME;
xbs_app.cpp:	BEGIN_TIME;
xbs_app.cpp:	END_TIME;
xbs_app.cpp:	BEGIN_TIME;
xbs_app.cpp:	END_TIME;
xbs_app.cpp:	BEGIN_TIME;
xbs_app.cpp:	END_TIME;
xbs_app.cpp:	float f_total_time = 0.f;
xbs_app.cpp:	for(int i = 0; i < g_TimeRecId; i++)
xbs_app.cpp:		f_total_time += fInitTimes[i];
xbs_app.cpp:	sprintf(buf,"Init time: %ff seconds\n",f_total_time);
xbs_app.cpp:	for(;fTimeElapsed < DEMO_TOTAL_TIME;)
xbs_app.cpp:	DWORD time = GetTickCount();
xbs_app.cpp:	DWORD time = NtGetTickCount();
xbs_app.cpp://	float fseconds_elapsed = ((float)(abs(dwLastTick - time))) * 0.001f;
xbs_app.cpp:	const float f_app_time_muls[NUM_APP_SPEEDS] = {1.f,0.5f,0.f};
xbs_app.cpp:	float last_jogdt = fJogDeltaTime;
xbs_app.cpp:	fJogDeltaTime = 0.0f;
xbs_app.cpp:	advanceTime(fseconds_elapsed * f_app_time_muls[appSpeedId] + last_jogdt, fseconds_elapsed);	
xbs_app.cpp:	if (FRAMECOUNT_PERIOD && (time > dwLastFramecountTick + FRAMECOUNT_PERIOD))
xbs_app.cpp:		float fps = 1000.0f * ((float)numFrames) / ((float)(time-dwLastFramecountTick));
xbs_app.cpp:			fps, ((float)(time-dwLastFramecountTick))/1000.0f,
xbs_app.cpp:		dwLastFramecountTick = time;
xbs_app.cpp:	dwLastTick = time;
xbs_app.cpp:		// x=center time, y=time radius of effect, z=intensity
xbs_app.cpp:		// x=center time, y=time radius of effect, z=intensity
xbs_app.cpp://MTS	sprintf(buf, "Elapsed time = %f, pulse sum = %f, total sum = %f\n", et, sum, sum + fBaseBlobIntensity);
BlobRenderer.h:	virtual void advanceTime(float fElapsedTime, float fDt) {}
BlobRenderer.h:	virtual void advanceTime(float fElapsedTime, float fDt);
Blobs.h:	virtual void advanceTime(float fElapsedTime, float fDt);
Blobs.h:	virtual void advanceTime(float fElapsedTime, float fDt);
CamControl.h:Uses Hermite interpolation, from page 54 of "Real-Time Rendering" (Moeller, Haines)
CamControl.h:	5: final position, with high time value (the endcap)
CamControl.h:	unsigned char	ucTime;					// Time when the camera arrives here (0 indicates start of new path, 100 is start of finalization)
CamControl.h:	float		fTime;			// Time when the camera arrives here (0 indicates start of new path)
camera.h:	float        fTime;
defines.h:const float DEMO_TOTAL_TIME = 8.0f;
defines.h:const float FINAL_HOLD_TIME	= 2.0f;
defines.h:const float FINISH_TRANSITION_TIME = 0.8f;
defines.h:#define TEXT_ANIM_START_TIME                (DEMO_TOTAL_TIME - FINAL_HOLD_TIME)
defines.h:const float BLOB_STATIC_END_TIME = 0.6f;
defines.h:#define OO_BLOB_STATIC_END_TIME				(1.0f / BLOB_STATIC_END_TIME)
defines.h:#define BLOB_ZERO_INTENSE_END_TIME			(BLOB_STATIC_END_TIME + 0.5f)
defines.h:#define FINISH_START_TIME					(DEMO_TOTAL_TIME - FINAL_HOLD_TIME - FINISH_TRANSITION_TIME)
defines.h:#define FINISH_STOP_TIME					(DEMO_TOTAL_TIME - FINAL_HOLD_TIME)
defines.h:#define OO_FINISH_DELTA						(1.0f / FINISH_TRANSITION_TIME)
defines.h:#define MAX_INTENSITY_TIME					(FINISH_START_TIME - 0.0f)
defines.h:#define MAX_INTENSITY_DELTA					(MAX_INTENSITY_TIME - BLOB_ZERO_INTENSE_END_TIME)
defines.h:#define BLOB_PULSE_START					(BLOB_STATIC_END_TIME)
defines.h:#define BLOB_PULSE_END						(FINISH_STOP_TIME - 0.4f)
defines.h:#define BLOB_JITTER_START					(BLOB_STATIC_END_TIME)
defines.h:#define BLOB_JITTER_DELTA					(FINISH_START_TIME)
defines.h:#define SCENE_ANIM_START_TIME				(BLOB_STATIC_END_TIME + 0.25f)
defines.h:const float PUSHOUT_START_TIME = 0.5f;
defines.h:#define SHIELD_FADE_IN_START_TIME			(BLOB_STATIC_END_TIME)
defines.h:#define SHIELD_FADE_OUT_START_TIME			(FINISH_START_TIME - 0.1f)
defines.h:#define SHIELD_FADE_OUT_DELTA				(FINISH_TRANSITION_TIME * 0.2f)
defines.h:#define GLOW_FADE_CIRCLE_START				(FINISH_START_TIME - 0.5f)
defines.h:#define SLASH_GRADIENT_TRANSITION_START		(FINISH_START_TIME - 0.5f)
defines.h://MTS#define SLASH_GRADIENT_TRANSITION_END		(FINISH_STOP_TIME + 0.75f)
defines.h:#define SLASH_GRADIENT_TRANSITION_END		(FINISH_STOP_TIME)
defines.h:#define SCENE_LO_DETAIL_START               (FINISH_START_TIME)
EXTERNS.H:extern _base_ short 		system_clock_music ;/* global music system timer     	*/
EXTERNS.H:extern _base_ short 		system_clock_fx; /* global fx system timer	    	*/
EXTERNS.H:extern		_base_ uchar 	clock_cntr[2];		/* timer count-downer	*/
EXTERNS.H:extern		_base_ uchar 	clock_cntr_value[2];	/* timer count-downer	*/
EXTERNS.H:extern _base_ uchar 	current_timer_priority;	/* priority of last timer call */
EXTERNS.H:extern	uchar		music_timer_status[]; 
EXTERNS.H:extern			dtimer_int();			/* from dev.c		*/
EXTERNS.H:extern			etimer_int();			/* from dev.c		*/
FTABLES.H:extern	void	call_timer(void);
FTABLES.H:extern	void	call_end_timer(void);
FTABLES.H:extern void	call_play_timer(void);
FTABLES.H:	call_timer,			/* 9 make a music timer call	*/
FTABLES.H:	call_end_timer,		/* 10 stop timer, go back to prev back music */
FTABLES.H:	call_play_timer,		/* 11 sound table entry for timer */
GreenFog.h:	void advanceTime(float fElapsedTime, float fDt);
logo_renderer.h:	void advanceTime(float fElapsedTime, float fDt);
PROTOS.H:void	call_timer(void);
PROTOS.H:void	call_end_timer(void);
PROTOS.H:void	call_play_timer(void);
scene_renderer.h:	void advanceTime(float fElapsedTime, float fDt);
Shield.h:	void advanceTime(float fElapsedTime, float fDt);
Shield.h:	void advanceTime(float fElapsedTime, float fDt);
Shield.h:	void advanceTime(float fElapsedTime, float fDt);	// resets if fElapsedTime is zero
SOS.H:	short	timer;			/* timer value for this process */
SOS.H:	short	prev_timer;		/* last value of timer for delta */
SOS.H:	ushort	loop_counter[MAX_LOOP];	/* # of times to loop		*/
SOS.H:* 	Timer music structurs											  *
SOS.H:#define	MUSIC_TIMER_PENDING	2		/* silent but "playing" */
SOS.H:#define	MUSIC_TIMER_ON		1		/* playing				*/
SOS.H:#define	MUSIC_TIMER_OFF		0		/* not playing			*/
SOS.H:#define	MAX_TIMERS			17
SOS.H:struct	timer_music {
SOS.H:	uchar	priority;		/* priority of timer					*/
SOS.H:	uchar	sound_call;		/* sound call to make for this timer	*/
VBlob.h:	float fStartTime;
VBlob.h:	float fTimeMultiple;
VBlob.h:	bool update(float elapsed_time, float dt);	// returns false if it consents to be deleted
VBlob.h:	bool create(float cur_time, VBloblet* p_bloblet);	// randomly creates a blob bump
VBlob.h:	bool update(float elapsed_time, float dt, VBloblet* p_bloblet);
VBlob.h:	float fStartTime;
VBlob.h:	float fTimeMul;
VBlob.h:	void advanceTime(float fElapsedTime, float fDt);
xbs_app.h:	float			fTimeElapsed;
xbs_app.h:	float			fJogDeltaTime;
xbs_app.h:	D3DVECTOR		vPulses[NUM_PULSES];	// x=center time, y=time radius of effect, z=intensity
xbs_app.h:	void					advanceTime(float dt, float cam_dt);
xbs_app.h:	float fInitTimes[64];	
xbs_app.h:	void startTimeRec(int i) { fInitTimes[i] = ((float)GetTickCount()) * 0.001f; }
xbs_app.h:	void endTimeRec(int i)   { fInitTimes[i] = (((float)GetTickCount()) * 0.001f) - fInitTimes[i]; }
xbs_app.h:	float			getElapsedTime()			const	{ return fTimeElapsed; }
