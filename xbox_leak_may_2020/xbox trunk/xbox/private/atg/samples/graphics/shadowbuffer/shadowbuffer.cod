; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\shadowbuffer.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_09IHLHDPGH@Floor?4bmp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09DBFFANKC@Wings?4bmp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@FJKJJLE@BiHull?4bmp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BG@KPNPCBMN@?$AAM?$AAo?$AAv?$AAe?$AA?5?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BI@LLEBCCOJ@?$AAM?$AAo?$AAv?$AAe?$AA?5?$AAc?$AAa?$AAm?$AAe?$AAr?$AAa?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CM@GEEEOEBH@?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA?6?$AAZ?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?1?$AAs?$AAl?$AAo?$AAp@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CA@BONAPNCF@?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAr?$AAo?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BO@MKOJAMHC@?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAf?$AAr?$AAu?$AAs?$AAt?$AAu?$AAm?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CO@GKEEHLHG@?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?6?$AAZ?$AA?9?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AAm@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BC@MFACBNOJ@?$AAZ?$AAo?$AAo?$AAm?$AA?5?$AAO?$AAu?$AAt?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BA@IBOADIEG@?$AAZ?$AAo?$AAo?$AAm?$AA?5?$AAI?$AAn?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1M@ODIKOLHI@?$AAP?$AAa?$AAu?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BK@FGMCFPAM@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAh?$AAe?$AAl?$AAp?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08GPANDBJG@Font?4xpr?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@OIBAJEID@Gamepad?4xpr?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@COPAPIPK@shaders?2vshader?4xvu?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@BKKMCHPI@shaders?2shadwbuf?4xpu?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@EBCEPJIE@Resource?4xpr?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BE@EBNFNCCI@?$AAd?$AA?3?$AA?2?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?2?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@KFNACOCE@Models?2Airplane?4xbg?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BK@IOLMKPIG@?$AAS?$AAh?$AAa?$AAd?$AAo?$AAw?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1GK@FIOADJAH@?$AAT?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?0?$AA?5?$AAZ?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_AddRef@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_Release@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_BeginScene@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_EndScene@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Present@D3DDevice@@SGJPBUtagRECT@@0PAX1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateTexture@D3DDevice@@SGJIIIKW4_D3DFORMAT@@KPAPAUD3DTexture@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRenderTarget@D3DDevice@@SGJPAUD3DSurface@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetRenderTarget@D3DDevice@@SGJPAPAUD3DSurface@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDepthStencilSurface@D3DDevice@@SGJPAPAUD3DSurface@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@D3DDevice@@SGJKPBU_D3DRECT@@KKMK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTransform@D3DDevice@@SGJW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetViewport@D3DDevice@@SGJPBU_D3DVIEWPORT8@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTexture@D3DDevice@@SGJKPAUD3DBaseTexture@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawPrimitiveUP@D3DDevice@@SGJW4_D3DPRIMITIVETYPE@@IPBXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawVerticesUP@D3DDevice@@SGJW4_D3DPRIMITIVETYPE@@IPBXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetVertexShader@D3DDevice@@SGJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetVertexShaderConstant@D3DDevice@@SGJHPBXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPixelShader@D3DDevice@@SGJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPixelShaderConstant@D3DDevice@@SGJKPBXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@D3DResource@@QAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSurfaceLevel@D3DTexture@@QAGJIPAPAUD3DSurface@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@D3DVertexBuffer@@QAGJIIPAPAEK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@D3DVertexBuffer@@QAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@D3DIndexBuffer@@QAGJIIPAPAEK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@D3DIndexBuffer@@QAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DPalette_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XGVECTOR3@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XGVECTOR4@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XGMATRIX@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XGQUATERNION@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XGVECTOR2@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XGVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??YXGVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ZXGVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GXGVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??DXGVECTOR3@@QBE?AU0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XGVECTOR4@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XGMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XGQUATERNION@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XGPLANE@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XGCOLOR@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?XGVec3Length@@YGMPBUXGVECTOR3@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?XGVec3Dot@@YGMPBUXGVECTOR3@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?XGVec3Cross@@YGPAUXGVECTOR3@@PAU1@PBU1@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?XGMatrixIdentity@@YGPAUXGMATRIX@@PAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@Swizzler@@QAEXKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SwizzleU@Swizzler@@QAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SwizzleV@Swizzler@@QAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SwizzleW@Swizzler@@QAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FtoDW@@YGKM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Cleanup@CXBApplication@@MAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CXBPackedResource@@QBEPAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetResource@CXBPackedResource@@QBEPAUD3DResource@@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetVertexShader@CXModel@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPosition@CXObject@@QAEXMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRotation@CXObject@@QAEXMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E1
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _main
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CXBoxSample@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CXBoxSample@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@CXBoxSample@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FrameMove@CXBoxSample@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Render@CXBoxSample@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DisplaySBObject@CXBoxSample@@QAEJPAVCXObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CXBoxSample@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	?g_ResourceNames@@3PAUXBRESOURCE@@A		; g_ResourceNames
PUBLIC	??_C@_09IHLHDPGH@Floor?4bmp?$AA@		; `string'
PUBLIC	??_C@_09DBFFANKC@Wings?4bmp?$AA@		; `string'
PUBLIC	??_C@_0L@FJKJJLE@BiHull?4bmp?$AA@		; `string'
PUBLIC	?g_fShadowBufferZRange@@3PAMA			; g_fShadowBufferZRange
PUBLIC	?g_fShadowBufferDesc@@3PAY07GA			; g_fShadowBufferDesc
PUBLIC	?g_vFrustumLines@@3PAULINEVERTEX@@A		; g_vFrustumLines
PUBLIC	?g_HelpCallouts@@3PAUXBHELP_CALLOUT@@A		; g_HelpCallouts
PUBLIC	??_C@_1BG@KPNPCBMN@?$AAM?$AAo?$AAv?$AAe?$AA?5?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@LLEBCCOJ@?$AAM?$AAo?$AAv?$AAe?$AA?5?$AAc?$AAa?$AAm?$AAe?$AAr?$AAa?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@GEEEOEBH@?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA?6?$AAZ?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?1?$AAs?$AAl?$AAo?$AAp@ ; `string'
PUBLIC	??_C@_1CA@BONAPNCF@?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAr?$AAo?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@MKOJAMHC@?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAf?$AAr?$AAu?$AAs?$AAt?$AAu?$AAm?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@GKEEHLHG@?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?6?$AAZ?$AA?9?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AAm@ ; `string'
PUBLIC	??_C@_1BC@MFACBNOJ@?$AAZ?$AAo?$AAo?$AAm?$AA?5?$AAO?$AAu?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@IBOADIEG@?$AAZ?$AAo?$AAo?$AAm?$AA?5?$AAI?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@ODIKOLHI@?$AAP?$AAa?$AAu?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@FGMCFPAM@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAh?$AAe?$AAl?$AAp?$AA?$AA@ ; `string'
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
CONST	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
CONST	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
CONST	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
CONST	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
CONST	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
CONST	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
CONST	ENDS
;	COMDAT ??_C@_09IHLHDPGH@Floor?4bmp?$AA@
CONST	SEGMENT
??_C@_09IHLHDPGH@Floor?4bmp?$AA@ DB 'Floor.bmp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DBFFANKC@Wings?4bmp?$AA@
CONST	SEGMENT
??_C@_09DBFFANKC@Wings?4bmp?$AA@ DB 'Wings.bmp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FJKJJLE@BiHull?4bmp?$AA@
CONST	SEGMENT
??_C@_0L@FJKJJLE@BiHull?4bmp?$AA@ DB 'BiHull.bmp', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
?g_ResourceNames@@3PAUXBRESOURCE@@A DD FLAT:??_C@_09IHLHDPGH@Floor?4bmp?$AA@ ; g_ResourceNames
	DD	00H
	DD	FLAT:??_C@_09DBFFANKC@Wings?4bmp?$AA@
	DD	014H
	DD	FLAT:??_C@_0L@FJKJJLE@BiHull?4bmp?$AA@
	DD	028H
	DD	00H
	DD	00H
?g_fShadowBufferZRange@@3PAMA DD 0477fff00r	; 65535	; g_fShadowBufferZRange
	DD	04b7fffffr			; 1.67772e+007
	DD	043fff800r			; 511.938
	DD	07149f2car			; 1e+030
?g_fShadowBufferDesc@@3PAY07GA DB 'D', 00H, '1', 00H, '6', 00H, 00H, 00H ; g_fShadowBufferDesc
	ORG $+8
	DB	'D', 00H, '2', 00H, '4', 00H, 'S', 00H, '8', 00H, 00H, 00H
	ORG $+4
	DB	'F', 00H, '1', 00H, '6', 00H, 00H, 00H
	ORG $+8
	DB	'F', 00H, '2', 00H, '4', 00H, 'S', 00H, '8', 00H, 00H, 00H
	ORG $+4
?g_vFrustumLines@@3PAULINEVERTEX@@A DD 03f800000r ; 1	; g_vFrustumLines
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0ffffffffH
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0ffffffffH
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	0ffffffffH
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	0ffffffffH
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	0ffffffffH
_DATA	ENDS
;	COMDAT ??_C@_1BG@KPNPCBMN@?$AAM?$AAo?$AAv?$AAe?$AA?5?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@KPNPCBMN@?$AAM?$AAo?$AAv?$AAe?$AA?5?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$AA@ DB 'M'
	DB	00H, 'o', 00H, 'v', 00H, 'e', 00H, ' ', 00H, 'l', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@LLEBCCOJ@?$AAM?$AAo?$AAv?$AAe?$AA?5?$AAc?$AAa?$AAm?$AAe?$AAr?$AAa?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@LLEBCCOJ@?$AAM?$AAo?$AAv?$AAe?$AA?5?$AAc?$AAa?$AAm?$AAe?$AAr?$AAa?$AA?$AA@ DB 'M'
	DB	00H, 'o', 00H, 'v', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@GEEEOEBH@?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA?6?$AAZ?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?1?$AAs?$AAl?$AAo?$AAp@
CONST	SEGMENT
??_C@_1CM@GEEEOEBH@?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA?6?$AAZ?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?1?$AAs?$AAl?$AAo?$AAp@ DB 'A'
	DB	00H, 'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, 0aH, 00H
	DB	'Z', 00H, ' ', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e'
	DB	00H, 't', 00H, '/', 00H, 's', 00H, 'l', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@BONAPNCF@?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAr?$AAo?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@BONAPNCF@?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAr?$AAo?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ DB 'T'
	DB	00H, 'o', 00H, 'g', 00H, 'g', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'r', 00H, 'o', 00H, 't', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MKOJAMHC@?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAf?$AAr?$AAu?$AAs?$AAt?$AAu?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MKOJAMHC@?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAf?$AAr?$AAu?$AAs?$AAt?$AAu?$AAm?$AA?$AA@ DB 'T'
	DB	00H, 'o', 00H, 'g', 00H, 'g', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'f', 00H, 'r', 00H, 'u', 00H, 's', 00H, 't', 00H, 'u', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@GKEEHLHG@?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?6?$AAZ?$AA?9?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AAm@
CONST	SEGMENT
??_C@_1CO@GKEEHLHG@?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?6?$AAZ?$AA?9?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AAm@ DB 'C'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 0aH, 00H
	DB	'Z', 00H, '-', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@MFACBNOJ@?$AAZ?$AAo?$AAo?$AAm?$AA?5?$AAO?$AAu?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@MFACBNOJ@?$AAZ?$AAo?$AAo?$AAm?$AA?5?$AAO?$AAu?$AAt?$AA?$AA@ DB 'Z'
	DB	00H, 'o', 00H, 'o', 00H, 'm', 00H, ' ', 00H, 'O', 00H, 'u', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@IBOADIEG@?$AAZ?$AAo?$AAo?$AAm?$AA?5?$AAI?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@IBOADIEG@?$AAZ?$AAo?$AAo?$AAm?$AA?5?$AAI?$AAn?$AA?$AA@ DB 'Z', 00H
	DB	'o', 00H, 'o', 00H, 'm', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@ODIKOLHI@?$AAP?$AAa?$AAu?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@ODIKOLHI@?$AAP?$AAa?$AAu?$AAs?$AAe?$AA?$AA@ DB 'P', 00H, 'a', 00H
	DB	'u', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@FGMCFPAM@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAh?$AAe?$AAl?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@FGMCFPAM@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAh?$AAe?$AAl?$AAp?$AA?$AA@ DB 'D'
	DB	00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H, 'y', 00H
	DB	' ', 00H, 'h', 00H, 'e', 00H, 'l', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?g_HelpCallouts@@3PAUXBHELP_CALLOUT@@A DW 00H		; g_HelpCallouts
	DW	01H
	DD	FLAT:??_C@_1BG@KPNPCBMN@?$AAM?$AAo?$AAv?$AAe?$AA?5?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
	DW	05H
	DW	01H
	DD	FLAT:??_C@_1BI@LLEBCCOJ@?$AAM?$AAo?$AAv?$AAe?$AA?5?$AAc?$AAa?$AAm?$AAe?$AAr?$AAa?$AA?$AA@
	DW	0aH
	DW	02H
	DD	FLAT:??_C@_1CM@GEEEOEBH@?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA?6?$AAZ?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?1?$AAs?$AAl?$AAo?$AAp@
	DW	023H
	DW	01H
	DD	FLAT:??_C@_1CA@BONAPNCF@?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAr?$AAo?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
	DW	032H
	DW	01H
	DD	FLAT:??_C@_1BO@MKOJAMHC@?$AAT?$AAo?$AAg?$AAg?$AAl?$AAe?$AA?5?$AAf?$AAr?$AAu?$AAs?$AAt?$AAu?$AAm?$AA?$AA@
	DW	02dH
	DW	02H
	DD	FLAT:??_C@_1CO@GKEEHLHG@?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?6?$AAZ?$AA?9?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAf?$AAo?$AAr?$AAm@
	DW	037H
	DW	01H
	DD	FLAT:??_C@_1BC@MFACBNOJ@?$AAZ?$AAo?$AAo?$AAm?$AA?5?$AAO?$AAu?$AAt?$AA?$AA@
	DW	03cH
	DW	01H
	DD	FLAT:??_C@_1BA@IBOADIEG@?$AAZ?$AAo?$AAo?$AAm?$AA?5?$AAI?$AAn?$AA?$AA@
	DW	014H
	DW	01H
	DD	FLAT:??_C@_1M@ODIKOLHI@?$AAP?$AAa?$AAu?$AAs?$AAe?$AA?$AA@
	DW	0fH
	DW	01H
	DD	FLAT:??_C@_1BK@FGMCFPAM@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAh?$AAe?$AAl?$AAp?$AA?$AA@
_DATA	ENDS
PUBLIC	??0XGVECTOR4@@QAE@MMMM@Z			; XGVECTOR4::XGVECTOR4
EXTRN	__fltused:NEAR
CRT$XCU	SEGMENT
_$S2	DD	FLAT:_$E1
; Function compile flags: /Odt
; File c:\xbox\private\atg\samples\graphics\shadowbuffer\shadowbuffer.cpp
CRT$XCU	ENDS
;	COMDAT _$E1
text$yc	SEGMENT
_$E1	PROC NEAR					; COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 70   :     D3DXVECTOR4( 1.0f, 1.0f, 0.0f, 1.0f ),

  00003	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  00008	6a 00		 push	 0
  0000a	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  0000f	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_vHomogenousFrustum@@3PAUXGVECTOR4@@A
  00019	e8 00 00 00 00	 call	 ??0XGVECTOR4@@QAE@MMMM@Z ; XGVECTOR4::XGVECTOR4

; 71   :     D3DXVECTOR4( 1.0f, 1.0f, 1.0f, 1.0f ),

  0001e	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  00023	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  00028	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  0002d	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  00032	b9 10 00 00 00	 mov	 ecx, OFFSET FLAT:?g_vHomogenousFrustum@@3PAUXGVECTOR4@@A+16
  00037	e8 00 00 00 00	 call	 ??0XGVECTOR4@@QAE@MMMM@Z ; XGVECTOR4::XGVECTOR4

; 72   : 
; 73   :     D3DXVECTOR4(-1.0f, 1.0f, 0.0f, 1.0f ),

  0003c	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  00041	6a 00		 push	 0
  00043	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  00048	68 00 00 80 bf	 push	 -1082130432		; bf800000H
  0004d	b9 20 00 00 00	 mov	 ecx, OFFSET FLAT:?g_vHomogenousFrustum@@3PAUXGVECTOR4@@A+32
  00052	e8 00 00 00 00	 call	 ??0XGVECTOR4@@QAE@MMMM@Z ; XGVECTOR4::XGVECTOR4

; 74   :     D3DXVECTOR4(-1.0f, 1.0f, 1.0f, 1.0f ),

  00057	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  0005c	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  00061	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  00066	68 00 00 80 bf	 push	 -1082130432		; bf800000H
  0006b	b9 30 00 00 00	 mov	 ecx, OFFSET FLAT:?g_vHomogenousFrustum@@3PAUXGVECTOR4@@A+48
  00070	e8 00 00 00 00	 call	 ??0XGVECTOR4@@QAE@MMMM@Z ; XGVECTOR4::XGVECTOR4

; 75   : 
; 76   :     D3DXVECTOR4(-1.0f,-1.0f, 0.0f, 1.0f ),

  00075	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  0007a	6a 00		 push	 0
  0007c	68 00 00 80 bf	 push	 -1082130432		; bf800000H
  00081	68 00 00 80 bf	 push	 -1082130432		; bf800000H
  00086	b9 40 00 00 00	 mov	 ecx, OFFSET FLAT:?g_vHomogenousFrustum@@3PAUXGVECTOR4@@A+64
  0008b	e8 00 00 00 00	 call	 ??0XGVECTOR4@@QAE@MMMM@Z ; XGVECTOR4::XGVECTOR4

; 77   :     D3DXVECTOR4(-1.0f,-1.0f, 1.0f, 1.0f ),

  00090	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  00095	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  0009a	68 00 00 80 bf	 push	 -1082130432		; bf800000H
  0009f	68 00 00 80 bf	 push	 -1082130432		; bf800000H
  000a4	b9 50 00 00 00	 mov	 ecx, OFFSET FLAT:?g_vHomogenousFrustum@@3PAUXGVECTOR4@@A+80
  000a9	e8 00 00 00 00	 call	 ??0XGVECTOR4@@QAE@MMMM@Z ; XGVECTOR4::XGVECTOR4

; 78   : 
; 79   :     D3DXVECTOR4( 1.0f,-1.0f, 0.0f, 1.0f ),

  000ae	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  000b3	6a 00		 push	 0
  000b5	68 00 00 80 bf	 push	 -1082130432		; bf800000H
  000ba	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  000bf	b9 60 00 00 00	 mov	 ecx, OFFSET FLAT:?g_vHomogenousFrustum@@3PAUXGVECTOR4@@A+96
  000c4	e8 00 00 00 00	 call	 ??0XGVECTOR4@@QAE@MMMM@Z ; XGVECTOR4::XGVECTOR4

; 80   :     D3DXVECTOR4( 1.0f,-1.0f, 1.0f, 1.0f ),

  000c9	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  000ce	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  000d3	68 00 00 80 bf	 push	 -1082130432		; bf800000H
  000d8	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  000dd	b9 70 00 00 00	 mov	 ecx, OFFSET FLAT:?g_vHomogenousFrustum@@3PAUXGVECTOR4@@A+112
  000e2	e8 00 00 00 00	 call	 ??0XGVECTOR4@@QAE@MMMM@Z ; XGVECTOR4::XGVECTOR4

; 81   : };

  000e7	5d		 pop	 ebp
  000e8	c3		 ret	 0
_$E1	ENDP
; Function compile flags: /Odt
; File c:\xbox\public\xdk\inc\xgmath.inl
text$yc	ENDS
;	COMDAT ??0XGVECTOR4@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4
_fx$ = 8
_fy$ = 12
_fz$ = 16
_fw$ = 20
??0XGVECTOR4@@QAE@MMMM@Z PROC NEAR			; XGVECTOR4::XGVECTOR4, COMDAT
; _this$ = ecx

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 333  :     x = fx;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _fx$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 334  :     y = fy;

  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _fy$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 335  :     z = fz;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 10	 mov	 edx, DWORD PTR _fz$[ebp]
  0001e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 336  :     w = fw;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 14	 mov	 ecx, DWORD PTR _fw$[ebp]
  00027	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 337  : }

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
??0XGVECTOR4@@QAE@MMMM@Z ENDP				; XGVECTOR4::XGVECTOR4
_TEXT	ENDS
PUBLIC	??0CXBoxSample@@QAE@XZ				; CXBoxSample::CXBoxSample
PUBLIC	??1CXBoxSample@@QAE@XZ				; CXBoxSample::~CXBoxSample
PUBLIC	_main
EXTRN	?Create@CXBApplication@@QAEJXZ:NEAR		; CXBApplication::Create
EXTRN	?Run@CXBApplication@@QAEHXZ:NEAR		; CXBApplication::Run
; Function compile flags: /Odt
; File c:\xbox\private\atg\samples\graphics\shadowbuffer\shadowbuffer.cpp
;	COMDAT _main
_TEXT	SEGMENT
_xbApp$ = -1248
_main	PROC NEAR					; COMDAT

; 189  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e0 04 00
	00		 sub	 esp, 1248		; 000004e0H

; 190  :     CXBoxSample xbApp;

  0001c	8d 8d 20 fb ff
	ff		 lea	 ecx, DWORD PTR _xbApp$[ebp]
  00022	e8 00 00 00 00	 call	 ??0CXBoxSample@@QAE@XZ	; CXBoxSample::CXBoxSample

; 191  :     if( FAILED( xbApp.Create() ) )

  00027	8d 8d 20 fb ff
	ff		 lea	 ecx, DWORD PTR _xbApp$[ebp]
  0002d	e8 00 00 00 00	 call	 ?Create@CXBApplication@@QAEJXZ ; CXBApplication::Create
  00032	85 c0		 test	 eax, eax
  00034	7d 0d		 jge	 SHORT $L20790

; 192  :         return;

  00036	8d 8d 20 fb ff
	ff		 lea	 ecx, DWORD PTR _xbApp$[ebp]
  0003c	e8 00 00 00 00	 call	 ??1CXBoxSample@@QAE@XZ
  00041	eb 16		 jmp	 SHORT $L20787
$L20790:

; 193  :     
; 194  :     xbApp.Run();

  00043	8d 8d 20 fb ff
	ff		 lea	 ecx, DWORD PTR _xbApp$[ebp]
  00049	e8 00 00 00 00	 call	 ?Run@CXBApplication@@QAEHXZ ; CXBApplication::Run

; 195  : }

  0004e	8d 8d 20 fb ff
	ff		 lea	 ecx, DWORD PTR _xbApp$[ebp]
  00054	e8 00 00 00 00	 call	 ??1CXBoxSample@@QAE@XZ
$L20787:
  00059	33 c0		 xor	 eax, eax
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	8b e3		 mov	 esp, ebx
  00060	5b		 pop	 ebx
  00061	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
EXTRN	??1CXObject@@QAE@XZ:NEAR			; CXObject::~CXObject
EXTRN	??1CXBPackedResource@@QAE@XZ:NEAR		; CXBPackedResource::~CXBPackedResource
EXTRN	??1CXBFont@@QAE@XZ:NEAR				; CXBFont::~CXBFont
EXTRN	??1CXBHelp@@QAE@XZ:NEAR				; CXBHelp::~CXBHelp
; Function compile flags: /Odt
;	COMDAT ??1CXBoxSample@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CXBoxSample@@QAE@XZ PROC NEAR			; CXBoxSample::~CXBoxSample, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	81 c1 20 04 00
	00		 add	 ecx, 1056		; 00000420H
  00010	e8 00 00 00 00	 call	 ??1CXObject@@QAE@XZ	; CXObject::~CXObject
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	81 c1 b0 03 00
	00		 add	 ecx, 944		; 000003b0H
  0001e	e8 00 00 00 00	 call	 ??1CXObject@@QAE@XZ	; CXObject::~CXObject
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	81 c1 40 03 00
	00		 add	 ecx, 832		; 00000340H
  0002c	e8 00 00 00 00	 call	 ??1CXObject@@QAE@XZ	; CXObject::~CXObject
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	81 c1 f4 01 00
	00		 add	 ecx, 500		; 000001f4H
  0003a	e8 00 00 00 00	 call	 ??1CXBPackedResource@@QAE@XZ ; CXBPackedResource::~CXBPackedResource
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	81 c1 d4 01 00
	00		 add	 ecx, 468		; 000001d4H
  00048	e8 00 00 00 00	 call	 ??1CXBHelp@@QAE@XZ	; CXBHelp::~CXBHelp
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	81 c1 84 01 00
	00		 add	 ecx, 388		; 00000184H
  00056	e8 00 00 00 00	 call	 ??1CXBFont@@QAE@XZ	; CXBFont::~CXBFont
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
??1CXBoxSample@@QAE@XZ ENDP				; CXBoxSample::~CXBoxSample
_TEXT	ENDS
PUBLIC	??0XGMATRIX@@QAE@XZ				; XGMATRIX::XGMATRIX
PUBLIC	?Initialize@CXBoxSample@@UAEJXZ			; CXBoxSample::Initialize
PUBLIC	?FrameMove@CXBoxSample@@UAEJXZ			; CXBoxSample::FrameMove
PUBLIC	?Render@CXBoxSample@@UAEJXZ			; CXBoxSample::Render
PUBLIC	??_7CXBoxSample@@6B@				; CXBoxSample::`vftable'
PUBLIC	?Cleanup@CXBApplication@@MAEJXZ			; CXBApplication::Cleanup
PUBLIC	??0XGVECTOR3@@QAE@XZ				; XGVECTOR3::XGVECTOR3
PUBLIC	??0XGVECTOR3@@QAE@MMM@Z				; XGVECTOR3::XGVECTOR3
EXTRN	??0CXObject@@QAE@XZ:NEAR			; CXObject::CXObject
EXTRN	??0CXBApplication@@QAE@XZ:NEAR			; CXBApplication::CXBApplication
EXTRN	??0CXBPackedResource@@QAE@XZ:NEAR		; CXBPackedResource::CXBPackedResource
EXTRN	??0CXBFont@@QAE@XZ:NEAR				; CXBFont::CXBFont
EXTRN	??0CXBHelp@@QAE@XZ:NEAR				; CXBHelp::CXBHelp
;	COMDAT ??_7CXBoxSample@@6B@
CONST	SEGMENT
??_7CXBoxSample@@6B@ DD FLAT:?Initialize@CXBoxSample@@UAEJXZ ; CXBoxSample::`vftable'
	DD	FLAT:?FrameMove@CXBoxSample@@UAEJXZ
	DD	FLAT:?Render@CXBoxSample@@UAEJXZ
	DD	FLAT:?Cleanup@CXBApplication@@MAEJXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CXBoxSample@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28
$T21043 = -24
$T21042 = -12
??0CXBoxSample@@QAE@XZ PROC NEAR			; CXBoxSample::CXBoxSample, COMDAT
; _this$ = ecx

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CXBApplication@@QAE@XZ ; CXBApplication::CXBApplication
  00011	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CXBoxSample@@6B@
  0001a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	81 c1 84 01 00
	00		 add	 ecx, 388		; 00000184H
  00023	e8 00 00 00 00	 call	 ??0CXBFont@@QAE@XZ	; CXBFont::CXBFont
  00028	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	81 c1 d4 01 00
	00		 add	 ecx, 468		; 000001d4H
  00031	e8 00 00 00 00	 call	 ??0CXBHelp@@QAE@XZ	; CXBHelp::CXBHelp
  00036	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	81 c1 f4 01 00
	00		 add	 ecx, 500		; 000001f4H
  0003f	e8 00 00 00 00	 call	 ??0CXBPackedResource@@QAE@XZ ; CXBPackedResource::CXBPackedResource
  00044	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	81 c1 10 02 00
	00		 add	 ecx, 528		; 00000210H
  0004d	e8 00 00 00 00	 call	 ??0XGMATRIX@@QAE@XZ	; XGMATRIX::XGMATRIX
  00052	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	81 c1 50 02 00
	00		 add	 ecx, 592		; 00000250H
  0005b	e8 00 00 00 00	 call	 ??0XGMATRIX@@QAE@XZ	; XGMATRIX::XGMATRIX
  00060	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  00069	e8 00 00 00 00	 call	 ??0XGVECTOR3@@QAE@XZ	; XGVECTOR3::XGVECTOR3
  0006e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	81 c1 9c 02 00
	00		 add	 ecx, 668		; 0000029cH
  00077	e8 00 00 00 00	 call	 ??0XGVECTOR3@@QAE@XZ	; XGVECTOR3::XGVECTOR3
  0007c	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	81 c1 b0 02 00
	00		 add	 ecx, 688		; 000002b0H
  00085	e8 00 00 00 00	 call	 ??0XGMATRIX@@QAE@XZ	; XGMATRIX::XGMATRIX
  0008a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	81 c1 f0 02 00
	00		 add	 ecx, 752		; 000002f0H
  00093	e8 00 00 00 00	 call	 ??0XGVECTOR3@@QAE@XZ	; XGVECTOR3::XGVECTOR3
  00098	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	81 c1 00 03 00
	00		 add	 ecx, 768		; 00000300H
  000a1	e8 00 00 00 00	 call	 ??0XGMATRIX@@QAE@XZ	; XGMATRIX::XGMATRIX
  000a6	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	81 c1 40 03 00
	00		 add	 ecx, 832		; 00000340H
  000af	e8 00 00 00 00	 call	 ??0CXObject@@QAE@XZ	; CXObject::CXObject
  000b4	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	81 c1 b0 03 00
	00		 add	 ecx, 944		; 000003b0H
  000bd	e8 00 00 00 00	 call	 ??0CXObject@@QAE@XZ	; CXObject::CXObject
  000c2	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	81 c1 20 04 00
	00		 add	 ecx, 1056		; 00000420H
  000cb	e8 00 00 00 00	 call	 ??0CXObject@@QAE@XZ	; CXObject::CXObject

; 207  :     m_vCameraPos = D3DXVECTOR3(0.0f, 20.0f, -30.0f);

  000d0	68 00 00 f0 c1	 push	 -1041235968		; c1f00000H
  000d5	68 00 00 a0 41	 push	 1101004800		; 41a00000H
  000da	6a 00		 push	 0
  000dc	8d 4d f4	 lea	 ecx, DWORD PTR $T21042[ebp]
  000df	e8 00 00 00 00	 call	 ??0XGVECTOR3@@QAE@MMM@Z	; XGVECTOR3::XGVECTOR3
  000e4	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  000ed	8b 10		 mov	 edx, DWORD PTR [eax]
  000ef	89 11		 mov	 DWORD PTR [ecx], edx
  000f1	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000f4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  000f7	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000fa	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 208  :     m_vCameraRot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  000fd	6a 00		 push	 0
  000ff	6a 00		 push	 0
  00101	6a 00		 push	 0
  00103	8d 4d e8	 lea	 ecx, DWORD PTR $T21043[ebp]
  00106	e8 00 00 00 00	 call	 ??0XGVECTOR3@@QAE@MMM@Z	; XGVECTOR3::XGVECTOR3
  0010b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	81 c1 9c 02 00
	00		 add	 ecx, 668		; 0000029cH
  00114	8b 10		 mov	 edx, DWORD PTR [eax]
  00116	89 11		 mov	 DWORD PTR [ecx], edx
  00118	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0011b	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0011e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00121	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 209  : 
; 210  :     m_fZOffset = 4.0f;

  00124	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	c7 81 c8 04 00
	00 00 00 80 40	 mov	 DWORD PTR [ecx+1224], 1082130432 ; 40800000H

; 211  :     m_fZSlopeScale = 2.0f;

  00131	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00134	c7 82 cc 04 00
	00 00 00 00 40	 mov	 DWORD PTR [edx+1228], 1073741824 ; 40000000H

; 212  :     m_bRotateFlag = true;

  0013e	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00141	c7 80 d0 04 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+1232], 1

; 213  :     m_bDrawFrustum = true;

  0014b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0014e	c7 81 d4 04 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+1236], 1

; 214  :     m_bDrawHelp = false;

  00158	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0015b	c7 82 f0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+496], 0

; 215  : }

  00165	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c3		 ret	 0
??0CXBoxSample@@QAE@XZ ENDP				; CXBoxSample::CXBoxSample
; Function compile flags: /Odt
; File c:\xbox\public\xdk\inc\xgmath.h
_TEXT	ENDS
;	COMDAT ??0XGVECTOR3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0XGVECTOR3@@QAE@XZ PROC NEAR				; XGVECTOR3::XGVECTOR3, COMDAT
; _this$ = ecx

; 95   :     XGVECTOR3() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0XGVECTOR3@@QAE@XZ ENDP				; XGVECTOR3::XGVECTOR3
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0XGMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0XGMATRIX@@QAE@XZ PROC NEAR				; XGMATRIX::XGMATRIX, COMDAT
; _this$ = ecx

; 184  :     XGMATRIX() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0XGMATRIX@@QAE@XZ ENDP				; XGMATRIX::XGMATRIX
; Function compile flags: /Odt
; File c:\xbox\public\xdk\inc\xgmath.inl
_TEXT	ENDS
;	COMDAT ??0XGVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4
_fx$ = 8
_fy$ = 12
_fz$ = 16
??0XGVECTOR3@@QAE@MMM@Z PROC NEAR			; XGVECTOR3::XGVECTOR3, COMDAT
; _this$ = ecx

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 189  :     x = fx;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _fx$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 190  :     y = fy;

  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _fy$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 191  :     z = fz;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 10	 mov	 edx, DWORD PTR _fz$[ebp]
  0001e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 192  : }

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??0XGVECTOR3@@QAE@MMM@Z ENDP				; XGVECTOR3::XGVECTOR3
; Function compile flags: /Odt
; File c:\xbox\private\atg\samples\common\include\xbapp.h
_TEXT	ENDS
;	COMDAT ?Cleanup@CXBApplication@@MAEJXZ
_TEXT	SEGMENT
_this$ = -4
?Cleanup@CXBApplication@@MAEJXZ PROC NEAR		; CXBApplication::Cleanup, COMDAT
; _this$ = ecx

; 82   :     virtual HRESULT Cleanup()               { return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?Cleanup@CXBApplication@@MAEJXZ ENDP			; CXBApplication::Cleanup
_TEXT	ENDS
PUBLIC	?SetPosition@CXObject@@QAEXMMM@Z		; CXObject::SetPosition
PUBLIC	?SetRotation@CXObject@@QAEXMMM@Z		; CXObject::SetRotation
PUBLIC	?CreateTexture@D3DDevice@@SGJIIIKW4_D3DFORMAT@@KPAPAUD3DTexture@@@Z ; D3DDevice::CreateTexture
PUBLIC	?GetRenderTarget@D3DDevice@@SGJPAPAUD3DSurface@@@Z ; D3DDevice::GetRenderTarget
PUBLIC	?GetDepthStencilSurface@D3DDevice@@SGJPAPAUD3DSurface@@@Z ; D3DDevice::GetDepthStencilSurface
PUBLIC	??_C@_08GPANDBJG@Font?4xpr?$AA@			; `string'
PUBLIC	??_C@_0M@OIBAJEID@Gamepad?4xpr?$AA@		; `string'
PUBLIC	?SetTransform@D3DDevice@@SGJW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; D3DDevice::SetTransform
PUBLIC	??_C@_0BE@COPAPIPK@shaders?2vshader?4xvu?$AA@	; `string'
PUBLIC	??_C@_0BF@BKKMCHPI@shaders?2shadwbuf?4xpu?$AA@	; `string'
PUBLIC	??_C@_0N@EBCEPJIE@Resource?4xpr?$AA@		; `string'
PUBLIC	??_C@_1BE@EBNFNCCI@?$AAd?$AA?3?$AA?2?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?2?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BE@KFNACOCE@Models?2Airplane?4xbg?$AA@	; `string'
EXTRN	?g_pModelResource@@3PAVCXBPackedResource@@A:DWORD ; g_pModelResource
EXTRN	??0CXModel@@QAE@XZ:NEAR				; CXModel::CXModel
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	?GridXZ@CXModel@@QAEKKKMMKPADMM@Z:NEAR		; CXModel::GridXZ
EXTRN	?Cylinder@CXModel@@QAEKMKMKMKKPADM@Z:NEAR	; CXModel::Cylinder
EXTRN	?SetXBMesh@CXObject@@QAEXPAVCXBMesh@@@Z:NEAR	; CXObject::SetXBMesh
EXTRN	?GetRadius@CXObject@@QAEMXZ:NEAR		; CXObject::GetRadius
EXTRN	?XBUtil_CreateVertexShader@@YGJPAUD3DDevice@@PBDPBKPAK@Z:NEAR ; XBUtil_CreateVertexShader
EXTRN	?XBUtil_CreatePixelShader@@YGJPAUD3DDevice@@PBDPAK@Z:NEAR ; XBUtil_CreatePixelShader
EXTRN	?g_pd3dDevice@@3PAUD3DDevice@@A:DWORD		; g_pd3dDevice
EXTRN	_XGSetSurfaceHeader@24:NEAR
EXTRN	?Create@CXBPackedResource@@QAEJPAUD3DDevice@@PBDKPAUXBRESOURCE@@@Z:NEAR ; CXBPackedResource::Create
EXTRN	?Create@CXBFont@@QAEJPAUD3DDevice@@PBD@Z:NEAR	; CXBFont::Create
EXTRN	_XGMatrixPerspectiveFovLH@20:NEAR
EXTRN	?Create@CXBHelp@@QAEJPAUD3DDevice@@PAD@Z:NEAR	; CXBHelp::Create
EXTRN	_memset:NEAR
EXTRN	_XPath_SetBasePath@4:NEAR
EXTRN	??0CXBMesh@@QAE@XZ:NEAR				; CXBMesh::CXBMesh
EXTRN	?Create@CXBMesh@@QAEJPAUD3DDevice@@PADPAVCXBPackedResource@@@Z:NEAR ; CXBMesh::Create
;	COMDAT ??_C@_08GPANDBJG@Font?4xpr?$AA@
; File c:\xbox\private\atg\samples\graphics\shadowbuffer\shadowbuffer.cpp
CONST	SEGMENT
??_C@_08GPANDBJG@Font?4xpr?$AA@ DB 'Font.xpr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OIBAJEID@Gamepad?4xpr?$AA@
CONST	SEGMENT
??_C@_0M@OIBAJEID@Gamepad?4xpr?$AA@ DB 'Gamepad.xpr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@COPAPIPK@shaders?2vshader?4xvu?$AA@
CONST	SEGMENT
??_C@_0BE@COPAPIPK@shaders?2vshader?4xvu?$AA@ DB 'shaders\vshader.xvu', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BKKMCHPI@shaders?2shadwbuf?4xpu?$AA@
CONST	SEGMENT
??_C@_0BF@BKKMCHPI@shaders?2shadwbuf?4xpu?$AA@ DB 'shaders\shadwbuf.xpu', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EBCEPJIE@Resource?4xpr?$AA@
CONST	SEGMENT
??_C@_0N@EBCEPJIE@Resource?4xpr?$AA@ DB 'Resource.xpr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@EBNFNCCI@?$AAd?$AA?3?$AA?2?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?2?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@EBNFNCCI@?$AAd?$AA?3?$AA?2?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?2?$AA?$AA@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'e', 00H, 'd', 00H, 'i', 00H
	DB	'a', 00H, '\', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KFNACOCE@Models?2Airplane?4xbg?$AA@
CONST	SEGMENT
??_C@_0BE@KFNACOCE@Models?2Airplane?4xbg?$AA@ DB 'Models\Airplane.xbg', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Initialize@CXBoxSample@@UAEJXZ
_TEXT	SEGMENT
tv201 = -64
tv171 = -60
tv153 = -56
_this$ = -52
$T21065 = -48
$T21062 = -44
$T21059 = -40
_vdecl$ = -36
_xbm$ = -16
_v$ = -12
?Initialize@CXBoxSample@@UAEJXZ PROC NEAR		; CXBoxSample::Initialize, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 226  :     D3DXVECTOR3 v;

  00009	8d 4d f4	 lea	 ecx, DWORD PTR _v$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0XGVECTOR3@@QAE@XZ	; XGVECTOR3::XGVECTOR3

; 227  : 
; 228  :     // Create a font
; 229  :     if( FAILED( m_Font.Create( m_pd3dDevice, "Font.xpr" ) ) )

  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08GPANDBJG@Font?4xpr?$AA@
  00016	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0001c	51		 push	 ecx
  0001d	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	81 c1 84 01 00
	00		 add	 ecx, 388		; 00000184H
  00026	e8 00 00 00 00	 call	 ?Create@CXBFont@@QAEJPAUD3DDevice@@PBD@Z ; CXBFont::Create
  0002b	85 c0		 test	 eax, eax
  0002d	7d 0a		 jge	 SHORT $L20803

; 230  :         return XBAPPERR_MEDIANOTFOUND;

  0002f	b8 03 00 00 82	 mov	 eax, -2113929213	; 82000003H
  00034	e9 2f 03 00 00	 jmp	 $L20800
$L20803:

; 231  : 
; 232  :     // Create the help
; 233  :     if( FAILED( m_Help.Create( m_pd3dDevice, "Gamepad.xpr" ) ) )

  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@OIBAJEID@Gamepad?4xpr?$AA@
  0003e	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00044	50		 push	 eax
  00045	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	81 c1 d4 01 00
	00		 add	 ecx, 468		; 000001d4H
  0004e	e8 00 00 00 00	 call	 ?Create@CXBHelp@@QAEJPAUD3DDevice@@PAD@Z ; CXBHelp::Create
  00053	85 c0		 test	 eax, eax
  00055	7d 0a		 jge	 SHORT $L20806

; 234  :         return XBAPPERR_MEDIANOTFOUND;

  00057	b8 03 00 00 82	 mov	 eax, -2113929213	; 82000003H
  0005c	e9 07 03 00 00	 jmp	 $L20800
$L20806:

; 235  : 
; 236  :     // Create our vertex shader
; 237  :     DWORD vdecl[] =
; 238  :     {
; 239  :         D3DVSD_STREAM(0),

  00061	c7 45 dc 00 00
	00 20		 mov	 DWORD PTR _vdecl$[ebp], 536870912 ; 20000000H

; 240  :         D3DVSD_REG(0, D3DVSDT_FLOAT3), // v0 = XYZ

  00068	c7 45 e0 00 00
	32 40		 mov	 DWORD PTR _vdecl$[ebp+4], 1077018624 ; 40320000H

; 241  :         D3DVSD_REG(1, D3DVSDT_FLOAT3), // v1 = normals

  0006f	c7 45 e4 01 00
	32 40		 mov	 DWORD PTR _vdecl$[ebp+8], 1077018625 ; 40320001H

; 242  :         D3DVSD_REG(2, D3DVSDT_FLOAT2), // v2 = TEX1

  00076	c7 45 e8 02 00
	22 40		 mov	 DWORD PTR _vdecl$[ebp+12], 1075970050 ; 40220002H

; 243  :         D3DVSD_END()
; 244  :     };

  0007d	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _vdecl$[ebp+16], -1

; 245  : 
; 246  :     if( FAILED( XBUtil_CreateVertexShader( m_pd3dDevice, "shaders\\vshader.xvu", vdecl, &m_dwShadowBufVS ) ) )

  00084	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	81 c1 bc 04 00
	00		 add	 ecx, 1212		; 000004bcH
  0008d	51		 push	 ecx
  0008e	8d 55 dc	 lea	 edx, DWORD PTR _vdecl$[ebp]
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@COPAPIPK@shaders?2vshader?4xvu?$AA@
  00097	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ?XBUtil_CreateVertexShader@@YGJPAUD3DDevice@@PBDPBKPAK@Z ; XBUtil_CreateVertexShader
  000a3	85 c0		 test	 eax, eax
  000a5	7d 0a		 jge	 SHORT $L20810

; 247  :         return E_FAIL;

  000a7	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  000ac	e9 b7 02 00 00	 jmp	 $L20800
$L20810:

; 248  : 
; 249  :     if( FAILED( XBUtil_CreatePixelShader( m_pd3dDevice, "shaders\\shadwbuf.xpu", &m_dwShadowBufPS ) ) )

  000b1	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000b4	81 c2 c0 04 00
	00		 add	 edx, 1216		; 000004c0H
  000ba	52		 push	 edx
  000bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@BKKMCHPI@shaders?2shadwbuf?4xpu?$AA@
  000c0	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  000c3	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000c6	51		 push	 ecx
  000c7	e8 00 00 00 00	 call	 ?XBUtil_CreatePixelShader@@YGJPAUD3DDevice@@PBDPAK@Z ; XBUtil_CreatePixelShader
  000cc	85 c0		 test	 eax, eax
  000ce	7d 0a		 jge	 SHORT $L20814

; 250  :         return E_FAIL;

  000d0	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  000d5	e9 8e 02 00 00	 jmp	 $L20800
$L20814:

; 251  : 
; 252  :     // Set projection transform
; 253  :     D3DXMatrixPerspectiveFovLH( &m_matProj, D3DX_PI/4, 640.0f/480.0f, 1.0f, 1000.0f );

  000da	68 00 00 7a 44	 push	 1148846080		; 447a0000H
  000df	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  000e4	68 ab aa aa 3f	 push	 1068149419		; 3faaaaabH
  000e9	68 db 0f 49 3f	 push	 1061752795		; 3f490fdbH
  000ee	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000f1	81 c2 10 02 00
	00		 add	 edx, 528		; 00000210H
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 _XGMatrixPerspectiveFovLH@20

; 254  :     m_pd3dDevice->SetTransform( D3DTS_PROJECTION, &m_matProj );

  000fd	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00100	05 10 02 00 00	 add	 eax, 528		; 00000210H
  00105	50		 push	 eax
  00106	6a 01		 push	 1
  00108	e8 00 00 00 00	 call	 ?SetTransform@D3DDevice@@SGJW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; D3DDevice::SetTransform

; 255  : 
; 256  :     // Create the resources
; 257  :     if( FAILED( m_xprResource.Create( m_pd3dDevice, "Resource.xpr", 
; 258  :                                       resource_NUM_RESOURCES, g_ResourceNames ) ) )

  0010d	68 00 00 00 00	 push	 OFFSET FLAT:?g_ResourceNames@@3PAUXBRESOURCE@@A ; g_ResourceNames
  00112	6a 03		 push	 3
  00114	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@EBCEPJIE@Resource?4xpr?$AA@
  00119	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011c	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0011f	52		 push	 edx
  00120	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	81 c1 f4 01 00
	00		 add	 ecx, 500		; 000001f4H
  00129	e8 00 00 00 00	 call	 ?Create@CXBPackedResource@@QAEJPAUD3DDevice@@PBDKPAUXBRESOURCE@@@Z ; CXBPackedResource::Create
  0012e	85 c0		 test	 eax, eax
  00130	7d 0a		 jge	 SHORT $L20819

; 259  :         return XBAPPERR_MEDIANOTFOUND;

  00132	b8 03 00 00 82	 mov	 eax, -2113929213	; 82000003H
  00137	e9 2c 02 00 00	 jmp	 $L20800
$L20819:

; 260  : 
; 261  :     // Set the resource globally so the CXModel can access textures
; 262  :     g_pModelResource = &m_xprResource;

  0013c	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  0013f	05 f4 01 00 00	 add	 eax, 500		; 000001f4H
  00144	a3 00 00 00 00	 mov	 DWORD PTR ?g_pModelResource@@3PAVCXBPackedResource@@A, eax ; g_pModelResource

; 263  : 
; 264  :     // Set base path to point to our data. All the _FNA commands use this
; 265  :     XPath_SetBasePath( _T("d:\\media\\") );

  00149	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1BE@EBNFNCCI@?$AAd?$AA?3?$AA?2?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?2?$AA?$AA@
  0014e	e8 00 00 00 00	 call	 _XPath_SetBasePath@4

; 266  : 
; 267  :     // Floor
; 268  :     m_FloorObj.m_Model = new CXModel;

  00153	6a 40		 push	 64			; 00000040H
  00155	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0015a	83 c4 04	 add	 esp, 4
  0015d	89 45 d8	 mov	 DWORD PTR $T21059[ebp], eax
  00160	83 7d d8 00	 cmp	 DWORD PTR $T21059[ebp], 0
  00164	74 0d		 je	 SHORT $L21060
  00166	8b 4d d8	 mov	 ecx, DWORD PTR $T21059[ebp]
  00169	e8 00 00 00 00	 call	 ??0CXModel@@QAE@XZ	; CXModel::CXModel
  0016e	89 45 c8	 mov	 DWORD PTR tv153[ebp], eax
  00171	eb 07		 jmp	 SHORT $L21061
$L21060:
  00173	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$L21061:
  0017a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	8b 55 c8	 mov	 edx, DWORD PTR tv153[ebp]
  00180	89 91 40 03 00
	00		 mov	 DWORD PTR [ecx+832], edx

; 269  :     m_FloorObj.m_Model->GridXZ(16, 16, 80.0f, 80.0f, FVF_XYZNORMTEX1, "Floor.bmp", 10.0f, 10.0f);

  00186	68 00 00 20 41	 push	 1092616192		; 41200000H
  0018b	68 00 00 20 41	 push	 1092616192		; 41200000H
  00190	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09IHLHDPGH@Floor?4bmp?$AA@
  00195	68 12 01 00 00	 push	 274			; 00000112H
  0019a	68 00 00 a0 42	 push	 1117782016		; 42a00000H
  0019f	68 00 00 a0 42	 push	 1117782016		; 42a00000H
  001a4	6a 10		 push	 16			; 00000010H
  001a6	6a 10		 push	 16			; 00000010H
  001a8	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  001ab	8b 88 40 03 00
	00		 mov	 ecx, DWORD PTR [eax+832]
  001b1	e8 00 00 00 00	 call	 ?GridXZ@CXModel@@QAEKKKMMKPADMM@Z ; CXModel::GridXZ

; 270  : 
; 271  :     // Object
; 272  :     CXBMesh *xbm = new CXBMesh;

  001b6	6a 18		 push	 24			; 00000018H
  001b8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001bd	83 c4 04	 add	 esp, 4
  001c0	89 45 d4	 mov	 DWORD PTR $T21062[ebp], eax
  001c3	83 7d d4 00	 cmp	 DWORD PTR $T21062[ebp], 0
  001c7	74 0d		 je	 SHORT $L21063
  001c9	8b 4d d4	 mov	 ecx, DWORD PTR $T21062[ebp]
  001cc	e8 00 00 00 00	 call	 ??0CXBMesh@@QAE@XZ	; CXBMesh::CXBMesh
  001d1	89 45 c4	 mov	 DWORD PTR tv171[ebp], eax
  001d4	eb 07		 jmp	 SHORT $L21064
$L21063:
  001d6	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv171[ebp], 0
$L21064:
  001dd	8b 4d c4	 mov	 ecx, DWORD PTR tv171[ebp]
  001e0	89 4d f0	 mov	 DWORD PTR _xbm$[ebp], ecx

; 273  :     xbm->Create(g_pd3dDevice, "Models\\Airplane.xbg", &m_xprResource);

  001e3	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  001e6	81 c2 f4 01 00
	00		 add	 edx, 500		; 000001f4H
  001ec	52		 push	 edx
  001ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@KFNACOCE@Models?2Airplane?4xbg?$AA@
  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pd3dDevice@@3PAUD3DDevice@@A ; g_pd3dDevice
  001f7	50		 push	 eax
  001f8	8b 4d f0	 mov	 ecx, DWORD PTR _xbm$[ebp]
  001fb	e8 00 00 00 00	 call	 ?Create@CXBMesh@@QAEJPAUD3DDevice@@PADPAVCXBPackedResource@@@Z ; CXBMesh::Create

; 274  :     m_Obj.SetXBMesh(xbm);

  00200	8b 4d f0	 mov	 ecx, DWORD PTR _xbm$[ebp]
  00203	51		 push	 ecx
  00204	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00207	81 c1 b0 03 00
	00		 add	 ecx, 944		; 000003b0H
  0020d	e8 00 00 00 00	 call	 ?SetXBMesh@CXObject@@QAEXPAVCXBMesh@@@Z ; CXObject::SetXBMesh

; 275  :     m_Obj.SetPosition(0.0f, 4.0f, 0.0f);

  00212	6a 00		 push	 0
  00214	68 00 00 80 40	 push	 1082130432		; 40800000H
  00219	6a 00		 push	 0
  0021b	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0021e	81 c1 b0 03 00
	00		 add	 ecx, 944		; 000003b0H
  00224	e8 00 00 00 00	 call	 ?SetPosition@CXObject@@QAEXMMM@Z ; CXObject::SetPosition

; 276  :     m_Obj.SetRotation(-1.5708f, 0.0f, 0.0f);

  00229	6a 00		 push	 0
  0022b	6a 00		 push	 0
  0022d	68 f9 0f c9 bf	 push	 -1077342215		; bfc90ff9H
  00232	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00235	81 c1 b0 03 00
	00		 add	 ecx, 944		; 000003b0H
  0023b	e8 00 00 00 00	 call	 ?SetRotation@CXObject@@QAEXMMM@Z ; CXObject::SetRotation

; 277  :     m_fObjRadius = m_Obj.GetRadius();

  00240	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00243	81 c1 b0 03 00
	00		 add	 ecx, 944		; 000003b0H
  00249	e8 00 00 00 00	 call	 ?GetRadius@CXObject@@QAEMXZ ; CXObject::GetRadius
  0024e	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00251	d9 9a 90 04 00
	00		 fstp	 DWORD PTR [edx+1168]

; 278  : 
; 279  :     // Light
; 280  :     m_LightObj.m_Model = new CXModel;

  00257	6a 40		 push	 64			; 00000040H
  00259	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0025e	83 c4 04	 add	 esp, 4
  00261	89 45 d0	 mov	 DWORD PTR $T21065[ebp], eax
  00264	83 7d d0 00	 cmp	 DWORD PTR $T21065[ebp], 0
  00268	74 0d		 je	 SHORT $L21066
  0026a	8b 4d d0	 mov	 ecx, DWORD PTR $T21065[ebp]
  0026d	e8 00 00 00 00	 call	 ??0CXModel@@QAE@XZ	; CXModel::CXModel
  00272	89 45 c0	 mov	 DWORD PTR tv201[ebp], eax
  00275	eb 07		 jmp	 SHORT $L21067
$L21066:
  00277	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv201[ebp], 0
$L21067:
  0027e	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00281	8b 4d c0	 mov	 ecx, DWORD PTR tv201[ebp]
  00284	89 88 20 04 00
	00		 mov	 DWORD PTR [eax+1056], ecx

; 281  :     m_LightObj.m_Model->Cylinder( 0.2f, 0xc0ffffff, 0.5f, 0x00ffffff, 0.6f, 16, FVF_XYZDIFF, NULL, 1.0f );

  0028a	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  0028f	6a 00		 push	 0
  00291	6a 42		 push	 66			; 00000042H
  00293	6a 10		 push	 16			; 00000010H
  00295	68 9a 99 19 3f	 push	 1058642330		; 3f19999aH
  0029a	68 ff ff ff 00	 push	 16777215		; 00ffffffH
  0029f	68 00 00 00 3f	 push	 1056964608		; 3f000000H
  002a4	68 ff ff ff c0	 push	 -1056964609		; c0ffffffH
  002a9	68 cd cc 4c 3e	 push	 1045220557		; 3e4ccccdH
  002ae	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  002b1	8b 8a 20 04 00
	00		 mov	 ecx, DWORD PTR [edx+1056]
  002b7	e8 00 00 00 00	 call	 ?Cylinder@CXModel@@QAEKMKMKMKKPADM@Z ; CXModel::Cylinder

; 282  :     m_LightObj.SetPosition( 10.0f, 10.0f, 0.0f );

  002bc	6a 00		 push	 0
  002be	68 00 00 20 41	 push	 1092616192		; 41200000H
  002c3	68 00 00 20 41	 push	 1092616192		; 41200000H
  002c8	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  002cb	81 c1 20 04 00
	00		 add	 ecx, 1056		; 00000420H
  002d1	e8 00 00 00 00	 call	 ?SetPosition@CXObject@@QAEXMMM@Z ; CXObject::SetPosition

; 283  : 
; 284  :     // Create shadow buffer
; 285  :     m_pd3dDevice->CreateTexture( SHADOWBUFFERWIDTH, SHADOWBUFFERHEIGHT, 1, 0, 
; 286  :                                  D3DFMT_LIN_D16, 0, &m_pShadowBufferDepth );

  002d6	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  002d9	05 98 04 00 00	 add	 eax, 1176		; 00000498H
  002de	50		 push	 eax
  002df	6a 00		 push	 0
  002e1	6a 30		 push	 48			; 00000030H
  002e3	6a 00		 push	 0
  002e5	6a 01		 push	 1
  002e7	68 00 02 00 00	 push	 512			; 00000200H
  002ec	68 00 02 00 00	 push	 512			; 00000200H
  002f1	e8 00 00 00 00	 call	 ?CreateTexture@D3DDevice@@SGJIIIKW4_D3DFORMAT@@KPAPAUD3DTexture@@@Z ; D3DDevice::CreateTexture

; 287  :     m_dwShadowBufferType = SHADOWBUFFERTYPE_D16;

  002f6	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f9	c7 81 c4 04 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1220], 0

; 288  : 
; 289  :     // Setup dummy color buffer (bad things will happen if you write to it).
; 290  :     ZeroMemory( &m_FakeTarget, sizeof(m_FakeTarget) );

  00303	6a 18		 push	 24			; 00000018H
  00305	6a 00		 push	 0
  00307	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0030a	81 c2 a4 04 00
	00		 add	 edx, 1188		; 000004a4H
  00310	52		 push	 edx
  00311	e8 00 00 00 00	 call	 _memset
  00316	83 c4 0c	 add	 esp, 12			; 0000000cH

; 291  :     XGSetSurfaceHeader( SHADOWBUFFERWIDTH, SHADOWBUFFERHEIGHT, D3DFMT_LIN_R5G6B5,
; 292  :                         &m_FakeTarget, 0, 0 );

  00319	6a 00		 push	 0
  0031b	6a 00		 push	 0
  0031d	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00320	05 a4 04 00 00	 add	 eax, 1188		; 000004a4H
  00325	50		 push	 eax
  00326	6a 11		 push	 17			; 00000011H
  00328	68 00 02 00 00	 push	 512			; 00000200H
  0032d	68 00 02 00 00	 push	 512			; 00000200H
  00332	e8 00 00 00 00	 call	 _XGSetSurfaceHeader@24

; 293  : 
; 294  :     m_pShadowBufferTarget = &m_FakeTarget;

  00337	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0033a	81 c1 a4 04 00
	00		 add	 ecx, 1188		; 000004a4H
  00340	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00343	89 8a 94 04 00
	00		 mov	 DWORD PTR [edx+1172], ecx

; 295  : 
; 296  :     // Get original color and z-buffer.
; 297  :     m_pd3dDevice->GetDepthStencilSurface( &m_pZBuffer );

  00349	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  0034c	05 a0 04 00 00	 add	 eax, 1184		; 000004a0H
  00351	50		 push	 eax
  00352	e8 00 00 00 00	 call	 ?GetDepthStencilSurface@D3DDevice@@SGJPAPAUD3DSurface@@@Z ; D3DDevice::GetDepthStencilSurface

; 298  :     m_pd3dDevice->GetRenderTarget( &m_pRenderTarget );

  00357	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0035a	81 c1 9c 04 00
	00		 add	 ecx, 1180		; 0000049cH
  00360	51		 push	 ecx
  00361	e8 00 00 00 00	 call	 ?GetRenderTarget@D3DDevice@@SGJPAPAUD3DSurface@@@Z ; D3DDevice::GetRenderTarget

; 299  : 
; 300  :     return S_OK;

  00366	33 c0		 xor	 eax, eax
$L20800:

; 301  : }

  00368	8b e5		 mov	 esp, ebp
  0036a	5d		 pop	 ebp
  0036b	c3		 ret	 0
?Initialize@CXBoxSample@@UAEJXZ ENDP			; CXBoxSample::Initialize
_TEXT	ENDS
EXTRN	_D3DDevice_CreateTexture@28:NEAR
; Function compile flags: /Odt
; File c:\xbox\public\xdk\inc\d3d8.h
;	COMDAT ?CreateTexture@D3DDevice@@SGJIIIKW4_D3DFORMAT@@KPAPAUD3DTexture@@@Z
_TEXT	SEGMENT
_Width$ = 8
_Height$ = 12
_Levels$ = 16
_Usage$ = 20
_Format$ = 24
_Pool$ = 28
_ppTexture$ = 32
?CreateTexture@D3DDevice@@SGJIIIKW4_D3DFORMAT@@KPAPAUD3DTexture@@@Z PROC NEAR ; D3DDevice::CreateTexture, COMDAT

; 2030 : D3DMINLINE HRESULT WINAPI D3DDevice::CreateTexture(UINT Width, UINT Height, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, D3DTexture **ppTexture) { return D3DDevice_CreateTexture(Width, Height, Levels, Usage, Format, Pool, ppTexture); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 20	 mov	 eax, DWORD PTR _ppTexture$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 1c	 mov	 ecx, DWORD PTR _Pool$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 18	 mov	 edx, DWORD PTR _Format$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 14	 mov	 eax, DWORD PTR _Usage$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR _Levels$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR _Height$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR _Width$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _D3DDevice_CreateTexture@28
  00024	5d		 pop	 ebp
  00025	c2 1c 00	 ret	 28			; 0000001cH
?CreateTexture@D3DDevice@@SGJIIIKW4_D3DFORMAT@@KPAPAUD3DTexture@@@Z ENDP ; D3DDevice::CreateTexture
_TEXT	ENDS
EXTRN	_D3DDevice_GetRenderTarget@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetRenderTarget@D3DDevice@@SGJPAPAUD3DSurface@@@Z
_TEXT	SEGMENT
_ppRenderTarget$ = 8
?GetRenderTarget@D3DDevice@@SGJPAPAUD3DSurface@@@Z PROC NEAR ; D3DDevice::GetRenderTarget, COMDAT

; 2043 : D3DMINLINE HRESULT WINAPI D3DDevice::GetRenderTarget(D3DSurface **ppRenderTarget) { D3DDevice_GetRenderTarget(ppRenderTarget); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _ppRenderTarget$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _D3DDevice_GetRenderTarget@4
  0000c	33 c0		 xor	 eax, eax
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetRenderTarget@D3DDevice@@SGJPAPAUD3DSurface@@@Z ENDP	; D3DDevice::GetRenderTarget
_TEXT	ENDS
EXTRN	_D3DDevice_GetDepthStencilSurface@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDepthStencilSurface@D3DDevice@@SGJPAPAUD3DSurface@@@Z
_TEXT	SEGMENT
_ppZStencilSurface$ = 8
?GetDepthStencilSurface@D3DDevice@@SGJPAPAUD3DSurface@@@Z PROC NEAR ; D3DDevice::GetDepthStencilSurface, COMDAT

; 2044 : D3DMINLINE HRESULT WINAPI D3DDevice::GetDepthStencilSurface(D3DSurface **ppZStencilSurface) { return D3DDevice_GetDepthStencilSurface(ppZStencilSurface); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _ppZStencilSurface$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _D3DDevice_GetDepthStencilSurface@4
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?GetDepthStencilSurface@D3DDevice@@SGJPAPAUD3DSurface@@@Z ENDP ; D3DDevice::GetDepthStencilSurface
_TEXT	ENDS
EXTRN	_D3DDevice_SetTransform@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetTransform@D3DDevice@@SGJW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_State$ = 8
_pMatrix$ = 12
?SetTransform@D3DDevice@@SGJW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z PROC NEAR ; D3DDevice::SetTransform, COMDAT

; 2048 : D3DMINLINE HRESULT WINAPI D3DDevice::SetTransform(D3DTRANSFORMSTATETYPE State, CONST D3DMATRIX *pMatrix) { D3DDIRTY_TRANSFORM(State); D3DDevice_SetTransform(State, pMatrix); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR _pMatrix$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _State$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _D3DDevice_SetTransform@8
  00010	33 c0		 xor	 eax, eax
  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?SetTransform@D3DDevice@@SGJW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ENDP ; D3DDevice::SetTransform
; Function compile flags: /Odt
; File c:\xbox\private\atg\samples\common\include\xobj.h
_TEXT	ENDS
;	COMDAT ?SetPosition@CXObject@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4
_x$ = 8
_y$ = 12
_z$ = 16
?SetPosition@CXObject@@QAEXMMM@Z PROC NEAR		; CXObject::SetPosition, COMDAT
; _this$ = ecx

; 51   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   : 		m_vPosition.x = x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 53   : 		m_vPosition.y = y;

  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00016	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 54   : 		m_vPosition.z = z;

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	8b 55 10	 mov	 edx, DWORD PTR _z$[ebp]
  0001f	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 55   : 	};

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CXObject@@QAEXMMM@Z ENDP			; CXObject::SetPosition
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetRotation@CXObject@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4
_x$ = 8
_y$ = 12
_z$ = 16
?SetRotation@CXObject@@QAEXMMM@Z PROC NEAR		; CXObject::SetRotation, COMDAT
; _this$ = ecx

; 58   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 		m_vRotation.x = x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0000d	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 60   : 		m_vRotation.y = y;

  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00016	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 61   : 		m_vRotation.z = z;

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	8b 55 10	 mov	 edx, DWORD PTR _z$[ebp]
  0001f	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 62   : 	};

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
?SetRotation@CXObject@@QAEXMMM@Z ENDP			; CXObject::SetRotation
_TEXT	ENDS
PUBLIC	??DXGVECTOR3@@QBE?AU0@M@Z			; XGVECTOR3::operator*
PUBLIC	?XGVec3Length@@YGMPBUXGVECTOR3@@@Z		; XGVec3Length
PUBLIC	?XGVec3Dot@@YGMPBUXGVECTOR3@@0@Z		; XGVec3Dot
PUBLIC	?XGVec3Cross@@YGPAUXGVECTOR3@@PAU1@PBU1@1@Z	; XGVec3Cross
PUBLIC	?XGMatrixIdentity@@YGPAUXGMATRIX@@PAU1@@Z	; XGMatrixIdentity
PUBLIC	__real@3fc8f5c3
PUBLIC	__real@3f000000
PUBLIC	__real@3dcccccd
PUBLIC	__real@41000000
PUBLIC	__real@bf7d70a4
PUBLIC	__real@00000000
PUBLIC	__real@3f7d70a4
PUBLIC	__real@437f0000
PUBLIC	__real@42c80000
PUBLIC	?Release@D3DResource@@QAGKXZ			; D3DResource::Release
PUBLIC	_asinf@4
PUBLIC	??YXGVECTOR3@@QAEAAU0@ABU0@@Z			; XGVECTOR3::operator+=
PUBLIC	??ZXGVECTOR3@@QAEAAU0@ABU0@@Z			; XGVECTOR3::operator-=
PUBLIC	??GXGVECTOR3@@QBE?AU0@ABU0@@Z			; XGVECTOR3::operator-
EXTRN	_XGVec3Normalize@8:NEAR
EXTRN	_XGVec3TransformCoord@12:NEAR
EXTRN	_XGVec4Transform@12:NEAR
EXTRN	_XGMatrixMultiply@12:NEAR
EXTRN	_XGMatrixInverse@12:NEAR
EXTRN	_XGMatrixRotationAxis@12:NEAR
EXTRN	_XGMatrixLookAtLH@16:NEAR
;	COMDAT __real@3fc8f5c3
; File c:\xbox\private\atg\samples\graphics\shadowbuffer\shadowbuffer.cpp
CONST	SEGMENT
__real@3fc8f5c3 DD 03fc8f5c3r			; 1.57
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@bf7d70a4
CONST	SEGMENT
__real@bf7d70a4 DD 0bf7d70a4r			; -0.99
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?FrameMove@CXBoxSample@@UAEJXZ
_TEXT	SEGMENT
_vT$20884 = -420
_i$20880 = -404
_matInvTexProj$ = -400
_fAngle$ = -324
_fFar$ = -320
_fNear$ = -316
_fDist$ = -312
$T21095 = -308
_fRadius$ = -296
$T21092 = -292
$T21093 = -280
$T21094 = -268
$T21089 = -256
$T21090 = -244
$T21091 = -232
_fOut$ = -220
tv585 = -216
_fIn$ = -212
tv583 = -208
_axis$20862 = -204
_dot$ = -192
_vView$ = -188
_matRotate$ = -176
_vUp$ = -108
_vAt$ = -96
tv146 = -84
_mat$ = -80
_up$ = -16
_this$ = -4
?FrameMove@CXBoxSample@@UAEJXZ PROC NEAR		; CXBoxSample::FrameMove, COMDAT
; _this$ = ecx

; 312  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b0 01 00
	00		 sub	 esp, 432		; 000001b0H
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 313  :     D3DXVECTOR3 up(0.0f, 1.0f, 0.0f);

  0001f	6a 00		 push	 0
  00021	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  00026	6a 00		 push	 0
  00028	8d 4d f0	 lea	 ecx, DWORD PTR _up$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0XGVECTOR3@@QAE@MMM@Z	; XGVECTOR3::XGVECTOR3

; 314  :     D3DXMATRIX  mat;

  00030	8d 4d b0	 lea	 ecx, DWORD PTR _mat$[ebp]
  00033	e8 00 00 00 00	 call	 ??0XGMATRIX@@QAE@XZ	; XGMATRIX::XGMATRIX

; 315  : 
; 316  :     // Toggle help
; 317  :     if( m_DefaultGamepad.wPressedButtons & XINPUT_GAMEPAD_BACK )

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	0f b7 88 f0 00
	00 00		 movzx	 ecx, WORD PTR [eax+240]
  00042	83 e1 20	 and	 ecx, 32			; 00000020H
  00045	85 c9		 test	 ecx, ecx
  00047	74 18		 je	 SHORT $L20836

; 318  :         m_bDrawHelp = !m_bDrawHelp;

  00049	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004c	33 c0		 xor	 eax, eax
  0004e	83 ba f0 01 00
	00 00		 cmp	 DWORD PTR [edx+496], 0
  00055	0f 94 c0	 sete	 al
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	89 81 f0 01 00
	00		 mov	 DWORD PTR [ecx+496], eax
$L20836:

; 319  : 
; 320  :     // Toggle frustum
; 321  :     if( m_DefaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_BLACK] )

  00061	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00064	83 ba 04 01 00
	00 00		 cmp	 DWORD PTR [edx+260], 0
  0006b	74 18		 je	 SHORT $L20837

; 322  :         m_bDrawFrustum = !m_bDrawFrustum;

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	33 c9		 xor	 ecx, ecx
  00072	83 b8 d4 04 00
	00 00		 cmp	 DWORD PTR [eax+1236], 0
  00079	0f 94 c1	 sete	 cl
  0007c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007f	89 8a d4 04 00
	00		 mov	 DWORD PTR [edx+1236], ecx
$L20837:

; 323  : 
; 324  :     // Toggle object rotation
; 325  :     if( m_DefaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_A] )

  00085	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00088	83 b8 f4 00 00
	00 00		 cmp	 DWORD PTR [eax+244], 0
  0008f	74 18		 je	 SHORT $L20838

; 326  :         m_bRotateFlag = !m_bRotateFlag;

  00091	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	33 d2		 xor	 edx, edx
  00096	83 b9 d0 04 00
	00 00		 cmp	 DWORD PTR [ecx+1232], 0
  0009d	0f 94 c2	 sete	 dl
  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	89 90 d0 04 00
	00		 mov	 DWORD PTR [eax+1232], edx
$L20838:

; 327  : 
; 328  :     // Rotate the object
; 329  :     if( m_bRotateFlag )

  000a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	83 b9 d0 04 00
	00 00		 cmp	 DWORD PTR [ecx+1232], 0
  000b3	74 1e		 je	 SHORT $L20839

; 330  :         m_Obj.m_vRotation.y += 1.57f*m_fElapsedAppTime;

  000b5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b8	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fc8f5c3
  000be	d8 4a 64	 fmul	 DWORD PTR [edx+100]
  000c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	d8 80 c8 03 00
	00		 fadd	 DWORD PTR [eax+968]
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	d9 99 c8 03 00
	00		 fstp	 DWORD PTR [ecx+968]
$L20839:

; 331  :     m_Obj.m_vRotation.x = 0.0f;

  000d3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d6	c7 82 c4 03 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+964], 0

; 332  : 
; 333  :     // Check for buffer change
; 334  :     if( m_DefaultGamepad.bPressedAnalogButtons[XINPUT_GAMEPAD_WHITE] )

  000e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e3	83 b8 08 01 00
	00 00		 cmp	 DWORD PTR [eax+264], 0
  000ea	0f 84 ee 00 00
	00		 je	 $L20840

; 335  :     {
; 336  :         // Release existing depth buffer
; 337  :         m_pShadowBufferDepth->Release();

  000f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f3	8b 91 98 04 00
	00		 mov	 edx, DWORD PTR [ecx+1176]
  000f9	52		 push	 edx
  000fa	e8 00 00 00 00	 call	 ?Release@D3DResource@@QAGKXZ ; D3DResource::Release

; 338  : 
; 339  :         switch( m_dwShadowBufferType )
; 340  :         {

  000ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00102	8b 88 c4 04 00
	00		 mov	 ecx, DWORD PTR [eax+1220]
  00108	89 4d ac	 mov	 DWORD PTR tv146[ebp], ecx
  0010b	83 7d ac 03	 cmp	 DWORD PTR tv146[ebp], 3
  0010f	0f 87 c9 00 00
	00		 ja	 $L20840
  00115	8b 55 ac	 mov	 edx, DWORD PTR tv146[ebp]
  00118	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L21116[edx*4]
$L20845:

; 341  :             case SHADOWBUFFERTYPE_D16:
; 342  :                 m_pd3dDevice->CreateTexture( SHADOWBUFFERWIDTH, SHADOWBUFFERHEIGHT, 1, 0, 
; 343  :                                              D3DFMT_LIN_D24S8, 0, &m_pShadowBufferDepth );

  0011f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00122	05 98 04 00 00	 add	 eax, 1176		; 00000498H
  00127	50		 push	 eax
  00128	6a 00		 push	 0
  0012a	6a 2e		 push	 46			; 0000002eH
  0012c	6a 00		 push	 0
  0012e	6a 01		 push	 1
  00130	68 00 02 00 00	 push	 512			; 00000200H
  00135	68 00 02 00 00	 push	 512			; 00000200H
  0013a	e8 00 00 00 00	 call	 ?CreateTexture@D3DDevice@@SGJIIIKW4_D3DFORMAT@@KPAPAUD3DTexture@@@Z ; D3DDevice::CreateTexture

; 344  :                 m_dwShadowBufferType = SHADOWBUFFERTYPE_D24S8;

  0013f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	c7 81 c4 04 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+1220], 1

; 345  :                 break;

  0014c	e9 8d 00 00 00	 jmp	 $L20840
$L20846:

; 346  :             case SHADOWBUFFERTYPE_D24S8:
; 347  :                 m_pd3dDevice->CreateTexture( SHADOWBUFFERWIDTH, SHADOWBUFFERHEIGHT, 1, 0, 
; 348  :                                              D3DFMT_LIN_F16, 0, &m_pShadowBufferDepth );

  00151	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00154	81 c2 98 04 00
	00		 add	 edx, 1176		; 00000498H
  0015a	52		 push	 edx
  0015b	6a 00		 push	 0
  0015d	6a 31		 push	 49			; 00000031H
  0015f	6a 00		 push	 0
  00161	6a 01		 push	 1
  00163	68 00 02 00 00	 push	 512			; 00000200H
  00168	68 00 02 00 00	 push	 512			; 00000200H
  0016d	e8 00 00 00 00	 call	 ?CreateTexture@D3DDevice@@SGJIIIKW4_D3DFORMAT@@KPAPAUD3DTexture@@@Z ; D3DDevice::CreateTexture

; 349  :                 m_dwShadowBufferType = SHADOWBUFFERTYPE_F16;

  00172	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00175	c7 80 c4 04 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+1220], 2

; 350  :                 break;

  0017f	eb 5d		 jmp	 SHORT $L20840
$L20847:

; 351  :             case SHADOWBUFFERTYPE_F16:
; 352  :                 m_pd3dDevice->CreateTexture( SHADOWBUFFERWIDTH, SHADOWBUFFERHEIGHT, 1, 0, 
; 353  :                                              D3DFMT_LIN_F24S8, 0, &m_pShadowBufferDepth );

  00181	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00184	81 c1 98 04 00
	00		 add	 ecx, 1176		; 00000498H
  0018a	51		 push	 ecx
  0018b	6a 00		 push	 0
  0018d	6a 2f		 push	 47			; 0000002fH
  0018f	6a 00		 push	 0
  00191	6a 01		 push	 1
  00193	68 00 02 00 00	 push	 512			; 00000200H
  00198	68 00 02 00 00	 push	 512			; 00000200H
  0019d	e8 00 00 00 00	 call	 ?CreateTexture@D3DDevice@@SGJIIIKW4_D3DFORMAT@@KPAPAUD3DTexture@@@Z ; D3DDevice::CreateTexture

; 354  :                 m_dwShadowBufferType = SHADOWBUFFERTYPE_F24S8;

  001a2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a5	c7 82 c4 04 00
	00 03 00 00 00	 mov	 DWORD PTR [edx+1220], 3

; 355  :                 break;

  001af	eb 2d		 jmp	 SHORT $L20840
$L20848:

; 356  :             case SHADOWBUFFERTYPE_F24S8:
; 357  :                 m_pd3dDevice->CreateTexture( SHADOWBUFFERWIDTH, SHADOWBUFFERHEIGHT, 1, 0, 
; 358  :                                              D3DFMT_LIN_D16, 0, &m_pShadowBufferDepth );

  001b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001b4	05 98 04 00 00	 add	 eax, 1176		; 00000498H
  001b9	50		 push	 eax
  001ba	6a 00		 push	 0
  001bc	6a 30		 push	 48			; 00000030H
  001be	6a 00		 push	 0
  001c0	6a 01		 push	 1
  001c2	68 00 02 00 00	 push	 512			; 00000200H
  001c7	68 00 02 00 00	 push	 512			; 00000200H
  001cc	e8 00 00 00 00	 call	 ?CreateTexture@D3DDevice@@SGJIIIKW4_D3DFORMAT@@KPAPAUD3DTexture@@@Z ; D3DDevice::CreateTexture

; 359  :                 m_dwShadowBufferType = SHADOWBUFFERTYPE_D16;

  001d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d4	c7 81 c4 04 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1220], 0
$L20840:

; 360  :                 break;
; 361  :         }
; 362  :     }
; 363  : 
; 364  :     // Adjust z offset
; 365  :     if( m_DefaultGamepad.wPressedButtons & XINPUT_GAMEPAD_DPAD_UP )

  001de	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001e1	0f b7 82 f0 00
	00 00		 movzx	 eax, WORD PTR [edx+240]
  001e8	83 e0 01	 and	 eax, 1
  001eb	85 c0		 test	 eax, eax
  001ed	74 18		 je	 SHORT $L20849

; 366  :         m_fZOffset += 0.5f;

  001ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f2	d9 81 c8 04 00
	00		 fld	 DWORD PTR [ecx+1224]
  001f8	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3f000000
  001fe	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00201	d9 9a c8 04 00
	00		 fstp	 DWORD PTR [edx+1224]
$L20849:

; 367  :     if( m_DefaultGamepad.wPressedButtons & XINPUT_GAMEPAD_DPAD_DOWN )

  00207	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0020a	0f b7 88 f0 00
	00 00		 movzx	 ecx, WORD PTR [eax+240]
  00211	83 e1 02	 and	 ecx, 2
  00214	85 c9		 test	 ecx, ecx
  00216	74 18		 je	 SHORT $L20850

; 368  :         m_fZOffset -= 0.5f;

  00218	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0021b	d9 82 c8 04 00
	00		 fld	 DWORD PTR [edx+1224]
  00221	d8 25 00 00 00
	00		 fsub	 DWORD PTR __real@3f000000
  00227	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0022a	d9 98 c8 04 00
	00		 fstp	 DWORD PTR [eax+1224]
$L20850:

; 369  : 
; 370  :     // Adjust z offset slope scale
; 371  :     if( m_DefaultGamepad.wPressedButtons & XINPUT_GAMEPAD_DPAD_LEFT )

  00230	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00233	0f b7 91 f0 00
	00 00		 movzx	 edx, WORD PTR [ecx+240]
  0023a	83 e2 04	 and	 edx, 4
  0023d	85 d2		 test	 edx, edx
  0023f	74 18		 je	 SHORT $L20851

; 372  :         m_fZSlopeScale += 0.1f;

  00241	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00244	d9 80 cc 04 00
	00		 fld	 DWORD PTR [eax+1228]
  0024a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3dcccccd
  00250	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00253	d9 99 cc 04 00
	00		 fstp	 DWORD PTR [ecx+1228]
$L20851:

; 373  :     if( m_DefaultGamepad.wPressedButtons & XINPUT_GAMEPAD_DPAD_RIGHT )

  00259	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0025c	0f b7 82 f0 00
	00 00		 movzx	 eax, WORD PTR [edx+240]
  00263	83 e0 08	 and	 eax, 8
  00266	85 c0		 test	 eax, eax
  00268	74 18		 je	 SHORT $L20852

; 374  :         m_fZSlopeScale -= 0.1f;

  0026a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0026d	d9 81 cc 04 00
	00		 fld	 DWORD PTR [ecx+1228]
  00273	d8 25 00 00 00
	00		 fsub	 DWORD PTR __real@3dcccccd
  00279	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0027c	d9 9a cc 04 00
	00		 fstp	 DWORD PTR [edx+1228]
$L20852:

; 375  : 
; 376  :     // Adjust light position
; 377  :     m_LightObj.m_vPosition.x += m_DefaultGamepad.fX1*m_fElapsedTime*8.0f;

  00282	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00285	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00288	d9 80 bc 00 00
	00		 fld	 DWORD PTR [eax+188]
  0028e	d8 49 5c	 fmul	 DWORD PTR [ecx+92]
  00291	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@41000000
  00297	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0029a	d8 82 28 04 00
	00		 fadd	 DWORD PTR [edx+1064]
  002a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a3	d9 98 28 04 00
	00		 fstp	 DWORD PTR [eax+1064]

; 378  :     m_LightObj.m_vPosition.z += m_DefaultGamepad.fY1*m_fElapsedTime*8.0f;

  002a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ac	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002af	d9 81 c0 00 00
	00		 fld	 DWORD PTR [ecx+192]
  002b5	d8 4a 5c	 fmul	 DWORD PTR [edx+92]
  002b8	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@41000000
  002be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002c1	d8 80 30 04 00
	00		 fadd	 DWORD PTR [eax+1072]
  002c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ca	d9 99 30 04 00
	00		 fstp	 DWORD PTR [ecx+1072]

; 379  : 
; 380  :     // Adjust camera position
; 381  :     D3DXVECTOR3 vAt(0.0f, 4.0f, 0.0f);

  002d0	6a 00		 push	 0
  002d2	68 00 00 80 40	 push	 1082130432		; 40800000H
  002d7	6a 00		 push	 0
  002d9	8d 4d a0	 lea	 ecx, DWORD PTR _vAt$[ebp]
  002dc	e8 00 00 00 00	 call	 ??0XGVECTOR3@@QAE@MMM@Z	; XGVECTOR3::XGVECTOR3

; 382  :     D3DXVECTOR3 vUp(0.0f, 1.0f, 0.0f);

  002e1	6a 00		 push	 0
  002e3	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  002e8	6a 00		 push	 0
  002ea	8d 4d 94	 lea	 ecx, DWORD PTR _vUp$[ebp]
  002ed	e8 00 00 00 00	 call	 ??0XGVECTOR3@@QAE@MMM@Z	; XGVECTOR3::XGVECTOR3

; 383  : 
; 384  :     // Rotate camera around z axis.
; 385  :     D3DXMATRIX matRotate;

  002f2	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _matRotate$[ebp]
  002f8	e8 00 00 00 00	 call	 ??0XGMATRIX@@QAE@XZ	; XGMATRIX::XGMATRIX

; 386  :     D3DXMatrixRotationAxis( &matRotate, &vUp, m_DefaultGamepad.fX2*m_fElapsedTime );

  002fd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00300	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00303	d9 82 c4 00 00
	00		 fld	 DWORD PTR [edx+196]
  00309	d8 48 5c	 fmul	 DWORD PTR [eax+92]
  0030c	51		 push	 ecx
  0030d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00310	8d 4d 94	 lea	 ecx, DWORD PTR _vUp$[ebp]
  00313	51		 push	 ecx
  00314	8d 95 50 ff ff
	ff		 lea	 edx, DWORD PTR _matRotate$[ebp]
  0031a	52		 push	 edx
  0031b	e8 00 00 00 00	 call	 _XGMatrixRotationAxis@12

; 387  :     D3DXVec3TransformCoord( &m_vCameraPos, &m_vCameraPos, &matRotate );

  00320	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _matRotate$[ebp]
  00326	50		 push	 eax
  00327	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0032a	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  00330	51		 push	 ecx
  00331	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00334	81 c2 90 02 00
	00		 add	 edx, 656		; 00000290H
  0033a	52		 push	 edx
  0033b	e8 00 00 00 00	 call	 _XGVec3TransformCoord@12

; 388  : 
; 389  :     // Rotate camera points around side axis.
; 390  :     D3DXVECTOR3 vView = (m_vCameraPos - vAt);

  00340	8d 45 a0	 lea	 eax, DWORD PTR _vAt$[ebp]
  00343	50		 push	 eax
  00344	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _vView$[ebp]
  0034a	51		 push	 ecx
  0034b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0034e	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  00354	e8 00 00 00 00	 call	 ??GXGVECTOR3@@QBE?AU0@ABU0@@Z ; XGVECTOR3::operator-

; 391  :     D3DXVec3Normalize(&vView, &vView);

  00359	8d 95 44 ff ff
	ff		 lea	 edx, DWORD PTR _vView$[ebp]
  0035f	52		 push	 edx
  00360	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _vView$[ebp]
  00366	50		 push	 eax
  00367	e8 00 00 00 00	 call	 _XGVec3Normalize@8

; 392  : 
; 393  :     // Place limits so we dont go over the top or under the bottom.
; 394  :     FLOAT dot = D3DXVec3Dot(&vView, &vUp);

  0036c	8d 4d 94	 lea	 ecx, DWORD PTR _vUp$[ebp]
  0036f	51		 push	 ecx
  00370	8d 95 44 ff ff
	ff		 lea	 edx, DWORD PTR _vView$[ebp]
  00376	52		 push	 edx
  00377	e8 00 00 00 00	 call	 ?XGVec3Dot@@YGMPBUXGVECTOR3@@0@Z ; XGVec3Dot
  0037c	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR _dot$[ebp]

; 395  :     if( (dot > -0.99f || m_DefaultGamepad.fY2 < 0.0f) && (dot < 0.99f || m_DefaultGamepad.fY2 > 0.0f) )

  00382	d9 85 40 ff ff
	ff		 fld	 DWORD PTR _dot$[ebp]
  00388	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@bf7d70a4
  0038e	df e0		 fnstsw	 ax
  00390	f6 c4 41	 test	 ah, 65			; 00000041H
  00393	74 1a		 je	 SHORT $L20860
  00395	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00398	d9 80 c8 00 00
	00		 fld	 DWORD PTR [eax+200]
  0039e	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  003a4	df e0		 fnstsw	 ax
  003a6	f6 c4 05	 test	 ah, 5
  003a9	0f 8a 91 00 00
	00		 jp	 $L20859
$L20860:
  003af	d9 85 40 ff ff
	ff		 fld	 DWORD PTR _dot$[ebp]
  003b5	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f7d70a4
  003bb	df e0		 fnstsw	 ax
  003bd	f6 c4 05	 test	 ah, 5
  003c0	7b 16		 jnp	 SHORT $L20861
  003c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003c5	d9 81 c8 00 00
	00		 fld	 DWORD PTR [ecx+200]
  003cb	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  003d1	df e0		 fnstsw	 ax
  003d3	f6 c4 41	 test	 ah, 65			; 00000041H
  003d6	75 68		 jne	 SHORT $L20859
$L20861:

; 396  :     {
; 397  :         D3DXVECTOR3 axis;

  003d8	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _axis$20862[ebp]
  003de	e8 00 00 00 00	 call	 ??0XGVECTOR3@@QAE@XZ	; XGVECTOR3::XGVECTOR3

; 398  :         D3DXVec3Cross( &axis, &vUp, &vView );

  003e3	8d 95 44 ff ff
	ff		 lea	 edx, DWORD PTR _vView$[ebp]
  003e9	52		 push	 edx
  003ea	8d 45 94	 lea	 eax, DWORD PTR _vUp$[ebp]
  003ed	50		 push	 eax
  003ee	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _axis$20862[ebp]
  003f4	51		 push	 ecx
  003f5	e8 00 00 00 00	 call	 ?XGVec3Cross@@YGPAUXGVECTOR3@@PAU1@PBU1@1@Z ; XGVec3Cross

; 399  :         D3DXMatrixRotationAxis( &matRotate, &axis, m_DefaultGamepad.fY2*m_fElapsedTime );

  003fa	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003fd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00400	d9 82 c8 00 00
	00		 fld	 DWORD PTR [edx+200]
  00406	d8 48 5c	 fmul	 DWORD PTR [eax+92]
  00409	51		 push	 ecx
  0040a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0040d	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _axis$20862[ebp]
  00413	51		 push	 ecx
  00414	8d 95 50 ff ff
	ff		 lea	 edx, DWORD PTR _matRotate$[ebp]
  0041a	52		 push	 edx
  0041b	e8 00 00 00 00	 call	 _XGMatrixRotationAxis@12

; 400  :         D3DXVec3TransformCoord( &m_vCameraPos, &m_vCameraPos, &matRotate );

  00420	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _matRotate$[ebp]
  00426	50		 push	 eax
  00427	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0042a	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  00430	51		 push	 ecx
  00431	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00434	81 c2 90 02 00
	00		 add	 edx, 656		; 00000290H
  0043a	52		 push	 edx
  0043b	e8 00 00 00 00	 call	 _XGVec3TransformCoord@12
$L20859:

; 401  :     }
; 402  : 
; 403  :     // In/out based on triggers.
; 404  :     float fIn = (m_DefaultGamepad.bAnalogButtons[XINPUT_GAMEPAD_RIGHT_TRIGGER] / 255.0f);

  00440	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00443	0f b6 88 b1 00
	00 00		 movzx	 ecx, BYTE PTR [eax+177]
  0044a	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv583[ebp], ecx
  00450	db 85 30 ff ff
	ff		 fild	 DWORD PTR tv583[ebp]
  00456	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@437f0000
  0045c	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _fIn$[ebp]

; 405  :     float fOut = (m_DefaultGamepad.bAnalogButtons[XINPUT_GAMEPAD_LEFT_TRIGGER] / 255.0f);

  00462	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00465	0f b6 82 b0 00
	00 00		 movzx	 eax, BYTE PTR [edx+176]
  0046c	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv585[ebp], eax
  00472	db 85 28 ff ff
	ff		 fild	 DWORD PTR tv585[ebp]
  00478	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@437f0000
  0047e	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _fOut$[ebp]

; 406  : 
; 407  :     if( fIn > 0.1f )

  00484	d9 85 2c ff ff
	ff		 fld	 DWORD PTR _fIn$[ebp]
  0048a	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3dcccccd
  00490	df e0		 fnstsw	 ax
  00492	f6 c4 41	 test	 ah, 65			; 00000041H
  00495	75 50		 jne	 SHORT $L20865

; 408  :         m_vCameraPos -= vView * 30.0f * fIn * m_fElapsedTime;

  00497	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0049a	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  0049d	52		 push	 edx
  0049e	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T21091[ebp]
  004a4	50		 push	 eax
  004a5	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _fIn$[ebp]
  004ab	51		 push	 ecx
  004ac	8d 95 0c ff ff
	ff		 lea	 edx, DWORD PTR $T21090[ebp]
  004b2	52		 push	 edx
  004b3	68 00 00 f0 41	 push	 1106247680		; 41f00000H
  004b8	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T21089[ebp]
  004be	50		 push	 eax
  004bf	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _vView$[ebp]
  004c5	e8 00 00 00 00	 call	 ??DXGVECTOR3@@QBE?AU0@M@Z ; XGVECTOR3::operator*
  004ca	8b c8		 mov	 ecx, eax
  004cc	e8 00 00 00 00	 call	 ??DXGVECTOR3@@QBE?AU0@M@Z ; XGVECTOR3::operator*
  004d1	8b c8		 mov	 ecx, eax
  004d3	e8 00 00 00 00	 call	 ??DXGVECTOR3@@QBE?AU0@M@Z ; XGVECTOR3::operator*
  004d8	50		 push	 eax
  004d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004dc	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  004e2	e8 00 00 00 00	 call	 ??ZXGVECTOR3@@QAEAAU0@ABU0@@Z ; XGVECTOR3::operator-=
$L20865:

; 409  : 
; 410  :     if( fOut > 0.1f )

  004e7	d9 85 24 ff ff
	ff		 fld	 DWORD PTR _fOut$[ebp]
  004ed	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3dcccccd
  004f3	df e0		 fnstsw	 ax
  004f5	f6 c4 41	 test	 ah, 65			; 00000041H
  004f8	75 50		 jne	 SHORT $L20869

; 411  :         m_vCameraPos += vView * 30.0f * fOut * m_fElapsedTime;

  004fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004fd	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  00500	52		 push	 edx
  00501	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T21094[ebp]
  00507	50		 push	 eax
  00508	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _fOut$[ebp]
  0050e	51		 push	 ecx
  0050f	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T21093[ebp]
  00515	52		 push	 edx
  00516	68 00 00 f0 41	 push	 1106247680		; 41f00000H
  0051b	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T21092[ebp]
  00521	50		 push	 eax
  00522	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _vView$[ebp]
  00528	e8 00 00 00 00	 call	 ??DXGVECTOR3@@QBE?AU0@M@Z ; XGVECTOR3::operator*
  0052d	8b c8		 mov	 ecx, eax
  0052f	e8 00 00 00 00	 call	 ??DXGVECTOR3@@QBE?AU0@M@Z ; XGVECTOR3::operator*
  00534	8b c8		 mov	 ecx, eax
  00536	e8 00 00 00 00	 call	 ??DXGVECTOR3@@QBE?AU0@M@Z ; XGVECTOR3::operator*
  0053b	50		 push	 eax
  0053c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0053f	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  00545	e8 00 00 00 00	 call	 ??YXGVECTOR3@@QAEAAU0@ABU0@@Z ; XGVECTOR3::operator+=
$L20869:

; 412  : 
; 413  :     D3DXMatrixLookAtLH( &m_matView, &m_vCameraPos, &vAt, &vUp );

  0054a	8d 4d 94	 lea	 ecx, DWORD PTR _vUp$[ebp]
  0054d	51		 push	 ecx
  0054e	8d 55 a0	 lea	 edx, DWORD PTR _vAt$[ebp]
  00551	52		 push	 edx
  00552	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00555	05 90 02 00 00	 add	 eax, 656		; 00000290H
  0055a	50		 push	 eax
  0055b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0055e	81 c1 b0 02 00
	00		 add	 ecx, 688		; 000002b0H
  00564	51		 push	 ecx
  00565	e8 00 00 00 00	 call	 _XGMatrixLookAtLH@16

; 414  : 
; 415  :     // Light orientation (looks at object)
; 416  :     D3DXMatrixLookAtLH( &m_LightObj.m_matOrientation, &m_LightObj.m_vPosition, &m_Obj.m_vPosition, &up );

  0056a	8d 55 f0	 lea	 edx, DWORD PTR _up$[ebp]
  0056d	52		 push	 edx
  0056e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00571	05 b8 03 00 00	 add	 eax, 952		; 000003b8H
  00576	50		 push	 eax
  00577	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0057a	81 c1 28 04 00
	00		 add	 ecx, 1064		; 00000428H
  00580	51		 push	 ecx
  00581	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00584	81 c2 40 04 00
	00		 add	 edx, 1088		; 00000440H
  0058a	52		 push	 edx
  0058b	e8 00 00 00 00	 call	 _XGMatrixLookAtLH@16

; 417  :     D3DXMatrixInverse( &m_LightObj.m_matOrientation, NULL, &m_LightObj.m_matOrientation );

  00590	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00593	05 40 04 00 00	 add	 eax, 1088		; 00000440H
  00598	50		 push	 eax
  00599	6a 00		 push	 0
  0059b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0059e	81 c1 40 04 00
	00		 add	 ecx, 1088		; 00000440H
  005a4	51		 push	 ecx
  005a5	e8 00 00 00 00	 call	 _XGMatrixInverse@12

; 418  : 
; 419  :     // Generate the texture transform matrix
; 420  :     //
; 421  :     // Note: if you are using multiple lights & shadow buffers, this needs
; 422  :     // to be calculated for each light.
; 423  :     //
; 424  :     // We are starting with worldspace coordinates, so we need to
; 425  :     // transform from worldspace to lightspace.
; 426  :     //
; 427  :     // We go from 3D worldspace to 3D lightspace by multiplying by the
; 428  :     // inverse of the light matrix.
; 429  :     // You will probably notice that we are doing two inverses in a row (see previous
; 430  :     // line of code). I did this to clearly illustrate the steps in generating the
; 431  :     // texture matrix. The previous line would not always be available.
; 432  :     D3DXMatrixInverse( &m_matTexture, NULL, &m_LightObj.m_matOrientation );

  005aa	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005ad	81 c2 40 04 00
	00		 add	 edx, 1088		; 00000440H
  005b3	52		 push	 edx
  005b4	6a 00		 push	 0
  005b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005b9	05 00 03 00 00	 add	 eax, 768		; 00000300H
  005be	50		 push	 eax
  005bf	e8 00 00 00 00	 call	 _XGMatrixInverse@12

; 433  : 
; 434  :     // Find a projection that will fit all the objects we want to shadow into the
; 435  :     // view frustum of the light.
; 436  :     float fRadius = m_fObjRadius;

  005c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005c7	8b 91 90 04 00
	00		 mov	 edx, DWORD PTR [ecx+1168]
  005cd	89 95 d8 fe ff
	ff		 mov	 DWORD PTR _fRadius$[ebp], edx

; 437  :     float fDist   = D3DXVec3Length( &(m_Obj.m_vPosition - m_LightObj.m_vPosition) );

  005d3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005d6	05 28 04 00 00	 add	 eax, 1064		; 00000428H
  005db	50		 push	 eax
  005dc	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR $T21095[ebp]
  005e2	51		 push	 ecx
  005e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005e6	81 c1 b8 03 00
	00		 add	 ecx, 952		; 000003b8H
  005ec	e8 00 00 00 00	 call	 ??GXGVECTOR3@@QBE?AU0@ABU0@@Z ; XGVECTOR3::operator-
  005f1	50		 push	 eax
  005f2	e8 00 00 00 00	 call	 ?XGVec3Length@@YGMPBUXGVECTOR3@@@Z ; XGVec3Length
  005f7	d9 9d c8 fe ff
	ff		 fstp	 DWORD PTR _fDist$[ebp]

; 438  :     float fNear   = fDist - fRadius;

  005fd	d9 85 c8 fe ff
	ff		 fld	 DWORD PTR _fDist$[ebp]
  00603	d8 a5 d8 fe ff
	ff		 fsub	 DWORD PTR _fRadius$[ebp]
  00609	d9 95 c4 fe ff
	ff		 fst	 DWORD PTR _fNear$[ebp]

; 439  :     float fFar    = fNear + 100.0f;

  0060f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@42c80000
  00615	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR _fFar$[ebp]

; 440  :     float fAngle  = 2.0f * asinf(fRadius / fDist);

  0061b	d9 85 d8 fe ff
	ff		 fld	 DWORD PTR _fRadius$[ebp]
  00621	d8 b5 c8 fe ff
	ff		 fdiv	 DWORD PTR _fDist$[ebp]
  00627	51		 push	 ecx
  00628	d9 1c 24	 fstp	 DWORD PTR [esp]
  0062b	e8 00 00 00 00	 call	 _asinf@4
  00630	dc c0		 fadd	 ST(0), ST(0)
  00632	d9 9d bc fe ff
	ff		 fstp	 DWORD PTR _fAngle$[ebp]

; 441  :     
; 442  :     D3DXMatrixPerspectiveFovLH( &m_matShadowProj, fAngle, 1.0f, fNear, fFar );

  00638	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR _fFar$[ebp]
  0063e	52		 push	 edx
  0063f	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _fNear$[ebp]
  00645	50		 push	 eax
  00646	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  0064b	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _fAngle$[ebp]
  00651	51		 push	 ecx
  00652	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00655	81 c2 50 02 00
	00		 add	 edx, 592		; 00000250H
  0065b	52		 push	 edx
  0065c	e8 00 00 00 00	 call	 _XGMatrixPerspectiveFovLH@20

; 443  : 
; 444  :     // Combine the light orientation matrix with the shaowbuffer projection 
; 445  :     // matrix.  This projects our light space position onto the shadowbuffer 
; 446  :     // the same way a projection matrix projects a cameraspace coordinate onto 
; 447  :     // the screen.
; 448  :     D3DXMatrixMultiply( &m_matTexture, &m_matTexture, &m_matShadowProj );

  00661	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00664	05 50 02 00 00	 add	 eax, 592		; 00000250H
  00669	50		 push	 eax
  0066a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0066d	81 c1 00 03 00
	00		 add	 ecx, 768		; 00000300H
  00673	51		 push	 ecx
  00674	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00677	81 c2 00 03 00
	00		 add	 edx, 768		; 00000300H
  0067d	52		 push	 edx
  0067e	e8 00 00 00 00	 call	 _XGMatrixMultiply@12

; 449  : 
; 450  :     // Finally, we scale and offset by SHADOWBUFFERWIDTH/2, SHADOWBUFFERHEIGHT/2
; 451  :     // to move from [-1,+1] space to [0:0, SHADOWBUFFERWIDTH:SHADOWBUFFERHEIGHT]
; 452  :     // texture space we also need to scale z by the zbuffer range.  An additional
; 453  :     // half texel offset is necessary because of the differences between texture
; 454  :     // addressing and pixel addressing.
; 455  :     D3DXMatrixIdentity( &mat );

  00683	8d 45 b0	 lea	 eax, DWORD PTR _mat$[ebp]
  00686	50		 push	 eax
  00687	e8 00 00 00 00	 call	 ?XGMatrixIdentity@@YGPAUXGMATRIX@@PAU1@@Z ; XGMatrixIdentity

; 456  : 
; 457  :     // Scale
; 458  :     mat._11 = SHADOWBUFFERWIDTH * 0.5f;

  0068c	c7 45 b0 00 00
	80 43		 mov	 DWORD PTR _mat$[ebp], 1132462080 ; 43800000H

; 459  :     mat._22 = -SHADOWBUFFERHEIGHT * 0.5f;

  00693	c7 45 c4 00 00
	80 c3		 mov	 DWORD PTR _mat$[ebp+20], -1015021568 ; c3800000H

; 460  :     mat._33 = g_fShadowBufferZRange[m_dwShadowBufferType];

  0069a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0069d	8b 91 c4 04 00
	00		 mov	 edx, DWORD PTR [ecx+1220]
  006a3	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?g_fShadowBufferZRange@@3PAMA[edx*4]
  006aa	89 45 d8	 mov	 DWORD PTR _mat$[ebp+40], eax

; 461  : 
; 462  :     // Offset
; 463  :     mat._41 = SHADOWBUFFERWIDTH*0.5f + 0.5f;

  006ad	c7 45 e0 00 40
	80 43		 mov	 DWORD PTR _mat$[ebp+48], 1132478464 ; 43804000H

; 464  :     mat._42 = SHADOWBUFFERHEIGHT*0.5f + 0.5f;

  006b4	c7 45 e4 00 40
	80 43		 mov	 DWORD PTR _mat$[ebp+52], 1132478464 ; 43804000H

; 465  : 
; 466  :     D3DXMatrixMultiply( &m_matTexture, &m_matTexture, &mat );

  006bb	8d 4d b0	 lea	 ecx, DWORD PTR _mat$[ebp]
  006be	51		 push	 ecx
  006bf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006c2	81 c2 00 03 00
	00		 add	 edx, 768		; 00000300H
  006c8	52		 push	 edx
  006c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006cc	05 00 03 00 00	 add	 eax, 768		; 00000300H
  006d1	50		 push	 eax
  006d2	e8 00 00 00 00	 call	 _XGMatrixMultiply@12

; 467  : 
; 468  :     // m_TextureMat now holds the appropriate transformation matrix
; 469  :     // for shadowmapping on the XBox GPU.
; 470  : 
; 471  :     // Calculate the frustum lines
; 472  :     D3DXMATRIX matInvTexProj;

  006d7	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _matInvTexProj$[ebp]
  006dd	e8 00 00 00 00	 call	 ??0XGMATRIX@@QAE@XZ	; XGMATRIX::XGMATRIX

; 473  :     D3DXMatrixInverse( &matInvTexProj, NULL, &m_matShadowProj );

  006e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006e5	81 c1 50 02 00
	00		 add	 ecx, 592		; 00000250H
  006eb	51		 push	 ecx
  006ec	6a 00		 push	 0
  006ee	8d 95 70 fe ff
	ff		 lea	 edx, DWORD PTR _matInvTexProj$[ebp]
  006f4	52		 push	 edx
  006f5	e8 00 00 00 00	 call	 _XGMatrixInverse@12

; 474  : 
; 475  :     for( int i = 0; i < 8; i++ )

  006fa	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$20880[ebp], 0
  00704	eb 0f		 jmp	 SHORT $L20881
$L20882:
  00706	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _i$20880[ebp]
  0070c	83 c0 01	 add	 eax, 1
  0070f	89 85 6c fe ff
	ff		 mov	 DWORD PTR _i$20880[ebp], eax
$L20881:
  00715	83 bd 6c fe ff
	ff 08		 cmp	 DWORD PTR _i$20880[ebp], 8
  0071c	0f 8d bf 00 00
	00		 jge	 $L20883

; 476  :     {
; 477  :         D3DXVECTOR4 vT = g_vHomogenousFrustum[i];

  00722	8b 8d 6c fe ff
	ff		 mov	 ecx, DWORD PTR _i$20880[ebp]
  00728	c1 e1 04	 shl	 ecx, 4
  0072b	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:?g_vHomogenousFrustum@@3PAUXGVECTOR4@@A ; g_vHomogenousFrustum
  00731	8b 11		 mov	 edx, DWORD PTR [ecx]
  00733	89 95 5c fe ff
	ff		 mov	 DWORD PTR _vT$20884[ebp], edx
  00739	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0073c	89 85 60 fe ff
	ff		 mov	 DWORD PTR _vT$20884[ebp+4], eax
  00742	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00745	89 95 64 fe ff
	ff		 mov	 DWORD PTR _vT$20884[ebp+8], edx
  0074b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0074e	89 85 68 fe ff
	ff		 mov	 DWORD PTR _vT$20884[ebp+12], eax

; 478  : 
; 479  :         D3DXVec4Transform( &vT, &vT, &matInvTexProj );

  00754	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _matInvTexProj$[ebp]
  0075a	51		 push	 ecx
  0075b	8d 95 5c fe ff
	ff		 lea	 edx, DWORD PTR _vT$20884[ebp]
  00761	52		 push	 edx
  00762	8d 85 5c fe ff
	ff		 lea	 eax, DWORD PTR _vT$20884[ebp]
  00768	50		 push	 eax
  00769	e8 00 00 00 00	 call	 _XGVec4Transform@12

; 480  :         D3DXVec4Transform( &vT, &vT, &m_LightObj.m_matOrientation );

  0076e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00771	81 c1 40 04 00
	00		 add	 ecx, 1088		; 00000440H
  00777	51		 push	 ecx
  00778	8d 95 5c fe ff
	ff		 lea	 edx, DWORD PTR _vT$20884[ebp]
  0077e	52		 push	 edx
  0077f	8d 85 5c fe ff
	ff		 lea	 eax, DWORD PTR _vT$20884[ebp]
  00785	50		 push	 eax
  00786	e8 00 00 00 00	 call	 _XGVec4Transform@12

; 481  : 
; 482  :         g_vFrustumLines[i].x = vT.x / vT.w;

  0078b	d9 85 5c fe ff
	ff		 fld	 DWORD PTR _vT$20884[ebp]
  00791	d8 b5 68 fe ff
	ff		 fdiv	 DWORD PTR _vT$20884[ebp+12]
  00797	8b 8d 6c fe ff
	ff		 mov	 ecx, DWORD PTR _i$20880[ebp]
  0079d	c1 e1 04	 shl	 ecx, 4
  007a0	d9 99 00 00 00
	00		 fstp	 DWORD PTR ?g_vFrustumLines@@3PAULINEVERTEX@@A[ecx]

; 483  :         g_vFrustumLines[i].y = vT.y / vT.w;

  007a6	d9 85 60 fe ff
	ff		 fld	 DWORD PTR _vT$20884[ebp+4]
  007ac	d8 b5 68 fe ff
	ff		 fdiv	 DWORD PTR _vT$20884[ebp+12]
  007b2	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR _i$20880[ebp]
  007b8	c1 e2 04	 shl	 edx, 4
  007bb	d9 9a 04 00 00
	00		 fstp	 DWORD PTR ?g_vFrustumLines@@3PAULINEVERTEX@@A[edx+4]

; 484  :         g_vFrustumLines[i].z = vT.z / vT.w;

  007c1	d9 85 64 fe ff
	ff		 fld	 DWORD PTR _vT$20884[ebp+8]
  007c7	d8 b5 68 fe ff
	ff		 fdiv	 DWORD PTR _vT$20884[ebp+12]
  007cd	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _i$20880[ebp]
  007d3	c1 e0 04	 shl	 eax, 4
  007d6	d9 98 08 00 00
	00		 fstp	 DWORD PTR ?g_vFrustumLines@@3PAULINEVERTEX@@A[eax+8]

; 485  :     }

  007dc	e9 25 ff ff ff	 jmp	 $L20882
$L20883:

; 486  : 
; 487  :     return S_OK;

  007e1	33 c0		 xor	 eax, eax

; 488  : }

  007e3	8b e5		 mov	 esp, ebp
  007e5	5d		 pop	 ebp
  007e6	8b e3		 mov	 esp, ebx
  007e8	5b		 pop	 ebx
  007e9	c3		 ret	 0
$L21116:
  007ea	00 00 00 00	 DD	 $L20845
  007ee	00 00 00 00	 DD	 $L20846
  007f2	00 00 00 00	 DD	 $L20847
  007f6	00 00 00 00	 DD	 $L20848
?FrameMove@CXBoxSample@@UAEJXZ ENDP			; CXBoxSample::FrameMove
_TEXT	ENDS
EXTRN	_D3DResource_Release@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\public\xdk\inc\d3d8.h
;	COMDAT ?Release@D3DResource@@QAGKXZ
_TEXT	SEGMENT
_this$ = 8
?Release@D3DResource@@QAGKXZ PROC NEAR			; D3DResource::Release, COMDAT

; 2223 : D3DMINLINE ULONG WINAPI D3DResource::Release() { return D3DResource_Release(this); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _D3DResource_Release@4
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?Release@D3DResource@@QAGKXZ ENDP			; D3DResource::Release
_TEXT	ENDS
EXTRN	_asin:NEAR
; Function compile flags: /Odt
; File c:\xbox\public\xdk\inc\math.h
;	COMDAT _asinf@4
_TEXT	SEGMENT
tv70 = -4
__X$ = 8
_asinf@4 PROC NEAR					; COMDAT

; 436  :         {return ((float)asin((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00007	83 ec 08	 sub	 esp, 8
  0000a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0000d	e8 00 00 00 00	 call	 _asin
  00012	83 c4 08	 add	 esp, 8
  00015	d9 55 fc	 fst	 DWORD PTR tv70[ebp]
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
_asinf@4 ENDP
; Function compile flags: /Odt
; File c:\xbox\public\xdk\inc\xgmath.inl
_TEXT	ENDS
;	COMDAT ??YXGVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4
_v$ = 8
??YXGVECTOR3@@QAEAAU0@ABU0@@Z PROC NEAR			; XGVECTOR3::operator+=, COMDAT
; _this$ = ecx

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  :     x += v.x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0000d	d9 00		 fld	 DWORD PTR [eax]
  0000f	d8 01		 fadd	 DWORD PTR [ecx]
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	d9 1a		 fstp	 DWORD PTR [edx]

; 214  :     y += v.y;

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0001c	d9 40 04	 fld	 DWORD PTR [eax+4]
  0001f	d8 41 04	 fadd	 DWORD PTR [ecx+4]
  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 215  :     z += v.z;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002e	d9 40 08	 fld	 DWORD PTR [eax+8]
  00031	d8 41 08	 fadd	 DWORD PTR [ecx+8]
  00034	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00037	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 216  :     return *this;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 217  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
??YXGVECTOR3@@QAEAAU0@ABU0@@Z ENDP			; XGVECTOR3::operator+=
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??ZXGVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4
_v$ = 8
??ZXGVECTOR3@@QAEAAU0@ABU0@@Z PROC NEAR			; XGVECTOR3::operator-=, COMDAT
; _this$ = ecx

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 222  :     x -= v.x;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0000d	d9 00		 fld	 DWORD PTR [eax]
  0000f	d8 21		 fsub	 DWORD PTR [ecx]
  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	d9 1a		 fstp	 DWORD PTR [edx]

; 223  :     y -= v.y;

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0001c	d9 40 04	 fld	 DWORD PTR [eax+4]
  0001f	d8 61 04	 fsub	 DWORD PTR [ecx+4]
  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 224  :     z -= v.z;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002e	d9 40 08	 fld	 DWORD PTR [eax+8]
  00031	d8 61 08	 fsub	 DWORD PTR [ecx+8]
  00034	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00037	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 225  :     return *this;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 226  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
??ZXGVECTOR3@@QAEAAU0@ABU0@@Z ENDP			; XGVECTOR3::operator-=
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??GXGVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4
___$ReturnUdt$ = 8
_v$ = 12
??GXGVECTOR3@@QBE?AU0@ABU0@@Z PROC NEAR			; XGVECTOR3::operator-, COMDAT
; _this$ = ecx

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 272  :     return XGVECTOR3(x - v.x, y - v.y, z - v.z);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0000d	d9 40 08	 fld	 DWORD PTR [eax+8]
  00010	d8 61 08	 fsub	 DWORD PTR [ecx+8]
  00013	51		 push	 ecx
  00014	d9 1c 24	 fstp	 DWORD PTR [esp]
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0001d	d9 42 04	 fld	 DWORD PTR [edx+4]
  00020	d8 60 04	 fsub	 DWORD PTR [eax+4]
  00023	51		 push	 ecx
  00024	d9 1c 24	 fstp	 DWORD PTR [esp]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  0002d	d9 01		 fld	 DWORD PTR [ecx]
  0002f	d8 22		 fsub	 DWORD PTR [edx]
  00031	51		 push	 ecx
  00032	d9 1c 24	 fstp	 DWORD PTR [esp]
  00035	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00038	e8 00 00 00 00	 call	 ??0XGVECTOR3@@QAE@MMM@Z	; XGVECTOR3::XGVECTOR3
  0003d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 273  : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??GXGVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; XGVECTOR3::operator-
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??DXGVECTOR3@@QBE?AU0@M@Z
_TEXT	SEGMENT
_this$ = -4
___$ReturnUdt$ = 8
_f$ = 12
??DXGVECTOR3@@QBE?AU0@M@Z PROC NEAR			; XGVECTOR3::operator*, COMDAT
; _this$ = ecx

; 277  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 278  :     return XGVECTOR3(x * f, y * f, z * f);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	d9 45 0c	 fld	 DWORD PTR _f$[ebp]
  0000d	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00010	51		 push	 ecx
  00011	d9 1c 24	 fstp	 DWORD PTR [esp]
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	d9 45 0c	 fld	 DWORD PTR _f$[ebp]
  0001a	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  0001d	51		 push	 ecx
  0001e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	d9 45 0c	 fld	 DWORD PTR _f$[ebp]
  00027	d8 0a		 fmul	 DWORD PTR [edx]
  00029	51		 push	 ecx
  0002a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00030	e8 00 00 00 00	 call	 ??0XGVECTOR3@@QAE@MMM@Z	; XGVECTOR3::XGVECTOR3
  00035	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 279  : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
??DXGVECTOR3@@QBE?AU0@M@Z ENDP				; XGVECTOR3::operator*
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?XGVec3Length@@YGMPBUXGVECTOR3@@@Z
_TEXT	SEGMENT
_res$ = -4
_pV$ = 8
?XGVec3Length@@YGMPBUXGVECTOR3@@@Z PROC NEAR		; XGVec3Length, COMDAT

; 1401 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1402 :     FLOAT res;
; 1403 : 
; 1404 : #ifdef _DEBUG
; 1405 : 
; 1406 : #ifdef ASSERT
; 1407 :     ASSERT(pV != NULL);
; 1408 : #endif
; 1409 : 
; 1410 : #endif
; 1411 : 
; 1412 :     __asm {
; 1413 :         mov     edx, pV

  00004	8b 55 08	 mov	 edx, DWORD PTR _pV$[ebp]

; 1414 :         movss   xmm1, [edx]

  00007	f3 0f 10 0a	 movss	 xmm1, XMMWORD PTR [edx]

; 1415 :         movhps  xmm1, [edx+4]

  0000b	0f 16 4a 04	 movhps	 xmm1, MMWORD PTR [edx+4]

; 1416 : 
; 1417 :         movaps  xmm2, xmm1

  0000f	0f 28 d1	 movaps	 xmm2, xmm1

; 1418 : 
; 1419 :         mulps   xmm1, xmm2

  00012	0f 59 ca	 mulps	 xmm1, xmm2

; 1420 : 
; 1421 :         movaps  xmm0, xmm1

  00015	0f 28 c1	 movaps	 xmm0, xmm1

; 1422 : 
; 1423 :         shufps  xmm0, xmm0, 32h

  00018	0f c6 c0 32	 shufps	 xmm0, xmm0, 50		; 00000032H

; 1424 :         addps   xmm1, xmm0

  0001c	0f 58 c8	 addps	 xmm1, xmm0

; 1425 : 
; 1426 :         shufps  xmm0, xmm0, 32h

  0001f	0f c6 c0 32	 shufps	 xmm0, xmm0, 50		; 00000032H

; 1427 :         addps   xmm1, xmm0

  00023	0f 58 c8	 addps	 xmm1, xmm0

; 1428 : 
; 1429 :         sqrtss  xmm1, xmm1

  00026	f3 0f 51 c9	 sqrtss	 xmm1, xmm1

; 1430 :         movss   [res], xmm1

  0002a	f3 0f 11 4d fc	 movss	 XMMWORD PTR _res$[ebp], xmm1

; 1431 :     }
; 1432 : 
; 1433 :     return res;

  0002f	d9 45 fc	 fld	 DWORD PTR _res$[ebp]

; 1434 : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?XGVec3Length@@YGMPBUXGVECTOR3@@@Z ENDP			; XGVec3Length
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?XGVec3Dot@@YGMPBUXGVECTOR3@@0@Z
_TEXT	SEGMENT
_res$ = -4
_pV1$ = 8
_pV2$ = 12
?XGVec3Dot@@YGMPBUXGVECTOR3@@0@Z PROC NEAR		; XGVec3Dot, COMDAT

; 1474 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1475 :     FLOAT res;
; 1476 : 
; 1477 : #ifdef _DEBUG
; 1478 : 
; 1479 : #ifdef ASSERT
; 1480 :     ASSERT(pV1 != NULL && pV2 != NULL);
; 1481 : #endif
; 1482 : 
; 1483 : #endif
; 1484 : 
; 1485 :     __asm {
; 1486 :         mov     edx, pV1

  00004	8b 55 08	 mov	 edx, DWORD PTR _pV1$[ebp]

; 1487 :         movss   xmm1, [edx]

  00007	f3 0f 10 0a	 movss	 xmm1, XMMWORD PTR [edx]

; 1488 :         movhps  xmm1, [edx+4]

  0000b	0f 16 4a 04	 movhps	 xmm1, MMWORD PTR [edx+4]

; 1489 : 
; 1490 :         mov     edx, pV2

  0000f	8b 55 0c	 mov	 edx, DWORD PTR _pV2$[ebp]

; 1491 :         movss   xmm2, [edx]

  00012	f3 0f 10 12	 movss	 xmm2, XMMWORD PTR [edx]

; 1492 :         movhps  xmm2, [edx+4]

  00016	0f 16 52 04	 movhps	 xmm2, MMWORD PTR [edx+4]

; 1493 : 
; 1494 :         mulps   xmm1, xmm2

  0001a	0f 59 ca	 mulps	 xmm1, xmm2

; 1495 : 
; 1496 :         movaps  xmm0, xmm1

  0001d	0f 28 c1	 movaps	 xmm0, xmm1

; 1497 : 
; 1498 :         shufps  xmm0, xmm0, 32h

  00020	0f c6 c0 32	 shufps	 xmm0, xmm0, 50		; 00000032H

; 1499 :         addps   xmm1, xmm0

  00024	0f 58 c8	 addps	 xmm1, xmm0

; 1500 : 
; 1501 :         shufps  xmm0, xmm0, 32h

  00027	0f c6 c0 32	 shufps	 xmm0, xmm0, 50		; 00000032H

; 1502 :         addps   xmm1, xmm0

  0002b	0f 58 c8	 addps	 xmm1, xmm0

; 1503 : 
; 1504 :         movss   [res], xmm1

  0002e	f3 0f 11 4d fc	 movss	 XMMWORD PTR _res$[ebp], xmm1

; 1505 :     }
; 1506 : 
; 1507 :     return res;

  00033	d9 45 fc	 fld	 DWORD PTR _res$[ebp]

; 1508 : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?XGVec3Dot@@YGMPBUXGVECTOR3@@0@Z ENDP			; XGVec3Dot
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?XGVec3Cross@@YGPAUXGVECTOR3@@PAU1@PBU1@1@Z
_TEXT	SEGMENT
_v$ = -12
_pOut$ = 8
_pV1$ = 12
_pV2$ = 16
?XGVec3Cross@@YGPAUXGVECTOR3@@PAU1@PBU1@1@Z PROC NEAR	; XGVec3Cross, COMDAT

; 1512 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1513 :     XGVECTOR3 v;

  00006	8d 4d f4	 lea	 ecx, DWORD PTR _v$[ebp]
  00009	e8 00 00 00 00	 call	 ??0XGVECTOR3@@QAE@XZ	; XGVECTOR3::XGVECTOR3

; 1514 : 
; 1515 : #ifdef _DEBUG
; 1516 : 
; 1517 : #ifdef ASSERT
; 1518 :     ASSERT(pOut != NULL && pV1 != NULL && pV2 != NULL);
; 1519 : #endif
; 1520 : 
; 1521 : #endif
; 1522 : 
; 1523 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _pV1$[ebp]
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _pV2$[ebp]
  00014	d9 40 04	 fld	 DWORD PTR [eax+4]
  00017	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  0001a	8b 55 0c	 mov	 edx, DWORD PTR _pV1$[ebp]
  0001d	8b 45 10	 mov	 eax, DWORD PTR _pV2$[ebp]
  00020	d9 42 08	 fld	 DWORD PTR [edx+8]
  00023	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00026	de e9		 fsubp	 ST(1), ST(0)
  00028	d9 5d f4	 fstp	 DWORD PTR _v$[ebp]

; 1524 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _pV1$[ebp]
  0002e	8b 55 10	 mov	 edx, DWORD PTR _pV2$[ebp]
  00031	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00034	d8 0a		 fmul	 DWORD PTR [edx]
  00036	8b 45 0c	 mov	 eax, DWORD PTR _pV1$[ebp]
  00039	8b 4d 10	 mov	 ecx, DWORD PTR _pV2$[ebp]
  0003c	d9 00		 fld	 DWORD PTR [eax]
  0003e	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  00041	de e9		 fsubp	 ST(1), ST(0)
  00043	d9 5d f8	 fstp	 DWORD PTR _v$[ebp+4]

; 1525 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00046	8b 55 0c	 mov	 edx, DWORD PTR _pV1$[ebp]
  00049	8b 45 10	 mov	 eax, DWORD PTR _pV2$[ebp]
  0004c	d9 02		 fld	 DWORD PTR [edx]
  0004e	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _pV1$[ebp]
  00054	8b 55 10	 mov	 edx, DWORD PTR _pV2$[ebp]
  00057	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0005a	d8 0a		 fmul	 DWORD PTR [edx]
  0005c	de e9		 fsubp	 ST(1), ST(0)
  0005e	d9 5d fc	 fstp	 DWORD PTR _v$[ebp+8]

; 1526 : 
; 1527 :     *pOut = v;

  00061	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00064	8b 4d f4	 mov	 ecx, DWORD PTR _v$[ebp]
  00067	89 08		 mov	 DWORD PTR [eax], ecx
  00069	8b 55 f8	 mov	 edx, DWORD PTR _v$[ebp+4]
  0006c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _v$[ebp+8]
  00072	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1528 :     return pOut;

  00075	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]

; 1529 : }

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 0c 00	 ret	 12			; 0000000cH
?XGVec3Cross@@YGPAUXGVECTOR3@@PAU1@PBU1@1@Z ENDP	; XGVec3Cross
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?XGMatrixIdentity@@YGPAUXGMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8
?XGMatrixIdentity@@YGPAUXGMATRIX@@PAU1@@Z PROC NEAR	; XGMatrixIdentity, COMDAT

; 1983 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1984 : #ifdef _DEBUG
; 1985 : 
; 1986 : #ifdef ASSERT
; 1987 :     ASSERT(pOut != NULL);
; 1988 : #endif
; 1989 : 
; 1990 : #endif
; 1991 : 
; 1992 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
; 1993 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1994 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1995 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00006	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  00010	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
  00017	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  0001a	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  00021	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00024	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  0002e	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  00035	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  00038	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  0003f	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00042	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  0004c	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00053	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  00056	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  0005d	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00060	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  0006a	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00071	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  00074	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 1996 : 
; 1997 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  0007e	c7 40 3c 00 00
	80 3f		 mov	 DWORD PTR [eax+60], 1065353216 ; 3f800000H
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  00088	c7 41 28 00 00
	80 3f		 mov	 DWORD PTR [ecx+40], 1065353216 ; 3f800000H
  0008f	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  00092	c7 42 14 00 00
	80 3f		 mov	 DWORD PTR [edx+20], 1065353216 ; 3f800000H
  00099	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  0009c	c7 00 00 00 80
	3f		 mov	 DWORD PTR [eax], 1065353216 ; 3f800000H

; 1998 :     return pOut;

  000a2	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]

; 1999 : }

  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
?XGMatrixIdentity@@YGPAUXGMATRIX@@PAU1@@Z ENDP		; XGMatrixIdentity
_TEXT	ENDS
PUBLIC	?Present@D3DDevice@@SGJPBUtagRECT@@0PAX1@Z	; D3DDevice::Present
PUBLIC	?FtoDW@@YGKM@Z					; FtoDW
PUBLIC	?DisplaySBObject@CXBoxSample@@QAEJPAVCXObject@@@Z ; CXBoxSample::DisplaySBObject
PUBLIC	?SetRenderTarget@D3DDevice@@SGJPAUD3DSurface@@0@Z ; D3DDevice::SetRenderTarget
PUBLIC	?Clear@D3DDevice@@SGJKPBU_D3DRECT@@KKMK@Z	; D3DDevice::Clear
PUBLIC	?SetViewport@D3DDevice@@SGJPBU_D3DVIEWPORT8@@@Z	; D3DDevice::SetViewport
PUBLIC	?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState
PUBLIC	?SetTexture@D3DDevice@@SGJKPAUD3DBaseTexture@@@Z ; D3DDevice::SetTexture
PUBLIC	?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState
PUBLIC	?DrawPrimitiveUP@D3DDevice@@SGJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; D3DDevice::DrawPrimitiveUP
PUBLIC	??_C@_1BK@IOLMKPIG@?$AAS?$AAh?$AAa?$AAd?$AAo?$AAw?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	?SetVertexShader@D3DDevice@@SGJK@Z		; D3DDevice::SetVertexShader
PUBLIC	??_C@_1GK@FIOADJAH@?$AAT?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?0?$AA?5?$AAZ?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF@ ; `string'
PUBLIC	?SetPixelShader@D3DDevice@@SGJK@Z		; D3DDevice::SetPixelShader
PUBLIC	?DrawVerticesUP@D3DDevice@@SGJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; D3DDevice::DrawVerticesUP
PUBLIC	?GetSurfaceLevel@D3DTexture@@QAGJIPAPAUD3DSurface@@@Z ; D3DTexture::GetSurfaceLevel
EXTRN	?Render@CXObject@@QAEXH@Z:NEAR			; CXObject::Render
EXTRN	?Begin@CXBFont@@QAEJXZ:NEAR			; CXBFont::Begin
EXTRN	?DrawText@CXBFont@@QAEJMMKPBGK@Z:NEAR		; CXBFont::DrawText
EXTRN	?End@CXBFont@@QAEJXZ:NEAR			; CXBFont::End
EXTRN	?Render@CXBHelp@@QAEJPAVCXBFont@@PAUXBHELP_CALLOUT@@K@Z:NEAR ; CXBHelp::Render
EXTRN	_swprintf:NEAR
;	COMDAT ??_C@_1BK@IOLMKPIG@?$AAS?$AAh?$AAa?$AAd?$AAo?$AAw?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
; File c:\xbox\private\atg\samples\graphics\shadowbuffer\shadowbuffer.cpp
CONST	SEGMENT
??_C@_1BK@IOLMKPIG@?$AAS?$AAh?$AAa?$AAd?$AAo?$AAw?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@ DB 'S'
	DB	00H, 'h', 00H, 'a', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@FIOADJAH@?$AAT?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?0?$AA?5?$AAZ?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF@
CONST	SEGMENT
??_C@_1GK@FIOADJAH@?$AAT?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?0?$AA?5?$AAZ?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF@ DB 'T'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	's', 00H, ',', 00H, ' ', 00H, 'Z', 00H, 'O', 00H, 'f', 00H, 'f'
	DB	00H, 's', 00H, 'e', 00H, 't', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'.', 00H, '0', 00H, '1', 00H, 'f', 00H, ',', 00H, ' ', 00H, 'Z'
	DB	00H, 'O', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'S', 00H, 'l', 00H, 'o', 00H, 'p', 00H, 'e', 00H, ' '
	DB	00H, 'S', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e', 00H, ':', 00H
	DB	' ', 00H, '%', 00H, '.', 00H, '0', 00H, '1', 00H, 'f', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Render@CXBoxSample@@UAEJXZ
_TEXT	SEGMENT
_strBuffer$20897 = -336
_matIdentity$20893 = -176
_viewport$ = -108
_pSurface$ = -84
_m$ = -80
_this$ = -4
?Render@CXBoxSample@@UAEJXZ PROC NEAR			; CXBoxSample::Render, COMDAT
; _this$ = ecx

; 500  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 501  :     D3DXMATRIX m;

  0001f	8d 4d b0	 lea	 ecx, DWORD PTR _m$[ebp]
  00022	e8 00 00 00 00	 call	 ??0XGMATRIX@@QAE@XZ	; XGMATRIX::XGMATRIX

; 502  :     LPDIRECT3DSURFACE8 pSurface;
; 503  : 
; 504  :     // Restore state that text clobbers
; 505  :     m_pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, FALSE );

  00027	6a 00		 push	 0
  00029	6a 3b		 push	 59			; 0000003bH
  0002b	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 506  :     m_pd3dDevice->SetRenderState( D3DRS_ALPHATESTENABLE, FALSE );

  00030	6a 00		 push	 0
  00032	6a 3c		 push	 60			; 0000003cH
  00034	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 507  :     m_pd3dDevice->SetRenderState( D3DRS_ZENABLE, D3DZB_TRUE );

  00039	6a 01		 push	 1
  0003b	6a 7c		 push	 124			; 0000007cH
  0003d	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 508  :     m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );

  00042	6a 02		 push	 2
  00044	6a 03		 push	 3
  00046	6a 00		 push	 0
  00048	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 509  :     m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_LINEAR );

  0004d	6a 02		 push	 2
  0004f	6a 04		 push	 4
  00051	6a 00		 push	 0
  00053	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 510  :     m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MIPFILTER, D3DTEXF_LINEAR );

  00058	6a 02		 push	 2
  0005a	6a 05		 push	 5
  0005c	6a 00		 push	 0
  0005e	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 511  :     m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP );

  00063	6a 01		 push	 1
  00065	6a 00		 push	 0
  00067	6a 00		 push	 0
  00069	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 512  :     m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP );

  0006e	6a 01		 push	 1
  00070	6a 01		 push	 1
  00072	6a 00		 push	 0
  00074	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 513  : 
; 514  :     // Render the scene into the shadow buffer from the viewpoint of the light
; 515  : 
; 516  :     // Set shadowbuffer as render target z buffer & clear it
; 517  :     m_pShadowBufferDepth->GetSurfaceLevel( 0, &pSurface );

  00079	8d 45 ac	 lea	 eax, DWORD PTR _pSurface$[ebp]
  0007c	50		 push	 eax
  0007d	6a 00		 push	 0
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	8b 91 98 04 00
	00		 mov	 edx, DWORD PTR [ecx+1176]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 ?GetSurfaceLevel@D3DTexture@@QAGJIPAPAUD3DSurface@@@Z ; D3DTexture::GetSurfaceLevel

; 518  : 
; 519  :     m_pd3dDevice->SetRenderTarget( m_pShadowBufferTarget, pSurface );

  0008e	8b 45 ac	 mov	 eax, DWORD PTR _pSurface$[ebp]
  00091	50		 push	 eax
  00092	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	8b 91 94 04 00
	00		 mov	 edx, DWORD PTR [ecx+1172]
  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 ?SetRenderTarget@D3DDevice@@SGJPAUD3DSurface@@0@Z ; D3DDevice::SetRenderTarget

; 520  : 
; 521  :     D3DVIEWPORT8 viewport = { 0, 0, SHADOWBUFFERWIDTH, SHADOWBUFFERHEIGHT, 0.0f, 1.0f };

  000a1	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _viewport$[ebp], 0
  000a8	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _viewport$[ebp+4], 0
  000af	c7 45 9c 00 02
	00 00		 mov	 DWORD PTR _viewport$[ebp+8], 512 ; 00000200H
  000b6	c7 45 a0 00 02
	00 00		 mov	 DWORD PTR _viewport$[ebp+12], 512 ; 00000200H
  000bd	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _viewport$[ebp+16], 0
  000c4	c7 45 a8 00 00
	80 3f		 mov	 DWORD PTR _viewport$[ebp+20], 1065353216 ; 3f800000H

; 522  :     m_pd3dDevice->SetViewport( &viewport );

  000cb	8d 45 94	 lea	 eax, DWORD PTR _viewport$[ebp]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?SetViewport@D3DDevice@@SGJPBU_D3DVIEWPORT8@@@Z ; D3DDevice::SetViewport

; 523  : 
; 524  :     m_pd3dDevice->Clear( 0, NULL, D3DCLEAR_ZBUFFER, 0, 1.0f, 0 ); 

  000d4	6a 00		 push	 0
  000d6	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  000db	6a 00		 push	 0
  000dd	6a 01		 push	 1
  000df	6a 00		 push	 0
  000e1	6a 00		 push	 0
  000e3	e8 00 00 00 00	 call	 ?Clear@D3DDevice@@SGJKPBU_D3DRECT@@KKMK@Z ; D3DDevice::Clear

; 525  : 
; 526  :     D3DXMatrixInverse( &m, NULL, &m_LightObj.m_matOrientation );

  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	81 c1 40 04 00
	00		 add	 ecx, 1088		; 00000440H
  000f1	51		 push	 ecx
  000f2	6a 00		 push	 0
  000f4	8d 55 b0	 lea	 edx, DWORD PTR _m$[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 _XGMatrixInverse@12

; 527  :     m_pd3dDevice->SetTransform( D3DTS_VIEW, &m );

  000fd	8d 45 b0	 lea	 eax, DWORD PTR _m$[ebp]
  00100	50		 push	 eax
  00101	6a 00		 push	 0
  00103	e8 00 00 00 00	 call	 ?SetTransform@D3DDevice@@SGJW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; D3DDevice::SetTransform

; 528  :     m_pd3dDevice->SetTransform( D3DTS_PROJECTION, &m_matShadowProj );

  00108	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	81 c1 50 02 00
	00		 add	 ecx, 592		; 00000250H
  00111	51		 push	 ecx
  00112	6a 01		 push	 1
  00114	e8 00 00 00 00	 call	 ?SetTransform@D3DDevice@@SGJW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; D3DDevice::SetTransform

; 529  :     
; 530  :     // Disable color writes
; 531  :     m_pd3dDevice->SetRenderState( D3DRS_COLORWRITEENABLE, 0 );

  00119	6a 00		 push	 0
  0011b	6a 43		 push	 67			; 00000043H
  0011d	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 532  : 
; 533  :     // Disable culling so all triangles cause shadows
; 534  :     m_pd3dDevice->SetRenderState( D3DRS_CULLMODE, D3DCULL_NONE );

  00122	6a 00		 push	 0
  00124	68 80 00 00 00	 push	 128			; 00000080H
  00129	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 535  : 
; 536  :     // Turn on z-offset.
; 537  :     m_pd3dDevice->SetRenderState( D3DRS_SOLIDOFFSETENABLE, TRUE );

  0012e	6a 01		 push	 1
  00130	6a 51		 push	 81			; 00000051H
  00132	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 538  :     m_pd3dDevice->SetRenderState( D3DRS_POLYGONOFFSETZOFFSET, FtoDW(m_fZOffset) );

  00137	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0013a	8b 82 c8 04 00
	00		 mov	 eax, DWORD PTR [edx+1224]
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ?FtoDW@@YGKM@Z		; FtoDW
  00146	50		 push	 eax
  00147	6a 4e		 push	 78			; 0000004eH
  00149	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 539  :     m_pd3dDevice->SetRenderState( D3DRS_POLYGONOFFSETZSLOPESCALE, FtoDW(m_fZSlopeScale) );

  0014e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00151	8b 91 cc 04 00
	00		 mov	 edx, DWORD PTR [ecx+1228]
  00157	52		 push	 edx
  00158	e8 00 00 00 00	 call	 ?FtoDW@@YGKM@Z		; FtoDW
  0015d	50		 push	 eax
  0015e	6a 4d		 push	 77			; 0000004dH
  00160	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 540  : 
; 541  :     // Render our scene into the shadowbuffer
; 542  :     m_FloorObj.Render(0);

  00165	6a 00		 push	 0
  00167	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	81 c1 40 03 00
	00		 add	 ecx, 832		; 00000340H
  00170	e8 00 00 00 00	 call	 ?Render@CXObject@@QAEXH@Z ; CXObject::Render

; 543  :     m_Obj.Render(0);

  00175	6a 00		 push	 0
  00177	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017a	81 c1 b0 03 00
	00		 add	 ecx, 944		; 000003b0H
  00180	e8 00 00 00 00	 call	 ?Render@CXObject@@QAEXH@Z ; CXObject::Render

; 544  : 
; 545  :     // Restore important state
; 546  :     m_pd3dDevice->SetRenderTarget( m_pRenderTarget, m_pZBuffer );

  00185	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00188	8b 88 a0 04 00
	00		 mov	 ecx, DWORD PTR [eax+1184]
  0018e	51		 push	 ecx
  0018f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00192	8b 82 9c 04 00
	00		 mov	 eax, DWORD PTR [edx+1180]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?SetRenderTarget@D3DDevice@@SGJPAUD3DSurface@@0@Z ; D3DDevice::SetRenderTarget

; 547  :     m_pd3dDevice->SetRenderState( D3DRS_COLORWRITEENABLE, D3DCOLORWRITEENABLE_ALL );

  0019e	68 01 01 01 01	 push	 16843009		; 01010101H
  001a3	6a 43		 push	 67			; 00000043H
  001a5	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 548  :     m_pd3dDevice->SetRenderState( D3DRS_SOLIDOFFSETENABLE, FALSE );

  001aa	6a 00		 push	 0
  001ac	6a 51		 push	 81			; 00000051H
  001ae	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 549  :     m_pd3dDevice->SetRenderState( D3DRS_CULLMODE, D3DCULL_CCW );

  001b3	68 01 09 00 00	 push	 2305			; 00000901H
  001b8	68 80 00 00 00	 push	 128			; 00000080H
  001bd	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 550  : 
; 551  :     pSurface->Release();

  001c2	8b 4d ac	 mov	 ecx, DWORD PTR _pSurface$[ebp]
  001c5	51		 push	 ecx
  001c6	e8 00 00 00 00	 call	 ?Release@D3DResource@@QAGKXZ ; D3DResource::Release

; 552  : 
; 553  :     // Now render the scene from the point of view of the camera
; 554  :     // with shadow compare functionality enabled
; 555  : 
; 556  :     // Clear the main view
; 557  :     m_pd3dDevice->Clear( 0L, NULL, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER|D3DCLEAR_STENCIL, 0xff400000, 1.0f, 0L );

  001cb	6a 00		 push	 0
  001cd	68 00 00 80 3f	 push	 1065353216		; 3f800000H
  001d2	68 00 00 40 ff	 push	 -12582912		; ff400000H
  001d7	68 f3 00 00 00	 push	 243			; 000000f3H
  001dc	6a 00		 push	 0
  001de	6a 00		 push	 0
  001e0	e8 00 00 00 00	 call	 ?Clear@D3DDevice@@SGJKPBU_D3DRECT@@KKMK@Z ; D3DDevice::Clear

; 558  :     m_pd3dDevice->SetTransform( D3DTS_VIEW, &m_matView );

  001e5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001e8	81 c2 b0 02 00
	00		 add	 edx, 688		; 000002b0H
  001ee	52		 push	 edx
  001ef	6a 00		 push	 0
  001f1	e8 00 00 00 00	 call	 ?SetTransform@D3DDevice@@SGJW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; D3DDevice::SetTransform

; 559  :     m_pd3dDevice->SetTransform( D3DTS_PROJECTION, &m_matProj );

  001f6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001f9	05 10 02 00 00	 add	 eax, 528		; 00000210H
  001fe	50		 push	 eax
  001ff	6a 01		 push	 1
  00201	e8 00 00 00 00	 call	 ?SetTransform@D3DDevice@@SGJW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; D3DDevice::SetTransform

; 560  : 
; 561  :     // Set shadowbuffer state
; 562  :     m_pd3dDevice->SetRenderState( D3DRS_SHADOWFUNC, D3DCMP_GREATER );

  00206	68 04 02 00 00	 push	 516			; 00000204H
  0020b	68 89 00 00 00	 push	 137			; 00000089H
  00210	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 563  : 
; 564  :     // Set shadowbuffer texture
; 565  :     m_pd3dDevice->SetTexture( 1, m_pShadowBufferDepth );

  00215	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00218	8b 91 98 04 00
	00		 mov	 edx, DWORD PTR [ecx+1176]
  0021e	52		 push	 edx
  0021f	6a 01		 push	 1
  00221	e8 00 00 00 00	 call	 ?SetTexture@D3DDevice@@SGJKPAUD3DBaseTexture@@@Z ; D3DDevice::SetTexture

; 566  :     m_pd3dDevice->SetTextureStageState( 1, D3DTSS_ADDRESSU, D3DTADDRESS_BORDER );

  00226	6a 04		 push	 4
  00228	6a 00		 push	 0
  0022a	6a 01		 push	 1
  0022c	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 567  :     m_pd3dDevice->SetTextureStageState( 1, D3DTSS_ADDRESSV, D3DTADDRESS_BORDER );

  00231	6a 04		 push	 4
  00233	6a 01		 push	 1
  00235	6a 01		 push	 1
  00237	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 568  :     m_pd3dDevice->SetTextureStageState( 1, D3DTSS_BORDERCOLOR, 0xffffffff );

  0023c	6a ff		 push	 -1
  0023e	6a 1d		 push	 29			; 0000001dH
  00240	6a 01		 push	 1
  00242	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 569  :     m_pd3dDevice->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );

  00247	6a 02		 push	 2
  00249	6a 03		 push	 3
  0024b	6a 01		 push	 1
  0024d	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 570  :     m_pd3dDevice->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_LINEAR );

  00252	6a 02		 push	 2
  00254	6a 04		 push	 4
  00256	6a 01		 push	 1
  00258	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 571  : 
; 572  :     // Set the shadowbuffer pixel shader
; 573  :     m_pd3dDevice->SetPixelShader( m_dwShadowBufPS );

  0025d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00260	8b 88 c0 04 00
	00		 mov	 ecx, DWORD PTR [eax+1216]
  00266	51		 push	 ecx
  00267	e8 00 00 00 00	 call	 ?SetPixelShader@D3DDevice@@SGJK@Z ; D3DDevice::SetPixelShader

; 574  : 
; 575  :     // Render the objects in the scene 
; 576  :     m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_SELECTARG1 );

  0026c	6a 02		 push	 2
  0026e	6a 0c		 push	 12			; 0000000cH
  00270	6a 00		 push	 0
  00272	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 577  :     m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_TEXTURE );

  00277	6a 02		 push	 2
  00279	6a 0e		 push	 14			; 0000000eH
  0027b	6a 00		 push	 0
  0027d	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 578  : 
; 579  :     DisplaySBObject( &m_FloorObj );

  00282	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00285	81 c2 40 03 00
	00		 add	 edx, 832		; 00000340H
  0028b	52		 push	 edx
  0028c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0028f	e8 00 00 00 00	 call	 ?DisplaySBObject@CXBoxSample@@QAEJPAVCXObject@@@Z ; CXBoxSample::DisplaySBObject

; 580  :     DisplaySBObject( &m_Obj );

  00294	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00297	05 b0 03 00 00	 add	 eax, 944		; 000003b0H
  0029c	50		 push	 eax
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a0	e8 00 00 00 00	 call	 ?DisplaySBObject@CXBoxSample@@QAEJPAVCXObject@@@Z ; CXBoxSample::DisplaySBObject

; 581  : 
; 582  :     // Reset shadowbuffer state
; 583  :     m_pd3dDevice->SetPixelShader( NULL );

  002a5	6a 00		 push	 0
  002a7	e8 00 00 00 00	 call	 ?SetPixelShader@D3DDevice@@SGJK@Z ; D3DDevice::SetPixelShader

; 584  :     m_pd3dDevice->SetTexture( 1, NULL );

  002ac	6a 00		 push	 0
  002ae	6a 01		 push	 1
  002b0	e8 00 00 00 00	 call	 ?SetTexture@D3DDevice@@SGJKPAUD3DBaseTexture@@@Z ; D3DDevice::SetTexture

; 585  :     m_pd3dDevice->SetRenderState(D3DRS_SHADOWFUNC, D3DCMP_NEVER );

  002b5	68 00 02 00 00	 push	 512			; 00000200H
  002ba	68 89 00 00 00	 push	 137			; 00000089H
  002bf	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 586  : 
; 587  :     // Draw the light object
; 588  :     m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_SELECTARG1 );

  002c4	6a 02		 push	 2
  002c6	6a 0c		 push	 12			; 0000000cH
  002c8	6a 00		 push	 0
  002ca	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 589  :     m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_DIFFUSE );

  002cf	6a 00		 push	 0
  002d1	6a 0e		 push	 14			; 0000000eH
  002d3	6a 00		 push	 0
  002d5	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 590  :     m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1 );

  002da	6a 02		 push	 2
  002dc	6a 10		 push	 16			; 00000010H
  002de	6a 00		 push	 0
  002e0	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 591  :     m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG1, D3DTA_DIFFUSE );

  002e5	6a 00		 push	 0
  002e7	6a 12		 push	 18			; 00000012H
  002e9	6a 00		 push	 0
  002eb	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 592  :     m_pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );

  002f0	6a 01		 push	 1
  002f2	6a 3b		 push	 59			; 0000003bH
  002f4	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 593  :     m_pd3dDevice->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_SRCALPHA );

  002f9	68 02 03 00 00	 push	 770			; 00000302H
  002fe	6a 3e		 push	 62			; 0000003eH
  00300	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 594  :     m_pd3dDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );

  00305	6a 01		 push	 1
  00307	6a 3f		 push	 63			; 0000003fH
  00309	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 595  :     m_pd3dDevice->SetRenderState( D3DRS_LIGHTING, FALSE );

  0030e	6a 00		 push	 0
  00310	6a 5c		 push	 92			; 0000005cH
  00312	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 596  :     m_pd3dDevice->SetRenderState( D3DRS_CULLMODE, D3DCULL_NONE );

  00317	6a 00		 push	 0
  00319	68 80 00 00 00	 push	 128			; 00000080H
  0031e	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 597  :     m_LightObj.Render( OBJ_NOMCALCS );

  00323	68 00 00 01 00	 push	 65536			; 00010000H
  00328	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0032b	81 c1 20 04 00
	00		 add	 ecx, 1056		; 00000420H
  00331	e8 00 00 00 00	 call	 ?Render@CXObject@@QAEXH@Z ; CXObject::Render

; 598  :     m_pd3dDevice->SetRenderState( D3DRS_CULLMODE, D3DCULL_CCW );

  00336	68 01 09 00 00	 push	 2305			; 00000901H
  0033b	68 80 00 00 00	 push	 128			; 00000080H
  00340	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 599  :     m_pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, FALSE );

  00345	6a 00		 push	 0
  00347	6a 3b		 push	 59			; 0000003bH
  00349	e8 00 00 00 00	 call	 ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ; D3DDevice::SetRenderState

; 600  :     m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

  0034e	6a 01		 push	 1
  00350	6a 10		 push	 16			; 00000010H
  00352	6a 00		 push	 0
  00354	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 601  : 
; 602  :     // Draw light frustrum
; 603  :     if( m_bDrawFrustum )

  00359	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0035c	83 b9 d4 04 00
	00 00		 cmp	 DWORD PTR [ecx+1236], 0
  00363	0f 84 91 00 00
	00		 je	 $L20892

; 604  :     {
; 605  :         m_pd3dDevice->SetTexture( 1, NULL );

  00369	6a 00		 push	 0
  0036b	6a 01		 push	 1
  0036d	e8 00 00 00 00	 call	 ?SetTexture@D3DDevice@@SGJKPAUD3DBaseTexture@@@Z ; D3DDevice::SetTexture

; 606  :         m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP,   D3DTOP_SELECTARG1 );

  00372	6a 02		 push	 2
  00374	6a 0c		 push	 12			; 0000000cH
  00376	6a 00		 push	 0
  00378	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 607  :         m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_DIFFUSE );

  0037d	6a 00		 push	 0
  0037f	6a 0e		 push	 14			; 0000000eH
  00381	6a 00		 push	 0
  00383	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 608  :         m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP,   D3DTOP_DISABLE );

  00388	6a 01		 push	 1
  0038a	6a 10		 push	 16			; 00000010H
  0038c	6a 00		 push	 0
  0038e	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 609  :         m_pd3dDevice->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_DISABLE );

  00393	6a 01		 push	 1
  00395	6a 0c		 push	 12			; 0000000cH
  00397	6a 01		 push	 1
  00399	e8 00 00 00 00	 call	 ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; D3DDevice::SetTextureStageState

; 610  : 
; 611  :         D3DXMATRIX matIdentity;

  0039e	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _matIdentity$20893[ebp]
  003a4	e8 00 00 00 00	 call	 ??0XGMATRIX@@QAE@XZ	; XGMATRIX::XGMATRIX

; 612  :         D3DXMatrixIdentity( &matIdentity );

  003a9	8d 95 50 ff ff
	ff		 lea	 edx, DWORD PTR _matIdentity$20893[ebp]
  003af	52		 push	 edx
  003b0	e8 00 00 00 00	 call	 ?XGMatrixIdentity@@YGPAUXGMATRIX@@PAU1@@Z ; XGMatrixIdentity

; 613  :         m_pd3dDevice->SetTransform( D3DTS_WORLD, &matIdentity );

  003b5	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _matIdentity$20893[ebp]
  003bb	50		 push	 eax
  003bc	6a 06		 push	 6
  003be	e8 00 00 00 00	 call	 ?SetTransform@D3DDevice@@SGJW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; D3DDevice::SetTransform

; 614  :         m_pd3dDevice->SetVertexShader( D3DFVF_XYZ|D3DFVF_DIFFUSE );

  003c3	6a 42		 push	 66			; 00000042H
  003c5	e8 00 00 00 00	 call	 ?SetVertexShader@D3DDevice@@SGJK@Z ; D3DDevice::SetVertexShader

; 615  :         m_pd3dDevice->DrawPrimitiveUP( D3DPT_LINELIST, 4, g_vFrustumLines, 
; 616  :                                        sizeof(g_vFrustumLines[0]) );

  003ca	6a 10		 push	 16			; 00000010H
  003cc	68 00 00 00 00	 push	 OFFSET FLAT:?g_vFrustumLines@@3PAULINEVERTEX@@A
  003d1	6a 04		 push	 4
  003d3	6a 02		 push	 2
  003d5	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@D3DDevice@@SGJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; D3DDevice::DrawPrimitiveUP

; 617  : 
; 618  :         m_pd3dDevice->DrawVerticesUP( D3DPT_LINELOOP, 4, g_vFrustumLines, 
; 619  :                                       sizeof(g_vFrustumLines[0])*2 );

  003da	6a 20		 push	 32			; 00000020H
  003dc	68 00 00 00 00	 push	 OFFSET FLAT:?g_vFrustumLines@@3PAULINEVERTEX@@A
  003e1	6a 04		 push	 4
  003e3	6a 03		 push	 3
  003e5	e8 00 00 00 00	 call	 ?DrawVerticesUP@D3DDevice@@SGJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; D3DDevice::DrawVerticesUP

; 620  : 
; 621  :         m_pd3dDevice->DrawVerticesUP( D3DPT_LINELOOP, 4, g_vFrustumLines+1, 
; 622  :                                       sizeof(g_vFrustumLines[0])*2 );

  003ea	6a 20		 push	 32			; 00000020H
  003ec	68 10 00 00 00	 push	 OFFSET FLAT:?g_vFrustumLines@@3PAULINEVERTEX@@A+16
  003f1	6a 04		 push	 4
  003f3	6a 03		 push	 3
  003f5	e8 00 00 00 00	 call	 ?DrawVerticesUP@D3DDevice@@SGJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; D3DDevice::DrawVerticesUP
$L20892:

; 623  :     }
; 624  : 
; 625  :     // Show title, frame rate, and help
; 626  :     if( m_bDrawHelp )

  003fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003fd	83 b9 f0 01 00
	00 00		 cmp	 DWORD PTR [ecx+496], 0
  00404	74 24		 je	 SHORT $L20894

; 627  :     {
; 628  :         m_Help.Render( &m_Font, g_HelpCallouts, NUM_HELP_CALLOUTS );

  00406	6a 0a		 push	 10			; 0000000aH
  00408	68 00 00 00 00	 push	 OFFSET FLAT:?g_HelpCallouts@@3PAUXBHELP_CALLOUT@@A ; g_HelpCallouts
  0040d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00410	81 c2 84 01 00
	00		 add	 edx, 388		; 00000184H
  00416	52		 push	 edx
  00417	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0041a	81 c1 d4 01 00
	00		 add	 ecx, 468		; 000001d4H
  00420	e8 00 00 00 00	 call	 ?Render@CXBHelp@@QAEJPAVCXBFont@@PAUXBHELP_CALLOUT@@K@Z ; CXBHelp::Render

; 629  :     }
; 630  :     else

  00425	e9 cb 00 00 00	 jmp	 $L20895
$L20894:

; 631  :     {
; 632  :         m_Font.Begin();

  0042a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0042d	81 c1 84 01 00
	00		 add	 ecx, 388		; 00000184H
  00433	e8 00 00 00 00	 call	 ?Begin@CXBFont@@QAEJXZ	; CXBFont::Begin

; 633  :         m_Font.DrawText(  64, 50, 0xffffffff, L"ShadowBuffer" );

  00438	6a 00		 push	 0
  0043a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1BK@IOLMKPIG@?$AAS?$AAh?$AAa?$AAd?$AAo?$AAw?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
  0043f	6a ff		 push	 -1
  00441	68 00 00 48 42	 push	 1112014848		; 42480000H
  00446	68 00 00 80 42	 push	 1115684864		; 42800000H
  0044b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0044e	81 c1 84 01 00
	00		 add	 ecx, 388		; 00000184H
  00454	e8 00 00 00 00	 call	 ?DrawText@CXBFont@@QAEJMMKPBGK@Z ; CXBFont::DrawText

; 634  :         m_Font.DrawText( 640-64, 50, 0xffffff00, m_strFrameRate, XBFONT_RIGHT );

  00459	6a 01		 push	 1
  0045b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0045e	83 c0 70	 add	 eax, 112		; 00000070H
  00461	50		 push	 eax
  00462	68 00 ff ff ff	 push	 -256			; ffffff00H
  00467	68 00 00 48 42	 push	 1112014848		; 42480000H
  0046c	68 00 00 10 44	 push	 1141899264		; 44100000H
  00471	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00474	81 c1 84 01 00
	00		 add	 ecx, 388		; 00000184H
  0047a	e8 00 00 00 00	 call	 ?DrawText@CXBFont@@QAEJMMKPBGK@Z ; CXBFont::DrawText

; 635  : 
; 636  :         // Show buffer description
; 637  :         WCHAR strBuffer[80];
; 638  :         swprintf( strBuffer, L"Type: %s, ZOffset: %.01f, ZOffset Slope Scale: %.01f", 
; 639  :                              g_fShadowBufferDesc[m_dwShadowBufferType], 
; 640  :                              m_fZOffset, m_fZSlopeScale );

  0047f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00482	d9 81 cc 04 00
	00		 fld	 DWORD PTR [ecx+1228]
  00488	83 ec 08	 sub	 esp, 8
  0048b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0048e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00491	d9 82 c8 04 00
	00		 fld	 DWORD PTR [edx+1224]
  00497	83 ec 08	 sub	 esp, 8
  0049a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0049d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004a0	8b 88 c4 04 00
	00		 mov	 ecx, DWORD PTR [eax+1220]
  004a6	c1 e1 04	 shl	 ecx, 4
  004a9	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:?g_fShadowBufferDesc@@3PAY07GA ; g_fShadowBufferDesc
  004af	51		 push	 ecx
  004b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1GK@FIOADJAH@?$AAT?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?0?$AA?5?$AAZ?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF@
  004b5	8d 95 b0 fe ff
	ff		 lea	 edx, DWORD PTR _strBuffer$20897[ebp]
  004bb	52		 push	 edx
  004bc	e8 00 00 00 00	 call	 _swprintf
  004c1	83 c4 1c	 add	 esp, 28			; 0000001cH

; 641  :         m_Font.DrawText( 64, 70, 0xffffffff, strBuffer );

  004c4	6a 00		 push	 0
  004c6	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _strBuffer$20897[ebp]
  004cc	50		 push	 eax
  004cd	6a ff		 push	 -1
  004cf	68 00 00 8c 42	 push	 1116471296		; 428c0000H
  004d4	68 00 00 80 42	 push	 1115684864		; 42800000H
  004d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004dc	81 c1 84 01 00
	00		 add	 ecx, 388		; 00000184H
  004e2	e8 00 00 00 00	 call	 ?DrawText@CXBFont@@QAEJMMKPBGK@Z ; CXBFont::DrawText

; 642  : 
; 643  :         m_Font.End();

  004e7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004ea	81 c1 84 01 00
	00		 add	 ecx, 388		; 00000184H
  004f0	e8 00 00 00 00	 call	 ?End@CXBFont@@QAEJXZ	; CXBFont::End
$L20895:

; 644  :     }
; 645  : 
; 646  :     // Present the scene
; 647  :     m_pd3dDevice->Present( NULL, NULL, NULL, NULL );

  004f5	6a 00		 push	 0
  004f7	6a 00		 push	 0
  004f9	6a 00		 push	 0
  004fb	6a 00		 push	 0
  004fd	e8 00 00 00 00	 call	 ?Present@D3DDevice@@SGJPBUtagRECT@@0PAX1@Z ; D3DDevice::Present

; 648  : 
; 649  :     return S_OK;

  00502	33 c0		 xor	 eax, eax

; 650  : }

  00504	8b e5		 mov	 esp, ebp
  00506	5d		 pop	 ebp
  00507	8b e3		 mov	 esp, ebx
  00509	5b		 pop	 ebx
  0050a	c3		 ret	 0
?Render@CXBoxSample@@UAEJXZ ENDP			; CXBoxSample::Render
_TEXT	ENDS
EXTRN	_D3DDevice_Swap@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\public\xdk\inc\d3d8.h
;	COMDAT ?Present@D3DDevice@@SGJPBUtagRECT@@0PAX1@Z
_TEXT	SEGMENT
_pSourceRect$ = 8
_pDestRect$ = 12
_pUnused$ = 16
_pUnused2$ = 20
?Present@D3DDevice@@SGJPBUtagRECT@@0PAX1@Z PROC NEAR	; D3DDevice::Present, COMDAT

; 2023 : D3DMINLINE HRESULT WINAPI D3DDevice::Present(CONST RECT *pSourceRect, CONST RECT *pDestRect, void *pUnused, void *pUnused2) { D3DDevice_Swap(0); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 00		 push	 0
  00005	e8 00 00 00 00	 call	 _D3DDevice_Swap@4
  0000a	33 c0		 xor	 eax, eax
  0000c	5d		 pop	 ebp
  0000d	c2 10 00	 ret	 16			; 00000010H
?Present@D3DDevice@@SGJPBUtagRECT@@0PAX1@Z ENDP		; D3DDevice::Present
_TEXT	ENDS
EXTRN	_D3DDevice_SetRenderTarget@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetRenderTarget@D3DDevice@@SGJPAUD3DSurface@@0@Z
_TEXT	SEGMENT
_pRenderTarget$ = 8
_pNewZStencil$ = 12
?SetRenderTarget@D3DDevice@@SGJPAUD3DSurface@@0@Z PROC NEAR ; D3DDevice::SetRenderTarget, COMDAT

; 2042 : D3DMINLINE HRESULT WINAPI D3DDevice::SetRenderTarget(D3DSurface *pRenderTarget, D3DSurface *pNewZStencil) { D3DDevice_SetRenderTarget(pRenderTarget, pNewZStencil); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR _pNewZStencil$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pRenderTarget$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _D3DDevice_SetRenderTarget@8
  00010	33 c0		 xor	 eax, eax
  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?SetRenderTarget@D3DDevice@@SGJPAUD3DSurface@@0@Z ENDP	; D3DDevice::SetRenderTarget
_TEXT	ENDS
EXTRN	_D3DDevice_Clear@24:NEAR
; Function compile flags: /Odt
;	COMDAT ?Clear@D3DDevice@@SGJKPBU_D3DRECT@@KKMK@Z
_TEXT	SEGMENT
_Count$ = 8
_pRects$ = 12
_Flags$ = 16
_Color$ = 20
_Z$ = 24
_Stencil$ = 28
?Clear@D3DDevice@@SGJKPBU_D3DRECT@@KKMK@Z PROC NEAR	; D3DDevice::Clear, COMDAT

; 2047 : D3DMINLINE HRESULT WINAPI D3DDevice::Clear(DWORD Count, CONST D3DRECT *pRects, DWORD Flags, D3DCOLOR Color, float Z, DWORD Stencil) { D3DDevice_Clear(Count, pRects, Flags, Color, Z, Stencil); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 1c	 mov	 eax, DWORD PTR _Stencil$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 18	 mov	 ecx, DWORD PTR _Z$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 14	 mov	 edx, DWORD PTR _Color$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 10	 mov	 eax, DWORD PTR _Flags$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _pRects$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR _Count$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 _D3DDevice_Clear@24
  00020	33 c0		 xor	 eax, eax
  00022	5d		 pop	 ebp
  00023	c2 18 00	 ret	 24			; 00000018H
?Clear@D3DDevice@@SGJKPBU_D3DRECT@@KKMK@Z ENDP		; D3DDevice::Clear
_TEXT	ENDS
EXTRN	_D3DDevice_SetViewport@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetViewport@D3DDevice@@SGJPBU_D3DVIEWPORT8@@@Z
_TEXT	SEGMENT
_pViewport$ = 8
?SetViewport@D3DDevice@@SGJPBU_D3DVIEWPORT8@@@Z PROC NEAR ; D3DDevice::SetViewport, COMDAT

; 2051 : D3DMINLINE HRESULT WINAPI D3DDevice::SetViewport(CONST D3DVIEWPORT8 *pViewport) { D3DDIRTY_VIEWPORT(); D3DDevice_SetViewport(pViewport); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _pViewport$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _D3DDevice_SetViewport@4
  0000c	33 c0		 xor	 eax, eax
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?SetViewport@D3DDevice@@SGJPBU_D3DVIEWPORT8@@@Z ENDP	; D3DDevice::SetViewport
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z
_TEXT	SEGMENT
_State$ = 8
_Value$ = 12
?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z PROC NEAR ; D3DDevice::SetRenderState, COMDAT

; 2061 : D3DMINLINE HRESULT WINAPI D3DDevice::SetRenderState(D3DRENDERSTATETYPE State, DWORD Value) { D3DDIRTY_RENDERSTATE(State); D3DDevice_SetRenderState(State, Value); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR _Value$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _State$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState@8
  00010	33 c0		 xor	 eax, eax
  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?SetRenderState@D3DDevice@@SGJW4_D3DRENDERSTATETYPE@@K@Z ENDP ; D3DDevice::SetRenderState
_TEXT	ENDS
EXTRN	_D3D__RenderState:BYTE
EXTRN	_D3D__DirtyFlags:DWORD
EXTRN	_D3DDevice_SetRenderState_ParameterCheck@8:NEAR
EXTRN	@D3DDevice_SetRenderState_Simple@8:NEAR
EXTRN	_D3DDevice_SetRenderState_PSTextureModes@4:NEAR
EXTRN	_D3DDevice_SetRenderState_VertexBlend@4:NEAR
EXTRN	_D3DDevice_SetRenderState_FogColor@4:NEAR
EXTRN	_D3DDevice_SetRenderState_FillMode@4:NEAR
EXTRN	_D3DDevice_SetRenderState_BackFillMode@4:NEAR
EXTRN	_D3DDevice_SetRenderState_TwoSidedLighting@4:NEAR
EXTRN	_D3DDevice_SetRenderState_NormalizeNormals@4:NEAR
EXTRN	_D3DDevice_SetRenderState_ZEnable@4:NEAR
EXTRN	_D3DDevice_SetRenderState_StencilEnable@4:NEAR
EXTRN	_D3DDevice_SetRenderState_StencilFail@4:NEAR
EXTRN	_D3DDevice_SetRenderState_CullMode@4:NEAR
EXTRN	_D3DDevice_SetRenderState_FrontFace@4:NEAR
EXTRN	_D3DDevice_SetRenderState_TextureFactor@4:NEAR
EXTRN	_D3DDevice_SetRenderState_ZBias@4:NEAR
EXTRN	_D3DDevice_SetRenderState_LogicOp@4:NEAR
EXTRN	_D3DDevice_SetRenderState_EdgeAntiAlias@4:NEAR
EXTRN	_D3DDevice_SetRenderState_MultiSampleAntiAlias@4:NEAR
EXTRN	_D3DDevice_SetRenderState_MultiSampleMask@4:NEAR
EXTRN	_D3DDevice_SetRenderState_MultiSampleMode@4:NEAR
EXTRN	_D3DDevice_SetRenderState_MultiSampleRenderTargetMode@4:NEAR
EXTRN	_D3DDevice_SetRenderState_ShadowFunc@4:NEAR
EXTRN	_D3DDevice_SetRenderState_LineWidth@4:NEAR
EXTRN	_D3DDevice_SetRenderState_Dxt1NoiseEnable@4:NEAR
EXTRN	_D3DDevice_SetRenderState_YuvEnable@4:NEAR
EXTRN	_D3DDevice_SetRenderState_OcclusionCullEnable@4:NEAR
EXTRN	_D3DDevice_SetRenderState_StencilCullEnable@4:NEAR
EXTRN	_D3DDevice_SetRenderState_RopZCmpAlwaysRead@4:NEAR
EXTRN	_D3DDevice_SetRenderState_RopZRead@4:NEAR
EXTRN	_D3DDevice_SetRenderState_DoNotCullUncompressed@4:NEAR
; Function compile flags: /Odt
;	COMDAT _D3DDevice_SetRenderState@8
_TEXT	SEGMENT
_State$ = 8
_Value$ = 12
_D3DDevice_SetRenderState@8 PROC NEAR			; COMDAT

; 1650 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1651 :         #ifdef _DEBUG
; 1652 :         if (D3DDevice_SetRenderState_ParameterCheck(State, Value) != S_OK)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _Value$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _State$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_ParameterCheck@8
  00010	85 c0		 test	 eax, eax
  00012	74 05		 je	 SHORT $L7926

; 1653 :             return;

  00014	e9 bb 02 00 00	 jmp	 $L7924
$L7926:

; 1654 :         #endif
; 1655 : 
; 1656 :         if (State < D3DRS_SIMPLE_MAX)

  00019	83 7d 08 52	 cmp	 DWORD PTR _State$[ebp], 82 ; 00000052H
  0001d	7d 24		 jge	 SHORT $L7927

; 1657 :         {
; 1658 :             D3DDevice_SetRenderState_Simple(D3DSIMPLERENDERSTATEENCODE[State], Value);

  0001f	8b 55 0c	 mov	 edx, DWORD PTR _Value$[ebp]
  00022	8b 45 08	 mov	 eax, DWORD PTR _State$[ebp]
  00025	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _D3DSIMPLERENDERSTATEENCODE[eax*4]
  0002c	e8 00 00 00 00	 call	 @D3DDevice_SetRenderState_Simple@8

; 1659 :             #if !D3DCOMPILE_PUREDEVICE
; 1660 :             D3D__RenderState[State] = Value;

  00031	8b 4d 08	 mov	 ecx, DWORD PTR _State$[ebp]
  00034	8b 55 0c	 mov	 edx, DWORD PTR _Value$[ebp]
  00037	89 14 8d 00 00
	00 00		 mov	 DWORD PTR _D3D__RenderState[ecx*4], edx

; 1661 :             #endif
; 1662 :         }
; 1663 :         else if (State < D3DRS_DEFERRED_MAX)

  0003e	e9 91 02 00 00	 jmp	 $L7924
$L7927:
  00043	83 7d 08 75	 cmp	 DWORD PTR _State$[ebp], 117 ; 00000075H
  00047	7d 28		 jge	 SHORT $L7929

; 1664 :         {
; 1665 :             D3D__DirtyFlags |= D3DDIRTYFROMRENDERSTATE[State - D3DRS_SIMPLE_MAX];

  00049	8b 45 08	 mov	 eax, DWORD PTR _State$[ebp]
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _D3D__DirtyFlags
  00052	0b 0c 85 b8 fe
	ff ff		 or	 ecx, DWORD PTR _D3DDIRTYFROMRENDERSTATE[eax*4-328]
  00059	89 0d 00 00 00
	00		 mov	 DWORD PTR _D3D__DirtyFlags, ecx

; 1666 :             D3D__RenderState[State] = Value;

  0005f	8b 55 08	 mov	 edx, DWORD PTR _State$[ebp]
  00062	8b 45 0c	 mov	 eax, DWORD PTR _Value$[ebp]
  00065	89 04 95 00 00
	00 00		 mov	 DWORD PTR _D3D__RenderState[edx*4], eax

; 1667 :         }
; 1668 :         else if (State == D3DRS_PSTEXTUREMODES)

  0006c	e9 63 02 00 00	 jmp	 $L7924
$L7929:
  00071	83 7d 08 75	 cmp	 DWORD PTR _State$[ebp], 117 ; 00000075H
  00075	75 0e		 jne	 SHORT $L7931

; 1669 :         {
; 1670 :             D3DDevice_SetRenderState_PSTextureModes(Value);

  00077	8b 4d 0c	 mov	 ecx, DWORD PTR _Value$[ebp]
  0007a	51		 push	 ecx
  0007b	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_PSTextureModes@4

; 1671 :         }
; 1672 :         else if (State == D3DRS_VERTEXBLEND)

  00080	e9 4f 02 00 00	 jmp	 $L7924
$L7931:
  00085	83 7d 08 76	 cmp	 DWORD PTR _State$[ebp], 118 ; 00000076H
  00089	75 0e		 jne	 SHORT $L7933

; 1673 :         {
; 1674 :             D3DDevice_SetRenderState_VertexBlend(Value);

  0008b	8b 55 0c	 mov	 edx, DWORD PTR _Value$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_VertexBlend@4

; 1675 :         }
; 1676 :         else if (State == D3DRS_FOGCOLOR)

  00094	e9 3b 02 00 00	 jmp	 $L7924
$L7933:
  00099	83 7d 08 77	 cmp	 DWORD PTR _State$[ebp], 119 ; 00000077H
  0009d	75 0e		 jne	 SHORT $L7935

; 1677 :         {
; 1678 :             D3DDevice_SetRenderState_FogColor(Value);

  0009f	8b 45 0c	 mov	 eax, DWORD PTR _Value$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_FogColor@4

; 1679 :         }
; 1680 :         else if (State == D3DRS_FILLMODE)

  000a8	e9 27 02 00 00	 jmp	 $L7924
$L7935:
  000ad	83 7d 08 78	 cmp	 DWORD PTR _State$[ebp], 120 ; 00000078H
  000b1	75 0e		 jne	 SHORT $L7937

; 1681 :         {
; 1682 :             D3DDevice_SetRenderState_FillMode(Value);

  000b3	8b 4d 0c	 mov	 ecx, DWORD PTR _Value$[ebp]
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_FillMode@4

; 1683 :         }
; 1684 :         else if (State == D3DRS_BACKFILLMODE)

  000bc	e9 13 02 00 00	 jmp	 $L7924
$L7937:
  000c1	83 7d 08 79	 cmp	 DWORD PTR _State$[ebp], 121 ; 00000079H
  000c5	75 0e		 jne	 SHORT $L7939

; 1685 :         {
; 1686 :             D3DDevice_SetRenderState_BackFillMode(Value);

  000c7	8b 55 0c	 mov	 edx, DWORD PTR _Value$[ebp]
  000ca	52		 push	 edx
  000cb	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_BackFillMode@4

; 1687 :         }
; 1688 :         else if (State == D3DRS_TWOSIDEDLIGHTING)

  000d0	e9 ff 01 00 00	 jmp	 $L7924
$L7939:
  000d5	83 7d 08 7a	 cmp	 DWORD PTR _State$[ebp], 122 ; 0000007aH
  000d9	75 0e		 jne	 SHORT $L7941

; 1689 :         {
; 1690 :             D3DDevice_SetRenderState_TwoSidedLighting(Value);

  000db	8b 45 0c	 mov	 eax, DWORD PTR _Value$[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_TwoSidedLighting@4

; 1691 :         }
; 1692 :         else if (State == D3DRS_NORMALIZENORMALS)

  000e4	e9 eb 01 00 00	 jmp	 $L7924
$L7941:
  000e9	83 7d 08 7b	 cmp	 DWORD PTR _State$[ebp], 123 ; 0000007bH
  000ed	75 0e		 jne	 SHORT $L7943

; 1693 :         {
; 1694 :             D3DDevice_SetRenderState_NormalizeNormals(Value);

  000ef	8b 4d 0c	 mov	 ecx, DWORD PTR _Value$[ebp]
  000f2	51		 push	 ecx
  000f3	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_NormalizeNormals@4

; 1695 :         }
; 1696 :         else if (State == D3DRS_ZENABLE)

  000f8	e9 d7 01 00 00	 jmp	 $L7924
$L7943:
  000fd	83 7d 08 7c	 cmp	 DWORD PTR _State$[ebp], 124 ; 0000007cH
  00101	75 0e		 jne	 SHORT $L7945

; 1697 :         {
; 1698 :             D3DDevice_SetRenderState_ZEnable(Value);

  00103	8b 55 0c	 mov	 edx, DWORD PTR _Value$[ebp]
  00106	52		 push	 edx
  00107	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_ZEnable@4

; 1699 :         }
; 1700 :         else if (State == D3DRS_STENCILENABLE)

  0010c	e9 c3 01 00 00	 jmp	 $L7924
$L7945:
  00111	83 7d 08 7d	 cmp	 DWORD PTR _State$[ebp], 125 ; 0000007dH
  00115	75 0e		 jne	 SHORT $L7947

; 1701 :         {
; 1702 :             D3DDevice_SetRenderState_StencilEnable(Value);

  00117	8b 45 0c	 mov	 eax, DWORD PTR _Value$[ebp]
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_StencilEnable@4

; 1703 :         }
; 1704 :         else if (State == D3DRS_STENCILFAIL)

  00120	e9 af 01 00 00	 jmp	 $L7924
$L7947:
  00125	83 7d 08 7e	 cmp	 DWORD PTR _State$[ebp], 126 ; 0000007eH
  00129	75 0e		 jne	 SHORT $L7949

; 1705 :         {
; 1706 :             D3DDevice_SetRenderState_StencilFail(Value);

  0012b	8b 4d 0c	 mov	 ecx, DWORD PTR _Value$[ebp]
  0012e	51		 push	 ecx
  0012f	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_StencilFail@4

; 1707 :         }
; 1708 :         else if (State == D3DRS_CULLMODE)

  00134	e9 9b 01 00 00	 jmp	 $L7924
$L7949:
  00139	81 7d 08 80 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 128 ; 00000080H
  00140	75 0e		 jne	 SHORT $L7951

; 1709 :         {
; 1710 :             D3DDevice_SetRenderState_CullMode(Value);

  00142	8b 55 0c	 mov	 edx, DWORD PTR _Value$[ebp]
  00145	52		 push	 edx
  00146	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_CullMode@4

; 1711 :         }
; 1712 :         else if (State == D3DRS_FRONTFACE)

  0014b	e9 84 01 00 00	 jmp	 $L7924
$L7951:
  00150	83 7d 08 7f	 cmp	 DWORD PTR _State$[ebp], 127 ; 0000007fH
  00154	75 0e		 jne	 SHORT $L7953

; 1713 :         {
; 1714 :             D3DDevice_SetRenderState_FrontFace(Value);

  00156	8b 45 0c	 mov	 eax, DWORD PTR _Value$[ebp]
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_FrontFace@4

; 1715 :         }
; 1716 :         else if (State == D3DRS_TEXTUREFACTOR)

  0015f	e9 70 01 00 00	 jmp	 $L7924
$L7953:
  00164	81 7d 08 81 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 129 ; 00000081H
  0016b	75 0e		 jne	 SHORT $L7955

; 1717 :         {
; 1718 :             D3DDevice_SetRenderState_TextureFactor(Value);

  0016d	8b 4d 0c	 mov	 ecx, DWORD PTR _Value$[ebp]
  00170	51		 push	 ecx
  00171	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_TextureFactor@4

; 1719 :         }
; 1720 :         else if (State == D3DRS_ZBIAS)

  00176	e9 59 01 00 00	 jmp	 $L7924
$L7955:
  0017b	81 7d 08 82 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 130 ; 00000082H
  00182	75 0e		 jne	 SHORT $L7957

; 1721 :         {
; 1722 :             D3DDevice_SetRenderState_ZBias(Value);

  00184	8b 55 0c	 mov	 edx, DWORD PTR _Value$[ebp]
  00187	52		 push	 edx
  00188	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_ZBias@4

; 1723 :         }
; 1724 :         else if (State == D3DRS_LOGICOP)

  0018d	e9 42 01 00 00	 jmp	 $L7924
$L7957:
  00192	81 7d 08 83 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 131 ; 00000083H
  00199	75 0e		 jne	 SHORT $L7959

; 1725 :         {
; 1726 :             D3DDevice_SetRenderState_LogicOp(Value);

  0019b	8b 45 0c	 mov	 eax, DWORD PTR _Value$[ebp]
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_LogicOp@4

; 1727 :         }
; 1728 :         else if (State == D3DRS_EDGEANTIALIAS)

  001a4	e9 2b 01 00 00	 jmp	 $L7924
$L7959:
  001a9	81 7d 08 84 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 132 ; 00000084H
  001b0	75 0e		 jne	 SHORT $L7961

; 1729 :         {
; 1730 :             D3DDevice_SetRenderState_EdgeAntiAlias(Value);

  001b2	8b 4d 0c	 mov	 ecx, DWORD PTR _Value$[ebp]
  001b5	51		 push	 ecx
  001b6	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_EdgeAntiAlias@4

; 1731 :         }
; 1732 :         else if (State == D3DRS_MULTISAMPLEANTIALIAS)

  001bb	e9 14 01 00 00	 jmp	 $L7924
$L7961:
  001c0	81 7d 08 85 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 133 ; 00000085H
  001c7	75 0e		 jne	 SHORT $L7963

; 1733 :         {
; 1734 :             D3DDevice_SetRenderState_MultiSampleAntiAlias(Value);

  001c9	8b 55 0c	 mov	 edx, DWORD PTR _Value$[ebp]
  001cc	52		 push	 edx
  001cd	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_MultiSampleAntiAlias@4

; 1735 :         }
; 1736 :         else if (State == D3DRS_MULTISAMPLEMASK)

  001d2	e9 fd 00 00 00	 jmp	 $L7924
$L7963:
  001d7	81 7d 08 86 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 134 ; 00000086H
  001de	75 0e		 jne	 SHORT $L7965

; 1737 :         {
; 1738 :             D3DDevice_SetRenderState_MultiSampleMask(Value);

  001e0	8b 45 0c	 mov	 eax, DWORD PTR _Value$[ebp]
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_MultiSampleMask@4

; 1739 :         }
; 1740 :         else if (State == D3DRS_MULTISAMPLEMODE)

  001e9	e9 e6 00 00 00	 jmp	 $L7924
$L7965:
  001ee	81 7d 08 87 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 135 ; 00000087H
  001f5	75 0e		 jne	 SHORT $L7967

; 1741 :         {
; 1742 :             D3DDevice_SetRenderState_MultiSampleMode(Value);

  001f7	8b 4d 0c	 mov	 ecx, DWORD PTR _Value$[ebp]
  001fa	51		 push	 ecx
  001fb	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_MultiSampleMode@4

; 1743 :         }
; 1744 :         else if (State == D3DRS_MULTISAMPLERENDERTARGETMODE)

  00200	e9 cf 00 00 00	 jmp	 $L7924
$L7967:
  00205	81 7d 08 88 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 136 ; 00000088H
  0020c	75 0e		 jne	 SHORT $L7969

; 1745 :         {
; 1746 :             D3DDevice_SetRenderState_MultiSampleRenderTargetMode(Value);

  0020e	8b 55 0c	 mov	 edx, DWORD PTR _Value$[ebp]
  00211	52		 push	 edx
  00212	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_MultiSampleRenderTargetMode@4

; 1747 :         }
; 1748 :         else if (State == D3DRS_SHADOWFUNC)

  00217	e9 b8 00 00 00	 jmp	 $L7924
$L7969:
  0021c	81 7d 08 89 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 137 ; 00000089H
  00223	75 0e		 jne	 SHORT $L7971

; 1749 :         {
; 1750 :             D3DDevice_SetRenderState_ShadowFunc(Value);

  00225	8b 45 0c	 mov	 eax, DWORD PTR _Value$[ebp]
  00228	50		 push	 eax
  00229	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_ShadowFunc@4

; 1751 :         }
; 1752 :         else if (State == D3DRS_LINEWIDTH)

  0022e	e9 a1 00 00 00	 jmp	 $L7924
$L7971:
  00233	81 7d 08 8a 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 138 ; 0000008aH
  0023a	75 0e		 jne	 SHORT $L7973

; 1753 :         {
; 1754 :             D3DDevice_SetRenderState_LineWidth(Value);

  0023c	8b 4d 0c	 mov	 ecx, DWORD PTR _Value$[ebp]
  0023f	51		 push	 ecx
  00240	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_LineWidth@4

; 1755 :         }
; 1756 :         else if (State == D3DRS_DXT1NOISEENABLE)

  00245	e9 8a 00 00 00	 jmp	 $L7924
$L7973:
  0024a	81 7d 08 8b 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 139 ; 0000008bH
  00251	75 0b		 jne	 SHORT $L7975

; 1757 :         {
; 1758 :             D3DDevice_SetRenderState_Dxt1NoiseEnable(Value);

  00253	8b 55 0c	 mov	 edx, DWORD PTR _Value$[ebp]
  00256	52		 push	 edx
  00257	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_Dxt1NoiseEnable@4

; 1759 :         }
; 1760 :         else if (State == D3DRS_YUVENABLE)

  0025c	eb 76		 jmp	 SHORT $L7924
$L7975:
  0025e	81 7d 08 8c 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 140 ; 0000008cH
  00265	75 0b		 jne	 SHORT $L7977

; 1761 :         {
; 1762 :             D3DDevice_SetRenderState_YuvEnable(Value);

  00267	8b 45 0c	 mov	 eax, DWORD PTR _Value$[ebp]
  0026a	50		 push	 eax
  0026b	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_YuvEnable@4

; 1763 :         }
; 1764 :         else if (State == D3DRS_OCCLUSIONCULLENABLE)

  00270	eb 62		 jmp	 SHORT $L7924
$L7977:
  00272	81 7d 08 8d 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 141 ; 0000008dH
  00279	75 0b		 jne	 SHORT $L7979

; 1765 :         {
; 1766 :             D3DDevice_SetRenderState_OcclusionCullEnable(Value);

  0027b	8b 4d 0c	 mov	 ecx, DWORD PTR _Value$[ebp]
  0027e	51		 push	 ecx
  0027f	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_OcclusionCullEnable@4

; 1767 :         }
; 1768 :         else if (State == D3DRS_STENCILCULLENABLE)

  00284	eb 4e		 jmp	 SHORT $L7924
$L7979:
  00286	81 7d 08 8e 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 142 ; 0000008eH
  0028d	75 0b		 jne	 SHORT $L7981

; 1769 :         {
; 1770 :             D3DDevice_SetRenderState_StencilCullEnable(Value);

  0028f	8b 55 0c	 mov	 edx, DWORD PTR _Value$[ebp]
  00292	52		 push	 edx
  00293	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_StencilCullEnable@4

; 1771 :         }
; 1772 :         else if (State == D3DRS_ROPZCMPALWAYSREAD)

  00298	eb 3a		 jmp	 SHORT $L7924
$L7981:
  0029a	81 7d 08 8f 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 143 ; 0000008fH
  002a1	75 0b		 jne	 SHORT $L7983

; 1773 :         {
; 1774 :             D3DDevice_SetRenderState_RopZCmpAlwaysRead(Value);

  002a3	8b 45 0c	 mov	 eax, DWORD PTR _Value$[ebp]
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_RopZCmpAlwaysRead@4

; 1775 :         }
; 1776 :         else if (State == D3DRS_ROPZREAD)

  002ac	eb 26		 jmp	 SHORT $L7924
$L7983:
  002ae	81 7d 08 90 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 144 ; 00000090H
  002b5	75 0b		 jne	 SHORT $L7985

; 1777 :         {
; 1778 :             D3DDevice_SetRenderState_RopZRead(Value);

  002b7	8b 4d 0c	 mov	 ecx, DWORD PTR _Value$[ebp]
  002ba	51		 push	 ecx
  002bb	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_RopZRead@4

; 1779 :         }
; 1780 :         else if (State == D3DRS_DONOTCULLUNCOMPRESSED)

  002c0	eb 12		 jmp	 SHORT $L7924
$L7985:
  002c2	81 7d 08 91 00
	00 00		 cmp	 DWORD PTR _State$[ebp], 145 ; 00000091H
  002c9	75 09		 jne	 SHORT $L7924

; 1781 :         {
; 1782 :             D3DDevice_SetRenderState_DoNotCullUncompressed(Value);

  002cb	8b 55 0c	 mov	 edx, DWORD PTR _Value$[ebp]
  002ce	52		 push	 edx
  002cf	e8 00 00 00 00	 call	 _D3DDevice_SetRenderState_DoNotCullUncompressed@4
$L7924:

; 1783 :         }
; 1784 :     }

  002d4	5d		 pop	 ebp
  002d5	c2 08 00	 ret	 8
_D3DDevice_SetRenderState@8 ENDP
_TEXT	ENDS
EXTRN	_D3DDevice_SetTexture@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetTexture@D3DDevice@@SGJKPAUD3DBaseTexture@@@Z
_TEXT	SEGMENT
_Stage$ = 8
_pTexture$ = 12
?SetTexture@D3DDevice@@SGJKPAUD3DBaseTexture@@@Z PROC NEAR ; D3DDevice::SetTexture, COMDAT

; 2073 : D3DMINLINE HRESULT WINAPI D3DDevice::SetTexture(DWORD Stage, D3DBaseTexture *pTexture) { D3DDIRTY_TEXTURE(Stage); D3DDevice_SetTexture(Stage, pTexture); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR _pTexture$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _Stage$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _D3DDevice_SetTexture@8
  00010	33 c0		 xor	 eax, eax
  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?SetTexture@D3DDevice@@SGJKPAUD3DBaseTexture@@@Z ENDP	; D3DDevice::SetTexture
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z
_TEXT	SEGMENT
_Stage$ = 8
_Type$ = 12
_Value$ = 16
?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z PROC NEAR ; D3DDevice::SetTextureStageState, COMDAT

; 2077 : D3DMINLINE HRESULT WINAPI D3DDevice::SetTextureStageState(DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD Value) { D3DDIRTY_TEXTURESTATE(Stage, Type); D3DDevice_SetTextureStageState(Stage, Type, Value); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 10	 mov	 eax, DWORD PTR _Value$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _Type$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _Stage$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _D3DDevice_SetTextureStageState@12
  00014	33 c0		 xor	 eax, eax
  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?SetTextureStageState@D3DDevice@@SGJKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ENDP ; D3DDevice::SetTextureStageState
_TEXT	ENDS
EXTRN	_D3D__TextureState:BYTE
EXTRN	_D3DDevice_SetTextureState_ParameterCheck@12:NEAR
EXTRN	_D3DDevice_SetTextureState_BumpEnv@12:NEAR
EXTRN	_D3DDevice_SetTextureState_TexCoordIndex@8:NEAR
EXTRN	_D3DDevice_SetTextureState_BorderColor@8:NEAR
EXTRN	_D3DDevice_SetTextureState_ColorKeyColor@8:NEAR
; Function compile flags: /Odt
;	COMDAT _D3DDevice_SetTextureStageState@12
_TEXT	SEGMENT
_Stage$ = 8
_Type$ = 12
_Value$ = 16
_D3DDevice_SetTextureStageState@12 PROC NEAR		; COMDAT

; 1789 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1790 :         #ifdef _DEBUG
; 1791 :         if (D3DDevice_SetTextureState_ParameterCheck(Stage, Type, Value) != S_OK)

  00003	8b 45 10	 mov	 eax, DWORD PTR _Value$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _Type$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _Stage$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _D3DDevice_SetTextureState_ParameterCheck@12
  00014	85 c0		 test	 eax, eax
  00016	74 05		 je	 SHORT $L7994

; 1792 :             return;

  00018	e9 ff 00 00 00	 jmp	 $L7992
$L7994:

; 1793 :         #endif
; 1794 :         
; 1795 :         if (Type < D3DTSS_DEFERRED_TEXTURE_STATE_MAX)

  0001d	83 7d 0c 0c	 cmp	 DWORD PTR _Type$[ebp], 12 ; 0000000cH
  00021	7d 30		 jge	 SHORT $L7995

; 1796 :         {
; 1797 :             D3D__DirtyFlags |= (D3DDIRTYFLAG_TEXTURE_STATE_0 << Stage);

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _Stage$[ebp]
  0002b	d3 e0		 shl	 eax, cl
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _D3D__DirtyFlags
  00033	0b c8		 or	 ecx, eax
  00035	89 0d 00 00 00
	00		 mov	 DWORD PTR _D3D__DirtyFlags, ecx

; 1798 :             D3D__TextureState[Stage][Type] = Value;

  0003b	8b 55 08	 mov	 edx, DWORD PTR _Stage$[ebp]
  0003e	c1 e2 07	 shl	 edx, 7
  00041	8b 45 0c	 mov	 eax, DWORD PTR _Type$[ebp]
  00044	8b 4d 10	 mov	 ecx, DWORD PTR _Value$[ebp]
  00047	89 8c 82 00 00
	00 00		 mov	 DWORD PTR _D3D__TextureState[edx+eax*4], ecx

; 1799 :         }
; 1800 :         else if (Type == D3DTSS_COLOROP)

  0004e	e9 c9 00 00 00	 jmp	 $L7992
$L7995:
  00053	83 7d 0c 0c	 cmp	 DWORD PTR _Type$[ebp], 12 ; 0000000cH
  00057	75 36		 jne	 SHORT $L7997

; 1801 :         {
; 1802 :             // Only D3DTOP_BUMPENVMAP and D3DTOP_BUMPENVMAPLUMINANCE require the
; 1803 :             // sign flags and shader program to be recomputed:
; 1804 : 
; 1805 :             D3D__DirtyFlags |= (Value < D3DTOP_BUMPENVMAP)
; 1806 :                              ? (D3DDIRTYFLAG_COMBINERS)
; 1807 :                              : (D3DDIRTYFLAG_COMBINERS | 
; 1808 :                                 D3DDIRTYFLAG_SHADER_STAGE_PROGRAM | 
; 1809 :                                 D3DDIRTYFLAG_TEXTURE_STATE);

  00059	83 7d 10 19	 cmp	 DWORD PTR _Value$[ebp], 25 ; 00000019H
  0005d	1b d2		 sbb	 edx, edx
  0005f	81 e2 f1 bf ff
	ff		 and	 edx, -16399		; ffffbff1H
  00065	81 c2 0f 48 00
	00		 add	 edx, 18447		; 0000480fH
  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR _D3D__DirtyFlags
  00070	0b c2		 or	 eax, edx
  00072	a3 00 00 00 00	 mov	 DWORD PTR _D3D__DirtyFlags, eax

; 1810 : 
; 1811 :             D3D__TextureState[Stage][Type] = Value;

  00077	8b 4d 08	 mov	 ecx, DWORD PTR _Stage$[ebp]
  0007a	c1 e1 07	 shl	 ecx, 7
  0007d	8b 55 0c	 mov	 edx, DWORD PTR _Type$[ebp]
  00080	8b 45 10	 mov	 eax, DWORD PTR _Value$[ebp]
  00083	89 84 91 00 00
	00 00		 mov	 DWORD PTR _D3D__TextureState[ecx+edx*4], eax

; 1812 :         }
; 1813 :         else if (Type < D3DTSS_DEFERRED_MAX)

  0008a	e9 8d 00 00 00	 jmp	 $L7992
$L7997:
  0008f	83 7d 0c 16	 cmp	 DWORD PTR _Type$[ebp], 22 ; 00000016H
  00093	7d 2b		 jge	 SHORT $L7999

; 1814 :         {
; 1815 :             D3D__DirtyFlags |= D3DDIRTYFROMTEXTURESTATE[Type];

  00095	8b 4d 0c	 mov	 ecx, DWORD PTR _Type$[ebp]
  00098	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _D3D__DirtyFlags
  0009e	0b 14 8d 00 00
	00 00		 or	 edx, DWORD PTR _D3DDIRTYFROMTEXTURESTATE[ecx*4]
  000a5	89 15 00 00 00
	00		 mov	 DWORD PTR _D3D__DirtyFlags, edx

; 1816 :             D3D__TextureState[Stage][Type] = Value;

  000ab	8b 45 08	 mov	 eax, DWORD PTR _Stage$[ebp]
  000ae	c1 e0 07	 shl	 eax, 7
  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _Type$[ebp]
  000b4	8b 55 10	 mov	 edx, DWORD PTR _Value$[ebp]
  000b7	89 94 88 00 00
	00 00		 mov	 DWORD PTR _D3D__TextureState[eax+ecx*4], edx

; 1817 :         }
; 1818 :         else if (Type == D3DTSS_TEXCOORDINDEX)

  000be	eb 5c		 jmp	 SHORT $L7992
$L7999:
  000c0	83 7d 0c 1c	 cmp	 DWORD PTR _Type$[ebp], 28 ; 0000001cH
  000c4	75 0f		 jne	 SHORT $L8001

; 1819 :         {
; 1820 :             D3DDevice_SetTextureState_TexCoordIndex(Stage, Value);

  000c6	8b 45 10	 mov	 eax, DWORD PTR _Value$[ebp]
  000c9	50		 push	 eax
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _Stage$[ebp]
  000cd	51		 push	 ecx
  000ce	e8 00 00 00 00	 call	 _D3DDevice_SetTextureState_TexCoordIndex@8

; 1821 :         }
; 1822 :         else if (Type == D3DTSS_BORDERCOLOR)

  000d3	eb 47		 jmp	 SHORT $L7992
$L8001:
  000d5	83 7d 0c 1d	 cmp	 DWORD PTR _Type$[ebp], 29 ; 0000001dH
  000d9	75 0f		 jne	 SHORT $L8003

; 1823 :         {
; 1824 :             D3DDevice_SetTextureState_BorderColor(Stage, Value);

  000db	8b 55 10	 mov	 edx, DWORD PTR _Value$[ebp]
  000de	52		 push	 edx
  000df	8b 45 08	 mov	 eax, DWORD PTR _Stage$[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _D3DDevice_SetTextureState_BorderColor@8

; 1825 :         }
; 1826 :         else if (Type == D3DTSS_COLORKEYCOLOR)

  000e8	eb 32		 jmp	 SHORT $L7992
$L8003:
  000ea	83 7d 0c 1e	 cmp	 DWORD PTR _Type$[ebp], 30 ; 0000001eH
  000ee	75 0f		 jne	 SHORT $L8005

; 1827 :         {
; 1828 :             D3DDevice_SetTextureState_ColorKeyColor(Stage, Value);

  000f0	8b 4d 10	 mov	 ecx, DWORD PTR _Value$[ebp]
  000f3	51		 push	 ecx
  000f4	8b 55 08	 mov	 edx, DWORD PTR _Stage$[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 _D3DDevice_SetTextureState_ColorKeyColor@8

; 1829 :         }
; 1830 :         else if ((Type >= D3DTSS_BUMPENVMAT00) && (Type <= D3DTSS_BUMPENVLOFFSET))

  000fd	eb 1d		 jmp	 SHORT $L7992
$L8005:
  000ff	83 7d 0c 16	 cmp	 DWORD PTR _Type$[ebp], 22 ; 00000016H
  00103	7c 17		 jl	 SHORT $L7992
  00105	83 7d 0c 1b	 cmp	 DWORD PTR _Type$[ebp], 27 ; 0000001bH
  00109	7f 11		 jg	 SHORT $L7992

; 1831 :         {
; 1832 :             D3DDevice_SetTextureState_BumpEnv(Stage, Type, Value);

  0010b	8b 45 10	 mov	 eax, DWORD PTR _Value$[ebp]
  0010e	50		 push	 eax
  0010f	8b 4d 0c	 mov	 ecx, DWORD PTR _Type$[ebp]
  00112	51		 push	 ecx
  00113	8b 55 08	 mov	 edx, DWORD PTR _Stage$[ebp]
  00116	52		 push	 edx
  00117	e8 00 00 00 00	 call	 _D3DDevice_SetTextureState_BumpEnv@12
$L7992:

; 1833 :         }
; 1834 :     }

  0011c	5d		 pop	 ebp
  0011d	c2 0c 00	 ret	 12			; 0000000cH
_D3DDevice_SetTextureStageState@12 ENDP
_TEXT	ENDS
EXTRN	_D3DDevice_DrawVerticesUP@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?DrawPrimitiveUP@D3DDevice@@SGJW4_D3DPRIMITIVETYPE@@IPBXI@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8
_PrimitiveCount$ = 12
_pVertexStreamZeroData$ = 16
_VertexStreamZeroStride$ = 20
?DrawPrimitiveUP@D3DDevice@@SGJW4_D3DPRIMITIVETYPE@@IPBXI@Z PROC NEAR ; D3DDevice::DrawPrimitiveUP, COMDAT

; 2081 : D3DMINLINE HRESULT WINAPI D3DDevice::DrawPrimitiveUP(D3DPRIMITIVETYPE PrimitiveType, UINT PrimitiveCount, CONST void *pVertexStreamZeroData, UINT VertexStreamZeroStride) { D3DDevice_DrawVerticesUP(PrimitiveType, D3DVERTEXCOUNT(PrimitiveType, PrimitiveCount), pVertexStreamZeroData, VertexStreamZeroStride); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 14	 mov	 eax, DWORD PTR _VertexStreamZeroStride$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _pVertexStreamZeroData$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _PrimitiveType$[ebp]
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _PrimitiveCount$[ebp]
  00011	0f af 04 d5 00
	00 00 00	 imul	 eax, DWORD PTR _D3DPRIMITIVETOVERTEXCOUNT[edx*8]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _PrimitiveType$[ebp]
  0001c	03 04 cd 04 00
	00 00		 add	 eax, DWORD PTR _D3DPRIMITIVETOVERTEXCOUNT[ecx*8+4]
  00023	50		 push	 eax
  00024	8b 55 08	 mov	 edx, DWORD PTR _PrimitiveType$[ebp]
  00027	52		 push	 edx
  00028	e8 00 00 00 00	 call	 _D3DDevice_DrawVerticesUP@16
  0002d	33 c0		 xor	 eax, eax
  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
?DrawPrimitiveUP@D3DDevice@@SGJW4_D3DPRIMITIVETYPE@@IPBXI@Z ENDP ; D3DDevice::DrawPrimitiveUP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?DrawVerticesUP@D3DDevice@@SGJW4_D3DPRIMITIVETYPE@@IPBXI@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8
_VertexCount$ = 12
_pVertexStreamZeroData$ = 16
_VertexStreamZeroStride$ = 20
?DrawVerticesUP@D3DDevice@@SGJW4_D3DPRIMITIVETYPE@@IPBXI@Z PROC NEAR ; D3DDevice::DrawVerticesUP, COMDAT

; 2085 : D3DMINLINE HRESULT WINAPI D3DDevice::DrawVerticesUP(D3DPRIMITIVETYPE PrimitiveType, UINT VertexCount, CONST void *pVertexStreamZeroData, UINT VertexStreamZeroStride) { D3DDevice_DrawVerticesUP(PrimitiveType, VertexCount, pVertexStreamZeroData, VertexStreamZeroStride); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 14	 mov	 eax, DWORD PTR _VertexStreamZeroStride$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _pVertexStreamZeroData$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _VertexCount$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _PrimitiveType$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _D3DDevice_DrawVerticesUP@16
  00018	33 c0		 xor	 eax, eax
  0001a	5d		 pop	 ebp
  0001b	c2 10 00	 ret	 16			; 00000010H
?DrawVerticesUP@D3DDevice@@SGJW4_D3DPRIMITIVETYPE@@IPBXI@Z ENDP ; D3DDevice::DrawVerticesUP
_TEXT	ENDS
EXTRN	_D3DDevice_SetVertexShader@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetVertexShader@D3DDevice@@SGJK@Z
_TEXT	SEGMENT
_Handle$ = 8
?SetVertexShader@D3DDevice@@SGJK@Z PROC NEAR		; D3DDevice::SetVertexShader, COMDAT

; 2089 : D3DMINLINE HRESULT WINAPI D3DDevice::SetVertexShader(DWORD Handle) { D3DDIRTY_VERTEXSHADER(); D3DDevice_SetVertexShader(Handle); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _Handle$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _D3DDevice_SetVertexShader@4
  0000c	33 c0		 xor	 eax, eax
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?SetVertexShader@D3DDevice@@SGJK@Z ENDP			; D3DDevice::SetVertexShader
_TEXT	ENDS
EXTRN	_D3DDevice_SetPixelShader@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetPixelShader@D3DDevice@@SGJK@Z
_TEXT	SEGMENT
_Handle$ = 8
?SetPixelShader@D3DDevice@@SGJK@Z PROC NEAR		; D3DDevice::SetPixelShader, COMDAT

; 2110 : D3DMINLINE HRESULT WINAPI D3DDevice::SetPixelShader(DWORD Handle) { D3DDIRTY_PIXELSHADER(); D3DDevice_SetPixelShader(Handle); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _Handle$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _D3DDevice_SetPixelShader@4
  0000c	33 c0		 xor	 eax, eax
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?SetPixelShader@D3DDevice@@SGJK@Z ENDP			; D3DDevice::SetPixelShader
_TEXT	ENDS
EXTRN	_D3DTexture_GetSurfaceLevel@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetSurfaceLevel@D3DTexture@@QAGJIPAPAUD3DSurface@@@Z
_TEXT	SEGMENT
_this$ = 8
_Level$ = 12
_ppSurfaceLevel$ = 16
?GetSurfaceLevel@D3DTexture@@QAGJIPAPAUD3DSurface@@@Z PROC NEAR ; D3DTexture::GetSurfaceLevel, COMDAT

; 2315 : D3DMINLINE HRESULT WINAPI D3DTexture::GetSurfaceLevel(UINT Level, D3DSurface **ppSurfaceLevel) { return D3DTexture_GetSurfaceLevel(this, Level, ppSurfaceLevel); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 10	 mov	 eax, DWORD PTR _ppSurfaceLevel$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _Level$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _D3DTexture_GetSurfaceLevel@12
  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?GetSurfaceLevel@D3DTexture@@QAGJIPAPAUD3DSurface@@@Z ENDP ; D3DTexture::GetSurfaceLevel
; Function compile flags: /Odt
; File c:\xbox\private\atg\samples\common\include\xbutil.h
_TEXT	ENDS
;	COMDAT ?FtoDW@@YGKM@Z
_TEXT	SEGMENT
_f$ = 8
?FtoDW@@YGKM@Z PROC NEAR				; FtoDW, COMDAT

; 38   : inline DWORD FtoDW( FLOAT f ) { return *((DWORD*)&f); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _f$[ebp]
  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?FtoDW@@YGKM@Z ENDP					; FtoDW
_TEXT	ENDS
PUBLIC	??0XGVECTOR4@@QAE@XZ				; XGVECTOR4::XGVECTOR4
PUBLIC	?SetVertexShader@CXModel@@QAEXK@Z		; CXModel::SetVertexShader
PUBLIC	?SetVertexShaderConstant@D3DDevice@@SGJHPBXK@Z	; D3DDevice::SetVertexShaderConstant
PUBLIC	?SetPixelShaderConstant@D3DDevice@@SGJKPBXK@Z	; D3DDevice::SetPixelShaderConstant
EXTRN	?Render@CXModel@@QAEKXZ:NEAR			; CXModel::Render
EXTRN	?CrunchMatrix@CXObject@@QAEXXZ:NEAR		; CXObject::CrunchMatrix
EXTRN	_XGVec3Transform@12:NEAR
EXTRN	_XGMatrixTranspose@8:NEAR
EXTRN	?Render@CXBMesh@@QAEJPAUD3DDevice@@K@Z:NEAR	; CXBMesh::Render
; Function compile flags: /Odt
; File c:\xbox\private\atg\samples\graphics\shadowbuffer\shadowbuffer.cpp
;	COMDAT ?DisplaySBObject@CXBoxSample@@QAEJPAVCXObject@@@Z
_TEXT	SEGMENT
_fAmbient$ = -240
_v4LocalLightPos$ = -224
_wtmat$ = -208
_wvpmat$ = -144
_m$ = -80
_this$ = -4
_pObject$ = 8
?DisplaySBObject@CXBoxSample@@QAEJPAVCXObject@@@Z PROC NEAR ; CXBoxSample::DisplaySBObject, COMDAT
; _this$ = ecx

; 664  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 665  :     D3DXMATRIX m, wvpmat, wtmat;

  0001f	8d 4d b0	 lea	 ecx, DWORD PTR _m$[ebp]
  00022	e8 00 00 00 00	 call	 ??0XGMATRIX@@QAE@XZ	; XGMATRIX::XGMATRIX
  00027	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _wvpmat$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0XGMATRIX@@QAE@XZ	; XGMATRIX::XGMATRIX
  00032	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _wtmat$[ebp]
  00038	e8 00 00 00 00	 call	 ??0XGMATRIX@@QAE@XZ	; XGMATRIX::XGMATRIX

; 666  : 
; 667  :     pObject->CrunchMatrix();                    // Get object orientation matrix

  0003d	8b 4b 08	 mov	 ecx, DWORD PTR _pObject$[ebx]
  00040	e8 00 00 00 00	 call	 ?CrunchMatrix@CXObject@@QAEXXZ ; CXObject::CrunchMatrix

; 668  : 
; 669  :     // WVP matrix
; 670  :     D3DXMatrixMultiply( &m, &pObject->m_matOrientation, &m_matView );

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	05 b0 02 00 00	 add	 eax, 688		; 000002b0H
  0004d	50		 push	 eax
  0004e	8b 4b 08	 mov	 ecx, DWORD PTR _pObject$[ebx]
  00051	83 c1 20	 add	 ecx, 32			; 00000020H
  00054	51		 push	 ecx
  00055	8d 55 b0	 lea	 edx, DWORD PTR _m$[ebp]
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 _XGMatrixMultiply@12

; 671  :     D3DXMatrixMultiply( &wvpmat, &m, &m_matProj );

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	05 10 02 00 00	 add	 eax, 528		; 00000210H
  00066	50		 push	 eax
  00067	8d 4d b0	 lea	 ecx, DWORD PTR _m$[ebp]
  0006a	51		 push	 ecx
  0006b	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR _wvpmat$[ebp]
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 _XGMatrixMultiply@12

; 672  :     D3DXMatrixTranspose( &wvpmat, &wvpmat );

  00077	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _wvpmat$[ebp]
  0007d	50		 push	 eax
  0007e	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _wvpmat$[ebp]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _XGMatrixTranspose@8

; 673  :     m_pd3dDevice->SetVertexShaderConstant( 0, &wvpmat, 4 );

  0008a	6a 04		 push	 4
  0008c	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR _wvpmat$[ebp]
  00092	52		 push	 edx
  00093	6a 00		 push	 0
  00095	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@D3DDevice@@SGJHPBXK@Z ; D3DDevice::SetVertexShaderConstant

; 674  : 
; 675  :     // WT matrix
; 676  :     D3DXMatrixMultiply( &wtmat, &pObject->m_matOrientation, &m_matTexture );

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	05 00 03 00 00	 add	 eax, 768		; 00000300H
  000a2	50		 push	 eax
  000a3	8b 4b 08	 mov	 ecx, DWORD PTR _pObject$[ebx]
  000a6	83 c1 20	 add	 ecx, 32			; 00000020H
  000a9	51		 push	 ecx
  000aa	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR _wtmat$[ebp]
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 _XGMatrixMultiply@12

; 677  :     D3DXMatrixTranspose( &wtmat, &wtmat);

  000b6	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _wtmat$[ebp]
  000bc	50		 push	 eax
  000bd	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _wtmat$[ebp]
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 _XGMatrixTranspose@8

; 678  :     m_pd3dDevice->SetVertexShaderConstant( 4, &wtmat, 4 );

  000c9	6a 04		 push	 4
  000cb	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR _wtmat$[ebp]
  000d1	52		 push	 edx
  000d2	6a 04		 push	 4
  000d4	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@D3DDevice@@SGJHPBXK@Z ; D3DDevice::SetVertexShaderConstant

; 679  : 
; 680  :     // Light position
; 681  :     D3DXVECTOR4 v4LocalLightPos;

  000d9	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _v4LocalLightPos$[ebp]
  000df	e8 00 00 00 00	 call	 ??0XGVECTOR4@@QAE@XZ	; XGVECTOR4::XGVECTOR4

; 682  :     D3DXMatrixInverse( &m, NULL, &pObject->m_matOrientation );

  000e4	8b 43 08	 mov	 eax, DWORD PTR _pObject$[ebx]
  000e7	83 c0 20	 add	 eax, 32			; 00000020H
  000ea	50		 push	 eax
  000eb	6a 00		 push	 0
  000ed	8d 4d b0	 lea	 ecx, DWORD PTR _m$[ebp]
  000f0	51		 push	 ecx
  000f1	e8 00 00 00 00	 call	 _XGMatrixInverse@12

; 683  :     D3DXVec3Transform( &v4LocalLightPos, &m_LightObj.m_vPosition, &m );

  000f6	8d 55 b0	 lea	 edx, DWORD PTR _m$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	05 28 04 00 00	 add	 eax, 1064		; 00000428H
  00102	50		 push	 eax
  00103	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _v4LocalLightPos$[ebp]
  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 _XGVec3Transform@12

; 684  :     m_pd3dDevice->SetVertexShaderConstant( 8, &v4LocalLightPos, 1 );

  0010f	6a 01		 push	 1
  00111	8d 95 20 ff ff
	ff		 lea	 edx, DWORD PTR _v4LocalLightPos$[ebp]
  00117	52		 push	 edx
  00118	6a 08		 push	 8
  0011a	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@D3DDevice@@SGJHPBXK@Z ; D3DDevice::SetVertexShaderConstant

; 685  : 
; 686  :     // Ambient color
; 687  :     float fAmbient[4] = { 0.5f, 0.5f, 0.5f, 1.0f };

  0011f	c7 85 10 ff ff
	ff 00 00 00 3f	 mov	 DWORD PTR _fAmbient$[ebp], 1056964608 ; 3f000000H
  00129	c7 85 14 ff ff
	ff 00 00 00 3f	 mov	 DWORD PTR _fAmbient$[ebp+4], 1056964608 ; 3f000000H
  00133	c7 85 18 ff ff
	ff 00 00 00 3f	 mov	 DWORD PTR _fAmbient$[ebp+8], 1056964608 ; 3f000000H
  0013d	c7 85 1c ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _fAmbient$[ebp+12], 1065353216 ; 3f800000H

; 688  :     m_pd3dDevice->SetPixelShaderConstant( 0, fAmbient, 1 );

  00147	6a 01		 push	 1
  00149	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _fAmbient$[ebp]
  0014f	50		 push	 eax
  00150	6a 00		 push	 0
  00152	e8 00 00 00 00	 call	 ?SetPixelShaderConstant@D3DDevice@@SGJKPBXK@Z ; D3DDevice::SetPixelShaderConstant

; 689  : 
; 690  :     // Send the object
; 691  :     if( pObject->m_Model )

  00157	8b 4b 08	 mov	 ecx, DWORD PTR _pObject$[ebx]
  0015a	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0015d	74 2c		 je	 SHORT $L20909

; 692  :     {
; 693  :         pObject->m_Model->SetVertexShader( m_dwShadowBufVS );         // Set shadow buffer vshader

  0015f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00162	8b 82 bc 04 00
	00		 mov	 eax, DWORD PTR [edx+1212]
  00168	50		 push	 eax
  00169	8b 4b 08	 mov	 ecx, DWORD PTR _pObject$[ebx]
  0016c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0016e	e8 00 00 00 00	 call	 ?SetVertexShader@CXModel@@QAEXK@Z ; CXModel::SetVertexShader

; 694  :         pObject->m_Model->Render();

  00173	8b 53 08	 mov	 edx, DWORD PTR _pObject$[ebx]
  00176	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00178	e8 00 00 00 00	 call	 ?Render@CXModel@@QAEKXZ	; CXModel::Render

; 695  :         pObject->m_Model->SetVertexShader( 0 );                       // Restore to fvf vshader

  0017d	6a 00		 push	 0
  0017f	8b 43 08	 mov	 eax, DWORD PTR _pObject$[ebx]
  00182	8b 08		 mov	 ecx, DWORD PTR [eax]
  00184	e8 00 00 00 00	 call	 ?SetVertexShader@CXModel@@QAEXK@Z ; CXModel::SetVertexShader

; 696  :     }
; 697  :     else    // Object has an XBG model

  00189	eb 23		 jmp	 SHORT $L20910
$L20909:

; 698  :     {
; 699  :         g_pd3dDevice->SetVertexShader( m_dwShadowBufVS );

  0018b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018e	8b 91 bc 04 00
	00		 mov	 edx, DWORD PTR [ecx+1212]
  00194	52		 push	 edx
  00195	e8 00 00 00 00	 call	 ?SetVertexShader@D3DDevice@@SGJK@Z ; D3DDevice::SetVertexShader

; 700  :         pObject->m_pXBMesh->Render( m_pd3dDevice, XBMESH_NOFVF );

  0019a	6a 40		 push	 64			; 00000040H
  0019c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019f	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  001a2	51		 push	 ecx
  001a3	8b 53 08	 mov	 edx, DWORD PTR _pObject$[ebx]
  001a6	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001a9	e8 00 00 00 00	 call	 ?Render@CXBMesh@@QAEJPAUD3DDevice@@K@Z ; CXBMesh::Render
$L20910:

; 701  :     }       
; 702  : 
; 703  :     return S_OK;

  001ae	33 c0		 xor	 eax, eax

; 704  : }

  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	8b e3		 mov	 esp, ebx
  001b5	5b		 pop	 ebx
  001b6	c2 04 00	 ret	 4
?DisplaySBObject@CXBoxSample@@QAEJPAVCXObject@@@Z ENDP	; CXBoxSample::DisplaySBObject
_TEXT	ENDS
EXTRN	_D3DDevice_SetVertexShaderConstant@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\public\xdk\inc\d3d8.h
;	COMDAT ?SetVertexShaderConstant@D3DDevice@@SGJHPBXK@Z
_TEXT	SEGMENT
_Register$ = 8
_pConstantData$ = 12
_ConstantCount$ = 16
?SetVertexShaderConstant@D3DDevice@@SGJHPBXK@Z PROC NEAR ; D3DDevice::SetVertexShaderConstant, COMDAT

; 2103 : D3DMINLINE HRESULT WINAPI D3DDevice::SetVertexShaderConstant(INT Register, CONST void *pConstantData, DWORD ConstantCount) { D3DDIRTY_VERTEXSHADERCONSTANT(Register, ConstantCount); D3DDevice_SetVertexShaderConstant(Register, pConstantData, ConstantCount); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 10	 mov	 eax, DWORD PTR _ConstantCount$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pConstantData$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _Register$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _D3DDevice_SetVertexShaderConstant@12
  00014	33 c0		 xor	 eax, eax
  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?SetVertexShaderConstant@D3DDevice@@SGJHPBXK@Z ENDP	; D3DDevice::SetVertexShaderConstant
_TEXT	ENDS
EXTRN	_D3DDevice_SetPixelShaderConstant@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetPixelShaderConstant@D3DDevice@@SGJKPBXK@Z
_TEXT	SEGMENT
_Register$ = 8
_pConstantData$ = 12
_ConstantCount$ = 16
?SetPixelShaderConstant@D3DDevice@@SGJKPBXK@Z PROC NEAR	; D3DDevice::SetPixelShaderConstant, COMDAT

; 2114 : D3DMINLINE HRESULT WINAPI D3DDevice::SetPixelShaderConstant(DWORD Register, CONST void *pConstantData, DWORD ConstantCount) { D3DDIRTY_PIXELSHADERCONSTANT(Register, ConstantCount); D3DDevice_SetPixelShaderConstant(Register, pConstantData, ConstantCount); return S_OK; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 10	 mov	 eax, DWORD PTR _ConstantCount$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pConstantData$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _Register$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _D3DDevice_SetPixelShaderConstant@12
  00014	33 c0		 xor	 eax, eax
  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?SetPixelShaderConstant@D3DDevice@@SGJKPBXK@Z ENDP	; D3DDevice::SetPixelShaderConstant
; Function compile flags: /Odt
; File c:\xbox\public\xdk\inc\xgmath.h
_TEXT	ENDS
;	COMDAT ??0XGVECTOR4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0XGVECTOR4@@QAE@XZ PROC NEAR				; XGVECTOR4::XGVECTOR4, COMDAT
; _this$ = ecx

; 139  :     XGVECTOR4() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0XGVECTOR4@@QAE@XZ ENDP				; XGVECTOR4::XGVECTOR4
; Function compile flags: /Odt
; File c:\xbox\private\atg\samples\common\include\xmodel.h
_TEXT	ENDS
;	COMDAT ?SetVertexShader@CXModel@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4
_vshader$ = 8
?SetVertexShader@CXModel@@QAEXK@Z PROC NEAR		; CXModel::SetVertexShader, COMDAT
; _this$ = ecx

; 83   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 84   : 		if(vshader==0)

  00007	83 7d 08 00	 cmp	 DWORD PTR _vshader$[ebp], 0
  0000b	75 0e		 jne	 SHORT $L20645

; 85   : 			m_dwVShader = m_dwFVF;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00016	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 86   : 		else

  00019	eb 09		 jmp	 SHORT $L20644
$L20645:

; 87   : 			m_dwVShader = vshader;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _vshader$[ebp]
  00021	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$L20644:

; 88   : 	}

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?SetVertexShader@CXModel@@QAEXK@Z ENDP			; CXModel::SetVertexShader
_TEXT	ENDS
PUBLIC	?g_vHomogenousFrustum@@3PAUXGVECTOR4@@A		; g_vHomogenousFrustum
_BSS	SEGMENT
?g_vHomogenousFrustum@@3PAUXGVECTOR4@@A DB 080H DUP (?)	; g_vHomogenousFrustum
_BSS	ENDS
END
