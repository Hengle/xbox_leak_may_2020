#pragma once
//-----------------------------------------------------------------------------
//  File: SliceTexture.h
//  Copyright (C) 2001 Microsoft Corporation
//  All rights reserved.
//
//   A set of textures generated by rendering with a tight set of
//   Znear and Zfar clipping planes that sweep across the full
//   geometric object.  Slice textures can be used for concentric
//   shell textures (good for phenomena like fur), or used by
//   SliceObject as a level-of-detail representation for complex
//   objects such as trees.
//-----------------------------------------------------------------------------
#ifdef _XBOX
#include <xtl.h>
#include <xgraphics.h>
#else
#include <d3d8.h>
#endif

#define SLICETEXTURE_MAXSLICE_LOG2 7
#define SLICETEXTURE_MAXSLICE (1 << SLICETEXTURE_MAXSLICE_LOG2)

struct CSliceTextureDrawCallback {
	virtual HRESULT Begin(bool bWorldCoords = false) = 0;	// prepare for drawing
	virtual HRESULT Draw(const D3DXVECTOR3 &vMin,			// draw parts of model that intersect with box
						 const D3DXVECTOR3 &vMax) = 0;
	virtual HRESULT End() = 0;								// cleanup
};

class CSliceTexture {
public:
	DWORD m_Width, m_Height, m_dwNumSlices;
	LPDIRECT3DTEXTURE8 m_rpTexture[SLICETEXTURE_MAXSLICE * 2 - 1];	// slices of volume texture
					// ... followed by level-of-detail textures  N/2, N/4, N/8, ... 1
	DWORD m_dwNumSlicesLOD; // number of slices in current level of detail
	float m_fLevelOfDetail;	// current LOD value
	DWORD m_iLOD;			// current integer LOD value
	float m_fLODFraction;	// fraction towards next coarser level-of-detail
	DWORD m_dwLODMax;		// maximum LOD index
	LPDIRECT3DTEXTURE8 *m_rpTextureLOD; // current level of detail pointer into m_rpSliceTexture array

	CSliceTexture();
	~CSliceTexture();
	
	// Create textures and render a series of slices using the draw callback routine.
	HRESULT GenerateSlices(
		DWORD width, 
		DWORD height, 
		DWORD dwNumSlices, 
		CSliceTextureDrawCallback *pDrawCB, 				
		D3DTEXTUREADDRESS WrapU = D3DTADDRESS_WRAP, 
		D3DTEXTUREADDRESS WrapV = D3DTADDRESS_WRAP);
	
	// fLevelOfDetail can range from 0 to log2(NumSlices)
	HRESULT SetLevelOfDetail(float fLevelOfDetail);
	HRESULT ComputeLevelOfDetailTextures();
	inline UINT LevelOfDetailCount(UINT iLOD)
	{
		return m_dwNumSlices >> iLOD;
	}
	inline UINT LevelOfDetailIndex(UINT iLOD)
	{
		UINT offset = 0;
		for (UINT i = 1; i <= iLOD; i++)
			offset += LevelOfDetailCount(i-1);
		return offset;
	}

	// Convert all slice textures to a new format
	HRESULT SetTextureFormat(D3DFORMAT fmtNew);
};


