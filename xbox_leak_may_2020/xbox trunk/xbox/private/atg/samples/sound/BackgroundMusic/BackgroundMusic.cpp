//-----------------------------------------------------------------------------
// File: BackgroundMusic.cpp
//
// Desc: The BackgroundMusic sample demonstrates how to play background WMA
//       files, combining game WMA assets with user soundtracks stored on the
//       Xbox hard drive.  Please see the documentation for this sample for
//       further information.
//
// Hist: 8.20.01 - New for October XDK
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

#include <XBApp.h>
#include <XBFont.h>
#include <XBHelp.h>
#include <xgraphics.h>
#include "dsstdfx.h"
#include "musicmanager.h"

//-----------------------------------------------------------------------------
// Callouts for labelling the gamepad on the help screen
//-----------------------------------------------------------------------------
XBHELP_CALLOUT g_HelpCallouts[] = 
{
    { XBHELP_BACK_BUTTON,  XBHELP_PLACEMENT_1, L"Display help" },
    { XBHELP_A_BUTTON,     XBHELP_PLACEMENT_1, L"Toggle playback" },
    { XBHELP_X_BUTTON,     XBHELP_PLACEMENT_2, L"Next\nsoundtrack" },
    { XBHELP_Y_BUTTON,     XBHELP_PLACEMENT_2, L"Next\nsong" },
    { XBHELP_B_BUTTON,     XBHELP_PLACEMENT_1, L"Pause playback" },
    { XBHELP_WHITE_BUTTON, XBHELP_PLACEMENT_2, L"Recreate\nMusicManager" },
    { XBHELP_BLACK_BUTTON, XBHELP_PLACEMENT_2, L"Random\nsong" },
    { XBHELP_LEFT_BUTTON,  XBHELP_PLACEMENT_2, L"Toggle\nrandom" },
    { XBHELP_RIGHT_BUTTON, XBHELP_PLACEMENT_2, L"Toggle global" },
    { XBHELP_LEFTSTICK,    XBHELP_PLACEMENT_2, L"Volume" },
};

#define NUM_HELP_CALLOUTS ( sizeof( g_HelpCallouts ) / sizeof( g_HelpCallouts[0] ) )


//-----------------------------------------------------------------------------
// Name: class CXBoxSample
// Desc: Main class to run this application. Most functionality is inherited
//       from the CXBApplication base class.
//-----------------------------------------------------------------------------
class CXBoxSample : public CXBApplication
{
public:
    CXBoxSample();

    virtual HRESULT Initialize();
    virtual HRESULT Render();
    virtual HRESULT FrameMove();

    HRESULT DownloadEffectsImage(LPCSTR pszScratchFile);    // downloads a default DSP image to the GP

    // Font and help
    CXBFont         m_Font;
    CXBHelp         m_Help;
    BOOL            m_bDrawHelp;

    LPDIRECTSOUND8  m_pDSound;                          // DirectSound object
    CMusicManager*  m_pMusicManager;                    // Music Manager
};



//-----------------------------------------------------------------------------
// Name: main()
// Desc: Entry point to the program.
//-----------------------------------------------------------------------------
VOID __cdecl main()
{
    CXBoxSample xbApp;
    if( FAILED( xbApp.Create() ) )
        return;
    xbApp.Run();
}



//-----------------------------------------------------------------------------
// Name: CXBoxSample (constructor)
// Desc: Constructor for CXBoxSample class
//-----------------------------------------------------------------------------
CXBoxSample::CXBoxSample() 
            :CXBApplication()
{
    m_bDrawHelp     = FALSE;
    m_pMusicManager = NULL;
}



//-----------------------------------------------------------------------------
// Name: DownloadEffectsImage
// Desc: Downloads an effects image to the DSP
//-----------------------------------------------------------------------------
HRESULT CXBoxSample::DownloadEffectsImage(LPCSTR pszScratchFile)
{
    HANDLE hFile;
    DWORD dwSize;
    PVOID pBuffer = NULL;
    HRESULT hr = S_OK;
    LPDSEFFECTIMAGEDESC pDesc;
    DSEFFECTIMAGELOC EffectLoc;

    // open scratch image file generated by xps2 tool
    hFile = CreateFile( pszScratchFile,
                        GENERIC_READ,
                        0,
                        NULL,
                        OPEN_EXISTING,
                        0,
                        NULL );

    if( hFile == INVALID_HANDLE_VALUE )
    {
        DWORD err;

        err = GetLastError();
        OUTPUT_DEBUG_STRING( "Failed to open the dsp image file.\n" );
        hr = HRESULT_FROM_WIN32(err);
    }

    if( SUCCEEDED(hr) )
    {
        // Determine the size of the scratch image by seeking to
        // the end of the file
        dwSize = SetFilePointer( hFile, 0, NULL, FILE_END );
        SetFilePointer(hFile, 0, NULL, FILE_BEGIN);
    
        // Allocate memory to read the scratch image from disk
        pBuffer = new BYTE[dwSize];

        // Read the image in
        DWORD dwBytesRead;
        BOOL bResult = ReadFile( hFile,
                                 pBuffer,
                                 dwSize,
                                 &dwBytesRead,
                                 0 );
        
        if( !bResult )
        {
            DWORD err;

            err = GetLastError();
            OUTPUT_DEBUG_STRING( "\n Failed to open the dsp image file.\n" );
            hr = HRESULT_FROM_WIN32(err);
        }

    }

    if( SUCCEEDED(hr) )
    {
        // call dsound api to download the image..
        EffectLoc.dwI3DL2ReverbIndex = I3DL2_CHAIN_I3DL2_REVERB;
        EffectLoc.dwCrosstalkIndex = I3DL2_CHAIN_XTALK;

        hr = m_pDSound->DownloadEffectsImage( pBuffer,
                                              dwSize,
                                              &EffectLoc,
                                              &pDesc );
    }

    delete[] pBuffer;

    if( hFile != INVALID_HANDLE_VALUE ) 
    {
        CloseHandle( hFile );
    }
    
    return hr;
}



//-----------------------------------------------------------------------------
// Name: Initialize
// Desc: Peforms initialization
//-----------------------------------------------------------------------------
HRESULT
CXBoxSample::Initialize()
{
    // Create a font
    if( FAILED( m_Font.Create( m_pd3dDevice, "Font.xpr" ) ) )
        return XBAPPERR_MEDIANOTFOUND;

    // Create help
    if( FAILED( m_Help.Create( m_pd3dDevice, "Gamepad.xpr" ) ) )
        return XBAPPERR_MEDIANOTFOUND;    

    if( FAILED( DirectSoundCreate( NULL, &m_pDSound, NULL ) ) )
        return E_FAIL;

    //
    // download the standard DirectSound effecs image
    //
    if( FAILED( DownloadEffectsImage("d:\\media\\dsstdfx.bin") ) )
        return E_FAIL;

    // Create MusicManager
    m_pMusicManager = new CMusicManager();
    if( !m_pMusicManager )
        return E_OUTOFMEMORY;

    // Initialize it
    if( FAILED( m_pMusicManager->Initialize() ) )
        return E_FAIL;

    return S_OK;
}



//-----------------------------------------------------------------------------
// Name: FrameMove
// Desc: Performs per-frame updates
//-----------------------------------------------------------------------------
HRESULT
CXBoxSample::FrameMove()
{
    // Toggle help
    if( m_DefaultGamepad.wPressedButtons & XINPUT_GAMEPAD_BACK ) 
    {
        m_bDrawHelp = !m_bDrawHelp;
    }

    // Toggle playback
    if( m_DefaultGamepad.bPressedAnalogButtons[ XINPUT_GAMEPAD_A ] )
    {
        if( m_pMusicManager->GetStatus() == MM_PLAYING )
            m_pMusicManager->Stop();
        else
            m_pMusicManager->Play();
    }

    // Switch to next soundtrack
    if( m_DefaultGamepad.bPressedAnalogButtons[ XINPUT_GAMEPAD_X ] )
    {
        m_pMusicManager->NextSoundtrack();
    }

    // Switch to next song
    if( m_DefaultGamepad.bPressedAnalogButtons[ XINPUT_GAMEPAD_Y ] )
    {
        m_pMusicManager->NextSong();
    }

    // Select a random song
    if( m_DefaultGamepad.bPressedAnalogButtons[ XINPUT_GAMEPAD_BLACK ] )
    {
        m_pMusicManager->RandomSong( m_pMusicManager->GetGlobal() );
    }

    // Pause playback
    if( m_DefaultGamepad.bPressedAnalogButtons[ XINPUT_GAMEPAD_B ] &&
        m_pMusicManager->GetStatus() == MM_PLAYING )
    {
        m_pMusicManager->Pause();
    }

    // Destroy the MusicManager and create a new one
    if( m_DefaultGamepad.bPressedAnalogButtons[ XINPUT_GAMEPAD_WHITE ] )
    {
        delete m_pMusicManager;
        m_pMusicManager = new CMusicManager();
        if( !m_pMusicManager )
            return E_OUTOFMEMORY;

        if( FAILED( m_pMusicManager->Initialize() ) )
            return E_FAIL;
    }

    // Select between random and sequential play
    if( m_DefaultGamepad.bPressedAnalogButtons[ XINPUT_GAMEPAD_LEFT_TRIGGER ] )
    {
        m_pMusicManager->SetRandom( !m_pMusicManager->GetRandom() );
    }

    // Select between global and local play
    if( m_DefaultGamepad.bPressedAnalogButtons[ XINPUT_GAMEPAD_RIGHT_TRIGGER ] )
    {
        m_pMusicManager->SetGlobal( !m_pMusicManager->GetGlobal() );
    }

    LONG lVolume = m_pMusicManager->GetVolume();
    lVolume += LONG(m_DefaultGamepad.fX1 * m_fElapsedTime * 500);
    if( lVolume < DSBVOLUME_MIN )
        lVolume = DSBVOLUME_MIN;
    if( lVolume > DSBVOLUME_MAX )
        lVolume = DSBVOLUME_MAX;
    m_pMusicManager->SetVolume( lVolume );

    DirectSoundDoWork();

    return S_OK;
}



//-----------------------------------------------------------------------------
// Name: Render
// Desc: Renders the scene
//-----------------------------------------------------------------------------
HRESULT
CXBoxSample::Render()
{
    // Clear the zbuffer
    m_pd3dDevice->Clear( 0L, NULL, D3DCLEAR_ZBUFFER|D3DCLEAR_STENCIL,
                         0x00000000, 1.0f, 0L );

    // Draw a gradient filled background
    RenderGradientBackground( 0xff404040, 0xff404080 );

    // Show title, frame rate, and help
    if( m_bDrawHelp )
        m_Help.Render( &m_Font, g_HelpCallouts, NUM_HELP_CALLOUTS );
    else
    {
        m_Font.Begin();
        m_Font.DrawText(  64, 50, 0xffffffff, L"BackgroundMusic" );
        m_Font.DrawText( 450, 50, 0xffffff00, m_strFrameRate );

        WCHAR szSoundtrack[ MAX_SOUNDTRACK_NAME ];
        WCHAR szSong[ MAX_SONG_NAME ];
        DWORD dwLength;
        WCHAR sz[100];

        // Get information about what song/soundtrack is currently selected
        m_pMusicManager->GetCurrentInfo( szSoundtrack, szSong, &dwLength );
        swprintf( sz, L"Soundtrack: %s", szSoundtrack );
        m_Font.DrawText( 64, 80, 0xffffffff, sz );

        swprintf( sz, L"Song: %s", szSong );
        m_Font.DrawText( 64, 110, 0xffffffff, sz );

        FLOAT fPos = m_pMusicManager->GetPlaybackPosition();
        swprintf( sz, L"Position: %02d:%02d / %02d:%02d", DWORD(fPos / 60), 
                                                          (DWORD)fPos % 60, 
                                                          ( dwLength / 60000 ), 
                                                          ( dwLength / 1000 ) % 60 );
        m_Font.DrawText( 64, 140, m_pMusicManager->GetStatus() == MM_PLAYING ? 0xffffffff : 0xff808080, sz );

        swprintf( sz, L"Mode: %s %s", m_pMusicManager->GetRandom() ? L"Random" : L"Sequential", 
                                      m_pMusicManager->GetGlobal() ? L"Global" : L"Local" );
        m_Font.DrawText( 64, 170, 0xffffff00, sz );

        swprintf( sz, L"Volume %ddB", m_pMusicManager->GetVolume() / 100 );
        m_Font.DrawText( 64, 200, 0xffffff00, sz );

        m_Font.End();
    }

    // Present the scene
    m_pd3dDevice->Present( NULL, NULL, NULL, NULL );

    return S_OK;
}

