// AsyncTask.cpp: implementation of the CAsyncTask class.
//
//////////////////////////////////////////////////////////////////////

#include <xtl.h>
#include <winsockx.h>
#include <stdio.h>
#include <xtestlib.h>
#include <xlog.h>
#include <xonlinep.h>
#include "AsyncTask.h"

HRESULT WaitAndPump(DWORD dwWorkUntil, CAsyncTask *pTask)
{
	HRESULT hr = S_OK;

	if(pTask->WaitForWork(0))
		hr = pTask->TaskContinue();

	return hr;
}

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CAsyncTask::CAsyncTask()
{
	m_hLog = NULL;
	m_hrLastResult = S_OK;
	m_hTask = NULL;
	m_hWorkEvent = CreateEvent(NULL, FALSE, FALSE, NULL);
}

CAsyncTask::~CAsyncTask()
{
	m_hTask ? XOnlineTaskClose(m_hTask) : 0;
	m_hWorkEvent ? CloseHandle(m_hWorkEvent) : 0;
}

void CAsyncTask::RegisterLogHandle(HANDLE hLog)
{
	m_hLog = hLog;
}

char * CAsyncTask::GetTaskErrorString(HRESULT hr)
{
	switch(hr)
	{
	case XONLINE_E_OVERFLOW:
		return "XONLINE_E_OVERFLOW";
	case XONLINE_E_NO_SESSION:
		return "XONLINE_E_NO_SESSION";
	case XONLINE_E_USER_NOT_LOGGED_ON:
		return "XONLINE_E_USER_NOT_LOGGED_ON";
	case XONLINE_E_NO_GUEST_ACCESS:
		return "XONLINE_E_NO_GUEST_ACCESS";
	case XONLINE_E_NOT_INITIALIZED:
		return "XONLINE_E_NOT_INITIALIZED";
	case XONLINE_E_NO_USER:
		return "XONLINE_E_NO_USER";
	case XONLINE_E_INTERNAL_ERROR:
		return "XONLINE_E_INTERNAL_ERROR";
	case XONLINE_S_LOGON_CONNECTION_ESTABLISHED:
		return "XONLINE_S_LOGON_CONNECTION_ESTABLISHED";
	case XONLINE_E_LOGON_SERVICE_UNAVAILABLE:
		return "XONLINE_E_LOGON_SERVICE_UNAVAILABLE";
	case XONLINE_E_LOGON_CONNECTION_LOST:
		return "XONLINE_E_LOGON_CONNECTION_LOST";
	case XONLINE_E_LOGON_UPDATE_REQUIRED:
		return "XONLINE_E_LOGON_UPDATE_REQUIRED";
	case XONLINE_E_LOGON_XBOX_ACCOUNT_INVALID:
		return "XONLINE_E_LOGON_XBOX_ACCOUNT_INVALID";
	case XONLINE_E_LOGON_USER_ACCOUNT_INVALID:
		return "XONLINE_E_LOGON_USER_ACCOUNT_INVALID";
	case XONLINE_E_LOGON_NO_SUBSCRIPTION:
		return "XONLINE_E_LOGON_NO_SUBSCRIPTION";
	case XONLINE_E_LOGON_MU_NOT_MOUNTED:
		return "XONLINE_E_LOGON_MU_NOT_MOUNTED";
	case XONLINE_E_LOGON_MU_IO_ERROR:
		return "XONLINE_E_LOGON_MU_IO_ERROR";
	case XONLINE_E_LOGON_NOT_LOGGED_ON:
		return "XONLINE_E_LOGON_NOT_LOGGED_ON";
	case XONLINE_E_LOGON_SERVICE_NOT_REQUESTED:
		return "XONLINE_E_LOGON_SERVICE_NOT_REQUESTED";
	case XONLINE_E_LOGON_SERVICE_NOT_AUTHORIZED:
		return "XONLINE_E_LOGON_SERVICE_NOT_AUTHORIZED";
	case XONLINE_S_NOTIFICATION_UPTODATE:
		return "XONLINE_S_NOTIFICATION_UPTODATE";
	case XONLINE_E_NOTIFICATION_BAD_CONTENT_TYPE:
		return "XONLINE_E_NOTIFICATION_BAD_CONTENT_TYPE";
	case XONLINE_E_NOTIFICATION_REQUEST_TOO_SMALL:
		return "XONLINE_E_NOTIFICATION_REQUEST_TOO_SMALL";
	case XONLINE_E_NOTIFICATION_INVALID_MESSAGE_TYPE:
		return "XONLINE_E_NOTIFICATION_INVALID_MESSAGE_TYPE";
	case XONLINE_E_NOTIFICATION_NO_ADDRESS:
		return "XONLINE_E_NOTIFICATION_NO_ADDRESS";
	case XONLINE_E_NOTIFICATION_INVALID_PUID:
		return "XONLINE_E_NOTIFICATION_INVALID_PUID";
	case XONLINE_E_NOTIFICATION_NO_CONNECTION:
		return "XONLINE_E_NOTIFICATION_NO_CONNECTION";
	case XONLINE_E_NOTIFICATION_SEND_FAILED:
		return "XONLINE_E_NOTIFICATION_SEND_FAILED";
	case XONLINE_E_NOTIFICATION_RECV_FAILED:
		return "XONLINE_E_NOTIFICATION_RECV_FAILED";
	case XONLINE_E_NOTIFICATION_MESSAGE_TRUNCATED:
		return "XONLINE_E_NOTIFICATION_MESSAGE_TRUNCATED";
	case XONLINE_E_NOTIFICATION_SERVER_BUSY:
		return "XONLINE_E_NOTIFICATION_SERVER_BUSY";
	case XONLINE_E_NOTIFICATION_LIST_FULL:
		return "XONLINE_E_NOTIFICATION_LIST_FULL";
	case XONLINE_E_NOTIFICATION_BLOCKED:
		return "XONLINE_E_NOTIFICATION_BLOCKED";
	case XONLINE_E_NOTIFICATION_FRIEND_PENDING:
		return "XONLINE_E_NOTIFICATION_FRIEND_PENDING";
	case XONLINE_E_NOTIFICATION_FLUSH_TICKETS:
		return "XONLINE_E_NOTIFICATION_FLUSH_TICKETS";
	case XONLINE_E_MATCH_INVALID_SESSION_ID:
		return "XONLINE_E_MATCH_INVALID_SESSION_ID";
	case XONLINE_E_MATCH_INVALID_TITLE_ID:
		return "XONLINE_E_MATCH_INVALID_TITLE_ID";
	case XONLINE_E_MATCH_INVALID_DATA_TYPE:
		return "XONLINE_E_MATCH_INVALID_DATA_TYPE";
	case XONLINE_E_MATCH_REQUEST_TOO_SMALL:
		return "XONLINE_E_MATCH_REQUEST_TOO_SMALL";
	case XONLINE_E_MATCH_REQUEST_TRUNCATED:
		return "XONLINE_E_MATCH_REQUEST_TRUNCATED";
	case XONLINE_E_MATCH_INVALID_SEARCH_REQ:
		return "XONLINE_E_MATCH_INVALID_SEARCH_REQ";
	case XONLINE_E_MATCH_INVALID_OFFSET:
		return "XONLINE_E_MATCH_INVALID_OFFSET";
	case XONLINE_E_MATCH_INVALID_ATTR_TYPE:
		return "XONLINE_E_MATCH_INVALID_ATTR_TYPE";
	case XONLINE_E_MATCH_INVALID_VERSION:
		return "XONLINE_E_MATCH_INVALID_VERSION";
	case XONLINE_E_MATCH_OVERFLOW:
		return "XONLINE_E_MATCH_OVERFLOW";
	case XONLINE_E_MATCH_INVALID_RESULT_COL:
		return "XONLINE_E_MATCH_INVALID_RESULT_COL";
	case XONLINE_E_MATCH_INVALID_STRING:
		return "XONLINE_E_MATCH_INVALID_STRING";
	case XONLINE_E_MATCH_STRING_TOO_LONG:
		return "XONLINE_E_MATCH_STRING_TOO_LONG";
	case XONLINE_E_MATCH_BLOB_TOO_LONG:
		return "XONLINE_E_MATCH_BLOB_TOO_LONG";
	case XONLINE_E_MATCH_PUID_MISMATCH:
		return "XONLINE_E_MATCH_PUID_MISMATCH";
	case XONLINE_E_MATCH_INVALID_PLAYER:
		return "XONLINE_E_MATCH_INVALID_PLAYER";
	case XONLINE_E_MATCH_INVALID_ATTRIBUTE_ID:
		return "XONLINE_E_MATCH_INVALID_ATTRIBUTE_ID";
	case XONLINE_E_MATCH_PLAYER_ALREADY_EXISTS:
		return "XONLINE_E_MATCH_PLAYER_ALREADY_EXISTS";
	case XONLINE_E_MATCH_SESSION_ALREADY_EXISTS:
		return "XONLINE_E_MATCH_SESSION_ALREADY_EXISTS";
	case XONLINE_E_MATCH_NO_TITLES:
		return "XONLINE_E_MATCH_NO_TITLES";
	case XONLINE_E_MATCH_TITLE_ALREADY_EXISTS:
		return "XONLINE_E_MATCH_TITLE_ALREADY_EXISTS";
	case XONLINE_E_MATCH_CRITICAL_DB_ERR:
		return "XONLINE_E_MATCH_CRITICAL_DB_ERR";
	case XONLINE_E_MATCH_NOT_ENOUGH_COLUMNS:
		return "XONLINE_E_MATCH_NOT_ENOUGH_COLUMNS";
	case XONLINE_E_MATCH_PERMISSION_DENIED:
		return "XONLINE_E_MATCH_PERMISSION_DENIED";
	case XONLINE_E_MATCH_INVALID_PART_SCHEME:
		return "XONLINE_E_MATCH_INVALID_PART_SCHEME";
	case XONLINE_E_MATCH_INVALID_PARAM:
		return "XONLINE_E_MATCH_INVALID_PARAM";
	case XONLINE_E_MATCH_USE_SETPLAYER_PROC:
		return "XONLINE_E_MATCH_USE_SETPLAYER_PROC";
	case XONLINE_E_MATCH_PLAYER_REQUIRED:
		return "XONLINE_E_MATCH_PLAYER_REQUIRED";
	case XONLINE_E_MATCH_PLAYER_NOT_NEEDED:
		return "XONLINE_E_MATCH_PLAYER_NOT_NEEDED";
	case XONLINE_E_MATCH_DATA_TYPE_MISMATCH:
		return "XONLINE_E_MATCH_DATA_TYPE_MISMATCH";
	case XONLINE_E_MATCH_SERVER_ERROR:
		return "XONLINE_E_MATCH_SERVER_ERROR";
	case XONLINE_E_MATCH_NO_USERS:
		return "XONLINE_E_MATCH_NO_USERS";
	case XONLINE_E_MATCH_INVALID_BLOB:
		return "XONLINE_E_MATCH_INVALID_BLOB";
	case XONLINE_E_OFFERING_BAD_REQUEST:
		return "XONLINE_E_OFFERING_BAD_REQUEST";
	case XONLINE_E_OFFERING_INVALID_USER:
		return "XONLINE_E_OFFERING_INVALID_USER";
	case XONLINE_E_OFFERING_INVALID_OFFER_ID:
		return "XONLINE_E_OFFERING_INVALID_OFFER_ID";
	case XONLINE_E_OFFERING_INELIGIBLE_FOR_OFFER:
		return "XONLINE_E_OFFERING_INELIGIBLE_FOR_OFFER";
	case XONLINE_E_OFFERING_OFFER_EXPIRED:
		return "XONLINE_E_OFFERING_OFFER_EXPIRED";
	case XONLINE_E_OFFERING_SERVICE_UNREACHABLE:
		return "XONLINE_E_OFFERING_SERVICE_UNREACHABLE";
	case XONLINE_E_OFFERING_PURCHASE_BLOCKED:
		return "XONLINE_E_OFFERING_PURCHASE_BLOCKED";
	case XONLINE_E_OFFERING_PURCHASE_DENIED:
		return "XONLINE_E_OFFERING_PURCHASE_DENIED";
	case XONLINE_E_OFFERING_BILLING_SERVER_ERROR:
		return "XONLINE_E_OFFERING_BILLING_SERVER_ERROR";
	case XONLINE_E_OFFERING_OFFER_NOT_CANCELABLE:
		return "XONLINE_E_OFFERING_OFFER_NOT_CANCELABLE";
	case XONLINE_E_OFFERING_NOTHING_TO_CANCEL:
		return "XONLINE_E_OFFERING_NOTHING_TO_CANCEL";
	case XONLINE_E_OFFERING_PERMISSION_DENIED:
		return "XONLINE_E_OFFERING_PERMISSION_DENIED";
	default:
		return "UNKNOWN";
	}

}

HRESULT CAsyncTask::TaskContinue()
{
	if(m_hTask)
		return m_hrLastResult = XOnlineTaskContinue(m_hTask);

	return E_FAIL;
}

HRESULT CAsyncTask::GetLastResult()
{
	return m_hrLastResult;
}

BOOL CAsyncTask::IsTaskComplete()
{
	return (XONLINETASK_STATUS_AVAILABLE(m_hrLastResult));
}

BOOL CAsyncTask::WaitForWork(DWORD dwUntilTickCount)
{
	if(!m_hWorkEvent)
		return FALSE;

	return (WaitForSingleObject(m_hWorkEvent, dwUntilTickCount) == WAIT_OBJECT_0);
}
