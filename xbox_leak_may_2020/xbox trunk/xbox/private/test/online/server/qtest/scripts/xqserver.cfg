[XQServer Config File]

[Global]
;
; What TCP port number does the server listen for connections on?
;
; PortNum = <int> (default is 3000)
;
PortNum=3000

;
; How long does the server wait before sending a tickle message when a
; queue transitions from empty to non-empty?
;
; TickleDelay = <int duration (in milliseconds)> (default is 200; max is 5000)
;
TickleDelay=0

;
; How long does the server wait between tickle messages if a queue is
; not emptied?
;
; TickleRefresh = <int duration (in milliseconds)> (default is 30000; min is 5000; max is 60000)
;
TickleRefresh=50000

;
; How frequently does the server send tickle messages when idle?
;
; IdleTickle = <int duration (in milliseconds)> (default is 1000; min is 250; max is 5000)
;
IdleTickle=500

;
; Does the server ignore bad message parameters, or disconnect when it detects them?
;
; IgnoreBadParams = <Yes|No> (default is Yes)
;
IgnoreBadParams=No

;
; How many queues does each user potentially have?
; Each one is described in its own section below, starting with queue type 0
;
; NumQueueTypes = <int> (must be >= 1; default is 1; max is 10)
;
NumQueueTypes=5

;
; [Queue Type <n>]
;
;
; The maximum number of items that can exist in this queue at one time.
; Once this limit is reached, the oldest item is deleted from the queue in
; order to make room for a newer item.
;
; MaxItems = <int> (must be > 0; default is 0xffffffff == no maximum)
;
;
; The minimum and maximum allowable amount of item data for this queue, in bytes.
; Queues that use fixed size items (min == max) yield optimal performance.
;
; MinDataSize = <int> (must be <= MaxDataSize; default is 0 (zero) == no minimum)
; MaxDataSize = <int> (must be >= MinDataSize; default is 0x100000)
;
;
; Queues may be configured to have a new item replace an existing item with the same attribute.
; Attributes are matched exactly using a full binary comparison, and must always live at
; a fixed offset within the item data.
;
; AllowDuplicates = <Yes|No> (default is Yes)
; DupAttrOffset = <int offset (zero-based)> (mandatory if AllowDuplicates == No)
; DupAttrLen = <int length (in bytes)> (mandatory if AllowDuplicates == No)
;
;
; Queues may be configured to have an item be automatically deleted if the machine with the
; given XIP address goes offline.  The XIP address must always live at a fixed offset within
; the item data.
;
; DeleteOnXIPDeath = <Yes|No> (default is No)
; XIPOffset = <int offset (zero-based)>
;             (mandatory if DeleteOnXIPDeath == Yes; length is always 8 bytes == 1 QWORD)
;
;
; Queues may be configured to have an item be automatically deleted if the machine with the
; given XRG number goes offline.  The XRG number must always live at a fixed offset within
; the item data.
;
; DeleteOnXRGDeath = <Yes|No> (default is No)
; XRGOffset = <int offset (zero-based)>
;             (mandatory if DeleteOnXRGDeath == Yes; length is always 8 bytes == 1 QWORD)
;
;
; Queues may be configured to have an item be automatically deleted if it remains in the queue
; for a given time duration after being inserted in the queue.
;
; EnforceTTL = <Yes|No> (default is Yes)
; ItemTTL = <int duration (in milliseconds)> (mandatory if EnforceTTL == Yes; default is 86,400,000 == 24 hours)
;
;
; Queues may be configured to allow deletion of items with a byte range that matches
; a parameter to the delete matches message.  The bytes are matched using a full binary
; comparison, and must always live at a fixed offset within the item data.
;
; AllowMatches = <Yes|No> (default is No)
; MatchAttrOffset = <int offset (zero-based)> (mandatory if AllowMatches == Yes)
; MatchAttrLen = <int length (in bytes)> (mandatory if AllowMatches == Yes)
;


[Queue Type 0]
;
; This queue holds posted acknowledgement items - see BASE_ACK_ITEM in baseprot.h
;
MinDataSize=16
MaxDataSize=16

AllowDuplicates=Yes
DeleteOnXIPDeath=No
DeleteOnXRGDeath=No
EnforceTTL=Yes
AllowMatches=No

ItemsPerPage=8
HeaderDataSize=16

[Queue Type 1]
;
; This queue holds added and deleted notification items - see P_ADDED_ITEM and
; P_DELETED_ITEM in xpprotocol.h
;
MinDataSize=24
MaxDataSize=24

AllowDuplicates=Yes
DeleteOnXIPDeath=No
DeleteOnXRGDeath=No
EnforceTTL=Yes
AllowMatches=No

ItemsPerPage=4
HeaderDataSize=24

[Queue Type 2]
;
; This queue holds invitation items - see P_INVITATION_ITEM in xpprotocol.h
;
MinDataSize=28
MaxDataSize=0x1000

AllowDuplicates=Yes
DeleteOnXIPDeath=No
DeleteOnXRGDeath=No
EnforceTTL=Yes

; Allow delete matches based on qwMatchSessionID
AllowMatches=Yes
MatchAttrOffset=20
MatchAttrLen=8

ItemsPerPage=4
HeaderDataSize=36

[Queue Type 3]
;
; This queue holds state change notification items - see P_STATE_CHANGE_ITEM in
; xpprotocol.h
;
MinDataSize=29
MaxDataSize=92

; Eliminate duplicate states from same qwUserID
AllowDuplicates=No
DupAttrOffset=4
DupAttrLen=8

DeleteOnXIPDeath=No
DeleteOnXRGDeath=No
EnforceTTL=Yes
AllowMatches=No

ItemsPerPage=8
HeaderDataSize=45

[Queue Type 4]
;
; This queue holds list and buddy add request items - see P_LIST_ITEM and
; P_BUDDY_ITEM in xpprotocol.h
;
MinDataSize=32
MaxDataSize=832

AllowDuplicates=Yes
DeleteOnXIPDeath=No
DeleteOnXRGDeath=No
EnforceTTL=Yes
AllowMatches=No

ItemsPerPage=6
HeaderDataSize=80
