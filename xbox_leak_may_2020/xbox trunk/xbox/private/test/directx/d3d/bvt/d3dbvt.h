/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    d3dbvt.h

Description:

    Direct3D Build Verification Tests.

*******************************************************************************/

//******************************************************************************
// Preprocessor definitions
//******************************************************************************

#ifndef UNDER_XBOX
#define INVALID_TESTS
#endif

#define countof(x)      (sizeof(x) / sizeof(*(x)))

#define TESTPROCAPI     TRESULT WINAPI

#define TR_SKIP         2
#define TR_PASS         3
#define TR_FAIL         4
#define TR_ABORT        5

#define IDIRECT3D8      1
#define IDEVICE8        2
#define ISWAPCHAIN8     3
#define ITEXTURE8       4
#define ICUBETEXTURE8   5
#define IVOLUMETEXTURE8 6
#define IVERTEXBUFFER8  7
#define IINDEXBUFFER8   8
#define ISURFACE8       9
#define IVOLUME8        10

#define TARGET_WIDTH    640
#define TARGET_HEIGHT   480
#define TEXTUREDIM      128 // Must be a power of 2
#define VERTBUFFSIZE    (2048 * (2 * sizeof(D3DVECTOR) + 2 * sizeof(float)))
#define VERTBUFFFORMAT  (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1)
#define INDXBUFFSIZE    (2048 * sizeof(WORD))

#define DEAD_PTR        ((LPVOID)0xdeadbeef)
#define PRESET          0xFFFFFFFE

//******************************************************************************
// Data types
//******************************************************************************

typedef struct _TESTTABLEENTRY *PTESTTABLEENTRY;

typedef DWORD TRESULT;

typedef TRESULT (WINAPI *TESTPROC)(PTESTTABLEENTRY ptte);

typedef struct _TESTTABLEENTRY {
    LPCTSTR     szInterface;
    LPCTSTR     szMethod;
    DWORD       dwData;
    TESTPROC    pfnTest;
} TESTTABLEENTRY, *PTESTTABLEENTRY;

typedef DWORD D3DIFACETYPE;

extern HINSTANCE    g_hInstance;
extern HWND         g_hWnd;
extern GUID         GUID_PRIVATEDATA;

//******************************************************************************
// Test function prototypes
//******************************************************************************

// ##REMOVE: Temporary video test
TESTPROCAPI TTMP_VideoTest(PTESTTABLEENTRY ptte);
// ##REMOVE END

// IUnknown
TESTPROCAPI TUNK_AddRef(PTESTTABLEENTRY ptte);
TESTPROCAPI TUNK_Release(PTESTTABLEENTRY ptte);
TESTPROCAPI TUNK_QueryInterface(PTESTTABLEENTRY ptte);

// IDirect3D8
TESTPROCAPI TD3D8_GetAdapterCount(PTESTTABLEENTRY ptte);
TESTPROCAPI TD3D8_GetAdapterDisplayMode(PTESTTABLEENTRY ptte);
TESTPROCAPI TD3D8_GetAdapterIdentifier(PTESTTABLEENTRY ptte);
TESTPROCAPI TD3D8_GetAdapterModeCount(PTESTTABLEENTRY ptte);
#ifndef UNDER_XBOX
TESTPROCAPI TD3D8_GetAdapterMonitor(PTESTTABLEENTRY ptte);
#endif // !UNDER_XBOX
TESTPROCAPI TD3D8_GetDeviceCaps(PTESTTABLEENTRY ptte);
#ifndef UNDER_XBOX
TESTPROCAPI TD3D8_RegisterSoftwareDevice(PTESTTABLEENTRY ptte);
#endif // !UNDER_XBOX
TESTPROCAPI TD3D8_CheckDeviceFormat(PTESTTABLEENTRY ptte);
TESTPROCAPI TD3D8_CheckDeviceMultiSampleType(PTESTTABLEENTRY ptte);
TESTPROCAPI TD3D8_CheckDeviceType(PTESTTABLEENTRY ptte);
TESTPROCAPI TD3D8_CheckDepthStencilMatch(PTESTTABLEENTRY ptte);
TESTPROCAPI TD3D8_CreateDevice(PTESTTABLEENTRY ptte);
TESTPROCAPI TD3D8_EnumAdapterModes(PTESTTABLEENTRY ptte);

// IDirect3DDevice8
#ifndef UNDER_XBOX
TESTPROCAPI TDEV8_CreateAdditionalSwapChain(PTESTTABLEENTRY ptte);
#endif // !UNDER_XBOX
TESTPROCAPI TDEV8_CreateCubeTexture(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_CreateDepthStencilSurface(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_CreateImageSurface(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_CreateIndexBuffer(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_CreateRenderTarget(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_CreateTexture(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_CreateVertexBuffer(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_CreateVolumeTexture(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_ApplyStateBlock(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_BeginStateBlock(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_EndStateBlock(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_CreateStateBlock(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_DeleteStateBlock(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_CaptureStateBlock(PTESTTABLEENTRY ptte);
#ifndef UNDER_XBOX
TESTPROCAPI TDEV8_GetClipStatus(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetClipStatus(PTESTTABLEENTRY ptte);
#endif
TESTPROCAPI TDEV8_GetRenderState(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetRenderState(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetRenderTarget(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetRenderTarget(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetTransform(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetTransform(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_MultiplyTransform(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_Clear(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetViewport(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetViewport(PTESTTABLEENTRY ptte);
#ifndef UNDER_XBOX
TESTPROCAPI TDEV8_GetClipPlane(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetClipPlane(PTESTTABLEENTRY ptte);
#endif
TESTPROCAPI TDEV8_GetLight(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetLight(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_LightEnable(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetLightEnable(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetMaterial(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetMaterial(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetTexture(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetTexture(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetTextureStageState(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetTextureStageState(PTESTTABLEENTRY ptte);
#ifndef UNDER_XBOX
TESTPROCAPI TDEV8_UpdateTexture(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_ValidateDevice(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetCurrentTexturePalette(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetCurrentTexturePalette(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetPaletteEntries(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetPaletteEntries(PTESTTABLEENTRY ptte);
#else

#endif
TESTPROCAPI TDEV8_CreateVertexShader(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_DeleteVertexShader(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetVertexShader(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetVertexShader(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetVertexShaderConstant(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetVertexShaderConstant(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetVertexShaderDeclaration(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetVertexShaderFunction(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_CreatePixelShader(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_DeletePixelShader(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetPixelShader(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetPixelShader(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetPixelShaderConstant(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetPixelShaderConstant(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetPixelShaderFunction(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_Present(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_Reset(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_BeginScene(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_EndScene(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_DrawIndexedPrimitive(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_DrawIndexedPrimitiveUP(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_DrawPrimitive(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_DrawPrimitiveUP(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_DeleteSurfaceHandle(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_DrawRectSurface(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_DrawTriSurface(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetStreamSource(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetStreamSource(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetIndices(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetIndices(PTESTTABLEENTRY ptte);
#ifndef UNDER_XBOX
TESTPROCAPI TDEV8_GetAvailableTextureMem(PTESTTABLEENTRY ptte);
#endif // !UNDER_XBOX
TESTPROCAPI TDEV8_GetCreationParameters(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetDeviceCaps(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetDirect3D(PTESTTABLEENTRY ptte);
#ifndef UNDER_XBOX
TESTPROCAPI TDEV8_GetInfo(PTESTTABLEENTRY ptte);
#endif // !UNDER_XBOX
TESTPROCAPI TDEV8_GetRasterStatus(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetBackBuffer(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetDepthStencilSurface(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetGammaRamp(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetGammaRamp(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_CopyRects(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_GetFrontBufferRectangle(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_ProcessVertices(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_ResourceManagerDiscardBytes(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_TestCooperativeLevel(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetCursorPosition(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_SetCursorProperties(PTESTTABLEENTRY ptte);
TESTPROCAPI TDEV8_ShowCursor(PTESTTABLEENTRY ptte);

// IDirect3DSwapChain8
#ifndef UNDER_XBOX
TESTPROCAPI TSWC8_Present(PTESTTABLEENTRY ptte);
TESTPROCAPI TSWC8_GetBackBuffer(PTESTTABLEENTRY ptte);
#endif // !UNDER_XBOX

// IDirect3DResource8
TESTPROCAPI TRES8_GetType(PTESTTABLEENTRY ptte);
TESTPROCAPI TRES8_GetDevice(PTESTTABLEENTRY ptte);
TESTPROCAPI TRES8_GetPrivateData(PTESTTABLEENTRY ptte);
TESTPROCAPI TRES8_SetPrivateData(PTESTTABLEENTRY ptte);
TESTPROCAPI TRES8_FreePrivateData(PTESTTABLEENTRY ptte);
#ifndef UNDER_XBOX
TESTPROCAPI TRES8_GetPriority(PTESTTABLEENTRY ptte);
TESTPROCAPI TRES8_SetPriority(PTESTTABLEENTRY ptte);
TESTPROCAPI TRES8_PreLoad(PTESTTABLEENTRY ptte);
#endif // !UNDER_XBOX

// IDirect3DBaseTexture8
TESTPROCAPI TBTX8_GetLevelCount(PTESTTABLEENTRY ptte);
#ifndef UNDER_XBOX
TESTPROCAPI TBTX8_GetLOD(PTESTTABLEENTRY ptte);
TESTPROCAPI TBTX8_SetLOD(PTESTTABLEENTRY ptte);
#endif // !UNDER_XBOX

// IDirect3DTexture8
TESTPROCAPI TTEX8_GetLevelDesc(PTESTTABLEENTRY ptte);
TESTPROCAPI TTEX8_LockRect(PTESTTABLEENTRY ptte);
TESTPROCAPI TTEX8_UnlockRect(PTESTTABLEENTRY ptte);
#ifndef UNDER_XBOX
TESTPROCAPI TTEX8_AddDirtyRect(PTESTTABLEENTRY ptte);
#endif // !UNDER_XBOX
TESTPROCAPI TTEX8_GetSurfaceLevel(PTESTTABLEENTRY ptte);

// IDirect3DCubeTexture8
TESTPROCAPI TCTX8_GetLevelDesc(PTESTTABLEENTRY ptte);
TESTPROCAPI TCTX8_LockRect(PTESTTABLEENTRY ptte);
TESTPROCAPI TCTX8_UnlockRect(PTESTTABLEENTRY ptte);
#ifndef UNDER_XBOX
TESTPROCAPI TCTX8_AddDirtyRect(PTESTTABLEENTRY ptte);
#endif // !UNDER_XBOX
TESTPROCAPI TCTX8_GetCubeMapSurface(PTESTTABLEENTRY ptte);

// IDirect3DVolumeTexture8
TESTPROCAPI TVTX8_GetLevelDesc(PTESTTABLEENTRY ptte);
TESTPROCAPI TVTX8_LockBox(PTESTTABLEENTRY ptte);
TESTPROCAPI TVTX8_UnlockBox(PTESTTABLEENTRY ptte);
#ifndef UNDER_XBOX
TESTPROCAPI TVTX8_AddDirtyBox(PTESTTABLEENTRY ptte);
#endif // !UNDER_XBOX
TESTPROCAPI TVTX8_GetVolumeLevel(PTESTTABLEENTRY ptte);

// IDirect3DVertexBuffer8
TESTPROCAPI TVRB8_GetDesc(PTESTTABLEENTRY ptte);
TESTPROCAPI TVRB8_Lock(PTESTTABLEENTRY ptte);
TESTPROCAPI TVRB8_Unlock(PTESTTABLEENTRY ptte);

// IDirect3DIndexBuffer8
TESTPROCAPI TIXB8_GetDesc(PTESTTABLEENTRY ptte);
TESTPROCAPI TIXB8_Lock(PTESTTABLEENTRY ptte);
TESTPROCAPI TIXB8_Unlock(PTESTTABLEENTRY ptte);

// IDirect3DSurface8
TESTPROCAPI TSUR8_GetContainer(PTESTTABLEENTRY ptte);
TESTPROCAPI TSUR8_GetDevice(PTESTTABLEENTRY ptte);
TESTPROCAPI TSUR8_GetDesc(PTESTTABLEENTRY ptte);
TESTPROCAPI TSUR8_LockRect(PTESTTABLEENTRY ptte);
TESTPROCAPI TSUR8_UnlockRect(PTESTTABLEENTRY ptte);
TESTPROCAPI TSUR8_GetPrivateData(PTESTTABLEENTRY ptte);
TESTPROCAPI TSUR8_SetPrivateData(PTESTTABLEENTRY ptte);
TESTPROCAPI TSUR8_FreePrivateData(PTESTTABLEENTRY ptte);

// IDirect3DVolume8
TESTPROCAPI TVOL8_GetContainer(PTESTTABLEENTRY ptte);
TESTPROCAPI TVOL8_GetDevice(PTESTTABLEENTRY ptte);
TESTPROCAPI TVOL8_GetDesc(PTESTTABLEENTRY ptte);
TESTPROCAPI TVOL8_LockBox(PTESTTABLEENTRY ptte);
TESTPROCAPI TVOL8_UnlockBox(PTESTTABLEENTRY ptte);
TESTPROCAPI TVOL8_GetPrivateData(PTESTTABLEENTRY ptte);
TESTPROCAPI TVOL8_SetPrivateData(PTESTTABLEENTRY ptte);
TESTPROCAPI TVOL8_FreePrivateData(PTESTTABLEENTRY ptte);

// Shared
TESTPROCAPI TSHR8_GetDevice(PTESTTABLEENTRY ptte, LPVOID pvObject);
TESTPROCAPI TSHR8_LockRect(PTESTTABLEENTRY ptte, LPVOID pvObject);
TESTPROCAPI TSHR8_UnlockRect(PTESTTABLEENTRY ptte, LPVOID pvObject);
TESTPROCAPI TSHR8_LockBox(PTESTTABLEENTRY ptte, LPVOID pvObject);
TESTPROCAPI TSHR8_UnlockBox(PTESTTABLEENTRY ptte, LPVOID pvObject);
TESTPROCAPI TSHR8_GetPrivateData(PTESTTABLEENTRY ptte, LPVOID pvObject);
TESTPROCAPI TSHR8_SetPrivateData(PTESTTABLEENTRY ptte, LPVOID pvObject);
TESTPROCAPI TSHR8_FreePrivateData(PTESTTABLEENTRY ptte, LPVOID pvObject);
TESTPROCAPI TSHR8_GetLevelDesc(PTESTTABLEENTRY ptte, LPVOID pvObject);
TESTPROCAPI TSHR8_GetSurfaceLevel(PTESTTABLEENTRY ptte, LPVOID pvObject);
TESTPROCAPI TSHR8_AddDirtyRect(PTESTTABLEENTRY ptte, LPVOID pvObject);
TESTPROCAPI TSHR8_Lock(PTESTTABLEENTRY ptte, LPVOID pvObject);
TESTPROCAPI TSHR8_Unlock(PTESTTABLEENTRY ptte, LPVOID pvObject);

//******************************************************************************
// Function prototypes
//******************************************************************************

LPDIRECT3D8                 GetDirect3D8();
LPDIRECT3D8                 GetDeviceDirect3D8();
void                        ReleaseDirect3D8();
LPDIRECT3DDEVICE8           GetDevice8();
void                        ReleaseDevice8();
#ifndef UNDER_XBOX
LPDIRECT3DSWAPCHAIN8        GetSwapChain8();
#endif // !UNDER_XBOX
LPDIRECT3DTEXTURE8          GetTexture8();
LPDIRECT3DCUBETEXTURE8      GetCubeTexture8();
LPDIRECT3DVOLUMETEXTURE8    GetVolumeTexture8();
LPDIRECT3DVERTEXBUFFER8     GetVertexBuffer8();
LPDIRECT3DINDEXBUFFER8      GetIndexBuffer8();
LPDIRECT3DSURFACE8          GetSurface8(LPDIRECT3DTEXTURE8* ppd3dt = NULL);
LPDIRECT3DSURFACE8          GetCubeSurface8(LPDIRECT3DCUBETEXTURE8* ppd3dtc = NULL);
LPDIRECT3DVOLUME8           GetVolume8(LPDIRECT3DVOLUMETEXTURE8* ppd3dv = NULL);
void                        ReleaseDeviceObjects8();
