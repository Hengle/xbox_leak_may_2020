/*******************************************************************************

Copyright (c) 2000 Microsoft Corporation.  All rights reserved.

File Name:

    fontmap.cpp

Author:

    Matt Bronder

Description:

    Functions for creating and indexing into a font texture.

*******************************************************************************/

#include "d3dlocus.h"
#include "fontmap.h"

//******************************************************************************
// Globals
//******************************************************************************

CTexture8*                  g_pd3dtFontMap = NULL;
TCOORD2                     g_ptcFont[96];

static BYTE                 g_bFontPixels[120][12] = {

    {0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x18, 0x66, 0x36, 0x3C, 0xD8, 0x38, 0x18, 0x0C, 0x30, 0x00, 0x00},
    {0x00, 0x3C, 0x66, 0x36, 0x66, 0xDA, 0x6C, 0x18, 0x18, 0x18, 0x00, 0x00},
    {0x00, 0x3C, 0x66, 0x7F, 0x60, 0x76, 0x6C, 0x18, 0x18, 0x18, 0x36, 0x18},
    {0x00, 0x3C, 0x00, 0x36, 0x30, 0x0C, 0x38, 0x00, 0x30, 0x0C, 0x1C, 0x18},
    {0x00, 0x18, 0x00, 0x36, 0x18, 0x18, 0x60, 0x00, 0x30, 0x0C, 0x7F, 0x7E},
    {0x00, 0x18, 0x00, 0x36, 0x0C, 0x30, 0x6F, 0x00, 0x30, 0x0C, 0x1C, 0x18},
    {0x00, 0x00, 0x00, 0x7F, 0x06, 0x6E, 0x66, 0x00, 0x30, 0x0C, 0x36, 0x18},
    {0x00, 0x18, 0x00, 0x36, 0x66, 0x5B, 0x66, 0x00, 0x30, 0x0C, 0x00, 0x00},
    {0x00, 0x18, 0x00, 0x36, 0x3C, 0x1B, 0x3B, 0x00, 0x18, 0x18, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x18, 0x0E, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x06, 0x1E, 0x0C, 0x3C, 0x3C, 0x30, 0x7E, 0x1C, 0x7E},
    {0x00, 0x00, 0x00, 0x06, 0x33, 0x1C, 0x66, 0x66, 0x30, 0x60, 0x18, 0x06},
    {0x00, 0x00, 0x00, 0x0C, 0x37, 0x7C, 0x66, 0x66, 0x36, 0x60, 0x30, 0x0C},
    {0x00, 0x00, 0x00, 0x0C, 0x37, 0x0C, 0x06, 0x06, 0x36, 0x60, 0x7C, 0x0C},
    {0x00, 0x7E, 0x00, 0x18, 0x33, 0x0C, 0x0C, 0x1C, 0x36, 0x7C, 0x66, 0x18},
    {0x00, 0x00, 0x00, 0x18, 0x3B, 0x0C, 0x18, 0x06, 0x66, 0x06, 0x66, 0x18},
    {0x00, 0x00, 0x00, 0x30, 0x3B, 0x0C, 0x30, 0x66, 0x7F, 0x06, 0x66, 0x30},
    {0x1C, 0x00, 0x1C, 0x30, 0x33, 0x0C, 0x60, 0x66, 0x06, 0x0C, 0x66, 0x30},
    {0x1C, 0x00, 0x1C, 0x60, 0x1E, 0x0C, 0x7E, 0x3C, 0x06, 0x78, 0x3C, 0x30},
    {0x0C, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x3C, 0x3C, 0x00, 0x00, 0x06, 0x00, 0x60, 0x3C, 0x7E, 0x18, 0x7C, 0x3C},
    {0x66, 0x66, 0x00, 0x00, 0x0C, 0x00, 0x30, 0x66, 0xC3, 0x3C, 0x66, 0x66},
    {0x66, 0x66, 0x1C, 0x1C, 0x18, 0x00, 0x18, 0x66, 0xC3, 0x66, 0x66, 0x66},
    {0x76, 0x66, 0x1C, 0x1C, 0x30, 0x7E, 0x0C, 0x0C, 0xCF, 0x66, 0x66, 0x60},
    {0x3C, 0x66, 0x00, 0x00, 0x60, 0x00, 0x06, 0x18, 0xDB, 0x66, 0x7C, 0x60},
    {0x6E, 0x3E, 0x00, 0x00, 0x30, 0x7E, 0x0C, 0x18, 0xDB, 0x7E, 0x66, 0x60},
    {0x66, 0x0C, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0xCF, 0x66, 0x66, 0x66},
    {0x66, 0x18, 0x1C, 0x1C, 0x0C, 0x00, 0x30, 0x18, 0xC0, 0x66, 0x66, 0x66},
    {0x3C, 0x38, 0x1C, 0x1C, 0x06, 0x00, 0x60, 0x18, 0x7F, 0x66, 0x7C, 0x3C},
    {0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x78, 0x7E, 0x7E, 0x3C, 0x66, 0x3C, 0x06, 0x66, 0x60, 0x63, 0x63, 0x3C},
    {0x6C, 0x60, 0x60, 0x66, 0x66, 0x18, 0x06, 0x66, 0x60, 0x63, 0x63, 0x66},
    {0x66, 0x60, 0x60, 0x66, 0x66, 0x18, 0x06, 0x6C, 0x60, 0x77, 0x73, 0x66},
    {0x66, 0x60, 0x60, 0x60, 0x66, 0x18, 0x06, 0x6C, 0x60, 0x6B, 0x7B, 0x66},
    {0x66, 0x7C, 0x7C, 0x60, 0x7E, 0x18, 0x06, 0x78, 0x60, 0x6B, 0x6F, 0x66},
    {0x66, 0x60, 0x60, 0x6E, 0x66, 0x18, 0x06, 0x6C, 0x60, 0x6B, 0x67, 0x66},
    {0x66, 0x60, 0x60, 0x66, 0x66, 0x18, 0x66, 0x6C, 0x60, 0x63, 0x63, 0x66},
    {0x6C, 0x60, 0x60, 0x66, 0x66, 0x18, 0x66, 0x66, 0x60, 0x63, 0x63, 0x66},
    {0x78, 0x7E, 0x60, 0x3E, 0x66, 0x3C, 0x3C, 0x66, 0x7E, 0x63, 0x63, 0x3C},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x7C, 0x3C, 0x7C, 0x3C, 0x7E, 0x66, 0x66, 0x63, 0x66, 0x66, 0x7E, 0x3C},
    {0x66, 0x66, 0x66, 0x66, 0x18, 0x66, 0x66, 0x63, 0x66, 0x66, 0x06, 0x30},
    {0x66, 0x66, 0x66, 0x60, 0x18, 0x66, 0x66, 0x63, 0x34, 0x66, 0x06, 0x30},
    {0x66, 0x66, 0x66, 0x30, 0x18, 0x66, 0x66, 0x6B, 0x18, 0x66, 0x0C, 0x30},
    {0x7C, 0x66, 0x7C, 0x18, 0x18, 0x66, 0x66, 0x6B, 0x18, 0x3C, 0x18, 0x30},
    {0x60, 0x66, 0x6C, 0x0C, 0x18, 0x66, 0x66, 0x6B, 0x2C, 0x18, 0x30, 0x30},
    {0x60, 0x66, 0x66, 0x06, 0x18, 0x66, 0x66, 0x36, 0x66, 0x18, 0x60, 0x30},
    {0x60, 0x66, 0x66, 0x66, 0x18, 0x66, 0x3C, 0x36, 0x66, 0x18, 0x60, 0x30},
    {0x60, 0x3C, 0x66, 0x3C, 0x18, 0x3C, 0x18, 0x36, 0x66, 0x18, 0x7E, 0x30},
    {0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30},
    {0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x18, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x3C, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x60, 0x3C, 0x66, 0x00, 0x0C, 0x00, 0x60, 0x00, 0x06, 0x00, 0x1E, 0x00},
    {0x60, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x06, 0x00, 0x30, 0x00},
    {0x30, 0x0C, 0x00, 0x00, 0x00, 0x3C, 0x7C, 0x3C, 0x3E, 0x3C, 0x30, 0x3E},
    {0x30, 0x0C, 0x00, 0x00, 0x00, 0x06, 0x66, 0x66, 0x66, 0x66, 0x30, 0x66},
    {0x18, 0x0C, 0x00, 0x00, 0x00, 0x06, 0x66, 0x60, 0x66, 0x66, 0x7E, 0x66},
    {0x18, 0x0C, 0x00, 0x00, 0x00, 0x3E, 0x66, 0x60, 0x66, 0x7E, 0x30, 0x66},
    {0x0C, 0x0C, 0x00, 0x00, 0x00, 0x66, 0x66, 0x60, 0x66, 0x60, 0x30, 0x66},
    {0x0C, 0x0C, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x60, 0x30, 0x66},
    {0x06, 0x0C, 0x00, 0x00, 0x00, 0x3E, 0x7C, 0x3C, 0x3E, 0x3C, 0x30, 0x3E},
    {0x06, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06},
    {0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06},
    {0x00, 0x3C, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x60, 0x18, 0x0C, 0x60, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x60, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x7C, 0x78, 0x3C, 0x66, 0x18, 0x7E, 0x7C, 0x3C, 0x7C, 0x3E, 0x66, 0x3E},
    {0x66, 0x18, 0x0C, 0x66, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x6E, 0x60},
    {0x66, 0x18, 0x0C, 0x6C, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x70, 0x60},
    {0x66, 0x18, 0x0C, 0x78, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x60, 0x3C},
    {0x66, 0x18, 0x0C, 0x6C, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x60, 0x06},
    {0x66, 0x18, 0x0C, 0x66, 0x18, 0x6B, 0x66, 0x66, 0x66, 0x66, 0x60, 0x06},
    {0x66, 0x7E, 0x0C, 0x66, 0x7E, 0x63, 0x66, 0x3C, 0x7C, 0x3E, 0x60, 0x7C},
    {0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00},
    {0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00},
    {0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x30, 0x71, 0x7E},
    {0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xDB, 0x7E},
    {0x7E, 0x66, 0x66, 0x63, 0x66, 0x66, 0x7E, 0x18, 0x18, 0x18, 0x8E, 0x7E},
    {0x30, 0x66, 0x66, 0x6B, 0x66, 0x66, 0x06, 0x18, 0x18, 0x18, 0x00, 0x7E},
    {0x30, 0x66, 0x66, 0x6B, 0x3C, 0x66, 0x0C, 0x30, 0x18, 0x0C, 0x00, 0x7E},
    {0x30, 0x66, 0x66, 0x6B, 0x18, 0x66, 0x18, 0x60, 0x18, 0x06, 0x00, 0x7E},
    {0x30, 0x66, 0x66, 0x6B, 0x3C, 0x66, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x7E},
    {0x30, 0x66, 0x3C, 0x36, 0x66, 0x66, 0x60, 0x18, 0x18, 0x18, 0x00, 0x7E},
    {0x1E, 0x3E, 0x18, 0x36, 0x66, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x00, 0x7E},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x0C, 0x18, 0x30, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
};

//******************************************************************************
//
// Function:
//
//     CreateFontMap
//
// Description:
//
//     Create a texture and populate it with font information to be used to
//     output text.  Build a texture coordinate table containing the positions
//     of characters in the font map.
//
// Arguments:
//
//     CDevice8*                - Pointer to the device object
//
//     D3DFORMAT fmt            - Format of the texture
//
// Return Value:
//
//     TRUE on success, FALSE on failure.
//
//******************************************************************************
BOOL CreateFontMap(CDevice8* pDevice, D3DFORMAT fmt) {

    D3DLOCKED_RECT  d3dlr;
    UINT            i, j;
    float           fU, fV;
    HRESULT         hr;
#ifdef UNDER_XBOX
    Swizzler        swz(128, 128, 1);
#endif

    if (!pDevice) {
        return FALSE;
    }

    if (!fmt) {
        fmt = D3DFMT_A4R4G4B4;
    }

    // Verify the current device supports the given format
    hr = CheckCurrentDeviceFormat(pDevice, 0, D3DRTYPE_TEXTURE, fmt);
    if (FAILED(hr)) {
        if (hr != D3DERR_NOTAVAILABLE) {
            ResultFailed(hr, TEXT("IDirect3D8::CheckDeviceFormats"));
        }
        return FALSE;
    }

    // Create the text map texture
    hr = pDevice->CreateTexture(128, 128, 1, 0, 
                                    fmt, POOL_DEFAULT, &g_pd3dtFontMap);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DDevice8::CreateMipMap"));
        return FALSE;
    }

    // Lock the texture
    hr = g_pd3dtFontMap->LockRect(0, &d3dlr, NULL, 0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DMipMap8::LockRect"));
        ReleaseFontMap();
        return FALSE;
    }

#ifdef UNDER_XBOX
    swz.SetU(0);
    swz.SetV(0);
#endif

    if (FormatToBitDepth(fmt) == 16) {

        WORD    wBlack = 0;
        WORD    wWhite = 0xFFFF;
        LPWORD  pwPixel;
        DWORD   dwPitch;
        UINT    i, j;

        pwPixel = (LPWORD)d3dlr.pBits;

        dwPitch = d3dlr.Pitch >> 1;

#ifdef UNDER_XBOX
        if (!XGIsSwizzledFormat(fmt)) {
#endif

            for (i = 0; i < 128; i++) {

                for (j = 0; j < 128; j++) {

                    if (i < 120 && j < 96 && 
                        (g_bFontPixels[i][j/8] & (0x1 << (7-j%8))))
                    {
                        pwPixel[j] = wWhite;
                    }
                    else {
                        pwPixel[j] = wBlack;
                    }
                }

                pwPixel += dwPitch;
            }

#ifdef UNDER_XBOX

        }
        else {

            for (i = 0; i < 128; i++, swz.IncV()) {

                for (j = 0; j < 128; j++, swz.IncU()) {

                    if (i < 120 && j < 96 && 
                        (g_bFontPixels[i][j/8] & (0x1 << (7-j%8))))
                    {
                        pwPixel[swz.Get2D()] = wWhite;
                    }
                    else {
                        pwPixel[swz.Get2D()] = wBlack;
                    }
                }
            }
        }
#endif

    }

    else if (FormatToBitDepth(fmt) == 32) {

        DWORD   dwBlack = 0;
        DWORD   dwWhite = 0xFFFFFFFF;
        LPDWORD pdwPixel;
        DWORD   dwPitch;
        UINT    i, j;

        pdwPixel = (LPDWORD)d3dlr.pBits;

        dwPitch = d3dlr.Pitch >> 2;

#ifdef UNDER_XBOX
        if (!XGIsSwizzledFormat(fmt)) {
#endif

            for (i = 0; i < 128; i++) {

                for (j = 0; j < 128; j++) {

                    if (i < 120 && j < 96 && 
                        (g_bFontPixels[i][j/8] & (0x1 << (7-j%8))))
                    {
                        pdwPixel[j] = dwWhite;
                    }
                    else {
                        pdwPixel[j] = dwBlack;
                    }
                }

                pdwPixel += dwPitch;
            }

#ifdef UNDER_XBOX

        }
        else {

            for (i = 0; i < 128; i++, swz.IncV()) {

                for (j = 0; j < 128; j++, swz.IncU()) {

                    if (i < 120 && j < 96 && 
                        (g_bFontPixels[i][j/8] & (0x1 << (7-j%8))))
                    {
                        pdwPixel[swz.Get2D()] = dwWhite;
                    }
                    else {
                        pdwPixel[swz.Get2D()] = dwBlack;
                    }
                }
            }
        }
#endif

    }

    else {

        return FALSE;
    }

    // Unlock the texture
    hr = g_pd3dtFontMap->UnlockRect(0);
    if (FAILED(hr)) {
        ResultFailed(hr, TEXT("IDirect3DMipMap8::UnlockRect"));
        ReleaseFontMap();
        return FALSE;
    }

#ifdef DEMO_HACK
    g_pd3dtFontMap->GetIDirect3DTexture8()->MoveResourceMemory(D3DMEM_VIDEO);
#endif // DEMO_HACK

    // Build the texture coordinate table
    for (i = 0, fV = 0.0f; i < 8; i++, fV += FONT_TCOORD_HEIGHT) {

        for (j = 0, fU = 0.0f; j < 12; j++, fU += FONT_TCOORD_WIDTH) {

            g_ptcFont[i*12+j].u = fU + 0.00390625f; // add a half texel bias
            g_ptcFont[i*12+j].v = fV - 0.00390625f; // add a half texel bias
        }
    }

    return TRUE;
}

//******************************************************************************
//
// Function:
//
//     ReleaseFontMap
//
// Description:
//
//     Release the font texture map.
//
// Arguments:
//
//     None.
//
// Return Value:
//
//     None.
//
//******************************************************************************
void ReleaseFontMap() {

    if (g_pd3dtFontMap) {
        g_pd3dtFontMap->Release();
        g_pd3dtFontMap = NULL;
    }
}
