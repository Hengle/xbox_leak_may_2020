; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\slixdriver.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_07EDDFIMDA@SlixD?3?5?$AA@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0BE@PKFKNGAE@enter?3?5?5DriverInit?6?$AA@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0BD@FLIOEHHH@exit?3?5?5DriverInit?6?$AA@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0BK@OBNJBGJF@enter?3?5SLIX_RemoveDevice?6?$AA@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0CM@MJEPCHJF@SLIX_RemoveDevice?5called?5with?5NU@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0GF@KJEEMPFP@SLIX_RemoveDevice?5called?5for?5dev@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0CI@BPHFEJDD@exit?3?5?5SLIX_RemoveDevice?5?9?5Insta@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0CF@OJMBJBKK@enter?3?5SLIX_AddDevice?5?9?5Instance@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0DI@HPIDNBG@c?3?2xbox?2private?2test?2tools?2slixb@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0P@HGKOIFFF@Device?5?$CB?$DN?5NULL?$AA@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0EE@KLOJGFBL@interface?5Class?3?5?$CFd?0?5interface?5S@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0BO@PEJABHLP@Topology?3?5?5port?3?5?$CFd?0?5slot?5?$CFd?6?$AA@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0BG@GFHLDLLB@Device?9?$DOSetExtension?6?$AA@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0BH@NCBBAOFK@exit?3?5?5SLIX_AddDevice?6?$AA@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
;	COMDAT ??_C@_0BI@PKDGKIBC@Threw?5out?5an?5interface?6?$AA@
XPPRDATA	SEGMENT DWORD USE32 PUBLIC ''
XPPRDATA	ENDS
XPP$ClassAAASLIX	SEGMENT DWORD USE32 PUBLIC ''
XPP$ClassAAASLIX	ENDS
XPP$Data	SEGMENT DWORD USE32 PUBLIC ''
XPP$Data	ENDS
XPPCODE	SEGMENT PARA USE32 PUBLIC ''
XPPCODE	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_AddRef@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_Release@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_BeginScene@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_EndScene@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DPalette_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DriverInit@4
XPPCODE	SEGMENT PARA USE32 PUBLIC ''
XPPCODE	ENDS
;	COMDAT ?Arf@@YGXPAT_URB@@PAX@Z
XPPCODE	SEGMENT PARA USE32 PUBLIC ''
XPPCODE	ENDS
;	COMDAT _SLIX_RemoveDevice@4
XPPCODE	SEGMENT PARA USE32 PUBLIC ''
XPPCODE	ENDS
;	COMDAT _SLIX_AddDevice@4
XPPCODE	SEGMENT PARA USE32 PUBLIC ''
XPPCODE	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XPP$ClassAAASLIX, XPP$Data
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	?gDriverExtension@@3PAUSLIX_DRIVER_EXTENSION@@A	; gDriverExtension
PUBLIC	?DebugFlags@@3KA				; DebugFlags
PUBLIC	?DebugLevel@@3KA				; DebugLevel
PUBLIC	?gde@@3USLIX_DRIVER_EXTENSION@@A		; gde
PUBLIC	_SLIXDEVICEPORT_TABLE
PUBLIC	_SLIXDEVICESLOT_TABLE
PUBLIC	_SLIX1_Types
PUBLIC	_SLIX2_Types
PUBLIC	_SLIX3_Types
PUBLIC	_SLIX4_Types
PUBLIC	_SLIX5_Types
PUBLIC	_SLIX6_Types
PUBLIC	_SLIX7_Types
PUBLIC	_SLIX8_Types
PUBLIC	_SLIX9_Types
PUBLIC	_SLIX10_Types
PUBLIC	_DriverInit@4
PUBLIC	_SLIX_AddDevice@4
PUBLIC	_SLIX_RemoveDevice@4
PUBLIC	_SLIX1_Description
PUBLIC	_SLIX1_1Description
PUBLIC	_SLIX2_Description
PUBLIC	_SLIX3_Description
PUBLIC	_SLIX3_1Description
PUBLIC	_SLIX4_Description
PUBLIC	_SLIX5_Description
PUBLIC	_SLIX6_Description
PUBLIC	_SLIX7_Description
PUBLIC	_SLIX8_Description
PUBLIC	_SLIX9_Description
PUBLIC	_SLIX10_Description
PUBLIC	_SLIX1_DescriptionPointer
PUBLIC	_SLIX1_1DescriptionPointer
PUBLIC	_SLIX2_DescriptionPointer
PUBLIC	_SLIX3_DescriptionPointer
PUBLIC	_SLIX3_1DescriptionPointer
PUBLIC	_SLIX4_DescriptionPointer
PUBLIC	_SLIX5_DescriptionPointer
PUBLIC	_SLIX6_DescriptionPointer
PUBLIC	_SLIX7_DescriptionPointer
PUBLIC	_SLIX8_DescriptionPointer
PUBLIC	_SLIX9_DescriptionPointer
PUBLIC	_SLIX10_DescriptionPointer
PUBLIC	?CloseUrb@@3PAT_URB@@A				; CloseUrb
PUBLIC	?StopUrb@@3PAT_URB@@A				; StopUrb
_BSS	SEGMENT
?DebugFlags@@3KA DD 01H DUP (?)				; DebugFlags
?CloseUrb@@3PAT_URB@@A DB 0600H DUP (?)			; CloseUrb
?StopUrb@@3PAT_URB@@A DB 0600H DUP (?)			; StopUrb
_BSS	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
CONST	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
CONST	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
CONST	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
CONST	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
CONST	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
CONST	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
CONST	ENDS
XPP$Data	SEGMENT
?DebugLevel@@3KA DD 05H					; DebugLevel
	ORG $+4
?gde@@3USLIX_DRIVER_EXTENSION@@A DD 00H			; gde
	ORG $+5372
	DB	00H
	ORG $+3
?gDriverExtension@@3PAUSLIX_DRIVER_EXTENSION@@A DD FLAT:?gde@@3USLIX_DRIVER_EXTENSION@@A ; gDriverExtension
_SLIXDEVICEPORT_TABLE DD 00H
	DD	00H
	DD	00H
_SLIXDEVICESLOT_TABLE DD 00H
	DD	00H
	DD	00H
_SLIX1_Types DD	FLAT:_SLIXDEVICEPORT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
_SLIX2_Types DD	FLAT:_SLIXDEVICEPORT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
_SLIX3_Types DD	FLAT:_SLIXDEVICEPORT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
_SLIX4_Types DD	FLAT:_SLIXDEVICEPORT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
_SLIX5_Types DD	FLAT:_SLIXDEVICEPORT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
_SLIX6_Types DD	FLAT:_SLIXDEVICEPORT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
_SLIX7_Types DD	FLAT:_SLIXDEVICEPORT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
_SLIX8_Types DD	FLAT:_SLIXDEVICEPORT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
_SLIX9_Types DD	FLAT:_SLIXDEVICEPORT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
_SLIX10_Types DD FLAT:_SLIXDEVICEPORT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
	DD	FLAT:_SLIXDEVICESLOT_TABLE
_SLIX1_Description DD 0ffff0182H
	DD	FLAT:_DriverInit@4
	DD	FLAT:_SLIX_AddDevice@4
	DD	FLAT:_SLIX_RemoveDevice@4
	DD	02H
	DD	FLAT:_SLIX1_Types
_SLIX1_1Description DD 0ffff7882H
	DD	FLAT:_DriverInit@4
	DD	FLAT:_SLIX_AddDevice@4
	DD	FLAT:_SLIX_RemoveDevice@4
	DD	02H
	DD	FLAT:_SLIX1_Types
_SLIX2_Description DD 0ffff0282H
	DD	FLAT:_DriverInit@4
	DD	FLAT:_SLIX_AddDevice@4
	DD	FLAT:_SLIX_RemoveDevice@4
	DD	03H
	DD	FLAT:_SLIX2_Types
_SLIX3_Description DD 0ffff0382H
	DD	FLAT:_DriverInit@4
	DD	FLAT:_SLIX_AddDevice@4
	DD	FLAT:_SLIX_RemoveDevice@4
	DD	03H
	DD	FLAT:_SLIX3_Types
_SLIX3_1Description DD 0ffff5882H
	DD	FLAT:_DriverInit@4
	DD	FLAT:_SLIX_AddDevice@4
	DD	FLAT:_SLIX_RemoveDevice@4
	DD	03H
	DD	FLAT:_SLIX3_Types
_SLIX4_Description DD 0ffff0482H
	DD	FLAT:_DriverInit@4
	DD	FLAT:_SLIX_AddDevice@4
	DD	FLAT:_SLIX_RemoveDevice@4
	DD	03H
	DD	FLAT:_SLIX4_Types
_SLIX5_Description DD 0ffff0582H
	DD	FLAT:_DriverInit@4
	DD	FLAT:_SLIX_AddDevice@4
	DD	FLAT:_SLIX_RemoveDevice@4
	DD	03H
	DD	FLAT:_SLIX5_Types
_SLIX6_Description DD 0ffff0682H
	DD	FLAT:_DriverInit@4
	DD	FLAT:_SLIX_AddDevice@4
	DD	FLAT:_SLIX_RemoveDevice@4
	DD	03H
	DD	FLAT:_SLIX6_Types
_SLIX7_Description DD 0ffff0782H
	DD	FLAT:_DriverInit@4
	DD	FLAT:_SLIX_AddDevice@4
	DD	FLAT:_SLIX_RemoveDevice@4
	DD	03H
	DD	FLAT:_SLIX7_Types
_SLIX8_Description DD 0ffff0882H
	DD	FLAT:_DriverInit@4
	DD	FLAT:_SLIX_AddDevice@4
	DD	FLAT:_SLIX_RemoveDevice@4
	DD	03H
	DD	FLAT:_SLIX8_Types
_SLIX9_Description DD 0ffff0082H
	DD	FLAT:_DriverInit@4
	DD	FLAT:_SLIX_AddDevice@4
	DD	FLAT:_SLIX_RemoveDevice@4
	DD	03H
	DD	FLAT:_SLIX9_Types
_SLIX10_Description DD 0ffffff82H
	DD	FLAT:_DriverInit@4
	DD	FLAT:_SLIX_AddDevice@4
	DD	FLAT:_SLIX_RemoveDevice@4
	DD	03H
	DD	FLAT:_SLIX10_Types
XPP$Data	ENDS
XPP$ClassAAASLIX	SEGMENT
_SLIX1_DescriptionPointer DD FLAT:_SLIX1_Description
_SLIX1_1DescriptionPointer DD FLAT:_SLIX1_1Description
_SLIX2_DescriptionPointer DD FLAT:_SLIX2_Description
_SLIX3_DescriptionPointer DD FLAT:_SLIX3_Description
_SLIX3_1DescriptionPointer DD FLAT:_SLIX3_1Description
_SLIX4_DescriptionPointer DD FLAT:_SLIX4_Description
_SLIX5_DescriptionPointer DD FLAT:_SLIX5_Description
_SLIX6_DescriptionPointer DD FLAT:_SLIX6_Description
_SLIX7_DescriptionPointer DD FLAT:_SLIX7_Description
_SLIX8_DescriptionPointer DD FLAT:_SLIX8_Description
_SLIX9_DescriptionPointer DD FLAT:_SLIX9_Description
_SLIX10_DescriptionPointer DD FLAT:_SLIX10_Description
XPP$ClassAAASLIX	ENDS
PUBLIC	??_C@_07EDDFIMDA@SlixD?3?5?$AA@			; `string'
PUBLIC	??_C@_0BE@PKFKNGAE@enter?3?5?5DriverInit?6?$AA@	; `string'
PUBLIC	??_C@_0BD@FLIOEHHH@exit?3?5?5DriverInit?6?$AA@	; `string'
EXTRN	_DbgPrint:NEAR
EXTRN	?RegisterResources@IUsbInit@@QAEXPAU_USB_RESOURCE_REQUIREMENTS@@@Z:NEAR ; IUsbInit::RegisterResources
_BSS	SEGMENT
_gInstance DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_07EDDFIMDA@SlixD?3?5?$AA@
; File c:\xbox\private\test\tools\slixbox\slixd\slixdriver.cpp
XPPRDATA	SEGMENT
??_C@_07EDDFIMDA@SlixD?3?5?$AA@ DB 'SlixD: ', 00H	; `string'
XPPRDATA	ENDS
;	COMDAT ??_C@_0BE@PKFKNGAE@enter?3?5?5DriverInit?6?$AA@
XPPRDATA	SEGMENT
??_C@_0BE@PKFKNGAE@enter?3?5?5DriverInit?6?$AA@ DB 'enter:  DriverInit', 0aH
	DB	00H						; `string'
XPPRDATA	ENDS
;	COMDAT ??_C@_0BD@FLIOEHHH@exit?3?5?5DriverInit?6?$AA@
XPPRDATA	SEGMENT
??_C@_0BD@FLIOEHHH@exit?3?5?5DriverInit?6?$AA@ DB 'exit:  DriverInit', 0aH
	DB	00H						; `string'
; Function compile flags: /Ogs
XPPRDATA	ENDS
;	COMDAT _DriverInit@4
XPPCODE	SEGMENT
_resourceRequirements$ = -12
_pUsbInit$ = 8
_DriverInit@4 PROC NEAR					; COMDAT

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 184  :     DBGPRINT(2, ("enter:  DriverInit\n"));    

  00006	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?DebugLevel@@3KA, 2 ; DebugLevel
  0000d	56		 push	 esi
  0000e	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_07EDDFIMDA@SlixD?3?5?$AA@
  00013	72 13		 jb	 SHORT $L39491
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 _DbgPrint
  0001b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_0BE@PKFKNGAE@enter?3?5?5DriverInit?6?$AA@
  00022	e8 00 00 00 00	 call	 _DbgPrint
  00027	59		 pop	 ecx
$L39491:

; 185  :     ULONG port, slot;
; 186  :     UCHAR realMaxPorts = (UCHAR)XGetPortCount();
; 187  : 
; 188  :     for (port = 0;port < MAX_PORTS; port++) {

  00028	33 d2		 xor	 edx, edx
  0002a	33 c0		 xor	 eax, eax
  0002c	57		 push	 edi
$L39498:

; 189  : 		for (slot = 0; slot < MAX_SLOTS; slot++) {

  0002d	6a 04		 push	 4
  0002f	59		 pop	 ecx
$L39501:

; 190  : 			gDriverExtension->Nodes[port][slot].Device = NULL;

  00030	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gDriverExtension@@3PAUSLIX_DRIVER_EXTENSION@@A ; gDriverExtension
  00036	89 14 38	 mov	 DWORD PTR [eax+edi], edx
  00039	05 a8 00 00 00	 add	 eax, 168		; 000000a8H
  0003e	49		 dec	 ecx
  0003f	75 ef		 jne	 SHORT $L39501

; 185  :     ULONG port, slot;
; 186  :     UCHAR realMaxPorts = (UCHAR)XGetPortCount();
; 187  : 
; 188  :     for (port = 0;port < MAX_PORTS; port++) {

  00041	3d 00 15 00 00	 cmp	 eax, 5376		; 00001500H
  00046	72 e5		 jb	 SHORT $L39498

; 191  : 		}
; 192  :     }
; 193  :     gInstance = 0;
; 194  :     //
; 195  :     //  Allocate a whole bunch of resources, we don't
; 196  :     //  care that much how much memory we take, and
; 197  :     //  we don't want to run out.
; 198  :     //
; 199  :     USB_RESOURCE_REQUIREMENTS resourceRequirements;
; 200  :     resourceRequirements.ConnectorType = USB_CONNECTOR_TYPE_DIRECT;
; 201  :     resourceRequirements.MaxDevices = realMaxPorts;
; 202  :     resourceRequirements.MaxCompositeInterfaces = 3;
; 203  :     resourceRequirements.MaxControlEndpoints = 2;
; 204  :     resourceRequirements.MaxBulkEndpoints = 2;
; 205  :     resourceRequirements.MaxInterruptEndpoints = 2;    
; 206  :     resourceRequirements.MaxControlTDperTransfer = 40;
; 207  :     resourceRequirements.MaxBulkTDperTransfer = 40;
; 208  :     resourceRequirements.MaxIsochEndpoints = 2;
; 209  :     resourceRequirements.MaxIsochMaxBuffers = 5;
; 210  :     pUsbInit->RegisterResources(&resourceRequirements);

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pUsbInit$[ebp]
  0004b	8d 45 f4	 lea	 eax, DWORD PTR _resourceRequirements$[ebp]
  0004e	50		 push	 eax
  0004f	89 15 00 00 00
	00		 mov	 DWORD PTR _gInstance, edx
  00055	88 55 f4	 mov	 BYTE PTR _resourceRequirements$[ebp], dl
  00058	c6 45 f5 04	 mov	 BYTE PTR _resourceRequirements$[ebp+1], 4
  0005c	c6 45 f6 03	 mov	 BYTE PTR _resourceRequirements$[ebp+2], 3
  00060	c6 45 f7 02	 mov	 BYTE PTR _resourceRequirements$[ebp+3], 2
  00064	c6 45 f8 02	 mov	 BYTE PTR _resourceRequirements$[ebp+4], 2
  00068	c6 45 f9 02	 mov	 BYTE PTR _resourceRequirements$[ebp+5], 2
  0006c	c6 45 fa 28	 mov	 BYTE PTR _resourceRequirements$[ebp+6], 40 ; 00000028H
  00070	c6 45 fb 28	 mov	 BYTE PTR _resourceRequirements$[ebp+7], 40 ; 00000028H
  00074	c6 45 fc 02	 mov	 BYTE PTR _resourceRequirements$[ebp+8], 2
  00078	c6 45 fd 05	 mov	 BYTE PTR _resourceRequirements$[ebp+9], 5
  0007c	e8 00 00 00 00	 call	 ?RegisterResources@IUsbInit@@QAEXPAU_USB_RESOURCE_REQUIREMENTS@@@Z ; IUsbInit::RegisterResources

; 211  :     resourceRequirements.ConnectorType = USB_CONNECTOR_TYPE_HIGH_POWER;
; 212  :     pUsbInit->RegisterResources(&resourceRequirements);

  00081	8b 4d 08	 mov	 ecx, DWORD PTR _pUsbInit$[ebp]
  00084	8d 45 f4	 lea	 eax, DWORD PTR _resourceRequirements$[ebp]
  00087	50		 push	 eax
  00088	c6 45 f4 01	 mov	 BYTE PTR _resourceRequirements$[ebp], 1
  0008c	e8 00 00 00 00	 call	 ?RegisterResources@IUsbInit@@QAEXPAU_USB_RESOURCE_REQUIREMENTS@@@Z ; IUsbInit::RegisterResources

; 213  :     resourceRequirements.ConnectorType = USB_CONNECTOR_TYPE_LOW_POWER;
; 214  :     resourceRequirements.MaxDevices = realMaxPorts*2;
; 215  :     pUsbInit->RegisterResources(&resourceRequirements);

  00091	8b 4d 08	 mov	 ecx, DWORD PTR _pUsbInit$[ebp]
  00094	8d 45 f4	 lea	 eax, DWORD PTR _resourceRequirements$[ebp]
  00097	50		 push	 eax
  00098	c6 45 f4 02	 mov	 BYTE PTR _resourceRequirements$[ebp], 2
  0009c	c6 45 f5 08	 mov	 BYTE PTR _resourceRequirements$[ebp+1], 8
  000a0	e8 00 00 00 00	 call	 ?RegisterResources@IUsbInit@@QAEXPAU_USB_RESOURCE_REQUIREMENTS@@@Z ; IUsbInit::RegisterResources

; 216  : 
; 217  :     DBGPRINT(2, ("exit:  DriverInit\n"));    

  000a5	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?DebugLevel@@3KA, 2 ; DebugLevel
  000ac	5f		 pop	 edi
  000ad	72 13		 jb	 SHORT $L39505
  000af	56		 push	 esi
  000b0	e8 00 00 00 00	 call	 _DbgPrint
  000b5	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_0BD@FLIOEHHH@exit?3?5?5DriverInit?6?$AA@
  000bc	e8 00 00 00 00	 call	 _DbgPrint
  000c1	59		 pop	 ecx
$L39505:
  000c2	5e		 pop	 esi

; 218  : 
; 219  :     return;// status;
; 220  : }

  000c3	c9		 leave
  000c4	c2 04 00	 ret	 4
_DriverInit@4 ENDP
XPPCODE	ENDS
PUBLIC	?Arf@@YGXPAT_URB@@PAX@Z				; Arf
EXTRN	__imp__KeSetEvent@12:NEAR
; Function compile flags: /Ogs
;	COMDAT ?Arf@@YGXPAT_URB@@PAX@Z
XPPCODE	SEGMENT
_urb$ = 8
_context$ = 12
?Arf@@YGXPAT_URB@@PAX@Z PROC NEAR			; Arf, COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 225  : 
; 226  : 	PKEVENT pEvent = (PKEVENT) context;
; 227  : 	KeSetEvent(pEvent, IO_NO_INCREMENT ,FALSE);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	ff 75 0c	 push	 DWORD PTR _context$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetEvent@12

; 228  : 
; 229  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?Arf@@YGXPAT_URB@@PAX@Z ENDP				; Arf
XPPCODE	ENDS
PUBLIC	??_C@_0BK@OBNJBGJF@enter?3?5SLIX_RemoveDevice?6?$AA@ ; `string'
PUBLIC	??_C@_0CM@MJEPCHJF@SLIX_RemoveDevice?5called?5with?5NU@ ; `string'
PUBLIC	??_C@_0GF@KJEEMPFP@SLIX_RemoveDevice?5called?5for?5dev@ ; `string'
PUBLIC	??_C@_0CI@BPHFEJDD@exit?3?5?5SLIX_RemoveDevice?5?9?5Insta@ ; `string'
EXTRN	__imp__KeResetEvent@4:NEAR
EXTRN	__imp__KeWaitForSingleObject@20:NEAR
EXTRN	?SubmitRequest@IUsbDevice@@QAEJPAT_URB@@@Z:NEAR	; IUsbDevice::SubmitRequest
EXTRN	?GetExtension@IUsbDevice@@QBEPAXXZ:NEAR		; IUsbDevice::GetExtension
EXTRN	?SetExtension@IUsbDevice@@QAEPAXPAX@Z:NEAR	; IUsbDevice::SetExtension
EXTRN	?GetPort@IUsbDevice@@QBEKXZ:NEAR		; IUsbDevice::GetPort
EXTRN	?RemoveComplete@IUsbDevice@@QAEXXZ:NEAR		; IUsbDevice::RemoveComplete
;	COMDAT ??_C@_0BK@OBNJBGJF@enter?3?5SLIX_RemoveDevice?6?$AA@
XPPRDATA	SEGMENT
??_C@_0BK@OBNJBGJF@enter?3?5SLIX_RemoveDevice?6?$AA@ DB 'enter: SLIX_Remo'
	DB	'veDevice', 0aH, 00H				; `string'
XPPRDATA	ENDS
;	COMDAT ??_C@_0CM@MJEPCHJF@SLIX_RemoveDevice?5called?5with?5NU@
XPPRDATA	SEGMENT
??_C@_0CM@MJEPCHJF@SLIX_RemoveDevice?5called?5with?5NU@ DB 'SLIX_RemoveDe'
	DB	'vice called with NULL Device!', 0aH, 00H	; `string'
XPPRDATA	ENDS
;	COMDAT ??_C@_0GF@KJEEMPFP@SLIX_RemoveDevice?5called?5for?5dev@
XPPRDATA	SEGMENT
??_C@_0GF@KJEEMPFP@SLIX_RemoveDevice?5called?5for?5dev@ DB 'SLIX_RemoveDe'
	DB	'vice called for device that has already been removed!!', 0aH, 'I'
	DB	'UsbDevice passed: %p. Port: %x', 0aH, 00H	; `string'
XPPRDATA	ENDS
;	COMDAT ??_C@_0CI@BPHFEJDD@exit?3?5?5SLIX_RemoveDevice?5?9?5Insta@
XPPRDATA	SEGMENT
??_C@_0CI@BPHFEJDD@exit?3?5?5SLIX_RemoveDevice?5?9?5Insta@ DB 'exit:  SLI'
	DB	'X_RemoveDevice - Instance %d', 0aH, 00H	; `string'
; Function compile flags: /Ogs
XPPRDATA	ENDS
;	COMDAT _SLIX_RemoveDevice@4
XPPCODE	SEGMENT
_event$ = -24
_i$ = -8
tv454 = -4
_Device$ = 8
_SLIX_RemoveDevice@4 PROC NEAR				; COMDAT

; 239  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 240  : 	HANDLE ourendpoints[MAX_ENDPOINTS];
; 241  : 	int i;
; 242  : 	KEVENT event;
; 243  : 
; 244  : 	KeInitializeEvent(&event,NotificationEvent,FALSE);

  00006	80 65 e8 00	 and	 BYTE PTR _event$[ebp], 0
  0000a	8d 45 f0	 lea	 eax, DWORD PTR _event$[ebp+8]
  0000d	56		 push	 esi
  0000e	33 f6		 xor	 esi, esi

; 245  : 
; 246  :     DBGPRINT(2, ("enter: SLIX_RemoveDevice\n"));

  00010	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?DebugLevel@@3KA, 2 ; DebugLevel
  00017	89 45 f4	 mov	 DWORD PTR _event$[ebp+12], eax
  0001a	8d 45 f0	 lea	 eax, DWORD PTR _event$[ebp+8]
  0001d	57		 push	 edi
  0001e	c6 45 ea 04	 mov	 BYTE PTR _event$[ebp+2], 4
  00022	89 75 ec	 mov	 DWORD PTR _event$[ebp+4], esi
  00025	89 45 f0	 mov	 DWORD PTR _event$[ebp+8], eax
  00028	bf 00 00 00 00	 mov	 edi, OFFSET FLAT:??_C@_07EDDFIMDA@SlixD?3?5?$AA@
  0002d	72 13		 jb	 SHORT $L39522
  0002f	57		 push	 edi
  00030	e8 00 00 00 00	 call	 _DbgPrint
  00035	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_0BK@OBNJBGJF@enter?3?5SLIX_RemoveDevice?6?$AA@
  0003c	e8 00 00 00 00	 call	 _DbgPrint
  00041	59		 pop	 ecx
$L39522:

; 247  : 	if(Device == NULL) {

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _Device$[ebp]
  00045	3b ce		 cmp	 ecx, esi
  00047	75 25		 jne	 SHORT $L39524

; 248  : 		DBGPRINT(1, ("SLIX_RemoveDevice called with NULL Device!\n"));

  00049	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?DebugLevel@@3KA, 1 ; DebugLevel
  00050	0f 82 09 02 00
	00		 jb	 $L39515
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 _DbgPrint
  0005c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_0CM@MJEPCHJF@SLIX_RemoveDevice?5called?5with?5NU@
  00063	e8 00 00 00 00	 call	 _DbgPrint
  00068	59		 pop	 ecx

; 249  : 		return;

  00069	e9 f1 01 00 00	 jmp	 $L39515
$L39524:
  0006e	53		 push	 ebx

; 250  : 	}
; 251  : 
; 252  :     PDEVICE_EXTENSION   fdoDeviceExtension = (PDEVICE_EXTENSION) Device->GetExtension();

  0006f	e8 00 00 00 00	 call	 ?GetExtension@IUsbDevice@@QBEPAXXZ ; IUsbDevice::GetExtension
  00074	8b d8		 mov	 ebx, eax

; 253  : 
; 254  : 	if(fdoDeviceExtension == NULL) {

  00076	3b de		 cmp	 ebx, esi
  00078	75 29		 jne	 SHORT $L39673

; 255  : 		DBGPRINT(1, ("SLIX_RemoveDevice called for device that has already been removed!!\n"
; 256  : 			"IUsbDevice passed: %p. Port: %x\n", Device, Device->GetPort()))

  0007a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?DebugLevel@@3KA, 1 ; DebugLevel
  00081	72 20		 jb	 SHORT $L39673
  00083	57		 push	 edi
  00084	e8 00 00 00 00	 call	 _DbgPrint
  00089	59		 pop	 ecx
  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _Device$[ebp]
  0008d	e8 00 00 00 00	 call	 ?GetPort@IUsbDevice@@QBEKXZ ; IUsbDevice::GetPort
  00092	50		 push	 eax
  00093	ff 75 08	 push	 DWORD PTR _Device$[ebp]
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GF@KJEEMPFP@SLIX_RemoveDevice?5called?5for?5dev@
  0009b	e8 00 00 00 00	 call	 _DbgPrint
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
$L39673:

; 257  : 	}
; 258  : 
; 259  : 
; 260  : 	fdoDeviceExtension->flags = 0;
; 261  : 
; 262  : 	fdoDeviceExtension->Device = 0;
; 263  : 
; 264  : 
; 265  : 	if(fdoDeviceExtension->Endpoints[0] == NULL) 

  000a3	39 73 04	 cmp	 DWORD PTR [ebx+4], esi
  000a6	89 b3 a4 00 00
	00		 mov	 DWORD PTR [ebx+164], esi
  000ac	89 33		 mov	 DWORD PTR [ebx], esi
  000ae	75 4f		 jne	 SHORT $L39532

; 266  : 	{	//-1 == closed, other == open
; 267  : 		RtlZeroMemory(&CloseUrb[0],sizeof(URB));

  000b0	6a 0c		 push	 12			; 0000000cH
  000b2	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:?CloseUrb@@3PAT_URB@@A ; CloseUrb
  000b7	59		 pop	 ecx
  000b8	33 c0		 xor	 eax, eax
  000ba	8b fa		 mov	 edi, edx
  000bc	f3 ab		 rep stosd

; 268  : 		USB_BUILD_CLOSE_DEFAULT_ENDPOINT((&CloseUrb[0].CloseEndpoint), Arf, &event);
; 269  : 		Device->SubmitRequest(&CloseUrb[0]);

  000be	8b 4d 08	 mov	 ecx, DWORD PTR _Device$[ebp]
  000c1	8d 45 e8	 lea	 eax, DWORD PTR _event$[ebp]
  000c4	52		 push	 edx
  000c5	c6 05 00 00 00
	00 1c		 mov	 BYTE PTR ?CloseUrb@@3PAT_URB@@A, 28 ; 0000001cH
  000cc	c6 05 01 00 00
	00 c3		 mov	 BYTE PTR ?CloseUrb@@3PAT_URB@@A+1, 195 ; 000000c3H
  000d3	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CloseUrb@@3PAT_URB@@A+8, OFFSET FLAT:?Arf@@YGXPAT_URB@@PAX@Z ; Arf
  000dd	a3 0c 00 00 00	 mov	 DWORD PTR ?CloseUrb@@3PAT_URB@@A+12, eax
  000e2	e8 00 00 00 00	 call	 ?SubmitRequest@IUsbDevice@@QAEJPAT_URB@@@Z ; IUsbDevice::SubmitRequest

; 270  : 		KeWaitForSingleObject(&event,Executive,KernelMode,FALSE,NULL);  // Wait for completion

  000e7	56		 push	 esi
  000e8	56		 push	 esi
  000e9	56		 push	 esi
  000ea	56		 push	 esi
  000eb	8d 45 e8	 lea	 eax, DWORD PTR _event$[ebp]
  000ee	50		 push	 eax
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20

; 271  : 		KeResetEvent(&event);

  000f5	8d 45 e8	 lea	 eax, DWORD PTR _event$[ebp]
  000f8	50		 push	 eax
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeResetEvent@4
$L39532:

; 272  : 	}
; 273  : 	for(i = 1; i < MAX_ENDPOINTS; i++)	

  000ff	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]
  00102	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00109	89 55 fc	 mov	 DWORD PTR tv454[ebp], edx
$L39535:

; 274  : 	{                                                                            //changed by Bing from 16 to 32
; 275  : 		if(fdoDeviceExtension->Endpoints[i] != (void*)-1 && fdoDeviceExtension->Endpoints[i] != (void*)NULL) 

  0010c	8b 02		 mov	 eax, DWORD PTR [edx]
  0010e	83 f8 ff	 cmp	 eax, -1
  00111	0f 84 d8 00 00
	00		 je	 $L39536
  00117	85 c0		 test	 eax, eax
  00119	0f 84 d0 00 00
	00		 je	 $L39536

; 276  : 		{
; 277  : 			RtlZeroMemory(&CloseUrb[i],sizeof(URB));

  0011f	6a 0c		 push	 12			; 0000000cH
  00121	33 c0		 xor	 eax, eax
  00123	8d be 30 00 00
	00		 lea	 edi, DWORD PTR ?CloseUrb@@3PAT_URB@@A[esi+48]
  00129	59		 pop	 ecx
  0012a	f3 ab		 rep stosd

; 278  : 			if(fdoDeviceExtension->EndpointType[i] == 1)

  0012c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0012f	80 bc 18 84 00
	00 00 01	 cmp	 BYTE PTR [eax+ebx+132], 1
  00137	75 61		 jne	 SHORT $L39542

; 279  : 			{
; 280  : 				RtlZeroMemory(&StopUrb[i],sizeof(URB));

  00139	8d 96 30 00 00
	00		 lea	 edx, DWORD PTR ?StopUrb@@3PAT_URB@@A[esi+48]
  0013f	33 c0		 xor	 eax, eax
  00141	6a 0c		 push	 12			; 0000000cH
  00143	59		 pop	 ecx
  00144	8b fa		 mov	 edi, edx
  00146	f3 ab		 rep stosd

; 281  : 				USB_BUILD_ISOCH_STOP_TRANSFER((&StopUrb[i].IsochStopTransfer), fdoDeviceExtension->Endpoints[i]);

  00148	21 86 38 00 00
	00		 and	 DWORD PTR ?StopUrb@@3PAT_URB@@A[esi+56], eax
  0014e	21 86 3c 00 00
	00		 and	 DWORD PTR ?StopUrb@@3PAT_URB@@A[esi+60], eax
  00154	8b 45 fc	 mov	 eax, DWORD PTR tv454[ebp]

; 282  : 				Device->SubmitRequest(&StopUrb[i]);

  00157	8b 4d 08	 mov	 ecx, DWORD PTR _Device$[ebp]
  0015a	c6 02 14	 mov	 BYTE PTR [edx], 20	; 00000014H
  0015d	c6 86 31 00 00
	00 0d		 mov	 BYTE PTR ?StopUrb@@3PAT_URB@@A[esi+49], 13 ; 0000000dH
  00164	8b 00		 mov	 eax, DWORD PTR [eax]
  00166	52		 push	 edx
  00167	89 86 40 00 00
	00		 mov	 DWORD PTR ?StopUrb@@3PAT_URB@@A[esi+64], eax
  0016d	e8 00 00 00 00	 call	 ?SubmitRequest@IUsbDevice@@QAEJPAT_URB@@@Z ; IUsbDevice::SubmitRequest

; 283  : 				USB_BUILD_ISOCH_CLOSE_ENDPOINT((&CloseUrb[i].IsochCloseEndpoint), fdoDeviceExtension->Endpoints[i], Arf, &event);

  00172	8d 45 e8	 lea	 eax, DWORD PTR _event$[ebp]
  00175	89 86 3c 00 00
	00		 mov	 DWORD PTR ?CloseUrb@@3PAT_URB@@A[esi+60], eax
  0017b	8b 45 fc	 mov	 eax, DWORD PTR tv454[ebp]
  0017e	c6 86 30 00 00
	00 1c		 mov	 BYTE PTR ?CloseUrb@@3PAT_URB@@A[esi+48], 28 ; 0000001cH
  00185	c6 86 31 00 00
	00 4a		 mov	 BYTE PTR ?CloseUrb@@3PAT_URB@@A[esi+49], 74 ; 0000004aH
  0018c	c7 86 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CloseUrb@@3PAT_URB@@A[esi+56], OFFSET FLAT:?Arf@@YGXPAT_URB@@PAX@Z ; Arf
  00196	8b 00		 mov	 eax, DWORD PTR [eax]

; 284  : 
; 285  : 			} else 

  00198	eb 23		 jmp	 SHORT $L39674
$L39542:

; 286  : 			{
; 287  : 				USB_BUILD_CLOSE_ENDPOINT((&CloseUrb[i].CloseEndpoint), fdoDeviceExtension->Endpoints[i], Arf, &event);

  0019a	8d 45 e8	 lea	 eax, DWORD PTR _event$[ebp]
  0019d	c6 86 30 00 00
	00 1c		 mov	 BYTE PTR ?CloseUrb@@3PAT_URB@@A[esi+48], 28 ; 0000001cH
  001a4	c6 86 31 00 00
	00 43		 mov	 BYTE PTR ?CloseUrb@@3PAT_URB@@A[esi+49], 67 ; 00000043H
  001ab	c7 86 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CloseUrb@@3PAT_URB@@A[esi+56], OFFSET FLAT:?Arf@@YGXPAT_URB@@PAX@Z ; Arf
  001b5	89 86 3c 00 00
	00		 mov	 DWORD PTR ?CloseUrb@@3PAT_URB@@A[esi+60], eax
  001bb	8b 02		 mov	 eax, DWORD PTR [edx]
$L39674:

; 288  : 			}
; 289  : 			Device->SubmitRequest(&CloseUrb[i]);

  001bd	8b 4d 08	 mov	 ecx, DWORD PTR _Device$[ebp]
  001c0	89 86 40 00 00
	00		 mov	 DWORD PTR ?CloseUrb@@3PAT_URB@@A[esi+64], eax
  001c6	8d 86 30 00 00
	00		 lea	 eax, DWORD PTR ?CloseUrb@@3PAT_URB@@A[esi+48]
  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 ?SubmitRequest@IUsbDevice@@QAEJPAT_URB@@@Z ; IUsbDevice::SubmitRequest

; 290  : 			KeWaitForSingleObject(&event,Executive,KernelMode,FALSE,NULL);  // Wait for completion

  001d2	33 c0		 xor	 eax, eax
  001d4	50		 push	 eax
  001d5	50		 push	 eax
  001d6	50		 push	 eax
  001d7	50		 push	 eax
  001d8	8d 45 e8	 lea	 eax, DWORD PTR _event$[ebp]
  001db	50		 push	 eax
  001dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20

; 291  : 			KeResetEvent(&event);

  001e2	8d 45 e8	 lea	 eax, DWORD PTR _event$[ebp]
  001e5	50		 push	 eax
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeResetEvent@4
  001ec	8b 55 fc	 mov	 edx, DWORD PTR tv454[ebp]
$L39536:
  001ef	ff 45 f8	 inc	 DWORD PTR _i$[ebp]
  001f2	83 c2 04	 add	 edx, 4
  001f5	83 c6 30	 add	 esi, 48			; 00000030H
  001f8	81 fe d0 05 00
	00		 cmp	 esi, 1488		; 000005d0H
  001fe	89 55 fc	 mov	 DWORD PTR tv454[ebp], edx
  00201	0f 8c 05 ff ff
	ff		 jl	 $L39535

; 292  : 		}
; 293  : 	}
; 294  : 
; 295  : 	for(i = 0; i < MAX_ENDPOINTS; i++) 

  00207	33 c0		 xor	 eax, eax
  00209	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
$L39548:

; 296  : 	{
; 297  : 		fdoDeviceExtension->Endpoints[i] = (void*)-1;

  0020c	83 09 ff	 or	 DWORD PTR [ecx], -1

; 298  : 		fdoDeviceExtension->EndpointType[i] = 0;

  0020f	80 a4 03 84 00
	00 00 00	 and	 BYTE PTR [ebx+eax+132], 0
  00217	40		 inc	 eax
  00218	83 c1 04	 add	 ecx, 4
  0021b	83 f8 20	 cmp	 eax, 32			; 00000020H
  0021e	7c ec		 jl	 SHORT $L39548

; 299  : 	}
; 300  : 
; 301  : 	Device->SetExtension(NULL);

  00220	8b 4d 08	 mov	 ecx, DWORD PTR _Device$[ebp]
  00223	6a 00		 push	 0
  00225	e8 00 00 00 00	 call	 ?SetExtension@IUsbDevice@@QAEPAXPAX@Z ; IUsbDevice::SetExtension

; 302  : 	Device->RemoveComplete();

  0022a	8b 4d 08	 mov	 ecx, DWORD PTR _Device$[ebp]
  0022d	e8 00 00 00 00	 call	 ?RemoveComplete@IUsbDevice@@QAEXXZ ; IUsbDevice::RemoveComplete

; 303  : 
; 304  : 
; 305  : 	DBGPRINT(2, ("exit:  SLIX_RemoveDevice - Instance %d\n", gInstance));

  00232	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?DebugLevel@@3KA, 2 ; DebugLevel
  00239	5b		 pop	 ebx
  0023a	72 1d		 jb	 SHORT $L39552
  0023c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDDFIMDA@SlixD?3?5?$AA@
  00241	e8 00 00 00 00	 call	 _DbgPrint
  00246	ff 35 00 00 00
	00		 push	 DWORD PTR _gInstance
  0024c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@BPHFEJDD@exit?3?5?5SLIX_RemoveDevice?5?9?5Insta@
  00251	e8 00 00 00 00	 call	 _DbgPrint
  00256	83 c4 0c	 add	 esp, 12			; 0000000cH
$L39552:

; 306  : 	gInstance--; // decrement count of devices 

  00259	ff 0d 00 00 00
	00		 dec	 DWORD PTR _gInstance
$L39515:
  0025f	5f		 pop	 edi
  00260	5e		 pop	 esi

; 307  : 
; 308  : }

  00261	c9		 leave
  00262	c2 04 00	 ret	 4
_SLIX_RemoveDevice@4 ENDP
XPPCODE	ENDS
PUBLIC	??_C@_0CF@OJMBJBKK@enter?3?5SLIX_AddDevice?5?9?5Instance@ ; `string'
PUBLIC	??_C@_0DI@HPIDNBG@c?3?2xbox?2private?2test?2tools?2slixb@ ; `string'
PUBLIC	??_C@_0P@HGKOIFFF@Device?5?$CB?$DN?5NULL?$AA@	; `string'
PUBLIC	??_C@_0EE@KLOJGFBL@interface?5Class?3?5?$CFd?0?5interface?5S@ ; `string'
PUBLIC	??_C@_0BO@PEJABHLP@Topology?3?5?5port?3?5?$CFd?0?5slot?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@GFHLDLLB@Device?9?$DOSetExtension?6?$AA@ ; `string'
PUBLIC	??_C@_0BH@NCBBAOFK@exit?3?5?5SLIX_AddDevice?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@PKDGKIBC@Threw?5out?5an?5interface?6?$AA@ ; `string'
EXTRN	__imp__RtlAssert@16:NEAR
EXTRN	?SetClassSpecificType@IUsbDevice@@QAEXE@Z:NEAR	; IUsbDevice::SetClassSpecificType
EXTRN	?AddComplete@IUsbDevice@@QAEXJ@Z:NEAR		; IUsbDevice::AddComplete
EXTRN	?GetInterfaceDescriptor@IUsbDevice@@QBEPBU_USB_INTERFACE_DESCRIPTOR@@XZ:NEAR ; IUsbDevice::GetInterfaceDescriptor
;	COMDAT ??_C@_0CF@OJMBJBKK@enter?3?5SLIX_AddDevice?5?9?5Instance@
XPPRDATA	SEGMENT
??_C@_0CF@OJMBJBKK@enter?3?5SLIX_AddDevice?5?9?5Instance@ DB 'enter: SLIX'
	DB	'_AddDevice - Instance %d', 0aH, 00H		; `string'
XPPRDATA	ENDS
;	COMDAT ??_C@_0DI@HPIDNBG@c?3?2xbox?2private?2test?2tools?2slixb@
XPPRDATA	SEGMENT
??_C@_0DI@HPIDNBG@c?3?2xbox?2private?2test?2tools?2slixb@ DB 'c:\xbox\pri'
	DB	'vate\test\tools\slixbox\slixd\slixdriver.cpp', 00H ; `string'
XPPRDATA	ENDS
;	COMDAT ??_C@_0P@HGKOIFFF@Device?5?$CB?$DN?5NULL?$AA@
XPPRDATA	SEGMENT
??_C@_0P@HGKOIFFF@Device?5?$CB?$DN?5NULL?$AA@ DB 'Device != NULL', 00H ; `string'
XPPRDATA	ENDS
;	COMDAT ??_C@_0EE@KLOJGFBL@interface?5Class?3?5?$CFd?0?5interface?5S@
XPPRDATA	SEGMENT
??_C@_0EE@KLOJGFBL@interface?5Class?3?5?$CFd?0?5interface?5S@ DB 'interfa'
	DB	'ce Class: %d, interface Subclass: %d , interface number: %d', 0aH
	DB	00H						; `string'
XPPRDATA	ENDS
;	COMDAT ??_C@_0BO@PEJABHLP@Topology?3?5?5port?3?5?$CFd?0?5slot?5?$CFd?6?$AA@
XPPRDATA	SEGMENT
??_C@_0BO@PEJABHLP@Topology?3?5?5port?3?5?$CFd?0?5slot?5?$CFd?6?$AA@ DB 'T'
	DB	'opology:  port: %d, slot %d', 0aH, 00H	; `string'
XPPRDATA	ENDS
;	COMDAT ??_C@_0BG@GFHLDLLB@Device?9?$DOSetExtension?6?$AA@
XPPRDATA	SEGMENT
??_C@_0BG@GFHLDLLB@Device?9?$DOSetExtension?6?$AA@ DB 'Device->SetExtensi'
	DB	'on', 0aH, 00H				; `string'
XPPRDATA	ENDS
;	COMDAT ??_C@_0BH@NCBBAOFK@exit?3?5?5SLIX_AddDevice?6?$AA@
XPPRDATA	SEGMENT
??_C@_0BH@NCBBAOFK@exit?3?5?5SLIX_AddDevice?6?$AA@ DB 'exit:  SLIX_AddDev'
	DB	'ice', 0aH, 00H				; `string'
XPPRDATA	ENDS
;	COMDAT ??_C@_0BI@PKDGKIBC@Threw?5out?5an?5interface?6?$AA@
XPPRDATA	SEGMENT
??_C@_0BI@PKDGKIBC@Threw?5out?5an?5interface?6?$AA@ DB 'Threw out an inte'
	DB	'rface', 0aH, 00H				; `string'
; Function compile flags: /Ogs
XPPRDATA	ENDS
;	COMDAT _SLIX_AddDevice@4
XPPCODE	SEGMENT
_driverExtension$ = -4
_Device$ = 8
_SLIX_AddDevice@4 PROC NEAR				; COMDAT

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 319  :     PSLIX_DRIVER_EXTENSION driverExtension;
; 320  :     NTSTATUS ntStatus;
; 321  :     PDEVICE_EXTENSION fdoDeviceExtension;
; 322  :     ULONG port,slot,bUSBInterface;
; 323  : 	URB urb;
; 324  : 	int i;
; 325  : 	
; 326  :     const USB_INTERFACE_DESCRIPTOR    *interfacedescriptor;
; 327  : 	DBGPRINT(2, ("enter: SLIX_AddDevice - Instance %d\n", gInstance));

  00004	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?DebugLevel@@3KA, 2 ; DebugLevel
  0000b	72 1d		 jb	 SHORT $L39566
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDDFIMDA@SlixD?3?5?$AA@
  00012	e8 00 00 00 00	 call	 _DbgPrint
  00017	ff 35 00 00 00
	00		 push	 DWORD PTR _gInstance
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OJMBJBKK@enter?3?5SLIX_AddDevice?5?9?5Instance@
  00022	e8 00 00 00 00	 call	 _DbgPrint
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
$L39566:
  0002a	53		 push	 ebx

; 328  : 	ASSERT(Device != NULL /* SLIX_RemoveDevice */);

  0002b	33 db		 xor	 ebx, ebx
  0002d	39 5d 08	 cmp	 DWORD PTR _Device$[ebp], ebx
  00030	56		 push	 esi
  00031	57		 push	 edi
  00032	75 16		 jne	 SHORT $L39568
  00034	53		 push	 ebx
  00035	68 48 01 00 00	 push	 328			; 00000148H
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HPIDNBG@c?3?2xbox?2private?2test?2tools?2slixb@
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@HGKOIFFF@Device?5?$CB?$DN?5NULL?$AA@
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L39568:

; 329  : 	driverExtension = gDriverExtension;

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gDriverExtension@@3PAUSLIX_DRIVER_EXTENSION@@A ; gDriverExtension

; 330  : 
; 331  : 	// get topology so we know where we are plugged in
; 332  : 	port = Device->GetPort();

  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _Device$[ebp]
  00052	89 45 fc	 mov	 DWORD PTR _driverExtension$[ebp], eax
  00055	e8 00 00 00 00	 call	 ?GetPort@IUsbDevice@@QBEKXZ ; IUsbDevice::GetPort
  0005a	8b f8		 mov	 edi, eax

; 333  :     slot = 0;
; 334  :     if(port >= 16)

  0005c	83 ff 10	 cmp	 edi, 16			; 00000010H
  0005f	72 06		 jb	 SHORT $L39571

; 335  :     {
; 336  :         slot = 1;

  00061	33 db		 xor	 ebx, ebx
  00063	43		 inc	 ebx

; 337  :         port -= 16;

  00064	83 ef 10	 sub	 edi, 16			; 00000010H
$L39571:

; 338  :     } 
; 339  : 
; 340  : 	interfacedescriptor = Device->GetInterfaceDescriptor();

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Device$[ebp]
  0006a	e8 00 00 00 00	 call	 ?GetInterfaceDescriptor@IUsbDevice@@QBEPBU_USB_INTERFACE_DESCRIPTOR@@XZ ; IUsbDevice::GetInterfaceDescriptor
  0006f	8b f0		 mov	 esi, eax

; 341  : 	bUSBInterface = interfacedescriptor->bInterfaceNumber;

  00071	0f b6 46 02	 movzx	 eax, BYTE PTR [esi+2]

; 342  : 
; 343  : 	
; 344  : 	if(bUSBInterface == 0) {

  00075	85 c0		 test	 eax, eax
  00077	0f 85 ec 00 00
	00		 jne	 $L39572

; 345  : 	gInstance++; // increment count of devices 

  0007d	ff 05 00 00 00
	00		 inc	 DWORD PTR _gInstance

; 346  : 	DBGPRINT(3, ("interface Class: %d, interface Subclass: %d , interface number: %d\n", 
; 347  : 		interfacedescriptor->bInterfaceClass,
; 348  : 		interfacedescriptor->bInterfaceSubClass,
; 349  : 		bUSBInterface));

  00083	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?DebugLevel@@3KA, 3 ; DebugLevel
  0008a	72 23		 jb	 SHORT $L39573
  0008c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDDFIMDA@SlixD?3?5?$AA@
  00091	e8 00 00 00 00	 call	 _DbgPrint
  00096	0f b6 46 06	 movzx	 eax, BYTE PTR [esi+6]
  0009a	6a 00		 push	 0
  0009c	50		 push	 eax
  0009d	0f b6 46 05	 movzx	 eax, BYTE PTR [esi+5]
  000a1	50		 push	 eax
  000a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@KLOJGFBL@interface?5Class?3?5?$CFd?0?5interface?5S@
  000a7	e8 00 00 00 00	 call	 _DbgPrint
  000ac	83 c4 14	 add	 esp, 20			; 00000014H
$L39573:

; 350  : 
; 351  : 	//if it's an MU or hawk, move it to the next port...
; 352  : 	//(if we didn't do this, it would be impossible ot distinguish top-slot from control pad)
; 353  : 	if((interfacedescriptor->bInterfaceClass != USB_DEVICE_CLASS_HUMAN_INTERFACE) 
; 354  : 		&& (interfacedescriptor->bInterfaceClass != USB_DEVICE_CLASS_PHYSICAL_INTERFACE)
; 355  : 		&& (interfacedescriptor->bInterfaceClass != XBOX_DEVICE_CLASS_INPUT_DEVICE)) {

  000af	8a 46 05	 mov	 al, BYTE PTR [esi+5]
  000b2	3c 03		 cmp	 al, 3
  000b4	74 09		 je	 SHORT $L39575
  000b6	3c 05		 cmp	 al, 5
  000b8	74 05		 je	 SHORT $L39575
  000ba	3c 58		 cmp	 al, 88			; 00000058H
  000bc	74 01		 je	 SHORT $L39575

; 356  : 		slot++;

  000be	43		 inc	 ebx
$L39575:

; 357  : 	}	
; 358  : 
; 359  : 	DBGPRINT(3, ("Topology:  port: %d, slot %d\n", port, slot));

  000bf	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?DebugLevel@@3KA, 3 ; DebugLevel
  000c6	72 19		 jb	 SHORT $L39576
  000c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDDFIMDA@SlixD?3?5?$AA@
  000cd	e8 00 00 00 00	 call	 _DbgPrint
  000d2	53		 push	 ebx
  000d3	57		 push	 edi
  000d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@PEJABHLP@Topology?3?5?5port?3?5?$CFd?0?5slot?5?$CFd?6?$AA@
  000d9	e8 00 00 00 00	 call	 _DbgPrint
  000de	83 c4 10	 add	 esp, 16			; 00000010H
$L39576:

; 360  : 	fdoDeviceExtension = &driverExtension->Nodes[port][slot];

  000e1	8d 34 bb	 lea	 esi, DWORD PTR [ebx+edi*4]
  000e4	69 f6 a8 00 00
	00		 imul	 esi, 168		; 000000a8H
  000ea	03 75 fc	 add	 esi, DWORD PTR _driverExtension$[ebp]

; 361  : 
; 362  : 
; 363  : 	// Set our DeviceExtension in our CUSB class data
; 364  : 	DBGPRINT(3, ("Device->SetExtension\n"));

  000ed	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?DebugLevel@@3KA, 3 ; DebugLevel
  000f4	72 17		 jb	 SHORT $L39680
  000f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDDFIMDA@SlixD?3?5?$AA@
  000fb	e8 00 00 00 00	 call	 _DbgPrint
  00100	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_0BG@GFHLDLLB@Device?9?$DOSetExtension?6?$AA@
  00107	e8 00 00 00 00	 call	 _DbgPrint
  0010c	59		 pop	 ecx
$L39680:

; 365  : 	Device->SetExtension(fdoDeviceExtension);

  0010d	8b 7d 08	 mov	 edi, DWORD PTR _Device$[ebp]
  00110	56		 push	 esi
  00111	8b cf		 mov	 ecx, edi
  00113	e8 00 00 00 00	 call	 ?SetExtension@IUsbDevice@@QAEPAXPAX@Z ; IUsbDevice::SetExtension

; 366  : 
; 367  : 	for(i = 0; i < MAX_ENDPOINTS; i++) {

  00118	33 c9		 xor	 ecx, ecx
  0011a	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
$L39580:

; 368  : 		fdoDeviceExtension->Endpoints[i] = (void*)-1;

  0011d	83 08 ff	 or	 DWORD PTR [eax], -1

; 369  : 		fdoDeviceExtension->EndpointType[i] = 0;

  00120	80 a4 0e 84 00
	00 00 00	 and	 BYTE PTR [esi+ecx+132], 0
  00128	41		 inc	 ecx
  00129	83 c0 04	 add	 eax, 4
  0012c	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0012f	7c ec		 jl	 SHORT $L39580

; 370  : 	}
; 371  : 
; 372  : 	// save our device class pointer
; 373  : 	fdoDeviceExtension->Device = Device;
; 374  : 	fdoDeviceExtension->flags |= DF_CONNECTED;

  00131	83 8e a4 00 00
	00 01		 or	 DWORD PTR [esi+164], 1
  00138	89 3e		 mov	 DWORD PTR [esi], edi

; 375  : 
; 376  : 	DBGPRINT(2, ("exit:  SLIX_AddDevice\n"));

  0013a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?DebugLevel@@3KA, 2 ; DebugLevel
  00141	72 17		 jb	 SHORT $L39584
  00143	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDDFIMDA@SlixD?3?5?$AA@
  00148	e8 00 00 00 00	 call	 _DbgPrint
  0014d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_0BH@NCBBAOFK@exit?3?5?5SLIX_AddDevice?6?$AA@
  00154	e8 00 00 00 00	 call	 _DbgPrint
  00159	59		 pop	 ecx
$L39584:

; 377  : 
; 378  : 	Device->SetClassSpecificType(1);

  0015a	6a 01		 push	 1
  0015c	8b cf		 mov	 ecx, edi
  0015e	e8 00 00 00 00	 call	 ?SetClassSpecificType@IUsbDevice@@QAEXE@Z ; IUsbDevice::SetClassSpecificType

; 379  : 	Device->AddComplete(USBD_STATUS_SUCCESS);

  00163	6a 00		 push	 0
  00165	8b cf		 mov	 ecx, edi
  00167	eb 28		 jmp	 SHORT $L39681
$L39572:

; 380  : 	}else{
; 381  : 	DBGPRINT(3, ("Threw out an interface\n"))

  00169	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?DebugLevel@@3KA, 3 ; DebugLevel
  00170	72 17		 jb	 SHORT $L39588
  00172	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDDFIMDA@SlixD?3?5?$AA@
  00177	e8 00 00 00 00	 call	 _DbgPrint
  0017c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], OFFSET FLAT:??_C@_0BI@PKDGKIBC@Threw?5out?5an?5interface?6?$AA@
  00183	e8 00 00 00 00	 call	 _DbgPrint
  00188	59		 pop	 ecx
$L39588:

; 382  : 	Device->AddComplete(USBD_STATUS_UNSUPPORTED_DEVICE);

  00189	8b 4d 08	 mov	 ecx, DWORD PTR _Device$[ebp]
  0018c	68 00 04 00 80	 push	 -2147482624		; 80000400H
$L39681:
  00191	e8 00 00 00 00	 call	 ?AddComplete@IUsbDevice@@QAEXJ@Z ; IUsbDevice::AddComplete
  00196	5f		 pop	 edi
  00197	5e		 pop	 esi
  00198	5b		 pop	 ebx

; 383  : 
; 384  : 	}
; 385  : 	
; 386  : 	
; 387  : }

  00199	c9		 leave
  0019a	c2 04 00	 ret	 4
_SLIX_AddDevice@4 ENDP
XPPCODE	ENDS
END
