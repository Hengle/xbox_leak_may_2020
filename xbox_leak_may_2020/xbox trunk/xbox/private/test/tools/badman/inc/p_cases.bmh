/*++

Copyright (c) 1992-2000  Microsoft Corporation

Module Name:

    p_cases.bmh

Abstract:

    This module contains the case names and comments for the types beginning
    with 'P'. It also contains case names for funtions beginning with 'LPP'.
    For more information, please refer to BadMan.Doc.

Author:

    John Miller (johnmil) 02-Feb-1992

Environment:

    XBox

Revision History:

    01-Apr-2000     schanbai

        Ported to XBox and removed not needed cases

--*/


//
// LPPALETTEENTRY type
//

        // random
#define LPPALETTEENTRY_RANDOM       1

        // Null
#define LPPALETTEENTRY_NULL         2

        // 3 simple entries
#define LPPALETTEENTRY_SIMPLE_3     3

        // allocated space
#define LPPALETTEENTRY_VALID_3      4

        // (LPPALETTEENTRY)-1
#define LPPALETTEENTRY_MINUS_ONE    5


//
// LPPOINT type
//

        // 13 points
#define LPPOINT_13_POINTS           1

        // NULL lppoint structure
#define LPPOINT_NULL                2

        // random lppoint variable
#define LPPOINT_RANDOM              3

        // valid lppoint
#define LPPOINT_VALID               4

        // (lppoint)-1
#define LPPOINT_MINUS_ONE           5


//
// LPPROCESS_INFORMATION type
//

        // Pointer to valid process information structure to be filled in
#define LPPROCESS_INFORMATION_VALID_STRUCTURE   1

        // Pointer to NULL
#define LPPROCESS_INFORMATION_NULL              2

        // Pointer to a memory block too small to contain PROCESS_INFORMATION
#define LPPROCESS_INFORMATION_TOO_SMALL         3


//
// PDWORD type
//

        // A pointer to the dword 0
#define PDWORD_VALID_0              1

        // A NULL pointer
#define PDWORD_NULL                 2

        // buffer to store a dword
#define PDWORD_BUFFER               3

        // Generic read access mask
#define PDWORD_ACCESSMASK_GENREAD   4

        // Generic all access mask
#define PDWORD_ACCESSMASK_GENALL    5


//
// PFILETIME type
//

        // A null pointer
#define PFILETIME_NULL              1

        // A pointer to a buffer to receive FILETIME
#define PFILETIME_VALID_BUFFER      2


//
// PHANDLE type
//

        // a handle to a token
#define PHANDLE_VALID_TOKEN         1

        // a null handle
#define PHANDLE_NULL                2

        // an invalid pointer
#define PHANDLE_INVALID             3


//
// PMEMORY_BASIC_INFORMATION type
//

        // Pointer to an invalid memory buffer
#define PMEMORY_BASIC_INFORMATION_INVAL_BUFFER          1

        // Pointer to a buffer which is too small
#define PMEMORY_BASIC_INFORMATION_2SMALL_BUFFER         2

        // Pointer to a buffer sizeof(MEMORY_BASIC_INFORMATION)
#define PMEMORY_BASIC_INFORMATION_BUFFER                3


//
// PSECURITY_DESCRIPTOR type
//

        // pointer to a valid security_descriptor_control struture
#define PSECURITY_DESCRIPTOR_CONTROL_VALID      1

        // nulll control
#define PSECURITY_DESCRIPTOR_CONTROL_NULL       2


//
// PVOID type
//

        // A NULL pointer
#define PVOID_NULL                              5

        // buffer for string
#define PVOID_VALID                             12

        // invalid pointer
#define PVOID_INVALID                           13


//
// P_PVOID type
//

        // A NULL pointer
#define P_PVOID_NULL                            4

        // valid address of a void pointer
#define P_PVOID_VALID_ADDRESS                   8

        // pointer to a null pointer
#define P_PVOID_VALID_NULL                      9

        // pointer to a 5k buffer
#define P_PVOID_5K                              10


//
// P_PSECURITY_DESCRIPTOR type
//

        // a self-relative security descriptor
#define P_PSECURITY_DESCRIPTOR_SELFRELATIVE     1

        // a valid security descriptor
#define P_PSECURITY_DESCRIPTOR_VALID            2

        // an invalid security descriptor
#define P_PSECURITY_DESCRIPTOR_INVALID          3

        // a null security descriptor
#define P_PSECURITY_DESCRIPTOR_NULL             4


//
// P_LPSTR type
//

        // valid ptr to LPSTR
#define P_LPSTR_VALID_ADDRESS       0

        // null pointer
#define P_LPSTR_NULL                1


//
// P_LPWSTR type
//

        // valid
#define P_LPWSTR_VALID_ADDRESS      1

        // null
#define P_LPWSTR_NULL               2


//
// POINT type
//

        // POINT defs
#define POINT_ZERO              1

        // POINT 100
#define POINT_100               2


//
// LPPIXELFORMATDESCRIPTOR type
//

        // null
#define LPPIXELFORMATDESCRIPTOR_NULL        1

        // minus one
#define LPPIXELFORMATDESCRIPTOR_MINUS_ONE   2

        // valid
#define LPPIXELFORMATDESCRIPTOR_VALID       3
