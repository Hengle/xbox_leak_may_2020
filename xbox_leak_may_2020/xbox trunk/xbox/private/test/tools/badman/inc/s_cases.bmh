/*++

Copyright (c) 1992-2000  Microsoft Corporation

Module Name:

    s_cases.bmh

Abstract:

    This module contains the case names and comments for the types beginning
    with 'S'. It also contains case names for funtions beginning with 'LPS'.
    For more information, please refer to BadMan.Doc.

Author:

    John Miller (johnmil) 02-Feb-1992

Environment:

    XBox

Revision History:

    01-Apr-2000     schanbai

        Ported to XBox and removed not needed cases

--*/


//
// LPSECURITY_ATTRIBUTES type
//

        // NULL Security Attributes pointer
#define LPSECURITY_ATTRIBUTES_NULL                                  1

        // Default (same as calling process) security attributes, handle IS inheritable
#define LPSECURITY_ATTRIBUTES_SAME_AS_CALLING_PROCESS_INHERIT       2

        // Default (same as calling process) security attrbutes, handle is NOT inheritable
#define LPSECURITY_ATTRIBUTES_SAME_AS_CALLING_PROCESS_NO_INHERIT    3

        // -1
#define LPSECURITY_ATTRIBUTES_MINUS_ONE                             4

        // ill formed security_attributes structure (invalid length)
#define LPSECURITY_ATTRIBUTES_INVALID_LENGTH                        5

        // ill formed security_attributes structure (invalid security descriptor)
#define LPSECURITY_ATTRIBUTES_INVALID_SECURITY_DESCRIPTOR           6


//
// LPSIZE type
//

        // Properly allocated
#define LPSIZE_VALID            1

        // null pointer
#define LPSIZE_NULL             2

        // RANDOM SIZE pointer/difficult to debug
#define LPSIZE_RANDOM           3

        // (LPSIZE)-1
#define LPSIZE_MINUS_ONE        4


//
// LPSTR type
//

        // A random number instead of a pointer
#define LPSTR_RANDOM                        1

        // Base of a valid LMem block
#define LPSTR_BASE_VALID_LMEM_BLOCK         2

        // Location inside a valid LMem block
#define LPSTR_INSIDE_VALID_LMEM_BLOCK       3

        // Location inside a Free'd LMem block
#define LPSTR_INSIDE_FREED_LMEM_BLOCK       4

        // Base of a valid GMem block
#define LPSTR_BASE_VALID_GMEM_BLOCK         6

        // Location inside a valid Global Mem block
#define LPSTR_INSIDE_VALID_GMEM_BLOCK       7

        // Location inside a Free'd Global Mem block
#define LPSTR_INSIDE_FREED_GMEM_BLOCK       8

        // Location inside a Discard'd GlobalMem Block
#define LPSTR_INSIDE_DISCARDED_GMEM_BLOCK   9

        // A NULL LPSTR
#define LPSTR_NULL                          10

        // Pointer to a 100 byte memory block in a valid heap
#define LPSTR_VALID_HEAP_BLOCK              11

        // Pointer to a 100 byte memory block in a destroy'd heap
#define LPSTR_DESTROYED_HEAP_BLOCK          12

        // Pointer to a freed 100 byte block in a valid heap
#define LPSTR_FREED_HEAP_BLOCK              13

        // Pointer to a valid NT .exe name
#define LPSTR_VALID_NT_IMAGE_NAME           14

        // Pointer to a non-existant image name
#define LPSTR_NON_EXISTANT_IMAGE_NAME       15

        // Pointer to an incorrectly formed FAT file name
#define LPSTR_INVALID_FILE_NAME             16

        // Pointer to non-existent directory path
#define LPSTR_NON_EXISTENT_DIRECTORY        17

        // Pointer to a valid directory path
#define LPSTR_VALID_CURRENT_DIRECTORY       18

        // Temp File name (cleaned up)
#define LPSTR_TEMP_FILE_NAME                21

        // pointer to a double NULL terminated empty string
#define LPSTR_DOUBLE_NULL_NULL              22

        // pointer to a double NULL terminated string
#define LPSTR_DOUBLE_NULL_STRING            23

        // Valid filename
#define LPSTR_FILENAME_VALID                26

        // Invalid filename
#define LPSTR_FILENAME_INVALID1             28

        // Invalid filename
#define LPSTR_FILENAME_INVALID2             29

        // Invalid filename
#define LPSTR_FILENAME_INVALID3             30

        // Invalid filename
#define LPSTR_FILENAME_INVALID4             31

        // Invalid filename
#define LPSTR_FILENAME_INVALID5             32

        // Invalid filename
#define LPSTR_FILENAME_INVALID6             33

        // Invalid filename
#define LPSTR_FILENAME_INVALID7             34

        // Invalid filename
#define LPSTR_FILENAME_INVALID8             35

        // Invalid filename
#define LPSTR_FILENAME_INVALID9             36

        // Invalid filename
#define LPSTR_DIRNAME_INVALID1              37

        // Invalid filename
#define LPSTR_DIRNAME_INVALID2              38

        // Invalid filename
#define LPSTR_DIRNAME_INVALID3              39

        // Invalid filename
#define LPSTR_DIRNAME_INVALID4              40

        // logical drive string buffer
#define LPSTR_LOGICAL_DRIVE_STRING_BUFFER   41

        // temp path buffer
#define LPSTR_TEMP_PATH_BUFFER              42

        // source file exists
#define LPSTR_SRC_FILE_EXISTS               43

        // source file does not exist
#define LPSTR_SRC_FILE_NOT_EXISTS           44

        // dest file exists
#define LPSTR_DEST_FILE_EXISTS              45

        // dest file does not exist
#define LPSTR_DEST_FILE_NOT_EXISTS          46

        // valid pathname
#define LPSTR_DIRNAME_VALID                 47

        // path to directory that exists
#define LPSTR_PATH_EXISTS                   49

        // path to directory that does not exist
#define LPSTR_PATH_NOT_EXISTS               50

        // valid prefix string
#define LPSTR_PREFIX_VALID                  51

        // prefix string too long
#define LPSTR_PREFIX_TOO_LONG               52

        // pointer to valid path buffer
#define LPSTR_VALID_PATH_BUFFER             53

        // valid root path name
#define LPSTR_VALID_ROOT_PATHNAME           54

        // invalid root path name
#define LPSTR_INVALID_ROOT_PATHNAME         55

        // file exists
#define LPSTR_FILE_EXISTS                   56

        // file does not exist
#define LPSTR_FILE_NOT_EXISTS               57

        // readonly file
#define LPSTR_FILE_READONLY                 58

        // buffer for the volume name
#define LPSTR_VOLUME_NAME_BUFFER            59

        // valid file system name buffer
#define LPSTR_FILE_SYSTEM_NAME_BUFFER       60

        // ill-formed path string
#define LPSTR_SEARCH_PATH_ILL_FORMED        61

        // path with illegal chars
#define LPSTR_SEARCH_PATH_BAD_CHARS         62

        // file in curr dir without extension
#define LPSTR_FILE_IN_CURR_DIR_NO_EXT       63

        // extension of file in curr dir
#define LPSTR_EXT_FILE_IN_CURR_DIR          64

        // ill-formed file extension (not beginning in .)
#define LPSTR_EXT_ILL_FORMED                65

        // extension with illegal chars
#define LPSTR_EXT_BAD_CHARS                 66

        // existing file not on path, cur dir, ...
#define LPSTR_FILE_NOT_EXISTS_ON_PATH       67

        // Inifile filename
#define LPSTR_INIFILE_FILENAME              68

        // Inifile section name
#define LPSTR_INIFILE_SECTION_NAME          69

        // Inifile keyname
#define LPSTR_INIFILE_KEYNAME               70

        // Inifile intergral value
#define LPSTR_INIFILE_INT                   71

        // Inifile string value
#define LPSTR_INIFILE_STRING                72

        // Inifile key=value string
#define LPSTR_INIFILE_KEY_VALUE             73

        // A buffer of size 1024 bytes
#define LPSTR_BUFFER_1K                     74

        // A buffer of size 512 bytes
#define LPSTR_BUFFER_512_BYTE               75

        // A buffer of size 1 byte
#define LPSTR_BUFFER_1_BYTE                 76

        // Registry keyname
#define LPSTR_REG_KEYNAME                   77

        // Registry value name
#define LPSTR_REG_VALUENAME                 78

        // A null terminated string with 257 characters (size 258)
#define LPSTR_257_CHAR                      79

        // A null terminated empty string
#define LPSTR_EMPTY                         80

        // src file exists
#define LPSTR_VER_SRC_FILE_EXISTS           81

        // src file exists
#define LPSTR_VER_SRC_FILE_NOT_EXISTS       82

        // src directory exists
#define LPSTR_VER_SRC_DIR_EXISTS            83

        // src directory does not exist
#define LPSTR_VER_SRC_DIR_NOT_EXISTS        84

        // dest directory does not exist
#define LPSTR_VER_DEST_FILE_EXISTS          85

        // dest directory does not exist
#define LPSTR_VER_DEST_FILE_NOT_EXISTS      86

        // dest directory does not exist
#define LPSTR_VER_DEST_DIR_EXISTS           87

        // dest directory does not exist
#define LPSTR_VER_DEST_DIR_NOT_EXISTS       88

        // null string
#define LPSTR_NULL_STRING                   89

        // windows directory
#define LPSTR_WINDOWS_DIR                   90

        // application directory
#define LPSTR_VER_APP_DIR                   91

        // valid buffer for langauge name
#define LPSTR_VER_VALID_LANGUAGE_BUFFER     92

        // sub-block that exists
#define LPSTR_VER_SUB_BLOCK_EXISTS          93

        // sub-block that does not exist
#define LPSTR_VER_SUB_BLOCK_NOT_EXISTS      94

        // inifile section string
#define LPSTR_INIFILE_SECTION               95

        // an invalid pointer
#define LPSTR_INVALID                       122

        // poitner to a 64k buffer
#define LPSTR_64K_BUFFER                    123

        // pointer to a buffer too small
#define LPSTR_2BYTE_BUFFER                  124

        // valid FAT filename
#define LPSTR_FAT_FILENAME                  126

        // filename with invalid chars
#define LPSTR_FILENAME_BOGUS                127

        // first DWORD of WSTR valid, non-null chars
#define LPSTR_INVALID_1                     130

        // WSTR with all but last DWORD of length valid
#define LPSTR_INVALID_N                     131

        // valid NTFS filename (includes unicode chars)
#define LPSTR_NTFS_FILENAME                 136

        // a relative path/filename
#define LPSTR_RELATIVE_FILENAME             139

        // a drive-relative remote filename
#define LPSTR_REMOTE_FILENAME               140

        // a string of characters which is > 64Kb
#define LPSTR_TOO_LONG                      141

        // a UNC filename
#define LPSTR_UNC_FILENAME                  142

        // 20 character string
#define LPSTR_46CHAR                        150

        // "DISPLAY"
#define LPSTR_DISPLAY                       152

        // "OPEN"
#define LPSTR_OPEN                          153

        // "asdf jkl; qwer uiop"
#define LPSTR_COMMAND_LINE                  157

        // (LPSTR)-1
#define LPSTR_MINUS_ONE                     159

        // string containging temp dir
#define LPSTR_TEMP_DIR                      162

        // string containing root
#define LPSTR_ROOT_DIR                      163


//
// LPSYSTEMTIME type
//

        // null pointer
#define LPSYSTEMTIME_NULL          1

        // valid pointer to LPSYSTEMTIME
#define LPSYSTEMTIME_VALID_ADDRESS 2

        // pointer to LPSYSTEMTIME initialized with valid data
#define LPSYSTEMTIME_VALID_DATA    3

        // valid pointer to LPSYSTEMTIME initialized with bad data
#define LPSYSTEMTIME_INVALID_DATA  4
