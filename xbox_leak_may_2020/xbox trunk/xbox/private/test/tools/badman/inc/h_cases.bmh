/*++

Copyright (c) 1992-2000  Microsoft Corporation

Module Name:

    h_cases.bmh

Abstract:

    This module contains the case names and comments for the types beginning
    with 'H'. It also contains case names for funtions beginning with 'LPH'.
    For more information, please refer to BadMan.Doc.

Author:

    John Miller (johnmil) 02-Feb-1992

Environment:

    XBox

Revision History:

    01-Apr-2000     schanbai

        Ported to XBox and removed not needed cases

--*/


//
// HANDLE type
//

        // A random number instead of a handle/impossible to debug
#define HANDLE_RANDOM                           1

        // An unlocked, discardable Local Memory Block
#define HANDLE_UNLOCKED_LMEM_BLOCK              3

        // A Locked Local Memory Block
#define HANDLE_LOCKED_LMEM_BLOCK                4

        // A Non-discardable Local memory block
#define HANDLE_NONDISCARDABLE_LMEM_BLOCK        5

        // A freed Local Memory block
#define HANDLE_FREED_LMEM_BLOCK                 7

        // An unlocked,discardable Global Memory Block
#define HANDLE_UNLOCKED_GMEM_BLOCK              8

        // A Locked Global Memory Block
#define HANDLE_LOCKED_GMEM_BLOCK                9

        // A Non-discardable Global memory block
#define HANDLE_NONDISCARDABLE_GMEM_BLOCK        10

        // A Discarded Global Memory Block
#define HANDLE_DISCARDED_GMEM_BLOCK             11

        // A freed Global Memory block
#define HANDLE_FREED_GMEM_BLOCK                 12

        // A Null Handle
#define HANDLE_NULL                             13

        // Handle to an infinitely growable heap
#define HANDLE_GROWABLE_HEAP                    14

        // Handle to a heap limited to 32k for growth
#define HANDLE_32K_HEAP                         15

        // Handle to an ungrowable heap with all space allocated in it
#define HANDLE_UNGROWABLE_FILLED_HEAP           16

        // Handle to a destroy'd 32k heap
#define HANDLE_DESTROYED_32K_HEAP               17

        // Handle to a thread
#define HANDLE_THREAD                           19

        // Psuedo-handle to current Thread
#define HANDLE_CURRENT_THREAD                   22

        // Handle from GetProcessHeap
#define HANDLE_PROCESS_HEAP                     23

        // Handle to a suspended thread
#define HANDLE_SUSPENDED_THREAD                 24

        // handle to normal file
#define HANDLE_NORMAL_FILE                      25

        // handle to readonly file
#define HANDLE_READONLY_FILE                    26

        // handle to closed file
#define HANDLE_CLOSED_FILE                      27

        // handle for findfile
#define HANDLE_FINDFILE                         28

        // handle for closed findfile
#define HANDLE_CLOSED_FINDFILE                  29

        // handle to normal async file
#define HANDLE_NORMAL_ASYNC_FILE                30

        // handle to readonly async file
#define HANDLE_READONLY_ASYNC_FILE              31

        // change notify handle
#define HANDLE_GOOD_CHANGE_NOTIFY               33

        // closed change notify handle
#define HANDLE_CLOSED_CHANGE_NOTIFY             34

        // handle to a local file
#define HANDLE_LOCAL_FILE                       39

        // handle to a mailslot
#define HANDLE_MAILSLOT                         40

        // handle to a named event
#define HANDLE_NAMED_EVENT                      41

        // handle to a named mutant
#define HANDLE_NAMED_MUTANT                     44

        // handle to a named section
#define HANDLE_NAMED_SECTION                    47

        // handle to a named semaphore
#define HANDLE_NAMED_SEMAPHORE                  48

        // handle to a named pipe
#define HANDLE_NAMEDPIPE                        53

        // handle to a remote file
#define HANDLE_REMOTE_FILE                      54

        // handle to an unnamed event
#define HANDLE_UNNAMED_EVENT                    55

        // handle to an unnamed section
#define HANDLE_UNNAMED_SECTION                  60

        // handle to an unnamed semaphore
#define HANDLE_UNNAMED_SEMAPHORE                61

        // handle to a named waitable timer
#define HANDLE_NAMED_WAITABLE_TIMER             75

        // handle to a unnamed waitable timer
#define HANDLE_UNNAMED_WAITABLE_TIMER           76

        // INVALID_HANDLE_VALUE
#define HANDLE_INVALID                          77


//
// HBITMAP type
//

        // null hbitmap
#define HBITMAP_NULL                1

        // hbitmap -1
#define HBITMAP_MINUS_ONE           2

        // valid hbitmap
#define HBITMAP_VALID               3

        // non-stock bitmap type with wild index
#define HBITMAP_NOSTOCK_WILDINDEX   4

        // stock bitmap type with wild index
#define HBITMAP_STOCK_WILDINDEX     5


//
// LPHANDLE type
//

        // an invalid pointer
#define LPHANDLE_INVALID            0

        // NULL
#define LPHANDLE_NULL               1

        // pointer to a handle sized region
#define LPHANDLE_VALID              2
