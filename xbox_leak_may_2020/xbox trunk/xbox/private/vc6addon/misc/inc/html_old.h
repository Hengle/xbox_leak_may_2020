/* this ALWAYS GENERATED file contains the definitions for the interfaces */


/* File created by MIDL compiler version 3.00.44 */
/* at Fri Oct 25 18:49:20 1996
 */
/* Compiler settings for forms3.odl:
    Os (OptLev=s), W1, Zp8, env=Win32, ms_ext, c_ext
    error checks: none
*/
//@@MIDL_FILE_HEADING(  )
#include "rpc.h"
#include "rpcndr.h"

#ifndef __MSHTML_h__
#define __MSHTML_h__

#ifdef __cplusplus
extern "C"{
#endif 

/* Forward Declarations */ 

#ifndef __IDataAutoWrapper_FWD_DEFINED__
#define __IDataAutoWrapper_FWD_DEFINED__
typedef interface IDataAutoWrapper IDataAutoWrapper;
#endif 	/* __IDataAutoWrapper_FWD_DEFINED__ */


#ifndef __IReturnInteger_FWD_DEFINED__
#define __IReturnInteger_FWD_DEFINED__
typedef interface IReturnInteger IReturnInteger;
#endif 	/* __IReturnInteger_FWD_DEFINED__ */


#ifndef __IReturnBoolean_FWD_DEFINED__
#define __IReturnBoolean_FWD_DEFINED__
typedef interface IReturnBoolean IReturnBoolean;
#endif 	/* __IReturnBoolean_FWD_DEFINED__ */


#ifndef __IReturnString_FWD_DEFINED__
#define __IReturnString_FWD_DEFINED__
typedef interface IReturnString IReturnString;
#endif 	/* __IReturnString_FWD_DEFINED__ */


#ifndef __IReturnSingle_FWD_DEFINED__
#define __IReturnSingle_FWD_DEFINED__
typedef interface IReturnSingle IReturnSingle;
#endif 	/* __IReturnSingle_FWD_DEFINED__ */


#ifndef __IReturnEffect_FWD_DEFINED__
#define __IReturnEffect_FWD_DEFINED__
typedef interface IReturnEffect IReturnEffect;
#endif 	/* __IReturnEffect_FWD_DEFINED__ */


#ifndef __IUnitMeasurement_FWD_DEFINED__
#define __IUnitMeasurement_FWD_DEFINED__
typedef interface IUnitMeasurement IUnitMeasurement;
#endif 	/* __IUnitMeasurement_FWD_DEFINED__ */


#ifndef __IStyle_FWD_DEFINED__
#define __IStyle_FWD_DEFINED__
typedef interface IStyle IStyle;
#endif 	/* __IStyle_FWD_DEFINED__ */


#ifndef __IElement_FWD_DEFINED__
#define __IElement_FWD_DEFINED__
typedef interface IElement IElement;
#endif 	/* __IElement_FWD_DEFINED__ */


#ifndef __ITxtRange_FWD_DEFINED__
#define __ITxtRange_FWD_DEFINED__
typedef interface ITxtRange ITxtRange;
#endif 	/* __ITxtRange_FWD_DEFINED__ */


#ifndef __ControlElementEvents_FWD_DEFINED__
#define __ControlElementEvents_FWD_DEFINED__
typedef interface ControlElementEvents ControlElementEvents;
#endif 	/* __ControlElementEvents_FWD_DEFINED__ */


#ifndef __IControlElement_FWD_DEFINED__
#define __IControlElement_FWD_DEFINED__
typedef interface IControlElement IControlElement;
#endif 	/* __IControlElement_FWD_DEFINED__ */


#ifndef __IEnumControl_FWD_DEFINED__
#define __IEnumControl_FWD_DEFINED__
typedef interface IEnumControl IEnumControl;
#endif 	/* __IEnumControl_FWD_DEFINED__ */


#ifndef __ITextElement_FWD_DEFINED__
#define __ITextElement_FWD_DEFINED__
typedef interface ITextElement ITextElement;
#endif 	/* __ITextElement_FWD_DEFINED__ */


#ifndef __TextEditEvents_FWD_DEFINED__
#define __TextEditEvents_FWD_DEFINED__
typedef interface TextEditEvents TextEditEvents;
#endif 	/* __TextEditEvents_FWD_DEFINED__ */


#ifndef __ITxtEdit_FWD_DEFINED__
#define __ITxtEdit_FWD_DEFINED__
typedef interface ITxtEdit ITxtEdit;
#endif 	/* __ITxtEdit_FWD_DEFINED__ */


#ifndef __IAutoTxtSiteRange_FWD_DEFINED__
#define __IAutoTxtSiteRange_FWD_DEFINED__
typedef interface IAutoTxtSiteRange IAutoTxtSiteRange;
#endif 	/* __IAutoTxtSiteRange_FWD_DEFINED__ */


#ifndef __IAuto2DSiteRange_FWD_DEFINED__
#define __IAuto2DSiteRange_FWD_DEFINED__
typedef interface IAuto2DSiteRange IAuto2DSiteRange;
#endif 	/* __IAuto2DSiteRange_FWD_DEFINED__ */


#ifndef __DivFixedElementEvents_FWD_DEFINED__
#define __DivFixedElementEvents_FWD_DEFINED__
typedef interface DivFixedElementEvents DivFixedElementEvents;
#endif 	/* __DivFixedElementEvents_FWD_DEFINED__ */


#ifndef __IDivFixed_FWD_DEFINED__
#define __IDivFixed_FWD_DEFINED__
typedef interface IDivFixed IDivFixed;
#endif 	/* __IDivFixed_FWD_DEFINED__ */


#ifndef __ImgEvents_FWD_DEFINED__
#define __ImgEvents_FWD_DEFINED__
typedef interface ImgEvents ImgEvents;
#endif 	/* __ImgEvents_FWD_DEFINED__ */


#ifndef __IImgElement_FWD_DEFINED__
#define __IImgElement_FWD_DEFINED__
typedef interface IImgElement IImgElement;
#endif 	/* __IImgElement_FWD_DEFINED__ */


#ifndef __IBodyElement_FWD_DEFINED__
#define __IBodyElement_FWD_DEFINED__
typedef interface IBodyElement IBodyElement;
#endif 	/* __IBodyElement_FWD_DEFINED__ */


#ifndef __IBodyElementEvents_FWD_DEFINED__
#define __IBodyElementEvents_FWD_DEFINED__
typedef interface IBodyElementEvents IBodyElementEvents;
#endif 	/* __IBodyElementEvents_FWD_DEFINED__ */


#ifndef __IFontElement_FWD_DEFINED__
#define __IFontElement_FWD_DEFINED__
typedef interface IFontElement IFontElement;
#endif 	/* __IFontElement_FWD_DEFINED__ */


#ifndef __AnchorEvents_FWD_DEFINED__
#define __AnchorEvents_FWD_DEFINED__
typedef interface AnchorEvents AnchorEvents;
#endif 	/* __AnchorEvents_FWD_DEFINED__ */


#ifndef __IAnchorElement_FWD_DEFINED__
#define __IAnchorElement_FWD_DEFINED__
typedef interface IAnchorElement IAnchorElement;
#endif 	/* __IAnchorElement_FWD_DEFINED__ */


#ifndef __LabelEvents_FWD_DEFINED__
#define __LabelEvents_FWD_DEFINED__
typedef interface LabelEvents LabelEvents;
#endif 	/* __LabelEvents_FWD_DEFINED__ */


#ifndef __ILabelElement_FWD_DEFINED__
#define __ILabelElement_FWD_DEFINED__
typedef interface ILabelElement ILabelElement;
#endif 	/* __ILabelElement_FWD_DEFINED__ */


#ifndef __IListElement_FWD_DEFINED__
#define __IListElement_FWD_DEFINED__
typedef interface IListElement IListElement;
#endif 	/* __IListElement_FWD_DEFINED__ */


#ifndef __IUListElement_FWD_DEFINED__
#define __IUListElement_FWD_DEFINED__
typedef interface IUListElement IUListElement;
#endif 	/* __IUListElement_FWD_DEFINED__ */


#ifndef __IOListElement_FWD_DEFINED__
#define __IOListElement_FWD_DEFINED__
typedef interface IOListElement IOListElement;
#endif 	/* __IOListElement_FWD_DEFINED__ */


#ifndef __ILIElement_FWD_DEFINED__
#define __ILIElement_FWD_DEFINED__
typedef interface ILIElement ILIElement;
#endif 	/* __ILIElement_FWD_DEFINED__ */


#ifndef __IDivElement_FWD_DEFINED__
#define __IDivElement_FWD_DEFINED__
typedef interface IDivElement IDivElement;
#endif 	/* __IDivElement_FWD_DEFINED__ */


#ifndef __IDDElement_FWD_DEFINED__
#define __IDDElement_FWD_DEFINED__
typedef interface IDDElement IDDElement;
#endif 	/* __IDDElement_FWD_DEFINED__ */


#ifndef __IDTElement_FWD_DEFINED__
#define __IDTElement_FWD_DEFINED__
typedef interface IDTElement IDTElement;
#endif 	/* __IDTElement_FWD_DEFINED__ */


#ifndef __IBRElement_FWD_DEFINED__
#define __IBRElement_FWD_DEFINED__
typedef interface IBRElement IBRElement;
#endif 	/* __IBRElement_FWD_DEFINED__ */


#ifndef __IDListElement_FWD_DEFINED__
#define __IDListElement_FWD_DEFINED__
typedef interface IDListElement IDListElement;
#endif 	/* __IDListElement_FWD_DEFINED__ */


#ifndef __IHRElement_FWD_DEFINED__
#define __IHRElement_FWD_DEFINED__
typedef interface IHRElement IHRElement;
#endif 	/* __IHRElement_FWD_DEFINED__ */


#ifndef __IBlockElement_FWD_DEFINED__
#define __IBlockElement_FWD_DEFINED__
typedef interface IBlockElement IBlockElement;
#endif 	/* __IBlockElement_FWD_DEFINED__ */


#ifndef __IParaElement_FWD_DEFINED__
#define __IParaElement_FWD_DEFINED__
typedef interface IParaElement IParaElement;
#endif 	/* __IParaElement_FWD_DEFINED__ */


#ifndef __IElementCollection_FWD_DEFINED__
#define __IElementCollection_FWD_DEFINED__
typedef interface IElementCollection IElementCollection;
#endif 	/* __IElementCollection_FWD_DEFINED__ */


#ifndef __IOptionsCollection_FWD_DEFINED__
#define __IOptionsCollection_FWD_DEFINED__
typedef interface IOptionsCollection IOptionsCollection;
#endif 	/* __IOptionsCollection_FWD_DEFINED__ */


#ifndef __IHeaderElement_FWD_DEFINED__
#define __IHeaderElement_FWD_DEFINED__
typedef interface IHeaderElement IHeaderElement;
#endif 	/* __IHeaderElement_FWD_DEFINED__ */


#ifndef __IFormElement_FWD_DEFINED__
#define __IFormElement_FWD_DEFINED__
typedef interface IFormElement IFormElement;
#endif 	/* __IFormElement_FWD_DEFINED__ */


#ifndef __SelectElementEvents_FWD_DEFINED__
#define __SelectElementEvents_FWD_DEFINED__
typedef interface SelectElementEvents SelectElementEvents;
#endif 	/* __SelectElementEvents_FWD_DEFINED__ */


#ifndef __ISelectElement_FWD_DEFINED__
#define __ISelectElement_FWD_DEFINED__
typedef interface ISelectElement ISelectElement;
#endif 	/* __ISelectElement_FWD_DEFINED__ */


#ifndef __ISelectionObject_FWD_DEFINED__
#define __ISelectionObject_FWD_DEFINED__
typedef interface ISelectionObject ISelectionObject;
#endif 	/* __ISelectionObject_FWD_DEFINED__ */


#ifndef __IOptionElement_FWD_DEFINED__
#define __IOptionElement_FWD_DEFINED__
typedef interface IOptionElement IOptionElement;
#endif 	/* __IOptionElement_FWD_DEFINED__ */


#ifndef __InputTxtBaseEvents_FWD_DEFINED__
#define __InputTxtBaseEvents_FWD_DEFINED__
typedef interface InputTxtBaseEvents InputTxtBaseEvents;
#endif 	/* __InputTxtBaseEvents_FWD_DEFINED__ */


#ifndef __InputTextEvents_FWD_DEFINED__
#define __InputTextEvents_FWD_DEFINED__
typedef interface InputTextEvents InputTextEvents;
#endif 	/* __InputTextEvents_FWD_DEFINED__ */


#ifndef __TextAreaEvents_FWD_DEFINED__
#define __TextAreaEvents_FWD_DEFINED__
typedef interface TextAreaEvents TextAreaEvents;
#endif 	/* __TextAreaEvents_FWD_DEFINED__ */


#ifndef __IInputHidden_FWD_DEFINED__
#define __IInputHidden_FWD_DEFINED__
typedef interface IInputHidden IInputHidden;
#endif 	/* __IInputHidden_FWD_DEFINED__ */


#ifndef __IInputPassword_FWD_DEFINED__
#define __IInputPassword_FWD_DEFINED__
typedef interface IInputPassword IInputPassword;
#endif 	/* __IInputPassword_FWD_DEFINED__ */


#ifndef __IInputText_FWD_DEFINED__
#define __IInputText_FWD_DEFINED__
typedef interface IInputText IInputText;
#endif 	/* __IInputText_FWD_DEFINED__ */


#ifndef __ITextArea_FWD_DEFINED__
#define __ITextArea_FWD_DEFINED__
typedef interface ITextArea ITextArea;
#endif 	/* __ITextArea_FWD_DEFINED__ */


#ifndef __InputButtonEvents_FWD_DEFINED__
#define __InputButtonEvents_FWD_DEFINED__
typedef interface InputButtonEvents InputButtonEvents;
#endif 	/* __InputButtonEvents_FWD_DEFINED__ */


#ifndef __IInputReset_FWD_DEFINED__
#define __IInputReset_FWD_DEFINED__
typedef interface IInputReset IInputReset;
#endif 	/* __IInputReset_FWD_DEFINED__ */


#ifndef __IInputSubmit_FWD_DEFINED__
#define __IInputSubmit_FWD_DEFINED__
typedef interface IInputSubmit IInputSubmit;
#endif 	/* __IInputSubmit_FWD_DEFINED__ */


#ifndef __IInputButton_FWD_DEFINED__
#define __IInputButton_FWD_DEFINED__
typedef interface IInputButton IInputButton;
#endif 	/* __IInputButton_FWD_DEFINED__ */


#ifndef __MarqueeEvents_FWD_DEFINED__
#define __MarqueeEvents_FWD_DEFINED__
typedef interface MarqueeEvents MarqueeEvents;
#endif 	/* __MarqueeEvents_FWD_DEFINED__ */


#ifndef __IMarquee_FWD_DEFINED__
#define __IMarquee_FWD_DEFINED__
typedef interface IMarquee IMarquee;
#endif 	/* __IMarquee_FWD_DEFINED__ */


#ifndef __CheckboxElementEvents_FWD_DEFINED__
#define __CheckboxElementEvents_FWD_DEFINED__
typedef interface CheckboxElementEvents CheckboxElementEvents;
#endif 	/* __CheckboxElementEvents_FWD_DEFINED__ */


#ifndef __ICheckboxElement_FWD_DEFINED__
#define __ICheckboxElement_FWD_DEFINED__
typedef interface ICheckboxElement ICheckboxElement;
#endif 	/* __ICheckboxElement_FWD_DEFINED__ */


#ifndef __RadioElementEvents_FWD_DEFINED__
#define __RadioElementEvents_FWD_DEFINED__
typedef interface RadioElementEvents RadioElementEvents;
#endif 	/* __RadioElementEvents_FWD_DEFINED__ */


#ifndef __IRadioElement_FWD_DEFINED__
#define __IRadioElement_FWD_DEFINED__
typedef interface IRadioElement IRadioElement;
#endif 	/* __IRadioElement_FWD_DEFINED__ */


#ifndef __IInputElement_FWD_DEFINED__
#define __IInputElement_FWD_DEFINED__
typedef interface IInputElement IInputElement;
#endif 	/* __IInputElement_FWD_DEFINED__ */


#ifndef __ITitleElement_FWD_DEFINED__
#define __ITitleElement_FWD_DEFINED__
typedef interface ITitleElement ITitleElement;
#endif 	/* __ITitleElement_FWD_DEFINED__ */


#ifndef __IMetaElement_FWD_DEFINED__
#define __IMetaElement_FWD_DEFINED__
typedef interface IMetaElement IMetaElement;
#endif 	/* __IMetaElement_FWD_DEFINED__ */


#ifndef __IBaseElement_FWD_DEFINED__
#define __IBaseElement_FWD_DEFINED__
typedef interface IBaseElement IBaseElement;
#endif 	/* __IBaseElement_FWD_DEFINED__ */


#ifndef __ILinkElement_FWD_DEFINED__
#define __ILinkElement_FWD_DEFINED__
typedef interface ILinkElement ILinkElement;
#endif 	/* __ILinkElement_FWD_DEFINED__ */


#ifndef __IIsIndexElement_FWD_DEFINED__
#define __IIsIndexElement_FWD_DEFINED__
typedef interface IIsIndexElement IIsIndexElement;
#endif 	/* __IIsIndexElement_FWD_DEFINED__ */


#ifndef __INextIdElement_FWD_DEFINED__
#define __INextIdElement_FWD_DEFINED__
typedef interface INextIdElement INextIdElement;
#endif 	/* __INextIdElement_FWD_DEFINED__ */


#ifndef __IBaseFontElement_FWD_DEFINED__
#define __IBaseFontElement_FWD_DEFINED__
typedef interface IBaseFontElement IBaseFontElement;
#endif 	/* __IBaseFontElement_FWD_DEFINED__ */


#ifndef __IUnknownElement_FWD_DEFINED__
#define __IUnknownElement_FWD_DEFINED__
typedef interface IUnknownElement IUnknownElement;
#endif 	/* __IUnknownElement_FWD_DEFINED__ */


#ifndef __IPhraseElement_FWD_DEFINED__
#define __IPhraseElement_FWD_DEFINED__
typedef interface IPhraseElement IPhraseElement;
#endif 	/* __IPhraseElement_FWD_DEFINED__ */


#ifndef __ICommentElement_FWD_DEFINED__
#define __ICommentElement_FWD_DEFINED__
typedef interface ICommentElement ICommentElement;
#endif 	/* __ICommentElement_FWD_DEFINED__ */


#ifndef __DocumentEvents_FWD_DEFINED__
#define __DocumentEvents_FWD_DEFINED__
typedef interface DocumentEvents DocumentEvents;
#endif 	/* __DocumentEvents_FWD_DEFINED__ */


#ifndef __IDocument_FWD_DEFINED__
#define __IDocument_FWD_DEFINED__
typedef interface IDocument IDocument;
#endif 	/* __IDocument_FWD_DEFINED__ */


#ifndef __ITable_FWD_DEFINED__
#define __ITable_FWD_DEFINED__
typedef interface ITable ITable;
#endif 	/* __ITable_FWD_DEFINED__ */


#ifndef __ITableCol_FWD_DEFINED__
#define __ITableCol_FWD_DEFINED__
typedef interface ITableCol ITableCol;
#endif 	/* __ITableCol_FWD_DEFINED__ */


#ifndef __ITableSection_FWD_DEFINED__
#define __ITableSection_FWD_DEFINED__
typedef interface ITableSection ITableSection;
#endif 	/* __ITableSection_FWD_DEFINED__ */


#ifndef __ITableRow_FWD_DEFINED__
#define __ITableRow_FWD_DEFINED__
typedef interface ITableRow ITableRow;
#endif 	/* __ITableRow_FWD_DEFINED__ */


#ifndef __ITableCell_FWD_DEFINED__
#define __ITableCell_FWD_DEFINED__
typedef interface ITableCell ITableCell;
#endif 	/* __ITableCell_FWD_DEFINED__ */


#ifndef __ITableCaption_FWD_DEFINED__
#define __ITableCaption_FWD_DEFINED__
typedef interface ITableCaption ITableCaption;
#endif 	/* __ITableCaption_FWD_DEFINED__ */


#ifndef __IDivFlow_FWD_DEFINED__
#define __IDivFlow_FWD_DEFINED__
typedef interface IDivFlow IDivFlow;
#endif 	/* __IDivFlow_FWD_DEFINED__ */


#ifndef __IObjectElement_FWD_DEFINED__
#define __IObjectElement_FWD_DEFINED__
typedef interface IObjectElement IObjectElement;
#endif 	/* __IObjectElement_FWD_DEFINED__ */


#ifndef __ScriptWindowEvents_FWD_DEFINED__
#define __ScriptWindowEvents_FWD_DEFINED__
typedef interface ScriptWindowEvents ScriptWindowEvents;
#endif 	/* __ScriptWindowEvents_FWD_DEFINED__ */


#ifndef __IDocumentDisp_FWD_DEFINED__
#define __IDocumentDisp_FWD_DEFINED__
typedef interface IDocumentDisp IDocumentDisp;
#endif 	/* __IDocumentDisp_FWD_DEFINED__ */


#ifndef __IScriptWindow_FWD_DEFINED__
#define __IScriptWindow_FWD_DEFINED__
typedef interface IScriptWindow IScriptWindow;
#endif 	/* __IScriptWindow_FWD_DEFINED__ */


#ifndef __IMapElement_FWD_DEFINED__
#define __IMapElement_FWD_DEFINED__
typedef interface IMapElement IMapElement;
#endif 	/* __IMapElement_FWD_DEFINED__ */


#ifndef __AreaEvents_FWD_DEFINED__
#define __AreaEvents_FWD_DEFINED__
typedef interface AreaEvents AreaEvents;
#endif 	/* __AreaEvents_FWD_DEFINED__ */


#ifndef __IAreaElement_FWD_DEFINED__
#define __IAreaElement_FWD_DEFINED__
typedef interface IAreaElement IAreaElement;
#endif 	/* __IAreaElement_FWD_DEFINED__ */


#ifndef __IApplet_FWD_DEFINED__
#define __IApplet_FWD_DEFINED__
typedef interface IApplet IApplet;
#endif 	/* __IApplet_FWD_DEFINED__ */


#ifndef __IParam_FWD_DEFINED__
#define __IParam_FWD_DEFINED__
typedef interface IParam IParam;
#endif 	/* __IParam_FWD_DEFINED__ */


#ifndef __IScriptElement_FWD_DEFINED__
#define __IScriptElement_FWD_DEFINED__
typedef interface IScriptElement IScriptElement;
#endif 	/* __IScriptElement_FWD_DEFINED__ */


#ifndef __IFrameSite_FWD_DEFINED__
#define __IFrameSite_FWD_DEFINED__
typedef interface IFrameSite IFrameSite;
#endif 	/* __IFrameSite_FWD_DEFINED__ */


#ifndef __IFrameElement_FWD_DEFINED__
#define __IFrameElement_FWD_DEFINED__
typedef interface IFrameElement IFrameElement;
#endif 	/* __IFrameElement_FWD_DEFINED__ */


#ifndef __IIFrameElement_FWD_DEFINED__
#define __IIFrameElement_FWD_DEFINED__
typedef interface IIFrameElement IIFrameElement;
#endif 	/* __IIFrameElement_FWD_DEFINED__ */


#ifndef __IFrameSetElement_FWD_DEFINED__
#define __IFrameSetElement_FWD_DEFINED__
typedef interface IFrameSetElement IFrameSetElement;
#endif 	/* __IFrameSetElement_FWD_DEFINED__ */


#ifndef __HTMLDlgModelEvents_FWD_DEFINED__
#define __HTMLDlgModelEvents_FWD_DEFINED__
typedef interface HTMLDlgModelEvents HTMLDlgModelEvents;
#endif 	/* __HTMLDlgModelEvents_FWD_DEFINED__ */


#ifndef __IHTMLDlgModel_FWD_DEFINED__
#define __IHTMLDlgModel_FWD_DEFINED__
typedef interface IHTMLDlgModel IHTMLDlgModel;
#endif 	/* __IHTMLDlgModel_FWD_DEFINED__ */


#ifndef __IHTMLDlg_FWD_DEFINED__
#define __IHTMLDlg_FWD_DEFINED__
typedef interface IHTMLDlg IHTMLDlg;
#endif 	/* __IHTMLDlg_FWD_DEFINED__ */


#ifndef __IScrollbar_FWD_DEFINED__
#define __IScrollbar_FWD_DEFINED__
typedef interface IScrollbar IScrollbar;
#endif 	/* __IScrollbar_FWD_DEFINED__ */


#ifndef __ISpinbutton_FWD_DEFINED__
#define __ISpinbutton_FWD_DEFINED__
typedef interface ISpinbutton ISpinbutton;
#endif 	/* __ISpinbutton_FWD_DEFINED__ */


#ifndef __IImage_FWD_DEFINED__
#define __IImage_FWD_DEFINED__
typedef interface IImage IImage;
#endif 	/* __IImage_FWD_DEFINED__ */


#ifndef __ScrollbarEvents_FWD_DEFINED__
#define __ScrollbarEvents_FWD_DEFINED__
typedef interface ScrollbarEvents ScrollbarEvents;
#endif 	/* __ScrollbarEvents_FWD_DEFINED__ */


#ifndef __SpinbuttonEvents_FWD_DEFINED__
#define __SpinbuttonEvents_FWD_DEFINED__
typedef interface SpinbuttonEvents SpinbuttonEvents;
#endif 	/* __SpinbuttonEvents_FWD_DEFINED__ */


#ifndef __ImageEvents_FWD_DEFINED__
#define __ImageEvents_FWD_DEFINED__
typedef interface ImageEvents ImageEvents;
#endif 	/* __ImageEvents_FWD_DEFINED__ */


void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

/****************************************
 * Generated header for interface: __MIDL__intf_0000
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [local] */ 


#include <olectl.h>
interface Font;
interface Picture;
EXTERN_C const GUID CMDSETID_Forms3;


extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL__intf_0000_v0_0_s_ifspec;


#ifndef __MSForms_LIBRARY_DEFINED__
#define __MSForms_LIBRARY_DEFINED__

/****************************************
 * Generated header for library: MSForms
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][version][helpfile][helpstring][lcid][control] */ 


typedef /* [uuid] */ 
enum _htmlConstant
    {	htmlNotSet	= 0
    }	htmlConstant;

typedef /* [uuid] */ 
enum _fmDropEffect
    {	fmDropEffectNone	= 0,
	fmDropEffectCopy	= 1,
	fmDropEffectMove	= 2,
	fmDropEffectCopyOrMove	= 3
    }	fmDropEffect;

typedef /* [uuid] */ 
enum _fmAction
    {	fmActionCut	= 0,
	fmActionCopy	= 1,
	fmActionPaste	= 2,
	fmActionDragDrop	= 3
    }	fmAction;

typedef /* [uuid] */ 
enum _fmMode
    {	fmModeInherit	= -2,
	fmModeOn	= -1,
	fmModeOff	= 0
    }	fmMode;

typedef /* [uuid] */ 
enum _fmMousePointer
    {	fmMousePointerDefault	= 0,
	fmMousePointerArrow	= 1,
	fmMousePointerCross	= 2,
	fmMousePointerIBeam	= 3,
	fmMousePointerSizeNS	= 7,
	fmMousePointerSizeNWSE	= 8,
	fmMousePointerSizeWE	= 9,
	fmMousePointerUpArrow	= 10,
	fmMousePointerHourGlass	= 11,
	fmMousePointerNoDrop	= 12,
	fmMousePointerAppStarting	= 13,
	fmMousePointerHelp	= 14,
	fmMousePointerSizeAll	= 15,
	fmMousePointerCustom	= 99
    }	fmMousePointer;

typedef /* [uuid] */ 
enum _fmScrollBars
    {	fmScrollBarsNone	= 0,
	fmScrollBarsHorizontal	= 1,
	fmScrollBarsVertical	= 2,
	fmScrollBarsBoth	= 3
    }	fmScrollBars;

typedef /* [uuid] */ 
enum _fmScrollAction
    {	fmScrollActionNoChange	= 0,
	fmScrollActionLineUp	= 1,
	fmScrollActionLineDown	= 2,
	fmScrollActionPageUp	= 3,
	fmScrollActionPageDown	= 4,
	fmScrollActionBegin	= 5,
	fmScrollActionEnd	= 6,
	fmScrollActionAbsoluteChange	= 7,
	fmScrollActionPropertyChange	= 8,
	fmScrollActionControlRequest	= 9,
	fmScrollActionFocusRequest	= 10
    }	fmScrollAction;

typedef /* [uuid] */ 
enum _fmCycle
    {	fmCycleAllForms	= 0,
	fmCycleCurrentForm	= 2
    }	fmCycle;

typedef /* [uuid] */ 
enum _fmZOrder
    {	fmZOrderFront	= 0,
	fmZOrderBack	= 1
    }	fmZOrder;

typedef /* [uuid] */ 
enum _fmBorderStyle
    {	fmBorderStyleNone	= 0,
	fmBorderStyleSingle	= 1
    }	fmBorderStyle;

typedef /* [uuid] */ 
enum _fmTextAlign
    {	fmTextAlignGeneral	= 0,
	fmTextAlignLeft	= 1,
	fmTextAlignCenter	= 2,
	fmTextAlignRight	= 3
    }	fmTextAlign;

typedef /* [uuid] */ 
enum _fmAlignment
    {	fmAlignmentLeft	= 0,
	fmAlignmentRight	= 1
    }	fmAlignment;

typedef /* [uuid] */ 
enum _fmBorders
    {	fmBordersNone	= 0,
	fmBordersBox	= 1,
	fmBordersLeft	= 2,
	fmBordersTop	= 3
    }	fmBorders;

typedef /* [uuid] */ 
enum _fmBackStyle
    {	fmBackStyleTransparent	= 0,
	fmBackStyleOpaque	= 1
    }	fmBackStyle;

typedef /* [uuid] */ 
enum _fmButtonStyle
    {	fmButtonStylePushButton	= 0,
	fmButtonStyleToggleButton	= 1
    }	fmButtonStyle;

typedef /* [uuid] */ 
enum _fmLayoutEffect
    {	fmLayoutEffectNone	= 0,
	fmLayoutEffectInitiate	= 1,
	fmLayoutEffectRespond	= 2
    }	fmLayoutEffect;

typedef /* [uuid] */ 
enum _fmDragState
    {	fmDragStateEnter	= 0,
	fmDragStateLeave	= 1,
	fmDragStateOver	= 2
    }	fmDragState;

typedef /* [uuid] */ 
enum _fmVerticalScrollBarSide
    {	fmVerticalScrollBarSideRight	= 0,
	fmVerticalScrollBarSideLeft	= 1
    }	fmVerticalScrollBarSide;

typedef /* [uuid] */ 
enum _fmSpecialEffect
    {	fmSpecialEffectFlat	= 0,
	fmSpecialEffectRaised	= 1,
	fmSpecialEffectSunken	= 2,
	fmSpecialEffectEtched	= 3,
	fmSpecialEffectBump	= 4,
	fmSpecialEffectRaisedMono	= 5,
	fmSpecialEffectSunkenMono	= 6
    }	fmSpecialEffect;

typedef /* [uuid] */ 
enum _fmPictureSizeMode
    {	fmPictureSizeModeClip	= 0,
	fmPictureSizeModeStretch	= 1,
	fmPictureSizeModeZoom	= 3
    }	fmPictureSizeMode;

typedef /* [uuid] */ 
enum _fmPictureAlignment
    {	fmPictureAlignmentTopLeft	= 0,
	fmPictureAlignmentTopRight	= 1,
	fmPictureAlignmentCenter	= 2,
	fmPictureAlignmentBottomLeft	= 3,
	fmPictureAlignmentBottomRight	= 4
    }	fmPictureAlignment;

typedef /* [uuid] */ 
enum _fmMultiSelect
    {	fmMultiSelectSingle	= 0,
	fmMultiSelectMulti	= 1,
	fmMultiSelectExtended	= 2
    }	fmMultiSelect;

typedef /* [uuid] */ 
enum _fmListStyle
    {	fmListStylePlain	= 0,
	fmListStyleOption	= 1,
	fmListStyleToggle	= 2,
	fmListStyleMark	= 3
    }	fmListStyle;

typedef /* [uuid] */ 
enum _htmlReadyState
    {	htmlReadyStateUninitialized	= 0,
	htmlReadyStateLoading	= 1,
	htmlReadyStateInteractive	= 3,
	htmlReadyStateComplete	= 4
    }	htmlReadyState;

typedef /* [uuid] */ 
enum _htmlClear
    {	htmlClearNotSet	= 0,
	htmlClearAll	= 1,
	htmlClearLeft	= 2,
	htmlClearRight	= 3
    }	htmlClear;

typedef /* [uuid] */ 
enum _htmlControlAlign
    {	htmlControlAlignNotSet	= 0,
	htmlControlAlignLeft	= 1,
	htmlControlAlignCenter	= 2,
	htmlControlAlignRight	= 3,
	htmlControlAlignTextTop	= 4,
	htmlControlAlignAbsMiddle	= 5,
	htmlControlAlignBaseline	= 6,
	htmlControlAlignAbsBottom	= 7,
	htmlControlAlignBottom	= 8,
	htmlControlAlignMiddle	= 9,
	htmlControlAlignTop	= 10
    }	htmlControlAlign;

typedef /* [uuid] */ 
enum _htmlBlockAlign
    {	htmlBlockAlignNotSet	= 0,
	htmlBlockAlignLeft	= 1,
	htmlBlockAlignCenter	= 2,
	htmlBlockAlignRight	= 3
    }	htmlBlockAlign;

typedef /* [uuid] */ 
enum _htmlUnits
    {	htmlUnitsNotSet	= 0,
	htmlUnitsPoint	= 1,
	htmlUnitsPica	= 2,
	htmlUnitsInch	= 3,
	htmlUnitsCm	= 4,
	htmlUnitsMm	= 5,
	htmlUnitsEm	= 6,
	htmlUnitsEn	= 7,
	htmlUnitsEx	= 8,
	htmlUnitsPixels	= 9,
	htmlUnitsPercent	= 10,
	htmlUnitsRelative	= 11
    }	htmlUnits;

typedef /* [uuid] */ 
enum _htmlDocUnits
    {	htmlDocUnitsPoint	= 1,
	htmlDocUnitsPica	= 2,
	htmlDocUnitsInch	= 3,
	htmlDocUnitsCm	= 4,
	htmlDocUnitsMm	= 5,
	htmlDocUnitsEm	= 6,
	htmlDocUnitsEn	= 7,
	htmlDocUnitsEx	= 8,
	htmlDocUnitsPixels	= 9
    }	htmlDocUnits;

typedef /* [uuid] */ 
enum _styleTextTransform
    {	styleTextTransformNotSet	= 0,
	styleTextTransformLowercase	= 1,
	styleTextTransformUppercase	= 2
    }	styleTextTransform;

typedef /* [uuid] */ 
enum _styleDataRepeat
    {	styleDataRepeatNone	= 0,
	styleDataRepeatInner	= 1
    }	styleDataRepeat;

typedef /* [uuid] */ 
enum _styleOverflow
    {	styleOverflowNone	= 0,
	styleOverflowScrollHoriz	= 1,
	styleOverflowScrollVert	= 2,
	styleOverflowScrollBoth	= 3
    }	styleOverflow;

typedef /* [uuid] */ 
enum _styleLayout
    {	styleLayoutNotSet	= 0,
	styleLayoutFixed	= 1,
	styleLayoutFill	= 2
    }	styleLayout;

typedef /* [uuid] */ 
enum _styleTextDecorationLineThrough
    {	styleTextDecorationLineThroughNotSet	= 0,
	styleTextDecorationLineThroughLineThrough	= 1
    }	styleTextDecorationLineThrough;

typedef /* [uuid] */ 
enum _styleTextDecorationUnderline
    {	styleTextDecorationUnderlineNotSet	= 0,
	styleTextDecorationUnderlineUnderline	= 1
    }	styleTextDecorationUnderline;

typedef /* [uuid] */ 
enum _styleTextDecorationNone
    {	styleTextDecorationNoneNotSet	= 0,
	styleTextDecorationNoneNone	= 1
    }	styleTextDecorationNone;

typedef /* [uuid] */ 
enum _styleFontStyle
    {	styleFontStyleNotSet	= 0,
	styleFontStyleItalic	= 1,
	styleFontStyleOblique	= 2,
	styleFontStyleNone	= 3
    }	styleFontStyle;

typedef /* [uuid] */ 
enum _styleFontVariant
    {	styleFontVariantNotSet	= 0,
	styleFontVariantSmallCaps	= 1,
	styleFontVariantNone	= 2
    }	styleFontVariant;

typedef /* [uuid] */ 
enum _styleFontWeight
    {	styleFontWeightNotSet	= 0,
	styleFontWeight100	= 1,
	styleFontWeight200	= 2,
	styleFontWeight300	= 3,
	styleFontWeight400	= 4,
	styleFontWeight500	= 5,
	styleFontWeight600	= 6,
	styleFontWeight700	= 7,
	styleFontWeight800	= 8,
	styleFontWeight900	= 9,
	styleFontWeightNormal	= 10,
	styleFontWeightBold	= 11,
	styleFontWeightBolder	= 12,
	styleFontWeightLighter	= 13
    }	styleFontWeight;

typedef /* [uuid] */ 
enum _htmlListType
    {	htmlListTypeNotSet	= 0,
	htmlListTypeLargeAlpha	= 1,
	htmlListTypeSmallAlpha	= 2,
	htmlListTypeLargeRoman	= 3,
	htmlListTypeSmallRoman	= 4,
	htmlListTypeNumbers	= 5,
	htmlListTypeDisc	= 6,
	htmlListTypeCircle	= 7,
	htmlListTypeSquare	= 8
    }	htmlListType;

typedef /* [uuid] */ 
enum _cssListStyle
    {	cssListStyleLowerAlpha	= 0,
	cssListStyleUpperAlpha	= 1,
	cssListStyleLowerRoman	= 2,
	cssListStyleUpperRoman	= 3,
	cssListStyleDics	= 4,
	cssListStyleCircle	= 5,
	cssListStyleSquare	= 6,
	cssListStyleDecimal	= 7,
	cssListStyleNone	= 8
    }	cssListStyle;

typedef /* [uuid] */ 
enum _htmlDir
    {	htmlDirLeftToRight	= 0,
	htmlDirRightToLeft	= 1
    }	htmlDir;

typedef /* [uuid] */ 
enum _htmlMethod
    {	htmlMethodNotSet	= 0,
	htmlMethodGet	= 1,
	htmlMethodPost	= 2
    }	htmlMethod;

typedef /* [uuid] */ 
enum _htmlWrap
    {	htmlWrapOff	= 1,
	htmlWrapVirtual	= 2,
	htmlWrapPhysical	= 3
    }	htmlWrap;

typedef /* [uuid] */ 
enum _htmlInput
    {	htmlInputNotSet	= 0,
	htmlInputButton	= 1,
	htmlInputCheckbox	= 2,
	htmlInputFile	= 3,
	htmlInputHidden	= 4,
	htmlInputImage	= 5,
	htmlInputPassword	= 6,
	htmlInputRadio	= 7,
	htmlInputReset	= 8,
	htmlInputSelectOne	= 9,
	htmlInputSelectMultiple	= 10,
	htmlInputSubmit	= 11,
	htmlInputText	= 12,
	htmlInputTextarea	= 13
    }	htmlInput;

typedef /* [uuid] */ 
enum _htmlUnit
    {	htmlUnitCharacter	= 1,
	htmlUnitWord	= 2,
	htmlUnitSentence	= 3,
	htmlUnitStory	= 6
    }	htmlUnit;

typedef /* [uuid] */ 
enum _htmlDirection
    {	htmlDirectionForward	= 99999,
	htmlDirectionBackward	= -99999,
	htmlDirectionLeft	= 1,
	htmlDirectionRight	= 3,
	htmlDirectionUp	= 5,
	htmlDirectionDown	= 7
    }	htmlDirection;

typedef /* [uuid] */ 
enum _htmlLoop
    {	htmlLoopLoopInfinite	= -1
    }	htmlLoop;

typedef /* [uuid] */ 
enum _htmlBGProperties
    {	htmlBGPropertiesNotSet	= 0,
	htmlBGPropertiesFixed	= 1
    }	htmlBGProperties;

typedef /* [uuid] */ 
enum _htmlSelectType
    {	htmlSelectTypeSelectOne	= 1,
	htmlSelectTypeSelectMultiple	= 2
    }	htmlSelectType;

typedef /* [uuid] */ 
enum _htmlSelection
    {	htmlSelectionNone	= 0,
	htmlSelectionText	= 1,
	htmlSelectionControl	= 2,
	htmlSelectionTable	= 3
    }	htmlSelection;

typedef /* [uuid] */ 
enum _htmlFrame
    {	htmlFrameNotSet	= 0,
	htmlFramevoid	= 1,
	htmlFrameabove	= 2,
	htmlFramebelow	= 3,
	htmlFramehsides	= 4,
	htmlFramelhs	= 5,
	htmlFramerhs	= 6,
	htmlFramevsides	= 7,
	htmlFramebox	= 8,
	htmlFrameborder	= 9
    }	htmlFrame;

typedef /* [uuid] */ 
enum _htmlRules
    {	htmlRulesNotSet	= 0,
	htmlRulesnone	= 1,
	htmlRulesgroups	= 2,
	htmlRulesrows	= 3,
	htmlRulescols	= 4,
	htmlRulesall	= 5
    }	htmlRules;

typedef /* [uuid] */ 
enum _htmlCellAlign
    {	htmlCellAlignNotSet	= 0,
	htmlCellAlignLeft	= 1,
	htmlCellAlignCenter	= 2,
	htmlCellAlignRight	= 3,
	htmlCellAlignMiddle	= htmlCellAlignCenter
    }	htmlCellAlign;

typedef /* [uuid] */ 
enum _htmlCellVAlign
    {	htmlCellVAlignNotSet	= 0,
	htmlCellVAlignTop	= 1,
	htmlCellVAlignMiddle	= 2,
	htmlCellVAlignBottom	= 3,
	htmlCellVAlignBaseline	= 4
    }	htmlCellVAlign;

typedef /* [uuid] */ 
enum _htmlCaptionAlign
    {	htmlCaptionAlignNotSet	= 0,
	htmlCaptionAlignLeft	= 1,
	htmlCaptionAlignCenter	= 2,
	htmlCaptionAlignRight	= 3,
	htmlCaptionAlignTop	= 4,
	htmlCaptionAlignBottom	= 5
    }	htmlCaptionAlign;

typedef /* [uuid] */ 
enum _htmlCaptionVAlign
    {	htmlCaptionVAlignNotSet	= 0,
	htmlCaptionVAlignTop	= 1,
	htmlCaptionVAlignBottom	= 2
    }	htmlCaptionVAlign;

typedef /* [uuid] */ 
enum _frameScrolling
    {	frameScrollingyes	= 1,
	frameScrollingno	= 2,
	frameScrollingauto	= 4
    }	frameScrolling;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0001
    {	fmButtonEffectFlat	= 0,
	fmButtonEffectSunken	= 2
    }	fmButtonEffect;

typedef /* [public][public][public][public][public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0002
    {	fmOrientationAuto	= -1,
	fmOrientationVertical	= 0,
	fmOrientationHorizontal	= 1
    }	fmOrientation;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0003
    {	fmSnapPointTopLeft	= 0,
	fmSnapPointTopCenter	= 1,
	fmSnapPointTopRight	= 2,
	fmSnapPointCenterLeft	= 3,
	fmSnapPointCenter	= 4,
	fmSnapPointCenterRight	= 5,
	fmSnapPointBottomLeft	= 6,
	fmSnapPointBottomCenter	= 7,
	fmSnapPointBottomRight	= 8
    }	fmSnapPoint;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0004
    {	fmPicturePositionLeftTop	= 0,
	fmPicturePositionLeftCenter	= 1,
	fmPicturePositionLeftBottom	= 2,
	fmPicturePositionRightTop	= 3,
	fmPicturePositionRightCenter	= 4,
	fmPicturePositionRightBottom	= 5,
	fmPicturePositionAboveLeft	= 6,
	fmPicturePositionAboveCenter	= 7,
	fmPicturePositionAboveRight	= 8,
	fmPicturePositionBelowLeft	= 9,
	fmPicturePositionBelowCenter	= 10,
	fmPicturePositionBelowRight	= 11,
	fmPicturePositionCenter	= 12
    }	fmPicturePosition;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0005
    {	fmDisplayStyleText	= 1,
	fmDisplayStyleList	= 2,
	fmDisplayStyleCombo	= 3,
	fmDisplayStyleCheckBox	= 4,
	fmDisplayStyleOptionButton	= 5,
	fmDisplayStyleToggle	= 6,
	fmDisplayStyleDropList	= 7
    }	fmDisplayStyle;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0006
    {	fmShowListWhenNever	= 0,
	fmShowListWhenButton	= 1,
	fmShowListWhenFocus	= 2,
	fmShowListWhenAlways	= 3
    }	fmShowListWhen;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0007
    {	fmShowDropButtonWhenNever	= 0,
	fmShowDropButtonWhenFocus	= 1,
	fmShowDropButtonWhenAlways	= 2
    }	fmShowDropButtonWhen;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0008
    {	fmEnterFieldBehaviorSelectAll	= 0,
	fmEnterFieldBehaviorRecallSelection	= 1
    }	fmEnterFieldBehavior;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0009
    {	fmDragBehaviorDisabled	= 0,
	fmDragBehaviorEnabled	= 1
    }	fmDragBehavior;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0010
    {	fmMatchEntryFirstLetter	= 0,
	fmMatchEntryComplete	= 1,
	fmMatchEntryNone	= 2
    }	fmMatchEntry;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0011
    {	fmDropButtonStylePlain	= 0,
	fmDropButtonStyleArrow	= 1,
	fmDropButtonStyleEllipsis	= 2,
	fmDropButtonStyleReduce	= 3
    }	fmDropButtonStyle;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0012
    {	fmStyleDropDownCombo	= 0,
	fmStyleDropDownList	= 2
    }	fmStyle;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0013
    {	fmTabOrientationTop	= 0,
	fmTabOrientationBottom	= 1,
	fmTabOrientationLeft	= 2,
	fmTabOrientationRight	= 3
    }	fmTabOrientation;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0014
    {	fmTabStyleTabs	= 0,
	fmTabStyleButtons	= 1,
	fmTabStyleNone	= 2
    }	fmTabStyle;

typedef /* [public][uuid] */ 
enum __MIDL___MIDL__intf_0238_0015
    {	fmIMEModeNoControl	= 0,
	fmIMEModeOn	= 1,
	fmIMEModeOff	= 2,
	fmIMEModeDisable	= 3,
	fmIMEModeHiragana	= 4,
	fmIMEModeKatakana	= 5,
	fmIMEModeKatakanaHalf	= 6,
	fmIMEModeAlphaFull	= 7,
	fmIMEModeAlpha	= 8
    }	fmIMEMode;


EXTERN_C const IID LIBID_MSForms;

#ifndef __IDataAutoWrapper_INTERFACE_DEFINED__
#define __IDataAutoWrapper_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IDataAutoWrapper
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IDataAutoWrapper;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IDataAutoWrapper : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE clear( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getFormat( 
            /* [in] */ VARIANT format,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *support) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getText( 
            /* [in][optional] */ VARIANT format,
            /* [out][retval] */ BSTR __RPC_FAR *text) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setText( 
            /* [in] */ BSTR text,
            /* [in][optional] */ VARIANT format) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE putInClipboard( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getFromClipboard( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE startDrag( 
            /* [in][optional] */ VARIANT okEffect,
            /* [out][retval] */ fmDropEffect __RPC_FAR *effect) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDataAutoWrapperVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDataAutoWrapper __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDataAutoWrapper __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDataAutoWrapper __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IDataAutoWrapper __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IDataAutoWrapper __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IDataAutoWrapper __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IDataAutoWrapper __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *clear )( 
            IDataAutoWrapper __RPC_FAR * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *getFormat )( 
            IDataAutoWrapper __RPC_FAR * This,
            /* [in] */ VARIANT format,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *support);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *getText )( 
            IDataAutoWrapper __RPC_FAR * This,
            /* [in][optional] */ VARIANT format,
            /* [out][retval] */ BSTR __RPC_FAR *text);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setText )( 
            IDataAutoWrapper __RPC_FAR * This,
            /* [in] */ BSTR text,
            /* [in][optional] */ VARIANT format);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *putInClipboard )( 
            IDataAutoWrapper __RPC_FAR * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *getFromClipboard )( 
            IDataAutoWrapper __RPC_FAR * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *startDrag )( 
            IDataAutoWrapper __RPC_FAR * This,
            /* [in][optional] */ VARIANT okEffect,
            /* [out][retval] */ fmDropEffect __RPC_FAR *effect);
        
        END_INTERFACE
    } IDataAutoWrapperVtbl;

    interface IDataAutoWrapper
    {
        CONST_VTBL struct IDataAutoWrapperVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDataAutoWrapper_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDataAutoWrapper_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDataAutoWrapper_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDataAutoWrapper_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDataAutoWrapper_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDataAutoWrapper_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDataAutoWrapper_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDataAutoWrapper_clear(This)	\
    (This)->lpVtbl -> clear(This)

#define IDataAutoWrapper_getFormat(This,format,support)	\
    (This)->lpVtbl -> getFormat(This,format,support)

#define IDataAutoWrapper_getText(This,format,text)	\
    (This)->lpVtbl -> getText(This,format,text)

#define IDataAutoWrapper_setText(This,text,format)	\
    (This)->lpVtbl -> setText(This,text,format)

#define IDataAutoWrapper_putInClipboard(This)	\
    (This)->lpVtbl -> putInClipboard(This)

#define IDataAutoWrapper_getFromClipboard(This)	\
    (This)->lpVtbl -> getFromClipboard(This)

#define IDataAutoWrapper_startDrag(This,okEffect,effect)	\
    (This)->lpVtbl -> startDrag(This,okEffect,effect)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IDataAutoWrapper_clear_Proxy( 
    IDataAutoWrapper __RPC_FAR * This);


void __RPC_STUB IDataAutoWrapper_clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDataAutoWrapper_getFormat_Proxy( 
    IDataAutoWrapper __RPC_FAR * This,
    /* [in] */ VARIANT format,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *support);


void __RPC_STUB IDataAutoWrapper_getFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDataAutoWrapper_getText_Proxy( 
    IDataAutoWrapper __RPC_FAR * This,
    /* [in][optional] */ VARIANT format,
    /* [out][retval] */ BSTR __RPC_FAR *text);


void __RPC_STUB IDataAutoWrapper_getText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDataAutoWrapper_setText_Proxy( 
    IDataAutoWrapper __RPC_FAR * This,
    /* [in] */ BSTR text,
    /* [in][optional] */ VARIANT format);


void __RPC_STUB IDataAutoWrapper_setText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDataAutoWrapper_putInClipboard_Proxy( 
    IDataAutoWrapper __RPC_FAR * This);


void __RPC_STUB IDataAutoWrapper_putInClipboard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDataAutoWrapper_getFromClipboard_Proxy( 
    IDataAutoWrapper __RPC_FAR * This);


void __RPC_STUB IDataAutoWrapper_getFromClipboard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDataAutoWrapper_startDrag_Proxy( 
    IDataAutoWrapper __RPC_FAR * This,
    /* [in][optional] */ VARIANT okEffect,
    /* [out][retval] */ fmDropEffect __RPC_FAR *effect);


void __RPC_STUB IDataAutoWrapper_startDrag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDataAutoWrapper_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_DataObject;

class DataObject;
#endif

#ifndef __IReturnInteger_INTERFACE_DEFINED__
#define __IReturnInteger_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IReturnInteger
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IReturnInteger;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IReturnInteger : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ int v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ int __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IReturnIntegerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IReturnInteger __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IReturnInteger __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IReturnInteger __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IReturnInteger __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IReturnInteger __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IReturnInteger __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IReturnInteger __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IReturnInteger __RPC_FAR * This,
            /* [in] */ int v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IReturnInteger __RPC_FAR * This,
            /* [out][retval] */ int __RPC_FAR *p);
        
        END_INTERFACE
    } IReturnIntegerVtbl;

    interface IReturnInteger
    {
        CONST_VTBL struct IReturnIntegerVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IReturnInteger_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IReturnInteger_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IReturnInteger_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IReturnInteger_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IReturnInteger_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IReturnInteger_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IReturnInteger_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IReturnInteger_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IReturnInteger_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IReturnInteger_put_value_Proxy( 
    IReturnInteger __RPC_FAR * This,
    /* [in] */ int v);


void __RPC_STUB IReturnInteger_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IReturnInteger_get_value_Proxy( 
    IReturnInteger __RPC_FAR * This,
    /* [out][retval] */ int __RPC_FAR *p);


void __RPC_STUB IReturnInteger_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IReturnInteger_INTERFACE_DEFINED__ */


#ifndef __IReturnBoolean_INTERFACE_DEFINED__
#define __IReturnBoolean_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IReturnBoolean
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IReturnBoolean;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IReturnBoolean : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IReturnBooleanVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IReturnBoolean __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IReturnBoolean __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IReturnBoolean __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IReturnBoolean __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IReturnBoolean __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IReturnBoolean __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IReturnBoolean __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IReturnBoolean __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IReturnBoolean __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        END_INTERFACE
    } IReturnBooleanVtbl;

    interface IReturnBoolean
    {
        CONST_VTBL struct IReturnBooleanVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IReturnBoolean_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IReturnBoolean_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IReturnBoolean_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IReturnBoolean_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IReturnBoolean_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IReturnBoolean_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IReturnBoolean_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IReturnBoolean_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IReturnBoolean_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IReturnBoolean_put_value_Proxy( 
    IReturnBoolean __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IReturnBoolean_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IReturnBoolean_get_value_Proxy( 
    IReturnBoolean __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IReturnBoolean_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IReturnBoolean_INTERFACE_DEFINED__ */


#ifndef __IReturnString_INTERFACE_DEFINED__
#define __IReturnString_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IReturnString
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IReturnString;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IReturnString : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IReturnStringVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IReturnString __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IReturnString __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IReturnString __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IReturnString __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IReturnString __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IReturnString __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IReturnString __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IReturnString __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IReturnString __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IReturnStringVtbl;

    interface IReturnString
    {
        CONST_VTBL struct IReturnStringVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IReturnString_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IReturnString_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IReturnString_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IReturnString_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IReturnString_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IReturnString_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IReturnString_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IReturnString_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IReturnString_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IReturnString_put_value_Proxy( 
    IReturnString __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IReturnString_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IReturnString_get_value_Proxy( 
    IReturnString __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IReturnString_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IReturnString_INTERFACE_DEFINED__ */


#ifndef __IReturnSingle_INTERFACE_DEFINED__
#define __IReturnSingle_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IReturnSingle
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IReturnSingle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IReturnSingle : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ float v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ float __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IReturnSingleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IReturnSingle __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IReturnSingle __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IReturnSingle __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IReturnSingle __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IReturnSingle __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IReturnSingle __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IReturnSingle __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IReturnSingle __RPC_FAR * This,
            /* [in] */ float v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IReturnSingle __RPC_FAR * This,
            /* [out][retval] */ float __RPC_FAR *p);
        
        END_INTERFACE
    } IReturnSingleVtbl;

    interface IReturnSingle
    {
        CONST_VTBL struct IReturnSingleVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IReturnSingle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IReturnSingle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IReturnSingle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IReturnSingle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IReturnSingle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IReturnSingle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IReturnSingle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IReturnSingle_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IReturnSingle_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IReturnSingle_put_value_Proxy( 
    IReturnSingle __RPC_FAR * This,
    /* [in] */ float v);


void __RPC_STUB IReturnSingle_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IReturnSingle_get_value_Proxy( 
    IReturnSingle __RPC_FAR * This,
    /* [out][retval] */ float __RPC_FAR *p);


void __RPC_STUB IReturnSingle_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IReturnSingle_INTERFACE_DEFINED__ */


#ifndef __IReturnEffect_INTERFACE_DEFINED__
#define __IReturnEffect_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IReturnEffect
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IReturnEffect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IReturnEffect : public IDispatch
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ fmDropEffect v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ fmDropEffect __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IReturnEffectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IReturnEffect __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IReturnEffect __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IReturnEffect __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IReturnEffect __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IReturnEffect __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IReturnEffect __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IReturnEffect __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IReturnEffect __RPC_FAR * This,
            /* [in] */ fmDropEffect v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IReturnEffect __RPC_FAR * This,
            /* [out][retval] */ fmDropEffect __RPC_FAR *p);
        
        END_INTERFACE
    } IReturnEffectVtbl;

    interface IReturnEffect
    {
        CONST_VTBL struct IReturnEffectVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IReturnEffect_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IReturnEffect_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IReturnEffect_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IReturnEffect_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IReturnEffect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IReturnEffect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IReturnEffect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IReturnEffect_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IReturnEffect_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IReturnEffect_put_value_Proxy( 
    IReturnEffect __RPC_FAR * This,
    /* [in] */ fmDropEffect v);


void __RPC_STUB IReturnEffect_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IReturnEffect_get_value_Proxy( 
    IReturnEffect __RPC_FAR * This,
    /* [out][retval] */ fmDropEffect __RPC_FAR *p);


void __RPC_STUB IReturnEffect_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IReturnEffect_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_ReturnInteger;

class ReturnInteger;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_ReturnBoolean;

class ReturnBoolean;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_ReturnString;

class ReturnString;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_ReturnSingle;

class ReturnSingle;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_ReturnEffect;

class ReturnEffect;
#endif

#ifndef __IUnitMeasurement_INTERFACE_DEFINED__
#define __IUnitMeasurement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IUnitMeasurement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IUnitMeasurement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IUnitMeasurement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ float v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ float __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_unit( 
            /* [in] */ htmlUnits v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_unit( 
            /* [out][retval] */ htmlUnits __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_unitValue( 
            /* [in] */ float v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_unitValue( 
            /* [out][retval] */ float __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_htmlText( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_htmlText( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUnitMeasurementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IUnitMeasurement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IUnitMeasurement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IUnitMeasurement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IUnitMeasurement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IUnitMeasurement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IUnitMeasurement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IUnitMeasurement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IUnitMeasurement __RPC_FAR * This,
            /* [in] */ float v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IUnitMeasurement __RPC_FAR * This,
            /* [out][retval] */ float __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_unit )( 
            IUnitMeasurement __RPC_FAR * This,
            /* [in] */ htmlUnits v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_unit )( 
            IUnitMeasurement __RPC_FAR * This,
            /* [out][retval] */ htmlUnits __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_unitValue )( 
            IUnitMeasurement __RPC_FAR * This,
            /* [in] */ float v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_unitValue )( 
            IUnitMeasurement __RPC_FAR * This,
            /* [out][retval] */ float __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_htmlText )( 
            IUnitMeasurement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_htmlText )( 
            IUnitMeasurement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IUnitMeasurementVtbl;

    interface IUnitMeasurement
    {
        CONST_VTBL struct IUnitMeasurementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUnitMeasurement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IUnitMeasurement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IUnitMeasurement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IUnitMeasurement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IUnitMeasurement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IUnitMeasurement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IUnitMeasurement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IUnitMeasurement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IUnitMeasurement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IUnitMeasurement_put_unit(This,v)	\
    (This)->lpVtbl -> put_unit(This,v)

#define IUnitMeasurement_get_unit(This,p)	\
    (This)->lpVtbl -> get_unit(This,p)

#define IUnitMeasurement_put_unitValue(This,v)	\
    (This)->lpVtbl -> put_unitValue(This,v)

#define IUnitMeasurement_get_unitValue(This,p)	\
    (This)->lpVtbl -> get_unitValue(This,p)

#define IUnitMeasurement_put_htmlText(This,v)	\
    (This)->lpVtbl -> put_htmlText(This,v)

#define IUnitMeasurement_get_htmlText(This,p)	\
    (This)->lpVtbl -> get_htmlText(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IUnitMeasurement_put_value_Proxy( 
    IUnitMeasurement __RPC_FAR * This,
    /* [in] */ float v);


void __RPC_STUB IUnitMeasurement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IUnitMeasurement_get_value_Proxy( 
    IUnitMeasurement __RPC_FAR * This,
    /* [out][retval] */ float __RPC_FAR *p);


void __RPC_STUB IUnitMeasurement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IUnitMeasurement_put_unit_Proxy( 
    IUnitMeasurement __RPC_FAR * This,
    /* [in] */ htmlUnits v);


void __RPC_STUB IUnitMeasurement_put_unit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IUnitMeasurement_get_unit_Proxy( 
    IUnitMeasurement __RPC_FAR * This,
    /* [out][retval] */ htmlUnits __RPC_FAR *p);


void __RPC_STUB IUnitMeasurement_get_unit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IUnitMeasurement_put_unitValue_Proxy( 
    IUnitMeasurement __RPC_FAR * This,
    /* [in] */ float v);


void __RPC_STUB IUnitMeasurement_put_unitValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IUnitMeasurement_get_unitValue_Proxy( 
    IUnitMeasurement __RPC_FAR * This,
    /* [out][retval] */ float __RPC_FAR *p);


void __RPC_STUB IUnitMeasurement_get_unitValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IUnitMeasurement_put_htmlText_Proxy( 
    IUnitMeasurement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IUnitMeasurement_put_htmlText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IUnitMeasurement_get_htmlText_Proxy( 
    IUnitMeasurement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IUnitMeasurement_get_htmlText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IUnitMeasurement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_UnitMeasurement;

class UnitMeasurement;
#endif

#ifndef __IStyle_INTERFACE_DEFINED__
#define __IStyle_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IStyle
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IStyle : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_backgroundImage( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_backgroundImage( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_color( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_color( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_textAlign( 
            /* [in] */ htmlBlockAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_textAlign( 
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_textTransform( 
            /* [in] */ styleTextTransform v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_textTransform( 
            /* [out][retval] */ styleTextTransform __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_height( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_top( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_left( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_layout( 
            /* [out][retval] */ styleLayout __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_lineHeight( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_letterSpacing( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_dataRepeat( 
            /* [in] */ styleDataRepeat v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_dataRepeat( 
            /* [out][retval] */ styleDataRepeat __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_overflow( 
            /* [in] */ styleOverflow v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_overflow( 
            /* [out][retval] */ styleOverflow __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_paddingTop( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_paddingRight( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_paddingBottom( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_paddingLeft( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_clear( 
            /* [in] */ htmlClear v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_clear( 
            /* [out][retval] */ htmlClear __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_fontSize( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_fontSize( 
            /* [out][retval] */ VARIANT __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_fontFamily( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_fontFamily( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_textDecorationLineThrough( 
            /* [in] */ styleTextDecorationLineThrough v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_textDecorationLineThrough( 
            /* [out][retval] */ styleTextDecorationLineThrough __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_textDecorationUnderline( 
            /* [in] */ styleTextDecorationUnderline v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_textDecorationUnderline( 
            /* [out][retval] */ styleTextDecorationUnderline __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_textDecorationNone( 
            /* [in] */ styleTextDecorationNone v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_textDecorationNone( 
            /* [out][retval] */ styleTextDecorationNone __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_fontStyle( 
            /* [in] */ styleFontStyle v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_fontStyle( 
            /* [out][retval] */ styleFontStyle __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_fontVariant( 
            /* [in] */ styleFontVariant v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_fontVariant( 
            /* [out][retval] */ styleFontVariant __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_backgroundColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_backgroundColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_fontWeight( 
            /* [in] */ styleFontWeight v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_fontWeight( 
            /* [out][retval] */ styleFontWeight __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_marginTop( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_marginRight( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_marginBottom( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_marginLeft( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IStyle __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IStyle __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IStyle __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IStyle __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IStyle __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IStyle __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IStyle __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_backgroundImage )( 
            IStyle __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_backgroundImage )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_color )( 
            IStyle __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_color )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_textAlign )( 
            IStyle __RPC_FAR * This,
            /* [in] */ htmlBlockAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_textAlign )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_textTransform )( 
            IStyle __RPC_FAR * This,
            /* [in] */ styleTextTransform v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_textTransform )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ styleTextTransform __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_top )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_left )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_layout )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ styleLayout __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_lineHeight )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_letterSpacing )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_dataRepeat )( 
            IStyle __RPC_FAR * This,
            /* [in] */ styleDataRepeat v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_dataRepeat )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ styleDataRepeat __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_overflow )( 
            IStyle __RPC_FAR * This,
            /* [in] */ styleOverflow v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_overflow )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ styleOverflow __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_paddingTop )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_paddingRight )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_paddingBottom )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_paddingLeft )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_clear )( 
            IStyle __RPC_FAR * This,
            /* [in] */ htmlClear v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_clear )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ htmlClear __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_fontSize )( 
            IStyle __RPC_FAR * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_fontSize )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_fontFamily )( 
            IStyle __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_fontFamily )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_textDecorationLineThrough )( 
            IStyle __RPC_FAR * This,
            /* [in] */ styleTextDecorationLineThrough v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_textDecorationLineThrough )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ styleTextDecorationLineThrough __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_textDecorationUnderline )( 
            IStyle __RPC_FAR * This,
            /* [in] */ styleTextDecorationUnderline v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_textDecorationUnderline )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ styleTextDecorationUnderline __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_textDecorationNone )( 
            IStyle __RPC_FAR * This,
            /* [in] */ styleTextDecorationNone v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_textDecorationNone )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ styleTextDecorationNone __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_fontStyle )( 
            IStyle __RPC_FAR * This,
            /* [in] */ styleFontStyle v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_fontStyle )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ styleFontStyle __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_fontVariant )( 
            IStyle __RPC_FAR * This,
            /* [in] */ styleFontVariant v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_fontVariant )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ styleFontVariant __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_backgroundColor )( 
            IStyle __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_backgroundColor )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_fontWeight )( 
            IStyle __RPC_FAR * This,
            /* [in] */ styleFontWeight v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_fontWeight )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ styleFontWeight __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_marginTop )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_marginRight )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_marginBottom )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_marginLeft )( 
            IStyle __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        END_INTERFACE
    } IStyleVtbl;

    interface IStyle
    {
        CONST_VTBL struct IStyleVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IStyle_put_backgroundImage(This,v)	\
    (This)->lpVtbl -> put_backgroundImage(This,v)

#define IStyle_get_backgroundImage(This,p)	\
    (This)->lpVtbl -> get_backgroundImage(This,p)

#define IStyle_put_color(This,v)	\
    (This)->lpVtbl -> put_color(This,v)

#define IStyle_get_color(This,p)	\
    (This)->lpVtbl -> get_color(This,p)

#define IStyle_put_textAlign(This,v)	\
    (This)->lpVtbl -> put_textAlign(This,v)

#define IStyle_get_textAlign(This,p)	\
    (This)->lpVtbl -> get_textAlign(This,p)

#define IStyle_put_textTransform(This,v)	\
    (This)->lpVtbl -> put_textTransform(This,v)

#define IStyle_get_textTransform(This,p)	\
    (This)->lpVtbl -> get_textTransform(This,p)

#define IStyle_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IStyle_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#define IStyle_get_top(This,p)	\
    (This)->lpVtbl -> get_top(This,p)

#define IStyle_get_left(This,p)	\
    (This)->lpVtbl -> get_left(This,p)

#define IStyle_get_layout(This,p)	\
    (This)->lpVtbl -> get_layout(This,p)

#define IStyle_get_lineHeight(This,p)	\
    (This)->lpVtbl -> get_lineHeight(This,p)

#define IStyle_get_letterSpacing(This,p)	\
    (This)->lpVtbl -> get_letterSpacing(This,p)

#define IStyle_put_dataRepeat(This,v)	\
    (This)->lpVtbl -> put_dataRepeat(This,v)

#define IStyle_get_dataRepeat(This,p)	\
    (This)->lpVtbl -> get_dataRepeat(This,p)

#define IStyle_put_overflow(This,v)	\
    (This)->lpVtbl -> put_overflow(This,v)

#define IStyle_get_overflow(This,p)	\
    (This)->lpVtbl -> get_overflow(This,p)

#define IStyle_get_paddingTop(This,p)	\
    (This)->lpVtbl -> get_paddingTop(This,p)

#define IStyle_get_paddingRight(This,p)	\
    (This)->lpVtbl -> get_paddingRight(This,p)

#define IStyle_get_paddingBottom(This,p)	\
    (This)->lpVtbl -> get_paddingBottom(This,p)

#define IStyle_get_paddingLeft(This,p)	\
    (This)->lpVtbl -> get_paddingLeft(This,p)

#define IStyle_put_clear(This,v)	\
    (This)->lpVtbl -> put_clear(This,v)

#define IStyle_get_clear(This,p)	\
    (This)->lpVtbl -> get_clear(This,p)

#define IStyle_put_fontSize(This,v)	\
    (This)->lpVtbl -> put_fontSize(This,v)

#define IStyle_get_fontSize(This,p)	\
    (This)->lpVtbl -> get_fontSize(This,p)

#define IStyle_put_fontFamily(This,v)	\
    (This)->lpVtbl -> put_fontFamily(This,v)

#define IStyle_get_fontFamily(This,p)	\
    (This)->lpVtbl -> get_fontFamily(This,p)

#define IStyle_put_textDecorationLineThrough(This,v)	\
    (This)->lpVtbl -> put_textDecorationLineThrough(This,v)

#define IStyle_get_textDecorationLineThrough(This,p)	\
    (This)->lpVtbl -> get_textDecorationLineThrough(This,p)

#define IStyle_put_textDecorationUnderline(This,v)	\
    (This)->lpVtbl -> put_textDecorationUnderline(This,v)

#define IStyle_get_textDecorationUnderline(This,p)	\
    (This)->lpVtbl -> get_textDecorationUnderline(This,p)

#define IStyle_put_textDecorationNone(This,v)	\
    (This)->lpVtbl -> put_textDecorationNone(This,v)

#define IStyle_get_textDecorationNone(This,p)	\
    (This)->lpVtbl -> get_textDecorationNone(This,p)

#define IStyle_put_fontStyle(This,v)	\
    (This)->lpVtbl -> put_fontStyle(This,v)

#define IStyle_get_fontStyle(This,p)	\
    (This)->lpVtbl -> get_fontStyle(This,p)

#define IStyle_put_fontVariant(This,v)	\
    (This)->lpVtbl -> put_fontVariant(This,v)

#define IStyle_get_fontVariant(This,p)	\
    (This)->lpVtbl -> get_fontVariant(This,p)

#define IStyle_put_backgroundColor(This,v)	\
    (This)->lpVtbl -> put_backgroundColor(This,v)

#define IStyle_get_backgroundColor(This,p)	\
    (This)->lpVtbl -> get_backgroundColor(This,p)

#define IStyle_put_fontWeight(This,v)	\
    (This)->lpVtbl -> put_fontWeight(This,v)

#define IStyle_get_fontWeight(This,p)	\
    (This)->lpVtbl -> get_fontWeight(This,p)

#define IStyle_get_marginTop(This,p)	\
    (This)->lpVtbl -> get_marginTop(This,p)

#define IStyle_get_marginRight(This,p)	\
    (This)->lpVtbl -> get_marginRight(This,p)

#define IStyle_get_marginBottom(This,p)	\
    (This)->lpVtbl -> get_marginBottom(This,p)

#define IStyle_get_marginLeft(This,p)	\
    (This)->lpVtbl -> get_marginLeft(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_backgroundImage_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IStyle_put_backgroundImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_backgroundImage_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IStyle_get_backgroundImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_color_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IStyle_put_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_color_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IStyle_get_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_textAlign_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ htmlBlockAlign v);


void __RPC_STUB IStyle_put_textAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_textAlign_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);


void __RPC_STUB IStyle_get_textAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_textTransform_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ styleTextTransform v);


void __RPC_STUB IStyle_put_textTransform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_textTransform_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ styleTextTransform __RPC_FAR *p);


void __RPC_STUB IStyle_get_textTransform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_height_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_width_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_top_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_top_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_left_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_left_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_layout_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ styleLayout __RPC_FAR *p);


void __RPC_STUB IStyle_get_layout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_lineHeight_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_lineHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_letterSpacing_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_letterSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_dataRepeat_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ styleDataRepeat v);


void __RPC_STUB IStyle_put_dataRepeat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_dataRepeat_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ styleDataRepeat __RPC_FAR *p);


void __RPC_STUB IStyle_get_dataRepeat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_overflow_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ styleOverflow v);


void __RPC_STUB IStyle_put_overflow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_overflow_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ styleOverflow __RPC_FAR *p);


void __RPC_STUB IStyle_get_overflow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_paddingTop_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_paddingTop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_paddingRight_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_paddingRight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_paddingBottom_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_paddingBottom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_paddingLeft_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_paddingLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_clear_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ htmlClear v);


void __RPC_STUB IStyle_put_clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_clear_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ htmlClear __RPC_FAR *p);


void __RPC_STUB IStyle_get_clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_fontSize_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IStyle_put_fontSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_fontSize_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ VARIANT __RPC_FAR *p);


void __RPC_STUB IStyle_get_fontSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_fontFamily_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IStyle_put_fontFamily_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_fontFamily_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IStyle_get_fontFamily_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_textDecorationLineThrough_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ styleTextDecorationLineThrough v);


void __RPC_STUB IStyle_put_textDecorationLineThrough_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_textDecorationLineThrough_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ styleTextDecorationLineThrough __RPC_FAR *p);


void __RPC_STUB IStyle_get_textDecorationLineThrough_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_textDecorationUnderline_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ styleTextDecorationUnderline v);


void __RPC_STUB IStyle_put_textDecorationUnderline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_textDecorationUnderline_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ styleTextDecorationUnderline __RPC_FAR *p);


void __RPC_STUB IStyle_get_textDecorationUnderline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_textDecorationNone_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ styleTextDecorationNone v);


void __RPC_STUB IStyle_put_textDecorationNone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_textDecorationNone_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ styleTextDecorationNone __RPC_FAR *p);


void __RPC_STUB IStyle_get_textDecorationNone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_fontStyle_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ styleFontStyle v);


void __RPC_STUB IStyle_put_fontStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_fontStyle_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ styleFontStyle __RPC_FAR *p);


void __RPC_STUB IStyle_get_fontStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_fontVariant_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ styleFontVariant v);


void __RPC_STUB IStyle_put_fontVariant_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_fontVariant_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ styleFontVariant __RPC_FAR *p);


void __RPC_STUB IStyle_get_fontVariant_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_backgroundColor_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IStyle_put_backgroundColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_backgroundColor_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IStyle_get_backgroundColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IStyle_put_fontWeight_Proxy( 
    IStyle __RPC_FAR * This,
    /* [in] */ styleFontWeight v);


void __RPC_STUB IStyle_put_fontWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_fontWeight_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ styleFontWeight __RPC_FAR *p);


void __RPC_STUB IStyle_get_fontWeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_marginTop_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_marginTop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_marginRight_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_marginRight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_marginBottom_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_marginBottom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IStyle_get_marginLeft_Proxy( 
    IStyle __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IStyle_get_marginLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IStyle_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_Style;

class Style;
#endif

#ifndef __IElement_INTERFACE_DEFINED__
#define __IElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IElement : public IDispatch
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_Class( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_Class( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_id( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_id( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_tagName( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_parentElement( 
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_count( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_style( 
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE scrollIntoView( 
            /* [in][optional] */ VARIANT_BOOL Start) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        END_INTERFACE
    } IElementVtbl;

    interface IElement
    {
        CONST_VTBL struct IElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IElement_put_Class_Proxy( 
    IElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IElement_put_Class_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IElement_get_Class_Proxy( 
    IElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IElement_get_Class_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IElement_put_id_Proxy( 
    IElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IElement_put_id_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IElement_get_id_Proxy( 
    IElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IElement_get_id_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IElement_get_tagName_Proxy( 
    IElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IElement_get_tagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IElement_get_parentElement_Proxy( 
    IElement __RPC_FAR * This,
    /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IElement_get_parentElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IElement_get_count_Proxy( 
    IElement __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IElement_get_count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IElement_get_style_Proxy( 
    IElement __RPC_FAR * This,
    /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IElement_get_style_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IElement_scrollIntoView_Proxy( 
    IElement __RPC_FAR * This,
    /* [in][optional] */ VARIANT_BOOL Start);


void __RPC_STUB IElement_scrollIntoView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IElement_INTERFACE_DEFINED__ */


#ifndef __ITxtRange_INTERFACE_DEFINED__
#define __ITxtRange_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ITxtRange
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ITxtRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ITxtRange : public IDispatch
    {
    public:
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_end( 
            /* [in] */ long v) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_end( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_start( 
            /* [in] */ long v) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_start( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_htmlText( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_htmlText( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE put_text( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_text( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE parentElement( 
            /* [in][defaultvalue] */ long Cp,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *Parent) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE commonParentElement( 
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *Parent) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE duplicate( 
            /* [out][retval] */ ITxtRange __RPC_FAR *__RPC_FAR *Duplicate) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE inRange( 
            /* [in] */ ITxtRange __RPC_FAR *Range,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *InRange) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE isEqual( 
            /* [in] */ ITxtRange __RPC_FAR *Range,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *IsEqual) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE scrollIntoView( 
            /* [in][defaultvalue] */ VARIANT_BOOL Start) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE collapse( 
            /* [in][defaultvalue] */ VARIANT_BOOL Start) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE expand( 
            /* [in] */ htmlUnit Unit,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *Success) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE move( 
            /* [in] */ htmlUnit Unit,
            /* [in][defaultvalue] */ long Count,
            /* [out][retval][optional] */ long __RPC_FAR *ActualCount) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE moveStart( 
            /* [in] */ htmlUnit Unit,
            /* [in][defaultvalue] */ long Count,
            /* [out][retval] */ long __RPC_FAR *ActualCount) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE moveEnd( 
            /* [in] */ htmlUnit Unit,
            /* [in][defaultvalue] */ long Count,
            /* [out][retval] */ long __RPC_FAR *ActualCount) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setRange( 
            /* [in] */ long Start,
            /* [in] */ long End) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE execCommand( 
            /* [in] */ long cmdID,
            /* [in][optional] */ VARIANT value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryStatus( 
            /* [in] */ long cmdID,
            /* [out][retval] */ VARIANT __RPC_FAR *Value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE select( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE isEmbed( 
            /* [in][defaultvalue] */ long Cp,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *IsEmbed) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITxtRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ITxtRange __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ITxtRange __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ITxtRange __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_end )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_end )( 
            ITxtRange __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_start )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_start )( 
            ITxtRange __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_htmlText )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_htmlText )( 
            ITxtRange __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_text )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_text )( 
            ITxtRange __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *parentElement )( 
            ITxtRange __RPC_FAR * This,
            /* [in][defaultvalue] */ long Cp,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *Parent);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *commonParentElement )( 
            ITxtRange __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *Parent);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *duplicate )( 
            ITxtRange __RPC_FAR * This,
            /* [out][retval] */ ITxtRange __RPC_FAR *__RPC_FAR *Duplicate);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *inRange )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ ITxtRange __RPC_FAR *Range,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *InRange);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *isEqual )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ ITxtRange __RPC_FAR *Range,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *IsEqual);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ITxtRange __RPC_FAR * This,
            /* [in][defaultvalue] */ VARIANT_BOOL Start);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *collapse )( 
            ITxtRange __RPC_FAR * This,
            /* [in][defaultvalue] */ VARIANT_BOOL Start);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *expand )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ htmlUnit Unit,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *Success);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *move )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ htmlUnit Unit,
            /* [in][defaultvalue] */ long Count,
            /* [out][retval][optional] */ long __RPC_FAR *ActualCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *moveStart )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ htmlUnit Unit,
            /* [in][defaultvalue] */ long Count,
            /* [out][retval] */ long __RPC_FAR *ActualCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *moveEnd )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ htmlUnit Unit,
            /* [in][defaultvalue] */ long Count,
            /* [out][retval] */ long __RPC_FAR *ActualCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setRange )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ long Start,
            /* [in] */ long End);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *execCommand )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ long cmdID,
            /* [in][optional] */ VARIANT value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *queryStatus )( 
            ITxtRange __RPC_FAR * This,
            /* [in] */ long cmdID,
            /* [out][retval] */ VARIANT __RPC_FAR *Value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *select )( 
            ITxtRange __RPC_FAR * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *isEmbed )( 
            ITxtRange __RPC_FAR * This,
            /* [in][defaultvalue] */ long Cp,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *IsEmbed);
        
        END_INTERFACE
    } ITxtRangeVtbl;

    interface ITxtRange
    {
        CONST_VTBL struct ITxtRangeVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITxtRange_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ITxtRange_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ITxtRange_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ITxtRange_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ITxtRange_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ITxtRange_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ITxtRange_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ITxtRange_put_end(This,v)	\
    (This)->lpVtbl -> put_end(This,v)

#define ITxtRange_get_end(This,p)	\
    (This)->lpVtbl -> get_end(This,p)

#define ITxtRange_put_start(This,v)	\
    (This)->lpVtbl -> put_start(This,v)

#define ITxtRange_get_start(This,p)	\
    (This)->lpVtbl -> get_start(This,p)

#define ITxtRange_put_htmlText(This,v)	\
    (This)->lpVtbl -> put_htmlText(This,v)

#define ITxtRange_get_htmlText(This,p)	\
    (This)->lpVtbl -> get_htmlText(This,p)

#define ITxtRange_put_text(This,v)	\
    (This)->lpVtbl -> put_text(This,v)

#define ITxtRange_get_text(This,p)	\
    (This)->lpVtbl -> get_text(This,p)

#define ITxtRange_parentElement(This,Cp,Parent)	\
    (This)->lpVtbl -> parentElement(This,Cp,Parent)

#define ITxtRange_commonParentElement(This,Parent)	\
    (This)->lpVtbl -> commonParentElement(This,Parent)

#define ITxtRange_duplicate(This,Duplicate)	\
    (This)->lpVtbl -> duplicate(This,Duplicate)

#define ITxtRange_inRange(This,Range,InRange)	\
    (This)->lpVtbl -> inRange(This,Range,InRange)

#define ITxtRange_isEqual(This,Range,IsEqual)	\
    (This)->lpVtbl -> isEqual(This,Range,IsEqual)

#define ITxtRange_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)

#define ITxtRange_collapse(This,Start)	\
    (This)->lpVtbl -> collapse(This,Start)

#define ITxtRange_expand(This,Unit,Success)	\
    (This)->lpVtbl -> expand(This,Unit,Success)

#define ITxtRange_move(This,Unit,Count,ActualCount)	\
    (This)->lpVtbl -> move(This,Unit,Count,ActualCount)

#define ITxtRange_moveStart(This,Unit,Count,ActualCount)	\
    (This)->lpVtbl -> moveStart(This,Unit,Count,ActualCount)

#define ITxtRange_moveEnd(This,Unit,Count,ActualCount)	\
    (This)->lpVtbl -> moveEnd(This,Unit,Count,ActualCount)

#define ITxtRange_setRange(This,Start,End)	\
    (This)->lpVtbl -> setRange(This,Start,End)

#define ITxtRange_execCommand(This,cmdID,value)	\
    (This)->lpVtbl -> execCommand(This,cmdID,value)

#define ITxtRange_queryStatus(This,cmdID,Value)	\
    (This)->lpVtbl -> queryStatus(This,cmdID,Value)

#define ITxtRange_select(This)	\
    (This)->lpVtbl -> select(This)

#define ITxtRange_isEmbed(This,Cp,IsEmbed)	\
    (This)->lpVtbl -> isEmbed(This,Cp,IsEmbed)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE ITxtRange_put_end_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB ITxtRange_put_end_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE ITxtRange_get_end_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB ITxtRange_get_end_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE ITxtRange_put_start_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB ITxtRange_put_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE ITxtRange_get_start_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB ITxtRange_get_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE ITxtRange_put_htmlText_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITxtRange_put_htmlText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE ITxtRange_get_htmlText_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITxtRange_get_htmlText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propput] */ HRESULT STDMETHODCALLTYPE ITxtRange_put_text_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITxtRange_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE ITxtRange_get_text_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITxtRange_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_parentElement_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in][defaultvalue] */ long Cp,
    /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *Parent);


void __RPC_STUB ITxtRange_parentElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_commonParentElement_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *Parent);


void __RPC_STUB ITxtRange_commonParentElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_duplicate_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [out][retval] */ ITxtRange __RPC_FAR *__RPC_FAR *Duplicate);


void __RPC_STUB ITxtRange_duplicate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_inRange_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in] */ ITxtRange __RPC_FAR *Range,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *InRange);


void __RPC_STUB ITxtRange_inRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_isEqual_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in] */ ITxtRange __RPC_FAR *Range,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *IsEqual);


void __RPC_STUB ITxtRange_isEqual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_scrollIntoView_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in][defaultvalue] */ VARIANT_BOOL Start);


void __RPC_STUB ITxtRange_scrollIntoView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_collapse_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in][defaultvalue] */ VARIANT_BOOL Start);


void __RPC_STUB ITxtRange_collapse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_expand_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in] */ htmlUnit Unit,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *Success);


void __RPC_STUB ITxtRange_expand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_move_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in] */ htmlUnit Unit,
    /* [in][defaultvalue] */ long Count,
    /* [out][retval][optional] */ long __RPC_FAR *ActualCount);


void __RPC_STUB ITxtRange_move_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_moveStart_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in] */ htmlUnit Unit,
    /* [in][defaultvalue] */ long Count,
    /* [out][retval] */ long __RPC_FAR *ActualCount);


void __RPC_STUB ITxtRange_moveStart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_moveEnd_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in] */ htmlUnit Unit,
    /* [in][defaultvalue] */ long Count,
    /* [out][retval] */ long __RPC_FAR *ActualCount);


void __RPC_STUB ITxtRange_moveEnd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_setRange_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in] */ long Start,
    /* [in] */ long End);


void __RPC_STUB ITxtRange_setRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_execCommand_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in] */ long cmdID,
    /* [in][optional] */ VARIANT value);


void __RPC_STUB ITxtRange_execCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_queryStatus_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in] */ long cmdID,
    /* [out][retval] */ VARIANT __RPC_FAR *Value);


void __RPC_STUB ITxtRange_queryStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_select_Proxy( 
    ITxtRange __RPC_FAR * This);


void __RPC_STUB ITxtRange_select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtRange_isEmbed_Proxy( 
    ITxtRange __RPC_FAR * This,
    /* [in][defaultvalue] */ long Cp,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *IsEmbed);


void __RPC_STUB ITxtRange_isEmbed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ITxtRange_INTERFACE_DEFINED__ */


#ifndef __ControlElementEvents_DISPINTERFACE_DEFINED__
#define __ControlElementEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: ControlElementEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_ControlElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface ControlElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ControlElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ControlElementEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ControlElementEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ControlElementEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ControlElementEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ControlElementEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ControlElementEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ControlElementEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } ControlElementEventsVtbl;

    interface ControlElementEvents
    {
        CONST_VTBL struct ControlElementEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ControlElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ControlElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ControlElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ControlElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ControlElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ControlElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ControlElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ControlElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IControlElement_INTERFACE_DEFINED__
#define __IControlElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IControlElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IControlElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IControlElement : public IElement
    {
    public:
        virtual /* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_title( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_title( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_visible( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_visible( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_tabIndex( 
            /* [in] */ short v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_tabIndex( 
            /* [out][retval] */ short __RPC_FAR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setFocus( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE zOrder( 
            /* [in][optional][defaultvalue] */ fmZOrder zPosition) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_height( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IControlElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IControlElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IControlElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IControlElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IControlElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IControlElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IControlElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IControlElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IControlElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IControlElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IControlElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IControlElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IControlElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IControlElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IControlElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IControlElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IControlElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IControlElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IControlElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IControlElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IControlElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IControlElement __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IControlElement __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IControlElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IControlElement __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IControlElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IControlElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        END_INTERFACE
    } IControlElementVtbl;

    interface IControlElement
    {
        CONST_VTBL struct IControlElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IControlElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IControlElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IControlElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IControlElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IControlElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IControlElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IControlElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IControlElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IControlElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IControlElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IControlElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IControlElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IControlElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IControlElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IControlElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IControlElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IControlElement_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IControlElement_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IControlElement_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IControlElement_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IControlElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IControlElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IControlElement_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IControlElement_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IControlElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IControlElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IControlElement_put_title_Proxy( 
    IControlElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IControlElement_put_title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IControlElement_get_title_Proxy( 
    IControlElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IControlElement_get_title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IControlElement_put_visible_Proxy( 
    IControlElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IControlElement_put_visible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IControlElement_get_visible_Proxy( 
    IControlElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IControlElement_get_visible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IControlElement_put_tabIndex_Proxy( 
    IControlElement __RPC_FAR * This,
    /* [in] */ short v);


void __RPC_STUB IControlElement_put_tabIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IControlElement_get_tabIndex_Proxy( 
    IControlElement __RPC_FAR * This,
    /* [out][retval] */ short __RPC_FAR *p);


void __RPC_STUB IControlElement_get_tabIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IControlElement_setFocus_Proxy( 
    IControlElement __RPC_FAR * This);


void __RPC_STUB IControlElement_setFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IControlElement_zOrder_Proxy( 
    IControlElement __RPC_FAR * This,
    /* [in][optional][defaultvalue] */ fmZOrder zPosition);


void __RPC_STUB IControlElement_zOrder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IControlElement_get_height_Proxy( 
    IControlElement __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IControlElement_get_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IControlElement_get_width_Proxy( 
    IControlElement __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IControlElement_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IControlElement_INTERFACE_DEFINED__ */


#ifndef __IEnumControl_INTERFACE_DEFINED__
#define __IEnumControl_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IEnumControl
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IEnumControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IEnumControl : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE next( 
            /* [in] */ ULONG celt,
            /* [out][in] */ IControlElement __RPC_FAR *__RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE clone( 
            /* [out] */ IEnumControl __RPC_FAR *__RPC_FAR *ppenum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IEnumControl __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IEnumControl __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IEnumControl __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IEnumControl __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IEnumControl __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IEnumControl __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IEnumControl __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *next )( 
            IEnumControl __RPC_FAR * This,
            /* [in] */ ULONG celt,
            /* [out][in] */ IControlElement __RPC_FAR *__RPC_FAR *rgelt,
            /* [out] */ ULONG __RPC_FAR *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *skip )( 
            IEnumControl __RPC_FAR * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *reset )( 
            IEnumControl __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *clone )( 
            IEnumControl __RPC_FAR * This,
            /* [out] */ IEnumControl __RPC_FAR *__RPC_FAR *ppenum);
        
        END_INTERFACE
    } IEnumControlVtbl;

    interface IEnumControl
    {
        CONST_VTBL struct IEnumControlVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumControl_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumControl_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumControl_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumControl_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IEnumControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IEnumControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IEnumControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IEnumControl_next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> next(This,celt,rgelt,pceltFetched)

#define IEnumControl_skip(This,celt)	\
    (This)->lpVtbl -> skip(This,celt)

#define IEnumControl_reset(This)	\
    (This)->lpVtbl -> reset(This)

#define IEnumControl_clone(This,ppenum)	\
    (This)->lpVtbl -> clone(This,ppenum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumControl_next_Proxy( 
    IEnumControl __RPC_FAR * This,
    /* [in] */ ULONG celt,
    /* [out][in] */ IControlElement __RPC_FAR *__RPC_FAR *rgelt,
    /* [out] */ ULONG __RPC_FAR *pceltFetched);


void __RPC_STUB IEnumControl_next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumControl_skip_Proxy( 
    IEnumControl __RPC_FAR * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumControl_skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumControl_reset_Proxy( 
    IEnumControl __RPC_FAR * This);


void __RPC_STUB IEnumControl_reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumControl_clone_Proxy( 
    IEnumControl __RPC_FAR * This,
    /* [out] */ IEnumControl __RPC_FAR *__RPC_FAR *ppenum);


void __RPC_STUB IEnumControl_clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumControl_INTERFACE_DEFINED__ */


#ifndef __ITextElement_INTERFACE_DEFINED__
#define __ITextElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ITextElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ITextElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ITextElement : public IElement
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct ITextElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ITextElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ITextElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ITextElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ITextElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ITextElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ITextElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ITextElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ITextElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ITextElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ITextElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ITextElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ITextElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ITextElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ITextElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ITextElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ITextElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        END_INTERFACE
    } ITextElementVtbl;

    interface ITextElement
    {
        CONST_VTBL struct ITextElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ITextElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ITextElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ITextElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ITextElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ITextElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ITextElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ITextElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ITextElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ITextElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ITextElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ITextElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ITextElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ITextElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ITextElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ITextElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_TextElement;

class TextElement;
#endif

#ifndef __TextEditEvents_DISPINTERFACE_DEFINED__
#define __TextEditEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: TextEditEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_TextEditEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface TextEditEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct TextEditEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            TextEditEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            TextEditEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            TextEditEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            TextEditEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            TextEditEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            TextEditEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            TextEditEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } TextEditEventsVtbl;

    interface TextEditEvents
    {
        CONST_VTBL struct TextEditEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextEditEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextEditEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextEditEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextEditEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextEditEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextEditEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextEditEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __TextEditEvents_DISPINTERFACE_DEFINED__ */


#ifndef __ITxtEdit_INTERFACE_DEFINED__
#define __ITxtEdit_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ITxtEdit
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ITxtEdit;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ITxtEdit : public IControlElement
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createTextRange( 
            /* [in][defaultvalue] */ long begin,
            /* [in][defaultvalue] */ long end,
            /* [out][retval] */ ITxtRange __RPC_FAR *__RPC_FAR *range) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createControlRange( 
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *range) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITxtEditVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ITxtEdit __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ITxtEdit __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ITxtEdit __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ITxtEdit __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ITxtEdit __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ITxtEdit __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ITxtEdit __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ITxtEdit __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ITxtEdit __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ITxtEdit __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ITxtEdit __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ITxtEdit __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ITxtEdit __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ITxtEdit __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ITxtEdit __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ITxtEdit __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            ITxtEdit __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            ITxtEdit __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            ITxtEdit __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            ITxtEdit __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            ITxtEdit __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            ITxtEdit __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            ITxtEdit __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            ITxtEdit __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            ITxtEdit __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            ITxtEdit __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *createTextRange )( 
            ITxtEdit __RPC_FAR * This,
            /* [in][defaultvalue] */ long begin,
            /* [in][defaultvalue] */ long end,
            /* [out][retval] */ ITxtRange __RPC_FAR *__RPC_FAR *range);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *createControlRange )( 
            ITxtEdit __RPC_FAR * This,
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *range);
        
        END_INTERFACE
    } ITxtEditVtbl;

    interface ITxtEdit
    {
        CONST_VTBL struct ITxtEditVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITxtEdit_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ITxtEdit_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ITxtEdit_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ITxtEdit_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ITxtEdit_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ITxtEdit_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ITxtEdit_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ITxtEdit_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ITxtEdit_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ITxtEdit_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ITxtEdit_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ITxtEdit_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ITxtEdit_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ITxtEdit_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ITxtEdit_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ITxtEdit_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ITxtEdit_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define ITxtEdit_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define ITxtEdit_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define ITxtEdit_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define ITxtEdit_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define ITxtEdit_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define ITxtEdit_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define ITxtEdit_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define ITxtEdit_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define ITxtEdit_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define ITxtEdit_createTextRange(This,begin,end,range)	\
    (This)->lpVtbl -> createTextRange(This,begin,end,range)

#define ITxtEdit_createControlRange(This,range)	\
    (This)->lpVtbl -> createControlRange(This,range)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE ITxtEdit_createTextRange_Proxy( 
    ITxtEdit __RPC_FAR * This,
    /* [in][defaultvalue] */ long begin,
    /* [in][defaultvalue] */ long end,
    /* [out][retval] */ ITxtRange __RPC_FAR *__RPC_FAR *range);


void __RPC_STUB ITxtEdit_createTextRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITxtEdit_createControlRange_Proxy( 
    ITxtEdit __RPC_FAR * This,
    /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *range);


void __RPC_STUB ITxtEdit_createControlRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ITxtEdit_INTERFACE_DEFINED__ */


#ifndef __IAutoTxtSiteRange_INTERFACE_DEFINED__
#define __IAutoTxtSiteRange_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IAutoTxtSiteRange
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IAutoTxtSiteRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IAutoTxtSiteRange : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE execCommand( 
            /* [in] */ long cmdID,
            /* [in][optional] */ VARIANT value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandStatus( 
            /* [in] */ long cmdID,
            /* [out][retval] */ VARIANT __RPC_FAR *Value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE select( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE add( 
            /* [in] */ IControlElement __RPC_FAR *item) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE remove( 
            /* [in] */ long index) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in][optional] */ long index,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *pdisp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE scrollIntoView( 
            /* [in] */ VARIANT_BOOL Start) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_count( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAutoTxtSiteRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IAutoTxtSiteRange __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IAutoTxtSiteRange __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IAutoTxtSiteRange __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IAutoTxtSiteRange __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IAutoTxtSiteRange __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IAutoTxtSiteRange __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IAutoTxtSiteRange __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *execCommand )( 
            IAutoTxtSiteRange __RPC_FAR * This,
            /* [in] */ long cmdID,
            /* [in][optional] */ VARIANT value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *queryCommandStatus )( 
            IAutoTxtSiteRange __RPC_FAR * This,
            /* [in] */ long cmdID,
            /* [out][retval] */ VARIANT __RPC_FAR *Value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *select )( 
            IAutoTxtSiteRange __RPC_FAR * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *add )( 
            IAutoTxtSiteRange __RPC_FAR * This,
            /* [in] */ IControlElement __RPC_FAR *item);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *remove )( 
            IAutoTxtSiteRange __RPC_FAR * This,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *item )( 
            IAutoTxtSiteRange __RPC_FAR * This,
            /* [in][optional] */ long index,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *pdisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IAutoTxtSiteRange __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL Start);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IAutoTxtSiteRange __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_length )( 
            IAutoTxtSiteRange __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        END_INTERFACE
    } IAutoTxtSiteRangeVtbl;

    interface IAutoTxtSiteRange
    {
        CONST_VTBL struct IAutoTxtSiteRangeVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAutoTxtSiteRange_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAutoTxtSiteRange_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAutoTxtSiteRange_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAutoTxtSiteRange_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IAutoTxtSiteRange_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IAutoTxtSiteRange_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IAutoTxtSiteRange_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IAutoTxtSiteRange_execCommand(This,cmdID,value)	\
    (This)->lpVtbl -> execCommand(This,cmdID,value)

#define IAutoTxtSiteRange_queryCommandStatus(This,cmdID,Value)	\
    (This)->lpVtbl -> queryCommandStatus(This,cmdID,Value)

#define IAutoTxtSiteRange_select(This)	\
    (This)->lpVtbl -> select(This)

#define IAutoTxtSiteRange_add(This,item)	\
    (This)->lpVtbl -> add(This,item)

#define IAutoTxtSiteRange_remove(This,index)	\
    (This)->lpVtbl -> remove(This,index)

#define IAutoTxtSiteRange_item(This,index,pdisp)	\
    (This)->lpVtbl -> item(This,index,pdisp)

#define IAutoTxtSiteRange_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)

#define IAutoTxtSiteRange_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IAutoTxtSiteRange_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IAutoTxtSiteRange_execCommand_Proxy( 
    IAutoTxtSiteRange __RPC_FAR * This,
    /* [in] */ long cmdID,
    /* [in][optional] */ VARIANT value);


void __RPC_STUB IAutoTxtSiteRange_execCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IAutoTxtSiteRange_queryCommandStatus_Proxy( 
    IAutoTxtSiteRange __RPC_FAR * This,
    /* [in] */ long cmdID,
    /* [out][retval] */ VARIANT __RPC_FAR *Value);


void __RPC_STUB IAutoTxtSiteRange_queryCommandStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IAutoTxtSiteRange_select_Proxy( 
    IAutoTxtSiteRange __RPC_FAR * This);


void __RPC_STUB IAutoTxtSiteRange_select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IAutoTxtSiteRange_add_Proxy( 
    IAutoTxtSiteRange __RPC_FAR * This,
    /* [in] */ IControlElement __RPC_FAR *item);


void __RPC_STUB IAutoTxtSiteRange_add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IAutoTxtSiteRange_remove_Proxy( 
    IAutoTxtSiteRange __RPC_FAR * This,
    /* [in] */ long index);


void __RPC_STUB IAutoTxtSiteRange_remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IAutoTxtSiteRange_item_Proxy( 
    IAutoTxtSiteRange __RPC_FAR * This,
    /* [in][optional] */ long index,
    /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *pdisp);


void __RPC_STUB IAutoTxtSiteRange_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IAutoTxtSiteRange_scrollIntoView_Proxy( 
    IAutoTxtSiteRange __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL Start);


void __RPC_STUB IAutoTxtSiteRange_scrollIntoView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAutoTxtSiteRange_get_count_Proxy( 
    IAutoTxtSiteRange __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IAutoTxtSiteRange_get_count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAutoTxtSiteRange_get_length_Proxy( 
    IAutoTxtSiteRange __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IAutoTxtSiteRange_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAutoTxtSiteRange_INTERFACE_DEFINED__ */


#ifndef __IAuto2DSiteRange_INTERFACE_DEFINED__
#define __IAuto2DSiteRange_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IAuto2DSiteRange
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IAuto2DSiteRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IAuto2DSiteRange : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE execCommand( 
            /* [in] */ long cmdID,
            /* [in][optional] */ VARIANT value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE queryCommandStatus( 
            /* [in] */ long cmdID,
            /* [out][retval] */ VARIANT __RPC_FAR *Value) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE select( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE add( 
            /* [in] */ IControlElement __RPC_FAR *item) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE remove( 
            /* [in] */ long index) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in][optional] */ long index,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *pdisp) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_count( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAuto2DSiteRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IAuto2DSiteRange __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IAuto2DSiteRange __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IAuto2DSiteRange __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IAuto2DSiteRange __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IAuto2DSiteRange __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IAuto2DSiteRange __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IAuto2DSiteRange __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *execCommand )( 
            IAuto2DSiteRange __RPC_FAR * This,
            /* [in] */ long cmdID,
            /* [in][optional] */ VARIANT value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *queryCommandStatus )( 
            IAuto2DSiteRange __RPC_FAR * This,
            /* [in] */ long cmdID,
            /* [out][retval] */ VARIANT __RPC_FAR *Value);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *select )( 
            IAuto2DSiteRange __RPC_FAR * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *add )( 
            IAuto2DSiteRange __RPC_FAR * This,
            /* [in] */ IControlElement __RPC_FAR *item);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *remove )( 
            IAuto2DSiteRange __RPC_FAR * This,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *item )( 
            IAuto2DSiteRange __RPC_FAR * This,
            /* [in][optional] */ long index,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *pdisp);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IAuto2DSiteRange __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_length )( 
            IAuto2DSiteRange __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        END_INTERFACE
    } IAuto2DSiteRangeVtbl;

    interface IAuto2DSiteRange
    {
        CONST_VTBL struct IAuto2DSiteRangeVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAuto2DSiteRange_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAuto2DSiteRange_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAuto2DSiteRange_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAuto2DSiteRange_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IAuto2DSiteRange_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IAuto2DSiteRange_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IAuto2DSiteRange_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IAuto2DSiteRange_execCommand(This,cmdID,value)	\
    (This)->lpVtbl -> execCommand(This,cmdID,value)

#define IAuto2DSiteRange_queryCommandStatus(This,cmdID,Value)	\
    (This)->lpVtbl -> queryCommandStatus(This,cmdID,Value)

#define IAuto2DSiteRange_select(This)	\
    (This)->lpVtbl -> select(This)

#define IAuto2DSiteRange_add(This,item)	\
    (This)->lpVtbl -> add(This,item)

#define IAuto2DSiteRange_remove(This,index)	\
    (This)->lpVtbl -> remove(This,index)

#define IAuto2DSiteRange_item(This,index,pdisp)	\
    (This)->lpVtbl -> item(This,index,pdisp)

#define IAuto2DSiteRange_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IAuto2DSiteRange_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IAuto2DSiteRange_execCommand_Proxy( 
    IAuto2DSiteRange __RPC_FAR * This,
    /* [in] */ long cmdID,
    /* [in][optional] */ VARIANT value);


void __RPC_STUB IAuto2DSiteRange_execCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IAuto2DSiteRange_queryCommandStatus_Proxy( 
    IAuto2DSiteRange __RPC_FAR * This,
    /* [in] */ long cmdID,
    /* [out][retval] */ VARIANT __RPC_FAR *Value);


void __RPC_STUB IAuto2DSiteRange_queryCommandStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IAuto2DSiteRange_select_Proxy( 
    IAuto2DSiteRange __RPC_FAR * This);


void __RPC_STUB IAuto2DSiteRange_select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IAuto2DSiteRange_add_Proxy( 
    IAuto2DSiteRange __RPC_FAR * This,
    /* [in] */ IControlElement __RPC_FAR *item);


void __RPC_STUB IAuto2DSiteRange_add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IAuto2DSiteRange_remove_Proxy( 
    IAuto2DSiteRange __RPC_FAR * This,
    /* [in] */ long index);


void __RPC_STUB IAuto2DSiteRange_remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IAuto2DSiteRange_item_Proxy( 
    IAuto2DSiteRange __RPC_FAR * This,
    /* [in][optional] */ long index,
    /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *pdisp);


void __RPC_STUB IAuto2DSiteRange_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAuto2DSiteRange_get_count_Proxy( 
    IAuto2DSiteRange __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IAuto2DSiteRange_get_count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAuto2DSiteRange_get_length_Proxy( 
    IAuto2DSiteRange __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IAuto2DSiteRange_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAuto2DSiteRange_INTERFACE_DEFINED__ */


#ifndef __DivFixedElementEvents_DISPINTERFACE_DEFINED__
#define __DivFixedElementEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: DivFixedElementEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_DivFixedElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface DivFixedElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DivFixedElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            DivFixedElementEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            DivFixedElementEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            DivFixedElementEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            DivFixedElementEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            DivFixedElementEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            DivFixedElementEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            DivFixedElementEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } DivFixedElementEventsVtbl;

    interface DivFixedElementEvents
    {
        CONST_VTBL struct DivFixedElementEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DivFixedElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DivFixedElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DivFixedElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DivFixedElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DivFixedElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DivFixedElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DivFixedElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DivFixedElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IDivFixed_INTERFACE_DEFINED__
#define __IDivFixed_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IDivFixed
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IDivFixed;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IDivFixed : public IControlElement
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE createControlRange( 
            /* [out][retval] */ IAuto2DSiteRange __RPC_FAR *__RPC_FAR *pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDivFixedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDivFixed __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDivFixed __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDivFixed __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IDivFixed __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IDivFixed __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IDivFixed __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IDivFixed __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IDivFixed __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IDivFixed __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IDivFixed __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IDivFixed __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IDivFixed __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IDivFixed __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IDivFixed __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IDivFixed __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IDivFixed __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IDivFixed __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IDivFixed __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IDivFixed __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IDivFixed __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IDivFixed __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IDivFixed __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IDivFixed __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IDivFixed __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IDivFixed __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IDivFixed __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *createControlRange )( 
            IDivFixed __RPC_FAR * This,
            /* [out][retval] */ IAuto2DSiteRange __RPC_FAR *__RPC_FAR *pdisp);
        
        END_INTERFACE
    } IDivFixedVtbl;

    interface IDivFixed
    {
        CONST_VTBL struct IDivFixedVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDivFixed_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDivFixed_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDivFixed_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDivFixed_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDivFixed_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDivFixed_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDivFixed_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDivFixed_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IDivFixed_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IDivFixed_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IDivFixed_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IDivFixed_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IDivFixed_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IDivFixed_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IDivFixed_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IDivFixed_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IDivFixed_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IDivFixed_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IDivFixed_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IDivFixed_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IDivFixed_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IDivFixed_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IDivFixed_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IDivFixed_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IDivFixed_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IDivFixed_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IDivFixed_createControlRange(This,pdisp)	\
    (This)->lpVtbl -> createControlRange(This,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDivFixed_createControlRange_Proxy( 
    IDivFixed __RPC_FAR * This,
    /* [out][retval] */ IAuto2DSiteRange __RPC_FAR *__RPC_FAR *pdisp);


void __RPC_STUB IDivFixed_createControlRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDivFixed_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_DivFixed;

class DivFixed;
#endif

#ifndef __ImgEvents_DISPINTERFACE_DEFINED__
#define __ImgEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: ImgEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_ImgEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface ImgEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ImgEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ImgEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ImgEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ImgEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ImgEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ImgEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ImgEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ImgEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } ImgEventsVtbl;

    interface ImgEvents
    {
        CONST_VTBL struct ImgEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ImgEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ImgEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ImgEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ImgEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ImgEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ImgEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ImgEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ImgEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IImgElement_INTERFACE_DEFINED__
#define __IImgElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IImgElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IImgElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IImgElement : public IControlElement
    {
    public:
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_border( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_vSpace( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_vSpace( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_hSpace( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_hSpace( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_alt( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_alt( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_isMap( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_isMap( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_src( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_src( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_lowSrc( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_lowSrc( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_useMap( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_useMap( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_vrml( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_vrml( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_dynSrc( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_dynSrc( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_readyState( 
            /* [out][retval] */ htmlReadyState __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_complete( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_loop( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_loop( 
            /* [out][retval] */ VARIANT __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlControlAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onLoad( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onError( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onError( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onAbort( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onAbort( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_language( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_language( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IImgElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IImgElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IImgElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IImgElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IImgElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IImgElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IImgElement __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_border )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_vSpace )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_vSpace )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_hSpace )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_hSpace )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_alt )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_alt )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_isMap )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_isMap )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_src )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_src )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_lowSrc )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_lowSrc )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_useMap )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_useMap )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_vrml )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_vrml )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_dynSrc )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_dynSrc )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_readyState )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ htmlReadyState __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_complete )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_loop )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_loop )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ htmlControlAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onLoad )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onError )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onError )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onAbort )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onAbort )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_language )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_language )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IImgElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IImgElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IImgElementVtbl;

    interface IImgElement
    {
        CONST_VTBL struct IImgElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IImgElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IImgElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IImgElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IImgElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IImgElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IImgElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IImgElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IImgElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IImgElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IImgElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IImgElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IImgElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IImgElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IImgElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IImgElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IImgElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IImgElement_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IImgElement_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IImgElement_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IImgElement_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IImgElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IImgElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IImgElement_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IImgElement_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IImgElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IImgElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IImgElement_get_border(This,p)	\
    (This)->lpVtbl -> get_border(This,p)

#define IImgElement_put_vSpace(This,v)	\
    (This)->lpVtbl -> put_vSpace(This,v)

#define IImgElement_get_vSpace(This,p)	\
    (This)->lpVtbl -> get_vSpace(This,p)

#define IImgElement_put_hSpace(This,v)	\
    (This)->lpVtbl -> put_hSpace(This,v)

#define IImgElement_get_hSpace(This,p)	\
    (This)->lpVtbl -> get_hSpace(This,p)

#define IImgElement_put_alt(This,v)	\
    (This)->lpVtbl -> put_alt(This,v)

#define IImgElement_get_alt(This,p)	\
    (This)->lpVtbl -> get_alt(This,p)

#define IImgElement_put_isMap(This,v)	\
    (This)->lpVtbl -> put_isMap(This,v)

#define IImgElement_get_isMap(This,p)	\
    (This)->lpVtbl -> get_isMap(This,p)

#define IImgElement_put_src(This,v)	\
    (This)->lpVtbl -> put_src(This,v)

#define IImgElement_get_src(This,p)	\
    (This)->lpVtbl -> get_src(This,p)

#define IImgElement_put_lowSrc(This,v)	\
    (This)->lpVtbl -> put_lowSrc(This,v)

#define IImgElement_get_lowSrc(This,p)	\
    (This)->lpVtbl -> get_lowSrc(This,p)

#define IImgElement_put_useMap(This,v)	\
    (This)->lpVtbl -> put_useMap(This,v)

#define IImgElement_get_useMap(This,p)	\
    (This)->lpVtbl -> get_useMap(This,p)

#define IImgElement_put_vrml(This,v)	\
    (This)->lpVtbl -> put_vrml(This,v)

#define IImgElement_get_vrml(This,p)	\
    (This)->lpVtbl -> get_vrml(This,p)

#define IImgElement_put_dynSrc(This,v)	\
    (This)->lpVtbl -> put_dynSrc(This,v)

#define IImgElement_get_dynSrc(This,p)	\
    (This)->lpVtbl -> get_dynSrc(This,p)

#define IImgElement_get_readyState(This,p)	\
    (This)->lpVtbl -> get_readyState(This,p)

#define IImgElement_get_complete(This,p)	\
    (This)->lpVtbl -> get_complete(This,p)

#define IImgElement_put_loop(This,v)	\
    (This)->lpVtbl -> put_loop(This,v)

#define IImgElement_get_loop(This,p)	\
    (This)->lpVtbl -> get_loop(This,p)

#define IImgElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IImgElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IImgElement_get_onLoad(This,p)	\
    (This)->lpVtbl -> get_onLoad(This,p)

#define IImgElement_put_onError(This,v)	\
    (This)->lpVtbl -> put_onError(This,v)

#define IImgElement_get_onError(This,p)	\
    (This)->lpVtbl -> get_onError(This,p)

#define IImgElement_put_onAbort(This,v)	\
    (This)->lpVtbl -> put_onAbort(This,v)

#define IImgElement_get_onAbort(This,p)	\
    (This)->lpVtbl -> get_onAbort(This,p)

#define IImgElement_put_language(This,v)	\
    (This)->lpVtbl -> put_language(This,v)

#define IImgElement_get_language(This,p)	\
    (This)->lpVtbl -> get_language(This,p)

#define IImgElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IImgElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_border_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IImgElement_get_border_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_vSpace_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IImgElement_put_vSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_vSpace_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IImgElement_get_vSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_hSpace_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IImgElement_put_hSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_hSpace_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IImgElement_get_hSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_alt_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IImgElement_put_alt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_alt_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IImgElement_get_alt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_isMap_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IImgElement_put_isMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_isMap_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IImgElement_get_isMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_src_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IImgElement_put_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_src_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IImgElement_get_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_lowSrc_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IImgElement_put_lowSrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_lowSrc_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IImgElement_get_lowSrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_useMap_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IImgElement_put_useMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_useMap_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IImgElement_get_useMap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_vrml_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IImgElement_put_vrml_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_vrml_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IImgElement_get_vrml_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_dynSrc_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IImgElement_put_dynSrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_dynSrc_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IImgElement_get_dynSrc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_readyState_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ htmlReadyState __RPC_FAR *p);


void __RPC_STUB IImgElement_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_complete_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IImgElement_get_complete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_loop_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IImgElement_put_loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_loop_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT __RPC_FAR *p);


void __RPC_STUB IImgElement_get_loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_align_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ htmlControlAlign v);


void __RPC_STUB IImgElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_align_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ htmlControlAlign __RPC_FAR *p);


void __RPC_STUB IImgElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_onLoad_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IImgElement_get_onLoad_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_onError_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IImgElement_put_onError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_onError_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IImgElement_get_onError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_onAbort_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IImgElement_put_onAbort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_onAbort_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IImgElement_get_onAbort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_language_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IImgElement_put_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_language_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IImgElement_get_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IImgElement_put_name_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IImgElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IImgElement_get_name_Proxy( 
    IImgElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IImgElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IImgElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_Img;

class Img;
#endif

#ifndef __IBodyElement_INTERFACE_DEFINED__
#define __IBodyElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IBodyElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IBodyElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IBodyElement : public ITxtEdit
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_background( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_background( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_bgProperties( 
            /* [in] */ htmlBGProperties v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_bgProperties( 
            /* [out][retval] */ htmlBGProperties __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_dir( 
            /* [in] */ htmlDir v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_dir( 
            /* [out][retval] */ htmlDir __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_leftMargin( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_topMargin( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_rightMargin( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_bottomMargin( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_noWrap( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_noWrap( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_bgColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_bgColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_text( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_text( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_link( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_link( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_vLink( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_vLink( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_aLink( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_aLink( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlBlockAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onLoad( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onLoad( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onUnload( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onUnload( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onFocus( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onFocus( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onBlur( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onBlur( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_language( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_language( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBodyElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IBodyElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IBodyElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IBodyElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IBodyElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IBodyElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IBodyElement __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *createTextRange )( 
            IBodyElement __RPC_FAR * This,
            /* [in][defaultvalue] */ long begin,
            /* [in][defaultvalue] */ long end,
            /* [out][retval] */ ITxtRange __RPC_FAR *__RPC_FAR *range);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *createControlRange )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *range);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_background )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_background )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_bgProperties )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ htmlBGProperties v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_bgProperties )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ htmlBGProperties __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_dir )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ htmlDir v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_dir )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ htmlDir __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_leftMargin )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_topMargin )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_rightMargin )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_bottomMargin )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_noWrap )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_noWrap )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_bgColor )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_bgColor )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_text )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_text )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_link )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_link )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_vLink )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_vLink )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_aLink )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_aLink )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ htmlBlockAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onLoad )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onLoad )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onUnload )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onUnload )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onFocus )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onFocus )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onBlur )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onBlur )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_language )( 
            IBodyElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_language )( 
            IBodyElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IBodyElementVtbl;

    interface IBodyElement
    {
        CONST_VTBL struct IBodyElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBodyElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IBodyElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IBodyElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IBodyElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IBodyElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IBodyElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IBodyElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IBodyElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IBodyElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IBodyElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IBodyElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IBodyElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IBodyElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IBodyElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IBodyElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IBodyElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IBodyElement_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IBodyElement_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IBodyElement_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IBodyElement_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IBodyElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IBodyElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IBodyElement_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IBodyElement_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IBodyElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IBodyElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IBodyElement_createTextRange(This,begin,end,range)	\
    (This)->lpVtbl -> createTextRange(This,begin,end,range)

#define IBodyElement_createControlRange(This,range)	\
    (This)->lpVtbl -> createControlRange(This,range)


#define IBodyElement_put_background(This,v)	\
    (This)->lpVtbl -> put_background(This,v)

#define IBodyElement_get_background(This,p)	\
    (This)->lpVtbl -> get_background(This,p)

#define IBodyElement_put_bgProperties(This,v)	\
    (This)->lpVtbl -> put_bgProperties(This,v)

#define IBodyElement_get_bgProperties(This,p)	\
    (This)->lpVtbl -> get_bgProperties(This,p)

#define IBodyElement_put_dir(This,v)	\
    (This)->lpVtbl -> put_dir(This,v)

#define IBodyElement_get_dir(This,p)	\
    (This)->lpVtbl -> get_dir(This,p)

#define IBodyElement_get_leftMargin(This,p)	\
    (This)->lpVtbl -> get_leftMargin(This,p)

#define IBodyElement_get_topMargin(This,p)	\
    (This)->lpVtbl -> get_topMargin(This,p)

#define IBodyElement_get_rightMargin(This,p)	\
    (This)->lpVtbl -> get_rightMargin(This,p)

#define IBodyElement_get_bottomMargin(This,p)	\
    (This)->lpVtbl -> get_bottomMargin(This,p)

#define IBodyElement_put_noWrap(This,v)	\
    (This)->lpVtbl -> put_noWrap(This,v)

#define IBodyElement_get_noWrap(This,p)	\
    (This)->lpVtbl -> get_noWrap(This,p)

#define IBodyElement_put_bgColor(This,v)	\
    (This)->lpVtbl -> put_bgColor(This,v)

#define IBodyElement_get_bgColor(This,p)	\
    (This)->lpVtbl -> get_bgColor(This,p)

#define IBodyElement_put_text(This,v)	\
    (This)->lpVtbl -> put_text(This,v)

#define IBodyElement_get_text(This,p)	\
    (This)->lpVtbl -> get_text(This,p)

#define IBodyElement_put_link(This,v)	\
    (This)->lpVtbl -> put_link(This,v)

#define IBodyElement_get_link(This,p)	\
    (This)->lpVtbl -> get_link(This,p)

#define IBodyElement_put_vLink(This,v)	\
    (This)->lpVtbl -> put_vLink(This,v)

#define IBodyElement_get_vLink(This,p)	\
    (This)->lpVtbl -> get_vLink(This,p)

#define IBodyElement_put_aLink(This,v)	\
    (This)->lpVtbl -> put_aLink(This,v)

#define IBodyElement_get_aLink(This,p)	\
    (This)->lpVtbl -> get_aLink(This,p)

#define IBodyElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IBodyElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IBodyElement_put_onLoad(This,v)	\
    (This)->lpVtbl -> put_onLoad(This,v)

#define IBodyElement_get_onLoad(This,p)	\
    (This)->lpVtbl -> get_onLoad(This,p)

#define IBodyElement_put_onUnload(This,v)	\
    (This)->lpVtbl -> put_onUnload(This,v)

#define IBodyElement_get_onUnload(This,p)	\
    (This)->lpVtbl -> get_onUnload(This,p)

#define IBodyElement_put_onFocus(This,v)	\
    (This)->lpVtbl -> put_onFocus(This,v)

#define IBodyElement_get_onFocus(This,p)	\
    (This)->lpVtbl -> get_onFocus(This,p)

#define IBodyElement_put_onBlur(This,v)	\
    (This)->lpVtbl -> put_onBlur(This,v)

#define IBodyElement_get_onBlur(This,p)	\
    (This)->lpVtbl -> get_onBlur(This,p)

#define IBodyElement_put_language(This,v)	\
    (This)->lpVtbl -> put_language(This,v)

#define IBodyElement_get_language(This,p)	\
    (This)->lpVtbl -> get_language(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_background_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBodyElement_put_background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_background_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_bgProperties_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ htmlBGProperties v);


void __RPC_STUB IBodyElement_put_bgProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_bgProperties_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ htmlBGProperties __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_bgProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_dir_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ htmlDir v);


void __RPC_STUB IBodyElement_put_dir_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_dir_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ htmlDir __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_dir_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_leftMargin_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IBodyElement_get_leftMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_topMargin_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IBodyElement_get_topMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_rightMargin_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IBodyElement_get_rightMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_bottomMargin_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IBodyElement_get_bottomMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_noWrap_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IBodyElement_put_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_noWrap_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_bgColor_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBodyElement_put_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_bgColor_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_text_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBodyElement_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_text_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_link_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBodyElement_put_link_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_link_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_link_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_vLink_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBodyElement_put_vLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_vLink_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_vLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_aLink_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBodyElement_put_aLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_aLink_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_aLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_align_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ htmlBlockAlign v);


void __RPC_STUB IBodyElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_align_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_onLoad_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBodyElement_put_onLoad_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_onLoad_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_onLoad_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_onUnload_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBodyElement_put_onUnload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_onUnload_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_onUnload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_onFocus_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBodyElement_put_onFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_onFocus_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_onFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_onBlur_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBodyElement_put_onBlur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_onBlur_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_onBlur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBodyElement_put_language_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBodyElement_put_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBodyElement_get_language_Proxy( 
    IBodyElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBodyElement_get_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IBodyElement_INTERFACE_DEFINED__ */


#ifndef __IBodyElementEvents_DISPINTERFACE_DEFINED__
#define __IBodyElementEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: IBodyElementEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_IBodyElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface IBodyElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct IBodyElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IBodyElementEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IBodyElementEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IBodyElementEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IBodyElementEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IBodyElementEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IBodyElementEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IBodyElementEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } IBodyElementEventsVtbl;

    interface IBodyElementEvents
    {
        CONST_VTBL struct IBodyElementEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBodyElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IBodyElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IBodyElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IBodyElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IBodyElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IBodyElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IBodyElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __IBodyElementEvents_DISPINTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_Body;

class Body;
#endif

#ifndef __IFontElement_INTERFACE_DEFINED__
#define __IFontElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IFontElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IFontElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IFontElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_color( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_color( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_face( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_face( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_size( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_size( 
            /* [out][retval] */ VARIANT __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFontElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IFontElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IFontElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IFontElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IFontElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IFontElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IFontElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IFontElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IFontElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IFontElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IFontElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IFontElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IFontElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IFontElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IFontElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IFontElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IFontElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_color )( 
            IFontElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_color )( 
            IFontElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_face )( 
            IFontElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_face )( 
            IFontElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_size )( 
            IFontElement __RPC_FAR * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_size )( 
            IFontElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        END_INTERFACE
    } IFontElementVtbl;

    interface IFontElement
    {
        CONST_VTBL struct IFontElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFontElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IFontElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IFontElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IFontElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IFontElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IFontElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IFontElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IFontElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IFontElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IFontElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IFontElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IFontElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IFontElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IFontElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IFontElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IFontElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IFontElement_put_color(This,v)	\
    (This)->lpVtbl -> put_color(This,v)

#define IFontElement_get_color(This,p)	\
    (This)->lpVtbl -> get_color(This,p)

#define IFontElement_put_face(This,v)	\
    (This)->lpVtbl -> put_face(This,v)

#define IFontElement_get_face(This,p)	\
    (This)->lpVtbl -> get_face(This,p)

#define IFontElement_put_size(This,v)	\
    (This)->lpVtbl -> put_size(This,v)

#define IFontElement_get_size(This,p)	\
    (This)->lpVtbl -> get_size(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IFontElement_put_color_Proxy( 
    IFontElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IFontElement_put_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IFontElement_get_color_Proxy( 
    IFontElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IFontElement_get_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IFontElement_put_face_Proxy( 
    IFontElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IFontElement_put_face_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IFontElement_get_face_Proxy( 
    IFontElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IFontElement_get_face_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IFontElement_put_size_Proxy( 
    IFontElement __RPC_FAR * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IFontElement_put_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IFontElement_get_size_Proxy( 
    IFontElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT __RPC_FAR *p);


void __RPC_STUB IFontElement_get_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IFontElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_FontElement;

class FontElement;
#endif

#ifndef __AnchorEvents_DISPINTERFACE_DEFINED__
#define __AnchorEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: AnchorEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_AnchorEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface AnchorEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct AnchorEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            AnchorEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            AnchorEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            AnchorEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            AnchorEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            AnchorEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            AnchorEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            AnchorEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } AnchorEventsVtbl;

    interface AnchorEvents
    {
        CONST_VTBL struct AnchorEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AnchorEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define AnchorEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define AnchorEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define AnchorEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define AnchorEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define AnchorEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define AnchorEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __AnchorEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IAnchorElement_INTERFACE_DEFINED__
#define __IAnchorElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IAnchorElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IAnchorElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IAnchorElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_href( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_href( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_target( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_target( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_title( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_title( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_rel( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_rel( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_rev( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_rev( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_urn( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_urn( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_Methods( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_Methods( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onClick( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onClick( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onMouseOut( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onMouseOut( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onMouseOver( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onMouseOver( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_language( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_language( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAnchorElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IAnchorElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IAnchorElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IAnchorElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IAnchorElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_href )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_href )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_target )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_target )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_rel )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_rel )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_rev )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_rev )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_urn )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_urn )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Methods )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Methods )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onClick )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onClick )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onMouseOut )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onMouseOut )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onMouseOver )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onMouseOver )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_language )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_language )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IAnchorElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IAnchorElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IAnchorElementVtbl;

    interface IAnchorElement
    {
        CONST_VTBL struct IAnchorElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAnchorElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAnchorElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAnchorElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAnchorElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IAnchorElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IAnchorElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IAnchorElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IAnchorElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IAnchorElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IAnchorElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IAnchorElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IAnchorElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IAnchorElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IAnchorElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IAnchorElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IAnchorElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IAnchorElement_put_href(This,v)	\
    (This)->lpVtbl -> put_href(This,v)

#define IAnchorElement_get_href(This,p)	\
    (This)->lpVtbl -> get_href(This,p)

#define IAnchorElement_put_target(This,v)	\
    (This)->lpVtbl -> put_target(This,v)

#define IAnchorElement_get_target(This,p)	\
    (This)->lpVtbl -> get_target(This,p)

#define IAnchorElement_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IAnchorElement_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IAnchorElement_put_rel(This,v)	\
    (This)->lpVtbl -> put_rel(This,v)

#define IAnchorElement_get_rel(This,p)	\
    (This)->lpVtbl -> get_rel(This,p)

#define IAnchorElement_put_rev(This,v)	\
    (This)->lpVtbl -> put_rev(This,v)

#define IAnchorElement_get_rev(This,p)	\
    (This)->lpVtbl -> get_rev(This,p)

#define IAnchorElement_put_urn(This,v)	\
    (This)->lpVtbl -> put_urn(This,v)

#define IAnchorElement_get_urn(This,p)	\
    (This)->lpVtbl -> get_urn(This,p)

#define IAnchorElement_put_Methods(This,v)	\
    (This)->lpVtbl -> put_Methods(This,v)

#define IAnchorElement_get_Methods(This,p)	\
    (This)->lpVtbl -> get_Methods(This,p)

#define IAnchorElement_put_onClick(This,v)	\
    (This)->lpVtbl -> put_onClick(This,v)

#define IAnchorElement_get_onClick(This,p)	\
    (This)->lpVtbl -> get_onClick(This,p)

#define IAnchorElement_put_onMouseOut(This,v)	\
    (This)->lpVtbl -> put_onMouseOut(This,v)

#define IAnchorElement_get_onMouseOut(This,p)	\
    (This)->lpVtbl -> get_onMouseOut(This,p)

#define IAnchorElement_put_onMouseOver(This,v)	\
    (This)->lpVtbl -> put_onMouseOver(This,v)

#define IAnchorElement_get_onMouseOver(This,p)	\
    (This)->lpVtbl -> get_onMouseOver(This,p)

#define IAnchorElement_put_language(This,v)	\
    (This)->lpVtbl -> put_language(This,v)

#define IAnchorElement_get_language(This,p)	\
    (This)->lpVtbl -> get_language(This,p)

#define IAnchorElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IAnchorElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAnchorElement_put_href_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAnchorElement_put_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAnchorElement_get_href_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAnchorElement_get_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAnchorElement_put_target_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAnchorElement_put_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAnchorElement_get_target_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAnchorElement_get_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAnchorElement_put_title_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAnchorElement_put_title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAnchorElement_get_title_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAnchorElement_get_title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAnchorElement_put_rel_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAnchorElement_put_rel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAnchorElement_get_rel_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAnchorElement_get_rel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAnchorElement_put_rev_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAnchorElement_put_rev_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAnchorElement_get_rev_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAnchorElement_get_rev_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAnchorElement_put_urn_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAnchorElement_put_urn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAnchorElement_get_urn_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAnchorElement_get_urn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAnchorElement_put_Methods_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAnchorElement_put_Methods_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAnchorElement_get_Methods_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAnchorElement_get_Methods_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAnchorElement_put_onClick_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAnchorElement_put_onClick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAnchorElement_get_onClick_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAnchorElement_get_onClick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAnchorElement_put_onMouseOut_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAnchorElement_put_onMouseOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAnchorElement_get_onMouseOut_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAnchorElement_get_onMouseOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAnchorElement_put_onMouseOver_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAnchorElement_put_onMouseOver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAnchorElement_get_onMouseOver_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAnchorElement_get_onMouseOver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAnchorElement_put_language_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAnchorElement_put_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAnchorElement_get_language_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAnchorElement_get_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAnchorElement_put_name_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAnchorElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAnchorElement_get_name_Proxy( 
    IAnchorElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAnchorElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAnchorElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_AnchorElement;

class AnchorElement;
#endif

#ifndef __LabelEvents_DISPINTERFACE_DEFINED__
#define __LabelEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: LabelEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_LabelEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface LabelEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct LabelEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            LabelEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            LabelEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            LabelEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            LabelEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            LabelEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            LabelEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            LabelEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } LabelEventsVtbl;

    interface LabelEvents
    {
        CONST_VTBL struct LabelEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LabelEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define LabelEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define LabelEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define LabelEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define LabelEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define LabelEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define LabelEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __LabelEvents_DISPINTERFACE_DEFINED__ */


#ifndef __ILabelElement_INTERFACE_DEFINED__
#define __ILabelElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ILabelElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ILabelElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ILabelElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_language( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_language( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_for( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_for( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_accessKey( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_accessKey( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE click( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILabelElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ILabelElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ILabelElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ILabelElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ILabelElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ILabelElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ILabelElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ILabelElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ILabelElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ILabelElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ILabelElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ILabelElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ILabelElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ILabelElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ILabelElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ILabelElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ILabelElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            ILabelElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            ILabelElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_language )( 
            ILabelElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_language )( 
            ILabelElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_for )( 
            ILabelElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_for )( 
            ILabelElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_accessKey )( 
            ILabelElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_accessKey )( 
            ILabelElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *click )( 
            ILabelElement __RPC_FAR * This);
        
        END_INTERFACE
    } ILabelElementVtbl;

    interface ILabelElement
    {
        CONST_VTBL struct ILabelElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILabelElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ILabelElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ILabelElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ILabelElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ILabelElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ILabelElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ILabelElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ILabelElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ILabelElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ILabelElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ILabelElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ILabelElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ILabelElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ILabelElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ILabelElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ILabelElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ILabelElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define ILabelElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define ILabelElement_put_language(This,v)	\
    (This)->lpVtbl -> put_language(This,v)

#define ILabelElement_get_language(This,p)	\
    (This)->lpVtbl -> get_language(This,p)

#define ILabelElement_put_for(This,v)	\
    (This)->lpVtbl -> put_for(This,v)

#define ILabelElement_get_for(This,p)	\
    (This)->lpVtbl -> get_for(This,p)

#define ILabelElement_put_accessKey(This,v)	\
    (This)->lpVtbl -> put_accessKey(This,v)

#define ILabelElement_get_accessKey(This,p)	\
    (This)->lpVtbl -> get_accessKey(This,p)

#define ILabelElement_click(This)	\
    (This)->lpVtbl -> click(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ILabelElement_put_name_Proxy( 
    ILabelElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ILabelElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ILabelElement_get_name_Proxy( 
    ILabelElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ILabelElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ILabelElement_put_language_Proxy( 
    ILabelElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ILabelElement_put_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ILabelElement_get_language_Proxy( 
    ILabelElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ILabelElement_get_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ILabelElement_put_for_Proxy( 
    ILabelElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ILabelElement_put_for_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ILabelElement_get_for_Proxy( 
    ILabelElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ILabelElement_get_for_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ILabelElement_put_accessKey_Proxy( 
    ILabelElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ILabelElement_put_accessKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ILabelElement_get_accessKey_Proxy( 
    ILabelElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ILabelElement_get_accessKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ILabelElement_click_Proxy( 
    ILabelElement __RPC_FAR * This);


void __RPC_STUB ILabelElement_click_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ILabelElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_LabelElement;

class LabelElement;
#endif

#ifndef __IListElement_INTERFACE_DEFINED__
#define __IListElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IListElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IListElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IListElement : public IElement
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IListElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IListElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IListElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IListElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IListElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IListElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IListElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IListElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IListElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IListElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IListElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IListElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IListElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IListElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IListElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IListElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IListElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        END_INTERFACE
    } IListElementVtbl;

    interface IListElement
    {
        CONST_VTBL struct IListElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IListElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IListElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IListElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IListElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IListElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IListElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IListElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IListElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IListElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IListElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IListElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IListElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IListElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IListElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IListElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IListElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IListElement_INTERFACE_DEFINED__ */


#ifndef __IUListElement_INTERFACE_DEFINED__
#define __IUListElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IUListElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IUListElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IUListElement : public IListElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlBlockAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_compact( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_compact( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ htmlListType v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ htmlListType __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IUListElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IUListElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IUListElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IUListElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IUListElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IUListElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IUListElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IUListElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IUListElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IUListElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IUListElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IUListElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IUListElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IUListElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IUListElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IUListElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IUListElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IUListElement __RPC_FAR * This,
            /* [in] */ htmlBlockAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IUListElement __RPC_FAR * This,
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_compact )( 
            IUListElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_compact )( 
            IUListElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_type )( 
            IUListElement __RPC_FAR * This,
            /* [in] */ htmlListType v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            IUListElement __RPC_FAR * This,
            /* [out][retval] */ htmlListType __RPC_FAR *p);
        
        END_INTERFACE
    } IUListElementVtbl;

    interface IUListElement
    {
        CONST_VTBL struct IUListElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUListElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IUListElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IUListElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IUListElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IUListElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IUListElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IUListElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IUListElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IUListElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IUListElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IUListElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IUListElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IUListElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IUListElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IUListElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IUListElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)



#define IUListElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IUListElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IUListElement_put_compact(This,v)	\
    (This)->lpVtbl -> put_compact(This,v)

#define IUListElement_get_compact(This,p)	\
    (This)->lpVtbl -> get_compact(This,p)

#define IUListElement_put_type(This,v)	\
    (This)->lpVtbl -> put_type(This,v)

#define IUListElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IUListElement_put_align_Proxy( 
    IUListElement __RPC_FAR * This,
    /* [in] */ htmlBlockAlign v);


void __RPC_STUB IUListElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IUListElement_get_align_Proxy( 
    IUListElement __RPC_FAR * This,
    /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);


void __RPC_STUB IUListElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IUListElement_put_compact_Proxy( 
    IUListElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IUListElement_put_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IUListElement_get_compact_Proxy( 
    IUListElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IUListElement_get_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IUListElement_put_type_Proxy( 
    IUListElement __RPC_FAR * This,
    /* [in] */ htmlListType v);


void __RPC_STUB IUListElement_put_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IUListElement_get_type_Proxy( 
    IUListElement __RPC_FAR * This,
    /* [out][retval] */ htmlListType __RPC_FAR *p);


void __RPC_STUB IUListElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IUListElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_UListElement;

class UListElement;
#endif

#ifndef __IOListElement_INTERFACE_DEFINED__
#define __IOListElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOListElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IOListElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IOListElement : public IListElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlBlockAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_compact( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_compact( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_start( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_start( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ htmlListType v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ htmlListType __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOListElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOListElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOListElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOListElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IOListElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IOListElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IOListElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IOListElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IOListElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IOListElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IOListElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IOListElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IOListElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IOListElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IOListElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IOListElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IOListElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IOListElement __RPC_FAR * This,
            /* [in] */ htmlBlockAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IOListElement __RPC_FAR * This,
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_compact )( 
            IOListElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_compact )( 
            IOListElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_start )( 
            IOListElement __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_start )( 
            IOListElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_type )( 
            IOListElement __RPC_FAR * This,
            /* [in] */ htmlListType v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            IOListElement __RPC_FAR * This,
            /* [out][retval] */ htmlListType __RPC_FAR *p);
        
        END_INTERFACE
    } IOListElementVtbl;

    interface IOListElement
    {
        CONST_VTBL struct IOListElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOListElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOListElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOListElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOListElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IOListElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IOListElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IOListElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IOListElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IOListElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IOListElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IOListElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IOListElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IOListElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IOListElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IOListElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IOListElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)



#define IOListElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IOListElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IOListElement_put_compact(This,v)	\
    (This)->lpVtbl -> put_compact(This,v)

#define IOListElement_get_compact(This,p)	\
    (This)->lpVtbl -> get_compact(This,p)

#define IOListElement_put_start(This,v)	\
    (This)->lpVtbl -> put_start(This,v)

#define IOListElement_get_start(This,p)	\
    (This)->lpVtbl -> get_start(This,p)

#define IOListElement_put_type(This,v)	\
    (This)->lpVtbl -> put_type(This,v)

#define IOListElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IOListElement_put_align_Proxy( 
    IOListElement __RPC_FAR * This,
    /* [in] */ htmlBlockAlign v);


void __RPC_STUB IOListElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IOListElement_get_align_Proxy( 
    IOListElement __RPC_FAR * This,
    /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);


void __RPC_STUB IOListElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IOListElement_put_compact_Proxy( 
    IOListElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IOListElement_put_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IOListElement_get_compact_Proxy( 
    IOListElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IOListElement_get_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IOListElement_put_start_Proxy( 
    IOListElement __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IOListElement_put_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IOListElement_get_start_Proxy( 
    IOListElement __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IOListElement_get_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IOListElement_put_type_Proxy( 
    IOListElement __RPC_FAR * This,
    /* [in] */ htmlListType v);


void __RPC_STUB IOListElement_put_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IOListElement_get_type_Proxy( 
    IOListElement __RPC_FAR * This,
    /* [out][retval] */ htmlListType __RPC_FAR *p);


void __RPC_STUB IOListElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOListElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_OListElement;

class OListElement;
#endif

#ifndef __ILIElement_INTERFACE_DEFINED__
#define __ILIElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ILIElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ILIElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ILIElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlBlockAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ htmlListType v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ htmlListType __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILIElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ILIElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ILIElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ILIElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ILIElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ILIElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ILIElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ILIElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ILIElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ILIElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ILIElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ILIElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ILIElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ILIElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ILIElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ILIElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ILIElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            ILIElement __RPC_FAR * This,
            /* [in] */ htmlBlockAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            ILIElement __RPC_FAR * This,
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_type )( 
            ILIElement __RPC_FAR * This,
            /* [in] */ htmlListType v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            ILIElement __RPC_FAR * This,
            /* [out][retval] */ htmlListType __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            ILIElement __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            ILIElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        END_INTERFACE
    } ILIElementVtbl;

    interface ILIElement
    {
        CONST_VTBL struct ILIElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILIElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ILIElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ILIElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ILIElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ILIElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ILIElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ILIElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ILIElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ILIElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ILIElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ILIElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ILIElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ILIElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ILIElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ILIElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ILIElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ILIElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define ILIElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define ILIElement_put_type(This,v)	\
    (This)->lpVtbl -> put_type(This,v)

#define ILIElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define ILIElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define ILIElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ILIElement_put_align_Proxy( 
    ILIElement __RPC_FAR * This,
    /* [in] */ htmlBlockAlign v);


void __RPC_STUB ILIElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ILIElement_get_align_Proxy( 
    ILIElement __RPC_FAR * This,
    /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);


void __RPC_STUB ILIElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ILIElement_put_type_Proxy( 
    ILIElement __RPC_FAR * This,
    /* [in] */ htmlListType v);


void __RPC_STUB ILIElement_put_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ILIElement_get_type_Proxy( 
    ILIElement __RPC_FAR * This,
    /* [out][retval] */ htmlListType __RPC_FAR *p);


void __RPC_STUB ILIElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ILIElement_put_value_Proxy( 
    ILIElement __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB ILIElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ILIElement_get_value_Proxy( 
    ILIElement __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB ILIElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ILIElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_LIElement;

class LIElement;
#endif

#ifndef __IDivElement_INTERFACE_DEFINED__
#define __IDivElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IDivElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IDivElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IDivElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlBlockAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_script( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_script( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_scriptEngine( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_scriptEngine( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_noWrap( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_noWrap( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDivElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDivElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDivElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDivElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IDivElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IDivElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IDivElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IDivElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IDivElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IDivElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IDivElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IDivElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IDivElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IDivElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IDivElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IDivElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IDivElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IDivElement __RPC_FAR * This,
            /* [in] */ htmlBlockAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IDivElement __RPC_FAR * This,
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_script )( 
            IDivElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_script )( 
            IDivElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_scriptEngine )( 
            IDivElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_scriptEngine )( 
            IDivElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_noWrap )( 
            IDivElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_noWrap )( 
            IDivElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        END_INTERFACE
    } IDivElementVtbl;

    interface IDivElement
    {
        CONST_VTBL struct IDivElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDivElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDivElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDivElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDivElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDivElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDivElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDivElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDivElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IDivElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IDivElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IDivElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IDivElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IDivElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IDivElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IDivElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IDivElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IDivElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IDivElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IDivElement_put_script(This,v)	\
    (This)->lpVtbl -> put_script(This,v)

#define IDivElement_get_script(This,p)	\
    (This)->lpVtbl -> get_script(This,p)

#define IDivElement_put_scriptEngine(This,v)	\
    (This)->lpVtbl -> put_scriptEngine(This,v)

#define IDivElement_get_scriptEngine(This,p)	\
    (This)->lpVtbl -> get_scriptEngine(This,p)

#define IDivElement_put_noWrap(This,v)	\
    (This)->lpVtbl -> put_noWrap(This,v)

#define IDivElement_get_noWrap(This,p)	\
    (This)->lpVtbl -> get_noWrap(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDivElement_put_align_Proxy( 
    IDivElement __RPC_FAR * This,
    /* [in] */ htmlBlockAlign v);


void __RPC_STUB IDivElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDivElement_get_align_Proxy( 
    IDivElement __RPC_FAR * This,
    /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);


void __RPC_STUB IDivElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDivElement_put_script_Proxy( 
    IDivElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IDivElement_put_script_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDivElement_get_script_Proxy( 
    IDivElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IDivElement_get_script_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDivElement_put_scriptEngine_Proxy( 
    IDivElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IDivElement_put_scriptEngine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDivElement_get_scriptEngine_Proxy( 
    IDivElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IDivElement_get_scriptEngine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDivElement_put_noWrap_Proxy( 
    IDivElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IDivElement_put_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDivElement_get_noWrap_Proxy( 
    IDivElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IDivElement_get_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDivElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_DivElement;

class DivElement;
#endif

#ifndef __IDDElement_INTERFACE_DEFINED__
#define __IDDElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IDDElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IDDElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IDDElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_noWrap( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_noWrap( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlBlockAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDDElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDDElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDDElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDDElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IDDElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IDDElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IDDElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IDDElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IDDElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IDDElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IDDElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IDDElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IDDElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IDDElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IDDElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IDDElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IDDElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_noWrap )( 
            IDDElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_noWrap )( 
            IDDElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IDDElement __RPC_FAR * This,
            /* [in] */ htmlBlockAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IDDElement __RPC_FAR * This,
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);
        
        END_INTERFACE
    } IDDElementVtbl;

    interface IDDElement
    {
        CONST_VTBL struct IDDElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDDElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDDElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDDElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDDElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDDElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDDElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDDElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDDElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IDDElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IDDElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IDDElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IDDElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IDDElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IDDElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IDDElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IDDElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IDDElement_put_noWrap(This,v)	\
    (This)->lpVtbl -> put_noWrap(This,v)

#define IDDElement_get_noWrap(This,p)	\
    (This)->lpVtbl -> get_noWrap(This,p)

#define IDDElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IDDElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDDElement_put_noWrap_Proxy( 
    IDDElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IDDElement_put_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDDElement_get_noWrap_Proxy( 
    IDDElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IDDElement_get_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDDElement_put_align_Proxy( 
    IDDElement __RPC_FAR * This,
    /* [in] */ htmlBlockAlign v);


void __RPC_STUB IDDElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDDElement_get_align_Proxy( 
    IDDElement __RPC_FAR * This,
    /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);


void __RPC_STUB IDDElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDDElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_DDElement;

class DDElement;
#endif

#ifndef __IDTElement_INTERFACE_DEFINED__
#define __IDTElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IDTElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IDTElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IDTElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlBlockAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_noWrap( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_noWrap( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDTElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDTElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDTElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDTElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IDTElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IDTElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IDTElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IDTElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IDTElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IDTElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IDTElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IDTElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IDTElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IDTElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IDTElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IDTElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IDTElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IDTElement __RPC_FAR * This,
            /* [in] */ htmlBlockAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IDTElement __RPC_FAR * This,
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_noWrap )( 
            IDTElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_noWrap )( 
            IDTElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        END_INTERFACE
    } IDTElementVtbl;

    interface IDTElement
    {
        CONST_VTBL struct IDTElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDTElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDTElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDTElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDTElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDTElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDTElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDTElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDTElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IDTElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IDTElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IDTElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IDTElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IDTElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IDTElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IDTElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IDTElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IDTElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IDTElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IDTElement_put_noWrap(This,v)	\
    (This)->lpVtbl -> put_noWrap(This,v)

#define IDTElement_get_noWrap(This,p)	\
    (This)->lpVtbl -> get_noWrap(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDTElement_put_align_Proxy( 
    IDTElement __RPC_FAR * This,
    /* [in] */ htmlBlockAlign v);


void __RPC_STUB IDTElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDTElement_get_align_Proxy( 
    IDTElement __RPC_FAR * This,
    /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);


void __RPC_STUB IDTElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDTElement_put_noWrap_Proxy( 
    IDTElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IDTElement_put_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDTElement_get_noWrap_Proxy( 
    IDTElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IDTElement_get_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDTElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_DTElement;

class DTElement;
#endif

#ifndef __IBRElement_INTERFACE_DEFINED__
#define __IBRElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IBRElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IBRElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IBRElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_clear( 
            /* [in] */ htmlClear v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_clear( 
            /* [out][retval] */ htmlClear __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBRElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IBRElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IBRElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IBRElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IBRElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IBRElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IBRElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IBRElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IBRElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IBRElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IBRElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IBRElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IBRElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IBRElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IBRElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IBRElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IBRElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_clear )( 
            IBRElement __RPC_FAR * This,
            /* [in] */ htmlClear v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_clear )( 
            IBRElement __RPC_FAR * This,
            /* [out][retval] */ htmlClear __RPC_FAR *p);
        
        END_INTERFACE
    } IBRElementVtbl;

    interface IBRElement
    {
        CONST_VTBL struct IBRElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBRElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IBRElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IBRElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IBRElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IBRElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IBRElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IBRElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IBRElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IBRElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IBRElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IBRElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IBRElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IBRElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IBRElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IBRElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IBRElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IBRElement_put_clear(This,v)	\
    (This)->lpVtbl -> put_clear(This,v)

#define IBRElement_get_clear(This,p)	\
    (This)->lpVtbl -> get_clear(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBRElement_put_clear_Proxy( 
    IBRElement __RPC_FAR * This,
    /* [in] */ htmlClear v);


void __RPC_STUB IBRElement_put_clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBRElement_get_clear_Proxy( 
    IBRElement __RPC_FAR * This,
    /* [out][retval] */ htmlClear __RPC_FAR *p);


void __RPC_STUB IBRElement_get_clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IBRElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_BRElement;

class BRElement;
#endif

#ifndef __IDListElement_INTERFACE_DEFINED__
#define __IDListElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IDListElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IDListElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IDListElement : public IListElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlBlockAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_compact( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_compact( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDListElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDListElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDListElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDListElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IDListElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IDListElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IDListElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IDListElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IDListElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IDListElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IDListElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IDListElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IDListElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IDListElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IDListElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IDListElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IDListElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IDListElement __RPC_FAR * This,
            /* [in] */ htmlBlockAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IDListElement __RPC_FAR * This,
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_compact )( 
            IDListElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_compact )( 
            IDListElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        END_INTERFACE
    } IDListElementVtbl;

    interface IDListElement
    {
        CONST_VTBL struct IDListElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDListElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDListElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDListElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDListElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDListElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDListElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDListElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDListElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IDListElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IDListElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IDListElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IDListElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IDListElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IDListElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IDListElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IDListElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)



#define IDListElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IDListElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IDListElement_put_compact(This,v)	\
    (This)->lpVtbl -> put_compact(This,v)

#define IDListElement_get_compact(This,p)	\
    (This)->lpVtbl -> get_compact(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDListElement_put_align_Proxy( 
    IDListElement __RPC_FAR * This,
    /* [in] */ htmlBlockAlign v);


void __RPC_STUB IDListElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDListElement_get_align_Proxy( 
    IDListElement __RPC_FAR * This,
    /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);


void __RPC_STUB IDListElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDListElement_put_compact_Proxy( 
    IDListElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IDListElement_put_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDListElement_get_compact_Proxy( 
    IDListElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IDListElement_get_compact_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDListElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_DListElement;

class DListElement;
#endif

#ifndef __IHRElement_INTERFACE_DEFINED__
#define __IHRElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IHRElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IHRElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IHRElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlBlockAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_color( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_color( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_noShade( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_noShade( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_size( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHRElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IHRElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IHRElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IHRElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IHRElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IHRElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IHRElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IHRElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IHRElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IHRElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IHRElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IHRElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IHRElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IHRElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IHRElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IHRElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IHRElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IHRElement __RPC_FAR * This,
            /* [in] */ htmlBlockAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IHRElement __RPC_FAR * This,
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_color )( 
            IHRElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_color )( 
            IHRElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_noShade )( 
            IHRElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_noShade )( 
            IHRElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IHRElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_size )( 
            IHRElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        END_INTERFACE
    } IHRElementVtbl;

    interface IHRElement
    {
        CONST_VTBL struct IHRElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHRElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHRElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHRElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHRElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHRElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHRElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHRElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHRElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IHRElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IHRElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IHRElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IHRElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IHRElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IHRElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IHRElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IHRElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IHRElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IHRElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IHRElement_put_color(This,v)	\
    (This)->lpVtbl -> put_color(This,v)

#define IHRElement_get_color(This,p)	\
    (This)->lpVtbl -> get_color(This,p)

#define IHRElement_put_noShade(This,v)	\
    (This)->lpVtbl -> put_noShade(This,v)

#define IHRElement_get_noShade(This,p)	\
    (This)->lpVtbl -> get_noShade(This,p)

#define IHRElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#define IHRElement_get_size(This,p)	\
    (This)->lpVtbl -> get_size(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHRElement_put_align_Proxy( 
    IHRElement __RPC_FAR * This,
    /* [in] */ htmlBlockAlign v);


void __RPC_STUB IHRElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHRElement_get_align_Proxy( 
    IHRElement __RPC_FAR * This,
    /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);


void __RPC_STUB IHRElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHRElement_put_color_Proxy( 
    IHRElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IHRElement_put_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHRElement_get_color_Proxy( 
    IHRElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IHRElement_get_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IHRElement_put_noShade_Proxy( 
    IHRElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IHRElement_put_noShade_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHRElement_get_noShade_Proxy( 
    IHRElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IHRElement_get_noShade_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHRElement_get_width_Proxy( 
    IHRElement __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IHRElement_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IHRElement_get_size_Proxy( 
    IHRElement __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IHRElement_get_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHRElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_HRElement;

class HRElement;
#endif

#ifndef __IBlockElement_INTERFACE_DEFINED__
#define __IBlockElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IBlockElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IBlockElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IBlockElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlBlockAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBlockElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IBlockElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IBlockElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IBlockElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IBlockElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IBlockElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IBlockElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IBlockElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IBlockElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IBlockElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IBlockElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IBlockElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IBlockElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IBlockElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IBlockElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IBlockElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IBlockElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IBlockElement __RPC_FAR * This,
            /* [in] */ htmlBlockAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IBlockElement __RPC_FAR * This,
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);
        
        END_INTERFACE
    } IBlockElementVtbl;

    interface IBlockElement
    {
        CONST_VTBL struct IBlockElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBlockElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IBlockElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IBlockElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IBlockElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IBlockElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IBlockElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IBlockElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IBlockElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IBlockElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IBlockElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IBlockElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IBlockElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IBlockElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IBlockElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IBlockElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IBlockElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IBlockElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IBlockElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBlockElement_put_align_Proxy( 
    IBlockElement __RPC_FAR * This,
    /* [in] */ htmlBlockAlign v);


void __RPC_STUB IBlockElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBlockElement_get_align_Proxy( 
    IBlockElement __RPC_FAR * This,
    /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);


void __RPC_STUB IBlockElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IBlockElement_INTERFACE_DEFINED__ */


#ifndef __IParaElement_INTERFACE_DEFINED__
#define __IParaElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IParaElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IParaElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IParaElement : public IBlockElement
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IParaElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IParaElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IParaElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IParaElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IParaElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IParaElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IParaElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IParaElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IParaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IParaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IParaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IParaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IParaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IParaElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IParaElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IParaElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IParaElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IParaElement __RPC_FAR * This,
            /* [in] */ htmlBlockAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IParaElement __RPC_FAR * This,
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);
        
        END_INTERFACE
    } IParaElementVtbl;

    interface IParaElement
    {
        CONST_VTBL struct IParaElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IParaElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IParaElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IParaElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IParaElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IParaElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IParaElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IParaElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IParaElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IParaElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IParaElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IParaElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IParaElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IParaElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IParaElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IParaElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IParaElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IParaElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IParaElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IParaElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_ParaElement;

class ParaElement;
#endif

#ifndef __IElementCollection_INTERFACE_DEFINED__
#define __IElementCollection_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IElementCollection
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IElementCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IElementCollection : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE add( 
            /* [in] */ IElement __RPC_FAR *element,
            /* [in][optional] */ VARIANT idref,
            /* [in][optional][defaultvalue] */ VARIANT before) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE remove( 
            /* [in][defaultvalue] */ long index) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in][optional] */ VARIANT name,
            /* [in][optional] */ VARIANT index,
            /* [out][retval] */ VARIANT __RPC_FAR *pdisp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE tags( 
            /* [in] */ VARIANT tagName,
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *pdisp) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_count( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE get__newEnum( 
            /* [out][retval] */ IUnknown __RPC_FAR *__RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IElementCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IElementCollection __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IElementCollection __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IElementCollection __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IElementCollection __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IElementCollection __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IElementCollection __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IElementCollection __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *add )( 
            IElementCollection __RPC_FAR * This,
            /* [in] */ IElement __RPC_FAR *element,
            /* [in][optional] */ VARIANT idref,
            /* [in][optional][defaultvalue] */ VARIANT before);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *remove )( 
            IElementCollection __RPC_FAR * This,
            /* [in][defaultvalue] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *item )( 
            IElementCollection __RPC_FAR * This,
            /* [in][optional] */ VARIANT name,
            /* [in][optional] */ VARIANT index,
            /* [out][retval] */ VARIANT __RPC_FAR *pdisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *tags )( 
            IElementCollection __RPC_FAR * This,
            /* [in] */ VARIANT tagName,
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *pdisp);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_length )( 
            IElementCollection __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IElementCollection __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get__newEnum )( 
            IElementCollection __RPC_FAR * This,
            /* [out][retval] */ IUnknown __RPC_FAR *__RPC_FAR *p);
        
        END_INTERFACE
    } IElementCollectionVtbl;

    interface IElementCollection
    {
        CONST_VTBL struct IElementCollectionVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IElementCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IElementCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IElementCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IElementCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IElementCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IElementCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IElementCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IElementCollection_add(This,element,idref,before)	\
    (This)->lpVtbl -> add(This,element,idref,before)

#define IElementCollection_remove(This,index)	\
    (This)->lpVtbl -> remove(This,index)

#define IElementCollection_item(This,name,index,pdisp)	\
    (This)->lpVtbl -> item(This,name,index,pdisp)

#define IElementCollection_tags(This,tagName,pdisp)	\
    (This)->lpVtbl -> tags(This,tagName,pdisp)

#define IElementCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IElementCollection_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IElementCollection_get__newEnum(This,p)	\
    (This)->lpVtbl -> get__newEnum(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IElementCollection_add_Proxy( 
    IElementCollection __RPC_FAR * This,
    /* [in] */ IElement __RPC_FAR *element,
    /* [in][optional] */ VARIANT idref,
    /* [in][optional][defaultvalue] */ VARIANT before);


void __RPC_STUB IElementCollection_add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IElementCollection_remove_Proxy( 
    IElementCollection __RPC_FAR * This,
    /* [in][defaultvalue] */ long index);


void __RPC_STUB IElementCollection_remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IElementCollection_item_Proxy( 
    IElementCollection __RPC_FAR * This,
    /* [in][optional] */ VARIANT name,
    /* [in][optional] */ VARIANT index,
    /* [out][retval] */ VARIANT __RPC_FAR *pdisp);


void __RPC_STUB IElementCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IElementCollection_tags_Proxy( 
    IElementCollection __RPC_FAR * This,
    /* [in] */ VARIANT tagName,
    /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *pdisp);


void __RPC_STUB IElementCollection_tags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IElementCollection_get_length_Proxy( 
    IElementCollection __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IElementCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IElementCollection_get_count_Proxy( 
    IElementCollection __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IElementCollection_get_count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][restricted][id][propget] */ HRESULT STDMETHODCALLTYPE IElementCollection_get__newEnum_Proxy( 
    IElementCollection __RPC_FAR * This,
    /* [out][retval] */ IUnknown __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IElementCollection_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IElementCollection_INTERFACE_DEFINED__ */


#ifndef __IOptionsCollection_INTERFACE_DEFINED__
#define __IOptionsCollection_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOptionsCollection
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IOptionsCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IOptionsCollection : public IElementCollection
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOptionsCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOptionsCollection __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOptionsCollection __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOptionsCollection __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IOptionsCollection __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IOptionsCollection __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IOptionsCollection __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IOptionsCollection __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *add )( 
            IOptionsCollection __RPC_FAR * This,
            /* [in] */ IElement __RPC_FAR *element,
            /* [in][optional] */ VARIANT idref,
            /* [in][optional][defaultvalue] */ VARIANT before);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *remove )( 
            IOptionsCollection __RPC_FAR * This,
            /* [in][defaultvalue] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *item )( 
            IOptionsCollection __RPC_FAR * This,
            /* [in][optional] */ VARIANT name,
            /* [in][optional] */ VARIANT index,
            /* [out][retval] */ VARIANT __RPC_FAR *pdisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *tags )( 
            IOptionsCollection __RPC_FAR * This,
            /* [in] */ VARIANT tagName,
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *pdisp);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_length )( 
            IOptionsCollection __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IOptionsCollection __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][restricted][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get__newEnum )( 
            IOptionsCollection __RPC_FAR * This,
            /* [out][retval] */ IUnknown __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IOptionsCollection __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IOptionsCollectionVtbl;

    interface IOptionsCollection
    {
        CONST_VTBL struct IOptionsCollectionVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOptionsCollection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOptionsCollection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOptionsCollection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOptionsCollection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IOptionsCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IOptionsCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IOptionsCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IOptionsCollection_add(This,element,idref,before)	\
    (This)->lpVtbl -> add(This,element,idref,before)

#define IOptionsCollection_remove(This,index)	\
    (This)->lpVtbl -> remove(This,index)

#define IOptionsCollection_item(This,name,index,pdisp)	\
    (This)->lpVtbl -> item(This,name,index,pdisp)

#define IOptionsCollection_tags(This,tagName,pdisp)	\
    (This)->lpVtbl -> tags(This,tagName,pdisp)

#define IOptionsCollection_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define IOptionsCollection_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IOptionsCollection_get__newEnum(This,p)	\
    (This)->lpVtbl -> get__newEnum(This,p)


#define IOptionsCollection_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IOptionsCollection_get_name_Proxy( 
    IOptionsCollection __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IOptionsCollection_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOptionsCollection_INTERFACE_DEFINED__ */


#ifndef __IHeaderElement_INTERFACE_DEFINED__
#define __IHeaderElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IHeaderElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IHeaderElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IHeaderElement : public IBlockElement
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IHeaderElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IHeaderElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IHeaderElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IHeaderElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IHeaderElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IHeaderElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IHeaderElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IHeaderElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IHeaderElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IHeaderElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IHeaderElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IHeaderElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IHeaderElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IHeaderElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IHeaderElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IHeaderElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IHeaderElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IHeaderElement __RPC_FAR * This,
            /* [in] */ htmlBlockAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IHeaderElement __RPC_FAR * This,
            /* [out][retval] */ htmlBlockAlign __RPC_FAR *p);
        
        END_INTERFACE
    } IHeaderElementVtbl;

    interface IHeaderElement
    {
        CONST_VTBL struct IHeaderElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHeaderElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHeaderElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHeaderElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHeaderElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHeaderElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHeaderElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHeaderElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHeaderElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IHeaderElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IHeaderElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IHeaderElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IHeaderElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IHeaderElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IHeaderElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IHeaderElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IHeaderElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IHeaderElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IHeaderElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHeaderElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_HeaderElement;

class HeaderElement;
#endif

#ifndef __IFormElement_INTERFACE_DEFINED__
#define __IFormElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IFormElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IFormElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IFormElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_action( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_action( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_dir( 
            /* [in] */ htmlDir v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_dir( 
            /* [out][retval] */ htmlDir __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_encType( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_encType( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_method( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_method( 
            /* [out][retval] */ VARIANT __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_elements( 
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_target( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_target( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE submit( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE reset( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFormElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IFormElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IFormElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IFormElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IFormElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IFormElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IFormElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IFormElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IFormElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IFormElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IFormElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IFormElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IFormElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IFormElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IFormElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IFormElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IFormElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_action )( 
            IFormElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_action )( 
            IFormElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_dir )( 
            IFormElement __RPC_FAR * This,
            /* [in] */ htmlDir v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_dir )( 
            IFormElement __RPC_FAR * This,
            /* [out][retval] */ htmlDir __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_encType )( 
            IFormElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_encType )( 
            IFormElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_method )( 
            IFormElement __RPC_FAR * This,
            /* [in] */ VARIANT v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_method )( 
            IFormElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_elements )( 
            IFormElement __RPC_FAR * This,
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_target )( 
            IFormElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_target )( 
            IFormElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IFormElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IFormElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *submit )( 
            IFormElement __RPC_FAR * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *reset )( 
            IFormElement __RPC_FAR * This);
        
        END_INTERFACE
    } IFormElementVtbl;

    interface IFormElement
    {
        CONST_VTBL struct IFormElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFormElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IFormElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IFormElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IFormElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IFormElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IFormElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IFormElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IFormElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IFormElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IFormElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IFormElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IFormElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IFormElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IFormElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IFormElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IFormElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IFormElement_put_action(This,v)	\
    (This)->lpVtbl -> put_action(This,v)

#define IFormElement_get_action(This,p)	\
    (This)->lpVtbl -> get_action(This,p)

#define IFormElement_put_dir(This,v)	\
    (This)->lpVtbl -> put_dir(This,v)

#define IFormElement_get_dir(This,p)	\
    (This)->lpVtbl -> get_dir(This,p)

#define IFormElement_put_encType(This,v)	\
    (This)->lpVtbl -> put_encType(This,v)

#define IFormElement_get_encType(This,p)	\
    (This)->lpVtbl -> get_encType(This,p)

#define IFormElement_put_method(This,v)	\
    (This)->lpVtbl -> put_method(This,v)

#define IFormElement_get_method(This,p)	\
    (This)->lpVtbl -> get_method(This,p)

#define IFormElement_get_elements(This,p)	\
    (This)->lpVtbl -> get_elements(This,p)

#define IFormElement_put_target(This,v)	\
    (This)->lpVtbl -> put_target(This,v)

#define IFormElement_get_target(This,p)	\
    (This)->lpVtbl -> get_target(This,p)

#define IFormElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IFormElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IFormElement_submit(This)	\
    (This)->lpVtbl -> submit(This)

#define IFormElement_reset(This)	\
    (This)->lpVtbl -> reset(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IFormElement_put_action_Proxy( 
    IFormElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IFormElement_put_action_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IFormElement_get_action_Proxy( 
    IFormElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IFormElement_get_action_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IFormElement_put_dir_Proxy( 
    IFormElement __RPC_FAR * This,
    /* [in] */ htmlDir v);


void __RPC_STUB IFormElement_put_dir_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IFormElement_get_dir_Proxy( 
    IFormElement __RPC_FAR * This,
    /* [out][retval] */ htmlDir __RPC_FAR *p);


void __RPC_STUB IFormElement_get_dir_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IFormElement_put_encType_Proxy( 
    IFormElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IFormElement_put_encType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IFormElement_get_encType_Proxy( 
    IFormElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IFormElement_get_encType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IFormElement_put_method_Proxy( 
    IFormElement __RPC_FAR * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IFormElement_put_method_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IFormElement_get_method_Proxy( 
    IFormElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT __RPC_FAR *p);


void __RPC_STUB IFormElement_get_method_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IFormElement_get_elements_Proxy( 
    IFormElement __RPC_FAR * This,
    /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IFormElement_get_elements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IFormElement_put_target_Proxy( 
    IFormElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IFormElement_put_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IFormElement_get_target_Proxy( 
    IFormElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IFormElement_get_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IFormElement_put_name_Proxy( 
    IFormElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IFormElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IFormElement_get_name_Proxy( 
    IFormElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IFormElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IFormElement_submit_Proxy( 
    IFormElement __RPC_FAR * This);


void __RPC_STUB IFormElement_submit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IFormElement_reset_Proxy( 
    IFormElement __RPC_FAR * This);


void __RPC_STUB IFormElement_reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IFormElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_FormElement;

class FormElement;
#endif

#ifndef __SelectElementEvents_DISPINTERFACE_DEFINED__
#define __SelectElementEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: SelectElementEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_SelectElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface SelectElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct SelectElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            SelectElementEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            SelectElementEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            SelectElementEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            SelectElementEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            SelectElementEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            SelectElementEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            SelectElementEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } SelectElementEventsVtbl;

    interface SelectElementEvents
    {
        CONST_VTBL struct SelectElementEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SelectElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SelectElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SelectElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SelectElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SelectElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SelectElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SelectElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __SelectElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __ISelectElement_INTERFACE_DEFINED__
#define __ISelectElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ISelectElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ISelectElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ISelectElement : public IControlElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlControlAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_size( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_size( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_multiple( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_multiple( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_options( 
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onBlur( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onBlur( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onChange( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onChange( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onClick( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onClick( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onFocus( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onFocus( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_selectedIndex( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_selectedIndex( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_length( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ htmlSelectType __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISelectElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISelectElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISelectElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ISelectElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ISelectElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            ISelectElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            ISelectElement __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ htmlControlAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_size )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_size )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_multiple )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_multiple )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_options )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onBlur )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onBlur )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onChange )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onChange )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onClick )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onClick )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onFocus )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onFocus )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_selectedIndex )( 
            ISelectElement __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_selectedIndex )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_length )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            ISelectElement __RPC_FAR * This,
            /* [out][retval] */ htmlSelectType __RPC_FAR *p);
        
        END_INTERFACE
    } ISelectElementVtbl;

    interface ISelectElement
    {
        CONST_VTBL struct ISelectElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISelectElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISelectElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISelectElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISelectElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ISelectElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ISelectElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ISelectElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ISelectElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ISelectElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ISelectElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ISelectElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ISelectElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ISelectElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ISelectElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ISelectElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ISelectElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ISelectElement_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define ISelectElement_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define ISelectElement_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define ISelectElement_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define ISelectElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define ISelectElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define ISelectElement_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define ISelectElement_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define ISelectElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define ISelectElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define ISelectElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define ISelectElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define ISelectElement_put_size(This,v)	\
    (This)->lpVtbl -> put_size(This,v)

#define ISelectElement_get_size(This,p)	\
    (This)->lpVtbl -> get_size(This,p)

#define ISelectElement_put_multiple(This,v)	\
    (This)->lpVtbl -> put_multiple(This,v)

#define ISelectElement_get_multiple(This,p)	\
    (This)->lpVtbl -> get_multiple(This,p)

#define ISelectElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define ISelectElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define ISelectElement_get_options(This,p)	\
    (This)->lpVtbl -> get_options(This,p)

#define ISelectElement_put_onBlur(This,v)	\
    (This)->lpVtbl -> put_onBlur(This,v)

#define ISelectElement_get_onBlur(This,p)	\
    (This)->lpVtbl -> get_onBlur(This,p)

#define ISelectElement_put_onChange(This,v)	\
    (This)->lpVtbl -> put_onChange(This,v)

#define ISelectElement_get_onChange(This,p)	\
    (This)->lpVtbl -> get_onChange(This,p)

#define ISelectElement_put_onClick(This,v)	\
    (This)->lpVtbl -> put_onClick(This,v)

#define ISelectElement_get_onClick(This,p)	\
    (This)->lpVtbl -> get_onClick(This,p)

#define ISelectElement_put_onFocus(This,v)	\
    (This)->lpVtbl -> put_onFocus(This,v)

#define ISelectElement_get_onFocus(This,p)	\
    (This)->lpVtbl -> get_onFocus(This,p)

#define ISelectElement_put_selectedIndex(This,v)	\
    (This)->lpVtbl -> put_selectedIndex(This,v)

#define ISelectElement_get_selectedIndex(This,p)	\
    (This)->lpVtbl -> get_selectedIndex(This,p)

#define ISelectElement_get_length(This,p)	\
    (This)->lpVtbl -> get_length(This,p)

#define ISelectElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ISelectElement_put_align_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [in] */ htmlControlAlign v);


void __RPC_STUB ISelectElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ISelectElement_get_align_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [out][retval] */ htmlControlAlign __RPC_FAR *p);


void __RPC_STUB ISelectElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ISelectElement_put_size_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB ISelectElement_put_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ISelectElement_get_size_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB ISelectElement_get_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ISelectElement_put_multiple_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB ISelectElement_put_multiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ISelectElement_get_multiple_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB ISelectElement_get_multiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ISelectElement_put_name_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ISelectElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ISelectElement_get_name_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ISelectElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ISelectElement_get_options_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB ISelectElement_get_options_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ISelectElement_put_onBlur_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ISelectElement_put_onBlur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ISelectElement_get_onBlur_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ISelectElement_get_onBlur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ISelectElement_put_onChange_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ISelectElement_put_onChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ISelectElement_get_onChange_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ISelectElement_get_onChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ISelectElement_put_onClick_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ISelectElement_put_onClick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ISelectElement_get_onClick_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ISelectElement_get_onClick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ISelectElement_put_onFocus_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ISelectElement_put_onFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ISelectElement_get_onFocus_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ISelectElement_get_onFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ISelectElement_put_selectedIndex_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB ISelectElement_put_selectedIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ISelectElement_get_selectedIndex_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB ISelectElement_get_selectedIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ISelectElement_get_length_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB ISelectElement_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ISelectElement_get_type_Proxy( 
    ISelectElement __RPC_FAR * This,
    /* [out][retval] */ htmlSelectType __RPC_FAR *p);


void __RPC_STUB ISelectElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISelectElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_Select;

class Select;
#endif

#ifndef __ISelectionObject_INTERFACE_DEFINED__
#define __ISelectionObject_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ISelectionObject
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ISelectionObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ISelectionObject : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE empty( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE clear( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE createRange( 
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *range) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ htmlSelection __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISelectionObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISelectionObject __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISelectionObject __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISelectionObject __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ISelectionObject __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ISelectionObject __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ISelectionObject __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ISelectionObject __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *empty )( 
            ISelectionObject __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *clear )( 
            ISelectionObject __RPC_FAR * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *createRange )( 
            ISelectionObject __RPC_FAR * This,
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *range);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            ISelectionObject __RPC_FAR * This,
            /* [out][retval] */ htmlSelection __RPC_FAR *p);
        
        END_INTERFACE
    } ISelectionObjectVtbl;

    interface ISelectionObject
    {
        CONST_VTBL struct ISelectionObjectVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISelectionObject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISelectionObject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISelectionObject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISelectionObject_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ISelectionObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ISelectionObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ISelectionObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ISelectionObject_empty(This)	\
    (This)->lpVtbl -> empty(This)

#define ISelectionObject_clear(This)	\
    (This)->lpVtbl -> clear(This)

#define ISelectionObject_createRange(This,range)	\
    (This)->lpVtbl -> createRange(This,range)

#define ISelectionObject_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ISelectionObject_empty_Proxy( 
    ISelectionObject __RPC_FAR * This);


void __RPC_STUB ISelectionObject_empty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ISelectionObject_clear_Proxy( 
    ISelectionObject __RPC_FAR * This);


void __RPC_STUB ISelectionObject_clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ISelectionObject_createRange_Proxy( 
    ISelectionObject __RPC_FAR * This,
    /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *range);


void __RPC_STUB ISelectionObject_createRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ISelectionObject_get_type_Proxy( 
    ISelectionObject __RPC_FAR * This,
    /* [out][retval] */ htmlSelection __RPC_FAR *p);


void __RPC_STUB ISelectionObject_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISelectionObject_INTERFACE_DEFINED__ */


#ifndef __IOptionElement_INTERFACE_DEFINED__
#define __IOptionElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IOptionElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IOptionElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IOptionElement : public IElement
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_selected( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_selected( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_defaultSelected( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_defaultSelected( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_index( 
            /* [in] */ LONG v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_index( 
            /* [out][retval] */ LONG __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_text( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_text( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Class( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Class( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IOptionElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IOptionElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IOptionElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IOptionElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IOptionElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IOptionElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IOptionElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IOptionElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IOptionElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IOptionElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IOptionElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IOptionElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IOptionElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IOptionElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IOptionElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IOptionElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IOptionElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_selected )( 
            IOptionElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_selected )( 
            IOptionElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IOptionElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IOptionElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_defaultSelected )( 
            IOptionElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_defaultSelected )( 
            IOptionElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_index )( 
            IOptionElement __RPC_FAR * This,
            /* [in] */ LONG v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_index )( 
            IOptionElement __RPC_FAR * This,
            /* [out][retval] */ LONG __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_text )( 
            IOptionElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_text )( 
            IOptionElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IOptionElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IOptionElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IOptionElementVtbl;

    interface IOptionElement
    {
        CONST_VTBL struct IOptionElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IOptionElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IOptionElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IOptionElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IOptionElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IOptionElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IOptionElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IOptionElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IOptionElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IOptionElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IOptionElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IOptionElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IOptionElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IOptionElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IOptionElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IOptionElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IOptionElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IOptionElement_put_selected(This,v)	\
    (This)->lpVtbl -> put_selected(This,v)

#define IOptionElement_get_selected(This,p)	\
    (This)->lpVtbl -> get_selected(This,p)

#define IOptionElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IOptionElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IOptionElement_put_defaultSelected(This,v)	\
    (This)->lpVtbl -> put_defaultSelected(This,v)

#define IOptionElement_get_defaultSelected(This,p)	\
    (This)->lpVtbl -> get_defaultSelected(This,p)

#define IOptionElement_put_index(This,v)	\
    (This)->lpVtbl -> put_index(This,v)

#define IOptionElement_get_index(This,p)	\
    (This)->lpVtbl -> get_index(This,p)

#define IOptionElement_put_text(This,v)	\
    (This)->lpVtbl -> put_text(This,v)

#define IOptionElement_get_text(This,p)	\
    (This)->lpVtbl -> get_text(This,p)

#define IOptionElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IOptionElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IOptionElement_put_selected_Proxy( 
    IOptionElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IOptionElement_put_selected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOptionElement_get_selected_Proxy( 
    IOptionElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IOptionElement_get_selected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IOptionElement_put_value_Proxy( 
    IOptionElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IOptionElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOptionElement_get_value_Proxy( 
    IOptionElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IOptionElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IOptionElement_put_defaultSelected_Proxy( 
    IOptionElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IOptionElement_put_defaultSelected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOptionElement_get_defaultSelected_Proxy( 
    IOptionElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IOptionElement_get_defaultSelected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IOptionElement_put_index_Proxy( 
    IOptionElement __RPC_FAR * This,
    /* [in] */ LONG v);


void __RPC_STUB IOptionElement_put_index_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOptionElement_get_index_Proxy( 
    IOptionElement __RPC_FAR * This,
    /* [out][retval] */ LONG __RPC_FAR *p);


void __RPC_STUB IOptionElement_get_index_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IOptionElement_put_text_Proxy( 
    IOptionElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IOptionElement_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOptionElement_get_text_Proxy( 
    IOptionElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IOptionElement_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IOptionElement_put_Class_Proxy( 
    IOptionElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IOptionElement_put_Class_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IOptionElement_get_Class_Proxy( 
    IOptionElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IOptionElement_get_Class_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IOptionElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_OptionElement;

class OptionElement;
#endif

#ifndef __InputTxtBaseEvents_DISPINTERFACE_DEFINED__
#define __InputTxtBaseEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: InputTxtBaseEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_InputTxtBaseEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface InputTxtBaseEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct InputTxtBaseEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            InputTxtBaseEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            InputTxtBaseEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            InputTxtBaseEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            InputTxtBaseEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            InputTxtBaseEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            InputTxtBaseEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            InputTxtBaseEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } InputTxtBaseEventsVtbl;

    interface InputTxtBaseEvents
    {
        CONST_VTBL struct InputTxtBaseEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define InputTxtBaseEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define InputTxtBaseEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define InputTxtBaseEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define InputTxtBaseEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define InputTxtBaseEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define InputTxtBaseEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define InputTxtBaseEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __InputTxtBaseEvents_DISPINTERFACE_DEFINED__ */


#ifndef __InputTextEvents_DISPINTERFACE_DEFINED__
#define __InputTextEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: InputTextEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_InputTextEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface InputTextEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct InputTextEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            InputTextEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            InputTextEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            InputTextEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            InputTextEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            InputTextEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            InputTextEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            InputTextEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } InputTextEventsVtbl;

    interface InputTextEvents
    {
        CONST_VTBL struct InputTextEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define InputTextEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define InputTextEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define InputTextEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define InputTextEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define InputTextEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define InputTextEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define InputTextEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __InputTextEvents_DISPINTERFACE_DEFINED__ */


#ifndef __TextAreaEvents_DISPINTERFACE_DEFINED__
#define __TextAreaEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: TextAreaEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_TextAreaEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface TextAreaEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct TextAreaEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            TextAreaEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            TextAreaEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            TextAreaEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            TextAreaEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            TextAreaEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            TextAreaEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            TextAreaEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } TextAreaEventsVtbl;

    interface TextAreaEvents
    {
        CONST_VTBL struct TextAreaEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextAreaEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextAreaEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextAreaEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextAreaEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextAreaEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextAreaEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextAreaEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __TextAreaEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IInputHidden_INTERFACE_DEFINED__
#define __IInputHidden_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IInputHidden
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IInputHidden;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IInputHidden : public IControlElement
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ VARIANT __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInputHiddenVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IInputHidden __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IInputHidden __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IInputHidden __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IInputHidden __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IInputHidden __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IInputHidden __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IInputHidden __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IInputHidden __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IInputHidden __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IInputHidden __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IInputHidden __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IInputHidden __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IInputHidden __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IInputHidden __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IInputHidden __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IInputHidden __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IInputHidden __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IInputHidden __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IInputHiddenVtbl;

    interface IInputHidden
    {
        CONST_VTBL struct IInputHiddenVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInputHidden_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IInputHidden_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IInputHidden_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IInputHidden_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IInputHidden_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IInputHidden_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IInputHidden_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IInputHidden_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IInputHidden_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IInputHidden_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IInputHidden_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IInputHidden_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IInputHidden_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IInputHidden_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IInputHidden_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IInputHidden_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IInputHidden_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IInputHidden_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IInputHidden_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IInputHidden_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IInputHidden_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IInputHidden_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IInputHidden_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IInputHidden_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IInputHidden_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IInputHidden_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IInputHidden_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IInputHidden_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IInputHidden_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IInputHidden_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IInputHidden_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IInputHidden_get_type_Proxy( 
    IInputHidden __RPC_FAR * This,
    /* [out][retval] */ VARIANT __RPC_FAR *p);


void __RPC_STUB IInputHidden_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IInputHidden_put_value_Proxy( 
    IInputHidden __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IInputHidden_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IInputHidden_get_value_Proxy( 
    IInputHidden __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IInputHidden_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IInputHidden_put_name_Proxy( 
    IInputHidden __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IInputHidden_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IInputHidden_get_name_Proxy( 
    IInputHidden __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IInputHidden_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IInputHidden_INTERFACE_DEFINED__ */


#ifndef __IInputPassword_INTERFACE_DEFINED__
#define __IInputPassword_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IInputPassword
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IInputPassword;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IInputPassword : public IInputHidden
    {
    public:
        virtual /* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_defaultvalue( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_defaultvalue( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_size( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_size( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_maxlength( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_maxlength( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE focus( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE blur( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE select( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInputPasswordVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IInputPassword __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IInputPassword __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IInputPassword __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IInputPassword __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IInputPassword __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IInputPassword __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_defaultvalue )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_defaultvalue )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_size )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_size )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_maxlength )( 
            IInputPassword __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_maxlength )( 
            IInputPassword __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *focus )( 
            IInputPassword __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *blur )( 
            IInputPassword __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *select )( 
            IInputPassword __RPC_FAR * This);
        
        END_INTERFACE
    } IInputPasswordVtbl;

    interface IInputPassword
    {
        CONST_VTBL struct IInputPasswordVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInputPassword_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IInputPassword_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IInputPassword_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IInputPassword_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IInputPassword_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IInputPassword_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IInputPassword_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IInputPassword_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IInputPassword_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IInputPassword_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IInputPassword_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IInputPassword_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IInputPassword_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IInputPassword_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IInputPassword_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IInputPassword_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IInputPassword_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IInputPassword_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IInputPassword_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IInputPassword_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IInputPassword_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IInputPassword_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IInputPassword_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IInputPassword_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IInputPassword_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IInputPassword_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IInputPassword_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IInputPassword_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IInputPassword_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IInputPassword_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IInputPassword_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)


#define IInputPassword_put_defaultvalue(This,v)	\
    (This)->lpVtbl -> put_defaultvalue(This,v)

#define IInputPassword_get_defaultvalue(This,p)	\
    (This)->lpVtbl -> get_defaultvalue(This,p)

#define IInputPassword_put_size(This,v)	\
    (This)->lpVtbl -> put_size(This,v)

#define IInputPassword_get_size(This,p)	\
    (This)->lpVtbl -> get_size(This,p)

#define IInputPassword_put_maxlength(This,v)	\
    (This)->lpVtbl -> put_maxlength(This,v)

#define IInputPassword_get_maxlength(This,p)	\
    (This)->lpVtbl -> get_maxlength(This,p)

#define IInputPassword_focus(This)	\
    (This)->lpVtbl -> focus(This)

#define IInputPassword_blur(This)	\
    (This)->lpVtbl -> blur(This)

#define IInputPassword_select(This)	\
    (This)->lpVtbl -> select(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IInputPassword_put_defaultvalue_Proxy( 
    IInputPassword __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IInputPassword_put_defaultvalue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IInputPassword_get_defaultvalue_Proxy( 
    IInputPassword __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IInputPassword_get_defaultvalue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IInputPassword_put_size_Proxy( 
    IInputPassword __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IInputPassword_put_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IInputPassword_get_size_Proxy( 
    IInputPassword __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IInputPassword_get_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IInputPassword_put_maxlength_Proxy( 
    IInputPassword __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IInputPassword_put_maxlength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IInputPassword_get_maxlength_Proxy( 
    IInputPassword __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IInputPassword_get_maxlength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IInputPassword_focus_Proxy( 
    IInputPassword __RPC_FAR * This);


void __RPC_STUB IInputPassword_focus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IInputPassword_blur_Proxy( 
    IInputPassword __RPC_FAR * This);


void __RPC_STUB IInputPassword_blur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IInputPassword_select_Proxy( 
    IInputPassword __RPC_FAR * This);


void __RPC_STUB IInputPassword_select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IInputPassword_INTERFACE_DEFINED__ */


#ifndef __IInputText_INTERFACE_DEFINED__
#define __IInputText_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IInputText
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IInputText;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IInputText : public IInputPassword
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_language( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_language( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onBlur( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onBlur( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onFocus( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onFocus( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onChange( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onChange( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onSelect( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onSelect( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInputTextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IInputText __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IInputText __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IInputText __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IInputText __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IInputText __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IInputText __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IInputText __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IInputText __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IInputText __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IInputText __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IInputText __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IInputText __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IInputText __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IInputText __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IInputText __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IInputText __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IInputText __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_defaultvalue )( 
            IInputText __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_defaultvalue )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_size )( 
            IInputText __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_size )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_maxlength )( 
            IInputText __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_maxlength )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *focus )( 
            IInputText __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *blur )( 
            IInputText __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *select )( 
            IInputText __RPC_FAR * This);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_language )( 
            IInputText __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_language )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onBlur )( 
            IInputText __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onBlur )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onFocus )( 
            IInputText __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onFocus )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onChange )( 
            IInputText __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onChange )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onSelect )( 
            IInputText __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onSelect )( 
            IInputText __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IInputTextVtbl;

    interface IInputText
    {
        CONST_VTBL struct IInputTextVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInputText_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IInputText_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IInputText_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IInputText_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IInputText_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IInputText_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IInputText_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IInputText_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IInputText_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IInputText_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IInputText_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IInputText_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IInputText_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IInputText_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IInputText_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IInputText_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IInputText_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IInputText_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IInputText_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IInputText_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IInputText_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IInputText_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IInputText_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IInputText_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IInputText_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IInputText_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IInputText_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IInputText_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IInputText_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IInputText_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IInputText_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)


#define IInputText_put_defaultvalue(This,v)	\
    (This)->lpVtbl -> put_defaultvalue(This,v)

#define IInputText_get_defaultvalue(This,p)	\
    (This)->lpVtbl -> get_defaultvalue(This,p)

#define IInputText_put_size(This,v)	\
    (This)->lpVtbl -> put_size(This,v)

#define IInputText_get_size(This,p)	\
    (This)->lpVtbl -> get_size(This,p)

#define IInputText_put_maxlength(This,v)	\
    (This)->lpVtbl -> put_maxlength(This,v)

#define IInputText_get_maxlength(This,p)	\
    (This)->lpVtbl -> get_maxlength(This,p)

#define IInputText_focus(This)	\
    (This)->lpVtbl -> focus(This)

#define IInputText_blur(This)	\
    (This)->lpVtbl -> blur(This)

#define IInputText_select(This)	\
    (This)->lpVtbl -> select(This)


#define IInputText_put_language(This,v)	\
    (This)->lpVtbl -> put_language(This,v)

#define IInputText_get_language(This,p)	\
    (This)->lpVtbl -> get_language(This,p)

#define IInputText_put_onBlur(This,v)	\
    (This)->lpVtbl -> put_onBlur(This,v)

#define IInputText_get_onBlur(This,p)	\
    (This)->lpVtbl -> get_onBlur(This,p)

#define IInputText_put_onFocus(This,v)	\
    (This)->lpVtbl -> put_onFocus(This,v)

#define IInputText_get_onFocus(This,p)	\
    (This)->lpVtbl -> get_onFocus(This,p)

#define IInputText_put_onChange(This,v)	\
    (This)->lpVtbl -> put_onChange(This,v)

#define IInputText_get_onChange(This,p)	\
    (This)->lpVtbl -> get_onChange(This,p)

#define IInputText_put_onSelect(This,v)	\
    (This)->lpVtbl -> put_onSelect(This,v)

#define IInputText_get_onSelect(This,p)	\
    (This)->lpVtbl -> get_onSelect(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IInputText_put_language_Proxy( 
    IInputText __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IInputText_put_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IInputText_get_language_Proxy( 
    IInputText __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IInputText_get_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IInputText_put_onBlur_Proxy( 
    IInputText __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IInputText_put_onBlur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IInputText_get_onBlur_Proxy( 
    IInputText __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IInputText_get_onBlur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IInputText_put_onFocus_Proxy( 
    IInputText __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IInputText_put_onFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IInputText_get_onFocus_Proxy( 
    IInputText __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IInputText_get_onFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IInputText_put_onChange_Proxy( 
    IInputText __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IInputText_put_onChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IInputText_get_onChange_Proxy( 
    IInputText __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IInputText_get_onChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IInputText_put_onSelect_Proxy( 
    IInputText __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IInputText_put_onSelect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IInputText_get_onSelect_Proxy( 
    IInputText __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IInputText_get_onSelect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IInputText_INTERFACE_DEFINED__ */


#ifndef __ITextArea_INTERFACE_DEFINED__
#define __ITextArea_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ITextArea
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ITextArea;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ITextArea : public IControlElement
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ VARIANT __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_defaultvalue( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_defaultvalue( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_language( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_language( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onBlur( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onBlur( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onFocus( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onFocus( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onChange( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onChange( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onSelect( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onSelect( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_rows( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_rows( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_cols( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_cols( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_wrap( 
            /* [in] */ htmlWrap v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_wrap( 
            /* [out][retval] */ htmlWrap __RPC_FAR *p) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE focus( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE blur( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE select( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextAreaVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ITextArea __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ITextArea __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ITextArea __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ITextArea __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            ITextArea __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            ITextArea __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_defaultvalue )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_defaultvalue )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_language )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_language )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onBlur )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onBlur )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onFocus )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onFocus )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onChange )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onChange )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onSelect )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onSelect )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_rows )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_rows )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_cols )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_cols )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_wrap )( 
            ITextArea __RPC_FAR * This,
            /* [in] */ htmlWrap v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_wrap )( 
            ITextArea __RPC_FAR * This,
            /* [out][retval] */ htmlWrap __RPC_FAR *p);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *focus )( 
            ITextArea __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *blur )( 
            ITextArea __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *select )( 
            ITextArea __RPC_FAR * This);
        
        END_INTERFACE
    } ITextAreaVtbl;

    interface ITextArea
    {
        CONST_VTBL struct ITextAreaVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextArea_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ITextArea_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ITextArea_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ITextArea_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ITextArea_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ITextArea_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ITextArea_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ITextArea_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ITextArea_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ITextArea_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ITextArea_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ITextArea_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ITextArea_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ITextArea_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ITextArea_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ITextArea_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ITextArea_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define ITextArea_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define ITextArea_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define ITextArea_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define ITextArea_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define ITextArea_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define ITextArea_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define ITextArea_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define ITextArea_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define ITextArea_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define ITextArea_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define ITextArea_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define ITextArea_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define ITextArea_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define ITextArea_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define ITextArea_put_defaultvalue(This,v)	\
    (This)->lpVtbl -> put_defaultvalue(This,v)

#define ITextArea_get_defaultvalue(This,p)	\
    (This)->lpVtbl -> get_defaultvalue(This,p)

#define ITextArea_put_language(This,v)	\
    (This)->lpVtbl -> put_language(This,v)

#define ITextArea_get_language(This,p)	\
    (This)->lpVtbl -> get_language(This,p)

#define ITextArea_put_onBlur(This,v)	\
    (This)->lpVtbl -> put_onBlur(This,v)

#define ITextArea_get_onBlur(This,p)	\
    (This)->lpVtbl -> get_onBlur(This,p)

#define ITextArea_put_onFocus(This,v)	\
    (This)->lpVtbl -> put_onFocus(This,v)

#define ITextArea_get_onFocus(This,p)	\
    (This)->lpVtbl -> get_onFocus(This,p)

#define ITextArea_put_onChange(This,v)	\
    (This)->lpVtbl -> put_onChange(This,v)

#define ITextArea_get_onChange(This,p)	\
    (This)->lpVtbl -> get_onChange(This,p)

#define ITextArea_put_onSelect(This,v)	\
    (This)->lpVtbl -> put_onSelect(This,v)

#define ITextArea_get_onSelect(This,p)	\
    (This)->lpVtbl -> get_onSelect(This,p)

#define ITextArea_put_rows(This,v)	\
    (This)->lpVtbl -> put_rows(This,v)

#define ITextArea_get_rows(This,p)	\
    (This)->lpVtbl -> get_rows(This,p)

#define ITextArea_put_cols(This,v)	\
    (This)->lpVtbl -> put_cols(This,v)

#define ITextArea_get_cols(This,p)	\
    (This)->lpVtbl -> get_cols(This,p)

#define ITextArea_put_wrap(This,v)	\
    (This)->lpVtbl -> put_wrap(This,v)

#define ITextArea_get_wrap(This,p)	\
    (This)->lpVtbl -> get_wrap(This,p)

#define ITextArea_focus(This)	\
    (This)->lpVtbl -> focus(This)

#define ITextArea_blur(This)	\
    (This)->lpVtbl -> blur(This)

#define ITextArea_select(This)	\
    (This)->lpVtbl -> select(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITextArea_get_type_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [out][retval] */ VARIANT __RPC_FAR *p);


void __RPC_STUB ITextArea_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ITextArea_put_name_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITextArea_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ITextArea_get_name_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITextArea_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ITextArea_put_value_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITextArea_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ITextArea_get_value_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITextArea_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ITextArea_put_defaultvalue_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITextArea_put_defaultvalue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ITextArea_get_defaultvalue_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITextArea_get_defaultvalue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ITextArea_put_language_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITextArea_put_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ITextArea_get_language_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITextArea_get_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ITextArea_put_onBlur_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITextArea_put_onBlur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ITextArea_get_onBlur_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITextArea_get_onBlur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ITextArea_put_onFocus_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITextArea_put_onFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ITextArea_get_onFocus_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITextArea_get_onFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ITextArea_put_onChange_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITextArea_put_onChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ITextArea_get_onChange_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITextArea_get_onChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ITextArea_put_onSelect_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITextArea_put_onSelect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ITextArea_get_onSelect_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITextArea_get_onSelect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ITextArea_put_rows_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB ITextArea_put_rows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ITextArea_get_rows_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB ITextArea_get_rows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ITextArea_put_cols_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB ITextArea_put_cols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ITextArea_get_cols_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB ITextArea_get_cols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ITextArea_put_wrap_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [in] */ htmlWrap v);


void __RPC_STUB ITextArea_put_wrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ITextArea_get_wrap_Proxy( 
    ITextArea __RPC_FAR * This,
    /* [out][retval] */ htmlWrap __RPC_FAR *p);


void __RPC_STUB ITextArea_get_wrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ITextArea_focus_Proxy( 
    ITextArea __RPC_FAR * This);


void __RPC_STUB ITextArea_focus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ITextArea_blur_Proxy( 
    ITextArea __RPC_FAR * This);


void __RPC_STUB ITextArea_blur_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE ITextArea_select_Proxy( 
    ITextArea __RPC_FAR * This);


void __RPC_STUB ITextArea_select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ITextArea_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_InputText;

class InputText;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_TextArea;

class TextArea;
#endif

#ifndef __InputButtonEvents_DISPINTERFACE_DEFINED__
#define __InputButtonEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: InputButtonEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_InputButtonEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface InputButtonEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct InputButtonEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            InputButtonEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            InputButtonEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            InputButtonEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            InputButtonEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            InputButtonEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            InputButtonEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            InputButtonEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } InputButtonEventsVtbl;

    interface InputButtonEvents
    {
        CONST_VTBL struct InputButtonEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define InputButtonEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define InputButtonEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define InputButtonEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define InputButtonEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define InputButtonEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define InputButtonEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define InputButtonEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __InputButtonEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IInputReset_INTERFACE_DEFINED__
#define __IInputReset_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IInputReset
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IInputReset;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IInputReset : public IInputHidden
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_language( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_language( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onClick( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onClick( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE click( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInputResetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IInputReset __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IInputReset __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IInputReset __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IInputReset __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IInputReset __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IInputReset __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IInputReset __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IInputReset __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IInputReset __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IInputReset __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IInputReset __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IInputReset __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IInputReset __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IInputReset __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IInputReset __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IInputReset __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IInputReset __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_language )( 
            IInputReset __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_language )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onClick )( 
            IInputReset __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onClick )( 
            IInputReset __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *click )( 
            IInputReset __RPC_FAR * This);
        
        END_INTERFACE
    } IInputResetVtbl;

    interface IInputReset
    {
        CONST_VTBL struct IInputResetVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInputReset_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IInputReset_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IInputReset_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IInputReset_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IInputReset_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IInputReset_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IInputReset_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IInputReset_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IInputReset_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IInputReset_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IInputReset_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IInputReset_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IInputReset_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IInputReset_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IInputReset_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IInputReset_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IInputReset_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IInputReset_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IInputReset_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IInputReset_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IInputReset_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IInputReset_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IInputReset_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IInputReset_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IInputReset_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IInputReset_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IInputReset_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IInputReset_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IInputReset_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IInputReset_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IInputReset_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)


#define IInputReset_put_language(This,v)	\
    (This)->lpVtbl -> put_language(This,v)

#define IInputReset_get_language(This,p)	\
    (This)->lpVtbl -> get_language(This,p)

#define IInputReset_put_onClick(This,v)	\
    (This)->lpVtbl -> put_onClick(This,v)

#define IInputReset_get_onClick(This,p)	\
    (This)->lpVtbl -> get_onClick(This,p)

#define IInputReset_click(This)	\
    (This)->lpVtbl -> click(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IInputReset_put_language_Proxy( 
    IInputReset __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IInputReset_put_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IInputReset_get_language_Proxy( 
    IInputReset __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IInputReset_get_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IInputReset_put_onClick_Proxy( 
    IInputReset __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IInputReset_put_onClick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IInputReset_get_onClick_Proxy( 
    IInputReset __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IInputReset_get_onClick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IInputReset_click_Proxy( 
    IInputReset __RPC_FAR * This);


void __RPC_STUB IInputReset_click_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IInputReset_INTERFACE_DEFINED__ */


#ifndef __IInputSubmit_INTERFACE_DEFINED__
#define __IInputSubmit_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IInputSubmit
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IInputSubmit;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IInputSubmit : public IInputReset
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IInputSubmitVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IInputSubmit __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IInputSubmit __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IInputSubmit __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IInputSubmit __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IInputSubmit __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IInputSubmit __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IInputSubmit __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IInputSubmit __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IInputSubmit __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IInputSubmit __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IInputSubmit __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IInputSubmit __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IInputSubmit __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IInputSubmit __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IInputSubmit __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IInputSubmit __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IInputSubmit __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_language )( 
            IInputSubmit __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_language )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onClick )( 
            IInputSubmit __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onClick )( 
            IInputSubmit __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *click )( 
            IInputSubmit __RPC_FAR * This);
        
        END_INTERFACE
    } IInputSubmitVtbl;

    interface IInputSubmit
    {
        CONST_VTBL struct IInputSubmitVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInputSubmit_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IInputSubmit_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IInputSubmit_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IInputSubmit_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IInputSubmit_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IInputSubmit_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IInputSubmit_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IInputSubmit_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IInputSubmit_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IInputSubmit_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IInputSubmit_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IInputSubmit_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IInputSubmit_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IInputSubmit_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IInputSubmit_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IInputSubmit_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IInputSubmit_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IInputSubmit_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IInputSubmit_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IInputSubmit_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IInputSubmit_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IInputSubmit_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IInputSubmit_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IInputSubmit_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IInputSubmit_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IInputSubmit_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IInputSubmit_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IInputSubmit_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IInputSubmit_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IInputSubmit_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IInputSubmit_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)


#define IInputSubmit_put_language(This,v)	\
    (This)->lpVtbl -> put_language(This,v)

#define IInputSubmit_get_language(This,p)	\
    (This)->lpVtbl -> get_language(This,p)

#define IInputSubmit_put_onClick(This,v)	\
    (This)->lpVtbl -> put_onClick(This,v)

#define IInputSubmit_get_onClick(This,p)	\
    (This)->lpVtbl -> get_onClick(This,p)

#define IInputSubmit_click(This)	\
    (This)->lpVtbl -> click(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInputSubmit_INTERFACE_DEFINED__ */


#ifndef __IInputButton_INTERFACE_DEFINED__
#define __IInputButton_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IInputButton
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IInputButton;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IInputButton : public IInputSubmit
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IInputButtonVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IInputButton __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IInputButton __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IInputButton __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IInputButton __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IInputButton __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IInputButton __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IInputButton __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IInputButton __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IInputButton __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IInputButton __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IInputButton __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IInputButton __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IInputButton __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IInputButton __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IInputButton __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IInputButton __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IInputButton __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_language )( 
            IInputButton __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_language )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onClick )( 
            IInputButton __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onClick )( 
            IInputButton __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *click )( 
            IInputButton __RPC_FAR * This);
        
        END_INTERFACE
    } IInputButtonVtbl;

    interface IInputButton
    {
        CONST_VTBL struct IInputButtonVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInputButton_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IInputButton_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IInputButton_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IInputButton_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IInputButton_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IInputButton_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IInputButton_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IInputButton_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IInputButton_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IInputButton_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IInputButton_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IInputButton_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IInputButton_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IInputButton_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IInputButton_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IInputButton_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IInputButton_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IInputButton_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IInputButton_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IInputButton_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IInputButton_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IInputButton_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IInputButton_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IInputButton_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IInputButton_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IInputButton_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IInputButton_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IInputButton_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IInputButton_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IInputButton_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IInputButton_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)


#define IInputButton_put_language(This,v)	\
    (This)->lpVtbl -> put_language(This,v)

#define IInputButton_get_language(This,p)	\
    (This)->lpVtbl -> get_language(This,p)

#define IInputButton_put_onClick(This,v)	\
    (This)->lpVtbl -> put_onClick(This,v)

#define IInputButton_get_onClick(This,p)	\
    (This)->lpVtbl -> get_onClick(This,p)

#define IInputButton_click(This)	\
    (This)->lpVtbl -> click(This)



#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInputButton_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_InputBtn;

class InputBtn;
#endif

#ifndef __MarqueeEvents_DISPINTERFACE_DEFINED__
#define __MarqueeEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: MarqueeEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_MarqueeEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface MarqueeEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct MarqueeEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            MarqueeEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            MarqueeEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            MarqueeEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            MarqueeEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            MarqueeEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            MarqueeEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            MarqueeEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } MarqueeEventsVtbl;

    interface MarqueeEvents
    {
        CONST_VTBL struct MarqueeEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MarqueeEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define MarqueeEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define MarqueeEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define MarqueeEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define MarqueeEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define MarqueeEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define MarqueeEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __MarqueeEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IMarquee_INTERFACE_DEFINED__
#define __IMarquee_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IMarquee
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IMarquee;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IMarquee : public IControlElement
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_bgColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bgColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlControlAlign v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_scrollDelay( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollDelay( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_direction( 
            /* [in] */ htmlDirection v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_direction( 
            /* [out][retval] */ htmlDirection __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_scrollAmount( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_scrollAmount( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_loop( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_loop( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_vspace( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_vspace( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_hspace( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hspace( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE start( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE stop( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMarqueeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IMarquee __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IMarquee __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IMarquee __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IMarquee __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IMarquee __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IMarquee __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_bgColor )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_bgColor )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ htmlControlAlign v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_scrollDelay )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_scrollDelay )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_direction )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ htmlDirection v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_direction )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ htmlDirection __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_scrollAmount )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_scrollAmount )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_loop )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_loop )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_vspace )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_vspace )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_hspace )( 
            IMarquee __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_hspace )( 
            IMarquee __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *start )( 
            IMarquee __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *stop )( 
            IMarquee __RPC_FAR * This);
        
        END_INTERFACE
    } IMarqueeVtbl;

    interface IMarquee
    {
        CONST_VTBL struct IMarqueeVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMarquee_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IMarquee_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IMarquee_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IMarquee_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IMarquee_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IMarquee_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IMarquee_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IMarquee_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IMarquee_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IMarquee_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IMarquee_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IMarquee_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IMarquee_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IMarquee_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IMarquee_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IMarquee_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IMarquee_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IMarquee_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IMarquee_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IMarquee_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IMarquee_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IMarquee_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IMarquee_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IMarquee_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IMarquee_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IMarquee_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IMarquee_put_bgColor(This,v)	\
    (This)->lpVtbl -> put_bgColor(This,v)

#define IMarquee_get_bgColor(This,p)	\
    (This)->lpVtbl -> get_bgColor(This,p)

#define IMarquee_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IMarquee_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IMarquee_put_scrollDelay(This,v)	\
    (This)->lpVtbl -> put_scrollDelay(This,v)

#define IMarquee_get_scrollDelay(This,p)	\
    (This)->lpVtbl -> get_scrollDelay(This,p)

#define IMarquee_put_direction(This,v)	\
    (This)->lpVtbl -> put_direction(This,v)

#define IMarquee_get_direction(This,p)	\
    (This)->lpVtbl -> get_direction(This,p)

#define IMarquee_put_scrollAmount(This,v)	\
    (This)->lpVtbl -> put_scrollAmount(This,v)

#define IMarquee_get_scrollAmount(This,p)	\
    (This)->lpVtbl -> get_scrollAmount(This,p)

#define IMarquee_put_loop(This,v)	\
    (This)->lpVtbl -> put_loop(This,v)

#define IMarquee_get_loop(This,p)	\
    (This)->lpVtbl -> get_loop(This,p)

#define IMarquee_put_vspace(This,v)	\
    (This)->lpVtbl -> put_vspace(This,v)

#define IMarquee_get_vspace(This,p)	\
    (This)->lpVtbl -> get_vspace(This,p)

#define IMarquee_put_hspace(This,v)	\
    (This)->lpVtbl -> put_hspace(This,v)

#define IMarquee_get_hspace(This,p)	\
    (This)->lpVtbl -> get_hspace(This,p)

#define IMarquee_start(This)	\
    (This)->lpVtbl -> start(This)

#define IMarquee_stop(This)	\
    (This)->lpVtbl -> stop(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IMarquee_put_bgColor_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IMarquee_put_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IMarquee_get_bgColor_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IMarquee_get_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IMarquee_put_align_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [in] */ htmlControlAlign v);


void __RPC_STUB IMarquee_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IMarquee_get_align_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [out][retval] */ htmlControlAlign __RPC_FAR *p);


void __RPC_STUB IMarquee_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IMarquee_put_scrollDelay_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IMarquee_put_scrollDelay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IMarquee_get_scrollDelay_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IMarquee_get_scrollDelay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IMarquee_put_direction_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [in] */ htmlDirection v);


void __RPC_STUB IMarquee_put_direction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IMarquee_get_direction_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [out][retval] */ htmlDirection __RPC_FAR *p);


void __RPC_STUB IMarquee_get_direction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IMarquee_put_scrollAmount_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IMarquee_put_scrollAmount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IMarquee_get_scrollAmount_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IMarquee_get_scrollAmount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IMarquee_put_loop_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IMarquee_put_loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IMarquee_get_loop_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IMarquee_get_loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IMarquee_put_vspace_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IMarquee_put_vspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IMarquee_get_vspace_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IMarquee_get_vspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IMarquee_put_hspace_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IMarquee_put_hspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IMarquee_get_hspace_Proxy( 
    IMarquee __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IMarquee_get_hspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMarquee_start_Proxy( 
    IMarquee __RPC_FAR * This);


void __RPC_STUB IMarquee_start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IMarquee_stop_Proxy( 
    IMarquee __RPC_FAR * This);


void __RPC_STUB IMarquee_stop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMarquee_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_Marquee;

class Marquee;
#endif

#ifndef __CheckboxElementEvents_DISPINTERFACE_DEFINED__
#define __CheckboxElementEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: CheckboxElementEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_CheckboxElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface CheckboxElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct CheckboxElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            CheckboxElementEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            CheckboxElementEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            CheckboxElementEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            CheckboxElementEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            CheckboxElementEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            CheckboxElementEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            CheckboxElementEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } CheckboxElementEventsVtbl;

    interface CheckboxElementEvents
    {
        CONST_VTBL struct CheckboxElementEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CheckboxElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CheckboxElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CheckboxElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CheckboxElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CheckboxElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CheckboxElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CheckboxElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __CheckboxElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __ICheckboxElement_INTERFACE_DEFINED__
#define __ICheckboxElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ICheckboxElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ICheckboxElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ICheckboxElement : public IControlElement
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ VARIANT __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_checked( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_checked( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_defaultChecked( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_defaultChecked( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_language( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_language( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onClick( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onClick( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE click( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICheckboxElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ICheckboxElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ICheckboxElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            ICheckboxElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_checked )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_checked )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_defaultChecked )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_defaultChecked )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_language )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_language )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onClick )( 
            ICheckboxElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onClick )( 
            ICheckboxElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *click )( 
            ICheckboxElement __RPC_FAR * This);
        
        END_INTERFACE
    } ICheckboxElementVtbl;

    interface ICheckboxElement
    {
        CONST_VTBL struct ICheckboxElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICheckboxElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ICheckboxElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ICheckboxElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ICheckboxElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ICheckboxElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ICheckboxElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ICheckboxElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ICheckboxElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ICheckboxElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ICheckboxElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ICheckboxElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ICheckboxElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ICheckboxElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ICheckboxElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ICheckboxElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ICheckboxElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ICheckboxElement_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define ICheckboxElement_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define ICheckboxElement_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define ICheckboxElement_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define ICheckboxElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define ICheckboxElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define ICheckboxElement_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define ICheckboxElement_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define ICheckboxElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define ICheckboxElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define ICheckboxElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define ICheckboxElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define ICheckboxElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define ICheckboxElement_put_checked(This,v)	\
    (This)->lpVtbl -> put_checked(This,v)

#define ICheckboxElement_get_checked(This,p)	\
    (This)->lpVtbl -> get_checked(This,p)

#define ICheckboxElement_put_defaultChecked(This,v)	\
    (This)->lpVtbl -> put_defaultChecked(This,v)

#define ICheckboxElement_get_defaultChecked(This,p)	\
    (This)->lpVtbl -> get_defaultChecked(This,p)

#define ICheckboxElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define ICheckboxElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define ICheckboxElement_put_language(This,v)	\
    (This)->lpVtbl -> put_language(This,v)

#define ICheckboxElement_get_language(This,p)	\
    (This)->lpVtbl -> get_language(This,p)

#define ICheckboxElement_put_onClick(This,v)	\
    (This)->lpVtbl -> put_onClick(This,v)

#define ICheckboxElement_get_onClick(This,p)	\
    (This)->lpVtbl -> get_onClick(This,p)

#define ICheckboxElement_click(This)	\
    (This)->lpVtbl -> click(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_get_type_Proxy( 
    ICheckboxElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT __RPC_FAR *p);


void __RPC_STUB ICheckboxElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_put_name_Proxy( 
    ICheckboxElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ICheckboxElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_get_name_Proxy( 
    ICheckboxElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ICheckboxElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_put_checked_Proxy( 
    ICheckboxElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB ICheckboxElement_put_checked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_get_checked_Proxy( 
    ICheckboxElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB ICheckboxElement_get_checked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_put_defaultChecked_Proxy( 
    ICheckboxElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB ICheckboxElement_put_defaultChecked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_get_defaultChecked_Proxy( 
    ICheckboxElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB ICheckboxElement_get_defaultChecked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_put_value_Proxy( 
    ICheckboxElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ICheckboxElement_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_get_value_Proxy( 
    ICheckboxElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ICheckboxElement_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_put_language_Proxy( 
    ICheckboxElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ICheckboxElement_put_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_get_language_Proxy( 
    ICheckboxElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ICheckboxElement_get_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_put_onClick_Proxy( 
    ICheckboxElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ICheckboxElement_put_onClick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_get_onClick_Proxy( 
    ICheckboxElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ICheckboxElement_get_onClick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ICheckboxElement_click_Proxy( 
    ICheckboxElement __RPC_FAR * This);


void __RPC_STUB ICheckboxElement_click_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ICheckboxElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CheckboxElement;

class CheckboxElement;
#endif

#ifndef __RadioElementEvents_DISPINTERFACE_DEFINED__
#define __RadioElementEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: RadioElementEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_RadioElementEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface RadioElementEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct RadioElementEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            RadioElementEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            RadioElementEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            RadioElementEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            RadioElementEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            RadioElementEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            RadioElementEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            RadioElementEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } RadioElementEventsVtbl;

    interface RadioElementEvents
    {
        CONST_VTBL struct RadioElementEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define RadioElementEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define RadioElementEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define RadioElementEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define RadioElementEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define RadioElementEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define RadioElementEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define RadioElementEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __RadioElementEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IRadioElement_INTERFACE_DEFINED__
#define __IRadioElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IRadioElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IRadioElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IRadioElement : public ICheckboxElement
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IRadioElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IRadioElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IRadioElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IRadioElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IRadioElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IRadioElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IRadioElement __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_checked )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_checked )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_defaultChecked )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_defaultChecked )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_language )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_language )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onClick )( 
            IRadioElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onClick )( 
            IRadioElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *click )( 
            IRadioElement __RPC_FAR * This);
        
        END_INTERFACE
    } IRadioElementVtbl;

    interface IRadioElement
    {
        CONST_VTBL struct IRadioElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRadioElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRadioElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRadioElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRadioElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IRadioElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IRadioElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IRadioElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IRadioElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IRadioElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IRadioElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IRadioElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IRadioElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IRadioElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IRadioElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IRadioElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IRadioElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IRadioElement_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IRadioElement_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IRadioElement_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IRadioElement_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IRadioElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IRadioElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IRadioElement_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IRadioElement_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IRadioElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IRadioElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IRadioElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#define IRadioElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IRadioElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IRadioElement_put_checked(This,v)	\
    (This)->lpVtbl -> put_checked(This,v)

#define IRadioElement_get_checked(This,p)	\
    (This)->lpVtbl -> get_checked(This,p)

#define IRadioElement_put_defaultChecked(This,v)	\
    (This)->lpVtbl -> put_defaultChecked(This,v)

#define IRadioElement_get_defaultChecked(This,p)	\
    (This)->lpVtbl -> get_defaultChecked(This,p)

#define IRadioElement_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IRadioElement_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IRadioElement_put_language(This,v)	\
    (This)->lpVtbl -> put_language(This,v)

#define IRadioElement_get_language(This,p)	\
    (This)->lpVtbl -> get_language(This,p)

#define IRadioElement_put_onClick(This,v)	\
    (This)->lpVtbl -> put_onClick(This,v)

#define IRadioElement_get_onClick(This,p)	\
    (This)->lpVtbl -> get_onClick(This,p)

#define IRadioElement_click(This)	\
    (This)->lpVtbl -> click(This)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRadioElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_RadioElement;

class RadioElement;
#endif

#ifndef __IInputElement_INTERFACE_DEFINED__
#define __IInputElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IInputElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IInputElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IInputElement : public IControlElement
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IInputElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IInputElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IInputElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IInputElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IInputElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IInputElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IInputElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IInputElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IInputElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IInputElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IInputElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IInputElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IInputElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IInputElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IInputElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IInputElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IInputElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IInputElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IInputElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IInputElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IInputElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IInputElement __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IInputElement __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IInputElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IInputElement __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IInputElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IInputElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        END_INTERFACE
    } IInputElementVtbl;

    interface IInputElement
    {
        CONST_VTBL struct IInputElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInputElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IInputElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IInputElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IInputElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IInputElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IInputElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IInputElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IInputElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IInputElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IInputElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IInputElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IInputElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IInputElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IInputElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IInputElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IInputElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IInputElement_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IInputElement_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IInputElement_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IInputElement_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IInputElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IInputElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IInputElement_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IInputElement_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IInputElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IInputElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInputElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_Input;

class Input;
#endif

#ifndef __ITitleElement_INTERFACE_DEFINED__
#define __ITitleElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ITitleElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ITitleElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ITitleElement : public IElement
    {
    public:
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_text( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_text( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITitleElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ITitleElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ITitleElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ITitleElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ITitleElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ITitleElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ITitleElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ITitleElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ITitleElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ITitleElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ITitleElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ITitleElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ITitleElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ITitleElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ITitleElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ITitleElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ITitleElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_text )( 
            ITitleElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_text )( 
            ITitleElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } ITitleElementVtbl;

    interface ITitleElement
    {
        CONST_VTBL struct ITitleElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITitleElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ITitleElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ITitleElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ITitleElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ITitleElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ITitleElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ITitleElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ITitleElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ITitleElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ITitleElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ITitleElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ITitleElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ITitleElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ITitleElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ITitleElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ITitleElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ITitleElement_put_text(This,v)	\
    (This)->lpVtbl -> put_text(This,v)

#define ITitleElement_get_text(This,p)	\
    (This)->lpVtbl -> get_text(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE ITitleElement_put_text_Proxy( 
    ITitleElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITitleElement_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE ITitleElement_get_text_Proxy( 
    ITitleElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITitleElement_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ITitleElement_INTERFACE_DEFINED__ */


#ifndef __IMetaElement_INTERFACE_DEFINED__
#define __IMetaElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IMetaElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IMetaElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IMetaElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_httpEquiv( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_httpEquiv( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_content( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_content( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_url( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_url( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMetaElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IMetaElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IMetaElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IMetaElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IMetaElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IMetaElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IMetaElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IMetaElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IMetaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IMetaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IMetaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IMetaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IMetaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IMetaElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IMetaElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IMetaElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IMetaElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_httpEquiv )( 
            IMetaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_httpEquiv )( 
            IMetaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_content )( 
            IMetaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_content )( 
            IMetaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IMetaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IMetaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_url )( 
            IMetaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_url )( 
            IMetaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IMetaElementVtbl;

    interface IMetaElement
    {
        CONST_VTBL struct IMetaElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMetaElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IMetaElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IMetaElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IMetaElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IMetaElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IMetaElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IMetaElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IMetaElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IMetaElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IMetaElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IMetaElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IMetaElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IMetaElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IMetaElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IMetaElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IMetaElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IMetaElement_put_httpEquiv(This,v)	\
    (This)->lpVtbl -> put_httpEquiv(This,v)

#define IMetaElement_get_httpEquiv(This,p)	\
    (This)->lpVtbl -> get_httpEquiv(This,p)

#define IMetaElement_put_content(This,v)	\
    (This)->lpVtbl -> put_content(This,v)

#define IMetaElement_get_content(This,p)	\
    (This)->lpVtbl -> get_content(This,p)

#define IMetaElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IMetaElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IMetaElement_put_url(This,v)	\
    (This)->lpVtbl -> put_url(This,v)

#define IMetaElement_get_url(This,p)	\
    (This)->lpVtbl -> get_url(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IMetaElement_put_httpEquiv_Proxy( 
    IMetaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IMetaElement_put_httpEquiv_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IMetaElement_get_httpEquiv_Proxy( 
    IMetaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IMetaElement_get_httpEquiv_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IMetaElement_put_content_Proxy( 
    IMetaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IMetaElement_put_content_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IMetaElement_get_content_Proxy( 
    IMetaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IMetaElement_get_content_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IMetaElement_put_name_Proxy( 
    IMetaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IMetaElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IMetaElement_get_name_Proxy( 
    IMetaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IMetaElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IMetaElement_put_url_Proxy( 
    IMetaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IMetaElement_put_url_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IMetaElement_get_url_Proxy( 
    IMetaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IMetaElement_get_url_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMetaElement_INTERFACE_DEFINED__ */


#ifndef __IBaseElement_INTERFACE_DEFINED__
#define __IBaseElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IBaseElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IBaseElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IBaseElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_href( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_href( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_target( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_target( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBaseElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IBaseElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IBaseElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IBaseElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IBaseElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IBaseElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IBaseElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IBaseElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IBaseElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IBaseElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IBaseElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IBaseElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IBaseElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IBaseElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IBaseElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IBaseElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IBaseElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_href )( 
            IBaseElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_href )( 
            IBaseElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_target )( 
            IBaseElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_target )( 
            IBaseElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IBaseElementVtbl;

    interface IBaseElement
    {
        CONST_VTBL struct IBaseElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBaseElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IBaseElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IBaseElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IBaseElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IBaseElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IBaseElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IBaseElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IBaseElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IBaseElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IBaseElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IBaseElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IBaseElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IBaseElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IBaseElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IBaseElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IBaseElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IBaseElement_put_href(This,v)	\
    (This)->lpVtbl -> put_href(This,v)

#define IBaseElement_get_href(This,p)	\
    (This)->lpVtbl -> get_href(This,p)

#define IBaseElement_put_target(This,v)	\
    (This)->lpVtbl -> put_target(This,v)

#define IBaseElement_get_target(This,p)	\
    (This)->lpVtbl -> get_target(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBaseElement_put_href_Proxy( 
    IBaseElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBaseElement_put_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBaseElement_get_href_Proxy( 
    IBaseElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBaseElement_get_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBaseElement_put_target_Proxy( 
    IBaseElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBaseElement_put_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBaseElement_get_target_Proxy( 
    IBaseElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBaseElement_get_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IBaseElement_INTERFACE_DEFINED__ */


#ifndef __ILinkElement_INTERFACE_DEFINED__
#define __ILinkElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ILinkElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ILinkElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ILinkElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_href( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_href( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_title( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_title( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_rel( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_rel( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_ref( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_ref( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_type( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_type( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ILinkElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ILinkElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ILinkElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ILinkElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ILinkElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ILinkElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ILinkElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ILinkElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ILinkElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ILinkElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ILinkElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ILinkElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ILinkElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ILinkElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ILinkElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ILinkElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ILinkElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_href )( 
            ILinkElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_href )( 
            ILinkElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            ILinkElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            ILinkElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_rel )( 
            ILinkElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_rel )( 
            ILinkElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_ref )( 
            ILinkElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_ref )( 
            ILinkElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_type )( 
            ILinkElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_type )( 
            ILinkElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } ILinkElementVtbl;

    interface ILinkElement
    {
        CONST_VTBL struct ILinkElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ILinkElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ILinkElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ILinkElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ILinkElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ILinkElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ILinkElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ILinkElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ILinkElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ILinkElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ILinkElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ILinkElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ILinkElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ILinkElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ILinkElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ILinkElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ILinkElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ILinkElement_put_href(This,v)	\
    (This)->lpVtbl -> put_href(This,v)

#define ILinkElement_get_href(This,p)	\
    (This)->lpVtbl -> get_href(This,p)

#define ILinkElement_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define ILinkElement_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define ILinkElement_put_rel(This,v)	\
    (This)->lpVtbl -> put_rel(This,v)

#define ILinkElement_get_rel(This,p)	\
    (This)->lpVtbl -> get_rel(This,p)

#define ILinkElement_put_ref(This,v)	\
    (This)->lpVtbl -> put_ref(This,v)

#define ILinkElement_get_ref(This,p)	\
    (This)->lpVtbl -> get_ref(This,p)

#define ILinkElement_put_type(This,v)	\
    (This)->lpVtbl -> put_type(This,v)

#define ILinkElement_get_type(This,p)	\
    (This)->lpVtbl -> get_type(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ILinkElement_put_href_Proxy( 
    ILinkElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ILinkElement_put_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ILinkElement_get_href_Proxy( 
    ILinkElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ILinkElement_get_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ILinkElement_put_title_Proxy( 
    ILinkElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ILinkElement_put_title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ILinkElement_get_title_Proxy( 
    ILinkElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ILinkElement_get_title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ILinkElement_put_rel_Proxy( 
    ILinkElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ILinkElement_put_rel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ILinkElement_get_rel_Proxy( 
    ILinkElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ILinkElement_get_rel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ILinkElement_put_ref_Proxy( 
    ILinkElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ILinkElement_put_ref_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ILinkElement_get_ref_Proxy( 
    ILinkElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ILinkElement_get_ref_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ILinkElement_put_type_Proxy( 
    ILinkElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ILinkElement_put_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ILinkElement_get_type_Proxy( 
    ILinkElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ILinkElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ILinkElement_INTERFACE_DEFINED__ */


#ifndef __IIsIndexElement_INTERFACE_DEFINED__
#define __IIsIndexElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IIsIndexElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IIsIndexElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IIsIndexElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_prompt( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_prompt( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_action( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_action( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IIsIndexElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IIsIndexElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IIsIndexElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IIsIndexElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IIsIndexElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IIsIndexElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IIsIndexElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IIsIndexElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IIsIndexElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IIsIndexElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IIsIndexElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IIsIndexElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IIsIndexElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IIsIndexElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IIsIndexElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IIsIndexElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IIsIndexElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_prompt )( 
            IIsIndexElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_prompt )( 
            IIsIndexElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_action )( 
            IIsIndexElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_action )( 
            IIsIndexElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IIsIndexElementVtbl;

    interface IIsIndexElement
    {
        CONST_VTBL struct IIsIndexElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IIsIndexElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IIsIndexElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IIsIndexElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IIsIndexElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IIsIndexElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IIsIndexElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IIsIndexElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IIsIndexElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IIsIndexElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IIsIndexElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IIsIndexElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IIsIndexElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IIsIndexElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IIsIndexElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IIsIndexElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IIsIndexElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IIsIndexElement_put_prompt(This,v)	\
    (This)->lpVtbl -> put_prompt(This,v)

#define IIsIndexElement_get_prompt(This,p)	\
    (This)->lpVtbl -> get_prompt(This,p)

#define IIsIndexElement_put_action(This,v)	\
    (This)->lpVtbl -> put_action(This,v)

#define IIsIndexElement_get_action(This,p)	\
    (This)->lpVtbl -> get_action(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IIsIndexElement_put_prompt_Proxy( 
    IIsIndexElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IIsIndexElement_put_prompt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IIsIndexElement_get_prompt_Proxy( 
    IIsIndexElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IIsIndexElement_get_prompt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IIsIndexElement_put_action_Proxy( 
    IIsIndexElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IIsIndexElement_put_action_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IIsIndexElement_get_action_Proxy( 
    IIsIndexElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IIsIndexElement_get_action_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IIsIndexElement_INTERFACE_DEFINED__ */


#ifndef __INextIdElement_INTERFACE_DEFINED__
#define __INextIdElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: INextIdElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_INextIdElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface INextIdElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_n( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_n( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct INextIdElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            INextIdElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            INextIdElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            INextIdElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            INextIdElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            INextIdElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            INextIdElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            INextIdElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            INextIdElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            INextIdElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            INextIdElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            INextIdElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            INextIdElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            INextIdElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            INextIdElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            INextIdElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            INextIdElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_n )( 
            INextIdElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_n )( 
            INextIdElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } INextIdElementVtbl;

    interface INextIdElement
    {
        CONST_VTBL struct INextIdElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define INextIdElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define INextIdElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define INextIdElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define INextIdElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define INextIdElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define INextIdElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define INextIdElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define INextIdElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define INextIdElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define INextIdElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define INextIdElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define INextIdElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define INextIdElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define INextIdElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define INextIdElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define INextIdElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define INextIdElement_put_n(This,v)	\
    (This)->lpVtbl -> put_n(This,v)

#define INextIdElement_get_n(This,p)	\
    (This)->lpVtbl -> get_n(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE INextIdElement_put_n_Proxy( 
    INextIdElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB INextIdElement_put_n_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE INextIdElement_get_n_Proxy( 
    INextIdElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB INextIdElement_get_n_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __INextIdElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_TitleElement;

class TitleElement;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_MetaElement;

class MetaElement;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_BaseElement;

class BaseElement;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_LinkElement;

class LinkElement;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_IsIndexElement;

class IsIndexElement;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_NextIdElement;

class NextIdElement;
#endif

#ifndef __IBaseFontElement_INTERFACE_DEFINED__
#define __IBaseFontElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IBaseFontElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IBaseFontElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IBaseFontElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_color( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_color( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_face( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_face( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_size( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_size( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBaseFontElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IBaseFontElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IBaseFontElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IBaseFontElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IBaseFontElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IBaseFontElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IBaseFontElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IBaseFontElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IBaseFontElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IBaseFontElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IBaseFontElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IBaseFontElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IBaseFontElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IBaseFontElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IBaseFontElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IBaseFontElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IBaseFontElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_color )( 
            IBaseFontElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_color )( 
            IBaseFontElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_face )( 
            IBaseFontElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_face )( 
            IBaseFontElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_size )( 
            IBaseFontElement __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_size )( 
            IBaseFontElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        END_INTERFACE
    } IBaseFontElementVtbl;

    interface IBaseFontElement
    {
        CONST_VTBL struct IBaseFontElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBaseFontElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IBaseFontElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IBaseFontElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IBaseFontElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IBaseFontElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IBaseFontElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IBaseFontElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IBaseFontElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IBaseFontElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IBaseFontElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IBaseFontElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IBaseFontElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IBaseFontElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IBaseFontElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IBaseFontElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IBaseFontElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IBaseFontElement_put_color(This,v)	\
    (This)->lpVtbl -> put_color(This,v)

#define IBaseFontElement_get_color(This,p)	\
    (This)->lpVtbl -> get_color(This,p)

#define IBaseFontElement_put_face(This,v)	\
    (This)->lpVtbl -> put_face(This,v)

#define IBaseFontElement_get_face(This,p)	\
    (This)->lpVtbl -> get_face(This,p)

#define IBaseFontElement_put_size(This,v)	\
    (This)->lpVtbl -> put_size(This,v)

#define IBaseFontElement_get_size(This,p)	\
    (This)->lpVtbl -> get_size(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBaseFontElement_put_color_Proxy( 
    IBaseFontElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBaseFontElement_put_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBaseFontElement_get_color_Proxy( 
    IBaseFontElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBaseFontElement_get_color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBaseFontElement_put_face_Proxy( 
    IBaseFontElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IBaseFontElement_put_face_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBaseFontElement_get_face_Proxy( 
    IBaseFontElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IBaseFontElement_get_face_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IBaseFontElement_put_size_Proxy( 
    IBaseFontElement __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IBaseFontElement_put_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IBaseFontElement_get_size_Proxy( 
    IBaseFontElement __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IBaseFontElement_get_size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IBaseFontElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_BaseFontElement;

class BaseFontElement;
#endif

#ifndef __IUnknownElement_INTERFACE_DEFINED__
#define __IUnknownElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IUnknownElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IUnknownElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IUnknownElement : public IElement
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IUnknownElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IUnknownElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IUnknownElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IUnknownElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IUnknownElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IUnknownElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IUnknownElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IUnknownElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IUnknownElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IUnknownElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IUnknownElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IUnknownElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IUnknownElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IUnknownElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IUnknownElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IUnknownElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IUnknownElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        END_INTERFACE
    } IUnknownElementVtbl;

    interface IUnknownElement
    {
        CONST_VTBL struct IUnknownElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IUnknownElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IUnknownElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IUnknownElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IUnknownElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IUnknownElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IUnknownElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IUnknownElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IUnknownElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IUnknownElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IUnknownElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IUnknownElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IUnknownElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IUnknownElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IUnknownElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IUnknownElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IUnknownElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IUnknownElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_UnknownElement;

class UnknownElement;
#endif

#ifndef __IPhraseElement_INTERFACE_DEFINED__
#define __IPhraseElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IPhraseElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IPhraseElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IPhraseElement : public IElement
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IPhraseElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IPhraseElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IPhraseElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IPhraseElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IPhraseElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IPhraseElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IPhraseElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IPhraseElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IPhraseElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IPhraseElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IPhraseElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IPhraseElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IPhraseElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IPhraseElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IPhraseElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IPhraseElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IPhraseElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        END_INTERFACE
    } IPhraseElementVtbl;

    interface IPhraseElement
    {
        CONST_VTBL struct IPhraseElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPhraseElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPhraseElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPhraseElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPhraseElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IPhraseElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IPhraseElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IPhraseElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IPhraseElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IPhraseElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IPhraseElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IPhraseElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IPhraseElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IPhraseElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IPhraseElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IPhraseElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IPhraseElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IPhraseElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_PhraseElement;

class PhraseElement;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_BlockElement;

class BlockElement;
#endif

#ifndef __ICommentElement_INTERFACE_DEFINED__
#define __ICommentElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ICommentElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ICommentElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ICommentElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_text( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_text( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_atomic( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_atomic( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICommentElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ICommentElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ICommentElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ICommentElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ICommentElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ICommentElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ICommentElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ICommentElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ICommentElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ICommentElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ICommentElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ICommentElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ICommentElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ICommentElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ICommentElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ICommentElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ICommentElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_text )( 
            ICommentElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_text )( 
            ICommentElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_atomic )( 
            ICommentElement __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_atomic )( 
            ICommentElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        END_INTERFACE
    } ICommentElementVtbl;

    interface ICommentElement
    {
        CONST_VTBL struct ICommentElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICommentElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ICommentElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ICommentElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ICommentElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ICommentElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ICommentElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ICommentElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ICommentElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ICommentElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ICommentElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ICommentElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ICommentElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ICommentElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ICommentElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ICommentElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ICommentElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ICommentElement_put_text(This,v)	\
    (This)->lpVtbl -> put_text(This,v)

#define ICommentElement_get_text(This,p)	\
    (This)->lpVtbl -> get_text(This,p)

#define ICommentElement_put_atomic(This,v)	\
    (This)->lpVtbl -> put_atomic(This,v)

#define ICommentElement_get_atomic(This,p)	\
    (This)->lpVtbl -> get_atomic(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ICommentElement_put_text_Proxy( 
    ICommentElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ICommentElement_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ICommentElement_get_text_Proxy( 
    ICommentElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ICommentElement_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE ICommentElement_put_atomic_Proxy( 
    ICommentElement __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB ICommentElement_put_atomic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE ICommentElement_get_atomic_Proxy( 
    ICommentElement __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB ICommentElement_get_atomic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ICommentElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CommentElement;

class CommentElement;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_ListElement;

class ListElement;
#endif

#ifndef __DocumentEvents_DISPINTERFACE_DEFINED__
#define __DocumentEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: DocumentEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_DocumentEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface DocumentEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DocumentEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            DocumentEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            DocumentEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            DocumentEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            DocumentEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            DocumentEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            DocumentEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            DocumentEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } DocumentEventsVtbl;

    interface DocumentEvents
    {
        CONST_VTBL struct DocumentEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DocumentEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define DocumentEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define DocumentEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define DocumentEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define DocumentEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define DocumentEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define DocumentEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DocumentEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IDocument_INTERFACE_DEFINED__
#define __IDocument_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IDocument
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IDocument : public IDispatch
    {
    public:
        virtual /* [source][id][propget] */ HRESULT STDMETHODCALLTYPE get_body( 
            /* [out][retval] */ IBodyElement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_activeElement( 
            /* [out][retval] */ VARIANT __RPC_FAR *p) = 0;
        
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_zoom( 
            /* [in] */ short v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_zoom( 
            /* [out][retval] */ short __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_all( 
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_images( 
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_applets( 
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_links( 
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_forms( 
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_anchors( 
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_title( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_title( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_scripts( 
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_designMode( 
            /* [in] */ fmMode v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_designMode( 
            /* [out][retval] */ fmMode __RPC_FAR *p) = 0;
        
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_defaultUnit( 
            /* [in] */ htmlDocUnits v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_defaultUnit( 
            /* [out][retval] */ htmlDocUnits __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_selection( 
            /* [out][retval] */ ISelectionObject __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_readyState( 
            /* [out][retval] */ htmlReadyState __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frames( 
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_embeds( 
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_plugins( 
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_aLinkColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_aLinkColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_bgColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_bgColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_fgColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_fgColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_linkColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_linkColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_vLinkColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_vLinkColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE rangeFromText( 
            /* [in] */ BSTR String,
            /* [in][defaultvalue] */ long count,
            /* [in][defaultvalue] */ long Flags,
            /* [in][optional] */ VARIANT Range,
            /* [out][retval] */ VARIANT __RPC_FAR *pdisp) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE rangeFromElement( 
            /* [in] */ IElement __RPC_FAR *Element,
            /* [out][retval] */ ITxtRange __RPC_FAR *__RPC_FAR *foundRange) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE undoAction( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE redoAction( void) = 0;
        
        virtual /* [id] */ BOOL STDMETHODCALLTYPE executeCommand( 
            /* [in] */ int comandID,
            /* [in] */ VARIANT value) = 0;
        
        virtual /* [id] */ VARIANT STDMETHODCALLTYPE queryCommandStatus( 
            /* [in] */ int comandID) = 0;
        
        virtual /* [id] */ void STDMETHODCALLTYPE cancelBubble( void) = 0;
        
        virtual /* [id][vararg] */ void STDMETHODCALLTYPE write( 
            /* [in] */ SAFEARRAY __RPC_FAR * psarray) = 0;
        
        virtual /* [id][vararg] */ void STDMETHODCALLTYPE writeln( 
            /* [in] */ SAFEARRAY __RPC_FAR * psarray) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE showModalDialog( 
            /* [in] */ BSTR dialog,
            /* [in] */ VARIANT varArgs,
            /* [out][retval] */ VARIANT __RPC_FAR *ret) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDocument __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDocument __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDocument __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IDocument __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IDocument __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IDocument __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IDocument __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [source][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_body )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ IBodyElement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_activeElement )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *p);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_zoom )( 
            IDocument __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_zoom )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_all )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_images )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_applets )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_links )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_forms )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_anchors )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IDocument __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_scripts )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_designMode )( 
            IDocument __RPC_FAR * This,
            /* [in] */ fmMode v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_designMode )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ fmMode __RPC_FAR *p);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_defaultUnit )( 
            IDocument __RPC_FAR * This,
            /* [in] */ htmlDocUnits v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_defaultUnit )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ htmlDocUnits __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_selection )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ ISelectionObject __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_readyState )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ htmlReadyState __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_frames )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_embeds )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_plugins )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_aLinkColor )( 
            IDocument __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_aLinkColor )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_bgColor )( 
            IDocument __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_bgColor )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_fgColor )( 
            IDocument __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_fgColor )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_linkColor )( 
            IDocument __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_linkColor )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_vLinkColor )( 
            IDocument __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_vLinkColor )( 
            IDocument __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *rangeFromText )( 
            IDocument __RPC_FAR * This,
            /* [in] */ BSTR String,
            /* [in][defaultvalue] */ long count,
            /* [in][defaultvalue] */ long Flags,
            /* [in][optional] */ VARIANT Range,
            /* [out][retval] */ VARIANT __RPC_FAR *pdisp);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *rangeFromElement )( 
            IDocument __RPC_FAR * This,
            /* [in] */ IElement __RPC_FAR *Element,
            /* [out][retval] */ ITxtRange __RPC_FAR *__RPC_FAR *foundRange);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *undoAction )( 
            IDocument __RPC_FAR * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *redoAction )( 
            IDocument __RPC_FAR * This);
        
        /* [id] */ BOOL ( STDMETHODCALLTYPE __RPC_FAR *executeCommand )( 
            IDocument __RPC_FAR * This,
            /* [in] */ int comandID,
            /* [in] */ VARIANT value);
        
        /* [id] */ VARIANT ( STDMETHODCALLTYPE __RPC_FAR *queryCommandStatus )( 
            IDocument __RPC_FAR * This,
            /* [in] */ int comandID);
        
        /* [id] */ void ( STDMETHODCALLTYPE __RPC_FAR *cancelBubble )( 
            IDocument __RPC_FAR * This);
        
        /* [id][vararg] */ void ( STDMETHODCALLTYPE __RPC_FAR *write )( 
            IDocument __RPC_FAR * This,
            /* [in] */ SAFEARRAY __RPC_FAR * psarray);
        
        /* [id][vararg] */ void ( STDMETHODCALLTYPE __RPC_FAR *writeln )( 
            IDocument __RPC_FAR * This,
            /* [in] */ SAFEARRAY __RPC_FAR * psarray);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *showModalDialog )( 
            IDocument __RPC_FAR * This,
            /* [in] */ BSTR dialog,
            /* [in] */ VARIANT varArgs,
            /* [out][retval] */ VARIANT __RPC_FAR *ret);
        
        END_INTERFACE
    } IDocumentVtbl;

    interface IDocument
    {
        CONST_VTBL struct IDocumentVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocument_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDocument_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDocument_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDocument_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDocument_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDocument_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDocument_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDocument_get_body(This,p)	\
    (This)->lpVtbl -> get_body(This,p)

#define IDocument_get_activeElement(This,p)	\
    (This)->lpVtbl -> get_activeElement(This,p)

#define IDocument_put_zoom(This,v)	\
    (This)->lpVtbl -> put_zoom(This,v)

#define IDocument_get_zoom(This,p)	\
    (This)->lpVtbl -> get_zoom(This,p)

#define IDocument_get_all(This,p)	\
    (This)->lpVtbl -> get_all(This,p)

#define IDocument_get_images(This,p)	\
    (This)->lpVtbl -> get_images(This,p)

#define IDocument_get_applets(This,p)	\
    (This)->lpVtbl -> get_applets(This,p)

#define IDocument_get_links(This,p)	\
    (This)->lpVtbl -> get_links(This,p)

#define IDocument_get_forms(This,p)	\
    (This)->lpVtbl -> get_forms(This,p)

#define IDocument_get_anchors(This,p)	\
    (This)->lpVtbl -> get_anchors(This,p)

#define IDocument_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IDocument_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IDocument_get_scripts(This,p)	\
    (This)->lpVtbl -> get_scripts(This,p)

#define IDocument_put_designMode(This,v)	\
    (This)->lpVtbl -> put_designMode(This,v)

#define IDocument_get_designMode(This,p)	\
    (This)->lpVtbl -> get_designMode(This,p)

#define IDocument_put_defaultUnit(This,v)	\
    (This)->lpVtbl -> put_defaultUnit(This,v)

#define IDocument_get_defaultUnit(This,p)	\
    (This)->lpVtbl -> get_defaultUnit(This,p)

#define IDocument_get_selection(This,p)	\
    (This)->lpVtbl -> get_selection(This,p)

#define IDocument_get_readyState(This,p)	\
    (This)->lpVtbl -> get_readyState(This,p)

#define IDocument_get_frames(This,p)	\
    (This)->lpVtbl -> get_frames(This,p)

#define IDocument_get_embeds(This,p)	\
    (This)->lpVtbl -> get_embeds(This,p)

#define IDocument_get_plugins(This,p)	\
    (This)->lpVtbl -> get_plugins(This,p)

#define IDocument_put_aLinkColor(This,v)	\
    (This)->lpVtbl -> put_aLinkColor(This,v)

#define IDocument_get_aLinkColor(This,p)	\
    (This)->lpVtbl -> get_aLinkColor(This,p)

#define IDocument_put_bgColor(This,v)	\
    (This)->lpVtbl -> put_bgColor(This,v)

#define IDocument_get_bgColor(This,p)	\
    (This)->lpVtbl -> get_bgColor(This,p)

#define IDocument_put_fgColor(This,v)	\
    (This)->lpVtbl -> put_fgColor(This,v)

#define IDocument_get_fgColor(This,p)	\
    (This)->lpVtbl -> get_fgColor(This,p)

#define IDocument_put_linkColor(This,v)	\
    (This)->lpVtbl -> put_linkColor(This,v)

#define IDocument_get_linkColor(This,p)	\
    (This)->lpVtbl -> get_linkColor(This,p)

#define IDocument_put_vLinkColor(This,v)	\
    (This)->lpVtbl -> put_vLinkColor(This,v)

#define IDocument_get_vLinkColor(This,p)	\
    (This)->lpVtbl -> get_vLinkColor(This,p)

#define IDocument_rangeFromText(This,String,count,Flags,Range,pdisp)	\
    (This)->lpVtbl -> rangeFromText(This,String,count,Flags,Range,pdisp)

#define IDocument_rangeFromElement(This,Element,foundRange)	\
    (This)->lpVtbl -> rangeFromElement(This,Element,foundRange)

#define IDocument_undoAction(This)	\
    (This)->lpVtbl -> undoAction(This)

#define IDocument_redoAction(This)	\
    (This)->lpVtbl -> redoAction(This)

#define IDocument_executeCommand(This,comandID,value)	\
    (This)->lpVtbl -> executeCommand(This,comandID,value)

#define IDocument_queryCommandStatus(This,comandID)	\
    (This)->lpVtbl -> queryCommandStatus(This,comandID)

#define IDocument_cancelBubble(This)	\
    (This)->lpVtbl -> cancelBubble(This)

#define IDocument_write(This,psarray)	\
    (This)->lpVtbl -> write(This,psarray)

#define IDocument_writeln(This,psarray)	\
    (This)->lpVtbl -> writeln(This,psarray)

#define IDocument_showModalDialog(This,dialog,varArgs,ret)	\
    (This)->lpVtbl -> showModalDialog(This,dialog,varArgs,ret)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [source][id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_body_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ IBodyElement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IDocument_get_body_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_activeElement_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ VARIANT __RPC_FAR *p);


void __RPC_STUB IDocument_get_activeElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IDocument_put_zoom_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ short v);


void __RPC_STUB IDocument_put_zoom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_zoom_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ short __RPC_FAR *p);


void __RPC_STUB IDocument_get_zoom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_all_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IDocument_get_all_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_images_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IDocument_get_images_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_applets_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IDocument_get_applets_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_links_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IDocument_get_links_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_forms_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IDocument_get_forms_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_anchors_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IDocument_get_anchors_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IDocument_put_title_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IDocument_put_title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_title_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IDocument_get_title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_scripts_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IDocument_get_scripts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IDocument_put_designMode_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ fmMode v);


void __RPC_STUB IDocument_put_designMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_designMode_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ fmMode __RPC_FAR *p);


void __RPC_STUB IDocument_get_designMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IDocument_put_defaultUnit_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ htmlDocUnits v);


void __RPC_STUB IDocument_put_defaultUnit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_defaultUnit_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ htmlDocUnits __RPC_FAR *p);


void __RPC_STUB IDocument_get_defaultUnit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_selection_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ ISelectionObject __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IDocument_get_selection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_readyState_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ htmlReadyState __RPC_FAR *p);


void __RPC_STUB IDocument_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_frames_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IDocument_get_frames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_embeds_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IDocument_get_embeds_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_plugins_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IDocument_get_plugins_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDocument_put_aLinkColor_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IDocument_put_aLinkColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_aLinkColor_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IDocument_get_aLinkColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDocument_put_bgColor_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IDocument_put_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_bgColor_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IDocument_get_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDocument_put_fgColor_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IDocument_put_fgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_fgColor_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IDocument_get_fgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDocument_put_linkColor_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IDocument_put_linkColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_linkColor_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IDocument_get_linkColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDocument_put_vLinkColor_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IDocument_put_vLinkColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDocument_get_vLinkColor_Proxy( 
    IDocument __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IDocument_get_vLinkColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDocument_rangeFromText_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ BSTR String,
    /* [in][defaultvalue] */ long count,
    /* [in][defaultvalue] */ long Flags,
    /* [in][optional] */ VARIANT Range,
    /* [out][retval] */ VARIANT __RPC_FAR *pdisp);


void __RPC_STUB IDocument_rangeFromText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDocument_rangeFromElement_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ IElement __RPC_FAR *Element,
    /* [out][retval] */ ITxtRange __RPC_FAR *__RPC_FAR *foundRange);


void __RPC_STUB IDocument_rangeFromElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDocument_undoAction_Proxy( 
    IDocument __RPC_FAR * This);


void __RPC_STUB IDocument_undoAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDocument_redoAction_Proxy( 
    IDocument __RPC_FAR * This);


void __RPC_STUB IDocument_redoAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ BOOL STDMETHODCALLTYPE IDocument_executeCommand_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ int comandID,
    /* [in] */ VARIANT value);


void __RPC_STUB IDocument_executeCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ VARIANT STDMETHODCALLTYPE IDocument_queryCommandStatus_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ int comandID);


void __RPC_STUB IDocument_queryCommandStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ void STDMETHODCALLTYPE IDocument_cancelBubble_Proxy( 
    IDocument __RPC_FAR * This);


void __RPC_STUB IDocument_cancelBubble_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][vararg] */ void STDMETHODCALLTYPE IDocument_write_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ SAFEARRAY __RPC_FAR * psarray);


void __RPC_STUB IDocument_write_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][vararg] */ void STDMETHODCALLTYPE IDocument_writeln_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ SAFEARRAY __RPC_FAR * psarray);


void __RPC_STUB IDocument_writeln_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDocument_showModalDialog_Proxy( 
    IDocument __RPC_FAR * This,
    /* [in] */ BSTR dialog,
    /* [in] */ VARIANT varArgs,
    /* [out][retval] */ VARIANT __RPC_FAR *ret);


void __RPC_STUB IDocument_showModalDialog_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDocument_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_HTMLDocument;

class HTMLDocument;
#endif

#ifndef __ITable_INTERFACE_DEFINED__
#define __ITable_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ITable
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ITable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ITable : public IControlElement
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_cols( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cols( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_border( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_frame( 
            /* [in] */ htmlFrame v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frame( 
            /* [out][retval] */ htmlFrame __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_rules( 
            /* [in] */ htmlRules v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_rules( 
            /* [out][retval] */ htmlRules __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cellSpacing( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cellPadding( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_background( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_background( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_bgColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bgColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_borderColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_borderColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_borderColorLight( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_borderColorLight( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_borderColorDark( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_borderColorDark( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlControlAlign v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE refresh( void) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_rows( 
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ITable __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ITable __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ITable __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ITable __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ITable __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ITable __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ITable __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ITable __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ITable __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ITable __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            ITable __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            ITable __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            ITable __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            ITable __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            ITable __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_cols )( 
            ITable __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_cols )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_border )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_frame )( 
            ITable __RPC_FAR * This,
            /* [in] */ htmlFrame v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_frame )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ htmlFrame __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_rules )( 
            ITable __RPC_FAR * This,
            /* [in] */ htmlRules v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_rules )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ htmlRules __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_cellSpacing )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_cellPadding )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_background )( 
            ITable __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_background )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_bgColor )( 
            ITable __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_bgColor )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_borderColor )( 
            ITable __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_borderColor )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_borderColorLight )( 
            ITable __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_borderColorLight )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_borderColorDark )( 
            ITable __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_borderColorDark )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            ITable __RPC_FAR * This,
            /* [in] */ htmlControlAlign v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *refresh )( 
            ITable __RPC_FAR * This);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_rows )( 
            ITable __RPC_FAR * This,
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *p);
        
        END_INTERFACE
    } ITableVtbl;

    interface ITable
    {
        CONST_VTBL struct ITableVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITable_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ITable_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ITable_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ITable_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ITable_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ITable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ITable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ITable_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ITable_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ITable_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ITable_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ITable_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ITable_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ITable_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ITable_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ITable_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ITable_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define ITable_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define ITable_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define ITable_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define ITable_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define ITable_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define ITable_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define ITable_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define ITable_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define ITable_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define ITable_put_cols(This,v)	\
    (This)->lpVtbl -> put_cols(This,v)

#define ITable_get_cols(This,p)	\
    (This)->lpVtbl -> get_cols(This,p)

#define ITable_get_border(This,p)	\
    (This)->lpVtbl -> get_border(This,p)

#define ITable_put_frame(This,v)	\
    (This)->lpVtbl -> put_frame(This,v)

#define ITable_get_frame(This,p)	\
    (This)->lpVtbl -> get_frame(This,p)

#define ITable_put_rules(This,v)	\
    (This)->lpVtbl -> put_rules(This,v)

#define ITable_get_rules(This,p)	\
    (This)->lpVtbl -> get_rules(This,p)

#define ITable_get_cellSpacing(This,p)	\
    (This)->lpVtbl -> get_cellSpacing(This,p)

#define ITable_get_cellPadding(This,p)	\
    (This)->lpVtbl -> get_cellPadding(This,p)

#define ITable_put_background(This,v)	\
    (This)->lpVtbl -> put_background(This,v)

#define ITable_get_background(This,p)	\
    (This)->lpVtbl -> get_background(This,p)

#define ITable_put_bgColor(This,v)	\
    (This)->lpVtbl -> put_bgColor(This,v)

#define ITable_get_bgColor(This,p)	\
    (This)->lpVtbl -> get_bgColor(This,p)

#define ITable_put_borderColor(This,v)	\
    (This)->lpVtbl -> put_borderColor(This,v)

#define ITable_get_borderColor(This,p)	\
    (This)->lpVtbl -> get_borderColor(This,p)

#define ITable_put_borderColorLight(This,v)	\
    (This)->lpVtbl -> put_borderColorLight(This,v)

#define ITable_get_borderColorLight(This,p)	\
    (This)->lpVtbl -> get_borderColorLight(This,p)

#define ITable_put_borderColorDark(This,v)	\
    (This)->lpVtbl -> put_borderColorDark(This,v)

#define ITable_get_borderColorDark(This,p)	\
    (This)->lpVtbl -> get_borderColorDark(This,p)

#define ITable_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define ITable_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define ITable_refresh(This)	\
    (This)->lpVtbl -> refresh(This)

#define ITable_get_rows(This,p)	\
    (This)->lpVtbl -> get_rows(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITable_put_cols_Proxy( 
    ITable __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB ITable_put_cols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITable_get_cols_Proxy( 
    ITable __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB ITable_get_cols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITable_get_border_Proxy( 
    ITable __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB ITable_get_border_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITable_put_frame_Proxy( 
    ITable __RPC_FAR * This,
    /* [in] */ htmlFrame v);


void __RPC_STUB ITable_put_frame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITable_get_frame_Proxy( 
    ITable __RPC_FAR * This,
    /* [out][retval] */ htmlFrame __RPC_FAR *p);


void __RPC_STUB ITable_get_frame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITable_put_rules_Proxy( 
    ITable __RPC_FAR * This,
    /* [in] */ htmlRules v);


void __RPC_STUB ITable_put_rules_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITable_get_rules_Proxy( 
    ITable __RPC_FAR * This,
    /* [out][retval] */ htmlRules __RPC_FAR *p);


void __RPC_STUB ITable_get_rules_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITable_get_cellSpacing_Proxy( 
    ITable __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB ITable_get_cellSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITable_get_cellPadding_Proxy( 
    ITable __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB ITable_get_cellPadding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITable_put_background_Proxy( 
    ITable __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITable_put_background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITable_get_background_Proxy( 
    ITable __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITable_get_background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITable_put_bgColor_Proxy( 
    ITable __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITable_put_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITable_get_bgColor_Proxy( 
    ITable __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITable_get_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITable_put_borderColor_Proxy( 
    ITable __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITable_put_borderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITable_get_borderColor_Proxy( 
    ITable __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITable_get_borderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITable_put_borderColorLight_Proxy( 
    ITable __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITable_put_borderColorLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITable_get_borderColorLight_Proxy( 
    ITable __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITable_get_borderColorLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITable_put_borderColorDark_Proxy( 
    ITable __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITable_put_borderColorDark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITable_get_borderColorDark_Proxy( 
    ITable __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITable_get_borderColorDark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITable_put_align_Proxy( 
    ITable __RPC_FAR * This,
    /* [in] */ htmlControlAlign v);


void __RPC_STUB ITable_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITable_get_align_Proxy( 
    ITable __RPC_FAR * This,
    /* [out][retval] */ htmlControlAlign __RPC_FAR *p);


void __RPC_STUB ITable_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ITable_refresh_Proxy( 
    ITable __RPC_FAR * This);


void __RPC_STUB ITable_refresh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITable_get_rows_Proxy( 
    ITable __RPC_FAR * This,
    /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB ITable_get_rows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ITable_INTERFACE_DEFINED__ */


#ifndef __ITableCol_INTERFACE_DEFINED__
#define __ITableCol_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ITableCol
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ITableCol;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ITableCol : public IElement
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_span( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_span( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlCellAlign v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlCellAlign __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_vAlign( 
            /* [in] */ htmlCellVAlign v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_vAlign( 
            /* [out][retval] */ htmlCellVAlign __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITableColVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ITableCol __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ITableCol __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ITableCol __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ITableCol __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ITableCol __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ITableCol __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ITableCol __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ITableCol __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ITableCol __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ITableCol __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ITableCol __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ITableCol __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ITableCol __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ITableCol __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ITableCol __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ITableCol __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_span )( 
            ITableCol __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_span )( 
            ITableCol __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            ITableCol __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            ITableCol __RPC_FAR * This,
            /* [in] */ htmlCellAlign v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            ITableCol __RPC_FAR * This,
            /* [out][retval] */ htmlCellAlign __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_vAlign )( 
            ITableCol __RPC_FAR * This,
            /* [in] */ htmlCellVAlign v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_vAlign )( 
            ITableCol __RPC_FAR * This,
            /* [out][retval] */ htmlCellVAlign __RPC_FAR *p);
        
        END_INTERFACE
    } ITableColVtbl;

    interface ITableCol
    {
        CONST_VTBL struct ITableColVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITableCol_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ITableCol_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ITableCol_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ITableCol_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ITableCol_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ITableCol_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ITableCol_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ITableCol_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ITableCol_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ITableCol_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ITableCol_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ITableCol_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ITableCol_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ITableCol_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ITableCol_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ITableCol_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ITableCol_put_span(This,v)	\
    (This)->lpVtbl -> put_span(This,v)

#define ITableCol_get_span(This,p)	\
    (This)->lpVtbl -> get_span(This,p)

#define ITableCol_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#define ITableCol_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define ITableCol_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define ITableCol_put_vAlign(This,v)	\
    (This)->lpVtbl -> put_vAlign(This,v)

#define ITableCol_get_vAlign(This,p)	\
    (This)->lpVtbl -> get_vAlign(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCol_put_span_Proxy( 
    ITableCol __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB ITableCol_put_span_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCol_get_span_Proxy( 
    ITableCol __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB ITableCol_get_span_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCol_get_width_Proxy( 
    ITableCol __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB ITableCol_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCol_put_align_Proxy( 
    ITableCol __RPC_FAR * This,
    /* [in] */ htmlCellAlign v);


void __RPC_STUB ITableCol_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCol_get_align_Proxy( 
    ITableCol __RPC_FAR * This,
    /* [out][retval] */ htmlCellAlign __RPC_FAR *p);


void __RPC_STUB ITableCol_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCol_put_vAlign_Proxy( 
    ITableCol __RPC_FAR * This,
    /* [in] */ htmlCellVAlign v);


void __RPC_STUB ITableCol_put_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCol_get_vAlign_Proxy( 
    ITableCol __RPC_FAR * This,
    /* [out][retval] */ htmlCellVAlign __RPC_FAR *p);


void __RPC_STUB ITableCol_get_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ITableCol_INTERFACE_DEFINED__ */


#ifndef __ITableSection_INTERFACE_DEFINED__
#define __ITableSection_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ITableSection
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ITableSection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ITableSection : public IElement
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlCellAlign v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlCellAlign __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_vAlign( 
            /* [in] */ htmlCellVAlign v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_vAlign( 
            /* [out][retval] */ htmlCellVAlign __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_bgColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bgColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITableSectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ITableSection __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ITableSection __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ITableSection __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ITableSection __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ITableSection __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ITableSection __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ITableSection __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ITableSection __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ITableSection __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ITableSection __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ITableSection __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ITableSection __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ITableSection __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ITableSection __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ITableSection __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ITableSection __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            ITableSection __RPC_FAR * This,
            /* [in] */ htmlCellAlign v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            ITableSection __RPC_FAR * This,
            /* [out][retval] */ htmlCellAlign __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_vAlign )( 
            ITableSection __RPC_FAR * This,
            /* [in] */ htmlCellVAlign v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_vAlign )( 
            ITableSection __RPC_FAR * This,
            /* [out][retval] */ htmlCellVAlign __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_bgColor )( 
            ITableSection __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_bgColor )( 
            ITableSection __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } ITableSectionVtbl;

    interface ITableSection
    {
        CONST_VTBL struct ITableSectionVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITableSection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ITableSection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ITableSection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ITableSection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ITableSection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ITableSection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ITableSection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ITableSection_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ITableSection_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ITableSection_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ITableSection_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ITableSection_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ITableSection_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ITableSection_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ITableSection_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ITableSection_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ITableSection_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define ITableSection_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define ITableSection_put_vAlign(This,v)	\
    (This)->lpVtbl -> put_vAlign(This,v)

#define ITableSection_get_vAlign(This,p)	\
    (This)->lpVtbl -> get_vAlign(This,p)

#define ITableSection_put_bgColor(This,v)	\
    (This)->lpVtbl -> put_bgColor(This,v)

#define ITableSection_get_bgColor(This,p)	\
    (This)->lpVtbl -> get_bgColor(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableSection_put_align_Proxy( 
    ITableSection __RPC_FAR * This,
    /* [in] */ htmlCellAlign v);


void __RPC_STUB ITableSection_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableSection_get_align_Proxy( 
    ITableSection __RPC_FAR * This,
    /* [out][retval] */ htmlCellAlign __RPC_FAR *p);


void __RPC_STUB ITableSection_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableSection_put_vAlign_Proxy( 
    ITableSection __RPC_FAR * This,
    /* [in] */ htmlCellVAlign v);


void __RPC_STUB ITableSection_put_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableSection_get_vAlign_Proxy( 
    ITableSection __RPC_FAR * This,
    /* [out][retval] */ htmlCellVAlign __RPC_FAR *p);


void __RPC_STUB ITableSection_get_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableSection_put_bgColor_Proxy( 
    ITableSection __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITableSection_put_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableSection_get_bgColor_Proxy( 
    ITableSection __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITableSection_get_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ITableSection_INTERFACE_DEFINED__ */


#ifndef __ITableRow_INTERFACE_DEFINED__
#define __ITableRow_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ITableRow
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ITableRow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ITableRow : public IElement
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlCellAlign v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlCellAlign __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_vAlign( 
            /* [in] */ htmlCellVAlign v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_vAlign( 
            /* [out][retval] */ htmlCellVAlign __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_bgColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bgColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_borderColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_borderColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_borderColorLight( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_borderColorLight( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_borderColorDark( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_borderColorDark( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_cells( 
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITableRowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ITableRow __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ITableRow __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ITableRow __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ITableRow __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ITableRow __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ITableRow __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ITableRow __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ITableRow __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ITableRow __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ITableRow __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ITableRow __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ITableRow __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ITableRow __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ITableRow __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ITableRow __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ITableRow __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            ITableRow __RPC_FAR * This,
            /* [in] */ htmlCellAlign v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            ITableRow __RPC_FAR * This,
            /* [out][retval] */ htmlCellAlign __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_vAlign )( 
            ITableRow __RPC_FAR * This,
            /* [in] */ htmlCellVAlign v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_vAlign )( 
            ITableRow __RPC_FAR * This,
            /* [out][retval] */ htmlCellVAlign __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_bgColor )( 
            ITableRow __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_bgColor )( 
            ITableRow __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_borderColor )( 
            ITableRow __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_borderColor )( 
            ITableRow __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_borderColorLight )( 
            ITableRow __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_borderColorLight )( 
            ITableRow __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_borderColorDark )( 
            ITableRow __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_borderColorDark )( 
            ITableRow __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_cells )( 
            ITableRow __RPC_FAR * This,
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *p);
        
        END_INTERFACE
    } ITableRowVtbl;

    interface ITableRow
    {
        CONST_VTBL struct ITableRowVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITableRow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ITableRow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ITableRow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ITableRow_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ITableRow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ITableRow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ITableRow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ITableRow_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ITableRow_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ITableRow_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ITableRow_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ITableRow_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ITableRow_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ITableRow_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ITableRow_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ITableRow_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ITableRow_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define ITableRow_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define ITableRow_put_vAlign(This,v)	\
    (This)->lpVtbl -> put_vAlign(This,v)

#define ITableRow_get_vAlign(This,p)	\
    (This)->lpVtbl -> get_vAlign(This,p)

#define ITableRow_put_bgColor(This,v)	\
    (This)->lpVtbl -> put_bgColor(This,v)

#define ITableRow_get_bgColor(This,p)	\
    (This)->lpVtbl -> get_bgColor(This,p)

#define ITableRow_put_borderColor(This,v)	\
    (This)->lpVtbl -> put_borderColor(This,v)

#define ITableRow_get_borderColor(This,p)	\
    (This)->lpVtbl -> get_borderColor(This,p)

#define ITableRow_put_borderColorLight(This,v)	\
    (This)->lpVtbl -> put_borderColorLight(This,v)

#define ITableRow_get_borderColorLight(This,p)	\
    (This)->lpVtbl -> get_borderColorLight(This,p)

#define ITableRow_put_borderColorDark(This,v)	\
    (This)->lpVtbl -> put_borderColorDark(This,v)

#define ITableRow_get_borderColorDark(This,p)	\
    (This)->lpVtbl -> get_borderColorDark(This,p)

#define ITableRow_get_cells(This,p)	\
    (This)->lpVtbl -> get_cells(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableRow_put_align_Proxy( 
    ITableRow __RPC_FAR * This,
    /* [in] */ htmlCellAlign v);


void __RPC_STUB ITableRow_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableRow_get_align_Proxy( 
    ITableRow __RPC_FAR * This,
    /* [out][retval] */ htmlCellAlign __RPC_FAR *p);


void __RPC_STUB ITableRow_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableRow_put_vAlign_Proxy( 
    ITableRow __RPC_FAR * This,
    /* [in] */ htmlCellVAlign v);


void __RPC_STUB ITableRow_put_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableRow_get_vAlign_Proxy( 
    ITableRow __RPC_FAR * This,
    /* [out][retval] */ htmlCellVAlign __RPC_FAR *p);


void __RPC_STUB ITableRow_get_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableRow_put_bgColor_Proxy( 
    ITableRow __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITableRow_put_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableRow_get_bgColor_Proxy( 
    ITableRow __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITableRow_get_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableRow_put_borderColor_Proxy( 
    ITableRow __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITableRow_put_borderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableRow_get_borderColor_Proxy( 
    ITableRow __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITableRow_get_borderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableRow_put_borderColorLight_Proxy( 
    ITableRow __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITableRow_put_borderColorLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableRow_get_borderColorLight_Proxy( 
    ITableRow __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITableRow_get_borderColorLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableRow_put_borderColorDark_Proxy( 
    ITableRow __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITableRow_put_borderColorDark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableRow_get_borderColorDark_Proxy( 
    ITableRow __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITableRow_get_borderColorDark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableRow_get_cells_Proxy( 
    ITableRow __RPC_FAR * This,
    /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB ITableRow_get_cells_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ITableRow_INTERFACE_DEFINED__ */


#ifndef __ITableCell_INTERFACE_DEFINED__
#define __ITableCell_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ITableCell
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ITableCell;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ITableCell : public ITxtEdit
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_rowSpan( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_rowSpan( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_colSpan( 
            /* [in] */ long v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_colSpan( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlCellAlign v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlCellAlign __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_vAlign( 
            /* [in] */ htmlCellVAlign v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_vAlign( 
            /* [out][retval] */ htmlCellVAlign __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_bgColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_bgColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_noWrap( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_noWrap( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_background( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_background( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_borderColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_borderColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_borderColorLight( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_borderColorLight( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_borderColorDark( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_borderColorDark( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITableCellVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ITableCell __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ITableCell __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ITableCell __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ITableCell __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            ITableCell __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            ITableCell __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *createTextRange )( 
            ITableCell __RPC_FAR * This,
            /* [in][defaultvalue] */ long begin,
            /* [in][defaultvalue] */ long end,
            /* [out][retval] */ ITxtRange __RPC_FAR *__RPC_FAR *range);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *createControlRange )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *range);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_rowSpan )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_rowSpan )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_colSpan )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_colSpan )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ htmlCellAlign v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ htmlCellAlign __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_vAlign )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ htmlCellVAlign v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_vAlign )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ htmlCellVAlign __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_bgColor )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_bgColor )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_noWrap )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_noWrap )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_background )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_background )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_borderColor )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_borderColor )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_borderColorLight )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_borderColorLight )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_borderColorDark )( 
            ITableCell __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_borderColorDark )( 
            ITableCell __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } ITableCellVtbl;

    interface ITableCell
    {
        CONST_VTBL struct ITableCellVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITableCell_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ITableCell_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ITableCell_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ITableCell_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ITableCell_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ITableCell_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ITableCell_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ITableCell_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ITableCell_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ITableCell_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ITableCell_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ITableCell_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ITableCell_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ITableCell_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ITableCell_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ITableCell_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ITableCell_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define ITableCell_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define ITableCell_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define ITableCell_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define ITableCell_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define ITableCell_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define ITableCell_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define ITableCell_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define ITableCell_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define ITableCell_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define ITableCell_createTextRange(This,begin,end,range)	\
    (This)->lpVtbl -> createTextRange(This,begin,end,range)

#define ITableCell_createControlRange(This,range)	\
    (This)->lpVtbl -> createControlRange(This,range)


#define ITableCell_put_rowSpan(This,v)	\
    (This)->lpVtbl -> put_rowSpan(This,v)

#define ITableCell_get_rowSpan(This,p)	\
    (This)->lpVtbl -> get_rowSpan(This,p)

#define ITableCell_put_colSpan(This,v)	\
    (This)->lpVtbl -> put_colSpan(This,v)

#define ITableCell_get_colSpan(This,p)	\
    (This)->lpVtbl -> get_colSpan(This,p)

#define ITableCell_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define ITableCell_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define ITableCell_put_vAlign(This,v)	\
    (This)->lpVtbl -> put_vAlign(This,v)

#define ITableCell_get_vAlign(This,p)	\
    (This)->lpVtbl -> get_vAlign(This,p)

#define ITableCell_put_bgColor(This,v)	\
    (This)->lpVtbl -> put_bgColor(This,v)

#define ITableCell_get_bgColor(This,p)	\
    (This)->lpVtbl -> get_bgColor(This,p)

#define ITableCell_put_noWrap(This,v)	\
    (This)->lpVtbl -> put_noWrap(This,v)

#define ITableCell_get_noWrap(This,p)	\
    (This)->lpVtbl -> get_noWrap(This,p)

#define ITableCell_put_background(This,v)	\
    (This)->lpVtbl -> put_background(This,v)

#define ITableCell_get_background(This,p)	\
    (This)->lpVtbl -> get_background(This,p)

#define ITableCell_put_borderColor(This,v)	\
    (This)->lpVtbl -> put_borderColor(This,v)

#define ITableCell_get_borderColor(This,p)	\
    (This)->lpVtbl -> get_borderColor(This,p)

#define ITableCell_put_borderColorLight(This,v)	\
    (This)->lpVtbl -> put_borderColorLight(This,v)

#define ITableCell_get_borderColorLight(This,p)	\
    (This)->lpVtbl -> get_borderColorLight(This,p)

#define ITableCell_put_borderColorDark(This,v)	\
    (This)->lpVtbl -> put_borderColorDark(This,v)

#define ITableCell_get_borderColorDark(This,p)	\
    (This)->lpVtbl -> get_borderColorDark(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCell_put_rowSpan_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB ITableCell_put_rowSpan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCell_get_rowSpan_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB ITableCell_get_rowSpan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCell_put_colSpan_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB ITableCell_put_colSpan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCell_get_colSpan_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB ITableCell_get_colSpan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCell_put_align_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [in] */ htmlCellAlign v);


void __RPC_STUB ITableCell_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCell_get_align_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [out][retval] */ htmlCellAlign __RPC_FAR *p);


void __RPC_STUB ITableCell_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCell_put_vAlign_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [in] */ htmlCellVAlign v);


void __RPC_STUB ITableCell_put_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCell_get_vAlign_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [out][retval] */ htmlCellVAlign __RPC_FAR *p);


void __RPC_STUB ITableCell_get_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCell_put_bgColor_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITableCell_put_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCell_get_bgColor_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITableCell_get_bgColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCell_put_noWrap_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB ITableCell_put_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCell_get_noWrap_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB ITableCell_get_noWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCell_put_background_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITableCell_put_background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCell_get_background_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITableCell_get_background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCell_put_borderColor_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITableCell_put_borderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCell_get_borderColor_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITableCell_get_borderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCell_put_borderColorLight_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITableCell_put_borderColorLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCell_get_borderColorLight_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITableCell_get_borderColorLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCell_put_borderColorDark_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB ITableCell_put_borderColorDark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCell_get_borderColorDark_Proxy( 
    ITableCell __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB ITableCell_get_borderColorDark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ITableCell_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_Table;

class Table;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_TableCol;

class TableCol;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_TableSection;

class TableSection;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_TableRow;

class TableRow;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_TableCell;

class TableCell;
#endif

#ifndef __ITableCaption_INTERFACE_DEFINED__
#define __ITableCaption_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ITableCaption
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_ITableCaption;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ITableCaption : public ITxtEdit
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlCaptionAlign v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlCaptionAlign __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_vAlign( 
            /* [in] */ htmlCaptionVAlign v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_vAlign( 
            /* [out][retval] */ htmlCaptionVAlign __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITableCaptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ITableCaption __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ITableCaption __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ITableCaption __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ITableCaption __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ITableCaption __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ITableCaption __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ITableCaption __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            ITableCaption __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            ITableCaption __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            ITableCaption __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            ITableCaption __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            ITableCaption __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            ITableCaption __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            ITableCaption __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            ITableCaption __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *createTextRange )( 
            ITableCaption __RPC_FAR * This,
            /* [in][defaultvalue] */ long begin,
            /* [in][defaultvalue] */ long end,
            /* [out][retval] */ ITxtRange __RPC_FAR *__RPC_FAR *range);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *createControlRange )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *range);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            ITableCaption __RPC_FAR * This,
            /* [in] */ htmlCaptionAlign v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ htmlCaptionAlign __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_vAlign )( 
            ITableCaption __RPC_FAR * This,
            /* [in] */ htmlCaptionVAlign v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_vAlign )( 
            ITableCaption __RPC_FAR * This,
            /* [out][retval] */ htmlCaptionVAlign __RPC_FAR *p);
        
        END_INTERFACE
    } ITableCaptionVtbl;

    interface ITableCaption
    {
        CONST_VTBL struct ITableCaptionVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITableCaption_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ITableCaption_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ITableCaption_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ITableCaption_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ITableCaption_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ITableCaption_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ITableCaption_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ITableCaption_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define ITableCaption_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define ITableCaption_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define ITableCaption_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define ITableCaption_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define ITableCaption_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define ITableCaption_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define ITableCaption_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define ITableCaption_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define ITableCaption_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define ITableCaption_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define ITableCaption_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define ITableCaption_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define ITableCaption_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define ITableCaption_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define ITableCaption_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define ITableCaption_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define ITableCaption_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define ITableCaption_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define ITableCaption_createTextRange(This,begin,end,range)	\
    (This)->lpVtbl -> createTextRange(This,begin,end,range)

#define ITableCaption_createControlRange(This,range)	\
    (This)->lpVtbl -> createControlRange(This,range)


#define ITableCaption_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define ITableCaption_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define ITableCaption_put_vAlign(This,v)	\
    (This)->lpVtbl -> put_vAlign(This,v)

#define ITableCaption_get_vAlign(This,p)	\
    (This)->lpVtbl -> get_vAlign(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCaption_put_align_Proxy( 
    ITableCaption __RPC_FAR * This,
    /* [in] */ htmlCaptionAlign v);


void __RPC_STUB ITableCaption_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCaption_get_align_Proxy( 
    ITableCaption __RPC_FAR * This,
    /* [out][retval] */ htmlCaptionAlign __RPC_FAR *p);


void __RPC_STUB ITableCaption_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE ITableCaption_put_vAlign_Proxy( 
    ITableCaption __RPC_FAR * This,
    /* [in] */ htmlCaptionVAlign v);


void __RPC_STUB ITableCaption_put_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE ITableCaption_get_vAlign_Proxy( 
    ITableCaption __RPC_FAR * This,
    /* [out][retval] */ htmlCaptionVAlign __RPC_FAR *p);


void __RPC_STUB ITableCaption_get_vAlign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ITableCaption_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_TableCaption;

class TableCaption;
#endif

#ifndef __IDivFlow_INTERFACE_DEFINED__
#define __IDivFlow_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IDivFlow
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IDivFlow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IDivFlow : public ITxtEdit
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlControlAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDivFlowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDivFlow __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDivFlow __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDivFlow __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IDivFlow __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IDivFlow __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IDivFlow __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IDivFlow __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IDivFlow __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IDivFlow __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IDivFlow __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IDivFlow __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IDivFlow __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IDivFlow __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IDivFlow __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IDivFlow __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IDivFlow __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IDivFlow __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IDivFlow __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IDivFlow __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IDivFlow __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IDivFlow __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IDivFlow __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IDivFlow __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IDivFlow __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IDivFlow __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IDivFlow __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *createTextRange )( 
            IDivFlow __RPC_FAR * This,
            /* [in][defaultvalue] */ long begin,
            /* [in][defaultvalue] */ long end,
            /* [out][retval] */ ITxtRange __RPC_FAR *__RPC_FAR *range);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *createControlRange )( 
            IDivFlow __RPC_FAR * This,
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *range);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IDivFlow __RPC_FAR * This,
            /* [in] */ htmlControlAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IDivFlow __RPC_FAR * This,
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p);
        
        END_INTERFACE
    } IDivFlowVtbl;

    interface IDivFlow
    {
        CONST_VTBL struct IDivFlowVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDivFlow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDivFlow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDivFlow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDivFlow_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDivFlow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDivFlow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDivFlow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDivFlow_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IDivFlow_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IDivFlow_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IDivFlow_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IDivFlow_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IDivFlow_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IDivFlow_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IDivFlow_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IDivFlow_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IDivFlow_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IDivFlow_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IDivFlow_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IDivFlow_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IDivFlow_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IDivFlow_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IDivFlow_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IDivFlow_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IDivFlow_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IDivFlow_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IDivFlow_createTextRange(This,begin,end,range)	\
    (This)->lpVtbl -> createTextRange(This,begin,end,range)

#define IDivFlow_createControlRange(This,range)	\
    (This)->lpVtbl -> createControlRange(This,range)


#define IDivFlow_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IDivFlow_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IDivFlow_put_align_Proxy( 
    IDivFlow __RPC_FAR * This,
    /* [in] */ htmlControlAlign v);


void __RPC_STUB IDivFlow_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IDivFlow_get_align_Proxy( 
    IDivFlow __RPC_FAR * This,
    /* [out][retval] */ htmlControlAlign __RPC_FAR *p);


void __RPC_STUB IDivFlow_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDivFlow_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_DivFlow;

class DivFlow;
#endif

#ifndef __IObjectElement_INTERFACE_DEFINED__
#define __IObjectElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IObjectElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IObjectElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IObjectElement : public IControlElement
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_object( 
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_classId( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_data( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_data( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get_recordset( 
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlControlAlign v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IObjectElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IObjectElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IObjectElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IObjectElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IObjectElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IObjectElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IObjectElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IObjectElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IObjectElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IObjectElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IObjectElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IObjectElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IObjectElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IObjectElement __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IObjectElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IObjectElement __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_object )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_classId )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_data )( 
            IObjectElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_data )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_recordset )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IObjectElement __RPC_FAR * This,
            /* [in] */ htmlControlAlign v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IObjectElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IObjectElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IObjectElementVtbl;

    interface IObjectElement
    {
        CONST_VTBL struct IObjectElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IObjectElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IObjectElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IObjectElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IObjectElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IObjectElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IObjectElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IObjectElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IObjectElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IObjectElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IObjectElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IObjectElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IObjectElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IObjectElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IObjectElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IObjectElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IObjectElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IObjectElement_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IObjectElement_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IObjectElement_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IObjectElement_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IObjectElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IObjectElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IObjectElement_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IObjectElement_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IObjectElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IObjectElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IObjectElement_get_object(This,p)	\
    (This)->lpVtbl -> get_object(This,p)

#define IObjectElement_get_classId(This,p)	\
    (This)->lpVtbl -> get_classId(This,p)

#define IObjectElement_put_data(This,v)	\
    (This)->lpVtbl -> put_data(This,v)

#define IObjectElement_get_data(This,p)	\
    (This)->lpVtbl -> get_data(This,p)

#define IObjectElement_get_recordset(This,p)	\
    (This)->lpVtbl -> get_recordset(This,p)

#define IObjectElement_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IObjectElement_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#define IObjectElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IObjectElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IObjectElement_get_object_Proxy( 
    IObjectElement __RPC_FAR * This,
    /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IObjectElement_get_object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IObjectElement_get_classId_Proxy( 
    IObjectElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IObjectElement_get_classId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IObjectElement_put_data_Proxy( 
    IObjectElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IObjectElement_put_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IObjectElement_get_data_Proxy( 
    IObjectElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IObjectElement_get_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE IObjectElement_get_recordset_Proxy( 
    IObjectElement __RPC_FAR * This,
    /* [out][retval] */ IDispatch __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IObjectElement_get_recordset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IObjectElement_put_align_Proxy( 
    IObjectElement __RPC_FAR * This,
    /* [in] */ htmlControlAlign v);


void __RPC_STUB IObjectElement_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IObjectElement_get_align_Proxy( 
    IObjectElement __RPC_FAR * This,
    /* [out][retval] */ htmlControlAlign __RPC_FAR *p);


void __RPC_STUB IObjectElement_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IObjectElement_put_name_Proxy( 
    IObjectElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IObjectElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IObjectElement_get_name_Proxy( 
    IObjectElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IObjectElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IObjectElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_Object;

class Object;
#endif

#ifndef __ScriptWindowEvents_DISPINTERFACE_DEFINED__
#define __ScriptWindowEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: ScriptWindowEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_ScriptWindowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface ScriptWindowEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ScriptWindowEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ScriptWindowEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ScriptWindowEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ScriptWindowEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ScriptWindowEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ScriptWindowEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ScriptWindowEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ScriptWindowEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } ScriptWindowEventsVtbl;

    interface ScriptWindowEvents
    {
        CONST_VTBL struct ScriptWindowEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ScriptWindowEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ScriptWindowEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ScriptWindowEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ScriptWindowEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ScriptWindowEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ScriptWindowEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ScriptWindowEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ScriptWindowEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IDocumentDisp_INTERFACE_DEFINED__
#define __IDocumentDisp_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IDocumentDisp
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IDocumentDisp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IDocumentDisp : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDocumentDispVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IDocumentDisp __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IDocumentDisp __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IDocumentDisp __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IDocumentDisp __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IDocumentDisp __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IDocumentDisp __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IDocumentDisp __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } IDocumentDispVtbl;

    interface IDocumentDisp
    {
        CONST_VTBL struct IDocumentDispVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocumentDisp_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDocumentDisp_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDocumentDisp_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDocumentDisp_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDocumentDisp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDocumentDisp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDocumentDisp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocumentDisp_INTERFACE_DEFINED__ */


#ifndef __IScriptWindow_INTERFACE_DEFINED__
#define __IScriptWindow_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IScriptWindow
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IScriptWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IScriptWindow : public IDispatch
    {
    public:
        virtual /* [source][id][propget] */ HRESULT STDMETHODCALLTYPE get_document( 
            /* [out][retval] */ IDocumentDisp __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frames( 
            /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_self( 
            /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_top( 
            /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_parent( 
            /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_window( 
            /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE item( 
            /* [in][optional] */ VARIANT varArg,
            /* [out][retval] */ VARIANT __RPC_FAR *pvarRes) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IScriptWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IScriptWindow __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IScriptWindow __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IScriptWindow __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IScriptWindow __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IScriptWindow __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IScriptWindow __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IScriptWindow __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [source][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_document )( 
            IScriptWindow __RPC_FAR * This,
            /* [out][retval] */ IDocumentDisp __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_frames )( 
            IScriptWindow __RPC_FAR * This,
            /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_self )( 
            IScriptWindow __RPC_FAR * This,
            /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_top )( 
            IScriptWindow __RPC_FAR * This,
            /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parent )( 
            IScriptWindow __RPC_FAR * This,
            /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_window )( 
            IScriptWindow __RPC_FAR * This,
            /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *item )( 
            IScriptWindow __RPC_FAR * This,
            /* [in][optional] */ VARIANT varArg,
            /* [out][retval] */ VARIANT __RPC_FAR *pvarRes);
        
        END_INTERFACE
    } IScriptWindowVtbl;

    interface IScriptWindow
    {
        CONST_VTBL struct IScriptWindowVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScriptWindow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IScriptWindow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IScriptWindow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IScriptWindow_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IScriptWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IScriptWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IScriptWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IScriptWindow_get_document(This,p)	\
    (This)->lpVtbl -> get_document(This,p)

#define IScriptWindow_get_frames(This,p)	\
    (This)->lpVtbl -> get_frames(This,p)

#define IScriptWindow_get_self(This,p)	\
    (This)->lpVtbl -> get_self(This,p)

#define IScriptWindow_get_top(This,p)	\
    (This)->lpVtbl -> get_top(This,p)

#define IScriptWindow_get_parent(This,p)	\
    (This)->lpVtbl -> get_parent(This,p)

#define IScriptWindow_get_window(This,p)	\
    (This)->lpVtbl -> get_window(This,p)

#define IScriptWindow_item(This,varArg,pvarRes)	\
    (This)->lpVtbl -> item(This,varArg,pvarRes)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [source][id][propget] */ HRESULT STDMETHODCALLTYPE IScriptWindow_get_document_Proxy( 
    IScriptWindow __RPC_FAR * This,
    /* [out][retval] */ IDocumentDisp __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IScriptWindow_get_document_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IScriptWindow_get_frames_Proxy( 
    IScriptWindow __RPC_FAR * This,
    /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IScriptWindow_get_frames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IScriptWindow_get_self_Proxy( 
    IScriptWindow __RPC_FAR * This,
    /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IScriptWindow_get_self_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IScriptWindow_get_top_Proxy( 
    IScriptWindow __RPC_FAR * This,
    /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IScriptWindow_get_top_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IScriptWindow_get_parent_Proxy( 
    IScriptWindow __RPC_FAR * This,
    /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IScriptWindow_get_parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IScriptWindow_get_window_Proxy( 
    IScriptWindow __RPC_FAR * This,
    /* [out][retval] */ IScriptWindow __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IScriptWindow_get_window_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IScriptWindow_item_Proxy( 
    IScriptWindow __RPC_FAR * This,
    /* [in][optional] */ VARIANT varArg,
    /* [out][retval] */ VARIANT __RPC_FAR *pvarRes);


void __RPC_STUB IScriptWindow_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IScriptWindow_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_ScriptWindow;

class ScriptWindow;
#endif

#ifndef __IMapElement_INTERFACE_DEFINED__
#define __IMapElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IMapElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IMapElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IMapElement : public IElement
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_areas( 
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMapElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IMapElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IMapElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IMapElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IMapElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IMapElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IMapElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IMapElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IMapElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IMapElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IMapElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IMapElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IMapElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IMapElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IMapElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IMapElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IMapElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_areas )( 
            IMapElement __RPC_FAR * This,
            /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IMapElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IMapElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IMapElementVtbl;

    interface IMapElement
    {
        CONST_VTBL struct IMapElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMapElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IMapElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IMapElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IMapElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IMapElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IMapElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IMapElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IMapElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IMapElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IMapElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IMapElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IMapElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IMapElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IMapElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IMapElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IMapElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IMapElement_get_areas(This,p)	\
    (This)->lpVtbl -> get_areas(This,p)

#define IMapElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IMapElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IMapElement_get_areas_Proxy( 
    IMapElement __RPC_FAR * This,
    /* [out][retval] */ IElementCollection __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IMapElement_get_areas_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IMapElement_put_name_Proxy( 
    IMapElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IMapElement_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IMapElement_get_name_Proxy( 
    IMapElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IMapElement_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IMapElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_MapElement;

class MapElement;
#endif

#ifndef __AreaEvents_DISPINTERFACE_DEFINED__
#define __AreaEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: AreaEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_AreaEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface AreaEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct AreaEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            AreaEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            AreaEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            AreaEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            AreaEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            AreaEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            AreaEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            AreaEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } AreaEventsVtbl;

    interface AreaEvents
    {
        CONST_VTBL struct AreaEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AreaEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define AreaEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define AreaEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define AreaEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define AreaEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define AreaEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define AreaEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __AreaEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IAreaElement_INTERFACE_DEFINED__
#define __IAreaElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IAreaElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IAreaElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IAreaElement : public IElement
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_shape( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_shape( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_coords( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_coords( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_href( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_href( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_target( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_target( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_alt( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_alt( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_noHref( 
            /* [in] */ VARIANT_BOOL v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_noHref( 
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_host( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_host( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_hostname( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_hostname( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_pathname( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_pathname( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_port( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_port( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_protocol( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_protocol( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_search( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_search( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_language( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_language( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onClick( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onClick( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onMouseOut( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onMouseOut( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_onMouseOver( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_onMouseOver( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAreaElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IAreaElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IAreaElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IAreaElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IAreaElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_shape )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_shape )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_coords )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_coords )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_href )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_href )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_target )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_target )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_alt )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_alt )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_noHref )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_noHref )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_host )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_host )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_hostname )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_hostname )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_pathname )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_pathname )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_port )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_port )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_protocol )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_protocol )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_search )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_search )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_language )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_language )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onClick )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onClick )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onMouseOut )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onMouseOut )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_onMouseOver )( 
            IAreaElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_onMouseOver )( 
            IAreaElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IAreaElementVtbl;

    interface IAreaElement
    {
        CONST_VTBL struct IAreaElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAreaElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IAreaElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IAreaElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IAreaElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IAreaElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IAreaElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IAreaElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IAreaElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IAreaElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IAreaElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IAreaElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IAreaElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IAreaElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IAreaElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IAreaElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IAreaElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IAreaElement_put_shape(This,v)	\
    (This)->lpVtbl -> put_shape(This,v)

#define IAreaElement_get_shape(This,p)	\
    (This)->lpVtbl -> get_shape(This,p)

#define IAreaElement_put_coords(This,v)	\
    (This)->lpVtbl -> put_coords(This,v)

#define IAreaElement_get_coords(This,p)	\
    (This)->lpVtbl -> get_coords(This,p)

#define IAreaElement_put_href(This,v)	\
    (This)->lpVtbl -> put_href(This,v)

#define IAreaElement_get_href(This,p)	\
    (This)->lpVtbl -> get_href(This,p)

#define IAreaElement_put_target(This,v)	\
    (This)->lpVtbl -> put_target(This,v)

#define IAreaElement_get_target(This,p)	\
    (This)->lpVtbl -> get_target(This,p)

#define IAreaElement_put_alt(This,v)	\
    (This)->lpVtbl -> put_alt(This,v)

#define IAreaElement_get_alt(This,p)	\
    (This)->lpVtbl -> get_alt(This,p)

#define IAreaElement_put_noHref(This,v)	\
    (This)->lpVtbl -> put_noHref(This,v)

#define IAreaElement_get_noHref(This,p)	\
    (This)->lpVtbl -> get_noHref(This,p)

#define IAreaElement_put_host(This,v)	\
    (This)->lpVtbl -> put_host(This,v)

#define IAreaElement_get_host(This,p)	\
    (This)->lpVtbl -> get_host(This,p)

#define IAreaElement_put_hostname(This,v)	\
    (This)->lpVtbl -> put_hostname(This,v)

#define IAreaElement_get_hostname(This,p)	\
    (This)->lpVtbl -> get_hostname(This,p)

#define IAreaElement_put_pathname(This,v)	\
    (This)->lpVtbl -> put_pathname(This,v)

#define IAreaElement_get_pathname(This,p)	\
    (This)->lpVtbl -> get_pathname(This,p)

#define IAreaElement_put_port(This,v)	\
    (This)->lpVtbl -> put_port(This,v)

#define IAreaElement_get_port(This,p)	\
    (This)->lpVtbl -> get_port(This,p)

#define IAreaElement_put_protocol(This,v)	\
    (This)->lpVtbl -> put_protocol(This,v)

#define IAreaElement_get_protocol(This,p)	\
    (This)->lpVtbl -> get_protocol(This,p)

#define IAreaElement_put_search(This,v)	\
    (This)->lpVtbl -> put_search(This,v)

#define IAreaElement_get_search(This,p)	\
    (This)->lpVtbl -> get_search(This,p)

#define IAreaElement_put_language(This,v)	\
    (This)->lpVtbl -> put_language(This,v)

#define IAreaElement_get_language(This,p)	\
    (This)->lpVtbl -> get_language(This,p)

#define IAreaElement_put_onClick(This,v)	\
    (This)->lpVtbl -> put_onClick(This,v)

#define IAreaElement_get_onClick(This,p)	\
    (This)->lpVtbl -> get_onClick(This,p)

#define IAreaElement_put_onMouseOut(This,v)	\
    (This)->lpVtbl -> put_onMouseOut(This,v)

#define IAreaElement_get_onMouseOut(This,p)	\
    (This)->lpVtbl -> get_onMouseOut(This,p)

#define IAreaElement_put_onMouseOver(This,v)	\
    (This)->lpVtbl -> put_onMouseOver(This,v)

#define IAreaElement_get_onMouseOver(This,p)	\
    (This)->lpVtbl -> get_onMouseOver(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_shape_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_shape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_shape_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_shape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_coords_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_coords_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_coords_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_coords_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_href_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_href_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_href_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_target_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_target_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_alt_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_alt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_alt_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_alt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_noHref_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL v);


void __RPC_STUB IAreaElement_put_noHref_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_noHref_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_noHref_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_host_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_host_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_host_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_host_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_hostname_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_hostname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_hostname_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_hostname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_pathname_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_pathname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_pathname_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_pathname_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_port_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_port_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_port_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_port_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_protocol_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_protocol_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_protocol_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_protocol_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_search_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_search_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_search_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_search_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_language_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_language_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_onClick_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_onClick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_onClick_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_onClick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_onMouseOut_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_onMouseOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_onMouseOut_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_onMouseOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IAreaElement_put_onMouseOver_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IAreaElement_put_onMouseOver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IAreaElement_get_onMouseOver_Proxy( 
    IAreaElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IAreaElement_get_onMouseOver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IAreaElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_AreaElement;

class AreaElement;
#endif

#ifndef __IApplet_INTERFACE_DEFINED__
#define __IApplet_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IApplet
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IApplet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IApplet : public IControlElement
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_code( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_code( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_codeBase( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_codeBase( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_align( 
            /* [in] */ htmlControlAlign v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_align( 
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAppletVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IApplet __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IApplet __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IApplet __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IApplet __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IApplet __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IApplet __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IApplet __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IApplet __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IApplet __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IApplet __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IApplet __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IApplet __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IApplet __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IApplet __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IApplet __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_code )( 
            IApplet __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_code )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_codeBase )( 
            IApplet __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_codeBase )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_align )( 
            IApplet __RPC_FAR * This,
            /* [in] */ htmlControlAlign v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_align )( 
            IApplet __RPC_FAR * This,
            /* [out][retval] */ htmlControlAlign __RPC_FAR *p);
        
        END_INTERFACE
    } IAppletVtbl;

    interface IApplet
    {
        CONST_VTBL struct IAppletVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IApplet_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IApplet_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IApplet_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IApplet_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IApplet_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IApplet_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IApplet_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IApplet_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IApplet_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IApplet_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IApplet_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IApplet_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IApplet_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IApplet_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IApplet_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IApplet_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IApplet_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IApplet_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IApplet_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IApplet_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IApplet_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IApplet_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IApplet_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IApplet_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IApplet_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IApplet_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IApplet_put_code(This,v)	\
    (This)->lpVtbl -> put_code(This,v)

#define IApplet_get_code(This,p)	\
    (This)->lpVtbl -> get_code(This,p)

#define IApplet_put_codeBase(This,v)	\
    (This)->lpVtbl -> put_codeBase(This,v)

#define IApplet_get_codeBase(This,p)	\
    (This)->lpVtbl -> get_codeBase(This,p)

#define IApplet_put_align(This,v)	\
    (This)->lpVtbl -> put_align(This,v)

#define IApplet_get_align(This,p)	\
    (This)->lpVtbl -> get_align(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IApplet_put_code_Proxy( 
    IApplet __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IApplet_put_code_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IApplet_get_code_Proxy( 
    IApplet __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IApplet_get_code_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IApplet_put_codeBase_Proxy( 
    IApplet __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IApplet_put_codeBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IApplet_get_codeBase_Proxy( 
    IApplet __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IApplet_get_codeBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IApplet_put_align_Proxy( 
    IApplet __RPC_FAR * This,
    /* [in] */ htmlControlAlign v);


void __RPC_STUB IApplet_put_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IApplet_get_align_Proxy( 
    IApplet __RPC_FAR * This,
    /* [out][retval] */ htmlControlAlign __RPC_FAR *p);


void __RPC_STUB IApplet_get_align_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IApplet_INTERFACE_DEFINED__ */


#ifndef __IParam_INTERFACE_DEFINED__
#define __IParam_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IParam
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IParam;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IParam : public IElement
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_value( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_value( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IParamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IParam __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IParam __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IParam __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IParam __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IParam __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IParam __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IParam __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IParam __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IParam __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IParam __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IParam __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IParam __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IParam __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IParam __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IParam __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IParam __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_value )( 
            IParam __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_value )( 
            IParam __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IParam __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IParam __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IParamVtbl;

    interface IParam
    {
        CONST_VTBL struct IParamVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IParam_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IParam_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IParam_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IParam_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IParam_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IParam_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IParam_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IParam_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IParam_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IParam_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IParam_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IParam_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IParam_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IParam_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IParam_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IParam_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IParam_put_value(This,v)	\
    (This)->lpVtbl -> put_value(This,v)

#define IParam_get_value(This,p)	\
    (This)->lpVtbl -> get_value(This,p)

#define IParam_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IParam_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IParam_put_value_Proxy( 
    IParam __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IParam_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IParam_get_value_Proxy( 
    IParam __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IParam_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IParam_put_name_Proxy( 
    IParam __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IParam_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IParam_get_name_Proxy( 
    IParam __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IParam_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IParam_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_Applet;

class Applet;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_Param;

class Param;
#endif

#ifndef __IScriptElement_INTERFACE_DEFINED__
#define __IScriptElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IScriptElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IScriptElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IScriptElement : public IElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_language( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_language( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_src( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_src( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_In( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_In( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_For( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_For( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_event( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_event( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_text( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_text( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IScriptElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IScriptElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IScriptElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IScriptElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IScriptElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IScriptElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IScriptElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IScriptElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IScriptElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IScriptElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IScriptElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IScriptElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IScriptElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IScriptElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IScriptElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IScriptElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IScriptElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_language )( 
            IScriptElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_language )( 
            IScriptElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_src )( 
            IScriptElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_src )( 
            IScriptElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_In )( 
            IScriptElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_In )( 
            IScriptElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_For )( 
            IScriptElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_For )( 
            IScriptElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_event )( 
            IScriptElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_event )( 
            IScriptElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_text )( 
            IScriptElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_text )( 
            IScriptElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IScriptElementVtbl;

    interface IScriptElement
    {
        CONST_VTBL struct IScriptElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScriptElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IScriptElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IScriptElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IScriptElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IScriptElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IScriptElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IScriptElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IScriptElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IScriptElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IScriptElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IScriptElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IScriptElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IScriptElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IScriptElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IScriptElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IScriptElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IScriptElement_put_language(This,v)	\
    (This)->lpVtbl -> put_language(This,v)

#define IScriptElement_get_language(This,p)	\
    (This)->lpVtbl -> get_language(This,p)

#define IScriptElement_put_src(This,v)	\
    (This)->lpVtbl -> put_src(This,v)

#define IScriptElement_get_src(This,p)	\
    (This)->lpVtbl -> get_src(This,p)

#define IScriptElement_put_In(This,v)	\
    (This)->lpVtbl -> put_In(This,v)

#define IScriptElement_get_In(This,p)	\
    (This)->lpVtbl -> get_In(This,p)

#define IScriptElement_put_For(This,v)	\
    (This)->lpVtbl -> put_For(This,v)

#define IScriptElement_get_For(This,p)	\
    (This)->lpVtbl -> get_For(This,p)

#define IScriptElement_put_event(This,v)	\
    (This)->lpVtbl -> put_event(This,v)

#define IScriptElement_get_event(This,p)	\
    (This)->lpVtbl -> get_event(This,p)

#define IScriptElement_put_text(This,v)	\
    (This)->lpVtbl -> put_text(This,v)

#define IScriptElement_get_text(This,p)	\
    (This)->lpVtbl -> get_text(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IScriptElement_put_language_Proxy( 
    IScriptElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IScriptElement_put_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IScriptElement_get_language_Proxy( 
    IScriptElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IScriptElement_get_language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IScriptElement_put_src_Proxy( 
    IScriptElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IScriptElement_put_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IScriptElement_get_src_Proxy( 
    IScriptElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IScriptElement_get_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IScriptElement_put_In_Proxy( 
    IScriptElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IScriptElement_put_In_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IScriptElement_get_In_Proxy( 
    IScriptElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IScriptElement_get_In_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IScriptElement_put_For_Proxy( 
    IScriptElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IScriptElement_put_For_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IScriptElement_get_For_Proxy( 
    IScriptElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IScriptElement_get_For_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IScriptElement_put_event_Proxy( 
    IScriptElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IScriptElement_put_event_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IScriptElement_get_event_Proxy( 
    IScriptElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IScriptElement_get_event_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IScriptElement_put_text_Proxy( 
    IScriptElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IScriptElement_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IScriptElement_get_text_Proxy( 
    IScriptElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IScriptElement_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IScriptElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_ScriptElement;

class ScriptElement;
#endif

#ifndef __IFrameSite_INTERFACE_DEFINED__
#define __IFrameSite_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IFrameSite
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IFrameSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IFrameSite : public IControlElement
    {
    public:
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_src( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_src( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_name( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_name( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_border( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_borderColor( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_borderColor( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_frameBorder( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frameBorder( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_frameSpacing( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_marginWidth( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_marginHeight( 
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_noResize( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_noResize( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_scrolling( 
            /* [in] */ frameScrolling v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_scrolling( 
            /* [out][retval] */ frameScrolling __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFrameSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IFrameSite __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IFrameSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IFrameSite __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IFrameSite __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IFrameSite __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IFrameSite __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_src )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_src )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_border )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_borderColor )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_borderColor )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_frameBorder )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_frameBorder )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_frameSpacing )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_marginWidth )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_marginHeight )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_noResize )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_noResize )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_scrolling )( 
            IFrameSite __RPC_FAR * This,
            /* [in] */ frameScrolling v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_scrolling )( 
            IFrameSite __RPC_FAR * This,
            /* [out][retval] */ frameScrolling __RPC_FAR *p);
        
        END_INTERFACE
    } IFrameSiteVtbl;

    interface IFrameSite
    {
        CONST_VTBL struct IFrameSiteVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFrameSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IFrameSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IFrameSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IFrameSite_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IFrameSite_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IFrameSite_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IFrameSite_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IFrameSite_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IFrameSite_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IFrameSite_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IFrameSite_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IFrameSite_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IFrameSite_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IFrameSite_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IFrameSite_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IFrameSite_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IFrameSite_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IFrameSite_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IFrameSite_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IFrameSite_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IFrameSite_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IFrameSite_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IFrameSite_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IFrameSite_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IFrameSite_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IFrameSite_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IFrameSite_put_src(This,v)	\
    (This)->lpVtbl -> put_src(This,v)

#define IFrameSite_get_src(This,p)	\
    (This)->lpVtbl -> get_src(This,p)

#define IFrameSite_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IFrameSite_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IFrameSite_get_border(This,p)	\
    (This)->lpVtbl -> get_border(This,p)

#define IFrameSite_put_borderColor(This,v)	\
    (This)->lpVtbl -> put_borderColor(This,v)

#define IFrameSite_get_borderColor(This,p)	\
    (This)->lpVtbl -> get_borderColor(This,p)

#define IFrameSite_put_frameBorder(This,v)	\
    (This)->lpVtbl -> put_frameBorder(This,v)

#define IFrameSite_get_frameBorder(This,p)	\
    (This)->lpVtbl -> get_frameBorder(This,p)

#define IFrameSite_get_frameSpacing(This,p)	\
    (This)->lpVtbl -> get_frameSpacing(This,p)

#define IFrameSite_get_marginWidth(This,p)	\
    (This)->lpVtbl -> get_marginWidth(This,p)

#define IFrameSite_get_marginHeight(This,p)	\
    (This)->lpVtbl -> get_marginHeight(This,p)

#define IFrameSite_put_noResize(This,v)	\
    (This)->lpVtbl -> put_noResize(This,v)

#define IFrameSite_get_noResize(This,p)	\
    (This)->lpVtbl -> get_noResize(This,p)

#define IFrameSite_put_scrolling(This,v)	\
    (This)->lpVtbl -> put_scrolling(This,v)

#define IFrameSite_get_scrolling(This,p)	\
    (This)->lpVtbl -> get_scrolling(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propput] */ HRESULT STDMETHODCALLTYPE IFrameSite_put_src_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IFrameSite_put_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IFrameSite_get_src_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IFrameSite_get_src_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IFrameSite_put_name_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IFrameSite_put_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IFrameSite_get_name_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IFrameSite_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IFrameSite_get_border_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IFrameSite_get_border_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IFrameSite_put_borderColor_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IFrameSite_put_borderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IFrameSite_get_borderColor_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IFrameSite_get_borderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IFrameSite_put_frameBorder_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IFrameSite_put_frameBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IFrameSite_get_frameBorder_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IFrameSite_get_frameBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IFrameSite_get_frameSpacing_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IFrameSite_get_frameSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IFrameSite_get_marginWidth_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IFrameSite_get_marginWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IFrameSite_get_marginHeight_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IFrameSite_get_marginHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IFrameSite_put_noResize_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IFrameSite_put_noResize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IFrameSite_get_noResize_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IFrameSite_get_noResize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IFrameSite_put_scrolling_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [in] */ frameScrolling v);


void __RPC_STUB IFrameSite_put_scrolling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IFrameSite_get_scrolling_Proxy( 
    IFrameSite __RPC_FAR * This,
    /* [out][retval] */ frameScrolling __RPC_FAR *p);


void __RPC_STUB IFrameSite_get_scrolling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IFrameSite_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CFrameSite;

class CFrameSite;
#endif

#ifndef __IFrameElement_INTERFACE_DEFINED__
#define __IFrameElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IFrameElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IFrameElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IFrameElement : public IFrameSite
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IFrameElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IFrameElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IFrameElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IFrameElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IFrameElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IFrameElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IFrameElement __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_src )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_src )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_border )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_borderColor )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_borderColor )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_frameBorder )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_frameBorder )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_frameSpacing )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_marginWidth )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_marginHeight )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_noResize )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_noResize )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_scrolling )( 
            IFrameElement __RPC_FAR * This,
            /* [in] */ frameScrolling v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_scrolling )( 
            IFrameElement __RPC_FAR * This,
            /* [out][retval] */ frameScrolling __RPC_FAR *p);
        
        END_INTERFACE
    } IFrameElementVtbl;

    interface IFrameElement
    {
        CONST_VTBL struct IFrameElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFrameElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IFrameElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IFrameElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IFrameElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IFrameElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IFrameElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IFrameElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IFrameElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IFrameElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IFrameElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IFrameElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IFrameElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IFrameElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IFrameElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IFrameElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IFrameElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IFrameElement_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IFrameElement_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IFrameElement_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IFrameElement_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IFrameElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IFrameElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IFrameElement_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IFrameElement_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IFrameElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IFrameElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IFrameElement_put_src(This,v)	\
    (This)->lpVtbl -> put_src(This,v)

#define IFrameElement_get_src(This,p)	\
    (This)->lpVtbl -> get_src(This,p)

#define IFrameElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IFrameElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IFrameElement_get_border(This,p)	\
    (This)->lpVtbl -> get_border(This,p)

#define IFrameElement_put_borderColor(This,v)	\
    (This)->lpVtbl -> put_borderColor(This,v)

#define IFrameElement_get_borderColor(This,p)	\
    (This)->lpVtbl -> get_borderColor(This,p)

#define IFrameElement_put_frameBorder(This,v)	\
    (This)->lpVtbl -> put_frameBorder(This,v)

#define IFrameElement_get_frameBorder(This,p)	\
    (This)->lpVtbl -> get_frameBorder(This,p)

#define IFrameElement_get_frameSpacing(This,p)	\
    (This)->lpVtbl -> get_frameSpacing(This,p)

#define IFrameElement_get_marginWidth(This,p)	\
    (This)->lpVtbl -> get_marginWidth(This,p)

#define IFrameElement_get_marginHeight(This,p)	\
    (This)->lpVtbl -> get_marginHeight(This,p)

#define IFrameElement_put_noResize(This,v)	\
    (This)->lpVtbl -> put_noResize(This,v)

#define IFrameElement_get_noResize(This,p)	\
    (This)->lpVtbl -> get_noResize(This,p)

#define IFrameElement_put_scrolling(This,v)	\
    (This)->lpVtbl -> put_scrolling(This,v)

#define IFrameElement_get_scrolling(This,p)	\
    (This)->lpVtbl -> get_scrolling(This,p)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IFrameElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_Frame;

class Frame;
#endif

#ifndef __IIFrameElement_INTERFACE_DEFINED__
#define __IIFrameElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IIFrameElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IIFrameElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IIFrameElement : public IFrameSite
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IIFrameElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IIFrameElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IIFrameElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IIFrameElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IIFrameElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IIFrameElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IIFrameElement __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_src )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_src )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_name )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_name )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_border )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_borderColor )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_borderColor )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_frameBorder )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_frameBorder )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_frameSpacing )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_marginWidth )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_marginHeight )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_noResize )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_noResize )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_scrolling )( 
            IIFrameElement __RPC_FAR * This,
            /* [in] */ frameScrolling v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_scrolling )( 
            IIFrameElement __RPC_FAR * This,
            /* [out][retval] */ frameScrolling __RPC_FAR *p);
        
        END_INTERFACE
    } IIFrameElementVtbl;

    interface IIFrameElement
    {
        CONST_VTBL struct IIFrameElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IIFrameElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IIFrameElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IIFrameElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IIFrameElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IIFrameElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IIFrameElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IIFrameElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IIFrameElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IIFrameElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IIFrameElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IIFrameElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IIFrameElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IIFrameElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IIFrameElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IIFrameElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IIFrameElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IIFrameElement_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IIFrameElement_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IIFrameElement_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IIFrameElement_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IIFrameElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IIFrameElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IIFrameElement_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IIFrameElement_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IIFrameElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IIFrameElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IIFrameElement_put_src(This,v)	\
    (This)->lpVtbl -> put_src(This,v)

#define IIFrameElement_get_src(This,p)	\
    (This)->lpVtbl -> get_src(This,p)

#define IIFrameElement_put_name(This,v)	\
    (This)->lpVtbl -> put_name(This,v)

#define IIFrameElement_get_name(This,p)	\
    (This)->lpVtbl -> get_name(This,p)

#define IIFrameElement_get_border(This,p)	\
    (This)->lpVtbl -> get_border(This,p)

#define IIFrameElement_put_borderColor(This,v)	\
    (This)->lpVtbl -> put_borderColor(This,v)

#define IIFrameElement_get_borderColor(This,p)	\
    (This)->lpVtbl -> get_borderColor(This,p)

#define IIFrameElement_put_frameBorder(This,v)	\
    (This)->lpVtbl -> put_frameBorder(This,v)

#define IIFrameElement_get_frameBorder(This,p)	\
    (This)->lpVtbl -> get_frameBorder(This,p)

#define IIFrameElement_get_frameSpacing(This,p)	\
    (This)->lpVtbl -> get_frameSpacing(This,p)

#define IIFrameElement_get_marginWidth(This,p)	\
    (This)->lpVtbl -> get_marginWidth(This,p)

#define IIFrameElement_get_marginHeight(This,p)	\
    (This)->lpVtbl -> get_marginHeight(This,p)

#define IIFrameElement_put_noResize(This,v)	\
    (This)->lpVtbl -> put_noResize(This,v)

#define IIFrameElement_get_noResize(This,p)	\
    (This)->lpVtbl -> get_noResize(This,p)

#define IIFrameElement_put_scrolling(This,v)	\
    (This)->lpVtbl -> put_scrolling(This,v)

#define IIFrameElement_get_scrolling(This,p)	\
    (This)->lpVtbl -> get_scrolling(This,p)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IIFrameElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_IFrame;

class IFrame;
#endif

#ifndef __IFrameSetElement_INTERFACE_DEFINED__
#define __IFrameSetElement_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IFrameSetElement
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IFrameSetElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IFrameSetElement : public IControlElement
    {
    public:
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_rows( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_rows( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
        virtual /* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE put_cols( 
            /* [in] */ BSTR v) = 0;
        
        virtual /* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE get_cols( 
            /* [out][retval] */ BSTR __RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFrameSetElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IFrameSetElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IFrameSetElement __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IFrameSetElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IFrameSetElement __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IFrameSetElement __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IFrameSetElement __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Class )( 
            IFrameSetElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Class )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_id )( 
            IFrameSetElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_id )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tagName )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_parentElement )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out][retval] */ IElement __RPC_FAR *__RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_count )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_style )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out][retval] */ IStyle __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *scrollIntoView )( 
            IFrameSetElement __RPC_FAR * This,
            /* [in][optional] */ VARIANT_BOOL Start);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_title )( 
            IFrameSetElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_title )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [hidden][bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_visible )( 
            IFrameSetElement __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL v);
        
        /* [hidden][bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_visible )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out][retval] */ VARIANT_BOOL __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_tabIndex )( 
            IFrameSetElement __RPC_FAR * This,
            /* [in] */ short v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_tabIndex )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out][retval] */ short __RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setFocus )( 
            IFrameSetElement __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *zOrder )( 
            IFrameSetElement __RPC_FAR * This,
            /* [in][optional][defaultvalue] */ fmZOrder zPosition);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out][retval] */ IUnitMeasurement __RPC_FAR *__RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_rows )( 
            IFrameSetElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_rows )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        /* [bindable][displaybind][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_cols )( 
            IFrameSetElement __RPC_FAR * This,
            /* [in] */ BSTR v);
        
        /* [bindable][displaybind][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_cols )( 
            IFrameSetElement __RPC_FAR * This,
            /* [out][retval] */ BSTR __RPC_FAR *p);
        
        END_INTERFACE
    } IFrameSetElementVtbl;

    interface IFrameSetElement
    {
        CONST_VTBL struct IFrameSetElementVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFrameSetElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IFrameSetElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IFrameSetElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IFrameSetElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IFrameSetElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IFrameSetElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IFrameSetElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IFrameSetElement_put_Class(This,v)	\
    (This)->lpVtbl -> put_Class(This,v)

#define IFrameSetElement_get_Class(This,p)	\
    (This)->lpVtbl -> get_Class(This,p)

#define IFrameSetElement_put_id(This,v)	\
    (This)->lpVtbl -> put_id(This,v)

#define IFrameSetElement_get_id(This,p)	\
    (This)->lpVtbl -> get_id(This,p)

#define IFrameSetElement_get_tagName(This,p)	\
    (This)->lpVtbl -> get_tagName(This,p)

#define IFrameSetElement_get_parentElement(This,p)	\
    (This)->lpVtbl -> get_parentElement(This,p)

#define IFrameSetElement_get_count(This,p)	\
    (This)->lpVtbl -> get_count(This,p)

#define IFrameSetElement_get_style(This,p)	\
    (This)->lpVtbl -> get_style(This,p)

#define IFrameSetElement_scrollIntoView(This,Start)	\
    (This)->lpVtbl -> scrollIntoView(This,Start)


#define IFrameSetElement_put_title(This,v)	\
    (This)->lpVtbl -> put_title(This,v)

#define IFrameSetElement_get_title(This,p)	\
    (This)->lpVtbl -> get_title(This,p)

#define IFrameSetElement_put_visible(This,v)	\
    (This)->lpVtbl -> put_visible(This,v)

#define IFrameSetElement_get_visible(This,p)	\
    (This)->lpVtbl -> get_visible(This,p)

#define IFrameSetElement_put_tabIndex(This,v)	\
    (This)->lpVtbl -> put_tabIndex(This,v)

#define IFrameSetElement_get_tabIndex(This,p)	\
    (This)->lpVtbl -> get_tabIndex(This,p)

#define IFrameSetElement_setFocus(This)	\
    (This)->lpVtbl -> setFocus(This)

#define IFrameSetElement_zOrder(This,zPosition)	\
    (This)->lpVtbl -> zOrder(This,zPosition)

#define IFrameSetElement_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IFrameSetElement_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)


#define IFrameSetElement_put_rows(This,v)	\
    (This)->lpVtbl -> put_rows(This,v)

#define IFrameSetElement_get_rows(This,p)	\
    (This)->lpVtbl -> get_rows(This,p)

#define IFrameSetElement_put_cols(This,v)	\
    (This)->lpVtbl -> put_cols(This,v)

#define IFrameSetElement_get_cols(This,p)	\
    (This)->lpVtbl -> get_cols(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IFrameSetElement_put_rows_Proxy( 
    IFrameSetElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IFrameSetElement_put_rows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IFrameSetElement_get_rows_Proxy( 
    IFrameSetElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IFrameSetElement_get_rows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propput] */ HRESULT STDMETHODCALLTYPE IFrameSetElement_put_cols_Proxy( 
    IFrameSetElement __RPC_FAR * This,
    /* [in] */ BSTR v);


void __RPC_STUB IFrameSetElement_put_cols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][displaybind][id][propget] */ HRESULT STDMETHODCALLTYPE IFrameSetElement_get_cols_Proxy( 
    IFrameSetElement __RPC_FAR * This,
    /* [out][retval] */ BSTR __RPC_FAR *p);


void __RPC_STUB IFrameSetElement_get_cols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IFrameSetElement_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CFrameSetSite;

class CFrameSetSite;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_Body2D;

class Body2D;
#endif

#ifndef __HTMLDlgModelEvents_DISPINTERFACE_DEFINED__
#define __HTMLDlgModelEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: HTMLDlgModelEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_HTMLDlgModelEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface HTMLDlgModelEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct HTMLDlgModelEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            HTMLDlgModelEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            HTMLDlgModelEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            HTMLDlgModelEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            HTMLDlgModelEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            HTMLDlgModelEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            HTMLDlgModelEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            HTMLDlgModelEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } HTMLDlgModelEventsVtbl;

    interface HTMLDlgModelEvents
    {
        CONST_VTBL struct HTMLDlgModelEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLDlgModelEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLDlgModelEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLDlgModelEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLDlgModelEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLDlgModelEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLDlgModelEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLDlgModelEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __HTMLDlgModelEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IHTMLDlgModel_INTERFACE_DEFINED__
#define __IHTMLDlgModel_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IHTMLDlgModel
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IHTMLDlgModel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IHTMLDlgModel : public IDispatch
    {
    public:
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_width( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_width( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_height( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_height( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_top( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_top( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_left( 
            /* [in] */ long v) = 0;
        
        virtual /* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_left( 
            /* [out][retval] */ long __RPC_FAR *p) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_retval( 
            /* [in] */ VARIANT __RPC_FAR *v) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_retval( 
            /* [out][retval] */ VARIANT __RPC_FAR *__RPC_FAR *p) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE objectCount( 
            /* [out] */ long __RPC_FAR *num) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE object( 
            /* [in] */ VARIANT object,
            /* [in] */ long index) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE getProperty( 
            /* [in] */ BSTR __RPC_FAR *name,
            /* [in] */ long index) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE setProperty( 
            /* [in] */ BSTR name,
            /* [in] */ long index) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE close( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE arg( 
            /* [in] */ long index,
            /* [out][retval] */ VARIANT __RPC_FAR *Argument) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDlgModelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IHTMLDlgModel __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IHTMLDlgModel __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_width )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_width )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_height )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_height )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_top )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_top )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_left )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [in] */ long v);
        
        /* [bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_left )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [out][retval] */ long __RPC_FAR *p);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_retval )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [in] */ VARIANT __RPC_FAR *v);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_retval )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [out][retval] */ VARIANT __RPC_FAR *__RPC_FAR *p);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *objectCount )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [out] */ long __RPC_FAR *num);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *object )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [in] */ VARIANT object,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *getProperty )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [in] */ BSTR __RPC_FAR *name,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setProperty )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [in] */ BSTR name,
            /* [in] */ long index);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *close )( 
            IHTMLDlgModel __RPC_FAR * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *arg )( 
            IHTMLDlgModel __RPC_FAR * This,
            /* [in] */ long index,
            /* [out][retval] */ VARIANT __RPC_FAR *Argument);
        
        END_INTERFACE
    } IHTMLDlgModelVtbl;

    interface IHTMLDlgModel
    {
        CONST_VTBL struct IHTMLDlgModelVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDlgModel_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDlgModel_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDlgModel_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDlgModel_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDlgModel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDlgModel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDlgModel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDlgModel_put_width(This,v)	\
    (This)->lpVtbl -> put_width(This,v)

#define IHTMLDlgModel_get_width(This,p)	\
    (This)->lpVtbl -> get_width(This,p)

#define IHTMLDlgModel_put_height(This,v)	\
    (This)->lpVtbl -> put_height(This,v)

#define IHTMLDlgModel_get_height(This,p)	\
    (This)->lpVtbl -> get_height(This,p)

#define IHTMLDlgModel_put_top(This,v)	\
    (This)->lpVtbl -> put_top(This,v)

#define IHTMLDlgModel_get_top(This,p)	\
    (This)->lpVtbl -> get_top(This,p)

#define IHTMLDlgModel_put_left(This,v)	\
    (This)->lpVtbl -> put_left(This,v)

#define IHTMLDlgModel_get_left(This,p)	\
    (This)->lpVtbl -> get_left(This,p)

#define IHTMLDlgModel_put_retval(This,v)	\
    (This)->lpVtbl -> put_retval(This,v)

#define IHTMLDlgModel_get_retval(This,p)	\
    (This)->lpVtbl -> get_retval(This,p)

#define IHTMLDlgModel_objectCount(This,num)	\
    (This)->lpVtbl -> objectCount(This,num)

#define IHTMLDlgModel_object(This,object,index)	\
    (This)->lpVtbl -> object(This,object,index)

#define IHTMLDlgModel_getProperty(This,name,index)	\
    (This)->lpVtbl -> getProperty(This,name,index)

#define IHTMLDlgModel_setProperty(This,name,index)	\
    (This)->lpVtbl -> setProperty(This,name,index)

#define IHTMLDlgModel_close(This)	\
    (This)->lpVtbl -> close(This)

#define IHTMLDlgModel_arg(This,index,Argument)	\
    (This)->lpVtbl -> arg(This,index,Argument)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_put_width_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLDlgModel_put_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_get_width_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IHTMLDlgModel_get_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_put_height_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLDlgModel_put_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_get_height_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IHTMLDlgModel_get_height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_put_top_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLDlgModel_put_top_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_get_top_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IHTMLDlgModel_get_top_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_put_left_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [in] */ long v);


void __RPC_STUB IHTMLDlgModel_put_left_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_get_left_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [out][retval] */ long __RPC_FAR *p);


void __RPC_STUB IHTMLDlgModel_get_left_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_put_retval_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [in] */ VARIANT __RPC_FAR *v);


void __RPC_STUB IHTMLDlgModel_put_retval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_get_retval_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [out][retval] */ VARIANT __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IHTMLDlgModel_get_retval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_objectCount_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [out] */ long __RPC_FAR *num);


void __RPC_STUB IHTMLDlgModel_objectCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_object_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [in] */ VARIANT object,
    /* [in] */ long index);


void __RPC_STUB IHTMLDlgModel_object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_getProperty_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [in] */ BSTR __RPC_FAR *name,
    /* [in] */ long index);


void __RPC_STUB IHTMLDlgModel_getProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_setProperty_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [in] */ BSTR name,
    /* [in] */ long index);


void __RPC_STUB IHTMLDlgModel_setProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_close_Proxy( 
    IHTMLDlgModel __RPC_FAR * This);


void __RPC_STUB IHTMLDlgModel_close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IHTMLDlgModel_arg_Proxy( 
    IHTMLDlgModel __RPC_FAR * This,
    /* [in] */ long index,
    /* [out][retval] */ VARIANT __RPC_FAR *Argument);


void __RPC_STUB IHTMLDlgModel_arg_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDlgModel_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_HTMLDlgModel;

class HTMLDlgModel;
#endif

#ifndef __IHTMLDlg_INTERFACE_DEFINED__
#define __IHTMLDlg_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IHTMLDlg
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][dual][oleautomation] */ 



EXTERN_C const IID IID_IHTMLDlg;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IHTMLDlg : public IDispatch
    {
    public:
        virtual /* [source][id][propget] */ HRESULT STDMETHODCALLTYPE get_dialog( 
            /* [out][retval] */ IHTMLDlgModel __RPC_FAR *__RPC_FAR *p) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHTMLDlgVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IHTMLDlg __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IHTMLDlg __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IHTMLDlg __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IHTMLDlg __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IHTMLDlg __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IHTMLDlg __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IHTMLDlg __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [source][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_dialog )( 
            IHTMLDlg __RPC_FAR * This,
            /* [out][retval] */ IHTMLDlgModel __RPC_FAR *__RPC_FAR *p);
        
        END_INTERFACE
    } IHTMLDlgVtbl;

    interface IHTMLDlg
    {
        CONST_VTBL struct IHTMLDlgVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHTMLDlg_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IHTMLDlg_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IHTMLDlg_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IHTMLDlg_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IHTMLDlg_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IHTMLDlg_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IHTMLDlg_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IHTMLDlg_get_dialog(This,p)	\
    (This)->lpVtbl -> get_dialog(This,p)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [source][id][propget] */ HRESULT STDMETHODCALLTYPE IHTMLDlg_get_dialog_Proxy( 
    IHTMLDlg __RPC_FAR * This,
    /* [out][retval] */ IHTMLDlgModel __RPC_FAR *__RPC_FAR *p);


void __RPC_STUB IHTMLDlg_get_dialog_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IHTMLDlg_INTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_HTMLDlg;

class HTMLDlg;
#endif

#ifndef __IScrollbar_INTERFACE_DEFINED__
#define __IScrollbar_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IScrollbar
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][hidden][dual][oleautomation] */ 



EXTERN_C const IID IID_IScrollbar;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IScrollbar : public IDispatch
    {
    public:
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackColor( 
            /* [in] */ OLE_COLOR BackColor) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackColor( 
            /* [retval][out] */ OLE_COLOR __RPC_FAR *BackColor) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_ForeColor( 
            /* [in] */ OLE_COLOR ForeColor) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_ForeColor( 
            /* [retval][out] */ OLE_COLOR __RPC_FAR *ForeColor) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL Enabled) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *Enabled) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_MousePointer( 
            /* [in] */ fmMousePointer MousePointer) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_MousePointer( 
            /* [retval][out] */ fmMousePointer __RPC_FAR *MousePointer) = 0;
        
        virtual /* [uidefault][displaybind][defaultbind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ long Value) = 0;
        
        virtual /* [uidefault][displaybind][defaultbind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ long __RPC_FAR *Value) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Min( 
            /* [in] */ long Min) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Min( 
            /* [retval][out] */ long __RPC_FAR *Min) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Max( 
            /* [in] */ long Max) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Max( 
            /* [retval][out] */ long __RPC_FAR *Max) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_SmallChange( 
            /* [in] */ long SmallChange) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_SmallChange( 
            /* [retval][out] */ long __RPC_FAR *SmallChange) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_LargeChange( 
            /* [in] */ long LargeChange) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_LargeChange( 
            /* [retval][out] */ long __RPC_FAR *LargeChange) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_ProportionalThumb( 
            /* [in] */ VARIANT_BOOL ProportionalThumb) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProportionalThumb( 
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *ProportionalThumb) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ fmOrientation Orientation) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ fmOrientation __RPC_FAR *Orientation) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Delay( 
            /* [in] */ long Delay) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Delay( 
            /* [retval][out] */ long __RPC_FAR *Delay) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_MouseIcon( 
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_MouseIcon( 
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_MouseIcon( 
            /* [retval][out] */ /* external definition not present */ Picture __RPC_FAR *__RPC_FAR *MouseIcon) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IScrollbarVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IScrollbar __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IScrollbar __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IScrollbar __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_BackColor )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ OLE_COLOR BackColor);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_BackColor )( 
            IScrollbar __RPC_FAR * This,
            /* [retval][out] */ OLE_COLOR __RPC_FAR *BackColor);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_ForeColor )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ OLE_COLOR ForeColor);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_ForeColor )( 
            IScrollbar __RPC_FAR * This,
            /* [retval][out] */ OLE_COLOR __RPC_FAR *ForeColor);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Enabled )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL Enabled);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Enabled )( 
            IScrollbar __RPC_FAR * This,
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *Enabled);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_MousePointer )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ fmMousePointer MousePointer);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_MousePointer )( 
            IScrollbar __RPC_FAR * This,
            /* [retval][out] */ fmMousePointer __RPC_FAR *MousePointer);
        
        /* [uidefault][displaybind][defaultbind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Value )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ long Value);
        
        /* [uidefault][displaybind][defaultbind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Value )( 
            IScrollbar __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *Value);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Min )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ long Min);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Min )( 
            IScrollbar __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *Min);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Max )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ long Max);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Max )( 
            IScrollbar __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *Max);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SmallChange )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ long SmallChange);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SmallChange )( 
            IScrollbar __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *SmallChange);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_LargeChange )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ long LargeChange);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_LargeChange )( 
            IScrollbar __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *LargeChange);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_ProportionalThumb )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL ProportionalThumb);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_ProportionalThumb )( 
            IScrollbar __RPC_FAR * This,
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *ProportionalThumb);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Orientation )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ fmOrientation Orientation);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Orientation )( 
            IScrollbar __RPC_FAR * This,
            /* [retval][out] */ fmOrientation __RPC_FAR *Orientation);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Delay )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ long Delay);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Delay )( 
            IScrollbar __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *Delay);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_MouseIcon )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon);
        
        /* [helpcontext][displaybind][bindable][id][propputref] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *putref_MouseIcon )( 
            IScrollbar __RPC_FAR * This,
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_MouseIcon )( 
            IScrollbar __RPC_FAR * This,
            /* [retval][out] */ /* external definition not present */ Picture __RPC_FAR *__RPC_FAR *MouseIcon);
        
        END_INTERFACE
    } IScrollbarVtbl;

    interface IScrollbar
    {
        CONST_VTBL struct IScrollbarVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IScrollbar_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IScrollbar_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IScrollbar_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IScrollbar_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IScrollbar_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IScrollbar_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IScrollbar_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IScrollbar_put_BackColor(This,BackColor)	\
    (This)->lpVtbl -> put_BackColor(This,BackColor)

#define IScrollbar_get_BackColor(This,BackColor)	\
    (This)->lpVtbl -> get_BackColor(This,BackColor)

#define IScrollbar_put_ForeColor(This,ForeColor)	\
    (This)->lpVtbl -> put_ForeColor(This,ForeColor)

#define IScrollbar_get_ForeColor(This,ForeColor)	\
    (This)->lpVtbl -> get_ForeColor(This,ForeColor)

#define IScrollbar_put_Enabled(This,Enabled)	\
    (This)->lpVtbl -> put_Enabled(This,Enabled)

#define IScrollbar_get_Enabled(This,Enabled)	\
    (This)->lpVtbl -> get_Enabled(This,Enabled)

#define IScrollbar_put_MousePointer(This,MousePointer)	\
    (This)->lpVtbl -> put_MousePointer(This,MousePointer)

#define IScrollbar_get_MousePointer(This,MousePointer)	\
    (This)->lpVtbl -> get_MousePointer(This,MousePointer)

#define IScrollbar_put_Value(This,Value)	\
    (This)->lpVtbl -> put_Value(This,Value)

#define IScrollbar_get_Value(This,Value)	\
    (This)->lpVtbl -> get_Value(This,Value)

#define IScrollbar_put_Min(This,Min)	\
    (This)->lpVtbl -> put_Min(This,Min)

#define IScrollbar_get_Min(This,Min)	\
    (This)->lpVtbl -> get_Min(This,Min)

#define IScrollbar_put_Max(This,Max)	\
    (This)->lpVtbl -> put_Max(This,Max)

#define IScrollbar_get_Max(This,Max)	\
    (This)->lpVtbl -> get_Max(This,Max)

#define IScrollbar_put_SmallChange(This,SmallChange)	\
    (This)->lpVtbl -> put_SmallChange(This,SmallChange)

#define IScrollbar_get_SmallChange(This,SmallChange)	\
    (This)->lpVtbl -> get_SmallChange(This,SmallChange)

#define IScrollbar_put_LargeChange(This,LargeChange)	\
    (This)->lpVtbl -> put_LargeChange(This,LargeChange)

#define IScrollbar_get_LargeChange(This,LargeChange)	\
    (This)->lpVtbl -> get_LargeChange(This,LargeChange)

#define IScrollbar_put_ProportionalThumb(This,ProportionalThumb)	\
    (This)->lpVtbl -> put_ProportionalThumb(This,ProportionalThumb)

#define IScrollbar_get_ProportionalThumb(This,ProportionalThumb)	\
    (This)->lpVtbl -> get_ProportionalThumb(This,ProportionalThumb)

#define IScrollbar_put_Orientation(This,Orientation)	\
    (This)->lpVtbl -> put_Orientation(This,Orientation)

#define IScrollbar_get_Orientation(This,Orientation)	\
    (This)->lpVtbl -> get_Orientation(This,Orientation)

#define IScrollbar_put_Delay(This,Delay)	\
    (This)->lpVtbl -> put_Delay(This,Delay)

#define IScrollbar_get_Delay(This,Delay)	\
    (This)->lpVtbl -> get_Delay(This,Delay)

#define IScrollbar_put_MouseIcon(This,MouseIcon)	\
    (This)->lpVtbl -> put_MouseIcon(This,MouseIcon)

#define IScrollbar_putref_MouseIcon(This,MouseIcon)	\
    (This)->lpVtbl -> putref_MouseIcon(This,MouseIcon)

#define IScrollbar_get_MouseIcon(This,MouseIcon)	\
    (This)->lpVtbl -> get_MouseIcon(This,MouseIcon)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IScrollbar_put_BackColor_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ OLE_COLOR BackColor);


void __RPC_STUB IScrollbar_put_BackColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IScrollbar_get_BackColor_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [retval][out] */ OLE_COLOR __RPC_FAR *BackColor);


void __RPC_STUB IScrollbar_get_BackColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IScrollbar_put_ForeColor_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ OLE_COLOR ForeColor);


void __RPC_STUB IScrollbar_put_ForeColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IScrollbar_get_ForeColor_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [retval][out] */ OLE_COLOR __RPC_FAR *ForeColor);


void __RPC_STUB IScrollbar_get_ForeColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IScrollbar_put_Enabled_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL Enabled);


void __RPC_STUB IScrollbar_put_Enabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IScrollbar_get_Enabled_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [retval][out] */ VARIANT_BOOL __RPC_FAR *Enabled);


void __RPC_STUB IScrollbar_get_Enabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IScrollbar_put_MousePointer_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ fmMousePointer MousePointer);


void __RPC_STUB IScrollbar_put_MousePointer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IScrollbar_get_MousePointer_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [retval][out] */ fmMousePointer __RPC_FAR *MousePointer);


void __RPC_STUB IScrollbar_get_MousePointer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [uidefault][displaybind][defaultbind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IScrollbar_put_Value_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ long Value);


void __RPC_STUB IScrollbar_put_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [uidefault][displaybind][defaultbind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IScrollbar_get_Value_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *Value);


void __RPC_STUB IScrollbar_get_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IScrollbar_put_Min_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ long Min);


void __RPC_STUB IScrollbar_put_Min_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IScrollbar_get_Min_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *Min);


void __RPC_STUB IScrollbar_get_Min_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IScrollbar_put_Max_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ long Max);


void __RPC_STUB IScrollbar_put_Max_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IScrollbar_get_Max_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *Max);


void __RPC_STUB IScrollbar_get_Max_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IScrollbar_put_SmallChange_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ long SmallChange);


void __RPC_STUB IScrollbar_put_SmallChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IScrollbar_get_SmallChange_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *SmallChange);


void __RPC_STUB IScrollbar_get_SmallChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IScrollbar_put_LargeChange_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ long LargeChange);


void __RPC_STUB IScrollbar_put_LargeChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IScrollbar_get_LargeChange_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *LargeChange);


void __RPC_STUB IScrollbar_get_LargeChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IScrollbar_put_ProportionalThumb_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL ProportionalThumb);


void __RPC_STUB IScrollbar_put_ProportionalThumb_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IScrollbar_get_ProportionalThumb_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [retval][out] */ VARIANT_BOOL __RPC_FAR *ProportionalThumb);


void __RPC_STUB IScrollbar_get_ProportionalThumb_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IScrollbar_put_Orientation_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ fmOrientation Orientation);


void __RPC_STUB IScrollbar_put_Orientation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IScrollbar_get_Orientation_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [retval][out] */ fmOrientation __RPC_FAR *Orientation);


void __RPC_STUB IScrollbar_get_Orientation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IScrollbar_put_Delay_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ long Delay);


void __RPC_STUB IScrollbar_put_Delay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IScrollbar_get_Delay_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *Delay);


void __RPC_STUB IScrollbar_get_Delay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IScrollbar_put_MouseIcon_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon);


void __RPC_STUB IScrollbar_put_MouseIcon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propputref] */ HRESULT STDMETHODCALLTYPE IScrollbar_putref_MouseIcon_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon);


void __RPC_STUB IScrollbar_putref_MouseIcon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IScrollbar_get_MouseIcon_Proxy( 
    IScrollbar __RPC_FAR * This,
    /* [retval][out] */ /* external definition not present */ Picture __RPC_FAR *__RPC_FAR *MouseIcon);


void __RPC_STUB IScrollbar_get_MouseIcon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IScrollbar_INTERFACE_DEFINED__ */


#ifndef __ISpinbutton_INTERFACE_DEFINED__
#define __ISpinbutton_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: ISpinbutton
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][hidden][dual][oleautomation] */ 



EXTERN_C const IID IID_ISpinbutton;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface ISpinbutton : public IDispatch
    {
    public:
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackColor( 
            /* [in] */ OLE_COLOR BackColor) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackColor( 
            /* [retval][out] */ OLE_COLOR __RPC_FAR *BackColor) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_ForeColor( 
            /* [in] */ OLE_COLOR ForeColor) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_ForeColor( 
            /* [retval][out] */ OLE_COLOR __RPC_FAR *ForeColor) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL Enabled) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *Enabled) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_MousePointer( 
            /* [in] */ fmMousePointer MousePointer) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_MousePointer( 
            /* [retval][out] */ fmMousePointer __RPC_FAR *MousePointer) = 0;
        
        virtual /* [uidefault][displaybind][defaultbind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ long Value) = 0;
        
        virtual /* [uidefault][displaybind][defaultbind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ long __RPC_FAR *Value) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Min( 
            /* [in] */ long Min) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Min( 
            /* [retval][out] */ long __RPC_FAR *Min) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Max( 
            /* [in] */ long Max) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Max( 
            /* [retval][out] */ long __RPC_FAR *Max) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_SmallChange( 
            /* [in] */ long SmallChange) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_SmallChange( 
            /* [retval][out] */ long __RPC_FAR *SmallChange) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ fmOrientation Orientation) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ fmOrientation __RPC_FAR *Orientation) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_MouseIcon( 
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_MouseIcon( 
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_MouseIcon( 
            /* [retval][out] */ /* external definition not present */ Picture __RPC_FAR *__RPC_FAR *MouseIcon) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Delay( 
            /* [in] */ long Delay) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Delay( 
            /* [retval][out] */ long __RPC_FAR *Delay) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISpinbuttonVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISpinbutton __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISpinbutton __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ISpinbutton __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_BackColor )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ OLE_COLOR BackColor);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_BackColor )( 
            ISpinbutton __RPC_FAR * This,
            /* [retval][out] */ OLE_COLOR __RPC_FAR *BackColor);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_ForeColor )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ OLE_COLOR ForeColor);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_ForeColor )( 
            ISpinbutton __RPC_FAR * This,
            /* [retval][out] */ OLE_COLOR __RPC_FAR *ForeColor);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Enabled )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL Enabled);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Enabled )( 
            ISpinbutton __RPC_FAR * This,
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *Enabled);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_MousePointer )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ fmMousePointer MousePointer);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_MousePointer )( 
            ISpinbutton __RPC_FAR * This,
            /* [retval][out] */ fmMousePointer __RPC_FAR *MousePointer);
        
        /* [uidefault][displaybind][defaultbind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Value )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ long Value);
        
        /* [uidefault][displaybind][defaultbind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Value )( 
            ISpinbutton __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *Value);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Min )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ long Min);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Min )( 
            ISpinbutton __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *Min);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Max )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ long Max);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Max )( 
            ISpinbutton __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *Max);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SmallChange )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ long SmallChange);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SmallChange )( 
            ISpinbutton __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *SmallChange);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Orientation )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ fmOrientation Orientation);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Orientation )( 
            ISpinbutton __RPC_FAR * This,
            /* [retval][out] */ fmOrientation __RPC_FAR *Orientation);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_MouseIcon )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon);
        
        /* [helpcontext][displaybind][bindable][id][propputref] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *putref_MouseIcon )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_MouseIcon )( 
            ISpinbutton __RPC_FAR * This,
            /* [retval][out] */ /* external definition not present */ Picture __RPC_FAR *__RPC_FAR *MouseIcon);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Delay )( 
            ISpinbutton __RPC_FAR * This,
            /* [in] */ long Delay);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Delay )( 
            ISpinbutton __RPC_FAR * This,
            /* [retval][out] */ long __RPC_FAR *Delay);
        
        END_INTERFACE
    } ISpinbuttonVtbl;

    interface ISpinbutton
    {
        CONST_VTBL struct ISpinbuttonVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISpinbutton_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISpinbutton_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISpinbutton_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISpinbutton_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ISpinbutton_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ISpinbutton_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ISpinbutton_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ISpinbutton_put_BackColor(This,BackColor)	\
    (This)->lpVtbl -> put_BackColor(This,BackColor)

#define ISpinbutton_get_BackColor(This,BackColor)	\
    (This)->lpVtbl -> get_BackColor(This,BackColor)

#define ISpinbutton_put_ForeColor(This,ForeColor)	\
    (This)->lpVtbl -> put_ForeColor(This,ForeColor)

#define ISpinbutton_get_ForeColor(This,ForeColor)	\
    (This)->lpVtbl -> get_ForeColor(This,ForeColor)

#define ISpinbutton_put_Enabled(This,Enabled)	\
    (This)->lpVtbl -> put_Enabled(This,Enabled)

#define ISpinbutton_get_Enabled(This,Enabled)	\
    (This)->lpVtbl -> get_Enabled(This,Enabled)

#define ISpinbutton_put_MousePointer(This,MousePointer)	\
    (This)->lpVtbl -> put_MousePointer(This,MousePointer)

#define ISpinbutton_get_MousePointer(This,MousePointer)	\
    (This)->lpVtbl -> get_MousePointer(This,MousePointer)

#define ISpinbutton_put_Value(This,Value)	\
    (This)->lpVtbl -> put_Value(This,Value)

#define ISpinbutton_get_Value(This,Value)	\
    (This)->lpVtbl -> get_Value(This,Value)

#define ISpinbutton_put_Min(This,Min)	\
    (This)->lpVtbl -> put_Min(This,Min)

#define ISpinbutton_get_Min(This,Min)	\
    (This)->lpVtbl -> get_Min(This,Min)

#define ISpinbutton_put_Max(This,Max)	\
    (This)->lpVtbl -> put_Max(This,Max)

#define ISpinbutton_get_Max(This,Max)	\
    (This)->lpVtbl -> get_Max(This,Max)

#define ISpinbutton_put_SmallChange(This,SmallChange)	\
    (This)->lpVtbl -> put_SmallChange(This,SmallChange)

#define ISpinbutton_get_SmallChange(This,SmallChange)	\
    (This)->lpVtbl -> get_SmallChange(This,SmallChange)

#define ISpinbutton_put_Orientation(This,Orientation)	\
    (This)->lpVtbl -> put_Orientation(This,Orientation)

#define ISpinbutton_get_Orientation(This,Orientation)	\
    (This)->lpVtbl -> get_Orientation(This,Orientation)

#define ISpinbutton_put_MouseIcon(This,MouseIcon)	\
    (This)->lpVtbl -> put_MouseIcon(This,MouseIcon)

#define ISpinbutton_putref_MouseIcon(This,MouseIcon)	\
    (This)->lpVtbl -> putref_MouseIcon(This,MouseIcon)

#define ISpinbutton_get_MouseIcon(This,MouseIcon)	\
    (This)->lpVtbl -> get_MouseIcon(This,MouseIcon)

#define ISpinbutton_put_Delay(This,Delay)	\
    (This)->lpVtbl -> put_Delay(This,Delay)

#define ISpinbutton_get_Delay(This,Delay)	\
    (This)->lpVtbl -> get_Delay(This,Delay)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE ISpinbutton_put_BackColor_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [in] */ OLE_COLOR BackColor);


void __RPC_STUB ISpinbutton_put_BackColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE ISpinbutton_get_BackColor_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [retval][out] */ OLE_COLOR __RPC_FAR *BackColor);


void __RPC_STUB ISpinbutton_get_BackColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE ISpinbutton_put_ForeColor_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [in] */ OLE_COLOR ForeColor);


void __RPC_STUB ISpinbutton_put_ForeColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE ISpinbutton_get_ForeColor_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [retval][out] */ OLE_COLOR __RPC_FAR *ForeColor);


void __RPC_STUB ISpinbutton_get_ForeColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE ISpinbutton_put_Enabled_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL Enabled);


void __RPC_STUB ISpinbutton_put_Enabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE ISpinbutton_get_Enabled_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [retval][out] */ VARIANT_BOOL __RPC_FAR *Enabled);


void __RPC_STUB ISpinbutton_get_Enabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE ISpinbutton_put_MousePointer_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [in] */ fmMousePointer MousePointer);


void __RPC_STUB ISpinbutton_put_MousePointer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE ISpinbutton_get_MousePointer_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [retval][out] */ fmMousePointer __RPC_FAR *MousePointer);


void __RPC_STUB ISpinbutton_get_MousePointer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [uidefault][displaybind][defaultbind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE ISpinbutton_put_Value_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [in] */ long Value);


void __RPC_STUB ISpinbutton_put_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [uidefault][displaybind][defaultbind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE ISpinbutton_get_Value_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *Value);


void __RPC_STUB ISpinbutton_get_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE ISpinbutton_put_Min_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [in] */ long Min);


void __RPC_STUB ISpinbutton_put_Min_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE ISpinbutton_get_Min_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *Min);


void __RPC_STUB ISpinbutton_get_Min_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE ISpinbutton_put_Max_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [in] */ long Max);


void __RPC_STUB ISpinbutton_put_Max_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE ISpinbutton_get_Max_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *Max);


void __RPC_STUB ISpinbutton_get_Max_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE ISpinbutton_put_SmallChange_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [in] */ long SmallChange);


void __RPC_STUB ISpinbutton_put_SmallChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE ISpinbutton_get_SmallChange_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *SmallChange);


void __RPC_STUB ISpinbutton_get_SmallChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE ISpinbutton_put_Orientation_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [in] */ fmOrientation Orientation);


void __RPC_STUB ISpinbutton_put_Orientation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE ISpinbutton_get_Orientation_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [retval][out] */ fmOrientation __RPC_FAR *Orientation);


void __RPC_STUB ISpinbutton_get_Orientation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE ISpinbutton_put_MouseIcon_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon);


void __RPC_STUB ISpinbutton_put_MouseIcon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propputref] */ HRESULT STDMETHODCALLTYPE ISpinbutton_putref_MouseIcon_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon);


void __RPC_STUB ISpinbutton_putref_MouseIcon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE ISpinbutton_get_MouseIcon_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [retval][out] */ /* external definition not present */ Picture __RPC_FAR *__RPC_FAR *MouseIcon);


void __RPC_STUB ISpinbutton_get_MouseIcon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE ISpinbutton_put_Delay_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [in] */ long Delay);


void __RPC_STUB ISpinbutton_put_Delay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE ISpinbutton_get_Delay_Proxy( 
    ISpinbutton __RPC_FAR * This,
    /* [retval][out] */ long __RPC_FAR *Delay);


void __RPC_STUB ISpinbutton_get_Delay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISpinbutton_INTERFACE_DEFINED__ */


#ifndef __IImage_INTERFACE_DEFINED__
#define __IImage_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IImage
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [object][uuid][hidden][dual][oleautomation] */ 



EXTERN_C const IID IID_IImage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface IImage : public IDispatch
    {
    public:
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL fEnabled) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *fEnabled) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_MousePointer( 
            /* [in] */ fmMousePointer MousePointer) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_MousePointer( 
            /* [retval][out] */ fmMousePointer __RPC_FAR *MousePointer) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoSize( 
            /* [in] */ VARIANT_BOOL fAutoSize) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoSize( 
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *fAutoSize) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackColor( 
            /* [in] */ OLE_COLOR BackColor) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackColor( 
            /* [retval][out] */ OLE_COLOR __RPC_FAR *BackColor) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackStyle( 
            /* [in] */ fmBackStyle BackStyle) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackStyle( 
            /* [retval][out] */ fmBackStyle __RPC_FAR *BackStyle) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_BorderColor( 
            /* [in] */ OLE_COLOR BorderColor) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_BorderColor( 
            /* [retval][out] */ OLE_COLOR __RPC_FAR *BorderColor) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_BorderStyle( 
            /* [in] */ fmBorderStyle Style) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_BorderStyle( 
            /* [retval][out] */ fmBorderStyle __RPC_FAR *Style) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_Picture( 
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *Picture) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_Picture( 
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *Picture) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_Picture( 
            /* [retval][out] */ /* external definition not present */ Picture __RPC_FAR *__RPC_FAR *Picture) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_MouseIcon( 
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_MouseIcon( 
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_MouseIcon( 
            /* [retval][out] */ /* external definition not present */ Picture __RPC_FAR *__RPC_FAR *MouseIcon) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureSizeMode( 
            /* [in] */ fmPictureSizeMode PictureSizeMode) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureSizeMode( 
            /* [retval][out] */ fmPictureSizeMode __RPC_FAR *PictureSizeMode) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureAlignment( 
            /* [in] */ fmPictureAlignment PictureAlignment) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureAlignment( 
            /* [retval][out] */ fmPictureAlignment __RPC_FAR *PictureAlignment) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_PictureTiling( 
            /* [in] */ VARIANT_BOOL PictureTiling) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_PictureTiling( 
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *PictureTiling) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpecialEffect( 
            /* [in] */ fmSpecialEffect SpecialEffect) = 0;
        
        virtual /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpecialEffect( 
            /* [retval][out] */ fmSpecialEffect __RPC_FAR *SpecialEffect) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IImageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IImage __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IImage __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IImage __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IImage __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IImage __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IImage __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IImage __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Enabled )( 
            IImage __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL fEnabled);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Enabled )( 
            IImage __RPC_FAR * This,
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *fEnabled);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_MousePointer )( 
            IImage __RPC_FAR * This,
            /* [in] */ fmMousePointer MousePointer);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_MousePointer )( 
            IImage __RPC_FAR * This,
            /* [retval][out] */ fmMousePointer __RPC_FAR *MousePointer);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_AutoSize )( 
            IImage __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL fAutoSize);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_AutoSize )( 
            IImage __RPC_FAR * This,
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *fAutoSize);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_BackColor )( 
            IImage __RPC_FAR * This,
            /* [in] */ OLE_COLOR BackColor);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_BackColor )( 
            IImage __RPC_FAR * This,
            /* [retval][out] */ OLE_COLOR __RPC_FAR *BackColor);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_BackStyle )( 
            IImage __RPC_FAR * This,
            /* [in] */ fmBackStyle BackStyle);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_BackStyle )( 
            IImage __RPC_FAR * This,
            /* [retval][out] */ fmBackStyle __RPC_FAR *BackStyle);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_BorderColor )( 
            IImage __RPC_FAR * This,
            /* [in] */ OLE_COLOR BorderColor);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_BorderColor )( 
            IImage __RPC_FAR * This,
            /* [retval][out] */ OLE_COLOR __RPC_FAR *BorderColor);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_BorderStyle )( 
            IImage __RPC_FAR * This,
            /* [in] */ fmBorderStyle Style);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_BorderStyle )( 
            IImage __RPC_FAR * This,
            /* [retval][out] */ fmBorderStyle __RPC_FAR *Style);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Picture )( 
            IImage __RPC_FAR * This,
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *Picture);
        
        /* [helpcontext][displaybind][bindable][id][propputref] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *putref_Picture )( 
            IImage __RPC_FAR * This,
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *Picture);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Picture )( 
            IImage __RPC_FAR * This,
            /* [retval][out] */ /* external definition not present */ Picture __RPC_FAR *__RPC_FAR *Picture);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_MouseIcon )( 
            IImage __RPC_FAR * This,
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon);
        
        /* [helpcontext][displaybind][bindable][id][propputref] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *putref_MouseIcon )( 
            IImage __RPC_FAR * This,
            /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_MouseIcon )( 
            IImage __RPC_FAR * This,
            /* [retval][out] */ /* external definition not present */ Picture __RPC_FAR *__RPC_FAR *MouseIcon);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_PictureSizeMode )( 
            IImage __RPC_FAR * This,
            /* [in] */ fmPictureSizeMode PictureSizeMode);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_PictureSizeMode )( 
            IImage __RPC_FAR * This,
            /* [retval][out] */ fmPictureSizeMode __RPC_FAR *PictureSizeMode);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_PictureAlignment )( 
            IImage __RPC_FAR * This,
            /* [in] */ fmPictureAlignment PictureAlignment);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_PictureAlignment )( 
            IImage __RPC_FAR * This,
            /* [retval][out] */ fmPictureAlignment __RPC_FAR *PictureAlignment);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_PictureTiling )( 
            IImage __RPC_FAR * This,
            /* [in] */ VARIANT_BOOL PictureTiling);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_PictureTiling )( 
            IImage __RPC_FAR * This,
            /* [retval][out] */ VARIANT_BOOL __RPC_FAR *PictureTiling);
        
        /* [helpcontext][displaybind][bindable][id][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_SpecialEffect )( 
            IImage __RPC_FAR * This,
            /* [in] */ fmSpecialEffect SpecialEffect);
        
        /* [helpcontext][displaybind][bindable][id][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_SpecialEffect )( 
            IImage __RPC_FAR * This,
            /* [retval][out] */ fmSpecialEffect __RPC_FAR *SpecialEffect);
        
        END_INTERFACE
    } IImageVtbl;

    interface IImage
    {
        CONST_VTBL struct IImageVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IImage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IImage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IImage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IImage_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IImage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IImage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IImage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IImage_put_Enabled(This,fEnabled)	\
    (This)->lpVtbl -> put_Enabled(This,fEnabled)

#define IImage_get_Enabled(This,fEnabled)	\
    (This)->lpVtbl -> get_Enabled(This,fEnabled)

#define IImage_put_MousePointer(This,MousePointer)	\
    (This)->lpVtbl -> put_MousePointer(This,MousePointer)

#define IImage_get_MousePointer(This,MousePointer)	\
    (This)->lpVtbl -> get_MousePointer(This,MousePointer)

#define IImage_put_AutoSize(This,fAutoSize)	\
    (This)->lpVtbl -> put_AutoSize(This,fAutoSize)

#define IImage_get_AutoSize(This,fAutoSize)	\
    (This)->lpVtbl -> get_AutoSize(This,fAutoSize)

#define IImage_put_BackColor(This,BackColor)	\
    (This)->lpVtbl -> put_BackColor(This,BackColor)

#define IImage_get_BackColor(This,BackColor)	\
    (This)->lpVtbl -> get_BackColor(This,BackColor)

#define IImage_put_BackStyle(This,BackStyle)	\
    (This)->lpVtbl -> put_BackStyle(This,BackStyle)

#define IImage_get_BackStyle(This,BackStyle)	\
    (This)->lpVtbl -> get_BackStyle(This,BackStyle)

#define IImage_put_BorderColor(This,BorderColor)	\
    (This)->lpVtbl -> put_BorderColor(This,BorderColor)

#define IImage_get_BorderColor(This,BorderColor)	\
    (This)->lpVtbl -> get_BorderColor(This,BorderColor)

#define IImage_put_BorderStyle(This,Style)	\
    (This)->lpVtbl -> put_BorderStyle(This,Style)

#define IImage_get_BorderStyle(This,Style)	\
    (This)->lpVtbl -> get_BorderStyle(This,Style)

#define IImage_put_Picture(This,Picture)	\
    (This)->lpVtbl -> put_Picture(This,Picture)

#define IImage_putref_Picture(This,Picture)	\
    (This)->lpVtbl -> putref_Picture(This,Picture)

#define IImage_get_Picture(This,Picture)	\
    (This)->lpVtbl -> get_Picture(This,Picture)

#define IImage_put_MouseIcon(This,MouseIcon)	\
    (This)->lpVtbl -> put_MouseIcon(This,MouseIcon)

#define IImage_putref_MouseIcon(This,MouseIcon)	\
    (This)->lpVtbl -> putref_MouseIcon(This,MouseIcon)

#define IImage_get_MouseIcon(This,MouseIcon)	\
    (This)->lpVtbl -> get_MouseIcon(This,MouseIcon)

#define IImage_put_PictureSizeMode(This,PictureSizeMode)	\
    (This)->lpVtbl -> put_PictureSizeMode(This,PictureSizeMode)

#define IImage_get_PictureSizeMode(This,PictureSizeMode)	\
    (This)->lpVtbl -> get_PictureSizeMode(This,PictureSizeMode)

#define IImage_put_PictureAlignment(This,PictureAlignment)	\
    (This)->lpVtbl -> put_PictureAlignment(This,PictureAlignment)

#define IImage_get_PictureAlignment(This,PictureAlignment)	\
    (This)->lpVtbl -> get_PictureAlignment(This,PictureAlignment)

#define IImage_put_PictureTiling(This,PictureTiling)	\
    (This)->lpVtbl -> put_PictureTiling(This,PictureTiling)

#define IImage_get_PictureTiling(This,PictureTiling)	\
    (This)->lpVtbl -> get_PictureTiling(This,PictureTiling)

#define IImage_put_SpecialEffect(This,SpecialEffect)	\
    (This)->lpVtbl -> put_SpecialEffect(This,SpecialEffect)

#define IImage_get_SpecialEffect(This,SpecialEffect)	\
    (This)->lpVtbl -> get_SpecialEffect(This,SpecialEffect)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IImage_put_Enabled_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL fEnabled);


void __RPC_STUB IImage_put_Enabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IImage_get_Enabled_Proxy( 
    IImage __RPC_FAR * This,
    /* [retval][out] */ VARIANT_BOOL __RPC_FAR *fEnabled);


void __RPC_STUB IImage_get_Enabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IImage_put_MousePointer_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ fmMousePointer MousePointer);


void __RPC_STUB IImage_put_MousePointer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IImage_get_MousePointer_Proxy( 
    IImage __RPC_FAR * This,
    /* [retval][out] */ fmMousePointer __RPC_FAR *MousePointer);


void __RPC_STUB IImage_get_MousePointer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IImage_put_AutoSize_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL fAutoSize);


void __RPC_STUB IImage_put_AutoSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IImage_get_AutoSize_Proxy( 
    IImage __RPC_FAR * This,
    /* [retval][out] */ VARIANT_BOOL __RPC_FAR *fAutoSize);


void __RPC_STUB IImage_get_AutoSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IImage_put_BackColor_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ OLE_COLOR BackColor);


void __RPC_STUB IImage_put_BackColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IImage_get_BackColor_Proxy( 
    IImage __RPC_FAR * This,
    /* [retval][out] */ OLE_COLOR __RPC_FAR *BackColor);


void __RPC_STUB IImage_get_BackColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IImage_put_BackStyle_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ fmBackStyle BackStyle);


void __RPC_STUB IImage_put_BackStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IImage_get_BackStyle_Proxy( 
    IImage __RPC_FAR * This,
    /* [retval][out] */ fmBackStyle __RPC_FAR *BackStyle);


void __RPC_STUB IImage_get_BackStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IImage_put_BorderColor_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ OLE_COLOR BorderColor);


void __RPC_STUB IImage_put_BorderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IImage_get_BorderColor_Proxy( 
    IImage __RPC_FAR * This,
    /* [retval][out] */ OLE_COLOR __RPC_FAR *BorderColor);


void __RPC_STUB IImage_get_BorderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IImage_put_BorderStyle_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ fmBorderStyle Style);


void __RPC_STUB IImage_put_BorderStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IImage_get_BorderStyle_Proxy( 
    IImage __RPC_FAR * This,
    /* [retval][out] */ fmBorderStyle __RPC_FAR *Style);


void __RPC_STUB IImage_get_BorderStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IImage_put_Picture_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ /* external definition not present */ Picture __RPC_FAR *Picture);


void __RPC_STUB IImage_put_Picture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propputref] */ HRESULT STDMETHODCALLTYPE IImage_putref_Picture_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ /* external definition not present */ Picture __RPC_FAR *Picture);


void __RPC_STUB IImage_putref_Picture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IImage_get_Picture_Proxy( 
    IImage __RPC_FAR * This,
    /* [retval][out] */ /* external definition not present */ Picture __RPC_FAR *__RPC_FAR *Picture);


void __RPC_STUB IImage_get_Picture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IImage_put_MouseIcon_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon);


void __RPC_STUB IImage_put_MouseIcon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propputref] */ HRESULT STDMETHODCALLTYPE IImage_putref_MouseIcon_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ /* external definition not present */ Picture __RPC_FAR *MouseIcon);


void __RPC_STUB IImage_putref_MouseIcon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IImage_get_MouseIcon_Proxy( 
    IImage __RPC_FAR * This,
    /* [retval][out] */ /* external definition not present */ Picture __RPC_FAR *__RPC_FAR *MouseIcon);


void __RPC_STUB IImage_get_MouseIcon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IImage_put_PictureSizeMode_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ fmPictureSizeMode PictureSizeMode);


void __RPC_STUB IImage_put_PictureSizeMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IImage_get_PictureSizeMode_Proxy( 
    IImage __RPC_FAR * This,
    /* [retval][out] */ fmPictureSizeMode __RPC_FAR *PictureSizeMode);


void __RPC_STUB IImage_get_PictureSizeMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IImage_put_PictureAlignment_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ fmPictureAlignment PictureAlignment);


void __RPC_STUB IImage_put_PictureAlignment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IImage_get_PictureAlignment_Proxy( 
    IImage __RPC_FAR * This,
    /* [retval][out] */ fmPictureAlignment __RPC_FAR *PictureAlignment);


void __RPC_STUB IImage_get_PictureAlignment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IImage_put_PictureTiling_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ VARIANT_BOOL PictureTiling);


void __RPC_STUB IImage_put_PictureTiling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IImage_get_PictureTiling_Proxy( 
    IImage __RPC_FAR * This,
    /* [retval][out] */ VARIANT_BOOL __RPC_FAR *PictureTiling);


void __RPC_STUB IImage_get_PictureTiling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propput] */ HRESULT STDMETHODCALLTYPE IImage_put_SpecialEffect_Proxy( 
    IImage __RPC_FAR * This,
    /* [in] */ fmSpecialEffect SpecialEffect);


void __RPC_STUB IImage_put_SpecialEffect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][displaybind][bindable][id][propget] */ HRESULT STDMETHODCALLTYPE IImage_get_SpecialEffect_Proxy( 
    IImage __RPC_FAR * This,
    /* [retval][out] */ fmSpecialEffect __RPC_FAR *SpecialEffect);


void __RPC_STUB IImage_get_SpecialEffect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IImage_INTERFACE_DEFINED__ */


#ifndef __ScrollbarEvents_DISPINTERFACE_DEFINED__
#define __ScrollbarEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: ScrollbarEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_ScrollbarEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface ScrollbarEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ScrollbarEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ScrollbarEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ScrollbarEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ScrollbarEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ScrollbarEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ScrollbarEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ScrollbarEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ScrollbarEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } ScrollbarEventsVtbl;

    interface ScrollbarEvents
    {
        CONST_VTBL struct ScrollbarEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ScrollbarEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ScrollbarEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ScrollbarEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ScrollbarEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ScrollbarEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ScrollbarEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ScrollbarEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ScrollbarEvents_DISPINTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_ScrollBar;

class ScrollBar;
#endif

#ifndef __SpinbuttonEvents_DISPINTERFACE_DEFINED__
#define __SpinbuttonEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: SpinbuttonEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_SpinbuttonEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface SpinbuttonEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct SpinbuttonEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            SpinbuttonEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            SpinbuttonEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            SpinbuttonEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            SpinbuttonEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            SpinbuttonEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            SpinbuttonEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            SpinbuttonEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } SpinbuttonEventsVtbl;

    interface SpinbuttonEvents
    {
        CONST_VTBL struct SpinbuttonEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SpinbuttonEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SpinbuttonEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SpinbuttonEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SpinbuttonEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SpinbuttonEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SpinbuttonEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SpinbuttonEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __SpinbuttonEvents_DISPINTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_SpinButton;

class SpinButton;
#endif

#ifndef __ImageEvents_DISPINTERFACE_DEFINED__
#define __ImageEvents_DISPINTERFACE_DEFINED__

/****************************************
 * Generated header for dispinterface: ImageEvents
 * at Fri Oct 25 18:49:20 1996
 * using MIDL 3.00.44
 ****************************************/
/* [uuid][hidden] */ 



EXTERN_C const IID DIID_ImageEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    interface ImageEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ImageEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ImageEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ImageEvents __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ImageEvents __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            ImageEvents __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            ImageEvents __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            ImageEvents __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            ImageEvents __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        END_INTERFACE
    } ImageEventsVtbl;

    interface ImageEvents
    {
        CONST_VTBL struct ImageEventsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ImageEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ImageEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ImageEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ImageEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ImageEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ImageEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ImageEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ImageEvents_DISPINTERFACE_DEFINED__ */


#ifdef __cplusplus
EXTERN_C const CLSID CLSID_Image;

class Image;
#endif
#endif /* __MSForms_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
