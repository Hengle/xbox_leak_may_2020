






















































































































[
  uuid(B3CF8E20-19B6-11cf-8E4D-00AA004254C4), 
  
  
  
  
  
  
  
  helpstring("Visual C++ Shared Objects"),
  version(6.0),

  helpstringdll("DevTLDcD.dll")



] 
library DSSharedObjects
{
	importlib("stdole2.tlb");


	

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































    
    
    
    

    
    
    
    




















































































































































































































































































































































































































































































































































































 
















































































































































































































































































































































				    











































































































































































































































































































































































































































































































































































































































































































































































































































































































typedef [ helpstringcontext((((((1000+1)+1)+17)+14)+4)) ] enum tagDSWINDOWSTATE
{
	[ helpstringcontext(((((((1000+1)+1)+17)+14)+4)+1)) ]	dsWindowStateMaximized	= 1,
	[ helpstringcontext(((((((1000+1)+1)+17)+14)+4)+2)) ]	dsWindowStateMinimized	= 2,	
	[ helpstringcontext(((((((1000+1)+1)+17)+14)+4)+3)) ]		dsWindowStateNormal		= 3,
} DsWindowState;




typedef [ helpstringcontext(((((((1000+1)+1)+17)+14)+4)+4)) ] enum tagDSARRANGESTYLE
{
	[ helpstringcontext((((((((1000+1)+1)+17)+14)+4)+4)+1)) ]			dsMinimize			= 1,
	[ helpstringcontext((((((((1000+1)+1)+17)+14)+4)+4)+2)) ]	dsTileHorizontal	= 2,
	[ helpstringcontext((((((((1000+1)+1)+17)+14)+4)+4)+3)) ]		dsTileVertical		= 3,
	[ helpstringcontext((((((((1000+1)+1)+17)+14)+4)+4)+4)) ]			dsCascade			= 4
} DsArrangeStyle ;



typedef [ helpstringcontext((((((((1000+1)+1)+17)+14)+4)+4)+5)) ] enum tagDSBUTTONTYPE
{
	[ helpstringcontext(((((((((1000+1)+1)+17)+14)+4)+4)+5)+1)) ]	dsGlyph			= 1,
	[ helpstringcontext(((((((((1000+1)+1)+17)+14)+4)+4)+5)+2)) ]	dsText			= 2
} DsButtonType;



typedef [ helpstringcontext(((((((((1000+1)+1)+17)+14)+4)+4)+5)+3)) ] enum tagDSSAVECHANGES
{
	[ helpstringcontext((((((((((1000+1)+1)+17)+14)+4)+4)+5)+3)+1)) ]		dsSaveChangesYes	= 1, 
	[ helpstringcontext((((((((((1000+1)+1)+17)+14)+4)+4)+5)+3)+2)) ]		dsSaveChangesNo		= 2,
	[ helpstringcontext((((((((((1000+1)+1)+17)+14)+4)+4)+5)+3)+3)) ]	dsSaveChangesPrompt	= 3
} DsSaveChanges ;



typedef [ helpstringcontext((((((((((1000+1)+1)+17)+14)+4)+4)+5)+3)+4)) ] enum tagDSSAVESTATUS
{
	[ helpstringcontext(((((((((((1000+1)+1)+17)+14)+4)+4)+5)+3)+4)+1)) ]	dsSaveSucceeded = 1,	
	[ helpstringcontext(((((((((((1000+1)+1)+17)+14)+4)+4)+5)+3)+4)+2)) ]	dsSaveCanceled = 2		
} DsSaveStatus;




	














































































































[	uuid(FB7FDAE1-89B8-11cf-9BE8-00A0C90A632C),
	helpstringcontext(((1000+1)+1)),
	oleautomation,
	hidden,
	dual
]
interface IGenericDocument: IDispatch
{
			[propget, id(0), helpstringcontext((((1000+1)+1)+1))] 
			HRESULT Name([out, retval] BSTR* pName);

			[propget, id(1), helpstringcontext((((1000+1)+1)+2))] 
			HRESULT FullName([out, retval] BSTR* pName) ;

			[propget, id(2), helpstringcontext(1000)] 
			HRESULT Application([out, retval] IDispatch** ppApplication);

			[propget, id(3), helpstringcontext((1000+1))] 
			HRESULT Parent([out, retval] IDispatch ** ppParent);

			[propget, id(4), helpstringcontext((((1000+1)+1)+3))] 
			HRESULT Path([out, retval] BSTR* pPath);

			[propget, id(5), helpstringcontext((((1000+1)+1)+4))] 
			HRESULT Saved([out, retval] boolean* pSaved);

			[propget, id(6), helpstringcontext((((1000+1)+1)+5))] 
			HRESULT ActiveWindow([out, retval] IDispatch ** ppWindow);

			[propget, id(7), helpstringcontext((((1000+1)+1)+6))] 
			HRESULT ReadOnly([out, retval] boolean* pReadOnly);

			[propput, id(7), helpstringcontext((((1000+1)+1)+6))] 
			HRESULT ReadOnly([in] boolean ReadOnly);

			[propget, id(8), helpstringcontext((((1000+1)+1)+7))] 
			HRESULT Type([out, retval] BSTR* pType);

			[propget, id(9), helpstringcontext((((1000+1)+1)+8))] 
			HRESULT Windows([out, retval] IDispatch **ppWindows);
			
			[propput, id(10), helpstringcontext(((((1000+1)+1)+17)+3))] 
			HRESULT Active([in] boolean bActive);

			[propget, id(10), helpstringcontext(((((1000+1)+1)+17)+3))]
			HRESULT Active([out, retval] boolean *pbActive);


			[id(11), helpstringcontext((((1000+1)+1)+9))] 
			HRESULT NewWindow([out, retval] IDispatch** ppWindow);

			[id(12), helpstringcontext((((1000+1)+1)+10))] 
			HRESULT Save([in, optional] VARIANT vFilename, [in, optional] VARIANT vBoolPrompt, [out, retval] DsSaveStatus* pSaved);

			[id(13), helpstringcontext((((1000+1)+1)+12))] 
			HRESULT Undo([out, retval] boolean* pSuccess);

			[id(14), helpstringcontext((((1000+1)+1)+13))] 
			HRESULT Redo([out, retval] boolean* pSuccess);

			[id(15), helpstringcontext((((1000+1)+1)+14))] 
			HRESULT PrintOut([out, retval] boolean* pSuccess);
			

			[id(16), helpstringcontext((((1000+1)+1)+11))] 
			HRESULT Close([in, optional] VARIANT vSaveChanges, [out, retval] DsSaveStatus* pSaved);

			[id(50), hidden, restricted]
			HRESULT Reserved1();

			[id(51), hidden, restricted]
			HRESULT Reserved2();

			[id(52), hidden, restricted]
			HRESULT Reserved3();

			[id(53), hidden, restricted]
			HRESULT Reserved4();

			[id(54), hidden, restricted]
			HRESULT Reserved5();

			[id(55), hidden, restricted]
			HRESULT Reserved6();

			[id(56), hidden, restricted]
			HRESULT Reserved7();

			[id(57), hidden, restricted]
			HRESULT Reserved8();

			[id(58), hidden, restricted]
			HRESULT Reserved9();

			[id(59), hidden, restricted]
			HRESULT Reserved10();
};



[ uuid(FD20FC80-A9D2-11cf-9C13-00A0C90A632C),
  helpstringcontext((((1000+1)+1)+17)),
  oleautomation,
  hidden,
  dual
]
interface IGenericWindow: IDispatch
{
			[propget, id(0), helpstringcontext(((((1000+1)+1)+17)+1))] 
			HRESULT Caption([out, retval] BSTR *pbstrCaption);

			[propget, id(1), helpstringcontext(((((1000+1)+1)+17)+2))] 
			HRESULT Type([out, retval] BSTR *pbstrCaption);

			[propput, id(2), helpstringcontext(((((1000+1)+1)+17)+3))] 
			HRESULT Active([in] boolean bActive);

			[propget, id(2), helpstringcontext(((((1000+1)+1)+17)+3))]
			HRESULT Active([out, retval] boolean *pbActive);

			[propput, id(3), helpstringcontext(((((1000+1)+1)+17)+4))]
			HRESULT Left([in] long lVal);

			[propget, id(3), helpstringcontext(((((1000+1)+1)+17)+4))] 
			HRESULT Left([out, retval] long *plVal);

			[propput, id(4), helpstringcontext(((((1000+1)+1)+17)+5))] 
			HRESULT Top([in] long lVal);

			[propget, id(4), helpstringcontext(((((1000+1)+1)+17)+5))] 
			HRESULT Top([out, retval] long *plVal);

			[propput, id(5), helpstringcontext(((((1000+1)+1)+17)+7))] 
			HRESULT Height([in] long lVal);

			[propget, id(5), helpstringcontext(((((1000+1)+1)+17)+7))] 
			HRESULT Height([out, retval] long *plVal);

			[propput, id(6), helpstringcontext(((((1000+1)+1)+17)+6))] 
			HRESULT Width([in] long lVal);

			[propget, id(6), helpstringcontext(((((1000+1)+1)+17)+6))] 
			HRESULT Width([out, retval] long *plVal);

			[propget, id(7), helpstringcontext(((((1000+1)+1)+17)+8))] 
			HRESULT Index([out, retval] long *plVal);

			[propget, id(8), helpstringcontext(((((1000+1)+1)+17)+9))] 
			HRESULT Next([out, retval] IDispatch** ppDispatch);

			[propget, id(9), helpstringcontext(((((1000+1)+1)+17)+10))] 
			HRESULT Previous([out, retval] IDispatch** ppDispatch);

			[propput, id(10), helpstringcontext(((((1000+1)+1)+17)+11))] 
			HRESULT WindowState([in] DsWindowState lVal);

			[propget, id(10), helpstringcontext(((((1000+1)+1)+17)+11))] 
			HRESULT WindowState([out, retval] DsWindowState *plVal);

			[propget, id(11), helpstringcontext(1000)] 
			HRESULT Application([out, retval] IDispatch** ppDispatch);

			[propget, id(12), helpstringcontext(((((1000+1)+1)+17)+13))] 
			HRESULT Parent([out, retval] IDispatch** ppDispatch);
			

			[id(13), helpstringcontext(((((1000+1)+1)+17)+12))] 
			HRESULT Close([in] VARIANT boolSaveChanges, [out, retval] DsSaveStatus* pSaved);

			[id(50), hidden, restricted]
			HRESULT Reserved1();

			[id(51), hidden, restricted]
			HRESULT Reserved2();

			[id(52), hidden, restricted]
			HRESULT Reserved3();

			[id(53), hidden, restricted]
			HRESULT Reserved4();

			[id(54), hidden, restricted]
			HRESULT Reserved5();

			[id(55), hidden, restricted]
			HRESULT Reserved6();

			[id(56), hidden, restricted]
			HRESULT Reserved7();

			[id(57), hidden, restricted]
			HRESULT Reserved8();

			[id(58), hidden, restricted]
			HRESULT Reserved9();

			[id(59), hidden, restricted]
			HRESULT Reserved10();
};




	
[ uuid(8CA5A960-FC7D-11cf-927D-00A0C9138C45),
  helpstringcontext(((((1000+1)+1)+17)+14)),
  oleautomation,
  hidden,
  dual
]
interface IGenericProject : IDispatch
{

		[id(0), propget, helpstringcontext((((((1000+1)+1)+17)+14)+1))] 
		HRESULT Name([out, retval] BSTR* Name);

		[id(1), propget, helpstringcontext((((((1000+1)+1)+17)+14)+2))] 
		HRESULT FullName([out, retval] BSTR* Name);

		[id(2), propget, helpstringcontext(1000)] 
		HRESULT Application([out, retval] IDispatch** Application);

		[id(3), propget, helpstringcontext((1000+1))] 
		HRESULT Parent([out, retval] IDispatch** Parent);

		[id(4), propget, helpstringcontext((((((1000+1)+1)+17)+14)+3))] 
		HRESULT Type([out, retval] BSTR* pType);



			[id(50), hidden, restricted]
			HRESULT Reserved1();

			[id(51), hidden, restricted]
			HRESULT Reserved2();

			[id(52), hidden, restricted]
			HRESULT Reserved3();

			[id(53), hidden, restricted]
			HRESULT Reserved4();

			[id(54), hidden, restricted]
			HRESULT Reserved5();

			[id(55), hidden, restricted]
			HRESULT Reserved6();

			[id(56), hidden, restricted]
			HRESULT Reserved7();

			[id(57), hidden, restricted]
			HRESULT Reserved8();

			[id(58), hidden, restricted]
			HRESULT Reserved9();

			[id(59), hidden, restricted]
			HRESULT Reserved10();
};




[ dllname("devshld.dll") ]	module DsProjectTypes
	{
		const LPSTR dsApplication	= "Application";
		const LPSTR dsDLL			= "DLL";
		const LPSTR dsConsoleApp	= "Console Application";
		const LPSTR dsStaticLib		= "Static Library";
		const LPSTR dsUtility		= "Utility";
		const LPSTR dsMakefile		= "Makefile";
		const LPSTR dsFortran1		= "QuickWin Application";
		const LPSTR dsFortran2		= "Standard Graphics Application";
	}






	
	[ uuid(EC1D73A1-8CC4-11cf-9BE9-00A0C90A632C),
	  helpstringcontext(10000),
	  oleautomation,
	  hidden,
	  dual
	]
	interface IApplication: IDispatch
	{
	
		[id(1), propget, helpstringcontext((10000+1))] 
		HRESULT Height([out, retval] long* Height);

		[id(1), propput, helpstringcontext((10000+1))] 
		HRESULT Height([in] long Height);


		[id(2), propget, helpstringcontext((10000+2))] 
		HRESULT Width([out, retval] long* Width);

		[id(2), propput, helpstringcontext((10000+2))] 
		HRESULT Width([in] long Width);


		[id(3), propget, helpstringcontext((10000+3))] 
		HRESULT Top([out, retval] long* Top);

		[id(3), propput, helpstringcontext((10000+3))] 
		HRESULT Top([in] long Top);


		[id(4), propget, helpstringcontext((10000+4))] 
		HRESULT Left([out, retval] long* Left);

		[id(4), propput, helpstringcontext((10000+4))] 
		HRESULT Left([in] long Left);


		[id(0), propget, helpstringcontext((10000+5))] 
		HRESULT Name([out, retval] BSTR* Name);


		[id(18), propget, helpstringcontext((10000+6))]
		HRESULT TextEditor([out, retval] IDispatch** texteditor);

		[id(7), propget, helpstringcontext((10000+7))] 
		HRESULT Version([out, retval] BSTR* Version);

		[id(8), propget, helpstringcontext((10000+8))] 
		HRESULT Path([out, retval] BSTR* Path);


		[id(9), propget, helpstringcontext((10000+9))] 
		HRESULT CurrentDirectory([out, retval] BSTR* CurrentDirectory);

		[id(9), propput, helpstringcontext((10000+9))] 
		HRESULT CurrentDirectory([in] BSTR CurrentDirectory);


		[id(10), propget, helpstringcontext((10000+10))] 
		HRESULT FullName([out, retval] BSTR* FullName);

		[id(11), propget, helpstringcontext(1000)] 
		HRESULT Application([out, retval] IDispatch** Application);

		[id(12), propget, helpstringcontext((1000+1))] 
		HRESULT Parent([out, retval] IDispatch** Parent);

		[id(13), propget, helpstringcontext((10000+11))] 
		HRESULT ActiveDocument([out, retval] IDispatch** ActiveDocument);

		[id(14), propget, helpstringcontext((10000+12))] 
		HRESULT Windows([out, retval] IDispatch** Windows);

		[id(15), propget, helpstringcontext((10000+13))] 
		HRESULT Documents([out, retval] IDispatch** Documents);

		[id(16), propget, helpstringcontext((10000+14))] 
		HRESULT ActiveWindow([out, retval] IDispatch** ActiveWindow);


		[id(17), propget, helpstringcontext((10000+15))] 
		HRESULT WindowState([out, retval] DsWindowState* windowstate);

		[id(17), propput, helpstringcontext((10000+15))]
		HRESULT WindowState([in] DsWindowState windowstate);

		
		[id(6), propget, helpstringcontext((10000+16))]
		HRESULT Debugger([out, retval] IDispatch** ppDebugger);

		[id(19), propget, helpstringcontext((10000+17))]
		HRESULT Projects([out, retval] IDispatch** Projects) ;


		[id(20), propget, helpstringcontext((10000+18))]
		HRESULT ActiveConfiguration([out, retval] IDispatch** ActiveConfiguration);

		[id(20), propput, helpstringcontext((10000+18))]
		HRESULT ActiveConfiguration([in] IDispatch* ActiveConfiguration);



		[id(29), propget, helpstringcontext((10000+19))]
		HRESULT Visible([out, retval] boolean* Visible);

		[id(29), propput, helpstringcontext((10000+19))]
		HRESULT Visible([in] boolean Visible);


		[id(30), propget, helpstringcontext((10000+20))]
		HRESULT ActiveProject([out, retval] IDispatch** ActiveProject);

		[id(30), propput, helpstringcontext((10000+20))]
		HRESULT ActiveProject([in] IDispatch* ActiveProject);

		[propput, id(0x00020003), helpstringcontext((10000+21))] 
		HRESULT Active([in] boolean bActive);

		[propget, id(0x00020003), helpstringcontext((10000+21))] 
		HRESULT Active([out, retval] boolean *pbActive);


		
		[id(21), helpstringcontext((10000+22))] 
		HRESULT GetPackageExtension([in] BSTR szExtensionName, [out, retval] IDispatch** pExt);

		[id(22), helpstringcontext((10000+23))] 
		HRESULT Quit();

		[id(23), helpstringcontext((10000+24))] 
		HRESULT PrintToOutputWindow([in] BSTR Message);

		[id(24), helpstringcontext((10000+25))]
		HRESULT ExecuteCommand([in] BSTR szCommandName);

		[id(25), helpstringcontext((10000+26))] 
		HRESULT AddCommandBarButton([in] long nButtonType, [in] BSTR szCmdName, [in] long dwCookie);

		[id(26), helpstringcontext((10000+27))] 
		HRESULT AddKeyBinding([in] BSTR szKey, [in] BSTR szCommandName, [in] BSTR szEditor);

		[id(27), helpstringcontext((10000+28))]
		HRESULT Build([optional, in] Variant Configuration);

		[id(28), helpstringcontext((10000+29))]
		HRESULT RebuildAll([optional, in] VARIANT configuration);

		[id(31), helpstringcontext((10000+37))]
		HRESULT ExecuteConfiguration([optional, in] VARIANT Reserved);
		
 		
		[id(0x00020001), helpstringcontext((10000+30))] 
						HRESULT SetAddInInfo(	[in] long nInstanceHandle, 
												[in] IDispatch* pCmdDispatch, 
												[in] long nIDBitmapResourceMedium,
												[in] long nIDBitmapResourceLarge, 
												[in] long dwCookie);
		
		[id(0x00020002), helpstringcontext((10000+31))] 
							HRESULT AddCommand(	[in] BSTR szCmdName, 
												[in] BSTR szMethodName, 
												[in] long nBitmapOffset,
												[in] long dwCookie,
												[out, retval] boolean* pbResult);

		[id(0x00020004), helpstringcontext((10000+32))]
		HRESULT EnableModeless([in] boolean bEnable);
		
		[id(32), helpstringcontext((10000+33))]
		HRESULT Clean([optional, in] VARIANT configuration);

		[id(33), propget, helpstringcontext((10000+34))] 
		HRESULT Errors([out, retval] long *Errors);

		[id(34), propget, helpstringcontext((10000+35))] 
		HRESULT Warnings([out, retval] long *Warnings);

		[id(35), helpstringcontext((10000+36))]
		HRESULT AddProject([in] BSTR szName, [in] BSTR szPath, [in] BSTR szType, [in] VARIANT bAddDefaultFolders);

  };
	





	[ uuid(9FD2DF20-190D-11CF-8E4D-00AA004254C4), hidden ]
	dispinterface IDispApplication
	{
		properties:
			
			
			
			
			
			
			
			
			
			
			
			
			
			[id(1)] long Height;
			[id(2)] long Width;
			[id(3)] long Top;
			[id(4)] long Left;
			[id(18), readonly] IDispatch* TextEditor;
			[id(7), readonly] BSTR Version;
			[id(8), readonly] BSTR Path;
			[id(9)] BSTR CurrentDirectory;
			[id(10), readonly] BSTR FullName;
			[id(11), readonly] IDispatch* Application;
			[id(12), readonly] IDispatch* Parent;
			[id(13), readonly] IDispatch* ActiveDocument;
			[id(14), readonly] IDispatch* Windows;
			[id(15), readonly] IDispatch* Documents;
			[id(16), readonly] IDispatch* ActiveWindow;
			[id(17)] long WindowState; 
			[id(6), readonly] IDispatch* Debugger;
			[id(19), readonly] IDispatch* Projects;
			[id(20)] IDispatch* ActiveConfiguration;
			[id(29)] boolean Visible;
			[id(30)] IDispatch* ActiveProject;
			[id(33), readonly] long Errors;
			[id(34), readonly] long Warnings;
			
			[id(0), readonly] BSTR Name;

			[id(0x00020003)] boolean Active;
			
		methods:
			
			
			
			[id(21)] IDispatch* GetPackageExtension(BSTR szExtensionName);
			[id(22)] void Quit();
			[id(23)] void PrintToOutputWindow(BSTR Message);
			[id(24)] void ExecuteCommand(BSTR szCommandName);
			[id(25)] void AddCommandBarButton(long nButtonType, BSTR szCmdName, long dwCookie);
			[id(26)] void AddKeyBinding(BSTR szKey, BSTR szCommandName, BSTR szEditor);
			[id(27)] void Build([optional] Variant Configuration);
			[id(28)] void RebuildAll([optional] VARIANT configuration);
			[id(31)] void ExecuteConfiguration([optional, in] VARIANT Reserved);
			[id(32)] void Clean([optional] Variant Configuration);
			[id(35)] void AddProject(BSTR szName, BSTR szPath, BSTR szType, VARIANT bAddDefaultFolders);
			
			[id(0x00020001)] void SetAddInInfo(long nInstanceHandle, IDispatch* pCmdDispatch, long nIDBitmapResourceMedium, long nIDBitmapResourceLarge, long dwCookie);
			[id(0x00020002)] boolean AddCommand(BSTR szCmdName, BSTR szMethodName, long nBitmapOffset, long dwCookie);
			[id(0x00020004)] void EnableModeless(boolean bEnable);
	};

	[ uuid (8EA3F900-4A9F-11cf-8E4E-00AA004254C4), 
	  helpstringcontext((10000+38)),
	  oleautomation, hidden,
	  dual]
	interface IApplicationEvents : IDispatch
	{
		[id(1), helpstringcontext(((10000+38)+1))]
		HRESULT BeforeBuildStart();

		[id(2), helpstringcontext(((10000+38)+2))]
		HRESULT	BuildFinish([in] long nNumErrors, [in] long nNumWarnings);

		[id(3), helpstringcontext(((10000+38)+3))] 
		HRESULT BeforeApplicationShutDown();

		[id(4), helpstringcontext(((10000+38)+4))]
		HRESULT DocumentOpen([in] IDispatch* theDocument);

		[id(5), helpstringcontext(((10000+38)+5))]
		HRESULT BeforeDocumentClose([in] IDispatch* theDocument);

		[id(6), helpstringcontext(((10000+38)+6))]
		HRESULT DocumentSave([in] IDispatch* theDocument);

		[id(7), helpstringcontext(((10000+38)+7))]
		HRESULT NewDocument([in] IDispatch* theDocument);

		[id(8), helpstringcontext(((10000+38)+8))] 
		HRESULT WindowActivate([in] IDispatch* theWindow);

		[id(9), helpstringcontext(((10000+38)+9))] 
		HRESULT WindowDeactivate([in] IDispatch* theWindow);

		[id(10), helpstringcontext(((10000+38)+10))] 
		HRESULT WorkspaceOpen();

		[id(11), helpstringcontext(((10000+38)+11))] 
		HRESULT WorkspaceClose();

		[id(12), helpstringcontext(((10000+38)+12))] 
		HRESULT NewWorkspace();

	};

 	[ uuid(AE166B02-A9A0-11cf-AD07-00A0C9034965), hidden ]
 	dispinterface IDispApplicationEvents
 	{
 		interface IApplicationEvents;
 	}



	

    [ 
      


	uuid(E8BEA480-DDE4-11cf-9C4A-00A0C90A632C),



      helpstringcontext(10000),
	  appobject
    ]  
    coclass Application
    {
		dispinterface IDispApplication;
		[default] interface IApplication;
		[source] interface IApplicationEvents;
		[default, source] dispinterface IDispApplicationEvents;
    };







	

	[ uuid(FB7FDAE3-89B8-11cf-9BE8-00A0C90A632C),
	  helpstringcontext(((10000+38)+13)),
	  oleautomation, hidden,
	  dual
	]
	interface IDocuments : IDispatch
	{
		
		[propget, id(1), helpstringcontext((((10000+38)+13)+1))]	
		HRESULT Count([out, retval] long* Count);

		[propget, id(2), helpstringcontext(1000)]	
		HRESULT Application([out, retval] IDispatch** ppApplication);

		[propget, id(3), helpstringcontext((1000+1))]	
		HRESULT Parent([out, retval] IDispatch ** ppParent);

		[id(-4), hidden, propget, restricted]
		HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);

		
		[id(0), helpstringcontext((((10000+38)+13)+3))]
		HRESULT Item([in] VARIANT index, [out, retval] IDispatch** Item);

		[id(5), helpstringcontext((((10000+38)+13)+4))]
		HRESULT SaveAll([in, optional] VARIANT vtBoolPrompt, [out, retval] DsSaveStatus* pSaved);

		[id(6), helpstringcontext((((10000+38)+13)+5))]
		HRESULT CloseAll([in, optional] VARIANT vtSaveChanges,  [out, retval] DsSaveStatus* pSaved);

		[id(7), helpstringcontext((((10000+38)+13)+6))]
		HRESULT Add([in] BSTR docType, [in, optional] VARIANT vtReserved, [out, retval] IDispatch ** ppDocument);

		[id(8), helpstringcontext((((10000+38)+13)+7))]
		HRESULT Open([in] BSTR filename, [in, optional] VARIANT vtDocType, 
					[in, optional] VARIANT vtBoolReadOnly, [out, retval] IDispatch ** ppDocument);
	};





	[ uuid(E9EB1AE1-89A8-11CF-9BE8-00A0C90A632C), hidden ]
	dispinterface IDispDocuments
	{
		properties:
			
			
			
			[id(1), readonly] long Count;
			[id(2), readonly] IDispatch* Application;
			[id(3), readonly] IDispatch* Parent;
			
			[id(-4), hidden, readonly] IUnknown* _NewEnum;
			
		methods:
			
			
			
			[id(5)] long SaveAll([optional] VARIANT boolPrompt);
			[id(6)] long CloseAll([optional] VARIANT boolSaveChanges);
			[id(7)] IDispatch* Add(BSTR docType, [optional] VARIANT vtReserved);
			[id(8)] IDispatch* Open(BSTR filename, [optional] VARIANT doctype, [optional] VARIANT readonly);
			
			[id(0)] IDispatch* Item(VARIANT index);

			

	};

	

	[ uuid(E9EB1AE2-89A8-11CF-9BE8-00A0C90A632C) ]
	coclass Documents
	{
		dispinterface IDispDocuments;
		[default] interface IDocuments ;

	};






	

	[ uuid(3928F551-96E6-11cf-9C00-00A0C90A632C),
	  helpstringcontext((((10000+38)+13)+8)),
	  oleautomation, hidden,
	  dual
	]
	interface IWindows : IDispatch
	{
		
		[propget, id(1), helpstringcontext(((((10000+38)+13)+8)+1))]
		HRESULT Count([out, retval] long* Count);

		[propget, id(2), helpstringcontext(1000)]	
		HRESULT Application([out, retval] IDispatch** ppApplication);

		[propget, id(3), helpstringcontext((1000+1))]
		HRESULT Parent([out, retval] IDispatch ** ppParent);

		[id(-4), hidden, propget, restricted]
		HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);

		
		[id(0), helpstringcontext(((((10000+38)+13)+8)+2))]
		HRESULT Item([in] VARIANT index,	[out, retval] IDispatch** Item);

		[id(5), helpstringcontext(((((10000+38)+13)+8)+3))]	
		HRESULT Arrange([in] VARIANT vtArrangeStyle) ;

		[id(6), helpstringcontext(((((10000+38)+13)+8)+4))]
		HRESULT CloseAll([in, optional] VARIANT vtSaveChanges,  [out, retval] DsSaveStatus* pSaved);
	};






	
	[ uuid(5774D191-96E1-11CF-9C00-00A0C90A632C), hidden ]
	dispinterface IDispWindows
	{
		properties:
			
			
			
			[id(1), readonly] long Count;
			[id(2), readonly] IDispatch* Application;
			[id(3), readonly] IDispatch* Parent;
			
			[id(-4), hidden, readonly] IUnknown* _NewEnum;
			
		methods:
			
			
			
			[id(0)] IDispatch* Item(VARIANT index);
			[id(5)] long CloseAll([optional] VARIANT vtSaveChanges);			
			

			
			

	};

	

	[ uuid(5774D192-96E1-11CF-9C00-00A0C90A632C) ]
	coclass Windows
	{
		dispinterface IDispWindows;
		[default] interface IWindows ;
	};

	
	


	
	
	[ uuid(13BF7741-A7E8-11cf-AD07-00A0C9034965),
	  helpstringcontext((((((10000+38)+13)+8)+5)+3)),
	  oleautomation, hidden,
	  dual
	]
	interface IProjects : IDispatch
	{
	
			[id(1), propget, helpstringcontext(1000)]
			HRESULT Application([out, retval] IDispatch** Application);

			[id(2), propget, helpstringcontext(((((((10000+38)+13)+8)+5)+3)+1))]
			HRESULT Count([out, retval] long* Count);

			[id(4), propget, helpstringcontext((1000+1))]
			HRESULT Parent([out, retval] IDispatch** Parent);

			[id(-4), hidden, propget]
			HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
	
	
			[id(0), helpstringcontext(((((((10000+38)+13)+8)+5)+3)+2))]
			HRESULT Item([in] VARIANT Index, [out, retval] IGenericProject** Item);
	};

	
	
	[ uuid(DFAC7C40-A810-11CF-AD07-00A0C9034965), hidden ]
	dispinterface IDispProjects
	{
		properties:
			
			
			
			[id(1), readonly] IDispatch* Application;
			[id(2), readonly] long Count;
			[id(4), readonly] IDispatch* Parent;
			
			[id(-4), hidden, readonly] IUnknown* _NewEnum;

			
		methods:
			
			
			
			[id(0)] IDispatch* Item(VARIANT Index);
			

	};


	

	[ uuid(DFAC7C41-A810-11CF-AD07-00A0C9034965) ]
	coclass Projects
	{
		[default] interface IProjects;
		dispinterface IDispProjects;
	};







	
	
	[ uuid(E1870221-933A-11CF-9BF9-00A0C90A632C), hidden ]
	dispinterface IDispGenericDocument
	{
		properties:
			
			
			
			[id(0), readonly] BSTR Name;
			[id(1), readonly] BSTR FullName;
			[id(2), readonly] IDispatch* Application;
			[id(3), readonly] IDispatch* Parent;
			[id(4), readonly] BSTR Path;
			[id(5)] boolean Saved;
			[id(6)] IDispatch* ActiveWindow;
			[id(7)] boolean ReadOnly;
			[id(8)] BSTR Type;
			[id(9)] IDispatch* Windows;
			
			[id(10)] boolean Active;
			
		methods:
			
			
			
			[id(11)] IDispatch* NewWindow();
			[id(12)] long Save([optional] VARIANT filename, [optional] VARIANT longSaveChanges);
			[id(13)] boolean Undo();
			[id(14)] boolean Redo();
			[id(15)] boolean PrintOut();
			[id(16)] long Close([optional] VARIANT longSaveChanges);
			

			
	};

	

	[ uuid(E1870222-933A-11CF-9BF9-00A0C90A632C) ]
	coclass Document
	{
		dispinterface IDispGenericDocument;
		[default] interface IGenericDocument;
	};







	
	
	[ uuid(E1870223-933A-11CF-9BF9-00A0C90A632C), hidden ]
	dispinterface IDispGenericWindow
	{
		properties:
			
			
			
			[id(1), readonly] BSTR Caption;
			[id(2), readonly] BSTR Type;
			[id(3)] boolean Active;
			[id(4)] long Left;
			[id(5)] long Top;
			[id(6)] long Height;
			[id(7)] long Width;
			[id(8), readonly] long Index;
			[id(9), readonly] IDispatch* Next;
			[id(10), readonly] IDispatch* Previous;
			[id(0), readonly] BSTR _Caption;
			[id(11)] DsWindowState WindowState;
			
			
		methods:
			
			
			
			[id(16)] long Close([optional] VARIANT boolSaveChanges);
			

			
	};

	

	[ uuid(E1870224-933A-11CF-9BF9-00A0C90A632C) ]
	coclass Window
	{
		dispinterface IDispGenericWindow;
		[default] interface IGenericWindow;
	};








	
	
	[ uuid(520BEC60-31E8-11d0-B17F-00A0C91BC8ED), hidden ]
	dispinterface IDispGenericProject
	{
		properties:
			[id(0), readonly] BSTR Name;
			[id(1), readonly] BSTR FullName;
			[id(2), readonly] IDispatch* Application;
			[id(3), readonly] IDispatch* Parent;
			[id(4), readonly] BSTR Type;

		methods:
	};

	[ uuid(520BEC61-31E8-11d0-B17F-00A0C91BC8ED) ]
	coclass Project
	{
		dispinterface IDispGenericProject;
		[default] interface IGenericProject;
	};







	
	
	
	[ uuid (C0002F81-AE2E-11cf-AD07-00A0C9034965), oleautomation, hidden ]
	interface IDSAddIn : IUnknown
	{
		HRESULT OnConnection ([in] IApplication* pApp, [in] boolean bFirstTime,
								[in] long dwCookie, [out, retval] boolean* OnConnection);
		HRESULT OnDisconnection ([in] boolean bLastTime);
	}

	
};
