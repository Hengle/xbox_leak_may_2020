//
// Common Linker Tool
//
// [v-danwh],[matthewt]
//

#ifndef _INCLUDE_TOOLLINK_CMN_H
#define _INCLUDE_TOOLLINK_CMN_H

#include "schmztl.h"			// the CSchmoozeTool class
#include "optnlink.h"			// our COMMON linker tool options

extern BLD_IFACE CSchmoozeTool::SchmoozeData g_schdataLinker;

class BLD_IFACE CLinkerTool : public CSchmoozeTool
{
	DECLARE_DYNAMIC (CLinkerTool)

	virtual const SchmoozeData & GetMacs() const {return g_schdataLinker;}

public:
	CLinkerTool();

	// -> from CBuildTool
	UINT PerformBuildActions(UINT type, UINT stage, CActionSlobList & Actions,
							 DWORD attrib, CErrorContext & EC);

	// Return the files generated by the linker tool
	virtual BOOL GenerateOutput(UINT type, CActionSlobList & actions, CErrorContext & EC);
 
 	// Affects our output?
	virtual BOOL AffectsOutput(UINT idProp);

 	// Generate command lines for a linker
	BOOL GetCommandLines(CActionSlobList &, CPtrList &, DWORD, CErrorContext &);
	// <- from CBuildTool

	virtual BOOL IsConsumableFile(const CPath *pPath);	
	virtual BOOL IsSpecialConsumable(const CPath *pPath);

	// Filter function to pick files this item migth make:
	virtual BOOL IsProductFile(const CPath *pPath);

	// Filter function to pick files to delete on rebuild:
	virtual BOOL IsDelOnRebuildFile(const CPath *pPath);

	virtual BOOL HasPrimaryOutput() {return TRUE;}

	virtual void GetGenericDescription(CString & strDescription);

	//	Ensure that the tool will build an MFC project item.
	//	Likely to entail doing such things as munging tool options, eg. the libs for linker
	virtual BOOL PerformSettingsWizard(CProjItem *, BOOL fDebug, int iUseMFC);

private:
	BOOL IsIncrementalLink() ;
};

class BLD_IFACE CLinkerNTTool : public CLinkerTool
{
	DECLARE_DYNAMIC (CLinkerNTTool)

public:
	CLinkerNTTool() : CLinkerTool() {}

	//	Ensure that the tool will build an MFC project item.
	//	Likely to entail doing such things as munging tool options, eg. the libs for linker
	virtual BOOL PerformSettingsWizard(CProjItem *, BOOL fDebug, int iUseMFC);
};

#endif // _INCLUDE_TOOLLINK_CMN_H

