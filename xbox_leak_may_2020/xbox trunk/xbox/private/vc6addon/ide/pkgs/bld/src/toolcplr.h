//
// Common Compiler Tool
//
// [v-danwh],[matthewt]
//

#ifndef _INCLUDE_TOOLCPLR_CMN_H
#define _INCLUDE_TOOLCPLR_CMN_H

#include "projtool.h"			// the CBuildTool classes
#include "optncplr.h"	// our COMMON compiler tool options

enum PchTypes
{
	NoPch		= 0x0,
	PchAuto		= 0x1,
	PchUse		= 0x2,
	PchCreate	= 0x4
};


#if 0
class COLECompilerTool : public CTool, public CScanner
{
public:
	COLECompilerTool();

// IBUILDTOOL
	virtual BOOL Filter(LPBUILDFILE);
	virtual int PerformBuild( int type, int stage,LPENUMACTION );
	virtual BOOL GenerateCommandLines( LPENUMACTION );
	virtual BOOL GetDependencies( LPENUMACTION );

// IDEPSCANNERPART
	virtual BOOL GenerateDependencies( LPENUMACTION );
};
#endif




class BLD_IFACE CCCompilerTool : public CBuildTool
{
	DECLARE_DYNAMIC (CCCompilerTool)
 
	static const TCHAR *strDefPCHName;

	CCCompilerTool();

	// -> from CBuildTool
	virtual UINT PerformBuildActions(UINT type, UINT stage, CActionSlobList & lstActions,
						     		 DWORD attrib, CErrorContext & EC);

	// Respond to browser info. query/set.
	virtual void OnActionEvent(UINT idEvent, CActionSlob * pAction, DWORD dwExtra = 0);

 	// Scans C/C++ files for includes. Note the routine ignores "include" statements
	// on a line beginning with // but not inside /*  -- */ comment blocks.
	virtual BOOL GenerateDependencies(CActionSlob * pAction, FileRegHandle frhFile, CErrorContext & EC);

	// Return the files generated by the compiler tool
	virtual BOOL GenerateOutput(UINT type, CActionSlobList & actions, CErrorContext & EC);

	// Affects our output?
	virtual BOOL AffectsOutput(UINT idProp);

 	// generate command lines for a C/C++ Compiler, doing all the good ordering things
	BOOL GetCommandLines(CActionSlobList &, CPtrList &, DWORD, CErrorContext &);
	// <- from CBuildTool

	// Scannable.
	virtual BOOL IsScannable() {return TRUE;}

	// Return the semi-colon seperated list of paths to search for Includes in 
	virtual void GetIncludePaths (CProjItem *pItem, CString &str);
	virtual void GetIncludePathFromOptions(CProjItem *pItem, CString& strResult);

	// Return the file reg. handle the name of the PCH file associated with this item
	int GetItemPCHFileName(CProjItem *pItem, FileRegHandle &frh);
	BOOL GetItemAutoPCHFile (CProjItem *pItem, FileRegHandle &frh);

// Define KEEP_PCH to keep the pch instead of deleting it when a rebuild all
// is issued.  This takes advantage of the persistent pch feature of the compiler and
// doesn't break rebuild all even if persistent pch is not supported.
#define KEEP_PCH
#ifdef KEEP_PCH
	BOOL GetItemCreatePCHFile (CProjItem *pItem, FileRegHandle &frh);
#endif

	//	Ensure that the tool will build an MFC project item.
	//	Likely to entail doing such things as munging tool options, eg. the libs for linker
	virtual BOOL PerformSettingsWizard(CProjItem *, BOOL fDebug, int iUseMFC);

	// Filter function to pick interesting files this item might make:
	virtual BOOL IsProductFile(const CPath * pPath);

protected:
	// Writing of compiler source tool makefile syntax.
	virtual void WriteInferenceRuleMacro(CActionSlob * pAction);

	virtual void WriteInferenceRules(CActionSlob * pAction);
	virtual void WriteOutputDirMacro(CActionSlob * pAction);
	virtual OutputDirOptions HasPerConfigOutputDirs(CProjItem * pItem);

	// UNDONE UNDONE UNDONE UNDONE UNDONE UNDONE UNDONE UNDONE UNDONE UNDONE UNDONE
	// These methods exist to replace 'IsKindOf(Tool_Class)' functionality
	// they should be removed with a more extensive re-work of the build system.
	// [matthewt]
	virtual BOOL StoreOptionsOnTarget() {return TRUE;}
	// UNDONE UNDONE UNDONE UNDONE UNDONE UNDONE UNDONE UNDONE UNDONE UNDONE UNDONE

	virtual BOOL HasDependencies( ConfigurationRecord* pcr);
	virtual BOOL GetDependencies( ConfigurationRecord* pcr, CStringArray& strArray, BOOL* bUpToDate = NULL );

	// Support for minimal rebuild dependencies.  This must be overridden
	// if add-on cannot use minimal rebuild information.  Checking
	// compiler version is expensive so save support level one it is known.
	enum MrSupportType {
		Unknown,	// Needs to be calculated.
		None,		// Completely unsupported.
		Full,		// Supports '/FD' compiler switch.
		Partial,	// Can get information if mininmal rebuild is enabled.
	};
	BOOL HasMrSupport() {
		if (Unknown==m_MrSupportLevel)
			CalcMrSupport();
		return None!=m_MrSupportLevel;
	}
	MrSupportType MrSupportLevel() {
		if (Unknown==m_MrSupportLevel)
			CalcMrSupport();
		return m_MrSupportLevel;
	}
	virtual void CalcMrSupport();
	MrSupportType m_MrSupportLevel;
};

class BLD_IFACE CCCompilerNTTool : public CCCompilerTool
{
	DECLARE_DYNAMIC (CCCompilerNTTool)

public:
	CCCompilerNTTool() : CCCompilerTool() {}

	// Utility function used by derived class PerformSettingsWizard() to find the threading type
	int ThreadForUsingMFC(CProjItem * pProjItem, int iUseMFC);

	//	Ensure that the tool will build an MFC project item.
	//	Likely to entail doing such things as munging tool options, eg. the libs for linker
	virtual BOOL PerformSettingsWizard(CProjItem *, BOOL fDebug, int iUseMFC);
};

#endif // _INCLUDE_TOOLCPLR_CMN_H
