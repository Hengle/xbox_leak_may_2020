{\rtf1\ansi \deff0\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn{\*\falt Times New Roman};}{\f2\fswiss\fcharset0\fprq2 Helv{\*\falt Helvetica};}{\f8\froman\fcharset0\fprq2 Times;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\nowidctlpar \fs20 \snext0 Normal;}{\s1\sb240\nowidctlpar \b\f2\ul \sbasedon0\snext0 heading 1;}{\s2\sb120\nowidctlpar \b\f2 \sbasedon0\snext0 heading 2;}{\s3\li360\nowidctlpar \b \sbasedon0\snext17 heading 3;}{\s4\li360\nowidctlpar \ul \sbasedon0\snext17 heading 4;}{\s5\li720\nowidctlpar \b\fs20 \sbasedon0\snext17 heading 5;}{\s6\li720\nowidctlpar \fs20\ul \sbasedon0\snext17 heading 6;}{\s7\li720\nowidctlpar \i\fs20 \sbasedon0\snext17 heading 7;}{\s8\li720\nowidctlpar \i\fs20 \sbasedon0\snext17 heading 8;}{\s9\li720\nowidctlpar \i\fs20 \sbasedon0\snext17 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\*\cs15 \additive\f0\fs16\up6\lang1033 \sbasedon10 footnote reference;}{\s16\nowidctlpar \fs20 \sbasedon0\snext16 footnote text;}{\s17\li720\nowidctlpar \fs20 \sbasedon0\snext17 Normal Indent;}{\s18\fi-240\li480\sb80\nowidctlpar\tx480 \f9 \sbasedon0\snext18 nscba;}{\s19\fi-240\li240\sa20\nowidctlpar \f9 \sbasedon0\snext19 j;}{\s20\li480\sa20\nowidctlpar \f9 \sbasedon0\snext20 ij;}{\s21\sb80\sa20\nowidctlpar \f9 \sbasedon0\snext21 btb;}{\s22\fi-240\li2400\sb20\sa20\nowidctlpar \f9\fs20 \sbasedon0\snext22 ctcb;}{\s23\fi-240\li480\sa40\nowidctlpar\tx480 \f9 \sbasedon0\snext23 ns;}{\s24\sa120\nowidctlpar \f9\fs28 \sbasedon0\snext24 TT;}{\s25\fi-240\li2400\sa20\nowidctlpar \f9 \sbasedon0\snext25 crtj;}{\s26\fi-240\li480\nowidctlpar\tx480 \f9 \sbasedon0\snext26 nsca;}{\s27\sa20\nowidctlpar \f9 \sbasedon0\snext27 bt;}{\s28\li240\sb120\sa40\nowidctlpar \f9 \sbasedon0\snext28 Hf;}{\s29\li240\sb120\sa40\nowidctlpar \f9 \sbasedon0\snext29 Hs;}{\s30\li480\sb120\sa40\nowidctlpar \f9 \sbasedon0\snext30 RT;}{\s31\fi-2160\li2160\sb240\sa80\nowidctlpar\tx2160 \f9 \sbasedon0\snext31 c;}{\s32\li2160\sa20\nowidctlpar \f9 \sbasedon0\snext32 ct;}{\s33\li240\sa20\nowidctlpar \f9 \sbasedon0\snext33 it;}{\s34\li480\nowidctlpar \f9\fs20 \sbasedon0\snext34 nsct;}{\s35\fi-160\li400\sb80\sa40\nowidctlpar \f9 \sbasedon0\snext35 nscb;}{\s36\fi-2640\li2880\sb120\sa40\nowidctlpar\brdrb\brdrs\brdrw15 \brdrbtw\brdrs\brdrw15 \tx2880 \f9 \sbasedon0\snext36 HC2;}{\s37\fi-2640\li2880\sb120\sa20\nowidctlpar\tx2880 \f9 \sbasedon0\snext37 C2;}{\s38\fi-240\li2400\sa20\nowidctlpar \f9\fs20 \sbasedon0\snext38 ctc;}{\s39\li2160\sb160\nowidctlpar \f9 \sbasedon0\snext39 crt;}{\s40\li480\sb20\sa40\nowidctlpar \f9 \sbasedon0\snext40 or;}{\s41\fi-259\li360\sb40\sa40\nowidctlpar\tx360 \f7\fs20 \sbasedon0\snext41 Ln1;}{\s42\li115\sb80\sa80\nowidctlpar \f7\fs20 \sbasedon0\snext0 *Intro;}{\s43\li115\sb80\sa80\keepn\nowidctlpar \b\f7 \sbasedon3\snext42 *Title;}{\s44\fi-245\li360\sb80\nowidctlpar \f7\fs20 \snext44 *Jl;}{\s45\li360\sb40\sa40\nowidctlpar \f7\fs20 \snext0 Lp1;}{\s46\fi-1800\li1915\sb60\sl-240\slmult0\nowidctlpar\tx1915 \f7\fs20 \sbasedon0\snext46 Tph;}{\s47\li115\sb120\sa80\nowidctlpar \b\f7\fs20 \snext41 Proch;}{\*\cs48 \additive\super \sbasedon10 endnote reference;}}{\info{\title AFXCORE}{\subject MFC Core RTF Help}{\author AFX}{\creatim\yr1992\mo10\dy7\hr11\min4}{\version1}{\edmins12}{\nofpages0}{\nofwords0}{\nofchars0}{\vern49221}}\widowctrl\ftnbj\aenddoc\makebackup\hyphcaps0 \fet0\sectd \linex576\endnhere {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \sl240\slmult0\widctlpar \fs20 
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COClipboard_Empty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COClipboard; Empty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COClipboard::Empty}}{\f8\fs22  }
{\f8\fs32 BOOL COClipboard::Empty(void)}
{\f8\fs22 \par \par Clear the text on the system clipboard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coclip.cpp, 32\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COClipboard_GetText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COClipboard; GetText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COClipboard::GetText}}{\f8\fs22  }
{\f8\fs32 CString COClipboard::GetText(void)}
{\f8\fs22 \par \par Get the text from the system clipboard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the text from the system clipboard.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coclip.cpp, 54\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COClipboard_SetText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COClipboard; SetText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COClipboard::SetText}}{\f8\fs22  }
{\f8\fs32 BOOL COClipboard::SetText(LPCSTR szTextIn)}
{\f8\fs22 \par \par Set the text in the system clipboard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szTextIn}
{\f8\fs22 : A pointer to a string containing the text to put in the clipboard.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coclip.cpp, 91\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CIME_Enable}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CIME; Enable}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CIME::Enable}}{\f8\fs22  }
{\f8\fs32 BOOL CIME::Enable(BOOL bEnable /*=TRUE*/)}
{\f8\fs22 \par \par Enable or disable the IME for input. The IME must be open to call this function (see CIME::Open).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bEnable}
{\f8\fs22 : A Boolean value that specifies whether the enable the IME (TRUE) or disable it. (Default value is TRUE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 imewrap.cpp, 125\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CIME_IsEnabled}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CIME; IsEnabled}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CIME::IsEnabled}}{\f8\fs22  }
{\f8\fs32 BOOL CIME::IsEnabled(void)}
{\f8\fs22 \par \par Determine if the IME is enabled.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the IME is enabled (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 imewrap.cpp, 154\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CIME_Open}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CIME; Open}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CIME::Open}}{\f8\fs22  }
{\f8\fs32 BOOL CIME::Open(BOOL bOpen /*=TRUE*/)}
{\f8\fs22 \par \par Open or close the IME. The IME must be open before calling any other IME functions.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bOpen}
{\f8\fs22 : A Boolean value that specifies whether to open the IME (TRUE) or close it. (Default value is TRUE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 imewrap.cpp, 177\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CIME_IsOpen}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CIME; IsOpen}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CIME::IsOpen}}{\f8\fs22  }
{\f8\fs32 int CIME::IsOpen(void)}
{\f8\fs22 \par \par Determine if the IME is open.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. 0 if the IME's not open; -1 if the IME is open with no partial string entry; a positive value of the count of characters entered if the IME is open with a partial string entry.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 imewrap.cpp, 221\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CIME_Flush}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CIME; Flush}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CIME::Flush}}{\f8\fs22  }
{\f8\fs32 void CIME::Flush(HWND hwnd)}
{\f8\fs22 \par \par Flush any remaining keystrokes to the IME. The IME must be open to call this function (see CIME::Open).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : The HWND of the window using the IME. This parameter is NYI.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 imewrap.cpp, 250\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CIME_GetMode}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CIME; GetMode}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CIME::GetMode}}{\f8\fs22  }
{\f8\fs32 UINT CIME::GetMode(void)}
{\f8\fs22 \par \par Get the current mode of the IME. This value is the combination the current mode of each setting in the IME.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An unsigned integer that contains the current mode of the IME.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 imewrap.cpp, 272\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CIME_SetMode}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CIME; SetMode}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CIME::SetMode}}{\f8\fs22  }
{\f8\fs32 UINT CIME::SetMode(UINT flags)}
{\f8\fs22 \par \par Set the mode of the IME by value. (See CIME::SetMode(EAlphabets, UINT, BOOL, BOOL) to set by enumeration.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An unsigned integer that contains the mode actually set in the IME.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 flags}
{\f8\fs22 : An unsigned integer that specifies the mode to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 imewrap.cpp, 295\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CIME_SetMode}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CIME; SetMode}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CIME::SetMode}}{\f8\fs22  }
{\f8\fs32 UINT CIME::SetMode(EAlphabets eAlphabet /*=ALPHA*/, UINT nBytes /*=1*/, BOOL bRoman /*=TRUE*/, BOOL bCodeInput /*=FALSE*/)}
{\f8\fs22 \par \par Set the mode of the IME by enumeration. (See CIME::SetMode(UINT) to set by value.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An unsigned integer that contains the mode actually set in the IME.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 eAlphabet}
{\f8\fs22 : An EAlphabets value that specifies the type of alphabet to set in the IME: DONTCARE, ALPHA, KATAKANA, HIRAGANA. (Default value is ALPHA.)\par \par }
{\i\f8\fs22 nBytes}
{\f8\fs22 : An integer that specifies the number of bytes: SBCS (1) or DBCS (2). (Default value is 1.)\par \par }
{\i\f8\fs22 bRoman}
{\f8\fs22 : A Boolean value that specifies whether to set the IME to Roman mode (TRUE) or NoRoman mode. NoRoman mode has not been found to be useful. (Default value is TRUE.)\par \par }
{\i\f8\fs22 bCodeInput}
{\f8\fs22 : A Boolean value that specifies whether to set the IME to code input mode (TRUE) or no code input mode. Code input mode has not been found to be useful. (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 imewrap.cpp, 335\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CIME_SendVKey}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CIME; SendVKey}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CIME::SendVKey}}{\f8\fs22  }
{\f8\fs32 BOOL CIME::SendVKey(UINT vKey)}
{\f8\fs22 \par \par Send the IME a virtual keystroke.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 vKey}
{\f8\fs22 : An integer that specifies the virtual key to send to the IME.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 imewrap.cpp, 474\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WGetFocus}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WGetFocus}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WGetFocus}}{\f8\fs22  }
{\f8\fs32 HWND CMSTest::WGetFocus(void)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WGetFocus. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An HWND.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 90\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WStaticSetClass}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WStaticSetClass}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WStaticSetClass}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WStaticSetClass(LPSTR lpszClassName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WStaticSetClass. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpszClassName}
{\f8\fs22 : A pointer to a string that contains the static window class name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 102\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WIsVisible}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WIsVisible}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WIsVisible}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WIsVisible(HWND hwnd)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WIsVisible. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : An HWND that specifies the window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 113\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WGetText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WGetText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WGetText}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WGetText(HWND hwnd, CString& strBuffer)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WGetText. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : An HWND that specifies the window.\par \par }
{\i\f8\fs22 strBuffer}
{\f8\fs22 : A reference to a CString that will contain the text of the specified window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 125\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WFndWndWait}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WFndWndWait}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WFndWndWait}}{\f8\fs22  }
{\f8\fs32 HWND CMSTest::WFndWndWait(LPCSTR lpcszCaption, UINT uFlags, UINT uSeconds)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WFndWndWait. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An HWND of the window.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszCaption}
{\f8\fs22 : A pointer to a string that contains the caption of the window.\par \par }
{\i\f8\fs22 uFlags}
{\f8\fs22 : A bitfield that specifies the type of window.\par \par }
{\i\f8\fs22 uSeconds}
{\f8\fs22 : An integer that specifies the number of seconds to wait for the window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 147\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WFndWndWaitC}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WFndWndWaitC}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WFndWndWaitC}}{\f8\fs22  }
{\f8\fs32 HWND CMSTest::WFndWndWaitC(LPCSTR lpcszCaption, LPCSTR lpcszClass, UINT uFlags, UINT uSeconds)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WFndWndWaitC. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An HWND of the window.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszCaption}
{\f8\fs22 : A pointer to a string that contains the caption of the window.\par \par }
{\i\f8\fs22 lpcszClass}
{\f8\fs22 : A pointer to a string that contains the name of the window class of the window.\par \par }
{\i\f8\fs22 uFlags}
{\f8\fs22 : A bitfield that specifies the type of window.\par \par }
{\i\f8\fs22 uSeconds}
{\f8\fs22 : An integer that specifies the number of seconds to wait for the window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 159\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WFndWnd}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WFndWnd}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WFndWnd}}{\f8\fs22  }
{\f8\fs32 HWND CMSTest::WFndWnd(LPCSTR lpcszCaption, UINT uFlags)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WFndWnd. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An HWND of the window.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszCaption}
{\f8\fs22 : A pointer to a string that contains the caption of the window.\par \par }
{\i\f8\fs22 uFlags}
{\f8\fs22 : A bitfield that specifies the type of window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 169\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WFndWndC}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WFndWndC}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WFndWndC}}{\f8\fs22  }
{\f8\fs32 HWND CMSTest::WFndWndC(LPCSTR lpcszCaption, LPCSTR lpcszClass, UINT uFlags)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WFndWndC. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An HWND of the window.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszCaption}
{\f8\fs22 : A pointer to a string that contains the caption of the window.\par \par }
{\i\f8\fs22 lpcszClass}
{\f8\fs22 : A pointer to a string that contains the name of the window class of the window.\par \par }
{\i\f8\fs22 uFlags}
{\f8\fs22 : A bitfield that specifies the type of window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 180\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WSetWndSiz}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WSetWndSiz}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WSetWndSiz}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WSetWndSiz(HWND hwnd, int w,  int h)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WSetWndSiz. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : The HWND of the window.\par \par }
{\i\f8\fs22 w}
{\f8\fs22 : An integer that contains the width to set.\par \par }
{\i\f8\fs22 h}
{\f8\fs22 : An integer that contains the height to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 197\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WGetWndSiz}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WGetWndSiz}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WGetWndSiz}}{\f8\fs22  }
{\f8\fs32 CSize CMSTest::WGetWndSiz(HWND hwnd)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WGetWndSiz. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CSize object that contains the size of the window.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : The HWND of the window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 212\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WSetActWnd}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WSetActWnd}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WSetActWnd}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WSetActWnd(HWND hwnd)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WSetActWnd. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : The HWND of the window to make active.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 222\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WGetActWnd}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WGetActWnd}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WGetActWnd}}{\f8\fs22  }
{\f8\fs32 HWND CMSTest::WGetActWnd(HWND hwnd)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WGetActWnd. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the active window.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : The HWND of the window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 231\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WMenu}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WMenu}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WMenu}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WMenu(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WMenu. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the menu name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 247\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WMenuExists}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WMenuExists}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WMenuExists}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WMenuExists(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WMenuExists. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the menu exists.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the menu name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 258\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WMenuGrayed}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WMenuGrayed}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WMenuGrayed}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WMenuGrayed(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WMenuGrayed. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the menu is grayed.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the menu name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 267\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WMenuChecked}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WMenuChecked}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WMenuChecked}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WMenuChecked(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WMenuChecked. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the menu is checked.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the menu name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 276\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WMenuEnabled}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WMenuEnabled}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WMenuEnabled}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WMenuEnabled(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WMenuEnabled. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the menu is enabled.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the menu name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 285\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WMenuCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WMenuCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WMenuCount}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WMenuCount(void)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WMenuCount. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that specifies the number of items in the menu.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 293\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WMenuText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WMenuText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WMenuText}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WMenuText(LPCSTR lpcszName, CString& strBuffer)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WMenuText. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the menu name.\par \par }
{\i\f8\fs22 strBuffer}
{\f8\fs22 : A CString reference that will contain the name of the menu.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 303\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WMenuEnd}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WMenuEnd}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WMenuEnd}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WMenuEnd(void)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WMenuEnd. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 316\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WButtonExists}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WButtonExists}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WButtonExists}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WButtonExists(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WButtonExists. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the button exists.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the button name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 346\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WButtonEnabled}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WButtonEnabled}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WButtonEnabled}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WButtonEnabled(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WButtonEnabled. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the button is enabled.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the button name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 355\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WButtonFocus}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WButtonFocus}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WButtonFocus}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WButtonFocus(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WButtonFocus. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the button has focus.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the button name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 364\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WButtonClick}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WButtonClick}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WButtonClick}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WButtonClick(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WButtonClick. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the button name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 373\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WButtonSetFocus}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WButtonSetFocus}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WButtonSetFocus}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WButtonSetFocus(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WButtonSetFocus. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the button name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 390\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WCheckExists}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WCheckExists}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WCheckExists}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WCheckExists(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WCheckExists. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the check box exists.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the check box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 406\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WCheckEnabled}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WCheckEnabled}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WCheckEnabled}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WCheckEnabled(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WCheckEnabled. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the check box is enabled.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the check box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 415\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WCheckFocus}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WCheckFocus}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WCheckFocus}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WCheckFocus(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WCheckFocus. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the check box has focus.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the check box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 424\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WCheckState}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WCheckState}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WCheckState}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WCheckState(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WCheckState. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value that indicates the state of the check box.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the check box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 433\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WCheckClick}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WCheckClick}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WCheckClick}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WCheckClick(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WCheckClick. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the check box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 442\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WCheckCheck}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WCheckCheck}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WCheckCheck}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WCheckCheck(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WCheckCheck. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the check box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 457\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WCheckUnCheck}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WCheckUnCheck}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WCheckUnCheck}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WCheckUnCheck(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WCheckUnCheck. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the check box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 467\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WCheckSetFocus}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WCheckSetFocus}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WCheckSetFocus}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WCheckSetFocus(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WCheckSetFocus. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the check box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 477\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WOptionExists}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WOptionExists}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WOptionExists}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WOptionExists(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WOptionExists. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the radio button exists.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the radio button name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 493\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WOptionEnabled}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WOptionEnabled}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WOptionEnabled}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WOptionEnabled(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WOptionEnabled. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the radio button is enabled.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the radio button name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 502\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WOptionFocus}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WOptionFocus}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WOptionFocus}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WOptionFocus(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WOptionFocus. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the radio button has focus.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the radio button name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 511\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WOptionState}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WOptionState}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WOptionState}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WOptionState(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WOptionState. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the state of the radio button.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the radio button name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 520\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WOptionClick}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WOptionClick}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WOptionClick}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WOptionClick(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WOptionClick. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the radio button name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 529\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WOptionSelect}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WOptionSelect}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WOptionSelect}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WOptionSelect(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WOptionSelect. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the radio button name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 544\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WOptionSetFocus}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WOptionSetFocus}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WOptionSetFocus}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WOptionSetFocus(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WOptionSetFocus. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the radio button name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 554\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListExists}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListExists}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListExists}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WListExists(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListExists. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the list box exists.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 570\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListCount}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WListCount(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListCount. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the number of items in the list.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 579\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListText}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WListText(LPCSTR lpcszName, CString& strBuffer)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListText. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\i\f8\fs22 strBuffer}
{\f8\fs22 : A CString reference that will contain the text of the list box.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 589\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListLen}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListLen}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListLen}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WListLen(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListLen. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that specifies the length of the list.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 599\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListIndex}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListIndex}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListIndex}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WListIndex(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListIndex. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that specifies the index.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 608\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListItemText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListItemText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListItemText}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WListItemText(LPCSTR lpcszName, int iIndex, CString& strBuffer)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListItemText. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\i\f8\fs22 iIndex}
{\f8\fs22 : An integer that specifies the 1-based index into the list box.\par \par }
{\i\f8\fs22 strBuffer}
{\f8\fs22 : A CString reference that will contain the text of the list box item.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 621\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListItemLen}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListItemLen}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListItemLen}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WListItemLen(LPCSTR lpcszName, int iIndex)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListItemLen. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the length of the list box item.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\i\f8\fs22 iIndex}
{\f8\fs22 : An integer that specififes the 1-based index into the list box.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 632\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListItemExists}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListItemExists}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListItemExists}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WListItemExists(LPCSTR lpcszName, LPCSTR lpcszItem)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListItemExists. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates whether the list box item exists.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\i\f8\fs22 lpcszItem}
{\f8\fs22 : A pointer to a string that contains the name of the list box item.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 642\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListItemClk}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListItemClk}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListItemClk}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WListItemClk(LPCSTR lpcszName, int iIndex, int nOffset /*=0*/)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListItemClk. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\i\f8\fs22 iIndex}
{\f8\fs22 : An integer that specifies the 1-based index of the list box item.\par \par }
{\i\f8\fs22 nOffset}
{\f8\fs22 : An integer that specifies the offset. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 653\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListItemClk}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListItemClk}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListItemClk}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WListItemClk(LPCSTR lpcszName, LPCSTR szItem, int nOffset /*=0*/)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListItemClk. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\i\f8\fs22 szItem}
{\f8\fs22 : A pointer to a string taht contains the name of the list box item.\par \par }
{\i\f8\fs22 nOffset}
{\f8\fs22 : An integer that specifies the offset. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 667\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListItemCtrlClk}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListItemCtrlClk}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListItemCtrlClk}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WListItemCtrlClk(LPCSTR lpcszName, int iIndex, int nOffset /*=0*/)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListItemCtrlClk. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\i\f8\fs22 iIndex}
{\f8\fs22 : An integer that specifies the 1-based index of the list box item.\par \par }
{\i\f8\fs22 nOffset}
{\f8\fs22 : An integer that specifies the offset. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 679\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListItemCtrlClk}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListItemCtrlClk}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListItemCtrlClk}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WListItemCtrlClk(LPCSTR lpcszName, LPCSTR szItem, int nOffset /*=0*/)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListItemCtrlClk. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\i\f8\fs22 szItem}
{\f8\fs22 : A pointer to a string taht contains the name of the list box item.\par \par }
{\i\f8\fs22 nOffset}
{\f8\fs22 : An integer that specifies the offset. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 693\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListItemShftClk}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListItemShftClk}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListItemShftClk}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WListItemShftClk(LPCSTR lpcszName, int iIndex, int nOffset /*=0*/)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListItemShftClk. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\i\f8\fs22 iIndex}
{\f8\fs22 : An integer that specifies the 1-based index of the list box item.\par \par }
{\i\f8\fs22 nOffset}
{\f8\fs22 : An integer that specifies the offset. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 705\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListItemShftClk}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListItemShftClk}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListItemShftClk}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WListItemShftClk(LPCSTR lpcszName, LPCSTR szItem, int nOffset /*=0*/)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListItemShftClk. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\i\f8\fs22 szItem}
{\f8\fs22 : A pointer to a string taht contains the name of the list box item.\par \par }
{\i\f8\fs22 nOffset}
{\f8\fs22 : An integer that specifies the offset. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 719\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListItemDblClk}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListItemDblClk}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListItemDblClk}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WListItemDblClk(LPCSTR lpcszName, int iIndex, int nOffset /*=0*/)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListItemDblClk. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\i\f8\fs22 iIndex}
{\f8\fs22 : An integer that specifies the 1-based index of the list box item.\par \par }
{\i\f8\fs22 nOffset}
{\f8\fs22 : An integer that specifies the offset. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 730\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListItemDblClk}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListItemDblClk}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListItemDblClk}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WListItemDblClk(LPCSTR lpcszName, LPCSTR szItem, int nOffset /*=0*/)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListItemDblClk. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\i\f8\fs22 szItem}
{\f8\fs22 : A pointer to a string taht contains the name of the list box item.\par \par }
{\i\f8\fs22 nOffset}
{\f8\fs22 : An integer that specifies the offset. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 743\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListSelCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListSelCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListSelCount}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WListSelCount(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListSelCount. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the number of selected items in the list box.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 753\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListSelItems}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListSelItems}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListSelItems}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WListSelItems(LPCSTR lpcszName, LPINT lpIntArray)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListSelItems. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\i\f8\fs22 lpIntArray}
{\f8\fs22 : An array of integers that specifies the items to select in the list box.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 763\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListEnabled}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListEnabled}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListEnabled}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WListEnabled(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListEnabled. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the list box is enabled.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 777\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WListSetFocus}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WListSetFocus}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WListSetFocus}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WListSetFocus(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WListSetFocus. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <void>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the list box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 786\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboExists}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboExists}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboExists}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WComboExists(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboExists. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the combo box exists.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 803\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboCount}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WComboCount(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboCount. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the number of items in the combo box.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 812\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboText}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WComboText(LPCSTR lpcszName, CString& strBuff)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboText. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\i\f8\fs22 strBuff}
{\f8\fs22 : A CString reference that will contain the text of the combo box.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 822\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboLen}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboLen}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboLen}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WComboLen(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboLen. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the length of the combo box.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 832\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboIndex}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboIndex}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboIndex}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WComboIndex(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboIndex. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the combo box index.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 841\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboSetText }
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboSetText }}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboSetText }}{\f8\fs22  }
{\f8\fs32 void CMSTest::WComboSetText (LPCSTR lpcszName, LPCSTR lpcszText)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboSetText. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\i\f8\fs22 lpcszText}
{\f8\fs22 : A pointer to a string that contains the text to set in the combo box.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 851\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboSelText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboSelText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboSelText}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WComboSelText(LPCSTR lpcszName, CString& strBuff)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboSelText. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\i\f8\fs22 strBuff}
{\f8\fs22 : A CString reference that will contain the selected text in the combo box.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 866\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboSelLen}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboSelLen}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboSelLen}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WComboSelLen(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboSelLen. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the length of the selected text in the combo box.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 876\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboItemText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboItemText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboItemText}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WComboItemText(LPCSTR lpcszName, int iIndex, CString& strBuff)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboItemText. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\i\f8\fs22 iIndex}
{\f8\fs22 : An integer that specifies the 1-based index of the combo box item.\par \par }
{\i\f8\fs22 strBuff}
{\f8\fs22 : A CString reference that will contain the text of the combo box item.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 887\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboItemLen}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboItemLen}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboItemLen}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WComboItemLen(LPCSTR lpcszName, int iIndex)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboItemLen. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the length of the combo box item.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\i\f8\fs22 iIndex}
{\f8\fs22 : An integer that specifies the 1-based index of the combo box item.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 898\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboItemExists}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboItemExists}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboItemExists}}{\f8\fs22  }
{\f8\fs32 int CMSTest::WComboItemExists(LPCSTR lpcszName, LPCSTR lpcszItem)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboItemExists. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates whether the combo box item exists.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\i\f8\fs22 lpcszItem}
{\f8\fs22 : A pointer to a string that contains the name of the combo box item.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 908\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboItemClk}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboItemClk}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboItemClk}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WComboItemClk(LPCSTR lpcszName, int iIndex)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboItemClk. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\i\f8\fs22 iIndex}
{\f8\fs22 : An integer that specifies the 1-based index of the combo box item.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 918\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboItemClk}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboItemClk}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboItemClk}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WComboItemClk(LPCSTR lpcszName, LPCSTR szItem)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboItemClk. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\i\f8\fs22 szItem}
{\f8\fs22 : A pointer to a string that contains the name of the combo box item.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 931\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboItemDblClk}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboItemDblClk}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboItemDblClk}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WComboItemDblClk(LPCSTR lpcszName, int iIndex)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboItemDblClk. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\i\f8\fs22 iIndex}
{\f8\fs22 : An integer that specifies the 1-based index of the combo box item.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 942\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboItemDblClk}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboItemDblClk}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboItemDblClk}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WComboItemDblClk(LPCSTR lpcszName, LPCSTR szItem)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboItemDblClk. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\i\f8\fs22 szItem}
{\f8\fs22 : A pointer to a string that contains the name of the combo box item.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 954\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboEnabled}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboEnabled}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboEnabled}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WComboEnabled(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboEnabled. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the combo box is enabled.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 969\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WComboSetFocus}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WComboSetFocus}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WComboSetFocus}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WComboSetFocus(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WComboSetFocus. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the combo box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 978\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WEditExists}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WEditExists}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WEditExists}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WEditExists(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WEditExists. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the edit box exists.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the edit box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 994\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WEditLen}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WEditLen}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WEditLen}}{\f8\fs22  }
{\f8\fs32 long CMSTest::WEditLen(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WEditLen. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A long that contains the length of the text in the edit box.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the edit box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1003\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WEditText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WEditText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WEditText}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WEditText(LPCSTR lpcszName, CString& strBuff)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WEditText. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the edit box name.\par \par }
{\i\f8\fs22 strBuff}
{\f8\fs22 : A CString reference that will contain the text from the edit box.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1013\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WEditSetText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WEditSetText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WEditSetText}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WEditSetText(LPCSTR lpcszName, LPCSTR lpcszText)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WEditSetText. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the edit box name.\par \par }
{\i\f8\fs22 lpcszText}
{\f8\fs22 : A pointer to a string that contains the text to set in the edit box.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1024\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WEditSelText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WEditSelText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WEditSelText}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WEditSelText(LPCSTR lpcszName, CString& strBuff)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WEditSelText. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the edit box name.\par \par }
{\i\f8\fs22 strBuff}
{\f8\fs22 : A CString reference that will contain the selected text in the edit box.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1035\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WEditSelLen}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WEditSelLen}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WEditSelLen}}{\f8\fs22  }
{\f8\fs32 long CMSTest::WEditSelLen(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WEditSelLen. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A long that contains the length of the selected text in the edit box.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the edit box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1045\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WEditClick}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WEditClick}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WEditClick}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WEditClick(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WEditClick. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the edit box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1062\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WEditEnabled}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WEditEnabled}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WEditEnabled}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WEditEnabled(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WEditEnabled. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the edit box is enabled.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the edit box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1072\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WEditSetFocus}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WEditSetFocus}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WEditSetFocus}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WEditSetFocus(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WEditSetFocus. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the edit box name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1081\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WStaticExists}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WStaticExists}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WStaticExists}}{\f8\fs22  }
{\f8\fs32 BOOL CMSTest::WStaticExists(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WStaticExists. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the static control exists.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the static control's name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1095\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WStaticLen}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WStaticLen}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WStaticLen}}{\f8\fs22  }
{\f8\fs32 long CMSTest::WStaticLen(LPCSTR lpcszName)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WStaticLen. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A long that contains the length of the static control.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the static control's name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1104\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_WStaticText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; WStaticText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::WStaticText}}{\f8\fs22  }
{\f8\fs32 void CMSTest::WStaticText(LPCSTR lpcszName, CString& strBuff)}
{\f8\fs22 \par \par A wrapper for the MS-Test function WStaticText. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lpcszName}
{\f8\fs22 : A pointer to a string that contains the static control's name.\par \par }
{\i\f8\fs22 strBuff}
{\f8\fs22 : A CString reference that will contain the text from the static control.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1114\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QueKeys}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QueKeys}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QueKeys}}{\f8\fs22  }
{\f8\fs32 int CMSTest::QueKeys(LPCSTR sz)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QueKeys. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 sz}
{\f8\fs22 : A pointer to a string that contains the keys.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1138\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QueKeyDn}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QueKeyDn}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QueKeyDn}}{\f8\fs22  }
{\f8\fs32 int CMSTest::QueKeyDn(LPCSTR sz)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QueKeyDn. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 sz}
{\f8\fs22 : A pointer to a string that contains the keys.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1147\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QueKeyUp}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QueKeyUp}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QueKeyUp}}{\f8\fs22  }
{\f8\fs32 int CMSTest::QueKeyUp(LPCSTR sz)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QueKeyUp. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 sz}
{\f8\fs22 : A pointer to a string that contains the keys.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1156\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_DoKeys}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; DoKeys}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::DoKeys}}{\f8\fs22  }
{\f8\fs32 int CMSTest::DoKeys(LPCSTR sz, BOOL bLiteral /*=FALSE*/, int nWaitForIdleTime = 5000)}
{\f8\fs22 \par \par A wrapper for the MS-Test function DoKeys. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 sz}
{\f8\fs22 : A pointer to a string that contains the keys.\par \par }
{\i\f8\fs22 bLiteral}
{\f8\fs22 : A Boolean value that indicates whether to translate the keys given in sz as DoKeys does (FALSE) or interpret them literally (TRUE).\par \par }
{\i\f8\fs22 nWaitForIdleTime}
{\f8\fs22 : - An amount of time to wait after generating keystrokes for the process to become idle\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1167\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_DoKeyshWnd}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; DoKeyshWnd}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::DoKeyshWnd}}{\f8\fs22  }
{\f8\fs32 int CMSTest::DoKeyshWnd(HWND hwnd, LPCSTR sz)}
{\f8\fs22 \par \par A wrapper for the MS-Test function DoKeyshWnd. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : An HWND that specifies the window to send the keys to.\par \par }
{\i\f8\fs22 sz}
{\f8\fs22 : A pointer to a string that contains the keys.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1212\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QuePause}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QuePause}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QuePause}}{\f8\fs22  }
{\f8\fs32 void CMSTest::QuePause(DWORD dw)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QuePause. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 dw}
{\f8\fs22 : A DWORD that specifies the number of milliseconds to pause.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1222\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QueSetSpeed}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QueSetSpeed}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QueSetSpeed}}{\f8\fs22  }
{\f8\fs32 int CMSTest::QueSetSpeed(WORD w)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QueSetSpeed. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 w}
{\f8\fs22 : A WORD that specifies the queue speed.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1231\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QueSetFocus}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QueSetFocus}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QueSetFocus}}{\f8\fs22  }
{\f8\fs32 int CMSTest::QueSetFocus(HWND hwnd)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QueSetFocus. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : An HWND that specifies the window to set focus to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1240\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QueSetRelativeWindow}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QueSetRelativeWindow}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QueSetRelativeWindow}}{\f8\fs22  }
{\f8\fs32 int CMSTest::QueSetRelativeWindow(HWND hwnd)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QueSetRelativeWindow. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : An HWND that specifies the relative window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1249\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QueMouseMove}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QueMouseMove}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QueMouseMove}}{\f8\fs22  }
{\f8\fs32 int CMSTest::QueMouseMove(POINT pt)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QueMouseMove. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 pt}
{\f8\fs22 : A POINT value that specifies the point to move the mouse to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1258\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QueMouseDn}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QueMouseDn}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QueMouseDn}}{\f8\fs22  }
{\f8\fs32 int CMSTest::QueMouseDn(int n, POINT pt)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QueMouseDn. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 n}
{\f8\fs22 : An integer that specifies the button to push.\par \par }
{\i\f8\fs22 pt}
{\f8\fs22 : A POINT value that specifies the point.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1268\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QueMouseUp}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QueMouseUp}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QueMouseUp}}{\f8\fs22  }
{\f8\fs32 int CMSTest::QueMouseUp(int n, POINT pt)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QueMouseUp. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 n}
{\f8\fs22 : An integer that specifies the button to release.\par \par }
{\i\f8\fs22 pt}
{\f8\fs22 : A POINT value that specifies the point.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1278\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QueMouseClick}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QueMouseClick}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QueMouseClick}}{\f8\fs22  }
{\f8\fs32 int CMSTest::QueMouseClick(int n, POINT pt)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QueMouseClick. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 n}
{\f8\fs22 : An integer that specifies the button to click.\par \par }
{\i\f8\fs22 pt}
{\f8\fs22 : A POINT value that specifies the point.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1288\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QueMouseDblClk}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QueMouseDblClk}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QueMouseDblClk}}{\f8\fs22  }
{\f8\fs32 int CMSTest::QueMouseDblClk(int n, POINT pt)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QueMouseDblClk. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 n}
{\f8\fs22 : An integer that specifies the button to double click.\par \par }
{\i\f8\fs22 pt}
{\f8\fs22 : A POINT value that specifies the point.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1298\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QueMouseDblDn}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QueMouseDblDn}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QueMouseDblDn}}{\f8\fs22  }
{\f8\fs32 int CMSTest::QueMouseDblDn(int n, POINT pt)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QueMouseDblDn. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 n}
{\f8\fs22 : An integer that specifies the button to push.\par \par }
{\i\f8\fs22 pt}
{\f8\fs22 : A POINT value that specifies the point.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1308\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CMSTest_QueFlush}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CMSTest; QueFlush}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CMSTest::QueFlush}}{\f8\fs22  }
{\f8\fs32 int CMSTest::QueFlush(BOOL bRestoreKeyState)}
{\f8\fs22 \par \par A wrapper for the MS-Test function QueFlush. See the MS-Test documentation for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bRestoreKeyState}
{\f8\fs22 : A Boolean value that specifies whether to restore the key state (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 mstwrap.cpp, 1319\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__MilliSleep}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} MilliSleep}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} MilliSleep}}{\f8\fs22  }
{\f8\fs32 void MilliSleep( DWORD milliseconds )}
{\f8\fs22 \par \par Sleep for the number of milliseconds specified. This function is obsolete; use ::Sleep() instead.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 milliseconds}
{\f8\fs22 : A DWORD that specifies the number of milliseconds to sleep.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 41\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__EmptyClip}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} EmptyClip}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} EmptyClip}}{\f8\fs22  }
{\f8\fs32 BOOL EmptyClip(void) }
{\f8\fs22 \par \par Clear the text on the system clipboard. This functions is obsolete; use COClip::Empty() instead.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 57\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__GetClipText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} GetClipText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} GetClipText}}{\f8\fs22  }
{\f8\fs32 BOOL GetClipText( CString& rstrTextOut)}
{\f8\fs22 \par \par Get the text from the system clipboard. This functions is obsolete; use COClip::GetText() instead.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 A}
{\f8\fs22 : CString reference that will contain the text from the system clipboard.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 82\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__SetClipText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} SetClipText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} SetClipText}}{\f8\fs22  }
{\f8\fs32 BOOL SetClipText( LPCSTR szTextIn)}
{\f8\fs22 \par \par Set the text in the system clipboard. This functions is obsolete; use COClip::SetText() instead.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szTextIn}
{\f8\fs22 : A pointer to a string containing the text to put in the clipboard.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 127\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__PasteKeys}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} PasteKeys}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} PasteKeys}}{\f8\fs22  }
{\f8\fs32 void PasteKeys(LPCSTR szPasteText)}
{\f8\fs22 \par \par Paste the given string into the control with the focus.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szPasteText}
{\f8\fs22 : A pointer to a string that contains the text to paste.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 194\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__DoKeysSlow}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} DoKeysSlow}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} DoKeysSlow}}{\f8\fs22  }
{\f8\fs32 void DoKeysSlow(LPCSTR szKeys, WORD wMilliseconds = 0, BOOL bLiteral = FALSE)}
{\f8\fs22 \par \par Perform DoKeys at a slower rate.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szKeys}
{\f8\fs22 : Pointer to a null-terminated string containing the DoKeys-formatted keystrokes.\par \par }
{\i\f8\fs22 wMilliseconds}
{\f8\fs22 : The number of milliseconds to wait between keystrokes. (Default value is 0.)\par \par }
{\i\f8\fs22 bLiteral}
{\f8\fs22 : TRUE to interpret the keystrokes literally; FALSE to interpret the keystrokes as DoKeys keystrokes. (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 218\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__ClickMouse}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} ClickMouse}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} ClickMouse}}{\f8\fs22  }
{\f8\fs32 void ClickMouse(int nButton, HWND hwnd, int cX,  int cY) }
{\f8\fs22 \par \par Click the mouse at the given coordinates (relative to the window specified).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nButton}
{\f8\fs22 : An integer that specifies the button to click: VK_LBUTTON, VK_MBUTTON, VK_RBUTTON.\par \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : An HWND that specifies the window to click in.\par \par }
{\i\f8\fs22 cX}
{\f8\fs22 : An integer that specifies the x-coordinate of the click.\par \par }
{\i\f8\fs22 cY}
{\f8\fs22 : An integer that specifies the y-coordinate of the click.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 268\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__DragMouse}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} DragMouse}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} DragMouse}}{\f8\fs22  }
{\f8\fs32 void DragMouse(int nButton, HWND hwnd1, int cX1, int cY1, HWND hwnd2, int cX2, int cY2)}
{\f8\fs22 \par \par Drag the mouse from the given coordinates to the given coordinates (relative to the window specified).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nButton}
{\f8\fs22 : An integer that specifies the button to click: VK_LBUTTON, VK_MBUTTON, VK_RBUTTON.\par \par }
{\i\f8\fs22 hwnd1}
{\f8\fs22 : An HWND that specifies the window to start dragging from.\par \par }
{\i\f8\fs22 cX1}
{\f8\fs22 : An integer that specifies the x-coordinate of the beginning drag position.\par \par }
{\i\f8\fs22 cY1}
{\f8\fs22 : An integer that specifies the y-coordinate of the beginning drag position.\par \par }
{\i\f8\fs22 hwnd2}
{\f8\fs22 : An HWND that specifies the window the end dragging in.\par \par }
{\i\f8\fs22 cX2}
{\f8\fs22 : An integer that specifies the x-coordinate of the ending drag position.\par \par }
{\i\f8\fs22 cY2}
{\f8\fs22 : An integer that specifies the y-coordinate of the ending drag position.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 300\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__ScreenToClient}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} ScreenToClient}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} ScreenToClient}}{\f8\fs22  }
{\f8\fs32 BOOL ScreenToClient(HWND hwnd, CRect* pRect)}
{\f8\fs22 \par \par Converts the coordinates in the given rectangle from screen coordinates to client coordinates for the specified window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if success; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : An HWND that specifies the window to convert the screen coordinates to client coordinates.\par \par }
{\i\f8\fs22 pRect}
{\f8\fs22 : A pointer to a CRect that contains the rectangle to convert. The converted coordinates will be stored in this object when the function returns.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 334\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__ClientToScreen}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} ClientToScreen}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} ClientToScreen}}{\f8\fs22  }
{\f8\fs32 BOOL ClientToScreen(HWND hwnd, CRect* pRect)}
{\f8\fs22 \par \par Converts the coordinates in the given rectangle from client coordinates for the specified window to screen coordinates.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if success; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : An HWND that specifies the window that contains the client coordinates.\par \par }
{\i\f8\fs22 pRect}
{\f8\fs22 : A pointer to a CRect that contains the rectangle to convert. The converted coordinates will be stored in this object when the function returns.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 347\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__CompareFiles}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CompareFiles}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CompareFiles}}{\f8\fs22  }
{\f8\fs32 int CompareFiles(LPCSTR strSource, LPCSTR strTarget, int nStart)}
{\f8\fs22 \par \par Compare the contents of two files.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A value that specifies the result of the comparison: CF_SAME, CF_DUPNAME, CF_CANTOPEN1, CF_CANTOPEN2, CF_DIFFSIZE, CF_NOTSAME.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 strSource}
{\f8\fs22 : A pointer to a string that contains the path and filename of the first file to compare.\par \par }
{\i\f8\fs22 strTarget}
{\f8\fs22 : A pointer to a string that contains the path and filename of the second file to compare.\par \par }
{\i\f8\fs22 nStart}
{\f8\fs22 : An integer that contains the offset from the beginning of the files to start the comparison.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 366\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__KillFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} KillFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} KillFile}}{\f8\fs22  }
{\f8\fs32 void KillFile(LPCSTR szPathName, LPCSTR szFileName = NULL, BOOL bIgnoreReadOnly = FALSE)}
{\f8\fs22 \par \par Delete all files that match the pattern provided in szFileName.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szPathName}
{\f8\fs22 : A string containing the path to the files.\par \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A string containing the filename to delete (wildcards are supported).\par \par }
{\i\f8\fs22 bIgnoreReadOnly}
{\f8\fs22 : TRUE to ignore the read-only bit; FALSE to honor the read-only bit.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 439\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__KillAllFiles}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} KillAllFiles}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} KillAllFiles}}{\f8\fs22  }
{\f8\fs32 void KillAllFiles(LPCSTR szPathName, BOOL bRemoveDir = TRUE)}
{\f8\fs22 \par \par Delete an entire directory, recursively.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szPathName}
{\f8\fs22 : A pointer to a string that contains the path to the directory to be deleted.\par \par }
{\i\f8\fs22 bRemoveDir}
{\f8\fs22 : TRUE to remove the directory itself; FALSE to keep the directory but delete all the files in it.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 493\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__CopyTree}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CopyTree}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CopyTree}}{\f8\fs22  }
{\f8\fs32 void CopyTree(LPCSTR szFrom, LPCSTR szTo)}
{\f8\fs22 \par \par Copy a tree of directories and files from one tree to another.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFrom}
{\f8\fs22 : A pointer to a string that contains the path to the source tree (the tree to copy from).\par \par }
{\i\f8\fs22 szTo}
{\f8\fs22 : A pointer to a string that contains the path to the destination tree (the tree to copy to).\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 569\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__FindStrInFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} FindStrInFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} FindStrInFile}}{\f8\fs22  }
{\f8\fs32 int FindStrInFile(LPCSTR szFileName, LPCSTR szStr, int nStart /*=1*/)}
{\f8\fs22 \par \par Search for the specified string in a file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the line number in the file that contains the string. 0 if the string was not found.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the path and filename of the file to search.\par \par }
{\i\f8\fs22 szStr}
{\f8\fs22 : A pointer to the string to find.\par \par }
{\i\f8\fs22 nStart}
{\f8\fs22 : An integer that contains the offset from the beginning of the file to start the search.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 624\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__GetText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} GetText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} GetText}}{\f8\fs22  }
{\f8\fs32 LPCSTR GetText(HWND hwnd, LPSTR sz, int cMax)}
{\f8\fs22 \par \par Get the text associated with the specified window by sending the WM_GETTEXT message to the window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to the buffer specified by sz that contains the text associated with the window.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : An HWND of the window to get the text for.\par \par }
{\i\f8\fs22 sz}
{\f8\fs22 : A pointer to a buffer that will contain the text associated with the window.\par \par }
{\i\f8\fs22 cMax}
{\f8\fs22 : An integer that specifies the maximum size of the buffer sz.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 657\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__GetText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} GetText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} GetText}}{\f8\fs22  }
{\f8\fs32 CString GetText(HWND hwnd)}
{\f8\fs22 \par \par Get the text associated with the specified window by sending the WM_GETTEXT message to the window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a buffer that contains the text associated with the window.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : An HWND of the window to get the text for.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 672\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__DoMenu}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} DoMenu}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} DoMenu}}{\f8\fs22  }
{\f8\fs32 int DoMenu(LPCSTR szMenu1, LPCSTR szMenu2, LPCSTR szMenu3 /*=NULL*/, LPCSTR szMenu4 /*=NULL*/, LPCSTR szMenu5 /*=NULL*/, LPCSTR szMenu6 /*=NULL*/, LPCSTR szMenu7 /*=NULL*/, LPCSTR szMenu8 /*=NULL*/, LPCSTR szMenu9 /*=NULL*/)}
{\f8\fs22 \par \par Open a series of menus. This function is obsolete; use CMSTest::DoMenu() instead.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. 0 if success; a positive value that contains the menu level that failed otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szMenu1}
{\f8\fs22 : A pointer to a string that contains the name of the menu to open.\par \par }
{\i\f8\fs22 szMenu2}
{\f8\fs22 : A pointer to a string that contains the name of the menu to open.\par \par }
{\i\f8\fs22 szMenu3}
{\f8\fs22 : A pointer to a string that contains the name of the menu to open. (Default value is NULL.)\par \par }
{\i\f8\fs22 szMenu4}
{\f8\fs22 : A pointer to a string that contains the name of the menu to open. (Default value is NULL.)\par \par }
{\i\f8\fs22 szMenu5}
{\f8\fs22 : A pointer to a string that contains the name of the menu to open. (Default value is NULL.)\par \par }
{\i\f8\fs22 szMenu6}
{\f8\fs22 : A pointer to a string that contains the name of the menu to open. (Default value is NULL.)\par \par }
{\i\f8\fs22 szMenu7}
{\f8\fs22 : A pointer to a string that contains the name of the menu to open. (Default value is NULL.)\par \par }
{\i\f8\fs22 szMenu8}
{\f8\fs22 : A pointer to a string that contains the name of the menu to open. (Default value is NULL.)\par \par }
{\i\f8\fs22 szMenu9}
{\f8\fs22 : A pointer to a string that contains the name of the menu to open. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 700\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__DoMenu}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} DoMenu}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} DoMenu}}{\f8\fs22  }
{\f8\fs32 int DoMenu(LPCSTR szMenu)}
{\f8\fs22 \par \par Open a series of menus in a NULL-separated list. This function is obsolete; use CMSTest::DoMenu() instead.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. 0 if success; a positive value that contains the menu level that failed otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szMenu}
{\f8\fs22 : A pointer to a string that contains the names of the menu to open. The list of menus is NULL-separated and NULL-terminated.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 740\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__DoSingleMenu}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} DoSingleMenu}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} DoSingleMenu}}{\f8\fs22  }
{\f8\fs32 BOOL DoSingleMenu(LPCSTR szMenu)}
{\f8\fs22 \par \par Open a menu. This function is obsolete; use CMSTest::DoMenu() instead.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szMenu}
{\f8\fs22 : A pointer to a string that contains the name of the menu to open.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 769\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__IsWindowActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} IsWindowActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} IsWindowActive}}{\f8\fs22  }
{\f8\fs32 BOOL IsWindowActive(LPCSTR szWndTitle)}
{\f8\fs22 \par \par Determine if the specified window is the active window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the specified window is the active window (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szWndTitle}
{\f8\fs22 : A pointer to a string that contains the title of the window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 818\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__WaitMsgBoxText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} WaitMsgBoxText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} WaitMsgBoxText}}{\f8\fs22  }
{\f8\fs32 BOOL WaitMsgBoxText(LPCSTR szExpect, int nSeconds)}
{\f8\fs22 \par \par Wait for a specific message to be active.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szExpect}
{\f8\fs22 : A pointer to a string that contains the partial text expected in the message box.\par \par }
{\i\f8\fs22 nSeconds}
{\f8\fs22 : An integer that specifies the number of seconds to wait for the message box to appear.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 836\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__GetLabel}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} GetLabel}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} GetLabel}}{\f8\fs22  }
{\f8\fs32 LPCSTR GetLabel(UINT id, HWND hwnd /*=NULL*/, BOOL bOkNoExist /*=FALSE*/)}
{\f8\fs22 \par \par Get the caption of a control given its ID. If the control is a list box, combo box, or edit box, the caption is the static control immediately preceeding the control. Only the immediate children of the given window are searched.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a string that contains the caption of the control.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : An integer that specifies the ID of the control.\par \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : An HWND that specifies the window that contains the control. NULL means use the currently active window. (Default value is NULL.)\par \par }
{\i\f8\fs22 bOkNoExist}
{\f8\fs22 : A Boolean value that specifies whether to log information if the control is not found (FALSE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 877\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__GetDlgControlClass}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} GetDlgControlClass}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} GetDlgControlClass}}{\f8\fs22  }
{\f8\fs32 int GetDlgControlClass(HWND hCtl) }
{\f8\fs22 \par \par Get the window class type of the specified control.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A value that indicates the window class type of the control: GL_NONE, GL_STATIC, GL_BUTTON, GL_EDIT, GL_LISTBOX, GL_COMBOBOX, GL_DIALOG, GL_CHECKBOX, GL_RADIOBUTTON.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hCtl}
{\f8\fs22 : An HWND that specifies the control.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 964\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__ControlOnPropPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} ControlOnPropPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} ControlOnPropPage}}{\f8\fs22  }
{\f8\fs32 HWND ControlOnPropPage(int iCtrlId)}
{\f8\fs22 \par \par Find the parent window of the specified control in the active window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An HWND that specifies the parent window of the control.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 1018\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__DayRandSeed}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} DayRandSeed}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} DayRandSeed}}{\f8\fs22  }
{\f8\fs32 void DayRandSeed(void)}
{\f8\fs22 \par \par Seed the random number generator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 1064\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__DayRand}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} DayRand}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} DayRand}}{\f8\fs22  }
{\f8\fs32 int DayRand(int nRange)}
{\f8\fs22 \par \par Get a random number.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that is a random number in the given range.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nRange}
{\f8\fs22 : An integer that specifies the upper end of the range (the range will be between 0 and nRange-1).\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 1076\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__WaitForWndWithCtrl}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} WaitForWndWithCtrl}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} WaitForWndWithCtrl}}{\f8\fs22  }
{\f8\fs32 BOOL WaitForWndWithCtrl(INT ID, DWORD dwMillSec /* = 3000*/)}
{\f8\fs22 \par \par Wait for a window with the specified control to be active.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ID}
{\f8\fs22 : An integer that contains the ID of the control.\par \par }
{\i\f8\fs22 dwMillSec}
{\f8\fs22 : A DWORD that contains the number of milliseconds to wait for the window to appear. (Default value is 3000.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 1112\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__GetSystem}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} GetSystem}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} GetSystem}}{\f8\fs22  }
{\f8\fs32 DWORD GetSystem(void)}
{\f8\fs22 \par \par Get the operating system currently in use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A DWORD bit field that specifies the system currently in use: SYSTEM_NT, SYSTEM_DAYTONA, SYSTEM_CHICAGO, SYSTEM_DBCS, SYSTEM_JAPAN.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 1143\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__FindFirstChild}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} FindFirstChild}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} FindFirstChild}}{\f8\fs22  }
{\f8\fs32 HWND FindFirstChild(HWND hWnd, int nID)}
{\f8\fs22 \par \par This function performs a breadth first search of a window for a child window specified by the control ID given.  This function was created because ::GetDlgItem is not recursive, and CWnd::GetDescendantWindow does a breadth then depth first search, resulting in a different window being found than if a total breadth first search was done.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the window found, or NULL if none were found.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hWnd}
{\f8\fs22 : - Window from which to start the search.\par \par }
{\i\f8\fs22 nID}
{\f8\fs22 : - Control ID of the child window for which to search\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 1191\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__WaitForSingleControl}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} WaitForSingleControl}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} WaitForSingleControl}}{\f8\fs22  }
{\f8\fs32 DWORD WaitForSingleControl(const DWORD dwProcessId, const int idControl, const DWORD dwTimeout)}
{\f8\fs22 \par \par Wait for a control to be found in any of the specified process's windows. This function can be used to wait for a window to appear with the specified control. See WaitForMultipleControls(int, int*, DWORD) to wait for one of any number of controls.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A DWORD that specifies the result: WAIT_CONTROL_0, if successful; WAIT_TIMEOUT otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 dwProcessId}
{\f8\fs22 : A DWORD that specifies the ID of the process.\par \par }
{\i\f8\fs22 idControl}
{\f8\fs22 : An integer that specifies the control to look for on the active window.\par \par }
{\i\f8\fs22 dwTimeout}
{\f8\fs22 : A DWORD that specifies the number of milliseconds to wait for the control.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 1220\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__WaitForMultipleControls}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} WaitForMultipleControls}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} WaitForMultipleControls}}{\f8\fs22  }
{\f8\fs32 DWORD WaitForMultipleControls(const DWORD dwProcessId, const int cControl, const int aControls[], const DWORD dwTimeout)}
{\f8\fs22 \par \par Wait for any of the specified controls to be found in any of the specified process's windows. This function can be used to wait for a window to appear with any one of the the specified controls. See WaitForSingleControl(int, DWORD) to wait for a single control.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A DWORD that specifies the control found: WAIT_CONTROL_0 through WAIT_CONTROL_n, if successful; WAIT_TIMEOUT otherwise. Only WAIT_CONTROL_0 through WAIT_CONTROL_9 are defined; use WAIT_CONTROL_0 + n to test the return value when more than ten controls are being waited on.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 dwProcessId}
{\f8\fs22 : A DWORD that specifies the ID of the process.\par \par }
{\i\f8\fs22 cControl}
{\f8\fs22 : An integer that specifies the number of controls in the aControls array.\par \par }
{\i\f8\fs22 aControls}
{\f8\fs22 : An integer array that contains the controls to look for on the active window.  The controls should be uniquely chosen for specific window detection and ordered such that the controls for the specific windows requiring detection are listed first.  ID's that specify very generic controls, such as MSG_OK and MSG_YES should not be used, or be listed last, so as to not cause specific window to be incorrectly detected as a general dialog.\par \par }
{\i\f8\fs22 dwTimeout}
{\f8\fs22 : A DWORD that specifies the number of milliseconds to wait for the control.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 1260\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__TrimString}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} TrimString}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} TrimString}}{\f8\fs22  }
{\f8\fs32 void TrimString(CString* pStr)}
{\f8\fs22 \par \par This function trims leading and trailing spaces from a string.  It assumes that there are no trailing \n's or \r's on the string that should also be ignored.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 pStr}
{\f8\fs22 : - Pointer to the string to be modified.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 testutil.cpp, 1292\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDialog_Open}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDialog; Open}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDialog::Open}}{\f8\fs22  }
{\f8\fs32 BOOL UIDialog::Open(void)}
{\f8\fs22 \par \par Open the dialog. This member function must be overridden in the derived class.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udialog.cpp, 40\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDialog_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDialog; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDialog::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIDialog::IsValid(void) const}
{\f8\fs22 \par \par Determine if the dialog is valid by verifying that the dialog is a valid window and by calling VerifyClass and VerifyUnique.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the dialog is valid (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udialog.cpp, 52\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDialog_VerifyClass}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDialog; VerifyClass}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDialog::VerifyClass}}{\f8\fs22  }
{\f8\fs32 BOOL UIDialog::VerifyClass(void) const}
{\f8\fs22 \par \par Determine if the window class of the dialog is #32770.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the window class is #32770 (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udialog.cpp, 65\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDialog_VerifyUnique}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDialog; VerifyUnique}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDialog::VerifyUnique}}{\f8\fs22  }
{\f8\fs32 BOOL UIDialog::VerifyUnique(void) const}
{\f8\fs22 \par \par Verify that this dialog is unique.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the dialog is unique (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udialog.cpp, 77\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDialog_ExpectedTitle}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDialog; ExpectedTitle}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDialog::ExpectedTitle}}{\f8\fs22  }
{\f8\fs32 LPCSTR UIDialog::ExpectedTitle(void) const}
{\f8\fs22 \par \par Get the title of the dialog (as expected by this object--not from the actual dialog).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a string that contains the title of the dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udialog.cpp, 90\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDialog_SetExpectedTitle}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDialog; SetExpectedTitle}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDialog::SetExpectedTitle}}{\f8\fs22  }
{\f8\fs32 void UIDialog::SetExpectedTitle(LPCSTR szTitle)}
{\f8\fs22 \par \par Set the expected title for this dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 <none>\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szTitle}
{\f8\fs22 : A pointer to a string that contains the expected title of this dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udialog.cpp, 101\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDialog_VerifyTitle}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDialog; VerifyTitle}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDialog::VerifyTitle}}{\f8\fs22  }
{\f8\fs32 BOOL UIDialog::VerifyTitle(void) const}
{\f8\fs22 \par \par Determine if the title of the dialog matches the expected title of the dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the title of the dialog matches the expected title (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udialog.cpp, 114\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDialog_GetDlgItem}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDialog; GetDlgItem}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDialog::GetDlgItem}}{\f8\fs22  }
{\f8\fs32 HWND UIDialog::GetDlgItem(UINT id) const}
{\f8\fs22 \par \par Get the HWND of an item in the dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the specified item in the dialog.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : An integer that specifies the ID of the item in the dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udialog.cpp, 131\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDialog_VerifyDlgItemClass}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDialog; VerifyDlgItemClass}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDialog::VerifyDlgItemClass}}{\f8\fs22  }
{\f8\fs32 BOOL UIDialog::VerifyDlgItemClass(UINT id, int nClass) const}
{\f8\fs22 \par \par Verify that the class of the specified dialog item matches the given class.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the class of the specified dialog item matches the given class (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : An integer that specifies the ID of the item in the dialog.\par \par }
{\i\f8\fs22 nClass}
{\f8\fs22 : An integer that specifies the class of the dialog item.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udialog.cpp, 143\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDialog_OK}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDialog; OK}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDialog::OK}}{\f8\fs22  }
{\f8\fs32 HWND UIDialog::OK(void)}
{\f8\fs22 \par \par Click the OK button in the dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 NULL if successful; the HWND of a message or dialog box that has focus otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udialog.cpp, 154\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDialog_Cancel}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDialog; Cancel}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDialog::Cancel}}{\f8\fs22  }
{\f8\fs32 HWND UIDialog::Cancel(void)}
{\f8\fs22 \par \par Click the Cancel button in the dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 NULL if successful; the HWND of a message or dialog box that has focus otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udialog.cpp, 173\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDialog_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDialog; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDialog::Close}}{\f8\fs22  }
{\f8\fs32 HWND UIDialog::Close(void)}
{\f8\fs22 \par \par Click the Close button in the dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 NULL if successful; the HWND of a message or dialog box that has focus otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udialog.cpp, 192\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDialog_Help}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDialog; Help}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDialog::Help}}{\f8\fs22  }
{\f8\fs32 HWND UIDialog::Help(void)}
{\f8\fs22 \par \par Click the Help button in the dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 NULL if successful; the HWND of a message or dialog box that has focus otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udialog.cpp, 214\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMessageBox_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMessageBox; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMessageBox::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIMessageBox::IsValid(void) const}
{\f8\fs22 \par \par Determine if the message box is valid by checking that the window handle is valid and that the window class is #32770.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the message box is valid (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 umsgbox.cpp, 47\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMessageBox_GetMessageText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMessageBox; GetMessageText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMessageBox::GetMessageText}}{\f8\fs22  }
{\f8\fs32 CString UIMessageBox::GetMessageText(void)}
{\f8\fs22 \par \par Get the message text from the message box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the text of the message in the message box.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 umsgbox.cpp, 62\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMessageBox_ButtonClick}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMessageBox; ButtonClick}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMessageBox::ButtonClick}}{\f8\fs22  }
{\f8\fs32 BOOL UIMessageBox::ButtonClick(int btn /*=MSG_DEFAULT*/)}
{\f8\fs22 \par \par Click the specified button in the message box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 btn}
{\f8\fs22 : An integer that specifies the ID of the button to click: MSG_DEFAULT, MSG_OK, MSG_CANCEL, MSG_ABORT, MSG_RETRY, MSG_IGNORE, MSG_YES, MSG_NO. (Default value is MSG_DEFAULT.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 umsgbox.cpp, 75\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMessageBox_ButtonExists}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMessageBox; ButtonExists}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMessageBox::ButtonExists}}{\f8\fs22  }
{\f8\fs32 BOOL UIMessageBox::ButtonExists(int btn)}
{\f8\fs22 \par \par Determine whether the specified button exists on the message box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the button exists (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 btn}
{\f8\fs22 : An integer that contains the ID of the button.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 umsgbox.cpp, 92\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMessageBox_GetActiveButton}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMessageBox; GetActiveButton}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMessageBox::GetActiveButton}}{\f8\fs22  }
{\f8\fs32 int UIMessageBox::GetActiveButton(void)}
{\f8\fs22 \par \par Get the ID of the active button on the message box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that specifies the ID of the active button.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 umsgbox.cpp, 102\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWindow_operator=}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWindow; operator=}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWindow::operator=}}{\f8\fs22  }
{\f8\fs32 HWND UIWindow::operator=(HWND hwnd)}
{\f8\fs22 \par \par Assign this UIWindow object or HWND to another UIWindow object or HWND.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 HWND that specifies the UIWindow object.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : The HWND of the object to assign from.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwindow.cpp, 43\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWindow_Attach}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWindow; Attach}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWindow::Attach}}{\f8\fs22  }
{\f8\fs32 BOOL UIWindow::Attach(HWND hwnd)}
{\f8\fs22 \par \par Attach to the window with the given handle.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : An HWND that specifies the handle of the window to attach to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwindow.cpp, 56\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWindow_AttachActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWindow; AttachActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWindow::AttachActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIWindow::AttachActive(void)}
{\f8\fs22 \par \par Attach to the active window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwindow.cpp, 68\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWindow_Find}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWindow; Find}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWindow::Find}}{\f8\fs22  }
{\f8\fs32 BOOL UIWindow::Find(void)}
{\f8\fs22 \par \par Find the window and attach to it. This member function must be overridden by the derived class.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwindow.cpp, 84\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWindow_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWindow; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWindow::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIWindow::IsValid(void) const}
{\f8\fs22 \par \par Determine if the window is valid by verifying the validity of its HWND and that it's visible.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwindow.cpp, 113\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWindow_GetText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWindow; GetText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWindow::GetText}}{\f8\fs22  }
{\f8\fs32 LPCSTR UIWindow::GetText(LPSTR sz, int cMax) const}
{\f8\fs22 \par \par Get the window text (by sending a WM_GETTEXT) message to the window. (See CString UIWindow::GetText(void) to get the text without allocating a buffer.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to the beginning of the buffer pointed to by the sz parameter.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 sz}
{\f8\fs22 : A pointer to a string that will contain the text of the window.\par \par }
{\i\f8\fs22 cMax}
{\f8\fs22 : An integer that specifies the size of the sz buffer.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwindow.cpp, 130\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWindow_GetText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWindow; GetText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWindow::GetText}}{\f8\fs22  }
{\f8\fs32 CString UIWindow::GetText(void) const}
{\f8\fs22 \par \par Get the window text (by sending a WM_GETTEXT) message to the window. (See LPCSTR UIWindow::GetText(LPSTR, int) to get the text in a user allocated buffer.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to the beginning of the buffer pointed to by the sz parameter.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwindow.cpp, 140\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWindow_IsActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWindow; IsActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWindow::IsActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIWindow::IsActive(void)}
{\f8\fs22 \par \par Determine if the window is active.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the window is active (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwindow.cpp, 156\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWindow_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWindow; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWindow::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIWindow::Activate(void)}
{\f8\fs22 \par \par Make this window the active window. (See UIWindow::BlockingActivate() to make this window active and wait until it's active.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwindow.cpp, 171\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWindow_BlockingActivate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWindow; BlockingActivate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWindow::BlockingActivate}}{\f8\fs22  }
{\f8\fs32 BOOL UIWindow::BlockingActivate(void)}
{\f8\fs22 \par \par Make this window the active window and wait until it is active. (See UIWindow::Activate() to make this window active without waiting.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwindow.cpp, 185\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWindow_HasFocus}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWindow; HasFocus}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWindow::HasFocus}}{\f8\fs22  }
{\f8\fs32 BOOL UIWindow::HasFocus(void) const}
{\f8\fs22 \par \par Determine if this window has focus.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether this window has focus (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwindow.cpp, 198\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWindow_WaitAttachActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWindow; WaitAttachActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWindow::WaitAttachActive}}{\f8\fs22  }
{\f8\fs32 HWND UIWindow::WaitAttachActive(DWORD dwMilliseconds)}
{\f8\fs22 \par \par Wait until active window is attached to successfully or the specified time-out is reached.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An HWND that specifies the window attached to.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 dwMilliseconds}
{\f8\fs22 : A DWORD that specifies the number of milliseconds to wait.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwindow.cpp, 218\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWindow_WaitUntilGone}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWindow; WaitUntilGone}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWindow::WaitUntilGone}}{\f8\fs22  }
{\f8\fs32 BOOL UIWindow::WaitUntilGone(DWORD dwMilliseconds)}
{\f8\fs22 \par \par Wait until the window is no longer valid or the specified time-out is reached.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 dwMilliseconds}
{\f8\fs22 : A DWORD that specifies the number of milliseconds to wait.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwindow.cpp, 244\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COWorkSpace_CloseAllWindows}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COWorkSpace; CloseAllWindows}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COWorkSpace::CloseAllWindows}}{\f8\fs22  }
{\f8\fs32 void COWorkSpace::CloseAllWindows(void)}
{\f8\fs22 \par \par Close all open windows in the IDE.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cowrkspc.cpp, 38\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COWorkSpace_IsToolbarVisible}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COWorkSpace; IsToolbarVisible}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COWorkSpace::IsToolbarVisible}}{\f8\fs22  }
{\f8\fs32 BOOL COWorkSpace::IsToolbarVisible(UINT id)}
{\f8\fs22 \par \par Determine if the toolbar indicated by id is visible. (Use IsDockWindowVisible for dockable windows.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the toolbar is visible; FALSE if not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The id of the toolbar: IDTB_SUSHI_STANDARD, IDTB_SUSHI_EDIT, IDTB_VRES_RESOURCE, IDTB_VCPP_DEBUG, IDTB_VCPP_BROWSE, IDTB_VRES_DIALOG, IDDW_CONTROLS, IDDW_GRAPHICS, IDDW_COLORS, IDDW_TEXTTOOL, IDTB_VPROJ_BUILD.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cowrkspc.cpp, 49\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COWorkSpace_IsDockWindowVisible}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COWorkSpace; IsDockWindowVisible}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COWorkSpace::IsDockWindowVisible}}{\f8\fs22  }
{\f8\fs32 BOOL COWorkSpace::IsDockWindowVisible(UINT id)}
{\f8\fs22 \par \par Determine if the dockable window indicated by id is visible. (Use IsToolbarVisible for toolbars.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the dockable window is visible; FALSE if not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The id of the dockable window: IDDW_VCPP_ERROR_WIN, IDDW_VCPP_WATCH_WIN, IDDW_VCPP_LOCALS_WIN, IDDW_VCPP_CPU_WIN, IDDW_VCPP_MEMORY_WIN, IDDW_VCPP_CALLS_WIN, IDDW_VCPP_DISASSY_WIN.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cowrkspc.cpp, 86\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COWorkSpace_ShowToolbar}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COWorkSpace; ShowToolbar}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COWorkSpace::ShowToolbar}}{\f8\fs22  }
{\f8\fs32 int COWorkSpace::ShowToolbar(UINT id, BOOL bShow /*=TRUE*/)}
{\f8\fs22 \par \par Show or hide the toolbar indicated by id. (Use this function to show or hide dockable windows, also.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the toolbar is successfully shown (or hidden); FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The id of the toolbar or dockable window: IDTB_SUSHI_STANDARD, IDTB_SUSHI_EDIT, IDTB_VRES_RESOURCE, IDTB_VCPP_DEBUG, IDTB_VCPP_BROWSE, IDTB_VRES_DIALOG, IDDW_CONTROLS, IDDW_GRAPHICS, IDDW_COLORS, IDDW_TEXTTOOL, IDTB_VPROJ_BUILD, IDDW_VCPP_ERROR_WIN, IDDW_VCPP_WATCH_WIN, IDDW_VCPP_LOCALS_WIN, IDDW_VCPP_CPU_WIN, IDDW_VCPP_MEMORY_WIN, IDDW_VCPP_CALLS_WIN, IDDW_VCPP_DISASSY_WIN.\par \par }
{\i\f8\fs22 bShow}
{\f8\fs22 : TRUE to show the toolbar or window; FALSE to hide it. (Default is TRUE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cowrkspc.cpp, 99\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COWorkSpace_IsWindowDocked}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COWorkSpace; IsWindowDocked}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COWorkSpace::IsWindowDocked}}{\f8\fs22  }
{\f8\fs32 BOOL COWorkSpace::IsWindowDocked(UINT id, int nLocation)}
{\f8\fs22 \par \par Determine if the dockable window indicated by id is docked. (Use IsToolbarDocked for toolbars.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the dockable window is docked; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The id of the dockable window: IDDW_VCPP_ERROR_WIN, IDDW_VCPP_WATCH_WIN, IDDW_VCPP_LOCALS_WIN, IDDW_VCPP_CPU_WIN, IDDW_VCPP_MEMORY_WIN, IDDW_VCPP_CALLS_WIN, IDDW_VCPP_DISASSY_WIN.\par \par }
{\i\f8\fs22 nLocation}
{\f8\fs22 : The location of the dockable window: DW_TOP, DW_BOTTOM, DW_LEFT, DW_RIGHT.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cowrkspc.cpp, 153\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COWorkSpace_IsToolbarDocked}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COWorkSpace; IsToolbarDocked}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COWorkSpace::IsToolbarDocked}}{\f8\fs22  }
{\f8\fs32 BOOL COWorkSpace::IsToolbarDocked(UINT id, int nLocation)}
{\f8\fs22 \par \par Determine if the toolbar indicated by id is docked. (Use IsWindowDocked for dockable windows.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the toolbar is docked; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The id of the toolbar: IDTB_SUSHI_STANDARD, IDTB_SUSHI_EDIT, IDTB_VRES_RESOURCE, IDTB_VCPP_DEBUG, IDTB_VCPP_BROWSE, IDTB_VRES_DIALOG, IDDW_CONTROLS, IDDW_GRAPHICS, IDDW_COLORS, IDDW_TEXTTOOL, IDTB_VPROJ_BUILD.\par \par }
{\i\f8\fs22 nLocation}
{\f8\fs22 : The location of the toolbar: DW_TOP, DW_BOTTOM, DW_LEFT, DW_RIGHT.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cowrkspc.cpp, 167\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COWorkSpace_ShowPropPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COWorkSpace; ShowPropPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COWorkSpace::ShowPropPage}}{\f8\fs22  }
{\f8\fs32 BOOL COWorkSpace::ShowPropPage(BOOL bShow)}
{\f8\fs22 \par \par Display or hide the property page for the currently active window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the property page is successfully shown (or hidden); FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bShow}
{\f8\fs22 : TRUE to show the property page; FALSE to hide it.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cowrkspc.cpp, 205\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COWorkSpace_GetStatusText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COWorkSpace; GetStatusText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COWorkSpace::GetStatusText}}{\f8\fs22  }
{\f8\fs32 CString COWorkSpace::GetStatusText(void)}
{\f8\fs22 \par \par Get the text from the IDE's status bar.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the text in the status bar.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cowrkspc.cpp, 246\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COWorkSpace_WaitForStatusText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COWorkSpace; WaitForStatusText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COWorkSpace::WaitForStatusText}}{\f8\fs22  }
{\f8\fs32 BOOL COWorkSpace::WaitForStatusText(LPCSTR sz, DWORD dwMilliSeconds, BOOL bExact /*=TRUE*/)}
{\f8\fs22 \par \par Wait for the given text (sz) to appear in the status bar. This function will wait until the text is displayed in the status bar or the number of milliseconds given in dwMilliSeconds have elapsed.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the text is found in the status bar before dwMilliSeconds elapses; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 sz}
{\f8\fs22 : A pointer to a string containing the text to wait for in the status bar.\par \par }
{\i\f8\fs22 dwMilliSeconds}
{\f8\fs22 : The number of milliseconds to wait for the text to appear.\par \par }
{\i\f8\fs22 bExact}
{\f8\fs22 : TRUE if the text in status bar must match the text in sz exactly; FALSE for a partial patch.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cowrkspc.cpp, 260\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COWorkSpace_VerifyCaretPosition}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COWorkSpace; VerifyCaretPosition}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COWorkSpace::VerifyCaretPosition}}{\f8\fs22  }
{\f8\fs32 BOOL COWorkSpace::VerifyCaretPosition( int nRow, int nCol, LPCSTR szErrTxt )}
{\f8\fs22 \par \par Verify the caret position in the active window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the caret position matches the given row and column; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nRow}
{\f8\fs22 : The expected row for the caret.\par \par }
{\i\f8\fs22 nCol}
{\f8\fs22 : The expected column for the caret.\par \par }
{\i\f8\fs22 szErrTxt}
{\f8\fs22 : A pointer to a string containing the text to emit to log if the caret position doesn't match the given row and column.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cowrkspc.cpp, 297\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COWorkSpace_AddTool}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COWorkSpace; AddTool}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COWorkSpace::AddTool}}{\f8\fs22  }
{\f8\fs32 COWorkSpace::AddTool(CString strMenuText, CString strToolPath, CString strArguments, CString strInitDir, BOOL PromptArguments, BOOL RedirectOutput, BOOL CloseOnExit);}
{\f8\fs22 \par \par Add a Tool to the Tools menu.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 strToolPath}
{\f8\fs22 : The complete drive, path, and executable file name\par \par }
{\i\f8\fs22 strArguments}
{\f8\fs22 : Any arguments to be passed to the tool on startup\par \par }
{\i\f8\fs22 strInitDir}
{\f8\fs22 : Initial Directory\par \par }
{\i\f8\fs22 strMenuText}
{\f8\fs22 : Name and shortcut to appear on tools menu\par \par }
{\i\f8\fs22 PromptArgument}
{\f8\fs22 : Check Prompt for Arguments box\par \par }
{\i\f8\fs22 RedirectOutput}
{\f8\fs22 : Check Redirect to Output Window\par \par }
{\i\f8\fs22 CloseOnExit}
{\f8\fs22 : Check Close Window on Exit\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cowrkspc.cpp, 342\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COWorkSpace_DeleteTool}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COWorkSpace; DeleteTool}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COWorkSpace::DeleteTool}}{\f8\fs22  }
{\f8\fs32 COWorkSpace::DeleteTool(int Number)}
{\f8\fs22 \par \par Delete a number of Tools from the Tools menu\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 int}
{\f8\fs22 : Number Number of tools to delete\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cowrkspc.cpp, 379\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFileDlg_SetName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFileDlg; SetName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFileDlg::SetName}}{\f8\fs22  }
{\f8\fs32 void UIFileDlg::SetName(LPCSTR sz)}
{\f8\fs22 \par \par Set the filename field in a file common dialog box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 sz}
{\f8\fs22 : A pointer to a string containing the filename to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 32\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFileDlg_GetName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFileDlg; GetName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFileDlg::GetName}}{\f8\fs22  }
{\f8\fs32 CString UIFileDlg::GetName()}
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The filename specified in the filename field in a file common dialog box.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 42\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFileDlg_SetPath}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFileDlg; SetPath}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFileDlg::SetPath}}{\f8\fs22  }
{\f8\fs32 void UIFileDlg::SetPath(LPCSTR sz)}
{\f8\fs22 \par \par Set the path in a file common dialog box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 sz}
{\f8\fs22 : A pointer to a string containing the path to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 58\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFileDlg_OK}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFileDlg; OK}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFileDlg::OK}}{\f8\fs22  }
{\f8\fs32 BOOL UIFileDlg::OK(BOOL bOverwrite)}
{\f8\fs22 \par \par Click the OK button a file common dialog box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the button is clicked and the dialog is successfully dismissed; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bOverwrite}
{\f8\fs22 : TRUE to overwrite the file if it already exists; FALSE to not overwrite the file.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 71\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFileDlg_GetDlgItem}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFileDlg; GetDlgItem}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFileDlg::GetDlgItem}}{\f8\fs22  }
{\f8\fs32 HWND UIFileDlg::GetDlgItem(UINT id) const}
{\f8\fs22 \par \par Get the HWND of a particular item (referred to by ID) in the dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the dialog item specified by the id parameter.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The id of the item in the dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 83\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOpenDlg_GetLabel}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOpenDlg; GetLabel}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOpenDlg::GetLabel}}{\f8\fs22  }
{\f8\fs32 HWND UIOpenDlg::GetLabel(UINT id) const}
{\f8\fs22 \par \par Get the label associated with a control on the dialog (specified by id).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to the string of the control specified by id. The string returned is the string immediately preceeding the control in the dialog.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The id of the item in the dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 108\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFileDlg_GetExtensionDialog}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFileDlg; GetExtensionDialog}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFileDlg::GetExtensionDialog}}{\f8\fs22  }
{\f8\fs32 HWND UIFileDlg::GetExtensionDialog(void)}
{\f8\fs22 \par \par This function gets the HWND of the extension dialog associated with this common dialog. Extensions to common dialogs are implemented as child dialogs of the main dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 HWND of the extension dialog. NULL if it doesn't exist.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 127\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFileSaveAsDlg_VerifyUnique}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFileSaveAsDlg; VerifyUnique}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFileSaveAsDlg::VerifyUnique}}{\f8\fs22  }
{\f8\fs32 BOOL UIFileSaveAsDlg::VerifyUnique(void) const}
{\f8\fs22 \par \par Verify the currently active dialog is the Save As dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the currently active dialog is the Save As dialog; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 158\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFileOpenDlg_Display}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFileOpenDlg; Display}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFileOpenDlg::Display}}{\f8\fs22  }
{\f8\fs32 HWND UIFileOpenDlg::Display(void)}
{\f8\fs22 \par \par Bring up the File Open dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the File Open dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 174\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFileOpenDlg_VerifyUnique}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFileOpenDlg; VerifyUnique}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFileOpenDlg::VerifyUnique}}{\f8\fs22  }
{\f8\fs32 BOOL UIFileOpenDlg::VerifyUnique(void) const}
{\f8\fs22 \par \par Verify the currently active dialog is the File Open dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the currently active dialog is the File Open dialog; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 190\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFileOpenDlg_SetEditor}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFileOpenDlg; SetEditor}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFileOpenDlg::SetEditor}}{\f8\fs22  }
{\f8\fs32 void UIFileOpenDlg::SetEditor(EOpenAs oa)}
{\f8\fs22 \par \par Specify the type of editor that should be used in the File Open dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 oa}
{\f8\fs22 : The type of editor to use; specified in the File Open dialog: OA_AUTO, OA_TEXT, OA_BINARY, OA_MAKEFILE.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 204\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFileOpenDlg_SetReadOnly}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFileOpenDlg; SetReadOnly}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFileOpenDlg::SetReadOnly}}{\f8\fs22  }
{\f8\fs32 void UIFileOpenDlg::SetReadOnly(BOOL b)}
{\f8\fs22 \par \par Check or uncheck the Open File as Read Only check box in the File Open dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 b}
{\f8\fs22 : TRUE to check the Open File as Read Only check box; FALSE to uncheck it.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 216\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFontDlg_VerifyUnique}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFontDlg; VerifyUnique}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFontDlg::VerifyUnique}}{\f8\fs22  }
{\f8\fs32 BOOL UIFontDlg::VerifyUnique(void) const}
{\f8\fs22 \par \par Determine whether the currently active dialog is the font dialog by verifying it contains a font name control, font style control, and font size control. This function is valid for the Font dialog used from the text tool in the image editors.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 234\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFontDlg_SetName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFontDlg; SetName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFontDlg::SetName}}{\f8\fs22  }
{\f8\fs32 void UIFontDlg::SetName(LPCSTR szName)}
{\f8\fs22 \par \par Set the font name in the Font dialog. This function is valid for the Font dialog used from the text tool in the image editors.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szName}
{\f8\fs22 : A pointer to a string containing the font name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 247\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFontDlg_SetSize}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFontDlg; SetSize}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFontDlg::SetSize}}{\f8\fs22  }
{\f8\fs32 void UIFontDlg::SetSize(int nSize)}
{\f8\fs22 \par \par Set the font size in the Font dialog. This function is valid for the Font dialog used from the text tool in the image editors.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nSize}
{\f8\fs22 : An integer containing the point size.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 258\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFontDlg_SetStyle}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFontDlg; SetStyle}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFontDlg::SetStyle}}{\f8\fs22  }
{\f8\fs32 void UIFontDlg::SetStyle(int nStyle)}
{\f8\fs22 \par \par Set the font style in the Font dialog. This function is valid for the Font dialog used from the text tool in the image editors.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nStyle}
{\f8\fs22 : An integer containing a 1-based index into the list of styles for the selected font. This value is usually: 1 for regular style; 2 for italic style; 3 for bold style; and 4 for bold italic style.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucommdlg.cpp, 271\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICustomizeTabDlg_Display}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICustomizeTabDlg; Display}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICustomizeTabDlg::Display}}{\f8\fs22  }
{\f8\fs32 HWND UICustomizeTabDlg::Display() }
{\f8\fs22 \par \par Bring up the Customize tabbed dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the Customize dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucustdlg.cpp, 29\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICustomizeTabDlg_AddTBButton}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICustomizeTabDlg; AddTBButton}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICustomizeTabDlg::AddTBButton}}{\f8\fs22  }
{\f8\fs32 int UICustomizeTabDlg::AddTBButton(int nButtonType, HWND hwndToolbar /* = NULL */)}
{\f8\fs22 \par \par Add a toolbar button (nButtonType) to the toolbar indicated by hwndToolbar.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nButtonType}
{\f8\fs22 : The button to add to the toolbar (this is NYI).\par \par }
{\i\f8\fs22 hwndToolbar}
{\f8\fs22 : The HWND of the toolbar to add the button to. NULL means create a new toolbar. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucustdlg.cpp, 48\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDockWindow_AttachActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDockWindow; AttachActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDockWindow::AttachActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIDockWindow::AttachActive(void)}
{\f8\fs22 \par \par Initialize this object by attaching to the active dockable window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successfully attached to the active dockable window; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udockwnd.cpp, 31\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDockWindow_Find}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDockWindow; Find}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDockWindow::Find}}{\f8\fs22  }
{\f8\fs32 BOOL UIDockWindow::Find(void)}
{\f8\fs22 \par \par Find the dockable window indicated by this object. This function is useful only when used on object of a class derived from UIDockWindow.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the dockable window indicated by this object is found; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udockwnd.cpp, 61\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDockWindow_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDockWindow; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDockWindow::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIDockWindow::IsValid(void) const}
{\f8\fs22 \par \par Determine if the dockable window indicated by this object is valid.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the dockable window is valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udockwnd.cpp, 86\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDockWindow_IsActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDockWindow; IsActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDockWindow::IsActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIDockWindow::IsActive(void)}
{\f8\fs22 \par \par Determine if the dockable window indicated by this object is active.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the dockable window is active; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udockwnd.cpp, 111\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDockWindow_IsDockable}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDockWindow; IsDockable}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDockWindow::IsDockable}}{\f8\fs22  }
{\f8\fs32 BOOL UIDockWindow::IsDockable(void)}
{\f8\fs22 \par \par Determine if the dockable window is dockable or MDI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the dockable window is dockable (TRUE) or MDI.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udockwnd.cpp, 123\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDockWindow_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDockWindow; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDockWindow::Close}}{\f8\fs22  }
{\f8\fs32 BOOL UIDockWindow::Close(void)}
{\f8\fs22 \par \par Close the dockable window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udockwnd.cpp, 135\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDockWindow_GetID}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDockWindow; GetID}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDockWindow::GetID}}{\f8\fs22  }
{\f8\fs32 UINT UIDockWindow::GetID(void) const}
{\f8\fs22 \par \par Get the id of the dockable window indicated by this object. This function is only valid when used on object of a class derived from UIDockWindow.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The id of the dockable window, 0 if not associated with any dockable window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udockwnd.cpp, 157\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDockWindow_ActivatePane}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDockWindow; ActivatePane}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDockWindow::ActivatePane}}{\f8\fs22  }
{\f8\fs32 BOOL UIDockWindow::ActivatePane(LPCSTR)}
{\f8\fs22 \par \par Activate a specified pane within this docked window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udockwnd.cpp, 167\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDockWindow_IsDocked}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDockWindow; IsDocked}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDockWindow::IsDocked}}{\f8\fs22  }
{\f8\fs32 BOOL UIDockWindow::IsDocked(int nLocation = /* DW_DONT_CARE */)}
{\f8\fs22 \par \par Determine if this docking window is currently docked in the position given by nLocation.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the toolbar is docked; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 loc}
{\f8\fs22 : The dock location of the toolbar: DW_DONT_CARE, DW_TOP, DW_BOTTOM, DW_RIGHT, DW_LEFT.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udockwnd.cpp, 209\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnection_Settings}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnection; Settings}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnection::Settings}}{\f8\fs22  }
{\f8\fs32 HWND UIConnection::Settings(CString title) }
{\f8\fs22 \par \par Open the Settings dialog from the Connection dialog by clicking the Settings button.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An HWND that specifies the Settings dialog.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 title}
{\f8\fs22 : A CString that contains the expected title of the Settings dialog (this title changes based on the platform and connection type specified in the Connection dialog).\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconnec.cpp, 30\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnection_SetPlatform}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnection; SetPlatform}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnection::SetPlatform}}{\f8\fs22  }
{\f8\fs32 int UIConnection::SetPlatform(LPCSTR platform)}
{\f8\fs22 \par \par Set the platform in the Connection dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 platform}
{\f8\fs22 : A pointer to a string that contains the platform to select in the Connection dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconnec.cpp, 53\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnection_SetConnection}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnection; SetConnection}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnection::SetConnection}}{\f8\fs22  }
{\f8\fs32 int UIConnection::SetConnection(LPCSTR connection)}
{\f8\fs22 \par \par Set the connection type in the Connection dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 connection}
{\f8\fs22 : A pointer to a string that contains the connection to select in the Connection dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconnec.cpp, 77\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnection_GetPlatform}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnection; GetPlatform}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnection::GetPlatform}}{\f8\fs22  }
{\f8\fs32 CString UIConnection::GetPlatform(void)}
{\f8\fs22 \par \par Get the selected platform in the Connection dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the selected platform in the Connection dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconnec.cpp, 100\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnection_GetConnection}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnection; GetConnection}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnection::GetConnection}}{\f8\fs22  }
{\f8\fs32 CString UIConnection::GetConnection(void)}
{\f8\fs22 \par \par Get the selected connection in the Connection dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the selected connection in the Connection dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconnec.cpp, 113\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnectionSettings_SetZone}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnectionSettings; SetZone}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnectionSettings::SetZone}}{\f8\fs22  }
{\f8\fs32 int UIConnectionSettings::SetZone(LPCSTR zone)	}
{\f8\fs22 \par \par Set the Appletalk zone in the Connection Settings dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 zone}
{\f8\fs22 : A pointer to a string that contains the name of the Appletalk zone.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconset.cpp, 28\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnectionSettings_SetMachineName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnectionSettings; SetMachineName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnectionSettings::SetMachineName}}{\f8\fs22  }
{\f8\fs32 int UIConnectionSettings::SetMachineName(LPCSTR machine_name)}
{\f8\fs22 \par \par Set the machine name in the Connection Settings dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 machine_name}
{\f8\fs22 : A pointer to a string that contains the machine name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconset.cpp, 51\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnectionSettings_SetConnector}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnectionSettings; SetConnector}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnectionSettings::SetConnector}}{\f8\fs22  }
{\f8\fs32 int UIConnectionSettings::SetConnector(LPCSTR connector)}
{\f8\fs22 \par \par Set the connector type in the Connection Settings dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 connector}
{\f8\fs22 : A pointer to a string that contains the connector name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconset.cpp, 74\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnectionSettings_SetBaudRate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnectionSettings; SetBaudRate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnectionSettings::SetBaudRate}}{\f8\fs22  }
{\f8\fs32 int UIConnectionSettings::SetBaudRate(LPCSTR baud_rate)}
{\f8\fs22 \par \par Set the baud rate in the Connection Settings dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 baud_rate}
{\f8\fs22 : A pointer to a string that contains the baud rate.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconset.cpp, 97\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnectionSettings_SetDataBits}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnectionSettings; SetDataBits}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnectionSettings::SetDataBits}}{\f8\fs22  }
{\f8\fs32 int UIConnectionSettings::SetDataBits(LPCSTR data_bits)}
{\f8\fs22 \par \par Set the number of data bits in the Connection Settings dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 data_bits}
{\f8\fs22 : A pointer to a string that contains the number of data bits.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconset.cpp, 120\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnectionSettings_SetParity}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnectionSettings; SetParity}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnectionSettings::SetParity}}{\f8\fs22  }
{\f8\fs32 int UIConnectionSettings::SetParity(LPCSTR parity)}
{\f8\fs22 \par \par Set the parity in the Connection Settings dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 parity}
{\f8\fs22 : A pointer to a string that contains the parity.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconset.cpp, 143\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnectionSettings_SetStopBits}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnectionSettings; SetStopBits}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnectionSettings::SetStopBits}}{\f8\fs22  }
{\f8\fs32 int UIConnectionSettings::SetStopBits(LPCSTR stop_bits)}
{\f8\fs22 \par \par Set the number of stop bits in the Connection Settings dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 stop_bits}
{\f8\fs22 : A pointer to a string that contains the stop bits.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconset.cpp, 166\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnectionSettings_SetFlowControl}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnectionSettings; SetFlowControl}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnectionSettings::SetFlowControl}}{\f8\fs22  }
{\f8\fs32 int UIConnectionSettings::SetFlowControl(LPCSTR flow_control)}
{\f8\fs22 \par \par Set the type of flow control in the Connection Settings dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 flow_control}
{\f8\fs22 : A pointer to a string that contains the type of flow control.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconset.cpp, 189\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnectionSettings_SetIPAddress}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnectionSettings; SetIPAddress}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnectionSettings::SetIPAddress}}{\f8\fs22  }
{\f8\fs32 int UIConnectionSettings::SetIPAddress(LPCSTR ip_address)	}
{\f8\fs22 \par \par Set the IP address in the Connection Settings dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ip_address}
{\f8\fs22 : A pointer to a string that contains the IP address.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconset.cpp, 212\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnectionSettings_SetPassword}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnectionSettings; SetPassword}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnectionSettings::SetPassword}}{\f8\fs22  }
{\f8\fs32 int UIConnectionSettings::SetPassword(LPCSTR password, CONNECTION_TYPE connection)}
{\f8\fs22 \par \par Set the password in the Connection Settings dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 password}
{\f8\fs22 : A pointer to a string that contains the password.\par \par }
{\i\f8\fs22 connection}
{\f8\fs22 : A CONNECTION_TYPE value that specifies the type of connection: CONNECTION_APPLETALK, CONNECTION_TCP_IP.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconset.cpp, 236\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIConnectionSettings_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIConnectionSettings; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIConnectionSettings::Close}}{\f8\fs22  }
{\f8\fs32 HWND UIConnectionSettings::Close(void)								}
{\f8\fs22 \par \par Close the Connection Settings dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 NULL if successful; the HWND of any remaining message or dialog box otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiconset.cpp, 286\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOptionsTabDlg_Display}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOptionsTabDlg; Display}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOptionsTabDlg::Display}}{\f8\fs22  }
{\f8\fs32 HWND UIOptionsTabDlg::Display() }
{\f8\fs22 \par \par Bring up the Options tabbed dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the Options tabbed dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uioptdlg.cpp, 32\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOptionsTabDlg_ChangeCompatility}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOptionsTabDlg; ChangeCompatility}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOptionsTabDlg::ChangeCompatility}}{\f8\fs22  }
{\f8\fs32 HWND UIOptionsTabDlg::ChangeCompatility() }
{\f8\fs22 \par \par Display the compatibility tab of the options dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 int\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uioptdlg.cpp, 48\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOptionsTabDlg_AddDirectory}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOptionsTabDlg; AddDirectory}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOptionsTabDlg::AddDirectory}}{\f8\fs22  }
{\f8\fs32 int UIOptionsTabDlg::AddDirectory( LPCSTR szNewDir, int iDirType, int iPlatform)}
{\f8\fs22 \par \par Add a directory to one of the environment variables editable on the Directories tab.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szNewDir}
{\f8\fs22 : A pointer to a string containing the directory to add.\par \par }
{\i\f8\fs22 iDirType}
{\f8\fs22 : The environment variable to set: DIR_DIRTYPE_EXE, DIR_DIRTYPE_INC, DIR_DIRTYPE_LIB.\par \par }
{\i\f8\fs22 iPlatform}
{\f8\fs22 : The platform to set the environment variable for: DIR_PLATFORM_WIN32, DIR_PLATFORM_DUMMY\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uioptdlg.cpp, 85\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOptionsTabDlg_RestoreWnd}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOptionsTabDlg; RestoreWnd}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOptionsTabDlg::RestoreWnd}}{\f8\fs22  }
{\f8\fs32 int UIOptionsTabDlg::RestoreWnd(BOOL state /* = TRUE */)}
{\f8\fs22 \par \par Set the state of the 'Restore Window Layout When Opening Projects' option in the Workspace tab.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 state}
{\f8\fs22 : A Boolean value that specifies the state of the option. TRUE to set it to restore the layout; FALSE to unset it. (Default value is TRUE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uioptdlg.cpp, 137\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOptionsTabDlg_SetFont}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOptionsTabDlg; SetFont}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOptionsTabDlg::SetFont}}{\f8\fs22  }
{\f8\fs32 int UIOptionsTabDlg::SetFont(int FontIndex, int Size /* = 11 */, CString Category /* = NULL*/)}
{\f8\fs22 \par \par Set the font in the Font tab by index. (See UIOptionsTabDlg::SetFont(LPCSTR, int, LPCSTR, LPCSTR) to set the font by name.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 FontIndex}
{\f8\fs22 : An integer that specifies the 1-based index into the list of fonts.\par \par }
{\i\f8\fs22 Size}
{\f8\fs22 : An integer that specifies the point size of the font. This parameter is NYI. (Default value is 11.)\par \par }
{\i\f8\fs22 Category}
{\f8\fs22 : A CString that specifies the category to set the font for. This parameter is NYI.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uioptdlg.cpp, 159\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOptionsTabDlg_SetFont}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOptionsTabDlg; SetFont}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOptionsTabDlg::SetFont}}{\f8\fs22  }
{\f8\fs32 int UIOptionsTabDlg::SetFont(LPCSTR pszFontName /*= NULL*/, int iFontSize /*= 0*/, LPCSTR pszFontStyle /*= NULL*/, LPCSTR pszCategory /*= NULL*/)}
{\f8\fs22 \par \par Set the font in the Font tab by name. (See UIOptionsTabDlg::SetFont(int, int, CString) to set the font by index.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 pszFontName}
{\f8\fs22 : A pointer to a string that contains the name of the font. NULL means use the current font. (Default value is NULL.)\par \par }
{\i\f8\fs22 iFontSize}
{\f8\fs22 : An integer that specifies the point size of the font. 0 means use the current point size. (Default value is 0.)\par \par }
{\i\f8\fs22 pszFontStyle}
{\f8\fs22 : A pointer to a string that contains the name of the font style. NULL means use the current style. (Default value is NULL.)\par \par }
{\i\f8\fs22 pszCategory}
{\f8\fs22 : A pointer to a string that contains the name of the category to set the font for. NULL means use the current category. This parameter is NYI. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uioptdlg.cpp, 180\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOutput_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOutput; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOutput::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIOutput::Activate(void)}
{\f8\fs22 \par \par Display the Output window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uioutput.cpp, 26\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITabbedDialog_VerifyClass}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITabbedDialog; VerifyClass}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITabbedDialog::VerifyClass}}{\f8\fs22  }
{\f8\fs32 BOOL UITabbedDialog::VerifyClass(void) const}
{\f8\fs22 \par \par Verify that the window class of the tabbed dialog indicated by this object is correct.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the window class is correct; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitabdlg.cpp, 38\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITabbedDialog_SetOption}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITabbedDialog; SetOption}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITabbedDialog::SetOption}}{\f8\fs22  }
{\f8\fs32 INT UITabbedDialog::SetOption(INT iTab, UINT iCtrlId, UINT iNewValue) }
{\f8\fs22 \par \par Set the control (iCtrlId) on tab (iTab) to the given value (iNewValue). This function is commonly called for objects of classes derived from UITabbedDialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iTab}
{\f8\fs22 : The tab containing the control to set.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : The ID of the control to set.\par \par }
{\i\f8\fs22 iNewValue}
{\f8\fs22 : The value to set the control to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitabdlg.cpp, 54\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITabbedDialog_SetOption}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITabbedDialog; SetOption}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITabbedDialog::SetOption}}{\f8\fs22  }
{\f8\fs32 int UITabbedDialog::SetOption(INT iTab, UINT iCtrlId, LPCSTR szNewValue)}
{\f8\fs22 \par \par Set the control (iCtrlId) on tab (iTab) to the given value (szNewValue). This function is commonly called for objects of classes derived from UITabbedDialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iTab}
{\f8\fs22 : The tab containing the control to set.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : The ID of the control to set.\par \par }
{\i\f8\fs22 szNewValue}
{\f8\fs22 : A pointer to a string containing the value to set the control to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitabdlg.cpp, 122\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITabbedDialog_GetOption}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITabbedDialog; GetOption}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITabbedDialog::GetOption}}{\f8\fs22  }
{\f8\fs32 int UITabbedDialog::GetOption(INT iTab, UINT iCtrlId)}
{\f8\fs22 \par \par Get the value of the control (iCtrlId) on tab (iTab). This function is commonly called for objects of classes derived from UITabbedDialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The value of the control, if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iTab}
{\f8\fs22 : The tab containing the control to get.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : The ID of the control to get.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitabdlg.cpp, 173\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITabbedDialog_GetOptionStr}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITabbedDialog; GetOptionStr}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITabbedDialog::GetOptionStr}}{\f8\fs22  }
{\f8\fs32 LPCSTR UITabbedDialog::GetOptionStr(INT iTab, UINT iCtrlId)}
{\f8\fs22 \par \par Get the value of the control (iCtrlId) on tab (iTab). This function is commonly called for objects of classes derived from UITabbedDialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a string containing the value of the control, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iTab}
{\f8\fs22 : The tab containing the control to get.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : The ID of the control to get.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitabdlg.cpp, 219\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITabbedDialog_ShowPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITabbedDialog; ShowPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITabbedDialog::ShowPage}}{\f8\fs22  }
{\f8\fs32 HWND UITabbedDialog::ShowPage(int iCtrlID, int iTabCnt)}
{\f8\fs22 \par \par Activate the tab on a tabbed dialog that contains the control given by iCtrlID.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the tab on the tabbed dialog, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCtrlID}
{\f8\fs22 : The ID of a control on the desired tab.\par \par }
{\i\f8\fs22 iTabCnt}
{\f8\fs22 : The position number of the tab.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitabdlg.cpp, 268\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITabbedDialog_ShowPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITabbedDialog; ShowPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITabbedDialog::ShowPage}}{\f8\fs22  }
{\f8\fs32 HWND UITabbedDialog::ShowPage(LPCSTR szTabCaption)}
{\f8\fs22 \par \par Activate the tab on a tabbed dialog that has the caption specified by szTabCaption.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the tab on the tabbed dialog, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szTabCaption}
{\f8\fs22 : A pointer to a string that contains the caption of the tab.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitabdlg.cpp, 315\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITabbedDialog_GetCurrentPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITabbedDialog; GetCurrentPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITabbedDialog::GetCurrentPage}}{\f8\fs22  }
{\f8\fs32 HWND UITabbedDialog::GetCurrentPage() const}
{\f8\fs22 \par \par Get the currently displayed tab on a tabbed dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the current tab on the tabbed dialog, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitabdlg.cpp, 348\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITabbedDialog_IsControlInCurrentPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITabbedDialog; IsControlInCurrentPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITabbedDialog::IsControlInCurrentPage}}{\f8\fs22  }
{\f8\fs32 BOOL UITabbedDialog::IsControlInCurrentPage(UINT iCtrlId) const}
{\f8\fs22 \par \par Determine if a control is on the currently displayed tab of a tabbed dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the control is on the current tab; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : The ID of the control to search for.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitabdlg.cpp, 392\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITabbedDialog_GetLabel}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITabbedDialog; GetLabel}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITabbedDialog::GetLabel}}{\f8\fs22  }
{\f8\fs32 LPCSTR UITabbedDialog::GetLabel(UINT nCtrlId) const}
{\f8\fs22 \par \par Get the label for the control specified by nCtrlId. This function is overridden for tabbed dialogs because controls are often contained within subdialogs.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a string containing the label of the control.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nCtrlId}
{\f8\fs22 : The ID of the control to retrieve the label for.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitabdlg.cpp, 424\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITabbedDialog_ActivateNextPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITabbedDialog; ActivateNextPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITabbedDialog::ActivateNextPage}}{\f8\fs22  }
{\f8\fs32 HWND UITabbedDialog::ActivateNextPage( BOOL bRight /* TRUE */)}
{\f8\fs22 \par \par Activate the next or previous tab in a tabbed dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the tab on the tabbed dialog, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bRight}
{\f8\fs22 : TRUE to activate the tab to the right (next); FALSE to activate the tab to the left (previous). (Default is TRUE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitabdlg.cpp, 452\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITabbedDialog_ShowNextPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITabbedDialog; ShowNextPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITabbedDialog::ShowNextPage}}{\f8\fs22  }
{\f8\fs32 HWND UITabbedDialog::ShowNextPage(int iCtrlID)}
{\f8\fs22 \par \par Display the next tab in a tabbed dialog that contains the control specified by iCtrlID.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the tab on the tabbed dialog, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCtrlID}
{\f8\fs22 : The ID of the control that identifies the tab.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitabdlg.cpp, 470\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITabbedDialog_GetDlgItem}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITabbedDialog; GetDlgItem}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITabbedDialog::GetDlgItem}}{\f8\fs22  }
{\f8\fs32 HWND UITabbedDialog::GetDlgItem(UINT id) const}
{\f8\fs22 \par \par Get the HWND of a window (control) on the currently active tab in a tabbed dialog. This function is overridden for tabbed dialogs because windows (controls) are often contained within subdialogs.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the window (control).\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The ID of the window (control) to find.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitabdlg.cpp, 499\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBDialog_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBDialog; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBDialog::Close}}{\f8\fs22  }
{\f8\fs32 HWND UIWBDialog::Close(void)}
{\f8\fs22 \par \par Close an IDE dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 NULL if the dialog closed successfully; the HWND of a message box otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiwbdlg.cpp, 33\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBDialog_Help}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBDialog; Help}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBDialog::Help}}{\f8\fs22  }
{\f8\fs32 HWND UIWBDialog::Help(void)}
{\f8\fs22 \par \par Bring up help from an IDE dialog. This function clicks the Help button on the dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the help window, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiwbdlg.cpp, 55\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBMessageBox_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBMessageBox; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBMessageBox::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBMessageBox::IsValid(void) const}
{\f8\fs22 \par \par Determine if the active message box is a valid IDE message box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the message box is valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiwbmsg.cpp, 35\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMainFrm_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMainFrm; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMainFrm::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIMainFrm::IsValid(void) const}
{\f8\fs22 \par \par Determine if the IDE's main frame window is a valid window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the main frame is valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 umainfrm.cpp, 33\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMainFrm_DoCommand}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMainFrm; DoCommand}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMainFrm::DoCommand}}{\f8\fs22  }
{\f8\fs32 BOOL UIMainFrm::DoCommand(UINT id, DC_METHOD method)}
{\f8\fs22 \par \par Perform a command in the IDE. Most of the commands handled by this function are menu commands, which can be performed either by sending a message, selecting the menu items, using the menu mnemonics, or using the keyboard accelerator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the command was performed; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The ID of the command to perform. See cmdarrray.cpp for the set of valid commands.\par \par }
{\i\f8\fs22 method}
{\f8\fs22 : The method by which to perform the action: DC_MESSAGE, DC_MENU, DC_MNEMONIC, DC_ACCEL.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 umainfrm.cpp, 45\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMainFrm_IsCommandEnabled}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMainFrm; IsCommandEnabled}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMainFrm::IsCommandEnabled}}{\f8\fs22  }
{\f8\fs32 BOOL UIMainFrm::IsCommandEnabled(UINT id)}
{\f8\fs22 \par \par Determine if the specified command is enabled in the IDE.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the command is enabled; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The ID of the command to check. See cmdarrray.cpp for the set of valid commands.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 umainfrm.cpp, 133\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProperties_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProperties; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProperties::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIProperties::IsValid(void) const}
{\f8\fs22 \par \par Determine if the property page is valid by checking the window handle and the title of the property page.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the property page is valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 upropwnd.cpp, 30\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProperties_GetCurrentPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProperties; GetCurrentPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProperties::GetCurrentPage}}{\f8\fs22  }
{\f8\fs32 HWND UIProperties::GetCurrentPage(void) const}
{\f8\fs22 \par \par Get the HWND of the current page displayed in the property page.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the currently displayed page in the property page.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 upropwnd.cpp, 44\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProperties_GetTitle}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProperties; GetTitle}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProperties::GetTitle}}{\f8\fs22  }
{\f8\fs32 CString UIProperties::GetTitle(void) const}
{\f8\fs22 \par \par Get the title of the property page.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the title of the property page.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 upropwnd.cpp, 64\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProperties_GetPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProperties; GetPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProperties::GetPage}}{\f8\fs22  }
{\f8\fs32 CString UIProperties::GetPage(void) const}
{\f8\fs22 \par \par Get the title of the current page in the property page.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the title of the current page in the property page.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 upropwnd.cpp, 76\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProperties_SetPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProperties; SetPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProperties::SetPage}}{\f8\fs22  }
{\f8\fs32 BOOL UIProperties::SetPage(LPCSTR szPage)}
{\f8\fs22 \par \par Activate the page specified by szPage in the property page.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szPage}
{\f8\fs22 : A pointer to a string containing the title of the page the activate.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 upropwnd.cpp, 88\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProperties_GetLabel}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProperties; GetLabel}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProperties::GetLabel}}{\f8\fs22  }
{\f8\fs32 CString UIProperties::GetLabel(UINT id) const}
{\f8\fs22 \par \par Get the label of a control in the property page. This function is overridden for property pages because a page within a property page is a child window of the property page and we need to search the child for the control.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the label for the control\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The ID of the control to get the label for.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 upropwnd.cpp, 110\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProperties_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProperties; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProperties::Close}}{\f8\fs22  }
{\f8\fs32 BOOL UIProperties::Close(void)}
{\f8\fs22 \par \par Close the property page.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the property page is closed; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 upropwnd.cpp, 120\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UITBarDialog_Display}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UITBarDialog; Display}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UITBarDialog::Display}}{\f8\fs22  }
{\f8\fs32 int UITBarDialog::Display(void)}
{\f8\fs22 \par \par Bring up the Toolbars dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the Toolbars dialog is displayed; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 utbardlg.cpp, 27\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIToolbar_DisplayTBDlg}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIToolbar; DisplayTBDlg}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIToolbar::DisplayTBDlg}}{\f8\fs22  }
{\f8\fs32 int UIToolbar::DisplayTBDlg(void)}
{\f8\fs22 \par \par Bring up the Toolbars dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the Toolbars dialog is displayed; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 utoolbar.cpp, 32\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIToolbar_ShowTB}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIToolbar; ShowTB}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIToolbar::ShowTB}}{\f8\fs22  }
{\f8\fs32 int UIToolbar::ShowTB(int nTbId, BOOL bShow)}
{\f8\fs22 \par \par Display or hide the toolbar specified by nTbId.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nTbId}
{\f8\fs22 : The id of the toolbar: IDTB_SUSHI_STANDARD, IDTB_SUSHI_EDIT, IDTB_VRES_RESOURCE, IDTB_VCPP_DEBUG, IDTB_VCPP_BROWSE, IDTB_VRES_DIALOG, IDDW_CONTROLS, IDDW_GRAPHICS, IDDW_COLORS, IDDW_TEXTTOOL, IDTB_VPROJ_BUILD.\par \par }
{\i\f8\fs22 bShow}
{\f8\fs22 : TRUE to show the toolbar; FALSE to hide it.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 utoolbar.cpp, 46\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIToolbar_GetTBText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIToolbar; GetTBText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIToolbar::GetTBText}}{\f8\fs22  }
{\f8\fs32 CString UIToolbar::GetTBText(int nTbId)}
{\f8\fs22 \par \par Get the title of the toolbar.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the title of the toolbar.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nTbId}
{\f8\fs22 : The id of the toolbar: IDTB_SUSHI_STANDARD, IDTB_SUSHI_EDIT, IDTB_VRES_RESOURCE, IDTB_VCPP_DEBUG, IDTB_VCPP_BROWSE, IDTB_VRES_DIALOG, IDDW_CONTROLS, IDDW_GRAPHICS, IDDW_COLORS, IDDW_TEXTTOOL, IDTB_VPROJ_BUILD.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 utoolbar.cpp, 111\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIToolbar_IsDocked}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIToolbar; IsDocked}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIToolbar::IsDocked}}{\f8\fs22  }
{\f8\fs32 BOOL UIToolbar::IsDocked(HWND hWnd, int nLocation)}
{\f8\fs22 \par \par Determine if the toolbar specified by the HWND is docked in the position given by nLocation.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the toolbar is docked; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hWnd}
{\f8\fs22 : The handle of the toolbar.\par \par }
{\i\f8\fs22 nLocation}
{\f8\fs22 : The dock location of the toolbar: DW_TOP, DW_BOTTOM, DW_RIGHT, DW_LEFT.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 utoolbar.cpp, 150\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_Find}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; Find}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::Find}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::Find(void)}
{\f8\fs22 \par \par Find the IDE's frame window and attach to it, if found.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the IDE's frame window is successfully found; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 100\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::IsValid(void) const}
{\f8\fs22 \par \par Determine if the IDE's frame window is valid by checking the window handle, the title of the window, and the window class.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the frame window is valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 121\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_IsDebug}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; IsDebug}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::IsDebug}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::IsDebug(void)}
{\f8\fs22 \par \par Determine if the IDE is a debug build or retail build. (This function is NYI.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the IDE is a debug build; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 142\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_IsActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; IsActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::IsActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::IsActive(void)}
{\f8\fs22 \par \par Determine whether the IDE is active.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the IDE is active; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 152\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_IsAlert}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; IsAlert}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::IsAlert}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::IsAlert(void)}
{\f8\fs22 \par \par Determine if an alert box (message or dialog) is being displayed by the IDE. (This function is NYI.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if an alert is displayed; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 166\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_CreateNewFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; CreateNewFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::CreateNewFile}}{\f8\fs22  }
{\f8\fs32 HWND UIWBFrame::CreateNewFile(LPCSTR szFileType)}
{\f8\fs22 \par \par Create a new file in the IDE. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the window that contains the new file.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFileType}
{\f8\fs22 : A pointer to a string containing the type of the new file to create. Valid file types are listed in the File New dialog in the IDE.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 177\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_OpenFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; OpenFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::OpenFile}}{\f8\fs22  }
{\f8\fs32 HWND UIWBFrame::OpenFile(LPCSTR szFileName, LPCSTR szChDir /*=NULL*/)}
{\f8\fs22 \par \par Open a file in the IDE.  NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the window that contains the opened file.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the filename of the file to open.\par \par }
{\i\f8\fs22 szChDir}
{\f8\fs22 : A pointer to a string that contains the path the file. NULL means the path is given with the filename or use the current working directory. (Default is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 216\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_SaveFileAs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; SaveFileAs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::SaveFileAs}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::SaveFileAs(LPCSTR szFileName, BOOL bOverwrite /*=TRUE*/)}
{\f8\fs22 \par \par Save a file in the IDE with a new name.  NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the filename.\par \par }
{\i\f8\fs22 bOverwrite}
{\f8\fs22 : TRUE to overwrite an existing file (if one exists); FALSE to not overwrite. (Default is TRUE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 254\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_SaveAll}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; SaveAll}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::SaveAll}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::SaveAll(int intWaitInMilliSecs /* 0 */)}
{\f8\fs22 \par \par selects the File.SaveAll menu item and waits for a specified number of milliseconds.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 294\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_CloseProject}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; CloseProject}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::CloseProject}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::CloseProject(void)}
{\f8\fs22 \par \par Close a project window in the IDE. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 308\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_CloseAllWindows}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; CloseAllWindows}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::CloseAllWindows}}{\f8\fs22  }
{\f8\fs32 void UIWBFrame::CloseAllWindows(void)}
{\f8\fs22 \par \par Close all open editor windows in the IDE. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 331\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetActiveEditor}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetActiveEditor}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetActiveEditor}}{\f8\fs22  }
{\f8\fs32 HWND UIWBFrame::GetActiveEditor(void)}
{\f8\fs22 \par \par Get the HWND of the active editor in the IDE. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the active editor, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 356\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_SetActiveEditor}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; SetActiveEditor}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::SetActiveEditor}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::SetActiveEditor(HWND hwndEditor)}
{\f8\fs22 \par \par Set the active editor in the IDE. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwndEditor}
{\f8\fs22 : The HWND of the window to make the active editor.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 375\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetToolbar}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetToolbar}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetToolbar}}{\f8\fs22  }
{\f8\fs32 HWND UIWBFrame::GetToolbar(int nTbId)}
{\f8\fs22 \par \par Get the HWND of the specified toolbar. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the toolbar, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nTbId}
{\f8\fs22 : The id of the toolbar: IDTB_SUSHI_STANDARD, IDTB_SUSHI_EDIT, IDTB_VRES_RESOURCE, IDTB_VCPP_DEBUG, IDTB_VCPP_BROWSE, IDTB_VRES_DIALOG, IDDW_CONTROLS, IDDW_GRAPHICS, IDDW_COLORS, IDDW_TEXTTOOL, IDTB_VPROJ_BUILD.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 387\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_ShowDockWindow}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; ShowDockWindow}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::ShowDockWindow}}{\f8\fs22  }
{\f8\fs32 HWND UIWBFrame::ShowDockWindow(UINT id, BOOL bShow /*=TRUE*/) // REVIEW (EnriqueP): Move to CWorkSpace}
{\f8\fs22 \par \par Display or hide the specified dockable window. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the dockable window, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The id of the dockable window: IDW_OUTPUT_WIN\par \par }
{\i\f8\fs22 bShow}
{\f8\fs22 : TRUE to show the window; FALSE to hide it. (Default is TRUE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 400\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_IsWindowDocked}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; IsWindowDocked}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::IsWindowDocked}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::IsWindowDocked(HWND hWnd, int nLocation)}
{\f8\fs22 \par \par Determine if a dockable window is docked. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the window is docked; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hWnd}
{\f8\fs22 : The HWND of the dockable window.\par \par }
{\i\f8\fs22 nLocation}
{\f8\fs22 : The location of the dockable window: DW_TOP, DW_BOTTOM, DW_LEFT, DW_RIGHT, DW_DONT_CARE.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 459\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetEditorCurPos}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetEditorCurPos}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetEditorCurPos}}{\f8\fs22  }
{\f8\fs32 int UIWBFrame::GetEditorCurPos( EGECP x, HWND hwndEditor /*=NULL*/ )}
{\f8\fs22 \par \par Get the line or column position of the caret in the editor (depending on x). NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The line or column position of the caret in the window.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 x}
{\f8\fs22 : Value indicating whether to get the line position or column position: GECP_LINE, GECP_COLUMN.\par \par }
{\i\f8\fs22 hwndEditor}
{\f8\fs22 : The HWND of the window to get line or column position for. NULL specifies the active editor window. (Default is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 522\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_ExportResource}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; ExportResource}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::ExportResource}}{\f8\fs22  }
{\f8\fs32 void UIWBFrame::ExportResource(LPCSTR szFileName, BOOL bOverwrite /*=FALSE*/)}
{\f8\fs22 \par \par Export a resource from the IDE> NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the filename to save the exported resource under.\par \par }
{\i\f8\fs22 bOverwrite}
{\f8\fs22 : A value that indicates whether to overwrite an existing file or not. TRUE to overwrite; FALSE to not. (Default is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 539\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_ShowPropPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; ShowPropPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::ShowPropPage}}{\f8\fs22  }
{\f8\fs32 HWND UIWBFrame::ShowPropPage(BOOL bShow)}
{\f8\fs22 \par \par Display or hide the property page for the active window. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the property page for the active window.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bShow}
{\f8\fs22 : A Boolean value that indicates whether to show or hide the property page. TRUE to show it; FALSE to hide it.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 573\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetProperty}}{\f8\fs22  }
{\f8\fs32 CString UIWBFrame::GetProperty(int nProp)}
{\f8\fs22 \par \par Get the property of the item specified by nProp. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the property of the item.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nProp}
{\f8\fs22 : The id of the item.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 598\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetProjPath}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetProjPath}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetProjPath}}{\f8\fs22  }
{\f8\fs32 CString UIWBFrame::GetProjPath(void)}
{\f8\fs22 \par \par Get the current project's path. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the path the current project.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 616\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_SelectProjItem}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; SelectProjItem}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::SelectProjItem}}{\f8\fs22  }
{\f8\fs32 void UIWBFrame::SelectProjItem(int item, LPCSTR szName)}
{\f8\fs22 \par \par Select the item specified. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 item}
{\f8\fs22 : The item to select.\par \par }
{\i\f8\fs22 szName}
{\f8\fs22 : The name of the item to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 636\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetItemProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetItemProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetItemProperty}}{\f8\fs22  }
{\f8\fs32 CString UIWBFrame::GetItemProperty(int nProp)}
{\f8\fs22 \par \par Get the property of any item. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the property.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nProp}
{\f8\fs22 : The id of the property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 648\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_CanWeBuild}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; CanWeBuild}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::CanWeBuild}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::CanWeBuild(void )}
{\f8\fs22 \par \par Determine whether the IDE is able to build a project or not. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the IDE is able to build or not. TRUE if the IDE can build; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 667\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetErrorCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetErrorCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetErrorCount}}{\f8\fs22  }
{\f8\fs32 int UIWBFrame::GetErrorCount(void)}
{\f8\fs22 \par \par Get the number of errors from the last build. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A count of the number of errors from the last build.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 679\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetWarningCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetWarningCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetWarningCount}}{\f8\fs22  }
{\f8\fs32 int UIWBFrame::GetWarningCount(void)}
{\f8\fs22 \par \par Get the number of warnings from the last build. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A count of the number of warnings from the last build.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 691\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_ClassWizard}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; ClassWizard}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::ClassWizard}}{\f8\fs22  }
{\f8\fs32 HWND UIWBFrame::ClassWizard(void)}
{\f8\fs22 \par \par Display the ClassWizard dialog. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the ClassWizard dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 703\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_ProjectProperties}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; ProjectProperties}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::ProjectProperties}}{\f8\fs22  }
{\f8\fs32 HWND UIWBFrame::ProjectProperties(void)}
{\f8\fs22 \par \par Display the project properties. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 NULL\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 717\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_Options}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; Options}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::Options}}{\f8\fs22  }
{\f8\fs32 HWND UIWBFrame::Options(void)}
{\f8\fs22 \par \par Display the Options dialog in the IDE. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the Options dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 730\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetStatusBar}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetStatusBar}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetStatusBar}}{\f8\fs22  }
{\f8\fs32 HWND UIWBFrame::GetStatusBar(void)}
{\f8\fs22 \par \par Get the HWND of the IDE's status bar. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the status bar, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 743\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetStatusText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetStatusText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetStatusText}}{\f8\fs22  }
{\f8\fs32 CString UIWBFrame::GetStatusText(void)}
{\f8\fs22 \par \par Get the text from the IDE's status bar. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the text in the status bar.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 754\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_WaitForStatusText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; WaitForStatusText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::WaitForStatusText}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::WaitForStatusText(LPCSTR sz, DWORD dwMilliSeconds, BOOL bExact /*=TRUE*/)}
{\f8\fs22 \par \par Wait for the given text (sz) to appear in the status bar. This function will wait until the text is displayed in the status bar or the number of milliseconds given in dwMilliSeconds have elapsed. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the text is found in the status bar before dwMilliSeconds elapses; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 sz}
{\f8\fs22 : A pointer to a string containing the text to wait for in the status bar.\par \par }
{\i\f8\fs22 dwMilliSeconds}
{\f8\fs22 : The number of milliseconds to wait for the text to appear.\par \par }
{\i\f8\fs22 bExact}
{\f8\fs22 : TRUE if the text in status bar must match the text in sz exactly; FALSE for a partial patch.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 768\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_VerifyFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; VerifyFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::VerifyFile}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::VerifyFile(LPCSTR szfile)}
{\f8\fs22 \par \par Determine whether the active editor has the given filename in its title. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the active editor has the given filename. TRUE if it does; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szfile}
{\f8\fs22 : A pointer to a string containing the filename expected in the active editor.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 805\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_VerifyCaretPosition}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; VerifyCaretPosition}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::VerifyCaretPosition}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::VerifyCaretPosition( int nRow, int nCol, LPCSTR szErrTxt )}
{\f8\fs22 \par \par Verify the caret position in the active window. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the caret position matches the given row and column; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nRow}
{\f8\fs22 : The expected row for the caret.\par \par }
{\i\f8\fs22 nCol}
{\f8\fs22 : The expected column for the caret.\par \par }
{\i\f8\fs22 szErrTxt}
{\f8\fs22 : A pointer to a string containing the text to emit to log if the caret position doesn't match the given row and column.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 822\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_FVerifyClipboardText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; FVerifyClipboardText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::FVerifyClipboardText}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::FVerifyClipboardText( CString stMatch )}
{\f8\fs22 \par \par Determine whether the text in the clipboard matches the given string. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the text in the clipboard matches the given string. TRUE if it does; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 stMatch}
{\f8\fs22 : A CString that contains the text expected in the clipboard.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 848\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_FVerifySelection}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; FVerifySelection}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::FVerifySelection}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::FVerifySelection( CString stTest )}
{\f8\fs22 \par \par Determine whether the selection in the active editor matches the given string. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the selection in the active editor matches the given string. TRUE if it does; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 stTest}
{\f8\fs22 : A CString that contains the text expected in the selection.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 868\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_FVerifyLine}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; FVerifyLine}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::FVerifyLine}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::FVerifyLine( CString stTest )}
{\f8\fs22 \par \par Determine whether the current line in the active editor matches the given string. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the current line in the active editor matches the given string. TRUE if it does; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 stTest}
{\f8\fs22 : A CString that contains the text expected in the current line.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 894\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_AddTBButton}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; AddTBButton}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::AddTBButton}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::AddTBButton(int nButtonType, HWND hwndToolbar /* = NULL */)}
{\f8\fs22 \par \par Add a toolbar button (nButtonType) to the toolbar indicated by hwndToolbar. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nButtonType}
{\f8\fs22 : The button to add to the toolbar (this is NYI).\par \par }
{\i\f8\fs22 hwndToolbar}
{\f8\fs22 : The HWND of the toolbar to add the button to. NULL means create a new toolbar. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 908\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_SetToolbarCombo}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; SetToolbarCombo}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::SetToolbarCombo}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::SetToolbarCombo(LPCSTR str /*NULL*/)}
{\f8\fs22 \par \par Set the text in the standard toolbar's combo box. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 str}
{\f8\fs22 : A pointer to a string that contains the text to put in the toolbar's combo box.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 935\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_Break}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; Break}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::Break}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::Break(int WAIT)}
{\f8\fs22 \par \par Select Break mode while debugging in the IDE. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : An integer indicating the amount of time to wait for Break state in the IDE.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 949\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_Go}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; Go}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::Go}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::Go(int WAIT)}
{\f8\fs22 \par \par Start debugging the current project or run from a breakpoint. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : An integer indicating the amount of time to wait for Run state in the IDE.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 962\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_Restart}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; Restart}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::Restart}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::Restart(int WAIT)}
{\f8\fs22 \par \par Restart the current debugging session in the IDE. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : An integer indicating the amount of time to wait for Break state after restarting.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 989\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_StopDebugging}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; StopDebugging}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::StopDebugging}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::StopDebugging(int WAIT)}
{\f8\fs22 \par \par Stop the current debugging session in the IDE. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : An integer indicating the amount of time to wait for the debugging session to end.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1016\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_StepInto}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; StepInto}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::StepInto}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::StepInto(int WAIT)}
{\f8\fs22 \par \par Perform a step into in the current debugging session (or start debugging the current project, if not already). NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : An integer indicating the amount of time to wait for Break state in the IDE.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1029\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_StepOver}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; StepOver}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::StepOver}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::StepOver(int WAIT)}
{\f8\fs22 \par \par Perform a step over in the current debugging session (or start debugging the current project, if not already). NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : An integer indicating the amount of time to wait for Break state in the IDE.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1056\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_StepOut}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; StepOut}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::StepOut}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::StepOut(int WAIT)}
{\f8\fs22 \par \par Perform a step out in the current debugging session. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : An integer indicating the amount of time to wait for Break state in the IDE.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1083\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_StepToCursor}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; StepToCursor}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::StepToCursor}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::StepToCursor(int WAIT)}
{\f8\fs22 \par \par Perform a step to cursor in the current debugging session (or start debugging the current project, if not already). NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : An integer indicating the amount of time to wait for Break state in the IDE.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1102\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_ToggleBreakpoint}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; ToggleBreakpoint}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::ToggleBreakpoint}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::ToggleBreakpoint(void)}
{\f8\fs22 \par \par Toggle a breakpoint at the current line in the active editor. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1139\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_SetNextStatement}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; SetNextStatement}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::SetNextStatement}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::SetNextStatement(void)}
{\f8\fs22 \par \par Set the next statement to be executed in the debugger to the current line in the current editor. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1150\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetIDEState}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetIDEState}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetIDEState}}{\f8\fs22  }
{\f8\fs32 UINT UIWBFrame::GetIDEState(void)}
{\f8\fs22 \par \par Get the state of the IDE. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An bitfield representing the state of the IDE: ST_EXISTS | ST_ACTIVE | ST_MIN | ST_MAX | ST_RES | ST_NODEBUG | ST_DEBUGBREAK | ST_DEBUGRUN | ST_BUILDING.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1171\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_Wait}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; Wait}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::Wait}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::Wait(int option, BOOL bCheckDebuggeeWindow /*TRUE*/)}
{\f8\fs22 \par \par Wait for the IDE debugger to be in a known state. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 option}
{\f8\fs22 : An integer that indicates the type of wait: 0 (no wait), WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1227\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_WaitForBreak}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; WaitForBreak}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::WaitForBreak}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::WaitForBreak(void)}
{\f8\fs22 \par \par Wait for the IDE to be in Break state. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1291\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_WaitForTermination}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; WaitForTermination}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::WaitForTermination}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::WaitForTermination(void)}
{\f8\fs22 \par \par Wait for the IDE to terminate the current debugger session. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1421\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_WaitForRun}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; WaitForRun}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::WaitForRun}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::WaitForRun(void)}
{\f8\fs22 \par \par Wait for the IDE to be in Run state. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1466\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_WaitForException}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; WaitForException}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::WaitForException}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::WaitForException(void)}
{\f8\fs22 \par \par Wait for the IDE to catch an exception while debugging. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1502\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_WaitForCodedBreak}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; WaitForCodedBreak}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::WaitForCodedBreak}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::WaitForCodedBreak(void)}
{\f8\fs22 \par \par This function waits for (up to 1 minute) and ok's a coded break notification msg box (ie. _int 3 for x86, Debugger() for mac)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 returns TRUE if the msg box comes up within 1 minute, FALSE if not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Param}
{\f8\fs22 : The parameter description(s) for this function are not available.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1521\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_BuildProject}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; BuildProject}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::BuildProject}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::BuildProject(void)}
{\f8\fs22 \par \par Build the current project. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1539\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_DeleteProject}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; DeleteProject}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::DeleteProject}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::DeleteProject(LPCSTR szProjName, LPCSTR szDir)}
{\f8\fs22 \par \par Delete the project with the name szProjName. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szProjName}
{\f8\fs22 : A pointer to a string containing the name of the project to delete.\par \par }
{\i\f8\fs22 szDir}
{\f8\fs22 : A pointer to a string containing the project's directory. NULL means use the current directory.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1556\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_VerifyProjectRan}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; VerifyProjectRan}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::VerifyProjectRan}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::VerifyProjectRan(LPCSTR szProject)}
{\f8\fs22 \par \par Determine if the current project ran by checking the active message box for the string "exit code 0." NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szProject}
{\f8\fs22 : A pointer to a string containing the name of the project.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1583\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_VerifySubstringAtLine}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; VerifySubstringAtLine}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::VerifySubstringAtLine}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::VerifySubstringAtLine( LPCSTR stSubstring, BOOL nCase /* FALSE */)}
{\f8\fs22 \par \par Determine if the given string (stSubString) is contained within the current line in the current editor. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 stSubString}
{\f8\fs22 : A pointer to a string that contains the substring to search for.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1602\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetMemoryWidth}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetMemoryWidth}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetMemoryWidth}}{\f8\fs22  }
{\f8\fs32 int UIWBFrame::GetMemoryWidth(void)}
{\f8\fs22 \par \par Get the width of the memory window. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer containing the width of the memory window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1655\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetMemoryFormat}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetMemoryFormat}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetMemoryFormat}}{\f8\fs22  }
{\f8\fs32 MEM_FORMAT UIWBFrame::GetMemoryFormat(void)}
{\f8\fs22 \par \par Get the format of the memory window. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A MEM_FORMAT value containing the format of the memory window: MEM_FORMAT_ASCII, MEM_FORMAT_WCHAR, MEM_FORMAT_BYTE, MEM_FORMAT_SHORT, MEM_FORMAT_SHORT_HEX, MEM_FORMAT_SHORT_UNSIGNED, MEM_FORMAT_LONG, MEM_FORMAT_LONG_HEX, MEM_FORMAT_LONG_UNSIGNED, MEM_FORMAT_REAL, MEM_FORMAT_REAL_LONG.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Param}
{\f8\fs22 : The parameter description(s) for this function are not available.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1667\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_SetMemoryWidth}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; SetMemoryWidth}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::SetMemoryWidth}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::SetMemoryWidth(int width)}
{\f8\fs22 \par \par Set the width of the memory window. This function is NYI. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 width}
{\f8\fs22 : An integer containing the width to set the memory window to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1679\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_SetMemoryFormat}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; SetMemoryFormat}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::SetMemoryFormat}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::SetMemoryFormat(MEM_FORMAT format)	}
{\f8\fs22 \par \par Set the format of the memory window. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 format}
{\f8\fs22 : A MEM_FORMAT value specifying the format of the memory window: MEM_FORMAT_ASCII, MEM_FORMAT_WCHAR, MEM_FORMAT_BYTE, MEM_FORMAT_SHORT, MEM_FORMAT_SHORT_HEX, MEM_FORMAT_SHORT_UNSIGNED, MEM_FORMAT_LONG, MEM_FORMAT_LONG_HEX, MEM_FORMAT_LONG_UNSIGNED, MEM_FORMAT_REAL, MEM_FORMAT_REAL_LONG.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1692\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_WaitOnWndWithCtrl}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; WaitOnWndWithCtrl}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::WaitOnWndWithCtrl}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::WaitOnWndWithCtrl(INT ID, DWORD dwMillSec )}
{\f8\fs22 \par \par Wait for a window that has a control with the given ID on it. This function will wait up to dwMillSec milliseconds. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if the window was found within the specified time; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ID}
{\f8\fs22 : The id of the control to wait for.\par \par }
{\i\f8\fs22 dwMillSec}
{\f8\fs22 : The number of milliseconds to wait for the window with the control.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1711\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_FileOpenDlg}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; FileOpenDlg}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::FileOpenDlg}}{\f8\fs22  }
{\f8\fs32 HWND UIWBFrame::FileOpenDlg(void)}
{\f8\fs22 \par \par Open the File Open dialog. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the File Open dialog, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1721\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_FileSaveAsDlg}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; FileSaveAsDlg}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::FileSaveAsDlg}}{\f8\fs22  }
{\f8\fs32 HWND UIWBFrame::FileSaveAsDlg(void)}
{\f8\fs22 \par \par Open the File Save As dialog. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the File Save As dialog, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1734\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_GetPcodeSwitch}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; GetPcodeSwitch}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::GetPcodeSwitch}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::GetPcodeSwitch(void)}
{\f8\fs22 \par \par Get the value of the CAFE PCode switch. NOTE: This function is obsolete; use an applicable function from the CO class that represents the editor you wish to use.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value: TRUE if the switch is set; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1747\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWBFrame_CheckForFindLocalModuleDlgs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWBFrame; CheckForFindLocalModuleDlgs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWBFrame::CheckForFindLocalModuleDlgs}}{\f8\fs22  }
{\f8\fs32 BOOL UIWBFrame::CheckForFindLocalModuleDlgs(void)}
{\f8\fs22 \par \par this function cancels any Find Local Module dlgs that come up after starting debugging (used only for win32s).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 void\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uwbframe.cpp, 1766\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__GetLocString}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} GetLocString}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} GetLocString}}{\f8\fs22  }
{\f8\fs32 CString GetLocString(UINT id, int nLang /*=-1*/)}
{\f8\fs22 \par \par Get a pointer to a localized string with the given id and language.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the localized string.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : An integer that contains the id of the string to retrieve. The list of valid ids is in wbus.rc.\par \par }
{\i\f8\fs22 nLang}
{\f8\fs22 : An integer that contains the language of the string. -1 for the current language; CAFE_LANG_ENGLISH for English; CAFE_LANG_JAPANESE for Japanese. (The default value is -1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 wbutil.cpp, 37\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__GetUserTargetPlatforms}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} GetUserTargetPlatforms}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} GetUserTargetPlatforms}}{\f8\fs22  }
{\f8\fs32 int GetUserTargetPlatforms(void)	}
{\f8\fs22 \par \par Get the current platform.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An value indicating the current platform: PLATFORM_WIN32_X86, PLATFORM_WIN32S_X86, PLATFORM_MAC_68K, PLATFORM_MAC_PPC, PLATFORM_WIN32_MIPS, PLATFORM_WIN32_ALPHA, PLATFORM_WIN32_PPC.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 wbutil.cpp, 73\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COFile_Create}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COFile; Create}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COFile::Create}}{\f8\fs22  }
{\f8\fs32 int COFile::Create(UINT idsType, LPCSTR szSaveAs /*=NULL*/)}
{\f8\fs22 \par \par Create a new file and corresponding editor in the IDE.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 idsType}
{\f8\fs22 : The type of file and editor to create: IDSS_NEW_SOURCE, IDSS_NEW_PROJECT, IDSS_NEW_RC, IDSS_NEW_RCT, IDSS_NEW_BINARY, IDSS_NEW_BITMAP, IDSS_NEW_ICON.\par \par }
{\i\f8\fs22 szSaveAs}
{\f8\fs22 : A pointer to a string that contains the name to save the new file with. NULL indicates don't save (no name specified). (The default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cofile.cpp, 40\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COFile_Open}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COFile; Open}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COFile::Open}}{\f8\fs22  }
{\f8\fs32 int COFile::Open(LPCSTR szFileName, LPCSTR szChDir /*=NULL*/, EOpenAs oa /*=OA_AUTO*/)}
{\f8\fs22 \par \par Open a file and its corresponding editor in the IDE.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the name of the file to open.\par \par }
{\i\f8\fs22 szChDir}
{\f8\fs22 : A pointer to a string that contains the path to the file. NULL if szFileName includes a path or szFileName is in the current directory). (The default value is NULL.)\par \par }
{\i\f8\fs22 oa}
{\f8\fs22 : A value that indicates the editor to use when opening the file: OA_AUTO, OA_TEXT, OA_BINARY, OA_MAKEFILE. (The default value is OA_AUTO.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cofile.cpp, 82\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COFile_Save}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COFile; Save}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COFile::Save}}{\f8\fs22  }
{\f8\fs32 int COFile::Save(void)}
{\f8\fs22 \par \par Save the file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cofile.cpp, 146\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COFile_SaveAs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COFile; SaveAs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COFile::SaveAs}}{\f8\fs22  }
{\f8\fs32 int COFile::SaveAs(LPCSTR szFileName, BOOL bOverWrite /*=FALSE*/)}
{\f8\fs22 \par \par Save the file with the name given in szFileName.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the filename to use.\par \par }
{\i\f8\fs22 bOverWrite}
{\f8\fs22 : A Boolean value that indicates whether to overwrite an existing file (TRUE) or not. (The default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cofile.cpp, 172\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COFile_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COFile; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COFile::Close}}{\f8\fs22  }
{\f8\fs32 int COFile::Close(BOOL bSaveChanges /* = FALSE */)}
{\f8\fs22 \par \par Close the file and its associated editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bSaveChanges}
{\f8\fs22 : A Boolean value that indicates whether to save changes (TRUE) or not before closing the file. (The default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cofile.cpp, 227\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COFile_GetFileName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COFile; GetFileName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COFile::GetFileName}}{\f8\fs22  }
{\f8\fs32 LPCSTR COFile::GetFileName(void)}
{\f8\fs22 \par \par Get the filename of this file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a string that contains the filename of this file.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cofile.cpp, 272\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COFile_Cut}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COFile; Cut}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COFile::Cut}}{\f8\fs22  }
{\f8\fs32 LPCSTR COFile::Cut(CString* pstr /*=NULL*/)}
{\f8\fs22 \par \par Perform a cut action in the editor associated with this file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a string that contains the text placed in the clipboard as a result of the cut.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 pstr}
{\f8\fs22 : A pointer to a CString that will contain the text placed in the clipboard as a result of the cut operation. If this parameter is NULL, the return value will also be NULL. (The default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cofile.cpp, 283\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COFile_Copy}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COFile; Copy}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COFile::Copy}}{\f8\fs22  }
{\f8\fs32 LPCSTR COFile::Copy(CString* pstr /*=NULL*/)}
{\f8\fs22 \par \par Perform a copy operation in the editor associated with this file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a string that contains the text placed in the clipboard as a result of the cut.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 pstr}
{\f8\fs22 : A pointer to a CString that will contain the text placed in the clipboard as a result of the cut operation. If this parameter is NULL, the return value will also be NULL. (The default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cofile.cpp, 298\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COFile_Paste}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COFile; Paste}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COFile::Paste}}{\f8\fs22  }
{\f8\fs32 void COFile::Paste(void)}
{\f8\fs22 \par \par Perform a paste operation in the editor associated with this file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cofile.cpp, 312\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COFile_Delete}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COFile; Delete}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COFile::Delete}}{\f8\fs22  }
{\f8\fs32 void COFile::Delete(void)}
{\f8\fs22 \par \par Perform a delete operation in the editor associated with this file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cofile.cpp, 322\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COFile_Undo}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COFile; Undo}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COFile::Undo}}{\f8\fs22  }
{\f8\fs32 void COFile::Undo(void)}
{\f8\fs22 \par \par Perform an undo operation in the editor associated with this file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cofile.cpp, 332\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COFile_Redo}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COFile; Redo}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COFile::Redo}}{\f8\fs22  }
{\f8\fs32 void COFile::Redo(void)}
{\f8\fs22 \par \par Peform a redo operation in the editor associated with this file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cofile.cpp, 342\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COResScript_Create}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COResScript; Create}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COResScript::Create}}{\f8\fs22  }
{\f8\fs32 int COResScript::Create(LPCSTR szSaveAs /*=NULL*/)}
{\f8\fs22 \par \par Create a new resource script in the IDE.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szSaveAs}
{\f8\fs22 : A pointer to a string that contains the name to save the new file with. NULL indicates don't save (no name specified). (The default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coresscr.cpp, 39\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COResScript_Open}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COResScript; Open}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COResScript::Open}}{\f8\fs22  }
{\f8\fs32 int COResScript::Open(LPCSTR szFileName, LPCSTR szChDir /*=NULL*/)}
{\f8\fs22 \par \par Open a resource script file and its editor in the IDE.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the name of the file to open.\par \par }
{\i\f8\fs22 szChDir}
{\f8\fs22 : A pointer to a string that contains the path to the file. NULL if szFileName includes a path or szFileName is in the current directory). (The default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coresscr.cpp, 51\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COResScript_CreateResource}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COResScript; CreateResource}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COResScript::CreateResource}}{\f8\fs22  }
{\f8\fs32 int COResScript::CreateResource(UINT idResType)}
{\f8\fs22 \par \par Add a resource to this resource script.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 idResType}
{\f8\fs22 : An value that contains the type of resource to add: IDSS_RT_ACCELERATOR, IDSS_RT_BINARY, IDSS_RT_BITMAP, IDSS_RT_CURSOR, IDSS_RT_DIALOG, IDSS_RT_ICON, IDSS_RT_MENU, IDSS_RT_STRING_TABLE, IDSS_RT_VERSION.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coresscr.cpp, 62\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COResScript_CreateResource}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COResScript; CreateResource}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COResScript::CreateResource}}{\f8\fs22  }
{\f8\fs32 int COResScript::CreateResource( LPCSTR szResName )}
{\f8\fs22 \par \par Add a resource to this resource script. This function, since it takes the name of the type of resource as a pointer to a string, is generally used for custom resource types.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szResName}
{\f8\fs22 : A pointer to a string that contains the name of the resource to add.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coresscr.cpp, 125\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COResScript_CreateResource}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COResScript; CreateResource}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COResScript::CreateResource}}{\f8\fs22  }
{\f8\fs32 int COResScript::CreateResource(UINT idResType, UIResEditor& resEditor)}
{\f8\fs22 \par \par Add a resource to this resource script.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 idResType}
{\f8\fs22 : An value that contains the type of resource to add: IDSS_RT_ACCELERATOR, IDSS_RT_BINARY, IDSS_RT_BITMAP, IDSS_RT_CURSOR, IDSS_RT_DIALOG, IDSS_RT_ICON, IDSS_RT_MENU, IDSS_RT_STRING_TABLE, IDSS_RT_VERSION.\par \par }
{\i\f8\fs22 resEditor}
{\f8\fs22 : A reference to a UIResEditor object that will contain the resource editor created.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coresscr.cpp, 155\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_Create}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; Create}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::Create}}{\f8\fs22  }
{\f8\fs32 int COSource::Create(LPCSTR szSaveAs /*=NULL*/)}
{\f8\fs22 \par \par Create a new editor window and file in the IDE.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szSaveAs}
{\f8\fs22 : A pointer to a string that contains the name to save the new file with. NULL indicates don't save (no name specified). (The default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 56\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_Open}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; Open}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::Open}}{\f8\fs22  }
{\f8\fs32 int COSource::Open(LPCSTR szFileName, LPCSTR szChDir /*=NULL*/, EOpenAs oa /*=OA_AUTO*/)}
{\f8\fs22 \par \par Open a text file in the IDE.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the name of the file to open.\par \par }
{\i\f8\fs22 szChDir}
{\f8\fs22 : A pointer to a string that contains the path to the file. NULL if szFileName includes a path or szFileName is in the current directory). (The default value is NULL.)\par \par }
{\i\f8\fs22 oa}
{\f8\fs22 : A value that indicates the editor to use when opening the file: OA_AUTO, OA_TEXT, OA_BINARY, OA_MAKEFILE. (The default value is OA_AUTO.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 69\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_GetReadOnly}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; GetReadOnly}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::GetReadOnly}}{\f8\fs22  }
{\f8\fs32 BOOL COSource::GetReadOnly(void)}
{\f8\fs22 \par \par Determine the read only state of this file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates the read only state: TRUE if read only; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 79\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_GetCurrentLine}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; GetCurrentLine}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::GetCurrentLine}}{\f8\fs22  }
{\f8\fs32 int COSource::GetCurrentLine(void)}
{\f8\fs22 \par \par Get the current line in the text editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer containing the current line.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 89\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_GetCurrentColumn}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; GetCurrentColumn}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::GetCurrentColumn}}{\f8\fs22  }
{\f8\fs32 int COSource::GetCurrentColumn(void)}
{\f8\fs22 \par \par Get the current column in the text editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer containing the current column.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 99\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_GetSelectedText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; GetSelectedText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::GetSelectedText}}{\f8\fs22  }
{\f8\fs32 CString COSource::GetSelectedText(void)}
{\f8\fs22 \par \par Get the selected text in the editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the selected text.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 109\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_SelectText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; SelectText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::SelectText}}{\f8\fs22  }
{\f8\fs32 void COSource::SelectText(int line1, int column1, int line2, int column2, BOOL bColumnSelect /*=SELECT_NORMAL*/)}
{\f8\fs22 \par \par Select text in the source editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line1}
{\f8\fs22 : An integer that contains the starting line for the selection.\par \par }
{\i\f8\fs22 column1}
{\f8\fs22 : An integer that contains the starting column for the selection.\par \par }
{\i\f8\fs22 line2}
{\f8\fs22 : An integer that contains the ending line for the selection.\par \par }
{\i\f8\fs22 column2}
{\f8\fs22 : An integer that contains the ending column for the selection.\par \par }
{\i\f8\fs22 bColumnSelect}
{\f8\fs22 : A integer that indicates the type of selection to perform: SELECT_NORMAL, SELECT_COLUMN, SELECT_BRIEF_COLUMN. (The default value is SELECT_NORMAL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 132\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_SetCursor}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; SetCursor}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::SetCursor}}{\f8\fs22  }
{\f8\fs32 void COSource::SetCursor(int line, int column)}
{\f8\fs22 \par \par Set the caret to the given line and column in the source editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : An integer containing the line to set the caret to.\par \par }
{\i\f8\fs22 column}
{\f8\fs22 : An integer containing the column to set the caret to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 184\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_InsertText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; InsertText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::InsertText}}{\f8\fs22  }
{\f8\fs32 void COSource::InsertText(LPCSTR szText, int line, int column, BOOL bLiteral /*=FALSE*/)}
{\f8\fs22 \par \par Insert the given text at the given line and column in the source editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szText}
{\f8\fs22 : A pointer to a string that contains the text to insert into the source editor.\par \par }
{\i\f8\fs22 line}
{\f8\fs22 : An integer that contains the line where the text should be inserted.\par \par }
{\i\f8\fs22 column}
{\f8\fs22 : An integer that contains the column where the text should be inserted.\par \par }
{\i\f8\fs22 bLiteral}
{\f8\fs22 : A Boolean value that indicates whether the string (szText) should be interpreted literally (TRUE) or following MS-Test's DoKeys intepretation. (The default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 223\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_TypeTextAtCursor}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; TypeTextAtCursor}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::TypeTextAtCursor}}{\f8\fs22  }
{\f8\fs32 void COSource::TypeTextAtCursor(LPCSTR szText, BOOL bLiteral /*=FALSE*/)}
{\f8\fs22 \par \par Type the given text at the current caret location in the source editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szText}
{\f8\fs22 : A pointer to a string that contains the text to type at the caret location.\par \par }
{\i\f8\fs22 bLiteral}
{\f8\fs22 : A Boolean value that indicates whether the string (szText) should be interpreted literally (TRUE) or following MS-Test's DoKeys intepretation. (The default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 238\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_GoToLine}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; GoToLine}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::GoToLine}}{\f8\fs22  }
{\f8\fs32 BOOL COSource::GoToLine(LPCSTR szLine)}
{\f8\fs22 \par \par Go to the given line in the source editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szLine}
{\f8\fs22 : A pointer to a string containing the line number to go to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 251\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_GoToLine}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; GoToLine}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::GoToLine}}{\f8\fs22  }
{\f8\fs32 BOOL COSource::GoToLine(int nLine)}
{\f8\fs22 \par \par Go to the given line in the source editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nLine}
{\f8\fs22 : An integer containing the line number to go to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 276\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_Find}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; Find}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::Find}}{\f8\fs22  }
{\f8\fs32 BOOL COSource::Find(LPCSTR szFind, BOOL bMatchWord, BOOL bMatchCase, BOOL bRegExpr, COSource::FindDirection fd)}
{\f8\fs22 \par \par Find the given string (szFind) in this source editor window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFind}
{\f8\fs22 : A pointer to a string containing the text to find in this window.\par \par }
{\i\f8\fs22 bMatchWord}
{\f8\fs22 : A Boolean value that indicates how to match words: TRUE to only find whole words; FALSE to find partial words. (Default value is FALSE.)\par \par }
{\i\f8\fs22 bMatchCase}
{\f8\fs22 : A Boolean value that indicates how to match case: TRUE to match the case exactly; FALSE to ignore case. (Default value is FALSE.)\par \par }
{\i\f8\fs22 bRegExpr}
{\f8\fs22 : A Boolean value that indicates whether the find string is a regular expression (TRUE) or not. (Default value is FALSE.)\par \par }
{\i\f8\fs22 fd}
{\f8\fs22 : A value that indicates the search direction: FD_DOWN to search toward the end of the file; FD_UP to search toward the top of the file. (Default value is FD_DOWN.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 293\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COSource_Replace}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COSource; Replace}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COSource::Replace}}{\f8\fs22  }
{\f8\fs32 int COSource::Replace(LPCSTR szFind, LPCSTR szReplace, BOOL bMatchWord, BOOL bMatchCase, BOOL bRegExpr, COSource::ReplaceScope rs, BOOL bAll /*= FALSE*/)}
{\f8\fs22 \par \par Find (szFind) and replace (szReplace) in this source editor window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that specifies the number of occurences that were replaced by the operation.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFind}
{\f8\fs22 : A pointer to a string containing the text to find in this window.\par \par }
{\i\f8\fs22 szReplace}
{\f8\fs22 : A pointer to a string containing the text to replace the found string within this window.\par \par }
{\i\f8\fs22 bMatchWord}
{\f8\fs22 : A Boolean value that indicates how to match words: TRUE to only find whole words; FALSE to find partial words. (Default value is FALSE.)\par \par }
{\i\f8\fs22 bMatchCase}
{\f8\fs22 : A Boolean value that indicates how to match case: TRUE to match the case exactly; FALSE to ignore case. (Default value is FALSE.)\par \par }
{\i\f8\fs22 bRegExpr}
{\f8\fs22 : A Boolean value that indicates whether the find string is a regular expression (TRUE) or not. (Default value is FALSE.)\par \par }
{\i\f8\fs22 rs}
{\f8\fs22 : A value that indicates the scope of the replace operation: COSource::RS_WHOLEFILE to search and replace across the entire file; COSource::RS_SELECTION to search and replace within the selection. (Default value is COSource::RS_WHOLEFILE.)\par \par }
{\i\f8\fs22 bAll}
{\f8\fs22 : A Boolean value that indicates whether to replace all occurences in the file/selection (TRUE) or just the first one. (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 357\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__SelectEmulations}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} SelectEmulations}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} SelectEmulations}}{\f8\fs22  }
{\f8\fs32 SelectEmulations(int EMULATE_EDITOR)}
{\f8\fs22 \par \par Select Editor to emulate from Tools.Options.Compatibility\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 EMULATE_EDITOR}
{\f8\fs22 : The editor to emulate from: EMULATE_VC3, EMULATE_VC2, EMULATE_BRIEF, EMULATE_EPSILON, EMULATE_CUSTOM \par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cosource.cpp, 405\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAccEdit_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAccEdit; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAccEdit::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIAccEdit::IsValid(void) const}
{\f8\fs22 \par \par Determine whether the accelerator editor is valid by determining if the window is valid, visible, the Resource Symbols menu item is enabled, and the title is correct.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the window is valid: TRUE if it's valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uaccedit.cpp, 33\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAccEdit_AddAccel}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAccEdit; AddAccel}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAccEdit::AddAccel}}{\f8\fs22  }
{\f8\fs32 int UIAccEdit::AddAccel(LPCSTR szChar, LPCSTR  szId /*=NULL*/, DWORD dwKeyMods /*=0x0*/, BOOL bNextKeyType /*=FALSE*/)}
{\f8\fs22 \par \par Add an accelerator to the accelerator editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer value that contains the line number in the editor of the new accelerator.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szChar}
{\f8\fs22 : A pointer to a string that contains the accelerator key to add.\par \par }
{\i\f8\fs22 szId}
{\f8\fs22 : A pointer to a string that contains the name of the ID for this accelerator. NULL indicates use the default name. (The default is NULL.)\par \par }
{\i\f8\fs22 dwKeyMods}
{\f8\fs22 : A bit field that indicates the modifier keys to apply to this accelerator: ACC_CONTROL, ACC_NO_CONTROL, ACC_ALT, ACC_NO_ALT, ACC_SHIFT, ACC_NO_SHIFT, ACC_ASCII, ACC_VIRTKEY. (The default is 0.)\par \par }
{\i\f8\fs22 bNextKey}
{\f8\fs22 : A Boolean value that indicates whether to use the next key typed (TRUE) or not. This parameter is NYI. (The default is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uaccedit.cpp, 47\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAccEdit_EditAccel}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAccEdit; EditAccel}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAccEdit::EditAccel}}{\f8\fs22  }
{\f8\fs32 void UIAccEdit::EditAccel(LPCSTR szChar /*=NULL*/, LPCSTR  szId /*=NULL*/, DWORD dwKeyMods /*=0x0*/)}
{\f8\fs22 \par \par Edit the currently selected accelerator in the accelerator editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szChar}
{\f8\fs22 : A pointer to a string that contains the new accelerator key for the selected accelerator.\par \par }
{\i\f8\fs22 szId}
{\f8\fs22 : A pointer to a string that contains the new name of the ID for this accelerator. NULL indicates use the current name. (The default is NULL.)\par \par }
{\i\f8\fs22 dwKeyMods}
{\f8\fs22 : A bit field that indicates the modifier keys to apply to this accelerator: ACC_CONTROL, ACC_NO_CONTROL, ACC_ALT, ACC_NO_ALT, ACC_SHIFT, ACC_NO_SHIFT, ACC_ASCII, ACC_VIRTKEY. (The default is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uaccedit.cpp, 86\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAccEdit_FindAccel}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAccEdit; FindAccel}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAccEdit::FindAccel}}{\f8\fs22  }
{\f8\fs32 BOOL UIAccEdit::FindAccel(LPCSTR sz /*=NULL*/, LPCSTR szId /*=0*/)}
{\f8\fs22 \par \par Determine if the given accelerator is defined. This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success; TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Param}
{\f8\fs22 : The parameter description(s) for this function are not available.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uaccedit.cpp, 118\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAccEdit_GetKey}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAccEdit; GetKey}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAccEdit::GetKey}}{\f8\fs22  }
{\f8\fs32 CString UIAccEdit::GetKey(int line /*=-1*/)}
{\f8\fs22 \par \par Get the accelerator key associated with the accelerator on the specified line (line).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the key associated with the accelerator on the specified line.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : An integer containing the line to get the accelerator key for. -1 means use the current line. (The default is -1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uaccedit.cpp, 130\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAccEdit_GetKeyMods}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAccEdit; GetKeyMods}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAccEdit::GetKeyMods}}{\f8\fs22  }
{\f8\fs32 DWORD UIAccEdit::GetKeyMods(int line /*=-1*/)}
{\f8\fs22 \par \par Get the accelerator key modifiers for the accelerator on the specified line (line).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A bit field that indicates the modifier keys to apply to this accelerator: ACC_CONTROL, ACC_NO_CONTROL, ACC_ALT, ACC_NO_ALT, ACC_SHIFT, ACC_NO_SHIFT, ACC_ASCII, ACC_VIRTKEY.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : An integer containing the line to get the accelerator modifier keys for. -1 means use the current line. (The default is -1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uaccedit.cpp, 143\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDlgEdit_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDlgEdit; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDlgEdit::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIDlgEdit::IsValid(void) const}
{\f8\fs22 \par \par Determine whether the dialog editor is valid by determining if the window is valid, visible, the Resource Symbols menu item is enabled, and the title is correct.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the window is valid: TRUE if it's valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udlgedit.cpp, 30\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDlgEdit_DropControl}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDlgEdit; DropControl}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDlgEdit::DropControl}}{\f8\fs22  }
{\f8\fs32 BOOL UIDlgEdit::DropControl(int nControl, int cX, int cY )}
{\f8\fs22 \par \par Drop the specified control in the dialog editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nControl}
{\f8\fs22 : An integer containing the number of the control, which is a zero-based index into the control palette.\par \par }
{\i\f8\fs22 cX}
{\f8\fs22 : An integer containing the X (horizontal) position where the control should be dropped relative to the upper left corner of the dialog editor.\par \par }
{\i\f8\fs22 cY}
{\f8\fs22 : An integer containing the Y (vertical) position where the control should be dropped relative to the upper left corner of the dialog editor.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 udlgedit.cpp, 62\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIEditor_AttachActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIEditor; AttachActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIEditor::AttachActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIEditor::AttachActive(void)}
{\f8\fs22 \par \par Initialize this object by attaching to the active editor window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successfully attached to the active editor window; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ueditor.cpp, 28\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIEditor_IsActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIEditor; IsActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIEditor::IsActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIEditor::IsActive(void)}
{\f8\fs22 \par \par Determine if this editor window is active.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if the editor window is active; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ueditor.cpp, 38\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIEditor_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIEditor; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIEditor::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIEditor::Activate(void)}
{\f8\fs22 \par \par Activate this editor window by giving the window the focus.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ueditor.cpp, 48\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIEditor_GetTitle}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIEditor; GetTitle}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIEditor::GetTitle}}{\f8\fs22  }
{\f8\fs32 CString UIEditor::GetTitle(void) const}
{\f8\fs22 \par \par Get the title of this editor window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the title of this window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ueditor.cpp, 58\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIEditor_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIEditor; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIEditor::Close}}{\f8\fs22  }
{\f8\fs32 BOOL UIEditor::Close(BOOL bLoseChanges /*=TRUE*/)}
{\f8\fs22 \par \par Close this editor window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bLoseChanges}
{\f8\fs22 : A Boolean value that indicates whether to lose changes (TRUE) or save them (FALSE). (The default value is TRUE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ueditor.cpp, 81\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFindInFilesDlg_AddFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFindInFilesDlg; AddFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFindInFilesDlg::AddFile}}{\f8\fs22  }
{\f8\fs32 void UIFindInFilesDlg::AddFile(LPCSTR szFile)}
{\f8\fs22 \par \par Add a file to the list of selected files to search in the Selected Files list box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFile}
{\f8\fs22 : A pointer to a string that contains the filename of the file to add to the list of files to search. This is usually a full path to the file.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindinf.cpp, 34\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFindInFilesDlg_FindWhat}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFindInFilesDlg; FindWhat}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFindInFilesDlg::FindWhat}}{\f8\fs22  }
{\f8\fs32 void UIFindInFilesDlg::FindWhat(LPCSTR szFind)}
{\f8\fs22 \par \par Set the text to search for in the list of files in the Find What edit box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFind}
{\f8\fs22 : A pointer to a string containing the text to search for in the list of files.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindinf.cpp, 47\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFindInFilesDlg_DoFind}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFindInFilesDlg; DoFind}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFindInFilesDlg::DoFind}}{\f8\fs22  }
{\f8\fs32 void UIFindInFilesDlg::DoFind(void)}
{\f8\fs22 \par \par Perform the find in files. Call this function after setting the list of files with UIFindInFilesDlg::AddFile and the text to search for with UIFindInFilesDlg::FindWhat.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindinf.cpp, 58\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFindDlg_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFindDlg; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFindDlg::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIFindDlg::Activate(void)}
{\f8\fs22 \par \par Open the Find dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 39\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFindDlg_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFindDlg; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFindDlg::Close}}{\f8\fs22  }
{\f8\fs32 HWND UIFindDlg::Close(void)}
{\f8\fs22 \par \par Close the Find dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 NULL, if successful; the HWND of the Find dialog, if it failed to close.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 53\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFindDlg_SetFindString}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFindDlg; SetFindString}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFindDlg::SetFindString}}{\f8\fs22  }
{\f8\fs32 BOOL UIFindDlg::SetFindString(LPCSTR szFind)}
{\f8\fs22 \par \par Set the text given in szFind in the Find What edit box in the Find dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFind}
{\f8\fs22 : A pointer to a string containing the text to enter in the Find What edit box in the Find dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 64\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFindDlg_SetMatchWord}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFindDlg; SetMatchWord}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFindDlg::SetMatchWord}}{\f8\fs22  }
{\f8\fs32 BOOL UIFindDlg::SetMatchWord(BOOL bMatchWord)}
{\f8\fs22 \par \par Check or uncheck the Match Whole Word Only checkbox based on the value of bMatchWord.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bMatchWord}
{\f8\fs22 : A Boolean value that, if TRUE means check the Match Whole Word Only checkbox, and if FALSE means uncheck it. (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 76\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFindDlg_SetMatchCase}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFindDlg; SetMatchCase}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFindDlg::SetMatchCase}}{\f8\fs22  }
{\f8\fs32 BOOL UIFindDlg::SetMatchCase(BOOL bMatchCase)}
{\f8\fs22 \par \par Check or uncheck the Match Case checkbox based on the value of bMatchCase.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bMatchCase}
{\f8\fs22 : A Boolean value that, if TRUE means check the Match Case checkbox, and if FALSE means uncheck it. (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 93\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFindDlg_SetRegularExpression}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFindDlg; SetRegularExpression}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFindDlg::SetRegularExpression}}{\f8\fs22  }
{\f8\fs32 BOOL UIFindDlg::SetRegularExpression(BOOL bRegExpr)}
{\f8\fs22 \par \par Check or uncheck the Regular Expression checkbox based on the value of bRegExpr.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bRegExpr}
{\f8\fs22 : A Boolean value that, if TRUE means check the Regular Expression checkbox, and if FALSE means uncheck it. (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 110\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFindDlg_SetDirection}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFindDlg; SetDirection}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFindDlg::SetDirection}}{\f8\fs22  }
{\f8\fs32 BOOL UIFindDlg::SetDirection(UIFindDlg::FindDirection fd)}
{\f8\fs22 \par \par Set the find direction in the Find dialog box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates succees. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 fd}
{\f8\fs22 : A value that indicates the find direction. FD_UP to set the find direction to up; FD_DOWN to set the find direction to down. (Default value is FD_DOWN.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 127\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFindDlg_FindNext}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFindDlg; FindNext}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFindDlg::FindNext}}{\f8\fs22  }
{\f8\fs32 BOOL UIFindDlg::FindNext(void)}
{\f8\fs22 \par \par Perform the find operation by clicking the Find Next button in the Find dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 150\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIFindDlg_SetBookmarks}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIFindDlg; SetBookmarks}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIFindDlg::SetBookmarks}}{\f8\fs22  }
{\f8\fs32 BOOL UIFindDlg::SetBookmarks(void)}
{\f8\fs22 \par \par Perform the set bookmarks operation by clicking on the Set Bookmarks on All button in the Find dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 162\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIReplaceDlg_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIReplaceDlg; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIReplaceDlg::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIReplaceDlg::Activate(void)}
{\f8\fs22 \par \par Open the Replace dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 NULL, if successful; the HWND of the Replace dialog, if it failed to close.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 183\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIReplaceDlg_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIReplaceDlg; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIReplaceDlg::Close}}{\f8\fs22  }
{\f8\fs32 HWND UIReplaceDlg::Close(void)}
{\f8\fs22 \par \par Close the Replace dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 197\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIReplaceDlg_SetFindString}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIReplaceDlg; SetFindString}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIReplaceDlg::SetFindString}}{\f8\fs22  }
{\f8\fs32 BOOL UIReplaceDlg::SetFindString(LPCSTR szFind)}
{\f8\fs22 \par \par Enter the text given in szFind in the Find What edit box in the Replace dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFind}
{\f8\fs22 : A pointer to a string that contains the text to enter in the Find What edit box in the Replace dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 208\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIReplaceDlg_SetReplaceString}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIReplaceDlg; SetReplaceString}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIReplaceDlg::SetReplaceString}}{\f8\fs22  }
{\f8\fs32 BOOL UIReplaceDlg::SetReplaceString(LPCSTR szReplace)}
{\f8\fs22 \par \par Enter the text given in szReplace in the Replace With edit box in the Replace dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szReplace}
{\f8\fs22 : A pointer to a string that contains the text to enter in the Replace With edit box in the Replace dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 220\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIReplaceDlg_SetMatchWord}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIReplaceDlg; SetMatchWord}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIReplaceDlg::SetMatchWord}}{\f8\fs22  }
{\f8\fs32 BOOL UIReplaceDlg::SetMatchWord(BOOL bMatchWord)}
{\f8\fs22 \par \par Check or uncheck the Match Whole Word Only checkbox based on the value of bMatchWord.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bMatchWord}
{\f8\fs22 : A Boolean value that, if TRUE means check the Match Whole Word Only checkbox, and if FALSE means uncheck it. (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 232\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIReplaceDlg_SetMatchCase}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIReplaceDlg; SetMatchCase}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIReplaceDlg::SetMatchCase}}{\f8\fs22  }
{\f8\fs32 BOOL UIReplaceDlg::SetMatchCase(BOOL bMatchCase)}
{\f8\fs22 \par \par Check or uncheck the Match Case checkbox based on the value of bMatchCase.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bMatchCase}
{\f8\fs22 : A Boolean value that, if TRUE means check the Match Case checkbox, and if FALSE means uncheck it. (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 249\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIReplaceDlg_SetRegularExpression}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIReplaceDlg; SetRegularExpression}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIReplaceDlg::SetRegularExpression}}{\f8\fs22  }
{\f8\fs32 BOOL UIReplaceDlg::SetRegularExpression(BOOL bRegExpr)}
{\f8\fs22 \par \par Check or uncheck the Regular Expression checkbox based on the value of bRegExpr.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bRegExpr}
{\f8\fs22 : A Boolean value that, if TRUE means check the Regular Expression checkbox, and if FALSE means uncheck it. (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 266\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIReplaceDlg_SetReplaceScope}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIReplaceDlg; SetReplaceScope}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIReplaceDlg::SetReplaceScope}}{\f8\fs22  }
{\f8\fs32 BOOL UIReplaceDlg::SetReplaceScope(UIReplaceDlg::ReplaceScope rs)}
{\f8\fs22 \par \par Set the replace scope in the Replace dialog box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 fd}
{\f8\fs22 : A value that indicates the scope of the find and replace operation: RS_WHOLEFILE to set the replace scope to the whole file; RS_SELECTION to set the replace scope to the selection. (Default value is RS_WHOLEFILE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 283\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIReplaceDlg_FindNext}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIReplaceDlg; FindNext}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIReplaceDlg::FindNext}}{\f8\fs22  }
{\f8\fs32 BOOL UIReplaceDlg::FindNext(void)}
{\f8\fs22 \par \par Perform the find operation by clicking the Find Next button in the Replace dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 306\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIReplaceDlg_Replace}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIReplaceDlg; Replace}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIReplaceDlg::Replace}}{\f8\fs22  }
{\f8\fs32 BOOL UIReplaceDlg::Replace(void)}
{\f8\fs22 \par \par Perform the replace operation by clicking the Replace button in the Replace dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 321\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIReplaceDlg_ReplaceAll}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIReplaceDlg; ReplaceAll}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIReplaceDlg::ReplaceAll}}{\f8\fs22  }
{\f8\fs32 BOOL UIReplaceDlg::ReplaceAll(void)}
{\f8\fs22 \par \par Perform the replace all operation by clicking the Replace All button in the Replace dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ufindrep.cpp, 336\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIImgEdit_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIImgEdit; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIImgEdit::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIImgEdit::IsValid(void) const}
{\f8\fs22 \par \par Determine whether the image editor is valid by determining if the window is valid, visible, and the Image menu is enabled.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the window is valid: TRUE if it's valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimgedit.cpp, 34\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIImgEdit_ClickImgTool }
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIImgEdit; ClickImgTool }}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIImgEdit::ClickImgTool }}{\f8\fs22  }
{\f8\fs32 void UIImgEdit::ClickImgTool ( int nImgTool )}
{\f8\fs22 \par \par Select an image editing tool from the Graphics palette.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nImgTool}
{\f8\fs22 : A value that indicates the tool to select: GT_SELECT, GT_LASSO, GT_PICKER, GT_ERASER, GT_FILL, GT_ZOOM, GT_PENCIL, GT_BRUSH, GT_SPRAY, GT_LINE, GT_CURVE, GT_TEXT, GT_RECT, GT_COMBORECT, GT_FILLRECT, GT_ROUND, GT_COMBOROUND, GT_FILLROUND, GT_ELLIPSE, GT_COMBOELLIPSE, GT_FILLELLIPSE, GT_POLY, GT_COMBOPOLY, GT_FILLPOLY.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimgedit.cpp, 62\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIImgEdit_SetColor}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIImgEdit; SetColor}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIImgEdit::SetColor}}{\f8\fs22  }
{\f8\fs32 void UIImgEdit::SetColor(int nColor, int nButton /* VK_LBUTTON */)}
{\f8\fs22 \par \par Set the foreground (left mouse button) or background (right mouse button) color in the image editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nColor}
{\f8\fs22 : An integer that represents the position of the color on the color palette. This value is 1-based value, starting with black as 1. For cursors and icons: -1 means use the inverse color; 0 means use the screen or transparent color.\par \par }
{\i\f8\fs22 nButton}
{\f8\fs22 : The mouse button to assign the color to: VK_LBUTTON, VK_RBUTTON. (Default value is VK_LBUTTON.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimgedit.cpp, 143\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIImgEdit_GetPane}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIImgEdit; GetPane}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIImgEdit::GetPane}}{\f8\fs22  }
{\f8\fs32 HWND UIImgEdit::GetPane(int nPane)}
{\f8\fs22 \par \par Get the HWND of one of the panes in the image editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the requested pane. NULL if the requested pane does not exist.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nPane}
{\f8\fs22 : A value that indicates the pane to get the HWND for: PANE_LEFT, PANE_RIGHT.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimgedit.cpp, 166\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIImgEdit_ClickMouse}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIImgEdit; ClickMouse}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIImgEdit::ClickMouse}}{\f8\fs22  }
{\f8\fs32 void UIImgEdit::ClickMouse(int nButton, int nPane, int cX, int cY, int nMag /*=1*/)}
{\f8\fs22 \par \par Click the mouse at the given coordinates in the given pane in the image editor. The coordinates are relative to the upper left corner of the pane.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nButton}
{\f8\fs22 : A value that indicates which button to click in the image editor: VK_LBUTTON, VK_MBUTTON, VK_RBUTTON.\par \par }
{\i\f8\fs22 nPane}
{\f8\fs22 : A value that indicates which pane of the image editor to click in: PANE_LEFT, PANE_RIGHT.\par \par }
{\i\f8\fs22 cX}
{\f8\fs22 : An integer that contains the X (horizontal) position to click. This position is relative to the upper left corner of the pane.\par \par }
{\i\f8\fs22 cY}
{\f8\fs22 : An integer that contains the Y (vertical) position to click. This position is relative to the upper left corner of the pane.\par \par }
{\i\f8\fs22 nMag}
{\f8\fs22 : An integer that contains the magnification in the image editor. This value is used to click a particular "bit" in the image editor by multiplying the X and Y coordinates by nMag. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimgedit.cpp, 221\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIImgEdit_DragMouse}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIImgEdit; DragMouse}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIImgEdit::DragMouse}}{\f8\fs22  }
{\f8\fs32 void UIImgEdit::DragMouse(int nButton, int nPane, int cX1, int cY1, int cX2, int cY2, int nMag /*=1*/)}
{\f8\fs22 \par \par Drag the mouse from the beginning coordinates to the ending coordinates in the given pane in the image editor. The coordinates are relative to the upper left corner of the pane.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nButton}
{\f8\fs22 : A value that indicates which button to click and hold while dragging in the image editor: VK_LBUTTON, VK_MBUTTON, VK_RBUTTON.\par \par }
{\i\f8\fs22 nPane}
{\f8\fs22 : A value that indicates which pane of the image editor to drag in: PANE_LEFT, PANE_RIGHT.\par \par }
{\i\f8\fs22 cX1}
{\f8\fs22 : An integer that contains the X (horizontal) position to start the drag. This position is relative to the upper left corner of the pane.\par \par }
{\i\f8\fs22 cY1}
{\f8\fs22 : An integer that contains the Y (vertical) position to start the drag. This position is relative to the upper left corner of the pane.\par \par }
{\i\f8\fs22 cX1}
{\f8\fs22 : An integer that contains the X (horizontal) position to end the drag. This position is relative to the upper left corner of the pane.\par \par }
{\i\f8\fs22 cY1}
{\f8\fs22 : An integer that contains the Y (vertical) position to end the drag. This position is relative to the upper left corner of the pane.\par \par }
{\i\f8\fs22 nMag}
{\f8\fs22 : An integer that contains the magnification in the image editor. This value is used to click and drag across particular "bits" in the image editor by multiplying the X and Y coordinates by nMag. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimgedit.cpp, 242\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIImgEdit_SetFont}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIImgEdit; SetFont}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIImgEdit::SetFont}}{\f8\fs22  }
{\f8\fs32 void UIImgEdit::SetFont(LPCSTR szFontName /*=NULL*/, int nSize /*=-1*/, int nStyle /*=-1*/)}
{\f8\fs22 \par \par Set the font to be used by the text tool in the image editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFontName}
{\f8\fs22 : A pointer to a string that contains the name of the font. NULL means use the current font. (Default value is NULL.)\par \par }
{\i\f8\fs22 nSize}
{\f8\fs22 : An integer that contains the point size of the font. -1 means use the current point size. (Default value is -1.)\par \par }
{\i\f8\fs22 nStyle}
{\f8\fs22 : An index into the list of font styles. -1 means use the current style. This value is usually: 1 for regular style; 2 for italic style; 3 for bold style; and 4 for bold italic style.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimgedit.cpp, 279\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIImgEdit_IsStandalone}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIImgEdit; IsStandalone}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIImgEdit::IsStandalone}}{\f8\fs22  }
{\f8\fs32 BOOL UIImgEdit::IsStandalone(void)}
{\f8\fs22 \par \par Determine if the image editor is stand alone or part of a resource script. (If a resource script window is open, this function assumes this image editor belongs to that script.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the image editor is stand alone. TRUE if it's stand alone; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimgedit.cpp, 299\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIImgEdit_GetEditorType}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIImgEdit; GetEditorType}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIImgEdit::GetEditorType}}{\f8\fs22  }
{\f8\fs32 int UIImgEdit::GetEditorType(void)}
{\f8\fs22 \par \par Get the specific type of image editor. This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A value indicating the type of image editor: ED_CURSOR, ED_ICON, ED_BITMAP.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimgedit.cpp, 309\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMenEdit_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMenEdit; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMenEdit::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIMenEdit::IsValid(void) const}
{\f8\fs22 \par \par Determine whether the menu editor is valid by determining if the window is valid, visible, the Resource Symbols menu item is enabled, and the title is correct.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the window is valid: TRUE if it's valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 umenedit.cpp, 24\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMenEdit_GetMenuBar}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMenEdit; GetMenuBar}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMenEdit::GetMenuBar}}{\f8\fs22  }
{\f8\fs32 HWND UIMenEdit::GetMenuBar(void)}
{\f8\fs22 \par \par Get the HWND to the menu bar in the menu bar editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the menu bar in the menu bar editor.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 umenedit.cpp, 34\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResBrowser_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResBrowser; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResBrowser::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIResBrowser::IsValid(void) const}
{\f8\fs22 \par \par Determine whether the resource browser is valid by determining if the window is valid, visible, the window contains a list box, and it's not a string table editor or accelerator editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the window is valid: TRUE if it's valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uresbrws.cpp, 27\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResBrowser_SelectFolder}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResBrowser; SelectFolder}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResBrowser::SelectFolder}}{\f8\fs22  }
{\f8\fs32 int UIResBrowser::SelectFolder(int nFolder)}
{\f8\fs22 \par \par Select a folder in the resource browser by folder type (see also SelectFolder(LPCSTR)).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the line of the selected folder in the resource browser.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nFolder}
{\f8\fs22 : A value that contains the folder to select in the resource browser: ED_DIALOG, ED_MENU, ED_CURSOR, ED_ICON, ED_BITMAP, ED_STRING, ED_ACCEL, ED_VERSION, ED_BINARY.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uresbrws.cpp, 42\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResBrowser_SelectFolder}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResBrowser; SelectFolder}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResBrowser::SelectFolder}}{\f8\fs22  }
{\f8\fs32 int UIResBrowser::SelectFolder(LPCSTR szFolder)}
{\f8\fs22 \par \par Select a folder in the resource browser by name (see also SelectFolder(int)).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the line of the selected folder in the resource browser.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFolder}
{\f8\fs22 : A pointer to a string that contains the name of the folder to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uresbrws.cpp, 56\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResBrowser_OpenFolder}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResBrowser; OpenFolder}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResBrowser::OpenFolder}}{\f8\fs22  }
{\f8\fs32 int UIResBrowser::OpenFolder(int nOpen)}
{\f8\fs22 \par \par Open or close the selected folder in the resource editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer containing the number of items in the folder. Positive if the folder is opened; negative if the folder is closed.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nOpen}
{\f8\fs22 : A value that indicates the action to perform on the folder: CLOSE_FOLDER, OPEN_FOLDER, OPEN_FOLDER_ALL.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uresbrws.cpp, 83\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResBrowser_FindResource}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResBrowser; FindResource}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResBrowser::FindResource}}{\f8\fs22  }
{\f8\fs32 int UIResBrowser::FindResource(LPCSTR szId, int nFolder)}
{\f8\fs22 \par \par Select an item within a folder (by folder type) in the resource browser (see also FindResource (LPCSTR, LPCSTR)).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the line of the selected item in the resource browser.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szId}
{\f8\fs22 : A pointer to a string that contains the name of the item to select within the given folder.\par \par }
{\i\f8\fs22 nFolder}
{\f8\fs22 : A value that contains the folder to select in the resource browser: ED_DIALOG, ED_MENU, ED_CURSOR, ED_ICON, ED_BITMAP, ED_STRING, ED_ACCEL, ED_VERSION, ED_BINARY.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uresbrws.cpp, 107\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResBrowser_FindResource}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResBrowser; FindResource}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResBrowser::FindResource}}{\f8\fs22  }
{\f8\fs32 int UIResBrowser::FindResource(LPCSTR szId, LPCSTR szFolder /*=NULL*/)}
{\f8\fs22 \par \par Select an item within a folder (by folder name) in the resource browser (see also FindResource (LPCSTR, int)).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the line of the selected item in the resource browser.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szId}
{\f8\fs22 : A pointer to a string that contains the name of the item to select within the given folder.\par \par }
{\i\f8\fs22 szFolder}
{\f8\fs22 : A pointer to a string that contains the name of the folder to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uresbrws.cpp, 122\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResEditor_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResEditor; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResEditor::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIResEditor::IsValid(void) const}
{\f8\fs22 \par \par Determine whether the resource editor is valid by determining if the window is valid, visible, and the Resource Symbols menu item is enabled.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the window is valid: TRUE if it's valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uresedit.cpp, 26\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResEditor_IsValidType}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResEditor; IsValidType}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResEditor::IsValidType}}{\f8\fs22  }
{\f8\fs32 BOOL UIResEditor::IsValidType(LPCSTR szType) const}
{\f8\fs22 \par \par Determine whether the resource editor is the type specified.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the resource editor is the type specified. TRUE if it is; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szType}
{\f8\fs22 : A pointer to a string that contains the type of resource editor expected.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uresedit.cpp, 40\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResEditor_ExportResource}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResEditor; ExportResource}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResEditor::ExportResource}}{\f8\fs22  }
{\f8\fs32 BOOL UIResEditor::ExportResource(LPCSTR szFileName)}
{\f8\fs22 \par \par Export a resource.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the filename to export the resource to. This parameter usually contains a full path to the file.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uresedit.cpp, 62\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResTableEditor_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResTableEditor; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResTableEditor::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIResTableEditor::IsValid(void) const}
{\f8\fs22 \par \par Determine whether the resource table editor is valid by determining if the window is valid, visible, the Resource Symbols menu item is enabled, and the only child window is a list box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the window is valid: TRUE if it's valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 urestabl.cpp, 32\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResTableEditor_SelectLine}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResTableEditor; SelectLine}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResTableEditor::SelectLine}}{\f8\fs22  }
{\f8\fs32 BOOL UIResTableEditor::SelectLine(int line, BOOL bMulti /*=FALSE*/)}
{\f8\fs22 \par \par Select a line in the resource table editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : An integer that contains the 1-based line to select.\par \par }
{\i\f8\fs22 bMulti}
{\f8\fs22 : A Boolean value that indicates whether to select muliple lines (hold down the control key while selecting the line) (TRUE) or not. (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 urestabl.cpp, 66\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResTableEditor_GetCaption}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResTableEditor; GetCaption}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResTableEditor::GetCaption}}{\f8\fs22  }
{\f8\fs32 CString UIResTableEditor::GetCaption(int line /*=-1*/)}
{\f8\fs22 \par \par Get the caption of the resource table editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the caption of the resource table editor.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : An integer that contains the line to select in the resource editor. Why is this parameter here? -1 means don't select any line. (Default value is -1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 urestabl.cpp, 89\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResTableEditor_GetId}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResTableEditor; GetId}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResTableEditor::GetId}}{\f8\fs22  }
{\f8\fs32 CString UIResTableEditor::GetId(int line /*=-1*/)}
{\f8\fs22 \par \par Get the ID of the resource table editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the ID of the resource table editor.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : An integer that contains the line to select in the resource editor. Why is this parameter here? -1 means don't select any line. (Default value is -1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 urestabl.cpp, 102\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResTableEditor_GetCurLine}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResTableEditor; GetCurLine}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResTableEditor::GetCurLine}}{\f8\fs22  }
{\f8\fs32 int UIResTableEditor::GetCurLine(void)}
{\f8\fs22 \par \par Get the current line in the resource table editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the line currently selected in the table editor.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 urestabl.cpp, 114\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIResTableEditor_GetLineCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIResTableEditor; GetLineCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIResTableEditor::GetLineCount}}{\f8\fs22  }
{\f8\fs32 int UIResTableEditor::GetLineCount(void)}
{\f8\fs22 \par \par Get the number of lines in the resource table editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer containing the number of lines in the table editor.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 urestabl.cpp, 125\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIStrEdit_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIStrEdit; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIStrEdit::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIStrEdit::IsValid(void) const}
{\f8\fs22 \par \par Determine whether the string editor is valid by determining if the window is valid, visible, the Resource Symbols menu item is enabled, and the title is correct.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the window is valid: TRUE if it's valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ustredit.cpp, 31\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIStrEdit_AddString}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIStrEdit; AddString}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIStrEdit::AddString}}{\f8\fs22  }
{\f8\fs32 int UIStrEdit::AddString(LPCSTR szCaption, LPCSTR szId /*=NULL*/, BOOL bIdFirst /*=FALSE*/)}
{\f8\fs22 \par \par Add a string to the string editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the 1-based line number where the string was added.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szCaption}
{\f8\fs22 : A pointer to a string that contains the text of the string to add.\par \par }
{\i\f8\fs22 szId}
{\f8\fs22 : A pointer to a string that contains the name of the ID to assign to this string. NULL means use the default ID name. (Default value is NULL.)\par \par }
{\i\f8\fs22 bIdFirst}
{\f8\fs22 : A Boolean value that indicates whether to set the ID first (TRUE) or the text of the string first (FALSE). (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ustredit.cpp, 44\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIStrEdit_EditString}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIStrEdit; EditString}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIStrEdit::EditString}}{\f8\fs22  }
{\f8\fs32 void UIStrEdit::EditString(LPCSTR szCaption /*=NULL*/, LPCSTR szId /*=NULL*/)}
{\f8\fs22 \par \par Edit the selected string in the string editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szCaption}
{\f8\fs22 : A pointer to a string that contains the new text for the selected string. NULL means use the existing text. (Default value is NULL.)\par \par }
{\i\f8\fs22 szId}
{\f8\fs22 : A pointer to a string that contains the name of the new ID for the selected string. NULL means use the existing ID name. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ustredit.cpp, 73\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIStrEdit_FindString}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIStrEdit; FindString}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIStrEdit::FindString}}{\f8\fs22  }
{\f8\fs32 BOOL UIStrEdit::FindString(LPCSTR szCaption /*=NULL*/, LPCSTR szId /*=0*/)}
{\f8\fs22 \par \par Select a string in the string editor. This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szCaption}
{\f8\fs22 : A pointer to a string that contains the text of the string to select.\par \par }
{\i\f8\fs22 szId}
{\f8\fs22 : A pointer to a string that contains the name of the ID of the string to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ustredit.cpp, 90\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIStrEdit_GetString}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIStrEdit; GetString}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIStrEdit::GetString}}{\f8\fs22  }
{\f8\fs32 CString UIStrEdit::GetString(int line /*=-1*/)}
{\f8\fs22 \par \par Get the text of the string at the given line in the string editor.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the text of the string.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : An integer that contains the 1-based line to retrieve the text for.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ustredit.cpp, 102\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISymbolBrowser_CountSymbols}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISymbolBrowser; CountSymbols}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISymbolBrowser::CountSymbols}}{\f8\fs22  }
{\f8\fs32 int UISymbolBrowser::CountSymbols(BOOL bReadOnly)}
{\f8\fs22 \par \par Get the number of symbols displayed in the symbol browser dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the number symbols displayed in the symbol browser dialog.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bReadOnly}
{\f8\fs22 : A Boolean value that indicates whether to include read only symbols (TRUE) in the count or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 usymdlg.cpp, 30\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIVerEdit_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIVerEdit; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIVerEdit::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIVerEdit::IsValid(void) const}
{\f8\fs22 \par \par Determine whether the version editor is valid by determining if the window is valid, visible, the Resource Symbols menu item is enabled, and the title is correct.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the window is valid: TRUE if it's valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uveredit.cpp, 24\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SelectDependenciesGroup}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SelectDependenciesGroup}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SelectDependenciesGroup}}{\f8\fs22  }
{\f8\fs32 int COProject::SelectDependenciesGroup(CString Group /* = ""*/)}
{\f8\fs22 \par \par Select the dependencies folder for a particular group in the project window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Group}
{\f8\fs22 : A CString that contains the name of the group to select the dependencies folder for. An empty string means use the current group.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 129\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SelectDependentFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SelectDependentFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SelectDependentFile}}{\f8\fs22  }
{\f8\fs32 int COProject::SelectDependentFile(CString File,CString Group /* = ""*/)}
{\f8\fs22 \par \par Select a file in the dependencies folder for a particular group in the project window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 File}
{\f8\fs22 : A CString that contains the name of the file to select.\par \par }
{\i\f8\fs22 Group}
{\f8\fs22 : A CString that contains the name of the group that contains the dependencies folder. An empty string means use the current group.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 165\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_NewGroup}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; NewGroup}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::NewGroup}}{\f8\fs22  }
{\f8\fs32 int COProject::NewGroup(CString Name)}
{\f8\fs22 \par \par Add a new group to the current project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name of the new group.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 195\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_ActivateProjWnd}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; ActivateProjWnd}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::ActivateProjWnd}}{\f8\fs22  }
{\f8\fs32 BOOL COProject::ActivateProjWnd()}
{\f8\fs22 \par \par Activate the project window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 UIMainFrame::DoCommand()\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 219\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_UpdateDependencies}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; UpdateDependencies}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::UpdateDependencies}}{\f8\fs22  }
{\f8\fs32 int COProject::UpdateDependencies(int intWhichConfigs)}
{\f8\fs22 \par \par Update all dependencies for one or more configurations.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 intWhichConfigs}
{\f8\fs22 : an int value that indicates whether to update dependencies for the currently selected configuration (CURRENT_CONFIG) or all configurations (ALL_CONFIGS).\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 289\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_UpdateDependencies}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; UpdateDependencies}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::UpdateDependencies}}{\f8\fs22  }
{\f8\fs32 int COProject::UpdateDependencies(ConfigStr &csConfig)}
{\f8\fs22 \par \par Update all dependencies for a configuration.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 csConfig}
{\f8\fs22 : a ConfigStr reference that indicates the configuration to update.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 346\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_UpdateDependencies}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; UpdateDependencies}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::UpdateDependencies}}{\f8\fs22  }
{\f8\fs32 int COProject::UpdateDependencies(ConfigStrArray &csArrayConfigs)}
{\f8\fs22 \par \par Update all dependencies for one or more configurations.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 csArrayConfigs}
{\f8\fs22 : a ConfigStrArray reference specifying which configurations to update dependencies for.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 401\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::Close}}{\f8\fs22  }
{\f8\fs32 int COProject::Close(int iSave)}
{\f8\fs22 \par \par Close the project and project window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iSave}
{\f8\fs22 : A Boolean value that indicates whether to save the project before closing (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 460\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_GetErrorCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; GetErrorCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::GetErrorCount}}{\f8\fs22  }
{\f8\fs32 int COProject::GetErrorCount()}
{\f8\fs22 \par \par Get the number of errors reported by the last build of the project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer containing the number of errors.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 509\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_GetWarningCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; GetWarningCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::GetWarningCount}}{\f8\fs22  }
{\f8\fs32 int COProject::GetWarningCount()}
{\f8\fs22 \par \par Get the number of warning reported by the last build of the project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer containing the number of warnings.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 522\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_VerifyBuild}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; VerifyBuild}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::VerifyBuild}}{\f8\fs22  }
{\f8\fs32 int COProject::VerifyBuild(BOOL LogErrors, int * iErr, int * iWarn,  BOOL WrnsAsErrs /*= FALSE*/)}
{\f8\fs22 \par \par Determine whether the last build of the project was successful or not. An unsuccessful build contains errors (or warnings treated as errors).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 LogErrors}
{\f8\fs22 : A Boolean value that indicates whether to record the results of the last build in the log (TRUE) or not.\par \par }
{\i\f8\fs22 iErr}
{\f8\fs22 : A pointer to an integer that will contain the number of errors reported by the last build.\par \par }
{\i\f8\fs22 iWarn}
{\f8\fs22 : A pointer to an integer that will contain the number of warnings reported by the last build.\par \par }
{\i\f8\fs22 WrnsAsErrs}
{\f8\fs22 : A Boolean value that indicates whether to treat warnings as errors (TRUE) or not. (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 540\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_WaitUntilBuildDone}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; WaitUntilBuildDone}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::WaitUntilBuildDone}}{\f8\fs22  }
{\f8\fs32 int COProject::WaitUntilBuildDone(int Min,DWORD dwSleep=1000)}
{\f8\fs22 \par \par Wait until the current build is finished or the amount of time specified has elasped. \par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if the build completes within the time specified; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Min}
{\f8\fs22 : An integer that contains the number of minutes to wait for the build to complete.\par \par }
{\i\f8\fs22 dwSleep}
{\f8\fs22 : An DWORD that contains the number of milliseconds to wait between checks to see if build is done\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 598\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_New}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; New}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::New}}{\f8\fs22  }
{\f8\fs32 int COProject::New(PROJOPTIONS &ProjOpts)}
{\f8\fs22 \par \par Create a new project and project window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ProjOpts}
{\f8\fs22 : A PROJOPTIONS structure that defines the project. szName is a pointer to a string that contains the name of the project. szDir is a pointer to a string that contains the directory for the project. iType is a value that indicates the type of project: UIAW_PT_APPWIZ, UIAW_PT_APPWIZ_DLL, UIAW_PT_APP, UIAW_PT_DLL, UIAW_PT_CONSOLE, UIAW_PT_STATIC_LIBRARY, UIAW_PT_DUMMY_EXEC, UIAW_PT_DUMMY_DLL. szNewSubDir is a pointer to a string that contains the new subdirectory for the project. ProjFileOp\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 623\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_New}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; New}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::New}}{\f8\fs22  }
{\f8\fs32 int COProject::New(LPCSTR szProjName, int ProjType, LPCSTR szDir /* NULL */, LPCSTR szNewSubDir /* NULL */, int ProjFileOpt /* 0 */, LPCSTR szProjFilesPath /* NULL */, LPCSTR szRemotePath /* NULL */, LPCSTR szRemoteFile /* NULL */)}
{\f8\fs22 \par \par Create a new project and project window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szProjName}
{\f8\fs22 : A pointer to a string that contains the name of the project.\par \par }
{\i\f8\fs22 ProjType}
{\f8\fs22 : is a value that indicates the type of project: UIAW_PT_APPWIZ, UIAW_PT_APPWIZ_DLL, UIAW_PT_APP, UIAW_PT_DLL, UIAW_PT_CONSOLE, UIAW_PT_STATIC_LIBRARY, UIAW_PT_DUMMY_EXEC, UIAW_PT_DUMMY_DLL.\par \par }
{\i\f8\fs22 szDir}
{\f8\fs22 : A pointer to a string that contains the directory for the project. (Default value is NULL.)\par \par }
{\i\f8\fs22 szNewSubDir}
{\f8\fs22 : A pointer to a string that contains the new subdirectory for the project.  This subdirectory will be based off szDir, so it cannot contain root, UNC, or drive specifiers. (Default value is NULL.)\par \par }
{\i\f8\fs22 ProjFileOpt}
{\f8\fs22 : A value that indicates which files to add: ADD_ALL_SOURCE, ADD_ALL_HEADERS, ADD_ALL_RES_SCRIPTS, ADD_ALL_DEF_FILES, ADD_ALL_ODL_FILES, ADD_ALL_LIBS, ADD_ALL_OBJ_FILES, ADD_ALL_FILES, ADD_FILE, ADD_FILES_MYSELF. (Default value is 0.)\par \par }
{\i\f8\fs22 szProjFilesPath}
{\f8\fs22 : A pointer to a string containing the path that contains the project files to be added. (Default value is NULL.)\par \par }
{\i\f8\fs22 szRemotePath}
{\f8\fs22 : A pointer to a string that contains the remote executable path for this project. (Default value is NULL.)\par \par }
{\i\f8\fs22 szRemoteFile}
{\f8\fs22 : A pointer to a string that contains the remote executable filename for this project. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 688\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_BuildNew}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; BuildNew}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::BuildNew}}{\f8\fs22  }
{\f8\fs32 int COProject::BuildNew(LPCSTR szProjName, PROJTYPE ProjType, LPCSTR szDir /* NULL */, LPCSTR szNewSubDir /* NULL */, int ProjFileOpt /* 0 */, LPCSTR szProjFilesPath /* NULL */, LPCSTR szRemotePath /* NULL */, LPCSTR szRemoteFile /* NULL */)}
{\f8\fs22 \par \par Create a new project and build it.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szProjName}
{\f8\fs22 : A pointer to a string that contains the name of the project.\par \par }
{\i\f8\fs22 ProjType}
{\f8\fs22 : is a value that indicates the type of project: UIAW_PT_APPWIZ, UIAW_PT_APPWIZ_DLL, UIAW_PT_APP, UIAW_PT_DLL, UIAW_PT_CONSOLE, UIAW_PT_STATIC_LIBRARY, UIAW_PT_DUMMY_EXEC, UIAW_PT_DUMMY_DLL.\par \par }
{\i\f8\fs22 szDir}
{\f8\fs22 : A pointer to a string that contains the directory for the project. (Default value is NULL.)\par \par }
{\i\f8\fs22 szNewSubDir}
{\f8\fs22 : A pointer to a string that contains the new subdirectory for the project. (Default value is NULL.)\par \par }
{\i\f8\fs22 ProjFileOpt}
{\f8\fs22 : A value that indicates which files to add: ADD_ALL_SOURCE, ADD_ALL_HEADERS, ADD_ALL_RES_SCRIPTS, ADD_ALL_DEF_FILES, ADD_ALL_ODL_FILES, ADD_ALL_LIBS, ADD_ALL_OBJ_FILES, ADD_ALL_FILES, ADD_FILE, ADD_FILES_MYSELF. (Default value is 0.)\par \par }
{\i\f8\fs22 szProjFilesPath}
{\f8\fs22 : A pointer to a string containing the path that contains the project files to be added. (Default value is NULL.)\par \par }
{\i\f8\fs22 szRemotePath}
{\f8\fs22 : A pointer to a string that contains the remote executable path for this project. (Default value is NULL.)\par \par }
{\i\f8\fs22 szRemoteFile}
{\f8\fs22 : A pointer to a string that contains the remote executable filename for this project. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 749\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_NewProject}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; NewProject}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::NewProject}}{\f8\fs22  }
{\f8\fs32 int COProject::NewProject(PROJTYPE ptProjType, LPCSTR szProjName, int intPlatforms, LPCSTR szLocation)}
{\f8\fs22 \par \par Create a new project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szProjType}
{\f8\fs22 : A PROJTYPE value that indicates the type of project to create.\par \par }
{\i\f8\fs22 szProjName}
{\f8\fs22 : A pointer to a string that contains the name of the project.\par \par }
{\i\f8\fs22 intPlatforms}
{\f8\fs22 : A combination of PLATFORM_TYPE values that indicates the platforms the project will target.\par \par }
{\i\f8\fs22 szProjLocation}
{\f8\fs22 : A pointer to a string that contains the location for the project.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 785\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_InsertProject}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; InsertProject}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::InsertProject}}{\f8\fs22  }
{\f8\fs32 int COProject::InsertProject(PROJTYPE ptProjType, LPCSTR szProjName, int intPlatforms, PROJ_HIERARCHY phProjHier = TOP_LEVEL_PROJ, LPCSTR szTopLevelProj = NULL)}
{\f8\fs22 \par \par Inserts a new project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szProjType}
{\f8\fs22 : A PROJTYPE value that indicates the type of project to create.\par \par }
{\i\f8\fs22 szProjName}
{\f8\fs22 : A pointer to a string that contains the name of the project.\par \par }
{\i\f8\fs22 intPlatforms}
{\f8\fs22 : A combination of PLATFORM_TYPE values that indicates the platforms the project will target.\par \par }
{\i\f8\fs22 phProjHier}
{\f8\fs22 : A PROJECT_HIERARCHY value indicating a top-levl or subproject. The default is TOP_LEVEL_PROJ.\par \par }
{\i\f8\fs22 szTopLevelProj}
{\f8\fs22 : A pointer to a string that contains the name of the top-level project under which the new subproject is to be inserted.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 833\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_NewAppWiz}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; NewAppWiz}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::NewAppWiz}}{\f8\fs22  }
{\f8\fs32 int COProject::NewAppWiz(LPCSTR projname, LPCSTR projdir, int platform, const APPWIZ_OPTIONS* pOptions)}
{\f8\fs22 \par \par Create a new AppWizard project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 projname}
{\f8\fs22 : A pointer to a string that contains the name of the AppWizard project.\par \par }
{\i\f8\fs22 projdir}
{\f8\fs22 : A pointer to a string that contains the path for the AppWizard project.\par \par }
{\i\f8\fs22 platform}
{\f8\fs22 : A value that indicates the platform to create the AppWizard project for: PLATFORM_WIN32_X86, PLATFORM_WIN32S_X86, PLATFORM_MAC_68K, PLATFORM_MAC_PPC, PLATFORM_WIN32_MIPS, PLATFORM_WIN32_ALPHA, PLATFORM_WIN32_PPC, PLATFORM_CURRENT, PLATFORM_USER, PLATFORM_NON_USER.\par \par }
{\i\f8\fs22 pOptions}
{\f8\fs22 : A structure containing appwizard options.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 950\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_Open}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; Open}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::Open}}{\f8\fs22  }
{\f8\fs32 int COProject::Open(LPCSTR szProjName, int iMethod, BOOL LogWarning /* = TRUE */)}
{\f8\fs22 \par \par Open a project and the project window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szProjName}
{\f8\fs22 : A pointer to a string containing the filename of the project to open. This is usually a full path to the project file.\par \par }
{\i\f8\fs22 iMethod}
{\f8\fs22 : Unused.\par \par }
{\i\f8\fs22 LogWarning}
{\f8\fs22 : A Boolean value that indicates whether to log any warnings that occur when opening a project (TRUE) or not. (Default value is TRUE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1027\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_Save}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; Save}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::Save}}{\f8\fs22  }
{\f8\fs32 int COProject::Save(int wait == FALSE, LPCSTR file = NULL)}
{\f8\fs22 \par \par Save the project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 wait}
{\f8\fs22 : A Boolean value that indicates whether to wait for the file to be completely written before returning (TRUE) or not. (Default value is FALSE.)\par \par }
{\i\f8\fs22 file}
{\f8\fs22 : A pointer to a string that contains the name of the project file. This parameter is only required if wait is set to TRUE. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1223\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_AddFiles}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; AddFiles}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::AddFiles}}{\f8\fs22  }
{\f8\fs32 int COProject::AddFiles(LPCSTR szFileName, LPCSTR szGrpName)}
{\f8\fs22 \par \par Add the files given by the filespec in szFileName to the specified group in the project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the filespec describing the files to add. Wildcards (* and ?) are permitted.\par \par }
{\i\f8\fs22 szGrpName}
{\f8\fs22 : A pointer to a string that contains the name of the group to add the files to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1269\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_RemoveFiles}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; RemoveFiles}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::RemoveFiles}}{\f8\fs22  }
{\f8\fs32 int COProject::RemoveFiles(LPCSTR szFileNames, LPCSTR szGrpName )}
{\f8\fs22 \par \par Remove the files named in szFileNames from the specified group in the project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFileNames}
{\f8\fs22 : A pointer to a string that contains the list of files (separated by semicolons (;)) to remove from the group.\par \par }
{\i\f8\fs22 szGrpName}
{\f8\fs22 : A pointer to a string that contains the name of the group.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1347\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_RemoveAll}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; RemoveAll}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::RemoveAll}}{\f8\fs22  }
{\f8\fs32 int COProject::RemoveAll(LPCSTR szGrpName)}
{\f8\fs22 \par \par Remove all files from the specified group in the project. This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szGrpName}
{\f8\fs22 : A pointer to a string that contains the name of the group.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1421\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_DeleteMakeFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; DeleteMakeFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::DeleteMakeFile}}{\f8\fs22  }
{\f8\fs32 int COProject::DeleteMakeFile()}
{\f8\fs22 \par \par Delete the makefile associated with the project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1438\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_DeleteFromProjectDir}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; DeleteFromProjectDir}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::DeleteFromProjectDir}}{\f8\fs22  }
{\f8\fs32 int COProject::DeleteFromProjectDir(LPCSTR strDelTarget)}
{\f8\fs22 \par \par Delete all files in the project directory.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 strDelTarget}
{\f8\fs22 : A pointer to a string that contains a relative path to append to the project directory, or a full path if there is no project open. This parameter can be NULL.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1451\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_RemoveIntermediateDir}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; RemoveIntermediateDir}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::RemoveIntermediateDir}}{\f8\fs22  }
{\f8\fs32 int COProject::RemoveIntermediateDir()}
{\f8\fs22 \par \par Delete the directory that contains the intermediate files generated by building the project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1474\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_RemoveTargetDir}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; RemoveTargetDir}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::RemoveTargetDir}}{\f8\fs22  }
{\f8\fs32 int COProject::RemoveTargetDir()}
{\f8\fs22 \par \par Delete the directory that contains the target files generated by building the project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1486\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_AddTarget}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; AddTarget}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::AddTarget}}{\f8\fs22  }
{\f8\fs32 int COProject::AddTarget(LPCSTR Name, int Type , BOOL Debug/* =FALSE*/)}
{\f8\fs22 \par \par Add a new target to the project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A pointer to a string that contains the name of the new target.\par \par }
{\i\f8\fs22 Type}
{\f8\fs22 : A value that indicates the type of target to add: TARGET_WIN32_X86_DEBUG, TARGET_WIN32_X86_RELEASE, TARGET_MAC_68K_DEBUG, TARGET_MAC_68K_RELEASE, TARGET_MAC_PPC_DEBUG, TARGET_MAC_PPC_RELEASE, TARGET_USER, TARGET_CURRENT.\par \par }
{\i\f8\fs22 Debug}
{\f8\fs22 : A Boolean value that indicates whether to make this target debug (TRUE) or not. (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1502\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_AddTarget}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; AddTarget}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::AddTarget}}{\f8\fs22  }
{\f8\fs32 int COProject::AddTarget(LPCSTR Name, LPCSTR CopyFrom)}
{\f8\fs22 \par \par Add a new target to the project by deriving from an existing target.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A pointer to a string that contains the name of the new target.\par \par }
{\i\f8\fs22 CopyFrom}
{\f8\fs22 : A pointer to a string that contains the name of the target to derive this target from.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1526\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetTarget}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetTarget}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetTarget}}{\f8\fs22  }
{\f8\fs32 int COProject::SetTarget(LPCSTR Target)}
{\f8\fs22 \par \par Select one of the targets for this project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Target}
{\f8\fs22 : A pointer to a string that contains the name of the target to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1550\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_DeleteTarget}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; DeleteTarget}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::DeleteTarget}}{\f8\fs22  }
{\f8\fs32 int COProject::DeleteTarget(LPCSTR Target)}
{\f8\fs22 \par \par Delete one of the targets for this project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Target}
{\f8\fs22 : A pointer to a string that contains the name of the target to delete.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1598\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_RenameTarget}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; RenameTarget}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::RenameTarget}}{\f8\fs22  }
{\f8\fs32 int COProject::RenameTarget(LPCSTR OldName, LPCSTR NewName)}
{\f8\fs22 \par \par Change the name of one of the targets in this project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 OldName}
{\f8\fs22 : A pointer to a string that contains the name of the target to change.\par \par }
{\i\f8\fs22 NewName}
{\f8\fs22 : A pointer to a string that contains the new name for the target.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1621\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_GetTarget}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; GetTarget}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::GetTarget}}{\f8\fs22  }
{\f8\fs32 LPCSTR COProject::GetTarget(int Target /* = 0 Active target */)}
{\f8\fs22 \par \par Get the name of the either the active target or the specified target.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a string that contains the name of the target specified.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Target}
{\f8\fs22 : An integer that contains a 1-based index into the list of targets. 0 will retrieve the name of the current target. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1644\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_Execute}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; Execute}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::Execute}}{\f8\fs22  }
{\f8\fs32 COProject::Execute(int iRebuild)}
{\f8\fs22 \par \par Execute the current project. This function does not execute the project under the debugger.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iRebuild}
{\f8\fs22 : An Boolean value that indicates whether to rebuild the project before executing, if asked (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1668\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_Build}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; Build}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::Build}}{\f8\fs22  }
{\f8\fs32 int COProject::Build(int iWait, DWORD interval /*1000*/)}
{\f8\fs22 \par \par Build the current target in this project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iWait}
{\f8\fs22 : An integer that contains the amount of time in minutes to wait for the build to complete.\par \par }
{\i\f8\fs22 interval}
{\f8\fs22 : An DWORD that contains the amount of time in milliseconds to wait between checks for build completion\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1707\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_RebuildAll}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; RebuildAll}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::RebuildAll}}{\f8\fs22  }
{\f8\fs32 int COProject::RebuildAll(int iWait,DWORD interval /*1000*/)}
{\f8\fs22 \par \par Perform a complete rebuild of the current target in this project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iWait}
{\f8\fs22 : An integer that contains the amount of time in minutes to wait for the build to complete.\par \par }
{\i\f8\fs22 interval}
{\f8\fs22 : An DWORD that contains the amount of time in milliseconds to wait between checks for build completion\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1725\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_StopBuild}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; StopBuild}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::StopBuild}}{\f8\fs22  }
{\f8\fs32 int COProject::StopBuild()}
{\f8\fs22 \par \par Stop the current build.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1740\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_GetProjectItemProp}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; GetProjectItemProp}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::GetProjectItemProp}}{\f8\fs22  }
{\f8\fs32 CString COProject::GetProjectItemProp(int P_PropID)}
{\f8\fs22 \par \par Get the name of the item indicated by P_PropID.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the name of the item.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 P_PropID}
{\f8\fs22 : An integer that contains the ID of the item.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1756\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SelectFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SelectFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SelectFile}}{\f8\fs22  }
{\f8\fs32 int COProject::SelectFile(LPCSTR szFile, LPCSTR szGrp)}
{\f8\fs22 \par \par Select a file in the project window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFile}
{\f8\fs22 : A pointer to a string that contains the name of the file to select.\par \par }
{\i\f8\fs22 szGrp}
{\f8\fs22 : A pointer to a string that contains the name of the group that contains the file. The value can be an empty string, if the group is not known.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1788\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SelectGroup}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SelectGroup}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SelectGroup}}{\f8\fs22  }
{\f8\fs32 int COProject::SelectGroup(LPCSTR szGrpName)}
{\f8\fs22 \par \par Select a group in the project window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szGrpName}
{\f8\fs22 : A pointer to a string that contains the name of the group to select in the project window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1855\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetProjProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetProjProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetProjProperty}}{\f8\fs22  }
{\f8\fs32 int COProject::SetProjProperty(PROJ_PROP_CATEGORIES iCategory,UINT iCtrlId, UINT iNewValue )}
{\f8\fs22 \par \par Set a value-based property of the project. (See SetProjProperty(PROJ_PROP_CATEGORIES, UINT, LPCSTR) to set text-based properties.) This function will set project properties such as general, debugger, compiler, linker, resource, and browser.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : A value that indicates the category of the property: CT_GENERAL, CT_EXT_DBGOPTS, CT_MAKE_TYPE_LIB, CT_COMPILER, CT_RESOURCE, CT_BROWSER, CT_LINKER.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that modifies the property.\par \par }
{\i\f8\fs22 iNewValue}
{\f8\fs22 : An integer that contains the new value of the property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1895\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetProjProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetProjProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetProjProperty}}{\f8\fs22  }
{\f8\fs32 int COProject::SetProjProperty(PROJ_PROP_CATEGORIES iCategory,UINT iCtrlId, LPCSTR szNewValue )}
{\f8\fs22 \par \par Set a text-based property of the project. (See SetProjProperty(PROJ_PROP_CATEGORIES, UINT, UINT) to set value-based properties.) This function will set project properties such as general, debugger, compiler, linker, resource, and browser.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : A value that indicates the category of the property: CT_GENERAL, CT_EXT_DBGOPTS, CT_MAKE_TYPE_LIB, CT_COMPILER, CT_RESOURCE, CT_BROWSER, CT_LINKER.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that modifies the property.\par \par }
{\i\f8\fs22 szNewValue}
{\f8\fs22 : An pointer to a string that contains the new value of the property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1936\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_GetProjProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; GetProjProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::GetProjProperty}}{\f8\fs22  }
{\f8\fs32 int COProject::GetProjProperty(PROJ_PROP_CATEGORIES iCategory,UINT iCtrlId,CString szValue)}
{\f8\fs22 \par \par Get the value of a property of this project. (See GetProjProperty(PROJ_PROP_CATEGORIES, UINT) to get text-based properties.) This function will get project properties such as general, debugger, compiler, linker, resource, and browser. This function in NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : A value that indicates the category of the property: CT_GENERAL, CT_EXT_DBGOPTS, CT_MAKE_TYPE_LIB, CT_COMPILER, CT_RESOURCE, CT_BROWSER, CT_LINKER.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that identifies the property.\par \par }
{\i\f8\fs22 szNewValue}
{\f8\fs22 : A CString that adds no value that I can see.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1976\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_GetProjProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; GetProjProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::GetProjProperty}}{\f8\fs22  }
{\f8\fs32 CString COProject::GetProjProperty(PROJ_PROP_CATEGORIES iCategory,UINT iCtrlId)}
{\f8\fs22 \par \par Get the text value of a property of this project. (See GetProjProperty(PROJ_PROP_CATEGORIES, UINT, CString) to get value-based properties.) This function will get project properties such as general, debugger, compiler, linker, resource, and browser. This function in NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : A value that indicates the category of the property: CT_GENERAL, CT_EXT_DBGOPTS, CT_MAKE_TYPE_LIB, CT_COMPILER, CT_RESOURCE, CT_BROWSER, CT_LINKER.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that identifies the property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 1992\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_GetGroupProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; GetGroupProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::GetGroupProperty}}{\f8\fs22  }
{\f8\fs32 int COProject::GetGroupProperty(PROJ_PROP_CATEGORIES iCategory,LPCSTR szGrpName, UINT iCtrlId)}
{\f8\fs22 \par \par Get the value of a property for the given group. (See GetGroupProperty(PROJ_PROP_CATEGORIES, LPCSTR, UINT, CString) to get text-based properties.) This function in NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : A value that indicates the category of the property: CT_GENERAL, CT_EXT_DBGOPTS, CT_MAKE_TYPE_LIB, CT_COMPILER, CT_RESOURCE, CT_BROWSER, CT_LINKER.\par \par }
{\i\f8\fs22 szGrpName}
{\f8\fs22 : A pointer to a string that contains the name of the group to get properties for.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that identifies the property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2011\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_GetGroupProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; GetGroupProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::GetGroupProperty}}{\f8\fs22  }
{\f8\fs32 CString COProject::GetGroupProperty(PROJ_PROP_CATEGORIES  iCategory,LPCSTR szGrpName ,UINT iCtrlId,CString szValue)}
{\f8\fs22 \par \par Get the text value of a property for the given group. (See GetGroupProperty(PROJ_PROP_CATEGORIES, LPCSTR, UINT) to get value-based properties.) This function in NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : A value that indicates the category of the property: CT_GENERAL, CT_EXT_DBGOPTS, CT_MAKE_TYPE_LIB, CT_COMPILER, CT_RESOURCE, CT_BROWSER, CT_LINKER.\par \par }
{\i\f8\fs22 szGrpName}
{\f8\fs22 : A pointer to a string that contains the name of the group to get properties for.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that identifies the property.\par \par }
{\i\f8\fs22 szValue}
{\f8\fs22 : A CString that contains the value of the property for the group.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2029\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetGroupProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetGroupProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetGroupProperty}}{\f8\fs22  }
{\f8\fs32 int COProject::SetGroupProperty(PROJ_PROP_CATEGORIES  iCategory,LPCSTR szGrpName ,UINT iCtrlId, UINT iNewValue )}
{\f8\fs22 \par \par Set the value of a property for the given group. (See SetGroupProperty(PROJ_PROP_CATEGORIES, LPCSTR, UINT, LPCSTR) to set text-based properties.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : A value that indicates the category of the property: CT_GENERAL, CT_EXT_DBGOPTS, CT_MAKE_TYPE_LIB, CT_COMPILER, CT_RESOURCE, CT_BROWSER, CT_LINKER.\par \par }
{\i\f8\fs22 szGrpName}
{\f8\fs22 : A pointer to a string that contains the name of the group to get properties for.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that identifies the property.\par \par }
{\i\f8\fs22 iNewValue}
{\f8\fs22 : An integer that contains the new value for the property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2047\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetGroupProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetGroupProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetGroupProperty}}{\f8\fs22  }
{\f8\fs32 int COProject::SetGroupProperty(PROJ_PROP_CATEGORIES  iCategory,LPCSTR szGrpName ,UINT iCtrlId, LPCSTR szNewValue )}
{\f8\fs22 \par \par Set the text value of a property for the given group. (See SetGroupProperty(PROJ_PROP_CATEGORIES, LPCSTR, UINT, UINT) to set value-based properties.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : A value that indicates the category of the property: CT_GENERAL, CT_EXT_DBGOPTS, CT_MAKE_TYPE_LIB, CT_COMPILER, CT_RESOURCE, CT_BROWSER, CT_LINKER.\par \par }
{\i\f8\fs22 szGrpName}
{\f8\fs22 : A pointer to a string that contains the name of the group to get properties for.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that identifies the property.\par \par }
{\i\f8\fs22 szNewValue}
{\f8\fs22 : A pointer to a string that contains the text value for the property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2074\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_GetFileProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; GetFileProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::GetFileProperty}}{\f8\fs22  }
{\f8\fs32 int COProject::GetFileProperty(PROJ_PROP_CATEGORIES iCategory,LPCSTR szGrpName ,LPCSTR szFileName,UINT iCtrlId)}
{\f8\fs22 \par \par Get the value of a property for the given file. (See GetFileProperty(PROJ_PROP_CATEGORIES, LPCSTR, LPCSTR, UINT, CString) to get text-based properties.) This function in NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : A value that indicates the category of the property: CT_GENERAL, CT_EXT_DBGOPTS, CT_MAKE_TYPE_LIB, CT_COMPILER, CT_RESOURCE, CT_BROWSER, CT_LINKER.\par \par }
{\i\f8\fs22 szGrpName}
{\f8\fs22 : A pointer to a string that contains the name of the group that contains the file.\par \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the file to get properties for.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that identifies the property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2102\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_GetFileProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; GetFileProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::GetFileProperty}}{\f8\fs22  }
{\f8\fs32 CString COProject::GetFileProperty(PROJ_PROP_CATEGORIES iCategory,LPCSTR szGrpName ,LPCSTR szFileName,UINT iCtrlId,CString szValue)}
{\f8\fs22 \par \par Get the text value of a property for the given file. (See GetFileProperty(PROJ_PROP_CATEGORIES, LPCSTR, LPCSTR, UINT) to get value-based properties.) This function in NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : A value that indicates the category of the property: CT_GENERAL, CT_EXT_DBGOPTS, CT_MAKE_TYPE_LIB, CT_COMPILER, CT_RESOURCE, CT_BROWSER, CT_LINKER.\par \par }
{\i\f8\fs22 szGrpName}
{\f8\fs22 : A pointer to a string that contains the name of the group that contains the file.\par \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the file to get properties for.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that identifies the property.\par \par }
{\i\f8\fs22 szValue}
{\f8\fs22 : A CString that contains the text value of the property for the given file.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2121\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetFileProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetFileProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetFileProperty}}{\f8\fs22  }
{\f8\fs32 int COProject::SetFileProperty(PROJ_PROP_CATEGORIES iCategory,LPCSTR szGrpName, LPCSTR szFileName ,UINT iCtrlId, UINT iNewValue )}
{\f8\fs22 \par \par Set the value of a property for the given file. (See SetFileProperty(PROJ_PROP_CATEGORIES, LPCSTR, LPCSTR, UINT, LPCSTR) to set text-based properties.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : A value that indicates the category of the property: CT_GENERAL, CT_EXT_DBGOPTS, CT_MAKE_TYPE_LIB, CT_COMPILER, CT_RESOURCE, CT_BROWSER, CT_LINKER.\par \par }
{\i\f8\fs22 szGrpName}
{\f8\fs22 : A pointer to a string that contains the name of the group that contains the file.\par \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the file to set properties for.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that identifies the property.\par \par }
{\i\f8\fs22 iNewValue}
{\f8\fs22 : An integer that contains the new value for the property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2140\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetFileProperty}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetFileProperty}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetFileProperty}}{\f8\fs22  }
{\f8\fs32 int COProject::SetFileProperty(PROJ_PROP_CATEGORIES iCategory,LPCSTR szGrpName, LPCSTR szFileName ,UINT iCtrlId, LPCSTR szNewValue )}
{\f8\fs22 \par \par Set the value of a property for the given file. (See SetFileProperty(PROJ_PROP_CATEGORIES, LPCSTR, LPCSTR, UINT, UINT) to set value-based properties.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : A value that indicates the category of the property: CT_GENERAL, CT_EXT_DBGOPTS, CT_MAKE_TYPE_LIB, CT_COMPILER, CT_RESOURCE, CT_BROWSER, CT_LINKER.\par \par }
{\i\f8\fs22 szGrpName}
{\f8\fs22 : A pointer to a string that contains the name of the group that contains the file.\par \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the file to set properties for.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that identifies the property.\par \par }
{\i\f8\fs22 szNewValue}
{\f8\fs22 : A pointer to a string that contains the text value for the property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2168\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetOption}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetOption}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetOption}}{\f8\fs22  }
{\f8\fs32 int COProject::SetOption(INT iCategory,UINT iCtrlId, LPCSTR szNewValue)}
{\f8\fs22 \par \par Set the text value of the project option specified by iCtrlId in the given category (iCategory). (See SetOption(UINT, UINT, UINT) to set value-based options.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : An integer that contains the project category that contains the option to set. This is the ID of a control on the property page in the project options dialog.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that identifies the option to set.\par \par }
{\i\f8\fs22 szNewValue}
{\f8\fs22 : A pointer to a string that contains the value to set the option to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2194\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetOption}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetOption}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetOption}}{\f8\fs22  }
{\f8\fs32 INT COProject::SetOption(INT iCategory, UINT iCtrlId, UINT iNewValue)}
{\f8\fs22 \par \par Set the value of the project option specified by iCtrlId in the given category (iCategory). (See SetOption(UINT, UINT, LPCSTR) to set text-based options.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCategory}
{\f8\fs22 : An integer that contains the project category that contains the option to set. This is the ID of a control on the property page in the project options dialog.\par \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control that identifies the option to set.\par \par }
{\i\f8\fs22 iNewValue}
{\f8\fs22 : An integer that contains the value to set the option to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2316\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_MakeProjectExternal}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; MakeProjectExternal}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::MakeProjectExternal}}{\f8\fs22  }
{\f8\fs32 int COProject::MakeProjectExternal(LPCSTR sName/* =NULL*/)}
{\f8\fs22 \par \par Make the project an external project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 LPCSTR}
{\f8\fs22 : A pointer to a string that contains the new name of the project, if desired. NULL means don't rename the project. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2476\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetPlatform}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetPlatform}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetPlatform}}{\f8\fs22  }
{\f8\fs32 int COProject::SetPlatform(PLATFORM_TYPE platform)}
{\f8\fs22 \par \par Set the current platform for the project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 platform}
{\f8\fs22 : A value that specifies the platform: PLATFORM_WIN32_X86, PLATFORM_WIN32S_X86, PLATFORM_WIN32_MIPS, PLATFORM_MAC_68K, PLATFORM_MAC_PPC.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2524\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetRemotePath}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetRemotePath}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetRemotePath}}{\f8\fs22  }
{\f8\fs32 int COProject::SetRemotePath(LPCSTR remote_file, TARGET_TYPE target /*= TARGET_CURRENT*/, SRT_OPT srt_opt /*= PREPEND_REMOTE_PATH*/, PLATFORM_TYPE platform /*= PLATFORM_USER*/)}
{\f8\fs22 \par \par Set the remote path for this project. This is used for remote transfer and remote debugging.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 remote_file}
{\f8\fs22 : A pointer to a string that contains the remote file name.\par \par }
{\i\f8\fs22 target}
{\f8\fs22 : A value that indicates the target to set the remote path for: TARGET_WIN32_X86_DEBUG, TARGET_WIN32_X86_RELEASE, TARGET_MAC_68K_DEBUG, TARGET_MAC_68K_RELEASE, TARGET_MAC_PPC_DEBUG, TARGET_MAC_PPC_RELEASE, TARGET_USER, TARGET_CURRENT. (Default value is TARGET_CURRENT.)\par \par }
{\i\f8\fs22 srt_opt}
{\f8\fs22 : A value that indicates whether the full remote path is supplied or to prepend the given path to the existing remote path: PREPEND_REMOTE_PATH, FULL_PATH_SUPPLIED. (Default value is PREPEND_REMOTE_PATH.)\par \par }
{\i\f8\fs22 platform}
{\f8\fs22 : A value that specifies the platform: PLATFORM_WIN32_X86, PLATFORM_WIN32S_X86, PLATFORM_WIN32_MIPS, PLATFORM_MAC_68K, PLATFORM_MAC_PPC. (Default value is PLATFORM_USER.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2568\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetAdditionalDLLs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetAdditionalDLLs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetAdditionalDLLs}}{\f8\fs22  }
{\f8\fs32 int COProject::SetAdditionalDLLs(LPCSTR szDLLs)}
{\f8\fs22 \par \par Set additional DLLs to be loaded when debugging this project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 LPCSTR}
{\f8\fs22 : A pointer to a string that contains the name of the additional DLL to add.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2615\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_GetRemoteTarget}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; GetRemoteTarget}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::GetRemoteTarget}}{\f8\fs22  }
{\f8\fs32 CString COProject::GetRemoteTarget(void)}
{\f8\fs22 \par \par Get the project's remote path.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the project's remote path.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2644\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetBuildCommand}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetBuildCommand}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetBuildCommand}}{\f8\fs22  }
{\f8\fs32 int COProject::SetBuildCommand(LPCSTR command)}
{\f8\fs22 \par \par Set the build command if this project is an external project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 LPCSTR}
{\f8\fs22 : A pointer to a string that contains the build command.\par \par }
{\i\f8\fs22 index}
{\f8\fs22 : The 1 based index of the configuration to choose.  0 (default) selects all configurations.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2666\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_UpdateRemoteFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; UpdateRemoteFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::UpdateRemoteFile}}{\f8\fs22  }
{\f8\fs32 int COProject::UpdateRemoteFile(LPCSTR local_file /*= NULL*/, TARGET_TYPE target /*= CURRENT_TARGET*/, PLATFORM_TYPE platform /*= PLATFORM_USER*/)}
{\f8\fs22 \par \par Update the remote file from the host machine to the remote machine.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 local_file}
{\f8\fs22 : A pointer to a string that contains the local filename of the file to transfer. This parameter is only used when PLATFORM_WIN32S_X86 is specified by the platform parameter. (Default value is NULL.)\par \par }
{\i\f8\fs22 target}
{\f8\fs22 : A value that indicates the target to set the remote path for: TARGET_WIN32_X86_DEBUG, TARGET_WIN32_X86_RELEASE, TARGET_MAC_68K_DEBUG, TARGET_MAC_68K_RELEASE, TARGET_MAC_PPC_DEBUG, TARGET_MAC_PPC_RELEASE, TARGET_USER, TARGET_CURRENT. (Default value is TARGET_CURRENT.)\par \par }
{\i\f8\fs22 platform}
{\f8\fs22 : A value that specifies the platform: PLATFORM_WIN32_X86, PLATFORM_WIN32S_X86, PLATFORM_WIN32_MIPS, PLATFORM_MAC_68K, PLATFORM_MAC_PPC. (Default value is PLATFORM_USER.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2725\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetLocalTarget}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetLocalTarget}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetLocalTarget}}{\f8\fs22  }
{\f8\fs32 int COProject::SetLocalTarget(LPCSTR localfile)}
{\f8\fs22 \par \par Set the name of the executable for debugging with this project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 LPCSTR}
{\f8\fs22 : A pointer to a string that contains the name of the executable for debugging.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2793\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetOutputFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetOutputFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetOutputFile}}{\f8\fs22  }
{\f8\fs32 int COProject::SetOutputFile(LPCSTR localfile)}
{\f8\fs22 \par \par Set the location for the output executable.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 LPCSTR}
{\f8\fs22 : A pointer to a string that contains the location of the output executable.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2854\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_ToggleBSCGeneration}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; ToggleBSCGeneration}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::ToggleBSCGeneration}}{\f8\fs22  }
{\f8\fs32 int COProject::ToggleBSCGeneration(TOGGLE_TYPE t)}
{\f8\fs22 \par \par Toggle automatic BSC Generation for the project (off by default).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 TOGGLE_TYPE}
{\f8\fs22 : t specifies whether to turn automatic BSC off (TOGGLE_OFF) or on (TOGGLE_ON)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 2915\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetCustomBuildOptions}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetCustomBuildOptions}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetCustomBuildOptions}}{\f8\fs22  }
{\f8\fs32 int COProject::SetCustomBuildOptions(LPCSTR szDescription, CStringArray &cstrArrayBuildCmds, CStringArray &cstrArrayOutputFiles, ConfigStrArray &csArrayConfigs)}
{\f8\fs22 \par \par Set the custom build options (including description, build commands, and output files) for one or more projects or files.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szDescription}
{\f8\fs22 : A pointer to a string that contains the custom build description.\par \par }
{\i\f8\fs22 cstrArrayBuildCmds}
{\f8\fs22 : A reference to a CStringArray that contains the list of custom build commands.\par \par }
{\i\f8\fs22 cstrArrayOutputFiles}
{\f8\fs22 : A reference to a CStringArray that contains the list of custom output files.\par \par }
{\i\f8\fs22 csArrayConfigs}
{\f8\fs22 : A reference to a ConfigStrArray  that contains a list of configurations in the project settings dlg. the specified custom options will be applied to those configurations. \par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 3028\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetCustomBuildOptions}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetCustomBuildOptions}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetCustomBuildOptions}}{\f8\fs22  }
{\f8\fs32 int COProject::SetCustomBuildOptions(LPCSTR szDescription, CStringArray &cstrArrayBuildCmds, CStringArray &cstrArrayOutputFiles, ConfigStrArray &csArrayConfigs, CStringArray &cstrArrayFiles, int intConfigInclusion = INCLUDE_CONFIG_LEVEL)}
{\f8\fs22 \par \par Set the custom build options (including description, build commands, and output files) for one or more projects or files.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szDescription}
{\f8\fs22 : A pointer to a string that contains the custom build description.\par \par }
{\i\f8\fs22 cstrArrayBuildCmds}
{\f8\fs22 : A reference to a CStringArray that contains the list of custom build commands.\par \par }
{\i\f8\fs22 cstrArrayOutputFiles}
{\f8\fs22 : A reference to a CStringArray that contains the list of custom output files.\par \par }
{\i\f8\fs22 csArrayConfigs}
{\f8\fs22 : A reference to a ConfigStrArray  that contains a list of configurations in the project settings dlg. the specified custom options will be applied to those configurations. \par \par }
{\i\f8\fs22 cstrArrayFiles}
{\f8\fs22 : A reference to a CStringArray that contains a list of files inside configurtaions in the project settings dlg. the specified custom options will be applied to those files of the specified configurations.  \par \par }
{\i\f8\fs22 intConfigInclusion}
{\f8\fs22 : An int value indicating whether or not to apply the custom build settings at the configuration level as well as the file level (INCLUDE_CONFIG_LEVEL or EXCLUDE_CONFIG_LEVEL). the default is INCLUDE_CONFIG_LEVEL.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 3055\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetOutputTarget}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetOutputTarget}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetOutputTarget}}{\f8\fs22  }
{\f8\fs32 int COProject::SetOutputTarget(LPCSTR outfile)}
{\f8\fs22 \par \par Set the name of the output target when this project is an external project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 outfile}
{\f8\fs22 : A pointer to a string that contains the name of the output filename.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 3305\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_AppWizard}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; AppWizard}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::AppWizard}}{\f8\fs22  }
{\f8\fs32 HWND COProject::AppWizard(int bSaveChanges /*= FALSE*/)}
{\f8\fs22 \par \par Bring up the AppWizard (New Project) dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the AppWizard (New Project) dialog.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bSaveChanges}
{\f8\fs22 : A Boolean value that specifies whether to save the dirty files before closing them. (Default value is FALSE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 3325\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_CreateNewProject}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; CreateNewProject}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::CreateNewProject}}{\f8\fs22  }
{\f8\fs32 HWND COProject::CreateNewProject(LPCSTR szProjName, PROJTYPE ProjType, LPCSTR szDir, LPCSTR szNewSubDir, int ProjFileOpt, LPCSTR szProjFilesPath, LPCSTR szRemotePath, LPCSTR szRemoteFile)}
{\f8\fs22 \par \par This function creates a new project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the workspace window.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szProjName}
{\f8\fs22 : - Name of project to create.\par \par }
{\i\f8\fs22 ProjType}
{\f8\fs22 : - Type of project.  UIAW_PT_APPWIZ, etc.\par \par }
{\i\f8\fs22 szDir}
{\f8\fs22 : - Directory in which to create the project.\par \par }
{\i\f8\fs22 szNewSubDir}
{\f8\fs22 : - Further subdirectory specifier for project.  Based off of szDir.\par \par }
{\i\f8\fs22 ProjFileOpt}
{\f8\fs22 : - Not currently used.\par \par }
{\i\f8\fs22 szProjFilesPath}
{\f8\fs22 : - Not currently used.\par \par }
{\i\f8\fs22 szRemotePath}
{\f8\fs22 : - Not currently used.\par \par }
{\i\f8\fs22 szRemoteFile}
{\f8\fs22 : - Not currently used.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 3407\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_VerifyClasses}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; VerifyClasses}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::VerifyClasses}}{\f8\fs22  }
{\f8\fs32 HWND COProject::VerifyClasses(LPCSTR pszBaseLineFile)}
{\f8\fs22 \par \par This function creates a\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 pszBaseLineFile}
{\f8\fs22 : - Name of file containing \par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 3542\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COProject_SetProgramArguments}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COProject; SetProgramArguments}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COProject::SetProgramArguments}}{\f8\fs22  }
{\f8\fs32 int COProject::SetProgramArguments(LPCSTR progargs)}
{\f8\fs22 \par \par Set program arguments for the exe (debuggee).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 LPCSTR}
{\f8\fs22 : A pointer to a string that contains the program arguments.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coprject.cpp, 3942\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISqlDataSources_Display}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISqlDataSources; Display}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISqlDataSources::Display}}{\f8\fs22  }
{\f8\fs32 HWND UISqlDataSources::Display(void)}
{\f8\fs22 \par \par Display the SQL Data Sources dialog. This dialog is used during AppWizard. This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the SQL Data Sources dialog, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 28\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISqlDataSources_SetODBCName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISqlDataSources; SetODBCName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISqlDataSources::SetODBCName}}{\f8\fs22  }
{\f8\fs32 int UISqlDataSources::SetODBCName(CString ds) }
{\f8\fs22 \par \par Set the name of the SQL data source in the SQL Data Sources dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ds}
{\f8\fs22 : A CString that contains the name of the SQL data source.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 39\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISqlDataSources_SetODBCName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISqlDataSources; SetODBCName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISqlDataSources::SetODBCName}}{\f8\fs22  }
{\f8\fs32 int UISqlDataSources::SetODBCName(int ds) }
{\f8\fs22 \par \par Set the name of the SQL data source in the SQL Data Sources dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ds}
{\f8\fs22 : A CString that contains the name of the SQL data source.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 52\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISqlDataSources_SetDAOName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISqlDataSources; SetDAOName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISqlDataSources::SetDAOName}}{\f8\fs22  }
{\f8\fs32 int UISqlDataSources::SetDAOName(CString ds) }
{\f8\fs22 \par \par Set the name of the SQL data source in the SQL Data Sources dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ds}
{\f8\fs22 : A CString that contains the name of the SQL data source.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 66\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISqlDataSources_DataSource}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISqlDataSources; DataSource}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISqlDataSources::DataSource}}{\f8\fs22  }
{\f8\fs32 int UISqlDataSources::DataSource(Int Type)}
{\f8\fs22 \par \par Selects the type of data source ODBC or DAO\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ds}
{\f8\fs22 : A CString that contains the name of the SQL data source.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 82\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISqlDataSources_RecordSetType}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISqlDataSources; RecordSetType}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISqlDataSources::RecordSetType}}{\f8\fs22  }
{\f8\fs32 int UISqlDataSources::RecordSetType(REC_SET_TYPE Type)}
{\f8\fs22 \par \par Selects record set type Snap shot, dynaset, tables.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ds}
{\f8\fs22 : A CString that contains the name of the SQL data source.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 94\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISqlDataSources_DetectDirtyCol}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISqlDataSources; DetectDirtyCol}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISqlDataSources::DetectDirtyCol}}{\f8\fs22  }
{\f8\fs32 int UISqlDataSources::DetectDirtyCol(int Yes = 1) }
{\f8\fs22 \par \par Check the Detect Dirty col option\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ds}
{\f8\fs22 : A CString that contains the name of the SQL data source.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 106\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISqlDataSources_BindAllCol}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISqlDataSources; BindAllCol}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISqlDataSources::BindAllCol}}{\f8\fs22  }
{\f8\fs32 int UISqlDataSources::BindAllCol(int Yes = 1) }
{\f8\fs22 \par \par Specify if you want to set the Bind All collumn option.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ds}
{\f8\fs22 : A CString that contains the name of the SQL data source.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 122\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISqlDataSources_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISqlDataSources; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISqlDataSources::Close}}{\f8\fs22  }
{\f8\fs32 int UISqlDataSources::Close(int OK /* = 1 */)}
{\f8\fs22 \par \par Close the SQL Data Sources dialog by clicking on either OK or Cancel.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 OK}
{\f8\fs22 : An integer that specifies which button to click on to dismiss the dialog. 1 to click on OK, 0 to click on Cancel. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 137\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISqlServerLogIn_ID}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISqlServerLogIn; ID}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISqlServerLogIn::ID}}{\f8\fs22  }
{\f8\fs32 int UISqlServerLogIn::ID(CString ID)}
{\f8\fs22 \par \par Set the ID in the SQL Server Log In dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ID}
{\f8\fs22 : A CString that contains the ID.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 157\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISqlServerLogIn_Pw}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISqlServerLogIn; Pw}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISqlServerLogIn::Pw}}{\f8\fs22  }
{\f8\fs32 int UISqlServerLogIn::Pw(CString pw)}
{\f8\fs22 \par \par Set the password in the SQL Server Log In dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 pw}
{\f8\fs22 : A CString that contains the password.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 168\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISqlServerLogIn_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISqlServerLogIn; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISqlServerLogIn::Close}}{\f8\fs22  }
{\f8\fs32 int UISqlServerLogIn::Close(int OK/* = 1 */)}
{\f8\fs22 \par \par Close the SQL Server Log In dialog by clicking either the OK button or the Cancel button.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 OK}
{\f8\fs22 : An integer that specifies which button to click on to dismiss the dialog. 1 to click on OK, 0 to click on Cancel. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 180\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISelectTables_Name}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISelectTables; Name}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISelectTables::Name}}{\f8\fs22  }
{\f8\fs32 int UISelectTables::Name(CString tbName)}
{\f8\fs22 \par \par Set the table name in the Select Tables dialog by name. (See Name(int) to set the name by index.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 tbName}
{\f8\fs22 : A CString that contains the name of the table.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 200\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISelectTables_Name}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISelectTables; Name}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISelectTables::Name}}{\f8\fs22  }
{\f8\fs32 int UISelectTables::Name(int index /*= 1*/)}
{\f8\fs22 \par \par Set the table name in the Select Tables dialog by index. (See Name(CString) to set the name by name.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 index}
{\f8\fs22 : An integer that contains the index into the list of tables.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 213\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISelectTables_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISelectTables; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISelectTables::Close}}{\f8\fs22  }
{\f8\fs32 int UISelectTables::Close(int OK /* = 1 */)}
{\f8\fs22 \par \par Close the Select Tables dialog by clicking either the OK button or the Cancel button.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 OK}
{\f8\fs22 : An integer that specifies which button to click on to dismiss the dialog. 1 to click on OK, 0 to click on Cancel. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 226\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UISelectRecordSet_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UISelectRecordSet; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UISelectRecordSet::Close}}{\f8\fs22  }
{\f8\fs32 int UISelectRecordSet::Close(int OK /* = 1*/)}
{\f8\fs22 \par \par Close the Select Record Set dialog by clicking either the OK button or the Cancel button.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 OK}
{\f8\fs22 : An integer that specifies which button to click on to dismiss the dialog. 1 to click on OK, 0 to click on Cancel. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 248\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_*UISelectRecordSet_New}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} *UISelectRecordSet; New}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} *UISelectRecordSet::New}}{\f8\fs22  }
{\f8\fs32 UIDataBaseDlgs *UISelectRecordSet::New() }
{\f8\fs22 \par \par Bring up the Database dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a UIDataBaseDlgs object that represents the dialog opened.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 266\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDataBaseDlgs_WaitForSources}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDataBaseDlgs; WaitForSources}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDataBaseDlgs::WaitForSources}}{\f8\fs22  }
{\f8\fs32 int UIDataBaseDlgs::WaitForSources() }
{\f8\fs22 \par \par Wait for the SQL Data Sources dialog to exist.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 278\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDataBaseDlgs_WaitForLogin}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDataBaseDlgs; WaitForLogin}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDataBaseDlgs::WaitForLogin}}{\f8\fs22  }
{\f8\fs32 int UIDataBaseDlgs::WaitForLogin() }
{\f8\fs22 \par \par Wait for the Server Log In dialog to exist\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 289\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDataBaseDlgs_WaitForTables}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDataBaseDlgs; WaitForTables}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDataBaseDlgs::WaitForTables}}{\f8\fs22  }
{\f8\fs32 int UIDataBaseDlgs::WaitForTables()}
{\f8\fs22 \par \par Wait for the Select Tables dialog to exist.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 odbcdlgs.cpp, 301\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_GetPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; GetPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::GetPage}}{\f8\fs22  }
{\f8\fs32 int UIAppWizard::GetPage(HWND hwnd /*=NULL*/)}
{\f8\fs22 \par \par Get the current page in the AppWizard sequence.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A value that indicates the current AppWizard page: UIAW_INVALID, UIAW_NEWPROJ, UIAW_APPTYPE, UIAW_DLGOPTIONS, UIAW_DLGFEATURES, UIAW_DLGCLASSES, UIAW_DBOPTIONS, UIAW_OLEOPTIONS, UIAW_FEATURES, UIAW_PROJOPTIONS, UIAW_CLASSES, UIAW_CONFIRM, UIAW_PROGRESS, UIAW_DBSOURCES, UIAW_MESSAGEBOX.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 hwnd}
{\f8\fs22 : The HWND of the AppWizard dialog. NULL means use the current dialog. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 59\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_ExpectPage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; ExpectPage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::ExpectPage}}{\f8\fs22  }
{\f8\fs32 void UIAppWizard::ExpectPage(int nPage)}
{\f8\fs22 \par \par Expect that the given page is currently active in the AppWizard sequence. An exception is thrown if nPage doesn't match the current page.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nPage}
{\f8\fs22 : A value that contains the expected AppWizard page: UIAW_INVALID, UIAW_NEWPROJ, UIAW_APPTYPE, UIAW_DLGOPTIONS, UIAW_DLGFEATURES, UIAW_DLGCLASSES, UIAW_DBOPTIONS, UIAW_OLEOPTIONS, UIAW_FEATURES, UIAW_PROJOPTIONS, UIAW_CLASSES, UIAW_CONFIRM, UIAW_PROGRESS, UIAW_DBSOURCES, UIAW_MESSAGEBOX.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 145\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_ExpectedTitle}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; ExpectedTitle}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::ExpectedTitle}}{\f8\fs22  }
{\f8\fs32 LPCSTR UIAppWizard::ExpectedTitle(int nPage) const}
{\f8\fs22 \par \par Get the title of the given AppWizard page.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a string that contains the title of the given AppWizard page.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nPage}
{\f8\fs22 : A value that contains the AppWizard page to get the title for: UIAW_NEWPROJ, UIAW_APPTYPE, UIAW_DLGOPTIONS, UIAW_DLGFEATURES, UIAW_DLGCLASSES, UIAW_DBOPTIONS, UIAW_OLEOPTIONS, UIAW_FEATURES, UIAW_PROJOPTIONS, UIAW_CLASSES, UIAW_CONFIRM, UIAW_PROGRESS, UIAW_DBSOURCES.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 157\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_Create}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; Create}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::Create}}{\f8\fs22  }
{\f8\fs32 HWND UIAppWizard::Create(void)}
{\f8\fs22 \par \par Click the Create button on the New Project dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the dialog displayed after clicking the Create button (either the Add Files dialog or the first page of the AppWizard sequence).\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 228\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_SetAppType}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; SetAppType}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::SetAppType}}{\f8\fs22  }
{\f8\fs32 void UIAppWizard::SetAppType(UINT id)}
{\f8\fs22 \par \par Set the type of AppWizard application (SDI, MDI, or dialog based).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The ID of the control to click on that specifies the type of AppWizard application.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 274\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_SetDBOptions}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; SetDBOptions}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::SetDBOptions}}{\f8\fs22  }
{\f8\fs32 void UIAppWizard::SetDBOptions(UINT id)}
{\f8\fs22 \par \par Set the database option for the AppWizard application (none, header files, db view, or db view and file support).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : An integer containing the ID of the control to click on that specifies the database option.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 286\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_SetOLEOptions}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; SetOLEOptions}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::SetOLEOptions}}{\f8\fs22  }
{\f8\fs32 void UIAppWizard::SetOLEOptions(UINT id)}
{\f8\fs22 \par \par Set the OLE option for the AppWizard application (none, container, mini-server, full-server, container and server, support for OLE compound files, or support for OLE automation).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : An integer containing the ID of the control to click on that specifies the OLE option.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 298\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_SetProjOptions}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; SetProjOptions}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::SetProjOptions}}{\f8\fs22  }
{\f8\fs32 void UIAppWizard::SetProjOptions(UINT id)}
{\f8\fs22 \par \par Set project options for the AppWizard application (dockable toolbar, status bar, printing, help, 3d controls, MAPI, or WinSockets).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : An integer that contains the ID of the control to click on that specifies the project option.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 314\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_SelectClass}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; SelectClass}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::SelectClass}}{\f8\fs22  }
{\f8\fs32 void UIAppWizard::SelectClass(int n)}
{\f8\fs22 \par \par Select a class in the AppWizard class page by index.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 n}
{\f8\fs22 : An integer containing the 1-based index of the class to select into the list of classes.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 326\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_SelectClass}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; SelectClass}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::SelectClass}}{\f8\fs22  }
{\f8\fs32 void UIAppWizard::SelectClass(LPCSTR sz)}
{\f8\fs22 \par \par Select a class in the AppWizard class page by name.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 sz}
{\f8\fs22 : A pointer to a string containing the name of the class to select in the list of classes.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 337\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_GetClassName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; GetClassName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::GetClassName}}{\f8\fs22  }
{\f8\fs32 CString UIAppWizard::GetClassName(void)}
{\f8\fs22 \par \par Get the name of the selected class from the AppWizard class page.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the name of the selected class.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 347\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_GetBaseClass}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; GetBaseClass}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::GetBaseClass}}{\f8\fs22  }
{\f8\fs32 CString UIAppWizard::GetBaseClass(void)}
{\f8\fs22 \par \par Get the name of the selected class's base class from the AppWizard class page.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the name of the base class.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 359\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_GetSourceFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; GetSourceFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::GetSourceFile}}{\f8\fs22  }
{\f8\fs32 CString UIAppWizard::GetSourceFile(void)}
{\f8\fs22 \par \par Get the name of the source file for the selected class from the AppWizard class page.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the name of the source file.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 371\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAppWizard_GetHeaderFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAppWizard; GetHeaderFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAppWizard::GetHeaderFile}}{\f8\fs22  }
{\f8\fs32 CString UIAppWizard::GetHeaderFile(void)}
{\f8\fs22 \par \par Get the name of the header file for the selected class from the AppWizard class page.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the name of the header file.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uappwiz.cpp, 383\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIClassWizard_Display}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIClassWizard; Display}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIClassWizard::Display}}{\f8\fs22  }
{\f8\fs32 HWND UIClassWizard::Display() }
{\f8\fs22 \par \par Display the ClassWizard dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the ClassWizard dialog, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 35\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIClassWizard_DeleteFunction}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIClassWizard; DeleteFunction}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIClassWizard::DeleteFunction}}{\f8\fs22  }
{\f8\fs32 HWND UIClassWizard::DeleteFunction(int ClassIndex, int FuncIndex, int ObjectIndex)}
{\f8\fs22 \par \par Delete a message map member function from the class.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ClassIndex}
{\f8\fs22 : An integer that contains the 1-based index into the list of classes in ClassWizard. This specifies the class that contains the function to delete.\par \par }
{\i\f8\fs22 FuncIndex}
{\f8\fs22 : An integer that contains the 1-based index into the list of messages. This specifies the member function to delete.\par \par }
{\i\f8\fs22 ObjectIndex}
{\f8\fs22 : An integer that contains the 1-based index into the list of objects for the selected class. This specifies the object that contains the function to delete.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 56\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIClassWizard_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIClassWizard; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIClassWizard::Close}}{\f8\fs22  }
{\f8\fs32 HWND UIClassWizard::Close() }
{\f8\fs22 \par \par Close the ClassWizard dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 95\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIClassWizard_ClassCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIClassWizard; ClassCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIClassWizard::ClassCount}}{\f8\fs22  }
{\f8\fs32 int UIClassWizard::ClassCount()}
{\f8\fs22 \par \par Gets the number of classes in the active project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates the class count.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 109\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIClassWizard_AddFunction}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIClassWizard; AddFunction}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIClassWizard::AddFunction}}{\f8\fs22  }
{\f8\fs32 int UIClassWizard::AddFunction(int ClassIndex, int FuncIndex, int ObjectIndex)}
{\f8\fs22 \par \par Add a message map member function to the class.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ClassIndex}
{\f8\fs22 : An integer that contains the 1-based index into the list of classes in ClassWizard. This specifies the class that contains the function to add.\par \par }
{\i\f8\fs22 FuncIndex}
{\f8\fs22 : An integer that contains the 1-based index into the list of messages. This specifies the member function to add.\par \par }
{\i\f8\fs22 ObjectIndex}
{\f8\fs22 : An integer that contains the 1-based index into the list of objects for the selected class. This specifies the object that contains the function to add.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 124\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIClassWizard_AddClass}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIClassWizard; AddClass}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIClassWizard::AddClass}}{\f8\fs22  }
{\f8\fs32 int UIClassWizard::AddClass(int TypeIndex,CString Name,  CString DotH, CString DotCPP) }
{\f8\fs22 \par \par Add a new class the project via ClassWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 TypeIndex}
{\f8\fs22 : An integer that contains the 1-based index into the list of base classes to derive this class from.\par \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name of the new class.\par \par }
{\i\f8\fs22 DotH}
{\f8\fs22 : A CString that contains the name of the header file for the new class.\par \par }
{\i\f8\fs22 DotCPP}
{\f8\fs22 : A CString that contains the name of the source file for the new class.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 174\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIClassWizard_ImportClass}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIClassWizard; ImportClass}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIClassWizard::ImportClass}}{\f8\fs22  }
{\f8\fs32 int UIClassWizard::ImportClass(CString Name, CString DotH, CString DotCPP) }
{\f8\fs22 \par \par Import an existing class into the project via ClassWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString containing the name of the new class.\par \par }
{\i\f8\fs22 DotH}
{\f8\fs22 : A CString containing the name of the header file for the class.\par \par }
{\i\f8\fs22 DotCPP}
{\f8\fs22 : A CString containing the name of the source file for the class.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 219\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIClassWizard_EditCode}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIClassWizard; EditCode}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIClassWizard::EditCode}}{\f8\fs22  }
{\f8\fs32 int UIClassWizard::EditCode()}
{\f8\fs22 \par \par Select the Edit Code button the Message Map tab in ClassWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 237\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIClassWizard_GetClassFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIClassWizard; GetClassFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIClassWizard::GetClassFile}}{\f8\fs22  }
{\f8\fs32 CString UIClassWizard::GetClassFile()}
{\f8\fs22 \par \par Get the name of the source file for the currently selected class in ClassWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString containing the name of the source file for the currently selected class.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 252\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIClassWizard_SetDataSourceName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIClassWizard; SetDataSourceName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIClassWizard::SetDataSourceName}}{\f8\fs22  }
{\f8\fs32 int UIClassWizard::SetDataSourceName()}
{\f8\fs22 \par \par Set the datasource name to be used when creating Database classes.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 void. \par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 267\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIClassWizard_GetActiveClass}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIClassWizard; GetActiveClass}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIClassWizard::GetActiveClass}}{\f8\fs22  }
{\f8\fs32 CString UIClassWizard::GetActiveClass()}
{\f8\fs22 \par \par Get the name of the currently selected class in ClassWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the name of the currently selected class.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 277\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAddClassDlg_Show}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAddClassDlg; Show}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAddClassDlg::Show}}{\f8\fs22  }
{\f8\fs32 int UIAddClassDlg::Show()}
{\f8\fs22 \par \par Display the Create New Class dialog from ClassWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 363\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAddClassDlg_SetType}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAddClassDlg; SetType}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAddClassDlg::SetType}}{\f8\fs22  }
{\f8\fs32 int UIAddClassDlg::SetType(int Type) }
{\f8\fs22 \par \par Set the the base class of the new class in the Create New Class dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Type}
{\f8\fs22 : An integer that contains the 1-based index into the list of base classes.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 382\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAddClassDlg_SetName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAddClassDlg; SetName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAddClassDlg::SetName}}{\f8\fs22  }
{\f8\fs32 int UIAddClassDlg::SetName(CString Name)}
{\f8\fs22 \par \par Set the name of the class in the Create New Class dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString containing the name of the new class.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 400\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAddClassDlg_SetHeader}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAddClassDlg; SetHeader}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAddClassDlg::SetHeader}}{\f8\fs22  }
{\f8\fs32 int UIAddClassDlg::SetHeader(CString DotH)}
{\f8\fs22 \par \par Set the name of the header file for the new class in the Create New Class dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 DotH}
{\f8\fs22 : A CString that contains the name of the new header file.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 415\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAddClassDlg_SetCPP}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAddClassDlg; SetCPP}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAddClassDlg::SetCPP}}{\f8\fs22  }
{\f8\fs32 int UIAddClassDlg::SetCPP(CString DotCPP)}
{\f8\fs22 \par \par Set the name of the source file for the new class in the Create New Class dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 DotCPP}
{\f8\fs22 : A CString that contains the name of the new header file.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 428\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAddClassDlg_SetDataSourceName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAddClassDlg; SetDataSourceName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAddClassDlg::SetDataSourceName}}{\f8\fs22  }
{\f8\fs32 int UIAddClassDlg::SetDataSourceName()}
{\f8\fs22 \par \par Set the datasource name to be used when creating Database classes.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 void. \par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 440\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAddClassDlg_Create}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAddClassDlg; Create}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAddClassDlg::Create}}{\f8\fs22  }
{\f8\fs32 int UIAddClassDlg::Create()}
{\f8\fs22 \par \par Create the new class in the current project by clicking the Create button in the Create New Class dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 453\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAddClassDlg_CheckOle}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAddClassDlg; CheckOle}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAddClassDlg::CheckOle}}{\f8\fs22  }
{\f8\fs32 int UIAddClassDlg::CheckOle()}
{\f8\fs22 \par \par Select the OLE automation for the new class in the Create New Class dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 523\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAddClassDlg_CheckOleCreateable}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAddClassDlg; CheckOleCreateable}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAddClassDlg::CheckOleCreateable}}{\f8\fs22  }
{\f8\fs32 int UIAddClassDlg::CheckOleCreateable(CString ExtName) }
{\f8\fs22 \par \par Select OLE automation createable by name for the new class in the Create New Class dialog. This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ExtName}
{\f8\fs22 : A CString that contains the name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 535\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAddClassDlg_CheckAddToGallery}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAddClassDlg; CheckAddToGallery}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAddClassDlg::CheckAddToGallery}}{\f8\fs22  }
{\f8\fs32 int UIAddClassDlg::CheckAddToGallery(BOOL bCheck /*= TRUE */)}
{\f8\fs22 \par \par Checks or unchecks the Add To Object Gallery check box.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 ERROR_SUCCESS or ERROR_ERROR if it failed to do the operation.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 If}
{\f8\fs22 : bCheck is TRUE it makes sure the check box is check. Otherwise it uncheck it if necessary.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 553\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAddClassDlg_AttachDlgID}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAddClassDlg; AttachDlgID}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAddClassDlg::AttachDlgID}}{\f8\fs22  }
{\f8\fs32 int UIAddClassDlg::AttachDlgID(int index /*= 1 */)}
{\f8\fs22 \par \par Select the dialog (by ID) that's to be associated with the new class in the Create New Class dialog. (See AttachDlgID(CString) to associate dialog by name.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 index}
{\f8\fs22 : An integer that contains the 1-based index into the list of dialog templates used to specify the dialog associated with the new class.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 574\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAddClassDlg_AttachDlgID}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAddClassDlg; AttachDlgID}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAddClassDlg::AttachDlgID}}{\f8\fs22  }
{\f8\fs32 int UIAddClassDlg::AttachDlgID(CString Name) }
{\f8\fs22 \par \par Select the dialog (by name) that's to be associated with the new class in the Create New Class dialog. (See AttachDlgID(int) to associate dialog by index.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name of the dialog template used to specify the dialog associated with the new class.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 595\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWizardBar_SelectClass}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWizardBar; SelectClass}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWizardBar::SelectClass}}{\f8\fs22  }
{\f8\fs32 int UIWizardBar::SelectClass(int Index)}
{\f8\fs22 \par \par Select the specified object from the WizardBar for the class in the currently active source file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Index}
{\f8\fs22 : An integer that contains the 1-based index into the list of objects for the currently active source file to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 642\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWizardBar_HandleMessage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWizardBar; HandleMessage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWizardBar::HandleMessage}}{\f8\fs22  }
{\f8\fs32 int UIWizardBar::HandleMessage(int Index)}
{\f8\fs22 \par \par Select the member function from the WizardBar for the selected object for the class in the currently active source file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Index}
{\f8\fs22 : An integer that contains the 1-based index into the list of functions to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 ucwzdlg.cpp, 656\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_Create}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; Create}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::Create}}{\f8\fs22  }
{\f8\fs32 HWND UICtrlWizard::Create()}
{\f8\fs22 \par \par Start the OLE ControlWizard sequence from the New Project dialog. The New Project dialog must be displayed before calling this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the first page of the OLE ControlWizard, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 31\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_SetCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; SetCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::SetCount}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlWizard::SetCount(int count)}
{\f8\fs22 \par \par Set the number of controls in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of controls for this project.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 56\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_SetLicenceOpt}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; SetLicenceOpt}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::SetLicenceOpt}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlWizard::SetLicenceOpt(int iLic)}
{\f8\fs22 \par \par Set whether or not to include a runtime license with the controls in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iLic}
{\f8\fs22 : A Boolean value that indicates whether to include a runtime license (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 70\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_SetCommentOpt}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; SetCommentOpt}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::SetCommentOpt}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlWizard::SetCommentOpt(int icomm)}
{\f8\fs22 \par \par Set whether to include source file comments or not in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 icomm}
{\f8\fs22 : A Boolean value that indicates whether to include source file comments (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 85\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_SetHelpOpt}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; SetHelpOpt}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::SetHelpOpt}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlWizard::SetHelpOpt(int icomm)}
{\f8\fs22 \par \par Set whether to include help file support or not in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 icomm}
{\f8\fs22 : A Boolean value that indicates whether to include help file support (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 100\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_SetActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; SetActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::SetActive}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlWizard::SetActive(int index)}
{\f8\fs22 \par \par Set the active control in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 index}
{\f8\fs22 : An integer that contains the 1-based index into the list of controls to be generated by ControlWizard.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 115\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_GetActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; GetActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::GetActive}}{\f8\fs22  }
{\f8\fs32 CString UICtrlWizard::GetActive()}
{\f8\fs22 \par \par Get the currently selected control in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the name of the currently selected control in ControlWizard.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 129\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_SummaryInfo}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; SummaryInfo}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::SummaryInfo}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlWizard::SummaryInfo()}
{\f8\fs22 \par \par Display the summary information for the currently selected control in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 141\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_ActiveIfVisible}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; ActiveIfVisible}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::ActiveIfVisible}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlWizard::ActiveIfVisible(int active)}
{\f8\fs22 \par \par Set the "Activates when visible" property of the currently selected control.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 active}
{\f8\fs22 : A Boolean value that indicates whether to check (TRUE) or uncheck the "Activates when visible" property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 154\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_Invisible}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; Invisible}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::Invisible}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlWizard::Invisible(int opt)}
{\f8\fs22 \par \par Set the "Invisible at runtime" property of the currently selected control.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 opt}
{\f8\fs22 : A Boolean value that indicates whether to check (TRUE) or uncheck the "Invisible at runtime" property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 169\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_InInsertDlg}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; InInsertDlg}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::InInsertDlg}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlWizard::InInsertDlg(int opt)}
{\f8\fs22 \par \par Set the "Available in 'Insert Object' dialog" property of the currently selected control.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 opt}
{\f8\fs22 : A Boolean value that indicates whether to check (TRUE) or uncheck the "Available in 'Insert Object' dialog" property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 184\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_SimpleFrame}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; SimpleFrame}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::SimpleFrame}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlWizard::SimpleFrame(int opt)}
{\f8\fs22 \par \par Set the "Supports simple frame" property of the currently selected control.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 opt}
{\f8\fs22 : A Boolean value that indicates whether to check (TRUE) or uncheck the "Supports simple frame" property.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 199\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_SubClassCtrl}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; SubClassCtrl}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::SubClassCtrl}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlWizard::SubClassCtrl(int index)}
{\f8\fs22 \par \par Select the window class by index that the currently selected control should subclass from in ControlWizard. (See SubClassCtrl(CString) to select the window class by name.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 index}
{\f8\fs22 : An integer that contains the 1-based index into the list of window classes to subclass from.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 214\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlWizard_SubClassCtrl}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlWizard; SubClassCtrl}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlWizard::SubClassCtrl}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlWizard::SubClassCtrl(CString strcls)}
{\f8\fs22 \par \par Select the window class by name that the currently selected control should subclass from in ControlWizard. (See SubClassCtrl(int) to select the window class by index.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 strcls}
{\f8\fs22 : A CString that contains the name of the window class to subclass from.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 228\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlSummaryDlg_SetShortName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlSummaryDlg; SetShortName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlSummaryDlg::SetShortName}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlSummaryDlg::SetShortName(CString Name)}
{\f8\fs22 \par \par Set the short name of the control in the Summary Info dialog in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 242\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlSummaryDlg_SetCrlClsName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlSummaryDlg; SetCrlClsName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlSummaryDlg::SetCrlClsName}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlSummaryDlg::SetCrlClsName(CString Name)}
{\f8\fs22 \par \par Set the class name of the control in the Summary Info dialog in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 254\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlSummaryDlg_SetCtrlHName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlSummaryDlg; SetCtrlHName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlSummaryDlg::SetCtrlHName}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlSummaryDlg::SetCtrlHName(CString Name)}
{\f8\fs22 \par \par Set the header filename of the control in the Summary Info dialog in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 266\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlSummaryDlg_SetCtrlCppName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlSummaryDlg; SetCtrlCppName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlSummaryDlg::SetCtrlCppName}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlSummaryDlg::SetCtrlCppName(CString Name)}
{\f8\fs22 \par \par Set the source filename of the control in the Summary Info dialog in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 278\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlSummaryDlg_SetCtrlUsrName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlSummaryDlg; SetCtrlUsrName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlSummaryDlg::SetCtrlUsrName}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlSummaryDlg::SetCtrlUsrName(CString Name)}
{\f8\fs22 \par \par Set the user type name of the control in the Summary Info dialog in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 290\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlSummaryDlg_SetCtrlIDName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlSummaryDlg; SetCtrlIDName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlSummaryDlg::SetCtrlIDName}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlSummaryDlg::SetCtrlIDName(CString Name)}
{\f8\fs22 \par \par Set the programmatic ID name of the control in the Summary Info dialog in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 302\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlSummaryDlg_SetPpgClsName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlSummaryDlg; SetPpgClsName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlSummaryDlg::SetPpgClsName}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlSummaryDlg::SetPpgClsName(CString Name)}
{\f8\fs22 \par \par Set the class name of the property page in the Summary Info dialog in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 316\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlSummaryDlg_SetPpgHName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlSummaryDlg; SetPpgHName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlSummaryDlg::SetPpgHName}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlSummaryDlg::SetPpgHName(CString Name)}
{\f8\fs22 \par \par Set the header filename of the property page in the Summary Info dialog in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 328\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlSummaryDlg_SetPpgCppName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlSummaryDlg; SetPpgCppName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlSummaryDlg::SetPpgCppName}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlSummaryDlg::SetPpgCppName(CString Name)}
{\f8\fs22 \par \par Set the source filename of the property page in the Summary Info dialog in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 340\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlSummaryDlg_SetPpgUsrName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlSummaryDlg; SetPpgUsrName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlSummaryDlg::SetPpgUsrName}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlSummaryDlg::SetPpgUsrName(CString Name)}
{\f8\fs22 \par \par Set the user type name of the property page in the Summary Info dialog in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 352\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlSummaryDlg_SetPpgIDName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlSummaryDlg; SetPpgIDName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlSummaryDlg::SetPpgIDName}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlSummaryDlg::SetPpgIDName(CString Name)}
{\f8\fs22 \par \par Set the programmatic ID name of the property page in the Summary Info dialog in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A CString that contains the name.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 364\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlSummaryDlg_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlSummaryDlg; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlSummaryDlg::Close}}{\f8\fs22  }
{\f8\fs32 BOOL UICtrlSummaryDlg::Close(int how /*= 1*/)}
{\f8\fs22 \par \par Close the Summary Info dialog in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 how}
{\f8\fs22 : A Boolean value that indicates whether to click on the OK button (TRUE) or the Cancel button when closing the Summary Info dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 376\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICtrlSummaryDlg_Display}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICtrlSummaryDlg; Display}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICtrlSummaryDlg::Display}}{\f8\fs22  }
{\f8\fs32 HWND UICtrlSummaryDlg::Display(void)}
{\f8\fs22 \par \par Display the Summary Info dialog in ControlWizard. The page with the summary info button must be active in ControlWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the Summary Info dialog, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uictrlwz.cpp, 390\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExtWizard_Create}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExtWizard; Create}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExtWizard::Create}}{\f8\fs22  }
{\f8\fs32 BOOL UIExtWizard::Create()}
{\f8\fs22 \par \par Start the Custom AppWizard sequence from the New Project dialog. The New Project dialog must be displayed before calling this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiextwiz.cpp, 31\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExtWizard_SetExtType}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExtWizard; SetExtType}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExtWizard::SetExtType}}{\f8\fs22  }
{\f8\fs32 BOOL UIExtWizard::SetExtType(int Type)}
{\f8\fs22 \par \par Set the type of Custom AppWizard to create: from an existing project, standard AppWizard, or custom.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Type}
{\f8\fs22 : An integer that contains the ID of the radio button that indicates the type of custom AppWizard to create.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiextwiz.cpp, 56\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExtWizard_SetNumPages}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExtWizard; SetNumPages}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExtWizard::SetNumPages}}{\f8\fs22  }
{\f8\fs32 BOOL UIExtWizard::SetNumPages(int Pages)}
{\f8\fs22 \par \par Set the number of steps (pages) that the custom AppWizard will contain.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Pages}
{\f8\fs22 : An integer containing the number of steps (pages).\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiextwiz.cpp, 68\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExtWizard_SetBasePrjName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExtWizard; SetBasePrjName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExtWizard::SetBasePrjName}}{\f8\fs22  }
{\f8\fs32 BOOL UIExtWizard::SetBasePrjName(CString PrjName)}
{\f8\fs22 \par \par Set the name of the project that the custom AppWizard will be based from. This is only applicable if the custom AppWizard is being created from an existing project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 PrjName}
{\f8\fs22 : A CString that contains the path and filename of the project to base this custom AppWizard from.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiextwiz.cpp, 82\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExtWizard_SetDllExeType}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExtWizard; SetDllExeType}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExtWizard::SetDllExeType}}{\f8\fs22  }
{\f8\fs32 BOOL UIExtWizard::SetDllExeType(int Type)}
{\f8\fs22 \par \par Set whether this custom AppWizard is for an EXE or a DLL. This is only applicable if the custom AppWizard is being based on a standard AppWizard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Type}
{\f8\fs22 : An integer that contains the ID of the radio button that indicates whether to create an EXE Custom AppWizard or a DLL Custom AppWizard.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiextwiz.cpp, 95\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExtWizard_SetLangs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExtWizard; SetLangs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExtWizard::SetLangs}}{\f8\fs22  }
{\f8\fs32 BOOL UIExtWizard::SetLangs(int index)}
{\f8\fs22 \par \par Set the language supported by this custom AppWizard by index. This is only applicable if the custom AppWizard is baesed on a standard AppWizard. (See SetLangs(CString) to set the language by name.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 index}
{\f8\fs22 : An integer that contains the 1-based index into the list of languages to set for this custom AppWizard.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiextwiz.cpp, 107\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExtWizard_SetLangs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExtWizard; SetLangs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExtWizard::SetLangs}}{\f8\fs22  }
{\f8\fs32 BOOL UIExtWizard::SetLangs(CString LangStr)}
{\f8\fs22 \par \par Set the language supported by this custom AppWizard by name. This is only applicable if the custom AppWizard is baesed on a standard AppWizard. (See SetLangs(int) to set the language by index.) This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 LangStr}
{\f8\fs22 : A CString that contains the name of the language to set for this custom AppWizard.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiextwiz.cpp, 121\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjectTarget_New}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjectTarget; New}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjectTarget::New}}{\f8\fs22  }
{\f8\fs32 int UIProjectTarget::New(LPCSTR Name, int Type, BOOL Debug)}
{\f8\fs22 \par \par Create a new target for the current project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A pointer to a string that contains name of the new target.\par \par }
{\i\f8\fs22 Type}
{\f8\fs22 : An integer that contains the 1-based index into the list of target types for the new target.\par \par }
{\i\f8\fs22 Debug}
{\f8\fs22 : A Boolean value that indicates whether the new target is debug (true) or retail.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitarget.cpp, 33\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjectTarget_New}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjectTarget; New}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjectTarget::New}}{\f8\fs22  }
{\f8\fs32 int UIProjectTarget::New(LPCSTR Name, LPCSTR Target)}
{\f8\fs22 \par \par Create a new target for the current project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Name}
{\f8\fs22 : A pointer to a string that contains name of the new target.\par \par }
{\i\f8\fs22 Target}
{\f8\fs22 : A pointer to a string that contains the name of the target type for the new target.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitarget.cpp, 70\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjectTarget_Delete}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjectTarget; Delete}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjectTarget::Delete}}{\f8\fs22  }
{\f8\fs32 int UIProjectTarget::Delete(LPCSTR DelName) }
{\f8\fs22 \par \par Delete a target from the current project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 DelName}
{\f8\fs22 : A pointer to a string that contains the name of the target to delete.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitarget.cpp, 99\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjectTarget_Rename}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjectTarget; Rename}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjectTarget::Rename}}{\f8\fs22  }
{\f8\fs32 int UIProjectTarget::Rename(LPCSTR OldName, LPCSTR NewName)}
{\f8\fs22 \par \par Change the name of one of the target's in the current project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 OldName}
{\f8\fs22 : A pointer to a string that contains the old name of the target.\par \par }
{\i\f8\fs22 NewName}
{\f8\fs22 : A pointer to a string that contains the new name for the target.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitarget.cpp, 128\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjectTarget_Select}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjectTarget; Select}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjectTarget::Select}}{\f8\fs22  }
{\f8\fs32 int UIProjectTarget::Select(LPCSTR SelName, BOOL LogWarning/* = TRUE */) }
{\f8\fs22 \par \par Selects a target in the current project (substrings supported).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 SelName}
{\f8\fs22 : A pointer to a string that contains the name of the target to select.\par \par }
{\i\f8\fs22 LogWarning}
{\f8\fs22 : A Boolean value that indicates whether to log information if the target isn't in the current project (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitarget.cpp, 154\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjectTarget_Show}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjectTarget; Show}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjectTarget::Show}}{\f8\fs22  }
{\f8\fs32 HWND UIProjectTarget::Show()}
{\f8\fs22 \par \par Display the Targets dialog for the current project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the Targets dialog, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitarget.cpp, 191\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjectTarget_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjectTarget; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjectTarget::Close}}{\f8\fs22  }
{\f8\fs32 HWND UIProjectTarget::Close()}
{\f8\fs22 \par \par Close the Targets dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitarget.cpp, 223\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjectTarget_SetTarget}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjectTarget; SetTarget}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjectTarget::SetTarget}}{\f8\fs22  }
{\f8\fs32 int UIProjectTarget::SetTarget(LPCSTR Target) }
{\f8\fs22 \par \par Set the current target in the project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Target}
{\f8\fs22 : A pointer to a string that contains the name of the target to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitarget.cpp, 254\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjectTarget_GetTarget}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjectTarget; GetTarget}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjectTarget::GetTarget}}{\f8\fs22  }
{\f8\fs32 LPCSTR UIProjectTarget::GetTarget(int Index /* = 0*/) }
{\f8\fs22 \par \par Get the name of the current target or a specified in the project.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a string that contains the name of the selected target.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Index}
{\f8\fs22 : An integer that contains a 1-based index into the list of targets. This value is used to specify the target to retrieve the name for. 0 means the currently selected target. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uitarget.cpp, 267\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_Display}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; Display}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::Display}}{\f8\fs22  }
{\f8\fs32 HWND UIOGalleryDlg::Display() }
{\f8\fs22 \par \par Bring up the Object Gallery dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the Object Gallery dialog, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 30\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::Close}}{\f8\fs22  }
{\f8\fs32 HWND UIOGalleryDlg::Close( void ) }
{\f8\fs22 \par \par Closes the Object Gallery Main dialog and detaches the component list view.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the window that remains after closing the Gallery.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 69\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_Import}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; Import}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::Import}}{\f8\fs22  }
{\f8\fs32 int UIOGalleryDlg::Import( CString& strOglet, BOOL bCopyToGallery /* = FALSE */)}
{\f8\fs22 \par \par The description for this function is not available. Please see the appropriate component owner for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The return value description for this function is not available.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Param}
{\f8\fs22 : The parameter description(s) for this function are not available.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 85\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_Insert}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; Insert}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::Insert}}{\f8\fs22  }
{\f8\fs32 HWND UIOGalleryDlg::Insert( CString& strOglet) }
{\f8\fs22 \par \par The description for this function is not available. Please see the appropriate component owner for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The return value description for this function is not available.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Param}
{\f8\fs22 : The parameter description(s) for this function are not available.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 107\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_Insert}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; Insert}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::Insert}}{\f8\fs22  }
{\f8\fs32 HWND UIOGalleryDlg::Insert( UINT nOglet) }
{\f8\fs22 \par \par The description for this function is not available. Please see the appropriate component owner for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The return value description for this function is not available.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Param}
{\f8\fs22 : The parameter description(s) for this function are not available.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 130\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_SelectComponent}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; SelectComponent}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::SelectComponent}}{\f8\fs22  }
{\f8\fs32 int UIOGalleryDlg::SelectComponent( CString& strOglet )	}
{\f8\fs22 \par \par The description for this function is not available. Please see the appropriate component owner for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The return value description for this function is not available.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Param}
{\f8\fs22 : The parameter description(s) for this function are not available.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 159\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_SelectComponent}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; SelectComponent}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::SelectComponent}}{\f8\fs22  }
{\f8\fs32 int UIOGalleryDlg::SelectComponent( UINT nOglet )	}
{\f8\fs22 \par \par The description for this function is not available. Please see the appropriate component owner for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The return value description for this function is not available.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Param}
{\f8\fs22 : The parameter description(s) for this function are not available.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 200\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_GetSelectedComponentText}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; GetSelectedComponentText}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::GetSelectedComponentText}}{\f8\fs22  }
{\f8\fs32 LPTSTR UIOGalleryDlg::GetSelectedComponentText(void)}
{\f8\fs22 \par \par The description for this function is not available. Please see the appropriate component owner for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The return value description for this function is not available.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Param}
{\f8\fs22 : The parameter description(s) for this function are not available.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 259\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_ActivateCategory}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; ActivateCategory}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::ActivateCategory}}{\f8\fs22  }
{\f8\fs32 int UIOGalleryDlg::ActivateCategory( CString& strCategory )}
{\f8\fs22 \par \par Select a page in the Object Gallery dialog by name. (See SelectPage(UINT) to select a page by index.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the selected page, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szPageName}
{\f8\fs22 : A pointer to a string that contains the name of the page.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 288\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_ActivateCategory}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; ActivateCategory}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::ActivateCategory}}{\f8\fs22  }
{\f8\fs32 LPTSTR UIOGalleryDlg::ActivateCategory( UINT nPage ) }
{\f8\fs22 \par \par Select a page in the Object Gallery dialog by index. (See SelectPage(LPCSTR) to select a page by name.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the selected page, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 nPage}
{\f8\fs22 : An integer that contains the 1-based index of the page to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 328\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_CreateCategory}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; CreateCategory}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::CreateCategory}}{\f8\fs22  }
{\f8\fs32 HWND UIOGalleryDlg::CreateCategory( CString& strCategory )}
{\f8\fs22 \par \par Close the Object Gallery Customize dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the Object Gallery dialog, if successful; the HWND of the Object Gallery Customize dialog otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 346\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_DeleteOGDatabase}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; DeleteOGDatabase}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::DeleteOGDatabase}}{\f8\fs22  }
{\f8\fs32 BOOL UIOGalleryDlg::DeleteOGDatabase(CString& strPath) }
{\f8\fs22 \par \par Delete the Object Gallery database file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 strPath}
{\f8\fs22 : A CString that contains the name of the path to the IDE\Template directory\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 452\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_RenameOGDatabase}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; RenameOGDatabase}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::RenameOGDatabase}}{\f8\fs22  }
{\f8\fs32 BOOL UIOGalleryDlg::RenameOGDatabase(CString& strPath, CString& strNewName, ROGD_VAL nRenameVal /* = ROGD_REPLACE */) }
{\f8\fs22 \par \par Delete the Object Gallery database file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 strPath}
{\f8\fs22 : A CString that contains the name of the path to the IDE\Template directory\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 466\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_GetGalleryDir}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; GetGalleryDir}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::GetGalleryDir}}{\f8\fs22  }
{\f8\fs32 LPTSTR UIOGalleryDlg::GetGalleryDir(CString& strPath) }
{\f8\fs22 \par \par Delete the Object Gallery database file.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 strPath}
{\f8\fs22 : A CString that contains the name of the path to the IDE\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 504\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIOGalleryDlg_VerifyFilesInDir}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIOGalleryDlg; VerifyFilesInDir}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIOGalleryDlg::VerifyFilesInDir}}{\f8\fs22  }
{\f8\fs32 BOOL UIOGalleryDlg::VerifyFilesInDir(CStringList* pFileList, CString& strPath) }
{\f8\fs22 \par \par The description for this function is not available. Please see the appropriate component owner for a description of this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The return value description for this function is not available.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 Param}
{\f8\fs22 : The parameter description(s) for this function are not available.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uogaldlg.cpp, 528\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjectFiles_AddFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjectFiles; AddFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjectFiles::AddFile}}{\f8\fs22  }
{\f8\fs32 BOOL UIProjectFiles::AddFile(LPCSTR szFileName)}
{\f8\fs22 \par \par Add a file to the current project via the Add Files dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFileName}
{\f8\fs22 : A pointer to a string that contains the name of the file to add.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjfile.cpp, 27\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjectFiles_AddAllFiles}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjectFiles; AddAllFiles}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjectFiles::AddAllFiles}}{\f8\fs22  }
{\f8\fs32 BOOL UIProjectFiles::AddAllFiles(LPCSTR szType /* UIPF_FOT_SOURCE */, LPCSTR szProjFilesPath /* NULL */)   }
{\f8\fs22 \par \par Add all files (filtered by the given filter) in the directory specified to the current project via the Add Files dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szType}
{\f8\fs22 : A pointer to a string that contains the types of files to filter. This string is one of the strings found in the Files of Type combo box in the Add Files dialog.\par \par }
{\i\f8\fs22 szProjFilesPath}
{\f8\fs22 : A pointer to a string that contains the path to the directory that contains the files to be added.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjfile.cpp, 42\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjectFiles_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjectFiles; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjectFiles::Close}}{\f8\fs22  }
{\f8\fs32 HWND UIProjectFiles::Close(void)}
{\f8\fs22 \par \par Close the Add Files dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 NULL if successful; the HWND of the Add Files dialog otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjfile.cpp, 74\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_Display}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; Display}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::Display}}{\f8\fs22  }
{\f8\fs32 HWND UIProjOptionsTabDlg::Display() }
{\f8\fs22 \par \par Bring up the Project Settings tabbed dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the dialog, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 31\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_SelectFile }
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; SelectFile }}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::SelectFile }}{\f8\fs22  }
{\f8\fs32 int UIProjOptionsTabDlg::SelectFile (CString szFile,CString szGrp, CString szTarget ) }
{\f8\fs22 \par \par Select a file in the Project Settings dialog to work with.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFile}
{\f8\fs22 : A CString that contains the name of the file to select.\par \par }
{\i\f8\fs22 szGrp}
{\f8\fs22 : A CString that contains the name of the group that contains the file to select.\par \par }
{\i\f8\fs22 szTarget}
{\f8\fs22 : A CString that contains the name of the target that contains the file to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 50\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_SelectGroup}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; SelectGroup}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::SelectGroup}}{\f8\fs22  }
{\f8\fs32 int UIProjOptionsTabDlg::SelectGroup(CString szGrp, CString szTarget) }
{\f8\fs22 \par \par Select a group in the Project Settings dialog to work with.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szGrp}
{\f8\fs22 : A CString that contains the name of the group to select.\par \par }
{\i\f8\fs22 szTarget}
{\f8\fs22 : A CString that contains the name of the target that contains the group to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 66\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_SelectTarget}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; SelectTarget}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::SelectTarget}}{\f8\fs22  }
{\f8\fs32 int UIProjOptionsTabDlg::SelectTarget(CString szTarget) }
{\f8\fs22 \par \par Select a target in the Project Settings dialog to work with.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szTarget}
{\f8\fs22 : A CString that contains the name of the target to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 80\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_SetCompilerOption}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; SetCompilerOption}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::SetCompilerOption}}{\f8\fs22  }
{\f8\fs32 int UIProjOptionsTabDlg::SetCompilerOption(UINT iCtrlId, int iNewValue, PROJSET_TAB tabCompiler /* = TAB_CPLUSPLUS */)}
{\f8\fs22 \par \par Set a value-based compiler option for the currently selected target, group, or file in the Project Settings dialog. (See SetCompilerOption(UINT, LPCSTR) to set text-based compiler options.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control for the option to set.\par \par }
{\i\f8\fs22 iNewValue}
{\f8\fs22 : An integer that contains the new value of the option.\par \par }
{\i\f8\fs22 tabCompiler}
{\f8\fs22 : A TAB specifier for the compiler of which to set the option.  See UIProjOptionsTabDlg::ShowCompilerTab() for a list of valid compiler tabs.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 122\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_SetCompilerOption}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; SetCompilerOption}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::SetCompilerOption}}{\f8\fs22  }
{\f8\fs32 int UIProjOptionsTabDlg::SetCompilerOption(UINT iCtrlId, LPCSTR szNewValue, PROJSET_TAB tabCompiler /* = TAB_CPLUSPLUS */)}
{\f8\fs22 \par \par Set a text-based compiler option for the currently selected target, group, or file in the Project Settings dialog. (See SetCompilerOption(UINT, int) to set value-based compiler options.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control for the option to set.\par \par }
{\i\f8\fs22 szNewValue}
{\f8\fs22 : A pointer to a string that contains the new value of the option.\par \par }
{\i\f8\fs22 tabCompiler}
{\f8\fs22 : A TAB specifier for the compiler of which to set the option.  See UIProjOptionsTabDlg::ShowCompilerTab() for a list of valid compiler tabs.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 137\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_GetCompilerOption}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; GetCompilerOption}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::GetCompilerOption}}{\f8\fs22  }
{\f8\fs32 int UIProjOptionsTabDlg::GetCompilerOption( UINT iCtrlId, PROJSET_TAB tabCompiler /* = TAB_CPLUSPLUS */ )}
{\f8\fs22 \par \par Get a value-based compiler option for the currently selected target, group, or file in the Project Settings dialog. (See GetCompilerOptionStr(UINT) to get text-based compiler options.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the value of the compiler option.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control for the option to get.\par \par }
{\i\f8\fs22 tabCompiler}
{\f8\fs22 : A TAB specifier for the compiler of which to get the option.  See UIProjOptionsTabDlg::ShowCompilerTab() for a list of valid compiler tabs.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 152\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_GetCompilerOptionStr}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; GetCompilerOptionStr}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::GetCompilerOptionStr}}{\f8\fs22  }
{\f8\fs32 LPCSTR UIProjOptionsTabDlg::GetCompilerOptionStr( UINT iCtrlId, PROJSET_TAB tabCompiler /* = TAB_CPLUSPLUS */ )}
{\f8\fs22 \par \par Get a text-based compiler option for the currently selected target, group, or file in the Project Settings dialog. (See GetCompilerOption(UINT) to get value-based compiler options.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a string that contains the value of the compiler option.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control for the option to get.\par \par }
{\i\f8\fs22 tabCompiler}
{\f8\fs22 : A TAB specifier for the compiler of which to get the option.  See UIProjOptionsTabDlg::ShowCompilerTab() for a list of valid compiler tabs.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 166\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_ShowCompilerTab}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; ShowCompilerTab}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::ShowCompilerTab}}{\f8\fs22  }
{\f8\fs32 HWND UIProjOptionsTabDlg::ShowCompilerTab(PROJSET_TAB tabCompiler /* = TAB_CPLUSPLUS */)}
{\f8\fs22 \par \par Display the compiler options tab in the Project Settings dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the compiler options tab, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 tabCompiler}
{\f8\fs22 : A TAB specifier for the compiler to show.  Can be one of TAB_CPLUSPLUS or TAB_FORTRAN.  TAB_COMPILER can also be used and is equivalent to TAB_CPLUSPLUS for backwards compatibility.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 180\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_SetLinkerOption}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; SetLinkerOption}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::SetLinkerOption}}{\f8\fs22  }
{\f8\fs32 int UIProjOptionsTabDlg::SetLinkerOption(UINT iCtrlId, int iNewValue)}
{\f8\fs22 \par \par Set a value-based linker option for the currently selected target, group, or file in the Project Settings dialog. (See SetLinkerOption(UINT, LPCSTR) to set text-based linker options.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control for the option to set.\par \par }
{\i\f8\fs22 iNewValue}
{\f8\fs22 : An integer that contains the new value of the option.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 223\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_SetLinkerOption}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; SetLinkerOption}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::SetLinkerOption}}{\f8\fs22  }
{\f8\fs32 int UIProjOptionsTabDlg::SetLinkerOption(UINT iCtrlId, LPCSTR szNewValue)}
{\f8\fs22 \par \par Set a text-based linker option for the currently selected target, group, or file in the Project Settings dialog. (See SetLinkerOption(UINT, int) to set value-based linker options.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control for the option to set.\par \par }
{\i\f8\fs22 szNewValue}
{\f8\fs22 : A pointer to a string that contains the new value of the option.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 237\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_GetLinkerOption}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; GetLinkerOption}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::GetLinkerOption}}{\f8\fs22  }
{\f8\fs32 int UIProjOptionsTabDlg::GetLinkerOption( UINT iCtrlId )}
{\f8\fs22 \par \par Get a value-based linker option for the currently selected target, group, or file in the Project Settings dialog. (See GetLinkerOptionStr(UINT) to get text-based linker options.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the value of the linker option.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control for the option to get.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 251\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_GetLinkerOptionStr}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; GetLinkerOptionStr}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::GetLinkerOptionStr}}{\f8\fs22  }
{\f8\fs32 LPCSTR UIProjOptionsTabDlg::GetLinkerOptionStr( UINT iCtrlId )}
{\f8\fs22 \par \par Get a text-based linker option for the currently selected target, group, or file in the Project Settings dialog. (See GetLinkerOptionStr(UINT) to get value-based linker options.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a string that contains the value of the linker option.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 iCtrlId}
{\f8\fs22 : An integer that contains the ID of the control for the option to get.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 264\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIProjOptionsTabDlg_ShowLinkerTab}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIProjOptionsTabDlg; ShowLinkerTab}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIProjOptionsTabDlg::ShowLinkerTab}}{\f8\fs22  }
{\f8\fs32 HWND UIProjOptionsTabDlg::ShowLinkerTab(void)}
{\f8\fs22 \par \par Display the linker options tab in the Project Settings dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the linker options tab, if successful; NULL otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uprjtdlg.cpp, 277\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_SetBreakpoint}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; SetBreakpoint}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::SetBreakpoint}}{\f8\fs22  }
{\f8\fs32 bp* COBreakpoints::SetBreakpoint(int line, LPCSTR source, int passcount /* 0 */)}
{\f8\fs22 \par \par Set a breakpoint on the given line in the specified source file with the given pass count.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a bp object that is used as a handle to the breakpoint. Store this pointer to reference the breakpoint later.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : An integer that contains the line to set the breakpoint on.\par \par }
{\i\f8\fs22 source}
{\f8\fs22 : A pointer to a string that contains the name of the source file to set the breakpoint in. NULL means use the current file.\par \par }
{\i\f8\fs22 passcount}
{\f8\fs22 : An integer that contains the number of times to pass this breakpoint before breaking. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 29\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_SetBreakpoint}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; SetBreakpoint}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::SetBreakpoint}}{\f8\fs22  }
{\f8\fs32 bp* COBreakpoints::SetBreakpoint(LPCSTR function, LPCSTR source, int passcount /* 0 */)}
{\f8\fs22 \par \par Set a breakpoint on the given function in the specified source file with the given pass count.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a bp object that is used as a handle to the breakpoint. Store this pointer to reference the breakpoint later.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the name of the function to set the breakpoint on.\par \par }
{\i\f8\fs22 source}
{\f8\fs22 : A pointer to a string that contains the name of the source file to set the breakpoint in. NULL means use the current file.\par \par }
{\i\f8\fs22 passcount}
{\f8\fs22 : An integer that contains the number of times to pass this breakpoint before breaking. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 48\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_SetBreakpoint}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; SetBreakpoint}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::SetBreakpoint}}{\f8\fs22  }
{\f8\fs32 bp* COBreakpoints::SetBreakpoint(int line, LPCSTR expression, int option, int length, int passcount /* 0 */)}
{\f8\fs22 \par \par Set an expression breakpoint on the given line with the given pass count.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a bp object that is used as a handle to the breakpoint. Store this pointer to reference the breakpoint later.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : An integer that contains the line to set the breakpoint on.\par \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to use in the breakpoint. Expression is specified by the following form: {function name, source filename, EXE filename} expression.\par \par }
{\i\f8\fs22 option}
{\f8\fs22 : A value that specifies the type of expression breakpoint to set: COBP_TYPE_IF_EXP_TRUE, COBP_TYPE_IF_EXP_CHANGED.\par \par }
{\i\f8\fs22 length}
{\f8\fs22 : An integer that contains the number of elements to watch.\par \par }
{\i\f8\fs22 passcount}
{\f8\fs22 : An integer that contains the number of times to pass this breakpoint before breaking. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 68\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_SetBreakpoint}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; SetBreakpoint}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::SetBreakpoint}}{\f8\fs22  }
{\f8\fs32 bp* COBreakpoints::SetBreakpoint(int line, LPCSTR source, LPCSTR expression, int option, int length, int passcount /* 0 */)}
{\f8\fs22 \par \par Set an expression breakpoint on the given line in the specified source file with the given pass count.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a bp object that is used as a handle to the breakpoint. Store this pointer to reference the breakpoint later.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : An integer that contains the line to set the breakpoint on.\par \par }
{\i\f8\fs22 source}
{\f8\fs22 : A pointer to a string that contains the name of the source file to set the breakpoint in. NULL means use the current file.\par \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to use in the breakpoint. Expression is specified by the following form: {function name, source filename, EXE filename} expression.\par \par }
{\i\f8\fs22 option}
{\f8\fs22 : A value that specifies the type of expression breakpoint to set: COBP_TYPE_IF_EXP_TRUE, COBP_TYPE_IF_EXP_CHANGED.\par \par }
{\i\f8\fs22 length}
{\f8\fs22 : An integer that contains the number of elements to watch.\par \par }
{\i\f8\fs22 passcount}
{\f8\fs22 : An integer that contains the number of times to pass this breakpoint before breaking. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 88\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_SetBreakpoint}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; SetBreakpoint}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::SetBreakpoint}}{\f8\fs22  }
{\f8\fs32 bp* COBreakpoints::SetBreakpoint(LPCSTR function, LPCSTR expression, int option, int length, int passcount /* 0 */)}
{\f8\fs22 \par \par Set an expression breakpoint on the given function with the given pass count.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a bp object that is used as a handle to the breakpoint. Store this pointer to reference the breakpoint later.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the name of the function to set the breakpoint on.\par \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to use in the breakpoint. Expression is specified by the following form: {function name, source filename, EXE filename} expression.\par \par }
{\i\f8\fs22 option}
{\f8\fs22 : A value that specifies the type of expression breakpoint to set: COBP_TYPE_IF_EXP_TRUE, COBP_TYPE_IF_EXP_CHANGED.\par \par }
{\i\f8\fs22 length}
{\f8\fs22 : An integer that contains the number of elements to watch.\par \par }
{\i\f8\fs22 passcount}
{\f8\fs22 : An integer that contains the number of times to pass this breakpoint before breaking. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 109\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_SetBreakpoint}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; SetBreakpoint}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::SetBreakpoint}}{\f8\fs22  }
{\f8\fs32 bp* COBreakpoints::SetBreakpoint(LPCSTR function, LPCSTR source, LPCSTR expression, int option, int length, int passcount /* 0 */)}
{\f8\fs22 \par \par Set an expression breakpoint on the given function in the specified source file with the given pass count.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a bp object that is used as a handle to the breakpoint. Store this pointer to reference the breakpoint later.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the name of the function to set the breakpoint on.\par \par }
{\i\f8\fs22 source}
{\f8\fs22 : A pointer to a string that contains the name of the source file to set the breakpoint in. NULL means use the current file.\par \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to use in the breakpoint. Expression is specified by the following form: {function name, source filename, EXE filename} expression.\par \par }
{\i\f8\fs22 option}
{\f8\fs22 : A value that specifies the type of expression breakpoint to set: COBP_TYPE_IF_EXP_TRUE, COBP_TYPE_IF_EXP_CHANGED.\par \par }
{\i\f8\fs22 length}
{\f8\fs22 : An integer that contains the number of elements to watch.\par \par }
{\i\f8\fs22 passcount}
{\f8\fs22 : An integer that contains the number of times to pass this breakpoint before breaking. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 126\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_SetBreakpoint}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; SetBreakpoint}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::SetBreakpoint}}{\f8\fs22  }
{\f8\fs32 bp* COBreakpoints::SetBreakpoint(LPCSTR expression, int option, int length, int passcount /* 0 */)}
{\f8\fs22 \par \par Set an expression breakpoint with the given pass count.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a bp object that is used as a handle to the breakpoint. Store this pointer to reference the breakpoint later.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to use in the breakpoint. Expression is specified by the following form: {function name, source filename, EXE filename} expression.\par \par }
{\i\f8\fs22 option}
{\f8\fs22 : A value that specifies the type of expression breakpoint to set: COBP_TYPE_IF_EXP_TRUE, COBP_TYPE_IF_EXP_CHANGED.\par \par }
{\i\f8\fs22 length}
{\f8\fs22 : An integer that contains the number of elements to watch.\par \par }
{\i\f8\fs22 passcount}
{\f8\fs22 : An integer that contains the number of times to pass this breakpoint before breaking. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 145\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_SetBreakpoint}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; SetBreakpoint}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::SetBreakpoint}}{\f8\fs22  }
{\f8\fs32 bp* COBreakpoints::SetBreakpoint(LPCSTR location /* NULL */, int passcount /* 0 */)}
{\f8\fs22 \par \par Set breakpoint at the given location with the given pass count.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a bp object that is used as a handle to the breakpoint. Store this pointer to reference the breakpoint later.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 location}
{\f8\fs22 : A pointer to a string that specifies the location of the breakpoint. Location is specified by the following form: {function name, source file name, EXE filename} .line. NULL means set the breakpoint at the current source location. (Default value is NULL.)\par \par }
{\i\f8\fs22 passcount}
{\f8\fs22 : An integer that contains the number of times to pass this breakpoint before breaking. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 157\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_SetBreakOnExpr}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; SetBreakOnExpr}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::SetBreakOnExpr}}{\f8\fs22  }
{\f8\fs32 bp* COBreakpoints::SetBreakOnExpr(LPCSTR location, LPCSTR expression, int expr_type, int length /* 1 */, int passcount /* 0 */)}
{\f8\fs22 \par \par Set an expression breakpoint at the given location with the given pass count.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a bp object that is used as a handle to the breakpoint. Store this pointer to reference the breakpoint later.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 location}
{\f8\fs22 : A pointer to a string that specifies the location of the breakpoint. Location is specified by the following form: {function name, source filename, EXE filename} .line.\par \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to use in the breakpoint. Expression is specified by the following form: {function name, source filename, EXE filename} expression.\par \par }
{\i\f8\fs22 expr_type}
{\f8\fs22 : A value that specifies the type of expression breakpoint to set: COBP_TYPE_IF_EXP_TRUE, COBP_TYPE_IF_EXP_CHANGED.\par \par }
{\i\f8\fs22 length}
{\f8\fs22 : An integer that contains the number of elements to watch. (Default value is 1.)\par \par }
{\i\f8\fs22 passcount}
{\f8\fs22 : An integer that contains the number of times to pass this breakpoint before breaking. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 202\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_SetBreakOnMsg}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; SetBreakOnMsg}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::SetBreakOnMsg}}{\f8\fs22  }
{\f8\fs32 bp* COBreakpoints::SetBreakOnMsg(LPCSTR location, LPCSTR message, int msg_type, int passcount /* 0 */)}
{\f8\fs22 \par \par Set a message breakpoint at the given location with the given pass count.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a bp object that is used as a handle to the breakpoint. Store this pointer to reference the breakpoint later.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 location}
{\f8\fs22 : A pointer to a string that specifies the location of the breakpoint. Location is specified by the following form: {function name, source filename, EXE filename} .line.\par \par }
{\i\f8\fs22 message}
{\f8\fs22 : A pointer to a string that contains the name of the message to break on.\par \par }
{\i\f8\fs22 msg_type}
{\f8\fs22 : An integer that specifies the type of message. This parameter is NYI.\par \par }
{\i\f8\fs22 passcount}
{\f8\fs22 : An integer that contains the number of times to pass this breakpoint before breaking. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 242\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_SetBreakOnExpr}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; SetBreakOnExpr}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::SetBreakOnExpr}}{\f8\fs22  }
{\f8\fs32 bp* COBreakpoints::SetBreakOnExpr(LPCSTR expression, int expr_type, int length /* 1 */, int passcount /* 0 */)}
{\f8\fs22 \par \par Set an expression breakpoint with the given pass count.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A pointer to a bp object that is used as a handle to the breakpoint. Store this pointer to reference the breakpoint later.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to use in the breakpoint. Expression is specified by the following form: {function name, source filename, EXE filename} expression.\par \par }
{\i\f8\fs22 expr_type}
{\f8\fs22 : A value that specifies the type of expression breakpoint to set: COBP_TYPE_IF_EXP_TRUE, COBP_TYPE_IF_EXP_CHANGED.\par \par }
{\i\f8\fs22 length}
{\f8\fs22 : An integer that contains the number of elements to watch. (Default value is 1.)\par \par }
{\i\f8\fs22 passcount}
{\f8\fs22 : An integer that contains the number of times to pass this breakpoint before breaking. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 267\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_EnableBreakpoint}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; EnableBreakpoint}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::EnableBreakpoint}}{\f8\fs22  }
{\f8\fs32 BOOL COBreakpoints::EnableBreakpoint(bp* pbp)}
{\f8\fs22 \par \par Enable the breakpoint specified by the bp object given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 pbp}
{\f8\fs22 : A pointer to a bp object that specifies the breakpoint to enable.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 301\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_EnableAllBreakpoints}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; EnableAllBreakpoints}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::EnableAllBreakpoints}}{\f8\fs22  }
{\f8\fs32 BOOL COBreakpoints::EnableAllBreakpoints(void)}
{\f8\fs22 \par \par Enable all breakpoints.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 322\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_DisableBreakpoint}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; DisableBreakpoint}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::DisableBreakpoint}}{\f8\fs22  }
{\f8\fs32 BOOL COBreakpoints::DisableBreakpoint(bp* pbp)}
{\f8\fs22 \par \par Disable the breakpoint specified by the bp object given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 pbp}
{\f8\fs22 : A pointer to a bp object that specifies the breakpoint to disable.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 350\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_DisableAllBreakpoints}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; DisableAllBreakpoints}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::DisableAllBreakpoints}}{\f8\fs22  }
{\f8\fs32 BOOL COBreakpoints::DisableAllBreakpoints(void)}
{\f8\fs22 \par \par Disable all breakpoints.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 371\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_RemoveBreakpoint}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; RemoveBreakpoint}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::RemoveBreakpoint}}{\f8\fs22  }
{\f8\fs32 BOOL COBreakpoints::RemoveBreakpoint(bp* pbp)}
{\f8\fs22 \par \par Remove the breakpoint specified by the bp object given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 pbp}
{\f8\fs22 : A pointer to a bp object that specifies the breakpoint to remove.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 400\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBreakpoints_ClearAllBreakpoints}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBreakpoints; ClearAllBreakpoints}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBreakpoints::ClearAllBreakpoints}}{\f8\fs22  }
{\f8\fs32 BOOL COBreakpoints::ClearAllBreakpoints(void)}
{\f8\fs22 \par \par Remove all breakpoints.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 426\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__VerifyBreakpointHit}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} VerifyBreakpointHit}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} VerifyBreakpointHit}}{\f8\fs22  }
{\f8\fs32 BOOL VerifyBreakpointHit(void)}
{\f8\fs22 \par \par Verify that a breakpoint was hit. This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobp.cpp, 449\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_GotoNthDefinition}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; GotoNthDefinition}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::GotoNthDefinition}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::GotoNthDefinition(int index, LPCSTR name, int ambiguity /*= NoAmbiguity*/)}
{\f8\fs22 \par \par Go to the n-th definition of the given symbol.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 index}
{\f8\fs22 : An integer that specifies the n-th definition to go to.\par \par }
{\i\f8\fs22 name}
{\f8\fs22 : A pointer to a string that contains the name of the symbol to go to.\par \par }
{\i\f8\fs22 ambiguity}
{\f8\fs22 : An integer that specifies the index of the symbol in the list of ambiguous symbols, if applicable. If ambiguity is not expected, set this value to NoAmbiguity. (Default value is NoAmbiguity.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 38\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_GotoNthReference}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; GotoNthReference}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::GotoNthReference}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::GotoNthReference(int index, LPCSTR name, int ambiguity /*= NoAmbiguity*/)}
{\f8\fs22 \par \par Go to the n-th reference of the given symbol.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 index}
{\f8\fs22 : An integer that specifies the n-th reference to go to.\par \par }
{\i\f8\fs22 name}
{\f8\fs22 : A pointer to a string that contains the name of the symbol to go to.\par \par }
{\i\f8\fs22 ambiguity}
{\f8\fs22 : An integer that specifies the index of the symbol in the list of ambiguous symbols, if applicable. If ambiguity is not expected, set this value to NoAmbiguity. (Default value is NoAmbiguity.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 80\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_NextDefinition}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; NextDefinition}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::NextDefinition}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::NextDefinition(void)}
{\f8\fs22 \par \par Go to the next definition of the currently selected symbol.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 119\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_PrevDefinition}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; PrevDefinition}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::PrevDefinition}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::PrevDefinition(void)}
{\f8\fs22 \par \par Go to the previous definition of the currently selected symbol.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 128\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_NextReference}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; NextReference}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::NextReference}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::NextReference(void)}
{\f8\fs22 \par \par Go to the next reference of the currently selected symbol.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 138\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_PrevReference}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; PrevReference}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::PrevReference}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::PrevReference(void)}
{\f8\fs22 \par \par Go to the previous reference of the currently selected symbol.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 147\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_PopContext}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; PopContext}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::PopContext}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::PopContext(void)}
{\f8\fs22 \par \par Pop context to the previous cursor location/context.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 156\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_GetMatches}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; GetMatches}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::GetMatches}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::GetMatches( CStringArray& matches, CString name, QueryType type, int filter /*= NONE*/)}
{\f8\fs22 \par \par Get the list of symbols that match the name specified when the specified query is performed.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 matches}
{\f8\fs22 : A CStringArray reference that will contain the list of symbols that match the symbols specified by name.\par \par }
{\i\f8\fs22 name}
{\f8\fs22 : A CString that contains the name of the symbol.\par \par }
{\i\f8\fs22 type}
{\f8\fs22 : A QueryType value that specifies the type of query to perform: DefRef, FileOutline, BaseClass, DerivedClass, CallGraph, CallerGraph.\par \par }
{\i\f8\fs22 filter}
{\f8\fs22 : A bit field that specifies the type of filter to apply to the query: NONE, CLASSES, FUNCTIONS, DATA, MACROS, TYPES. (Default value is NONE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 176\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_GetDefinitions}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; GetDefinitions}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::GetDefinitions}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::GetDefinitions( CStringArray& definitions, CString name, QueryType type, int filter /*= NONE*/, int ambiguity /*= NoAmbiguity*/)}
{\f8\fs22 \par \par Get the list of definitions for a given symbol when a specified query is performed.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 definitions}
{\f8\fs22 : A CStringArray reference that will contain the list of definitions for the given symbol.\par \par }
{\i\f8\fs22 name}
{\f8\fs22 : A CString that contains the name of the symbol.\par \par }
{\i\f8\fs22 type}
{\f8\fs22 : A QueryType value that specifies the type of query to perform: DefRef, FileOutline, BaseClass, DerivedClass, CallGraph, CallerGraph.\par \par }
{\i\f8\fs22 filter}
{\f8\fs22 : A bit field that specifies the type of filter to apply to the query: NONE, CLASSES, FUNCTIONS, DATA, MACROS, TYPES. (Default value is NONE.)\par \par }
{\i\f8\fs22 ambiguity}
{\f8\fs22 : An integer that specifies the index of the symbol in the list of ambiguous symbols, if applicable. If ambiguity is not expected, set this value to NoAmbiguity. (Default value is NoAmbiguity.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 233\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_GetReferences}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; GetReferences}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::GetReferences}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::GetReferences( CStringArray& references, CString name, QueryType type, int filter /*= NONE*/, int ambiguity /*= NoAmbiguity*/)}
{\f8\fs22 \par \par Get the list of references for a given symbol when a specified query is performed.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 references}
{\f8\fs22 : A CStringArray reference that will contain the list of references for the given symbol.\par \par }
{\i\f8\fs22 name}
{\f8\fs22 : A CString that contains the name of the symbol.\par \par }
{\i\f8\fs22 type}
{\f8\fs22 : A QueryType value that specifies the type of query to perform: DefRef, FileOutline, BaseClass, DerivedClass, CallGraph, CallerGraph.\par \par }
{\i\f8\fs22 filter}
{\f8\fs22 : A bit field that specifies the type of filter to apply to the query: NONE, CLASSES, FUNCTIONS, DATA, MACROS, TYPES. (Default value is NONE.)\par \par }
{\i\f8\fs22 ambiguity}
{\f8\fs22 : An integer that specifies the index of the symbol in the list of ambiguous symbols, if applicable. If ambiguity is not expected, set this value to NoAmbiguity. (Default value is NoAmbiguity.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 277\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_GetLocations}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; GetLocations}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::GetLocations}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::GetLocations(CStringArray& defs, CStringArray& refs)}
{\f8\fs22 \par \par Get the current list of definitnios and references and put them in separate lists.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 defs}
{\f8\fs22 : A CStringArray reference that will contain the list of current definitions. may be NULL if refs isn't.\par \par }
{\i\f8\fs22 refs}
{\f8\fs22 : A CStringArray reference that will contain the list of current references. may be NULL if defs isn't.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 318\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_GetMembers}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; GetMembers}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::GetMembers}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::GetMembers( CStringArray& members, CString name, QueryType type, int filter /*= NONE*/, int ambiguity /*= NoAmbiguity*/)}
{\f8\fs22 \par \par Get the list of members for a given symbol when a specified query is performed.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 members}
{\f8\fs22 : A CStringArray reference that will contain the list of members for the given symbol.\par \par }
{\i\f8\fs22 name}
{\f8\fs22 : A CString that contains the name of the symbol.\par \par }
{\i\f8\fs22 type}
{\f8\fs22 : A QueryType value that specifies the type of query to perform: DefRef, FileOutline, BaseClass, DerivedClass, CallGraph, CallerGraph.\par \par }
{\i\f8\fs22 filter}
{\f8\fs22 : A bit field that specifies the type of filter to apply to the query: NONE, CLASSES, FUNCTIONS, DATA, MACROS, TYPES. (Default value is NONE.)\par \par }
{\i\f8\fs22 ambiguity}
{\f8\fs22 : An integer that specifies the index of the symbol in the list of ambiguous symbols, if applicable. If ambiguity is not expected, set this value to NoAmbiguity. (Default value is NoAmbiguity.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 365\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_GetFirstLevelBranches}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; GetFirstLevelBranches}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::GetFirstLevelBranches}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::GetFirstLevelBranches( CStringArray& branches, CString name, QueryType type, int filter /*= NONE*/, int ambiguity /*= NoAmbiguity*/)}
{\f8\fs22 \par \par Get the list of first level branches for a given symbol when a specified query is performed.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 branches}
{\f8\fs22 : A CStringArray reference that will contain the list of first level branches for the given symbol.\par \par }
{\i\f8\fs22 name}
{\f8\fs22 : A CString that contains the name of the symbol.\par \par }
{\i\f8\fs22 type}
{\f8\fs22 : A QueryType value that specifies the type of query to perform: DefRef, FileOutline, BaseClass, DerivedClass, CallGraph, CallerGraph.\par \par }
{\i\f8\fs22 filter}
{\f8\fs22 : A bit field that specifies the type of filter to apply to the query: NONE, CLASSES, FUNCTIONS, DATA, MACROS, TYPES. (Default value is NONE.)\par \par }
{\i\f8\fs22 ambiguity}
{\f8\fs22 : An integer that specifies the index of the symbol in the list of ambiguous symbols, if applicable. If ambiguity is not expected, set this value to NoAmbiguity. (Default value is NoAmbiguity.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 431\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_VerifyNavigation}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; VerifyNavigation}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::VerifyNavigation}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::VerifyNavigation(LPCSTR file_line)}
{\f8\fs22 \par \par Verify browser navigation navigated to the correct file and line number.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 file_line}
{\f8\fs22 : A pointer to a string that contains the file and line number to verify. The form of the string is: filename(line); example: f:\cafe\cafe\wb\cobrowse.h(33).\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 479\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COBrowse_VerifyMultDefRefMatches}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COBrowse; VerifyMultDefRefMatches}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COBrowse::VerifyMultDefRefMatches}}{\f8\fs22  }
{\f8\fs32 BOOL COBrowse::VerifyMultDefRefMatches(SYM_DEFS_REFS *expected, LPCSTR name)}
{\f8\fs22 \par \par Do def/ref query on name and verify all matches are listed along with correct defs/refs for each.  order is not verified.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expected}
{\f8\fs22 : An array of SYM_DEFS_REFS objects containing all matches, defs, and refs expected in browser window.\par \par }
{\i\f8\fs22 name}
{\f8\fs22 : An LPCSTR that contains the name of the symbol to query (default is "").\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cobrowse.cpp, 512\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COCoProcessor_GetCPRegister}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COCoProcessor; GetCPRegister}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COCoProcessor::GetCPRegister}}{\f8\fs22  }
{\f8\fs32 CString COCoProcessor::GetCPRegister(int reg)}
{\f8\fs22 \par \par Get the value of one of the coprocessor's registers.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the value of the specified coprocessor's register.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 reg}
{\f8\fs22 : An integer that specifies the 1-based index into the set of coprocessor registers.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cocp.cpp, 31\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COCoProcessor_CPRegisterValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COCoProcessor; CPRegisterValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COCoProcessor::CPRegisterValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL COCoProcessor::CPRegisterValueIs(int reg, LPCSTR value)}
{\f8\fs22 \par \par Determine whether the given coprocessor register matches the given value.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the coprocessor's register matches the given value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 reg}
{\f8\fs22 : An integer that specifies the 1-based index into the set of coprocessor registers.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a string that contains the expected value of the specified register.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cocp.cpp, 46\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COCoProcessor_SetCPRegister}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COCoProcessor; SetCPRegister}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COCoProcessor::SetCPRegister}}{\f8\fs22  }
{\f8\fs32 BOOL COCoProcessor::SetCPRegister(int reg, LPCSTR value)}
{\f8\fs22 \par \par Set the value of one of the coprocessor's registers.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 reg}
{\f8\fs22 : An integer that specifies the 1-based index into the set of coprocessor registers.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a string that contains the value to set the specified register to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cocp.cpp, 66\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODAM_GotoSymbol}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODAM; GotoSymbol}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODAM::GotoSymbol}}{\f8\fs22  }
{\f8\fs32 int CODAM::GotoSymbol(LPCSTR symbol)}
{\f8\fs22 \par \par Navigate to a specified symbol in the disassembly code.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the symbol to navigate to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codam.cpp, 32\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODAM_GotoAddress}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODAM; GotoAddress}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODAM::GotoAddress}}{\f8\fs22  }
{\f8\fs32 int CODAM::GotoAddress(int address)}
{\f8\fs22 \par \par Navigate to an address in the disassembly code.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address to navigate to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codam.cpp, 44\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODAM_InstructionIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODAM; InstructionIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODAM::InstructionIs}}{\f8\fs22  }
{\f8\fs32 BOOL CODAM::InstructionIs(LPCSTR inst)}
{\f8\fs22 \par \par Determine whether the instruction at the current location in the diassasembly code matches the given instruction.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the instruction at the current location in the disassembly code matches the given instruction (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 inst}
{\f8\fs22 : A pointer to a string that contains the instruction to compare to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codam.cpp, 57\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODAM_GetInstruction}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODAM; GetInstruction}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODAM::GetInstruction}}{\f8\fs22  }
{\f8\fs32 CString CODAM::GetInstruction()}
{\f8\fs22 \par \par Get the instruction at the current location in the disassembly code.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the instruction.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codam.cpp, 75\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_Exec}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; Exec}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::Exec}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::Exec(BOOL (UIWBFrame::*stepfcn)(int), int count /*= 1*/, LPCSTR symbol /*= NULL*/, LPCSTR line /*= NULL*/, LPCSTR function /*= NULL*/, int WAIT /*= WAIT_FOR_BREAK*/, int ModeVerify /*= TRUE*/)}
{\f8\fs22 \par \par Execute a debugging operation and verify success.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 stepfcn}
{\f8\fs22 : A pointer to a function in UIWBFrame that takes an int. This parameter specifies the debugging operation to perform: 	Go, Restart, StopDebugging, Break, StepInto, StepOver, StepOut, StepToCursor, ToggleBreakpoint.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of times to perform this debugging operation. (Default value is 1.)\par \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the symbol to expect at the current line when the debugging operation is complete. NULL means don't verify based on symbol name. (Default value is NULL.)\par \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to a string that contains the text of the line to expect at the current line when the debugging operation is complete. NULL means don't verify based on line text. (Default value is NULL.)\par \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name to expect when the debugging operation is complete. NULL means don't verify based on function name. (Default value is NULL.)\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\i\f8\fs22 ModeVerify}
{\f8\fs22 : A Boolean value that is unused. This parameter is NYI. (Default value is TRUE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 51\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_ExecUntilLine}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; ExecUntilLine}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::ExecUntilLine}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::ExecUntilLine(BOOL (UIWBFrame::*stepfcn)(int), LPCSTR line, LPCSTR function /*= NULL*/, int WAIT /*= WAIT_FOR_BREAK*/)}
{\f8\fs22 \par \par Execute a debugging operation until the specified line is hit.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 stepfcn}
{\f8\fs22 : A pointer to a function in UIWBFrame that takes an int. This parameter specifies the debugging operation to perform: 	Go, Restart, StopDebugging, Break, StepInto, StepOver, StepOut, StepToCursor, ToggleBreakpoint.\par \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to a string that contains the text of the line to be found that will end the debugging operation.\par \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name that contains the line to wait for. This parameter augments line. NULL means only look for the given line. (Default value is NULL.)\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 92\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_ExecUntilFunc}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; ExecUntilFunc}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::ExecUntilFunc}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::ExecUntilFunc(BOOL (UIWBFrame::*stepfcn)(int), LPCSTR function, int WAIT /*= WAIT_FOR_BREAK*/)}
{\f8\fs22 \par \par Execute a debugging operation until the specified function is entered.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 stepfcn}
{\f8\fs22 : A pointer to a function in UIWBFrame that takes an int. This parameter specifies the debugging operation to perform: 	Go, Restart, StopDebugging, Break, StepInto, StepOver, StepOut, StepToCursor, ToggleBreakpoint.\par \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name to be found that will end the debugging operation.\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 123\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_ExecUntilSymbol}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; ExecUntilSymbol}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::ExecUntilSymbol}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::ExecUntilSymbol(BOOL (UIWBFrame::*stepfcn)(int), LPCSTR symbol, int WAIT)}
{\f8\fs22 \par \par Execute a debugging operation until the specified symbol is found at the current line.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 stepfcn}
{\f8\fs22 : A pointer to a function in UIWBFrame that takes an int. This parameter specifies the debugging operation to perform: 	Go, Restart, StopDebugging, Break, StepInto, StepOver, StepOut, StepToCursor, ToggleBreakpoint.\par \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the symbol name to be found that will end the debugging operation.\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 156\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_Go}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; Go}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::Go}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::Go(LPCSTR symbol, LPCSTR line /*= NULL*/, LPCSTR function /*= NULL*/, int WAIT /*= WAIT_FOR_BREAK*/)}
{\f8\fs22 \par \par Perform the Go debugging operation and verify the correct line/function is entered when the operation is complete.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the symbol to expect at the current line when the Go operation is complete.\par \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to a string that contains the text of the line to expect at the current line when the Go operation is complete. NULL means don't verify based on line text. (Default value is NULL.)\par \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name to expect when the Go operation is complete. NULL means don't verify based on function name. (Default value is NULL.)\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 190\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_Restart}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; Restart}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::Restart}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::Restart(LPCSTR path /*= NULL*/)}
{\f8\fs22 \par \par Perform the Restart debugging operation.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 path}
{\f8\fs22 : A pointer to a string that contains the path to the source files. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 202\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StopDebugging}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StopDebugging}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StopDebugging}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StopDebugging(int WAIT /*= ASSUME_NORMAL_TERMINATION*/)}
{\f8\fs22 \par \par Perform the Stop Debugging debugging operation.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is ASSUME_NORMAL_TERMINATION.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 232\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_Break}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; Break}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::Break}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::Break()}
{\f8\fs22 \par \par Perform the Break debugging operation.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 254\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StepInto}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StepInto}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StepInto}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StepInto(int count /* 1 */, LPCSTR symbol /* NULL */, LPCSTR line /* NULL */, LPCSTR function /* NULL */, int WAIT)}
{\f8\fs22 \par \par Perform the Step Into debugging operation and verify the correct line/function/symbol is entered when the operation is complete.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of times to perform this debugging operation. (Default value is 1.)\par \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the symbol to expect at the current line when the Step Into operation is complete. NULL means don't verify based on symbol name. (Default value is NULL.)\par \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to a string that contains the text of the line to expect at the current line when the Step Into operation is complete. NULL means don't verify based on line text. (Default value is NULL.)\par \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name to expect when the Step Into operation is complete. NULL means don't verify based on function name. (Default value is NULL.)\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 271\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StepIntoUntilLine}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StepIntoUntilLine}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StepIntoUntilLine}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StepIntoUntilLine(LPCSTR line, LPCSTR function /* NULL */, int WAIT /*= WAIT_FOR_BREAK*/)}
{\f8\fs22 \par \par Perform the Step Into debugging operation until the specified line/function is entered.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to a string that contains the text of the line to step into until reached.\par \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name that contains the line to wait for. This parameter augments line. NULL means only look for the given line. (Default value is NULL.)\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 284\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StepIntoUntilFunc}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StepIntoUntilFunc}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StepIntoUntilFunc}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StepIntoUntilFunc(LPCSTR function /* NULL */, int WAIT /*= WAIT_FOR_BREAK*/)}
{\f8\fs22 \par \par Perform the Step Into debugging operation until the specified function is entered.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name to be found that will end the step into operation.\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 296\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StepIntoUntilSymbol}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StepIntoUntilSymbol}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StepIntoUntilSymbol}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StepIntoUntilSymbol(LPCSTR symbol, int WAIT /*= WAIT_FOR_BREAK*/)}
{\f8\fs22 \par \par Perform the Step Into debugging operation until the specified symbol is reached.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the symbol name to be found that will end the step into operation.\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 308\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StepOver}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StepOver}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StepOver}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StepOver(int count /* 1 */, LPCSTR symbol /* NULL */, LPCSTR line /* NULL */, LPCSTR function /* NULL */, int WAIT)}
{\f8\fs22 \par \par Perform the Step Over debugging operation and verify the correct line/function/symbol is entered when the operation is complete.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of times to perform this debugging operation. (Default value is 1.)\par \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the symbol to expect at the current line when the Step Over operation is complete. NULL means don't verify based on symbol name. (Default value is NULL.)\par \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to a string that contains the text of the line to expect at the current line when the Step Over operation is complete. NULL means don't verify based on line text. (Default value is NULL.)\par \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name to expect when the Step Over operation is complete. NULL means don't verify based on function name. (Default value is NULL.)\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 324\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StepOverUntilLine}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StepOverUntilLine}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StepOverUntilLine}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StepOverUntilLine(LPCSTR line, LPCSTR function /* NULL */, int WAIT)}
{\f8\fs22 \par \par Perform the Step Over debugging operation until the specified line/function is entered.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to a string that contains the text of the line to be found that will end the step over operation.\par \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name that contains the line to wait for. This parameter augments line. NULL means only look for the given line. (Default value is NULL.)\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 337\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StepOverUntilFunc}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StepOverUntilFunc}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StepOverUntilFunc}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StepOverUntilFunc(LPCSTR function /* NULL */, int WAIT)}
{\f8\fs22 \par \par Perform the Step Over debugging operation until the specified function is entered.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name to be found that will end the step over operation.\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 349\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StepOverUntilSymbol}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StepOverUntilSymbol}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StepOverUntilSymbol}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StepOverUntilSymbol(LPCSTR symbol, int WAIT)}
{\f8\fs22 \par \par Perform the Step Over debugging operation until the specified symbol is reached.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the symbol name to be found that will end the step over operation.\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 361\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StepOut}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StepOut}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StepOut}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StepOut(int count /* 1 */, LPCSTR symbol /* NULL */, LPCSTR line /* NULL */, LPCSTR function /* NULL */, int WAIT)}
{\f8\fs22 \par \par Perform the Step Out debugging operation and verify the correct line/function/symbol is entered when the operation is complete.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of times to perform this debugging operation. (Default value is 1.)\par \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the symbol to expect at the current line when the Step Out operation is complete. NULL means don't verify based on symbol name. (Default value is NULL.)\par \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to a string that contains the text of the line to expect at the current line when the Step Out operation is complete. NULL means don't verify based on line text. (Default value is NULL.)\par \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name to expect when the Step Out operation is complete. NULL means don't verify based on function name. (Default value is NULL.)\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 377\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StepOutUntilLine}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StepOutUntilLine}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StepOutUntilLine}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StepOutUntilLine(LPCSTR line, LPCSTR function /* NULL */, int WAIT)}
{\f8\fs22 \par \par Perform the Step Out debugging operation until the specified line/function is entered.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to a string that contains the text of the line to be found that will end the step out operation.\par \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name that contains the line to wait for. This parameter augments line. NULL means only look for the given line. (Default value is NULL.)\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 390\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StepOutUntilFunc}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StepOutUntilFunc}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StepOutUntilFunc}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StepOutUntilFunc(LPCSTR function /* NULL */, int WAIT)}
{\f8\fs22 \par \par Perform the Step Out debugging operation until the specified function is entered.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name to be found that will end the step out operation.\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 402\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StepOutUntilSymbol}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StepOutUntilSymbol}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StepOutUntilSymbol}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StepOutUntilSymbol(LPCSTR symbol, int WAIT)}
{\f8\fs22 \par \par Perform the Step Out debugging operation until the specified symbol is reached.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the symbol name to be found that will end the step out operation.\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 414\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_StepToCursor}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; StepToCursor}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::StepToCursor}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::StepToCursor(int linepos /* 0 */, LPCSTR symbol /* NULL */, LPCSTR line /* NULL */, LPCSTR function /* NULL */, int WAIT /*WAIT_FOR_BREAK*/)}
{\f8\fs22 \par \par Perform the Step To Cursor debugging operation and verify the correct line/function/symbol is entered when the operation is complete.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 linepos}
{\f8\fs22 : An integer that contains the line to position the cursor on before performing the Step To Cursor operation. 0 means use the current line. (Default is 0.)\par \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the symbol to expect at the current line when the Step To Cursor operation is complete. NULL means don't verify based on symbol name. (Default value is NULL.)\par \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to a string that contains the text of the line to expect at the current line when the Step To Cursor operation is complete. NULL means don't verify based on line text. (Default value is NULL.)\par \par }
{\i\f8\fs22 function}
{\f8\fs22 : A pointer to a string that contains the function name to expect when the Step To Cursor operation is complete. NULL means don't verify based on function name. (Default value is NULL.)\par \par }
{\i\f8\fs22 WAIT}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 430\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_SetNextStatement}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; SetNextStatement}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::SetNextStatement}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::SetNextStatement(int line /* 0 */)}
{\f8\fs22 \par \par Set the next statement (IP) to the given line.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : An integer that contains the line to set the next statement to. 0 means use the current line. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 452\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_SetNextStatement}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; SetNextStatement}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::SetNextStatement}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::SetNextStatement(LPCSTR line)}
{\f8\fs22 \par \par Set the next statement (IP) to the given line.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to a string that contains the line to set the next statement to. NULL means use the current line. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 475\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_ShowNextStatement}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; ShowNextStatement}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::ShowNextStatement}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::ShowNextStatement(void)}
{\f8\fs22 \par \par Go to the next statement to be executed by the debugger.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 504\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_GetDebugState}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; GetDebugState}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::GetDebugState}}{\f8\fs22  }
{\f8\fs32 DebugState CODebug::GetDebugState(void)}
{\f8\fs22 \par \par Get the state of the debugger.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A DebugState value that indicates the state of the debugger: ST_NODEBUG, ST_DEBUGBREAK, ST_DEBUGRUN.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 517\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_Wait}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; Wait}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::Wait}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::Wait(int option)}
{\f8\fs22 \par \par Wait for the current debugging operation to complete.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 option}
{\f8\fs22 : A value that specifies how to wait for the debugging operation to complete: NOWAIT, WAIT_FOR_RUN, WAIT_FOR_BREAK, WAIT_FOR_TERMINATION, ASSUME_NORMAL_TERMINATION, WAIT_FOR_EXCEPTION, WAIT_FOR_CODED_BREAK. (Default value is WAIT_FOR_BREAK.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 536\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_CurrentLineIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; CurrentLineIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::CurrentLineIs}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::CurrentLineIs(LPCSTR line)		}
{\f8\fs22 \par \par Determine whether the current line in the debugger matches the line given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the current line in the debugger matches the given line (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to a string that contains either part of the text of the line expected or the line number specified by @line.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 548\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_VerifyCurrentLine}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; VerifyCurrentLine}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::VerifyCurrentLine}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::VerifyCurrentLine(LPCSTR line)}
{\f8\fs22 \par \par Determine whether the current line in the debugger matches the line given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the current line in the debugger matches the given line (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to a string that contains either part of the text of the line expected or the line number specified by @line.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 563\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_AtSymbol}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; AtSymbol}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::AtSymbol}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::AtSymbol(LPCSTR symbol)}
{\f8\fs22 \par \par Determine whether the current debugging location (IP) is at the given symbol.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the current debugging location (IP) is at the given symbol (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the symbol.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 598\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_VerifyAtSymbol}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; VerifyAtSymbol}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::VerifyAtSymbol}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::VerifyAtSymbol(LPCSTR symbol)}
{\f8\fs22 \par \par Determine whether the current debugging location (IP) is at the given symbol.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the current debugging location (IP) is at the given symbol (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the symbol.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 656\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_VerifyTermination}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; VerifyTermination}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::VerifyTermination}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::VerifyTermination(int exitcode)}
{\f8\fs22 \par \par Determine whether the debuggee terminated with the specified exit code. (See VerifyTermination(void) to verify termination regardless of exit code.) This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the debuggee terminated with the specified exit code (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 exitcode}
{\f8\fs22 : An integer that specifies the expected exit code.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 674\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_VerifyTermination}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; VerifyTermination}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::VerifyTermination}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::VerifyTermination(void)}
{\f8\fs22 \par \par Determine whether the debuggee terminated. (See VerifyTermination(int) to verify termination with a specific exit code.) This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the debuggee terminated (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 687\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_SetSteppingMode}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; SetSteppingMode}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::SetSteppingMode}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::SetSteppingMode(StepMode mode)}
{\f8\fs22 \par \par Set the stepping mode in the debugger.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 mode}
{\f8\fs22 : A StepMode value that indicates the stepping mode: SRC, ASM.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 701\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_GetSteppingMode}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; GetSteppingMode}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::GetSteppingMode}}{\f8\fs22  }
{\f8\fs32 StepMode CODebug::GetSteppingMode(void)}
{\f8\fs22 \par \par Get the current stepping mode in the debugger.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A StepMode value that indicates the current stepping mode: SRC, ASM.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 736\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_ValidateSteppingMode}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; ValidateSteppingMode}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::ValidateSteppingMode}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::ValidateSteppingMode(StepMode mode)}
{\f8\fs22 \par \par Determine whether the current stepping mode matches the given stepping mode.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the current stepping mode matches the given stepping mode (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 mode}
{\f8\fs22 : A StepMode value that contains the expected stepping mode: SRC, ASM.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 747\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_DoDebuggeeKeys}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; DoDebuggeeKeys}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::DoDebuggeeKeys}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::DoDebuggeeKeys(CString str)}
{\f8\fs22 \par \par Perform the given keystrokes in the debuggee. This code is not portable and should be used with extreme caution.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 str}
{\f8\fs22 : A CString that contains the title, class, and keystrokes to send to the debuggee. The form is: Title#Class#Keys.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 763\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_DoDebuggeeCmd}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; DoDebuggeeCmd}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::DoDebuggeeCmd}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::DoDebuggeeCmd(CString str)}
{\f8\fs22 \par \par Perform the given command in the debuggee. This code is not portable and should be used with extreme caution.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 str}
{\f8\fs22 : A CString that contains the title, class, and command to send to the debuggee. The form is: Title#Class#Command.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 795\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_VerifyNotification}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; VerifyNotification}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::VerifyNotification}}{\f8\fs22  }
{\f8\fs32 BOOL CODebug::VerifyNotification(LPCSTR notification, int startLine /* 1 */, int numberOfLines /* 1 */)}
{\f8\fs22 \par \par Verifies any debugger output (substring).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if the notification substring is found at line, FALSE - if not\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 notification}
{\f8\fs22 : A pointer to a string that contains the substring to look for in the debugger output.\par \par }
{\i\f8\fs22 startLine}
{\f8\fs22 : An integer that specifies the 1-based line number in the Output window to start looking for the specified substring. (Default value is 1.)\par \par }
{\i\f8\fs22 numberOfLines}
{\f8\fs22 : An integer that specifies the number of lines to search (from startLine) for the substring. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 871\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_HandleMsg}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; HandleMsg}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::HandleMsg}}{\f8\fs22  }
{\f8\fs32 int CODebug::HandleMsg(MSG_TYPE msg, LPCSTR pdata /* NULL */, int wait_time /* 10 */)}
{\f8\fs22 \par \par Waits for a specific msg box to be displayed, supplies the data requested, and continues\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 ERROR_SUCCESS if the correct msg box comes up, the data is supplied, and the msg box is dismissed.  ERROR_ERROR if any of those operations fail.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 msg:}
{\f8\fs22 : a symbol representing the particular msg box to be handled.  current legal values are MSG_REMOTE_EXE_NAME_REQUIRED and MSG_REMOTE_LOCAL_EXE_MISMATCH\par \par }
{\i\f8\fs22 pdata:}
{\f8\fs22 : a pointer to the data that needs to be supplied to handle the message. the type of data depends on the msg being handled.  currently only MSG_REMOTE_EXE_NAME_REQUIRED uses data, and that is a string pointing to the remote path of the target.  the default data pointer is NULL.\par \par }
{\i\f8\fs22 wait_time:}
{\f8\fs22 : time in seconds to wait for msg box to be displayed. default is 10 seconds.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 903\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_CancelMsg}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; CancelMsg}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::CancelMsg}}{\f8\fs22  }
{\f8\fs32 int CODebug::CancelMsg(MSG_TYPE msg, int wait_time /* 10 */)}
{\f8\fs22 \par \par Waits for a specific msg box to be displayed and cancels it\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 ERROR_SUCCESS if the correct msg box comes up and is canceled.  ERROR_ERROR if either of those operations fail.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 msg:}
{\f8\fs22 : a symbol representing the particular msg box to be handled.  current legal values are MSG_REMOTE_EXE_NAME_REQUIRED and MSG_REMOTE_LOCAL_EXE_MISMATCH\par \par }
{\i\f8\fs22 wait_time:}
{\f8\fs22 : time in seconds to wait for msg box to be displayed. default is 10 seconds.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 945\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CODebug_CancelMsg}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CODebug; CancelMsg}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CODebug::CancelMsg}}{\f8\fs22  }
{\f8\fs32 int CODebug::CancelMsg(MSG_TYPE msg, int wait_time /* 10 */)}
{\f8\fs22 \par \par Waits for a specific msg box to be displayed and cancels it\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 ERROR_SUCCESS if the correct msg box comes up and is canceled.  ERROR_ERROR if either of those operations fail.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 msg:}
{\f8\fs22 : a symbol representing the particular msg box to be handled.  current legal values are MSG_REMOTE_EXE_NAME_REQUIRED and MSG_REMOTE_LOCAL_EXE_MISMATCH\par \par }
{\i\f8\fs22 wait_time:}
{\f8\fs22 : time in seconds to wait for msg box to be displayed. default is 10 seconds.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 codebug.cpp, 1000\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_Enable}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; Enable}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::Enable}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::Enable()}
{\f8\fs22 \par \par Enable the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 29\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_Disable}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; Disable}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::Disable}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::Disable()}
{\f8\fs22 \par \par Disable the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 43\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_GetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; GetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::GetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::GetExpressionValue(LPCSTR expression, char *value)}
{\f8\fs22 \par \par Get the result of the given expression from the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a char that will contain the result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 57\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_GetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; GetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::GetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::GetExpressionValue(LPCSTR expression, unsigned char *value)}
{\f8\fs22 \par \par Get the result of the given expression from the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to an unsigned char that will contain the result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 77\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_GetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; GetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::GetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::GetExpressionValue(LPCSTR expression, short int *value)}
{\f8\fs22 \par \par Get the result of the given expression from the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a short integer that will contain the result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 97\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_GetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; GetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::GetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::GetExpressionValue(LPCSTR expression, unsigned short int *value)}
{\f8\fs22 \par \par Get the result of the given expression from the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to an unsigned short integer that will contain the result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 117\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_GetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; GetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::GetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::GetExpressionValue(LPCSTR expression, int *value)}
{\f8\fs22 \par \par Get the result of the given expression from the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to an integer that will contain the result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 137\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_GetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; GetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::GetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::GetExpressionValue(LPCSTR expression, unsigned int *value)}
{\f8\fs22 \par \par Get the result of the given expression from the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to an unsigned integer that will contain the result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 157\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_GetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; GetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::GetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::GetExpressionValue(LPCSTR expression, long int *value)}
{\f8\fs22 \par \par Get the result of the given expression from the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a long that will contain the result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 177\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_GetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; GetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::GetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::GetExpressionValue(LPCSTR expression, unsigned long int *value)}
{\f8\fs22 \par \par Get the result of the given expression from the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to an unsigned long that will contain the result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 197\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_GetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; GetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::GetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::GetExpressionValue(LPCSTR expression, float *value)}
{\f8\fs22 \par \par Get the result of the given expression from the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a float that will contain the result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 217\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_GetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; GetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::GetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::GetExpressionValue(LPCSTR expression, double *value)}
{\f8\fs22 \par \par Get the result of the given expression from the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a double that will contain the result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 237\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_GetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; GetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::GetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::GetExpressionValue(LPCSTR expression, long double *value)}
{\f8\fs22 \par \par Get the result of the given expression from the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a long double that will contain the result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 257\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExtractExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExtractExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExtractExpressionValue}}{\f8\fs22  }
{\f8\fs32 CString COExpEval::ExtractExpressionValue(LPCSTR expression, BOOL bErrorExpected /* FALSE */)}
{\f8\fs22 \par \par Get the result of the given expression from the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the result of the expression evaluation.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 bErrorExpected}
{\f8\fs22 : A Boolean value that indicates whether to expect an error (TRUE) during evaluation or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 277\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_SetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; SetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::SetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::SetExpressionValue(LPCSTR expression, char value)}
{\f8\fs22 \par \par Set an expression's value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to set.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A char that contains the value to set the expression to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 313\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_SetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; SetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::SetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::SetExpressionValue(LPCSTR expression, unsigned char value)}
{\f8\fs22 \par \par Set an expression's value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to set.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : An unsigned char that contains the value to set the expression to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 327\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_SetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; SetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::SetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::SetExpressionValue(LPCSTR expression, short int value)}
{\f8\fs22 \par \par Set an expression's value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to set.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A short that contains the value to set the expression to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 341\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_SetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; SetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::SetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::SetExpressionValue(LPCSTR expression, unsigned short int value)}
{\f8\fs22 \par \par Set an expression's value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to set.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : An unsigned short that contains the value to set the expression to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 355\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_SetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; SetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::SetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::SetExpressionValue(LPCSTR expression, int value)}
{\f8\fs22 \par \par Set an expression's value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to set.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : An integer that contains the value to set the expression to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 369\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_SetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; SetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::SetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::SetExpressionValue(LPCSTR expression, unsigned int value)}
{\f8\fs22 \par \par Set an expression's value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to set.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : An unsigned integer that contains the value to set the expression to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 383\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_SetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; SetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::SetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::SetExpressionValue(LPCSTR expression, long int value)}
{\f8\fs22 \par \par Set an expression's value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to set.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A long that contains the value to set the expression to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 397\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_SetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; SetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::SetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::SetExpressionValue(LPCSTR expression, unsigned long int value)}
{\f8\fs22 \par \par Set an expression's value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to set.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : An unsigned long that contains the value to set the expression to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 411\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_SetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; SetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::SetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::SetExpressionValue(LPCSTR expression, float value)}
{\f8\fs22 \par \par Set an expression's value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to set.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A float that contains the value to set the expression to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 425\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_SetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; SetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::SetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::SetExpressionValue(LPCSTR expression, double value)}
{\f8\fs22 \par \par Set an expression's value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to set.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A double that contains the value to set the expression to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 439\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_SetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; SetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::SetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::SetExpressionValue(LPCSTR expression, long double value)}
{\f8\fs22 \par \par Set an expression's value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to set.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A long double that contains the value to set the expression to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 453\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_SetExpressionValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; SetExpressionValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::SetExpressionValue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::SetExpressionValue(LPCSTR expression, LPCSTR value)}
{\f8\fs22 \par \par Set an expression's value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to set.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a string that contains the value to set the expression to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 467\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIs(LPCSTR expression, char value)}
{\f8\fs22 \par \par Determine whether the expression evaluates to the given value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to the specified value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A char that contains the expected result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 493\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIs(LPCSTR expression, unsigned char value)}
{\f8\fs22 \par \par Determine whether the expression evaluates to the given value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to the specified value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : An unsigned char that contains the expected result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 508\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIs(LPCSTR expression, short int value)}
{\f8\fs22 \par \par Determine whether the expression evaluates to the given value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to the specified value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A short that contains the expected result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 523\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIs(LPCSTR expression, unsigned short int value)}
{\f8\fs22 \par \par Determine whether the expression evaluates to the given value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to the specified value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : An unsigned short that contains the expected result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 538\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIs(LPCSTR expression, int value)}
{\f8\fs22 \par \par Determine whether the expression evaluates to the given value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to the specified value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : An integer that contains the expected result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 553\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIs(LPCSTR expression, unsigned int value)}
{\f8\fs22 \par \par Determine whether the expression evaluates to the given value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to the specified value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : An unsigned integer that contains the expected result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 568\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIs(LPCSTR expression, long int value)}
{\f8\fs22 \par \par Determine whether the expression evaluates to the given value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to the specified value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A long that contains the expected result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 583\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIs(LPCSTR expression, unsigned long int value)}
{\f8\fs22 \par \par Determine whether the expression evaluates to the given value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to the specified value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : An unsigned long that contains the expected result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 598\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIs(LPCSTR expression, float value)}
{\f8\fs22 \par \par Determine whether the expression evaluates to the given value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to the specified value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A float that contains the expected result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 613\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIs(LPCSTR expression, double value)}
{\f8\fs22 \par \par Determine whether the expression evaluates to the given value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to the specified value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A double that contains the expected result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 628\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIs(LPCSTR expression, long double value)}
{\f8\fs22 \par \par Determine whether the expression evaluates to the given value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to the specified value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A long double that contains the expected result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 643\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIs(LPCSTR expression, LPCSTR value)}
{\f8\fs22 \par \par Determine whether the expression evaluates to the given value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to the specified value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a string that contains the expected result of the expression evaluation.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 658\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIsTrue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIsTrue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIsTrue}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIsTrue(LPCSTR expression)}
{\f8\fs22 \par \par Determine whether the given expression evaluates to TRUE in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to TRUE (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 700\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionValueIsFalse}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionValueIsFalse}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionValueIsFalse}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionValueIsFalse(LPCSTR expression)}
{\f8\fs22 \par \par Determine whether the given expression evaluates to FALSE in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to FALSE (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 714\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExpEval_ExpressionErrorIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExpEval; ExpressionErrorIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExpEval::ExpressionErrorIs}}{\f8\fs22  }
{\f8\fs32 BOOL COExpEval::ExpressionErrorIs(LPCSTR expression, LPCSTR value)}
{\f8\fs22 \par \par Determine whether the given expression evaluates to the specified error value in the expression evaluator.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the given expression evaluates to the given error value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to evaluate.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a string that contains the error expected.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coee.cpp, 728\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExceptions_VerifyExceptionHit}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExceptions; VerifyExceptionHit}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExceptions::VerifyExceptionHit}}{\f8\fs22  }
{\f8\fs32 BOOL COExceptions::VerifyExceptionHit(void)}
{\f8\fs22 \par \par Determine whether an exception was hit. (See VerifyExceptionHit(int) to verify a specific exception.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether an exception was hit (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coexcpt.cpp, 27\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExceptions_VerifyExceptionHit}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExceptions; VerifyExceptionHit}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExceptions::VerifyExceptionHit}}{\f8\fs22  }
{\f8\fs32 BOOL COExceptions::VerifyExceptionHit(int code)}
{\f8\fs22 \par \par Determine whether a specific exception was hit. (See VerifyException(void) to verify any exception.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the specified exception was hit (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 code}
{\f8\fs22 : An integer that contains the exception code expected.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coexcpt.cpp, 43\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExceptions_SetException}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExceptions; SetException}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExceptions::SetException}}{\f8\fs22  }
{\f8\fs32 BOOL COExceptions::SetException(int code, int option)}
{\f8\fs22 \par \par Set or change an exception.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 code}
{\f8\fs22 : An integer that contains the exception code.\par \par }
{\i\f8\fs22 option}
{\f8\fs22 : A value that specifies the type of action to take when the exception is caught: STOP_ALWAYS, IF_NOT_HANDLED.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coexcpt.cpp, 61\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExceptions_GetException}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExceptions; GetException}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExceptions::GetException}}{\f8\fs22  }
{\f8\fs32 CString COExceptions::GetException(int code)}
{\f8\fs22 \par \par Get a string that describes the exception.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains a string describing the exception specified.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 code}
{\f8\fs22 : An integer that contains the exception code.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coexcpt.cpp, 76\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COExceptions_RestoreDefualts}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COExceptions; RestoreDefualts}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COExceptions::RestoreDefualts}}{\f8\fs22  }
{\f8\fs32 BOOL COExceptions::RestoreDefualts(void)}
{\f8\fs22 \par \par Restore all default exceptions.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coexcpt.cpp, 89\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_Enable}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; Enable}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::Enable}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::Enable(void)}
{\f8\fs22 \par \par Enable memory access in the debugger.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 32\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_Disable}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; Disable}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::Disable}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::Disable(void)}
{\f8\fs22 \par \par Disable memory access in the debugger.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 43\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_GetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; GetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::GetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::GetMemoryData(int address, char *data, int count /* 1 */)}
{\f8\fs22 \par \par Get data from memory at the specified address.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to retrieve data from.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a char buffer that will contain the data retrieved.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to retrieve from memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 58\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_GetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; GetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::GetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::GetMemoryData(int address, unsigned char *data, int count /* 1 */)}
{\f8\fs22 \par \par Get data from memory at the specified address.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to retrieve data from.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an unsigned char buffer that will contain the data retrieved.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to retrieve from memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 88\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_GetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; GetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::GetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::GetMemoryData(int address, short int *data, int count /* 1 */)}
{\f8\fs22 \par \par Get data from memory at the specified address.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to retrieve data from.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a short integer buffer that will contain the data retrieved.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to retrieve from memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 118\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_GetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; GetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::GetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::GetMemoryData(int address, unsigned short int *data, int count /* 1 */)}
{\f8\fs22 \par \par Get data from memory at the specified address.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to retrieve data from.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an unsigned short buffer that will contain the data retrieved.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to retrieve from memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 141\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_GetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; GetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::GetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::GetMemoryData(int address, int *data, int count /* 1 */)}
{\f8\fs22 \par \par Get data from memory at the specified address.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to retrieve data from.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an integer buffer that will contain the data retrieved.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to retrieve from memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 164\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_GetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; GetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::GetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::GetMemoryData(int address, unsigned int *data, int count /* 1 */)}
{\f8\fs22 \par \par Get data from memory at the specified address.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to retrieve data from.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an unsigned integer buffer that will contain the data retrieved.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to retrieve from memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 187\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_GetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; GetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::GetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::GetMemoryData(int address, long int *data, int count)}
{\f8\fs22 \par \par Get data from memory at the specified address.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to retrieve data from.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a long buffer that will contain the data retrieved.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to retrieve from memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 210\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_GetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; GetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::GetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::GetMemoryData(int address, unsigned long int *data, int count)}
{\f8\fs22 \par \par Get data from memory at the specified address.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to retrieve data from.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an unsigned long buffer that will contain the data retrieved.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to retrieve from memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 233\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_GetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; GetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::GetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::GetMemoryData(int address, float *data, int count /* 1 */)}
{\f8\fs22 \par \par Get data from memory at the specified address.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to retrieve data from.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a float buffer that will contain the data retrieved.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to retrieve from memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 256\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_GetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; GetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::GetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::GetMemoryData(int address, double *data, int count /* 1 */)}
{\f8\fs22 \par \par Get data from memory at the specified address.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to retrieve data from.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a double buffer that will contain the data retrieved.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to retrieve from memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 279\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_GetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; GetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::GetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::GetMemoryData(int address, long double *data, int count /* 1 */)}
{\f8\fs22 \par \par Get data from memory at the specified address.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to retrieve data from.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a long double buffer that will contain the data retrieved.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to retrieve from memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 302\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 int COMemory::SetMemoryData(LPCSTR symbol, char *data, int count /* 1 */)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that specifies a symbol where memory is to be set. The address of the symbol is used to as the address where memory changes will occur.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a char buffer that contains the data to set.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to set in memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 351\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, char *data, int count /* 1 */)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a char buffer that contains the data to set.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to set in memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 372\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, unsigned char *data, int count /* 1 */)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an unsigned char buffer that contains the data to set.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to set in memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 393\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, short int *data, int count /* 1 */)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a short integer buffer that contains the data to set.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to set in memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 414\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, unsigned short int *data, int count /* 1 */)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an unsigned short integer buffer that contains the data to set.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to set in memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 435\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 int COMemory::SetMemoryData(LPCSTR symbol, int *data, int count /* 1 */)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that specifies a symbol where memory is to be set. The address of the symbol is used to as the address where memory changes will occur.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an integer buffer that contains the data to set.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to set in memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 456\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, int *data, int count /* 1 */)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an integer buffer that contains the data to set.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to set in memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 477\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, unsigned int *data, int count /* 1 */)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an unsigned integer buffer that contains the data to set.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to set in memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 498\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, long int *data, int count /* 1 */)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a long buffer that contains the data to set.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to set in memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 519\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, unsigned long int *data, int count /* 1 */)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an unsigned long buffer that contains the data to set.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to set in memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 540\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, float *data, int count /* 1 */)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a float buffer that contains the data to set.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to set in memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 561\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, double *data, int count /* 1 */)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a double buffer that contains the data to set.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to set in memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 588\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, long double *data, int count /* 1 */)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a long double buffer that contains the data to set.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to set in memory. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 615\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 int COMemory::SetMemoryData(LPCSTR symbol, char data)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that specifies a symbol where memory is to be set. The address of the symbol is used to as the address where memory changes will occur.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A char that contains the data to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 641\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, char data)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A char that contains the data to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 654\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, unsigned char data)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : An unsigned char that contains the data to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 667\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, short int data)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A short that contains the data to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 680\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, unsigned short int data)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : An unsigned short that contains the data to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 693\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 int COMemory::SetMemoryData(LPCSTR symbol, int data)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that specifies a symbol where memory is to be set. The address of the symbol is used to as the address where memory changes will occur.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : An integer that contains the data to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 706\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, int data)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : An integer that contains the data to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 719\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, unsigned int data)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : An unsigned integer that contains the data to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 732\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, long int data)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A long that contains the data to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 745\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, unsigned long int data)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : An unsigned long that contains the data to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 758\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, float data)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A float that contains the data to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 771\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, double data)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A double that contains the data to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 784\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_SetMemoryData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; SetMemoryData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::SetMemoryData}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::SetMemoryData(int address, long double data)}
{\f8\fs22 \par \par Set data at a specified memory location.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to start setting data.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A long double that contains the data to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 797\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, char *data, int count /* 1 */)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a char buffer that contains the data to compare against.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to compare. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 855\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, unsigned char *data, int count /* 1 */)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an unsigned char buffer that contains the data to compare against.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to compare. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 878\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, short int *data, int count /* 1 */)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a short integer buffer that contains the data to compare against.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to compare. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 901\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, unsigned short int *data, int count /* 1 */)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an unsigned short integer buffer that contains the data to compare against.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to compare. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 924\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, int *data, int count /* 1 */)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an integer buffer that contains the data to compare against.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to compare. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 947\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, unsigned int *data, int count /* 1 */)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an unsigned integer buffer that contains the data to compare against.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to compare. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 970\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, long int *data, int count /* 1 */)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a long buffer that contains the data to compare against.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to compare. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 993\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, unsigned long int *data, int count /* 1 */)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to an unsigned long buffer that contains the data to compare against.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to compare. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1016\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, float *data, int count /* 1 */)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a float buffer that contains the data to compare against.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to compare. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1039\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, double *data, int count /* 1 */)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a double buffer that contains the data to compare against.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to compare. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1062\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, long double *data, int count /* 1 */)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a long double buffer that contains the data to compare against.\par \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of elements of data to compare. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1085\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, char data)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A char that contains the data to compare against.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1107\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, unsigned char data)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : An unsigned char that contains the data to compare against.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1120\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, short int data)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A short that contains the data to compare against.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1133\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, unsigned short int data)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : An unsigned short that contains the data to compare against.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1146\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, int data)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : An integer that contains the data to compare against.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1159\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, unsigned int data)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : An unsigned integer that contains the data to compare against.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1172\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, long int data)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A long that contains the data to compare against.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1185\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, unsigned long int data)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : An unsigned long that contains the data to compare against.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1198\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, float data)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A float that contains the data to compare against.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1211\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, double data)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A double that contains the data to compare against.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1224\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COMemory_MemoryDataIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COMemory; MemoryDataIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COMemory::MemoryDataIs}}{\f8\fs22  }
{\f8\fs32 BOOL COMemory::MemoryDataIs(int address, long double data)}
{\f8\fs22 \par \par Determine if the data at the specified address is the same as the data given.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the data at the specified address is the same as the data given (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address in memory to compare with.\par \par }
{\i\f8\fs22 data}
{\f8\fs22 : A long double that contains the data to compare against.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 comem.cpp, 1237\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CORegisters_GetRegister}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CORegisters; GetRegister}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CORegisters::GetRegister}}{\f8\fs22  }
{\f8\fs32 int CORegisters::GetRegister(int reg)}
{\f8\fs22 \par \par Get the value of one of the registers.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the value of the specified register.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 reg}
{\f8\fs22 : An integer that specifies the 1-based index into the set of registers.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coreg.cpp, 31\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CORegisters_RegisterValueIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CORegisters; RegisterValueIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CORegisters::RegisterValueIs}}{\f8\fs22  }
{\f8\fs32 BOOL CORegisters::RegisterValueIs(int reg, int value)}
{\f8\fs22 \par \par Determine whether the given register's value matches the given value.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean that indicates whether the given register's value matches the given value (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 reg}
{\f8\fs22 : An integer that specifies the 1-based index into the set of registers.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : An integer that contains the expected register value.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coreg.cpp, 46\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CORegisters_SetRegister}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CORegisters; SetRegister}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CORegisters::SetRegister}}{\f8\fs22  }
{\f8\fs32 BOOL CORegisters::SetRegister(int reg, LPCSTR value)}
{\f8\fs22 \par \par Set the value of the specified register.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 reg}
{\f8\fs22 : An integer that specifies the 1-based index into the set of registers.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a string that contains the value to set the specified register to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 coreg.cpp, 67\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COStack_NavigateStack}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COStack; NavigateStack}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COStack::NavigateStack}}{\f8\fs22  }
{\f8\fs32 BOOL COStack::NavigateStack( CString str )}
{\f8\fs22 \par \par Navigate to the given call stack frame.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 str}
{\f8\fs22 : A CString that contains the name of the call stack frame to navigate to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 costack.cpp, 41\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COStack_Index}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COStack; Index}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COStack::Index}}{\f8\fs22  }
{\f8\fs32 int COStack::Index( CString str )}
{\f8\fs22 \par \par Get the index of the given call stack frame in the current call stack.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the index of the given call stack frame.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 str}
{\f8\fs22 : A CString that contains the name of the call stack frame.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 costack.cpp, 52\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COStack_CurrentFunctionIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COStack; CurrentFunctionIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COStack::CurrentFunctionIs}}{\f8\fs22  }
{\f8\fs32 BOOL COStack::CurrentFunctionIs(LPCSTR str)}
{\f8\fs22 \par \par Determine if the current function matches the given function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the current function matches the given function (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 str}
{\f8\fs22 : A pointer to a string that contains the name of the expected function.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 costack.cpp, 66\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COStack_VerifyCurrentFunction}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COStack; VerifyCurrentFunction}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COStack::VerifyCurrentFunction}}{\f8\fs22  }
{\f8\fs32 BOOL COStack::VerifyCurrentFunction(LPCSTR str)}
{\f8\fs22 \par \par Determine if the current function matches the given function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the current function matches the given function (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 str}
{\f8\fs22 : A pointer to a string that contains the name of the expected function.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 costack.cpp, 76\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COStack_GetFunction}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COStack; GetFunction}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COStack::GetFunction}}{\f8\fs22  }
{\f8\fs32 CString COStack::GetFunction(int level /* 0 */)}
{\f8\fs22 \par \par Get the call stack description string at the given call stack level (index).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the call stack description string from the given call stack level.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 level}
{\f8\fs22 : An integer that contains the 0-based index into the call stack. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 costack.cpp, 86\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COStack_GetAllFunctions}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COStack; GetAllFunctions}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COStack::GetAllFunctions}}{\f8\fs22  }
{\f8\fs32 CString COStack::GetAllFunctions(void)}
{\f8\fs22 \par \par Get all the call stack frame descriptions for all frames on the call stack.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains a newline-delimited list of call stack frames.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 costack.cpp, 135\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COStack_NavigateStack}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COStack; NavigateStack}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COStack::NavigateStack}}{\f8\fs22  }
{\f8\fs32 BOOL COStack::NavigateStack(int level /* 0 */)}
{\f8\fs22 \par \par Navigate to the given call stack frame.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 level}
{\f8\fs22 : An integer that contains the 0-based index into the call stack. This parameter specifies which call stack to navigate to. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 costack.cpp, 170\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COStack_FunctionIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COStack; FunctionIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COStack::FunctionIs}}{\f8\fs22  }
{\f8\fs32 BOOL COStack::FunctionIs(LPCSTR str, int level /* 0 */)}
{\f8\fs22 \par \par Determine if the name of the function at the specified call stack level matches the given function name.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the function name at the specified call stack level matches the given function name.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 str}
{\f8\fs22 : A pointer to a string that specifies the expected name of the function.\par \par }
{\i\f8\fs22 level}
{\f8\fs22 : An integer that contains the 0-based index into the call stack. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 costack.cpp, 193\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COStack_Compare}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COStack; Compare}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COStack::Compare}}{\f8\fs22  }
{\f8\fs32 BOOL COStack::Compare( char const * const * stk, FrameList::Filter filter, int top, int bottom )}
{\f8\fs22 \par \par Compare a portion of the call stack to a given portion of the call stack.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the specified portion of the call stack matches the given call stack (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 stk}
{\f8\fs22 : A pointer to a portion of the call stack. This is commonly a pointer to part of the buffer retrieved by GetAllFunctions(void).\par \par }
{\i\f8\fs22 filter}
{\f8\fs22 : A value that specifies the type of filtering to do when comparing call stacks: FrameList::NoFilter, FrameList::NoAbsoluteAddresses. (Default value is FrameList::NoFilter.)\par \par }
{\i\f8\fs22 top}
{\f8\fs22 : An integer that specifies the 0-based index into the call stack to start comparison. (Default value is 0.)\par \par }
{\i\f8\fs22 bottom}
{\f8\fs22 : An integer that specifies the 0-based index into the call stack to end comparison. -1 means the bottom of the stack. (Default value is -1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 costack.cpp, 217\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COThreads_FreezeThread}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COThreads; FreezeThread}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COThreads::FreezeThread}}{\f8\fs22  }
{\f8\fs32 BOOL COThreads::FreezeThread(int thread)}
{\f8\fs22 \par \par Suspend the specified thread.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 thread}
{\f8\fs22 : An integer that contains the thread ID of the thread to suspend.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cothread.cpp, 28\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COThreads_ThawThread}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COThreads; ThawThread}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COThreads::ThawThread}}{\f8\fs22  }
{\f8\fs32 BOOL COThreads::ThawThread(int thread)			}
{\f8\fs22 \par \par Resume the specified thread.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 thread}
{\f8\fs22 : An integer that contains the thread ID of the thread to resume.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cothread.cpp, 43\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COThreads_SetCurrentThread}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COThreads; SetCurrentThread}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COThreads::SetCurrentThread}}{\f8\fs22  }
{\f8\fs32 BOOL COThreads::SetCurrentThread(int thread)}
{\f8\fs22 \par \par Set the specified thread to be the current thread.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 thread}
{\f8\fs22 : An integer that contains the thread ID of the thread to activate.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cothread.cpp, 58\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COThreads_GetCurrentThread}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COThreads; GetCurrentThread}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COThreads::GetCurrentThread}}{\f8\fs22  }
{\f8\fs32 INT COThreads::GetCurrentThread(void)}
{\f8\fs22 \par \par Get the thread ID of the currently active thread.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that specifies the currently active thread.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cothread.cpp, 72\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_COThreads_CurrentThreadIs}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} COThreads; CurrentThreadIs}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} COThreads::CurrentThreadIs}}{\f8\fs22  }
{\f8\fs32 BOOL COThreads::CurrentThreadIs(int thread)}
{\f8\fs22 \par \par Determine if the current thread ID matches the given thread ID.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the current thread ID matches the given thread ID.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 thread}
{\f8\fs22 : An integer that contains the thread ID of the thread.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 cothread.cpp, 86\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::Activate(void)}
{\f8\fs22 \par \par Open the Breakpoints dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 31\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_SetLocation}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; SetLocation}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::SetLocation}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::SetLocation(LPCSTR location)}
{\f8\fs22 \par \par Set the location for the breakpoint in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 location}
{\f8\fs22 : A pointer to a string that specifies the location for the breakpoint. The location string is in the form: {function, source filename, EXE filename} .line.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 54\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_SetLocationExpression}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; SetLocationExpression}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::SetLocationExpression}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::SetLocationExpression(LPCSTR expression, int expr_type, BOOL fForceType /* TRUE */)}
{\f8\fs22 \par \par Set the expression to break on for a location breakpoint in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to break on. The expression string is in the form: {function, source filename, EXE filename} expression.\par \par }
{\i\f8\fs22 expr_type}
{\f8\fs22 : A value that specifies the type of expression. This parameter is NYI.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 74\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_SetDataExpression}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; SetDataExpression}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::SetDataExpression}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::SetDataExpression(LPCSTR expression, int expr_type)}
{\f8\fs22 \par \par Set the expression to break on for a data breakpoint in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to break on. The expression string is in the form: {function, source filename, EXE filename} expression.\par \par }
{\i\f8\fs22 expr_type}
{\f8\fs22 : A value that specifies the type of expression. This parameter is NYI.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 94\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_SetExprLength}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; SetExprLength}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::SetExprLength}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::SetExprLength(LPCSTR length)}
{\f8\fs22 \par \par Set the size of the data to watch for an expression in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 length}
{\f8\fs22 : A pointer to a string that contains the size of the data to watch.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 116\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_SetLocationExprLength}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; SetLocationExprLength}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::SetLocationExprLength}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::SetLocationExprLength(LPCSTR length)}
{\f8\fs22 \par \par Set the size of the data to watch for an expression in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 length}
{\f8\fs22 : A pointer to a string that contains the size of the data to watch.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 133\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_SetPassCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; SetPassCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::SetPassCount}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::SetPassCount(LPCSTR passcount)}
{\f8\fs22 \par \par Set the pass count for a breakpoint in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 passcount}
{\f8\fs22 : A pointer to a string that contains the pass count.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 152\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_SetWndProc}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; SetWndProc}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::SetWndProc}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::SetWndProc(LPCSTR location)}
{\f8\fs22 \par \par Set the window procedure for a message breakpoint in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 location}
{\f8\fs22 : A pointer to a string that contains the window procedure.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 176\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_SetMessage}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; SetMessage}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::SetMessage}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::SetMessage(LPCSTR message, int type)}
{\f8\fs22 \par \par Set the message to break when received in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 message}
{\f8\fs22 : A pointer to a string that contains the name of the message.\par \par }
{\i\f8\fs22 type}
{\f8\fs22 : A value that specifies the type of message. This parameter is NYI.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 194\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_SetCurrentBreakpoint}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; SetCurrentBreakpoint}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::SetCurrentBreakpoint}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::SetCurrentBreakpoint(int bp /* 0 */)}
{\f8\fs22 \par \par Select the breakpoint specified in the list of breakpoints in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bp}
{\f8\fs22 : An integer that specifies the 0-based index into the list of breakpoints. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 211\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_Remove}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; Remove}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::Remove}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::Remove(int bp /* 0 */)	}
{\f8\fs22 \par \par Remove the specified breakpoint from the list of breakpoints in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bp}
{\f8\fs22 : An integer that specifies the 0-based index into the list of breakpoints for the breakpoint to remove. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 234\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_Enable}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; Enable}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::Enable}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::Enable(int bp /* 0 */)}
{\f8\fs22 \par \par Enable the specified breakpoint in the list of breakpoints in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bp}
{\f8\fs22 : An integer that specifies the 0-based index into the list of breakpoints for the breakpoint to remove. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 251\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_Disable}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; Disable}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::Disable}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::Disable(int bp /* 0 */)}
{\f8\fs22 \par \par Disable the specified breakpoint in the list of breakpoints in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bp}
{\f8\fs22 : An integer that specifies the 0-based index into the list of breakpoints for the breakpoint to remove. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 274\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_ClearAll}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; ClearAll}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::ClearAll}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::ClearAll()}
{\f8\fs22 \par \par Remove all breakpoints from the list of breakpoints in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 296\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_BreakpointIsSet}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; BreakpointIsSet}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::BreakpointIsSet}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::BreakpointIsSet(LPCSTR expr, LPCSTR source /* NULL */)}
{\f8\fs22 \par \par Determine if the breakpoint specified is set in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the breakpoint is set (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expr}
{\f8\fs22 : A pointer to a string that contains all or part of the expected expression for the breakpoint.\par \par }
{\i\f8\fs22 source}
{\f8\fs22 : A pointer to a string that contains all or part of the expected source filename for the breakpoint. NULL means use expression only. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 324\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_BreakpointIsEnabled}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; BreakpointIsEnabled}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::BreakpointIsEnabled}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpoints::BreakpointIsEnabled(LPCSTR expr, LPCSTR source /* NULL */)}
{\f8\fs22 \par \par Determine if the specified breakpoint is enabled in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the breakpoint is enabled (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expr}
{\f8\fs22 : A pointer to a string that contains all or part of the expected expression for the breakpoint.\par \par }
{\i\f8\fs22 source}
{\f8\fs22 : A pointer to a string that contains all or part of the expected source filename for the breakpoint. NULL means use expression only. (Default value is NULL.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 350\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_GetCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; GetCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::GetCount}}{\f8\fs22  }
{\f8\fs32 int UIBreakpoints::GetCount(void)}
{\f8\fs22 \par \par Get the number of breakpoints set in the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that specifies the number of breakpoints set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 378\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_GetBreakpointStr}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; GetBreakpointStr}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::GetBreakpointStr}}{\f8\fs22  }
{\f8\fs32 CString UIBreakpoints::GetBreakpointStr(int bp /* 0 */)}
{\f8\fs22 \par \par Get a string that describes the specified breakpoint from the Breakpoints dialog. The Breakpoints dialog must be active when this function is called.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains a string describing the specified breakpoint.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bp}
{\f8\fs22 : An integer that specifies the 0-based index into the list of breakpoints. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 391\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpoints_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpoints; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpoints::Close}}{\f8\fs22  }
{\f8\fs32 HWND UIBreakpoints::Close(void)}
{\f8\fs22 \par \par Close the Breakpoints dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 NULL if successful; the HWND of any remaining dialog or message box otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 409\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpointCondition_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpointCondition; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpointCondition::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpointCondition::Activate(void)}
{\f8\fs22 \par \par Open the Breakpoint Condition dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 435\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpointCondition_SetExpression}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpointCondition; SetExpression}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpointCondition::SetExpression}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpointCondition::SetExpression(LPCSTR expression, int expr_type)}
{\f8\fs22 \par \par Set the expression in the Breakpoint Condition dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expression}
{\f8\fs22 : A pointer to a string that contains the expression to set.\par \par }
{\i\f8\fs22 expr_type}
{\f8\fs22 : A value that indicates the type of expression. This parameter is NYI.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 449\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpointCondition_SetPassCount}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpointCondition; SetPassCount}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpointCondition::SetPassCount}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpointCondition::SetPassCount(LPCSTR passcount)}
{\f8\fs22 \par \par Set the pass count in the Breakpoint Condition dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 passcount}
{\f8\fs22 : A pointer to a string that contains the pass count.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 463\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBreakpointCondition_SetLength}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBreakpointCondition; SetLength}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBreakpointCondition::SetLength}}{\f8\fs22  }
{\f8\fs32 BOOL UIBreakpointCondition::SetLength(LPCSTR passcount)}
{\f8\fs22 \par \par Set the Number of elements in the Breakpoint Condition dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 length}
{\f8\fs22 : - A pointer to a string that contains the length.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibp.cpp, 478\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__FillStringArrayFromClipBrd}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} FillStringArrayFromClipBrd}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} FillStringArrayFromClipBrd}}{\f8\fs22  }
{\f8\fs32 BOOL FillStringArrayFromClipBrd( CStringArray& lines )}
{\f8\fs22 \par \par Fill the given CStringArray with lines from the clipboard.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 lines}
{\f8\fs22 : A reference to a CStringArray that will contain the lines of text from the clipboard.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 50\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::IsValid(void) const}
{\f8\fs22 \par \par Determine if the browser window is valid by verifying the push pin control exists.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the browser window is valid. TRUE if it's valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 99\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_Find}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; Find}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::Find}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::Find(void)}
{\f8\fs22 \par \par Find the browser window and attach to it.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 122\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_IsActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; IsActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::IsActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::IsActive(void)}
{\f8\fs22 \par \par Determine if the browser window is active.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the browser is active. TRUE if it's active; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 137\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_Query}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; Query}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::Query}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::Query(QueryType query, LPCSTR name /*NULL*/, int filters /*NONE*/)}
{\f8\fs22 \par \par Perform a query via the Browse dialog that results in the browser window being active.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 query}
{\f8\fs22 : A QueryType value that indicates the type of query to perform: DefRef, FileOutline, BaseClass, DerivedClass, CallGraph, CallerGraph.\par \par }
{\i\f8\fs22 name}
{\f8\fs22 : A pointer to a string that contains the name of the symbol to query on. (Default value is NULL.)\par \par }
{\i\f8\fs22 filter}
{\f8\fs22 : A bit field that specifies the type of filter to apply to the query: NONE, CLASSES, FUNCTIONS, DATA, MACROS, TYPES. (Default value is NONE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 151\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_SetFilters}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; SetFilters}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::SetFilters}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::SetFilters(QueryType type, int filters)}
{\f8\fs22 \par \par Set the filters for the given query\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 type}
{\f8\fs22 : A QueryType value that indicates the type of query to set the filters for: DefRef, FileOutline, BaseClass, DerivedClass, CallGraph, CallerGraph.\par \par }
{\i\f8\fs22 filters}
{\f8\fs22 : A bit field that specifies the type of filter to set: NONE, CLASSES, FUNCTIONS, DATA, MACROS, TYPES. (Default value is NONE.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 301\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_GetFilters}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; GetFilters}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::GetFilters}}{\f8\fs22  }
{\f8\fs32 int UIBrowse::GetFilters(QueryType type)}
{\f8\fs22 \par \par Get the filters for the current query (of the type given).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A bit field that specifies the type of filter: NONE, CLASSES, FUNCTIONS, DATA, MACROS, TYPES.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 type}
{\f8\fs22 : A QueryType value that indicates the type of query: DefRef, FileOutline, BaseClass, DerivedClass, CallGraph, CallerGraph.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 366\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_PopContext}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; PopContext}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::PopContext}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::PopContext(void)}
{\f8\fs22 \par \par Perform the Pop Context browser operation.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 401\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_FirstDefinition}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; FirstDefinition}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::FirstDefinition}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::FirstDefinition(void)}
{\f8\fs22 \par \par Perform the Go To Definition browser operation.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 413\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_NextDefinition}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; NextDefinition}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::NextDefinition}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::NextDefinition(void)}
{\f8\fs22 \par \par Perform the Go To Next Definition browser operation.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 424\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_PrevDefinition}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; PrevDefinition}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::PrevDefinition}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::PrevDefinition(void)}
{\f8\fs22 \par \par Perform the Go To Previous Definition browser operation.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 435\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_FirstReference}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; FirstReference}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::FirstReference}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::FirstReference(void)}
{\f8\fs22 \par \par Perform the Go To Reference browser operation.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 446\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_NextReference}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; NextReference}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::NextReference}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::NextReference(void)}
{\f8\fs22 \par \par Perform the Go To Next Reference browser operation.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 457\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_PrevReference}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; PrevReference}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::PrevReference}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::PrevReference(void)}
{\f8\fs22 \par \par Perform the Go To Previous Reference browser operation.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 468\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_GotoPane}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; GotoPane}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::GotoPane}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::GotoPane(PaneType pane, QueryType type)}
{\f8\fs22 \par \par Set focus to the specified pane in the browser window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 pane}
{\f8\fs22 : A PaneType value that specifies which pane to set focus to: SYMBOL_PANE, MEMBER_PANE, DEFREF_PANE.\par \par }
{\i\f8\fs22 type}
{\f8\fs22 : A QueryType value that indicates the type of query: DefRef, FileOutline, BaseClass, DerivedClass, CallGraph, CallerGraph.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 481\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_GotoDefinitionsHeading}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; GotoDefinitionsHeading}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::GotoDefinitionsHeading}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::GotoDefinitionsHeading(void)}
{\f8\fs22 \par \par Go to the definitions heading in definitions/references pane in the browser window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 507\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_GotoReferencesHeading}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; GotoReferencesHeading}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::GotoReferencesHeading}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::GotoReferencesHeading(void)}
{\f8\fs22 \par \par Go to the references heading in the definitions/references pane in the browser window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 522\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_ExpandCurrentItem}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; ExpandCurrentItem}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::ExpandCurrentItem}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::ExpandCurrentItem(void)}
{\f8\fs22 \par \par Expand the selected item in the browser window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 537\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_GetCurrentItem}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; GetCurrentItem}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::GetCurrentItem}}{\f8\fs22  }
{\f8\fs32 CString UIBrowse::GetCurrentItem(void)}
{\f8\fs22 \par \par Get a string that describes the currently selected item in the browser window. This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the description of the currently selected item.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 548\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_Navigate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; Navigate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::Navigate}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::Navigate(void)}
{\f8\fs22 \par \par Navigate from the currently selected item in the browser window to its location in the source code.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 559\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_SelectNthItem}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; SelectNthItem}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::SelectNthItem}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::SelectNthItem(QueryType type, int item)}
{\f8\fs22 \par \par Select the n-th item in the current pane in the browser window. Expandable nodes will be expanded by this function.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 type}
{\f8\fs22 : A QueryType value that indicates the type of query: DefRef, FileOutline, BaseClass, DerivedClass, CallGraph, CallerGraph.\par \par }
{\i\f8\fs22 item}
{\f8\fs22 : An integer that contains the 0-based index of the item to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 572\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_CrackFileLine}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; CrackFileLine}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::CrackFileLine}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::CrackFileLine(LPCSTR file_line,CHAR *file,int *line)}
{\f8\fs22 \par \par Parse the notation returned from GetNthDefinition/Reference (i.e. f:\cafe\cafe\wb\cobrowse.h(33)).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 file_line}
{\f8\fs22 : A pointer to a string that contains the file+line string to crack.\par \par }
{\i\f8\fs22 file}
{\f8\fs22 : A pointer to a character buffer that will contain the file part of the file_line string.\par \par }
{\i\f8\fs22 line}
{\f8\fs22 : A pointer to an integer buffer that will contain the line part of the file_line string.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 596\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_ButtonDown}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; ButtonDown}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::ButtonDown}}{\f8\fs22  }
{\f8\fs32 void UIBrowse::ButtonDown(const char *button)}
{\f8\fs22 \par \par Set the specified button to its down state.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 button}
{\f8\fs22 : A pointer to a string that contains the name of the button.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 625\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_ButtonUp}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; ButtonUp}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::ButtonUp}}{\f8\fs22  }
{\f8\fs32 void UIBrowse::ButtonUp(const char *button)}
{\f8\fs22 \par \par Set the specified button to its up state.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 none\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 button}
{\f8\fs22 : A pointer to a string that contains the name of the button.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 636\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_IsButtonDown}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; IsButtonDown}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::IsButtonDown}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::IsButtonDown(const char *button)}
{\f8\fs22 \par \par Determine if the specified button is in its down state.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the button is in its down state (TRUE) or not.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 button}
{\f8\fs22 : A pointer to a string that contains the name of the button.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 647\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_CloseBrowser}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; CloseBrowser}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::CloseBrowser}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::CloseBrowser(void)}
{\f8\fs22 \par \par Close the browser window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 659\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_GetMatches}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; GetMatches}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::GetMatches}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::GetMatches( CStringArray& matches )}
{\f8\fs22 \par \par Get the list of symbols that match the symbol name specified in the last query from the symbols pane (the left pane) in the browser window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 matches}
{\f8\fs22 : A CStringArray reference that will contain the list of symbols.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 679\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_SelectMatch}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; SelectMatch}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::SelectMatch}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::SelectMatch( CString name )}
{\f8\fs22 \par \par Select the specified match by name in the symbols pane (the left pane) in the browser window. (See SelectMatch(int) to select a symbol by index.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 name}
{\f8\fs22 : A CString that contains the name of the match to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 709\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_SelectMatch}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; SelectMatch}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::SelectMatch}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::SelectMatch( int index )}
{\f8\fs22 \par \par Select the specified match by index in the symbols pane (the left pane) in the browser window. (See SelectMatch(CString) to select a symbol by name.) This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 index}
{\f8\fs22 : An integer that contains the 1-based index into the list of symbols.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 735\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__FindMatch}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} FindMatch}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} FindMatch}}{\f8\fs22  }
{\f8\fs32 int FindMatch(CStringArray& matches, CString name)}
{\f8\fs22 \par \par returns the index of the specified match in the list of matches in the symbol pane of the browser wnd.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 the zero-based index of the match if successful, -1 if not successful.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 name}
{\f8\fs22 : A CString that contains the name of the match to search for.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 747\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_GetMembers}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; GetMembers}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::GetMembers}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::GetMembers( CStringArray& members )}
{\f8\fs22 \par \par Get the list of members for the last query performed in the browser window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 members}
{\f8\fs22 : A CStringArray reference that will contain the list of members.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 774\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_SelectMember}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; SelectMember}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::SelectMember}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::SelectMember( CString member )}
{\f8\fs22 \par \par Select the specified member by name in the member pane (the upper right pane) in the browser window. (See SelectMember(int) to select a member by index.) This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 member}
{\f8\fs22 : A CString that contains the name of the member to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 803\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_SelectMember}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; SelectMember}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::SelectMember}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::SelectMember( int index )}
{\f8\fs22 \par \par Select the specified member by index in the member pane (the upper right pane) in the browser window. (See SelectMember(CString) to select a member by name.) This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 index}
{\f8\fs22 : An integer that contains the 1-based index of the member to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 815\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_GetLocations}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; GetLocations}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::GetLocations}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::GetLocations( CStringArray& locations )}
{\f8\fs22 \par \par Get the list of definitions and references for the selected symbol in last query performed in the browser window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 locations}
{\f8\fs22 : A CStringArray reference that will contain the list of defs/refs.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 827\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_GetFirstLevelBranches}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; GetFirstLevelBranches}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::GetFirstLevelBranches}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::GetFirstLevelBranches( CStringArray& branches )}
{\f8\fs22 \par \par Get the list of first level branches for the last query performed in the browser window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 branches}
{\f8\fs22 : A CStringArray reference that will contain the list of first level branches.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 858\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_SelectDefinition}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; SelectDefinition}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::SelectDefinition}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::SelectDefinition( CString definition )}
{\f8\fs22 \par \par Select the specified definition by name in the definitions/references pane (the lower right pane) in the browser window. (See SelectDefinition(int) to select a definition by index.) This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 definition}
{\f8\fs22 : A CString that contains the name of the definition to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 909\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_SelectDefinition}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; SelectDefinition}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::SelectDefinition}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::SelectDefinition( int index )}
{\f8\fs22 \par \par Select the specified definition by index in the definitions/references pane (the lower right pane) in the browser window. (See SelectDefinition(CString) to select a definition by name.) This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 index}
{\f8\fs22 : An integer that contains the 1-based index of the definition to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 921\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_SelectReference}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; SelectReference}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::SelectReference}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::SelectReference( CString reference )}
{\f8\fs22 \par \par Select the specified reference by name in the definitions/references pane (the lower right pane) in the browser window. (See SelectReference(int) to select a reference by index.) This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 reference}
{\f8\fs22 : A CString that contains the name of the reference to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 933\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_SelectReference}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; SelectReference}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::SelectReference}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::SelectReference( int index )}
{\f8\fs22 \par \par Select the specified reference by index in the definitions/references pane (the lower right pane) in the browser window. (See SelectReference(CString) to select a reference by name.) This function is NYI.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 index}
{\f8\fs22 : An integer that contains the 1-based index of the reference to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 945\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_GetAmbiguities}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; GetAmbiguities}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::GetAmbiguities}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::GetAmbiguities( CStringArray& ambiguities )}
{\f8\fs22 \par \par Get the list of ambiguities from the Resolve Ambiguities dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ambiguities}
{\f8\fs22 : A reference to a CStringArray that will contain the list of ambiguities.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 960\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_GetCurrentAmbiguity}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; GetCurrentAmbiguity}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::GetCurrentAmbiguity}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::GetCurrentAmbiguity( CString& symbol )}
{\f8\fs22 \par \par Get the currently selected ambiguity from the Resolve Ambiguities dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A reference to a CString that will contain the name of the currently selected ambiguity.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 977\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_SelectAmbiguity}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; SelectAmbiguity}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::SelectAmbiguity}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::SelectAmbiguity( CString symbol )}
{\f8\fs22 \par \par Select the specified ambiguity by name in the Resolve Ambiguities dialog. (See SelectAmbiguity(int) to select an ambiguity by index.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A CString that contains the name of the ambiguity to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 994\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_SelectAmbiguity}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; SelectAmbiguity}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::SelectAmbiguity}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::SelectAmbiguity( int index )}
{\f8\fs22 \par \par Select the specified ambiguity by index in the Resolve Ambiguities dialog. (See SelectAmbiguity(CString) to select an ambiguity by name.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 index}
{\f8\fs22 : An integer that contains the 1-based index of the ambiguity to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 1022\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIBrowse_CancelAmbiguity}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIBrowse; CancelAmbiguity}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIBrowse::CancelAmbiguity}}{\f8\fs22  }
{\f8\fs32 BOOL UIBrowse::CancelAmbiguity()}
{\f8\fs22 \par \par Cancel the query by cancelling the Resolve Ambiguities dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 1048\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAmbiguiousSymbolDialog_GetAmbiguities}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAmbiguiousSymbolDialog; GetAmbiguities}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAmbiguiousSymbolDialog::GetAmbiguities}}{\f8\fs22  }
{\f8\fs32 BOOL UIAmbiguiousSymbolDialog::GetAmbiguities( CStringArray& ambiguities )}
{\f8\fs22 \par \par Get the list of ambiguities from the Resolve Ambiguities dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 ambiguities}
{\f8\fs22 : A reference to a CStringArray that will contain the list of ambiguities.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 1071\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAmbiguiousSymbolDialog_GetCurrentAmbiguity}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAmbiguiousSymbolDialog; GetCurrentAmbiguity}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAmbiguiousSymbolDialog::GetCurrentAmbiguity}}{\f8\fs22  }
{\f8\fs32 BOOL UIAmbiguiousSymbolDialog::GetCurrentAmbiguity( CString& symbol )}
{\f8\fs22 \par \par Get the currently selected ambiguity from the Resolve Ambiguities dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A reference to a CString that will contain the name of the currently selected ambiguity.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 1105\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAmbiguiousSymbolDialog_SelectAmbiguity}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAmbiguiousSymbolDialog; SelectAmbiguity}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAmbiguiousSymbolDialog::SelectAmbiguity}}{\f8\fs22  }
{\f8\fs32 BOOL UIAmbiguiousSymbolDialog::SelectAmbiguity( CString symbol )}
{\f8\fs22 \par \par Select the specified ambiguity by name in the Resolve Ambiguities dialog. (See SelectAmbiguity(int) to select an ambiguity by index.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A CString that contains the name of the ambiguity to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 1118\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAmbiguiousSymbolDialog_SelectAmbiguity}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAmbiguiousSymbolDialog; SelectAmbiguity}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAmbiguiousSymbolDialog::SelectAmbiguity}}{\f8\fs22  }
{\f8\fs32 BOOL UIAmbiguiousSymbolDialog::SelectAmbiguity( int index )}
{\f8\fs22 \par \par Select the specified ambiguity by index in the Resolve Ambiguities dialog. (See SelectAmbiguity(CString) to select an ambiguity by name.)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 index}
{\f8\fs22 : An integer that contains the 1-based index of the ambiguity to select.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 1131\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIAmbiguiousSymbolDialog_Cancel}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIAmbiguiousSymbolDialog; Cancel}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIAmbiguiousSymbolDialog::Cancel}}{\f8\fs22  }
{\f8\fs32 HWND UIAmbiguiousSymbolDialog::Cancel(void)}
{\f8\fs22 \par \par Close the Resolve Ambiguities dialog by clicking the Cancel button.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 NULL if successful; the HWND of any remaining messsage or dialog box otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 1144\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id__ToggleCaseSensitivity}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} ToggleCaseSensitivity}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} ToggleCaseSensitivity}}{\f8\fs22  }
{\f8\fs32 BOOL ToggleCaseSensitivity(TOGGLE_TYPE t)}
{\f8\fs22 \par \par Toggle the case-sensitivity of browser queries.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 t}
{\f8\fs22 : an enum type with value TOGGLE_OFF or TOGGLE_ON.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uibrowse.cpp, 1162\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICoProcessor_GetCPRegister}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICoProcessor; GetCPRegister}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICoProcessor::GetCPRegister}}{\f8\fs22  }
{\f8\fs32 CString UICoProcessor::GetCPRegister(int reg)}
{\f8\fs22 \par \par Get the value of one of the coprocessor's registers.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the value of the specified coprocessor's register.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 reg}
{\f8\fs22 : An integer that specifies the 1-based index into the set of coprocessor registers.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uicp.cpp, 32\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICoProcessor_SetCPRegister}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICoProcessor; SetCPRegister}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICoProcessor::SetCPRegister}}{\f8\fs22  }
{\f8\fs32 BOOL UICoProcessor::SetCPRegister(int reg, LPCSTR value)}
{\f8\fs22 \par \par Set the value of one of the coprocessor's registers.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 reg}
{\f8\fs22 : An integer that specifies the 1-based index into the set of coprocessor registers.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a string that contains the value to set the specified register to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uicp.cpp, 51\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICoProcessor_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICoProcessor; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICoProcessor::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UICoProcessor::IsValid(void) const}
{\f8\fs22 \par \par Determine if the register's window is valid by checking that the HWND is valid and is a toolbar HWND.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the register's window is valid. TRUE if it's valid; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uicp.cpp, 68\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICoProcessor_AttachActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICoProcessor; AttachActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICoProcessor::AttachActive}}{\f8\fs22  }
{\f8\fs32 BOOL UICoProcessor::AttachActive(void)}
{\f8\fs22 \par \par Attach to the registers window if it's the active window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uicp.cpp, 93\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICoProcessor_Find}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICoProcessor; Find}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICoProcessor::Find}}{\f8\fs22  }
{\f8\fs32 BOOL UICoProcessor::Find(void)}
{\f8\fs22 \par \par Find the registers window and attach to it\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uicp.cpp, 124\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UICoProcessor_IsActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UICoProcessor; IsActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UICoProcessor::IsActive}}{\f8\fs22  }
{\f8\fs32 BOOL UICoProcessor::IsActive(void)}
{\f8\fs22 \par \par Determine if the registers window is active.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the register's window is active (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uicp.cpp, 140\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDAM_GotoSymbol}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDAM; GotoSymbol}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDAM::GotoSymbol}}{\f8\fs22  }
{\f8\fs32 BOOL UIDAM::GotoSymbol(LPCSTR symbol)}
{\f8\fs22 \par \par Go to the specified symbol in the disassembly window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the name of the symbol to go to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uidam.cpp, 31\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDAM_GotoAddress}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDAM; GotoAddress}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDAM::GotoAddress}}{\f8\fs22  }
{\f8\fs32 BOOL UIDAM::GotoAddress(int address)}
{\f8\fs22 \par \par Go to the specified address in the disassembly window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 address}
{\f8\fs22 : An integer that contains the address to go to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uidam.cpp, 46\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDAM_GetInstruction}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDAM; GetInstruction}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDAM::GetInstruction}}{\f8\fs22  }
{\f8\fs32 CString UIDAM::GetInstruction(int offset /* 0 */, int range /* 1 */)}
{\f8\fs22 \par \par Get the instruction(s) at the current location in the diassembly window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the instructions in the range specified.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 offset}
{\f8\fs22 : An integer that contains the offset (in lines) from the current cursor position to start retrieving instructions from. This value is negative to move up in the window (down in memory). (Default value is 0.)\par \par }
{\i\f8\fs22 range}
{\f8\fs22 : An integer that contains the number of instructions to retrieve (also in lines). (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uidam.cpp, 62\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDAM_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDAM; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDAM::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIDAM::IsValid(void) const}
{\f8\fs22 \par \par Determine if the disassembly window is a valid window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean that indicates whether the diassembly window is valid (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uidam.cpp, 90\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDAM_AttachActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDAM; AttachActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDAM::AttachActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIDAM::AttachActive(void)}
{\f8\fs22 \par \par Attach to the disassembly window if it's the active window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uidam.cpp, 100\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDAM_Find}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDAM; Find}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDAM::Find}}{\f8\fs22  }
{\f8\fs32 BOOL UIDAM::Find(void)}
{\f8\fs22 \par \par Find the disassembly window and attach to it\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uidam.cpp, 116\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDAM_IsActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDAM; IsActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDAM::IsActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIDAM::IsActive(void)}
{\f8\fs22 \par \par Determine if the disassembly window is active.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the disassembly window is active (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uidam.cpp, 141\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDAM_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDAM; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDAM::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIDAM::Activate(void)}
{\f8\fs22 \par \par Bring up the disassembly window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the disassembly window is active (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uidam.cpp, 152\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIDebug_ShowDockWindow}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIDebug; ShowDockWindow}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIDebug::ShowDockWindow}}{\f8\fs22  }
{\f8\fs32 BOOL UIDebug::ShowDockWindow(UINT id, BOOL bShow /*=TRUE*/)}
{\f8\fs22 \par \par Open the docking window with the given id.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 The HWND of the opened window. NULL if the function fails.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 id}
{\f8\fs22 : The id of the docking window to open (IDW_OUTPUT_WIN, IDW_WATCH_WIN, IDW_LOCALS_WIN, IDW_CPU_WIN, IDW_MEMORY_WIN, IDW_CALLS_WIN, IDW_DISASSY_WIN).\par \par }
{\i\f8\fs22 bShow}
{\f8\fs22 : TRUE to show the window; FALSE to hide it (default is TRUE).\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uidebug.cpp, 35\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIEEWindow_GetState}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIEEWindow; GetState}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIEEWindow::GetState}}{\f8\fs22  }
{\f8\fs32 int UIEEWindow::GetState(int row /* ROW_CURRENT */)}
{\f8\fs22 \par \par Get the state of the expression at the specified row in the expression evaluator window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A bit field that specifies the state of the expression: NOT_EXPANDABLE, EXPANDED, COLLAPSED.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 row}
{\f8\fs22 : An integer that specifies the 1-based row of the EE window. Use ROW_CURRENT to specify the current row; ROW_BOTTOM to specify the last row; and ROW_ALL to specify all rows. (Default value is ROW_CURRENT.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uieewnd.cpp, 26\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIEEWindow_GetType}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIEEWindow; GetType}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIEEWindow::GetType}}{\f8\fs22  }
{\f8\fs32 CString UIEEWindow::GetType(int row /* ROW_CURRENT */)}
{\f8\fs22 \par \par Get the type of the expression at the specified row in the expression evaluator window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains a description of the type of the expression.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 row}
{\f8\fs22 : An integer that specifies the 1-based row of the EE window. Use ROW_CURRENT to specify the current row; ROW_BOTTOM to specify the last row; and ROW_ALL to specify all rows. (Default value is ROW_CURRENT.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uieewnd.cpp, 40\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIEEWindow_GetName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIEEWindow; GetName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIEEWindow::GetName}}{\f8\fs22  }
{\f8\fs32 CString UIEEWindow::GetName(int row /* ROW_CURRENT */)}
{\f8\fs22 \par \par Get the name of the expression at the specified row in the expression evaluator window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the name of the expression.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 row}
{\f8\fs22 : An integer that specifies the 1-based row of the EE window. Use ROW_CURRENT to specify the current row; ROW_BOTTOM to specify the last row; and ROW_ALL to specify all rows. (Default value is ROW_CURRENT.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uieewnd.cpp, 54\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIEEWindow_GetValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIEEWindow; GetValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIEEWindow::GetValue}}{\f8\fs22  }
{\f8\fs32 CString UIEEWindow::GetValue(int row /* ROW_CURRENT */)}
{\f8\fs22 \par \par Get the value of the expression at the specified row in the expression evaluator window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the value of the expression.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 row}
{\f8\fs22 : An integer that specifies the 1-based row of the EE window. Use ROW_CURRENT to specify the current row; ROW_BOTTOM to specify the last row; and ROW_ALL to specify all rows. (Default value is ROW_CURRENT.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uieewnd.cpp, 68\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIEEWindow_SelectRows}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIEEWindow; SelectRows}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIEEWindow::SelectRows}}{\f8\fs22  }
{\f8\fs32 int UIEEWindow::SelectRows(int start_row /* ROW_CURRENT */, int total_rows /*= 1*/)}
{\f8\fs22 \par \par Select the specified rows in the EE window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 start_row}
{\f8\fs22 : An integer that specifies the 1-based row of the EE window. Use ROW_CURRENT to specify the current row; ROW_BOTTOM to specify the last row; and ROW_ALL to specify all rows. (Default value is ROW_CURRENT.)\par \par }
{\i\f8\fs22 total_rows}
{\f8\fs22 : An integer that specifies the number of rows to select. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uieewnd.cpp, 83\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIEEWindow_Expand}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIEEWindow; Expand}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIEEWindow::Expand}}{\f8\fs22  }
{\f8\fs32 int UIEEWindow::Expand(int row /* ROW_CURRENT */)}
{\f8\fs22 \par \par Expand the specified row in the EE window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 row}
{\f8\fs22 : An integer that specifies the 1-based row of the EE window. Use ROW_CURRENT to specify the current row; ROW_BOTTOM to specify the last row; and ROW_ALL to specify all rows. (Default value is ROW_CURRENT.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uieewnd.cpp, 138\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIEEWindow_Collapse}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIEEWindow; Collapse}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIEEWindow::Collapse}}{\f8\fs22  }
{\f8\fs32 int UIEEWindow::Collapse(int row /* ROW_CURRENT */)}
{\f8\fs22 \par \par Collapse the specified row in the EE window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 row}
{\f8\fs22 : An integer that specifies the 1-based row of the EE window. Use ROW_CURRENT to specify the current row; ROW_BOTTOM to specify the last row; and ROW_ALL to specify all rows. (Default value is ROW_CURRENT.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uieewnd.cpp, 152\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIEEWindow_GetAllFields}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIEEWindow; GetAllFields}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIEEWindow::GetAllFields}}{\f8\fs22  }
{\f8\fs32 int UIEEWindow::GetAllFields(EXPR_INFO* expr_info, int start_row /*= ROW_CURRENT*/, int total_rows /*= 1*/)}
{\f8\fs22 \par \par Get information about the expression(s) in the given range of expressions in the expression evaluator window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 expr_info}
{\f8\fs22 : A pointer to an EXPR_INFO object that will contain the information about the expression(s).\par \par }
{\i\f8\fs22 start_row}
{\f8\fs22 : An integer that specifies the 1-based row of the EE window. Use ROW_CURRENT to specify the current row; ROW_BOTTOM to specify the last row; and ROW_ALL to specify all rows. (Default value is ROW_CURRENT.)\par \par }
{\i\f8\fs22 total_rows}
{\f8\fs22 : An integer that specifies the number of rows to retrieve. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uieewnd.cpp, 168\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExceptions_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExceptions; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExceptions::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIExceptions::Activate(void)}
{\f8\fs22 \par \par Open the Exceptions dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiexcpt.cpp, 30\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExceptions_ExcptToString}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExceptions; ExcptToString}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExceptions::ExcptToString}}{\f8\fs22  }
{\f8\fs32 CString UIExceptions::ExcptToString(int excpt)}
{\f8\fs22 \par \par Convert an exception ID value to a string. For example, the exception value 0xc0000005 is converted to the string c0000005.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the exception value converted to a string.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 excpt}
{\f8\fs22 : An integer that contains the exception value.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiexcpt.cpp, 45\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExceptions_SetNumber}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExceptions; SetNumber}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExceptions::SetNumber}}{\f8\fs22  }
{\f8\fs32 BOOL UIExceptions::SetNumber(int code)}
{\f8\fs22 \par \par Set the exception number in the Exceptions dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 code}
{\f8\fs22 : An integer that contains the exception ID to set.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiexcpt.cpp, 58\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExceptions_SetName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExceptions; SetName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExceptions::SetName}}{\f8\fs22  }
{\f8\fs32 BOOL UIExceptions::SetName(LPCSTR name)}
{\f8\fs22 \par \par Set the exception name in the Exceptions dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 name}
{\f8\fs22 : A pointer to a string that contains the name of the exception.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiexcpt.cpp, 71\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExceptions_SetOption}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExceptions; SetOption}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExceptions::SetOption}}{\f8\fs22  }
{\f8\fs32 BOOL UIExceptions::SetOption(int option)}
{\f8\fs22 \par \par Set the exception action in the Exceptions dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 option}
{\f8\fs22 : A value that specifies the action to take when the exception is detected: STOP_ALWAYS, IF_NOT_HANDLED.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiexcpt.cpp, 84\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExceptions_AddException}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExceptions; AddException}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExceptions::AddException}}{\f8\fs22  }
{\f8\fs32 BOOL UIExceptions::AddException(void)}
{\f8\fs22 \par \par Click the Add button in the Exceptions dialog to add a new exception.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiexcpt.cpp, 102\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExceptions_ChangeException}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExceptions; ChangeException}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExceptions::ChangeException}}{\f8\fs22  }
{\f8\fs32 BOOL UIExceptions::ChangeException(void)}
{\f8\fs22 \par \par Click the Change button in the Exceptions dialog to change the exception information.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiexcpt.cpp, 120\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExceptions_RestoreDefualts}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExceptions; RestoreDefualts}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExceptions::RestoreDefualts}}{\f8\fs22  }
{\f8\fs32 BOOL UIExceptions::RestoreDefualts(void)}
{\f8\fs22 \par \par Click the Reset button in the Exceptions dialog to restore the default exceptions.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiexcpt.cpp, 139\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExceptions_SetException}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExceptions; SetException}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExceptions::SetException}}{\f8\fs22  }
{\f8\fs32 BOOL UIExceptions::SetException(int code, int option)}
{\f8\fs22 \par \par Add or change an exception in the Exceptions dialog. The exception is added, if it doesn't exist; changed if it does exist.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 code}
{\f8\fs22 : An integer that specifies the exception ID to add or change.\par \par }
{\i\f8\fs22 option}
{\f8\fs22 : A value that specifies the action to take when the exception is detected: STOP_ALWAYS, IF_NOT_HANDLED.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiexcpt.cpp, 154\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExceptions_DeleteException}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExceptions; DeleteException}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExceptions::DeleteException}}{\f8\fs22  }
{\f8\fs32 BOOL UIExceptions::DeleteException(int code)}
{\f8\fs22 \par \par Delete an exception from the Exceptions dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 code}
{\f8\fs22 : An integer that specifies the exception ID to delete.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiexcpt.cpp, 169\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIExceptions_GetException}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIExceptions; GetException}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIExceptions::GetException}}{\f8\fs22  }
{\f8\fs32 CString UIExceptions::GetException(int code)}
{\f8\fs22 \par \par Get the description for the specified exception from the Exceptions dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the description of the specified exception.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 code}
{\f8\fs22 : An integer that specifies the exception ID.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiexcpt.cpp, 193\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UILocals_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UILocals; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UILocals::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UILocals::Activate(void)}
{\f8\fs22 \par \par Bring up the locals window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the register's window is active (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uilocals.cpp, 27\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMemory_AttachActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMemory; AttachActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMemory::AttachActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIMemory::AttachActive(void)}
{\f8\fs22 \par \par Attach to the locals window if it's the active window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimem.cpp, 35\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMemory_Find}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMemory; Find}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMemory::Find}}{\f8\fs22  }
{\f8\fs32 BOOL UIMemory::Find(void)}
{\f8\fs22 \par \par Find the locals window and attach to it\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimem.cpp, 51\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMemory_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMemory; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMemory::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIMemory::IsValid(void) const}
{\f8\fs22 \par \par Determine if the locals window is a valid window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean that indicates whether the locals window is valid (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimem.cpp, 77\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMemory_IsActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMemory; IsActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMemory::IsActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIMemory::IsActive(void)}
{\f8\fs22 \par \par Determine if the locals window is active.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the locals window is active (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimem.cpp, 88\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMemory_GetCurrentAddress}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMemory; GetCurrentAddress}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMemory::GetCurrentAddress}}{\f8\fs22  }
{\f8\fs32 CString UIMemory::GetCurrentAddress(void)}
{\f8\fs22 \par \par Get the starting address of the current caret line in the memory window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the address.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimem.cpp, 100\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMemory_GetCurrentData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMemory; GetCurrentData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMemory::GetCurrentData}}{\f8\fs22  }
{\f8\fs32 CString UIMemory::GetCurrentData(int count /* 1 */, int start /* 0 */)}
{\f8\fs22 \par \par Get data from the current caret line in the memory window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the data.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of data elements to include when getting the data. (Default value is 1.)\par \par }
{\i\f8\fs22 start}
{\f8\fs22 : An integer that contains the number of data elements to skip from the beginning of the line. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimem.cpp, 117\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMemory_GetCurrentChars}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMemory; GetCurrentChars}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMemory::GetCurrentChars}}{\f8\fs22  }
{\f8\fs32 CString UIMemory::GetCurrentChars(int count /* 1 */, int start /* 0 */)}
{\f8\fs22 \par \par Get character data from the current caret line in the memory window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the characters.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 count}
{\f8\fs22 : An integer that contains the number of characters to include when getting the data. (Default value is 1.)\par \par }
{\i\f8\fs22 start}
{\f8\fs22 : An integer that contains the number of Characters to skip from the beginning of the line. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimem.cpp, 149\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMemory_SetCurrentData}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMemory; SetCurrentData}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMemory::SetCurrentData}}{\f8\fs22  }
{\f8\fs32 BOOL UIMemory::SetCurrentData(LPCSTR data, int start /* 0 */)}
{\f8\fs22 \par \par Set data in the current caret line in the memory window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 data}
{\f8\fs22 : A pointer to a string that contains the data to enter into the memory window.\par \par }
{\i\f8\fs22 start}
{\f8\fs22 : An integer that contains the number of data elements to skip from the beginning of the line before entering the data. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimem.cpp, 176\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMemory_SetCurrentChars}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMemory; SetCurrentChars}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMemory::SetCurrentChars}}{\f8\fs22  }
{\f8\fs32 BOOL UIMemory::SetCurrentChars(LPCSTR chars, int start /* 0 */)}
{\f8\fs22 \par \par Set character data in the current caret line in the memory window. (See also SetCurrentChars(char, int).)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 chars}
{\f8\fs22 : A pointer to a string that contains the characters to enter into the memory window.\par \par }
{\i\f8\fs22 start}
{\f8\fs22 : An integer that contains the number of characters to skip from the beginning of the line before entering the data. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimem.cpp, 197\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMemory_SetCurrentChars}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMemory; SetCurrentChars}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMemory::SetCurrentChars}}{\f8\fs22  }
{\f8\fs32 BOOL UIMemory::SetCurrentChars(char chr, int start /* 0 */)}
{\f8\fs22 \par \par Set character data in the current caret line in the memory window. (See also SetCurrentChars(LPCSTR, int).)\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 chr}
{\f8\fs22 : A char that contains the character to enter into the memory window.\par \par }
{\i\f8\fs22 start}
{\f8\fs22 : An integer that contains the number of characters to skip from the beginning of the line before entering the data. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimem.cpp, 218\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMemory_GetFormatWidth}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMemory; GetFormatWidth}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMemory::GetFormatWidth}}{\f8\fs22  }
{\f8\fs32 int UIMemory::GetFormatWidth(int format /* 0 */)}
{\f8\fs22 \par \par Get the width of a single data element in the specified memory window format.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the width of a single data element in the specified memory window format.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 format}
{\f8\fs22 : A value that specifies the memory window format to get the width for: MEM_FORMAT_ASCII, MEM_FORMAT_WCHAR, MEM_FORMAT_BYTE, MEM_FORMAT_SHORT, MEM_FORMAT_SHORT_HEX, MEM_FORMAT_SHORT_UNSIGNED, MEM_FORMAT_LONG, MEM_FORMAT_LONG_HEX, MEM_FORMAT_LONG_UNSIGNED, MEM_FORMAT_REAL, MEM_FORMAT_REAL_LONG. 0 means get the width for the current format. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimem.cpp, 239\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMemory_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMemory; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMemory::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIMemory::Activate(void)}
{\f8\fs22 \par \par Bring up the memory window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the memory window is active (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimem.cpp, 253\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIMemory_GoToAddress}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIMemory; GoToAddress}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIMemory::GoToAddress}}{\f8\fs22  }
{\f8\fs32 int UIMemory::GoToAddress(LPCSTR symbol)}
{\f8\fs22 \par \par Go to the specified address or symbol in the memory window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 symbol}
{\f8\fs22 : A pointer to a string that contains the address or symbol to go to in the memory window.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uimem.cpp, 266\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIQuickWatch_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIQuickWatch; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIQuickWatch::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIQuickWatch::Activate(void)}
{\f8\fs22 \par \par Open the QuickWatch dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiqw.cpp, 33\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIQuickWatch_GetCurrentValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIQuickWatch; GetCurrentValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIQuickWatch::GetCurrentValue}}{\f8\fs22  }
{\f8\fs32 CString UIQuickWatch::GetCurrentValue(void) }
{\f8\fs22 \par \par Returns the value of the current expression in the QuickWatch dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the current value.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiqw.cpp, 47\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIQuickWatch_GetExpression}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIQuickWatch; GetExpression}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIQuickWatch::GetExpression}}{\f8\fs22  }
{\f8\fs32 CString UIQuickWatch::GetExpression(void) }
{\f8\fs22 \par \par Returns the current expression\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the current expression.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiqw.cpp, 60\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIQuickWatch_SetExpression}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIQuickWatch; SetExpression}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIQuickWatch::SetExpression}}{\f8\fs22  }
{\f8\fs32 BOOL UIQuickWatch::SetExpression(LPCSTR exp)}
{\f8\fs22 \par \par Sets a new expression for the Quickwatch dialog. NOTE: does not do a "recalc."\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 exp}
{\f8\fs22 : A pointer to a string that contains the expression to enter in the QuickWatch dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiqw.cpp, 75\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIQuickWatch_SetNewValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIQuickWatch; SetNewValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIQuickWatch::SetNewValue}}{\f8\fs22  }
{\f8\fs32 BOOL UIQuickWatch::SetNewValue(LPCSTR value) }
{\f8\fs22 \par \par Modifies the value for the current expression.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a string that contains the new value to enter in the QuickWatch dialog.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiqw.cpp, 92\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIQuickWatch_Recalc}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIQuickWatch; Recalc}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIQuickWatch::Recalc}}{\f8\fs22  }
{\f8\fs32 BOOL UIQuickWatch::Recalc(void)}
{\f8\fs22 \par \par Recalcs the expression in the expression field.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiqw.cpp, 111\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIQuickWatch_AddWatch}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIQuickWatch; AddWatch}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIQuickWatch::AddWatch}}{\f8\fs22  }
{\f8\fs32 BOOL UIQuickWatch::AddWatch(void)}
{\f8\fs22 \par \par Adds the current expression in the Quick Watch Dialog to the Watch window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiqw.cpp, 124\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIQuickWatch_Close}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIQuickWatch; Close}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIQuickWatch::Close}}{\f8\fs22  }
{\f8\fs32 HWND UIQuickWatch::Close(void)}
{\f8\fs22 \par \par Close the QuickWatch Dailog\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 HWND: NULL means all went well, otherwise return HWND of active window (alert)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiqw.cpp, 136\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIRegisters_GetRegister}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIRegisters; GetRegister}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIRegisters::GetRegister}}{\f8\fs22  }
{\f8\fs32 int UIRegisters::GetRegister(int reg)}
{\f8\fs22 \par \par Get the value of one of the registers in the registers window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that contains the value of the specified register.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 reg}
{\f8\fs22 : An integer that specifies the 1-based index into the set of registers.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uireg.cpp, 32\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIRegisters_SetRegister}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIRegisters; SetRegister}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIRegisters::SetRegister}}{\f8\fs22  }
{\f8\fs32 BOOL UIRegisters::SetRegister(int reg, LPCSTR value)}
{\f8\fs22 \par \par Set the value of the specified register in the registers window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 reg}
{\f8\fs22 : An integer that specifies the 1-based index into the set of registers.\par \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a string that contains the value to set the specified register to.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uireg.cpp, 51\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIRegisters_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIRegisters; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIRegisters::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIRegisters::IsValid(void) const}
{\f8\fs22 \par \par Determine if the registers window is a valid window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean that indicates whether the registers window is valid (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uireg.cpp, 68\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIRegisters_AttachActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIRegisters; AttachActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIRegisters::AttachActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIRegisters::AttachActive(void)}
{\f8\fs22 \par \par Attach to the registers window if it's the active window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uireg.cpp, 78\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIRegisters_Find}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIRegisters; Find}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIRegisters::Find}}{\f8\fs22  }
{\f8\fs32 BOOL UIRegisters::Find(void)}
{\f8\fs22 \par \par Find the registers window and attach to it\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uireg.cpp, 93\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIRegisters_IsActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIRegisters; IsActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIRegisters::IsActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIRegisters::IsActive(void)}
{\f8\fs22 \par \par Determine if the registers window is active.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the registers window is active (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uireg.cpp, 118\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIRegisters_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIRegisters; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIRegisters::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIRegisters::Activate(void)}
{\f8\fs22 \par \par Bring up the registers window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the registers window is active (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uireg.cpp, 129\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIStack_GetFunction}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIStack; GetFunction}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIStack::GetFunction}}{\f8\fs22  }
{\f8\fs32 CString UIStack::GetFunction(int level /* 0 */)}
{\f8\fs22 \par \par Get the call stack description string at the given call stack level (index).\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the call stack description string from the given call stack level.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 level}
{\f8\fs22 : An integer that contains the 0-based index into the call stack. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uistack.cpp, 33\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIStack_GetAllFunctions}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIStack; GetAllFunctions}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIStack::GetAllFunctions}}{\f8\fs22  }
{\f8\fs32 CString UIStack::GetAllFunctions(void)}
{\f8\fs22 \par \par Get all the call stack frame descriptions for all frames on the call stack.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains a newline-delimited list of call stack frames.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uistack.cpp, 49\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIStack_NavigateStack}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIStack; NavigateStack}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIStack::NavigateStack}}{\f8\fs22  }
{\f8\fs32 BOOL UIStack::NavigateStack(int level /* 0 */)}
{\f8\fs22 \par \par Navigate to the specified call stack frame.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 level}
{\f8\fs22 : An integer that contains the 0-based index into the call stack. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uistack.cpp, 68\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIStack_IsValid}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIStack; IsValid}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIStack::IsValid}}{\f8\fs22  }
{\f8\fs32 BOOL UIStack::IsValid(void) const}
{\f8\fs22 \par \par Determine if the call stack window is a valid window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean that indicates whether the call stack window is valid (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uistack.cpp, 88\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIStack_AttachActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIStack; AttachActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIStack::AttachActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIStack::AttachActive(void)}
{\f8\fs22 \par \par Attach to the call stack window if it's the active window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uistack.cpp, 98\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIStack_Find}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIStack; Find}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIStack::Find}}{\f8\fs22  }
{\f8\fs32 BOOL UIStack::Find(void)}
{\f8\fs22 \par \par Find the call stack window and attach to it\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uistack.cpp, 113\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIStack_IsActive}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIStack; IsActive}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIStack::IsActive}}{\f8\fs22  }
{\f8\fs32 BOOL UIStack::IsActive(void)}
{\f8\fs22 \par \par Determine if the call stack window is active.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the call stack window is active (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uistack.cpp, 138\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIStack_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIStack; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIStack::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIStack::Activate(void)}
{\f8\fs22 \par \par Bring up the call stack window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the call stack window is active (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uistack.cpp, 149\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIThreads_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIThreads; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIThreads::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIThreads::Activate(void)}
{\f8\fs22 \par \par Open the Threads dialog.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uithread.cpp, 31\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIThreads_ThreadToString}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIThreads; ThreadToString}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIThreads::ThreadToString}}{\f8\fs22  }
{\f8\fs32 CString UIThreads::ThreadToString(int thread)}
{\f8\fs22 \par \par Convert a thread ID value to a string. For example, the thread value 0x95 is converted to the string 00000095.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the thread value converted to a string.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 thread}
{\f8\fs22 : An integer that contains the thread value.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uithread.cpp, 46\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIThreads_FreezeThread}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIThreads; FreezeThread}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIThreads::FreezeThread}}{\f8\fs22  }
{\f8\fs32 BOOL UIThreads::FreezeThread(int thread)}
{\f8\fs22 \par \par Suspend the specified thread.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 thread}
{\f8\fs22 : An integer that contains the thread ID of the thread to suspend.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uithread.cpp, 59\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIThreads_ThawThread}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIThreads; ThawThread}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIThreads::ThawThread}}{\f8\fs22  }
{\f8\fs32 BOOL UIThreads::ThawThread(int thread)}
{\f8\fs22 \par \par Resume the specified thread.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 thread}
{\f8\fs22 : An integer that contains the thread ID of the thread to resume.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uithread.cpp, 83\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIThreads_SetCurrentThread}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIThreads; SetCurrentThread}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIThreads::SetCurrentThread}}{\f8\fs22  }
{\f8\fs32 BOOL UIThreads::SetCurrentThread(int thread)}
{\f8\fs22 \par \par Set the specified thread to be the current thread.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 thread}
{\f8\fs22 : An integer that contains the thread ID of the thread to activate.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uithread.cpp, 107\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIThreads_GetCurrentThread}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIThreads; GetCurrentThread}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIThreads::GetCurrentThread}}{\f8\fs22  }
{\f8\fs32 INT UIThreads::GetCurrentThread(void)}
{\f8\fs22 \par \par Get the thread ID of the currently active thread.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that specifies the currently active thread.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uithread.cpp, 130\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIVariables_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIVariables; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIVariables::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIVariables::Activate(void)}
{\f8\fs22 \par \par Bring up the variables window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the variables window is active (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uivar.cpp, 25\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIVariables_SetValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIVariables; SetValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIVariables::SetValue}}{\f8\fs22  }
{\f8\fs32 int UIVariables::SetValue(LPCSTR value, int row /* ROW_CURRENT */)}
{\f8\fs22 \par \par Set the value for the expression at the row specified in the variables window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a string that contains the value.\par \par }
{\i\f8\fs22 row}
{\f8\fs22 : An integer that specifies the 1-based row of the variables window. Use ROW_CURRENT to specify the current row; ROW_BOTTOM to specify the last row; and ROW_ALL to specify all rows. (Default value is ROW_CURRENT.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uivar.cpp, 45\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIVariables_SetPane}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIVariables; SetPane}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIVariables::SetPane}}{\f8\fs22  }
{\f8\fs32 int UIVariables::SetPane(int pane)}
{\f8\fs22 \par \par Set the current pane to the specified pane in the variables window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 pane}
{\f8\fs22 : A value that specifies the pane to activate: PANE_THIS, PANE_AUTO, PANE_LOCALS.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uivar.cpp, 78\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIVariables_GetFunction}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIVariables; GetFunction}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIVariables::GetFunction}}{\f8\fs22  }
{\f8\fs32 CString UIVariables::GetFunction(int level /* 0 */)}
{\f8\fs22 \par \par Get the call stack description string at the given call stack level (index).  It assumes that the Variables window already has focus.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains the call stack description string from the given call stack level.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 level}
{\f8\fs22 : An integer that contains the 0-based index into the call stack. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uivar.cpp, 141\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIVariables_GetAllFunctions}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIVariables; GetAllFunctions}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIVariables::GetAllFunctions}}{\f8\fs22  }
{\f8\fs32 CString UIVariables::GetAllFunctions(void)}
{\f8\fs22 \par \par Get all the call stack frame descriptions for all frames on the call stack.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A CString that contains a newline-delimited list of call stack frames.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uivar.cpp, 158\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIVariables_NavigateStack}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIVariables; NavigateStack}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIVariables::NavigateStack}}{\f8\fs22  }
{\f8\fs32 BOOL UIVariables::NavigateStack(int level /* 0 */)}
{\f8\fs22 \par \par Navigate to the specified call stack frame.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 level}
{\f8\fs22 : An integer that contains the 0-based index into the call stack. (Default value is 0.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uivar.cpp, 182\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWatch_Activate}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWatch; Activate}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWatch::Activate}}{\f8\fs22  }
{\f8\fs32 BOOL UIWatch::Activate(void)}
{\f8\fs22 \par \par Bring up the watch window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates whether the watch window is active (TRUE) or not.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiwatch.cpp, 25\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWatch_SetName}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWatch; SetName}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWatch::SetName}}{\f8\fs22  }
{\f8\fs32 int UIWatch::SetName(LPCSTR name, int row /* ROW_CURRENT */)}
{\f8\fs22 \par \par Set the name of the expression at the specified row in the watch window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 name}
{\f8\fs22 : A pointer to a string that specifies the name to set in the watch window.\par \par }
{\i\f8\fs22 row}
{\f8\fs22 : An integer that specifies the 1-based row of the watch window. Use ROW_CURRENT to specify the current row; ROW_BOTTOM to specify the last row; and ROW_ALL to specify all rows. (Default value is ROW_CURRENT.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiwatch.cpp, 45\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWatch_SetValue}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWatch; SetValue}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWatch::SetValue}}{\f8\fs22  }
{\f8\fs32 int UIWatch::SetValue(LPCSTR value, int row /* ROW_CURRENT */,}
{\f8\fs22 \par \par Set the value of the expression at the specified row in the watch window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 value}
{\f8\fs22 : A pointer to a string that contains the value.\par \par }
{\i\f8\fs22 row}
{\f8\fs22 : An integer that specifies the 1-based row of the watch window. Use ROW_CURRENT to specify the current row; ROW_BOTTOM to specify the last row; and ROW_ALL to specify all rows. (Default value is ROW_CURRENT.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiwatch.cpp, 64\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_UIWatch_Delete}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} UIWatch; Delete}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} UIWatch::Delete}}{\f8\fs22  }
{\f8\fs32 int UIWatch::Delete(int start_row /* ROW_CURRENT */, int total_rows /* 1 */)}
{\f8\fs22 \par \par Delete an expression from the watch window.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 An integer that indicates success. ERROR_SUCCESS if successful; ERROR_ERROR otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 start_row}
{\f8\fs22 : An integer that specifies the 1-based row of the watch window. Use ROW_CURRENT to specify the current row; ROW_BOTTOM to specify the last row; and ROW_ALL to specify all rows. (Default value is ROW_CURRENT.)\par \par }
{\i\f8\fs22 total_rows}
{\f8\fs22 : An integer that specifies the number of rows to delete. (Default value is 1.)\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 uiwatch.cpp, 90\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CLog_RecordSuccess}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CLog; RecordSuccess}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CLog::RecordSuccess}}{\f8\fs22  }
{\f8\fs32 BOOL CLog::RecordSuccess(LPCSTR a_szFormat, ...)}
{\f8\fs22 \par \par Record a success in the log for the current test. A call to this function causes the current test to log a success and increments the success count by 1.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 a_szFormat}
{\f8\fs22 : A pointer to a string that contains the format-specifiers for the remaining variable number of arguments. This format-specifier string is the same format as the format-specifier string for printf.\par \par }
{\i\f8\fs22 ...}
{\f8\fs22 : A variable number of arguments that are expanded into a string as specified by the format-specifier string.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 log.h, 81\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CLog_RecordFailure}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CLog; RecordFailure}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CLog::RecordFailure}}{\f8\fs22  }
{\f8\fs32 BOOL CLog::RecordFailure(LPCSTR a_szFormat, ...)}
{\f8\fs22 \par \par Record a failure in the log for the current test. A call to this function causes the current test to fail and increments the fail count by 1.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 a_szFormat}
{\f8\fs22 : A pointer to a string that contains the format-specifiers for the remaining variable number of arguments. This format-specifier string is the same format as the format-specifier string for printf.\par \par }
{\i\f8\fs22 ...}
{\f8\fs22 : A variable number of arguments that are expanded into a string as specified by the format-specifier string.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 log.h, 89\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CLog_RecordInfo}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CLog; RecordInfo}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CLog::RecordInfo}}{\f8\fs22  }
{\f8\fs32 BOOL CLog::RecordInfo(LPCSTR a_szFormat, ...)}
{\f8\fs22 \par \par Record an informational message in the log for the current test.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 a_szFormat}
{\f8\fs22 : A pointer to a string that contains the format-specifiers for the remaining variable number of arguments. This format-specifier string is the same format as the format-specifier string for printf.\par \par }
{\i\f8\fs22 ...}
{\f8\fs22 : A variable number of arguments that are expanded into a string as specified by the format-specifier string.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 log.h, 97\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CLog_RecordTestKeys}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CLog; RecordTestKeys}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CLog::RecordTestKeys}}{\f8\fs22  }
{\f8\fs32 BOOL CLog::RecordTestKeys(LPCSTR szFile, LPCSTR a_szFormat, ...)}
{\f8\fs22 \par \par Record the contents of a text file in the log for the current test.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFile}
{\f8\fs22 : A pointer to a string that contains the name of the file to include in the log.\par \par }
{\i\f8\fs22 a_szFormat}
{\f8\fs22 : A pointer to a string that contains the format-specifiers for the remaining variable number of arguments. This format-specifier string is the same format as the format-specifier string for printf.\par \par }
{\i\f8\fs22 ...}
{\f8\fs22 : A variable number of arguments that are expanded into a string as specified by the format-specifier string.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 log.h, 106\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CLog_RecordTextFile}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CLog; RecordTextFile}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CLog::RecordTextFile}}{\f8\fs22  }
{\f8\fs32 BOOL CLog::RecordTextFile(LPCSTR szFile, LPCSTR a_szFormat, ...)}
{\f8\fs22 \par \par Record the contents of a text file in the log for the current test.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 szFile}
{\f8\fs22 : A pointer to a string that contains the name of the file to include in the log.\par \par }
{\i\f8\fs22 a_szFormat}
{\f8\fs22 : A pointer to a string that contains the format-specifiers for the remaining variable number of arguments. This format-specifier string is the same format as the format-specifier string for printf.\par \par }
{\i\f8\fs22 ...}
{\f8\fs22 : A variable number of arguments that are expanded into a string as specified by the format-specifier string.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 log.h, 116\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CLog_RecordCriticalError}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CLog; RecordCriticalError}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CLog::RecordCriticalError}}{\f8\fs22  }
{\f8\fs32 BOOL CLog::RecordCriticalError(LPCSTR a_szFormat, ...)}
{\f8\fs22 \par \par Record a critical error in the log for the current test. Use this function when a unrecoverable error occurs while testing. A call to this function causes the current test to fail and increments the fail count by 1.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 a_szFormat}
{\f8\fs22 : A pointer to a string that contains the format-specifiers for the remaining variable number of arguments. This format-specifier string is the same format as the format-specifier string for printf.\par \par }
{\i\f8\fs22 ...}
{\f8\fs22 : A variable number of arguments that are expanded into a string as specified by the format-specifier string.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 log.h, 124\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CLog_RecordCompare}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CLog; RecordCompare}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CLog::RecordCompare}}{\f8\fs22  }
{\f8\fs32 BOOL CLog::RecordCompare(BOOL bSuccess, LPCSTR a_szFormat, ...)}
{\f8\fs22 \par \par Record information or a failure in the log for the current test.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates the result of bSuccess.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 bSuccess}
{\f8\fs22 : A Boolean value that specifies whether to record information (TRUE) or a failure (FALSE).\par \par }
{\i\f8\fs22 a_szFormat}
{\f8\fs22 : A pointer to a string that contains the format-specifiers for the remaining variable number of arguments. This format-specifier string is the same format as the format-specifier string for printf.\par \par }
{\i\f8\fs22 ...}
{\f8\fs22 : A variable number of arguments that are expanded into a string as specified by the format-specifier string.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 log.h, 134\par }{\f8\fs22 \par \page }
{\cs15\fs16\up6 #{\footnote \pard\plain \sl240\slmult0\widctlpar \fs20 {\cs15\fs16\up6 #} id_CLog_Comment}
K{\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 K} CLog; Comment}}{\f8\fs22  }
{\cs15\fs16\up6 ${\footnote \pard\plain \s16\widctlpar \fs20 {\cs15\fs16\up6 $} CLog::Comment}}{\f8\fs22  }
{\f8\fs32 BOOL CLog::Comment(LPCSTR a_szFormat, ...)}
{\f8\fs22 \par \par Record a comment in the log for the current test.\par \par }
{\b\f8\fs22 Return value: \par }{\f8\fs22 \par }{\f8\fs22 A Boolean value that indicates success. TRUE if successful; FALSE otherwise.\par \par }
{\b\f8\fs22 Parameters: \par }{\f8\fs22 \par }
{\i\f8\fs22 a_szFormat}
{\f8\fs22 : A pointer to a string that contains the format-specifiers for the remaining variable number of arguments. This format-specifier string is the same format as the format-specifier string for printf.\par \par }
{\i\f8\fs22 ...}
{\f8\fs22 : A variable number of arguments that are expanded into a string as specified by the format-specifier string.\par \par }
{\b\f8\fs22 Reference: }{\f8\fs22 log.h, 143\par }{\f8\fs22 \par \page }
}
