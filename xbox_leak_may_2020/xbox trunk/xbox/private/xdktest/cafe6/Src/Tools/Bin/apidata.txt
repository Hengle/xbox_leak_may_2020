// BEGIN_CLASS_HELP
// ClassName: COClipboard
// BaseClass: none
// Category: General
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: CIME
// BaseClass: CWnd
// Category: General
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: CUniqueDlgCtrl
// BaseClass: None
// Category: General
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIDialog
// BaseClass: UIWindow
// Category: General
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIMessageBox
// BaseClass: UIWindow
// Category: General
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIWindow
// BaseClass: None
// Category: General
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: CFileTableLine
// BaseClass: CObject
// Category: Tools
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: CFileTableLineList
// BaseClass: CObList
// Category: Tools
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: CFileTable
// BaseClass: None
// Category: Tools
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIDAM
// BaseClass: UIDockWindow
// Category: Debug
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIDebug
// BaseClass: None
// Category: Debug
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIEEWindow
// BaseClass: UIDockWindow
// Category: Debug
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIExceptions
// BaseClass: UIDialog
// Category: Debug
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UILocals
// BaseClass: UIDockWindow
// Category: Debug
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIMemory
// BaseClass: UIDockWindow
// Category: Debug
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIQuickWatch
// BaseClass: UIDialog
// Category: Debug
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIRegisters
// BaseClass: UIDockWindow
// Category: Debug
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIStack
// BaseClass: UIDockWindow
// Category: Debug
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIThreads
// BaseClass: UIDialog
// Category: Debug
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIVariables
// BaseClass: UIEEWindow
// Category: Debug
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIWatch
// BaseClass: UIEEWindow
// Category: Debug
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: COFile
// BaseClass: none
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: COResScript
// BaseClass: COFile
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: COSource
// BaseClass: COFile
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIAccEdit
// BaseClass: UIResTableEditor
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIDlgEdit
// BaseClass: UIResEditor
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIEditor
// BaseClass: UIWindow
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIFindInFilesDlg
// BaseClass: UIDialog
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIFindDlg
// BaseClass: UIDialog
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIReplaceDlg
// BaseClass: UIDialog
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIImgEdit
// BaseClass: UIResEditor
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIMenEdit
// BaseClass: UIResEditor
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIResBrowser
// BaseClass: UIResTableEditor
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIResEditor
// BaseClass: UIEditor
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIResTableEditor
// BaseClass: UIResEditor
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIStrEdit
// BaseClass: UIResTableEditor
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UISymbolBrowser
// BaseClass: UIDialog
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIVerEdit
// BaseClass: UIResEditor
// Category: Editors
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: APPWZOPTIONS
// BaseClass: none
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: PROJOPTIONS
// BaseClass: none
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: COProject
// BaseClass: none
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UISqlDataSources
// BaseClass: UIDialog
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UISqlServerLogIn
// BaseClass: UIDialog
// Category: Project
// END_CLASS_HELP
 // BEGIN_CLASS_HELP
// ClassName: UISelectTables
// BaseClass: UIDialog
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIDataBaseDlgs
// BaseClass: None
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UISelectRecordSet
// BaseClass: UIDialog
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIAppWizard
// BaseClass: UIProjectWizard
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIClassWizard
// BaseClass: UITabbedDialog
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIAddClassDlg
// BaseClass: UIDialog
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIExtWizard
// BaseClass: UIProjectWizard
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIProjectTarget
// BaseClass: UIDialog
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIOGalleryDlg
// BaseClass: UIDialog
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIProjectFiles
// BaseClass: UIDialog
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIProjOptionsTabDlg
// BaseClass: UITabbedDialog
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIProjectWizard
// BaseClass: UIDialog
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UITestAppWizard
// BaseClass: UIAppWizard
// Category: Project
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: COConnection
// BaseClass: none
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: COWorkSpace
// BaseClass: none
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIFileDlg
// BaseClass: UIDialog
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIFileSaveAsDlg
// BaseClass: UIFileDlg
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIFileOpenDlg
// BaseClass: UIFileDlg
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIFontDlg
// BaseClass: UIDialog
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UICustomizeTabDlg
// BaseClass: UITabbedDialog
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIDockWindow
// BaseClass: UIWindow
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIConnection
// BaseClass: UIDialog
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIConnectionSettings
// BaseClass: UIDialog
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIOptionsTabDlg
// BaseClass: UITabbedDialog
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIOutput
// BaseClass: UIDockWindow
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UITabbedDialog
// BaseClass: UIDialog
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIWBDialog
// BaseClass: UIDialog
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIWBMessageBox
// BaseClass: UIMessageBox
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIMainFrm
// BaseClass: UIWindow
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIProperties
// BaseClass: UIWindow
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UITBarDialog
// BaseClass: UIDialog
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIToolbar
// BaseClass: UIWindow
// Category: Shell
// END_CLASS_HELP
// BEGIN_CLASS_HELP
// ClassName: UIWBFrame
// BaseClass: UIMainFrm
// Category: Shell
// END_CLASS_HELP
// BEGIN_HELP_COMMENT
// Function: BOOL COClipboard::Empty(void)
// Description: Use this function to clear the text on the system clipboard.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COClipboard::GetText(void)
// Description: Use this function to get the text from the system clipboard.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COClipboard::SetText(LPCSTR szTextIn)
// Description: Use this function to set the text in the system clipboard.
// Return: BOOL
// Param: szTextIn A pointer to a null-terminated string containing the text to put in the clipboard.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CIME::Create(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int CIME::OnCreate(LPCREATESTRUCT lpCreateStruct)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpCreateStruct
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CIME::Enable(BOOL bEnable /*=TRUE*/)		//REVIEW(EnriqueP): Do we need to switch focus to window?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: bEnable
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CIME::IsEnabled(void)		//REVIEW(EnriqueP): Do we need to switch focus to window?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CIME::Open(BOOL bOpen /*=TRUE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: bOpen
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int CIME::IsOpen(void)	   //REVIEW(EnriqueP): Do we need to switch focus to window?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CIME::Flush(HWND hwnd)		   //REVIEW(EnriqueP): Do we need to switch focus to window?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: hwnd
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: UINT CIME::GetMode(void)			//REVIEW(EnriqueP): Do we need to switch focus to window?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: UINT
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: UINT CIME::SetMode(UINT flags)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: UINT
// Param: flags
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: UINT CIME::SetMode(EAlphabets eAlphabet /*=ALPHA*/, UINT nBytes /*=1*/, BOOL bRoman /*=TRUE*/, BOOL bCodeInput /*=FALSE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: UINT
// Param: eAlphabet
// Param: nBytes
// Param: bRoman
// Param: bCodeInput
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CIME::SendVKey(UINT vKey)		//REVIEW(EnriqueP): Do we need to switch focus to window?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: vKey
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND CMSTest::WGetFocus       (void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WStaticSetClass (LPSTR lpszClassName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpszClassName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WIsVisible      (HWND hwnd)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: hwnd
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WGetText        (HWND hwnd, CString& strBuffer)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: hwnd
// Param: strBuffer
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND CMSTest::WFndWndWait       (LPCSTR lpcszCaption, UINT uFlags, UINT uSeconds)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: lpcszCaption
// Param: uFlags
// Param: uSeconds
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND CMSTest::WFndWndWaitC       (LPCSTR lpcszCaption, LPCSTR lpcszClass, UINT uFlags, UINT uSeconds)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: lpcszCaption
// Param: lpcszClass
// Param: uFlags
// Param: uSeconds
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND CMSTest::WFndWnd       (LPCSTR lpcszCaption, UINT uFlags)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: lpcszCaption
// Param: uFlags
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND CMSTest::WFndWndC      (LPCSTR lpcszCaption, LPCSTR lpcszClass, UINT uFlags)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: lpcszCaption
// Param: lpcszClass
// Param: uFlags
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WSetWndSiz    (HWND hwnd, int w,  int h)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: hwnd
// Param: w
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CSize CMSTest::WGetWndSiz    (HWND hwnd)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CSize
// Param: hwnd
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WSetActWnd    (HWND hwnd)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: hwnd
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND CMSTest::WGetActWnd    (HWND hwnd)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: hwnd
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WMenu        (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WMenuExists        (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WMenuGrayed        (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WMenuChecked       (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WMenuEnabled       (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WMenuCount         (void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WMenuText			(LPCSTR lpcszName, CString& strBuffer)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: strBuffer
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WMenuEnd           (void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WButtonExists   (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WButtonEnabled  (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WButtonFocus    (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WButtonClick    (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WButtonSetFocus (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WCheckExists   (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WCheckEnabled  (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WCheckFocus    (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WCheckState    (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WCheckClick    (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WCheckCheck    (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WCheckUnCheck  (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WCheckSetFocus (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WOptionExists   (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WOptionEnabled  (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WOptionFocus    (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WOptionState    (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WOptionClick    (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WOptionSelect   (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WOptionSetFocus (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WListExists       (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WListCount        (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WListText         (LPCSTR lpcszName, CString& strBuffer)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: strBuffer
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WListLen          (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WListIndex        (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WListItemText     (LPCSTR lpcszName, int iIndex, CString& strBuffer)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: iIndex
// Param: strBuffer
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WListItemLen      (LPCSTR lpcszName, int iIndex)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// Param: iIndex
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WListItemExists   (LPCSTR lpcszName, LPCSTR lpcszItem)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// Param: lpcszItem
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WListItemClk      (LPCSTR lpcszName, int iIndex, int nOffset /*=0*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: iIndex
// Param: nOffset
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WListItemClk  (LPCSTR lpcszName, LPCSTR szItem, int nOffset /*=0*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: szItem
// Param: nOffset
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WListItemCtrlClk  (LPCSTR lpcszName, int iIndex, int nOffset /*=0*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: iIndex
// Param: nOffset
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WListItemCtrlClk  (LPCSTR lpcszName, LPCSTR szItem, int nOffset /*=0*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: szItem
// Param: nOffset
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WListItemShftClk  (LPCSTR lpcszName, int iIndex, int nOffset /*=0*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: iIndex
// Param: nOffset
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WListItemShftClk  (LPCSTR lpcszName, LPCSTR szItem, int nOffset /*=0*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: szItem
// Param: nOffset
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WListItemDblClk  (LPCSTR lpcszName, int iIndex, int nOffset /*=0*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: iIndex
// Param: nOffset
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WListItemDblClk  (LPCSTR lpcszName, LPCSTR szItem, int nOffset /*=0*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: szItem
// Param: nOffset
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WListSelCount     (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WListSelItems     (LPCSTR lpcszName, LPINT lpIntArray)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: lpIntArray
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WListEnabled      (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WListSetFocus     (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WComboExists      (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WComboCount       (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WComboText        (LPCSTR lpcszName, CString& strBuff)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: strBuff
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WComboLen         (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WComboIndex       (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WComboSetText (LPCSTR lpcszName, LPCSTR lpcszText)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: lpcszText
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WComboSelText     (LPCSTR lpcszName, CString& strBuff)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: strBuff
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WComboSelLen      (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WComboItemText    (LPCSTR lpcszName, int iIndex, CString& strBuff)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: iIndex
// Param: strBuff
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WComboItemLen     (LPCSTR lpcszName, int iIndex)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// Param: iIndex
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::WComboItemExists  (LPCSTR lpcszName, LPCSTR lpcszItem)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: lpcszName
// Param: lpcszItem
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WComboItemClk(LPCSTR lpcszName, int iIndex)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: iIndex
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WComboItemClk(LPCSTR lpcszName, LPCSTR szItem)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: szItem
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WComboItemDblClk(LPCSTR lpcszName, int iIndex)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: iIndex
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WComboItemDblClk(LPCSTR lpcszName, LPCSTR szItem)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: szItem
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WComboEnabled     (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WComboSetFocus    (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WEditExists   (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: long CMSTest::WEditLen      (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: long
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WEditText     (LPCSTR lpcszName, CString& strBuff)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: strBuff
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WEditSetText  (LPCSTR lpcszName, LPCSTR lpcszText)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: lpcszText
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WEditSelText  (LPCSTR lpcszName, CString& strBuff)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// Param: strBuff
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: long CMSTest::WEditSelLen   (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: long
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WEditClick    (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WEditEnabled  (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::WEditSetFocus (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CMSTest::WStaticExists   (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: long CMSTest::WStaticLen	 (LPCSTR lpcszName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: long
// Param: lpcszName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int CMSTest::QueKeys (LPCSTR sz)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: sz
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int CMSTest::QueKeyDn (LPCSTR sz)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: sz
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int CMSTest::QueKeyUp (LPCSTR sz)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: sz
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int CMSTest::DoKeys (LPCSTR sz, BOOL bLiteral /*=FALSE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: sz
// Param: bLiteral
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int CMSTest::DoKeyshWnd (HWND hwnd, LPCSTR sz)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: hwnd
// Param: sz
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void CMSTest::QuePause (DWORD dw)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: dw
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::QueSetSpeed (WORD w)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: w
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::QueSetFocus (HWND hwnd)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: hwnd
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::QueSetRelativeWindow (HWND hwnd)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: hwnd
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::QueMouseMove (POINT pt)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::QueMouseDn (int n, POINT pt)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Param The parameter description(s) for this function are not available.
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::QueMouseUp (int n, POINT pt)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Param The parameter description(s) for this function are not available.
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::QueMouseClick (int n, POINT pt)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Param The parameter description(s) for this function are not available.
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::QueMouseDblClk (int n, POINT pt)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Param The parameter description(s) for this function are not available.
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CMSTest::QueMouseDblDn (int n, POINT pt)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Param The parameter description(s) for this function are not available.
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int CMSTest::QueFlush (BOOL bRestoreKeyState)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: bRestoreKeyState
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API BOOL EmptyClip( /*BTHROW bThrowFail /*= DO_THROW*/ ) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: bThrowFail
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API BOOL GetClipText( CString& rstrTextOut/*, BTHROW bThrowFail /*= DO_THROW*/ )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: rstrTextOut
// Param: bThrowFail
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API BOOL SetClipText( LPCSTR szTextIn/*, BTHROW bThrowFail /*= DO_THROW*/ )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: szTextIn
// Param: bThrowFail
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API void PasteKeys(LPCSTR szPasteText/*, BTHROW bThrowFail /*= DO_THROW*/)
// Description: Use this function to paste the given string into the control with the focus.
// Return: GUI_API
// Param: szPasteText Pointer to a null-terminated string containing the text to paste.
// Param: bThrowFail One of: DO_THROW or DONT_THROW that indicates whether to throw an exception upon failure.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API void DoKeysSlow(LPCSTR szKeys, WORD wMilliseconds /*=0*/, BOOL bLiteral /*=FALSE*/)
// Description: Use this function to perform DoKeys at a slower rate.
// Return: GUI_API
// Param: szKeys Pointer to a null-terminated string containing the DoKeys-formatted keystrokes.
// Param: wMilliseconds The number of milliseconds to wait between keystrokes.
// Param: bLiteral TRUE to interpret the keystrokes literally; FALSE to interpret the keystrokes as DoKeys keystrokes.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API void ClickMouse( int nButton, HWND hwnd, int cX,  int cY) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: nButton
// Param: hwnd
// Param: cX
// Param: cY
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API void DragMouse ( int nButton, HWND hwnd1, int cX1, int cY1, HWND hwnd2, int cX2, int cY2)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: nButton
// Param: hwnd1
// Param: cX1
// Param: cY1
// Param: hwnd2
// Param: cX2
// Param: cY2
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API BOOL ScreenToClient(HWND hwnd, CRect* pRect)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: hwnd
// Param: pRect
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API BOOL ClientToScreen(HWND hwnd, CRect* pRect)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: hwnd
// Param: pRect
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API int CompareFiles(LPCSTR strSource, LPCSTR strTarget, int nStart)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: strSource
// Param: strTarget
// Param: nStart
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API void KillFile(LPCSTR szPathName, LPCSTR szFileName /*=NULL*/, BOOL bIgnoreReadOnly /*=FALSE*/)
// Description: Use this function to delete all files that match the pattern provided in szFileName.
// Return: GUI_API
// Param: szPathName A string containing the path to the files.
// Param: szFileName A string containing the filename to delete (wildcards are supported).
// Param: bIgnoreReadOnly TRUE to ignore the read-only bit; FALSE to honor the read-only bit.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API BOOL KillAllFiles(LPCSTR szPathName, BOOL bRemoveDir /*=TRUE*/)
// Description: Use this function to delete an entire directory.
// Return: GUI_API
// Param: szPathName A string containing the path to the directory to be deleted.
// Param: bRemoveDir TRUE to remove the directory itself; FALSE to keep the directory but delete all the files in it.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API void CopyTree(LPCSTR szFrom, LPCSTR szTo)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: szFrom
// Param: szTo
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API int FindStrInFile(LPCSTR szFileName, LPCSTR szStr, int nStart /*=1*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: szFileName
// Param: szStr
// Param: nStart
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API LPCSTR GetText(HWND hwnd, LPSTR sz, int cMax)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: hwnd
// Param: sz
// Param: cMax
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API CString GetText(HWND hwnd)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: hwnd
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API int DoMenu( LPCSTR szMenu1, LPCSTR szMenu2, LPCSTR szMenu3, 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: szMenu1
// Param: szMenu2
// Param: szMenu3
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API int DoMenu(LPCSTR szMenu)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: szMenu
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API BOOL DoSingleMenu(LPCSTR szMenu)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: szMenu
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API BOOL IsWindowActive(LPCSTR szWndTitle)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: szWndTitle
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API BOOL WaitMsgBoxText(LPCSTR szExpect, int nSeconds)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: szExpect
// Param: nSeconds
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API LPCSTR GetLabel(UINT id, HWND hwnd /*=NULL*/, BOOL bOkNoExist /*=FALSE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: id
// Param: hwnd
// Param: bOkNoExist
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API int GetDlgControlClass(HWND hCtl) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: hCtl
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API HWND ControlOnPropPage(int iCtrlId)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API BOOL CALLBACK WGetPageHandle(HWND hChWnd,LPARAM iCtrlId)	  // Can this be a private member??
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: hChWnd
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API void DayRandSeed(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API int DayRand(int nRange)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: nRange
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API BOOL WaitForWndWithCtrl(INT ID, DWORD dwMillSec /* = 3000*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: ID
// Param: dwMillSec
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API DWORD GetSystem(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: GUI_API int GetPowerOfTwo(int i)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: GUI_API
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: UIDialog::UIDialog( LPCSTR szTitle )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: UIDialog::UIDialog(
// Param: szTitle
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: UIDialog::UIDialog( UINT idCtrl, int nType )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: UIDialog::UIDialog(
// Param: idCtrl
// Param: nType
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDialog::Open(void) const
// Description: Open the dialog. This member function must be overridden in the derived class.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDialog::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDialog::VerifyClass(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDialog::VerifyUnique(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR UIDialog::ExpectedTitle(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPCSTR
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIDialog::SetExpectedTitle(LPCSTR szTitle)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: szTitle
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDialog::VerifyTitle(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIDialog::GetDlgItem(UINT id) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: id
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDialog::VerifyDlgItemClass(UINT id, int nClass) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: id
// Param: nClass
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIDialog::OK(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIDialog::Cancel(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIDialog::Close(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIDialog::Help(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMessageBox::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIMessageBox::GetMessageText(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMessageBox::ButtonClick(int btn /*=MSG_DEFAULT*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: btn
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMessageBox::ButtonExists(int btn)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: btn
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIMessageBox::GetActiveButton(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: UIWindow::UIWindow(HWND hwnd)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: UIWindow::UIWindow(HWND
// Param: hwnd
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWindow::operator=(HWND hwnd)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: hwnd
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWindow::Attach(HWND hwnd)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: hwnd
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWindow::Find(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIWindow::OnUpdate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWindow::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR UIWindow::GetText(LPSTR sz, int cMax) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPCSTR
// Param: sz
// Param: cMax
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIWindow::GetText(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWindow::IsActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWindow::Activate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWindow::BlockingActivate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWindow::HasFocus(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWindow::WaitAttachActive(DWORD dwMilliseconds)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: dwMilliseconds
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWindow::WaitUntilGone(DWORD dwMilliseconds)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: dwMilliseconds
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::SetBreakpoint(int line, LPCSTR source, int passcount /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: line
// Param: source
// Param: passcount
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::SetBreakpoint(LPCSTR function, LPCSTR source, int passcount /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: Param The parameter description(s) for this function are not available.
// Param: source
// Param: passcount
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::SetBreakpoint(int line, LPCSTR expression, int option, int length, int passcount /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: line
// Param: expression
// Param: option
// Param: length
// Param: passcount
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::SetBreakpoint(int line, LPCSTR source, LPCSTR expression, int option, int length, int passcount /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: line
// Param: source
// Param: expression
// Param: option
// Param: length
// Param: passcount
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::SetBreakpoint(LPCSTR function, LPCSTR expression, int option, int length, int passcount /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: Param The parameter description(s) for this function are not available.
// Param: expression
// Param: option
// Param: length
// Param: passcount
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::SetBreakpoint(LPCSTR function, LPCSTR source, LPCSTR expression, int option, int length, int passcount /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: Param The parameter description(s) for this function are not available.
// Param: source
// Param: expression
// Param: option
// Param: length
// Param: passcount
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::SetBreakpoint(LPCSTR expression, int option, int length, int passcount /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: expression
// Param: option
// Param: length
// Param: passcount
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::SetBreakpoint(LPCSTR location /* NULL */, int passcount /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: location
// Param: passcount
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::SetBreakOnExpr(LPCSTR location, LPCSTR expression, int expr_type, int length /* 1 */, int passcount /* 0 */, BOOL fForceType /* TRUE */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: location
// Param: expression
// Param: expr_type
// Param: length
// Param: passcount
// Param: fForceType
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::SetBreakOnMsg(LPCSTR location, LPCSTR message, int msg_type, int passcount /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: location
// Param: message
// Param: msg_type
// Param: passcount
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::SetBreakOnExpr(LPCSTR expression, int expr_type, int length /* 1 */, int passcount /* 0 */, BOOL fForceType /* TRUE */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: expression
// Param: expr_type
// Param: length
// Param: passcount
// Param: fForceType
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBreakpoints::EnableBreakpoint(bp *pbp)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: pbp
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBreakpoints::EnableAllBreakpoints(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBreakpoints::DisableBreakpoint(bp *pbp)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: pbp
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBreakpoints::DisableAllBreakpoints(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBreakpoints::RemoveBreakpoint(bp *pbp)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: pbp
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBreakpoints::ClearAllBreakpoints(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL VerifyBreakpointHit(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::FailAndClose(void) //close dialog then fail Set Bp operation
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::AddBPandClose(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: bp *COBreakpoints::AddBPToList(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: bp*
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COBreakpoints::FindBPIndex(POSITION pos)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: pos
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBrowse::GotoNthDefinition(int index, LPCSTR name,int ambiguity ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: index
// Param: name
// Param: ambiguity
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBrowse::GotoNthReference(int index, LPCSTR name, int ambiguity) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: index
// Param: name
// Param: ambiguity
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBrowse::NextDefinition(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBrowse::PrevDefinition(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBrowse::NextReference(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBrowse::PrevReference(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBrowse::PopContext(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBrowse::GetMatches( CStringArray& matches, CString name, QueryType type, int filter ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: matches
// Param: name
// Param: type
// Param: filter
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBrowse::GetDefinitions( CStringArray& definitions, CString name, QueryType type, int filter, int ambiguity ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: definitions
// Param: name
// Param: type
// Param: filter
// Param: ambiguity
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBrowse::GetReferences( CStringArray& references, CString name, QueryType type, int filter, int ambiguity ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: references
// Param: name
// Param: type
// Param: filter
// Param: ambiguity
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBrowse::GetMembers( CStringArray& members, CString name, QueryType type, int filter, int ambiguity ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: members
// Param: name
// Param: type
// Param: filter
// Param: ambiguity
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBrowse::GetFirstLevelBranches( CStringArray& branches, CString name, QueryType type, int filter, int ambiguity ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: branches
// Param: name
// Param: type
// Param: filter
// Param: ambiguity
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COBrowse::VerifyNavigation(LPCSTR file_line) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: file_line
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString  COCoProcessor::GetCPRegister(int reg)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: reg
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL  COCoProcessor::CPRegisterValueIs(int reg, LPCSTR value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: reg
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COCoProcessor::SetCPRegister(int reg, LPCSTR value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: reg
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CODAM::GotoSymbol(LPCSTR symbol)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: symbol
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CODAM::GotoAddress(int address)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: address
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL  CODAM::InstructionIs(LPCSTR inst)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: inst
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString CODAM::GetInstruction()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CODebug::CODebug() {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CODebug::CODebug()
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::Exec(BOOL (UIWBFrame::*stepfcn)(int), int count, LPCSTR symbol, LPCSTR line, LPCSTR function, int WAIT, int ModeVerify)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: (UIWBFrame::*stepfcn
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::ExecUntilLine(BOOL (UIWBFrame::*stepfcn)(int), LPCSTR line, LPCSTR function, int WAIT)	// REVIEW set limit?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: (UIWBFrame::*stepfcn
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::ExecUntilFunc(BOOL (UIWBFrame::*stepfcn)(int), LPCSTR function, int WAIT)	//REVIEW: set limit?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: (UIWBFrame::*stepfcn
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::ExecUntilSymbol(BOOL (UIWBFrame::*stepfcn)(int), LPCSTR symbol, int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: (UIWBFrame::*stepfcn
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::Go(LPCSTR symbol, LPCSTR line /* 0 */, LPCSTR function /* NULL */, int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: symbol
// Param: line
// Param: Param The parameter description(s) for this function are not available.
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::Restart(LPCSTR path /* NULL */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: path
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StopDebugging(int WAIT)		
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::Break()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StepInto(int count /* 1 */, LPCSTR symbol /* NULL */, LPCSTR line /* NULL */, LPCSTR function /* NULL */, int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: count
// Param: symbol
// Param: line
// Param: Param The parameter description(s) for this function are not available.
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StepIntoUntilLine(LPCSTR line, LPCSTR function /* NULL */, int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: line
// Param: Param The parameter description(s) for this function are not available.
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StepIntoUntilFunc(LPCSTR function /* NULL */, int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: Param The parameter description(s) for this function are not available.
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StepIntoUntilSymbol(LPCSTR symbol, int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: symbol
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StepOver(int count /* 1 */, LPCSTR symbol /* NULL */, LPCSTR line /* NULL */, LPCSTR function /* NULL */, int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: count
// Param: symbol
// Param: line
// Param: Param The parameter description(s) for this function are not available.
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StepOverUntilLine(LPCSTR line, LPCSTR function /* NULL */, int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: line
// Param: Param The parameter description(s) for this function are not available.
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StepOverUntilFunc(LPCSTR function /* NULL */, int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: Param The parameter description(s) for this function are not available.
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StepOverUntilSymbol(LPCSTR symbol, int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: symbol
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StepOut(int count /* 1 */, LPCSTR symbol /* NULL */, LPCSTR line /* NULL */, LPCSTR function /* NULL */, int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: count
// Param: symbol
// Param: line
// Param: Param The parameter description(s) for this function are not available.
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StepOutUntilLine(LPCSTR line, LPCSTR function /* NULL */, int WAIT)	//REVIEW: set limit?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: line
// Param: Param The parameter description(s) for this function are not available.
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StepOutUntilFunc(LPCSTR function /* NULL */, int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: Param The parameter description(s) for this function are not available.
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StepOutUntilSymbol(LPCSTR symbol, int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: symbol
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::StepToCursor(int linepos /* 0 */, LPCSTR symbol /* NULL */, LPCSTR line /* NULL */, LPCSTR function /* NULL */, int WAIT /*WAIT_FOR_BREAK*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: linepos
// Param: symbol
// Param: line
// Param: Param The parameter description(s) for this function are not available.
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::SetNextStatement(int line /* 0 */)		// REVIEW: check for non-zero line number?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: line
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::SetNextStatement(LPCSTR line)		//TODO: use UIFind class
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: line
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::ShowNextStatement(void) // effects both source and dam window (moves source to top (focus))
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: DebugState CODebug::GetDebugState(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: DebugState
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::Wait(int option)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: option
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::CurrentLineIs(LPCSTR line)		
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: line
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::VerifyCurrentLine(LPCSTR line)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: line
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::AtSymbol(LPCSTR symbol)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: symbol
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::VerifyAtSymbol(LPCSTR symbol)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: symbol
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::VerifyTermination(int exitcode)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: exitcode
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::VerifyTermination(void)          //any exitcode
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::SetSteppingMode(StepMode mode)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: mode
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: StepMode CODebug::GetSteppingMode(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: StepMode
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::ValidateSteppingMode(StepMode mode)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: mode
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::DoDebuggeeKeys(CString str)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::DoDebuggeeCmd(CString str)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::MyIsActive()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CODebug::SetOwnedStack( COStack* pStack ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: pStack
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::Enable()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::Disable()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::GetExpressionValue(LPCSTR expression, char *value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::GetExpressionValue(LPCSTR expression, unsigned char *value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: char
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::GetExpressionValue(LPCSTR expression, short int *value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::GetExpressionValue(LPCSTR expression, unsigned short int *value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: short
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::GetExpressionValue(LPCSTR expression, int *value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::GetExpressionValue(LPCSTR expression, unsigned int *value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::GetExpressionValue(LPCSTR expression, long int *value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::GetExpressionValue(LPCSTR expression, unsigned long int *value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: long
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::GetExpressionValue(LPCSTR expression, float *value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::GetExpressionValue(LPCSTR expression, double *value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::GetExpressionValue(LPCSTR expression, long double *value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: double
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COExpEval::ExtractExpressionValue(LPCSTR expression, BOOL bErrorExpected /* FALSE */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: expression
// Param: bErrorExpected
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::SetExpressionValue(LPCSTR expression, char value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::SetExpressionValue(LPCSTR expression, unsigned char value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: char
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::SetExpressionValue(LPCSTR expression, short int value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::SetExpressionValue(LPCSTR expression, unsigned short int value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: short
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::SetExpressionValue(LPCSTR expression, int value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::SetExpressionValue(LPCSTR expression, unsigned int value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::SetExpressionValue(LPCSTR expression, long int value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::SetExpressionValue(LPCSTR expression, unsigned long int value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: long
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::SetExpressionValue(LPCSTR expression, float value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::SetExpressionValue(LPCSTR expression, double value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::SetExpressionValue(LPCSTR expression, long double value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: double
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::SetExpressionValue(LPCSTR expression, LPCSTR value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIs(LPCSTR expression, char value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIs(LPCSTR expression, unsigned char value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: char
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIs(LPCSTR expression, short int value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIs(LPCSTR expression, unsigned short int value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: short
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIs(LPCSTR expression, int value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIs(LPCSTR expression, unsigned int value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIs(LPCSTR expression, long int value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIs(LPCSTR expression, unsigned long int value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: long
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIs(LPCSTR expression, float value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIs(LPCSTR expression, double value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIs(LPCSTR expression, long double value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: double
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIs(LPCSTR expression, LPCSTR value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIsTrue(LPCSTR expression)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionValueIsFalse(LPCSTR expression)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExpEval::ExpressionErrorIs(LPCSTR expression, LPCSTR value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExceptions::VerifyExceptionHit(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExceptions::VerifyExceptionHit(int code)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: code
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExceptions::SetException(int code, int option)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: code
// Param: option
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString  COExceptions::GetException(int code)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: code
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COExceptions::RestoreDefualts(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::Enable(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::Disable(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::GetMemoryData(int address, char *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::GetMemoryData(int address, unsigned char *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: char
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::GetMemoryData(int address, short int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::GetMemoryData(int address, unsigned short int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: short
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::GetMemoryData(int address, int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::GetMemoryData(int address, unsigned int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::GetMemoryData(int address, long int *data, int count)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::GetMemoryData(int address, unsigned long int *data, int count)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: long
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::GetMemoryData(int address, float *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::GetMemoryData(int address, double *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::GetMemoryData(int address, long double *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: double
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COMemory::ExtractMemoryData(MEM_FORMAT format, int address, int count)	//REVIEW: probably needs error checking
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: format
// Param: address
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COMemory::SetMemoryData(LPCSTR symbol, char *data, int count /* 1 */)	//TODO: use big-endian for
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: symbol
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, char *data, int count /* 1 */)	//TODO: use big-endian for
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, unsigned char *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: char
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, short int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, unsigned short int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: short
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COMemory::SetMemoryData(LPCSTR symbol, int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: symbol
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, unsigned int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, long int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, unsigned long int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: long
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, float *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, double *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, long double *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: double
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COMemory::SetMemoryData(LPCSTR symbol, char data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: symbol
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, char data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, unsigned char data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: char
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, short int data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, unsigned short int data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: short
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COMemory::SetMemoryData(LPCSTR symbol, int data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: symbol
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, int data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, unsigned int data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, long int data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, unsigned long int data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: long
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, float data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, double data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryData(int address, long double data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: double
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::SetMemoryBytes(int address, LPCSTR bytes)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: bytes
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COMemory::SetMemoryBytes(LPCSTR symbol, LPCSTR bytes)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: symbol
// Param: bytes
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, char *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, unsigned char *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: char
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, short int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, unsigned short int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: short
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, unsigned int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, long int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, unsigned long int *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: long
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, float *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, double *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// Param: count
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, long double *data, int count /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: double
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, char data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, unsigned char data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: char
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, short int data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, unsigned short int data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: short
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, int data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, unsigned int data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, long int data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: int
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, unsigned long int data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: long
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, float data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, double data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: data
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COMemory::MemoryDataIs(int address, long double data)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// Param: double
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  CORegisters::GetRegister(int reg)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: reg
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL  CORegisters::RegisterValueIs(int reg, int value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: reg
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL CORegisters::SetRegister(int reg, LPCSTR value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: reg
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: COStack::COStack( CODebug* owner ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: COStack::COStack(
// Param: owner
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COStack::NavigateStack( CString str ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COStack::Index( CString str ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COStack::CurrentFunctionIs(LPCSTR str) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COStack::VerifyCurrentFunction(LPCSTR str) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COStack::GetFunction(int level /* 0 */)	{
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: level
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COStack::GetAllFunctions(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COStack::NavigateStack(int level /* 0 */) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: level
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COStack::FunctionIs(LPCSTR str, int level /* 0 */) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// Param: level
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COStack::Compare( char const * const * stk, FrameList::Filter filter, int top, int bottom ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: const
// Param: const
// Param: stk
// Param: filter
// Param: top
// Param: bottom
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: FrameList::FrameList() {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: FrameList::FrameList()
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: FrameList::FrameList(char const* const* ppchar)   {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: FrameList::FrameList(char
// Param: const*
// Param: ppchar
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL FrameList::CreateFromText( CString str ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int FrameList::Index( CString frame0 ) const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: frame0
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL FrameList::Compare( char const * const * stk, Filter filter, int top, int bottom ) const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: const
// Param: const
// Param: stk
// Param: filter
// Param: top
// Param: bottom
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL FrameList::GeneralIntegrity() const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL Frame::GetAbsoluteAddress( CString& str ) const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL Frame::GetFunctionName( CString& str ) const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL Frame::GetImageName( CString& str ) const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL Frame::GetLineNumber( CString& str ) const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL Frame::GetByteOffset( CString& str ) const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL Frame::GetParameters( CString& str ) const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL Frame::GetParameterType( CString& str, int index ) const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// Param: index
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL Frame::GetParameterValue( CString& str, int index ) const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// Param: index
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL Frame::Test( CString str ) const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COStack::IsDirty() const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COThreads::FreezeThread(int thread)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: thread
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COThreads::ThawThread(int thread)			
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: thread
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COThreads::SetCurrentThread(int thread)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: thread
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: INT  COThreads::GetCurrentThread(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: INT
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COThreads::CurrentThreadIs(int thread)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: thread
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::Activate(void)
// Description: Open the Breakpoints dialog.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::SetLocation(LPCSTR location)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: location
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::SetExpression(LPCSTR expression, int expr_type, BOOL fForceType /* TRUE */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expression
// Param: expr_type
// Param: fForceType
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::SetLength(LPCSTR length)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: length
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::SetPassCount(LPCSTR passcount)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: passcount
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::SetWndProc(LPCSTR location)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: location
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::SetMessage(LPCSTR message, int type)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: message
// Param: type
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::SetCurrentBreakpoint(int bp /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: bp
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::Remove(int bp /* 0 */)	
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: bp
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::Enable(int bp /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: bp
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::Disable(int bp /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: bp
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::ClearAll()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::BreakpointIsSet(LPCSTR expr, LPCSTR source /* NULL */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expr
// Param: source
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBreakpoints::BreakpointIsEnabled(LPCSTR expr, LPCSTR source /* NULL */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: expr
// Param: source
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIBreakpoints::GetCount(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIBreakpoints::GetBreakpointStr(int bp /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: bp
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIBreakpoints::Close(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: static BOOL FillStringArrayFromClipBrd( CStringArray& lines ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: static
// Param: lines
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIBrowse::OnUpdate(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::IsValid(void) const {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::Find(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::IsActive(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::Query(QueryType query, LPCSTR name /*NULL*/, int filters /*NONE*/) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: query
// Param: name
// Param: filters
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: static void SetFilterButton( UIBrowse* pBrowse, LPCTSTR szButtonName, BOOL bDown ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: static
// Param: pBrowse
// Param: szButtonName
// Param: bDown
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::SetFilters(QueryType type, int filters) {  		// set filters based on current type
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: type
// Param: filters
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  UIBrowse::GetFilters(QueryType type) {         		// get filters based on current type
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: type
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::PopContext(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::FirstDefinition(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::NextDefinition(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::PrevDefinition(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::FirstReference(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::NextReference(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::PrevReference(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::GotoPane(PaneType pane, QueryType type) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: pane
// Param: type
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::GotoDefinitionsHeading(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::GotoReferencesHeading(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::ExpandCurrentItem(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIBrowse::GetCurrentItem(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::Navigate(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::SelectNthItem(QueryType type, int item) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: type
// Param: item
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::CrackFileLine(LPCSTR file_line,CHAR *file,int *line) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: file_line
// Param: file
// Param: line
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIBrowse::ButtonDown(const char *button) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: char
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIBrowse::ButtonUp(const char *button) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: char
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::IsButtonDown(const char *button) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: char
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::CloseBrowser(void) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::GetMatches( CStringArray& matches ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: matches
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::SelectMatch( CString name ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: name
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::SelectMatch( int index ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: index
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::GetMembers( CStringArray& members ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: members
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::SelectMember( CString member ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: member
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::SelectMember( int index ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: index
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::GetLocations( CStringArray& locations ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: locations
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::GetFirstLevelBranches( CStringArray& branches ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: branches
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::SelectDefinition( CString definition ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: definition
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::SelectDefinition( int index ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: index
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::SelectReference( CString reference ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: reference
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::SelectReference( int index ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: index
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::GetAmbiguities( CStringArray& ambiguities ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: ambiguities
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::GetCurrentAmbiguity( CString& symbol ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: symbol
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::SelectAmbiguity( CString symbol ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: symbol
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::SelectAmbiguity( int index ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: index
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIBrowse::CancelAmbiguity() {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: UIAmbiguiousSymbolDialog::UIAmbiguiousSymbolDialog() : 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: UIAmbiguiousSymbolDialog::UIAmbiguiousSymbolDialog()
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIAmbiguiousSymbolDialog::GetAmbiguities( CStringArray& ambiguities ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: ambiguities
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIAmbiguiousSymbolDialog::GetCurrentAmbiguity( CString& symbol ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: symbol
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIAmbiguiousSymbolDialog::SelectAmbiguity( CString symbol ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: symbol
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIAmbiguiousSymbolDialog::SelectAmbiguity( int index ) {
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: index
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIAmbiguiousSymbolDialog::Cancel(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString  UICoProcessor::GetCPRegister(int reg)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: reg
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UICoProcessor::SetCPRegister(int reg, LPCSTR value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: reg
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UICoProcessor::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UICoProcessor::AttachActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UICoProcessor::Find(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UICoProcessor::IsActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDAM::GotoSymbol(LPCSTR symbol)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: symbol
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDAM::GotoAddress(int address)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: address
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIDAM::GetInstruction(int offset /* 0 */, int range /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: offset
// Param: range
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDAM::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDAM::AttachActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDAM::Find(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDAM::IsActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDAM::Activate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIDebug::ShowDockWindow(UINT id, BOOL bShow /*=TRUE*/)
// Description: Open the docking window with the given id.
// Return: The HWND of the opened window. NULL if the function fails.
// Param: id The id of the docking window to open (IDW_OUTPUT_WIN, IDW_WATCH_WIN, IDW_LOCALS_WIN, IDW_CPU_WIN, IDW_MEMORY_WIN, IDW_CALLS_WIN, IDW_DISASSY_WIN).
// Param: bShow TRUE to show the window; FALSE to hide it (default is TRUE).
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIEEWindow::GetState(int row /* ROW_CURRENT */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: row
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIEEWindow::GetType(int row /* ROW_CURRENT */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: row
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIEEWindow::GetName(int row /* ROW_CURRENT */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: row
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIEEWindow::GetValue(int row /* ROW_CURRENT */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: row
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIEEWindow::GetAllFields(EXPR_INFO* expr_info, 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: expr_info
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIEEWindow::SelectRows(int start_row /* ROW_CURRENT */, 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: start_row
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIEEWindow::Expand(int row /* ROW_CURRENT */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: row
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIEEWindow::Collapse(int row /* ROW_CURRENT */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: row
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIEEWindow::SetPane(int pane)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: pane
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIExceptions::Activate(void)
// Description: Open the Exceptions dialog.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIExceptions::ExcptToString(int excpt)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: excpt
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIExceptions::SetNumber(int code)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: code
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIExceptions::SetName(LPCSTR name)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: name
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIExceptions::SetOption(int option)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: option
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIExceptions::AddException(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIExceptions::ChangeException(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIExceptions::RestoreDefualts(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIExceptions::SetException(int code, int option)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: code
// Param: option
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIExceptions::DeleteException(int code)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: code
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString  UIExceptions::GetException(int code)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: code
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UILocals::Activate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMemory::AttachActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMemory::Find(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMemory::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMemory::IsActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIMemory::GetCurrentAddress(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIMemory::GetCurrentData(int count /* 1 */, int start /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: count
// Param: start
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIMemory::GetCurrentChars(int count /* 1 */, int start /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: count
// Param: start
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMemory::SetCurrentData(LPCSTR data, int start /* 0 */)		// TODO: handle data overlapping to next line
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: data
// Param: start
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMemory::SetCurrentChars(LPCSTR chars, int start /* 0 */)		// TODO: handle chars overlapping to next line
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: chars
// Param: start
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMemory::SetCurrentChars(char chr, int start /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: chr
// Param: start
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIMemory::GetFormatWidth(int format /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: format
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMemory::Activate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIMemory::GoToAddress(LPCSTR symbol)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: symbol
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIQuickWatch::Activate(void)
// Description: Open the QuickWatch dialog.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIQuickWatch::GetCurrentValue(void) 
// Description: Returns the value of the current expression
// Return: CString contaning the current value
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIQuickWatch::GetExpression(void) 
// Description: Returns the current expression
// Return: CString contaning the current expression
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIQuickWatch::SetExpression(LPCSTR exp)
// Description: Sets a new expression for the Quickwatch dialog, note does not do a "recalc"
// Return: BOOL
// Param: exp
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIQuickWatch::SetNewValue(LPCSTR value) 
// Description: Modifies the value for the current expression 
// Return: BOOL
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIQuickWatch::Recalc(void)
// Description: Recalcs the expression in the expression field.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIQuickWatch::AddWatch(void)
// Description: Adds the current expression in the Quick Watch Dialog to the Watch window.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIQuickWatch::Close(void)
// Description: Close the QuickWatch Dailog
// Return: HWND: NULL means all went well, otherwise return HWND of active window (alert)
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  UIRegisters::GetRegister(int reg)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: reg
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIRegisters::SetRegister(int reg, LPCSTR value)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: reg
// Param: value
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIRegisters::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIRegisters::AttachActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIRegisters::Find(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIRegisters::IsActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIRegisters::Activate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIStack::GetFunction(int level /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: level
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIStack::GetAllFunctions(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIStack::NavigateStack(int level /* 0 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: level
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIStack::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIStack::AttachActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIStack::Find(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIStack::IsActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIStack::Activate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIThreads::Activate(void)
// Description: Open the Threads dialog.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIThreads::ThreadToString(int thread)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: thread
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIThreads::FreezeThread(int thread)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: thread
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIThreads::ThawThread(int thread)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: thread
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIThreads::SetCurrentThread(int thread)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: thread
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: INT  UIThreads::GetCurrentThread(void)   //assumes first item in listbox is current thread.
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: INT
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIVariables::Activate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIVariables::SetValue(LPCSTR value, int row /* ROW_CURRENT */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: value
// Param: row
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIVariables::Locals(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWatch::Activate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIWatch::SetName(LPCSTR name, int row /* ROW_CURRENT */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: name
// Param: row
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIWatch::SetValue(LPCSTR value, int row /* ROW_CURRENT */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: value
// Param: row
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIWatch::Delete(int start_row /* ROW_CURRENT */, int total_rows /* 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: start_row
// Param: total_rows
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COFile::Create(UINT idsType, LPCSTR szSaveAs /*=NULL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: idsType
// Param: szSaveAs
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COFile::Open(LPCSTR szFileName, LPCSTR szChDir /*=NULL*/, EOpenAs oa /*=OA_AUTO*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szFileName
// Param: szChDir
// Param: oa
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COFile::Save(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COFile::SaveAs(LPCSTR szFileName, BOOL bOverWrite /*=FALSE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szFileName
// Param: bOverWrite
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COFile::Close(BOOL bSaveChanges /* = FALSE */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: bSaveChanges
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR COFile::GetFileName(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPCSTR
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR COFile::Cut(CString* pstr /*=NULL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPCSTR
// Param: pstr
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR COFile::Copy(CString* pstr /*=NULL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPCSTR
// Param: pstr
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void COFile::Paste(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void COFile::Delete(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void COFile::Undo(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void COFile::Redo(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COResScript::Create(LPCSTR szSaveAs /*=NULL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szSaveAs
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COResScript::Open(LPCSTR szFileName, LPCSTR szChDir /*=NULL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szFileName
// Param: szChDir
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COResScript::CreateResource( UINT idResType )	   // This one uses the string table
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: idResType
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COResScript::CreateResource( LPCSTR szResName )		// This one is generally used for custom resource types
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szResName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COSource::Create(LPCSTR szSaveAs /*=NULL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szSaveAs
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COSource::Open(LPCSTR szFileName, LPCSTR szChDir /*=NULL*/, EOpenAs oa /*=OA_AUTO*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szFileName
// Param: szChDir
// Param: oa
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COSource::GetReadOnly(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COSource::GetCurrentLine(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COSource::GetCurrentColumn(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COSource::GetSelectedText(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void COSource::SelectText(int line1, int column1, int line2, int column2, BOOL bColumnSelect /*=SELECT_NORMAL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: line1
// Param: column1
// Param: line2
// Param: column2
// Param: bColumnSelect
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void COSource::SetCursor(int line, int column)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: line
// Param: column
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void COSource::InsertText(LPCSTR szText, int line, int column, BOOL bLiteral /*=FALSE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: szText
// Param: line
// Param: column
// Param: bLiteral
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void COSource::TypeTextAtCursor(LPCSTR szText, BOOL bLiteral /*=FALSE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: szText
// Param: bLiteral
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COSource::GoToLine(LPCSTR szLine)
// Description: Go to the given line in the current source editor.
// Return: BOOL
// Param: szLine A string containing the line number to go to.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COSource::GoToLine(int nLine)
// Description: Go to the given line in the current source editor.
// Return: BOOL
// Param: nLine An integer containing the line number to go to.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COSource::Find(LPCSTR szFind, BOOL bMatchWord /*= FALSE*/, BOOL bMatchCase /*= FALSE*/, BOOL bRegExpr /*= FALSE*/, COSource::FindDirection fd /*= FD_DOWN*/)
// Description: Find the given string (szFind) in this source editor window.
// Return: BOOL
// Param: szFind The string to find in this window.
// Param: bMatchWord Set to TRUE to only find whole words. Default value is FALSE.
// Param: bMatchCase Set to TRUE to turn on case sensitivity. Default value is FALSE.
// Param: bRegExpr Set to TRUE if the string in szFind is a regular expression. Default value is FALSE.
// Param: fd Set to FD_DOWN to search toward the end of the file; FD_UP to search toward the top of the file. Default value is FD_DOWN.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COSource::Replace(LPCSTR szFind, LPCSTR szReplace, BOOL bMatchWord /*= FALSE*/, BOOL bMatchCase /*= FALSE*/, BOOL bRegExpr /*= FALSE*/, COSource::ReplaceScope rs /*= RS_WHOLEFILE*/)
// Description: Find (szFind) and replace (szReplace) in this source editor window.
// Return: BOOL
// Param: szFind The string to find in this window.
// Param: szReplace The string to replace the found string with in this window.
// Param: bMatchWord Set to TRUE to only find whole words. Default value is FALSE.
// Param: bMatchCase Set to TRUE to turn on case sensitivity. Default value is FALSE.
// Param: bRegExpr Set to TRUE if the string in szFind is a regular expression. Default value is FALSE.
// Param: rs Set to RS_WHOLEFILE to search and replace across the entire file; RS_SELECTION to search and replace within the selection. Default value is RS_WHOLEFILE.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COSource::SelectEmulations(EmulationType eEM)
// Description: Select Editor to emulate from Tools.Options.Compatibility
// Return: BOOL
// Param: eEM
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIAccEdit::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIAccEdit::AddAccel(LPCSTR szChar, LPCSTR  szId /*=NULL*/, DWORD dwKeyMods /*=0x0*/, BOOL bNextKeyType /*=FALSE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szChar
// Param: szId
// Param: dwKeyMods
// Param: bNextKeyType
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIAccEdit::EditAccel(LPCSTR szChar /*=NULL*/, LPCSTR  szId /*=NULL*/, DWORD dwKeyMods /*=0x0*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: szChar
// Param: szId
// Param: dwKeyMods
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIAccEdit::FindAccel(LPCSTR sz /*=NULL*/, LPCSTR szId /*=0*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: sz
// Param: szId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIAccEdit::GetKey(int line /*=-1*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: line
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: DWORD UIAccEdit::GetKeyMods(int line /*=-1*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: DWORD
// Param: line
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDlgEdit::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIDlgEdit::OnUpdate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDlgEdit::DropControl(int nControl, int cX, int cY )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: nControl
// Param: cX
// Param: cY
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIEditor::AttachActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIEditor::IsActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIEditor::Activate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIEditor::GetTitle(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIEditor::Close(BOOL bLoseChanges /*=TRUE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: bLoseChanges
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIFindInFilesDlg::AddFile(LPCSTR szFile)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: szFile
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIFindInFilesDlg::FindWhat(LPCSTR szFind)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: szFind
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIFindInFilesDlg::DoFind(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIFindDlg::Activate(void)
// Description: Open the Find dialog.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIFindDlg::Close(void)
// Description: Close the Find dialog.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIFindDlg::SetFindString(LPCSTR szFind)
// Description: Enter the text given in szFind in the Find What edit box in the Find dialog.
// Return: BOOL
// Param: szFind The string to enter in the Find What edit box in the Find dialog.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIFindDlg::SetMatchWord(BOOL bMatchWord /*= FALSE*/)
// Description: Check or uncheck the Match Whole Word Only checkbox based on the value of bMatchWord.
// Return: BOOL
// Param: bMatchWord If TRUE, check the Match Whole Word Only checkbox; if FALSE, uncheck it. Default value is FALSE.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIFindDlg::SetMatchCase(BOOL bMatchCase /*= FALSE*/)
// Description: Check or uncheck the Match Case checkbox based on the value of bMatchCase.
// Return: BOOL
// Param: bMatchCase If TRUE, check the Match Case checkbox; if FALSE, uncheck it. Default value is FALSE.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIFindDlg::SetRegularExpression(BOOL bRegExpr)
// Description: Check or uncheck the Regular Expression checkbox based on the value of bRegExpr.
// Return: BOOL
// Param: bRegExpr If TRUE, check the Regular Expression checkbox; if FALSE, uncheck it. Default value is FALSE.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIFindDlg::SetDirection(UIFindDlg::FindDirection fd /*= FD_DOWN*/)
// Description: Set the find direction in the Find dialog box.
// Return: BOOL
// Param: fd If FD_UP, set find direction to Up; if FD_DOWN, set find direction to Down. Default value is FD_DOWN.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIFindDlg::FindNext(void)
// Description: Perform the find operation by clicking the Find Next button in the Find dialog.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIFindDlg::SetBookmarks(void)
// Description: Perform the set bookmarks operation by clicking on the Set Bookmarks on All button in the Find dialog.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIReplaceDlg::Activate(void)
// Description: Open the Replace dialog.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIReplaceDlg::Close(void)
// Description: Close the Replace dialog.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIReplaceDlg::SetFindString(LPCSTR szFind)
// Description: Enter the text given in szFind in the Find What edit box in the Replace dialog.
// Return: BOOL
// Param: szFind The string to enter in the Find What edit box in the Replace dialog.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIReplaceDlg::SetReplaceString(LPCSTR szReplace)
// Description: Enter the text given in szReplace in the Replace With edit box in the Replace dialog.
// Return: BOOL
// Param: szReplace The string to enter in the Replace With edit box in the Replace dialog.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIReplaceDlg::SetMatchWord(BOOL bMatchWord /*= FALSE*/)
// Description: Check or uncheck the Match Whole Word Only checkbox based on the value of bMatchWord.
// Return: BOOL
// Param: bMatchWord If TRUE, check the Match Whole Word Only checkbox; if FALSE, uncheck it. Default value is FALSE.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIReplaceDlg::SetMatchCase(BOOL bMatchCase /*= FALSE*/)
// Description: Check or uncheck the Match Case checkbox based on the value of bMatchCase.
// Return: BOOL
// Param: bMatchCase If TRUE, check the Match Case checkbox; if FALSE, uncheck it. Default value is FALSE.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIReplaceDlg::SetRegularExpression(BOOL bRegExpr)
// Description: Check or uncheck the Regular Expression checkbox based on the value of bRegExpr.
// Return: BOOL
// Param: bRegExpr If TRUE, check the Regular Expression checkbox; if FALSE, uncheck it. Default value is FALSE.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIReplaceDlg::SetReplaceScope(UIReplaceDlg::ReplaceScope rs)
// Description: Set the replace scope in the Replace dialog box.
// Return: BOOL
// Param: rs
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIReplaceDlg::FindNext(void)
// Description: Perform the find operation by clicking the Find Next button in the Replace dialog.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIReplaceDlg::Replace(void)
// Description: Perform the replace operation by clicking the Replace button in the Replace dialog.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIReplaceDlg::ReplaceAll(void)
// Description: Perform the replace all operation by clicking the Replace All button in the Replace dialog.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIImgEdit::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIImgEdit::ClickInGraphTB ( int nButton, int cX, int cY )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: nButton
// Param: cX
// Param: cY
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIImgEdit::ClickImgTool ( int nImgTool )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: nImgTool
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIImgEdit::ClickColorMode( int nColor, int  nButton)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: nColor
// Param: nButton
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void  UIImgEdit::SetColor(int nColor, int nButton /* VK_LBUTTON */)   //REVIEW: Use CM_FOREGROUND or CM_BACKGROUND instead of button constants.
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: nColor
// Param: nButton
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIImgEdit::GetPane(int nPane)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: nPane
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIImgEdit::ClickMouse(int nButton, int nPane, int cX, int cY, int nMag /*=1*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: nButton
// Param: nPane
// Param: cX
// Param: cY
// Param: nMag
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIImgEdit::DragMouse(int nButton, int nPane, int cX1, int cY1, int cX2, int cY2, int nMag /*=1*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: nButton
// Param: nPane
// Param: cX1
// Param: cY1
// Param: cX2
// Param: cY2
// Param: nMag
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIImgEdit::FontDialog(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIImgEdit::SetFont(LPCSTR szFontName /*=NULL*/, int nSize /*=-1*/, int nStyle /*=-1*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: szFontName
// Param: nSize
// Param: nStyle
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIImgEdit::IsStandalone(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIImgEdit::GetEditorType(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMenEdit::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIMenEdit::GetMenuBar(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIResBrowser::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIResBrowser::SelectFolder(int nFolder)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: nFolder
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIResBrowser::SelectFolder(LPCSTR szFolder)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szFolder
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIResBrowser::OpenFolder(int nOpen)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: nOpen
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIResBrowser::FindResource(LPCSTR szId, int nFolder)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szId
// Param: nFolder
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIResBrowser::FindResource(LPCSTR szId, LPCSTR szFolder /*=NULL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szId
// Param: szFolder
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIResEditor::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIResEditor::IsValidType(LPCSTR szType) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: szType
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIResEditor::ExportResource(LPCSTR szFileName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: szFileName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIResTableEditor::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIResTableEditor::OnUpdate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIResTableEditor::SelectLine(int line, BOOL bMulti /*=FALSE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: line
// Param: bMulti
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIResTableEditor::GetCaption(int line /*=-1*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: line
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIResTableEditor::GetId(int line /*=-1*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: line
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIResTableEditor::GetCurLine(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIResTableEditor::GetLineCount(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIStrEdit::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIStrEdit::AddString(LPCSTR szCaption, LPCSTR szId /*=NULL*/, BOOL bIdFirst /*=FALSE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szCaption
// Param: szId
// Param: bIdFirst
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIStrEdit::EditString(LPCSTR szCaption /*=NULL*/, LPCSTR szId /*=NULL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: szCaption
// Param: szId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIStrEdit::FindString(LPCSTR szCaption /*=NULL*/, LPCSTR szId /*=0*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: szCaption
// Param: szId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIStrEdit::GetString(int line /*=-1*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: line
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UISymbolBrowser::CountSymbols(BOOL bReadOnly)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: bReadOnly
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIVerEdit::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SelectDependenciesGroup(CString Group /* = ""*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Group
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SelectDependentFile(CString File,CString Group /* = ""*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: File
// Param: Group
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::NewGroup(CString Name)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Name
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COProject::ActivateProjWnd()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::UpdateDependencies(int All/* = 1*/)      //USE ALL = 0 FOR UPDATING FILE DEPENDENCES ONLY
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: All
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::Close(int iSave)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iSave
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::GetErrorCount()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::GetWarningCount()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::VerifyBuild(BOOL LogErrors, int * iErr, int * iWarn,  BOOL WrnsAsErrs /*= FALSE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: LogErrors
// Param: Param The parameter description(s) for this function are not available.
// Param: int
// Param: iWarn
// Param: WrnsAsErrs
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::WaitUntilBuildDone(int Min)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Min
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::New(PROJOPTIONS &ProjOpts)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: &ProjOpts
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::New(LPCSTR szProjName, int ProjType,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szProjName
// Param: ProjType
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::BuildNew(LPCSTR szProjName, int ProjType,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szProjName
// Param: ProjType
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::NewAppWiz(APPWZOPTIONS &AppWizOpts)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: &AppWizOpts
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::NewAppWiz(LPCSTR projname, LPCSTR projdir, int platform)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: projname
// Param: projdir
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::Open(LPCSTR szProjName, int iMethod, BOOL LogWarning /* = TRUE */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szProjName
// Param: iMethod
// Param: LogWarning
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::Save(int wait /* FALSE */, LPCSTR file /* NULL */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: wait
// Param: file
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::AddFiles(LPCSTR szFileName, LPCSTR szGrpName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szFileName
// Param: szGrpName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::RemoveFiles(LPCSTR szFileNames, LPCSTR szGrpName )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szFileNames
// Param: szGrpName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::RemoveAll(LPCSTR szGrpName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szGrpName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::DeleteMakeFile()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::DeleteFromProjectDir(LPCSTR strDelTarget)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: strDelTarget
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::RemoveIntermediateDir()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::RemoveTargetDir()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::AddTarget(LPCSTR Name, int Type , BOOL Debug/* =FALSE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Name
// Param: Type
// Param: Debug
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::AddTarget(LPCSTR Name, LPCSTR CopyFrom)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Name
// Param: CopyFrom
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetTarget(LPCSTR Target)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Target
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::DeleteTarget(LPCSTR Target)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Target
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::RenameTarget(LPCSTR OldName, LPCSTR NewName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: OldName
// Param: NewName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR COProject::GetTarget(int Target /* = 0 Active target */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPCSTR
// Param: Target
// Param: target
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: COProject::Execute(int iRebuild)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: COProject::Execute(int
// Param: iRebuild
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::Build(int iWait)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iWait
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::RebuildAll(int iWait)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iWait
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::StopBuild()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COProject::GetProjectItemProp(int P_PropID)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: P_PropID
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SelectFile(LPCSTR szFile, LPCSTR szGrp)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szFile
// Param: szGrp
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SelectGroup(LPCSTR szGrpName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szGrpName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetProjProperty(PROJ_PROP_CATEGORIES iCategory,UINT iCtrlId, UINT iNewValue )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCategory
// Param: iCtrlId
// Param: iNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetProjProperty(PROJ_PROP_CATEGORIES iCategory,UINT iCtrlId, LPCSTR szNewValue )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCategory
// Param: iCtrlId
// Param: szNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::GetProjProperty(PROJ_PROP_CATEGORIES iCategory,UINT iCtrlId,CString szValue)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCategory
// Param: iCtrlId
// Param: szValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COProject::GetProjProperty(PROJ_PROP_CATEGORIES iCategory,UINT iCtrlId)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: iCategory
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  COProject::GetGroupProperty(PROJ_PROP_CATEGORIES  iCategory,LPCSTR szGrpName ,UINT iCtrlId)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCategory
// Param: szGrpName
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COProject::GetGroupProperty(PROJ_PROP_CATEGORIES  iCategory,LPCSTR szGrpName ,UINT iCtrlId,CString szValue)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: iCategory
// Param: szGrpName
// Param: iCtrlId
// Param: szValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetGroupProperty(PROJ_PROP_CATEGORIES  iCategory,LPCSTR szGrpName ,UINT iCtrlId, UINT iNewValue )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCategory
// Param: szGrpName
// Param: iCtrlId
// Param: iNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetGroupProperty(PROJ_PROP_CATEGORIES  iCategory,LPCSTR szGrpName ,UINT iCtrlId, LPCSTR szNewValue )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCategory
// Param: szGrpName
// Param: iCtrlId
// Param: szNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::GetFileProperty(PROJ_PROP_CATEGORIES iCategory,LPCSTR szGrpName ,LPCSTR szFileName,UINT iCtrlId)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCategory
// Param: szGrpName
// Param: szFileName
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COProject::GetFileProperty(PROJ_PROP_CATEGORIES iCategory,LPCSTR szGrpName ,LPCSTR szFileName,UINT iCtrlId,CString szValue)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: iCategory
// Param: szGrpName
// Param: szFileName
// Param: iCtrlId
// Param: szValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetFileProperty(PROJ_PROP_CATEGORIES iCategory,LPCSTR szGrpName, LPCSTR szFileName ,UINT iCtrlId, UINT iNewValue )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCategory
// Param: szGrpName
// Param: szFileName
// Param: iCtrlId
// Param: iNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetFileProperty(PROJ_PROP_CATEGORIES iCategory,LPCSTR szGrpName, LPCSTR szFileName ,UINT iCtrlId, LPCSTR szNewValue )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCategory
// Param: szGrpName
// Param: szFileName
// Param: iCtrlId
// Param: szNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetOption(INT iCategory,UINT iCtrlId, LPCSTR szNewValue)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCategory
// Param: iCtrlId
// Param: szNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: INT COProject::SetOption(INT iCategory, UINT iCtrlId, UINT iNewValue)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: INT
// Param: iCategory
// Param: iCtrlId
// Param: iNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString MyGetLabel(UINT id)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: id
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::MakeProjectExternal(LPCSTR sName/* =NULL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: sName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void COProject::SetPathMembers()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetPlatform(int platform)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetRemotePath(LPCSTR remote_file,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: remote_file
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetAdditionalDLLs(LPCSTR szDLLs)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szDLLs
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COProject::GetRemoteTarget(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetBuildCommand(LPCSTR command)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: command
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int ExecuteShellCMD(char *cmd, ...) {                   // Args should be char*, last one=NULL!
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: cmd
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::UpdateRemoteFile(LPCSTR local_file /* NULL */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: local_file
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetLocalTarget(LPCSTR localfile)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: localfile
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COProject::SetOutputTarget(LPCSTR outfile)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: outfile
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: // this function is taken directly from uwbframe.cpp because it does not belong there
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: The return value description for this function is not available.
// Param: Param The parameter description(s) for this function are not available.
// Param: taken
// Param: from
// Param: because
// Param: does
// Param: belong
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: // this function is taken directly from uwbframe.cpp because it does not belong there
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: The return value description for this function is not available.
// Param: Param The parameter description(s) for this function are not available.
// Param: taken
// Param: from
// Param: because
// Param: does
// Param: belong
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UISqlDataSources::Display(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int  UISqlDataSources::Name(CString ds) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: ds
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UISqlDataSources::Close(int OK /* = 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: OK
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UISqlServerLogIn::ID(CString ID)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: ID
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UISqlServerLogIn::Pw(CString pw)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: pw
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UISqlServerLogIn::Close(int OK/* = 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: OK
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UISelectTables::Name(CString tbName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: tbName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UISelectTables::Name(int index /*= 1*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: index
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UISelectTables::Close(int OK /* = 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: OK
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UISelectRecordSet::Close(int OK /* = 1*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: OK
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: UIDataBaseDlgs *UISelectRecordSet::New() 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: UIDataBaseDlgs*
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIDataBaseDlgs::WaitForSources() 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIDataBaseDlgs::WaitForLogin() 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIDataBaseDlgs::WaitForTables()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIAppWizard::GetPage(HWND hwnd /*=NULL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: hwnd
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIAppWizard::ExpectPage(int nPage)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: nPage
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR UIAppWizard::ExpectedTitle(int nPage) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPCSTR
// Param: nPage
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIAppWizard::Create(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIAppWizard::SetAppType(UINT id)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: id
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIAppWizard::SetDBOptions(UINT id)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: id
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIAppWizard::SetOLEOptions(UINT id)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: id
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIAppWizard::SetProjOptions(UINT id)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: id
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIAppWizard::SelectClass(int n)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIAppWizard::SelectClass(LPCSTR sz)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: sz
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIAppWizard::GetClassName(void)		// AACK! This is the same name as a Windows API
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIAppWizard::GetBaseClass(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIAppWizard::GetSourceFile(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIAppWizard::GetHeaderFile(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIClassWizard::Display() 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIClassWizard::Close() 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIClassWizard::AddFunction(int ClassIndex, int FuncIndex, int ObjectIndex)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: ClassIndex
// Param: FuncIndex
// Param: ObjectIndex
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIClassWizard::AddClass(int TypeIndex,CString Name,  CString DotH, CString DotCPP) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: TypeIndex
// Param: Name
// Param: DotH
// Param: DotCPP
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIClassWizard::EditCode()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIClassWizard::GetClassFile()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIClassWizard::GetActiveClass()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIAddClassDlg::Show()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIAddClassDlg::SetType(int Type) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Type
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIAddClassDlg::SetName(CString Name)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Name
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIAddClassDlg::SetHeader(CString DotH)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: DotH
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIAddClassDlg::SetCPP(CString DotCPP)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: DotCPP
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIAddClassDlg::Create()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIAddClassDlg::CheckOle()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIAddClassDlg::CheckOleCreateable(CString ExtName) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: ExtName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIAddClassDlg::CheckAddToGallery(BOOL bCheck /*= TRUE */)
// Description: Checks or unchecks the Add To Object Gallery check box.
// Return: int
// Param: If bCheck is TRUE it makes sure the check box is check. Otherwise it uncheck it if necessary.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIAddClassDlg::AttachDlgID(int index /*= 1 */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: index
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIAddClassDlg::AttachDlgID(CString Name) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Name
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjectTarget::New(LPCSTR Name, int Type, BOOL Debug)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Name
// Param: Type
// Param: Debug
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjectTarget::New(LPCSTR Name, LPCSTR Target)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Name
// Param: Target
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjectTarget::Delete(LPCSTR DelName) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: DelName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjectTarget::Rename(LPCSTR OldName, LPCSTR NewName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: OldName
// Param: NewName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjectTarget::Select(LPCSTR SelName, BOOL LogWarning/* = TRUE */) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: SelName
// Param: LogWarning
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIProjectTarget::Show()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIProjectTarget::Close()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjectTarget::SetTarget(LPCSTR Target) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: Target
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR UIProjectTarget::GetTarget(int Index /* = 0*/) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPCSTR
// Param: Index
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIProjectFiles::AddFile(LPCSTR szFileName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: szFileName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIProjectFiles::AddAllFiles(LPCSTR szType /* UIPF_FOT_SOURCE */, LPCSTR szProjFilesPath /* NULL */)   
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: szType
// Param: szProjFilesPath
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIProjectFiles::Close(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIProjOptionsTabDlg::Display() 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjOptionsTabDlg::SelectFile (CString szFile,CString szGrp, CString szTarget ) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szFile
// Param: szGrp
// Param: szTarget
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjOptionsTabDlg::SelectGroup(CString szGrp, CString szTarget) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szGrp
// Param: szTarget
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjOptionsTabDlg::SelectTarget(CString szTarget) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szTarget
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int GetCompilerCategory(UINT iCtrlId)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjOptionsTabDlg::SetCompilerOption(UINT iCtrlId, int iNewValue)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCtrlId
// Param: iNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjOptionsTabDlg::SetCompilerOption(UINT iCtrlId, LPCSTR szNewValue)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCtrlId
// Param: szNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjOptionsTabDlg::GetCompilerOption( UINT iCtrlId )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR UIProjOptionsTabDlg::GetCompilerOptionStr( UINT iCtrlId )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPCSTR
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIProjOptionsTabDlg::ShowCompilerTab(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int GetLinkerCategory(UINT iCtrlId)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjOptionsTabDlg::SetLinkerOption(UINT iCtrlId, int iNewValue)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCtrlId
// Param: iNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjOptionsTabDlg::SetLinkerOption(UINT iCtrlId, LPCSTR szNewValue)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCtrlId
// Param: szNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIProjOptionsTabDlg::GetLinkerOption( UINT iCtrlId )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR UIProjOptionsTabDlg::GetLinkerOptionStr( UINT iCtrlId )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPCSTR
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIProjOptionsTabDlg::ShowLinkerTab(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIOGalleryDlg::Display() 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIOGalleryDlg::SelectPage( LPTSTR szPageName )	// REVIEW: Is HWND a good return value?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: szPageName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIOGalleryDlg::SelectPage( UINT nPage )	// REVIEW: Is HWND a good return value?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: nPage
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIOGalleryDlg::DisplayProperties( void )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIOGalleryDlg::CloseProperties( void )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: UINT UIOGalleryDlg::GetPageCount(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: UINT
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPTSTR UIOGalleryDlg::GetActivePageText(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPTSTR
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIOGalleryDlg::ActivateFirstPage(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIOGalleryDlg::ActivateNextPage( BOOL bRight /* TRUE */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: bRight
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIOGalleryDlg::DeleteOGDatabase(LPTSTR szPath /* = NULL */) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: szPath
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::OpenConnectionDlg(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::OpenSettingsDlg(PLATFORM_TYPE platform, 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::CloseAllDlgs(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetPlatformCore(PLATFORM_TYPE platform)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetConnectionCore(CONNECTION_TYPE connection,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: connection
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetZoneCore(LPCSTR zone, PLATFORM_TYPE platform)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: zone
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetMachineNameCore(LPCSTR machine_name, 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: machine_name
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetPasswordCore(LPCSTR password, CONNECTION_TYPE connection,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: password
// Param: connection
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetConnectorCore(CONNECTOR_TYPE connector, 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: connector
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetBaudRateCore(BAUD_RATE_TYPE baud_rate, 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: baud_rate
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetDataBitsCore(DATA_BITS_TYPE data_bits, 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: data_bits
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetParityCore(PARITY_TYPE parity,     PLATFORM_TYPE platform)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: parity
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetStopBitsCore(STOP_BITS_TYPE stop_bits, 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: stop_bits
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetFlowControlCore(FLOW_CONTROL_TYPE flow_control, 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: flow_control
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetIPAddressCore(LPCSTR ip_address, PLATFORM_TYPE platform)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: ip_address
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: //	REVIEW: kept old code around in case we need to back out
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: The return value description for this function is not available.
// Param: kept
// Param: code
// Param: in
// Param: we
// Param: to
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::GetRegistryValue(HKEY hKeyRegistry, 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: hKeyRegistry
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::OpenRegistryToCafe(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::OpenRegistryToPlatform(PLATFORM_TYPE platform)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::OpenRegistryToConnection(PLATFORM_TYPE platform,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::CloseRegistryFromCafe(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::CloseRegistryFromPlatform(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::CloseRegistryFromConnection(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CONNECTOR_TYPE COConnection::TranslateUserConnector(CString connector_str)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CONNECTOR_TYPE
// Param: connector_str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BAUD_RATE_TYPE COConnection::TranslateUserBaudRate(CString baud_rate_str)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BAUD_RATE_TYPE
// Param: baud_rate_str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: DATA_BITS_TYPE COConnection::TranslateUserDataBits(CString data_bits)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: DATA_BITS_TYPE
// Param: data_bits
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: PARITY_TYPE COConnection::TranslateUserParity(CString parity_str)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: PARITY_TYPE
// Param: parity_str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: STOP_BITS_TYPE COConnection::TranslateUserStopBits(CString stop_bits)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: STOP_BITS_TYPE
// Param: stop_bits
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: FLOW_CONTROL_TYPE COConnection::TranslateUserFlowControl(CString flow_control_str)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: FLOW_CONTROL_TYPE
// Param: flow_control_str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetPlatform(PLATFORM_TYPE platform /* PLATFORM_USER */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetConnection(CONNECTION_TYPE connection /* CONNECTION_USER */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: connection
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetZone(LPCSTR zone /* ZONE_USER */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: zone
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetMachineName(LPCSTR machine_name /* MACHINE_NAME_USER */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: machine_name
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetPassword(LPCSTR password /* PASSWORD_USER */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: password
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetConnector(CONNECTOR_TYPE connector /* CONNECTOR_USER */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: connector
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetBaudRate(BAUD_RATE_TYPE baud_rate /* BAUD_RATE_USER */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: baud_rate
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetDataBits(DATA_BITS_TYPE data_bits /* DATA_BITS_USER */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: data_bits
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetParity(PARITY_TYPE parity /* PARITY_USER */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: parity
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetStopBits(STOP_BITS_TYPE stop_bits /* STOP_BITS_USER */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: stop_bits
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetFlowControl(FLOW_CONTROL_TYPE flow_control /* FLOW_CONTROL_USER */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: flow_control
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetIPAddress(LPCSTR ip_address /* IP_ADDRESS_USER */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: ip_address
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetAll(PLATFORM_TYPE platform /* PLATFORM_USER */,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetAll(PLATFORM_TYPE platform, CONNECTION_TYPE connection,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// Param: connection
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetAll(PLATFORM_TYPE platform, CONNECTION_TYPE connection,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// Param: connection
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetAll(PLATFORM_TYPE platform, CONNECTION_TYPE connection,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// Param: connection
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetAll(PLATFORM_TYPE platform, CONNECTION_TYPE connection,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// Param: connection
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetAll(PLATFORM_TYPE platform, CONNECTION_TYPE connection,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// Param: connection
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::SetAllSerialCore(PLATFORM_TYPE platform, 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: PLATFORM_TYPE COConnection::GetTruePlatform(PLATFORM_TYPE platform)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: PLATFORM_TYPE
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CONNECTION_TYPE COConnection::GetTrueConnection(CONNECTION_TYPE connection,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CONNECTION_TYPE
// Param: connection
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: PLATFORM_TYPE COConnection::GetPlatformCore(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: PLATFORM_TYPE
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CONNECTION_TYPE COConnection::GetConnectionCore(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CONNECTION_TYPE
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: PLATFORM_TYPE COConnection::GetPlatform(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: PLATFORM_TYPE
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CONNECTION_TYPE COConnection::GetConnection(PLATFORM_TYPE platform /* PLATFORM_CURRENT */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CONNECTION_TYPE
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::GetUserPlatforms(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COConnection::GetUserConnections(PLATFORM_TYPE platform /* PLATFORM_USER */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COConnection::GetUserRemoteLocalPath(PLATFORM_TYPE platform 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COConnection::GetUserRemoteSharePath(PLATFORM_TYPE platform
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void COWorkSpace::CloseAllWindows(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COWorkSpace::IsToolbarVisible(UINT id)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: id
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COWorkSpace::IsDockWindowVisible(UINT id)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: id
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int COWorkSpace::ShowToolbar(UINT id, BOOL bShow /*=TRUE*/)	  //	REVIEW(enriquep): Use enum for id
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: id
// Param: bShow
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COWorkSpace::IsWindowDocked(UINT id, int nLocation)   // (enriquep)	 REVIEW: Use enum for id
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: id
// Param: nLocation
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COWorkSpace::IsToolbarDocked(UINT id, int nLocation)   // (enriquep)	 REVIEW: Use enum for id
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: id
// Param: nLocation
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COWorkSpace::ShowPropPage(BOOL bShow)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: bShow
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString COWorkSpace::GetStatusText(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COWorkSpace::WaitForStatusText(LPCSTR sz, DWORD dwMilliSeconds, BOOL bExact /*=TRUE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: sz
// Param: dwMilliSeconds
// Param: bExact
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COWorkSpace::VerifyCaretPosition( int nRow, int nCol, LPCSTR szErrTxt )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: nRow
// Param: nCol
// Param: szErrTxt
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COWorkSpace::AddTool(CString strMenuText,  
// Description: Add a Tool to the Tools menu
// Return: BOOL
// Param: CString strMenuText Name and shortcut to appear on tools menu
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL COWorkSpace::DeleteTools(int Number)
// Description: Delete a number of Tools from the Tools menu
// Return: BOOL
// Param: int Number Number of tools to delete
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIFileDlg::SetName(LPCSTR sz)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: sz
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIFileDlg::SetPath(LPCSTR sz)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: sz
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIFileDlg::OK(BOOL bOverwrite)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: bOverwrite
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIFileDlg::GetDlgItem(UINT id) const
// Description: Get the HWND of a particular item (referred to by ID) in the dialog.
// Return: The HWND of the dialog item specified by the id parameter.
// Param: id The id of the item in the dialog.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR UIFileDlg::GetLabel(UINT id) const
// Description: Get the label associated with a control on the dialog (specified by id).
// Return: LPCSTR
// Param: id The id of the item in the dialog.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIFileDlg::GetExtensionDialog(void) const
// Description: This function gets the HWND of the extension dialog associated with this common dialog. Extensions to common dialogs are implemented as child dialogs of the main dialog.
// Return: HWND of the extension dialog. NULL if it doesn't exist.
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIFileSaveAsDlg::VerifyUnique(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND  UIFileOpenDlg::Display(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIFileOpenDlg::VerifyUnique(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIFileOpenDlg::SetEditor(EOpenAs oa)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: oa
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIFileOpenDlg::SetReadOnly(BOOL b)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: Param The parameter description(s) for this function are not available.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIFontDlg::VerifyUnique(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIFontDlg::SetName(LPCSTR szName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: szName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIFontDlg::SetSize(int nSize)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: nSize
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIFontDlg::SetStyle(int nStyle)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: nStyle
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UICustomizeTabDlg::Display() 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UICustomizeTabDlg::AddTBButton(int nButtonType, HWND hwndToolbar /* = NULL */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: nButtonType
// Param: hwndToolbar
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UICustomizeTabDlg::GetCurrentMiniPage()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDockWindow::AttachActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDockWindow::Find(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDockWindow::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDockWindow::IsActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIDockWindow::Close(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIConnection::Settings(CString title) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: title
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIConnection::SetPlatform(LPCSTR platform)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: platform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIConnection::SetConnection(LPCSTR connection)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: connection
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIConnection::GetPlatform(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIConnection::GetConnection(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIConnectionSettings::SetZone(LPCSTR zone)	
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: zone
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIConnectionSettings::SetMachineName(LPCSTR machine_name)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: machine_name
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIConnectionSettings::SetConnector(LPCSTR connector)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: connector
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIConnectionSettings::SetBaudRate(LPCSTR baud_rate)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: baud_rate
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIConnectionSettings::SetDataBits(LPCSTR data_bits)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: data_bits
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIConnectionSettings::SetParity(LPCSTR parity)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: parity
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIConnectionSettings::SetStopBits(LPCSTR stop_bits)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: stop_bits
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIConnectionSettings::SetFlowControl(LPCSTR flow_control)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: flow_control
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIConnectionSettings::SetIPAddress(LPCSTR ip_address)	
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: ip_address
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIConnectionSettings::SetPassword(LPCSTR password, 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: password
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIConnectionSettings::Close(void)								
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIOptionsTabDlg::Display() 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIOptionsTabDlg::AddDirectory( LPCSTR szNewDir, int iDirType, int iPlatform)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: szNewDir
// Param: iDirType
// Param: iPlatform
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIOutput::Activate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UITabbedDialog::VerifyClass(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: INT UITabbedDialog::SetOption(INT iTab, UINT iCtrlId, UINT iNewValue) 
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: INT
// Param: iTab
// Param: iCtrlId
// Param: iNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UITabbedDialog::SetOption(INT iTab,UINT iCtrlId, LPCSTR szNewValue)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iTab
// Param: iCtrlId
// Param: szNewValue
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UITabbedDialog::GetOption(INT iTab, UINT iCtrlId)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: iTab
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR UITabbedDialog::GetOptionStr(INT iTab, UINT iCtrlId)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPCSTR
// Param: iTab
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UITabbedDialog::ShowPage(int iCtrlID, int iTabCnt)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: iCtrlID
// Param: iTabCnt
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UITabbedDialog::ShowPage(LPCSTR szTabCaption)
// Description: Activates the page specified that has a Tab caption specified by szTabCaption.(EnriqueP)
// Return: HWND
// Param: szTabCaption, contains the Tab caption text that is to be activated.
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UITabbedDialog::GetCurrentPage() const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UITabbedDialog::GetCurrentMiniPage() const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UITabbedDialog::IsControlInCurrentPage(UINT iCtrlId) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: iCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR UITabbedDialog::GetLabel(UINT nCtrlId) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPCSTR
// Param: nCtrlId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UITabbedDialog::ActivateNextPage( BOOL bRight /* TRUE */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: bRight
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UITabbedDialog::ShowNextPage(int iCtrlID)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: iCtrlID
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UITabbedDialog::GetDlgItem(UINT id) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: id
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBDialog::Close(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBDialog::Help(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBMessageBox::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIMainFrm::OnUpdate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMainFrm::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMainFrm::DoCommand( UINT id, DC_METHOD method)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: id
// Param: method
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIMainFrm::IsCommandEnabled(UINT id)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: id
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIProperties::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIProperties::GetCurrentPage(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIProperties::GetTitle(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIProperties::GetPage(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIProperties::SetPage(LPCSTR szPage)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: szPage
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIProperties::GetLabel(UINT id) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: id
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIProperties::Close(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UITBarDialog::Display(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIToolbar::DisplayTBDlg(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIToolbar::ShowTB(int nTbId, BOOL bShow)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: nTbId
// Param: bShow
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: LPCSTR UIToolbar::GetTBText(int nTbId)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: LPCSTR
// Param: nTbId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIToolbar::IsDocked(HWND hWnd, int nLocation)   // (EnriqueP)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: hWnd
// Param: nLocation
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIWBFrame::OnUpdate(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::Find(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::IsValid(void) const
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::IsDebug(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::IsActive(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::IsAlert(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::CreateNewFile(LPCSTR szFileType)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: szFileType
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::OpenFile(LPCSTR szFileName, LPCSTR szChDir /*=NULL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: szFileName
// Param: szChDir
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::SaveFileAs(LPCSTR szFileName, BOOL bOverwrite /*=TRUE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: szFileName
// Param: bOverwrite
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::CloseEditor(HWND hwnd /*=NULL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: hwnd
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::CloseProject(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIWBFrame::CloseAllWindows(void)   // REVIEW (EnriqueP): Move to CWorkSpace?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::GetActiveEditor(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::SetActiveEditor(HWND hwndEditor)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: hwndEditor
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::GetToolbar(int nTbId)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: nTbId
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::ShowDockWindow(UINT id, BOOL bShow /*=TRUE*/) // REVIEW (EnriqueP): Move to CWorkSpace
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: id
// Param: bShow
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::IsWindowDocked(HWND hWnd, int nLocation)   // (enriquep)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: hWnd
// Param: nLocation
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIWBFrame::GetEditorCurPos( EGECP x, HWND hwndEditor /*=NULL*/ )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: x
// Param: hwndEditor
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::CreateNewResource(LPCSTR szResType)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: szResType
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::ImportResource(LPCSTR szFileName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: szFileName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIWBFrame::ExportResource(LPCSTR szFileName, BOOL bOverwrite /*=FALSE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: szFileName
// Param: bOverwrite
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::ShowPropPage(BOOL bShow)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: bShow
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIWBFrame::GetProperty(int nProp)   // REVIEW (EnriqueP): Move to CWorkSpace?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: nProp
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIWBFrame::GetProjPath(void)   // REVIEW (EnriqueP): Move to CWorkSpace?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: void UIWBFrame::SelectProjItem(int item, LPCSTR szName)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: void
// Param: item
// Param: szName
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIWBFrame::GetItemProperty(int nProp)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: nProp
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::CanWeBuild(void )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIWBFrame::GetErrorCount(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIWBFrame::GetWarningCount(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::BrowseSymbols(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::AppWizard(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::ClassWizard(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::QuickWatch(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::ProjectProperties(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::FindInFilesDlg(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::Breakpoints(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::Exceptions(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::Threads(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::GoTo(LPCSTR str)		
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::GoToLine(LPCSTR szLine)		// REVIEW: Why the duplicate function?
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: szLine
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::GoToLine(int nLine)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: nLine
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::Options(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::GetStatusBar(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: CString UIWBFrame::GetStatusText(void)		  // REVIEW (EnriqueP): Move to CWorkSpace
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: CString
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::WaitForStatusText(LPCSTR sz, DWORD dwMilliSeconds, BOOL bExact /*=TRUE*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: sz
// Param: dwMilliSeconds
// Param: bExact
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::VerifyFile(LPCSTR szfile)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: szfile
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::VerifyCaretPosition( int nRow, int nCol, LPCSTR szErrTxt )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: nRow
// Param: nCol
// Param: szErrTxt
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::FVerifyClipboardText( CString stMatch )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: stMatch
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::FVerifySelection( CString stTest )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: stTest
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::FVerifyLine( CString stTest )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: stTest
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::AddTBButton(int nButtonType, HWND hwndToolbar /* = NULL */)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: nButtonType
// Param: hwndToolbar
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::SetToolbarCombo(LPCSTR str /*NULL*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::Break(int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::Go(int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::Restart(int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::StopDebugging(int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::StepInto(int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::StepOver(int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::StepOut(int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::StepToCursor(int WAIT)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: WAIT
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::ToggleBreakpoint(void)             //REVIEW: Add extra functionality to make worthwhile.
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::ToggleBreakpointAtLine(int line)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: line
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::SetNextStatement(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: UINT UIWBFrame::GetIDEState(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: UINT
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::Wait(int option,BOOL bCheckDebuggeeWindow /*TRUE*/)  		//TODO: needs to be more robust (time-limits, FALSE returns, etc.)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: option
// Param: bCheckDebuggeeWindow
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::WaitForBreak(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::WaitForTermination(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::WaitForRun(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::WaitForException(void)		// exception must be hit within five minutes
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::DoDebuggeeKeys(CString str)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::DoDebuggeeCmd(CString str)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: str
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::CreateNewProject(LPCSTR szProjName, int ProjType,
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: szProjName
// Param: ProjType
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::BuildProject(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::DeleteProject(LPCSTR szProjName, LPCSTR szDir)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: szProjName
// Param: szDir
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::VerifyBuildOutput()
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::VerifyProjectRan(LPCSTR szProject)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: szProject
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::VerifySubstringAtLine( LPCSTR stSubstring)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: stSubstring
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: int UIWBFrame::GetMemoryWidth(void)			//must only set width with SetMemoryWidth!			
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: int
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: MEM_FORMAT UIWBFrame::GetMemoryFormat(void)		//must only set format with SetMemoryFormat!
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: MEM_FORMAT
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::SetMemoryWidth(int width)	// sets fixed width
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: width
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::SetMemoryFormat(MEM_FORMAT format)	
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: format
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::WaitOnWndWithCtrl(INT ID, DWORD dwMillSec )
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: ID
// Param: dwMillSec
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::FileOpenDlg(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: HWND UIWBFrame::FileSaveAsDlg(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: HWND
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: BOOL UIWBFrame::GetPcodeSwitch(void)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: BOOL
// Param: void, takes no parameters 
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: SHL_API LPCSTR GetLocString(UINT id, int nOffset /*=-1*/)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: SHL_API
// Param: id
// Param: nOffset
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: SHL_API LPCSTR GetSysLocString(UINT id)
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: SHL_API
// Param: id
// END_HELP_COMMENT
// BEGIN_HELP_COMMENT
// Function: SHL_API int GetUserTargetPlatforms(void)	
// Description: The description for this function is not available. Please see the appropriate component owner for a description of this function.
// Return: SHL_API
// Param: void, takes no parameters 
// END_HELP_COMMENT
