/*****************************************************************************\
*
* Module: MsgDoc2.cpp
*
* Contains static members of the CMsgDoc class.
*
\*****************************************************************************/

#include "stdafx.h"
#pragma hdrstop

#include "msglog.h"
#include "msgview.h"
#include "msgdoc.h"

#include <dde.h>

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif

int CMsgDoc::m_nLogging = 0;
BOOL CMsgDoc::m_fTestMode = FALSE;

CHAR CMsgDoc::m_szKeyMsgFilters[]			= "MsgFilters";
CHAR CMsgDoc::m_szKeyMsgFiltersMask[]		= "MsgFiltersMask";
CHAR CMsgDoc::m_szKeyDlgMsgFiltersMask[]	= "MsgFiltersMaskDlg";
#ifndef DISABLE_WIN95_MESSAGES
CHAR CMsgDoc::m_szKeyAniMsgFiltersMask[]	= "MsgFiltersMaskAni";
CHAR CMsgDoc::m_szKeyBLMsgFiltersMask[]		= "MsgFiltersMaskBL";
CHAR CMsgDoc::m_szKeyHdrMsgFiltersMask[]	= "MsgFiltersMaskHdr";
CHAR CMsgDoc::m_szKeyTBMsgFiltersMask[]		= "MsgFiltersMaskTB";
CHAR CMsgDoc::m_szKeyTTMsgFiltersMask[]		= "MsgFiltersMaskTT";
CHAR CMsgDoc::m_szKeyStatMsgFiltersMask[]	= "MsgFiltersMaskStat";
CHAR CMsgDoc::m_szKeyTrkMsgFiltersMask[]	= "MsgFiltersMaskTrk";
CHAR CMsgDoc::m_szKeyUpDnMsgFiltersMask[]	= "MsgFiltersMaskUpDn";
CHAR CMsgDoc::m_szKeyProgMsgFiltersMask[]	= "MsgFiltersMaskProg";
CHAR CMsgDoc::m_szKeyHKMsgFiltersMask[]		= "MsgFiltersMaskHK";
CHAR CMsgDoc::m_szKeyLVMsgFiltersMask[]		= "MsgFiltersMaskLV";
CHAR CMsgDoc::m_szKeyTVMsgFiltersMask[]		= "MsgFiltersMaskTV";
CHAR CMsgDoc::m_szKeyTabMsgFiltersMask[]	= "MsgFiltersMaskTab";
#endif	// DISABLE_WIN95_MESSAGES
CHAR CMsgDoc::m_szKeyWinFilters[]			= "WinFilters";
CHAR CMsgDoc::m_szKeyOutputFilters[]		= "OutputFilters";
CHAR CMsgDoc::m_szKeyOutputLogFile[]		= "OutputLogFile";
CHAR CMsgDoc::m_szKeyLines[]				= "Lines";

BOOL CMsgDoc::m_fMsgsUserDef;
BOOL CMsgDoc::m_fMsgsRegisteredDef;
BOOL CMsgDoc::m_fMsgsUndocumentedDef;
BOOL CMsgDoc::m_fIncludeParentDef;
BOOL CMsgDoc::m_fIncludeChildrenDef;
BOOL CMsgDoc::m_fIncludeProcessDef;
BOOL CMsgDoc::m_fIncludeThreadDef;
BOOL CMsgDoc::m_fShowNestingLevelDef;
BOOL CMsgDoc::m_fShowRawParmsDef;
BOOL CMsgDoc::m_fShowDecodedParmsDef;
BOOL CMsgDoc::m_fShowRawReturnDef;
BOOL CMsgDoc::m_fShowDecodedReturnDef;
BOOL CMsgDoc::m_fShowOriginTimeDef;
BOOL CMsgDoc::m_fShowMousePositionDef;
BOOL CMsgDoc::m_fLogToFileDef;
CString CMsgDoc::m_strLogFileNameDef;
BOOL CMsgDoc::m_fAppendFileDef;
int CMsgDoc::m_cLinesMaxDef;
int CMsgDoc::m_cShowReturnUseCount		= 0;

BYTE CMsgDoc::m_afSelectedDef[MAX_MESSAGES];
BYTE CMsgDoc::m_afDlgSelectedDef[MAX_DLG_MESSAGES];
#ifndef DISABLE_WIN95_MESSAGES
BYTE CMsgDoc::m_afAniSelectedDef[MAX_ANI_MESSAGES];
BYTE CMsgDoc::m_afHdrSelectedDef[MAX_HDR_MESSAGES];
BYTE CMsgDoc::m_afTBSelectedDef[MAX_TB_MESSAGES];
BYTE CMsgDoc::m_afTTSelectedDef[MAX_TT_MESSAGES];
BYTE CMsgDoc::m_afStatSelectedDef[MAX_STAT_MESSAGES];
BYTE CMsgDoc::m_afTrkSelectedDef[MAX_TRK_MESSAGES];
BYTE CMsgDoc::m_afUpDnSelectedDef[MAX_UD_MESSAGES];
BYTE CMsgDoc::m_afProgSelectedDef[MAX_PROG_MESSAGES];
BYTE CMsgDoc::m_afHKSelectedDef[MAX_HK_MESSAGES];
BYTE CMsgDoc::m_afLVSelectedDef[MAX_LV_MESSAGES];
BYTE CMsgDoc::m_afTVSelectedDef[MAX_TV_MESSAGES];
BYTE CMsgDoc::m_afTabSelectedDef[MAX_TAB_MESSAGES];
#endif	// DISABLE_WIN95_MESSAGES
BYTE CMsgDoc::m_BitTable[8] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };


//
// Message lookup table.  This will be initialized to be a sparse
// array with elements pointing into the m_aMsgDesc table.  It can
// be used to quickly look up the message description for a given
// integral message number.
//
PMSGDESC CMsgDoc::m_apmdLT[MAX_MESSAGES];

//
// Other message lookup tables.  These will be initialized to be a sparse
// array with elements pointing into the m_aMsgDesc table.  It can
// be used to quickly look up the message description for a given
// integral message number.
//
PMSGDESC CMsgDoc::m_apmdDlgLT[MAX_DLG_MESSAGES];
#ifndef DISABLE_WIN95_MESSAGES
PMSGDESC CMsgDoc::m_apmdAniLT[MAX_ANI_MESSAGES];
PMSGDESC CMsgDoc::m_apmdHdrLT[MAX_HDR_MESSAGES];
PMSGDESC CMsgDoc::m_apmdTBLT[MAX_TB_MESSAGES];
PMSGDESC CMsgDoc::m_apmdTTLT[MAX_TT_MESSAGES];
PMSGDESC CMsgDoc::m_apmdStatLT[MAX_STAT_MESSAGES];
PMSGDESC CMsgDoc::m_apmdTrkLT[MAX_TRK_MESSAGES];
PMSGDESC CMsgDoc::m_apmdUpDnLT[MAX_UD_MESSAGES];
PMSGDESC CMsgDoc::m_apmdProgLT[MAX_PROG_MESSAGES];
PMSGDESC CMsgDoc::m_apmdHKLT[MAX_HK_MESSAGES];
PMSGDESC CMsgDoc::m_apmdLVLT[MAX_LV_MESSAGES];
PMSGDESC CMsgDoc::m_apmdTVLT[MAX_TV_MESSAGES];
PMSGDESC CMsgDoc::m_apmdTabLT[MAX_TAB_MESSAGES];
#endif	// DISABLE_WIN95_MESSAGES

//
// Message description table.  Describes each message that can be spied on.
//
// This table is added to a listbox in the order shown.  Keep this
// list alphabetical, please!!
//
MSGDESC CMsgDoc::m_aMsgDesc[] =
{
#ifndef FEWMESSAGES
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(ACM_OPEN, MT_ANI),						// WM_USER+
	MSGDESCENTRY(ACM_PLAY, MT_ANI),						// WM_USER+
	MSGDESCENTRY(ACM_STOP, MT_ANI),						// WM_USER+
#endif	// DISABLE_WIN95_MESSAGES

	MSGDESCENTRY(BM_GETCHECK, MT_BM),					// 0x00F0
	MSGDESCENTRY(BM_GETSTATE, MT_BM),					// 0x00F2
	MSGDESCENTRY(BM_SETCHECK, MT_BM),					// 0x00F1
	MSGDESCENTRY(BM_SETSTATE, MT_BM),					// 0x00F3
	MSGDESCENTRY(BM_SETSTYLE, MT_BM),					// 0x00F4

	MSGDESCENTRY(CB_ADDSTRING, MT_CB),					// 0x0143
	MSGDESCENTRY(CB_DELETESTRING, MT_CB),				// 0x0144
	MSGDESCENTRY(CB_DIR, MT_CB),						// 0x0145
	MSGDESCENTRY(CB_FINDSTRING, MT_CB),					// 0x014C
	MSGDESCENTRY(CB_FINDSTRINGEXACT, MT_CB),			// 0x0158
	MSGDESCENTRY(CB_GETCOUNT, MT_CB),					// 0x0146
	MSGDESCENTRY(CB_GETCURSEL, MT_CB),					// 0x0147
	MSGDESCENTRY(CB_GETDROPPEDCONTROLRECT, MT_CB),		// 0x0152
	MSGDESCENTRY(CB_GETDROPPEDSTATE, MT_CB),			// 0x0157
	MSGDESCENTRY(CB_GETEDITSEL, MT_CB),					// 0x0140
	MSGDESCENTRY(CB_GETEXTENDEDUI, MT_CB),				// 0x0156
	MSGDESCENTRY(CB_GETITEMDATA, MT_CB),				// 0x0150
	MSGDESCENTRY(CB_GETITEMHEIGHT, MT_CB),				// 0x0154
	MSGDESCENTRY(CB_GETLBTEXT, MT_CB),					// 0x0148
	MSGDESCENTRY(CB_GETLBTEXTLEN, MT_CB),				// 0x0149
	MSGDESCENTRY(CB_GETLOCALE, MT_CB),					// 0x015A
	MSGDESCENTRY(CB_INSERTSTRING, MT_CB),				// 0x014A
	MSGDESCENTRY(CB_LIMITTEXT, MT_CB),					// 0x0141
	MSGDESCENTRY(CB_RESETCONTENT, MT_CB),				// 0x014B
	MSGDESCENTRY(CB_SELECTSTRING, MT_CB),				// 0x014D
	MSGDESCENTRY(CB_SETCURSEL, MT_CB),					// 0x014E
	MSGDESCENTRY(CB_SETEDITSEL, MT_CB),					// 0x0142
	MSGDESCENTRY(CB_SETEXTENDEDUI, MT_CB),				// 0x0155
	MSGDESCENTRY(CB_SETITEMDATA, MT_CB),				// 0x0151
	MSGDESCENTRY(CB_SETITEMHEIGHT, MT_CB),				// 0x0153
	MSGDESCENTRY(CB_SETLOCALE, MT_CB),					// 0x0159
	MSGDESCENTRY(CB_SHOWDROPDOWN, MT_CB),				// 0x014F

	MSGDESCENTRY(DM_GETDEFID, MT_DLG),					// WM_USER+0
	MSGDESCENTRY(DM_SETDEFID, MT_DLG),					// WM_USER+1

	MSGDESCENTRY(EM_CANUNDO, MT_EM),					// 0x00C6
	MSGDESCENTRY(EM_EMPTYUNDOBUFFER, MT_EM),			// 0x00CD
	MSGDESCENTRY(EM_FMTLINES, MT_EM),					// 0x00C8
	MSGDESCENTRY(EM_GETFIRSTVISIBLELINE, MT_EM),		// 0x00CE
	MSGDESCENTRY(EM_GETHANDLE, MT_EM),					// 0x00BD
	MSGDESCENTRY(EM_GETLINE, MT_EM),					// 0x00C4
	MSGDESCENTRY(EM_GETLINECOUNT, MT_EM),				// 0x00BA
	MSGDESCENTRY(EM_GETMODIFY, MT_EM),					// 0x00B8
	MSGDESCENTRY(EM_GETPASSWORDCHAR, MT_EM),			// 0x00D2
	MSGDESCENTRY(EM_GETRECT, MT_EM),					// 0x00B2
	MSGDESCENTRY(EM_GETSEL, MT_EM),						// 0x00B0
	MSGDESCENTRY(EM_GETWORDBREAKPROC, MT_EM),			// 0x00D1
	MSGDESCENTRY(EM_LIMITTEXT, MT_EM),					// 0x00C5
	MSGDESCENTRY(EM_LINEFROMCHAR, MT_EM),				// 0x00C9
	MSGDESCENTRY(EM_LINEINDEX, MT_EM),					// 0x00BB
	MSGDESCENTRY(EM_LINELENGTH, MT_EM),					// 0x00C1
	MSGDESCENTRY(EM_LINESCROLL, MT_EM),					// 0x00B6
	MSGDESCENTRY(EM_REPLACESEL, MT_EM),					// 0x00C2
	MSGDESCENTRY(EM_SCROLL, MT_EM),						// 0x00B5
	MSGDESCENTRY(EM_SCROLLCARET, MT_EM),				// 0x00B7
	MSGDESCENTRY(EM_SETHANDLE, MT_EM),					// 0x00BC
	MSGDESCENTRY(EM_SETMODIFY, MT_EM),					// 0x00B9
	MSGDESCENTRY(EM_SETPASSWORDCHAR, MT_EM),			// 0x00CC
	MSGDESCENTRY(EM_SETREADONLY, MT_EM),				// 0x00CF
	MSGDESCENTRY(EM_SETRECT, MT_EM),					// 0x00B3
	MSGDESCENTRY(EM_SETRECTNP, MT_EM),					// 0x00B4
	MSGDESCENTRY(EM_SETSEL, MT_EM),						// 0x00B1
	MSGDESCENTRY(EM_SETTABSTOPS, MT_EM),				// 0x00CB
	MSGDESCENTRY(EM_SETWORDBREAKPROC, MT_EM),			// 0x00D0
	MSGDESCENTRY(EM_UNDO, MT_EM),						// 0x00C7

#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(HDM_DELETEITEM, MT_HDR),				// WM_USER+
	MSGDESCENTRY(HDM_GETITEM, MT_HDR),					// WM_USER+
	MSGDESCENTRY(HDM_GETITEMCOUNT, MT_HDR),				// WM_USER+
	MSGDESCENTRY(HDM_HITTEST, MT_HDR),					// WM_USER+
	MSGDESCENTRY(HDM_INSERTITEM, MT_HDR),				// WM_USER+
	MSGDESCENTRY(HDM_LAYOUT, MT_HDR),					// WM_USER+
	MSGDESCENTRY(HDM_SETITEM, MT_HDR),					// WM_USER+
#endif	// DISABLE_WIN95_MESSAGES

#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(HKM_GETHOTKEY, MT_HK),					// WM_USER+
	MSGDESCENTRY(HKM_SETHOTKEY, MT_HK),					// WM_USER+
	MSGDESCENTRY(HKM_SETRULES, MT_HK),					// WM_USER+
#endif	// DISABLE_WIN95_MESSAGES

	MSGDESCENTRY(LB_ADDFILE, MT_LB),					// 0x0196
	MSGDESCENTRY(LB_ADDSTRING, MT_LB),					// 0x0180
	MSGDESCENTRY(LB_DELETESTRING, MT_LB),				// 0x0182
	MSGDESCENTRY(LB_DIR, MT_LB),						// 0x018D
	MSGDESCENTRY(LB_FINDSTRING, MT_LB),					// 0x018F
	MSGDESCENTRY(LB_FINDSTRINGEXACT, MT_LB),			// 0x01A2
	MSGDESCENTRY(LB_GETANCHORINDEX, MT_LB),				// 0x019D
	MSGDESCENTRY(LB_GETCARETINDEX, MT_LB),				// 0x019F
	MSGDESCENTRY(LB_GETCOUNT, MT_LB),					// 0x018B
	MSGDESCENTRY(LB_GETCURSEL, MT_LB),					// 0x0188
	MSGDESCENTRY(LB_GETHORIZONTALEXTENT, MT_LB),		// 0x0193
	MSGDESCENTRY(LB_GETITEMDATA, MT_LB),				// 0x0199
	MSGDESCENTRY(LB_GETITEMHEIGHT, MT_LB),				// 0x01A1
	MSGDESCENTRY(LB_GETITEMRECT, MT_LB),				// 0x0198
	MSGDESCENTRY(LB_GETLOCALE, MT_LB),					// 0x01A6
	MSGDESCENTRY(LB_GETSEL, MT_LB),						// 0x0187
	MSGDESCENTRY(LB_GETSELCOUNT, MT_LB),				// 0x0190
	MSGDESCENTRY(LB_GETSELITEMS, MT_LB),				// 0x0191
	MSGDESCENTRY(LB_GETTEXT, MT_LB),					// 0x0189
	MSGDESCENTRY(LB_GETTEXTLEN, MT_LB),					// 0x018A
	MSGDESCENTRY(LB_GETTOPINDEX, MT_LB),				// 0x018E
	MSGDESCENTRY(LB_INSERTSTRING, MT_LB),				// 0x0181
	MSGDESCENTRY(LB_RESETCONTENT, MT_LB),				// 0x0184
	MSGDESCENTRY(LB_SELECTSTRING, MT_LB),				// 0x018C
	MSGDESCENTRY(LB_SELITEMRANGE, MT_LB),				// 0x019B
	MSGDESCENTRY(LB_SELITEMRANGEEX, MT_LB),				// 0x0183
	MSGDESCENTRY(LB_SETANCHORINDEX, MT_LB),				// 0x019C
	MSGDESCENTRY(LB_SETCARETINDEX, MT_LB),				// 0x019E
	MSGDESCENTRY(LB_SETCOLUMNWIDTH, MT_LB),				// 0x0195
	MSGDESCENTRY(LB_SETCOUNT, MT_LB),					// 0x01A7
	MSGDESCENTRY(LB_SETCURSEL, MT_LB),					// 0x0186
	MSGDESCENTRY(LB_SETHORIZONTALEXTENT, MT_LB),		// 0x0194
	MSGDESCENTRY(LB_SETITEMDATA, MT_LB),				// 0x019A
	MSGDESCENTRY(LB_SETITEMHEIGHT, MT_LB),				// 0x01A0
	MSGDESCENTRY(LB_SETLOCALE, MT_LB),					// 0x01A5
	MSGDESCENTRY(LB_SETSEL, MT_LB),						// 0x0185
	MSGDESCENTRY(LB_SETTABSTOPS, MT_LB),				// 0x0192
	MSGDESCENTRY(LB_SETTOPINDEX, MT_LB),				// 0x0197

#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(LVM_ARRANGE, MT_LV),					// WM_USER+
	MSGDESCENTRY(LVM_CREATEDRAGIMAGE, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_DELETEALLITEMS, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_DELETECOLUMN, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_DELETEITEM, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_EDITLABEL, MT_LV),					// WM_USER+
	MSGDESCENTRY(LVM_ENSUREVISIBLE, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_FINDITEM, MT_LV),					// WM_USER+
	MSGDESCENTRY(LVM_GETBKCOLOR, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_GETCALLBACKMASK, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_GETCOLUMN, MT_LV),					// WM_USER+
	MSGDESCENTRY(LVM_GETCOLUMNWIDTH, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_GETCOUNTPERPAGE, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_GETEDITCONTROL, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_GETIMAGELIST, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_GETISEARCHSTRING, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_GETITEM, MT_LV),					// WM_USER+
	MSGDESCENTRY(LVM_GETITEMCOUNT, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_GETITEMPOSITION, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_GETITEMRECT, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_GETITEMSPACING, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_GETITEMSTATE, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_GETITEMTEXT, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_GETNEXTITEM, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_GETORIGIN, MT_LV),					// WM_USER+
	MSGDESCENTRY(LVM_GETSELECTEDCOUNT, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_GETSTRINGWIDTH, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_GETTEXTBKCOLOR, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_GETTEXTCOLOR, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_GETTOPINDEX, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_GETVIEWRECT, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_HITTEST, MT_LV),					// WM_USER+
	MSGDESCENTRY(LVM_INSERTCOLUMN, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_INSERTITEM, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_REDRAWITEMS, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_SCROLL, MT_LV),					// WM_USER+
	MSGDESCENTRY(LVM_SETBKCOLOR, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_SETCALLBACKMASK, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_SETCOLUMN, MT_LV),					// WM_USER+
	MSGDESCENTRY(LVM_SETCOLUMNWIDTH, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_SETIMAGELIST, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_SETITEM, MT_LV),					// WM_USER+
	MSGDESCENTRY(LVM_SETITEMCOUNT, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_SETITEMPOSITION, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_SETITEMPOSITION32, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_SETITEMSTATE, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_SETITEMTEXT, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_SETTEXTBKCOLOR, MT_LV),			// WM_USER+
	MSGDESCENTRY(LVM_SETTEXTCOLOR, MT_LV),				// WM_USER+
	MSGDESCENTRY(LVM_SORTITEMS, MT_LV),					// WM_USER+
	MSGDESCENTRY(LVM_UPDATE, MT_LV),					// WM_USER+
#endif	// DISABLE_WIN95_MESSAGES

#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(PBM_DELTAPOS, MT_PRG),					// WM_USER+
	MSGDESCENTRY(PBM_SETPOS, MT_PRG),					// WM_USER+
	MSGDESCENTRY(PBM_SETRANGE, MT_PRG),					// WM_USER+
	MSGDESCENTRY(PBM_SETSTEP, MT_PRG),					// WM_USER+
	MSGDESCENTRY(PBM_STEPIT, MT_PRG),					// WM_USER+
#endif	// DISABLE_WIN95_MESSAGES

	MSGDESCENTRY(SBM_ENABLE_ARROWS, MT_SBM),			// 0x00E4
	MSGDESCENTRY(SBM_GETPOS, MT_SBM),					// 0x00E1
	MSGDESCENTRY(SBM_GETRANGE, MT_SBM),					// 0x00E3
	MSGDESCENTRY(SBM_SETPOS, MT_SBM),					// 0x00E0
	MSGDESCENTRY(SBM_SETRANGE, MT_SBM),					// 0x00E2
	MSGDESCENTRY(SBM_SETRANGEREDRAW, MT_SBM),			// 0x00E6

#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(SB_GETBORDERS, MT_STB),				// WM_USER+
	MSGDESCENTRY(SB_GETPARTS, MT_STB),					// WM_USER+
	MSGDESCENTRY(SB_GETRECT, MT_STB),					// WM_USER+
	MSGDESCENTRY(SB_GETTEXT, MT_STB),					// WM_USER+
	MSGDESCENTRY(SB_GETTEXTLENGTH, MT_STB),				// WM_USER+
	MSGDESCENTRY(SB_SETMINHEIGHT, MT_STB),				// WM_USER+
	MSGDESCENTRY(SB_SETPARTS, MT_STB),					// WM_USER+
	MSGDESCENTRY(SB_SETTEXT, MT_STB),					// WM_USER+
	MSGDESCENTRY(SB_SIMPLE, MT_STB),					// WM_USER+
#endif	// DISABLE_WIN95_MESSAGES

	MSGDESCENTRY(STM_GETICON, MT_STM),					// 0x0171
	MSGDESCENTRY(STM_SETICON, MT_STM),					// 0x0170

#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(TBM_CLEARSEL, MT_TB),					// WM_USER+
	MSGDESCENTRY(TBM_CLEARTICS, MT_TB),					// WM_USER+
	MSGDESCENTRY(TBM_GETCHANNELRECT, MT_TB),			// WM_USER+
	MSGDESCENTRY(TBM_GETLINESIZE, MT_TB),				// WM_USER+
	MSGDESCENTRY(TBM_GETNUMTICS, MT_TB),				// WM_USER+
	MSGDESCENTRY(TBM_GETPAGESIZE, MT_TB),				// WM_USER+
	MSGDESCENTRY(TBM_GETPOS, MT_TB),					// WM_USER+
	MSGDESCENTRY(TBM_GETPTICS, MT_TB),					// WM_USER+
	MSGDESCENTRY(TBM_GETRANGEMAX, MT_TB),				// WM_USER+
	MSGDESCENTRY(TBM_GETRANGEMIN, MT_TB),				// WM_USER+
	MSGDESCENTRY(TBM_GETSELEND, MT_TB),					// WM_USER+
	MSGDESCENTRY(TBM_GETSELSTART, MT_TB),				// WM_USER+
	MSGDESCENTRY(TBM_GETTHUMBLENGTH, MT_TB),			// WM_USER+
	MSGDESCENTRY(TBM_GETTHUMBRECT, MT_TB),				// WM_USER+
	MSGDESCENTRY(TBM_GETTIC, MT_TB),					// WM_USER+
	MSGDESCENTRY(TBM_GETTICPOS, MT_TB),					// WM_USER+
	MSGDESCENTRY(TBM_SETLINESIZE, MT_TB),				// WM_USER+
	MSGDESCENTRY(TBM_SETPAGESIZE, MT_TB),				// WM_USER+
	MSGDESCENTRY(TBM_SETPOS, MT_TB),					// WM_USER+
	MSGDESCENTRY(TBM_SETRANGE, MT_TB),					// WM_USER+
	MSGDESCENTRY(TBM_SETRANGEMAX, MT_TB),				// WM_USER+
	MSGDESCENTRY(TBM_SETRANGEMIN, MT_TB),				// WM_USER+
	MSGDESCENTRY(TBM_SETSEL, MT_TB),					// WM_USER+
	MSGDESCENTRY(TBM_SETSELEND, MT_TB),					// WM_USER+
	MSGDESCENTRY(TBM_SETSELSTART, MT_TB),				// WM_USER+
	MSGDESCENTRY(TBM_SETTHUMBLENGTH, MT_TB),			// WM_USER+
	MSGDESCENTRY(TBM_SETTIC, MT_TB),					// WM_USER+
	MSGDESCENTRY(TBM_SETTICFREQ, MT_TB),				// WM_USER+
#endif	// DISABLE_WIN95_MESSAGES

#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(TB_ADDBITMAP, MT_TLB),					// WM_USER+
	MSGDESCENTRY(TB_ADDBUTTONS, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_ADDSTRING, MT_TLB),					// WM_USER+
	MSGDESCENTRY(TB_AUTOSIZE, MT_TLB),					// WM_USER+
	MSGDESCENTRY(TB_BUTTONCOUNT, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_BUTTONSTRUCTSIZE, MT_TLB),			// WM_USER+
	MSGDESCENTRY(TB_CHANGEBITMAP, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_CHECKBUTTON, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_COMMANDTOINDEX, MT_TLB),			// WM_USER+
	MSGDESCENTRY(TB_CUSTOMIZE, MT_TLB),					// WM_USER+
	MSGDESCENTRY(TB_DELETEBUTTON, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_ENABLEBUTTON, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_GETBITMAP, MT_TLB),					// WM_USER+
	MSGDESCENTRY(TB_GETBITMAPFLAGS, MT_TLB),			// WM_USER+
	MSGDESCENTRY(TB_GETBUTTON, MT_TLB),					// WM_USER+
	MSGDESCENTRY(TB_GETBUTTONTEXT, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_GETITEMRECT, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_GETROWS, MT_TLB),					// WM_USER+
	MSGDESCENTRY(TB_GETSTATE, MT_TLB),					// WM_USER+
	MSGDESCENTRY(TB_GETTOOLTIPS, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_HIDEBUTTON, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_INDETERMINATE, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_INSERTBUTTON, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_ISBUTTONCHECKED, MT_TLB),			// WM_USER+
	MSGDESCENTRY(TB_ISBUTTONENABLED, MT_TLB),			// WM_USER+
	MSGDESCENTRY(TB_ISBUTTONHIDDEN, MT_TLB),			// WM_USER+
	MSGDESCENTRY(TB_ISBUTTONINDETERMINATE, MT_TLB),		// WM_USER+
	MSGDESCENTRY(TB_ISBUTTONPRESSED, MT_TLB),			// WM_USER+
	MSGDESCENTRY(TB_PRESSBUTTON, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_SAVERESTORE, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_SETBITMAPSIZE, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_SETBUTTONSIZE, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_SETBUTTONTYPE, MT_TLB),				// WM_USER+
	MSGDESCENTRY(TB_SETCMDID, MT_TLB),					// WM_USER+
	MSGDESCENTRY(TB_SETPARENT, MT_TLB),					// WM_USER+
	MSGDESCENTRY(TB_SETROWS, MT_TLB),					// WM_USER+
	MSGDESCENTRY(TB_SETSTATE, MT_TLB),					// WM_USER+
	MSGDESCENTRY(TB_SETTOOLTIPS, MT_TLB),				// WM_USER+
#endif	// DISABLE_WIN95_MESSAGES

#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(TCM_ADJUSTRECT, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_DELETEALLITEMS, MT_TAB),			// WM_USER+
	MSGDESCENTRY(TCM_DELETEITEM, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_GETBKCOLOR, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_GETCURSEL, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_GETCURFOCUS, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_GETIMAGELIST, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_GETITEM, MT_TAB),					// WM_USER+
	MSGDESCENTRY(TCM_GETITEMCOUNT, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_GETITEMRECT, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_GETROWCOUNT, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_GETTOOLTIPS, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_HITTEST, MT_TAB),					// WM_USER+
	MSGDESCENTRY(TCM_INSERTITEM, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_REMOVEIMAGE, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_SETBKCOLOR, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_SETCURSEL, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_SETCURFOCUS, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_SETIMAGELIST, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_SETITEM, MT_TAB),					// WM_USER+
	MSGDESCENTRY(TCM_SETITEMEXTRA, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_SETITEMSIZE, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_SETPADDING, MT_TAB),				// WM_USER+
	MSGDESCENTRY(TCM_SETTOOLTIPS, MT_TAB),				// WM_USER+
#endif	// DISABLE_WIN95_MESSAGES

#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(TTM_ACTIVATE, MT_TT),					// WM_USER+
	MSGDESCENTRY(TTM_ADDTOOL, MT_TT),					// WM_USER+
	MSGDESCENTRY(TTM_DELTOOL, MT_TT),					// WM_USER+
	MSGDESCENTRY(TTM_ENUMTOOLS, MT_TT),					// WM_USER+
	MSGDESCENTRY(TTM_GETCURRENTTOOL, MT_TT),			// WM_USER+
	MSGDESCENTRY(TTM_GETTEXT, MT_TT),					// WM_USER+
	MSGDESCENTRY(TTM_GETTOOLCOUNT, MT_TT),				// WM_USER+
	MSGDESCENTRY(TTM_GETTOOLINFO, MT_TT),				// WM_USER+
	MSGDESCENTRY(TTM_HITTEST, MT_TT),					// WM_USER+
	MSGDESCENTRY(TTM_NEWTOOLRECT, MT_TT),				// WM_USER+
	MSGDESCENTRY(TTM_RELAYEVENT, MT_TT),				// WM_USER+
	MSGDESCENTRY(TTM_SETDELAYTIME, MT_TT),				// WM_USER+
	MSGDESCENTRY(TTM_SETTOOLINFO, MT_TT),				// WM_USER+
	MSGDESCENTRY(TTM_UPDATETIPTEXT, MT_TT),				// WM_USER+
#endif	// DISABLE_WIN95_MESSAGES

#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(TVM_CREATEDRAGIMAGE, MT_TV),			// WM_USER+
	MSGDESCENTRY(TVM_DELETEITEM, MT_TV),				// WM_USER+
	MSGDESCENTRY(TVM_EDITLABEL, MT_TV),					// WM_USER+
	MSGDESCENTRY(TVM_ENDEDITLABELNOW, MT_TV),			// WM_USER+
	MSGDESCENTRY(TVM_ENSUREVISIBLE, MT_TV),				// WM_USER+
	MSGDESCENTRY(TVM_EXPAND, MT_TV),					// WM_USER+
	MSGDESCENTRY(TVM_GETCOUNT, MT_TV),					// WM_USER+
	MSGDESCENTRY(TVM_GETEDITCONTROL, MT_TV),			// WM_USER+
	MSGDESCENTRY(TVM_GETIMAGELIST, MT_TV),				// WM_USER+
	MSGDESCENTRY(TVM_GETINDENT, MT_TV),					// WM_USER+
	MSGDESCENTRY(TVM_GETISEARCHSTRING, MT_TV),			// WM_USER+
	MSGDESCENTRY(TVM_GETITEM, MT_TV),					// WM_USER+
	MSGDESCENTRY(TVM_GETITEMRECT, MT_TV),				// WM_USER+
	MSGDESCENTRY(TVM_GETNEXTITEM, MT_TV),				// WM_USER+
	MSGDESCENTRY(TVM_GETVISIBLECOUNT, MT_TV),			// WM_USER+
	MSGDESCENTRY(TVM_HITTEST, MT_TV),					// WM_USER+
	MSGDESCENTRY(TVM_INSERTITEM, MT_TV),				// WM_USER+
	MSGDESCENTRY(TVM_SELECTITEM, MT_TV),				// WM_USER+
	MSGDESCENTRY(TVM_SETIMAGELIST, MT_TV),				// WM_USER+
	MSGDESCENTRY(TVM_SETINDENT, MT_TV),					// WM_USER+
	MSGDESCENTRY(TVM_SETITEM, MT_TV),					// WM_USER+
	MSGDESCENTRY(TVM_SORTCHILDREN, MT_TV),				// WM_USER+
	MSGDESCENTRY(TVM_SORTCHILDRENCB, MT_TV),			// WM_USER+
#endif	// DISABLE_WIN95_MESSAGES

#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(UDM_GETACCEL, MT_UD),					// WM_USER+
	MSGDESCENTRY(UDM_GETBASE, MT_UD),					// WM_USER+
	MSGDESCENTRY(UDM_GETBUDDY, MT_UD),					// WM_USER+
	MSGDESCENTRY(UDM_GETPOS, MT_UD),					// WM_USER+
	MSGDESCENTRY(UDM_GETRANGE, MT_UD),					// WM_USER+
	MSGDESCENTRY(UDM_SETACCEL, MT_UD),					// WM_USER+
	MSGDESCENTRY(UDM_SETBASE, MT_UD),					// WM_USER+
	MSGDESCENTRY(UDM_SETBUDDY, MT_UD),					// WM_USER+
	MSGDESCENTRY(UDM_SETPOS, MT_UD),					// WM_USER+
	MSGDESCENTRY(UDM_SETRANGE, MT_UD),					// WM_USER+
#endif	// DISABLE_WIN95_MESSAGES

	MSGDESCENTRY(WM_ACTIVATE, MT_MISC),					// 0x0006
	MSGDESCENTRY(WM_ACTIVATEAPP, MT_MISC),				// 0x001C
	MSGDESCENTRY(WM_ASKCBFORMATNAME, MT_CLIP),			// 0x030C
	MSGDESCENTRY(WM_CANCELJOURNAL, MT_MISC),			// 0x004B
	MSGDESCENTRY(WM_CANCELMODE, MT_MISC),				// 0x001F
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_CAPTURECHANGED, MT_MISC),			// 0x0215
#endif
	MSGDESCENTRY(WM_CHANGECBCHAIN, MT_CLIP),			// 0x030D
	MSGDESCENTRY(WM_CHAR, MT_KEYBD),					// 0x0102
	MSGDESCENTRY(WM_CHARTOITEM, MT_KEYBD),				// 0x002F
	MSGDESCENTRY(WM_CHILDACTIVATE, MT_MISC),			// 0x0022
	MSGDESCENTRY(WM_CLEAR, MT_CLIP),					// 0x0303
	MSGDESCENTRY(WM_CLOSE, MT_MISC),					// 0x0010
	MSGDESCENTRY(WM_COMMAND, MT_MISC),					// 0x0111
	MSGDESCENTRY(WM_COMPACTING, MT_MISC),				// 0x0041
	MSGDESCENTRY(WM_COMPAREITEM, MT_MISC),				// 0x0039
	MSGDESCENTRY(WM_CONVERTREQUESTEX, MT_IME),			// 0x0109
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_CONTEXTMENU, MT_MISC),				// 0x007B
#endif
	MSGDESCENTRY(WM_COPY, MT_CLIP),						// 0x0301
	MSGDESCENTRY(WM_COPYDATA, MT_MISC),					// 0x004A
	MSGDESCENTRY(WM_CREATE, MT_MISC),					// 0x0001
	MSGDESCENTRY(WM_CTLCOLORBTN, MT_MISC),				// 0x0135
	MSGDESCENTRY(WM_CTLCOLORDLG, MT_MISC),				// 0x0136
	MSGDESCENTRY(WM_CTLCOLOREDIT, MT_MISC),				// 0x0133
	MSGDESCENTRY(WM_CTLCOLORLISTBOX, MT_MISC),			// 0x0134
	MSGDESCENTRY(WM_CTLCOLORMSGBOX, MT_MISC),			// 0x0132
	MSGDESCENTRY(WM_CTLCOLORSCROLLBAR, MT_MISC),		// 0x0137
	MSGDESCENTRY(WM_CTLCOLORSTATIC, MT_MISC),			// 0x0138
	MSGDESCENTRY(WM_CUT, MT_CLIP),						// 0x0300

	MSGDESCENTRY(WM_DDE_ACK, MT_DDE),					// 0x03E4
	MSGDESCENTRY(WM_DDE_ADVISE, MT_DDE),				// 0x03E2
	MSGDESCENTRY(WM_DDE_DATA, MT_DDE),					// 0x03E5
	MSGDESCENTRY(WM_DDE_EXECUTE, MT_DDE),				// 0x03E8
	MSGDESCENTRY(WM_DDE_INITIATE, MT_DDE),				// 0x03E0
	MSGDESCENTRY(WM_DDE_POKE, MT_DDE),					// 0x03E7
	MSGDESCENTRY(WM_DDE_REQUEST, MT_DDE),				// 0x03E6
	MSGDESCENTRY(WM_DDE_TERMINATE, MT_DDE),				// 0x03E1
	MSGDESCENTRY(WM_DDE_UNADVISE, MT_DDE),				// 0x03E3

	MSGDESCENTRY(WM_DEADCHAR, MT_KEYBD),				// 0x0103
	MSGDESCENTRY(WM_DELETEITEM, MT_MISC),				// 0x002D
	MSGDESCENTRY(WM_DESTROY, MT_MISC),					// 0x0002
	MSGDESCENTRY(WM_DESTROYCLIPBOARD, MT_CLIP),			// 0x0307
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_DEVICECHANGE, MT_MISC),				// 0x0219
#endif
	MSGDESCENTRY(WM_DEVMODECHANGE, MT_MISC),			// 0x001B
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_DISPLAYCHANGE, MT_MISC),			// 0x007E
#endif
	MSGDESCENTRY(WM_DRAWCLIPBOARD, MT_CLIP),			// 0x0308
	MSGDESCENTRY(WM_DRAWITEM, MT_MISC),					// 0x002B
	MSGDESCENTRY(WM_DROPFILES, MT_MISC),				// 0x0233
	MSGDESCENTRY(WM_ENABLE, MT_MISC),					// 0x000A
	MSGDESCENTRY(WM_ENDSESSION, MT_MISC),				// 0x0016
	MSGDESCENTRY(WM_ENTERIDLE, MT_MISC),				// 0x0121
	MSGDESCENTRY(WM_ENTERMENULOOP, MT_MISC),			// 0x0211
	MSGDESCENTRY(WM_ERASEBKGND, MT_MISC),				// 0x0014
	MSGDESCENTRY(WM_EXITMENULOOP, MT_MISC),				// 0x0212
	MSGDESCENTRY(WM_FONTCHANGE, MT_MISC),				// 0x001D
	MSGDESCENTRY(WM_GETDLGCODE, MT_MISC),				// 0x0087
	MSGDESCENTRY(WM_GETFONT, MT_MISC),					// 0x0031
	MSGDESCENTRY(WM_GETHOTKEY, MT_KEYBD),				// 0x0033
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_GETICON, MT_MISC),					// 0x007F
#endif
	MSGDESCENTRY(WM_GETMINMAXINFO, MT_MISC),			// 0x0024
	MSGDESCENTRY(WM_GETTEXT, MT_MISC),					// 0x000D
	MSGDESCENTRY(WM_GETTEXTLENGTH, MT_MISC),			// 0x000E
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_HELP, MT_MISC),						// 0x0053
#endif
	MSGDESCENTRY(WM_HOTKEY, MT_KEYBD),					// 0x0312
	MSGDESCENTRY(WM_HSCROLL, MT_SBM),					// 0x0114
	MSGDESCENTRY(WM_HSCROLLCLIPBOARD, MT_CLIP),			// 0x030E
	MSGDESCENTRY(WM_ICONERASEBKGND, MT_MISC),			// 0x0027

	MSGDESCENTRY(WM_IMEKEYDOWN, MT_IME),				// 0x0290
	MSGDESCENTRY(WM_IMEKEYUP, MT_IME),					// 0x0291
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_IME_CHAR, MT_IME),					// 0x0286
	MSGDESCENTRY(WM_IME_COMPOSITION, MT_IME),			// 0x010F
	MSGDESCENTRY(WM_IME_COMPOSITIONFULL, MT_IME),		// 0x0284
	MSGDESCENTRY(WM_IME_CONTROL, MT_IME),				// 0x0283
	MSGDESCENTRY(WM_IME_ENDCOMPOSITION, MT_IME),		// 0x010E
	MSGDESCENTRY(WM_IME_KEYDOWN, MT_IME),				// 0x0290
	MSGDESCENTRY(WM_IME_KEYUP, MT_IME),					// 0x0291
	MSGDESCENTRY(WM_IME_NOTIFY, MT_IME),				// 0x0282
#endif
	MSGDESCENTRY(WM_IME_REPORT, MT_IME),				// 0x0280
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_IME_SELECT, MT_IME),				// 0x0285
	MSGDESCENTRY(WM_IME_SETCONTEXT, MT_IME),			// 0x0281
	MSGDESCENTRY(WM_IME_STARTCOMPOSITION, MT_IME),		// 0x010D
#endif
	MSGDESCENTRY(WM_INITDIALOG, MT_MISC),				// 0x0110
	MSGDESCENTRY(WM_INITMENU, MT_MISC),					// 0x0116
	MSGDESCENTRY(WM_INITMENUPOPUP, MT_MISC),			// 0x0117
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_INPUTLANGCHANGE, MT_MISC),			// 0x0051
	MSGDESCENTRY(WM_INPUTLANGCHANGEREQUEST, MT_MISC),	// 0x0050
#endif
	MSGDESCENTRY(WM_KEYDOWN, MT_KEYBD),					// 0x0100
	MSGDESCENTRY(WM_KEYUP, MT_KEYBD),					// 0x0101
	MSGDESCENTRY(WM_KILLFOCUS, MT_MISC),				// 0x0008
	MSGDESCENTRY(WM_LBUTTONDBLCLK, MT_MOUSE),			// 0x0203
	MSGDESCENTRY(WM_LBUTTONDOWN, MT_MOUSE),				// 0x0201
	MSGDESCENTRY(WM_LBUTTONUP, MT_MOUSE),				// 0x0202
	MSGDESCENTRY(WM_MBUTTONDBLCLK, MT_MOUSE),			// 0x0209
	MSGDESCENTRY(WM_MBUTTONDOWN, MT_MOUSE),				// 0x0207
	MSGDESCENTRY(WM_MBUTTONUP, MT_MOUSE),				// 0x0208

	MSGDESCENTRY(WM_MDIACTIVATE, MT_MDI),				// 0x0222
	MSGDESCENTRY(WM_MDICASCADE, MT_MDI),				// 0x0227
	MSGDESCENTRY(WM_MDICREATE, MT_MDI),					// 0x0220
	MSGDESCENTRY(WM_MDIDESTROY, MT_MDI),				// 0x0221
	MSGDESCENTRY(WM_MDIGETACTIVE, MT_MDI),				// 0x0229
	MSGDESCENTRY(WM_MDIICONARRANGE, MT_MDI),			// 0x0228
	MSGDESCENTRY(WM_MDIMAXIMIZE, MT_MDI),				// 0x0225
	MSGDESCENTRY(WM_MDINEXT, MT_MDI),					// 0x0224
	MSGDESCENTRY(WM_MDIREFRESHMENU, MT_MDI),			// 0x0234
	MSGDESCENTRY(WM_MDIRESTORE, MT_MDI),				// 0x0223
	MSGDESCENTRY(WM_MDISETMENU, MT_MDI),				// 0x0230
	MSGDESCENTRY(WM_MDITILE, MT_MDI),					// 0x0226

	MSGDESCENTRY(WM_MEASUREITEM, MT_MISC),				// 0x002C
	MSGDESCENTRY(WM_MENUCHAR, MT_MISC),					// 0x0120
	MSGDESCENTRY(WM_MENUSELECT, MT_MISC),				// 0x011F
	MSGDESCENTRY(WM_MOUSEACTIVATE, MT_MOUSE),			// 0x0021
#endif 	// FEWMESSAGES
	MSGDESCENTRY(WM_MOUSEMOVE, MT_MOUSE),				// 0x0200
#ifndef FEWMESSAGES
	MSGDESCENTRY(WM_MOVE, MT_MISC),						// 0x0003
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_MOVING, MT_MISC),					// 0x0216
#endif
	MSGDESCENTRY(WM_NCACTIVATE, MT_NC),					// 0x0086
	MSGDESCENTRY(WM_NCCALCSIZE, MT_NC),					// 0x0083
	MSGDESCENTRY(WM_NCCREATE, MT_NC),					// 0x0081
	MSGDESCENTRY(WM_NCDESTROY, MT_NC),					// 0x0082
	MSGDESCENTRY(WM_NCHITTEST, MT_NC),					// 0x0084
	MSGDESCENTRY(WM_NCLBUTTONDBLCLK, MT_NC),			// 0x00A3
	MSGDESCENTRY(WM_NCLBUTTONDOWN, MT_NC),				// 0x00A1
	MSGDESCENTRY(WM_NCLBUTTONUP, MT_NC),				// 0x00A2
	MSGDESCENTRY(WM_NCMBUTTONDBLCLK, MT_NC),			// 0x00A9
	MSGDESCENTRY(WM_NCMBUTTONDOWN, MT_NC),				// 0x00A7
	MSGDESCENTRY(WM_NCMBUTTONUP, MT_NC),				// 0x00A8
	MSGDESCENTRY(WM_NCMOUSEMOVE, MT_NC),				// 0x00A0
	MSGDESCENTRY(WM_NCPAINT, MT_NC),					// 0x0085
	MSGDESCENTRY(WM_NCRBUTTONDBLCLK, MT_NC),			// 0x00A6
	MSGDESCENTRY(WM_NCRBUTTONDOWN, MT_NC),				// 0x00A4
	MSGDESCENTRY(WM_NCRBUTTONUP, MT_NC),				// 0x00A5

	MSGDESCENTRY(WM_NEXTDLGCTL, MT_MISC),				// 0x0028
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_NEXTMENU, MT_MISC),					// 0x0213
#endif
	MSGDESCENTRY(WM_NOTIFY, MT_MISC),					// 0x004E
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_NOTIFYFORMAT, MT_MISC),				// 0x0055
#endif
	MSGDESCENTRY(WM_NULL, MT_MISC),						// 0x0000
	MSGDESCENTRY(WM_PAINT, MT_MISC),					// 0x000F
	MSGDESCENTRY(WM_PAINTCLIPBOARD, MT_CLIP),			// 0x0309
	MSGDESCENTRY(WM_PAINTICON, MT_MISC),				// 0x0026
	MSGDESCENTRY(WM_PALETTECHANGED, MT_MISC),			// 0x0311
	MSGDESCENTRY(WM_PALETTEISCHANGING, MT_MISC),		// 0x0310
	MSGDESCENTRY(WM_PARENTNOTIFY, MT_MOUSE),			// 0x0210
	MSGDESCENTRY(WM_PASTE, MT_CLIP),					// 0x0302
	MSGDESCENTRY(WM_POWER, MT_MISC),					// 0x0048
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_POWERBROADCAST, MT_MISC),			// 0x0218
	MSGDESCENTRY(WM_PRINT, MT_MISC),					// 0x0317
	MSGDESCENTRY(WM_PRINTCLIENT, MT_MISC),				// 0x0318
#endif
	MSGDESCENTRY(WM_QUERYDRAGICON, MT_MISC),			// 0x0037
	MSGDESCENTRY(WM_QUERYENDSESSION, MT_MISC),			// 0x0011
	MSGDESCENTRY(WM_QUERYNEWPALETTE, MT_MISC),			// 0x030F
	MSGDESCENTRY(WM_QUERYOPEN, MT_MISC),				// 0x0013
	MSGDESCENTRY(WM_QUEUESYNC, MT_MISC),				// 0x0023
	MSGDESCENTRY(WM_QUIT, MT_MISC),						// 0x0012
	MSGDESCENTRY(WM_RBUTTONDBLCLK, MT_MOUSE),			// 0x0206
	MSGDESCENTRY(WM_RBUTTONDOWN, MT_MOUSE),				// 0x0204
	MSGDESCENTRY(WM_RBUTTONUP, MT_MOUSE),				// 0x0205
	MSGDESCENTRY(WM_RENDERALLFORMATS, MT_CLIP),			// 0x0306
	MSGDESCENTRY(WM_RENDERFORMAT, MT_CLIP),				// 0x0305
	MSGDESCENTRY(WM_SETCURSOR, MT_MOUSE),				// 0x0020
	MSGDESCENTRY(WM_SETFOCUS, MT_MISC),					// 0x0007
	MSGDESCENTRY(WM_SETFONT, MT_MISC),					// 0x0030
	MSGDESCENTRY(WM_SETHOTKEY, MT_KEYBD),				// 0x0032
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_SETICON, MT_MISC),					// 0x0080
#endif
	MSGDESCENTRY(WM_SETREDRAW, MT_MISC),				// 0x000B
	MSGDESCENTRY(WM_SETTEXT, MT_MISC),					// 0x000C
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_SETTINGCHANGE, MT_MISC),			// 0x001A
#endif
	MSGDESCENTRY(WM_SHOWWINDOW, MT_MISC),				// 0x0018
	MSGDESCENTRY(WM_SIZE, MT_MISC),						// 0x0005
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_SIZING, MT_MISC),					// 0x0214
#endif
	MSGDESCENTRY(WM_SIZECLIPBOARD, MT_CLIP),			// 0x030B
	MSGDESCENTRY(WM_SPOOLERSTATUS, MT_MISC),			// 0x002A
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_STYLECHANGED, MT_MISC),				// 0x007D
	MSGDESCENTRY(WM_STYLECHANGING, MT_MISC),			// 0x007C
#endif
	MSGDESCENTRY(WM_SYSCHAR, MT_KEYBD),					// 0x0106
	MSGDESCENTRY(WM_SYSCOLORCHANGE, MT_MISC),			// 0x0015
	MSGDESCENTRY(WM_SYSCOMMAND, MT_MISC),				// 0x0112
	MSGDESCENTRY(WM_SYSDEADCHAR, MT_KEYBD),				// 0x0107
	MSGDESCENTRY(WM_SYSKEYDOWN, MT_KEYBD),				// 0x0104
	MSGDESCENTRY(WM_SYSKEYUP, MT_KEYBD),				// 0x0105
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_TCARD, MT_MISC),					// 0x0052
#endif
	MSGDESCENTRY(WM_TIMECHANGE, MT_MISC),				// 0x001E
	MSGDESCENTRY(WM_TIMER, MT_MISC),					// 0x0113
	MSGDESCENTRY(WM_UNDO, MT_CLIP),						// 0x0304
#ifndef DISABLE_WIN95_MESSAGES
	MSGDESCENTRY(WM_USERCHANGED, MT_MISC),				// 0x0054
#endif
	MSGDESCENTRY(WM_VKEYTOITEM, MT_KEYBD),				// 0x002E
	MSGDESCENTRY(WM_VSCROLL, MT_SBM),					// 0x0115
	MSGDESCENTRY(WM_VSCROLLCLIPBOARD, MT_CLIP),			// 0x030A
	MSGDESCENTRY(WM_WINDOWPOSCHANGED, MT_MISC),			// 0x0047
	MSGDESCENTRY(WM_WINDOWPOSCHANGING, MT_MISC),		// 0x0046
	MSGDESCENTRY(WM_WININICHANGE, MT_MISC)			  	// 0x001A
#endif 	//FEWMESSAGES
};

int CMsgDoc::m_cMsgs = sizeof(CMsgDoc::m_aMsgDesc) / sizeof(MSGDESC);
int CMsgDoc::m_iInitialTab = -1;



//-----------------------------------------------------------------------------
// CMsgDoc::InitStaticData
//-----------------------------------------------------------------------------

void CMsgDoc::InitStaticData(HKEY hkey)
{
	INT i;
	BYTE abMsgs[128];
	BYTE abDlgMsgs[MAX_DLG_MESSAGES/sizeof(BYTE)+1];
#ifndef DISABLE_WIN95_MESSAGES
	BYTE abAniMsgs[MAX_ANI_MESSAGES/sizeof(BYTE)+1];
	BYTE abHdrMsgs[MAX_HDR_MESSAGES/sizeof(BYTE)+1];
	BYTE abTBMsgs[MAX_TB_MESSAGES/sizeof(BYTE)+1];
	BYTE abTTMsgs[MAX_TT_MESSAGES/sizeof(BYTE)+1];
	BYTE abStatMsgs[MAX_STAT_MESSAGES/sizeof(BYTE)+1];
	BYTE abTrkMsgs[MAX_TRK_MESSAGES/sizeof(BYTE)+1];
	BYTE abUpDnMsgs[MAX_UD_MESSAGES/sizeof(BYTE)+1];
	BYTE abProgMsgs[MAX_PROG_MESSAGES/sizeof(BYTE)+1];
	BYTE abHKMsgs[MAX_HK_MESSAGES/sizeof(BYTE)+1];
	BYTE abLVMsgs[MAX_LV_MESSAGES/sizeof(BYTE)+1];
	BYTE abTVMsgs[MAX_TV_MESSAGES/sizeof(BYTE)+1];
	BYTE abTabMsgs[MAX_TAB_MESSAGES/sizeof(BYTE)+1];
#endif	// DISABLE_WIN95_MESSAGES
	DWORD cbData;
	DWORD dwType;
	DWORD fFlags;
	INT cLinesMax;
	CHAR szFile[_MAX_PATH];

	for (i = 0; i < m_cMsgs; i++)
	{
		//
		// Set the appropriate message descriptor lookup table entry.
		//
		if (m_aMsgDesc[i].msg >= 0 && m_aMsgDesc[i].msg < WM_USER)
			m_apmdLT[m_aMsgDesc[i].msg] = &m_aMsgDesc[i];
		else if (m_aMsgDesc[i].iMsgType == MT_DLG && m_aMsgDesc[i].msg >= WM_USER)
			m_apmdDlgLT[m_aMsgDesc[i].msg - WM_USER] = &m_aMsgDesc[i];
#ifndef DISABLE_WIN95_MESSAGES
		else if (m_aMsgDesc[i].iMsgType == MT_ANI && m_aMsgDesc[i].msg >= (WM_USER+100))
			m_apmdAniLT[m_aMsgDesc[i].msg - (WM_USER+100)] = &m_aMsgDesc[i];
		else if (m_aMsgDesc[i].iMsgType == MT_HDR && m_aMsgDesc[i].msg >= HDM_FIRST)
			m_apmdHdrLT[m_aMsgDesc[i].msg - HDM_FIRST] = &m_aMsgDesc[i];
		else if (m_aMsgDesc[i].iMsgType == MT_HK && m_aMsgDesc[i].msg >= (WM_USER+1))
			m_apmdHKLT[m_aMsgDesc[i].msg - (WM_USER+1)] = &m_aMsgDesc[i];
		else if (m_aMsgDesc[i].iMsgType == MT_LV && m_aMsgDesc[i].msg >= LVM_FIRST)
			m_apmdLVLT[m_aMsgDesc[i].msg - LVM_FIRST] = &m_aMsgDesc[i];
		else if (m_aMsgDesc[i].iMsgType == MT_PRG && m_aMsgDesc[i].msg >= (WM_USER+1))
			m_apmdProgLT[m_aMsgDesc[i].msg - (WM_USER+1)] = &m_aMsgDesc[i];
		else if (m_aMsgDesc[i].iMsgType == MT_STB && m_aMsgDesc[i].msg >= (WM_USER+1))
			m_apmdStatLT[m_aMsgDesc[i].msg - (WM_USER+1)] = &m_aMsgDesc[i];
		else if (m_aMsgDesc[i].iMsgType == MT_TB && m_aMsgDesc[i].msg >= WM_USER)
			m_apmdTrkLT[m_aMsgDesc[i].msg - WM_USER] = &m_aMsgDesc[i];
		else if (m_aMsgDesc[i].iMsgType == MT_TLB && m_aMsgDesc[i].msg >= (WM_USER+1))
			m_apmdTBLT[m_aMsgDesc[i].msg - (WM_USER+1)] = &m_aMsgDesc[i];
		else if (m_aMsgDesc[i].iMsgType == MT_TAB && m_aMsgDesc[i].msg >= TCM_FIRST)
			m_apmdTabLT[m_aMsgDesc[i].msg - TCM_FIRST] = &m_aMsgDesc[i];
		else if (m_aMsgDesc[i].iMsgType == MT_TT && m_aMsgDesc[i].msg >= (WM_USER+1))
			m_apmdTTLT[m_aMsgDesc[i].msg - (WM_USER+1)] = &m_aMsgDesc[i];
		else if (m_aMsgDesc[i].iMsgType == MT_TV && m_aMsgDesc[i].msg >= TV_FIRST)
			m_apmdTVLT[m_aMsgDesc[i].msg - TV_FIRST] = &m_aMsgDesc[i];
		else if (m_aMsgDesc[i].iMsgType == MT_UD && m_aMsgDesc[i].msg >= (WM_USER+101))
			m_apmdUpDnLT[m_aMsgDesc[i].msg - (WM_USER+101)] = &m_aMsgDesc[i];
#endif	// DISABLE_WIN95_MESSAGES
	}

	cbData = sizeof(abMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyMsgFiltersMask, NULL, &dwType, abMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_MESSAGES; i++)
		{
			if (abMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afSelectedDef[i] = TRUE;
		}
	}
	else
	{
		//
		// Select all messages by default
		//
		for (i = 0; i < MAX_MESSAGES; i++)
			m_afSelectedDef[i] = TRUE;
	}

	cbData = sizeof(abDlgMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyDlgMsgFiltersMask, NULL, &dwType, abDlgMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_DLG_MESSAGES; i++)
		{
			if (abDlgMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afDlgSelectedDef[i] = TRUE;
		}
	}
	else
	{
		for (i = 0; i < MAX_DLG_MESSAGES; i++)
			m_afDlgSelectedDef[i] = TRUE;
	}

#ifndef DISABLE_WIN95_MESSAGES
	cbData = sizeof(abAniMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyAniMsgFiltersMask, NULL, &dwType, abAniMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_ANI_MESSAGES; i++)
		{
			if (abAniMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afAniSelectedDef[i] = TRUE;
		}
	}
	else
	{
		for (i = 0; i < MAX_ANI_MESSAGES; i++)
			m_afAniSelectedDef[i] = TRUE;
	}

	cbData = sizeof(abHdrMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyHdrMsgFiltersMask, NULL, &dwType, abHdrMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_HDR_MESSAGES; i++)
		{
			if (abHdrMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afHdrSelectedDef[i] = TRUE;
		}
	}
	else
	{
		for (i = 0; i < MAX_HDR_MESSAGES; i++)
			m_afHdrSelectedDef[i] = TRUE;
	}

	cbData = sizeof(abTBMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyTBMsgFiltersMask, NULL, &dwType, abTBMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_TB_MESSAGES; i++)
		{
			if (abTBMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afTBSelectedDef[i] = TRUE;
		}
	}
	else
	{
		for (i = 0; i < MAX_TB_MESSAGES; i++)
			m_afTBSelectedDef[i] = TRUE;
	}

	cbData = sizeof(abTTMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyTTMsgFiltersMask, NULL, &dwType, abTTMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_TT_MESSAGES; i++)
		{
			if (abTTMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afTTSelectedDef[i] = TRUE;
		}
	}
	else
	{
		for (i = 0; i < MAX_TT_MESSAGES; i++)
			m_afTTSelectedDef[i] = TRUE;
	}

	cbData = sizeof(abStatMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyStatMsgFiltersMask, NULL, &dwType, abStatMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_STAT_MESSAGES; i++)
		{
			if (abStatMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afStatSelectedDef[i] = TRUE;
		}
	}
	else
	{
		for (i = 0; i < MAX_STAT_MESSAGES; i++)
			m_afStatSelectedDef[i] = TRUE;
	}

	cbData = sizeof(abTrkMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyTrkMsgFiltersMask, NULL, &dwType, abTrkMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_TRK_MESSAGES; i++)
		{
			if (abTrkMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afTrkSelectedDef[i] = TRUE;
		}
	}
	else
	{
		for (i = 0; i < MAX_TRK_MESSAGES; i++)
			m_afTrkSelectedDef[i] = TRUE;
	}

	cbData = sizeof(abUpDnMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyUpDnMsgFiltersMask, NULL, &dwType, abUpDnMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_UD_MESSAGES; i++)
		{
			if (abUpDnMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afUpDnSelectedDef[i] = TRUE;
		}
	}
	else
	{
		for (i = 0; i < MAX_UD_MESSAGES; i++)
			m_afUpDnSelectedDef[i] = TRUE;
	}

	cbData = sizeof(abProgMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyProgMsgFiltersMask, NULL, &dwType, abProgMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_PROG_MESSAGES; i++)
		{
			if (abProgMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afProgSelectedDef[i] = TRUE;
		}
	}
	else
	{
		for (i = 0; i < MAX_PROG_MESSAGES; i++)
			m_afProgSelectedDef[i] = TRUE;
	}

	cbData = sizeof(abHKMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyHKMsgFiltersMask, NULL, &dwType, abHKMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_HK_MESSAGES; i++)
		{
			if (abHKMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afHKSelectedDef[i] = TRUE;
		}
	}
	else
	{
		for (i = 0; i < MAX_HK_MESSAGES; i++)
			m_afHKSelectedDef[i] = TRUE;
	}

	cbData = sizeof(abLVMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyLVMsgFiltersMask, NULL, &dwType, abLVMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_LV_MESSAGES; i++)
		{
			if (abLVMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afLVSelectedDef[i] = TRUE;
		}
	}
	else
	{
		for (i = 0; i < MAX_LV_MESSAGES; i++)
			m_afLVSelectedDef[i] = TRUE;
	}

	cbData = sizeof(abTVMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyTVMsgFiltersMask, NULL, &dwType, abTVMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_TV_MESSAGES; i++)
		{
			if (abTVMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afTVSelectedDef[i] = TRUE;
		}
	}
	else
	{
		for (i = 0; i < MAX_TV_MESSAGES; i++)
			m_afTVSelectedDef[i] = TRUE;
	}

	cbData = sizeof(abTabMsgs);
	if (hkey && RegQueryValueEx(hkey, m_szKeyTabMsgFiltersMask, NULL, &dwType, abTabMsgs, &cbData) == ERROR_SUCCESS)
	{
		for (i = 0; i < MAX_TAB_MESSAGES; i++)
		{
			if (abTabMsgs[(UINT)i >> 3] & m_BitTable[i & 0x07])
				m_afTabSelectedDef[i] = TRUE;
		}
	}
	else
	{
		for (i = 0; i < MAX_TAB_MESSAGES; i++)
			m_afTabSelectedDef[i] = TRUE;
	}
#endif	// DISABLE_WIN95_MESSAGES

	cbData = sizeof(DWORD);
	if (hkey && RegQueryValueEx(hkey, m_szKeyMsgFilters, NULL, &dwType, (LPBYTE)&fFlags, &cbData) == ERROR_SUCCESS)
	{
		if (fFlags & REGFLAG_MSGFILTERS_USER)
			m_fMsgsUserDef = TRUE;

		if (fFlags & REGFLAG_MSGFILTERS_REGISTERED)
			m_fMsgsRegisteredDef = TRUE;

		if (fFlags & REGFLAG_MSGFILTERS_UNDOCUMENTED)
			m_fMsgsUndocumentedDef = TRUE;
	}
	else
	{
		//
		// Select all messages by default
		//
		m_fMsgsUserDef = TRUE;
		m_fMsgsRegisteredDef = TRUE;
		m_fMsgsUndocumentedDef = TRUE;
	}

	cbData = sizeof(DWORD);
	if (hkey && RegQueryValueEx(hkey, m_szKeyWinFilters, NULL, &dwType, (LPBYTE)&fFlags, &cbData) == ERROR_SUCCESS)
	{
		if (fFlags & REGFLAG_WINFILTERS_INCPARENT)
			m_fIncludeParentDef = TRUE;

		if (fFlags & REGFLAG_WINFILTERS_INCCHILDREN)
			m_fIncludeChildrenDef = TRUE;

		if (fFlags & REGFLAG_WINFILTERS_INCPROCESS)
			m_fIncludeProcessDef = TRUE;

		if (fFlags & REGFLAG_WINFILTERS_INCTHREAD)
			m_fIncludeThreadDef = TRUE;
	}
	else
	{
		//
		// Initial default is to only show the specified window
		//
		m_fIncludeParentDef = FALSE;
		m_fIncludeChildrenDef = FALSE;
		m_fIncludeProcessDef = FALSE;
		m_fIncludeThreadDef = FALSE;
	}

	cbData = sizeof(DWORD);
	if (hkey && RegQueryValueEx(hkey, m_szKeyOutputFilters, NULL, &dwType, (LPBYTE)&fFlags, &cbData) == ERROR_SUCCESS)
	{
		if (fFlags & REGFLAG_OUTPUTFILTERS_NESTLEVEL)
			m_fShowNestingLevelDef = TRUE;

		if (fFlags & REGFLAG_OUTPUTFILTERS_RAWPARM)
			m_fShowRawParmsDef = TRUE;

		if (fFlags & REGFLAG_OUTPUTFILTERS_DECODEPARM)
			m_fShowDecodedParmsDef = TRUE;

		if (fFlags & REGFLAG_OUTPUTFILTERS_RAWRET)
			m_fShowRawReturnDef = TRUE;

		if (fFlags & REGFLAG_OUTPUTFILTERS_DECODERET)
			m_fShowDecodedReturnDef = TRUE;

		if (fFlags & REGFLAG_OUTPUTFILTERS_SHOWTIME)
			m_fShowOriginTimeDef = TRUE;

		if (fFlags & REGFLAG_OUTPUTFILTERS_SHOWMOUSEPOS)
			m_fShowMousePositionDef = TRUE;

		if (fFlags & REGFLAG_OUTPUTFILTERS_LOGTOFILE)
			m_fLogToFileDef = TRUE;

		if (fFlags & REGFLAG_OUTPUTFILTERS_APPENDFILE)
			m_fAppendFileDef = TRUE;
	}
	else
	{
		//
		// Default is to show nesting levels, decoded parms and return value.
		//
		m_fShowNestingLevelDef = TRUE;
		m_fShowRawParmsDef = FALSE;
		m_fShowDecodedParmsDef = TRUE;
		m_fShowRawReturnDef = FALSE;
		m_fShowDecodedReturnDef = TRUE;
		m_fShowOriginTimeDef = FALSE;
		m_fShowMousePositionDef = FALSE;
		m_fLogToFileDef = FALSE;
		m_fAppendFileDef = TRUE;
	}

	cbData = sizeof(szFile);
	if ((hkey && RegQueryValueEx(hkey, m_szKeyOutputLogFile, NULL, &dwType, (LPBYTE)szFile, &cbData) == ERROR_SUCCESS) && (cbData > 0))
	{
		// make sure string is zero-terminated in correct place...
		szFile[cbData] = 0;
		m_strLogFileNameDef = szFile;
	}
	else
		m_strLogFileNameDef = "";

	cbData = sizeof(INT);
	if (hkey && RegQueryValueEx(hkey, m_szKeyLines, NULL, &dwType, (LPBYTE)&cLinesMax, &cbData) == ERROR_SUCCESS
		&& cLinesMax <= MAXLINESMAX && cLinesMax > 0)
	{
		m_cLinesMaxDef = cLinesMax;
	}
	else
	{
		m_cLinesMaxDef = MAXLINESDEFAULT;
	}
}



void CMsgDoc::SaveSettings(HKEY hkey)
{
	int i;
	BYTE abMsgs[128];
	BYTE abDlgMsgs[MAX_DLG_MESSAGES/sizeof(BYTE)+1];
#ifndef DISABLE_WIN95_MESSAGES
	BYTE abAniMsgs[MAX_ANI_MESSAGES/sizeof(BYTE)+1];
	BYTE abHdrMsgs[MAX_HDR_MESSAGES/sizeof(BYTE)+1];
	BYTE abTBMsgs[MAX_TB_MESSAGES/sizeof(BYTE)+1];
	BYTE abTTMsgs[MAX_TT_MESSAGES/sizeof(BYTE)+1];
	BYTE abStatMsgs[MAX_STAT_MESSAGES/sizeof(BYTE)+1];
	BYTE abTrkMsgs[MAX_TRK_MESSAGES/sizeof(BYTE)+1];
	BYTE abUpDnMsgs[MAX_UD_MESSAGES/sizeof(BYTE)+1];
	BYTE abProgMsgs[MAX_PROG_MESSAGES/sizeof(BYTE)+1];
	BYTE abHKMsgs[MAX_HK_MESSAGES/sizeof(BYTE)+1];
	BYTE abLVMsgs[MAX_LV_MESSAGES/sizeof(BYTE)+1];
	BYTE abTVMsgs[MAX_TV_MESSAGES/sizeof(BYTE)+1];
	BYTE abTabMsgs[MAX_TAB_MESSAGES/sizeof(BYTE)+1];
#endif	// DISABLE_WIN95_MESSAGES
	DWORD fFlags;

	memset(abMsgs, 0, sizeof(abMsgs));
	for (i = 0; i < MAX_MESSAGES; i++)
	{
		if (m_afSelectedDef[i] == TRUE)
			abMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abMsgs, sizeof(abMsgs));

	memset(abDlgMsgs, 0, sizeof(abDlgMsgs));
	for (i = 0; i < MAX_DLG_MESSAGES; i++)
	{
		if (m_afDlgSelectedDef[i] == TRUE)
			abDlgMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyDlgMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abDlgMsgs, sizeof(abDlgMsgs));

#ifndef DISABLE_WIN95_MESSAGES
	memset(abAniMsgs, 0, sizeof(abAniMsgs));
	for (i = 0; i < MAX_ANI_MESSAGES; i++)
	{
		if (m_afAniSelectedDef[i] == TRUE)
			abAniMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyAniMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abAniMsgs, sizeof(abAniMsgs));

	memset(abHdrMsgs, 0, sizeof(abHdrMsgs));
	for (i = 0; i < MAX_HDR_MESSAGES; i++)
	{
		if (m_afHdrSelectedDef[i] == TRUE)
			abHdrMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyHdrMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abHdrMsgs, sizeof(abHdrMsgs));

	memset(abTBMsgs, 0, sizeof(abTBMsgs));
	for (i = 0; i < MAX_TB_MESSAGES; i++)
	{
		if (m_afTBSelectedDef[i] == TRUE)
			abTBMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyTBMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abTBMsgs, sizeof(abTBMsgs));

	memset(abTTMsgs, 0, sizeof(abTTMsgs));
	for (i = 0; i < MAX_TT_MESSAGES; i++)
	{
		if (m_afTTSelectedDef[i] == TRUE)
			abTTMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyTTMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abTTMsgs, sizeof(abTTMsgs));

	memset(abStatMsgs, 0, sizeof(abStatMsgs));
	for (i = 0; i < MAX_STAT_MESSAGES; i++)
	{
		if (m_afStatSelectedDef[i] == TRUE)
			abStatMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyStatMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abStatMsgs, sizeof(abStatMsgs));

	memset(abTrkMsgs, 0, sizeof(abTrkMsgs));
	for (i = 0; i < MAX_TRK_MESSAGES; i++)
	{
		if (m_afTrkSelectedDef[i] == TRUE)
			abTrkMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyTrkMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abTrkMsgs, sizeof(abTrkMsgs));

	memset(abUpDnMsgs, 0, sizeof(abUpDnMsgs));
	for (i = 0; i < MAX_UD_MESSAGES; i++)
	{
		if (m_afUpDnSelectedDef[i] == TRUE)
			abUpDnMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyUpDnMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abUpDnMsgs, sizeof(abUpDnMsgs));

	memset(abProgMsgs, 0, sizeof(abProgMsgs));
	for (i = 0; i < MAX_PROG_MESSAGES; i++)
	{
		if (m_afProgSelectedDef[i] == TRUE)
			abProgMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyProgMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abProgMsgs, sizeof(abProgMsgs));

	memset(abHKMsgs, 0, sizeof(abHKMsgs));
	for (i = 0; i < MAX_HK_MESSAGES; i++)
	{
		if (m_afHKSelectedDef[i] == TRUE)
			abHKMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyHKMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abHKMsgs, sizeof(abHKMsgs));

	memset(abLVMsgs, 0, sizeof(abLVMsgs));
	for (i = 0; i < MAX_LV_MESSAGES; i++)
	{
		if (m_afLVSelectedDef[i] == TRUE)
			abLVMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyLVMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abLVMsgs, sizeof(abLVMsgs));

	memset(abTVMsgs, 0, sizeof(abTVMsgs));
	for (i = 0; i < MAX_TV_MESSAGES; i++)
	{
		if (m_afTVSelectedDef[i] == TRUE)
			abTVMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyTVMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abTVMsgs, sizeof(abTVMsgs));

	memset(abTabMsgs, 0, sizeof(abTabMsgs));
	for (i = 0; i < MAX_TAB_MESSAGES; i++)
	{
		if (m_afTabSelectedDef[i] == TRUE)
			abTabMsgs[(UINT)i >> 3] |= m_BitTable[i & 0x07];
	}

	RegSetValueEx(hkey, m_szKeyTabMsgFiltersMask, 0, REG_BINARY, (LPBYTE)abTabMsgs, sizeof(abTabMsgs));
#endif	// DISABLE_WIN95_MESSAGES

	fFlags = 0;
	if (m_fMsgsUserDef)
		fFlags |= REGFLAG_MSGFILTERS_USER;
	if (m_fMsgsRegisteredDef)
		fFlags |= REGFLAG_MSGFILTERS_REGISTERED;
	if (m_fMsgsUndocumentedDef)
		fFlags |= REGFLAG_MSGFILTERS_UNDOCUMENTED;
	RegSetValueEx(hkey, m_szKeyMsgFilters, 0, REG_DWORD, (LPBYTE)&fFlags, sizeof(DWORD));

	fFlags = 0;
	if (m_fIncludeParentDef)
		fFlags |= REGFLAG_WINFILTERS_INCPARENT;
	if (m_fIncludeChildrenDef)
		fFlags |= REGFLAG_WINFILTERS_INCCHILDREN;
	if (m_fIncludeProcessDef)
		fFlags |= REGFLAG_WINFILTERS_INCPROCESS;
	if (m_fIncludeThreadDef)
		fFlags |= REGFLAG_WINFILTERS_INCTHREAD;
	RegSetValueEx(hkey, m_szKeyWinFilters, 0, REG_DWORD, (LPBYTE)&fFlags, sizeof(DWORD));

	fFlags = 0;
	if (m_fShowNestingLevelDef)
		fFlags |= REGFLAG_OUTPUTFILTERS_NESTLEVEL;
	if (m_fShowRawParmsDef)
		fFlags |= REGFLAG_OUTPUTFILTERS_RAWPARM;
	if (m_fShowDecodedParmsDef)
		fFlags |= REGFLAG_OUTPUTFILTERS_DECODEPARM;
	if (m_fShowRawReturnDef)
		fFlags |= REGFLAG_OUTPUTFILTERS_RAWRET;
	if (m_fShowDecodedReturnDef)
		fFlags |= REGFLAG_OUTPUTFILTERS_DECODERET;
	if (m_fShowOriginTimeDef)
		fFlags |= REGFLAG_OUTPUTFILTERS_SHOWTIME;
	if (m_fShowMousePositionDef)
		fFlags |= REGFLAG_OUTPUTFILTERS_SHOWMOUSEPOS;
	if (m_fLogToFileDef)
		fFlags |= REGFLAG_OUTPUTFILTERS_LOGTOFILE;
	if (m_fAppendFileDef)
		fFlags |= REGFLAG_OUTPUTFILTERS_APPENDFILE;
	RegSetValueEx(hkey, m_szKeyOutputFilters, 0, REG_DWORD, (LPBYTE)&fFlags, sizeof(DWORD));

	RegSetValueEx(hkey, m_szKeyOutputLogFile, 0, REG_SZ, (LPBYTE)(LPCTSTR)m_strLogFileNameDef, m_strLogFileNameDef.GetLength());

	RegSetValueEx(hkey, m_szKeyLines, 0, REG_DWORD, (LPBYTE)&m_cLinesMaxDef, sizeof(DWORD));
}
