; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	..\alist.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_02BGAOHDMM@?$CBp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT ?GetCount@AListItem@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Cat@AListItem@@QAEPAV1@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@AListItem@@QAEPAV1@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPrev@AListItem@@QBEPAV1@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItem@AListItem@@QAEPAV1@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertBefore@AList@@QAEXPAVAListItem@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddTail@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@AList@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsMember@AList@@QAEHPAVAListItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@ULyricInfo@@@@QBEPAV?$TListItem@ULyricInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@ULyricInfo@@@@QAEXPAV?$TListItem@ULyricInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@ULyricInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@ULyricInfo@@@@QAEAAULyricInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@UTriggerInfo@@@@SGHAAUTriggerInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@ULyricInfo@@@@SGHAAULyricInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@ULyricInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEAAV01@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UTriggerInfo@@@@QAEXP6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@ULyricInfo@@@@QAEXP6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_SEQ_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_CURVE_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@_J@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UObjectInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ObjectInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UTriggerInfo@@@@QAEPAV1@P6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@ULyricInfo@@@@QAEPAV1@P6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UTriggerInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UTriggerInfo@@@@AAEPAV1@PAV1@P6GHAAUTriggerInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@ULyricInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@ULyricInfo@@@@AAEPAV1@PAV1@P6GHAAULyricInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UParamInfo@CParamControlTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UParamInfo@CParamControlTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ParamInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WaveItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WString@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WString@SmartRef@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@ULyricInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@ULyricInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UTriggerInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddTail@AListItem@@QAEPAV1@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPrev@AList@@QBEPAVAListItem@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?GetCount@AListItem@@QBEJXZ			; AListItem::GetCount
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\alist.cpp
;	COMDAT ?GetCount@AListItem@@QBEJXZ
_TEXT	SEGMENT
_this$ = -12
_l$ = -8
_li$ = -4
?GetCount@AListItem@@QBEJXZ PROC NEAR			; AListItem::GetCount, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 9    :     LONG l;
; 10   :     const AListItem *li;
; 11   : 
; 12   :     for(l=0,li=this; li!=NULL ; li=li->m_pNext,++l);

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _l$[ebp], 0
  00010	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00013	89 45 fc	 mov	 DWORD PTR _li$[ebp], eax
  00016	eb 11		 jmp	 SHORT $L69422
$L69423:
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	89 55 fc	 mov	 DWORD PTR _li$[ebp], edx
  00020	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax
$L69422:
  00029	83 7d fc 00	 cmp	 DWORD PTR _li$[ebp], 0
  0002d	74 02		 je	 SHORT $L69424
  0002f	eb e7		 jmp	 SHORT $L69423
$L69424:

; 13   :     return l;

  00031	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]

; 14   : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?GetCount@AListItem@@QBEJXZ ENDP			; AListItem::GetCount
_TEXT	ENDS
PUBLIC	?Cat@AListItem@@QAEPAV1@PAV1@@Z			; AListItem::Cat
; Function compile flags: /Odt
;	COMDAT ?Cat@AListItem@@QAEPAV1@PAV1@@Z
_TEXT	SEGMENT
_this$ = -8
_li$ = -4
_pItem$ = 8
?Cat@AListItem@@QAEPAV1@PAV1@@Z PROC NEAR		; AListItem::Cat, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 18   :     AListItem *li;
; 19   : 
; 20   :     if(this==NULL)

  00009	83 7d f8 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 05		 jne	 SHORT $L69430

; 21   :         return pItem;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00012	eb 25		 jmp	 SHORT $L69428
$L69430:

; 22   :     for(li=this ; li->m_pNext!=NULL ; li=li->m_pNext);

  00014	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00017	89 45 fc	 mov	 DWORD PTR _li$[ebp], eax
  0001a	eb 08		 jmp	 SHORT $L69431
$L69432:
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	89 55 fc	 mov	 DWORD PTR _li$[ebp], edx
$L69431:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _li$[ebp]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	74 02		 je	 SHORT $L69433
  0002c	eb ee		 jmp	 SHORT $L69432
$L69433:

; 23   :     li->m_pNext=pItem;

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  00031	8b 55 08	 mov	 edx, DWORD PTR _pItem$[ebp]
  00034	89 11		 mov	 DWORD PTR [ecx], edx

; 24   :     return this;

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$L69428:

; 25   : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?Cat@AListItem@@QAEPAV1@PAV1@@Z ENDP			; AListItem::Cat
_TEXT	ENDS
PUBLIC	?SetNext@AListItem@@QAEXPAV1@@Z			; AListItem::SetNext
PUBLIC	?Remove@AListItem@@QAEPAV1@PAV1@@Z		; AListItem::Remove
; Function compile flags: /Odt
;	COMDAT ?Remove@AListItem@@QAEPAV1@PAV1@@Z
_TEXT	SEGMENT
_this$ = -12
_li$ = -8
_prev$ = -4
_pItem$ = 8
?Remove@AListItem@@QAEPAV1@PAV1@@Z PROC NEAR		; AListItem::Remove, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 29   :     AListItem *li,*prev;
; 30   : 
; 31   :     //treat remove(NULL) same as item not found in list
; 32   :    if (pItem==NULL) 

  00009	83 7d 08 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  0000d	75 05		 jne	 SHORT $L69440

; 33   :    return this;

  0000f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00012	eb 7b		 jmp	 SHORT $L69437
$L69440:

; 34   : 
; 35   :     if(pItem==this)

  00014	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00017	3b 45 f4	 cmp	 eax, DWORD PTR _this$[ebp]
  0001a	75 16		 jne	 SHORT $L69441

; 36   :     {
; 37   :         li = m_pNext;

  0001c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	89 55 f8	 mov	 DWORD PTR _li$[ebp], edx

; 38   :         m_pNext = NULL;

  00024	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 39   :         return li;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _li$[ebp]
  00030	eb 5d		 jmp	 SHORT $L69437
$L69441:

; 40   :     }
; 41   :     prev=NULL;

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _prev$[ebp], 0

; 42   :     for(li=this; li!=NULL && li!=pItem ; li=li->m_pNext)

  00039	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	89 4d f8	 mov	 DWORD PTR _li$[ebp], ecx
  0003f	eb 08		 jmp	 SHORT $L69442
$L69443:
  00041	8b 55 f8	 mov	 edx, DWORD PTR _li$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 45 f8	 mov	 DWORD PTR _li$[ebp], eax
$L69442:
  00049	83 7d f8 00	 cmp	 DWORD PTR _li$[ebp], 0
  0004d	74 10		 je	 SHORT $L69444
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _li$[ebp]
  00052	3b 4d 08	 cmp	 ecx, DWORD PTR _pItem$[ebp]
  00055	74 08		 je	 SHORT $L69444

; 43   :         prev=li;

  00057	8b 55 f8	 mov	 edx, DWORD PTR _li$[ebp]
  0005a	89 55 fc	 mov	 DWORD PTR _prev$[ebp], edx
  0005d	eb e2		 jmp	 SHORT $L69443
$L69444:

; 44   :     if(li==NULL)     // item not found in list

  0005f	83 7d f8 00	 cmp	 DWORD PTR _li$[ebp], 0
  00063	75 05		 jne	 SHORT $L69445

; 45   :         return this;

  00065	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00068	eb 25		 jmp	 SHORT $L69437
$L69445:

; 46   : 
; 47   : //  here it is guaranteed that prev is non-NULL since we checked for
; 48   : //  that condition at the very beginning
; 49   : 
; 50   :     prev->SetNext(li->m_pNext);

  0006a	8b 45 f8	 mov	 eax, DWORD PTR _li$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	51		 push	 ecx
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _prev$[ebp]
  00073	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 51   :     li->SetNext(NULL);

  00078	6a 00		 push	 0
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _li$[ebp]
  0007d	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 52   : 
; 53   :     // SetNext on pItem to NULL
; 54   :     pItem->SetNext(NULL);

  00082	6a 00		 push	 0
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00087	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 55   : 
; 56   :     return this;

  0008c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$L69437:

; 57   : }

  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
?Remove@AListItem@@QAEPAV1@PAV1@@Z ENDP			; AListItem::Remove
_TEXT	ENDS
PUBLIC	?GetPrev@AListItem@@QBEPAV1@PAV1@@Z		; AListItem::GetPrev
; Function compile flags: /Odt
;	COMDAT ?GetPrev@AListItem@@QBEPAV1@PAV1@@Z
_TEXT	SEGMENT
_this$ = -12
_li$ = -8
_prev$ = -4
_pItem$ = 8
?GetPrev@AListItem@@QBEPAV1@PAV1@@Z PROC NEAR		; AListItem::GetPrev, COMDAT
; _this$ = ecx

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 61   :     const AListItem *li,*prev;
; 62   : 
; 63   :     prev=NULL;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _prev$[ebp], 0

; 64   :     for(li=this ; li!=NULL && li!=pItem ; li=li->m_pNext)

  00010	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00013	89 45 f8	 mov	 DWORD PTR _li$[ebp], eax
  00016	eb 08		 jmp	 SHORT $L69452
$L69453:
  00018	8b 4d f8	 mov	 ecx, DWORD PTR _li$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	89 55 f8	 mov	 DWORD PTR _li$[ebp], edx
$L69452:
  00020	83 7d f8 00	 cmp	 DWORD PTR _li$[ebp], 0
  00024	74 10		 je	 SHORT $L69454
  00026	8b 45 f8	 mov	 eax, DWORD PTR _li$[ebp]
  00029	3b 45 08	 cmp	 eax, DWORD PTR _pItem$[ebp]
  0002c	74 08		 je	 SHORT $L69454

; 65   :         prev=li;

  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _li$[ebp]
  00031	89 4d fc	 mov	 DWORD PTR _prev$[ebp], ecx
  00034	eb e2		 jmp	 SHORT $L69453
$L69454:

; 66   :     return (AListItem*)prev;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _prev$[ebp]

; 67   : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?GetPrev@AListItem@@QBEPAV1@PAV1@@Z ENDP		; AListItem::GetPrev
_TEXT	ENDS
PUBLIC	?GetItem@AListItem@@QAEPAV1@J@Z			; AListItem::GetItem
; Function compile flags: /Odt
;	COMDAT ?GetItem@AListItem@@QAEPAV1@J@Z
_TEXT	SEGMENT
_this$ = -8
_scan$ = -4
_index$ = 8
?GetItem@AListItem@@QAEPAV1@J@Z PROC NEAR		; AListItem::GetItem, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 72   : 	AListItem *scan;
; 73   : 	for (scan = this; scan!=NULL && index; scan = scan->m_pNext) 

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _scan$[ebp], eax
  0000f	eb 08		 jmp	 SHORT $L69461
$L69462:
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _scan$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 55 fc	 mov	 DWORD PTR _scan$[ebp], edx
$L69461:
  00019	83 7d fc 00	 cmp	 DWORD PTR _scan$[ebp], 0
  0001d	74 11		 je	 SHORT $L69463
  0001f	83 7d 08 00	 cmp	 DWORD PTR _index$[ebp], 0
  00023	74 0b		 je	 SHORT $L69463

; 74   : 	{
; 75   : 		index--;

  00025	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00028	83 e8 01	 sub	 eax, 1
  0002b	89 45 08	 mov	 DWORD PTR _index$[ebp], eax

; 76   : 	}

  0002e	eb e1		 jmp	 SHORT $L69462
$L69463:

; 77   : 	return (scan);

  00030	8b 45 fc	 mov	 eax, DWORD PTR _scan$[ebp]

; 78   : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?GetItem@AListItem@@QAEPAV1@J@Z ENDP			; AListItem::GetItem
_TEXT	ENDS
PUBLIC	?InsertBefore@AList@@QAEXPAVAListItem@@0@Z	; AList::InsertBefore
PUBLIC	?GetPrev@AList@@QBEPAVAListItem@@PAV2@@Z	; AList::GetPrev
; Function compile flags: /Odt
;	COMDAT ?InsertBefore@AList@@QAEXPAVAListItem@@0@Z
_TEXT	SEGMENT
_this$ = -8
_prev$ = -4
_pItem$ = 8
_pInsert$ = 12
?InsertBefore@AList@@QAEXPAVAListItem@@0@Z PROC NEAR	; AList::InsertBefore, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 	AListItem *prev = GetPrev(pItem);

  00009	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?GetPrev@AList@@QBEPAVAListItem@@PAV2@@Z ; AList::GetPrev
  00015	89 45 fc	 mov	 DWORD PTR _prev$[ebp], eax

; 84   : 	pInsert->SetNext(pItem);

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  0001b	51		 push	 ecx
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _pInsert$[ebp]
  0001f	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 85   : 	if (prev) prev->SetNext(pInsert);

  00024	83 7d fc 00	 cmp	 DWORD PTR _prev$[ebp], 0
  00028	74 0e		 je	 SHORT $L69470
  0002a	8b 55 0c	 mov	 edx, DWORD PTR _pInsert$[ebp]
  0002d	52		 push	 edx
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _prev$[ebp]
  00031	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 86   : 	else m_pHead = pInsert;

  00036	eb 08		 jmp	 SHORT $L69468
$L69470:
  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _pInsert$[ebp]
  0003e	89 08		 mov	 DWORD PTR [eax], ecx
$L69468:

; 87   : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?InsertBefore@AList@@QAEXPAVAListItem@@0@Z ENDP		; AList::InsertBefore
_TEXT	ENDS
PUBLIC	?AddTail@AListItem@@QAEPAV1@PAV1@@Z		; AListItem::AddTail
PUBLIC	?AddHead@AList@@QAEXPAVAListItem@@@Z		; AList::AddHead
PUBLIC	?AddTail@AList@@QAEXPAVAListItem@@@Z		; AList::AddTail
; Function compile flags: /Odt
;	COMDAT ?AddTail@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddTail@AList@@QAEXPAVAListItem@@@Z PROC NEAR		; AList::AddTail, COMDAT
; _this$ = ecx

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 91   :     if (m_pHead == NULL)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	75 0e		 jne	 SHORT $L69476

; 92   :     {
; 93   :         AddHead(pItem);

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00012	51		 push	 ecx
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead

; 94   :     }
; 95   :     else

  0001b	eb 13		 jmp	 SHORT $L69475
$L69476:

; 96   :     {
; 97   :         m_pHead = m_pHead->AddTail(pItem);

  0001d	8b 55 08	 mov	 edx, DWORD PTR _pItem$[ebp]
  00020	52		 push	 edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	e8 00 00 00 00	 call	 ?AddTail@AListItem@@QAEPAV1@PAV1@@Z ; AListItem::AddTail
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 01		 mov	 DWORD PTR [ecx], eax
$L69475:

; 98   :     }
; 99   : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?AddTail@AList@@QAEXPAVAListItem@@@Z ENDP		; AList::AddTail
_TEXT	ENDS
PUBLIC	??0AList@@QAE@XZ				; AList::AList
PUBLIC	?GetHead@AList@@QBEPAVAListItem@@XZ		; AList::GetHead
PUBLIC	?RemoveHead@AList@@QAEPAVAListItem@@XZ		; AList::RemoveHead
PUBLIC	?Reverse@AList@@QAEXXZ				; AList::Reverse
; Function compile flags: /Odt
;	COMDAT ?Reverse@AList@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12
_Temp$ = -8
_pItem$ = -4
?Reverse@AList@@QAEXXZ PROC NEAR			; AList::Reverse, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 104  :     AList Temp;

  00009	8d 4d f8	 lea	 ecx, DWORD PTR _Temp$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0AList@@QAE@XZ	; AList::AList
$L69484:

; 105  :     AListItem *pItem;
; 106  :     while (pItem = RemoveHead())

  00011	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?RemoveHead@AList@@QAEPAVAListItem@@XZ ; AList::RemoveHead
  00019	89 45 fc	 mov	 DWORD PTR _pItem$[ebp], eax
  0001c	83 7d fc 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  00020	74 0e		 je	 SHORT $L69485

; 107  :     {
; 108  :         Temp.AddHead(pItem);

  00022	8b 45 fc	 mov	 eax, DWORD PTR _pItem$[ebp]
  00025	50		 push	 eax
  00026	8d 4d f8	 lea	 ecx, DWORD PTR _Temp$[ebp]
  00029	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead

; 109  :     }

  0002e	eb e1		 jmp	 SHORT $L69484
$L69485:

; 110  :     m_pHead = Temp.GetHead();

  00030	8d 4d f8	 lea	 ecx, DWORD PTR _Temp$[ebp]
  00033	e8 00 00 00 00	 call	 ?GetHead@AList@@QBEPAVAListItem@@XZ ; AList::GetHead
  00038	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	89 01		 mov	 DWORD PTR [ecx], eax

; 111  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?Reverse@AList@@QAEXXZ ENDP				; AList::Reverse
_TEXT	ENDS
PUBLIC	?GetNext@AListItem@@QBEPAV1@XZ			; AListItem::GetNext
PUBLIC	?IsMember@AList@@QAEHPAVAListItem@@@Z		; AList::IsMember
; Function compile flags: /Odt
;	COMDAT ?IsMember@AList@@QAEHPAVAListItem@@@Z
_TEXT	SEGMENT
_this$ = -8
_pScan$ = -4
_pItem$ = 8
?IsMember@AList@@QAEHPAVAListItem@@@Z PROC NEAR		; AList::IsMember, COMDAT
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 116  :     AListItem *pScan = GetHead();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetHead@AList@@QBEPAVAListItem@@XZ ; AList::GetHead
  00011	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax

; 117  :     for (;pScan;pScan = pScan->GetNext())

  00014	eb 0b		 jmp	 SHORT $L69491
$L69492:
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00019	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  0001e	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
$L69491:
  00021	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00025	74 11		 je	 SHORT $L69493

; 118  :     {
; 119  :         if (pItem == pScan) return TRUE;

  00027	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0002a	3b 45 fc	 cmp	 eax, DWORD PTR _pScan$[ebp]
  0002d	75 07		 jne	 SHORT $L69494
  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	eb 04		 jmp	 SHORT $L69489
$L69494:

; 120  :     }

  00036	eb de		 jmp	 SHORT $L69492
$L69493:

; 121  :     return FALSE;

  00038	33 c0		 xor	 eax, eax
$L69489:

; 122  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?IsMember@AList@@QAEHPAVAListItem@@@Z ENDP		; AList::IsMember
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@AListItem@@QBEPAV1@XZ PROC NEAR		; AListItem::GetNext, COMDAT
; _this$ = ecx

; 18   :     AListItem *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetNext@AListItem@@QBEPAV1@XZ ENDP			; AListItem::GetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@AListItem@@QAEXPAV1@@Z PROC NEAR		; AListItem::SetNext, COMDAT
; _this$ = ecx

; 19   :     void SetNext(AListItem *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetNext@AListItem@@QAEXPAV1@@Z ENDP			; AListItem::SetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddTail@AListItem@@QAEPAV1@PAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddTail@AListItem@@QAEPAV1@PAV1@@Z PROC NEAR		; AListItem::AddTail, COMDAT
; _this$ = ecx

; 22   :     AListItem* AddTail(AListItem* pItem) {return Cat(pItem);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?Cat@AListItem@@QAEPAV1@PAV1@@Z ; AListItem::Cat
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?AddTail@AListItem@@QAEPAV1@PAV1@@Z ENDP		; AListItem::AddTail
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0AList@@QAE@XZ PROC NEAR				; AList::AList, COMDAT
; _this$ = ecx

; 34   :     AList() {m_pHead=NULL;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0AList@@QAE@XZ ENDP					; AList::AList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@AList@@QBEPAVAListItem@@XZ PROC NEAR		; AList::GetHead, COMDAT
; _this$ = ecx

; 35   :     AListItem *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@AList@@QBEPAVAListItem@@XZ ENDP		; AList::GetHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddHead@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddHead@AList@@QAEXPAVAListItem@@@Z PROC NEAR		; AList::AddHead, COMDAT
; _this$ = ecx

; 51   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :             if (pItem!=NULL)

  00007	83 7d 08 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  0000b	74 16		 je	 SHORT $L32730

; 53   :             {
; 54   :                 pItem->SetNext(m_pHead);

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	51		 push	 ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00016	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 55   :                 m_pHead=pItem;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00021	89 02		 mov	 DWORD PTR [edx], eax
$L32730:

; 56   :             }
; 57   :         };

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?AddHead@AList@@QAEXPAVAListItem@@@Z ENDP		; AList::AddHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetPrev@AList@@QBEPAVAListItem@@PAV2@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?GetPrev@AList@@QBEPAVAListItem@@PAV2@@Z PROC NEAR	; AList::GetPrev, COMDAT
; _this$ = ecx

; 66   :     AListItem *GetPrev(AListItem *pItem) const {return m_pHead->GetPrev(pItem);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00010	e8 00 00 00 00	 call	 ?GetPrev@AListItem@@QBEPAV1@PAV1@@Z ; AListItem::GetPrev
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetPrev@AList@@QBEPAVAListItem@@PAV2@@Z ENDP		; AList::GetPrev
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -8
_li$ = -4
?RemoveHead@AList@@QAEPAVAListItem@@XZ PROC NEAR	; AList::RemoveHead, COMDAT
; _this$ = ecx

; 71   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 72   :             AListItem *li;
; 73   :             li = m_pHead;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR _li$[ebp], ecx

; 74   :             if(m_pHead)

  00011	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00014	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00017	74 19		 je	 SHORT $L32744

; 75   :             {
; 76   :                 m_pHead = m_pHead->GetNext();

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	89 01		 mov	 DWORD PTR [ecx], eax

; 77   :                 li->SetNext(NULL);

  00028	6a 00		 push	 0
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  0002d	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext
$L32744:

; 78   :             }
; 79   :             return li;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _li$[ebp]

; 80   :         }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?RemoveHead@AList@@QAEPAVAListItem@@XZ ENDP		; AList::RemoveHead
_TEXT	ENDS
END
