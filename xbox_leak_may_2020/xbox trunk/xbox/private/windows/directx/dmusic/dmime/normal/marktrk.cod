; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	..\marktrk.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DN@LGPJDGLA@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@LPKHAPAF@Error?3?5Invalid?5Marker?5Track?4?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DO@DEBCPCK@Error?3?5MarkerTrack?5does?5not?5supp@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EN@IKGEDL@Error?3?5Unable?5to?5clone?5marker?5tr@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FJ@HIPJEJGD@Error?3?5Unable?5to?5clone?5marker?5tr@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BGAOHDMM@?$CBp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT ?Construct@CMarkerTrack@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMarkerTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CValidStartList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPlayMarkerList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMarkerTrack@@QAE@PAV0@JJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CValidStartItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPlayMarkerItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CMarkerTrack@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMarkerTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CMarkerTrack@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CMarkerTrack@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CMarkerTrack@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMarkerTrack@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassID@CMarkerTrack@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsDirty@CMarkerTrack@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CMarkerTrack@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadPlayMarkerList@CMarkerTrack@@IAEJPAVCRiffParser@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadValidStartList@CMarkerTrack@@IAEJPAVCRiffParser@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Save@CMarkerTrack@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CMarkerTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsParamSupported@CMarkerTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CMarkerTrack@@UAGJPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitPlay@CMarkerTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndPlay@CMarkerTrack@@UAGJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Play@CMarkerTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParam@CMarkerTrack@@UAGJABU_GUID@@JPAJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetParam@CMarkerTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddNotificationType@CMarkerTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveNotificationType@CMarkerTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@CMarkerTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@ULyricInfo@@@@QBEPAV?$TListItem@ULyricInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@ULyricInfo@@@@QAEXPAV?$TListItem@ULyricInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@ULyricInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@ULyricInfo@@@@QAEAAULyricInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@UTriggerInfo@@@@SGHAAUTriggerInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@ULyricInfo@@@@SGHAAULyricInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@ULyricInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEAAV01@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UTriggerInfo@@@@QAEXP6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@ULyricInfo@@@@QAEXP6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_SEQ_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_CURVE_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@_J@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UObjectInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ObjectInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UTriggerInfo@@@@QAEPAV1@P6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@ULyricInfo@@@@QAEPAV1@P6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UTriggerInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UTriggerInfo@@@@AAEPAV1@PAV1@P6GHAAUTriggerInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@ULyricInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@ULyricInfo@@@@AAEPAV1@PAV1@P6GHAAULyricInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CMarkerTrack@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CMarkerTrack@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CMarkerTrack@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UParamInfo@CParamControlTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UParamInfo@CParamControlTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ParamInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WaveItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WString@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WString@SmartRef@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@ULyricInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@ULyricInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UTriggerInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Clone@CMarkerTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetParam@CMarkerTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??IsParamSupported@CMarkerTrack@@UAGJABU_GUID@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Load@CMarkerTrack@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CMarkerTrack@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CMarkerTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@CPlayMarkerList@@QAEPAVCPlayMarkerItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@CValidStartList@@QAEPAVCValidStartItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AListItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@CPlayMarkerItem@@QAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@CPlayMarkerList@@QAEPAVCPlayMarkerItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@CValidStartItem@@QAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@CValidStartList@@QAEPAVCValidStartItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CMarkerTrack@@6BIDirectMusicTrack@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMarkerTrack@@6BIPersistStream@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?Construct@CMarkerTrack@@IAEXXZ			; CMarkerTrack::Construct
EXTRN	__imp__RtlInitializeCriticalSection@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\marktrk.cpp
;	COMDAT ?Construct@CMarkerTrack@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Construct@CMarkerTrack@@IAEXXZ PROC NEAR		; CMarkerTrack::Construct, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 37   :     IncrementDLLCount();
; 38   : 
; 39   : 	m_cRef = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 40   :     m_fCSInitialized = FALSE;

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 41   : 	INITIALIZE_CRITICAL_SECTION(&m_CrSec);

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	83 c2 18	 add	 edx, 24			; 00000018H
  00021	52		 push	 edx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 42   :     m_fCSInitialized = TRUE;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	c7 40 34 01 00
	00 00		 mov	 DWORD PTR [eax+52], 1

; 43   : 	m_dwValidate = 0;

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 44   : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?Construct@CMarkerTrack@@IAEXXZ ENDP			; CMarkerTrack::Construct
_TEXT	ENDS
PUBLIC	??0CValidStartList@@QAE@XZ			; CValidStartList::CValidStartList
PUBLIC	?QueryInterface@CMarkerTrack@@W3AGJABU_GUID@@PAPAX@Z ; CMarkerTrack::QueryInterface
PUBLIC	?AddRef@CMarkerTrack@@W3AGKXZ			; CMarkerTrack::AddRef
PUBLIC	?Release@CMarkerTrack@@W3AGKXZ			; CMarkerTrack::Release
PUBLIC	??0CPlayMarkerList@@QAE@XZ			; CPlayMarkerList::CPlayMarkerList
PUBLIC	??0CMarkerTrack@@QAE@XZ				; CMarkerTrack::CMarkerTrack
PUBLIC	?QueryInterface@CMarkerTrack@@UAGJABU_GUID@@PAPAX@Z ; CMarkerTrack::QueryInterface
PUBLIC	?AddRef@CMarkerTrack@@UAGKXZ			; CMarkerTrack::AddRef
PUBLIC	?Release@CMarkerTrack@@UAGKXZ			; CMarkerTrack::Release
PUBLIC	?IsParamSupported@CMarkerTrack@@UAGJABU_GUID@@@Z ; CMarkerTrack::IsParamSupported
PUBLIC	?Init@CMarkerTrack@@UAGJPAUIDirectMusicSegment@@@Z ; CMarkerTrack::Init
PUBLIC	?InitPlay@CMarkerTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ; CMarkerTrack::InitPlay
PUBLIC	?EndPlay@CMarkerTrack@@UAGJPAX@Z		; CMarkerTrack::EndPlay
PUBLIC	?Play@CMarkerTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ; CMarkerTrack::Play
PUBLIC	?GetParam@CMarkerTrack@@UAGJABU_GUID@@JPAJPAX@Z	; CMarkerTrack::GetParam
PUBLIC	?SetParam@CMarkerTrack@@UAGJABU_GUID@@JPAX@Z	; CMarkerTrack::SetParam
PUBLIC	?AddNotificationType@CMarkerTrack@@UAGJABU_GUID@@@Z ; CMarkerTrack::AddNotificationType
PUBLIC	?RemoveNotificationType@CMarkerTrack@@UAGJABU_GUID@@@Z ; CMarkerTrack::RemoveNotificationType
PUBLIC	?Clone@CMarkerTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z ; CMarkerTrack::Clone
PUBLIC	?GetClassID@CMarkerTrack@@UAGJPAU_GUID@@@Z	; CMarkerTrack::GetClassID
PUBLIC	?IsDirty@CMarkerTrack@@UAGJXZ			; CMarkerTrack::IsDirty
PUBLIC	?Load@CMarkerTrack@@UAGJPAUIStream@@@Z		; CMarkerTrack::Load
PUBLIC	?Save@CMarkerTrack@@UAGJPAUIStream@@H@Z		; CMarkerTrack::Save
PUBLIC	?GetSizeMax@CMarkerTrack@@UAGJPAT_ULARGE_INTEGER@@@Z ; CMarkerTrack::GetSizeMax
PUBLIC	??_7CMarkerTrack@@6BIPersistStream@@@		; CMarkerTrack::`vftable'
PUBLIC	??_7CMarkerTrack@@6BIDirectMusicTrack@@@	; CMarkerTrack::`vftable'
PUBLIC	??0IPersistStream@@QAE@XZ			; IPersistStream::IPersistStream
PUBLIC	??0IDirectMusicTrack@@QAE@XZ			; IDirectMusicTrack::IDirectMusicTrack
EXTRN	??0CMemTrack@@QAE@K@Z:NEAR			; CMemTrack::CMemTrack
;	COMDAT ??_7CMarkerTrack@@6BIPersistStream@@@
CONST	SEGMENT
??_7CMarkerTrack@@6BIPersistStream@@@ DD FLAT:?QueryInterface@CMarkerTrack@@UAGJABU_GUID@@PAPAX@Z ; CMarkerTrack::`vftable'
	DD	FLAT:?AddRef@CMarkerTrack@@UAGKXZ
	DD	FLAT:?Release@CMarkerTrack@@UAGKXZ
	DD	FLAT:?GetClassID@CMarkerTrack@@UAGJPAU_GUID@@@Z
	DD	FLAT:?IsDirty@CMarkerTrack@@UAGJXZ
	DD	FLAT:?Load@CMarkerTrack@@UAGJPAUIStream@@@Z
	DD	FLAT:?Save@CMarkerTrack@@UAGJPAUIStream@@H@Z
	DD	FLAT:?GetSizeMax@CMarkerTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
CONST	ENDS
;	COMDAT ??_7CMarkerTrack@@6BIDirectMusicTrack@@@
CONST	SEGMENT
??_7CMarkerTrack@@6BIDirectMusicTrack@@@ DD FLAT:?QueryInterface@CMarkerTrack@@W3AGJABU_GUID@@PAPAX@Z ; CMarkerTrack::`vftable'
	DD	FLAT:?AddRef@CMarkerTrack@@W3AGKXZ
	DD	FLAT:?Release@CMarkerTrack@@W3AGKXZ
	DD	FLAT:?Init@CMarkerTrack@@UAGJPAUIDirectMusicSegment@@@Z
	DD	FLAT:?InitPlay@CMarkerTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
	DD	FLAT:?EndPlay@CMarkerTrack@@UAGJPAX@Z
	DD	FLAT:?Play@CMarkerTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
	DD	FLAT:?GetParam@CMarkerTrack@@UAGJABU_GUID@@JPAJPAX@Z
	DD	FLAT:?SetParam@CMarkerTrack@@UAGJABU_GUID@@JPAX@Z
	DD	FLAT:?IsParamSupported@CMarkerTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?AddNotificationType@CMarkerTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?RemoveNotificationType@CMarkerTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?Clone@CMarkerTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CMarkerTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CMarkerTrack@@QAE@XZ PROC NEAR			; CMarkerTrack::CMarkerTrack, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPersistStream@@QAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 04	 add	 ecx, 4
  00015	e8 00 00 00 00	 call	 ??0IDirectMusicTrack@@QAE@XZ
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMarkerTrack@@6BIPersistStream@@@
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CMarkerTrack@@6BIDirectMusicTrack@@@
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 08	 add	 ecx, 8
  00033	e8 00 00 00 00	 call	 ??0CValidStartList@@QAE@XZ
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0003e	e8 00 00 00 00	 call	 ??0CPlayMarkerList@@QAE@XZ
  00043	6a 17		 push	 23			; 00000017H
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 38	 add	 ecx, 56			; 00000038H
  0004b	e8 00 00 00 00	 call	 ??0CMemTrack@@QAE@K@Z	; CMemTrack::CMemTrack

; 48   : 	Construct();

  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?Construct@CMarkerTrack@@IAEXXZ ; CMarkerTrack::Construct

; 49   : }

  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
??0CMarkerTrack@@QAE@XZ ENDP				; CMarkerTrack::CMarkerTrack
_TEXT	ENDS
PUBLIC	??0IPersist@@QAE@XZ				; IPersist::IPersist
; Function compile flags: /Odt
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersistStream@@QAE@XZ PROC NEAR			; IPersistStream::IPersistStream, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPersist@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersistStream@@QAE@XZ ENDP				; IPersistStream::IPersistStream
_TEXT	ENDS
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
; Function compile flags: /Odt
;	COMDAT ??0IDirectMusicTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicTrack@@QAE@XZ PROC NEAR			; IDirectMusicTrack::IDirectMusicTrack, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicTrack@@QAE@XZ ENDP			; IDirectMusicTrack::IDirectMusicTrack
_TEXT	ENDS
PUBLIC	??0AList@@QAE@XZ				; AList::AList
; Function compile flags: /Odt
;	COMDAT ??0CValidStartList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CValidStartList@@QAE@XZ PROC NEAR			; CValidStartList::CValidStartList, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AList@@QAE@XZ	; AList::AList
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CValidStartList@@QAE@XZ ENDP				; CValidStartList::CValidStartList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CPlayMarkerList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CPlayMarkerList@@QAE@XZ PROC NEAR			; CPlayMarkerList::CPlayMarkerList, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AList@@QAE@XZ	; AList::AList
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CPlayMarkerList@@QAE@XZ ENDP				; CPlayMarkerList::CPlayMarkerList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersist@@QAE@XZ PROC NEAR				; IPersist::IPersist, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersist@@QAE@XZ ENDP				; IPersist::IPersist
_TEXT	ENDS
PUBLIC	?GetNext@CValidStartItem@@QAEPAV1@XZ		; CValidStartItem::GetNext
PUBLIC	??0CValidStartItem@@QAE@XZ			; CValidStartItem::CValidStartItem
PUBLIC	?GetHead@CValidStartList@@QAEPAVCValidStartItem@@XZ ; CValidStartList::GetHead
PUBLIC	?GetNext@CPlayMarkerItem@@QAEPAV1@XZ		; CPlayMarkerItem::GetNext
PUBLIC	??0CPlayMarkerItem@@QAE@XZ			; CPlayMarkerItem::CPlayMarkerItem
PUBLIC	?GetHead@CPlayMarkerList@@QAEPAVCPlayMarkerItem@@XZ ; CPlayMarkerList::GetHead
PUBLIC	??0CMarkerTrack@@QAE@PAV0@JJ@Z			; CMarkerTrack::CMarkerTrack
PUBLIC	?AddHead@AList@@QAEXPAVAListItem@@@Z		; AList::AddHead
EXTRN	?Reverse@AList@@QAEXXZ:NEAR			; AList::Reverse
; Function compile flags: /Odt
;	COMDAT ??0CMarkerTrack@@QAE@PAV0@JJ@Z
_TEXT	SEGMENT
tv201 = -68
tv181 = -64
tv153 = -60
tv133 = -56
_this$ = -52
$T70211 = -48
$T70208 = -44
$T70205 = -40
$T70202 = -36
_pNew$69472 = -32
_pNew$69466 = -28
_pNew$69453 = -24
_pNew$69447 = -20
_pPPrevious$ = -16
_pVScan$ = -12
_pVPrevious$ = -8
_pPScan$ = -4
_pSourceTrack$ = 8
_mtStart$ = 12
_mtEnd$ = 16
??0CMarkerTrack@@QAE@PAV0@JJ@Z PROC NEAR		; CMarkerTrack::CMarkerTrack, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0IPersistStream@@QAE@XZ
  00011	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	83 c1 04	 add	 ecx, 4
  00017	e8 00 00 00 00	 call	 ??0IDirectMusicTrack@@QAE@XZ
  0001c	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMarkerTrack@@6BIPersistStream@@@
  00025	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CMarkerTrack@@6BIDirectMusicTrack@@@
  0002f	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 08	 add	 ecx, 8
  00035	e8 00 00 00 00	 call	 ??0CValidStartList@@QAE@XZ
  0003a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00040	e8 00 00 00 00	 call	 ??0CPlayMarkerList@@QAE@XZ
  00045	6a 17		 push	 23			; 00000017H
  00047	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 c1 38	 add	 ecx, 56			; 00000038H
  0004d	e8 00 00 00 00	 call	 ??0CMemTrack@@QAE@K@Z	; CMemTrack::CMemTrack

; 55   : 	Construct();

  00052	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?Construct@CMarkerTrack@@IAEXXZ ; CMarkerTrack::Construct

; 56   :     // Clone the valid start point list.
; 57   : 	CValidStartItem* pVScan = pSourceTrack->m_ValidStartList.GetHead();

  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _pSourceTrack$[ebp]
  0005d	83 c1 08	 add	 ecx, 8
  00060	e8 00 00 00 00	 call	 ?GetHead@CValidStartList@@QAEPAVCValidStartItem@@XZ ; CValidStartList::GetHead
  00065	89 45 f4	 mov	 DWORD PTR _pVScan$[ebp], eax

; 58   : 	CValidStartItem* pVPrevious = NULL;

  00068	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pVPrevious$[ebp], 0

; 59   : 	for(; pVScan; pVScan = pVScan->GetNext())

  0006f	eb 0b		 jmp	 SHORT $L69440
$L69441:
  00071	8b 4d f4	 mov	 ecx, DWORD PTR _pVScan$[ebp]
  00074	e8 00 00 00 00	 call	 ?GetNext@CValidStartItem@@QAEPAV1@XZ ; CValidStartItem::GetNext
  00079	89 45 f4	 mov	 DWORD PTR _pVScan$[ebp], eax
$L69440:
  0007c	83 7d f4 00	 cmp	 DWORD PTR _pVScan$[ebp], 0
  00080	0f 84 8a 00 00
	00		 je	 $L69442

; 60   : 	{
; 61   : 		if (pVScan->m_ValidStart.mtTime < mtStart)

  00086	8b 55 f4	 mov	 edx, DWORD PTR _pVScan$[ebp]
  00089	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008c	3b 45 0c	 cmp	 eax, DWORD PTR _mtStart$[ebp]
  0008f	7d 08		 jge	 SHORT $L69443

; 62   : 		{
; 63   : 			pVPrevious = pVScan;

  00091	8b 4d f4	 mov	 ecx, DWORD PTR _pVScan$[ebp]
  00094	89 4d f8	 mov	 DWORD PTR _pVPrevious$[ebp], ecx

; 64   : 		}
; 65   : 		else if (pVScan->m_ValidStart.mtTime < mtEnd)

  00097	eb 72		 jmp	 SHORT $L69444
$L69443:
  00099	8b 55 f4	 mov	 edx, DWORD PTR _pVScan$[ebp]
  0009c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009f	3b 45 10	 cmp	 eax, DWORD PTR _mtEnd$[ebp]
  000a2	7d 65		 jge	 SHORT $L69445

; 66   : 		{
; 67   : 			if (pVScan->m_ValidStart.mtTime == mtStart)

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR _pVScan$[ebp]
  000a7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000aa	3b 55 0c	 cmp	 edx, DWORD PTR _mtStart$[ebp]
  000ad	75 07		 jne	 SHORT $L69446

; 68   : 			{
; 69   : 				pVPrevious = NULL;

  000af	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pVPrevious$[ebp], 0
$L69446:

; 70   : 			}
; 71   : 			CValidStartItem* pNew = new CValidStartItem;

  000b6	6a 08		 push	 8
  000b8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000bd	83 c4 04	 add	 esp, 4
  000c0	89 45 dc	 mov	 DWORD PTR $T70202[ebp], eax
  000c3	83 7d dc 00	 cmp	 DWORD PTR $T70202[ebp], 0
  000c7	74 0d		 je	 SHORT $L70203
  000c9	8b 4d dc	 mov	 ecx, DWORD PTR $T70202[ebp]
  000cc	e8 00 00 00 00	 call	 ??0CValidStartItem@@QAE@XZ
  000d1	89 45 c8	 mov	 DWORD PTR tv133[ebp], eax
  000d4	eb 07		 jmp	 SHORT $L70204
$L70203:
  000d6	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$L70204:
  000dd	8b 45 c8	 mov	 eax, DWORD PTR tv133[ebp]
  000e0	89 45 ec	 mov	 DWORD PTR _pNew$69447[ebp], eax

; 72   : 			if (pNew)

  000e3	83 7d ec 00	 cmp	 DWORD PTR _pNew$69447[ebp], 0
  000e7	74 1e		 je	 SHORT $L69450

; 73   : 			{
; 74   : 				pNew->m_ValidStart.mtTime = pVScan->m_ValidStart.mtTime - mtStart;

  000e9	8b 4d f4	 mov	 ecx, DWORD PTR _pVScan$[ebp]
  000ec	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ef	2b 55 0c	 sub	 edx, DWORD PTR _mtStart$[ebp]
  000f2	8b 45 ec	 mov	 eax, DWORD PTR _pNew$69447[ebp]
  000f5	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 75   : 				m_ValidStartList.AddHead(pNew); // instead of AddTail, which is n^2. We reverse below.

  000f8	8b 4d ec	 mov	 ecx, DWORD PTR _pNew$69447[ebp]
  000fb	51		 push	 ecx
  000fc	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	83 c1 08	 add	 ecx, 8
  00102	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead
$L69450:

; 76   : 			}
; 77   : 		}
; 78   : 		else break;

  00107	eb 02		 jmp	 SHORT $L69444
$L69445:
  00109	eb 05		 jmp	 SHORT $L69442
$L69444:

; 79   : 	}

  0010b	e9 61 ff ff ff	 jmp	 $L69441
$L69442:

; 80   : 	m_ValidStartList.Reverse(); // Now, put list in order.

  00110	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	83 c1 08	 add	 ecx, 8
  00116	e8 00 00 00 00	 call	 ?Reverse@AList@@QAEXXZ	; AList::Reverse

; 81   :     // Then, install the time signature that precedes the clone.
; 82   : 	if (pVPrevious)

  0011b	83 7d f8 00	 cmp	 DWORD PTR _pVPrevious$[ebp], 0
  0011f	74 4c		 je	 SHORT $L69452

; 83   : 	{
; 84   : 		CValidStartItem* pNew = new CValidStartItem;

  00121	6a 08		 push	 8
  00123	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00128	83 c4 04	 add	 esp, 4
  0012b	89 45 d8	 mov	 DWORD PTR $T70205[ebp], eax
  0012e	83 7d d8 00	 cmp	 DWORD PTR $T70205[ebp], 0
  00132	74 0d		 je	 SHORT $L70206
  00134	8b 4d d8	 mov	 ecx, DWORD PTR $T70205[ebp]
  00137	e8 00 00 00 00	 call	 ??0CValidStartItem@@QAE@XZ
  0013c	89 45 c4	 mov	 DWORD PTR tv153[ebp], eax
  0013f	eb 07		 jmp	 SHORT $L70207
$L70206:
  00141	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$L70207:
  00148	8b 55 c4	 mov	 edx, DWORD PTR tv153[ebp]
  0014b	89 55 e8	 mov	 DWORD PTR _pNew$69453[ebp], edx

; 85   : 		if (pNew)

  0014e	83 7d e8 00	 cmp	 DWORD PTR _pNew$69453[ebp], 0
  00152	74 19		 je	 SHORT $L69452

; 86   : 		{
; 87   : 			pNew->m_ValidStart.mtTime = 0;

  00154	8b 45 e8	 mov	 eax, DWORD PTR _pNew$69453[ebp]
  00157	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 88   : 			m_ValidStartList.AddHead(pNew);

  0015e	8b 4d e8	 mov	 ecx, DWORD PTR _pNew$69453[ebp]
  00161	51		 push	 ecx
  00162	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00165	83 c1 08	 add	 ecx, 8
  00168	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead
$L69452:

; 89   : 		}
; 90   : 	}
; 91   :     // Clone the play marker list. Gee, this is identical code...
; 92   : 	CPlayMarkerItem* pPScan = pSourceTrack->m_PlayMarkerList.GetHead();

  0016d	8b 4d 08	 mov	 ecx, DWORD PTR _pSourceTrack$[ebp]
  00170	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00173	e8 00 00 00 00	 call	 ?GetHead@CPlayMarkerList@@QAEPAVCPlayMarkerItem@@XZ ; CPlayMarkerList::GetHead
  00178	89 45 fc	 mov	 DWORD PTR _pPScan$[ebp], eax

; 93   : 	CPlayMarkerItem* pPPrevious = NULL;

  0017b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pPPrevious$[ebp], 0

; 94   : 	for(; pPScan; pPScan = pPScan->GetNext())

  00182	eb 0b		 jmp	 SHORT $L69459
$L69460:
  00184	8b 4d fc	 mov	 ecx, DWORD PTR _pPScan$[ebp]
  00187	e8 00 00 00 00	 call	 ?GetNext@CPlayMarkerItem@@QAEPAV1@XZ ; CPlayMarkerItem::GetNext
  0018c	89 45 fc	 mov	 DWORD PTR _pPScan$[ebp], eax
$L69459:
  0018f	83 7d fc 00	 cmp	 DWORD PTR _pPScan$[ebp], 0
  00193	0f 84 8a 00 00
	00		 je	 $L69461

; 95   : 	{
; 96   : 		if (pPScan->m_PlayMarker.mtTime < mtStart)

  00199	8b 55 fc	 mov	 edx, DWORD PTR _pPScan$[ebp]
  0019c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0019f	3b 45 0c	 cmp	 eax, DWORD PTR _mtStart$[ebp]
  001a2	7d 08		 jge	 SHORT $L69462

; 97   : 		{
; 98   : 			pPPrevious = pPScan;

  001a4	8b 4d fc	 mov	 ecx, DWORD PTR _pPScan$[ebp]
  001a7	89 4d f0	 mov	 DWORD PTR _pPPrevious$[ebp], ecx

; 99   : 		}
; 100  : 		else if (pPScan->m_PlayMarker.mtTime < mtEnd)

  001aa	eb 72		 jmp	 SHORT $L69463
$L69462:
  001ac	8b 55 fc	 mov	 edx, DWORD PTR _pPScan$[ebp]
  001af	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001b2	3b 45 10	 cmp	 eax, DWORD PTR _mtEnd$[ebp]
  001b5	7d 65		 jge	 SHORT $L69464

; 101  : 		{
; 102  : 			if (pPScan->m_PlayMarker.mtTime == mtStart)

  001b7	8b 4d fc	 mov	 ecx, DWORD PTR _pPScan$[ebp]
  001ba	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001bd	3b 55 0c	 cmp	 edx, DWORD PTR _mtStart$[ebp]
  001c0	75 07		 jne	 SHORT $L69465

; 103  : 			{
; 104  : 				pPPrevious = NULL;

  001c2	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pPPrevious$[ebp], 0
$L69465:

; 105  : 			}
; 106  : 			CPlayMarkerItem* pNew = new CPlayMarkerItem;

  001c9	6a 08		 push	 8
  001cb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001d0	83 c4 04	 add	 esp, 4
  001d3	89 45 d4	 mov	 DWORD PTR $T70208[ebp], eax
  001d6	83 7d d4 00	 cmp	 DWORD PTR $T70208[ebp], 0
  001da	74 0d		 je	 SHORT $L70209
  001dc	8b 4d d4	 mov	 ecx, DWORD PTR $T70208[ebp]
  001df	e8 00 00 00 00	 call	 ??0CPlayMarkerItem@@QAE@XZ
  001e4	89 45 c0	 mov	 DWORD PTR tv181[ebp], eax
  001e7	eb 07		 jmp	 SHORT $L70210
$L70209:
  001e9	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv181[ebp], 0
$L70210:
  001f0	8b 45 c0	 mov	 eax, DWORD PTR tv181[ebp]
  001f3	89 45 e4	 mov	 DWORD PTR _pNew$69466[ebp], eax

; 107  : 			if (pNew)

  001f6	83 7d e4 00	 cmp	 DWORD PTR _pNew$69466[ebp], 0
  001fa	74 1e		 je	 SHORT $L69469

; 108  : 			{
; 109  : 				pNew->m_PlayMarker.mtTime = pPScan->m_PlayMarker.mtTime - mtStart;

  001fc	8b 4d fc	 mov	 ecx, DWORD PTR _pPScan$[ebp]
  001ff	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00202	2b 55 0c	 sub	 edx, DWORD PTR _mtStart$[ebp]
  00205	8b 45 e4	 mov	 eax, DWORD PTR _pNew$69466[ebp]
  00208	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 110  : 				m_PlayMarkerList.AddHead(pNew); // instead of AddTail, which is n^2. We reverse below.

  0020b	8b 4d e4	 mov	 ecx, DWORD PTR _pNew$69466[ebp]
  0020e	51		 push	 ecx
  0020f	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00212	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00215	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead
$L69469:

; 111  : 			}
; 112  : 		}
; 113  : 		else break;

  0021a	eb 02		 jmp	 SHORT $L69463
$L69464:
  0021c	eb 05		 jmp	 SHORT $L69461
$L69463:

; 114  : 	}

  0021e	e9 61 ff ff ff	 jmp	 $L69460
$L69461:

; 115  : 	m_PlayMarkerList.Reverse(); // Now, put list in order.

  00223	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00226	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00229	e8 00 00 00 00	 call	 ?Reverse@AList@@QAEXXZ	; AList::Reverse

; 116  :     // Then, install the time signature that precedes the clone.
; 117  : 	if (pPPrevious)

  0022e	83 7d f0 00	 cmp	 DWORD PTR _pPPrevious$[ebp], 0
  00232	74 4c		 je	 SHORT $L69437

; 118  : 	{
; 119  : 		CPlayMarkerItem* pNew = new CPlayMarkerItem;

  00234	6a 08		 push	 8
  00236	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0023b	83 c4 04	 add	 esp, 4
  0023e	89 45 d0	 mov	 DWORD PTR $T70211[ebp], eax
  00241	83 7d d0 00	 cmp	 DWORD PTR $T70211[ebp], 0
  00245	74 0d		 je	 SHORT $L70212
  00247	8b 4d d0	 mov	 ecx, DWORD PTR $T70211[ebp]
  0024a	e8 00 00 00 00	 call	 ??0CPlayMarkerItem@@QAE@XZ
  0024f	89 45 bc	 mov	 DWORD PTR tv201[ebp], eax
  00252	eb 07		 jmp	 SHORT $L70213
$L70212:
  00254	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv201[ebp], 0
$L70213:
  0025b	8b 55 bc	 mov	 edx, DWORD PTR tv201[ebp]
  0025e	89 55 e0	 mov	 DWORD PTR _pNew$69472[ebp], edx

; 120  : 		if (pNew)

  00261	83 7d e0 00	 cmp	 DWORD PTR _pNew$69472[ebp], 0
  00265	74 19		 je	 SHORT $L69437

; 121  : 		{
; 122  : 			pNew->m_PlayMarker.mtTime = 0;

  00267	8b 45 e0	 mov	 eax, DWORD PTR _pNew$69472[ebp]
  0026a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 123  : 			m_PlayMarkerList.AddHead(pNew);

  00271	8b 4d e0	 mov	 ecx, DWORD PTR _pNew$69472[ebp]
  00274	51		 push	 ecx
  00275	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00278	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0027b	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead
$L69437:

; 124  : 		}
; 125  : 	}
; 126  : }

  00280	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00283	8b e5		 mov	 esp, ebp
  00285	5d		 pop	 ebp
  00286	c2 0c 00	 ret	 12			; 0000000cH
??0CMarkerTrack@@QAE@PAV0@JJ@Z ENDP			; CMarkerTrack::CMarkerTrack
_TEXT	ENDS
PUBLIC	??0AListItem@@QAE@XZ				; AListItem::AListItem
; Function compile flags: /Odt
;	COMDAT ??0CValidStartItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CValidStartItem@@QAE@XZ PROC NEAR			; CValidStartItem::CValidStartItem, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AListItem@@QAE@XZ	; AListItem::AListItem
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CValidStartItem@@QAE@XZ ENDP				; CValidStartItem::CValidStartItem
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CPlayMarkerItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CPlayMarkerItem@@QAE@XZ PROC NEAR			; CPlayMarkerItem::CPlayMarkerItem, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AListItem@@QAE@XZ	; AListItem::AListItem
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CPlayMarkerItem@@QAE@XZ ENDP				; CPlayMarkerItem::CPlayMarkerItem
_TEXT	ENDS
PUBLIC	?RemoveHead@CValidStartList@@QAEPAVCValidStartItem@@XZ ; CValidStartList::RemoveHead
PUBLIC	?RemoveHead@CPlayMarkerList@@QAEPAVCPlayMarkerItem@@XZ ; CPlayMarkerList::RemoveHead
PUBLIC	?Clear@CMarkerTrack@@IAEXXZ			; CMarkerTrack::Clear
; Function compile flags: /Odt
;	COMDAT ?Clear@CMarkerTrack@@IAEXXZ
_TEXT	SEGMENT
_this$ = -20
$T70224 = -16
$T70223 = -12
_pPlay$ = -8
_pStart$ = -4
?Clear@CMarkerTrack@@IAEXXZ PROC NEAR			; CMarkerTrack::Clear, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
$L69485:

; 131  : 	CValidStartItem* pStart;
; 132  : 	while( pStart = m_ValidStartList.RemoveHead() )

  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 08	 add	 ecx, 8
  0000f	e8 00 00 00 00	 call	 ?RemoveHead@CValidStartList@@QAEPAVCValidStartItem@@XZ ; CValidStartList::RemoveHead
  00014	89 45 fc	 mov	 DWORD PTR _pStart$[ebp], eax
  00017	83 7d fc 00	 cmp	 DWORD PTR _pStart$[ebp], 0
  0001b	74 14		 je	 SHORT $L69490

; 133  : 	{
; 134  : 		delete pStart;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _pStart$[ebp]
  00020	89 45 f4	 mov	 DWORD PTR $T70223[ebp], eax
  00023	8b 4d f4	 mov	 ecx, DWORD PTR $T70223[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	83 c4 04	 add	 esp, 4

; 135  : 	}

  0002f	eb d8		 jmp	 SHORT $L69485
$L69490:

; 136  : 	CPlayMarkerItem* pPlay;
; 137  : 	while( pPlay = m_PlayMarkerList.RemoveHead() )

  00031	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?RemoveHead@CPlayMarkerList@@QAEPAVCPlayMarkerItem@@XZ ; CPlayMarkerList::RemoveHead
  0003c	89 45 f8	 mov	 DWORD PTR _pPlay$[ebp], eax
  0003f	83 7d f8 00	 cmp	 DWORD PTR _pPlay$[ebp], 0
  00043	74 14		 je	 SHORT $L69482

; 138  : 	{
; 139  : 		delete pPlay;

  00045	8b 55 f8	 mov	 edx, DWORD PTR _pPlay$[ebp]
  00048	89 55 f0	 mov	 DWORD PTR $T70224[ebp], edx
  0004b	8b 45 f0	 mov	 eax, DWORD PTR $T70224[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00054	83 c4 04	 add	 esp, 4

; 140  : 	}

  00057	eb d8		 jmp	 SHORT $L69490
$L69482:

; 141  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?Clear@CMarkerTrack@@IAEXXZ ENDP			; CMarkerTrack::Clear
_TEXT	ENDS
PUBLIC	??1CMarkerTrack@@QAE@XZ				; CMarkerTrack::~CMarkerTrack
PUBLIC	?DeleteCriticalSection@@YGXPAX@Z		; DeleteCriticalSection
EXTRN	??1CMemTrack@@QAE@XZ:NEAR			; CMemTrack::~CMemTrack
; Function compile flags: /Odt
;	COMDAT ??1CMarkerTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CMarkerTrack@@QAE@XZ PROC NEAR			; CMarkerTrack::~CMarkerTrack, COMDAT
; _this$ = ecx

; 144  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMarkerTrack@@6BIPersistStream@@@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CMarkerTrack@@6BIDirectMusicTrack@@@

; 145  :     Clear();

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?Clear@CMarkerTrack@@IAEXXZ ; CMarkerTrack::Clear

; 146  :     if (m_fCSInitialized)

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  00029	74 0c		 je	 SHORT $L69495

; 147  :     {
; 148  : 	    DELETE_CRITICAL_SECTION(&m_CrSec);

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c0 18	 add	 eax, 24			; 00000018H
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?DeleteCriticalSection@@YGXPAX@Z ; DeleteCriticalSection
$L69495:

; 149  :     }
; 150  :     DecrementDLLCount();
; 151  : }

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 38	 add	 ecx, 56			; 00000038H
  0003d	e8 00 00 00 00	 call	 ??1CMemTrack@@QAE@XZ	; CMemTrack::~CMemTrack
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??1CMarkerTrack@@QAE@XZ ENDP				; CMarkerTrack::~CMarkerTrack
_TEXT	ENDS
PUBLIC	??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ ; `string'
PUBLIC	??_C@_0DN@LGPJDGLA@Warning?3?5Request?5to?5query?5unknow@ ; `string'
PUBLIC	_==@8
EXTRN	_IID_IDirectMusicTrack:BYTE
EXTRN	?DebugTrace@@YAXHPADZZ:NEAR			; DebugTrace
EXTRN	_DebugBreak@0:NEAR
EXTRN	_IID_IUnknown:BYTE
EXTRN	_IID_IPersistStream:BYTE
EXTRN	_IsBadReadPtr@8:NEAR
EXTRN	_IsBadWritePtr@8:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CMarkerTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??QueryInterface@CMarkerTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB DB 'C'
	DB	'MarkerTrack::QueryInterface', 00H		; `CMarkerTrack::QueryInterface'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT
??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ DB '%s: Invalid '
	DB	'pointer ppv', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT
??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ DB '%'
	DB	's: Invalid pointer (void*)&iid', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@LGPJDGLA@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT
??_C@_0DN@LGPJDGLA@Warning?3?5Request?5to?5query?5unknow@ DB 'Warning: Re'
	DB	'quest to query unknown interface on Marker Track', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?QueryInterface@CMarkerTrack@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv88 = -4
_this$ = 8
_iid$ = 12
_ppv$ = 16
?QueryInterface@CMarkerTrack@@UAGJABU_GUID@@PAPAX@Z PROC NEAR ; CMarkerTrack::QueryInterface, COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 157  : 	V_INAME(CMarkerTrack::QueryInterface);
; 158  : 	V_PTRPTR_WRITE(ppv);

  00004	6a 04		 push	 4
  00006	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $L69505
  00013	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CMarkerTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L69505:

; 159  : 	V_REFGUID(iid);

  0002c	6a 10		 push	 16			; 00000010H
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $L69509
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CMarkerTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
  00045	6a ff		 push	 -1
  00047	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69509:

; 160  : 
; 161  :    if (iid == IID_IUnknown || iid == IID_IDirectMusicTrack)

  00054	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IUnknown
  00059	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _==@8
  00062	85 c0		 test	 eax, eax
  00064	75 12		 jne	 SHORT $L69512
  00066	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack
  0006b	8b 45 0c	 mov	 eax, DWORD PTR _iid$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _==@8
  00074	85 c0		 test	 eax, eax
  00076	74 22		 je	 SHORT $L69511
$L69512:

; 162  :     {
; 163  :         *ppv = static_cast<IDirectMusicTrack*>(this);

  00078	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  0007c	74 0b		 je	 SHORT $L70231
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	83 c1 04	 add	 ecx, 4
  00084	89 4d fc	 mov	 DWORD PTR tv88[ebp], ecx
  00087	eb 07		 jmp	 SHORT $L70232
$L70231:
  00089	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$L70232:
  00090	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  00093	8b 45 fc	 mov	 eax, DWORD PTR tv88[ebp]
  00096	89 02		 mov	 DWORD PTR [edx], eax

; 164  :     } else

  00098	eb 3b		 jmp	 SHORT $L69514
$L69511:

; 165  : 	if (iid == IID_IPersistStream)

  0009a	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPersistStream
  0009f	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _==@8
  000a8	85 c0		 test	 eax, eax
  000aa	74 0a		 je	 SHORT $L69515

; 166  : 	{
; 167  :         *ppv = static_cast<IPersistStream*>(this);

  000ac	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  000af	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	89 02		 mov	 DWORD PTR [edx], eax

; 168  : 	} else

  000b4	eb 1f		 jmp	 SHORT $L69514
$L69515:

; 169  :     {
; 170  :         *ppv = NULL;

  000b6	8b 4d 10	 mov	 ecx, DWORD PTR _ppv$[ebp]
  000b9	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 171  :         Trace(4,"Warning: Request to query unknown interface on Marker Track\n");

  000bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@LGPJDGLA@Warning?3?5Request?5to?5query?5unknow@
  000c4	6a 04		 push	 4
  000c6	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000cb	83 c4 08	 add	 esp, 8

; 172  :         return E_NOINTERFACE;

  000ce	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
  000d3	eb 0e		 jmp	 SHORT $L69501
$L69514:

; 173  :     }
; 174  : 
; 175  :     reinterpret_cast<IUnknown*>(this)->AddRef();

  000d5	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	8b 02		 mov	 eax, DWORD PTR [edx]
  000da	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	51		 push	 ecx
  000de	ff 50 04	 call	 DWORD PTR [eax+4]

; 176  :     return S_OK;

  000e1	33 c0		 xor	 eax, eax
$L69501:

; 177  : }

  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@CMarkerTrack@@UAGJABU_GUID@@PAPAX@Z ENDP ; CMarkerTrack::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\guiddef.h
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8
_guidOther$ = 12
_==@8	PROC NEAR					; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  :     return IsEqualGUID(guidOne,guidOther);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IsEqualGUID@8

; 190  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:NEAR
; Function compile flags: /Odt
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8
_rguid2$ = 12
_IsEqualGUID@8 PROC NEAR				; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _memcmp
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 157  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
EXTRN	__InterlockedIncrement@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\marktrk.cpp
;	COMDAT ?AddRef@CMarkerTrack@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@CMarkerTrack@@UAGKXZ PROC NEAR			; CMarkerTrack::AddRef, COMDAT

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  :     return InterlockedIncrement(&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 183  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@CMarkerTrack@@UAGKXZ ENDP			; CMarkerTrack::AddRef
_TEXT	ENDS
PUBLIC	??_GCMarkerTrack@@QAEPAXI@Z			; CMarkerTrack::`scalar deleting destructor'
EXTRN	__InterlockedDecrement@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Release@CMarkerTrack@@UAGKXZ
_TEXT	SEGMENT
tv72 = -12
$T70246 = -8
$T70245 = -4
_this$ = 8
?Release@CMarkerTrack@@UAGKXZ PROC NEAR			; CMarkerTrack::Release, COMDAT

; 187  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 188  :     if (!InterlockedDecrement(&m_cRef))

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 10	 add	 eax, 16			; 00000010H
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	85 c0		 test	 eax, eax
  00014	75 2c		 jne	 SHORT $L69528

; 189  :     {
; 190  :         delete this;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	89 4d f8	 mov	 DWORD PTR $T70246[ebp], ecx
  0001c	8b 55 f8	 mov	 edx, DWORD PTR $T70246[ebp]
  0001f	89 55 fc	 mov	 DWORD PTR $T70245[ebp], edx
  00022	83 7d fc 00	 cmp	 DWORD PTR $T70245[ebp], 0
  00026	74 0f		 je	 SHORT $L70247
  00028	6a 01		 push	 1
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR $T70245[ebp]
  0002d	e8 00 00 00 00	 call	 ??_GCMarkerTrack@@QAEPAXI@Z
  00032	89 45 f4	 mov	 DWORD PTR tv72[ebp], eax
  00035	eb 07		 jmp	 SHORT $L70248
$L70247:
  00037	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L70248:

; 191  :         return 0;

  0003e	33 c0		 xor	 eax, eax
  00040	eb 06		 jmp	 SHORT $L69527
$L69528:

; 192  :     }
; 193  : 
; 194  :     return m_cRef;

  00042	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
$L69527:

; 195  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?Release@CMarkerTrack@@UAGKXZ ENDP			; CMarkerTrack::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCMarkerTrack@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCMarkerTrack@@QAEPAXI@Z PROC NEAR			; CMarkerTrack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMarkerTrack@@QAE@XZ	; CMarkerTrack::~CMarkerTrack
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69534
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69534:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMarkerTrack@@QAEPAXI@Z ENDP			; CMarkerTrack::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ ; `string'
EXTRN	_CLSID_DirectMusicMarkerTrack:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CMarkerTrack@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetClassID@CMarkerTrack@@UAGJPAU_GUID@@@Z@4QBDB DB 'C'
	DB	'MarkerTrack::GetClassID', 00H		; `CMarkerTrack::GetClassID'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT
??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pClassID', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetClassID@CMarkerTrack@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_pClassID$ = 12
?GetClassID@CMarkerTrack@@UAGJPAU_GUID@@@Z PROC NEAR	; CMarkerTrack::GetClassID, COMDAT

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 	V_INAME(CMarkerTrack::GetClassID);
; 203  : 	V_PTR_WRITE(pClassID, CLSID); 

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pClassID$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L69542
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetClassID@CMarkerTrack@@UAGJPAU_GUID@@@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L69542:

; 204  : 	*pClassID = CLSID_DirectMusicMarkerTrack;

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _pClassID$[ebp]
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicMarkerTrack
  00034	89 11		 mov	 DWORD PTR [ecx], edx
  00036	a1 04 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicMarkerTrack+4
  0003b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0003e	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicMarkerTrack+8
  00044	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00047	a1 0c 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicMarkerTrack+12
  0004c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 205  : 	return S_OK;

  0004f	33 c0		 xor	 eax, eax

; 206  : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?GetClassID@CMarkerTrack@@UAGJPAU_GUID@@@Z ENDP		; CMarkerTrack::GetClassID
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsDirty@CMarkerTrack@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?IsDirty@CMarkerTrack@@UAGJXZ PROC NEAR			; CMarkerTrack::IsDirty, COMDAT

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 	return S_FALSE;

  00003	b8 01 00 00 00	 mov	 eax, 1

; 214  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?IsDirty@CMarkerTrack@@UAGJXZ ENDP			; CMarkerTrack::IsDirty
_TEXT	ENDS
PUBLIC	??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ ; `string'
PUBLIC	?LoadValidStartList@CMarkerTrack@@IAEJPAVCRiffParser@@J@Z ; CMarkerTrack::LoadValidStartList
PUBLIC	?LoadPlayMarkerList@CMarkerTrack@@IAEJPAVCRiffParser@@J@Z ; CMarkerTrack::LoadPlayMarkerList
PUBLIC	??_C@_0BO@LPKHAPAF@Error?3?5Invalid?5Marker?5Track?4?6?$AA@ ; `string'
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
EXTRN	_IsBadCodePtr@4:NEAR
EXTRN	??0CRiffParser@@QAE@PAUIStream@@@Z:NEAR		; CRiffParser::CRiffParser
EXTRN	?NextChunk@CRiffParser@@QAEHPAJ@Z:NEAR		; CRiffParser::NextChunk
EXTRN	?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z:NEAR	; CRiffParser::EnterList
EXTRN	?LeaveList@CRiffParser@@QAEXXZ:NEAR		; CRiffParser::LeaveList
;	COMDAT ?__szValidateInterfaceName@?1??Load@CMarkerTrack@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Load@CMarkerTrack@@UAGJPAUIStream@@@Z@4QBDB DB 'C'
	DB	'MarkerTrack::Load', 00H			; `CMarkerTrack::Load'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT
??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pIStream', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LPKHAPAF@Error?3?5Invalid?5Marker?5Track?4?6?$AA@
CONST	SEGMENT
??_C@_0BO@LPKHAPAF@Error?3?5Invalid?5Marker?5Track?4?6?$AA@ DB 'Error: In'
	DB	'valid Marker Track.', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Load@CMarkerTrack@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT
tv139 = -108
_ckNext$69575 = -104
_hr$ = -68
_Parser$ = -64
_ckMain$ = -32
_this$ = 8
_pIStream$ = 12
?Load@CMarkerTrack@@UAGJPAUIStream@@@Z PROC NEAR	; CMarkerTrack::Load, COMDAT

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH

; 218  : 	V_INAME(CMarkerTrack::Load);
; 219  : 	V_INTERFACE(pIStream);

  00006	6a 04		 push	 4
  00008	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69556
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CMarkerTrack@@UAGJPAUIStream@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69556:
  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003b	85 c0		 test	 eax, eax
  0003d	74 19		 je	 SHORT $L69559
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CMarkerTrack@@UAGJPAUIStream@@@Z@4QBDB
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00049	6a ff		 push	 -1
  0004b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	e8 00 00 00 00	 call	 _DebugBreak@0
$L69559:
  00058	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00065	85 c0		 test	 eax, eax
  00067	74 19		 je	 SHORT $L69561
  00069	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CMarkerTrack@@UAGJPAUIStream@@@Z@4QBDB
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00073	6a ff		 push	 -1
  00075	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	e8 00 00 00 00	 call	 _DebugBreak@0
$L69561:

; 220  : 
; 221  :     CRiffParser Parser(pIStream);

  00082	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00085	50		 push	 eax
  00086	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  00089	e8 00 00 00 00	 call	 ??0CRiffParser@@QAE@PAUIStream@@@Z ; CRiffParser::CRiffParser

; 222  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	83 c1 18	 add	 ecx, 24			; 00000018H
  00094	51		 push	 ecx
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 223  : 	m_dwValidate++; // used to validate state data that's out there

  0009b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0009e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000a1	83 c0 01	 add	 eax, 1
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 224  :     RIFFIO ckMain;
; 225  : 
; 226  :     HRESULT hr = S_OK;

  000aa	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 227  : 
; 228  :     Parser.EnterList(&ckMain);  

  000b1	8d 55 e0	 lea	 edx, DWORD PTR _ckMain$[ebp]
  000b4	52		 push	 edx
  000b5	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000b8	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList

; 229  :     if (Parser.NextChunk(&hr) && (ckMain.fccType == DMUS_FOURCC_MARKERTRACK_LIST))

  000bd	8d 45 bc	 lea	 eax, DWORD PTR _hr$[ebp]
  000c0	50		 push	 eax
  000c1	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000c4	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  000c9	85 c0		 test	 eax, eax
  000cb	74 7b		 je	 SHORT $L69574
  000cd	81 7d e8 4d 41
	52 4b		 cmp	 DWORD PTR _ckMain$[ebp+8], 1263681869 ; 4b52414dH
  000d4	75 72		 jne	 SHORT $L69574

; 230  :     {
; 231  :         Clear();

  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000d9	e8 00 00 00 00	 call	 ?Clear@CMarkerTrack@@IAEXXZ ; CMarkerTrack::Clear

; 232  : 	    RIFFIO ckNext;    // Descends into the children chunks.
; 233  :         Parser.EnterList(&ckNext);

  000de	8d 4d 98	 lea	 ecx, DWORD PTR _ckNext$69575[ebp]
  000e1	51		 push	 ecx
  000e2	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000e5	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L69577:

; 234  :         while (Parser.NextChunk(&hr))

  000ea	8d 55 bc	 lea	 edx, DWORD PTR _hr$[ebp]
  000ed	52		 push	 edx
  000ee	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000f1	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  000f6	85 c0		 test	 eax, eax
  000f8	74 44		 je	 SHORT $L69578

; 235  :         {
; 236  : 		    switch(ckNext.ckid)
; 237  : 		    {

  000fa	8b 45 98	 mov	 eax, DWORD PTR _ckNext$69575[ebp]
  000fd	89 45 94	 mov	 DWORD PTR tv139[ebp], eax
  00100	81 7d 94 76 61
	6c 73		 cmp	 DWORD PTR tv139[ebp], 1936482678 ; 736c6176H
  00107	74 0b		 je	 SHORT $L69591
  00109	81 7d 94 70 6c
	61 79		 cmp	 DWORD PTR tv139[ebp], 2036427888 ; 79616c70H
  00110	74 17		 je	 SHORT $L69600
  00112	eb 28		 jmp	 SHORT $L69580
$L69591:

; 238  :             case DMUS_FOURCC_VALIDSTART_CHUNK :
; 239  :                 hr = LoadValidStartList(&Parser,ckNext.cksize);

  00114	8b 4d 9c	 mov	 ecx, DWORD PTR _ckNext$69575[ebp+4]
  00117	51		 push	 ecx
  00118	8d 55 c0	 lea	 edx, DWORD PTR _Parser$[ebp]
  0011b	52		 push	 edx
  0011c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	e8 00 00 00 00	 call	 ?LoadValidStartList@CMarkerTrack@@IAEJPAVCRiffParser@@J@Z ; CMarkerTrack::LoadValidStartList
  00124	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 240  :                 break;

  00127	eb 13		 jmp	 SHORT $L69580
$L69600:

; 241  :             case DMUS_FOURCC_PLAYMARKER_CHUNK :
; 242  :                 hr = LoadPlayMarkerList(&Parser,ckNext.cksize);

  00129	8b 45 9c	 mov	 eax, DWORD PTR _ckNext$69575[ebp+4]
  0012c	50		 push	 eax
  0012d	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  00130	51		 push	 ecx
  00131	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	e8 00 00 00 00	 call	 ?LoadPlayMarkerList@CMarkerTrack@@IAEJPAVCRiffParser@@J@Z ; CMarkerTrack::LoadPlayMarkerList
  00139	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax
$L69580:

; 243  :                 break;
; 244  :             }    
; 245  :         }

  0013c	eb ac		 jmp	 SHORT $L69577
$L69578:

; 246  :         Parser.LeaveList();

  0013e	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  00141	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 247  :     }
; 248  :     else

  00146	eb 16		 jmp	 SHORT $L69601
$L69574:

; 249  :     {
; 250  :         Trace(1,"Error: Invalid Marker Track.\n");

  00148	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LPKHAPAF@Error?3?5Invalid?5Marker?5Track?4?6?$AA@
  0014d	6a 01		 push	 1
  0014f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00154	83 c4 08	 add	 esp, 8

; 251  :         hr = DMUS_E_CHUNKNOTFOUND;

  00157	c7 45 bc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L69601:

; 252  :     }
; 253  :     Parser.LeaveList();

  0015e	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  00161	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 254  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  00166	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00169	83 c2 18	 add	 edx, 24			; 00000018H
  0016c	52		 push	 edx
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 255  : 	return hr;

  00173	8b 45 bc	 mov	 eax, DWORD PTR _hr$[ebp]

; 256  : }

  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
?Load@CMarkerTrack@@UAGJPAUIStream@@@Z ENDP		; CMarkerTrack::Load
_TEXT	ENDS
EXTRN	?Read@CRiffParser@@QAEJPAXK@Z:NEAR		; CRiffParser::Read
EXTRN	?Skip@CRiffParser@@QAEJK@Z:NEAR			; CRiffParser::Skip
; Function compile flags: /Odt
;	COMDAT ?LoadPlayMarkerList@CMarkerTrack@@IAEJPAVCRiffParser@@J@Z
_TEXT	SEGMENT
tv81 = -36
_this$ = -32
$T70267 = -28
$T70264 = -24
_pNew$69627 = -20
_dwRead$69615 = -16
_dwSeek$69616 = -12
_hr$ = -8
_dwSubSize$ = -4
_pParser$ = 8
_lChunkSize$ = 12
?LoadPlayMarkerList@CMarkerTrack@@IAEJPAVCRiffParser@@J@Z PROC NEAR ; CMarkerTrack::LoadPlayMarkerList, COMDAT
; _this$ = ecx

; 259  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 260  : 	HRESULT hr;
; 261  : 	// copy contents of the stream into the list.
; 262  : 	DWORD dwSubSize;
; 263  : 	// read in the size of the data structures
; 264  : 	hr = pParser->Read( &dwSubSize, sizeof(DWORD));

  00009	6a 04		 push	 4
  0000b	8d 45 fc	 lea	 eax, DWORD PTR _dwSubSize$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00012	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  00017	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 265  :     if (SUCCEEDED(hr))

  0001a	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0001e	0f 8c 0e 01 00
	00		 jl	 $L69613

; 266  :     {
; 267  : 	    lChunkSize -= sizeof(DWORD);

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _lChunkSize$[ebp]
  00027	83 e9 04	 sub	 ecx, 4
  0002a	89 4d 0c	 mov	 DWORD PTR _lChunkSize$[ebp], ecx

; 268  : 
; 269  : 	    DWORD dwRead, dwSeek;
; 270  : 	    if( dwSubSize > sizeof(DMUS_IO_PLAY_MARKER) )

  0002d	83 7d fc 04	 cmp	 DWORD PTR _dwSubSize$[ebp], 4
  00031	76 12		 jbe	 SHORT $L69618

; 271  : 	    {
; 272  : 		    dwRead = sizeof(DMUS_IO_PLAY_MARKER);

  00033	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR _dwRead$69615[ebp], 4

; 273  : 		    dwSeek = dwSubSize - dwRead;

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _dwSubSize$[ebp]
  0003d	2b 55 f0	 sub	 edx, DWORD PTR _dwRead$69615[ebp]
  00040	89 55 f4	 mov	 DWORD PTR _dwSeek$69616[ebp], edx

; 274  : 	    }
; 275  : 	    else

  00043	eb 0d		 jmp	 SHORT $L69620
$L69618:

; 276  : 	    {
; 277  : 		    dwRead = dwSubSize;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _dwSubSize$[ebp]
  00048	89 45 f0	 mov	 DWORD PTR _dwRead$69615[ebp], eax

; 278  : 		    dwSeek = 0;

  0004b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwSeek$69616[ebp], 0
$L69620:

; 279  : 	    }
; 280  : 	    if( 0 == dwRead )

  00052	83 7d f0 00	 cmp	 DWORD PTR _dwRead$69615[ebp], 0
  00056	75 1b		 jne	 SHORT $L69625

; 281  : 	    {
; 282  :             Trace(1,"Error: Invalid Marker Track.\n");

  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LPKHAPAF@Error?3?5Invalid?5Marker?5Track?4?6?$AA@
  0005d	6a 01		 push	 1
  0005f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00064	83 c4 08	 add	 esp, 8

; 283  : 		    hr = DMUS_E_CANNOTREAD;

  00067	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 284  : 	    }
; 285  :         else

  0006e	e9 bf 00 00 00	 jmp	 $L69613
$L69625:

; 286  :         {
; 287  : 	        while( lChunkSize > 0 )

  00073	83 7d 0c 00	 cmp	 DWORD PTR _lChunkSize$[ebp], 0
  00077	0f 8e aa 00 00
	00		 jle	 $L69626

; 288  : 	        {
; 289  :                 CPlayMarkerItem *pNew = new CPlayMarkerItem;

  0007d	6a 08		 push	 8
  0007f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00084	83 c4 04	 add	 esp, 4
  00087	89 45 e8	 mov	 DWORD PTR $T70264[ebp], eax
  0008a	83 7d e8 00	 cmp	 DWORD PTR $T70264[ebp], 0
  0008e	74 0d		 je	 SHORT $L70265
  00090	8b 4d e8	 mov	 ecx, DWORD PTR $T70264[ebp]
  00093	e8 00 00 00 00	 call	 ??0CPlayMarkerItem@@QAE@XZ
  00098	89 45 dc	 mov	 DWORD PTR tv81[ebp], eax
  0009b	eb 07		 jmp	 SHORT $L70266
$L70265:
  0009d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$L70266:
  000a4	8b 4d dc	 mov	 ecx, DWORD PTR tv81[ebp]
  000a7	89 4d ec	 mov	 DWORD PTR _pNew$69627[ebp], ecx

; 290  :                 if (pNew)

  000aa	83 7d ec 00	 cmp	 DWORD PTR _pNew$69627[ebp], 0
  000ae	74 72		 je	 SHORT $L69630

; 291  :                 {
; 292  : 		            if( FAILED( pParser->Read( &pNew->m_PlayMarker, dwRead)))

  000b0	8b 55 f0	 mov	 edx, DWORD PTR _dwRead$69615[ebp]
  000b3	52		 push	 edx
  000b4	8b 45 ec	 mov	 eax, DWORD PTR _pNew$69627[ebp]
  000b7	83 c0 04	 add	 eax, 4
  000ba	50		 push	 eax
  000bb	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000be	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  000c3	85 c0		 test	 eax, eax
  000c5	7d 1b		 jge	 SHORT $L69632

; 293  : 		            {
; 294  :                         delete pNew;

  000c7	8b 4d ec	 mov	 ecx, DWORD PTR _pNew$69627[ebp]
  000ca	89 4d e4	 mov	 DWORD PTR $T70267[ebp], ecx
  000cd	8b 55 e4	 mov	 edx, DWORD PTR $T70267[ebp]
  000d0	52		 push	 edx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	83 c4 04	 add	 esp, 4

; 295  : 			            hr = DMUS_E_CANNOTREAD;

  000d9	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 296  : 			            break;

  000e0	eb 45		 jmp	 SHORT $L69626
$L69632:

; 297  : 		            }
; 298  :                     m_PlayMarkerList.AddHead(pNew); // Insert in reverse order for speed.

  000e2	8b 45 ec	 mov	 eax, DWORD PTR _pNew$69627[ebp]
  000e5	50		 push	 eax
  000e6	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000ec	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead

; 299  : 		            lChunkSize -= dwRead;

  000f1	8b 4d 0c	 mov	 ecx, DWORD PTR _lChunkSize$[ebp]
  000f4	2b 4d f0	 sub	 ecx, DWORD PTR _dwRead$69615[ebp]
  000f7	89 4d 0c	 mov	 DWORD PTR _lChunkSize$[ebp], ecx

; 300  : 		            if( dwSeek )

  000fa	83 7d f4 00	 cmp	 DWORD PTR _dwSeek$69616[ebp], 0
  000fe	74 22		 je	 SHORT $L69630

; 301  : 		            {
; 302  : 			            if( FAILED( pParser->Skip(dwSeek)))

  00100	8b 55 f4	 mov	 edx, DWORD PTR _dwSeek$69616[ebp]
  00103	52		 push	 edx
  00104	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00107	e8 00 00 00 00	 call	 ?Skip@CRiffParser@@QAEJK@Z ; CRiffParser::Skip
  0010c	85 c0		 test	 eax, eax
  0010e	7d 09		 jge	 SHORT $L69637

; 303  : 			            {
; 304  : 				            hr = DMUS_E_CANNOTSEEK;

  00110	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 305  : 				            break;

  00117	eb 0e		 jmp	 SHORT $L69626
$L69637:

; 306  : 			            }
; 307  : 			            lChunkSize -= dwSeek;

  00119	8b 45 0c	 mov	 eax, DWORD PTR _lChunkSize$[ebp]
  0011c	2b 45 f4	 sub	 eax, DWORD PTR _dwSeek$69616[ebp]
  0011f	89 45 0c	 mov	 DWORD PTR _lChunkSize$[ebp], eax
$L69630:

; 308  : 		            }
; 309  : 		        }
; 310  : 	        }

  00122	e9 4c ff ff ff	 jmp	 $L69625
$L69626:

; 311  :             m_PlayMarkerList.Reverse(); // Reverse to put in time order.

  00127	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0012a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0012d	e8 00 00 00 00	 call	 ?Reverse@AList@@QAEXXZ	; AList::Reverse
$L69613:

; 312  :         }
; 313  :     }
; 314  : 	return hr;

  00132	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 315  : }

  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 08 00	 ret	 8
?LoadPlayMarkerList@CMarkerTrack@@IAEJPAVCRiffParser@@J@Z ENDP ; CMarkerTrack::LoadPlayMarkerList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?LoadValidStartList@CMarkerTrack@@IAEJPAVCRiffParser@@J@Z
_TEXT	SEGMENT
tv79 = -36
_this$ = -32
$T70274 = -28
$T70271 = -24
_pNew$69662 = -20
_dwRead$69650 = -16
_dwSeek$69651 = -12
_hr$ = -8
_dwSubSize$ = -4
_pParser$ = 8
_lChunkSize$ = 12
?LoadValidStartList@CMarkerTrack@@IAEJPAVCRiffParser@@J@Z PROC NEAR ; CMarkerTrack::LoadValidStartList, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 319  :     HRESULT hr;
; 320  : 	// copy contents of the stream into the list.
; 321  : 	DWORD dwSubSize;
; 322  : 	// read in the size of the data structures
; 323  : 	hr = pParser->Read( &dwSubSize, sizeof(DWORD));

  00009	6a 04		 push	 4
  0000b	8d 45 fc	 lea	 eax, DWORD PTR _dwSubSize$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00012	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  00017	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 324  :     if (SUCCEEDED(hr))

  0001a	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0001e	0f 8c ff 00 00
	00		 jl	 $L69648

; 325  :     {	
; 326  : 	    lChunkSize -= sizeof(DWORD);

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _lChunkSize$[ebp]
  00027	83 e9 04	 sub	 ecx, 4
  0002a	89 4d 0c	 mov	 DWORD PTR _lChunkSize$[ebp], ecx

; 327  : 
; 328  : 	    DWORD dwRead, dwSeek;
; 329  : 	    if( dwSubSize > sizeof(DMUS_IO_VALID_START) )

  0002d	83 7d fc 04	 cmp	 DWORD PTR _dwSubSize$[ebp], 4
  00031	76 12		 jbe	 SHORT $L69653

; 330  : 	    {
; 331  : 		    dwRead = sizeof(DMUS_IO_VALID_START);

  00033	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR _dwRead$69650[ebp], 4

; 332  : 		    dwSeek = dwSubSize - dwRead;

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _dwSubSize$[ebp]
  0003d	2b 55 f0	 sub	 edx, DWORD PTR _dwRead$69650[ebp]
  00040	89 55 f4	 mov	 DWORD PTR _dwSeek$69651[ebp], edx

; 333  : 	    }
; 334  : 	    else

  00043	eb 0d		 jmp	 SHORT $L69655
$L69653:

; 335  : 	    {
; 336  : 		    dwRead = dwSubSize;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _dwSubSize$[ebp]
  00048	89 45 f0	 mov	 DWORD PTR _dwRead$69650[ebp], eax

; 337  : 		    dwSeek = 0;

  0004b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwSeek$69651[ebp], 0
$L69655:

; 338  : 	    }
; 339  : 	    if( 0 == dwRead )

  00052	83 7d f0 00	 cmp	 DWORD PTR _dwRead$69650[ebp], 0
  00056	75 0c		 jne	 SHORT $L69660

; 340  : 	    {
; 341  : 		    hr = DMUS_E_CANNOTREAD;

  00058	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 342  : 	    }
; 343  :         else

  0005f	e9 bf 00 00 00	 jmp	 $L69648
$L69660:

; 344  :         {
; 345  : 	        while( lChunkSize > 0 )

  00064	83 7d 0c 00	 cmp	 DWORD PTR _lChunkSize$[ebp], 0
  00068	0f 8e aa 00 00
	00		 jle	 $L69661

; 346  : 	        {
; 347  :                 CValidStartItem *pNew = new CValidStartItem;

  0006e	6a 08		 push	 8
  00070	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00075	83 c4 04	 add	 esp, 4
  00078	89 45 e8	 mov	 DWORD PTR $T70271[ebp], eax
  0007b	83 7d e8 00	 cmp	 DWORD PTR $T70271[ebp], 0
  0007f	74 0d		 je	 SHORT $L70272
  00081	8b 4d e8	 mov	 ecx, DWORD PTR $T70271[ebp]
  00084	e8 00 00 00 00	 call	 ??0CValidStartItem@@QAE@XZ
  00089	89 45 dc	 mov	 DWORD PTR tv79[ebp], eax
  0008c	eb 07		 jmp	 SHORT $L70273
$L70272:
  0008e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$L70273:
  00095	8b 4d dc	 mov	 ecx, DWORD PTR tv79[ebp]
  00098	89 4d ec	 mov	 DWORD PTR _pNew$69662[ebp], ecx

; 348  :                 if (pNew)

  0009b	83 7d ec 00	 cmp	 DWORD PTR _pNew$69662[ebp], 0
  0009f	74 72		 je	 SHORT $L69665

; 349  :                 {
; 350  : 		            if( FAILED( pParser->Read( &pNew->m_ValidStart, dwRead)))

  000a1	8b 55 f0	 mov	 edx, DWORD PTR _dwRead$69650[ebp]
  000a4	52		 push	 edx
  000a5	8b 45 ec	 mov	 eax, DWORD PTR _pNew$69662[ebp]
  000a8	83 c0 04	 add	 eax, 4
  000ab	50		 push	 eax
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000af	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  000b4	85 c0		 test	 eax, eax
  000b6	7d 1b		 jge	 SHORT $L69667

; 351  : 		            {
; 352  :                         delete pNew;

  000b8	8b 4d ec	 mov	 ecx, DWORD PTR _pNew$69662[ebp]
  000bb	89 4d e4	 mov	 DWORD PTR $T70274[ebp], ecx
  000be	8b 55 e4	 mov	 edx, DWORD PTR $T70274[ebp]
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c7	83 c4 04	 add	 esp, 4

; 353  : 			            hr = DMUS_E_CANNOTREAD;

  000ca	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 354  : 			            break;

  000d1	eb 45		 jmp	 SHORT $L69661
$L69667:

; 355  : 		            }
; 356  :                     m_ValidStartList.AddHead(pNew); // Insert in reverse order for speed.

  000d3	8b 45 ec	 mov	 eax, DWORD PTR _pNew$69662[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	83 c1 08	 add	 ecx, 8
  000dd	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead

; 357  : 		            lChunkSize -= dwRead;

  000e2	8b 4d 0c	 mov	 ecx, DWORD PTR _lChunkSize$[ebp]
  000e5	2b 4d f0	 sub	 ecx, DWORD PTR _dwRead$69650[ebp]
  000e8	89 4d 0c	 mov	 DWORD PTR _lChunkSize$[ebp], ecx

; 358  : 		            if( dwSeek )

  000eb	83 7d f4 00	 cmp	 DWORD PTR _dwSeek$69651[ebp], 0
  000ef	74 22		 je	 SHORT $L69665

; 359  : 		            {
; 360  : 			            if( FAILED( pParser->Skip(dwSeek)))

  000f1	8b 55 f4	 mov	 edx, DWORD PTR _dwSeek$69651[ebp]
  000f4	52		 push	 edx
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000f8	e8 00 00 00 00	 call	 ?Skip@CRiffParser@@QAEJK@Z ; CRiffParser::Skip
  000fd	85 c0		 test	 eax, eax
  000ff	7d 09		 jge	 SHORT $L69672

; 361  : 			            {
; 362  : 				            hr = DMUS_E_CANNOTSEEK;

  00101	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 363  : 				            break;

  00108	eb 0e		 jmp	 SHORT $L69661
$L69672:

; 364  : 			            }
; 365  : 			            lChunkSize -= dwSeek;

  0010a	8b 45 0c	 mov	 eax, DWORD PTR _lChunkSize$[ebp]
  0010d	2b 45 f4	 sub	 eax, DWORD PTR _dwSeek$69651[ebp]
  00110	89 45 0c	 mov	 DWORD PTR _lChunkSize$[ebp], eax
$L69665:

; 366  : 		            }
; 367  : 		        }
; 368  : 	        }

  00113	e9 4c ff ff ff	 jmp	 $L69660
$L69661:

; 369  :             m_ValidStartList.Reverse(); // Reverse to put in time order.

  00118	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0011b	83 c1 08	 add	 ecx, 8
  0011e	e8 00 00 00 00	 call	 ?Reverse@AList@@QAEXXZ	; AList::Reverse
$L69648:

; 370  :         }
; 371  :     }
; 372  : 	return hr;

  00123	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 373  : }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
?LoadValidStartList@CMarkerTrack@@IAEJPAVCRiffParser@@J@Z ENDP ; CMarkerTrack::LoadValidStartList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Save@CMarkerTrack@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT
_this$ = 8
_pIStream$ = 12
_fClearDirty$ = 16
?Save@CMarkerTrack@@UAGJPAUIStream@@H@Z PROC NEAR	; CMarkerTrack::Save, COMDAT

; 376  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 377  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 378  : }

  00008	5d		 pop	 ebp
  00009	c2 0c 00	 ret	 12			; 0000000cH
?Save@CMarkerTrack@@UAGJPAUIStream@@H@Z ENDP		; CMarkerTrack::Save
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CMarkerTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT
_this$ = 8
_pcbSize$ = 12
?GetSizeMax@CMarkerTrack@@UAGJPAT_ULARGE_INTEGER@@@Z PROC NEAR ; CMarkerTrack::GetSizeMax, COMDAT

; 381  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 382  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 383  : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?GetSizeMax@CMarkerTrack@@UAGJPAT_ULARGE_INTEGER@@@Z ENDP ; CMarkerTrack::GetSizeMax
_TEXT	ENDS
PUBLIC	??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@ ; `string'
EXTRN	_GUID_Valid_Start_Time:BYTE
EXTRN	_GUID_Play_Marker:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??IsParamSupported@CMarkerTrack@@UAGJABU_GUID@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??IsParamSupported@CMarkerTrack@@UAGJABU_GUID@@@Z@4QBDB DB 'C'
	DB	'MarkerTrack::IsParamSupported', 00H		; `CMarkerTrack::IsParamSupported'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
CONST	SEGMENT
??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@ DB '%'
	DB	's: Invalid pointer (void*)&rguid', 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?IsParamSupported@CMarkerTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguid$ = 12
?IsParamSupported@CMarkerTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CMarkerTrack::IsParamSupported, COMDAT

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 390  : 	V_INAME(CMarkerTrack::IsParamSupported);
; 391  : 	V_REFGUID(rguid);

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L69693
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??IsParamSupported@CMarkerTrack@@UAGJABU_GUID@@@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L69693:

; 392  : 
; 393  :     if ((rguid == GUID_Valid_Start_Time) || 
; 394  :         (rguid == GUID_Play_Marker))

  0002b	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_Valid_Start_Time
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _rguid$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _==@8
  00039	85 c0		 test	 eax, eax
  0003b	75 12		 jne	 SHORT $L69696
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_Play_Marker
  00042	8b 55 0c	 mov	 edx, DWORD PTR _rguid$[ebp]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 _==@8
  0004b	85 c0		 test	 eax, eax
  0004d	74 04		 je	 SHORT $L69695
$L69696:

; 395  :         return S_OK;

  0004f	33 c0		 xor	 eax, eax
  00051	eb 05		 jmp	 SHORT $L69688
$L69695:

; 396  : 	return DMUS_E_TYPE_UNSUPPORTED;

  00053	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
$L69688:

; 397  : }

  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
?IsParamSupported@CMarkerTrack@@UAGJABU_GUID@@@Z ENDP	; CMarkerTrack::IsParamSupported
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Init@CMarkerTrack@@UAGJPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT
_this$ = 8
_pSegment$ = 12
?Init@CMarkerTrack@@UAGJPAUIDirectMusicSegment@@@Z PROC NEAR ; CMarkerTrack::Init, COMDAT

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  : 	return S_OK;

  00003	33 c0		 xor	 eax, eax

; 405  : }

  00005	5d		 pop	 ebp
  00006	c2 08 00	 ret	 8
?Init@CMarkerTrack@@UAGJPAUIDirectMusicSegment@@@Z ENDP	; CMarkerTrack::Init
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?InitPlay@CMarkerTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT
_this$ = 8
_pSegmentState$ = 12
_pPerformance$ = 16
_ppStateData$ = 20
_dwTrackID$ = 24
_dwFlags$ = 28
?InitPlay@CMarkerTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z PROC NEAR ; CMarkerTrack::InitPlay, COMDAT

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 414  : 	return S_OK;

  00003	33 c0		 xor	 eax, eax

; 415  : }

  00005	5d		 pop	 ebp
  00006	c2 18 00	 ret	 24			; 00000018H
?InitPlay@CMarkerTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ENDP ; CMarkerTrack::InitPlay
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?EndPlay@CMarkerTrack@@UAGJPAX@Z
_TEXT	SEGMENT
_this$ = 8
_pStateData$ = 12
?EndPlay@CMarkerTrack@@UAGJPAX@Z PROC NEAR		; CMarkerTrack::EndPlay, COMDAT

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 420  : 	return S_OK;

  00003	33 c0		 xor	 eax, eax

; 421  : }

  00005	5d		 pop	 ebp
  00006	c2 08 00	 ret	 8
?EndPlay@CMarkerTrack@@UAGJPAX@Z ENDP			; CMarkerTrack::EndPlay
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Play@CMarkerTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT
_this$ = 8
_pStateData$ = 12
_mtStart$ = 16
_mtEnd$ = 20
_mtOffset$ = 24
_dwFlags$ = 28
_pPerf$ = 32
_pSegSt$ = 36
_dwVirtualID$ = 40
?Play@CMarkerTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z PROC NEAR ; CMarkerTrack::Play, COMDAT

; 433  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 434  : 	return S_OK;

  00003	33 c0		 xor	 eax, eax

; 435  : }

  00005	5d		 pop	 ebp
  00006	c2 24 00	 ret	 36			; 00000024H
?Play@CMarkerTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ENDP ; CMarkerTrack::Play
_TEXT	ENDS
PUBLIC	??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@ ; `string'
PUBLIC	??_C@_0DO@DEBCPCK@Error?3?5MarkerTrack?5does?5not?5supp@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??GetParam@CMarkerTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetParam@CMarkerTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB DB 'C'
	DB	'MarkerTrack::GetParam', 00H			; `CMarkerTrack::GetParam'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@
CONST	SEGMENT
??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@ DB '%s: Inval'
	DB	'id pointer pmtNext', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@DEBCPCK@Error?3?5MarkerTrack?5does?5not?5supp@
CONST	SEGMENT
??_C@_0DO@DEBCPCK@Error?3?5MarkerTrack?5does?5not?5supp@ DB 'Error: Marke'
	DB	'rTrack does not support requested GetParam call.', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetParam@CMarkerTrack@@UAGJABU_GUID@@JPAJPAX@Z
_TEXT	SEGMENT
_pPlayMarkerData$69774 = -24
_pScan$69776 = -20
_pNext$69777 = -16
_pValidStartData$69755 = -12
_pScan$69757 = -8
_hr$ = -4
_this$ = 8
_rguid$ = 12
_mtTime$ = 16
_pmtNext$ = 20
_pData$ = 24
?GetParam@CMarkerTrack@@UAGJABU_GUID@@JPAJPAX@Z PROC NEAR ; CMarkerTrack::GetParam, COMDAT

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 443  : 	V_INAME(CMarkerTrack::GetParam);
; 444  : 	V_PTR_WRITE_OPT(pmtNext,MUSIC_TIME);

  00006	83 7d 14 00	 cmp	 DWORD PTR _pmtNext$[ebp], 0
  0000a	74 28		 je	 SHORT $L69739
  0000c	6a 04		 push	 4
  0000e	8b 45 14	 mov	 eax, DWORD PTR _pmtNext$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00017	85 c0		 test	 eax, eax
  00019	74 19		 je	 SHORT $L69739
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetParam@CMarkerTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@
  00025	6a ff		 push	 -1
  00027	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69739:

; 445  : 	V_REFGUID(rguid);

  00034	6a 10		 push	 16			; 00000010H
  00036	8b 4d 0c	 mov	 ecx, DWORD PTR _rguid$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003f	85 c0		 test	 eax, eax
  00041	74 19		 je	 SHORT $L69745
  00043	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetParam@CMarkerTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB
  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
  0004d	6a ff		 push	 -1
  0004f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	e8 00 00 00 00	 call	 _DebugBreak@0
$L69745:

; 446  : 
; 447  : 	HRESULT hr = DMUS_E_GET_UNSUPPORTED;

  0005c	c7 45 fc 24 11
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005397212 ; 88781124H

; 448  :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00063	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00066	83 c2 14	 add	 edx, 20			; 00000014H
  00069	52		 push	 edx
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 449  : 	if( NULL == pData )

  00070	83 7d 18 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00074	75 0c		 jne	 SHORT $L69751

; 450  : 	{
; 451  : 		hr = E_POINTER;

  00076	c7 45 fc 03 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467261 ; 80004003H

; 452  : 	}
; 453  : 	else if( GUID_Valid_Start_Time == rguid )

  0007d	e9 66 01 00 00	 jmp	 $L69753
$L69751:
  00082	8b 45 0c	 mov	 eax, DWORD PTR _rguid$[ebp]
  00085	50		 push	 eax
  00086	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_Valid_Start_Time
  0008b	e8 00 00 00 00	 call	 _==@8
  00090	85 c0		 test	 eax, eax
  00092	0f 84 95 00 00
	00		 je	 $L69754

; 454  : 	{
; 455  :         DMUS_VALID_START_PARAM* pValidStartData = (DMUS_VALID_START_PARAM*)pData;

  00098	8b 4d 18	 mov	 ecx, DWORD PTR _pData$[ebp]
  0009b	89 4d f4	 mov	 DWORD PTR _pValidStartData$69755[ebp], ecx

; 456  : 		CValidStartItem* pScan = m_ValidStartList.GetHead();

  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	83 c1 04	 add	 ecx, 4
  000a4	e8 00 00 00 00	 call	 ?GetHead@CValidStartList@@QAEPAVCValidStartItem@@XZ ; CValidStartList::GetHead
  000a9	89 45 f8	 mov	 DWORD PTR _pScan$69757[ebp], eax

; 457  : 		for (; pScan; pScan = pScan->GetNext())

  000ac	eb 0b		 jmp	 SHORT $L69758
$L69759:
  000ae	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$69757[ebp]
  000b1	e8 00 00 00 00	 call	 ?GetNext@CValidStartItem@@QAEPAV1@XZ ; CValidStartItem::GetNext
  000b6	89 45 f8	 mov	 DWORD PTR _pScan$69757[ebp], eax
$L69758:
  000b9	83 7d f8 00	 cmp	 DWORD PTR _pScan$69757[ebp], 0
  000bd	74 1d		 je	 SHORT $L69760

; 458  : 		{
; 459  : 			if (pScan->m_ValidStart.mtTime >= mtTime)

  000bf	8b 55 f8	 mov	 edx, DWORD PTR _pScan$69757[ebp]
  000c2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c5	3b 45 10	 cmp	 eax, DWORD PTR _mtTime$[ebp]
  000c8	7c 10		 jl	 SHORT $L69761

; 460  : 			{
; 461  :         		pValidStartData->mtTime = pScan->m_ValidStart.mtTime - mtTime;

  000ca	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$69757[ebp]
  000cd	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d0	2b 55 10	 sub	 edx, DWORD PTR _mtTime$[ebp]
  000d3	8b 45 f4	 mov	 eax, DWORD PTR _pValidStartData$69755[ebp]
  000d6	89 10		 mov	 DWORD PTR [eax], edx

; 462  : 				break;

  000d8	eb 02		 jmp	 SHORT $L69760
$L69761:

; 463  : 			}
; 464  : 		}

  000da	eb d2		 jmp	 SHORT $L69759
$L69760:

; 465  :         if (pScan)

  000dc	83 7d f8 00	 cmp	 DWORD PTR _pScan$69757[ebp], 0
  000e0	74 3f		 je	 SHORT $L69762

; 466  :         {
; 467  :  		    if (pmtNext)

  000e2	83 7d 14 00	 cmp	 DWORD PTR _pmtNext$[ebp], 0
  000e6	74 30		 je	 SHORT $L69763

; 468  : 		    {
; 469  : 		        if (pScan && (pScan = pScan->GetNext()))

  000e8	83 7d f8 00	 cmp	 DWORD PTR _pScan$69757[ebp], 0
  000ec	74 21		 je	 SHORT $L69764
  000ee	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$69757[ebp]
  000f1	e8 00 00 00 00	 call	 ?GetNext@CValidStartItem@@QAEPAV1@XZ ; CValidStartItem::GetNext
  000f6	89 45 f8	 mov	 DWORD PTR _pScan$69757[ebp], eax
  000f9	83 7d f8 00	 cmp	 DWORD PTR _pScan$69757[ebp], 0
  000fd	74 10		 je	 SHORT $L69764

; 470  : 		        {
; 471  :                     *pmtNext = pScan->m_ValidStart.mtTime - mtTime;

  000ff	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$69757[ebp]
  00102	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00105	2b 55 10	 sub	 edx, DWORD PTR _mtTime$[ebp]
  00108	8b 45 14	 mov	 eax, DWORD PTR _pmtNext$[ebp]
  0010b	89 10		 mov	 DWORD PTR [eax], edx

; 472  : 			    }
; 473  :                 else

  0010d	eb 09		 jmp	 SHORT $L69763
$L69764:

; 474  :                 {
; 475  :         		    *pmtNext = 0;

  0010f	8b 4d 14	 mov	 ecx, DWORD PTR _pmtNext$[ebp]
  00112	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L69763:

; 476  :                 }
; 477  :             }
; 478  : 		    hr = S_OK;

  00118	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 479  :         }
; 480  :         else

  0011f	eb 07		 jmp	 SHORT $L69767
$L69762:

; 481  :         {
; 482  :             hr = DMUS_E_NOT_FOUND;

  00121	c7 45 fc 61 11
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005397151 ; 88781161H
$L69767:

; 483  :         }
; 484  :     }
; 485  : 	else if( GUID_Play_Marker == rguid )

  00128	e9 bb 00 00 00	 jmp	 $L69753
$L69754:
  0012d	8b 55 0c	 mov	 edx, DWORD PTR _rguid$[ebp]
  00130	52		 push	 edx
  00131	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_Play_Marker
  00136	e8 00 00 00 00	 call	 _==@8
  0013b	85 c0		 test	 eax, eax
  0013d	0f 84 a5 00 00
	00		 je	 $L69753

; 486  : 	{
; 487  :         // This is a little different. The marker should be the one in existence
; 488  :         // BEFORE, not after the requested time. 
; 489  :         DMUS_PLAY_MARKER_PARAM* pPlayMarkerData = (DMUS_PLAY_MARKER_PARAM*)pData;

  00143	8b 45 18	 mov	 eax, DWORD PTR _pData$[ebp]
  00146	89 45 e8	 mov	 DWORD PTR _pPlayMarkerData$69774[ebp], eax

; 490  : 		CPlayMarkerItem* pScan = m_PlayMarkerList.GetHead();

  00149	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0014c	83 c1 08	 add	 ecx, 8
  0014f	e8 00 00 00 00	 call	 ?GetHead@CPlayMarkerList@@QAEPAVCPlayMarkerItem@@XZ ; CPlayMarkerList::GetHead
  00154	89 45 ec	 mov	 DWORD PTR _pScan$69776[ebp], eax

; 491  :         CPlayMarkerItem* pNext;
; 492  :         // For fallback, treat it as if there were a marker at the start of the segment, but return S_FALSE.
; 493  :         hr = S_FALSE;

  00157	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 1

; 494  :         pPlayMarkerData->mtTime = -mtTime;

  0015e	8b 4d 10	 mov	 ecx, DWORD PTR _mtTime$[ebp]
  00161	f7 d9		 neg	 ecx
  00163	8b 55 e8	 mov	 edx, DWORD PTR _pPlayMarkerData$69774[ebp]
  00166	89 0a		 mov	 DWORD PTR [edx], ecx

; 495  : 		for (; pScan; pScan = pNext)

  00168	eb 06		 jmp	 SHORT $L69779
$L69780:
  0016a	8b 45 f0	 mov	 eax, DWORD PTR _pNext$69777[ebp]
  0016d	89 45 ec	 mov	 DWORD PTR _pScan$69776[ebp], eax
$L69779:
  00170	83 7d ec 00	 cmp	 DWORD PTR _pScan$69776[ebp], 0
  00174	74 72		 je	 SHORT $L69753

; 496  : 		{
; 497  :             pNext = pScan->GetNext();

  00176	8b 4d ec	 mov	 ecx, DWORD PTR _pScan$69776[ebp]
  00179	e8 00 00 00 00	 call	 ?GetNext@CPlayMarkerItem@@QAEPAV1@XZ ; CPlayMarkerItem::GetNext
  0017e	89 45 f0	 mov	 DWORD PTR _pNext$69777[ebp], eax

; 498  :             if (pScan->m_PlayMarker.mtTime <= mtTime) 

  00181	8b 4d ec	 mov	 ecx, DWORD PTR _pScan$69776[ebp]
  00184	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00187	3b 55 10	 cmp	 edx, DWORD PTR _mtTime$[ebp]
  0018a	7f 44		 jg	 SHORT $L69782

; 499  :             {
; 500  :                 if (!pNext || (pNext->m_PlayMarker.mtTime > mtTime))

  0018c	83 7d f0 00	 cmp	 DWORD PTR _pNext$69777[ebp], 0
  00190	74 0b		 je	 SHORT $L69784
  00192	8b 45 f0	 mov	 eax, DWORD PTR _pNext$69777[ebp]
  00195	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00198	3b 4d 10	 cmp	 ecx, DWORD PTR _mtTime$[ebp]
  0019b	7e 31		 jle	 SHORT $L69783
$L69784:

; 501  :                 {
; 502  :         		    pPlayMarkerData->mtTime = pScan->m_PlayMarker.mtTime - mtTime;

  0019d	8b 55 ec	 mov	 edx, DWORD PTR _pScan$69776[ebp]
  001a0	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001a3	2b 45 10	 sub	 eax, DWORD PTR _mtTime$[ebp]
  001a6	8b 4d e8	 mov	 ecx, DWORD PTR _pPlayMarkerData$69774[ebp]
  001a9	89 01		 mov	 DWORD PTR [ecx], eax

; 503  :                     if (pmtNext && pNext)

  001ab	83 7d 14 00	 cmp	 DWORD PTR _pmtNext$[ebp], 0
  001af	74 14		 je	 SHORT $L69785
  001b1	83 7d f0 00	 cmp	 DWORD PTR _pNext$69777[ebp], 0
  001b5	74 0e		 je	 SHORT $L69785

; 504  :                     {
; 505  :                         *pmtNext = pNext->m_PlayMarker.mtTime - mtTime;

  001b7	8b 55 f0	 mov	 edx, DWORD PTR _pNext$69777[ebp]
  001ba	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001bd	2b 45 10	 sub	 eax, DWORD PTR _mtTime$[ebp]
  001c0	8b 4d 14	 mov	 ecx, DWORD PTR _pmtNext$[ebp]
  001c3	89 01		 mov	 DWORD PTR [ecx], eax
$L69785:

; 506  :                     }
; 507  :                     hr = S_OK;

  001c5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 508  : 				    break;

  001cc	eb 1a		 jmp	 SHORT $L69753
$L69783:

; 509  :                 }
; 510  : 			}
; 511  :             else

  001ce	eb 16		 jmp	 SHORT $L69787
$L69782:

; 512  :             {
; 513  :                 // Didn't find a marker before the requested time.
; 514  :                 if (pmtNext)

  001d0	83 7d 14 00	 cmp	 DWORD PTR _pmtNext$[ebp], 0
  001d4	74 0e		 je	 SHORT $L69788

; 515  :                 {
; 516  :                     *pmtNext = pScan->m_PlayMarker.mtTime - mtTime;

  001d6	8b 55 ec	 mov	 edx, DWORD PTR _pScan$69776[ebp]
  001d9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001dc	2b 45 10	 sub	 eax, DWORD PTR _mtTime$[ebp]
  001df	8b 4d 14	 mov	 ecx, DWORD PTR _pmtNext$[ebp]
  001e2	89 01		 mov	 DWORD PTR [ecx], eax
$L69788:

; 517  :                 }
; 518  :                 break;

  001e4	eb 02		 jmp	 SHORT $L69753
$L69787:

; 519  :             }
; 520  : 		}

  001e6	eb 82		 jmp	 SHORT $L69780
$L69753:

; 521  :     }
; 522  : #ifdef DBG
; 523  :     if (hr == DMUS_E_GET_UNSUPPORTED)

  001e8	81 7d fc 24 11
	78 88		 cmp	 DWORD PTR _hr$[ebp], -2005397212 ; 88781124H
  001ef	75 0f		 jne	 SHORT $L69793

; 524  :     {
; 525  :         Trace(1,"Error: MarkerTrack does not support requested GetParam call.\n");

  001f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@DEBCPCK@Error?3?5MarkerTrack?5does?5not?5supp@
  001f6	6a 01		 push	 1
  001f8	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  001fd	83 c4 08	 add	 esp, 8
$L69793:

; 526  :     }
; 527  : #endif
; 528  :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  00200	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00203	83 c2 14	 add	 edx, 20			; 00000014H
  00206	52		 push	 edx
  00207	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 529  : 	return hr;

  0020d	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 530  : }

  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c2 14 00	 ret	 20			; 00000014H
?GetParam@CMarkerTrack@@UAGJABU_GUID@@JPAJPAX@Z ENDP	; CMarkerTrack::GetParam
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetParam@CMarkerTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT
_this$ = 8
_rguid$ = 12
_mtTime$ = 16
_pData$ = 20
?SetParam@CMarkerTrack@@UAGJABU_GUID@@JPAX@Z PROC NEAR	; CMarkerTrack::SetParam, COMDAT

; 536  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 537  : 	return DMUS_E_SET_UNSUPPORTED;

  00003	b8 23 11 78 88	 mov	 eax, -2005397213	; 88781123H

; 538  : }

  00008	5d		 pop	 ebp
  00009	c2 10 00	 ret	 16			; 00000010H
?SetParam@CMarkerTrack@@UAGJABU_GUID@@JPAX@Z ENDP	; CMarkerTrack::SetParam
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddNotificationType@CMarkerTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguidNotification$ = 12
?AddNotificationType@CMarkerTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CMarkerTrack::AddNotificationType, COMDAT

; 542  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 543  : 	return S_FALSE;

  00003	b8 01 00 00 00	 mov	 eax, 1

; 544  : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?AddNotificationType@CMarkerTrack@@UAGJABU_GUID@@@Z ENDP ; CMarkerTrack::AddNotificationType
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RemoveNotificationType@CMarkerTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguidNotification$ = 12
?RemoveNotificationType@CMarkerTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CMarkerTrack::RemoveNotificationType, COMDAT

; 548  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 549  : 	return S_FALSE;

  00003	b8 01 00 00 00	 mov	 eax, 1

; 550  : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?RemoveNotificationType@CMarkerTrack@@UAGJABU_GUID@@@Z ENDP ; CMarkerTrack::RemoveNotificationType
_TEXT	ENDS
PUBLIC	??_C@_0EN@IKGEDL@Error?3?5Unable?5to?5clone?5marker?5tr@ ; `string'
PUBLIC	??_C@_0FJ@HIPJEJGD@Error?3?5Unable?5to?5clone?5marker?5tr@ ; `string'
PUBLIC	??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??Clone@CMarkerTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Clone@CMarkerTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::Clone', 00H		; `CMarkerTrack::Clone'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
CONST	SEGMENT
??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@ DB '%s: Inva'
	DB	'lid pointer ppTrack', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@IKGEDL@Error?3?5Unable?5to?5clone?5marker?5tr@
CONST	SEGMENT
??_C@_0EN@IKGEDL@Error?3?5Unable?5to?5clone?5marker?5tr@ DB 'Error: Unabl'
	DB	'e to clone marker track because the start point is less than '
	DB	'0.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FJ@HIPJEJGD@Error?3?5Unable?5to?5clone?5marker?5tr@
CONST	SEGMENT
??_C@_0FJ@HIPJEJGD@Error?3?5Unable?5to?5clone?5marker?5tr@ DB 'Error: Una'
	DB	'ble to clone marker track because the start point is greater '
	DB	'than the length.', 0aH, 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Clone@CMarkerTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT
tv89 = -12
$T70311 = -8
_pDM$ = -4
_this$ = 8
_mtStart$ = 12
_mtEnd$ = 16
_ppTrack$ = 20
?Clone@CMarkerTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z PROC NEAR ; CMarkerTrack::Clone, COMDAT

; 556  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 557  : 	V_INAME(IDirectMusicTrack::Clone);
; 558  : 	V_PTRPTR_WRITE(ppTrack);

  00006	6a 04		 push	 4
  00008	8b 45 14	 mov	 eax, DWORD PTR _ppTrack$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69824
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Clone@CMarkerTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69824:

; 559  : 
; 560  : 	if(mtStart < 0 )

  0002e	83 7d 0c 00	 cmp	 DWORD PTR _mtStart$[ebp], 0
  00032	7d 19		 jge	 SHORT $L69825

; 561  : 	{
; 562  :         Trace(1,"Error: Unable to clone marker track because the start point is less than 0.\n");

  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EN@IKGEDL@Error?3?5Unable?5to?5clone?5marker?5tr@
  00039	6a 01		 push	 1
  0003b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00040	83 c4 08	 add	 esp, 8

; 563  : 		return E_INVALIDARG;

  00043	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00048	e9 95 00 00 00	 jmp	 $L69820
$L69825:

; 564  : 	}
; 565  : 	if(mtStart > mtEnd)

  0004d	8b 4d 0c	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  00050	3b 4d 10	 cmp	 ecx, DWORD PTR _mtEnd$[ebp]
  00053	7e 16		 jle	 SHORT $L69828

; 566  : 	{
; 567  :         Trace(1,"Error: Unable to clone marker track because the start point is greater than the length.\n");

  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FJ@HIPJEJGD@Error?3?5Unable?5to?5clone?5marker?5tr@
  0005a	6a 01		 push	 1
  0005c	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00061	83 c4 08	 add	 esp, 8

; 568  : 		return E_INVALIDARG;

  00064	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00069	eb 77		 jmp	 SHORT $L69820
$L69828:

; 569  : 	}
; 570  : 
; 571  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  0006b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	83 c2 14	 add	 edx, 20			; 00000014H
  00071	52		 push	 edx
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 572  :     CMarkerTrack *pDM;
; 573  :     NEWCATCH(pDM,CMarkerTrack(this, mtStart, mtEnd))

  00078	6a 40		 push	 64			; 00000040H
  0007a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007f	83 c4 04	 add	 esp, 4
  00082	89 45 f8	 mov	 DWORD PTR $T70311[ebp], eax
  00085	83 7d f8 00	 cmp	 DWORD PTR $T70311[ebp], 0
  00089	74 1c		 je	 SHORT $L70312
  0008b	8b 45 10	 mov	 eax, DWORD PTR _mtEnd$[ebp]
  0008e	50		 push	 eax
  0008f	8b 4d 0c	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  00092	51		 push	 ecx
  00093	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00096	83 ea 04	 sub	 edx, 4
  00099	52		 push	 edx
  0009a	8b 4d f8	 mov	 ecx, DWORD PTR $T70311[ebp]
  0009d	e8 00 00 00 00	 call	 ??0CMarkerTrack@@QAE@PAV0@JJ@Z ; CMarkerTrack::CMarkerTrack
  000a2	89 45 f4	 mov	 DWORD PTR tv89[ebp], eax
  000a5	eb 07		 jmp	 SHORT $L70313
$L70312:
  000a7	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$L70313:
  000ae	8b 45 f4	 mov	 eax, DWORD PTR tv89[ebp]
  000b1	89 45 fc	 mov	 DWORD PTR _pDM$[ebp], eax

; 574  : 
; 575  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	83 c1 14	 add	 ecx, 20			; 00000014H
  000ba	51		 push	 ecx
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 576  :     if (pDM == NULL) 

  000c1	83 7d fc 00	 cmp	 DWORD PTR _pDM$[ebp], 0
  000c5	75 07		 jne	 SHORT $L69834

; 577  :     {
; 578  :         return E_OUTOFMEMORY;

  000c7	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  000cc	eb 14		 jmp	 SHORT $L69820
$L69834:

; 579  :     }
; 580  : 
; 581  :     return pDM->QueryInterface(IID_IDirectMusicTrack, (void**)ppTrack);

  000ce	8b 55 14	 mov	 edx, DWORD PTR _ppTrack$[ebp]
  000d1	52		 push	 edx
  000d2	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack
  000d7	8b 45 fc	 mov	 eax, DWORD PTR _pDM$[ebp]
  000da	8b 08		 mov	 ecx, DWORD PTR [eax]
  000dc	8b 55 fc	 mov	 edx, DWORD PTR _pDM$[ebp]
  000df	52		 push	 edx
  000e0	ff 11		 call	 DWORD PTR [ecx]
$L69820:

; 582  : }

  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 10 00	 ret	 16			; 00000010H
?Clone@CMarkerTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z ENDP ; CMarkerTrack::Clone
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@CMarkerTrack@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CMarkerTrack@@W3AGJABU_GUID@@PAPAX@Z PROC NEAR ; CMarkerTrack::QueryInterface, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CMarkerTrack@@UAGJABU_GUID@@PAPAX@Z ; CMarkerTrack::QueryInterface
?QueryInterface@CMarkerTrack@@W3AGJABU_GUID@@PAPAX@Z ENDP ; CMarkerTrack::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CMarkerTrack@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CMarkerTrack@@W3AGKXZ PROC NEAR			; CMarkerTrack::AddRef, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CMarkerTrack@@UAGKXZ ; CMarkerTrack::AddRef
?AddRef@CMarkerTrack@@W3AGKXZ ENDP			; CMarkerTrack::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CMarkerTrack@@W3AGKXZ
_TEXT	SEGMENT
?Release@CMarkerTrack@@W3AGKXZ PROC NEAR		; CMarkerTrack::Release, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?Release@CMarkerTrack@@UAGKXZ ; CMarkerTrack::Release
?Release@CMarkerTrack@@W3AGKXZ ENDP			; CMarkerTrack::Release
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ??0AListItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0AListItem@@QAE@XZ PROC NEAR				; AListItem::AListItem, COMDAT
; _this$ = ecx

; 17   :     AListItem() { m_pNext=NULL; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0AListItem@@QAE@XZ ENDP				; AListItem::AListItem
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0AList@@QAE@XZ PROC NEAR				; AList::AList, COMDAT
; _this$ = ecx

; 34   :     AList() {m_pHead=NULL;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0AList@@QAE@XZ ENDP					; AList::AList
_TEXT	ENDS
PUBLIC	?SetNext@AListItem@@QAEXPAV1@@Z			; AListItem::SetNext
; Function compile flags: /Odt
;	COMDAT ?AddHead@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddHead@AList@@QAEXPAVAListItem@@@Z PROC NEAR		; AList::AddHead, COMDAT
; _this$ = ecx

; 51   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :             if (pItem!=NULL)

  00007	83 7d 08 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  0000b	74 16		 je	 SHORT $L32730

; 53   :             {
; 54   :                 pItem->SetNext(m_pHead);

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	51		 push	 ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00016	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 55   :                 m_pHead=pItem;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00021	89 02		 mov	 DWORD PTR [edx], eax
$L32730:

; 56   :             }
; 57   :         };

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?AddHead@AList@@QAEXPAVAListItem@@@Z ENDP		; AList::AddHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@AListItem@@QAEXPAV1@@Z PROC NEAR		; AListItem::SetNext, COMDAT
; _this$ = ecx

; 19   :     void SetNext(AListItem *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetNext@AListItem@@QAEXPAV1@@Z ENDP			; AListItem::SetNext
_TEXT	ENDS
EXTRN	?DirectMusicAllocI@@YGPAXI@Z:NEAR		; DirectMusicAllocI
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xalloc.h
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_cb$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 13   :     return DirectMusicAllocI(cb);

  00003	8b 45 08	 mov	 eax, DWORD PTR _cb$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicAllocI@@YGPAXI@Z ; DirectMusicAllocI

; 14   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
EXTRN	?DirectMusicFreeI@@YGXPAX@Z:NEAR		; DirectMusicFreeI
; Function compile flags: /Odt
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 19   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xboxutil.h
_TEXT	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT
___formal$ = 8
?DeleteCriticalSection@@YGXPAX@Z PROC NEAR		; DeleteCriticalSection, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : }

  00003	5d		 pop	 ebp
  00004	c2 04 00	 ret	 4
?DeleteCriticalSection@@YGXPAX@Z ENDP			; DeleteCriticalSection
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IUnknown@@QAE@XZ PROC NEAR				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	?GetNext@AListItem@@QBEPAV1@XZ			; AListItem::GetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\marktrk.h
;	COMDAT ?GetNext@CValidStartItem@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@CValidStartItem@@QAEPAV1@XZ PROC NEAR		; CValidStartItem::GetNext, COMDAT
; _this$ = ecx

; 13   :     CValidStartItem* GetNext(){ return (CValidStartItem*)AListItem::GetNext(); };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetNext@CValidStartItem@@QAEPAV1@XZ ENDP		; CValidStartItem::GetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@AListItem@@QBEPAV1@XZ PROC NEAR		; AListItem::GetNext, COMDAT
; _this$ = ecx

; 18   :     AListItem *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetNext@AListItem@@QBEPAV1@XZ ENDP			; AListItem::GetNext
_TEXT	ENDS
PUBLIC	?GetHead@AList@@QBEPAVAListItem@@XZ		; AList::GetHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\marktrk.h
;	COMDAT ?GetHead@CValidStartList@@QAEPAVCValidStartItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@CValidStartList@@QAEPAVCValidStartItem@@XZ PROC NEAR ; CValidStartList::GetHead, COMDAT
; _this$ = ecx

; 20   :     CValidStartItem* GetHead() {return (CValidStartItem*)AList::GetHead();};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetHead@AList@@QBEPAVAListItem@@XZ ; AList::GetHead
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetHead@CValidStartList@@QAEPAVCValidStartItem@@XZ ENDP ; CValidStartList::GetHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@AList@@QBEPAVAListItem@@XZ PROC NEAR		; AList::GetHead, COMDAT
; _this$ = ecx

; 35   :     AListItem *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@AList@@QBEPAVAListItem@@XZ ENDP		; AList::GetHead
_TEXT	ENDS
PUBLIC	?RemoveHead@AList@@QAEPAVAListItem@@XZ		; AList::RemoveHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\marktrk.h
;	COMDAT ?RemoveHead@CValidStartList@@QAEPAVCValidStartItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?RemoveHead@CValidStartList@@QAEPAVCValidStartItem@@XZ PROC NEAR ; CValidStartList::RemoveHead, COMDAT
; _this$ = ecx

; 21   :     CValidStartItem* RemoveHead() {return (CValidStartItem*)AList::RemoveHead();};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?RemoveHead@AList@@QAEPAVAListItem@@XZ ; AList::RemoveHead
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?RemoveHead@CValidStartList@@QAEPAVCValidStartItem@@XZ ENDP ; CValidStartList::RemoveHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -8
_li$ = -4
?RemoveHead@AList@@QAEPAVAListItem@@XZ PROC NEAR	; AList::RemoveHead, COMDAT
; _this$ = ecx

; 71   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 72   :             AListItem *li;
; 73   :             li = m_pHead;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR _li$[ebp], ecx

; 74   :             if(m_pHead)

  00011	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00014	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00017	74 19		 je	 SHORT $L32744

; 75   :             {
; 76   :                 m_pHead = m_pHead->GetNext();

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	89 01		 mov	 DWORD PTR [ecx], eax

; 77   :                 li->SetNext(NULL);

  00028	6a 00		 push	 0
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  0002d	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext
$L32744:

; 78   :             }
; 79   :             return li;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _li$[ebp]

; 80   :         }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?RemoveHead@AList@@QAEPAVAListItem@@XZ ENDP		; AList::RemoveHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\marktrk.h
_TEXT	ENDS
;	COMDAT ?GetNext@CPlayMarkerItem@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@CPlayMarkerItem@@QAEPAV1@XZ PROC NEAR		; CPlayMarkerItem::GetNext, COMDAT
; _this$ = ecx

; 28   :     CPlayMarkerItem* GetNext(){ return (CPlayMarkerItem*)AListItem::GetNext(); };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetNext@CPlayMarkerItem@@QAEPAV1@XZ ENDP		; CPlayMarkerItem::GetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetHead@CPlayMarkerList@@QAEPAVCPlayMarkerItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@CPlayMarkerList@@QAEPAVCPlayMarkerItem@@XZ PROC NEAR ; CPlayMarkerList::GetHead, COMDAT
; _this$ = ecx

; 35   :     CPlayMarkerItem* GetHead() {return (CPlayMarkerItem*)AList::GetHead();};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetHead@AList@@QBEPAVAListItem@@XZ ; AList::GetHead
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetHead@CPlayMarkerList@@QAEPAVCPlayMarkerItem@@XZ ENDP ; CPlayMarkerList::GetHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RemoveHead@CPlayMarkerList@@QAEPAVCPlayMarkerItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?RemoveHead@CPlayMarkerList@@QAEPAVCPlayMarkerItem@@XZ PROC NEAR ; CPlayMarkerList::RemoveHead, COMDAT
; _this$ = ecx

; 36   :     CPlayMarkerItem* RemoveHead() {return (CPlayMarkerItem*)AList::RemoveHead();};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?RemoveHead@AList@@QAEPAVAListItem@@XZ ; AList::RemoveHead
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?RemoveHead@CPlayMarkerList@@QAEPAVCPlayMarkerItem@@XZ ENDP ; CPlayMarkerList::RemoveHead
_TEXT	ENDS
END
