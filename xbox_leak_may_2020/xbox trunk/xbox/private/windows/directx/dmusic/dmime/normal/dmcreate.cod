; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	..\dmcreate.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0FA@GEGCMFGE@?$CI0x?$CF08lX?00x?$CF04X?00x?$CF04X?00x?$CF02X?00x@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@LHPIFPKO@Another?5factory?5is?5already?5regis@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DK@MLHKGFCO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@HINJJOMK@?$CBgDirectMusicFactoryFn?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@FHIGODDM@Creating?5?$CC?$CFs?$CC?5object?5with?5interf@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@HEGJJGLC@And?5clsid?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@JLFHNHLB@?5Failed?0?5returned?5error?3?5?$CFlx?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@MMHFGODI@DirectMusic?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKEMJMO@DLS?5Collection?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@KEOBKOOC@Microsoft?5Synth?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@MAJGHNOA@File?5Stream?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@DPKEGNIP@Stream?5Wrapper?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@HNOCJJCE@Memory?5Stream?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07OJELGGAG@Segment?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06FLJJKOBF@Loader?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@NDBHALDK@Tempo?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@ECNCKNIP@Time?5Signature?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@HAMLOCKF@Band?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@KPPBKPKK@Performance?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04NLKMNLCE@Band?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@KIHNLICE@Seqquence?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04HIICAAFP@Wave?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@HENIGKNL@Wave?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@BHGKKGKD@Chord?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@HNDFOBDI@Command?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DNIGHFIB@Style?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@LNFNEML@Pattern?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@GEJOMBPA@Motif?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05IHAFCALK@Style?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JLANMLI@Melody?5Formulation?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08CHJMLLDB@Composer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09KBIPEBMK@Chord?5Map?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@CMNCEKLA@Chord?5Map?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@OOHJMHEN@Sign?5Post?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@LNMDADKO@AudioPath?5IDispatch?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@EALLMIIO@AudioPath?5Config?5IDispatch?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@BMKPGKFE@Song?5IDispatch?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@NOLEBAMH@Performance?5IDispatch?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@BJFJMFKH@Segment?5IDispatch?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06CEFAHBNL@Script?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@NMLAFDKM@Script?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09OIACHIKC@Container?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@FFFFCDAP@Segment?5State?5IDispatch?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@DIDCPPIA@Mute?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@FKKHLJNN@Marker?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04ENNOEBOG@Song?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@BPHPFIND@AudioPath?5Config?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@FMNAONLH@Tool?5Graph?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@CINMLIEN@SysEx?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@LEILHMLC@Segment?5Trigger?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@DGGAFCHD@Lyrics?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@NIFNOE@Parameter?5Control?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@KGDJFBJH@Unknown?5object?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BGAOHDMM@?$CBp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT ?DbgPrintGUID@@YGXABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicCreateInstance@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicRegisterFactory@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicDefaultFactory@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassName@@YGPADABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@ULyricInfo@@@@QBEPAV?$TListItem@ULyricInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@ULyricInfo@@@@QAEXPAV?$TListItem@ULyricInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@ULyricInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@ULyricInfo@@@@QAEAAULyricInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@UTriggerInfo@@@@SGHAAUTriggerInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@ULyricInfo@@@@SGHAAULyricInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@ULyricInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEAAV01@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UTriggerInfo@@@@QAEXP6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@ULyricInfo@@@@QAEXP6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_SEQ_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_CURVE_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@_J@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UObjectInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ObjectInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UTriggerInfo@@@@QAEPAV1@P6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@ULyricInfo@@@@QAEPAV1@P6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UTriggerInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UTriggerInfo@@@@AAEPAV1@PAV1@P6GHAAUTriggerInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@ULyricInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@ULyricInfo@@@@AAEPAV1@PAV1@P6GHAAULyricInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UParamInfo@CParamControlTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UParamInfo@CParamControlTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ParamInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WaveItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WString@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WString@SmartRef@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@ULyricInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@ULyricInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UTriggerInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fFirstTime@?1??DirectMusicDefaultFactory@@9@16@4HA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?gDirectMusicFactoryFn@@3P6GJABU_GUID@@PAUIUnknown@@0PAPAX@ZA ; gDirectMusicFactoryFn
PUBLIC	?g_APICriticalSection@@3U_RTL_CRITICAL_SECTION@@A ; g_APICriticalSection
PUBLIC	?g_lCritSecCount@@3JA				; g_lCritSecCount
_BSS	SEGMENT
?gDirectMusicFactoryFn@@3P6GJABU_GUID@@PAUIUnknown@@0PAPAX@ZA DD 01H DUP (?) ; gDirectMusicFactoryFn
?g_APICriticalSection@@3U_RTL_CRITICAL_SECTION@@A DB 01cH DUP (?) ; g_APICriticalSection
?g_lCritSecCount@@3JA DD 01H DUP (?)			; g_lCritSecCount
_BSS	ENDS
PUBLIC	?DbgPrintGUID@@YGXABU_GUID@@@Z			; DbgPrintGUID
PUBLIC	??_C@_0FA@GEGCMFGE@?$CI0x?$CF08lX?00x?$CF04X?00x?$CF04X?00x?$CF02X?00x@ ; `string'
EXTRN	_DbgPrint:NEAR
;	COMDAT ??_C@_0FA@GEGCMFGE@?$CI0x?$CF08lX?00x?$CF04X?00x?$CF04X?00x?$CF02X?00x@
; File c:\xbox\private\windows\directx\dmusic\dmime\dmcreate.cpp
CONST	SEGMENT
??_C@_0FA@GEGCMFGE@?$CI0x?$CF08lX?00x?$CF04X?00x?$CF04X?00x?$CF02X?00x@ DB '('
	DB	'0x%08lX,0x%04X,0x%04X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%0'
	DB	'2X,0x%02X,0x%02X)', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?DbgPrintGUID@@YGXABU_GUID@@@Z
_TEXT	SEGMENT
_riid$ = 8
?DbgPrintGUID@@YGXABU_GUID@@@Z PROC NEAR		; DbgPrintGUID, COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   :     DbgPrint("(0x%08lX,0x%04X,0x%04X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X,0x%02X)",
; 21   :         riid.Data1,
; 22   :         riid.Data2, riid.Data3, riid.Data4[0], riid.Data4[1], riid.Data4[2],
; 23   :         riid.Data4[3], riid.Data4[4], riid.Data4[5], riid.Data4[6], riid.Data4[7]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _riid$[ebp]
  00006	0f b6 48 0f	 movzx	 ecx, BYTE PTR [eax+15]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _riid$[ebp]
  0000e	0f b6 42 0e	 movzx	 eax, BYTE PTR [edx+14]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _riid$[ebp]
  00016	0f b6 51 0d	 movzx	 edx, BYTE PTR [ecx+13]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR _riid$[ebp]
  0001e	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00022	51		 push	 ecx
  00023	8b 55 08	 mov	 edx, DWORD PTR _riid$[ebp]
  00026	0f b6 42 0b	 movzx	 eax, BYTE PTR [edx+11]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _riid$[ebp]
  0002e	0f b6 51 0a	 movzx	 edx, BYTE PTR [ecx+10]
  00032	52		 push	 edx
  00033	8b 45 08	 mov	 eax, DWORD PTR _riid$[ebp]
  00036	0f b6 48 09	 movzx	 ecx, BYTE PTR [eax+9]
  0003a	51		 push	 ecx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _riid$[ebp]
  0003e	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  00042	50		 push	 eax
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _riid$[ebp]
  00046	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  0004a	52		 push	 edx
  0004b	8b 45 08	 mov	 eax, DWORD PTR _riid$[ebp]
  0004e	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00052	51		 push	 ecx
  00053	8b 55 08	 mov	 edx, DWORD PTR _riid$[ebp]
  00056	8b 02		 mov	 eax, DWORD PTR [edx]
  00058	50		 push	 eax
  00059	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FA@GEGCMFGE@?$CI0x?$CF08lX?00x?$CF04X?00x?$CF04X?00x?$CF02X?00x@
  0005e	e8 00 00 00 00	 call	 _DbgPrint
  00063	83 c4 30	 add	 esp, 48			; 00000030H

; 24   : }

  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?DbgPrintGUID@@YGXABU_GUID@@@Z ENDP			; DbgPrintGUID
_TEXT	ENDS
PUBLIC	_DirectMusicCreateInstance@16
EXTRN	?DirectMusicInitializedCheck@@YGXXZ:NEAR	; DirectMusicInitializedCheck
; Function compile flags: /Odt
;	COMDAT _DirectMusicCreateInstance@16
_TEXT	SEGMENT
_clsid$ = 8
_pUnkOuter$ = 12
_iid$ = 16
_ppvInterface$ = 20
_DirectMusicCreateInstance@16 PROC NEAR			; COMDAT

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 148  :     DirectMusicInitializedCheck();

  00003	e8 00 00 00 00	 call	 ?DirectMusicInitializedCheck@@YGXXZ ; DirectMusicInitializedCheck

; 149  :     return (*gDirectMusicFactoryFn)(clsid, pUnkOuter, iid, ppvInterface);

  00008	8b 45 14	 mov	 eax, DWORD PTR _ppvInterface$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 10	 mov	 ecx, DWORD PTR _iid$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 0c	 mov	 edx, DWORD PTR _pUnkOuter$[ebp]
  00013	52		 push	 edx
  00014	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00017	50		 push	 eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR ?gDirectMusicFactoryFn@@3P6GJABU_GUID@@PAUIUnknown@@0PAPAX@ZA ; gDirectMusicFactoryFn

; 150  : }

  0001e	5d		 pop	 ebp
  0001f	c2 10 00	 ret	 16			; 00000010H
_DirectMusicCreateInstance@16 ENDP
_TEXT	ENDS
PUBLIC	_DirectMusicRegisterFactory@4
PUBLIC	??_C@_0CH@LHPIFPKO@Another?5factory?5is?5already?5regis@ ; `string'
PUBLIC	??_C@_0DK@MLHKGFCO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BH@HINJJOMK@?$CBgDirectMusicFactoryFn?$AA@ ; `string'
EXTRN	__imp__RtlAssert@16:NEAR
;	COMDAT ??_C@_0CH@LHPIFPKO@Another?5factory?5is?5already?5regis@
CONST	SEGMENT
??_C@_0CH@LHPIFPKO@Another?5factory?5is?5already?5regis@ DB 'Another fact'
	DB	'ory is already registered.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@MLHKGFCO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DK@MLHKGFCO@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dmusic\dmime\dmcreate.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HINJJOMK@?$CBgDirectMusicFactoryFn?$AA@
CONST	SEGMENT
??_C@_0BH@HINJJOMK@?$CBgDirectMusicFactoryFn?$AA@ DB '!gDirectMusicFactor'
	DB	'yFn', 00H					; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _DirectMusicRegisterFactory@4
_TEXT	SEGMENT
_pFactory$ = 8
_DirectMusicRegisterFactory@4 PROC NEAR			; COMDAT

; 152  : STDAPI_(HRESULT) DirectMusicRegisterFactory(LPDIRECTMUSICFACTORYFN pFactory){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 153  :     ASSERTMSG("Another factory is already registered.", !gDirectMusicFactoryFn);

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDirectMusicFactoryFn@@3P6GJABU_GUID@@PAUIUnknown@@0PAPAX@ZA, 0 ; gDirectMusicFactoryFn
  0000a	74 1a		 je	 SHORT $L69433
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@LHPIFPKO@Another?5factory?5is?5already?5regis@
  00011	68 99 00 00 00	 push	 153			; 00000099H
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@MLHKGFCO@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@HINJJOMK@?$CBgDirectMusicFactoryFn?$AA@
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69433:

; 154  :     gDirectMusicFactoryFn = pFactory;

  00026	8b 45 08	 mov	 eax, DWORD PTR _pFactory$[ebp]
  00029	a3 00 00 00 00	 mov	 DWORD PTR ?gDirectMusicFactoryFn@@3P6GJABU_GUID@@PAUIUnknown@@0PAPAX@ZA, eax ; gDirectMusicFactoryFn

; 155  :     return S_OK;

  0002e	33 c0		 xor	 eax, eax

; 156  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
_DirectMusicRegisterFactory@4 ENDP
_TEXT	ENDS
PUBLIC	_DirectMusicDefaultFactory@16
PUBLIC	?GetClassName@@YGPADABU_GUID@@@Z		; GetClassName
PUBLIC	??_C@_0CF@FHIGODDM@Creating?5?$CC?$CFs?$CC?5object?5with?5interf@ ; `string'
PUBLIC	??_C@_0M@HEGJJGLC@And?5clsid?3?5?$AA@		; `string'
PUBLIC	??_C@_0BO@JLFHNHLB@?5Failed?0?5returned?5error?3?5?$CFlx?6?$AA@ ; `string'
PUBLIC	_==@8
EXTRN	_CLSID_AutDirectMusicPerformance:BYTE
EXTRN	_CLSID_AutDirectMusicSegment:BYTE
EXTRN	_CLSID_AutDirectMusicSong:BYTE
EXTRN	_CLSID_AutDirectMusicSegmentState:BYTE
EXTRN	_CLSID_AutDirectMusicAudioPathConfig:BYTE
EXTRN	_CLSID_AutDirectMusicAudioPath:BYTE
EXTRN	_CLSID_DirectMusicTempoTrack:BYTE
EXTRN	_CLSID_DirectMusicSeqTrack:BYTE
EXTRN	_CLSID_DirectMusicSysExTrack:BYTE
EXTRN	_CLSID_DirectMusicTimeSigTrack:BYTE
EXTRN	_CLSID_DirectMusicChordTrack:BYTE
EXTRN	_CLSID_DirectMusicCommandTrack:BYTE
EXTRN	_CLSID_DirectMusicStyleTrack:BYTE
EXTRN	_CLSID_DirectMusicMotifTrack:BYTE
EXTRN	_CLSID_DirectMusicSignPostTrack:BYTE
EXTRN	_CLSID_DirectMusicBandTrack:BYTE
EXTRN	_CLSID_DirectMusicChordMapTrack:BYTE
EXTRN	_CLSID_DirectMusicMuteTrack:BYTE
EXTRN	_CLSID_DirectMusicScriptTrack:BYTE
EXTRN	_CLSID_DirectMusicMarkerTrack:BYTE
EXTRN	_CLSID_DirectMusicSegmentTriggerTrack:BYTE
EXTRN	_CLSID_DirectMusicLyricsTrack:BYTE
EXTRN	_CLSID_DirectMusicParamControlTrack:BYTE
EXTRN	_CLSID_DirectMusicMelodyFormulationTrack:BYTE
EXTRN	_CLSID_DirectMusicWaveTrack:BYTE
EXTRN	_CLSID_DirectMusicSynth:BYTE
EXTRN	_DirectMusicChordTrackCreate@8:NEAR
EXTRN	_DirectMusicCommandTrackCreate@8:NEAR
EXTRN	_DirectMusicStyleTrackCreate@8:NEAR
EXTRN	_DirectMusicMelodyFormulationTrackCreate@8:NEAR
EXTRN	_DirectMusicMuteTrackCreate@8:NEAR
EXTRN	_DirectMusicChordMapTrackCreate@8:NEAR
EXTRN	_DirectMusicChordMapCreate@8:NEAR
EXTRN	_DirectMusicSignPostTrackCreate@8:NEAR
EXTRN	_DirectMusicTempoTrackCreate@8:NEAR
EXTRN	_DirectMusicTimeSigTrackCreate@8:NEAR
EXTRN	_DirectMusicMarkerTrackCreate@8:NEAR
EXTRN	_DirectMusicBandTrackCreate@8:NEAR
EXTRN	_DirectMusicPatternTrackCreate@8:NEAR
EXTRN	_DirectMusicMotifTrackCreate@8:NEAR
EXTRN	_DirectMusicWaveTrackCreate@8:NEAR
EXTRN	_DirectMusicSegmentCreate@8:NEAR
EXTRN	_DirectMusicPerformanceCreate@8:NEAR
EXTRN	_DirectMusicBandCreate@8:NEAR
EXTRN	_DirectMusicStyleCreate@8:NEAR
EXTRN	_CLSID_DirectMusicPerformance:BYTE
EXTRN	_DirectMusicAutAudioPathCreate@12:NEAR
EXTRN	_CLSID_DirectMusicSegment:BYTE
EXTRN	_CLSID_DirectMusicLoader:BYTE
EXTRN	_CLSID_DirectMusicBand:BYTE
EXTRN	_CLSID_DirectMusicCollection:BYTE
EXTRN	_DirectMusicAutAudioPathConfigCreate@12:NEAR
EXTRN	_CLSID_DirectMusicGraph:BYTE
EXTRN	_CLSID_DirectMusicStyle:BYTE
EXTRN	_CLSID_DirectMusicChordMap:BYTE
EXTRN	_DirectMusicAutSongCreate@12:NEAR
EXTRN	_CLSID_DirectMusicComposer:BYTE
EXTRN	_CLSID_DirectMusicScript:BYTE
EXTRN	_CLSID_DirectMusicContainer:BYTE
EXTRN	_DirectMusicAutPerformanceCreate@12:NEAR
EXTRN	_CLSID_DirectMusicAudioPathConfig:BYTE
EXTRN	_CLSID_DirectMusicPatternTrack:BYTE
EXTRN	_CLSID_DirectSoundWave:BYTE
EXTRN	_CLSID_DirectMusicSong:BYTE
EXTRN	_CLSID_DirectMusicStreamStream:BYTE
EXTRN	_DirectMusicAutSegmentCreate@12:NEAR
EXTRN	_CLSID_DirectMusicMemStream:BYTE
EXTRN	_CLSID_DirectMusicFileStream:BYTE
EXTRN	_DirectMusicScriptCreate@8:NEAR
EXTRN	_DirectMusicScriptTrackCreate@8:NEAR
EXTRN	_DirectMusicSongCreate@8:NEAR
EXTRN	_DirectMusicAudioPathConfigCreate@8:NEAR
EXTRN	_DirectMusicSeqTrackCreate@8:NEAR
EXTRN	_DirectMusicGraphCreate@8:NEAR
EXTRN	_DirectMusicSysexTrackCreate@8:NEAR
EXTRN	_DirectMusicTriggerTrackCreate@8:NEAR
EXTRN	_DirectMusicLyricsTrackCreate@8:NEAR
EXTRN	_DirectMusicParamsTrackCreate@8:NEAR
EXTRN	_DirectMusicComposerCreate@8:NEAR
EXTRN	_DirectMusicCollectionCreate@8:NEAR
EXTRN	_DirectMusicSynthCreate@8:NEAR
EXTRN	_DirectSoundWaveCreate@8:NEAR
EXTRN	_DirectMusicContainerCreate@8:NEAR
EXTRN	_DirectMusicLoaderCreate@8:NEAR
EXTRN	_AutDirectMusicSegmentStateCreate@12:NEAR
EXTRN	_DirectMusicMemStreamCreate@8:NEAR
EXTRN	_DirectMusicStreamStreamCreate@8:NEAR
EXTRN	_DirectMusicFileStreamCreate@8:NEAR
EXTRN	__imp__RtlInitializeCriticalSection@4:NEAR
;	COMDAT ?fFirstTime@?1??DirectMusicDefaultFactory@@9@16@4HA
_DATA	SEGMENT
?fFirstTime@?1??DirectMusicDefaultFactory@@9@16@4HA DD 01H ; `DirectMusicDefaultFactory'::`2'::fFirstTime
_DATA	ENDS
;	COMDAT ??_C@_0CF@FHIGODDM@Creating?5?$CC?$CFs?$CC?5object?5with?5interf@
CONST	SEGMENT
??_C@_0CF@FHIGODDM@Creating?5?$CC?$CFs?$CC?5object?5with?5interf@ DB 'Cre'
	DB	'ating "%s" object with interface ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HEGJJGLC@And?5clsid?3?5?$AA@
CONST	SEGMENT
??_C@_0M@HEGJJGLC@And?5clsid?3?5?$AA@ DB 'And clsid: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JLFHNHLB@?5Failed?0?5returned?5error?3?5?$CFlx?6?$AA@
CONST	SEGMENT
??_C@_0BO@JLFHNHLB@?5Failed?0?5returned?5error?3?5?$CFlx?6?$AA@ DB ' Fail'
	DB	'ed, returned error: %lx', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _DirectMusicDefaultFactory@16
_TEXT	SEGMENT
_hr$ = -4
_clsid$ = 8
_pUnkOuter$ = 12
_iid$ = 16
_ppvInterface$ = 20
_DirectMusicDefaultFactory@16 PROC NEAR			; COMDAT

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 160  :     HRESULT hr = E_FAIL;

  00004	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 161  :     static fFirstTime = TRUE;
; 162  :     if (fFirstTime)

  0000b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?fFirstTime@?1??DirectMusicDefaultFactory@@9@16@4HA, 0
  00012	74 1f		 je	 SHORT $L69448

; 163  :     {
; 164  :         InitializeCriticalSection(&g_APICriticalSection);

  00014	68 00 00 00 00	 push	 OFFSET FLAT:?g_APICriticalSection@@3U_RTL_CRITICAL_SECTION@@A ; g_APICriticalSection
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 165  : 		g_lCritSecCount = 0;

  0001f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_lCritSecCount@@3JA, 0 ; g_lCritSecCount

; 166  :         fFirstTime = FALSE;

  00029	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fFirstTime@?1??DirectMusicDefaultFactory@@9@16@4HA, 0
$L69448:

; 167  :     }
; 168  : //    char * pszClassName = "";
; 169  : //    char * pszFunctionName = "";
; 170  : //    char * pszComment = "";
; 171  : #ifdef BASEMIDI
; 172  : /*    if (clsid == CLSID_DirectMusic)
; 173  :     {
; 174  :         pszClassName = "CLSID_DirectMusic";
; 175  :         pszFunctionName = "DirectMusicCreate(iid,ppvInterface)";
; 176  :         pszComment = "DirectMusic: core timing and port code is always required";
; 177  :         hr = DirectMusicCreate(iid,ppvInterface);
; 178  :     }
; 179  :     else */
; 180  :     if (clsid == CLSID_DirectMusicCollection)

  00033	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicCollection
  00038	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _==@8
  00041	85 c0		 test	 eax, eax
  00043	74 15		 je	 SHORT $L69449

; 181  :     {
; 182  : //        pszClassName = "CLSID_DirectMusicCollection";
; 183  : //        pszFunctionName = "DirectMusicCollectionCreate(iid,ppvInterface)";
; 184  : //        pszComment = "DLS Collection: manages a DLS file - always required for MIDI + DLS";
; 185  :         hr = DirectMusicCollectionCreate(iid,ppvInterface);

  00045	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  00048	51		 push	 ecx
  00049	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 _DirectMusicCollectionCreate@8
  00052	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 186  :     }
; 187  :     else if (clsid == CLSID_DirectMusicSynth)

  00055	e9 97 06 00 00	 jmp	 $L69450
$L69449:
  0005a	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSynth
  0005f	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 _==@8
  00068	85 c0		 test	 eax, eax
  0006a	74 15		 je	 SHORT $L69451

; 188  :     {
; 189  : //        pszClassName = "CLSID_DirectMusicSynth";
; 190  : //        pszFunctionName = "DirectMusicSynthCreate(iid,ppvInterface)";
; 191  : //        pszComment = "Synthesizer: controls the hardware synthesizer - always required";
; 192  :         hr = DirectMusicSynthCreate(iid,ppvInterface);

  0006c	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  0006f	51		 push	 ecx
  00070	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 _DirectMusicSynthCreate@8
  00079	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 193  :     }
; 194  : #endif
; 195  : #ifdef ADDSEGMENT
; 196  :     else if (clsid == CLSID_DirectMusicFileStream)

  0007c	e9 70 06 00 00	 jmp	 $L69450
$L69451:
  00081	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicFileStream
  00086	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _==@8
  0008f	85 c0		 test	 eax, eax
  00091	74 15		 je	 SHORT $L69453

; 197  :     {
; 198  :         // File Stream - used to read content from disk
; 199  : //        pszClassName = "CLSID_DirectMusicFileStream";
; 200  : //        pszFunctionName = "DirectMusicFileStreamCreate(iid,ppvInterface)";
; 201  : //        pszComment = "File Stream - used to read content from disk";
; 202  :         hr = DirectMusicFileStreamCreate(iid,ppvInterface);

  00093	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  00096	51		 push	 ecx
  00097	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  0009a	52		 push	 edx
  0009b	e8 00 00 00 00	 call	 _DirectMusicFileStreamCreate@8
  000a0	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 203  :     }
; 204  :     else if (clsid == CLSID_DirectMusicStreamStream)

  000a3	e9 49 06 00 00	 jmp	 $L69450
$L69453:
  000a8	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicStreamStream
  000ad	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 _==@8
  000b6	85 c0		 test	 eax, eax
  000b8	74 15		 je	 SHORT $L69455

; 205  :     {
; 206  :         // Stream wrapper - used to read content from app supplied IStream
; 207  : //        pszClassName = "CLSID_DirectMusicStreamStream";
; 208  : //        pszFunctionName = "DirectMusicStreamStreamCreate(iid,ppvInterface)";
; 209  : //        pszComment = "Stream wrapper - used to read content from app supplied IStream";
; 210  :         hr = DirectMusicStreamStreamCreate(iid,ppvInterface);

  000ba	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  000bd	51		 push	 ecx
  000be	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 _DirectMusicStreamStreamCreate@8
  000c7	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 211  :     }
; 212  :     else if (clsid == CLSID_DirectMusicMemStream)

  000ca	e9 22 06 00 00	 jmp	 $L69450
$L69455:
  000cf	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicMemStream
  000d4	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _==@8
  000dd	85 c0		 test	 eax, eax
  000df	74 15		 je	 SHORT $L69457

; 213  :     {
; 214  :         // Memory Stream - used to read content from memory
; 215  : //        pszClassName = "CLSID_DirectMusicMemStream";
; 216  : //        pszFunctionName = "DirectMusicMemStreamCreate(iid,ppvInterface)";
; 217  : //        pszComment = "Memory Stream - used to read content from memory";
; 218  :         hr = DirectMusicMemStreamCreate(iid,ppvInterface);

  000e1	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  000e4	51		 push	 ecx
  000e5	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  000e8	52		 push	 edx
  000e9	e8 00 00 00 00	 call	 _DirectMusicMemStreamCreate@8
  000ee	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 219  :     }
; 220  :     else if (clsid == CLSID_DirectMusicSegment)

  000f1	e9 fb 05 00 00	 jmp	 $L69450
$L69457:
  000f6	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSegment
  000fb	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 _==@8
  00104	85 c0		 test	 eax, eax
  00106	74 15		 je	 SHORT $L69459

; 221  :     {
; 222  :         // Segment - primary playback mechanism - always required
; 223  : //        pszClassName = "CLSID_DirectMusicSegment";
; 224  : //        pszFunctionName = "DirectMusicSegmentCreate(iid,ppvInterface)";
; 225  : //        pszComment = "Segment - primary playback mechanism - always required";
; 226  :         hr = DirectMusicSegmentCreate(iid,ppvInterface);

  00108	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  0010b	51		 push	 ecx
  0010c	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  0010f	52		 push	 edx
  00110	e8 00 00 00 00	 call	 _DirectMusicSegmentCreate@8
  00115	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 227  :     }
; 228  :     else if (clsid == CLSID_DirectMusicLoader)

  00118	e9 d4 05 00 00	 jmp	 $L69450
$L69459:
  0011d	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicLoader
  00122	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 _==@8
  0012b	85 c0		 test	 eax, eax
  0012d	74 15		 je	 SHORT $L69461

; 229  :     {
; 230  : //        pszClassName = "CLSID_DirectMusicLoader";
; 231  : //        pszFunctionName = "DirectMusicLoaderCreate(iid,ppvInterface)";
; 232  : //        pszComment = "Loader: required to read files from disk and link objects. May be replaced by application";
; 233  :         hr = DirectMusicLoaderCreate(iid,ppvInterface);

  0012f	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  00132	51		 push	 ecx
  00133	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  00136	52		 push	 edx
  00137	e8 00 00 00 00	 call	 _DirectMusicLoaderCreate@8
  0013c	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 234  :     }
; 235  :     else if (clsid == CLSID_DirectMusicTempoTrack)

  0013f	e9 ad 05 00 00	 jmp	 $L69450
$L69461:
  00144	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicTempoTrack
  00149	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 _==@8
  00152	85 c0		 test	 eax, eax
  00154	74 15		 je	 SHORT $L69463

; 236  :     {
; 237  : //        pszClassName = "CLSID_DirectMusicTempoTrack";
; 238  : //        pszFunctionName = "DirectMusicTempoTrackCreate(iid,ppvInterface)";
; 239  : //        pszComment = "Tempo Track - defines tempo changes, always required for music";
; 240  :         hr = DirectMusicTempoTrackCreate(iid,ppvInterface);

  00156	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  00159	51		 push	 ecx
  0015a	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  0015d	52		 push	 edx
  0015e	e8 00 00 00 00	 call	 _DirectMusicTempoTrackCreate@8
  00163	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 241  :     }
; 242  :     else if (clsid == CLSID_DirectMusicTimeSigTrack)

  00166	e9 86 05 00 00	 jmp	 $L69450
$L69463:
  0016b	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicTimeSigTrack
  00170	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00173	50		 push	 eax
  00174	e8 00 00 00 00	 call	 _==@8
  00179	85 c0		 test	 eax, eax
  0017b	74 15		 je	 SHORT $L69465

; 243  :     {
; 244  : //        pszClassName = "CLSID_DirectMusicTimeSigTrack";
; 245  : //        pszFunctionName = "DirectMusicTimeSigTrackCreate(iid,ppvInterface)";
; 246  : //        pszComment = "Time Signature Track - defines time signature in segments, always required for music synchronization";
; 247  :         hr = DirectMusicTimeSigTrackCreate(iid,ppvInterface);

  0017d	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  00180	51		 push	 ecx
  00181	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  00184	52		 push	 edx
  00185	e8 00 00 00 00	 call	 _DirectMusicTimeSigTrackCreate@8
  0018a	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 248  :     }
; 249  :     else if (clsid == CLSID_DirectMusicBandTrack)

  0018d	e9 5f 05 00 00	 jmp	 $L69450
$L69465:
  00192	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicBandTrack
  00197	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _==@8
  001a0	85 c0		 test	 eax, eax
  001a2	74 15		 je	 SHORT $L69467

; 250  :     {
; 251  : //        pszClassName = "CLSID_DirectMusicBandTrack";
; 252  : //        pszFunctionName = "DirectMusicBandTrackCreate(iid,ppvInterface)";
; 253  : //        pszComment = "Band Track - manages one or more bands - always required for any MIDI + DLS playback";
; 254  :         hr = DirectMusicBandTrackCreate(iid,ppvInterface);

  001a4	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  001a7	51		 push	 ecx
  001a8	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  001ab	52		 push	 edx
  001ac	e8 00 00 00 00	 call	 _DirectMusicBandTrackCreate@8
  001b1	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 255  :     }
; 256  :     else if (clsid == CLSID_DirectMusicPerformance)

  001b4	e9 38 05 00 00	 jmp	 $L69450
$L69467:
  001b9	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicPerformance
  001be	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 _==@8
  001c7	85 c0		 test	 eax, eax
  001c9	74 15		 je	 SHORT $L69469

; 257  :     {
; 258  : //        pszClassName = "CLSID_DirectMusicPerformance";
; 259  : //        pszFunctionName = "DirectMusicPerformanceCreate(iid,ppvInterface)";
; 260  : //        pszComment = "Performance - segment playback framework, always required";
; 261  :         hr = DirectMusicPerformanceCreate(iid,ppvInterface);

  001cb	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  001ce	51		 push	 ecx
  001cf	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  001d2	52		 push	 edx
  001d3	e8 00 00 00 00	 call	 _DirectMusicPerformanceCreate@8
  001d8	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 262  :     }
; 263  :     else if (clsid == CLSID_DirectMusicBand)

  001db	e9 11 05 00 00	 jmp	 $L69450
$L69469:
  001e0	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicBand
  001e5	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  001e8	50		 push	 eax
  001e9	e8 00 00 00 00	 call	 _==@8
  001ee	85 c0		 test	 eax, eax
  001f0	74 15		 je	 SHORT $L69471

; 264  :     {
; 265  : //        pszClassName = "CLSID_DirectMusicBand";
; 266  : //        pszFunctionName = "DirectMusicBandCreate(iid,ppvInterface)";
; 267  : //        pszComment = "Band - manages downloading of DLS instruments as well as volume and pan presets - always required for MIDI + DLS";
; 268  :         hr = DirectMusicBandCreate(iid,ppvInterface);

  001f2	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  001f5	51		 push	 ecx
  001f6	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  001f9	52		 push	 edx
  001fa	e8 00 00 00 00	 call	 _DirectMusicBandCreate@8
  001ff	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 269  :     }
; 270  :     else if (clsid == CLSID_DirectMusicSeqTrack)

  00202	e9 ea 04 00 00	 jmp	 $L69450
$L69471:
  00207	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSeqTrack
  0020c	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0020f	50		 push	 eax
  00210	e8 00 00 00 00	 call	 _==@8
  00215	85 c0		 test	 eax, eax
  00217	74 15		 je	 SHORT $L69473

; 271  :     {
; 272  : //        pszClassName = "CLSID_DirectMusicSeqTrack";
; 273  : //        pszFunctionName = "DirectMusicSeqTrackCreate(iid,ppvInterface)";
; 274  : //        pszComment = "Sequence Track: plays straight MIDI sequences";
; 275  :         hr = DirectMusicSeqTrackCreate(iid,ppvInterface);

  00219	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  0021c	51		 push	 ecx
  0021d	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  00220	52		 push	 edx
  00221	e8 00 00 00 00	 call	 _DirectMusicSeqTrackCreate@8
  00226	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 276  :     }
; 277  : #endif
; 278  : #ifdef ADDWAVE
; 279  :     else if (clsid == CLSID_DirectSoundWave)

  00229	e9 c3 04 00 00	 jmp	 $L69450
$L69473:
  0022e	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectSoundWave
  00233	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00236	50		 push	 eax
  00237	e8 00 00 00 00	 call	 _==@8
  0023c	85 c0		 test	 eax, eax
  0023e	74 15		 je	 SHORT $L69475

; 280  :     {
; 281  : //        pszClassName = "CLSID_DirectSoundWave";
; 282  : //        pszFunctionName = "DirectSoundWaveCreate(iid,ppvInterface)";
; 283  : //        pszComment = "Wave: represents the file version of a wave - required if wave files are used";
; 284  :         hr = DirectSoundWaveCreate(iid,ppvInterface);

  00240	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  00243	51		 push	 ecx
  00244	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  00247	52		 push	 edx
  00248	e8 00 00 00 00	 call	 _DirectSoundWaveCreate@8
  0024d	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 285  :     }
; 286  :     else if (clsid == CLSID_DirectMusicWaveTrack)

  00250	e9 9c 04 00 00	 jmp	 $L69450
$L69475:
  00255	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicWaveTrack
  0025a	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0025d	50		 push	 eax
  0025e	e8 00 00 00 00	 call	 _==@8
  00263	85 c0		 test	 eax, eax
  00265	74 15		 je	 SHORT $L69477

; 287  :     {
; 288  : //        pszClassName = "CLSID_DirectMusicWaveTrack";
; 289  : //        pszFunctionName = "DirectMusicWaveTrackCreate(iid,ppvInterface)";
; 290  : //        pszComment = "Wave Track - plays one or more waves";
; 291  :         hr = DirectMusicWaveTrackCreate(iid,ppvInterface);

  00267	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  0026a	51		 push	 ecx
  0026b	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  0026e	52		 push	 edx
  0026f	e8 00 00 00 00	 call	 _DirectMusicWaveTrackCreate@8
  00274	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 292  :     }
; 293  : #endif
; 294  : #ifdef ADDSTYLE
; 295  :     else if (clsid == CLSID_DirectMusicChordTrack)

  00277	e9 75 04 00 00	 jmp	 $L69450
$L69477:
  0027c	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicChordTrack
  00281	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00284	50		 push	 eax
  00285	e8 00 00 00 00	 call	 _==@8
  0028a	85 c0		 test	 eax, eax
  0028c	74 15		 je	 SHORT $L69479

; 296  :     {
; 297  : //        pszClassName = "CLSID_DirectMusicChordTrack";
; 298  : //        pszFunctionName = "DirectMusicChordTrackCreate(iid,ppvInterface)";
; 299  : //        pszComment = "Chord Track - used for style playback";
; 300  :         hr = DirectMusicChordTrackCreate(iid,ppvInterface);

  0028e	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  00291	51		 push	 ecx
  00292	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  00295	52		 push	 edx
  00296	e8 00 00 00 00	 call	 _DirectMusicChordTrackCreate@8
  0029b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 301  :     }
; 302  :     else if (clsid == CLSID_DirectMusicCommandTrack)

  0029e	e9 4e 04 00 00	 jmp	 $L69450
$L69479:
  002a3	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicCommandTrack
  002a8	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 _==@8
  002b1	85 c0		 test	 eax, eax
  002b3	74 15		 je	 SHORT $L69481

; 303  :     {
; 304  : //        pszClassName = "CLSID_DirectMusicCommandTrack";
; 305  : //        pszFunctionName = "DirectMusicCommandTrackCreate(iid,ppvInterface)";
; 306  : //        pszComment = "Groove Track - used to store groove levels for style playback";
; 307  :         hr = DirectMusicCommandTrackCreate(iid,ppvInterface);

  002b5	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  002b8	51		 push	 ecx
  002b9	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  002bc	52		 push	 edx
  002bd	e8 00 00 00 00	 call	 _DirectMusicCommandTrackCreate@8
  002c2	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 308  :     }
; 309  :     else if (clsid == CLSID_DirectMusicStyleTrack)

  002c5	e9 27 04 00 00	 jmp	 $L69450
$L69481:
  002ca	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicStyleTrack
  002cf	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  002d2	50		 push	 eax
  002d3	e8 00 00 00 00	 call	 _==@8
  002d8	85 c0		 test	 eax, eax
  002da	74 15		 je	 SHORT $L69483

; 310  :     {
; 311  : //        pszClassName = "CLSID_DirectMusicStyleTrack";
; 312  : //        pszFunctionName = "DirectMusicStyleTrackCreate(iid,ppvInterface)";
; 313  : //        pszComment = "Style Track - selects style for playback";
; 314  :         hr = DirectMusicStyleTrackCreate(iid,ppvInterface);

  002dc	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  002df	51		 push	 ecx
  002e0	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  002e3	52		 push	 edx
  002e4	e8 00 00 00 00	 call	 _DirectMusicStyleTrackCreate@8
  002e9	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 315  :     }
; 316  :     else if (clsid == CLSID_DirectMusicPatternTrack)

  002ec	e9 00 04 00 00	 jmp	 $L69450
$L69483:
  002f1	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicPatternTrack
  002f6	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  002f9	50		 push	 eax
  002fa	e8 00 00 00 00	 call	 _==@8
  002ff	85 c0		 test	 eax, eax
  00301	74 15		 je	 SHORT $L69485

; 317  :     {
; 318  : //        pszClassName = "CLSID_DirectMusicPatternTrack";
; 319  : //        pszFunctionName = "DirectMusicPatternTrackCreate(iid,ppvInterface)";
; 320  : //        pszComment = "Pattern Track - plays patterns with variations tranposed to chord progression";
; 321  :         hr = DirectMusicPatternTrackCreate(iid,ppvInterface);

  00303	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  00306	51		 push	 ecx
  00307	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  0030a	52		 push	 edx
  0030b	e8 00 00 00 00	 call	 _DirectMusicPatternTrackCreate@8
  00310	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 322  :     }
; 323  :     else if (clsid == CLSID_DirectMusicMotifTrack)

  00313	e9 d9 03 00 00	 jmp	 $L69450
$L69485:
  00318	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicMotifTrack
  0031d	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00320	50		 push	 eax
  00321	e8 00 00 00 00	 call	 _==@8
  00326	85 c0		 test	 eax, eax
  00328	74 15		 je	 SHORT $L69487

; 324  :     {
; 325  : //        pszClassName = "CLSID_DirectMusicMotifTrack";
; 326  : //        pszFunctionName = "DirectMusicMotifTrackCreate(iid,ppvInterface)";
; 327  : //        pszComment = "Motif Track - mechanism for playing a style motif segment";
; 328  :         hr = DirectMusicMotifTrackCreate(iid,ppvInterface);

  0032a	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  0032d	51		 push	 ecx
  0032e	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  00331	52		 push	 edx
  00332	e8 00 00 00 00	 call	 _DirectMusicMotifTrackCreate@8
  00337	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 329  :     }
; 330  :     else if (clsid == CLSID_DirectMusicStyle)

  0033a	e9 b2 03 00 00	 jmp	 $L69450
$L69487:
  0033f	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicStyle
  00344	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00347	50		 push	 eax
  00348	e8 00 00 00 00	 call	 _==@8
  0034d	85 c0		 test	 eax, eax
  0034f	74 15		 je	 SHORT $L69489

; 331  :     {
; 332  : //        pszClassName = "CLSID_DirectMusicStyle";
; 333  : //        pszFunctionName = "DirectMusicStyleCreate(iid,ppvInterface)";
; 334  : //        pszComment = "Style - style playback object, represents a specific style type";
; 335  :         hr = DirectMusicStyleCreate(iid,ppvInterface);

  00351	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  00354	51		 push	 ecx
  00355	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  00358	52		 push	 edx
  00359	e8 00 00 00 00	 call	 _DirectMusicStyleCreate@8
  0035e	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 336  :     }
; 337  : #endif
; 338  : #ifdef ADDMELODY
; 339  :     else if (clsid == CLSID_DirectMusicMelodyFormulationTrack)

  00361	e9 8b 03 00 00	 jmp	 $L69450
$L69489:
  00366	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicMelodyFormulationTrack
  0036b	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0036e	50		 push	 eax
  0036f	e8 00 00 00 00	 call	 _==@8
  00374	85 c0		 test	 eax, eax
  00376	74 15		 je	 SHORT $L69491

; 340  :     {
; 341  : //        pszClassName = "CLSID_DirectMusicMelodyFormulationTrack";
; 342  : //        pszFunctionName = "DirectMusicMelodyFormulationTrackCreate(iid,ppvInterface)";
; 343  : //        pszComment = "Melody Formulation Track - define the shape of a melody";
; 344  :         hr = DirectMusicMelodyFormulationTrackCreate(iid,ppvInterface);

  00378	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  0037b	51		 push	 ecx
  0037c	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  0037f	52		 push	 edx
  00380	e8 00 00 00 00	 call	 _DirectMusicMelodyFormulationTrackCreate@8
  00385	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 345  :     }
; 346  : #endif
; 347  : #ifdef ADDCOMPOSER
; 348  :     else if (clsid == CLSID_DirectMusicComposer)

  00388	e9 64 03 00 00	 jmp	 $L69450
$L69491:
  0038d	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicComposer
  00392	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00395	50		 push	 eax
  00396	e8 00 00 00 00	 call	 _==@8
  0039b	85 c0		 test	 eax, eax
  0039d	74 15		 je	 SHORT $L69493

; 349  :     {
; 350  : //        pszClassName = "CLSID_DirectMusicComposer";
; 351  : //        pszFunctionName = "DirectMusicComposerCreate(iid,ppvInterface)";
; 352  : //        pszComment = "Composer: creates playback segments and autotransitions from chordmaps and template segments";
; 353  :         hr = DirectMusicComposerCreate(iid,ppvInterface);

  0039f	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  003a2	51		 push	 ecx
  003a3	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  003a6	52		 push	 edx
  003a7	e8 00 00 00 00	 call	 _DirectMusicComposerCreate@8
  003ac	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 354  :     }
; 355  :     else if (clsid == CLSID_DirectMusicChordMap)

  003af	e9 3d 03 00 00	 jmp	 $L69450
$L69493:
  003b4	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicChordMap
  003b9	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  003bc	50		 push	 eax
  003bd	e8 00 00 00 00	 call	 _==@8
  003c2	85 c0		 test	 eax, eax
  003c4	74 15		 je	 SHORT $L69495

; 356  :     {
; 357  : //        pszClassName = "CLSID_DirectMusicChordMap";
; 358  : //        pszFunctionName = "DirectMusicChordMapCreate(iid,ppvInterface)";
; 359  : //        pszComment = "ChordMap - defines chords to create chord progressions and transitions on the fly";
; 360  :         hr = DirectMusicChordMapCreate(iid,ppvInterface);

  003c6	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  003c9	51		 push	 ecx
  003ca	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  003cd	52		 push	 edx
  003ce	e8 00 00 00 00	 call	 _DirectMusicChordMapCreate@8
  003d3	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 361  :     }
; 362  :     else if (clsid == CLSID_DirectMusicChordMapTrack)

  003d6	e9 16 03 00 00	 jmp	 $L69450
$L69495:
  003db	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicChordMapTrack
  003e0	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  003e3	50		 push	 eax
  003e4	e8 00 00 00 00	 call	 _==@8
  003e9	85 c0		 test	 eax, eax
  003eb	74 15		 je	 SHORT $L69497

; 363  :     {
; 364  : //        pszClassName = "CLSID_DirectMusicChordMapTrack";
; 365  : //        pszFunctionName = "DirectMusicChordMapTrackCreate(iid,ppvInterface)";
; 366  : //        pszComment = "ChordMap Track - defines ChordMap to be used to compose a chord track";
; 367  :         hr = DirectMusicChordMapTrackCreate(iid,ppvInterface);

  003ed	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  003f0	51		 push	 ecx
  003f1	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  003f4	52		 push	 edx
  003f5	e8 00 00 00 00	 call	 _DirectMusicChordMapTrackCreate@8
  003fa	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 368  :     }
; 369  :     else if (clsid == CLSID_DirectMusicSignPostTrack)

  003fd	e9 ef 02 00 00	 jmp	 $L69450
$L69497:
  00402	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSignPostTrack
  00407	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0040a	50		 push	 eax
  0040b	e8 00 00 00 00	 call	 _==@8
  00410	85 c0		 test	 eax, eax
  00412	74 15		 je	 SHORT $L69499

; 370  :     {
; 371  : //        pszClassName = "CLSID_DirectMusicSignPostTrack";
; 372  : //        pszFunctionName = "DirectMusicSignPostTrackCreate(iid,ppvInterface)";
; 373  : //        pszComment = "SignPost Track - defines phrasing to be used to compose a chord track";
; 374  :         hr = DirectMusicSignPostTrackCreate(iid,ppvInterface);

  00414	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  00417	51		 push	 ecx
  00418	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  0041b	52		 push	 edx
  0041c	e8 00 00 00 00	 call	 _DirectMusicSignPostTrackCreate@8
  00421	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 375  :     }
; 376  : #endif
; 377  : #ifdef ADDSCRIPT
; 378  :     else if (clsid == CLSID_AutDirectMusicAudioPath)

  00424	e9 c8 02 00 00	 jmp	 $L69450
$L69499:
  00429	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_AutDirectMusicAudioPath
  0042e	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00431	50		 push	 eax
  00432	e8 00 00 00 00	 call	 _==@8
  00437	85 c0		 test	 eax, eax
  00439	74 19		 je	 SHORT $L69501

; 379  :     {
; 380  : //        pszClassName = "CLSID_AutDirectMusicAudioPath";
; 381  : //        pszFunctionName = "DirectMusicAutAudioPathCreate(pUnkOuter,iid,ppvInterface)";
; 382  : //        pszComment = "Audio Path Automation - used by scripting to control a style directly";
; 383  :         hr = DirectMusicAutAudioPathCreate(pUnkOuter,iid,ppvInterface);

  0043b	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  0043e	51		 push	 ecx
  0043f	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  00442	52		 push	 edx
  00443	8b 45 0c	 mov	 eax, DWORD PTR _pUnkOuter$[ebp]
  00446	50		 push	 eax
  00447	e8 00 00 00 00	 call	 _DirectMusicAutAudioPathCreate@12
  0044c	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 384  :     }
; 385  :     else if (clsid == CLSID_AutDirectMusicAudioPathConfig)

  0044f	e9 9d 02 00 00	 jmp	 $L69450
$L69501:
  00454	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_AutDirectMusicAudioPathConfig
  00459	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  0045c	51		 push	 ecx
  0045d	e8 00 00 00 00	 call	 _==@8
  00462	85 c0		 test	 eax, eax
  00464	74 19		 je	 SHORT $L69503

; 386  :     {
; 387  : //        pszClassName = "CLSID_AutDirectMusicAudioPathConfig";
; 388  : //        pszFunctionName = "DirectMusicAutAudioPathConfigCreate(pUnkOuter,iid,ppvInterface)";
; 389  : //        pszComment = "Audio Path Configuration Automation - used by scripting to control an audiopath configuration";
; 390  :         hr = DirectMusicAutAudioPathConfigCreate(pUnkOuter,iid,ppvInterface);

  00466	8b 55 14	 mov	 edx, DWORD PTR _ppvInterface$[ebp]
  00469	52		 push	 edx
  0046a	8b 45 10	 mov	 eax, DWORD PTR _iid$[ebp]
  0046d	50		 push	 eax
  0046e	8b 4d 0c	 mov	 ecx, DWORD PTR _pUnkOuter$[ebp]
  00471	51		 push	 ecx
  00472	e8 00 00 00 00	 call	 _DirectMusicAutAudioPathConfigCreate@12
  00477	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 391  :     }
; 392  :     else if (clsid == CLSID_AutDirectMusicSong)

  0047a	e9 72 02 00 00	 jmp	 $L69450
$L69503:
  0047f	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_AutDirectMusicSong
  00484	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  00487	52		 push	 edx
  00488	e8 00 00 00 00	 call	 _==@8
  0048d	85 c0		 test	 eax, eax
  0048f	74 19		 je	 SHORT $L69505

; 393  :     {
; 394  : //        pszClassName = "CLSID_AutDirectMusicSong";
; 395  : //        pszFunctionName = "DirectMusicAutSongCreate(pUnkOuter,iid,ppvInterface)";
; 396  : //        pszComment = "Song Automation - used by scripting to control a song";
; 397  :         hr = DirectMusicAutSongCreate(pUnkOuter,iid,ppvInterface);

  00491	8b 45 14	 mov	 eax, DWORD PTR _ppvInterface$[ebp]
  00494	50		 push	 eax
  00495	8b 4d 10	 mov	 ecx, DWORD PTR _iid$[ebp]
  00498	51		 push	 ecx
  00499	8b 55 0c	 mov	 edx, DWORD PTR _pUnkOuter$[ebp]
  0049c	52		 push	 edx
  0049d	e8 00 00 00 00	 call	 _DirectMusicAutSongCreate@12
  004a2	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 398  :     }
; 399  :     else if (clsid == CLSID_AutDirectMusicPerformance)

  004a5	e9 47 02 00 00	 jmp	 $L69450
$L69505:
  004aa	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_AutDirectMusicPerformance
  004af	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  004b2	50		 push	 eax
  004b3	e8 00 00 00 00	 call	 _==@8
  004b8	85 c0		 test	 eax, eax
  004ba	74 19		 je	 SHORT $L69507

; 400  :     {
; 401  : //        pszClassName = "CLSID_AutDirectMusicPerformance";
; 402  : //        pszFunctionName = "DirectMusicAutPerformanceCreate(pUnkOuter,iid,ppvInterface)";
; 403  : //        pszComment = "Performance Automation - used by scripting to control a performance";
; 404  :         hr = DirectMusicAutPerformanceCreate(pUnkOuter,iid,ppvInterface);

  004bc	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  004bf	51		 push	 ecx
  004c0	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  004c3	52		 push	 edx
  004c4	8b 45 0c	 mov	 eax, DWORD PTR _pUnkOuter$[ebp]
  004c7	50		 push	 eax
  004c8	e8 00 00 00 00	 call	 _DirectMusicAutPerformanceCreate@12
  004cd	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 405  :     }
; 406  :     else if (clsid == CLSID_AutDirectMusicSegment)

  004d0	e9 1c 02 00 00	 jmp	 $L69450
$L69507:
  004d5	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_AutDirectMusicSegment
  004da	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  004dd	51		 push	 ecx
  004de	e8 00 00 00 00	 call	 _==@8
  004e3	85 c0		 test	 eax, eax
  004e5	74 19		 je	 SHORT $L69509

; 407  :     {
; 408  : //        pszClassName = "CLSID_AutDirectMusicSegment";
; 409  : //        pszFunctionName = "DirectMusicAutSegmentCreate(pUnkOuter,iid,ppvInterface)";
; 410  : //        pszComment = "Segment Automation: used by scripting to control a segment";
; 411  :         hr = DirectMusicAutSegmentCreate(pUnkOuter,iid,ppvInterface);

  004e7	8b 55 14	 mov	 edx, DWORD PTR _ppvInterface$[ebp]
  004ea	52		 push	 edx
  004eb	8b 45 10	 mov	 eax, DWORD PTR _iid$[ebp]
  004ee	50		 push	 eax
  004ef	8b 4d 0c	 mov	 ecx, DWORD PTR _pUnkOuter$[ebp]
  004f2	51		 push	 ecx
  004f3	e8 00 00 00 00	 call	 _DirectMusicAutSegmentCreate@12
  004f8	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 412  :     }
; 413  :     else if (clsid == CLSID_DirectMusicScript)

  004fb	e9 f1 01 00 00	 jmp	 $L69450
$L69509:
  00500	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicScript
  00505	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  00508	52		 push	 edx
  00509	e8 00 00 00 00	 call	 _==@8
  0050e	85 c0		 test	 eax, eax
  00510	74 15		 je	 SHORT $L69511

; 414  :     {
; 415  : //        pszClassName = "CLSID_DirectMusicScript";
; 416  : //        pszFunctionName = "DirectMusicScriptCreate(iid,ppvInterface)";
; 417  : //        pszComment = "Script: Manages a script and all embedded and linked content";
; 418  :         hr = DirectMusicScriptCreate(iid,ppvInterface);

  00512	8b 45 14	 mov	 eax, DWORD PTR _ppvInterface$[ebp]
  00515	50		 push	 eax
  00516	8b 4d 10	 mov	 ecx, DWORD PTR _iid$[ebp]
  00519	51		 push	 ecx
  0051a	e8 00 00 00 00	 call	 _DirectMusicScriptCreate@8
  0051f	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 419  :     }
; 420  :     else if (clsid == CLSID_DirectMusicScriptTrack)

  00522	e9 ca 01 00 00	 jmp	 $L69450
$L69511:
  00527	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicScriptTrack
  0052c	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  0052f	52		 push	 edx
  00530	e8 00 00 00 00	 call	 _==@8
  00535	85 c0		 test	 eax, eax
  00537	74 15		 je	 SHORT $L69513

; 421  :     {
; 422  : //        pszClassName = "CLSID_DirectMusicScriptTrack";
; 423  : //        pszFunctionName = "DirectMusicScriptTrackCreate(iid,ppvInterface)";
; 424  : //        pszComment = "Script Track: Sequences script routines to play in time with the music";
; 425  :         hr = DirectMusicScriptTrackCreate(iid,ppvInterface);

  00539	8b 45 14	 mov	 eax, DWORD PTR _ppvInterface$[ebp]
  0053c	50		 push	 eax
  0053d	8b 4d 10	 mov	 ecx, DWORD PTR _iid$[ebp]
  00540	51		 push	 ecx
  00541	e8 00 00 00 00	 call	 _DirectMusicScriptTrackCreate@8
  00546	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 426  :     }
; 427  :     else if (clsid == CLSID_DirectMusicContainer)

  00549	e9 a3 01 00 00	 jmp	 $L69450
$L69513:
  0054e	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicContainer
  00553	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  00556	52		 push	 edx
  00557	e8 00 00 00 00	 call	 _==@8
  0055c	85 c0		 test	 eax, eax
  0055e	74 15		 je	 SHORT $L69515

; 428  :     {
; 429  : //        pszClassName = "CLSID_DirectMusicContainer";
; 430  : //        pszFunctionName = "DirectMusicContainerCreate(iid,ppvInterface)";
; 431  : //        pszComment = "Container: storage container for multiple DirectMusic file objects. Always used in scripting";
; 432  :         hr = DirectMusicContainerCreate(iid,ppvInterface);

  00560	8b 45 14	 mov	 eax, DWORD PTR _ppvInterface$[ebp]
  00563	50		 push	 eax
  00564	8b 4d 10	 mov	 ecx, DWORD PTR _iid$[ebp]
  00567	51		 push	 ecx
  00568	e8 00 00 00 00	 call	 _DirectMusicContainerCreate@8
  0056d	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 433  :     }
; 434  :     else if (clsid == CLSID_AutDirectMusicSegmentState)

  00570	e9 7c 01 00 00	 jmp	 $L69450
$L69515:
  00575	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_AutDirectMusicSegmentState
  0057a	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  0057d	52		 push	 edx
  0057e	e8 00 00 00 00	 call	 _==@8
  00583	85 c0		 test	 eax, eax
  00585	74 19		 je	 SHORT $L69517

; 435  :     {
; 436  : //        pszClassName = "CLSID_AutDirectMusicSegmentState";
; 437  : //        pszFunctionName = "CAutDirectMusicSegmentState(iid,ppvInterface)";
; 438  : //        pszComment = "A helper scripting object that implements IDispatch";
; 439  :         hr = AutDirectMusicSegmentStateCreate(pUnkOuter,iid,ppvInterface);

  00587	8b 45 14	 mov	 eax, DWORD PTR _ppvInterface$[ebp]
  0058a	50		 push	 eax
  0058b	8b 4d 10	 mov	 ecx, DWORD PTR _iid$[ebp]
  0058e	51		 push	 ecx
  0058f	8b 55 0c	 mov	 edx, DWORD PTR _pUnkOuter$[ebp]
  00592	52		 push	 edx
  00593	e8 00 00 00 00	 call	 _AutDirectMusicSegmentStateCreate@12
  00598	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 440  :     }
; 441  : #endif
; 442  : #ifdef ADDMISC
; 443  :     else if (clsid == CLSID_DirectMusicMuteTrack)

  0059b	e9 51 01 00 00	 jmp	 $L69450
$L69517:
  005a0	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicMuteTrack
  005a5	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  005a8	50		 push	 eax
  005a9	e8 00 00 00 00	 call	 _==@8
  005ae	85 c0		 test	 eax, eax
  005b0	74 15		 je	 SHORT $L69519

; 444  :     {
; 445  : //        pszClassName = "CLSID_DirectMusicMuteTrack";
; 446  : //        pszFunctionName = "DirectMusicMuteTrackCreate(iid,ppvInterface)";
; 447  : //        pszComment = "Mute Track - controls muting on sequence, style, and other event generating tracks";
; 448  :         hr = DirectMusicMuteTrackCreate(iid,ppvInterface);

  005b2	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  005b5	51		 push	 ecx
  005b6	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  005b9	52		 push	 edx
  005ba	e8 00 00 00 00	 call	 _DirectMusicMuteTrackCreate@8
  005bf	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 449  :     }
; 450  :     else if (clsid == CLSID_DirectMusicMarkerTrack)

  005c2	e9 2a 01 00 00	 jmp	 $L69450
$L69519:
  005c7	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicMarkerTrack
  005cc	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  005cf	50		 push	 eax
  005d0	e8 00 00 00 00	 call	 _==@8
  005d5	85 c0		 test	 eax, eax
  005d7	74 15		 je	 SHORT $L69521

; 451  :     {
; 452  : //        pszClassName = "CLSID_DirectMusicMarkerTrack";
; 453  : //        pszFunctionName = "DirectMusicMarkerTrackCreate(iid,ppvInterface)";
; 454  : //        pszComment = "Marker Track - indicates segment start and alignment points";
; 455  :         hr = DirectMusicMarkerTrackCreate(iid,ppvInterface);

  005d9	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  005dc	51		 push	 ecx
  005dd	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  005e0	52		 push	 edx
  005e1	e8 00 00 00 00	 call	 _DirectMusicMarkerTrackCreate@8
  005e6	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 456  :     }
; 457  :     else if (clsid == CLSID_DirectMusicSong)

  005e9	e9 03 01 00 00	 jmp	 $L69450
$L69521:
  005ee	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSong
  005f3	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  005f6	50		 push	 eax
  005f7	e8 00 00 00 00	 call	 _==@8
  005fc	85 c0		 test	 eax, eax
  005fe	74 15		 je	 SHORT $L69523

; 458  :     {
; 459  : //        pszClassName = "CLSID_DirectMusicSong";
; 460  : //        pszFunctionName = "DirectMusicSongCreate(iid,ppvInterface)";
; 461  : //        pszComment = "Song: manages the composition and playback of a set of segments";
; 462  :         hr = DirectMusicSongCreate(iid,ppvInterface);

  00600	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  00603	51		 push	 ecx
  00604	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  00607	52		 push	 edx
  00608	e8 00 00 00 00	 call	 _DirectMusicSongCreate@8
  0060d	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 463  :     }
; 464  :     else if (clsid == CLSID_DirectMusicAudioPathConfig)

  00610	e9 dc 00 00 00	 jmp	 $L69450
$L69523:
  00615	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicAudioPathConfig
  0061a	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0061d	50		 push	 eax
  0061e	e8 00 00 00 00	 call	 _==@8
  00623	85 c0		 test	 eax, eax
  00625	74 15		 je	 SHORT $L69525

; 465  :     {
; 466  : //        pszClassName = "CLSID_DirectMusicAudioPathConfig";
; 467  : //        pszFunctionName = "DirectMusicAudioPathConfigCreate(iid,ppvInterface)";
; 468  : //        pszComment = "Audio Path Configuration: file representation of an audiopath";
; 469  :         hr = DirectMusicAudioPathConfigCreate(iid,ppvInterface);

  00627	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  0062a	51		 push	 ecx
  0062b	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  0062e	52		 push	 edx
  0062f	e8 00 00 00 00	 call	 _DirectMusicAudioPathConfigCreate@8
  00634	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 470  :     }
; 471  :     else if (clsid == CLSID_DirectMusicGraph)

  00637	e9 b5 00 00 00	 jmp	 $L69450
$L69525:
  0063c	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicGraph
  00641	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00644	50		 push	 eax
  00645	e8 00 00 00 00	 call	 _==@8
  0064a	85 c0		 test	 eax, eax
  0064c	74 15		 je	 SHORT $L69527

; 472  :     {
; 473  : //        pszClassName = "CLSID_DirectMusicGraph";
; 474  : //        pszFunctionName = "DirectMusicGraphCreate(iid,ppvInterface)";
; 475  : //        pszComment = "Tool Graph: manages a set of Tools (MIDI Processors)";
; 476  :         hr = DirectMusicGraphCreate(iid,ppvInterface);

  0064e	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  00651	51		 push	 ecx
  00652	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  00655	52		 push	 edx
  00656	e8 00 00 00 00	 call	 _DirectMusicGraphCreate@8
  0065b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 477  :     }
; 478  :     else if (clsid == CLSID_DirectMusicSysExTrack)

  0065e	e9 8e 00 00 00	 jmp	 $L69450
$L69527:
  00663	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSysExTrack
  00668	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0066b	50		 push	 eax
  0066c	e8 00 00 00 00	 call	 _==@8
  00671	85 c0		 test	 eax, eax
  00673	74 12		 je	 SHORT $L69529

; 479  :     {
; 480  : //        pszClassName = "CLSID_DirectMusicSysExTrack";
; 481  : //        pszFunctionName = "DirectMusicSysexTrackCreate(iid,ppvInterface)";
; 482  : //        pszComment = "System Exclusive Track: sends system exclusive messages to the synthesizer";
; 483  :         hr = DirectMusicSysexTrackCreate(iid,ppvInterface);

  00675	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  00678	51		 push	 ecx
  00679	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  0067c	52		 push	 edx
  0067d	e8 00 00 00 00	 call	 _DirectMusicSysexTrackCreate@8
  00682	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 484  :     }
; 485  :     else if (clsid == CLSID_DirectMusicSegmentTriggerTrack)

  00685	eb 6a		 jmp	 SHORT $L69450
$L69529:
  00687	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSegmentTriggerTrack
  0068c	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0068f	50		 push	 eax
  00690	e8 00 00 00 00	 call	 _==@8
  00695	85 c0		 test	 eax, eax
  00697	74 12		 je	 SHORT $L69531

; 486  :     {
; 487  : //        pszClassName = "CLSID_DirectMusicSegmentTriggerTrack";
; 488  : //        pszFunctionName = "DirectMusicTriggerTrackCreate(iid,ppvInterface)";
; 489  : //        pszComment = "Segment Trigger Track: triggers additional segments";
; 490  :         hr = DirectMusicTriggerTrackCreate(iid,ppvInterface);

  00699	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  0069c	51		 push	 ecx
  0069d	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  006a0	52		 push	 edx
  006a1	e8 00 00 00 00	 call	 _DirectMusicTriggerTrackCreate@8
  006a6	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 491  :     }
; 492  :     else if (clsid == CLSID_DirectMusicLyricsTrack)

  006a9	eb 46		 jmp	 SHORT $L69450
$L69531:
  006ab	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicLyricsTrack
  006b0	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  006b3	50		 push	 eax
  006b4	e8 00 00 00 00	 call	 _==@8
  006b9	85 c0		 test	 eax, eax
  006bb	74 12		 je	 SHORT $L69533

; 493  :     {
; 494  : //        pszClassName = "CLSID_DirectMusicLyricsTrack";
; 495  : //        pszFunctionName = "DirectMusicLyricsTrackCreate(iid,ppvInterface)";
; 496  : //        pszComment = "Lyrics Track: sends lyrics";
; 497  :         hr = DirectMusicLyricsTrackCreate(iid,ppvInterface);

  006bd	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  006c0	51		 push	 ecx
  006c1	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  006c4	52		 push	 edx
  006c5	e8 00 00 00 00	 call	 _DirectMusicLyricsTrackCreate@8
  006ca	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 498  :     }
; 499  :     else if (clsid == CLSID_DirectMusicParamControlTrack)

  006cd	eb 22		 jmp	 SHORT $L69450
$L69533:
  006cf	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicParamControlTrack
  006d4	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  006d7	50		 push	 eax
  006d8	e8 00 00 00 00	 call	 _==@8
  006dd	85 c0		 test	 eax, eax
  006df	74 10		 je	 SHORT $L69450

; 500  :     {
; 501  : //        pszClassName = "CLSID_DirectMusicParamControlTrack";
; 502  : //        pszFunctionName = "DirectMusicParamsTrackCreate(iid,ppvInterface)";
; 503  : //        pszComment = "Parameter Control Track: provides realtime control of audio and MIDI effects";
; 504  :         hr = DirectMusicParamsTrackCreate(iid,ppvInterface);

  006e1	8b 4d 14	 mov	 ecx, DWORD PTR _ppvInterface$[ebp]
  006e4	51		 push	 ecx
  006e5	8b 55 10	 mov	 edx, DWORD PTR _iid$[ebp]
  006e8	52		 push	 edx
  006e9	e8 00 00 00 00	 call	 _DirectMusicParamsTrackCreate@8
  006ee	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L69450:

; 505  :     }
; 506  : #endif
; 507  : //    else
; 508  : //    {
; 509  : //        DbgPrint("Creating Unknown object ");
; 510  : //        DbgPrintGUID(clsid);
; 511  : //        DbgPrint(" Failed\n");
; 512  : //        return hr;
; 513  : //    }
; 514  :     if (SUCCEEDED(hr))

  006f1	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  006f5	7c 02		 jl	 SHORT $L69537

; 515  :     {
; 516  : //        InsertClass(pszClassName, pszFunctionName, pszComment);
; 517  : #ifdef SPEW
; 518  :         DbgPrint("Creating %s object with interface ",GetClassName(clsid));
; 519  :         DbgPrintGUID(iid);
; 520  :         DbgPrint(" Succeeded\n");
; 521  : #endif
; 522  :     }
; 523  :     else

  006f7	eb 47		 jmp	 SHORT $L69538
$L69537:

; 524  :     {
; 525  :         DbgPrint("Creating \"%s\" object with interface ",GetClassName(clsid));

  006f9	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  006fc	50		 push	 eax
  006fd	e8 00 00 00 00	 call	 ?GetClassName@@YGPADABU_GUID@@@Z ; GetClassName
  00702	50		 push	 eax
  00703	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@FHIGODDM@Creating?5?$CC?$CFs?$CC?5object?5with?5interf@
  00708	e8 00 00 00 00	 call	 _DbgPrint
  0070d	83 c4 08	 add	 esp, 8

; 526  :         DbgPrintGUID(iid);

  00710	8b 4d 10	 mov	 ecx, DWORD PTR _iid$[ebp]
  00713	51		 push	 ecx
  00714	e8 00 00 00 00	 call	 ?DbgPrintGUID@@YGXABU_GUID@@@Z ; DbgPrintGUID

; 527  :         DbgPrint("And clsid: ");

  00719	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@HEGJJGLC@And?5clsid?3?5?$AA@
  0071e	e8 00 00 00 00	 call	 _DbgPrint
  00723	83 c4 04	 add	 esp, 4

; 528  :         DbgPrintGUID(clsid);

  00726	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  00729	52		 push	 edx
  0072a	e8 00 00 00 00	 call	 ?DbgPrintGUID@@YGXABU_GUID@@@Z ; DbgPrintGUID

; 529  :         DbgPrint(" Failed, returned error: %lx\n",hr);

  0072f	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  00732	50		 push	 eax
  00733	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@JLFHNHLB@?5Failed?0?5returned?5error?3?5?$CFlx?6?$AA@
  00738	e8 00 00 00 00	 call	 _DbgPrint
  0073d	83 c4 08	 add	 esp, 8
$L69538:

; 530  :     }
; 531  :     return hr;

  00740	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 532  : }

  00743	8b e5		 mov	 esp, ebp
  00745	5d		 pop	 ebp
  00746	c2 10 00	 ret	 16			; 00000010H
_DirectMusicDefaultFactory@16 ENDP
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\guiddef.h
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8
_guidOther$ = 12
_==@8	PROC NEAR					; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  :     return IsEqualGUID(guidOne,guidOther);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IsEqualGUID@8

; 190  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:NEAR
; Function compile flags: /Odt
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8
_rguid2$ = 12
_IsEqualGUID@8 PROC NEAR				; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _memcmp
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 157  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@BMKPGKFE@Song?5IDispatch?$AA@		; `string'
PUBLIC	??_C@_0BG@NOLEBAMH@Performance?5IDispatch?$AA@	; `string'
PUBLIC	??_C@_0BC@BJFJMFKH@Segment?5IDispatch?$AA@	; `string'
PUBLIC	??_C@_06CEFAHBNL@Script?$AA@			; `string'
PUBLIC	??_C@_0N@NMLAFDKM@Script?5Track?$AA@		; `string'
PUBLIC	??_C@_09OIACHIKC@Container?$AA@			; `string'
PUBLIC	??_C@_0BI@FFFFCDAP@Segment?5State?5IDispatch?$AA@ ; `string'
PUBLIC	??_C@_0L@DIDCPPIA@Mute?5Track?$AA@		; `string'
PUBLIC	??_C@_0N@FKKHLJNN@Marker?5Track?$AA@		; `string'
PUBLIC	??_C@_04ENNOEBOG@Song?$AA@			; `string'
PUBLIC	??_C@_0BB@BPHPFIND@AudioPath?5Config?$AA@	; `string'
PUBLIC	??_C@_0L@FMNAONLH@Tool?5Graph?$AA@		; `string'
PUBLIC	??_C@_0M@CINMLIEN@SysEx?5Track?$AA@		; `string'
PUBLIC	??_C@_0BG@LEILHMLC@Segment?5Trigger?5Track?$AA@	; `string'
PUBLIC	??_C@_0N@DGGAFCHD@Lyrics?5Track?$AA@		; `string'
PUBLIC	??_C@_0BI@NIFNOE@Parameter?5Control?5Track?$AA@	; `string'
PUBLIC	??_C@_0P@KGDJFBJH@Unknown?5object?$AA@		; `string'
PUBLIC	??_C@_0M@MMHFGODI@DirectMusic?$AA@		; `string'
PUBLIC	??_C@_0P@FIKEMJMO@DLS?5Collection?$AA@		; `string'
PUBLIC	??_C@_0BA@KEOBKOOC@Microsoft?5Synth?$AA@	; `string'
PUBLIC	??_C@_0M@MAJGHNOA@File?5Stream?$AA@		; `string'
PUBLIC	??_C@_0P@DPKEGNIP@Stream?5Wrapper?$AA@		; `string'
PUBLIC	??_C@_0O@HNOCJJCE@Memory?5Stream?$AA@		; `string'
PUBLIC	??_C@_07OJELGGAG@Segment?$AA@			; `string'
PUBLIC	??_C@_06FLJJKOBF@Loader?$AA@			; `string'
PUBLIC	??_C@_0M@NDBHALDK@Tempo?5Track?$AA@		; `string'
PUBLIC	??_C@_0BF@ECNCKNIP@Time?5Signature?5Track?$AA@	; `string'
PUBLIC	??_C@_0L@HAMLOCKF@Band?5Track?$AA@		; `string'
PUBLIC	??_C@_0M@KPPBKPKK@Performance?$AA@		; `string'
PUBLIC	??_C@_04NLKMNLCE@Band?$AA@			; `string'
PUBLIC	??_C@_0BA@KIHNLICE@Seqquence?5Track?$AA@	; `string'
PUBLIC	??_C@_04HIICAAFP@Wave?$AA@			; `string'
PUBLIC	??_C@_0L@HENIGKNL@Wave?5Track?$AA@		; `string'
PUBLIC	??_C@_0M@BHGKKGKD@Chord?5Track?$AA@		; `string'
PUBLIC	??_C@_0O@HNDFOBDI@Command?5Track?$AA@		; `string'
PUBLIC	??_C@_0M@DNIGHFIB@Style?5Track?$AA@		; `string'
PUBLIC	??_C@_0O@LNFNEML@Pattern?5Track?$AA@		; `string'
PUBLIC	??_C@_0M@GEJOMBPA@Motif?5Track?$AA@		; `string'
PUBLIC	??_C@_05IHAFCALK@Style?$AA@			; `string'
PUBLIC	??_C@_0BJ@JLANMLI@Melody?5Formulation?5Track?$AA@ ; `string'
PUBLIC	??_C@_08CHJMLLDB@Composer?$AA@			; `string'
PUBLIC	??_C@_09KBIPEBMK@Chord?5Map?$AA@		; `string'
PUBLIC	??_C@_0BA@CMNCEKLA@Chord?5Map?5Track?$AA@	; `string'
PUBLIC	??_C@_0BA@OOHJMHEN@Sign?5Post?5Track?$AA@	; `string'
PUBLIC	??_C@_0BE@LNMDADKO@AudioPath?5IDispatch?$AA@	; `string'
PUBLIC	??_C@_0BL@EALLMIIO@AudioPath?5Config?5IDispatch?$AA@ ; `string'
EXTRN	_CLSID_DirectMusic:BYTE
;	COMDAT ??_C@_0M@MMHFGODI@DirectMusic?$AA@
; File c:\xbox\private\windows\directx\dmusic\dmime\dmcreate.cpp
CONST	SEGMENT
??_C@_0M@MMHFGODI@DirectMusic?$AA@ DB 'DirectMusic', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKEMJMO@DLS?5Collection?$AA@
CONST	SEGMENT
??_C@_0P@FIKEMJMO@DLS?5Collection?$AA@ DB 'DLS Collection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KEOBKOOC@Microsoft?5Synth?$AA@
CONST	SEGMENT
??_C@_0BA@KEOBKOOC@Microsoft?5Synth?$AA@ DB 'Microsoft Synth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MAJGHNOA@File?5Stream?$AA@
CONST	SEGMENT
??_C@_0M@MAJGHNOA@File?5Stream?$AA@ DB 'File Stream', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DPKEGNIP@Stream?5Wrapper?$AA@
CONST	SEGMENT
??_C@_0P@DPKEGNIP@Stream?5Wrapper?$AA@ DB 'Stream Wrapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HNOCJJCE@Memory?5Stream?$AA@
CONST	SEGMENT
??_C@_0O@HNOCJJCE@Memory?5Stream?$AA@ DB 'Memory Stream', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07OJELGGAG@Segment?$AA@
CONST	SEGMENT
??_C@_07OJELGGAG@Segment?$AA@ DB 'Segment', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FLJJKOBF@Loader?$AA@
CONST	SEGMENT
??_C@_06FLJJKOBF@Loader?$AA@ DB 'Loader', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NDBHALDK@Tempo?5Track?$AA@
CONST	SEGMENT
??_C@_0M@NDBHALDK@Tempo?5Track?$AA@ DB 'Tempo Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ECNCKNIP@Time?5Signature?5Track?$AA@
CONST	SEGMENT
??_C@_0BF@ECNCKNIP@Time?5Signature?5Track?$AA@ DB 'Time Signature Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HAMLOCKF@Band?5Track?$AA@
CONST	SEGMENT
??_C@_0L@HAMLOCKF@Band?5Track?$AA@ DB 'Band Track', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KPPBKPKK@Performance?$AA@
CONST	SEGMENT
??_C@_0M@KPPBKPKK@Performance?$AA@ DB 'Performance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NLKMNLCE@Band?$AA@
CONST	SEGMENT
??_C@_04NLKMNLCE@Band?$AA@ DB 'Band', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KIHNLICE@Seqquence?5Track?$AA@
CONST	SEGMENT
??_C@_0BA@KIHNLICE@Seqquence?5Track?$AA@ DB 'Seqquence Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIICAAFP@Wave?$AA@
CONST	SEGMENT
??_C@_04HIICAAFP@Wave?$AA@ DB 'Wave', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HENIGKNL@Wave?5Track?$AA@
CONST	SEGMENT
??_C@_0L@HENIGKNL@Wave?5Track?$AA@ DB 'Wave Track', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BHGKKGKD@Chord?5Track?$AA@
CONST	SEGMENT
??_C@_0M@BHGKKGKD@Chord?5Track?$AA@ DB 'Chord Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HNDFOBDI@Command?5Track?$AA@
CONST	SEGMENT
??_C@_0O@HNDFOBDI@Command?5Track?$AA@ DB 'Command Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DNIGHFIB@Style?5Track?$AA@
CONST	SEGMENT
??_C@_0M@DNIGHFIB@Style?5Track?$AA@ DB 'Style Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LNFNEML@Pattern?5Track?$AA@
CONST	SEGMENT
??_C@_0O@LNFNEML@Pattern?5Track?$AA@ DB 'Pattern Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GEJOMBPA@Motif?5Track?$AA@
CONST	SEGMENT
??_C@_0M@GEJOMBPA@Motif?5Track?$AA@ DB 'Motif Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHAFCALK@Style?$AA@
CONST	SEGMENT
??_C@_05IHAFCALK@Style?$AA@ DB 'Style', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JLANMLI@Melody?5Formulation?5Track?$AA@
CONST	SEGMENT
??_C@_0BJ@JLANMLI@Melody?5Formulation?5Track?$AA@ DB 'Melody Formulation '
	DB	'Track', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08CHJMLLDB@Composer?$AA@
CONST	SEGMENT
??_C@_08CHJMLLDB@Composer?$AA@ DB 'Composer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KBIPEBMK@Chord?5Map?$AA@
CONST	SEGMENT
??_C@_09KBIPEBMK@Chord?5Map?$AA@ DB 'Chord Map', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CMNCEKLA@Chord?5Map?5Track?$AA@
CONST	SEGMENT
??_C@_0BA@CMNCEKLA@Chord?5Map?5Track?$AA@ DB 'Chord Map Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OOHJMHEN@Sign?5Post?5Track?$AA@
CONST	SEGMENT
??_C@_0BA@OOHJMHEN@Sign?5Post?5Track?$AA@ DB 'Sign Post Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LNMDADKO@AudioPath?5IDispatch?$AA@
CONST	SEGMENT
??_C@_0BE@LNMDADKO@AudioPath?5IDispatch?$AA@ DB 'AudioPath IDispatch', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EALLMIIO@AudioPath?5Config?5IDispatch?$AA@
CONST	SEGMENT
??_C@_0BL@EALLMIIO@AudioPath?5Config?5IDispatch?$AA@ DB 'AudioPath Config'
	DB	' IDispatch', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BMKPGKFE@Song?5IDispatch?$AA@
CONST	SEGMENT
??_C@_0P@BMKPGKFE@Song?5IDispatch?$AA@ DB 'Song IDispatch', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NOLEBAMH@Performance?5IDispatch?$AA@
CONST	SEGMENT
??_C@_0BG@NOLEBAMH@Performance?5IDispatch?$AA@ DB 'Performance IDispatch', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BJFJMFKH@Segment?5IDispatch?$AA@
CONST	SEGMENT
??_C@_0BC@BJFJMFKH@Segment?5IDispatch?$AA@ DB 'Segment IDispatch', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CEFAHBNL@Script?$AA@
CONST	SEGMENT
??_C@_06CEFAHBNL@Script?$AA@ DB 'Script', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMLAFDKM@Script?5Track?$AA@
CONST	SEGMENT
??_C@_0N@NMLAFDKM@Script?5Track?$AA@ DB 'Script Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OIACHIKC@Container?$AA@
CONST	SEGMENT
??_C@_09OIACHIKC@Container?$AA@ DB 'Container', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FFFFCDAP@Segment?5State?5IDispatch?$AA@
CONST	SEGMENT
??_C@_0BI@FFFFCDAP@Segment?5State?5IDispatch?$AA@ DB 'Segment State IDisp'
	DB	'atch', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DIDCPPIA@Mute?5Track?$AA@
CONST	SEGMENT
??_C@_0L@DIDCPPIA@Mute?5Track?$AA@ DB 'Mute Track', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FKKHLJNN@Marker?5Track?$AA@
CONST	SEGMENT
??_C@_0N@FKKHLJNN@Marker?5Track?$AA@ DB 'Marker Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENNOEBOG@Song?$AA@
CONST	SEGMENT
??_C@_04ENNOEBOG@Song?$AA@ DB 'Song', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BPHPFIND@AudioPath?5Config?$AA@
CONST	SEGMENT
??_C@_0BB@BPHPFIND@AudioPath?5Config?$AA@ DB 'AudioPath Config', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FMNAONLH@Tool?5Graph?$AA@
CONST	SEGMENT
??_C@_0L@FMNAONLH@Tool?5Graph?$AA@ DB 'Tool Graph', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CINMLIEN@SysEx?5Track?$AA@
CONST	SEGMENT
??_C@_0M@CINMLIEN@SysEx?5Track?$AA@ DB 'SysEx Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LEILHMLC@Segment?5Trigger?5Track?$AA@
CONST	SEGMENT
??_C@_0BG@LEILHMLC@Segment?5Trigger?5Track?$AA@ DB 'Segment Trigger Track'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DGGAFCHD@Lyrics?5Track?$AA@
CONST	SEGMENT
??_C@_0N@DGGAFCHD@Lyrics?5Track?$AA@ DB 'Lyrics Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NIFNOE@Parameter?5Control?5Track?$AA@
CONST	SEGMENT
??_C@_0BI@NIFNOE@Parameter?5Control?5Track?$AA@ DB 'Parameter Control Tra'
	DB	'ck', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGDJFBJH@Unknown?5object?$AA@
CONST	SEGMENT
??_C@_0P@KGDJFBJH@Unknown?5object?$AA@ DB 'Unknown object', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetClassName@@YGPADABU_GUID@@@Z
_TEXT	SEGMENT
_clsid$ = 8
?GetClassName@@YGPADABU_GUID@@@Z PROC NEAR		; GetClassName, COMDAT

; 536  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 537  :     if (clsid == CLSID_DirectMusic)

  00003	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusic
  00008	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _==@8
  00011	85 c0		 test	 eax, eax
  00013	74 0a		 je	 SHORT $L69545

; 538  :     {
; 539  :         return "DirectMusic";

  00015	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0M@MMHFGODI@DirectMusic?$AA@
  0001a	e9 c6 04 00 00	 jmp	 $L69544
$L69545:

; 540  :     }
; 541  :     else if (clsid == CLSID_DirectMusicCollection)

  0001f	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicCollection
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _==@8
  0002d	85 c0		 test	 eax, eax
  0002f	74 0a		 je	 SHORT $L69548

; 542  :     {
; 543  :         return "DLS Collection";

  00031	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0P@FIKEMJMO@DLS?5Collection?$AA@
  00036	e9 aa 04 00 00	 jmp	 $L69544
$L69548:

; 544  :     }
; 545  :     else if (clsid == CLSID_DirectMusicSynth)

  0003b	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSynth
  00040	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 _==@8
  00049	85 c0		 test	 eax, eax
  0004b	74 0a		 je	 SHORT $L69551

; 546  :     {
; 547  :         return "Microsoft Synth";

  0004d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BA@KEOBKOOC@Microsoft?5Synth?$AA@
  00052	e9 8e 04 00 00	 jmp	 $L69544
$L69551:

; 548  :     }
; 549  :     else if (clsid == CLSID_DirectMusicFileStream)

  00057	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicFileStream
  0005c	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _==@8
  00065	85 c0		 test	 eax, eax
  00067	74 0a		 je	 SHORT $L69554

; 550  :     {
; 551  :         return "File Stream";

  00069	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0M@MAJGHNOA@File?5Stream?$AA@
  0006e	e9 72 04 00 00	 jmp	 $L69544
$L69554:

; 552  :     }
; 553  :     else if (clsid == CLSID_DirectMusicStreamStream)

  00073	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicStreamStream
  00078	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 _==@8
  00081	85 c0		 test	 eax, eax
  00083	74 0a		 je	 SHORT $L69557

; 554  :     {
; 555  :         return "Stream Wrapper";

  00085	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0P@DPKEGNIP@Stream?5Wrapper?$AA@
  0008a	e9 56 04 00 00	 jmp	 $L69544
$L69557:

; 556  :     }
; 557  :     else if (clsid == CLSID_DirectMusicMemStream)

  0008f	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicMemStream
  00094	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  00097	52		 push	 edx
  00098	e8 00 00 00 00	 call	 _==@8
  0009d	85 c0		 test	 eax, eax
  0009f	74 0a		 je	 SHORT $L69560

; 558  :     {
; 559  :         return "Memory Stream";

  000a1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0O@HNOCJJCE@Memory?5Stream?$AA@
  000a6	e9 3a 04 00 00	 jmp	 $L69544
$L69560:

; 560  :     }
; 561  :     else if (clsid == CLSID_DirectMusicSegment)

  000ab	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSegment
  000b0	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 _==@8
  000b9	85 c0		 test	 eax, eax
  000bb	74 0a		 je	 SHORT $L69563

; 562  :     {
; 563  :         return "Segment";

  000bd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_07OJELGGAG@Segment?$AA@
  000c2	e9 1e 04 00 00	 jmp	 $L69544
$L69563:

; 564  :     }
; 565  :     else if (clsid == CLSID_DirectMusicLoader)

  000c7	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicLoader
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 _==@8
  000d5	85 c0		 test	 eax, eax
  000d7	74 0a		 je	 SHORT $L69566

; 566  :     {
; 567  :         return "Loader";

  000d9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_06FLJJKOBF@Loader?$AA@
  000de	e9 02 04 00 00	 jmp	 $L69544
$L69566:

; 568  :     }
; 569  :     else if (clsid == CLSID_DirectMusicTempoTrack)

  000e3	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicTempoTrack
  000e8	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  000eb	52		 push	 edx
  000ec	e8 00 00 00 00	 call	 _==@8
  000f1	85 c0		 test	 eax, eax
  000f3	74 0a		 je	 SHORT $L69569

; 570  :     {
; 571  :         return "Tempo Track";

  000f5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0M@NDBHALDK@Tempo?5Track?$AA@
  000fa	e9 e6 03 00 00	 jmp	 $L69544
$L69569:

; 572  :     }
; 573  :     else if (clsid == CLSID_DirectMusicTimeSigTrack)

  000ff	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicTimeSigTrack
  00104	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 _==@8
  0010d	85 c0		 test	 eax, eax
  0010f	74 0a		 je	 SHORT $L69572

; 574  :     {
; 575  :         return "Time Signature Track";

  00111	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BF@ECNCKNIP@Time?5Signature?5Track?$AA@
  00116	e9 ca 03 00 00	 jmp	 $L69544
$L69572:

; 576  :     }
; 577  :     else if (clsid == CLSID_DirectMusicBandTrack)

  0011b	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicBandTrack
  00120	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  00123	51		 push	 ecx
  00124	e8 00 00 00 00	 call	 _==@8
  00129	85 c0		 test	 eax, eax
  0012b	74 0a		 je	 SHORT $L69575

; 578  :     {
; 579  :         return "Band Track";

  0012d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0L@HAMLOCKF@Band?5Track?$AA@
  00132	e9 ae 03 00 00	 jmp	 $L69544
$L69575:

; 580  :     }
; 581  :     else if (clsid == CLSID_DirectMusicPerformance)

  00137	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicPerformance
  0013c	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  0013f	52		 push	 edx
  00140	e8 00 00 00 00	 call	 _==@8
  00145	85 c0		 test	 eax, eax
  00147	74 0a		 je	 SHORT $L69578

; 582  :     {
; 583  :         return "Performance";

  00149	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0M@KPPBKPKK@Performance?$AA@
  0014e	e9 92 03 00 00	 jmp	 $L69544
$L69578:

; 584  :     }
; 585  :     else if (clsid == CLSID_DirectMusicBand)

  00153	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicBand
  00158	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _==@8
  00161	85 c0		 test	 eax, eax
  00163	74 0a		 je	 SHORT $L69581

; 586  :     {
; 587  :         return "Band";

  00165	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_04NLKMNLCE@Band?$AA@
  0016a	e9 76 03 00 00	 jmp	 $L69544
$L69581:

; 588  :     }
; 589  :     else if (clsid == CLSID_DirectMusicSeqTrack)

  0016f	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSeqTrack
  00174	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  00177	51		 push	 ecx
  00178	e8 00 00 00 00	 call	 _==@8
  0017d	85 c0		 test	 eax, eax
  0017f	74 0a		 je	 SHORT $L69584

; 590  :     {
; 591  :         return "Seqquence Track";

  00181	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BA@KIHNLICE@Seqquence?5Track?$AA@
  00186	e9 5a 03 00 00	 jmp	 $L69544
$L69584:

; 592  :     }
; 593  :     else if (clsid == CLSID_DirectSoundWave)

  0018b	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectSoundWave
  00190	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  00193	52		 push	 edx
  00194	e8 00 00 00 00	 call	 _==@8
  00199	85 c0		 test	 eax, eax
  0019b	74 0a		 je	 SHORT $L69587

; 594  :     {
; 595  :         return "Wave";

  0019d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_04HIICAAFP@Wave?$AA@
  001a2	e9 3e 03 00 00	 jmp	 $L69544
$L69587:

; 596  :     }
; 597  :     else if (clsid == CLSID_DirectMusicWaveTrack)

  001a7	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicWaveTrack
  001ac	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 _==@8
  001b5	85 c0		 test	 eax, eax
  001b7	74 0a		 je	 SHORT $L69590

; 598  :     {
; 599  :         return "Wave Track";

  001b9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0L@HENIGKNL@Wave?5Track?$AA@
  001be	e9 22 03 00 00	 jmp	 $L69544
$L69590:

; 600  :     }
; 601  :     else if (clsid == CLSID_DirectMusicChordTrack)

  001c3	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicChordTrack
  001c8	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  001cb	51		 push	 ecx
  001cc	e8 00 00 00 00	 call	 _==@8
  001d1	85 c0		 test	 eax, eax
  001d3	74 0a		 je	 SHORT $L69593

; 602  :     {
; 603  :         return "Chord Track";

  001d5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0M@BHGKKGKD@Chord?5Track?$AA@
  001da	e9 06 03 00 00	 jmp	 $L69544
$L69593:

; 604  :     }
; 605  :     else if (clsid == CLSID_DirectMusicCommandTrack)

  001df	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicCommandTrack
  001e4	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  001e7	52		 push	 edx
  001e8	e8 00 00 00 00	 call	 _==@8
  001ed	85 c0		 test	 eax, eax
  001ef	74 0a		 je	 SHORT $L69596

; 606  :     {
; 607  :         return "Command Track";

  001f1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0O@HNDFOBDI@Command?5Track?$AA@
  001f6	e9 ea 02 00 00	 jmp	 $L69544
$L69596:

; 608  :     }
; 609  :     else if (clsid == CLSID_DirectMusicStyleTrack)

  001fb	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicStyleTrack
  00200	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00203	50		 push	 eax
  00204	e8 00 00 00 00	 call	 _==@8
  00209	85 c0		 test	 eax, eax
  0020b	74 0a		 je	 SHORT $L69599

; 610  :     {
; 611  :         return "Style Track";

  0020d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0M@DNIGHFIB@Style?5Track?$AA@
  00212	e9 ce 02 00 00	 jmp	 $L69544
$L69599:

; 612  :     }
; 613  :     else if (clsid == CLSID_DirectMusicPatternTrack)

  00217	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicPatternTrack
  0021c	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 _==@8
  00225	85 c0		 test	 eax, eax
  00227	74 0a		 je	 SHORT $L69602

; 614  :     {
; 615  :         return "Pattern Track";

  00229	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0O@LNFNEML@Pattern?5Track?$AA@
  0022e	e9 b2 02 00 00	 jmp	 $L69544
$L69602:

; 616  :     }
; 617  :     else if (clsid == CLSID_DirectMusicMotifTrack)

  00233	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicMotifTrack
  00238	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  0023b	52		 push	 edx
  0023c	e8 00 00 00 00	 call	 _==@8
  00241	85 c0		 test	 eax, eax
  00243	74 0a		 je	 SHORT $L69605

; 618  :     {
; 619  :         return "Motif Track";

  00245	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0M@GEJOMBPA@Motif?5Track?$AA@
  0024a	e9 96 02 00 00	 jmp	 $L69544
$L69605:

; 620  :     }
; 621  :     else if (clsid == CLSID_DirectMusicStyle)

  0024f	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicStyle
  00254	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 _==@8
  0025d	85 c0		 test	 eax, eax
  0025f	74 0a		 je	 SHORT $L69608

; 622  :     {
; 623  :         return "Style";

  00261	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_05IHAFCALK@Style?$AA@
  00266	e9 7a 02 00 00	 jmp	 $L69544
$L69608:

; 624  :     }
; 625  :     else if (clsid == CLSID_DirectMusicMelodyFormulationTrack)

  0026b	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicMelodyFormulationTrack
  00270	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  00273	51		 push	 ecx
  00274	e8 00 00 00 00	 call	 _==@8
  00279	85 c0		 test	 eax, eax
  0027b	74 0a		 je	 SHORT $L69611

; 626  :     {
; 627  :         return "Melody Formulation Track";

  0027d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BJ@JLANMLI@Melody?5Formulation?5Track?$AA@
  00282	e9 5e 02 00 00	 jmp	 $L69544
$L69611:

; 628  :     }
; 629  :     else if (clsid == CLSID_DirectMusicComposer)

  00287	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicComposer
  0028c	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  0028f	52		 push	 edx
  00290	e8 00 00 00 00	 call	 _==@8
  00295	85 c0		 test	 eax, eax
  00297	74 0a		 je	 SHORT $L69614

; 630  :     {
; 631  :         return "Composer";

  00299	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_08CHJMLLDB@Composer?$AA@
  0029e	e9 42 02 00 00	 jmp	 $L69544
$L69614:

; 632  :     }
; 633  :     else if (clsid == CLSID_DirectMusicChordMap)

  002a3	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicChordMap
  002a8	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 _==@8
  002b1	85 c0		 test	 eax, eax
  002b3	74 0a		 je	 SHORT $L69617

; 634  :     {
; 635  :         return "Chord Map";

  002b5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_09KBIPEBMK@Chord?5Map?$AA@
  002ba	e9 26 02 00 00	 jmp	 $L69544
$L69617:

; 636  :     }
; 637  :     else if (clsid == CLSID_DirectMusicChordMapTrack)

  002bf	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicChordMapTrack
  002c4	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  002c7	51		 push	 ecx
  002c8	e8 00 00 00 00	 call	 _==@8
  002cd	85 c0		 test	 eax, eax
  002cf	74 0a		 je	 SHORT $L69620

; 638  :     {
; 639  :         return "Chord Map Track";

  002d1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BA@CMNCEKLA@Chord?5Map?5Track?$AA@
  002d6	e9 0a 02 00 00	 jmp	 $L69544
$L69620:

; 640  :     }
; 641  :     else if (clsid == CLSID_DirectMusicSignPostTrack)

  002db	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSignPostTrack
  002e0	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  002e3	52		 push	 edx
  002e4	e8 00 00 00 00	 call	 _==@8
  002e9	85 c0		 test	 eax, eax
  002eb	74 0a		 je	 SHORT $L69623

; 642  :     {
; 643  :         return "Sign Post Track";

  002ed	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BA@OOHJMHEN@Sign?5Post?5Track?$AA@
  002f2	e9 ee 01 00 00	 jmp	 $L69544
$L69623:

; 644  :     }
; 645  :     else if (clsid == CLSID_AutDirectMusicAudioPath)

  002f7	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_AutDirectMusicAudioPath
  002fc	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  002ff	50		 push	 eax
  00300	e8 00 00 00 00	 call	 _==@8
  00305	85 c0		 test	 eax, eax
  00307	74 0a		 je	 SHORT $L69626

; 646  :     {
; 647  :         return "AudioPath IDispatch";

  00309	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BE@LNMDADKO@AudioPath?5IDispatch?$AA@
  0030e	e9 d2 01 00 00	 jmp	 $L69544
$L69626:

; 648  :     }
; 649  :     else if (clsid == CLSID_AutDirectMusicAudioPathConfig)

  00313	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_AutDirectMusicAudioPathConfig
  00318	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  0031b	51		 push	 ecx
  0031c	e8 00 00 00 00	 call	 _==@8
  00321	85 c0		 test	 eax, eax
  00323	74 0a		 je	 SHORT $L69629

; 650  :     {
; 651  :         return "AudioPath Config IDispatch";

  00325	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BL@EALLMIIO@AudioPath?5Config?5IDispatch?$AA@
  0032a	e9 b6 01 00 00	 jmp	 $L69544
$L69629:

; 652  :     }
; 653  :     else if (clsid == CLSID_AutDirectMusicSong)

  0032f	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_AutDirectMusicSong
  00334	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  00337	52		 push	 edx
  00338	e8 00 00 00 00	 call	 _==@8
  0033d	85 c0		 test	 eax, eax
  0033f	74 0a		 je	 SHORT $L69632

; 654  :     {
; 655  :         return "Song IDispatch";

  00341	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0P@BMKPGKFE@Song?5IDispatch?$AA@
  00346	e9 9a 01 00 00	 jmp	 $L69544
$L69632:

; 656  :     }
; 657  :     else if (clsid == CLSID_AutDirectMusicPerformance)

  0034b	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_AutDirectMusicPerformance
  00350	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  00353	50		 push	 eax
  00354	e8 00 00 00 00	 call	 _==@8
  00359	85 c0		 test	 eax, eax
  0035b	74 0a		 je	 SHORT $L69635

; 658  :     {
; 659  :         return "Performance IDispatch";

  0035d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BG@NOLEBAMH@Performance?5IDispatch?$AA@
  00362	e9 7e 01 00 00	 jmp	 $L69544
$L69635:

; 660  :     }
; 661  :     else if (clsid == CLSID_AutDirectMusicSegment)

  00367	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_AutDirectMusicSegment
  0036c	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  0036f	51		 push	 ecx
  00370	e8 00 00 00 00	 call	 _==@8
  00375	85 c0		 test	 eax, eax
  00377	74 0a		 je	 SHORT $L69638

; 662  :     {
; 663  :         return "Segment IDispatch";

  00379	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BC@BJFJMFKH@Segment?5IDispatch?$AA@
  0037e	e9 62 01 00 00	 jmp	 $L69544
$L69638:

; 664  :     }
; 665  :     else if (clsid == CLSID_DirectMusicScript)

  00383	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicScript
  00388	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  0038b	52		 push	 edx
  0038c	e8 00 00 00 00	 call	 _==@8
  00391	85 c0		 test	 eax, eax
  00393	74 0a		 je	 SHORT $L69641

; 666  :     {
; 667  :         return "Script";

  00395	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_06CEFAHBNL@Script?$AA@
  0039a	e9 46 01 00 00	 jmp	 $L69544
$L69641:

; 668  :     }
; 669  :     else if (clsid == CLSID_DirectMusicScriptTrack)

  0039f	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicScriptTrack
  003a4	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  003a7	50		 push	 eax
  003a8	e8 00 00 00 00	 call	 _==@8
  003ad	85 c0		 test	 eax, eax
  003af	74 0a		 je	 SHORT $L69644

; 670  :     {
; 671  :         return "Script Track";

  003b1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0N@NMLAFDKM@Script?5Track?$AA@
  003b6	e9 2a 01 00 00	 jmp	 $L69544
$L69644:

; 672  :     }
; 673  :     else if (clsid == CLSID_DirectMusicContainer)

  003bb	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicContainer
  003c0	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  003c3	51		 push	 ecx
  003c4	e8 00 00 00 00	 call	 _==@8
  003c9	85 c0		 test	 eax, eax
  003cb	74 0a		 je	 SHORT $L69647

; 674  :     {
; 675  :         return "Container";

  003cd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_09OIACHIKC@Container?$AA@
  003d2	e9 0e 01 00 00	 jmp	 $L69544
$L69647:

; 676  :     }
; 677  :     else if (clsid == CLSID_AutDirectMusicSegmentState)

  003d7	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_AutDirectMusicSegmentState
  003dc	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  003df	52		 push	 edx
  003e0	e8 00 00 00 00	 call	 _==@8
  003e5	85 c0		 test	 eax, eax
  003e7	74 0a		 je	 SHORT $L69650

; 678  :     {
; 679  :         return "Segment State IDispatch";

  003e9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BI@FFFFCDAP@Segment?5State?5IDispatch?$AA@
  003ee	e9 f2 00 00 00	 jmp	 $L69544
$L69650:

; 680  :     }
; 681  :     else if (clsid == CLSID_DirectMusicMuteTrack)

  003f3	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicMuteTrack
  003f8	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  003fb	50		 push	 eax
  003fc	e8 00 00 00 00	 call	 _==@8
  00401	85 c0		 test	 eax, eax
  00403	74 0a		 je	 SHORT $L69653

; 682  :     {
; 683  :         return "Mute Track";

  00405	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0L@DIDCPPIA@Mute?5Track?$AA@
  0040a	e9 d6 00 00 00	 jmp	 $L69544
$L69653:

; 684  :     }
; 685  :     else if (clsid == CLSID_DirectMusicMarkerTrack)

  0040f	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicMarkerTrack
  00414	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  00417	51		 push	 ecx
  00418	e8 00 00 00 00	 call	 _==@8
  0041d	85 c0		 test	 eax, eax
  0041f	74 0a		 je	 SHORT $L69656

; 686  :     {
; 687  :         return "Marker Track";

  00421	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0N@FKKHLJNN@Marker?5Track?$AA@
  00426	e9 ba 00 00 00	 jmp	 $L69544
$L69656:

; 688  :     }
; 689  :     else if (clsid == CLSID_DirectMusicSong)

  0042b	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSong
  00430	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  00433	52		 push	 edx
  00434	e8 00 00 00 00	 call	 _==@8
  00439	85 c0		 test	 eax, eax
  0043b	74 0a		 je	 SHORT $L69659

; 690  :     {
; 691  :         return "Song";

  0043d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_04ENNOEBOG@Song?$AA@
  00442	e9 9e 00 00 00	 jmp	 $L69544
$L69659:

; 692  :     }
; 693  :     else if (clsid == CLSID_DirectMusicAudioPathConfig)

  00447	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicAudioPathConfig
  0044c	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0044f	50		 push	 eax
  00450	e8 00 00 00 00	 call	 _==@8
  00455	85 c0		 test	 eax, eax
  00457	74 0a		 je	 SHORT $L69662

; 694  :     {
; 695  :         return "AudioPath Config";

  00459	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BB@BPHPFIND@AudioPath?5Config?$AA@
  0045e	e9 82 00 00 00	 jmp	 $L69544
$L69662:

; 696  :     }
; 697  :     else if (clsid == CLSID_DirectMusicGraph)

  00463	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicGraph
  00468	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  0046b	51		 push	 ecx
  0046c	e8 00 00 00 00	 call	 _==@8
  00471	85 c0		 test	 eax, eax
  00473	74 07		 je	 SHORT $L69665

; 698  :     {
; 699  :         return "Tool Graph";

  00475	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0L@FMNAONLH@Tool?5Graph?$AA@
  0047a	eb 69		 jmp	 SHORT $L69544
$L69665:

; 700  :     }
; 701  :     else if (clsid == CLSID_DirectMusicSysExTrack)

  0047c	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSysExTrack
  00481	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  00484	52		 push	 edx
  00485	e8 00 00 00 00	 call	 _==@8
  0048a	85 c0		 test	 eax, eax
  0048c	74 07		 je	 SHORT $L69668

; 702  :     {
; 703  :         return "SysEx Track";

  0048e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0M@CINMLIEN@SysEx?5Track?$AA@
  00493	eb 50		 jmp	 SHORT $L69544
$L69668:

; 704  :     }
; 705  :     else if (clsid == CLSID_DirectMusicSegmentTriggerTrack)

  00495	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSegmentTriggerTrack
  0049a	8b 45 08	 mov	 eax, DWORD PTR _clsid$[ebp]
  0049d	50		 push	 eax
  0049e	e8 00 00 00 00	 call	 _==@8
  004a3	85 c0		 test	 eax, eax
  004a5	74 07		 je	 SHORT $L69671

; 706  :     {
; 707  :         return "Segment Trigger Track";

  004a7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BG@LEILHMLC@Segment?5Trigger?5Track?$AA@
  004ac	eb 37		 jmp	 SHORT $L69544
$L69671:

; 708  :     }
; 709  :     else if (clsid == CLSID_DirectMusicLyricsTrack)

  004ae	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicLyricsTrack
  004b3	8b 4d 08	 mov	 ecx, DWORD PTR _clsid$[ebp]
  004b6	51		 push	 ecx
  004b7	e8 00 00 00 00	 call	 _==@8
  004bc	85 c0		 test	 eax, eax
  004be	74 07		 je	 SHORT $L69674

; 710  :     {
; 711  :         return "Lyrics Track";

  004c0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0N@DGGAFCHD@Lyrics?5Track?$AA@
  004c5	eb 1e		 jmp	 SHORT $L69544
$L69674:

; 712  :     }
; 713  :     else if (clsid == CLSID_DirectMusicParamControlTrack)

  004c7	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicParamControlTrack
  004cc	8b 55 08	 mov	 edx, DWORD PTR _clsid$[ebp]
  004cf	52		 push	 edx
  004d0	e8 00 00 00 00	 call	 _==@8
  004d5	85 c0		 test	 eax, eax
  004d7	74 07		 je	 SHORT $L69547

; 714  :     {
; 715  :         return "Parameter Control Track";

  004d9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0BI@NIFNOE@Parameter?5Control?5Track?$AA@
  004de	eb 05		 jmp	 SHORT $L69544
$L69547:

; 716  :     }
; 717  :     return "Unknown object";

  004e0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0P@KGDJFBJH@Unknown?5object?$AA@
$L69544:

; 718  : }

  004e5	5d		 pop	 ebp
  004e6	c2 04 00	 ret	 4
?GetClassName@@YGPADABU_GUID@@@Z ENDP			; GetClassName
_TEXT	ENDS
END
