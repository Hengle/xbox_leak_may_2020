; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	..\wavtrack.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DL@ONJFGHAO@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DK@EFNABGPN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MIJOINAD@pStateData?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@BMJBMIKG@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EG@JDCIEGEM@Error?3?5Wave?5track?5clone?5failed?5b@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DF@JEELNDEJ@Error?3?5Unable?5to?5play?5wave?5track@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@PMAKFCHE@New?5variation?3?5?$CFd?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DK@ONLFCIMD@Error?3?5Unable?5to?5read?5wave?5track@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EH@HFBNOGCM@Warning?3?5Empty?5wave?5item?5in?5wave@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@ECNEBDKL@m_rtTimePhysical?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CM@HABPMDLN@Wave?5track?5unable?5to?5load?5refere@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DB@NMLLPLIH@Content?5Error?3?5Unable?5to?5load?5WA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EL@OGHKJELM@Content?5Error?3?5Wave?5item?5in?5wave@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BGAOHDMM@?$CBp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT ?PhysicalLess@@YGHAAUWaveItem@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LogicalLess@@YGHAAUWaveItem@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Construct@CWavTrack@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@CWavTrack@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUpTempParts@CWavTrack@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MovePartsToTemp@CWavTrack@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWavTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPrivateWaveTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack8@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWavTrack@@QAE@ABV0@JJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitTrack@CWavTrack@@IAEJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CWavTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CWavTrack@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CWavTrack@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CWavTrack@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCWavTrack@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassID@CWavTrack@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsDirty@CWavTrack@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CWavTrack@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UWavePart@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyParts@CWavTrack@@IAEJABV?$TList@UWavePart@@@@JJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertByAscendingPChannel@CWavTrack@@IAEXPAV?$TListItem@UWavePart@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Save@CWavTrack@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CWavTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsParamSupported@CWavTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CWavTrack@@UAGJPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GWaveStateData@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndPlay@CWavTrack@@UAGJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetUpStateCurrentPointers@CWavTrack@@IAEXPAUWaveStateData@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertOffset@@YG_J_JJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Play@CWavTrack@@IAEJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Seek@CWavTrack@@IAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@KPAUWaveStateData@@_JH3H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParam@CWavTrack@@UAGJABU_GUID@@JPAJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetParam@CWavTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParamEx@CWavTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetParamEx@CWavTrack@@UAGJABU_GUID@@_JPAX2K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddNotificationType@CWavTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveNotificationType@CWavTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@CWavTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compose@CWavTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Join@CWavTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ComputeVariations@CWavTrack@@IAEJPAUWaveStateData@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SyncVariations@CWavTrack@@IAEJPAUIDirectMusicPerformance@@PAUWaveStateData@@_J2H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ComputeVariation@CWavTrack@@IAEJHAAUWavePart@@PAUWaveStateData@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddWave@CWavTrack@@UAGJPAUIDirectSoundWave@@_JKKPA_J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@WavePart@@QAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@WavePart@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyItems@WavePart@@QAEJABV?$TList@UWaveItem@@@@JJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWaveParams@WavePart@@QAEXPAU_DMUS_IO_WAVE_HEADER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@WavePart@@QAEJPAUIDirectSoundWave@@_JKKPA_J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@WaveItem@@QAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadReference@WaveItem@@QAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@WaveItem@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWaveParams@WaveItem@@QAEXPAU_DMUS_IO_WAVE_HEADER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@WaveItem@@QAEJPAUIDirectSoundWave@@_JPA_J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UWaveItem@@@@QBEPAV?$TListItem@UWaveItem@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UWaveItem@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UWaveItem@@@@QAEXPAV?$TListItem@UWaveItem@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UWavePart@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UWavePart@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UWavePart@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCount@?$TList@UWavePart@@@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UWavePart@@@@QAEXPAV?$TListItem@UWavePart@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@?$TList@UWavePart@@@@QAEPAV?$TListItem@UWavePart@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@ULyricInfo@@@@QBEPAV?$TListItem@ULyricInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@ULyricInfo@@@@QAEXPAV?$TListItem@ULyricInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UWaveItem@@@@QAEAAUWaveItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@ULyricInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@ULyricInfo@@@@QAEAAULyricInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@UTriggerInfo@@@@SGHAAUTriggerInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@ULyricInfo@@@@SGHAAULyricInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UWavePart@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UWavePart@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UWaveItem@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@ULyricInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEAAV01@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UTriggerInfo@@@@QAEXP6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@ULyricInfo@@@@QAEXP6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_SEQ_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_CURVE_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@_J@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UObjectInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UWavePart@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UWavePart@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UWavePart@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCount@?$TListItem@UWavePart@@@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UWaveItem@@@@QAEXP6GHAAUWaveItem@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UWaveItem@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ObjectInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UTriggerInfo@@@@QAEPAV1@P6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@ULyricInfo@@@@QAEPAV1@P6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UWaveItem@@@@QAEPAV1@P6GHAAUWaveItem@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UTriggerInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UTriggerInfo@@@@AAEPAV1@PAV1@P6GHAAUTriggerInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@ULyricInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@ULyricInfo@@@@AAEPAV1@PAV1@P6GHAAULyricInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UWaveItem@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UWaveItem@@@@AAEPAV1@PAV1@P6GHAAUWaveItem@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CWavTrack@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CWavTrack@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CWavTrack@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CWavTrack@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CWavTrack@@W7AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CWavTrack@@W7AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UParamInfo@CParamControlTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UParamInfo@CParamControlTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ParamInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WString@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WavePart@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WavePart@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WString@SmartRef@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WaveItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WaveItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@ULyricInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@ULyricInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UTriggerInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UWaveItem@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UWaveItem@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Clone@CWavTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??SetParamEx@CWavTrack@@UAGJABU_GUID@@_JPAX2K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Variations@WaveStateData@@QAEKAAUWavePart@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BM@ECAIECIB@Variations?5for?5locked?5part?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@JIBMEFG@Variations?5for?5current?5part?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@EPMFCINE@Variations?5for?5a?5different?5part?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?6??EndPlay@CWavTrack@@UAGJPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1WaveStateData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WaveStateData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Load@CWavTrack@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CWavTrack@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CWavTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_U@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7IPrivateWaveTrack@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CWavTrack@@6BIDirectMusicTrack8@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CWavTrack@@6BIPrivateWaveTrack@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CWavTrack@@6BIPersistStream@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?PhysicalLess@@YGHAAUWaveItem@@0@Z		; PhysicalLess
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\wavtrack.cpp
;	COMDAT ?PhysicalLess@@YGHAAUWaveItem@@0@Z
_TEXT	SEGMENT
tv65 = -12
tv69 = -8
tv68 = -4
_WI1$ = 8
_WI2$ = 12
?PhysicalLess@@YGHAAUWaveItem@@0@Z PROC NEAR		; PhysicalLess, COMDAT

; 44   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 45   :     return WI1.m_rtTimePhysical < WI2.m_rtTimePhysical; 

  00006	8b 45 08	 mov	 eax, DWORD PTR _WI1$[ebp]
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _WI2$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR tv68[ebp], eax
  0000f	89 4d f8	 mov	 DWORD PTR tv69[ebp], ecx
  00012	8b 55 fc	 mov	 edx, DWORD PTR tv68[ebp]
  00015	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]
  00018	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0001b	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0001e	7f 17		 jg	 SHORT $L71190
  00020	7c 0c		 jl	 SHORT $L71192
  00022	8b 55 fc	 mov	 edx, DWORD PTR tv68[ebp]
  00025	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]
  00028	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0002a	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0002c	73 09		 jae	 SHORT $L71190
$L71192:
  0002e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00035	eb 07		 jmp	 SHORT $L71191
$L71190:
  00037	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$L71191:
  0003e	8b 45 f4	 mov	 eax, DWORD PTR tv65[ebp]

; 46   : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?PhysicalLess@@YGHAAUWaveItem@@0@Z ENDP			; PhysicalLess
_TEXT	ENDS
PUBLIC	?LogicalLess@@YGHAAUWaveItem@@0@Z		; LogicalLess
; Function compile flags: /Odt
;	COMDAT ?LogicalLess@@YGHAAUWaveItem@@0@Z
_TEXT	SEGMENT
_WI1$ = 8
_WI2$ = 12
?LogicalLess@@YGHAAUWaveItem@@0@Z PROC NEAR		; LogicalLess, COMDAT

; 49   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 50   :     return WI1.m_mtTimeLogical < WI2.m_mtTimeLogical; 

  00003	8b 45 08	 mov	 eax, DWORD PTR _WI1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _WI2$[ebp]
  00009	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  0000c	33 c0		 xor	 eax, eax
  0000e	3b 51 28	 cmp	 edx, DWORD PTR [ecx+40]
  00011	0f 9c c0	 setl	 al

; 51   : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?LogicalLess@@YGHAAUWaveItem@@0@Z ENDP			; LogicalLess
_TEXT	ENDS
PUBLIC	?Construct@CWavTrack@@IAEXXZ			; CWavTrack::Construct
EXTRN	__imp__RtlInitializeCriticalSection@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Construct@CWavTrack@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Construct@CWavTrack@@IAEXXZ PROC NEAR			; CWavTrack::Construct, COMDAT
; _this$ = ecx

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 125  :     IncrementDLLCount();
; 126  : 
; 127  :     m_fCSInitialized = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 128  :     INITIALIZE_CRITICAL_SECTION(&m_CrSec);

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	83 c1 18	 add	 ecx, 24			; 00000018H
  00017	51		 push	 ecx
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 129  :     m_fCSInitialized = TRUE;

  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	c7 42 34 01 00
	00 00		 mov	 DWORD PTR [edx+52], 1

; 130  : 
; 131  :     m_dwPChannelsUsed = 0;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 132  :     m_aPChannels = NULL;

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 133  :     m_dwTrackFlags = 0;

  0003c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	c7 42 3c 00 00
	00 00		 mov	 DWORD PTR [edx+60], 0

; 134  :     m_dwValidate = 0;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 135  :     m_cRef = 1;

  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	c7 41 14 01 00
	00 00		 mov	 DWORD PTR [ecx+20], 1

; 136  : #ifdef DXAPI
; 137  :     m_dwVariation = 0;
; 138  :     m_dwPart = 0;
; 139  :     m_dwIndex = 0;
; 140  :     m_dwLockID = 0;
; 141  :     m_fAudition = FALSE;
; 142  :     m_fAutoDownload = FALSE;
; 143  :     m_fLockAutoDownload = FALSE;
; 144  :     st_RefCount++;
; 145  : #endif
; 146  :     m_pdwVariations = NULL;

  0005a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005d	c7 42 58 00 00
	00 00		 mov	 DWORD PTR [edx+88], 0

; 147  :     m_pdwRemoveVariations = NULL;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], 0

; 148  :     m_dwWaveItems = 0;

  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0

; 149  : }

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?Construct@CWavTrack@@IAEXXZ ENDP			; CWavTrack::Construct
_TEXT	ENDS
PUBLIC	?CleanUp@WavePart@@QAEXXZ			; WavePart::CleanUp
PUBLIC	?CleanUp@CWavTrack@@IAEXXZ			; CWavTrack::CleanUp
PUBLIC	?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
PUBLIC	?CleanUp@?$TList@UWavePart@@@@QAEXXZ		; TList<WavePart>::CleanUp
PUBLIC	?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ	; TListItem<WavePart>::GetNext
PUBLIC	?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
; Function compile flags: /Odt
;	COMDAT ?CleanUp@CWavTrack@@IAEXXZ
_TEXT	SEGMENT
_this$ = -20
$T71204 = -16
$T71203 = -12
$T71202 = -8
_pScan$ = -4
?CleanUp@CWavTrack@@IAEXXZ PROC NEAR			; CWavTrack::CleanUp, COMDAT
; _this$ = ecx

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 153  :     m_dwPChannelsUsed = 0;

  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 154  :     if (m_aPChannels) delete [] m_aPChannels;

  00013	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 79 44 00	 cmp	 DWORD PTR [ecx+68], 0
  0001a	74 15		 je	 SHORT $L69430
  0001c	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00022	89 45 f8	 mov	 DWORD PTR $T71202[ebp], eax
  00025	8b 4d f8	 mov	 ecx, DWORD PTR $T71202[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002e	83 c4 04	 add	 esp, 4
$L69430:

; 155  :     if (m_pdwVariations) delete [] m_pdwVariations;

  00031	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00034	83 7a 58 00	 cmp	 DWORD PTR [edx+88], 0
  00038	74 15		 je	 SHORT $L69432
  0003a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00040	89 4d f4	 mov	 DWORD PTR $T71203[ebp], ecx
  00043	8b 55 f4	 mov	 edx, DWORD PTR $T71203[ebp]
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004c	83 c4 04	 add	 esp, 4
$L69432:

; 156  :     if (m_pdwRemoveVariations) delete [] m_pdwRemoveVariations;

  0004f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00052	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  00056	74 15		 je	 SHORT $L69434
  00058	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  0005e	89 55 f0	 mov	 DWORD PTR $T71204[ebp], edx
  00061	8b 45 f0	 mov	 eax, DWORD PTR $T71204[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0006a	83 c4 04	 add	 esp, 4
$L69434:

; 157  :     m_aPChannels = NULL;

  0006d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 158  :     m_pdwVariations = NULL;

  00077	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	c7 42 58 00 00
	00 00		 mov	 DWORD PTR [edx+88], 0

; 159  :     m_pdwRemoveVariations = NULL;

  00081	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00084	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], 0

; 160  :     TListItem<WavePart>* pScan = m_WavePartList.GetHead();

  0008b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	83 c1 48	 add	 ecx, 72			; 00000048H
  00091	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
  00096	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax

; 161  :     for (; pScan; pScan = pScan->GetNext() )

  00099	eb 0b		 jmp	 SHORT $L69481
$L69482:
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0009e	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  000a3	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
$L69481:
  000a6	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  000aa	74 11		 je	 SHORT $L69483

; 162  :     {
; 163  :         pScan->GetItemValue().CleanUp();

  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  000af	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  000b4	8b c8		 mov	 ecx, eax
  000b6	e8 00 00 00 00	 call	 ?CleanUp@WavePart@@QAEXXZ ; WavePart::CleanUp

; 164  :     }

  000bb	eb de		 jmp	 SHORT $L69482
$L69483:

; 165  :     m_WavePartList.CleanUp();

  000bd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	83 c1 48	 add	 ecx, 72			; 00000048H
  000c3	e8 00 00 00 00	 call	 ?CleanUp@?$TList@UWavePart@@@@QAEXXZ ; TList<WavePart>::CleanUp

; 166  : #ifdef DXAPI
; 167  :     RemoveDownloads(NULL);
; 168  : #endif
; 169  : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
?CleanUp@CWavTrack@@IAEXXZ ENDP				; CWavTrack::CleanUp
_TEXT	ENDS
PUBLIC	?CleanUpTempParts@CWavTrack@@IAEXXZ		; CWavTrack::CleanUpTempParts
; Function compile flags: /Odt
;	COMDAT ?CleanUpTempParts@CWavTrack@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8
_pScan$ = -4
?CleanUpTempParts@CWavTrack@@IAEXXZ PROC NEAR		; CWavTrack::CleanUpTempParts, COMDAT
; _this$ = ecx

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 173  :     TListItem<WavePart>* pScan = m_TempWavePartList.GetHead();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0000f	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
  00014	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax

; 174  :     for (; pScan; pScan = pScan->GetNext() )

  00017	eb 0b		 jmp	 SHORT $L69488
$L69489:
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0001c	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  00021	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
$L69488:
  00024	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00028	74 11		 je	 SHORT $L69490

; 175  :     {
; 176  :         pScan->GetItemValue().CleanUp();

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0002d	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ?CleanUp@WavePart@@QAEXXZ ; WavePart::CleanUp

; 177  :     }

  00039	eb de		 jmp	 SHORT $L69489
$L69490:

; 178  :     m_TempWavePartList.CleanUp();

  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00041	e8 00 00 00 00	 call	 ?CleanUp@?$TList@UWavePart@@@@QAEXXZ ; TList<WavePart>::CleanUp

; 179  : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?CleanUpTempParts@CWavTrack@@IAEXXZ ENDP		; CWavTrack::CleanUpTempParts
_TEXT	ENDS
PUBLIC	?MovePartsToTemp@CWavTrack@@IAEXXZ		; CWavTrack::MovePartsToTemp
PUBLIC	?AddHead@?$TList@UWavePart@@@@QAEXPAV?$TListItem@UWavePart@@@@@Z ; TList<WavePart>::AddHead
PUBLIC	?RemoveHead@?$TList@UWavePart@@@@QAEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::RemoveHead
; Function compile flags: /Odt
;	COMDAT ?MovePartsToTemp@CWavTrack@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8
_pScan$ = -4
?MovePartsToTemp@CWavTrack@@IAEXXZ PROC NEAR		; CWavTrack::MovePartsToTemp, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 183  :     CleanUpTempParts();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?CleanUpTempParts@CWavTrack@@IAEXXZ ; CWavTrack::CleanUpTempParts

; 184  :     TListItem<WavePart>* pScan = m_WavePartList.RemoveHead();

  00011	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	83 c1 48	 add	 ecx, 72			; 00000048H
  00017	e8 00 00 00 00	 call	 ?RemoveHead@?$TList@UWavePart@@@@QAEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::RemoveHead
  0001c	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax

; 185  :     for (; pScan; pScan = m_WavePartList.RemoveHead() )

  0001f	eb 0e		 jmp	 SHORT $L69495
$L69496:
  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 48	 add	 ecx, 72			; 00000048H
  00027	e8 00 00 00 00	 call	 ?RemoveHead@?$TList@UWavePart@@@@QAEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::RemoveHead
  0002c	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
$L69495:
  0002f	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00033	74 11		 je	 SHORT $L69493

; 186  :     {
; 187  :         m_TempWavePartList.AddHead(pScan);

  00035	8b 45 fc	 mov	 eax, DWORD PTR _pScan$[ebp]
  00038	50		 push	 eax
  00039	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0003f	e8 00 00 00 00	 call	 ?AddHead@?$TList@UWavePart@@@@QAEXPAV?$TListItem@UWavePart@@@@@Z ; TList<WavePart>::AddHead

; 188  :     }

  00044	eb db		 jmp	 SHORT $L69496
$L69493:

; 189  : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?MovePartsToTemp@CWavTrack@@IAEXXZ ENDP			; CWavTrack::MovePartsToTemp
_TEXT	ENDS
PUBLIC	??0IDirectMusicTrack8@@QAE@XZ			; IDirectMusicTrack8::IDirectMusicTrack8
PUBLIC	??0IPrivateWaveTrack@@QAE@XZ			; IPrivateWaveTrack::IPrivateWaveTrack
PUBLIC	?QueryInterface@CWavTrack@@W3AGJABU_GUID@@PAPAX@Z ; CWavTrack::QueryInterface
PUBLIC	?AddRef@CWavTrack@@W3AGKXZ			; CWavTrack::AddRef
PUBLIC	?Release@CWavTrack@@W3AGKXZ			; CWavTrack::Release
PUBLIC	?QueryInterface@CWavTrack@@W7AGJABU_GUID@@PAPAX@Z ; CWavTrack::QueryInterface
PUBLIC	?AddRef@CWavTrack@@W7AGKXZ			; CWavTrack::AddRef
PUBLIC	?Release@CWavTrack@@W7AGKXZ			; CWavTrack::Release
PUBLIC	??0CWavTrack@@QAE@XZ				; CWavTrack::CWavTrack
PUBLIC	?QueryInterface@CWavTrack@@UAGJABU_GUID@@PAPAX@Z ; CWavTrack::QueryInterface
PUBLIC	?AddRef@CWavTrack@@UAGKXZ			; CWavTrack::AddRef
PUBLIC	?Release@CWavTrack@@UAGKXZ			; CWavTrack::Release
PUBLIC	?IsParamSupported@CWavTrack@@UAGJABU_GUID@@@Z	; CWavTrack::IsParamSupported
PUBLIC	?Init@CWavTrack@@UAGJPAUIDirectMusicSegment@@@Z	; CWavTrack::Init
PUBLIC	?InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ; CWavTrack::InitPlay
PUBLIC	?EndPlay@CWavTrack@@UAGJPAX@Z			; CWavTrack::EndPlay
PUBLIC	?Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ; CWavTrack::Play
PUBLIC	?GetParam@CWavTrack@@UAGJABU_GUID@@JPAJPAX@Z	; CWavTrack::GetParam
PUBLIC	?SetParam@CWavTrack@@UAGJABU_GUID@@JPAX@Z	; CWavTrack::SetParam
PUBLIC	?AddNotificationType@CWavTrack@@UAGJABU_GUID@@@Z ; CWavTrack::AddNotificationType
PUBLIC	?RemoveNotificationType@CWavTrack@@UAGJABU_GUID@@@Z ; CWavTrack::RemoveNotificationType
PUBLIC	?Clone@CWavTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z ; CWavTrack::Clone
PUBLIC	?PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ; CWavTrack::PlayEx
PUBLIC	?GetParamEx@CWavTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z ; CWavTrack::GetParamEx
PUBLIC	?SetParamEx@CWavTrack@@UAGJABU_GUID@@_JPAX2K@Z	; CWavTrack::SetParamEx
PUBLIC	?Compose@CWavTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z ; CWavTrack::Compose
PUBLIC	?Join@CWavTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z ; CWavTrack::Join
PUBLIC	?GetClassID@CWavTrack@@UAGJPAU_GUID@@@Z		; CWavTrack::GetClassID
PUBLIC	?IsDirty@CWavTrack@@UAGJXZ			; CWavTrack::IsDirty
PUBLIC	?Load@CWavTrack@@UAGJPAUIStream@@@Z		; CWavTrack::Load
PUBLIC	?Save@CWavTrack@@UAGJPAUIStream@@H@Z		; CWavTrack::Save
PUBLIC	?GetSizeMax@CWavTrack@@UAGJPAT_ULARGE_INTEGER@@@Z ; CWavTrack::GetSizeMax
PUBLIC	?AddWave@CWavTrack@@UAGJPAUIDirectSoundWave@@_JKKPA_J@Z ; CWavTrack::AddWave
PUBLIC	??0?$TList@UWavePart@@@@QAE@XZ			; TList<WavePart>::TList<WavePart>
PUBLIC	??_7CWavTrack@@6BIPersistStream@@@		; CWavTrack::`vftable'
PUBLIC	??_7CWavTrack@@6BIPrivateWaveTrack@@@		; CWavTrack::`vftable'
PUBLIC	??_7CWavTrack@@6BIDirectMusicTrack8@@@		; CWavTrack::`vftable'
PUBLIC	??0IPersistStream@@QAE@XZ			; IPersistStream::IPersistStream
EXTRN	??0CPChMap@@QAE@XZ:NEAR				; CPChMap::CPChMap
EXTRN	??0CMemTrack@@QAE@K@Z:NEAR			; CMemTrack::CMemTrack
;	COMDAT ??_7CWavTrack@@6BIPersistStream@@@
CONST	SEGMENT
??_7CWavTrack@@6BIPersistStream@@@ DD FLAT:?QueryInterface@CWavTrack@@UAGJABU_GUID@@PAPAX@Z ; CWavTrack::`vftable'
	DD	FLAT:?AddRef@CWavTrack@@UAGKXZ
	DD	FLAT:?Release@CWavTrack@@UAGKXZ
	DD	FLAT:?GetClassID@CWavTrack@@UAGJPAU_GUID@@@Z
	DD	FLAT:?IsDirty@CWavTrack@@UAGJXZ
	DD	FLAT:?Load@CWavTrack@@UAGJPAUIStream@@@Z
	DD	FLAT:?Save@CWavTrack@@UAGJPAUIStream@@H@Z
	DD	FLAT:?GetSizeMax@CWavTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
CONST	ENDS
;	COMDAT ??_7CWavTrack@@6BIPrivateWaveTrack@@@
CONST	SEGMENT
??_7CWavTrack@@6BIPrivateWaveTrack@@@ DD FLAT:?QueryInterface@CWavTrack@@W3AGJABU_GUID@@PAPAX@Z ; CWavTrack::`vftable'
	DD	FLAT:?AddRef@CWavTrack@@W3AGKXZ
	DD	FLAT:?Release@CWavTrack@@W3AGKXZ
	DD	FLAT:?AddWave@CWavTrack@@UAGJPAUIDirectSoundWave@@_JKKPA_J@Z
CONST	ENDS
;	COMDAT ??_7CWavTrack@@6BIDirectMusicTrack8@@@
CONST	SEGMENT
??_7CWavTrack@@6BIDirectMusicTrack8@@@ DD FLAT:?QueryInterface@CWavTrack@@W7AGJABU_GUID@@PAPAX@Z ; CWavTrack::`vftable'
	DD	FLAT:?AddRef@CWavTrack@@W7AGKXZ
	DD	FLAT:?Release@CWavTrack@@W7AGKXZ
	DD	FLAT:?Init@CWavTrack@@UAGJPAUIDirectMusicSegment@@@Z
	DD	FLAT:?InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
	DD	FLAT:?EndPlay@CWavTrack@@UAGJPAX@Z
	DD	FLAT:?Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
	DD	FLAT:?GetParam@CWavTrack@@UAGJABU_GUID@@JPAJPAX@Z
	DD	FLAT:?SetParam@CWavTrack@@UAGJABU_GUID@@JPAX@Z
	DD	FLAT:?IsParamSupported@CWavTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?AddNotificationType@CWavTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?RemoveNotificationType@CWavTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?Clone@CWavTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
	DD	FLAT:?PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
	DD	FLAT:?GetParamEx@CWavTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z
	DD	FLAT:?SetParamEx@CWavTrack@@UAGJABU_GUID@@_JPAX2K@Z
	DD	FLAT:?Compose@CWavTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z
	DD	FLAT:?Join@CWavTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CWavTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CWavTrack@@QAE@XZ PROC NEAR				; CWavTrack::CWavTrack, COMDAT
; _this$ = ecx

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 07		 push	 7
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000f	e8 00 00 00 00	 call	 ??0CMemTrack@@QAE@K@Z	; CMemTrack::CMemTrack
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0IPersistStream@@QAE@XZ
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 04	 add	 ecx, 4
  00022	e8 00 00 00 00	 call	 ??0IPrivateWaveTrack@@QAE@XZ
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 08	 add	 ecx, 8
  0002d	e8 00 00 00 00	 call	 ??0IDirectMusicTrack8@@QAE@XZ
  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWavTrack@@6BIPersistStream@@@
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CWavTrack@@6BIPrivateWaveTrack@@@
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET FLAT:??_7CWavTrack@@6BIDirectMusicTrack8@@@
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	83 c1 48	 add	 ecx, 72			; 00000048H
  00055	e8 00 00 00 00	 call	 ??0?$TList@UWavePart@@@@QAE@XZ ; TList<WavePart>::TList<WavePart>
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00060	e8 00 00 00 00	 call	 ??0?$TList@UWavePart@@@@QAE@XZ ; TList<WavePart>::TList<WavePart>
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	83 c1 54	 add	 ecx, 84			; 00000054H
  0006b	e8 00 00 00 00	 call	 ??0CPChMap@@QAE@XZ	; CPChMap::CPChMap

; 351  :     Construct();

  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ?Construct@CWavTrack@@IAEXXZ ; CWavTrack::Construct

; 352  : }

  00078	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
??0CWavTrack@@QAE@XZ ENDP				; CWavTrack::CWavTrack
_TEXT	ENDS
PUBLIC	??0IPersist@@QAE@XZ				; IPersist::IPersist
; Function compile flags: /Odt
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersistStream@@QAE@XZ PROC NEAR			; IPersistStream::IPersistStream, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPersist@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersistStream@@QAE@XZ ENDP				; IPersistStream::IPersistStream
_TEXT	ENDS
PUBLIC	??_7IPrivateWaveTrack@@6B@			; IPrivateWaveTrack::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
EXTRN	__purecall:NEAR
;	COMDAT ??_7IPrivateWaveTrack@@6B@
CONST	SEGMENT
??_7IPrivateWaveTrack@@6B@ DD FLAT:__purecall		; IPrivateWaveTrack::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0IPrivateWaveTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPrivateWaveTrack@@QAE@XZ PROC NEAR			; IPrivateWaveTrack::IPrivateWaveTrack, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7IPrivateWaveTrack@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0IPrivateWaveTrack@@QAE@XZ ENDP			; IPrivateWaveTrack::IPrivateWaveTrack
_TEXT	ENDS
PUBLIC	??0IDirectMusicTrack@@QAE@XZ			; IDirectMusicTrack::IDirectMusicTrack
; Function compile flags: /Odt
;	COMDAT ??0IDirectMusicTrack8@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicTrack8@@QAE@XZ PROC NEAR			; IDirectMusicTrack8::IDirectMusicTrack8, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IDirectMusicTrack@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicTrack8@@QAE@XZ ENDP			; IDirectMusicTrack8::IDirectMusicTrack8
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersist@@QAE@XZ PROC NEAR				; IPersist::IPersist, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersist@@QAE@XZ ENDP				; IPersist::IPersist
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicTrack@@QAE@XZ PROC NEAR			; IDirectMusicTrack::IDirectMusicTrack, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicTrack@@QAE@XZ ENDP			; IDirectMusicTrack::IDirectMusicTrack
_TEXT	ENDS
PUBLIC	??0CWavTrack@@QAE@ABV0@JJ@Z			; CWavTrack::CWavTrack
PUBLIC	?CopyParts@CWavTrack@@IAEJABV?$TList@UWavePart@@@@JJ@Z ; CWavTrack::CopyParts
; Function compile flags: /Odt
;	COMDAT ??0CWavTrack@@QAE@ABV0@JJ@Z
_TEXT	SEGMENT
_this$ = -4
_rTrack$ = 8
_mtStart$ = 12
_mtEnd$ = 16
??0CWavTrack@@QAE@ABV0@JJ@Z PROC NEAR			; CWavTrack::CWavTrack, COMDAT
; _this$ = ecx

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 07		 push	 7
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000f	e8 00 00 00 00	 call	 ??0CMemTrack@@QAE@K@Z	; CMemTrack::CMemTrack
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0IPersistStream@@QAE@XZ
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 04	 add	 ecx, 4
  00022	e8 00 00 00 00	 call	 ??0IPrivateWaveTrack@@QAE@XZ
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 08	 add	 ecx, 8
  0002d	e8 00 00 00 00	 call	 ??0IDirectMusicTrack8@@QAE@XZ
  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWavTrack@@6BIPersistStream@@@
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CWavTrack@@6BIPrivateWaveTrack@@@
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET FLAT:??_7CWavTrack@@6BIDirectMusicTrack8@@@
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	83 c1 48	 add	 ecx, 72			; 00000048H
  00055	e8 00 00 00 00	 call	 ??0?$TList@UWavePart@@@@QAE@XZ ; TList<WavePart>::TList<WavePart>
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00060	e8 00 00 00 00	 call	 ??0?$TList@UWavePart@@@@QAE@XZ ; TList<WavePart>::TList<WavePart>
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	83 c1 54	 add	 ecx, 84			; 00000054H
  0006b	e8 00 00 00 00	 call	 ??0CPChMap@@QAE@XZ	; CPChMap::CPChMap

; 356  :     Construct();

  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ?Construct@CWavTrack@@IAEXXZ ; CWavTrack::Construct

; 357  :     CopyParts(rTrack.m_WavePartList, mtStart, mtEnd);

  00078	8b 45 10	 mov	 eax, DWORD PTR _mtEnd$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d 0c	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  0007f	51		 push	 ecx
  00080	8b 55 08	 mov	 edx, DWORD PTR _rTrack$[ebp]
  00083	83 c2 48	 add	 edx, 72			; 00000048H
  00086	52		 push	 edx
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?CopyParts@CWavTrack@@IAEJABV?$TList@UWavePart@@@@JJ@Z ; CWavTrack::CopyParts

; 358  :     m_lVolume = rTrack.m_lVolume;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _rTrack$[ebp]
  00095	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00098	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 359  :     m_dwTrackFlags = rTrack.m_dwTrackFlags;

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _rTrack$[ebp]
  000a1	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000a4	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 360  : }

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 0c 00	 ret	 12			; 0000000cH
??0CWavTrack@@QAE@ABV0@JJ@Z ENDP			; CWavTrack::CWavTrack
_TEXT	ENDS
PUBLIC	?InitTrack@CWavTrack@@IAEJK@Z			; CWavTrack::InitTrack
; Function compile flags: /Odt
;	COMDAT ?InitTrack@CWavTrack@@IAEJK@Z
_TEXT	SEGMENT
_this$ = -28
$T71237 = -24
$T71236 = -20
$T71235 = -16
_dw$69540 = -12
_pScan$69539 = -8
_hr$ = -4
_dwPChannels$ = 8
?InitTrack@CWavTrack@@IAEJK@Z PROC NEAR			; CWavTrack::InitTrack, COMDAT
; _this$ = ecx

; 363  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 364  :     HRESULT hr = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 365  : 
; 366  :     m_dwPChannelsUsed = dwPChannels;

  00010	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _dwPChannels$[ebp]
  00016	89 48 40	 mov	 DWORD PTR [eax+64], ecx

; 367  :     m_dwWaveItems = 0;

  00019	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], 0

; 368  :     if( m_dwPChannelsUsed )

  00023	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  0002a	0f 84 2c 01 00
	00		 je	 $L69523

; 369  :     {
; 370  :         m_aPChannels = new DWORD[m_dwPChannelsUsed];

  00030	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00036	c1 e2 02	 shl	 edx, 2
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0003f	83 c4 04	 add	 esp, 4
  00042	89 45 f0	 mov	 DWORD PTR $T71235[ebp], eax
  00045	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 4d f0	 mov	 ecx, DWORD PTR $T71235[ebp]
  0004b	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 371  :         if (!m_aPChannels) hr = E_OUTOFMEMORY;

  0004e	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00051	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  00055	75 09		 jne	 SHORT $L69526
  00057	c7 45 fc 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 372  :         else if (m_dwTrackFlags & DMUS_WAVETRACKF_PERSIST_CONTROL)

  0005e	eb 62		 jmp	 SHORT $L69528
$L69526:
  00060	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00066	83 e1 02	 and	 ecx, 2
  00069	85 c9		 test	 ecx, ecx
  0006b	74 55		 je	 SHORT $L69528

; 373  :         {
; 374  :             m_pdwVariations = new DWORD[m_dwPChannelsUsed];

  0006d	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00070	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00073	c1 e0 02	 shl	 eax, 2
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0007c	83 c4 04	 add	 esp, 4
  0007f	89 45 ec	 mov	 DWORD PTR $T71236[ebp], eax
  00082	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	8b 55 ec	 mov	 edx, DWORD PTR $T71236[ebp]
  00088	89 51 58	 mov	 DWORD PTR [ecx+88], edx

; 375  :             m_pdwRemoveVariations = new DWORD[m_dwPChannelsUsed];

  0008b	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00091	c1 e1 02	 shl	 ecx, 2
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009a	83 c4 04	 add	 esp, 4
  0009d	89 45 e8	 mov	 DWORD PTR $T71237[ebp], eax
  000a0	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	8b 45 e8	 mov	 eax, DWORD PTR $T71237[ebp]
  000a6	89 42 5c	 mov	 DWORD PTR [edx+92], eax

; 376  :             if (!m_pdwVariations || !m_pdwRemoveVariations) hr = E_OUTOFMEMORY;

  000a9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  000b0	74 09		 je	 SHORT $L69535
  000b2	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  000b9	75 07		 jne	 SHORT $L69528
$L69535:
  000bb	c7 45 fc 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$L69528:

; 377  :         }
; 378  :         if (SUCCEEDED(hr))

  000c2	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c6	0f 8c 88 00 00
	00		 jl	 $L69538

; 379  :         {
; 380  :             TListItem<WavePart>* pScan = m_WavePartList.GetHead();

  000cc	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	83 c1 48	 add	 ecx, 72			; 00000048H
  000d2	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
  000d7	89 45 f8	 mov	 DWORD PTR _pScan$69539[ebp], eax

; 381  :             for (DWORD dw = 0; pScan && dw < m_dwPChannelsUsed; pScan = pScan->GetNext(), dw++)

  000da	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dw$69540[ebp], 0
  000e1	eb 14		 jmp	 SHORT $L69541
$L69542:
  000e3	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$69539[ebp]
  000e6	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  000eb	89 45 f8	 mov	 DWORD PTR _pScan$69539[ebp], eax
  000ee	8b 45 f4	 mov	 eax, DWORD PTR _dw$69540[ebp]
  000f1	83 c0 01	 add	 eax, 1
  000f4	89 45 f4	 mov	 DWORD PTR _dw$69540[ebp], eax
$L69541:
  000f7	83 7d f8 00	 cmp	 DWORD PTR _pScan$69539[ebp], 0
  000fb	74 55		 je	 SHORT $L69543
  000fd	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	8b 55 f4	 mov	 edx, DWORD PTR _dw$69540[ebp]
  00103	3b 51 40	 cmp	 edx, DWORD PTR [ecx+64]
  00106	73 4a		 jae	 SHORT $L69543

; 382  :             {
; 383  :                 m_aPChannels[dw] = pScan->GetItemValue().m_dwPChannel;

  00108	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$69539[ebp]
  0010b	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  00110	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00116	8b 4d f4	 mov	 ecx, DWORD PTR _dw$69540[ebp]
  00119	8b 00		 mov	 eax, DWORD PTR [eax]
  0011b	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 384  :                 if (m_pdwVariations) m_pdwVariations[dw] = 0;

  0011e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  00125	74 10		 je	 SHORT $L69544
  00127	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0012a	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  0012d	8b 4d f4	 mov	 ecx, DWORD PTR _dw$69540[ebp]
  00130	c7 04 88 00 00
	00 00		 mov	 DWORD PTR [eax+ecx*4], 0
$L69544:

; 385  :                 if (m_pdwRemoveVariations) m_pdwRemoveVariations[dw] = 0;

  00137	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0013a	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  0013e	74 10		 je	 SHORT $L69545
  00140	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00143	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00146	8b 55 f4	 mov	 edx, DWORD PTR _dw$69540[ebp]
  00149	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0
$L69545:

; 386  : #ifdef DXAPI
; 387  :                 TListItem<WaveItem>* pItemScan = pScan->GetItemValue().m_WaveItemList.GetHead();
; 388  :                 for (; pItemScan; pItemScan = pItemScan->GetNext())
; 389  :                 {
; 390  :                     pItemScan->GetItemValue().m_dwVoiceIndex = m_dwWaveItems;
; 391  :                     m_dwWaveItems++;
; 392  :                 }
; 393  : #endif
; 394  :             }

  00150	eb 91		 jmp	 SHORT $L69542
$L69543:

; 395  :         }
; 396  :         else CleanUp();

  00152	eb 08		 jmp	 SHORT $L69523
$L69538:
  00154	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00157	e8 00 00 00 00	 call	 ?CleanUp@CWavTrack@@IAEXXZ ; CWavTrack::CleanUp
$L69523:

; 397  :     }
; 398  :     return hr;

  0015c	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 399  : }

  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c2 04 00	 ret	 4
?InitTrack@CWavTrack@@IAEJK@Z ENDP			; CWavTrack::InitTrack
_TEXT	ENDS
PUBLIC	??1CWavTrack@@QAE@XZ				; CWavTrack::~CWavTrack
PUBLIC	??1?$TList@UWavePart@@@@QAE@XZ			; TList<WavePart>::~TList<WavePart>
PUBLIC	?DeleteCriticalSection@@YGXPAX@Z		; DeleteCriticalSection
EXTRN	??1CPChMap@@QAE@XZ:NEAR				; CPChMap::~CPChMap
EXTRN	??1CMemTrack@@QAE@XZ:NEAR			; CMemTrack::~CMemTrack
; Function compile flags: /Odt
;	COMDAT ??1CWavTrack@@QAE@XZ
_TEXT	SEGMENT
tv68 = -8
_this$ = -4
??1CWavTrack@@QAE@XZ PROC NEAR				; CWavTrack::~CWavTrack, COMDAT
; _this$ = ecx

; 402  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWavTrack@@6BIPersistStream@@@
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CWavTrack@@6BIPrivateWaveTrack@@@
  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET FLAT:??_7CWavTrack@@6BIDirectMusicTrack8@@@

; 403  :     if (m_fCSInitialized)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  0002d	74 1c		 je	 SHORT $L69549

; 404  :     {
; 405  :         CleanUpTempParts();

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?CleanUpTempParts@CWavTrack@@IAEXXZ ; CWavTrack::CleanUpTempParts

; 406  :         CleanUp();

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?CleanUp@CWavTrack@@IAEXXZ ; CWavTrack::CleanUp

; 407  : #ifdef DXAPI
; 408  :         st_RefCount--;
; 409  :         if (st_RefCount <= 0)
; 410  :         {
; 411  :             // if there's still something in the wave list, it means there are waves that 
; 412  :             // haven't been unloaded; but at this point we've gotten rid of all wave tracks,
; 413  :             // so unload and release everything now.
; 414  :             UnloadAllWaves(NULL);
; 415  :             WaveItem::st_WaveList.CleanUp();
; 416  :         }
; 417  : #endif
; 418  :         DELETE_CRITICAL_SECTION(&m_CrSec);

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 18	 add	 ecx, 24			; 00000018H
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 ?DeleteCriticalSection@@YGXPAX@Z ; DeleteCriticalSection
$L69549:

; 419  :     }
; 420  : 
; 421  :     DecrementDLLCount();
; 422  : }

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 54	 add	 ecx, 84			; 00000054H
  00051	e8 00 00 00 00	 call	 ??1CPChMap@@QAE@XZ	; CPChMap::~CPChMap
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0005c	e8 00 00 00 00	 call	 ??1?$TList@UWavePart@@@@QAE@XZ ; TList<WavePart>::~TList<WavePart>
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	83 c1 48	 add	 ecx, 72			; 00000048H
  00067	e8 00 00 00 00	 call	 ??1?$TList@UWavePart@@@@QAE@XZ ; TList<WavePart>::~TList<WavePart>
  0006c	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  00070	74 0b		 je	 SHORT $L71241
  00072	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00075	83 c2 0c	 add	 edx, 12			; 0000000cH
  00078	89 55 f8	 mov	 DWORD PTR tv68[ebp], edx
  0007b	eb 07		 jmp	 SHORT $L71242
$L71241:
  0007d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$L71242:
  00084	8b 4d f8	 mov	 ecx, DWORD PTR tv68[ebp]
  00087	e8 00 00 00 00	 call	 ??1CMemTrack@@QAE@XZ	; CMemTrack::~CMemTrack
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
??1CWavTrack@@QAE@XZ ENDP				; CWavTrack::~CWavTrack
_TEXT	ENDS
PUBLIC	??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ ; `string'
PUBLIC	??_C@_0DL@ONJFGHAO@Warning?3?5Request?5to?5query?5unknow@ ; `string'
PUBLIC	_==@8
EXTRN	_IID_IDirectMusicTrack:BYTE
EXTRN	_IID_IDirectMusicTrack8:BYTE
EXTRN	_IID_IPrivateWaveTrack:BYTE
EXTRN	?DebugTrace@@YAXHPADZZ:NEAR			; DebugTrace
EXTRN	_DebugBreak@0:NEAR
EXTRN	_IID_IUnknown:BYTE
EXTRN	_IID_IPersistStream:BYTE
EXTRN	_IsBadReadPtr@8:NEAR
EXTRN	_IsBadWritePtr@8:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CWavTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??QueryInterface@CWavTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB DB 'C'
	DB	'WavTrack::QueryInterface', 00H		; `CWavTrack::QueryInterface'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT
??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ DB '%s: Invalid '
	DB	'pointer ppv', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT
??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ DB '%'
	DB	's: Invalid pointer (void*)&iid', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@ONJFGHAO@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT
??_C@_0DL@ONJFGHAO@Warning?3?5Request?5to?5query?5unknow@ DB 'Warning: Re'
	DB	'quest to query unknown interface on Wave Track', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?QueryInterface@CWavTrack@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv135 = -8
tv92 = -4
_this$ = 8
_iid$ = 12
_ppv$ = 16
?QueryInterface@CWavTrack@@UAGJABU_GUID@@PAPAX@Z PROC NEAR ; CWavTrack::QueryInterface, COMDAT

; 435  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 436  :     V_INAME(CWavTrack::QueryInterface);
; 437  :     V_PTRPTR_WRITE(ppv);

  00006	6a 04		 push	 4
  00008	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69559
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CWavTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69559:

; 438  :     V_REFGUID(iid);

  0002e	6a 10		 push	 16			; 00000010H
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00039	85 c0		 test	 eax, eax
  0003b	74 19		 je	 SHORT $L69563
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CWavTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
  00047	6a ff		 push	 -1
  00049	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 _DebugBreak@0
$L69563:

; 439  : 
; 440  :    if (iid == IID_IUnknown || iid == IID_IDirectMusicTrack || iid == IID_IDirectMusicTrack8)

  00056	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IUnknown
  0005b	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  0005e	52		 push	 edx
  0005f	e8 00 00 00 00	 call	 _==@8
  00064	85 c0		 test	 eax, eax
  00066	75 24		 jne	 SHORT $L69566
  00068	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack
  0006d	8b 45 0c	 mov	 eax, DWORD PTR _iid$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _==@8
  00076	85 c0		 test	 eax, eax
  00078	75 12		 jne	 SHORT $L69566
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack8
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _==@8
  00088	85 c0		 test	 eax, eax
  0008a	74 22		 je	 SHORT $L69565
$L69566:

; 441  :     {
; 442  :         *ppv = static_cast<IDirectMusicTrack*>(this);

  0008c	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  00090	74 0b		 je	 SHORT $L71246
  00092	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00095	83 c2 08	 add	 edx, 8
  00098	89 55 fc	 mov	 DWORD PTR tv92[ebp], edx
  0009b	eb 07		 jmp	 SHORT $L71247
$L71246:
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$L71247:
  000a4	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  000a7	8b 4d fc	 mov	 ecx, DWORD PTR tv92[ebp]
  000aa	89 08		 mov	 DWORD PTR [eax], ecx

; 443  :     } 
; 444  :     else if (iid == IID_IPersistStream)

  000ac	eb 6f		 jmp	 SHORT $L69568
$L69565:
  000ae	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPersistStream
  000b3	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 _==@8
  000bc	85 c0		 test	 eax, eax
  000be	74 0a		 je	 SHORT $L69569

; 445  :     {
; 446  :         *ppv = static_cast<IPersistStream*>(this);

  000c0	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  000c3	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000c6	89 08		 mov	 DWORD PTR [eax], ecx

; 447  :     } 
; 448  :     else if (iid == IID_IPrivateWaveTrack)

  000c8	eb 53		 jmp	 SHORT $L69568
$L69569:
  000ca	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPrivateWaveTrack
  000cf	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 _==@8
  000d8	85 c0		 test	 eax, eax
  000da	74 22		 je	 SHORT $L69572

; 449  :     {
; 450  :         *ppv = static_cast<IPrivateWaveTrack*>(this);

  000dc	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  000e0	74 0b		 je	 SHORT $L71248
  000e2	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000e5	83 c0 04	 add	 eax, 4
  000e8	89 45 f8	 mov	 DWORD PTR tv135[ebp], eax
  000eb	eb 07		 jmp	 SHORT $L71249
$L71248:
  000ed	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$L71249:
  000f4	8b 4d 10	 mov	 ecx, DWORD PTR _ppv$[ebp]
  000f7	8b 55 f8	 mov	 edx, DWORD PTR tv135[ebp]
  000fa	89 11		 mov	 DWORD PTR [ecx], edx

; 451  :     }
; 452  :     else

  000fc	eb 1f		 jmp	 SHORT $L69568
$L69572:

; 453  :     {
; 454  :         *ppv = NULL;

  000fe	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  00101	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 455  :         Trace(4,"Warning: Request to query unknown interface on Wave Track\n");

  00107	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@ONJFGHAO@Warning?3?5Request?5to?5query?5unknow@
  0010c	6a 04		 push	 4
  0010e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00113	83 c4 08	 add	 esp, 8

; 456  :         return E_NOINTERFACE;

  00116	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
  0011b	eb 0e		 jmp	 SHORT $L69555
$L69568:

; 457  :     }
; 458  : 
; 459  :     reinterpret_cast<IUnknown*>(this)->AddRef();

  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	8b 11		 mov	 edx, DWORD PTR [ecx]
  00122	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00125	50		 push	 eax
  00126	ff 52 04	 call	 DWORD PTR [edx+4]

; 460  :     return S_OK;

  00129	33 c0		 xor	 eax, eax
$L69555:

; 461  : }

  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@CWavTrack@@UAGJABU_GUID@@PAPAX@Z ENDP	; CWavTrack::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\guiddef.h
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8
_guidOther$ = 12
_==@8	PROC NEAR					; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  :     return IsEqualGUID(guidOne,guidOther);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IsEqualGUID@8

; 190  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:NEAR
; Function compile flags: /Odt
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8
_rguid2$ = 12
_IsEqualGUID@8 PROC NEAR				; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _memcmp
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 157  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
EXTRN	__InterlockedIncrement@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\wavtrack.cpp
;	COMDAT ?AddRef@CWavTrack@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@CWavTrack@@UAGKXZ PROC NEAR			; CWavTrack::AddRef, COMDAT

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  :     return InterlockedIncrement(&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 14	 add	 eax, 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 471  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@CWavTrack@@UAGKXZ ENDP				; CWavTrack::AddRef
_TEXT	ENDS
PUBLIC	??_GCWavTrack@@QAEPAXI@Z			; CWavTrack::`scalar deleting destructor'
EXTRN	__InterlockedDecrement@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Release@CWavTrack@@UAGKXZ
_TEXT	SEGMENT
tv72 = -12
$T71263 = -8
$T71262 = -4
_this$ = 8
?Release@CWavTrack@@UAGKXZ PROC NEAR			; CWavTrack::Release, COMDAT

; 479  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 480  :     if (!InterlockedDecrement(&m_cRef))

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 14	 add	 eax, 20			; 00000014H
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	85 c0		 test	 eax, eax
  00014	75 2c		 jne	 SHORT $L69585

; 481  :     {
; 482  :         delete this;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	89 4d f8	 mov	 DWORD PTR $T71263[ebp], ecx
  0001c	8b 55 f8	 mov	 edx, DWORD PTR $T71263[ebp]
  0001f	89 55 fc	 mov	 DWORD PTR $T71262[ebp], edx
  00022	83 7d fc 00	 cmp	 DWORD PTR $T71262[ebp], 0
  00026	74 0f		 je	 SHORT $L71264
  00028	6a 01		 push	 1
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR $T71262[ebp]
  0002d	e8 00 00 00 00	 call	 ??_GCWavTrack@@QAEPAXI@Z
  00032	89 45 f4	 mov	 DWORD PTR tv72[ebp], eax
  00035	eb 07		 jmp	 SHORT $L71265
$L71264:
  00037	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L71265:

; 483  :         return 0;

  0003e	33 c0		 xor	 eax, eax
  00040	eb 06		 jmp	 SHORT $L69584
$L69585:

; 484  :     }
; 485  : 
; 486  :     return m_cRef;

  00042	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
$L69584:

; 487  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?Release@CWavTrack@@UAGKXZ ENDP				; CWavTrack::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCWavTrack@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCWavTrack@@QAEPAXI@Z PROC NEAR			; CWavTrack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CWavTrack@@QAE@XZ	; CWavTrack::~CWavTrack
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69591
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69591:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCWavTrack@@QAEPAXI@Z ENDP				; CWavTrack::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ ; `string'
EXTRN	_CLSID_DirectMusicWaveTrack:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CWavTrack@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetClassID@CWavTrack@@UAGJPAU_GUID@@@Z@4QBDB DB 'C'
	DB	'SeqTrack::GetClassID', 00H			; `CWavTrack::GetClassID'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT
??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pClassID', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetClassID@CWavTrack@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_pClassID$ = 12
?GetClassID@CWavTrack@@UAGJPAU_GUID@@@Z PROC NEAR	; CWavTrack::GetClassID, COMDAT

; 493  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 494  :     V_INAME(CSeqTrack::GetClassID);
; 495  :     V_PTR_WRITE(pClassID, CLSID); 

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pClassID$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L69599
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetClassID@CWavTrack@@UAGJPAU_GUID@@@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L69599:

; 496  :     *pClassID = CLSID_DirectMusicWaveTrack;

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _pClassID$[ebp]
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicWaveTrack
  00034	89 11		 mov	 DWORD PTR [ecx], edx
  00036	a1 04 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicWaveTrack+4
  0003b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0003e	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicWaveTrack+8
  00044	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00047	a1 0c 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicWaveTrack+12
  0004c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 497  :     return S_OK;

  0004f	33 c0		 xor	 eax, eax

; 498  : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?GetClassID@CWavTrack@@UAGJPAU_GUID@@@Z ENDP		; CWavTrack::GetClassID
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsDirty@CWavTrack@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?IsDirty@CWavTrack@@UAGJXZ PROC NEAR			; CWavTrack::IsDirty, COMDAT

; 504  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 505  :     return S_FALSE;

  00003	b8 01 00 00 00	 mov	 eax, 1

; 506  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?IsDirty@CWavTrack@@UAGJXZ ENDP				; CWavTrack::IsDirty
_TEXT	ENDS
PUBLIC	??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ ; `string'
PUBLIC	?Load@WavePart@@QAEJPAVCRiffParser@@@Z		; WavePart::Load
PUBLIC	?InsertByAscendingPChannel@CWavTrack@@IAEXPAV?$TListItem@UWavePart@@@@@Z ; CWavTrack::InsertByAscendingPChannel
PUBLIC	?GetCount@?$TList@UWavePart@@@@QBEJXZ		; TList<WavePart>::GetCount
PUBLIC	??0?$TListItem@UWavePart@@@@QAE@XZ		; TListItem<WavePart>::TListItem<WavePart>
PUBLIC	??_G?$TListItem@UWavePart@@@@QAEPAXI@Z		; TListItem<WavePart>::`scalar deleting destructor'
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
EXTRN	_IsBadCodePtr@4:NEAR
EXTRN	??0CRiffParser@@QAE@PAUIStream@@@Z:NEAR		; CRiffParser::CRiffParser
EXTRN	?NextChunk@CRiffParser@@QAEHPAJ@Z:NEAR		; CRiffParser::NextChunk
EXTRN	?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z:NEAR	; CRiffParser::EnterList
EXTRN	?LeaveList@CRiffParser@@QAEXXZ:NEAR		; CRiffParser::LeaveList
EXTRN	?Read@CRiffParser@@QAEJPAXK@Z:NEAR		; CRiffParser::Read
;	COMDAT ?__szValidateInterfaceName@?1??Load@CWavTrack@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Load@CWavTrack@@UAGJPAUIStream@@@Z@4QBDB DB 'C'
	DB	'WavTrack::Load', 00H			; `CWavTrack::Load'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT
??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pIStream', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Load@CWavTrack@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT
tv167 = -136
tv155 = -132
$T71282 = -128
$T71281 = -124
$T71278 = -120
_pNewPart$69667 = -116
_iTrackHeader$69645 = -112
_ckList$69632 = -104
_hr$ = -68
_Parser$ = -64
_ckMain$ = -32
_this$ = 8
_pIStream$ = 12
?Load@CWavTrack@@UAGJPAUIStream@@@Z PROC NEAR		; CWavTrack::Load, COMDAT

; 509  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H

; 510  :     V_INAME(CWavTrack::Load);
; 511  :     V_INTERFACE(pIStream);

  00009	6a 04		 push	 4
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00014	85 c0		 test	 eax, eax
  00016	74 19		 je	 SHORT $L69613
  00018	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CWavTrack@@UAGJPAUIStream@@@Z@4QBDB
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00022	6a ff		 push	 -1
  00024	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	e8 00 00 00 00	 call	 _DebugBreak@0
$L69613:
  00031	6a 04		 push	 4
  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003e	85 c0		 test	 eax, eax
  00040	74 19		 je	 SHORT $L69616
  00042	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CWavTrack@@UAGJPAUIStream@@@Z@4QBDB
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  0004c	6a ff		 push	 -1
  0004e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	e8 00 00 00 00	 call	 _DebugBreak@0
$L69616:
  0005b	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00060	8b 11		 mov	 edx, DWORD PTR [ecx]
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00068	85 c0		 test	 eax, eax
  0006a	74 19		 je	 SHORT $L69618
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CWavTrack@@UAGJPAUIStream@@@Z@4QBDB
  00071	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00076	6a ff		 push	 -1
  00078	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	e8 00 00 00 00	 call	 _DebugBreak@0
$L69618:

; 512  : 
; 513  :     CRiffParser Parser(pIStream);

  00085	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00088	50		 push	 eax
  00089	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  0008c	e8 00 00 00 00	 call	 ??0CRiffParser@@QAE@PAUIStream@@@Z ; CRiffParser::CRiffParser

; 514  :     RIFFIO ckMain;
; 515  : 
; 516  :     HRESULT hr = S_OK;

  00091	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 517  : 
; 518  :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00098	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	83 c1 18	 add	 ecx, 24			; 00000018H
  0009e	51		 push	 ecx
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 519  :     m_dwValidate++; // used to validate state data that's out there

  000a5	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000a8	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  000ab	83 c0 01	 add	 eax, 1
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 520  :     Parser.EnterList(&ckMain);  

  000b4	8d 55 e0	 lea	 edx, DWORD PTR _ckMain$[ebp]
  000b7	52		 push	 edx
  000b8	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000bb	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList

; 521  :     if (Parser.NextChunk(&hr) && (ckMain.fccType == DMUS_FOURCC_WAVETRACK_LIST))

  000c0	8d 45 bc	 lea	 eax, DWORD PTR _hr$[ebp]
  000c3	50		 push	 eax
  000c4	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000c7	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  000cc	85 c0		 test	 eax, eax
  000ce	0f 84 38 01 00
	00		 je	 $L69631
  000d4	81 7d e8 77 61
	76 74		 cmp	 DWORD PTR _ckMain$[ebp+8], 1953915255 ; 74766177H
  000db	0f 85 2b 01 00
	00		 jne	 $L69631

; 522  :     {
; 523  :         MovePartsToTemp();

  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	e8 00 00 00 00	 call	 ?MovePartsToTemp@CWavTrack@@IAEXXZ ; CWavTrack::MovePartsToTemp

; 524  :         CleanUp();

  000e9	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	e8 00 00 00 00	 call	 ?CleanUp@CWavTrack@@IAEXXZ ; CWavTrack::CleanUp

; 525  :         RIFFIO ckList;
; 526  :         Parser.EnterList(&ckList);

  000f1	8d 4d 98	 lea	 ecx, DWORD PTR _ckList$69632[ebp]
  000f4	51		 push	 ecx
  000f5	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000f8	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L69634:

; 527  :         while (Parser.NextChunk(&hr))

  000fd	8d 55 bc	 lea	 edx, DWORD PTR _hr$[ebp]
  00100	52		 push	 edx
  00101	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  00104	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  00109	85 c0		 test	 eax, eax
  0010b	0f 84 f3 00 00
	00		 je	 $L69635

; 528  :         {
; 529  :             if ( ckList.ckid  == DMUS_FOURCC_WAVETRACK_CHUNK )

  00111	81 7d 98 77 61
	74 68		 cmp	 DWORD PTR _ckList$69632[ebp], 1752457591 ; 68746177H
  00118	75 2e		 jne	 SHORT $L69644

; 530  :             {
; 531  :                 DMUS_IO_WAVE_TRACK_HEADER iTrackHeader;
; 532  : 
; 533  :                 // Read in the item's header structure
; 534  :                 hr = Parser.Read( &iTrackHeader, sizeof( DMUS_IO_WAVE_TRACK_HEADER ) );

  0011a	6a 08		 push	 8
  0011c	8d 45 90	 lea	 eax, DWORD PTR _iTrackHeader$69645[ebp]
  0011f	50		 push	 eax
  00120	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  00123	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  00128	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 535  : 
; 536  :                 if( SUCCEEDED( hr ) )

  0012b	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0012f	7c 12		 jl	 SHORT $L69648

; 537  :                 {
; 538  :                     m_lVolume = iTrackHeader.lVolume;

  00131	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	8b 55 90	 mov	 edx, DWORD PTR _iTrackHeader$69645[ebp]
  00137	89 51 38	 mov	 DWORD PTR [ecx+56], edx

; 539  :                     m_dwTrackFlags = iTrackHeader.dwFlags;

  0013a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0013d	8b 4d 94	 mov	 ecx, DWORD PTR _iTrackHeader$69645[ebp+4]
  00140	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
$L69648:

; 540  :                 }
; 541  :             }
; 542  :             else if (( ckList.ckid == FOURCC_LIST) && 

  00143	e9 b7 00 00 00	 jmp	 $L69649
$L69644:

; 543  :                 (ckList.fccType == DMUS_FOURCC_WAVEPART_LIST))

  00148	81 7d 98 4c 49
	53 54		 cmp	 DWORD PTR _ckList$69632[ebp], 1414744396 ; 5453494cH
  0014f	0f 85 aa 00 00
	00		 jne	 $L69649
  00155	81 7d a0 77 61
	76 70		 cmp	 DWORD PTR _ckList$69632[ebp+8], 1886806391 ; 70766177H
  0015c	0f 85 9d 00 00
	00		 jne	 $L69649

; 544  :             {
; 545  :                 TListItem<WavePart>* pNewPart = new TListItem<WavePart>;

  00162	6a 20		 push	 32			; 00000020H
  00164	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00169	83 c4 04	 add	 esp, 4
  0016c	89 45 88	 mov	 DWORD PTR $T71278[ebp], eax
  0016f	83 7d 88 00	 cmp	 DWORD PTR $T71278[ebp], 0
  00173	74 10		 je	 SHORT $L71279
  00175	8b 4d 88	 mov	 ecx, DWORD PTR $T71278[ebp]
  00178	e8 00 00 00 00	 call	 ??0?$TListItem@UWavePart@@@@QAE@XZ ; TListItem<WavePart>::TListItem<WavePart>
  0017d	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv155[ebp], eax
  00183	eb 0a		 jmp	 SHORT $L71280
$L71279:
  00185	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv155[ebp], 0
$L71280:
  0018f	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv155[ebp]
  00195	89 55 8c	 mov	 DWORD PTR _pNewPart$69667[ebp], edx

; 546  :                 if( !pNewPart )

  00198	83 7d 8c 00	 cmp	 DWORD PTR _pNewPart$69667[ebp], 0
  0019c	75 09		 jne	 SHORT $L69670

; 547  :                 {
; 548  :                     hr = E_OUTOFMEMORY;

  0019e	c7 45 bc 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 549  :                 }
; 550  :                 else

  001a5	eb 58		 jmp	 SHORT $L69649
$L69670:

; 551  :                 {
; 552  :                     hr = pNewPart->GetItemValue().Load( &Parser );

  001a7	8d 45 c0	 lea	 eax, DWORD PTR _Parser$[ebp]
  001aa	50		 push	 eax
  001ab	8b 4d 8c	 mov	 ecx, DWORD PTR _pNewPart$69667[ebp]
  001ae	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  001b3	8b c8		 mov	 ecx, eax
  001b5	e8 00 00 00 00	 call	 ?Load@WavePart@@QAEJPAVCRiffParser@@@Z ; WavePart::Load
  001ba	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 553  :                     if( FAILED ( hr ) )

  001bd	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001c1	7d 30		 jge	 SHORT $L69674

; 554  :                     {
; 555  :                         delete pNewPart;

  001c3	8b 4d 8c	 mov	 ecx, DWORD PTR _pNewPart$69667[ebp]
  001c6	89 4d 80	 mov	 DWORD PTR $T71282[ebp], ecx
  001c9	8b 55 80	 mov	 edx, DWORD PTR $T71282[ebp]
  001cc	89 55 84	 mov	 DWORD PTR $T71281[ebp], edx
  001cf	83 7d 84 00	 cmp	 DWORD PTR $T71281[ebp], 0
  001d3	74 12		 je	 SHORT $L71283
  001d5	6a 01		 push	 1
  001d7	8b 4d 84	 mov	 ecx, DWORD PTR $T71281[ebp]
  001da	e8 00 00 00 00	 call	 ??_G?$TListItem@UWavePart@@@@QAEPAXI@Z
  001df	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv167[ebp], eax
  001e5	eb 0a		 jmp	 SHORT $L71284
$L71283:
  001e7	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv167[ebp], 0
$L71284:

; 556  :                     }
; 557  :                     else

  001f1	eb 0c		 jmp	 SHORT $L69649
$L69674:

; 558  :                     {
; 559  :                         InsertByAscendingPChannel( pNewPart );

  001f3	8b 45 8c	 mov	 eax, DWORD PTR _pNewPart$69667[ebp]
  001f6	50		 push	 eax
  001f7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001fa	e8 00 00 00 00	 call	 ?InsertByAscendingPChannel@CWavTrack@@IAEXPAV?$TListItem@UWavePart@@@@@Z ; CWavTrack::InsertByAscendingPChannel
$L69649:

; 560  :                     }
; 561  :                 }
; 562  :             }
; 563  :         }

  001ff	e9 f9 fe ff ff	 jmp	 $L69634
$L69635:

; 564  :         Parser.LeaveList();

  00204	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  00207	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList
$L69631:

; 565  :     }
; 566  :     Parser.LeaveList();

  0020c	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  0020f	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 567  :     if (SUCCEEDED(hr))

  00214	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00218	7c 17		 jl	 SHORT $L69679

; 568  :     {
; 569  :         hr = InitTrack(m_WavePartList.GetCount());

  0021a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0021d	83 c1 48	 add	 ecx, 72			; 00000048H
  00220	e8 00 00 00 00	 call	 ?GetCount@?$TList@UWavePart@@@@QBEJXZ ; TList<WavePart>::GetCount
  00225	50		 push	 eax
  00226	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00229	e8 00 00 00 00	 call	 ?InitTrack@CWavTrack@@IAEJK@Z ; CWavTrack::InitTrack
  0022e	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax
$L69679:

; 570  :     }
; 571  :     if (SUCCEEDED(hr))

  00231	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00235	7c 02		 jl	 SHORT $L69681

; 572  :     {
; 573  : #ifdef DXAPI
; 574  :         TListItem<WavePart>* pScan = m_WavePartList.GetHead();
; 575  :         for (; pScan ; pScan = pScan->GetNext())
; 576  :         {
; 577  :             TListItem<WaveItem>* pItemScan = pScan->GetItemValue().m_WaveItemList.GetHead();
; 578  :             for (; pItemScan; pItemScan = pItemScan->GetNext())
; 579  :             {
; 580  :                 pItemScan->GetItemValue().m_pDownloadedWave = FindDownload(pItemScan);
; 581  :             }
; 582  :         }
; 583  : #endif
; 584  :     }
; 585  :     else CleanUp();

  00237	eb 08		 jmp	 SHORT $L69682
$L69681:
  00239	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0023c	e8 00 00 00 00	 call	 ?CleanUp@CWavTrack@@IAEXXZ ; CWavTrack::CleanUp
$L69682:

; 586  : 
; 587  :     CleanUpTempParts();

  00241	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00244	e8 00 00 00 00	 call	 ?CleanUpTempParts@CWavTrack@@IAEXXZ ; CWavTrack::CleanUpTempParts

; 588  :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  00249	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0024c	83 c1 18	 add	 ecx, 24			; 00000018H
  0024f	51		 push	 ecx
  00250	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 589  :     return hr;

  00256	8b 45 bc	 mov	 eax, DWORD PTR _hr$[ebp]

; 590  : }

  00259	8b e5		 mov	 esp, ebp
  0025b	5d		 pop	 ebp
  0025c	c2 08 00	 ret	 8
?Load@CWavTrack@@UAGJPAUIStream@@@Z ENDP		; CWavTrack::Load
_TEXT	ENDS
PUBLIC	??1?$TListItem@UWavePart@@@@QAE@XZ		; TListItem<WavePart>::~TListItem<WavePart>
; Function compile flags: /Odt
;	COMDAT ??_G?$TListItem@UWavePart@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_G?$TListItem@UWavePart@@@@QAEPAXI@Z PROC NEAR	; TListItem<WavePart>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$TListItem@UWavePart@@@@QAE@XZ ; TListItem<WavePart>::~TListItem<WavePart>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69686
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69686:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$TListItem@UWavePart@@@@QAEPAXI@Z ENDP		; TListItem<WavePart>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?CopyItems@WavePart@@QAEJABV?$TList@UWaveItem@@@@JJ@Z ; WavePart::CopyItems
PUBLIC	?Reverse@?$TList@UWavePart@@@@QAEXXZ		; TList<WavePart>::Reverse
; Function compile flags: /Odt
;	COMDAT ?CopyParts@CWavTrack@@IAEJABV?$TList@UWavePart@@@@JJ@Z
_TEXT	SEGMENT
tv137 = -44
tv77 = -40
_this$ = -36
$T71295 = -32
$T71294 = -28
$T71291 = -24
_rNew$69704 = -20
_pNew$69700 = -16
_rScan$69699 = -12
_hr$ = -8
_pScan$ = -4
_rParts$ = 8
_mtStart$ = 12
_mtEnd$ = 16
?CopyParts@CWavTrack@@IAEJABV?$TList@UWavePart@@@@JJ@Z PROC NEAR ; CWavTrack::CopyParts, COMDAT
; _this$ = ecx

; 593  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 594  :     HRESULT hr = S_OK;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 595  :     CleanUp();

  00010	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?CleanUp@CWavTrack@@IAEXXZ ; CWavTrack::CleanUp

; 596  :     TListItem<WavePart>* pScan = rParts.GetHead();

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _rParts$[ebp]
  0001b	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
  00020	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax

; 597  :     for (; pScan; pScan = pScan->GetNext() )

  00023	eb 0b		 jmp	 SHORT $L69696
$L69697:
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00028	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  0002d	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
$L69696:
  00030	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00034	0f 84 fe 00 00
	00		 je	 $L69698

; 598  :     {
; 599  :         WavePart& rScan = pScan->GetItemValue();

  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0003d	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  00042	89 45 f4	 mov	 DWORD PTR _rScan$69699[ebp], eax

; 600  :         TListItem<WavePart>* pNew = new TListItem<WavePart>;

  00045	6a 20		 push	 32			; 00000020H
  00047	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004c	83 c4 04	 add	 esp, 4
  0004f	89 45 e8	 mov	 DWORD PTR $T71291[ebp], eax
  00052	83 7d e8 00	 cmp	 DWORD PTR $T71291[ebp], 0
  00056	74 0d		 je	 SHORT $L71292
  00058	8b 4d e8	 mov	 ecx, DWORD PTR $T71291[ebp]
  0005b	e8 00 00 00 00	 call	 ??0?$TListItem@UWavePart@@@@QAE@XZ ; TListItem<WavePart>::TListItem<WavePart>
  00060	89 45 d8	 mov	 DWORD PTR tv77[ebp], eax
  00063	eb 07		 jmp	 SHORT $L71293
$L71292:
  00065	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$L71293:
  0006c	8b 45 d8	 mov	 eax, DWORD PTR tv77[ebp]
  0006f	89 45 f0	 mov	 DWORD PTR _pNew$69700[ebp], eax

; 601  :         if (pNew)

  00072	83 7d f0 00	 cmp	 DWORD PTR _pNew$69700[ebp], 0
  00076	0f 84 ae 00 00
	00		 je	 $L69703

; 602  :         {
; 603  :             WavePart& rNew = pNew->GetItemValue();

  0007c	8b 4d f0	 mov	 ecx, DWORD PTR _pNew$69700[ebp]
  0007f	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  00084	89 45 ec	 mov	 DWORD PTR _rNew$69704[ebp], eax

; 604  :             rNew.m_dwLockToPart = rScan.m_dwLockToPart;

  00087	8b 4d ec	 mov	 ecx, DWORD PTR _rNew$69704[ebp]
  0008a	8b 55 f4	 mov	 edx, DWORD PTR _rScan$69699[ebp]
  0008d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00090	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 605  :             rNew.m_dwPChannel = rScan.m_dwPChannel;

  00093	8b 4d ec	 mov	 ecx, DWORD PTR _rNew$69704[ebp]
  00096	8b 55 f4	 mov	 edx, DWORD PTR _rScan$69699[ebp]
  00099	8b 02		 mov	 eax, DWORD PTR [edx]
  0009b	89 01		 mov	 DWORD PTR [ecx], eax

; 606  :             rNew.m_dwIndex = rScan.m_dwIndex;

  0009d	8b 4d ec	 mov	 ecx, DWORD PTR _rNew$69704[ebp]
  000a0	8b 55 f4	 mov	 edx, DWORD PTR _rScan$69699[ebp]
  000a3	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000a6	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 607  :             rNew.m_dwPChannelFlags = rScan.m_dwPChannelFlags;

  000a9	8b 4d ec	 mov	 ecx, DWORD PTR _rNew$69704[ebp]
  000ac	8b 55 f4	 mov	 edx, DWORD PTR _rScan$69699[ebp]
  000af	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000b2	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 608  :             rNew.m_lVolume = rScan.m_lVolume;

  000b5	8b 4d ec	 mov	 ecx, DWORD PTR _rNew$69704[ebp]
  000b8	8b 55 f4	 mov	 edx, DWORD PTR _rScan$69699[ebp]
  000bb	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000be	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 609  :             rNew.m_dwVariations = rScan.m_dwVariations;

  000c1	8b 4d ec	 mov	 ecx, DWORD PTR _rNew$69704[ebp]
  000c4	8b 55 f4	 mov	 edx, DWORD PTR _rScan$69699[ebp]
  000c7	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000ca	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 610  :             if (SUCCEEDED(hr = rNew.CopyItems(rScan.m_WaveItemList, mtStart, mtEnd)))

  000cd	8b 4d 10	 mov	 ecx, DWORD PTR _mtEnd$[ebp]
  000d0	51		 push	 ecx
  000d1	8b 55 0c	 mov	 edx, DWORD PTR _mtStart$[ebp]
  000d4	52		 push	 edx
  000d5	8b 45 f4	 mov	 eax, DWORD PTR _rScan$69699[ebp]
  000d8	83 c0 18	 add	 eax, 24			; 00000018H
  000db	50		 push	 eax
  000dc	8b 4d ec	 mov	 ecx, DWORD PTR _rNew$69704[ebp]
  000df	e8 00 00 00 00	 call	 ?CopyItems@WavePart@@QAEJABV?$TList@UWaveItem@@@@JJ@Z ; WavePart::CopyItems
  000e4	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
  000e7	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000eb	7c 11		 jl	 SHORT $L69706

; 611  :             {
; 612  :                 m_WavePartList.AddHead(pNew);

  000ed	8b 4d f0	 mov	 ecx, DWORD PTR _pNew$69700[ebp]
  000f0	51		 push	 ecx
  000f1	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f4	83 c1 48	 add	 ecx, 72			; 00000048H
  000f7	e8 00 00 00 00	 call	 ?AddHead@?$TList@UWavePart@@@@QAEXPAV?$TListItem@UWavePart@@@@@Z ; TList<WavePart>::AddHead

; 613  :             }
; 614  :             else

  000fc	eb 2a		 jmp	 SHORT $L69707
$L69706:

; 615  :             {
; 616  :                 delete pNew;

  000fe	8b 55 f0	 mov	 edx, DWORD PTR _pNew$69700[ebp]
  00101	89 55 e0	 mov	 DWORD PTR $T71295[ebp], edx
  00104	8b 45 e0	 mov	 eax, DWORD PTR $T71295[ebp]
  00107	89 45 e4	 mov	 DWORD PTR $T71294[ebp], eax
  0010a	83 7d e4 00	 cmp	 DWORD PTR $T71294[ebp], 0
  0010e	74 0f		 je	 SHORT $L71296
  00110	6a 01		 push	 1
  00112	8b 4d e4	 mov	 ecx, DWORD PTR $T71294[ebp]
  00115	e8 00 00 00 00	 call	 ??_G?$TListItem@UWavePart@@@@QAEPAXI@Z
  0011a	89 45 d4	 mov	 DWORD PTR tv137[ebp], eax
  0011d	eb 07		 jmp	 SHORT $L71297
$L71296:
  0011f	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$L71297:

; 617  :                 break;

  00126	eb 10		 jmp	 SHORT $L69698
$L69707:

; 618  :             }
; 619  :         }
; 620  :         else

  00128	eb 09		 jmp	 SHORT $L69710
$L69703:

; 621  :         {
; 622  :             hr = E_OUTOFMEMORY;

  0012a	c7 45 f8 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 623  :             break;

  00131	eb 05		 jmp	 SHORT $L69698
$L69710:

; 624  :         }
; 625  :     }

  00133	e9 ed fe ff ff	 jmp	 $L69697
$L69698:

; 626  :     if (SUCCEEDED(hr))

  00138	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0013c	7c 0d		 jl	 SHORT $L69713

; 627  :     {
; 628  :         m_WavePartList.Reverse();

  0013e	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	83 c1 48	 add	 ecx, 72			; 00000048H
  00144	e8 00 00 00 00	 call	 ?Reverse@?$TList@UWavePart@@@@QAEXXZ ; TList<WavePart>::Reverse

; 629  :     }
; 630  :     else

  00149	eb 08		 jmp	 SHORT $L69714
$L69713:

; 631  :     {
; 632  :         CleanUp();

  0014b	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014e	e8 00 00 00 00	 call	 ?CleanUp@CWavTrack@@IAEXXZ ; CWavTrack::CleanUp
$L69714:

; 633  :     }
; 634  :     return hr;

  00153	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 635  : }

  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c2 0c 00	 ret	 12			; 0000000cH
?CopyParts@CWavTrack@@IAEJABV?$TList@UWavePart@@@@JJ@Z ENDP ; CWavTrack::CopyParts
_TEXT	ENDS
PUBLIC	?SetNext@?$TListItem@UWavePart@@@@QAEXPAV1@@Z	; TListItem<WavePart>::SetNext
; Function compile flags: /Odt
;	COMDAT ?InsertByAscendingPChannel@CWavTrack@@IAEXPAV?$TListItem@UWavePart@@@@@Z
_TEXT	SEGMENT
_this$ = -16
_pPrevious$69722 = -12
_pScan$69721 = -8
_dwPChannel$69720 = -4
_pPart$ = 8
?InsertByAscendingPChannel@CWavTrack@@IAEXPAV?$TListItem@UWavePart@@@@@Z PROC NEAR ; CWavTrack::InsertByAscendingPChannel, COMDAT
; _this$ = ecx

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 639  :     if (pPart)

  00009	83 7d 08 00	 cmp	 DWORD PTR _pPart$[ebp], 0
  0000d	74 7d		 je	 SHORT $L69718

; 640  :     {
; 641  :         DWORD dwPChannel = pPart->GetItemValue().m_dwPChannel;

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pPart$[ebp]
  00012	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  00017	8b 00		 mov	 eax, DWORD PTR [eax]
  00019	89 45 fc	 mov	 DWORD PTR _dwPChannel$69720[ebp], eax

; 642  :         TListItem<WavePart>* pScan = m_WavePartList.GetHead();

  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 48	 add	 ecx, 72			; 00000048H
  00022	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
  00027	89 45 f8	 mov	 DWORD PTR _pScan$69721[ebp], eax

; 643  :         TListItem<WavePart>* pPrevious = NULL;

  0002a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pPrevious$69722[ebp], 0

; 644  :         for (; pScan; pScan = pScan->GetNext())

  00031	eb 0b		 jmp	 SHORT $L69723
$L69724:
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$69721[ebp]
  00036	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  0003b	89 45 f8	 mov	 DWORD PTR _pScan$69721[ebp], eax
$L69723:
  0003e	83 7d f8 00	 cmp	 DWORD PTR _pScan$69721[ebp], 0
  00042	74 19		 je	 SHORT $L69725

; 645  :         {
; 646  :             if (dwPChannel < pScan->GetItemValue().m_dwPChannel)

  00044	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$69721[ebp]
  00047	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _dwPChannel$69720[ebp]
  0004f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00051	73 02		 jae	 SHORT $L69726

; 647  :             {
; 648  :                 break;

  00053	eb 08		 jmp	 SHORT $L69725
$L69726:

; 649  :             }
; 650  :             pPrevious = pScan;

  00055	8b 55 f8	 mov	 edx, DWORD PTR _pScan$69721[ebp]
  00058	89 55 f4	 mov	 DWORD PTR _pPrevious$69722[ebp], edx

; 651  :         }

  0005b	eb d6		 jmp	 SHORT $L69724
$L69725:

; 652  :         if (pPrevious)

  0005d	83 7d f4 00	 cmp	 DWORD PTR _pPrevious$69722[ebp], 0
  00061	74 1a		 je	 SHORT $L69727

; 653  :         {
; 654  :             pPart->SetNext(pScan);

  00063	8b 45 f8	 mov	 eax, DWORD PTR _pScan$69721[ebp]
  00066	50		 push	 eax
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _pPart$[ebp]
  0006a	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UWavePart@@@@QAEXPAV1@@Z ; TListItem<WavePart>::SetNext

; 655  :             pPrevious->SetNext(pPart);

  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _pPart$[ebp]
  00072	51		 push	 ecx
  00073	8b 4d f4	 mov	 ecx, DWORD PTR _pPrevious$69722[ebp]
  00076	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UWavePart@@@@QAEXPAV1@@Z ; TListItem<WavePart>::SetNext

; 656  :         }
; 657  :         else

  0007b	eb 0f		 jmp	 SHORT $L69718
$L69727:

; 658  :         {
; 659  :             m_WavePartList.AddHead(pPart);

  0007d	8b 55 08	 mov	 edx, DWORD PTR _pPart$[ebp]
  00080	52		 push	 edx
  00081	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	83 c1 48	 add	 ecx, 72			; 00000048H
  00087	e8 00 00 00 00	 call	 ?AddHead@?$TList@UWavePart@@@@QAEXPAV?$TListItem@UWavePart@@@@@Z ; TList<WavePart>::AddHead
$L69718:

; 660  :         }
; 661  :     }
; 662  : }

  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
?InsertByAscendingPChannel@CWavTrack@@IAEXPAV?$TListItem@UWavePart@@@@@Z ENDP ; CWavTrack::InsertByAscendingPChannel
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Save@CWavTrack@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT
_this$ = 8
_pIStream$ = 12
_fClearDirty$ = 16
?Save@CWavTrack@@UAGJPAUIStream@@H@Z PROC NEAR		; CWavTrack::Save, COMDAT

; 665  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 666  :     return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 667  : }

  00008	5d		 pop	 ebp
  00009	c2 0c 00	 ret	 12			; 0000000cH
?Save@CWavTrack@@UAGJPAUIStream@@H@Z ENDP		; CWavTrack::Save
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CWavTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT
_this$ = 8
_pcbSize$ = 12
?GetSizeMax@CWavTrack@@UAGJPAT_ULARGE_INTEGER@@@Z PROC NEAR ; CWavTrack::GetSizeMax, COMDAT

; 670  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 671  :     return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 672  : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?GetSizeMax@CWavTrack@@UAGJPAT_ULARGE_INTEGER@@@Z ENDP	; CWavTrack::GetSizeMax
_TEXT	ENDS
EXTRN	_GUID_WavePlayParams:BYTE
; Function compile flags: /Odt
;	COMDAT ?IsParamSupported@CWavTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguidType$ = 12
?IsParamSupported@CWavTrack@@UAGJABU_GUID@@@Z PROC NEAR	; CWavTrack::IsParamSupported, COMDAT

; 688  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : #ifdef DXAPI
; 690  :     if(rguidType == GUID_Download ||
; 691  :        rguidType == GUID_DownloadToAudioPath ||
; 692  :        rguidType == GUID_UnloadFromAudioPath ||
; 693  :        rguidType == GUID_WavePlayParams ||
; 694  :        rguidType == GUID_Enable_Auto_Download ||
; 695  :        rguidType == GUID_Disable_Auto_Download ||
; 696  :        rguidType == GUID_Unload )
; 697  : #else
; 698  :     if (rguidType == GUID_WavePlayParams)

  00003	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_WavePlayParams
  00008	8b 45 0c	 mov	 eax, DWORD PTR _rguidType$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _==@8
  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $L69744

; 699  : #endif
; 700  :     {
; 701  :         return S_OK;

  00015	33 c0		 xor	 eax, eax
  00017	eb 05		 jmp	 SHORT $L69743
$L69744:

; 702  :     }
; 703  :     else
; 704  :     {
; 705  :         return DMUS_E_TYPE_UNSUPPORTED;

  00019	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
$L69743:

; 706  :     }
; 707  : }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?IsParamSupported@CWavTrack@@UAGJABU_GUID@@@Z ENDP	; CWavTrack::IsParamSupported
_TEXT	ENDS
PUBLIC	?MergeSort@?$TList@UWaveItem@@@@QAEXP6GHAAUWaveItem@@0@Z@Z ; TList<WaveItem>::MergeSort
EXTRN	?GetTrackConfig@CSegment@@QAEJABU_GUID@@KKPAK@Z:NEAR ; CSegment::GetTrackConfig
EXTRN	_IID_CSegment:BYTE
; Function compile flags: /Odt
;	COMDAT ?Init@CWavTrack@@UAGJPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT
tv130 = -24
_dwGroupBits$69758 = -20
_dwConfig$69761 = -16
_pScan$ = -12
_fSortLogical$ = -5
_pCSegment$ = -4
_this$ = 8
_pSegment$ = 12
?Init@CWavTrack@@UAGJPAUIDirectMusicSegment@@@Z PROC NEAR ; CWavTrack::Init, COMDAT

; 723  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 724  :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 10	 add	 eax, 16			; 00000010H
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 725  :     if( m_dwPChannelsUsed && m_aPChannels )

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0001a	74 23		 je	 SHORT $L69752
  0001c	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  00023	74 1a		 je	 SHORT $L69752

; 726  :     {
; 727  :         pSegment->SetPChannelsUsed( m_dwPChannelsUsed, m_aPChannels );

  00025	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0002b	51		 push	 ecx
  0002c	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00032	50		 push	 eax
  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	8b 45 0c	 mov	 eax, DWORD PTR _pSegment$[ebp]
  0003b	50		 push	 eax
  0003c	ff 52 78	 call	 DWORD PTR [edx+120]
$L69752:

; 728  :     }
; 729  :     CSegment* pCSegment = NULL;

  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCSegment$[ebp], 0

; 730  :     bool fSortLogical = false;

  00046	c6 45 fb 00	 mov	 BYTE PTR _fSortLogical$[ebp], 0

; 731  :     if (SUCCEEDED(pSegment->QueryInterface(IID_CSegment, (void**)&pCSegment)))

  0004a	8d 4d fc	 lea	 ecx, DWORD PTR _pCSegment$[ebp]
  0004d	51		 push	 ecx
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:_IID_CSegment
  00053	8b 55 0c	 mov	 edx, DWORD PTR _pSegment$[ebp]
  00056	8b 02		 mov	 eax, DWORD PTR [edx]
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  0005b	51		 push	 ecx
  0005c	ff 10		 call	 DWORD PTR [eax]
  0005e	85 c0		 test	 eax, eax
  00060	7c 7b		 jl	 SHORT $L69757

; 732  :     {
; 733  :         DWORD dwGroupBits = 0;

  00062	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwGroupBits$69758[ebp], 0

; 734  :         if (FAILED(pSegment->GetTrackGroup( this, &dwGroupBits )))

  00069	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	83 ea 08	 sub	 edx, 8
  0006f	85 d2		 test	 edx, edx
  00071	74 08		 je	 SHORT $L71313
  00073	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR tv130[ebp], eax
  00079	eb 07		 jmp	 SHORT $L71314
$L71313:
  0007b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$L71314:
  00082	8d 4d ec	 lea	 ecx, DWORD PTR _dwGroupBits$69758[ebp]
  00085	51		 push	 ecx
  00086	8b 55 e8	 mov	 edx, DWORD PTR tv130[ebp]
  00089	52		 push	 edx
  0008a	8b 45 0c	 mov	 eax, DWORD PTR _pSegment$[ebp]
  0008d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008f	8b 55 0c	 mov	 edx, DWORD PTR _pSegment$[ebp]
  00092	52		 push	 edx
  00093	ff 51 58	 call	 DWORD PTR [ecx+88]
  00096	85 c0		 test	 eax, eax
  00098	7d 07		 jge	 SHORT $L69760

; 735  :         {
; 736  :             dwGroupBits = 0xffffffff;

  0009a	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _dwGroupBits$69758[ebp], -1
$L69760:

; 737  :         }
; 738  :         DWORD dwConfig = 0;

  000a1	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwConfig$69761[ebp], 0

; 739  :         if (SUCCEEDED(pCSegment->GetTrackConfig(CLSID_DirectMusicWaveTrack, dwGroupBits, 0, &dwConfig)))

  000a8	8d 45 f0	 lea	 eax, DWORD PTR _dwConfig$69761[ebp]
  000ab	50		 push	 eax
  000ac	6a 00		 push	 0
  000ae	8b 4d ec	 mov	 ecx, DWORD PTR _dwGroupBits$69758[ebp]
  000b1	51		 push	 ecx
  000b2	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicWaveTrack
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _pCSegment$[ebp]
  000ba	e8 00 00 00 00	 call	 ?GetTrackConfig@CSegment@@QAEJABU_GUID@@KKPAK@Z ; CSegment::GetTrackConfig
  000bf	85 c0		 test	 eax, eax
  000c1	7c 0e		 jl	 SHORT $L69763

; 740  :         {
; 741  :             if ( !(dwConfig & DMUS_TRACKCONFIG_PLAY_CLOCKTIME) )

  000c3	8b 55 f0	 mov	 edx, DWORD PTR _dwConfig$69761[ebp]
  000c6	83 e2 40	 and	 edx, 64			; 00000040H
  000c9	85 d2		 test	 edx, edx
  000cb	75 04		 jne	 SHORT $L69763

; 742  :             {
; 743  :                 fSortLogical = true;

  000cd	c6 45 fb 01	 mov	 BYTE PTR _fSortLogical$[ebp], 1
$L69763:

; 744  :             }
; 745  :         }
; 746  :         pCSegment->Release();

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _pCSegment$[ebp]
  000d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d6	8b 55 fc	 mov	 edx, DWORD PTR _pCSegment$[ebp]
  000d9	52		 push	 edx
  000da	ff 51 08	 call	 DWORD PTR [ecx+8]
$L69757:

; 747  :     }
; 748  :     TListItem<WavePart>* pScan = m_WavePartList.GetHead();

  000dd	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	83 c1 40	 add	 ecx, 64			; 00000040H
  000e3	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
  000e8	89 45 f4	 mov	 DWORD PTR _pScan$[ebp], eax

; 749  :     for (; pScan; pScan = pScan->GetNext())

  000eb	eb 0b		 jmp	 SHORT $L69766
$L69767:
  000ed	8b 4d f4	 mov	 ecx, DWORD PTR _pScan$[ebp]
  000f0	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  000f5	89 45 f4	 mov	 DWORD PTR _pScan$[ebp], eax
$L69766:
  000f8	83 7d f4 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  000fc	74 3a		 je	 SHORT $L69768

; 750  :     {
; 751  :         if (fSortLogical)

  000fe	0f b6 45 fb	 movzx	 eax, BYTE PTR _fSortLogical$[ebp]
  00102	85 c0		 test	 eax, eax
  00104	74 19		 je	 SHORT $L69769

; 752  :         {
; 753  :             pScan->GetItemValue().m_WaveItemList.MergeSort(LogicalLess);

  00106	68 00 00 00 00	 push	 OFFSET FLAT:?LogicalLess@@YGHAAUWaveItem@@0@Z ; LogicalLess
  0010b	8b 4d f4	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0010e	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  00113	83 c0 18	 add	 eax, 24			; 00000018H
  00116	8b c8		 mov	 ecx, eax
  00118	e8 00 00 00 00	 call	 ?MergeSort@?$TList@UWaveItem@@@@QAEXP6GHAAUWaveItem@@0@Z@Z ; TList<WaveItem>::MergeSort

; 754  :         }
; 755  :         else

  0011d	eb 17		 jmp	 SHORT $L69770
$L69769:

; 756  :         {
; 757  :             pScan->GetItemValue().m_WaveItemList.MergeSort(PhysicalLess);

  0011f	68 00 00 00 00	 push	 OFFSET FLAT:?PhysicalLess@@YGHAAUWaveItem@@0@Z ; PhysicalLess
  00124	8b 4d f4	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00127	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  0012c	83 c0 18	 add	 eax, 24			; 00000018H
  0012f	8b c8		 mov	 ecx, eax
  00131	e8 00 00 00 00	 call	 ?MergeSort@?$TList@UWaveItem@@@@QAEXP6GHAAUWaveItem@@0@Z@Z ; TList<WaveItem>::MergeSort
$L69770:

; 758  :         }
; 759  :     }

  00136	eb b5		 jmp	 SHORT $L69767
$L69768:

; 760  :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  00138	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0013b	83 c1 10	 add	 ecx, 16			; 00000010H
  0013e	51		 push	 ecx
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 761  :     return S_OK;

  00145	33 c0		 xor	 eax, eax

; 762  : }

  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 08 00	 ret	 8
?Init@CWavTrack@@UAGJPAUIDirectMusicSegment@@@Z ENDP	; CWavTrack::Init
_TEXT	ENDS
PUBLIC	??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@ ; `string'
PUBLIC	??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@ ; `string'
PUBLIC	??0WaveStateData@@QAE@XZ			; WaveStateData::WaveStateData
PUBLIC	??_GWaveStateData@@QAEPAXI@Z			; WaveStateData::`scalar deleting destructor'
PUBLIC	??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@ ; `string'
PUBLIC	?SetUpStateCurrentPointers@CWavTrack@@IAEXPAUWaveStateData@@@Z ; CWavTrack::SetUpStateCurrentPointers
;	COMDAT ?__szValidateInterfaceName@?1??InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::InitPlay', 00H		; `CWavTrack::InitPlay'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
CONST	SEGMENT
??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@ DB '%s: Inva'
	DB	'lid pointer ppStateData', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
CONST	SEGMENT
??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@ DB '%s: Inval'
	DB	'id pointer pSegmentState', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
CONST	SEGMENT
??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@ DB '%s: Invali'
	DB	'd pointer pPerf', 0aH, 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT
tv237 = -52
tv227 = -48
tv153 = -44
$T71326 = -40
$T71325 = -36
$T71322 = -32
$T71321 = -28
$T71318 = -24
_dw$69816 = -20
_pSegSt8$ = -16
_hr$ = -12
_pStateData$ = -8
_pSegment$ = -4
_this$ = 8
_pSegmentState$ = 12
_pPerf$ = 16
_ppStateData$ = 20
_dwTrackID$ = 24
_dwFlags$ = 28
?InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z PROC NEAR ; CWavTrack::InitPlay, COMDAT

; 786  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi

; 787  :     V_INAME(IDirectMusicTrack::InitPlay);
; 788  :     V_PTRPTR_WRITE(ppStateData);

  00007	6a 04		 push	 4
  00009	8b 45 14	 mov	 eax, DWORD PTR _ppStateData$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00012	85 c0		 test	 eax, eax
  00014	74 19		 je	 SHORT $L69783
  00016	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
  00020	6a ff		 push	 -1
  00022	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002a	e8 00 00 00 00	 call	 _DebugBreak@0
$L69783:

; 789  :     V_INTERFACE(pSegmentState);

  0002f	6a 04		 push	 4
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegmentState$[ebp]
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003a	85 c0		 test	 eax, eax
  0003c	74 19		 je	 SHORT $L69785
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  00048	6a ff		 push	 -1
  0004a	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00052	e8 00 00 00 00	 call	 _DebugBreak@0
$L69785:
  00057	6a 04		 push	 4
  00059	8b 55 0c	 mov	 edx, DWORD PTR _pSegmentState$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00064	85 c0		 test	 eax, eax
  00066	74 19		 je	 SHORT $L69788
  00068	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  00072	6a ff		 push	 -1
  00074	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	e8 00 00 00 00	 call	 _DebugBreak@0
$L69788:
  00081	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegmentState$[ebp]
  00084	8b 11		 mov	 edx, DWORD PTR [ecx]
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0008e	85 c0		 test	 eax, eax
  00090	74 19		 je	 SHORT $L69790
  00092	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  0009c	6a ff		 push	 -1
  0009e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	e8 00 00 00 00	 call	 _DebugBreak@0
$L69790:

; 790  :     V_INTERFACE(pPerf);

  000ab	6a 04		 push	 4
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b6	85 c0		 test	 eax, eax
  000b8	74 19		 je	 SHORT $L69792
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  000bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  000c4	6a ff		 push	 -1
  000c6	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ce	e8 00 00 00 00	 call	 _DebugBreak@0
$L69792:
  000d3	6a 04		 push	 4
  000d5	8b 55 10	 mov	 edx, DWORD PTR _pPerf$[ebp]
  000d8	8b 02		 mov	 eax, DWORD PTR [edx]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000e0	85 c0		 test	 eax, eax
  000e2	74 19		 je	 SHORT $L69795
  000e4	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  000e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  000ee	6a ff		 push	 -1
  000f0	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f8	e8 00 00 00 00	 call	 _DebugBreak@0
$L69795:
  000fd	8b 4d 10	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00100	8b 11		 mov	 edx, DWORD PTR [ecx]
  00102	8b 02		 mov	 eax, DWORD PTR [edx]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0010a	85 c0		 test	 eax, eax
  0010c	74 19		 je	 SHORT $L69797
  0010e	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00113	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00118	6a ff		 push	 -1
  0011a	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00122	e8 00 00 00 00	 call	 _DebugBreak@0
$L69797:

; 791  :     HRESULT hr = E_OUTOFMEMORY;

  00127	c7 45 f4 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 792  :     IDirectMusicSegmentState8 *pSegSt8 = NULL;

  0012e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pSegSt8$[ebp], 0

; 793  : 
; 794  :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00135	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00138	83 c1 10	 add	 ecx, 16			; 00000010H
  0013b	51		 push	 ecx
  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 795  :     WaveStateData* pStateData = new WaveStateData;

  00142	68 38 04 00 00	 push	 1080			; 00000438H
  00147	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0014c	83 c4 04	 add	 esp, 4
  0014f	89 45 e8	 mov	 DWORD PTR $T71318[ebp], eax
  00152	83 7d e8 00	 cmp	 DWORD PTR $T71318[ebp], 0
  00156	74 0d		 je	 SHORT $L71319
  00158	8b 4d e8	 mov	 ecx, DWORD PTR $T71318[ebp]
  0015b	e8 00 00 00 00	 call	 ??0WaveStateData@@QAE@XZ ; WaveStateData::WaveStateData
  00160	89 45 d4	 mov	 DWORD PTR tv153[ebp], eax
  00163	eb 07		 jmp	 SHORT $L71320
$L71319:
  00165	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$L71320:
  0016c	8b 55 d4	 mov	 edx, DWORD PTR tv153[ebp]
  0016f	89 55 f8	 mov	 DWORD PTR _pStateData$[ebp], edx

; 796  :     if( NULL == pStateData ) 

  00172	83 7d f8 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  00176	75 05		 jne	 SHORT $L69804

; 797  :     {
; 798  :         goto ON_END;

  00178	e9 66 01 00 00	 jmp	 $ON_END$69805
$L69804:

; 799  :     }
; 800  : #ifdef DXAPI
; 801  :     // Get the audiopath being used by our segment state and save it in our state data.
; 802  :     hr = pSegmentState->QueryInterface(IID_IDirectMusicSegmentState8, reinterpret_cast<void**>(&pSegSt8));
; 803  :     if (SUCCEEDED(hr))
; 804  :     {
; 805  :         hr = pSegSt8->GetObjectInPath(
; 806  :                         0,                          // pchannel doesn't apply
; 807  :                         DMUS_PATH_AUDIOPATH,        // get the audiopath
; 808  :                         0,                          // buffer index doesn't apply
; 809  :                         CLSID_NULL,                 // clsid doesn't apply
; 810  :                         0,                          // there should be only one audiopath
; 811  :                         IID_IDirectMusicAudioPath,
; 812  :                         reinterpret_cast<void**>(&pStateData->m_pAudioPath));
; 813  : 
; 814  :         // If this doesn't find an audiopath that's OK.  If we're not playing on an audiopath then
; 815  :         // pAudioPath stays NULL and we'll play our triggered segments on the general performance.
; 816  :         if (hr == DMUS_E_NOT_FOUND)
; 817  :             hr = S_OK;
; 818  :         pSegSt8->Release();
; 819  :     }
; 820  :     pStateData->m_pPerformance = pPerf;
; 821  : #endif
; 822  :     {
; 823  :         *ppStateData = pStateData;

  0017d	8b 45 14	 mov	 eax, DWORD PTR _ppStateData$[ebp]
  00180	8b 4d f8	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  00183	89 08		 mov	 DWORD PTR [eax], ecx

; 824  : #ifdef DXAPI
; 825  :         StatePair SP(pSegmentState, pStateData);
; 826  :         TListItem<StatePair>* pPair = new TListItem<StatePair>(SP);
; 827  :         if (!pPair)
; 828  :         {
; 829  :             goto ON_END;
; 830  :         }
; 831  :         m_StateList.AddHead(pPair);
; 832  : #endif
; 833  :     }
; 834  :     SetUpStateCurrentPointers(pStateData);

  00185	8b 55 f8	 mov	 edx, DWORD PTR _pStateData$[ebp]
  00188	52		 push	 edx
  00189	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0018c	83 e9 08	 sub	 ecx, 8
  0018f	e8 00 00 00 00	 call	 ?SetUpStateCurrentPointers@CWavTrack@@IAEXPAUWaveStateData@@@Z ; CWavTrack::SetUpStateCurrentPointers

; 835  : 
; 836  :     // Set up arrays for variations
; 837  :     if (m_dwPChannelsUsed)

  00194	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00197	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  0019b	0f 84 eb 00 00
	00		 je	 $L69807

; 838  :     {
; 839  :         pStateData->pdwVariations = new DWORD[m_dwPChannelsUsed];

  001a1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001a4	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  001a7	c1 e2 02	 shl	 edx, 2
  001aa	52		 push	 edx
  001ab	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  001b0	83 c4 04	 add	 esp, 4
  001b3	89 45 e4	 mov	 DWORD PTR $T71321[ebp], eax
  001b6	8b 45 f8	 mov	 eax, DWORD PTR _pStateData$[ebp]
  001b9	8b 4d e4	 mov	 ecx, DWORD PTR $T71321[ebp]
  001bc	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 840  :         if (!pStateData->pdwVariations)

  001bf	8b 55 f8	 mov	 edx, DWORD PTR _pStateData$[ebp]
  001c2	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  001c6	75 05		 jne	 SHORT $L69810

; 841  :         {
; 842  :             goto ON_END;

  001c8	e9 16 01 00 00	 jmp	 $ON_END$69805
$L69810:

; 843  :         }
; 844  :         pStateData->pdwRemoveVariations = new DWORD[m_dwPChannelsUsed];

  001cd	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001d0	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  001d3	c1 e1 02	 shl	 ecx, 2
  001d6	51		 push	 ecx
  001d7	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  001dc	83 c4 04	 add	 esp, 4
  001df	89 45 e0	 mov	 DWORD PTR $T71322[ebp], eax
  001e2	8b 55 f8	 mov	 edx, DWORD PTR _pStateData$[ebp]
  001e5	8b 45 e0	 mov	 eax, DWORD PTR $T71322[ebp]
  001e8	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 845  :         if (!pStateData->pdwRemoveVariations)

  001eb	8b 4d f8	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  001ee	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  001f2	75 05		 jne	 SHORT $L69814

; 846  :         {
; 847  :             goto ON_END;

  001f4	e9 ea 00 00 00	 jmp	 $ON_END$69805
$L69814:

; 848  :         }
; 849  :         for (DWORD dw = 0; dw < m_dwPChannelsUsed; dw++)

  001f9	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dw$69816[ebp], 0
  00200	eb 09		 jmp	 SHORT $L69817
$L69818:
  00202	8b 55 ec	 mov	 edx, DWORD PTR _dw$69816[ebp]
  00205	83 c2 01	 add	 edx, 1
  00208	89 55 ec	 mov	 DWORD PTR _dw$69816[ebp], edx
$L69817:
  0020b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0020e	8b 4d ec	 mov	 ecx, DWORD PTR _dw$69816[ebp]
  00211	3b 48 38	 cmp	 ecx, DWORD PTR [eax+56]
  00214	73 76		 jae	 SHORT $L69807

; 850  :         {
; 851  :             if ( (m_dwTrackFlags & DMUS_WAVETRACKF_PERSIST_CONTROL) &&
; 852  :                  m_pdwVariations && 
; 853  :                  m_pdwRemoveVariations )

  00216	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00219	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0021c	83 e0 02	 and	 eax, 2
  0021f	85 c0		 test	 eax, eax
  00221	74 44		 je	 SHORT $L69820
  00223	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00226	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  0022a	74 3b		 je	 SHORT $L69820
  0022c	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0022f	83 7a 54 00	 cmp	 DWORD PTR [edx+84], 0
  00233	74 32		 je	 SHORT $L69820

; 854  :             {
; 855  :                 pStateData->pdwVariations[dw] = m_pdwVariations[dw];

  00235	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00238	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0023b	8b 55 f8	 mov	 edx, DWORD PTR _pStateData$[ebp]
  0023e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00241	8b 55 ec	 mov	 edx, DWORD PTR _dw$69816[ebp]
  00244	8b 75 ec	 mov	 esi, DWORD PTR _dw$69816[ebp]
  00247	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  0024a	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 856  :                 pStateData->pdwRemoveVariations[dw] = m_pdwRemoveVariations[dw];

  0024d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00250	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00253	8b 4d f8	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  00256	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00259	8b 4d ec	 mov	 ecx, DWORD PTR _dw$69816[ebp]
  0025c	8b 75 ec	 mov	 esi, DWORD PTR _dw$69816[ebp]
  0025f	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00262	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 857  :             }
; 858  :             else

  00265	eb 20		 jmp	 SHORT $L69821
$L69820:

; 859  :             {
; 860  :                 pStateData->pdwVariations[dw] = 0;

  00267	8b 4d f8	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  0026a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0026d	8b 45 ec	 mov	 eax, DWORD PTR _dw$69816[ebp]
  00270	c7 04 82 00 00
	00 00		 mov	 DWORD PTR [edx+eax*4], 0

; 861  :                 pStateData->pdwRemoveVariations[dw] = 0;

  00277	8b 4d f8	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  0027a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0027d	8b 45 ec	 mov	 eax, DWORD PTR _dw$69816[ebp]
  00280	c7 04 82 00 00
	00 00		 mov	 DWORD PTR [edx+eax*4], 0
$L69821:

; 862  :             }
; 863  :         }

  00287	e9 76 ff ff ff	 jmp	 $L69818
$L69807:

; 864  :     }
; 865  : 
; 866  :     // need to know the group this track is in, for the mute track GetParam
; 867  :     IDirectMusicSegment* pSegment;
; 868  :     if( SUCCEEDED( pSegmentState->GetSegment(&pSegment)))

  0028c	8d 4d fc	 lea	 ecx, DWORD PTR _pSegment$[ebp]
  0028f	51		 push	 ecx
  00290	8b 55 0c	 mov	 edx, DWORD PTR _pSegmentState$[ebp]
  00293	8b 02		 mov	 eax, DWORD PTR [edx]
  00295	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegmentState$[ebp]
  00298	51		 push	 ecx
  00299	ff 50 18	 call	 DWORD PTR [eax+24]
  0029c	85 c0		 test	 eax, eax
  0029e	7c 3c		 jl	 SHORT $L69824

; 869  :     {
; 870  :         pSegment->GetTrackGroup( this, &pStateData->dwGroupBits );

  002a0	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  002a3	83 ea 08	 sub	 edx, 8
  002a6	85 d2		 test	 edx, edx
  002a8	74 08		 je	 SHORT $L71323
  002aa	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  002ad	89 45 d0	 mov	 DWORD PTR tv227[ebp], eax
  002b0	eb 07		 jmp	 SHORT $L71324
$L71323:
  002b2	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv227[ebp], 0
$L71324:
  002b9	8b 4d f8	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  002bc	83 c1 0c	 add	 ecx, 12			; 0000000cH
  002bf	51		 push	 ecx
  002c0	8b 55 d0	 mov	 edx, DWORD PTR tv227[ebp]
  002c3	52		 push	 edx
  002c4	8b 45 fc	 mov	 eax, DWORD PTR _pSegment$[ebp]
  002c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c9	8b 55 fc	 mov	 edx, DWORD PTR _pSegment$[ebp]
  002cc	52		 push	 edx
  002cd	ff 51 58	 call	 DWORD PTR [ecx+88]

; 871  :         pSegment->Release();

  002d0	8b 45 fc	 mov	 eax, DWORD PTR _pSegment$[ebp]
  002d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d5	8b 55 fc	 mov	 edx, DWORD PTR _pSegment$[ebp]
  002d8	52		 push	 edx
  002d9	ff 51 08	 call	 DWORD PTR [ecx+8]
$L69824:

; 872  :     }
; 873  :     hr = S_OK;

  002dc	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$ON_END$69805:

; 874  : #ifdef DXAPI
; 875  :     // for auditioning variations...
; 876  :     pStateData->InitVariationInfo(m_dwVariation, m_dwPart, m_dwIndex, m_dwLockID, m_fAudition);
; 877  :     BOOL fGlobal; // if the performance has been set with an autodownload preference,
; 878  :                 // use that. otherwise, assume autodownloading is off, unless it has
; 879  :                 // been locked (i.e. specified on the band track.)
; 880  :     if( SUCCEEDED( pPerf->GetGlobalParam( GUID_PerfAutoDownload, &fGlobal, sizeof(BOOL) )))
; 881  :     {
; 882  :         if( !m_fLockAutoDownload )
; 883  :         {
; 884  :             // it might seem like we can just assign m_fAutoDownload = fGlobal, 
; 885  :             // but that's bitten markburt before, so I'm being paranoid today.
; 886  :             if( fGlobal )
; 887  :             {
; 888  :                 m_fAutoDownload = TRUE;
; 889  :             }
; 890  :             else
; 891  :             {
; 892  :                 m_fAutoDownload = FALSE;
; 893  :             }
; 894  :         }
; 895  :     }
; 896  :     else if( !m_fLockAutoDownload )
; 897  :     {
; 898  :         m_fAutoDownload = FALSE;
; 899  :     }
; 900  :     // Call SetParam to download all waves used by the track
; 901  :     // This is the auto-download feature that can be turned off with a call to SetParam
; 902  :     if(m_fAutoDownload)
; 903  :     {
; 904  :         hr = SetParam(GUID_Download, 0, (void *)pPerf);
; 905  :         if (FAILED(hr)) goto ON_END;
; 906  :     }
; 907  : 
; 908  :     ///////////////// pre-allocate voices for all waves in the track ////////////////
; 909  :     pStateData->m_dwVoices = m_dwWaveItems;
; 910  :     pStateData->m_apVoice = new IDirectMusicVoiceP*[m_dwWaveItems];
; 911  :     if (!pStateData->m_apVoice)
; 912  :     {
; 913  :         hr = E_OUTOFMEMORY;
; 914  :     }
; 915  :     else
; 916  :     {
; 917  :         for (DWORD dw = 0; dw < m_dwWaveItems; dw++)
; 918  :         {
; 919  :             pStateData->m_apVoice[dw] = NULL;
; 920  :         }
; 921  :         Seek( pSegmentState, pPerf, dwTrackID, pStateData, 0, TRUE, 0, FALSE );
; 922  :         TListItem<WavePart>* pPart = m_WavePartList.GetHead();
; 923  :         DWORD dwPChannel = 0;
; 924  :         for( DWORD dwIndex = 0; dwIndex < m_dwPChannelsUsed; dwIndex++ )
; 925  :         {
; 926  :             long lPartVolume = 0;
; 927  :             if( pPart )
; 928  :             {
; 929  :                 WavePart& rPart = pPart->GetItemValue();
; 930  :                 dwPChannel = rPart.m_dwPChannel;
; 931  :                 lPartVolume = rPart.m_lVolume;
; 932  :             }
; 933  :             if( pStateData->apCurrentWave )
; 934  :             {
; 935  :                 for( ; pStateData->apCurrentWave[dwIndex]; 
; 936  :                     pStateData->apCurrentWave[dwIndex] = pStateData->apCurrentWave[dwIndex]->GetNext() )
; 937  :                 {
; 938  :                     WaveItem& rItem = pStateData->apCurrentWave[dwIndex]->GetItemValue();
; 939  :                     DWORD dwGroup = 0;
; 940  :                     DWORD dwMChannel = 0;
; 941  :                     IDirectMusicPort* pPort = NULL;
; 942  :                     HRESULT hr = rItem.PChannelInfo(pPerf, pStateData->m_pAudioPath, dwPChannel, &pPort, &dwGroup, &dwMChannel);
; 943  :                     if (SUCCEEDED(hr) && pPort)
; 944  :                     {
; 945  :                         IDirectMusicPortP* pPortP = NULL;
; 946  :                         if (SUCCEEDED(hr = pPort->QueryInterface(IID_IDirectMusicPortP, (void**) &pPortP)))
; 947  :                         {
; 948  :                             EnterCriticalSection(&WaveItem::st_WaveListCritSect);
; 949  :                             TListItem<TaggedWave>* pDLWave = rItem.st_WaveList.GetHead();
; 950  :                             for (; pDLWave; pDLWave = pDLWave->GetNext())
; 951  :                             {
; 952  :                                 TaggedWave& rDLWave = pDLWave->GetItemValue();
; 953  :                                 if (rDLWave.m_pWave == rItem.m_pWave && 
; 954  :                                     rDLWave.m_pPerformance == pPerf &&
; 955  :                                     rDLWave.m_pPort == pPortP &&
; 956  :                                     ( !rItem.m_fIsStreaming ||
; 957  :                                       rDLWave.m_pDownloadedWave == rItem.m_pDownloadedWave ) )
; 958  :                                 {
; 959  :                                     break;
; 960  :                                 }
; 961  :                             }
; 962  :                             if (pDLWave)
; 963  :                             {
; 964  :                                 TaggedWave& rDLWave = pDLWave->GetItemValue();
; 965  :                                 REFERENCE_TIME rtStartOffset = rItem.m_rtStartOffset;
; 966  :                                 if (rItem.m_dwVoiceIndex == 0xffffffff)
; 967  :                                 {
; 968  :                                     hr = DMUS_E_NOT_INIT;
; 969  :                                     TraceI(0, "Voice index not initialized!\n");
; 970  :                                 }
; 971  :                                 else if(!rItem.m_fIsStreaming || (rItem.m_fIsStreaming && rItem.m_fUseNoPreRoll == FALSE))
; 972  :                                 {
; 973  :                                     IDirectMusicVoiceP *pVoice = NULL;
; 974  :                                     hr = GetDownload(
; 975  :                                         rDLWave.m_pDownloadedWave,
; 976  :                                         pStateData,
; 977  :                                         pPortP,
; 978  :                                         rDLWave.m_pWave,
; 979  :                                         rtStartOffset,
; 980  :                                         rItem,
; 981  :                                         dwMChannel, dwGroup,
; 982  :                                         &pVoice);
; 983  :                                 }
; 984  :                             }
; 985  :                             else
; 986  :                             {
; 987  :                                 hr = DMUS_E_NOT_INIT;
; 988  :                                 Trace(1, "Error: Attempt to play wave that has not been downloaded.\n");
; 989  :                                 
; 990  :                             }
; 991  :                             LeaveCriticalSection(&WaveItem::st_WaveListCritSect);
; 992  :                             // Release the private interface
; 993  :                             pPortP->Release();
; 994  :                         }
; 995  :                         pPort->Release();
; 996  :                     }
; 997  :                     else if (SUCCEEDED(hr) && !pPort)
; 998  :                     {
; 999  :                         Trace(1, "Error: the performance was unable to find a port for voice allocation.\n");
; 1000 :                         hr = DMUS_E_NOT_FOUND;
; 1001 :                     }
; 1002 :                 }
; 1003 :             }
; 1004 :             if( pPart )
; 1005 :             {
; 1006 :                 pPart = pPart->GetNext();
; 1007 :             }
; 1008 :         }
; 1009 :     }
; 1010 : #endif
; 1011 : ON_END:
; 1012 :     if (FAILED(hr) && pStateData)

  002e3	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002e7	7d 35		 jge	 SHORT $L69827
  002e9	83 7d f8 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  002ed	74 2f		 je	 SHORT $L69827

; 1013 :     {
; 1014 :         delete pStateData;

  002ef	8b 45 f8	 mov	 eax, DWORD PTR _pStateData$[ebp]
  002f2	89 45 d8	 mov	 DWORD PTR $T71326[ebp], eax
  002f5	8b 4d d8	 mov	 ecx, DWORD PTR $T71326[ebp]
  002f8	89 4d dc	 mov	 DWORD PTR $T71325[ebp], ecx
  002fb	83 7d dc 00	 cmp	 DWORD PTR $T71325[ebp], 0
  002ff	74 0f		 je	 SHORT $L71327
  00301	6a 01		 push	 1
  00303	8b 4d dc	 mov	 ecx, DWORD PTR $T71325[ebp]
  00306	e8 00 00 00 00	 call	 ??_GWaveStateData@@QAEPAXI@Z
  0030b	89 45 cc	 mov	 DWORD PTR tv237[ebp], eax
  0030e	eb 07		 jmp	 SHORT $L71328
$L71327:
  00310	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv237[ebp], 0
$L71328:

; 1015 :         pStateData = NULL;

  00317	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pStateData$[ebp], 0
$L69827:

; 1016 :     }
; 1017 :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  0031e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00321	83 c2 10	 add	 edx, 16			; 00000010H
  00324	52		 push	 edx
  00325	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 1018 :     return hr;

  0032b	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 1019 : }

  0032e	5e		 pop	 esi
  0032f	8b e5		 mov	 esp, ebp
  00331	5d		 pop	 ebp
  00332	c2 18 00	 ret	 24			; 00000018H
?InitPlay@CWavTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ENDP ; CWavTrack::InitPlay
_TEXT	ENDS
PUBLIC	??1WaveStateData@@QAE@XZ			; WaveStateData::~WaveStateData
; Function compile flags: /Odt
;	COMDAT ??_GWaveStateData@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GWaveStateData@@QAEPAXI@Z PROC NEAR			; WaveStateData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1WaveStateData@@QAE@XZ ; WaveStateData::~WaveStateData
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69833
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69833:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GWaveStateData@@QAEPAXI@Z ENDP			; WaveStateData::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0DK@EFNABGPN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0L@MIJOINAD@pStateData?$AA@		; `string'
PUBLIC	??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@ ; `string'
EXTRN	__imp__RtlAssert@16:NEAR
;	COMDAT ??_C@_0DK@EFNABGPN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DK@EFNABGPN@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dmusic\dmime\wavtrack.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIJOINAD@pStateData?$AA@
CONST	SEGMENT
??_C@_0L@MIJOINAD@pStateData?$AA@ DB 'pStateData', 00H	; `string'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?6??EndPlay@CWavTrack@@UAGJPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?6??EndPlay@CWavTrack@@UAGJPAX@Z@4QBDB DB 'IDi'
	DB	'rectMusicTrack::EndPlay', 00H		; `CWavTrack::EndPlay'::`7'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
CONST	SEGMENT
??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@ DB '%s: I'
	DB	'nvalid pointer pStateData', 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?EndPlay@CWavTrack@@UAGJPAX@Z
_TEXT	SEGMENT
tv84 = -16
$T71336 = -12
$T71335 = -8
_pSD$69846 = -4
_this$ = 8
_pStateData$ = 12
?EndPlay@CWavTrack@@UAGJPAX@Z PROC NEAR			; CWavTrack::EndPlay, COMDAT

; 1032 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1033 :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 10	 add	 eax, 16			; 00000010H
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 1034 : 
; 1035 :     ASSERT( pStateData );

  00013	83 7d 0c 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  00017	75 17		 jne	 SHORT $L69838
  00019	6a 00		 push	 0
  0001b	68 0b 04 00 00	 push	 1035			; 0000040bH
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@EFNABGPN@c?3?2xbox?2private?2windows?2directx?2@
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@MIJOINAD@pStateData?$AA@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69838:

; 1036 :     if( pStateData )

  00030	83 7d 0c 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  00034	74 59		 je	 SHORT $L69841

; 1037 :     {
; 1038 :         V_INAME(IDirectMusicTrack::EndPlay);
; 1039 :         V_BUFPTR_WRITE(pStateData, sizeof(WaveStateData));

  00036	68 38 04 00 00	 push	 1080			; 00000438H
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00044	85 c0		 test	 eax, eax
  00046	74 19		 je	 SHORT $L69845
  00048	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?6??EndPlay@CWavTrack@@UAGJPAX@Z@4QBDB
  0004d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
  00052	6a ff		 push	 -1
  00054	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	e8 00 00 00 00	 call	 _DebugBreak@0
$L69845:

; 1040 :         WaveStateData* pSD = (WaveStateData*)pStateData;

  00061	8b 55 0c	 mov	 edx, DWORD PTR _pStateData$[ebp]
  00064	89 55 fc	 mov	 DWORD PTR _pSD$69846[ebp], edx

; 1041 : #ifdef DXAPI
; 1042 :         RemoveDownloads(pSD);
; 1043 :         if(m_fAutoDownload)
; 1044 :         {
; 1045 :             SetParam(GUID_Unload, 0, (void *)pSD->m_pPerformance);
; 1046 :         }
; 1047 :         for (TListItem<StatePair>* pScan = m_StateList.GetHead(); pScan; pScan = pScan->GetNext())
; 1048 :         {
; 1049 :             StatePair& rPair = pScan->GetItemValue();
; 1050 :             if (pSD == rPair.m_pStateData)
; 1051 :             {
; 1052 :                 rPair.m_pSegState = NULL;
; 1053 :                 rPair.m_pStateData = NULL;
; 1054 :                 m_StateList.Remove(pScan);
; 1055 :                 delete pScan;
; 1056 :                 break;
; 1057 :             }
; 1058 :         }
; 1059 : #endif
; 1060 :         delete pSD;

  00067	8b 45 fc	 mov	 eax, DWORD PTR _pSD$69846[ebp]
  0006a	89 45 f4	 mov	 DWORD PTR $T71336[ebp], eax
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR $T71336[ebp]
  00070	89 4d f8	 mov	 DWORD PTR $T71335[ebp], ecx
  00073	83 7d f8 00	 cmp	 DWORD PTR $T71335[ebp], 0
  00077	74 0f		 je	 SHORT $L71337
  00079	6a 01		 push	 1
  0007b	8b 4d f8	 mov	 ecx, DWORD PTR $T71335[ebp]
  0007e	e8 00 00 00 00	 call	 ??_GWaveStateData@@QAEPAXI@Z
  00083	89 45 f0	 mov	 DWORD PTR tv84[ebp], eax
  00086	eb 07		 jmp	 SHORT $L69841
$L71337:
  00088	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L69841:

; 1061 :     }
; 1062 : 
; 1063 :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  0008f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00092	83 c2 10	 add	 edx, 16			; 00000010H
  00095	52		 push	 edx
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 1064 :     return S_OK;

  0009c	33 c0		 xor	 eax, eax

; 1065 : }

  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
?EndPlay@CWavTrack@@UAGJPAX@Z ENDP			; CWavTrack::EndPlay
_TEXT	ENDS
EXTRN	_memset:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetUpStateCurrentPointers@CWavTrack@@IAEXPAUWaveStateData@@@Z
_TEXT	SEGMENT
_this$ = -12
$T71343 = -8
$T71342 = -4
_pStateData$ = 8
?SetUpStateCurrentPointers@CWavTrack@@IAEXPAUWaveStateData@@@Z PROC NEAR ; CWavTrack::SetUpStateCurrentPointers, COMDAT
; _this$ = ecx

; 1068 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1069 :     ASSERT(pStateData);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  0000d	75 17		 jne	 SHORT $L69855
  0000f	6a 00		 push	 0
  00011	68 2d 04 00 00	 push	 1069			; 0000042dH
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@EFNABGPN@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@MIJOINAD@pStateData?$AA@
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69855:

; 1070 :     pStateData->dwPChannelsUsed = m_dwPChannelsUsed;

  00026	8b 45 08	 mov	 eax, DWORD PTR _pStateData$[ebp]
  00029	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0002f	89 10		 mov	 DWORD PTR [eax], edx

; 1071 :     if( m_dwPChannelsUsed )

  00031	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00038	74 6a		 je	 SHORT $L69856

; 1072 :     {
; 1073 :         if( pStateData->apCurrentWave )

  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  0003d	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00041	74 1f		 je	 SHORT $L69857

; 1074 :         {
; 1075 :             delete [] pStateData->apCurrentWave;

  00043	8b 55 08	 mov	 edx, DWORD PTR _pStateData$[ebp]
  00046	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00049	89 45 fc	 mov	 DWORD PTR $T71342[ebp], eax
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR $T71342[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00055	83 c4 04	 add	 esp, 4

; 1076 :             pStateData->apCurrentWave = NULL;

  00058	8b 55 08	 mov	 edx, DWORD PTR _pStateData$[ebp]
  0005b	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L69857:

; 1077 :         }
; 1078 :         pStateData->apCurrentWave = new TListItem<WaveItem>* [m_dwPChannelsUsed];

  00062	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00068	c1 e1 02	 shl	 ecx, 2
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00071	83 c4 04	 add	 esp, 4
  00074	89 45 f8	 mov	 DWORD PTR $T71343[ebp], eax
  00077	8b 55 08	 mov	 edx, DWORD PTR _pStateData$[ebp]
  0007a	8b 45 f8	 mov	 eax, DWORD PTR $T71343[ebp]
  0007d	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1079 :         if( pStateData->apCurrentWave )

  00080	8b 4d 08	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  00083	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00087	74 1b		 je	 SHORT $L69856

; 1080 :         {
; 1081 :             memset( pStateData->apCurrentWave, 0, sizeof(TListItem<WavePart>*) * m_dwPChannelsUsed );

  00089	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0008c	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  0008f	c1 e0 02	 shl	 eax, 2
  00092	50		 push	 eax
  00093	6a 00		 push	 0
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  00098	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 _memset
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L69856:

; 1082 :         }
; 1083 :     }
; 1084 :     pStateData->dwValidate = m_dwValidate;

  000a4	8b 45 08	 mov	 eax, DWORD PTR _pStateData$[ebp]
  000a7	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  000ad	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1085 : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
?SetUpStateCurrentPointers@CWavTrack@@IAEXPAUWaveStateData@@@Z ENDP ; CWavTrack::SetUpStateCurrentPointers
_TEXT	ENDS
PUBLIC	?ConvertOffset@@YG_J_JJ@Z			; ConvertOffset
PUBLIC	__real@4092c00000000000
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
EXTRN	_pow:NEAR
;	COMDAT __real@4092c00000000000
CONST	SEGMENT
__real@4092c00000000000 DQ 04092c00000000000r	; 1200
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?ConvertOffset@@YG_J_JJ@Z
_TEXT	SEGMENT
_dblPitch$69868 = -16
_dblStart$69870 = -8
_rtOffset$ = 8
_lPitch$ = 16
?ConvertOffset@@YG_J_JJ@Z PROC NEAR			; ConvertOffset, COMDAT

; 1088 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1089 :     if (lPitch)

  00006	83 7d 10 00	 cmp	 DWORD PTR _lPitch$[ebp], 0
  0000a	74 3b		 je	 SHORT $L69867

; 1090 :     {
; 1091 :         double dblPitch = (double) lPitch;

  0000c	db 45 10	 fild	 DWORD PTR _lPitch$[ebp]
  0000f	dd 5d f0	 fstp	 QWORD PTR _dblPitch$69868[ebp]

; 1092 :         double dblStart = (double) rtOffset;

  00012	df 6d 08	 fild	 QWORD PTR _rtOffset$[ebp]
  00015	dd 5d f8	 fstp	 QWORD PTR _dblStart$69870[ebp]

; 1093 :         dblStart *= pow(2, (dblPitch / 1200.0));

  00018	dd 45 f0	 fld	 QWORD PTR _dblPitch$69868[ebp]
  0001b	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4092c00000000000
  00021	83 ec 08	 sub	 esp, 8
  00024	dd 1c 24	 fstp	 QWORD PTR [esp]
  00027	68 00 00 00 40	 push	 1073741824		; 40000000H
  0002c	6a 00		 push	 0
  0002e	e8 00 00 00 00	 call	 _pow
  00033	83 c4 10	 add	 esp, 16			; 00000010H
  00036	dc 4d f8	 fmul	 QWORD PTR _dblStart$69870[ebp]
  00039	dd 55 f8	 fst	 QWORD PTR _dblStart$69870[ebp]

; 1094 :         rtOffset = (REFERENCE_TIME) dblStart;

  0003c	e8 00 00 00 00	 call	 __ftol2
  00041	89 45 08	 mov	 DWORD PTR _rtOffset$[ebp], eax
  00044	89 55 0c	 mov	 DWORD PTR _rtOffset$[ebp+4], edx
$L69867:

; 1095 :     }
; 1096 :     return rtOffset;

  00047	8b 45 08	 mov	 eax, DWORD PTR _rtOffset$[ebp]
  0004a	8b 55 0c	 mov	 edx, DWORD PTR _rtOffset$[ebp+4]

; 1097 : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 0c 00	 ret	 12			; 0000000cH
?ConvertOffset@@YG_J_JJ@Z ENDP				; ConvertOffset
_TEXT	ENDS
PUBLIC	??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@ ; `string'
PUBLIC	?Play@CWavTrack@@IAEJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ; CWavTrack::Play
;	COMDAT ?__szValidateInterfaceName@?1??PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::PlayEx', 00H		; `CWavTrack::PlayEx'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
CONST	SEGMENT
??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@ DB '%s: Inval'
	DB	'id pointer pSegSt', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT
_hr$ = -8
_fClock$ = -4
_this$ = 8
_pStateData$ = 12
_rtStart$ = 16
_rtEnd$ = 24
_rtOffset$ = 32
_dwFlags$ = 40
_pPerf$ = 44
_pSegSt$ = 48
_dwVirtualID$ = 52
?PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z PROC NEAR ; CWavTrack::PlayEx, COMDAT

; 1103 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1104 :     V_INAME(IDirectMusicTrack::PlayEx);
; 1105 :     V_BUFPTR_WRITE( pStateData, sizeof(WaveStateData));

  00006	68 38 04 00 00	 push	 1080			; 00000438H
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00014	85 c0		 test	 eax, eax
  00016	74 19		 je	 SHORT $L69887
  00018	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
  00022	6a ff		 push	 -1
  00024	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	e8 00 00 00 00	 call	 _DebugBreak@0
$L69887:

; 1106 :     V_INTERFACE(pPerf);

  00031	6a 04		 push	 4
  00033	8b 4d 2c	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003c	85 c0		 test	 eax, eax
  0003e	74 19		 je	 SHORT $L69889
  00040	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  0004a	6a ff		 push	 -1
  0004c	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH
  00054	e8 00 00 00 00	 call	 _DebugBreak@0
$L69889:
  00059	6a 04		 push	 4
  0005b	8b 55 2c	 mov	 edx, DWORD PTR _pPerf$[ebp]
  0005e	8b 02		 mov	 eax, DWORD PTR [edx]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00066	85 c0		 test	 eax, eax
  00068	74 19		 je	 SHORT $L69892
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  0006f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00074	6a ff		 push	 -1
  00076	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007e	e8 00 00 00 00	 call	 _DebugBreak@0
$L69892:
  00083	8b 4d 2c	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00086	8b 11		 mov	 edx, DWORD PTR [ecx]
  00088	8b 02		 mov	 eax, DWORD PTR [edx]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00090	85 c0		 test	 eax, eax
  00092	74 19		 je	 SHORT $L69894
  00094	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00099	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  0009e	6a ff		 push	 -1
  000a0	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a8	e8 00 00 00 00	 call	 _DebugBreak@0
$L69894:

; 1107 :     V_INTERFACE(pSegSt);

  000ad	6a 04		 push	 4
  000af	8b 4d 30	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b8	85 c0		 test	 eax, eax
  000ba	74 19		 je	 SHORT $L69896
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000c1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000c6	6a ff		 push	 -1
  000c8	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	e8 00 00 00 00	 call	 _DebugBreak@0
$L69896:
  000d5	6a 04		 push	 4
  000d7	8b 55 30	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  000da	8b 02		 mov	 eax, DWORD PTR [edx]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000e2	85 c0		 test	 eax, eax
  000e4	74 19		 je	 SHORT $L69899
  000e6	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000eb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000f0	6a ff		 push	 -1
  000f2	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000f7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fa	e8 00 00 00 00	 call	 _DebugBreak@0
$L69899:
  000ff	8b 4d 30	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  00102	8b 11		 mov	 edx, DWORD PTR [ecx]
  00104	8b 02		 mov	 eax, DWORD PTR [edx]
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0010c	85 c0		 test	 eax, eax
  0010e	74 19		 je	 SHORT $L69901
  00110	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00115	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  0011a	6a ff		 push	 -1
  0011c	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00121	83 c4 0c	 add	 esp, 12			; 0000000cH
  00124	e8 00 00 00 00	 call	 _DebugBreak@0
$L69901:

; 1108 : 
; 1109 :     HRESULT hr;
; 1110 :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00129	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	83 c1 10	 add	 ecx, 16			; 00000010H
  0012f	51		 push	 ecx
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 1111 :     BOOL fClock = (dwFlags & DMUS_TRACKF_CLOCK) ? TRUE : FALSE;

  00136	8b 55 28	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00139	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  0013f	f7 da		 neg	 edx
  00141	1b d2		 sbb	 edx, edx
  00143	f7 da		 neg	 edx
  00145	89 55 fc	 mov	 DWORD PTR _fClock$[ebp], edx

; 1112 : /*    if (dwFlags & DMUS_TRACKF_CLOCK)
; 1113 :     {
; 1114 :         hr = Play(pStateData,(MUSIC_TIME)(rtStart / REF_PER_MIL),(MUSIC_TIME)(rtEnd / REF_PER_MIL),
; 1115 :             (MUSIC_TIME)(rtOffset / REF_PER_MIL),rtOffset,dwFlags,pPerf,pSegSt,dwVirtualID,TRUE);
; 1116 :     }
; 1117 :     else*/
; 1118 :     {
; 1119 :         hr = Play(pStateData, rtStart, rtEnd, rtOffset, dwFlags, pPerf, pSegSt, dwVirtualID, fClock);

  00148	8b 45 fc	 mov	 eax, DWORD PTR _fClock$[ebp]
  0014b	50		 push	 eax
  0014c	8b 4d 34	 mov	 ecx, DWORD PTR _dwVirtualID$[ebp]
  0014f	51		 push	 ecx
  00150	8b 55 30	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  00153	52		 push	 edx
  00154	8b 45 2c	 mov	 eax, DWORD PTR _pPerf$[ebp]
  00157	50		 push	 eax
  00158	8b 4d 28	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0015b	51		 push	 ecx
  0015c	8b 55 24	 mov	 edx, DWORD PTR _rtOffset$[ebp+4]
  0015f	52		 push	 edx
  00160	8b 45 20	 mov	 eax, DWORD PTR _rtOffset$[ebp]
  00163	50		 push	 eax
  00164	8b 4d 1c	 mov	 ecx, DWORD PTR _rtEnd$[ebp+4]
  00167	51		 push	 ecx
  00168	8b 55 18	 mov	 edx, DWORD PTR _rtEnd$[ebp]
  0016b	52		 push	 edx
  0016c	8b 45 14	 mov	 eax, DWORD PTR _rtStart$[ebp+4]
  0016f	50		 push	 eax
  00170	8b 4d 10	 mov	 ecx, DWORD PTR _rtStart$[ebp]
  00173	51		 push	 ecx
  00174	8b 55 0c	 mov	 edx, DWORD PTR _pStateData$[ebp]
  00177	52		 push	 edx
  00178	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0017b	83 e9 08	 sub	 ecx, 8
  0017e	e8 00 00 00 00	 call	 ?Play@CWavTrack@@IAEJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ; CWavTrack::Play
  00183	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 1120 :     }
; 1121 :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  00186	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00189	83 c0 10	 add	 eax, 16			; 00000010H
  0018c	50		 push	 eax
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 1122 :     return hr;

  00193	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1123 : }

  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 30 00	 ret	 48			; 00000030H
?PlayEx@CWavTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ENDP ; CWavTrack::PlayEx
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::Play', 00H		; `CWavTrack::Play'::`2'::__szValidateInterfaceName
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT
_hr$ = -4
_this$ = 8
_pStateData$ = 12
_mtStart$ = 16
_mtEnd$ = 20
_mtOffset$ = 24
_dwFlags$ = 28
_pPerf$ = 32
_pSegSt$ = 36
_dwVirtualID$ = 40
?Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z PROC NEAR ; CWavTrack::Play, COMDAT

; 1162 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1163 :     V_INAME(IDirectMusicTrack::Play);
; 1164 :     V_BUFPTR_WRITE( pStateData, sizeof(WaveStateData));

  00004	68 38 04 00 00	 push	 1080			; 00000438H
  00009	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00012	85 c0		 test	 eax, eax
  00014	74 19		 je	 SHORT $L69918
  00016	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
  00020	6a ff		 push	 -1
  00022	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002a	e8 00 00 00 00	 call	 _DebugBreak@0
$L69918:

; 1165 :     V_INTERFACE(pPerf);

  0002f	6a 04		 push	 4
  00031	8b 4d 20	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003a	85 c0		 test	 eax, eax
  0003c	74 19		 je	 SHORT $L69920
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00048	6a ff		 push	 -1
  0004a	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00052	e8 00 00 00 00	 call	 _DebugBreak@0
$L69920:
  00057	6a 04		 push	 4
  00059	8b 55 20	 mov	 edx, DWORD PTR _pPerf$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00064	85 c0		 test	 eax, eax
  00066	74 19		 je	 SHORT $L69923
  00068	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00072	6a ff		 push	 -1
  00074	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	e8 00 00 00 00	 call	 _DebugBreak@0
$L69923:
  00081	8b 4d 20	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00084	8b 11		 mov	 edx, DWORD PTR [ecx]
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0008e	85 c0		 test	 eax, eax
  00090	74 19		 je	 SHORT $L69925
  00092	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  0009c	6a ff		 push	 -1
  0009e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	e8 00 00 00 00	 call	 _DebugBreak@0
$L69925:

; 1166 :     V_INTERFACE(pSegSt);

  000ab	6a 04		 push	 4
  000ad	8b 4d 24	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b6	85 c0		 test	 eax, eax
  000b8	74 19		 je	 SHORT $L69927
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000c4	6a ff		 push	 -1
  000c6	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ce	e8 00 00 00 00	 call	 _DebugBreak@0
$L69927:
  000d3	6a 04		 push	 4
  000d5	8b 55 24	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  000d8	8b 02		 mov	 eax, DWORD PTR [edx]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000e0	85 c0		 test	 eax, eax
  000e2	74 19		 je	 SHORT $L69930
  000e4	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000ee	6a ff		 push	 -1
  000f0	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f8	e8 00 00 00 00	 call	 _DebugBreak@0
$L69930:
  000fd	8b 4d 24	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  00100	8b 11		 mov	 edx, DWORD PTR [ecx]
  00102	8b 02		 mov	 eax, DWORD PTR [edx]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0010a	85 c0		 test	 eax, eax
  0010c	74 19		 je	 SHORT $L69932
  0010e	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00113	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  00118	6a ff		 push	 -1
  0011a	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00122	e8 00 00 00 00	 call	 _DebugBreak@0
$L69932:

; 1167 : 
; 1168 :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00127	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0012a	83 c1 10	 add	 ecx, 16			; 00000010H
  0012d	51		 push	 ecx
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 1169 :     HRESULT hr = Play(pStateData, mtStart, mtEnd, mtOffset, dwFlags, pPerf, pSegSt, dwVirtualID, FALSE);

  00134	6a 00		 push	 0
  00136	8b 55 28	 mov	 edx, DWORD PTR _dwVirtualID$[ebp]
  00139	52		 push	 edx
  0013a	8b 45 24	 mov	 eax, DWORD PTR _pSegSt$[ebp]
  0013d	50		 push	 eax
  0013e	8b 4d 20	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00141	51		 push	 ecx
  00142	8b 55 1c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00145	52		 push	 edx
  00146	8b 45 18	 mov	 eax, DWORD PTR _mtOffset$[ebp]
  00149	99		 cdq
  0014a	52		 push	 edx
  0014b	50		 push	 eax
  0014c	8b 45 14	 mov	 eax, DWORD PTR _mtEnd$[ebp]
  0014f	99		 cdq
  00150	52		 push	 edx
  00151	50		 push	 eax
  00152	8b 45 10	 mov	 eax, DWORD PTR _mtStart$[ebp]
  00155	99		 cdq
  00156	52		 push	 edx
  00157	50		 push	 eax
  00158	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  0015b	50		 push	 eax
  0015c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0015f	83 e9 08	 sub	 ecx, 8
  00162	e8 00 00 00 00	 call	 ?Play@CWavTrack@@IAEJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ; CWavTrack::Play
  00167	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 1170 :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  0016a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0016d	83 c1 10	 add	 ecx, 16			; 00000010H
  00170	51		 push	 ecx
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 1171 :     return hr;

  00177	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 1172 : }

  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 24 00	 ret	 36			; 00000024H
?Play@CWavTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ENDP ; CWavTrack::Play
_TEXT	ENDS
PUBLIC	?Variations@WaveStateData@@QAEKAAUWavePart@@H@Z	; WaveStateData::Variations
PUBLIC	?Seek@CWavTrack@@IAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@KPAUWaveStateData@@_JH3H@Z ; CWavTrack::Seek
PUBLIC	?SyncVariations@CWavTrack@@IAEJPAUIDirectMusicPerformance@@PAUWaveStateData@@_J2H@Z ; CWavTrack::SyncVariations
PUBLIC	?ComputeVariations@CWavTrack@@IAEJPAUWaveStateData@@@Z ; CWavTrack::ComputeVariations
PUBLIC	?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ	; TListItem<WaveItem>::GetNext
PUBLIC	?GetItemValue@?$TListItem@UWaveItem@@@@QAEAAUWaveItem@@XZ ; TListItem<WaveItem>::GetItemValue
EXTRN	?Reset@CPChMap@@QAEXXZ:NEAR			; CPChMap::Reset
EXTRN	?GetInfo@CPChMap@@QAEXKJJKPAUIDirectMusicPerformance@@PAHPAKH@Z:NEAR ; CPChMap::GetInfo
EXTRN	_IID_CPerformance:BYTE
EXTRN	?FlushVirtualTrack@CPerformance@@QAEJKJK@Z:NEAR	; CPerformance::FlushVirtualTrack
EXTRN	_IID_IDirectMusicGraph:BYTE
EXTRN	__alldiv:NEAR
EXTRN	__allmul:NEAR
EXTRN	?dm_rand@@YAHXZ:NEAR				; dm_rand
; Function compile flags: /Odt
;	COMDAT ?Play@CWavTrack@@IAEJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z
_TEXT	SEGMENT
tv923 = -276
tv920 = -268
tv221 = -260
tv623 = -252
tv615 = -248
tv608 = -244
_this$ = -240
_lRand$70057 = -236
_lRand$70055 = -232
_WaveFormat$70050 = -228
_rtRefPlayPlus$70026 = -208
_rtRealDuration$70034 = -200
_rtRefStartPlus$70025 = -192
_mtNewDuration$70027 = -180
_rtPlay$70017 = -176
_mtRealPlay$70021 = -164
_rtZero$70041 = -160
_mtPlay$70018 = -148
_rtPlayOffset$70015 = -144
_rtPlay$70013 = -136
_rtDuration$70006 = -128
_rtDurationMs$70004 = -120
_pWave$70007 = -108
_rtStartOffset$70005 = -104
_mtPerfTime$70000 = -92
_dwItemVariations$69992 = -88
_rItem$69993 = -84
_rtTime$69994 = -80
_mtTime$69997 = -72
_mtOffset$69998 = -68
_rPart$69987 = -64
_lPartVolume$69985 = -60
_mtPerfStart$69955 = -56
_pCPerf$69959 = -52
_rtPerfStart$69954 = -48
_pSD$ = -36
_pGraph$ = -32
_hr$ = -28
_dwIndex$ = -24
_pPart$ = -20
_dwMutePChannel$ = -16
_fMute$ = -12
_fSeek$ = -8
_dwPChannel$ = -4
_pStateData$ = 8
_rtStart$ = 12
_rtEnd$ = 20
_rtOffset$ = 28
_dwFlags$ = 36
_pPerf$ = 40
_pSegSt$ = 44
_dwVirtualID$ = 48
_fClockTime$ = 52
?Play@CWavTrack@@IAEJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z PROC NEAR ; CWavTrack::Play, COMDAT
; _this$ = ecx

; 1194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	89 8d 10 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 1195 :     if (dwFlags & DMUS_TRACKF_PLAY_OFF)

  00011	8b 45 24	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00014	83 e0 40	 and	 eax, 64			; 00000040H
  00017	85 c0		 test	 eax, eax
  00019	74 07		 je	 SHORT $L69946

; 1196 :     {
; 1197 :         return S_OK;

  0001b	33 c0		 xor	 eax, eax
  0001d	e9 9d 0b 00 00	 jmp	 $L69945
$L69946:

; 1198 :     }
; 1199 :     HRESULT hr = S_OK;

  00022	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1200 :     IDirectMusicGraph* pGraph = NULL;

  00029	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _pGraph$[ebp], 0

; 1201 :     WaveStateData* pSD = (WaveStateData*)pStateData;

  00030	8b 4d 08	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  00033	89 4d dc	 mov	 DWORD PTR _pSD$[ebp], ecx

; 1202 :     if ( dwFlags & DMUS_TRACKF_LOOP )

  00036	8b 55 24	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00039	83 e2 02	 and	 edx, 2
  0003c	85 d2		 test	 edx, edx
  0003e	0f 84 86 00 00
	00		 je	 $L69953

; 1203 :     {
; 1204 :         REFERENCE_TIME rtPerfStart = rtStart + rtOffset;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _rtStart$[ebp]
  00047	03 45 1c	 add	 eax, DWORD PTR _rtOffset$[ebp]
  0004a	8b 4d 10	 mov	 ecx, DWORD PTR _rtStart$[ebp+4]
  0004d	13 4d 20	 adc	 ecx, DWORD PTR _rtOffset$[ebp+4]
  00050	89 45 d0	 mov	 DWORD PTR _rtPerfStart$69954[ebp], eax
  00053	89 4d d4	 mov	 DWORD PTR _rtPerfStart$69954[ebp+4], ecx

; 1205 :         MUSIC_TIME mtPerfStart = 0;

  00056	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _mtPerfStart$69955[ebp], 0

; 1206 :         if (fClockTime)

  0005d	83 7d 34 00	 cmp	 DWORD PTR _fClockTime$[ebp], 0
  00061	74 1a		 je	 SHORT $L69956

; 1207 :         {
; 1208 :             pPerf->ReferenceToMusicTime(rtPerfStart, &mtPerfStart);

  00063	8d 55 c8	 lea	 edx, DWORD PTR _mtPerfStart$69955[ebp]
  00066	52		 push	 edx
  00067	8b 45 d4	 mov	 eax, DWORD PTR _rtPerfStart$69954[ebp+4]
  0006a	50		 push	 eax
  0006b	8b 4d d0	 mov	 ecx, DWORD PTR _rtPerfStart$69954[ebp]
  0006e	51		 push	 ecx
  0006f	8b 55 28	 mov	 edx, DWORD PTR _pPerf$[ebp]
  00072	8b 02		 mov	 eax, DWORD PTR [edx]
  00074	8b 4d 28	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00077	51		 push	 ecx
  00078	ff 50 18	 call	 DWORD PTR [eax+24]

; 1209 :         }
; 1210 :         else

  0007b	eb 06		 jmp	 SHORT $L69957
$L69956:

; 1211 :         {
; 1212 :             mtPerfStart = (MUSIC_TIME)rtPerfStart;

  0007d	8b 55 d0	 mov	 edx, DWORD PTR _rtPerfStart$69954[ebp]
  00080	89 55 c8	 mov	 DWORD PTR _mtPerfStart$69955[ebp], edx
$L69957:

; 1213 :         }
; 1214 :         CPerformance* pCPerf = NULL;

  00083	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _pCPerf$69959[ebp], 0

; 1215 :         if (SUCCEEDED(pPerf->QueryInterface(IID_CPerformance, (void**)&pCPerf)))

  0008a	8d 45 cc	 lea	 eax, DWORD PTR _pCPerf$69959[ebp]
  0008d	50		 push	 eax
  0008e	68 00 00 00 00	 push	 OFFSET FLAT:_IID_CPerformance
  00093	8b 4d 28	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00096	8b 11		 mov	 edx, DWORD PTR [ecx]
  00098	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  0009b	50		 push	 eax
  0009c	ff 12		 call	 DWORD PTR [edx]
  0009e	85 c0		 test	 eax, eax
  000a0	7c 1e		 jl	 SHORT $L69962

; 1216 :         {
; 1217 :             pCPerf->FlushVirtualTrack(dwVirtualID, mtPerfStart, FLUSH_ON_REPEAT);

  000a2	6a 02		 push	 2
  000a4	8b 4d c8	 mov	 ecx, DWORD PTR _mtPerfStart$69955[ebp]
  000a7	51		 push	 ecx
  000a8	8b 55 30	 mov	 edx, DWORD PTR _dwVirtualID$[ebp]
  000ab	52		 push	 edx
  000ac	8b 4d cc	 mov	 ecx, DWORD PTR _pCPerf$69959[ebp]
  000af	e8 00 00 00 00	 call	 ?FlushVirtualTrack@CPerformance@@QAEJKJK@Z ; CPerformance::FlushVirtualTrack

; 1218 :             pCPerf->Release();

  000b4	8b 45 cc	 mov	 eax, DWORD PTR _pCPerf$69959[ebp]
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	8b 55 cc	 mov	 edx, DWORD PTR _pCPerf$69959[ebp]
  000bc	52		 push	 edx
  000bd	ff 51 08	 call	 DWORD PTR [ecx+8]
$L69962:

; 1219 :         }
; 1220 :         pSD->m_fLoop = true;

  000c0	8b 45 dc	 mov	 eax, DWORD PTR _pSD$[ebp]
  000c3	c6 80 34 04 00
	00 01		 mov	 BYTE PTR [eax+1076], 1
$L69953:

; 1221 :     }
; 1222 :     BOOL fSeek = (dwFlags & DMUS_TRACKF_SEEK) ? TRUE : FALSE;

  000ca	8b 4d 24	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000cd	83 e1 01	 and	 ecx, 1
  000d0	f7 d9		 neg	 ecx
  000d2	1b c9		 sbb	 ecx, ecx
  000d4	f7 d9		 neg	 ecx
  000d6	89 4d f8	 mov	 DWORD PTR _fSeek$[ebp], ecx

; 1223 :     if ( dwFlags & (DMUS_TRACKF_START | DMUS_TRACKF_LOOP) )

  000d9	8b 55 24	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  000dc	83 e2 06	 and	 edx, 6
  000df	85 d2		 test	 edx, edx
  000e1	74 17		 je	 SHORT $L69964

; 1224 :     {
; 1225 :         pSD->rtNextVariation = 0;

  000e3	8b 45 dc	 mov	 eax, DWORD PTR _pSD$[ebp]
  000e6	c7 80 18 04 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1048], 0
  000f0	c7 80 1c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1052], 0
$L69964:

; 1226 :     }
; 1227 : 
; 1228 :     // if we're sync'ing variations to the pattern track, get the current variations
; 1229 :     if ( (m_dwTrackFlags & DMUS_WAVETRACKF_SYNC_VAR) && 
; 1230 :          (!pSD->rtNextVariation || (rtStart <= pSD->rtNextVariation && rtEnd > pSD->rtNextVariation)) )

  000fa	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00100	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00103	83 e2 01	 and	 edx, 1
  00106	85 d2		 test	 edx, edx
  00108	0f 84 ab 00 00
	00		 je	 $L69965
  0010e	8b 45 dc	 mov	 eax, DWORD PTR _pSD$[ebp]
  00111	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv608[ebp], eax
  00117	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR tv608[ebp]
  0011d	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR tv608[ebp]
  00123	8b 81 18 04 00
	00		 mov	 eax, DWORD PTR [ecx+1048]
  00129	0b 82 1c 04 00
	00		 or	 eax, DWORD PTR [edx+1052]
  0012f	85 c0		 test	 eax, eax
  00131	74 5a		 je	 SHORT $L69966
  00133	8b 4d dc	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00136	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv615[ebp], ecx
  0013c	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR tv615[ebp]
  00142	8b 45 10	 mov	 eax, DWORD PTR _rtStart$[ebp+4]
  00145	3b 82 1c 04 00
	00		 cmp	 eax, DWORD PTR [edx+1052]
  0014b	7f 6c		 jg	 SHORT $L69965
  0014d	7c 11		 jl	 SHORT $L71362
  0014f	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv615[ebp]
  00155	8b 55 0c	 mov	 edx, DWORD PTR _rtStart$[ebp]
  00158	3b 91 18 04 00
	00		 cmp	 edx, DWORD PTR [ecx+1048]
  0015e	77 59		 ja	 SHORT $L69965
$L71362:
  00160	8b 45 dc	 mov	 eax, DWORD PTR _pSD$[ebp]
  00163	89 85 04 ff ff
	ff		 mov	 DWORD PTR tv623[ebp], eax
  00169	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR tv623[ebp]
  0016f	8b 55 18	 mov	 edx, DWORD PTR _rtEnd$[ebp+4]
  00172	3b 91 1c 04 00
	00		 cmp	 edx, DWORD PTR [ecx+1052]
  00178	7c 3f		 jl	 SHORT $L69965
  0017a	7f 11		 jg	 SHORT $L69966
  0017c	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv623[ebp]
  00182	8b 4d 14	 mov	 ecx, DWORD PTR _rtEnd$[ebp]
  00185	3b 88 18 04 00
	00		 cmp	 ecx, DWORD PTR [eax+1048]
  0018b	76 2c		 jbe	 SHORT $L69965
$L69966:

; 1231 :     {
; 1232 :         hr = SyncVariations(pPerf, pSD, rtStart, rtOffset, fClockTime);

  0018d	8b 55 34	 mov	 edx, DWORD PTR _fClockTime$[ebp]
  00190	52		 push	 edx
  00191	8b 45 20	 mov	 eax, DWORD PTR _rtOffset$[ebp+4]
  00194	50		 push	 eax
  00195	8b 4d 1c	 mov	 ecx, DWORD PTR _rtOffset$[ebp]
  00198	51		 push	 ecx
  00199	8b 55 10	 mov	 edx, DWORD PTR _rtStart$[ebp+4]
  0019c	52		 push	 edx
  0019d	8b 45 0c	 mov	 eax, DWORD PTR _rtStart$[ebp]
  001a0	50		 push	 eax
  001a1	8b 4d dc	 mov	 ecx, DWORD PTR _pSD$[ebp]
  001a4	51		 push	 ecx
  001a5	8b 55 28	 mov	 edx, DWORD PTR _pPerf$[ebp]
  001a8	52		 push	 edx
  001a9	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  001af	e8 00 00 00 00	 call	 ?SyncVariations@CWavTrack@@IAEJPAUIDirectMusicPerformance@@PAUWaveStateData@@_J2H@Z ; CWavTrack::SyncVariations
  001b4	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 1233 :     }
; 1234 :     else if (dwFlags & (DMUS_TRACKF_START | DMUS_TRACKF_LOOP))

  001b7	eb 1c		 jmp	 SHORT $L69967
$L69965:
  001b9	8b 45 24	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  001bc	83 e0 06	 and	 eax, 6
  001bf	85 c0		 test	 eax, eax
  001c1	74 12		 je	 SHORT $L69967

; 1235 :     {
; 1236 :         hr = ComputeVariations(pSD);

  001c3	8b 4d dc	 mov	 ecx, DWORD PTR _pSD$[ebp]
  001c6	51		 push	 ecx
  001c7	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  001cd	e8 00 00 00 00	 call	 ?ComputeVariations@CWavTrack@@IAEJPAUWaveStateData@@@Z ; CWavTrack::ComputeVariations
  001d2	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax
$L69967:

; 1237 :     }
; 1238 : 
; 1239 :     if( dwFlags & (DMUS_TRACKF_SEEK | DMUS_TRACKF_FLUSH | DMUS_TRACKF_DIRTY |
; 1240 :         DMUS_TRACKF_LOOP) )

  001d5	8b 55 24	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  001d8	83 e2 1b	 and	 edx, 27			; 0000001bH
  001db	85 d2		 test	 edx, edx
  001dd	74 0e		 je	 SHORT $L69969

; 1241 :     {
; 1242 :         // need to reset the PChannel Map in case of any of these flags.
; 1243 :         m_PChMap.Reset();

  001df	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  001e5	83 c1 54	 add	 ecx, 84			; 00000054H
  001e8	e8 00 00 00 00	 call	 ?Reset@CPChMap@@QAEXXZ	; CPChMap::Reset
$L69969:

; 1244 :     }
; 1245 :     if( pSD->dwValidate != m_dwValidate )

  001ed	8b 45 dc	 mov	 eax, DWORD PTR _pSD$[ebp]
  001f0	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  001f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001f9	3b 51 50	 cmp	 edx, DWORD PTR [ecx+80]
  001fc	74 16		 je	 SHORT $L69970

; 1246 :     {
; 1247 : #ifdef DXAPI
; 1248 :         if (pSD->m_apVoice)
; 1249 :         {
; 1250 :             for (DWORD dw = 0; dw < pSD->m_dwVoices; dw++)
; 1251 : 			{
; 1252 : 				if (pSD->m_apVoice[dw])
; 1253 : 				{
; 1254 : 					pSD->m_apVoice[dw]->Release();
; 1255 : 				}
; 1256 :             }
; 1257 :             delete [] pSD->m_apVoice;
; 1258 :         }
; 1259 :         pSD->m_apVoice = new IDirectMusicVoiceP*[m_dwWaveItems];
; 1260 :         if (!pSD->m_apVoice)
; 1261 :         {
; 1262 :             return E_OUTOFMEMORY;
; 1263 :         }
; 1264 :         else
; 1265 :         {
; 1266 :             for (DWORD dw = 0; dw < m_dwWaveItems; dw++)
; 1267 :             {
; 1268 :                 pSD->m_apVoice[dw] = NULL;
; 1269 :             }
; 1270 :         }
; 1271 :         pSD->m_dwVoices = m_dwWaveItems;
; 1272 : #endif
; 1273 :         SetUpStateCurrentPointers(pSD);

  001fe	8b 45 dc	 mov	 eax, DWORD PTR _pSD$[ebp]
  00201	50		 push	 eax
  00202	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00208	e8 00 00 00 00	 call	 ?SetUpStateCurrentPointers@CWavTrack@@IAEXPAUWaveStateData@@@Z ; CWavTrack::SetUpStateCurrentPointers

; 1274 :         fSeek = TRUE;

  0020d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _fSeek$[ebp], 1
$L69970:

; 1275 :     }
; 1276 : 
; 1277 :     if( fSeek )

  00214	83 7d f8 00	 cmp	 DWORD PTR _fSeek$[ebp], 0
  00218	74 70		 je	 SHORT $L69971

; 1278 :     {
; 1279 :         if( dwFlags & (DMUS_TRACKF_START | DMUS_TRACKF_LOOP) )

  0021a	8b 4d 24	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0021d	83 e1 06	 and	 ecx, 6
  00220	85 c9		 test	 ecx, ecx
  00222	74 34		 je	 SHORT $L69972

; 1280 :         {
; 1281 :             Seek( pSegSt, pPerf, dwVirtualID, pSD, rtStart, TRUE, rtOffset, fClockTime );

  00224	8b 55 34	 mov	 edx, DWORD PTR _fClockTime$[ebp]
  00227	52		 push	 edx
  00228	8b 45 20	 mov	 eax, DWORD PTR _rtOffset$[ebp+4]
  0022b	50		 push	 eax
  0022c	8b 4d 1c	 mov	 ecx, DWORD PTR _rtOffset$[ebp]
  0022f	51		 push	 ecx
  00230	6a 01		 push	 1
  00232	8b 55 10	 mov	 edx, DWORD PTR _rtStart$[ebp+4]
  00235	52		 push	 edx
  00236	8b 45 0c	 mov	 eax, DWORD PTR _rtStart$[ebp]
  00239	50		 push	 eax
  0023a	8b 4d dc	 mov	 ecx, DWORD PTR _pSD$[ebp]
  0023d	51		 push	 ecx
  0023e	8b 55 30	 mov	 edx, DWORD PTR _dwVirtualID$[ebp]
  00241	52		 push	 edx
  00242	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  00245	50		 push	 eax
  00246	8b 4d 2c	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  00249	51		 push	 ecx
  0024a	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00250	52		 push	 edx
  00251	e8 00 00 00 00	 call	 ?Seek@CWavTrack@@IAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@KPAUWaveStateData@@_JH3H@Z ; CWavTrack::Seek

; 1282 :         }
; 1283 :         else

  00256	eb 32		 jmp	 SHORT $L69971
$L69972:

; 1284 :         {
; 1285 :             Seek( pSegSt, pPerf, dwVirtualID, pSD, rtStart, FALSE, rtOffset, fClockTime );

  00258	8b 45 34	 mov	 eax, DWORD PTR _fClockTime$[ebp]
  0025b	50		 push	 eax
  0025c	8b 4d 20	 mov	 ecx, DWORD PTR _rtOffset$[ebp+4]
  0025f	51		 push	 ecx
  00260	8b 55 1c	 mov	 edx, DWORD PTR _rtOffset$[ebp]
  00263	52		 push	 edx
  00264	6a 00		 push	 0
  00266	8b 45 10	 mov	 eax, DWORD PTR _rtStart$[ebp+4]
  00269	50		 push	 eax
  0026a	8b 4d 0c	 mov	 ecx, DWORD PTR _rtStart$[ebp]
  0026d	51		 push	 ecx
  0026e	8b 55 dc	 mov	 edx, DWORD PTR _pSD$[ebp]
  00271	52		 push	 edx
  00272	8b 45 30	 mov	 eax, DWORD PTR _dwVirtualID$[ebp]
  00275	50		 push	 eax
  00276	8b 4d 28	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00279	51		 push	 ecx
  0027a	8b 55 2c	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  0027d	52		 push	 edx
  0027e	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00284	50		 push	 eax
  00285	e8 00 00 00 00	 call	 ?Seek@CWavTrack@@IAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@KPAUWaveStateData@@_JH3H@Z ; CWavTrack::Seek
$L69971:

; 1286 :         }
; 1287 :     }
; 1288 : 
; 1289 :     if( FAILED( pSegSt->QueryInterface( IID_IDirectMusicGraph,
; 1290 :         (void**)&pGraph )))

  0028a	8d 4d e0	 lea	 ecx, DWORD PTR _pGraph$[ebp]
  0028d	51		 push	 ecx
  0028e	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicGraph
  00293	8b 55 2c	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  00296	8b 02		 mov	 eax, DWORD PTR [edx]
  00298	8b 4d 2c	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  0029b	51		 push	 ecx
  0029c	ff 10		 call	 DWORD PTR [eax]
  0029e	85 c0		 test	 eax, eax
  002a0	7d 07		 jge	 SHORT $L69976

; 1291 :     {
; 1292 :         pGraph = NULL;

  002a2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _pGraph$[ebp], 0
$L69976:

; 1293 :     }
; 1294 : 
; 1295 :     DWORD dwIndex;
; 1296 :     DWORD dwPChannel;
; 1297 :     DWORD dwMutePChannel;
; 1298 :     BOOL fMute;
; 1299 : 
; 1300 :     TListItem<WavePart>* pPart = m_WavePartList.GetHead();

  002a9	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  002af	83 c1 48	 add	 ecx, 72			; 00000048H
  002b2	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
  002b7	89 45 ec	 mov	 DWORD PTR _pPart$[ebp], eax

; 1301 :     for( dwIndex = 0; dwIndex < m_dwPChannelsUsed; dwIndex++ )

  002ba	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dwIndex$[ebp], 0
  002c1	eb 09		 jmp	 SHORT $L69982
$L69983:
  002c3	8b 55 e8	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  002c6	83 c2 01	 add	 edx, 1
  002c9	89 55 e8	 mov	 DWORD PTR _dwIndex$[ebp], edx
$L69982:
  002cc	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  002d2	8b 4d e8	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
  002d5	3b 48 40	 cmp	 ecx, DWORD PTR [eax+64]
  002d8	0f 83 cc 08 00
	00		 jae	 $L69984

; 1302 :     {
; 1303 :         long lPartVolume = 0;

  002de	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _lPartVolume$69985[ebp], 0

; 1304 :         if( pPart )

  002e5	83 7d ec 00	 cmp	 DWORD PTR _pPart$[ebp], 0
  002e9	74 1c		 je	 SHORT $L69986

; 1305 :         {
; 1306 :             WavePart& rPart = pPart->GetItemValue();

  002eb	8b 4d ec	 mov	 ecx, DWORD PTR _pPart$[ebp]
  002ee	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  002f3	89 45 c0	 mov	 DWORD PTR _rPart$69987[ebp], eax

; 1307 :             dwPChannel = rPart.m_dwPChannel;

  002f6	8b 55 c0	 mov	 edx, DWORD PTR _rPart$69987[ebp]
  002f9	8b 02		 mov	 eax, DWORD PTR [edx]
  002fb	89 45 fc	 mov	 DWORD PTR _dwPChannel$[ebp], eax

; 1308 :             lPartVolume = rPart.m_lVolume;

  002fe	8b 4d c0	 mov	 ecx, DWORD PTR _rPart$69987[ebp]
  00301	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00304	89 55 c4	 mov	 DWORD PTR _lPartVolume$69985[ebp], edx
$L69986:

; 1309 :         }
; 1310 :         if( pSD->apCurrentWave )

  00307	8b 45 dc	 mov	 eax, DWORD PTR _pSD$[ebp]
  0030a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0030e	0f 84 80 08 00
	00		 je	 $L69988

; 1311 :         {
; 1312 :             for( ; pSD->apCurrentWave[dwIndex]; 

  00314	eb 1d		 jmp	 SHORT $L69989
$L69990:

; 1313 :                 pSD->apCurrentWave[dwIndex] = pSD->apCurrentWave[dwIndex]->GetNext() )

  00316	8b 4d dc	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00319	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0031c	8b 45 e8	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  0031f	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00322	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ ; TListItem<WaveItem>::GetNext
  00327	8b 4d dc	 mov	 ecx, DWORD PTR _pSD$[ebp]
  0032a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0032d	8b 4d e8	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
  00330	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
$L69989:
  00333	8b 55 dc	 mov	 edx, DWORD PTR _pSD$[ebp]
  00336	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00339	8b 4d e8	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
  0033c	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  00340	0f 84 4e 08 00
	00		 je	 $L69988

; 1314 :             {
; 1315 :                 DWORD dwItemVariations = 0;

  00346	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _dwItemVariations$69992[ebp], 0

; 1316 :                 WaveItem& rItem = pSD->apCurrentWave[dwIndex]->GetItemValue();

  0034d	8b 55 dc	 mov	 edx, DWORD PTR _pSD$[ebp]
  00350	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00353	8b 4d e8	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
  00356	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00359	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWaveItem@@@@QAEAAUWaveItem@@XZ ; TListItem<WaveItem>::GetItemValue
  0035e	89 45 ac	 mov	 DWORD PTR _rItem$69993[ebp], eax

; 1317 :                 REFERENCE_TIME rtTime = fClockTime ? rItem.m_rtTimePhysical : rItem.m_mtTimeLogical;

  00361	83 7d 34 00	 cmp	 DWORD PTR _fClockTime$[ebp], 0
  00365	74 16		 je	 SHORT $L71360
  00367	8b 55 ac	 mov	 edx, DWORD PTR _rItem$69993[ebp]
  0036a	8b 02		 mov	 eax, DWORD PTR [edx]
  0036c	89 85 fc fe ff
	ff		 mov	 DWORD PTR tv221[ebp], eax
  00372	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00375	89 8d 00 ff ff
	ff		 mov	 DWORD PTR tv221[ebp+4], ecx
  0037b	eb 13		 jmp	 SHORT $L71361
$L71360:
  0037d	8b 55 ac	 mov	 edx, DWORD PTR _rItem$69993[ebp]
  00380	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00383	99		 cdq
  00384	89 85 fc fe ff
	ff		 mov	 DWORD PTR tv221[ebp], eax
  0038a	89 95 00 ff ff
	ff		 mov	 DWORD PTR tv221[ebp+4], edx
$L71361:
  00390	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR tv221[ebp]
  00396	89 45 b0	 mov	 DWORD PTR _rtTime$69994[ebp], eax
  00399	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR tv221[ebp+4]
  0039f	89 4d b4	 mov	 DWORD PTR _rtTime$69994[ebp+4], ecx

; 1318 :                 if( rtTime >= rtEnd )

  003a2	8b 55 b4	 mov	 edx, DWORD PTR _rtTime$69994[ebp+4]
  003a5	3b 55 18	 cmp	 edx, DWORD PTR _rtEnd$[ebp+4]
  003a8	7c 0f		 jl	 SHORT $L69995
  003aa	7f 08		 jg	 SHORT $L71364
  003ac	8b 45 b0	 mov	 eax, DWORD PTR _rtTime$69994[ebp]
  003af	3b 45 14	 cmp	 eax, DWORD PTR _rtEnd$[ebp]
  003b2	72 05		 jb	 SHORT $L69995
$L71364:

; 1319 :                 {
; 1320 :                     break;

  003b4	e9 db 07 00 00	 jmp	 $L69988
$L69995:

; 1321 :                 }
; 1322 :                 if (pPart)

  003b9	83 7d ec 00	 cmp	 DWORD PTR _pPart$[ebp], 0
  003bd	74 1e		 je	 SHORT $L69996

; 1323 :                 {
; 1324 :                     dwItemVariations = pSD->Variations(pPart->GetItemValue(), dwIndex) & rItem.m_dwVariations;

  003bf	8b 4d e8	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
  003c2	51		 push	 ecx
  003c3	8b 4d ec	 mov	 ecx, DWORD PTR _pPart$[ebp]
  003c6	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  003cb	50		 push	 eax
  003cc	8b 4d dc	 mov	 ecx, DWORD PTR _pSD$[ebp]
  003cf	e8 00 00 00 00	 call	 ?Variations@WaveStateData@@QAEKAAUWavePart@@H@Z ; WaveStateData::Variations
  003d4	8b 55 ac	 mov	 edx, DWORD PTR _rItem$69993[ebp]
  003d7	23 42 10	 and	 eax, DWORD PTR [edx+16]
  003da	89 45 a8	 mov	 DWORD PTR _dwItemVariations$69992[ebp], eax
$L69996:

; 1325 :                 }
; 1326 :                 MUSIC_TIME mtTime = 0;

  003dd	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _mtTime$69997[ebp], 0

; 1327 :                 MUSIC_TIME mtOffset = 0;

  003e4	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _mtOffset$69998[ebp], 0

; 1328 :                 if (fClockTime)

  003eb	83 7d 34 00	 cmp	 DWORD PTR _fClockTime$[ebp], 0
  003ef	74 4a		 je	 SHORT $L69999

; 1329 :                 {
; 1330 :                     MUSIC_TIME mtPerfTime = 0;

  003f1	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _mtPerfTime$70000[ebp], 0

; 1331 :                     pPerf->ReferenceToMusicTime(rtOffset, &mtOffset);

  003f8	8d 45 bc	 lea	 eax, DWORD PTR _mtOffset$69998[ebp]
  003fb	50		 push	 eax
  003fc	8b 4d 20	 mov	 ecx, DWORD PTR _rtOffset$[ebp+4]
  003ff	51		 push	 ecx
  00400	8b 55 1c	 mov	 edx, DWORD PTR _rtOffset$[ebp]
  00403	52		 push	 edx
  00404	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  00407	8b 08		 mov	 ecx, DWORD PTR [eax]
  00409	8b 55 28	 mov	 edx, DWORD PTR _pPerf$[ebp]
  0040c	52		 push	 edx
  0040d	ff 51 18	 call	 DWORD PTR [ecx+24]

; 1332 :                     pPerf->ReferenceToMusicTime(rItem.m_rtTimePhysical + rtOffset, &mtPerfTime);

  00410	8d 45 a4	 lea	 eax, DWORD PTR _mtPerfTime$70000[ebp]
  00413	50		 push	 eax
  00414	8b 4d ac	 mov	 ecx, DWORD PTR _rItem$69993[ebp]
  00417	8b 11		 mov	 edx, DWORD PTR [ecx]
  00419	03 55 1c	 add	 edx, DWORD PTR _rtOffset$[ebp]
  0041c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0041f	13 45 20	 adc	 eax, DWORD PTR _rtOffset$[ebp+4]
  00422	50		 push	 eax
  00423	52		 push	 edx
  00424	8b 4d 28	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00427	8b 11		 mov	 edx, DWORD PTR [ecx]
  00429	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  0042c	50		 push	 eax
  0042d	ff 52 18	 call	 DWORD PTR [edx+24]

; 1333 :                     mtTime = mtPerfTime - mtOffset;

  00430	8b 4d a4	 mov	 ecx, DWORD PTR _mtPerfTime$70000[ebp]
  00433	2b 4d bc	 sub	 ecx, DWORD PTR _mtOffset$69998[ebp]
  00436	89 4d b8	 mov	 DWORD PTR _mtTime$69997[ebp], ecx

; 1334 :                 }
; 1335 :                 else

  00439	eb 0f		 jmp	 SHORT $L70001
$L69999:

; 1336 :                 {
; 1337 :                     mtTime = rItem.m_mtTimeLogical;

  0043b	8b 55 ac	 mov	 edx, DWORD PTR _rItem$69993[ebp]
  0043e	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00441	89 45 b8	 mov	 DWORD PTR _mtTime$69997[ebp], eax

; 1338 :                     mtOffset = (MUSIC_TIME)rtOffset;

  00444	8b 4d 1c	 mov	 ecx, DWORD PTR _rtOffset$[ebp]
  00447	89 4d bc	 mov	 DWORD PTR _mtOffset$69998[ebp], ecx
$L70001:

; 1339 :                 }
; 1340 :                 m_PChMap.GetInfo( dwPChannel, mtTime, mtOffset, pSD->dwGroupBits,
; 1341 :                     pPerf, &fMute, &dwMutePChannel, FALSE );

  0044a	6a 00		 push	 0
  0044c	8d 55 f0	 lea	 edx, DWORD PTR _dwMutePChannel$[ebp]
  0044f	52		 push	 edx
  00450	8d 45 f4	 lea	 eax, DWORD PTR _fMute$[ebp]
  00453	50		 push	 eax
  00454	8b 4d 28	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00457	51		 push	 ecx
  00458	8b 55 dc	 mov	 edx, DWORD PTR _pSD$[ebp]
  0045b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0045e	50		 push	 eax
  0045f	8b 4d bc	 mov	 ecx, DWORD PTR _mtOffset$69998[ebp]
  00462	51		 push	 ecx
  00463	8b 55 b8	 mov	 edx, DWORD PTR _mtTime$69997[ebp]
  00466	52		 push	 edx
  00467	8b 45 fc	 mov	 eax, DWORD PTR _dwPChannel$[ebp]
  0046a	50		 push	 eax
  0046b	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00471	83 c1 54	 add	 ecx, 84			; 00000054H
  00474	e8 00 00 00 00	 call	 ?GetInfo@CPChMap@@QAEXKJJKPAUIDirectMusicPerformance@@PAHPAKH@Z ; CPChMap::GetInfo

; 1342 : #ifdef DXAPI
; 1343 :                 if( !fMute && dwItemVariations )
; 1344 :                 {
; 1345 :                     DWORD dwGroup = 0;
; 1346 :                     DWORD dwMChannel = 0;
; 1347 :                     IDirectMusicPort* pPort = NULL;
; 1348 :                     HRESULT hr = rItem.PChannelInfo(pPerf, pSD->m_pAudioPath, dwMutePChannel, &pPort, &dwGroup, &dwMChannel);
; 1349 :                     if (SUCCEEDED(hr) && pPort)
; 1350 :                     {
; 1351 :                         IDirectMusicPortP* pPortP = NULL;
; 1352 :                         if (SUCCEEDED(hr = pPort->QueryInterface(IID_IDirectMusicPortP, (void**) &pPortP)))
; 1353 :                         {
; 1354 :                             EnterCriticalSection(&WaveItem::st_WaveListCritSect);
; 1355 :                             TListItem<TaggedWave>* pDLWave = rItem.st_WaveList.GetHead();
; 1356 :                             for (; pDLWave; pDLWave = pDLWave->GetNext())
; 1357 :                             {
; 1358 :                                 TaggedWave& rDLWave = pDLWave->GetItemValue();
; 1359 :                                 if (rDLWave.m_pWave == rItem.m_pWave && 
; 1360 :                                     rDLWave.m_pPerformance == pPerf &&
; 1361 :                                     rDLWave.m_pPort == pPortP &&
; 1362 :                                     ( !rItem.m_fIsStreaming ||
; 1363 :                                       rDLWave.m_pDownloadedWave == rItem.m_pDownloadedWave ) )
; 1364 :                                 {
; 1365 :                                     break;
; 1366 :                                 }
; 1367 :                             }
; 1368 :                             if (pDLWave)
; 1369 :                             {
; 1370 :                                 REFERENCE_TIME rtDurationMs = 0;
; 1371 :                                 REFERENCE_TIME rtStartOffset = rItem.m_rtStartOffset;
; 1372 :                                 REFERENCE_TIME rtDuration = rItem.m_rtDuration;
; 1373 :                                 DMUS_WAVE_PMSG* pWave;
; 1374 :                                 if( SUCCEEDED( pPerf->AllocPMsg( sizeof(DMUS_WAVE_PMSG),
; 1375 :                                     (DMUS_PMSG**)&pWave )))
; 1376 :                                 {
; 1377 :                                     pWave->dwType = DMUS_PMSGT_WAVE;
; 1378 :                                     pWave->dwPChannel = dwMutePChannel;
; 1379 :                                     pWave->dwVirtualTrackID = dwVirtualID;
; 1380 :                                     pWave->dwGroupID = pSD->dwGroupBits;
; 1381 :                                     if (fClockTime)
; 1382 :                                     {
; 1383 :                                         REFERENCE_TIME rtPlay = rItem.m_rtTimePhysical;
; 1384 :                                         rtDuration -= ConvertOffset(rtStartOffset, -rItem.m_lPitch);
; 1385 :                                         if (rtPlay < rtStart)
; 1386 :                                         {
; 1387 :                                             REFERENCE_TIME rtPlayOffset = ConvertOffset(rtStart - rtPlay, rItem.m_lPitch);
; 1388 :                                             rtStartOffset += rtPlayOffset;
; 1389 :                                             rtDuration -= (rtStart - rtPlay);
; 1390 :                                             rtPlay = rtStart;
; 1391 :                                         }
; 1392 :                                         pWave->rtTime = rtPlay + rtOffset;
; 1393 :                                         pWave->dwFlags = DMUS_PMSGF_REFTIME | DMUS_PMSGF_LOCKTOREFTIME;
; 1394 :                                         pWave->lOffset = 0;
; 1395 :                                         rtDurationMs = rtDuration / REF_PER_MIL;
; 1396 :                                     }
; 1397 :                                     else
; 1398 :                                     {
; 1399 :                                         REFERENCE_TIME rtPlay = 0;
; 1400 :                                         MUSIC_TIME mtPlay = (MUSIC_TIME)rItem.m_rtTimePhysical;
; 1401 :                                         pPerf->MusicToReferenceTime(mtPlay + (MUSIC_TIME)rtOffset, &rtPlay);
; 1402 :                                         MUSIC_TIME mtRealPlay = 0;
; 1403 :                                         pPerf->ReferenceToMusicTime(rtPlay + rtStartOffset, &mtRealPlay);
; 1404 :                                         if (mtRealPlay > rtOffset + mtPlay)
; 1405 :                                         {
; 1406 :                                             rtDuration -= ConvertOffset(mtRealPlay - (rtOffset + mtPlay), -rItem.m_lPitch);
; 1407 : 
; 1408 :                                         }
; 1409 :                                         if (mtPlay < (MUSIC_TIME) rtStart)
; 1410 :                                         {
; 1411 :                                             // Calculate distance from wave start to segment start, but begin
; 1412 :                                             // the calculation at segment start to avoid strangeness
; 1413 :                                             // when attempting to do conversions at times earlier than
; 1414 :                                             // segment start.
; 1415 :                                             REFERENCE_TIME rtRefStartPlus = 0;
; 1416 :                                             REFERENCE_TIME rtRefPlayPlus = 0;
; 1417 :                                             MUSIC_TIME mtNewDuration = 0;
; 1418 :                                             pPerf->MusicToReferenceTime((MUSIC_TIME)rtStart + (MUSIC_TIME)rtStart + (MUSIC_TIME)rtOffset, &rtRefStartPlus);
; 1419 :                                             pPerf->MusicToReferenceTime((MUSIC_TIME)rtStart + mtPlay + (MUSIC_TIME)rtOffset, &rtRefPlayPlus);
; 1420 :                                             rtStartOffset += ConvertOffset((rtRefStartPlus - rtRefPlayPlus), rItem.m_lPitch);
; 1421 :                                             mtPlay = (MUSIC_TIME) rtStart;
; 1422 :                                             REFERENCE_TIME rtRealDuration = 0;
; 1423 :                                             pPerf->MusicToReferenceTime((MUSIC_TIME)rtStart + (MUSIC_TIME)rItem.m_rtDuration + (MUSIC_TIME)rtOffset, &rtRealDuration);
; 1424 :                                             pPerf->ReferenceToMusicTime(rtRealDuration - (ConvertOffset(rItem.m_rtStartOffset, -rItem.m_lPitch) + (rtRefStartPlus - rtRefPlayPlus)), &mtNewDuration);
; 1425 :                                             rtDuration = (REFERENCE_TIME)mtNewDuration - (rtStart + rtOffset);
; 1426 :                                         }
; 1427 :                                         pWave->mtTime = mtPlay + (MUSIC_TIME)rtOffset;
; 1428 :                                         pWave->dwFlags = DMUS_PMSGF_MUSICTIME;
; 1429 :                                         pWave->lOffset = (MUSIC_TIME)rItem.m_rtTimePhysical - rItem.m_mtTimeLogical;
; 1430 :                                         REFERENCE_TIME rtZero = 0;
; 1431 :                                         pPerf->MusicToReferenceTime((MUSIC_TIME)rtOffset + mtPlay, &rtZero);
; 1432 :                                         pPerf->MusicToReferenceTime((MUSIC_TIME)(rtDuration + rtOffset) + mtPlay, &rtDurationMs);
; 1433 :                                         rtDurationMs -= rtZero;
; 1434 :                                         rtDurationMs /= REF_PER_MIL;
; 1435 :                                     }
; 1436 :                                     // If we're either past the end of the wave, or we're within
; 1437 :                                     // 150 ms of the end of a looping wave (and we've just started
; 1438 :                                     // playback), or if this is a loop start and the wave should not 
; 1439 :                                     // play on loop, don't play the wave.
; 1440 :                                     if ( rtDurationMs <= 0 ||
; 1441 :                                          (rItem.m_dwLoopEnd && (dwFlags & DMUS_TRACKF_START) && rtDurationMs < 150) ||
; 1442 :                                          (rItem.m_dwFlags & DMUS_WAVEF_IGNORELOOPS) && (dwFlags & DMUS_TRACKF_LOOP))
; 1443 :                                     {
; 1444 :                                         pPerf->FreePMsg((DMUS_PMSG*)pWave);
; 1445 :                                     }
; 1446 :                                     else
; 1447 :                                     {
; 1448 :                                         pWave->rtStartOffset = rtStartOffset;
; 1449 :                                         pWave->rtDuration = rtDuration; 
; 1450 :                                         pWave->lVolume = rItem.m_lVolume + lPartVolume + m_lVolume;
; 1451 :                                         pWave->lPitch = rItem.m_lPitch;
; 1452 :                                         pWave->bFlags = (BYTE)(rItem.m_dwFlags & 0xff);
; 1453 :                                         IDirectMusicVoiceP *pVoice = NULL;
; 1454 :                                         if (rItem.m_dwVoiceIndex == 0xffffffff)
; 1455 :                                         {
; 1456 :                                             hr = DMUS_E_NOT_INIT;
; 1457 :                                             TraceI(0, "Voice index not initialized!\n");
; 1458 :                                         }
; 1459 :                                         else
; 1460 :                                         {
; 1461 :                                             if ( pSD->m_fLoop ||
; 1462 :                                                  !pSD->m_apVoice[rItem.m_dwVoiceIndex] || 
; 1463 :                                                  rtStartOffset != rItem.m_rtStartOffset ||
; 1464 :                                                  dwMutePChannel != dwPChannel)
; 1465 :                                             {
; 1466 :                                                 hr = GetDownload(
; 1467 :                                                     pDLWave->GetItemValue().m_pDownloadedWave,
; 1468 :                                                     pSD,
; 1469 :                                                     pPortP,
; 1470 :                                                     pDLWave->GetItemValue().m_pWave,
; 1471 :                                                     pWave->rtStartOffset,
; 1472 :                                                     rItem,
; 1473 :                                                     dwMChannel, dwGroup,
; 1474 :                                                     &pVoice);
; 1475 :                                             }
; 1476 :                                             else
; 1477 :                                             {
; 1478 :                                                 pVoice = pSD->m_apVoice[rItem.m_dwVoiceIndex];
; 1479 :                                             }
; 1480 :                                         }
; 1481 :                                         if (SUCCEEDED(hr))
; 1482 :                                         {
; 1483 :                                             pWave->punkUser = (IUnknown*)pVoice;
; 1484 :                                             pVoice->AddRef();
; 1485 :                                             if( pGraph )
; 1486 :                                             {
; 1487 :                                                 pGraph->StampPMsg( (DMUS_PMSG*)pWave );
; 1488 :                                             }
; 1489 :                                             hr = pPerf->SendPMsg( (DMUS_PMSG*)pWave );
; 1490 :                                         }
; 1491 :                                         if(FAILED(hr))
; 1492 :                                         {
; 1493 :                                             pPerf->FreePMsg((DMUS_PMSG*)pWave);
; 1494 :                                         }
; 1495 :                                     }
; 1496 :                                 }
; 1497 :                             }
; 1498 :                             LeaveCriticalSection(&WaveItem::st_WaveListCritSect);
; 1499 :                             pPortP->Release();
; 1500 :                         }
; 1501 :                         pPort->Release();
; 1502 :                     }
; 1503 :                     else if (SUCCEEDED(hr) && !pPort)
; 1504 :                     {
; 1505 :                         Trace(1, "Error: the performance was unable to find a port for voice allocation.\n");
; 1506 :                         hr = DMUS_E_NOT_FOUND;
; 1507 :                     }
; 1508 :                 }
; 1509 : #else
; 1510 :                 if( !fMute && dwItemVariations )

  00479	83 7d f4 00	 cmp	 DWORD PTR _fMute$[ebp], 0
  0047d	0f 85 0c 07 00
	00		 jne	 $L70003
  00483	83 7d a8 00	 cmp	 DWORD PTR _dwItemVariations$69992[ebp], 0
  00487	0f 84 02 07 00
	00		 je	 $L70003

; 1511 :                 {
; 1512 :                     REFERENCE_TIME rtDurationMs = 0;

  0048d	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _rtDurationMs$70004[ebp], 0
  00494	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _rtDurationMs$70004[ebp+4], 0

; 1513 :                     REFERENCE_TIME rtStartOffset = rItem.m_rtStartOffset;

  0049b	8b 4d ac	 mov	 ecx, DWORD PTR _rItem$69993[ebp]
  0049e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  004a1	89 55 98	 mov	 DWORD PTR _rtStartOffset$70005[ebp], edx
  004a4	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  004a7	89 45 9c	 mov	 DWORD PTR _rtStartOffset$70005[ebp+4], eax

; 1514 :                     REFERENCE_TIME rtDuration = rItem.m_rtDuration;

  004aa	8b 4d ac	 mov	 ecx, DWORD PTR _rItem$69993[ebp]
  004ad	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  004b0	89 55 80	 mov	 DWORD PTR _rtDuration$70006[ebp], edx
  004b3	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  004b6	89 45 84	 mov	 DWORD PTR _rtDuration$70006[ebp+4], eax

; 1515 :                     DMUS_WAVE_PMSG* pWave;
; 1516 :                     if( SUCCEEDED( pPerf->AllocPMsg( sizeof(DMUS_WAVE_PMSG),
; 1517 :                         (DMUS_PMSG**)&pWave )))

  004b9	8d 4d 94	 lea	 ecx, DWORD PTR _pWave$70007[ebp]
  004bc	51		 push	 ecx
  004bd	6a 60		 push	 96			; 00000060H
  004bf	8b 55 28	 mov	 edx, DWORD PTR _pPerf$[ebp]
  004c2	8b 02		 mov	 eax, DWORD PTR [edx]
  004c4	8b 4d 28	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  004c7	51		 push	 ecx
  004c8	ff 50 24	 call	 DWORD PTR [eax+36]
  004cb	85 c0		 test	 eax, eax
  004cd	0f 8c bc 06 00
	00		 jl	 $L70003

; 1518 :                     {
; 1519 :                         pWave->dwType = DMUS_PMSGT_WAVE;

  004d3	8b 55 94	 mov	 edx, DWORD PTR _pWave$70007[ebp]
  004d6	c7 42 28 0c 00
	00 00		 mov	 DWORD PTR [edx+40], 12	; 0000000cH

; 1520 :                         pWave->dwPChannel = dwMutePChannel;

  004dd	8b 45 94	 mov	 eax, DWORD PTR _pWave$70007[ebp]
  004e0	8b 4d f0	 mov	 ecx, DWORD PTR _dwMutePChannel$[ebp]
  004e3	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1521 :                         pWave->dwVirtualTrackID = dwVirtualID;

  004e6	8b 55 94	 mov	 edx, DWORD PTR _pWave$70007[ebp]
  004e9	8b 45 30	 mov	 eax, DWORD PTR _dwVirtualID$[ebp]
  004ec	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 1522 :                         pWave->dwGroupID = pSD->dwGroupBits;

  004ef	8b 4d 94	 mov	 ecx, DWORD PTR _pWave$70007[ebp]
  004f2	8b 55 dc	 mov	 edx, DWORD PTR _pSD$[ebp]
  004f5	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  004f8	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 1523 :                         if (fClockTime)

  004fb	83 7d 34 00	 cmp	 DWORD PTR _fClockTime$[ebp], 0
  004ff	0f 84 1c 01 00
	00		 je	 $L70012

; 1524 :                         {
; 1525 :                             REFERENCE_TIME rtPlay = rItem.m_rtTimePhysical;

  00505	8b 4d ac	 mov	 ecx, DWORD PTR _rItem$69993[ebp]
  00508	8b 11		 mov	 edx, DWORD PTR [ecx]
  0050a	89 95 78 ff ff
	ff		 mov	 DWORD PTR _rtPlay$70013[ebp], edx
  00510	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00513	89 85 7c ff ff
	ff		 mov	 DWORD PTR _rtPlay$70013[ebp+4], eax

; 1526 :                             rtDuration -= ConvertOffset(rtStartOffset, -rItem.m_lPitch);

  00519	8b 4d ac	 mov	 ecx, DWORD PTR _rItem$69993[ebp]
  0051c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0051f	f7 da		 neg	 edx
  00521	52		 push	 edx
  00522	8b 45 9c	 mov	 eax, DWORD PTR _rtStartOffset$70005[ebp+4]
  00525	50		 push	 eax
  00526	8b 4d 98	 mov	 ecx, DWORD PTR _rtStartOffset$70005[ebp]
  00529	51		 push	 ecx
  0052a	e8 00 00 00 00	 call	 ?ConvertOffset@@YG_J_JJ@Z ; ConvertOffset
  0052f	8b 4d 80	 mov	 ecx, DWORD PTR _rtDuration$70006[ebp]
  00532	2b c8		 sub	 ecx, eax
  00534	8b 45 84	 mov	 eax, DWORD PTR _rtDuration$70006[ebp+4]
  00537	1b c2		 sbb	 eax, edx
  00539	89 4d 80	 mov	 DWORD PTR _rtDuration$70006[ebp], ecx
  0053c	89 45 84	 mov	 DWORD PTR _rtDuration$70006[ebp+4], eax

; 1527 :                             if (rtPlay < rtStart)

  0053f	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _rtPlay$70013[ebp+4]
  00545	3b 4d 10	 cmp	 ecx, DWORD PTR _rtStart$[ebp+4]
  00548	0f 8f 85 00 00
	00		 jg	 $L70014
  0054e	7c 0b		 jl	 SHORT $L71365
  00550	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _rtPlay$70013[ebp]
  00556	3b 55 0c	 cmp	 edx, DWORD PTR _rtStart$[ebp]
  00559	73 78		 jae	 SHORT $L70014
$L71365:

; 1528 :                             {
; 1529 :                                 REFERENCE_TIME rtPlayOffset = ConvertOffset(rtStart - rtPlay, rItem.m_lPitch);

  0055b	8b 45 ac	 mov	 eax, DWORD PTR _rItem$69993[ebp]
  0055e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00561	51		 push	 ecx
  00562	8b 55 0c	 mov	 edx, DWORD PTR _rtStart$[ebp]
  00565	2b 95 78 ff ff
	ff		 sub	 edx, DWORD PTR _rtPlay$70013[ebp]
  0056b	8b 45 10	 mov	 eax, DWORD PTR _rtStart$[ebp+4]
  0056e	1b 85 7c ff ff
	ff		 sbb	 eax, DWORD PTR _rtPlay$70013[ebp+4]
  00574	50		 push	 eax
  00575	52		 push	 edx
  00576	e8 00 00 00 00	 call	 ?ConvertOffset@@YG_J_JJ@Z ; ConvertOffset
  0057b	89 85 70 ff ff
	ff		 mov	 DWORD PTR _rtPlayOffset$70015[ebp], eax
  00581	89 95 74 ff ff
	ff		 mov	 DWORD PTR _rtPlayOffset$70015[ebp+4], edx

; 1530 :                                 rtStartOffset += rtPlayOffset;

  00587	8b 4d 98	 mov	 ecx, DWORD PTR _rtStartOffset$70005[ebp]
  0058a	03 8d 70 ff ff
	ff		 add	 ecx, DWORD PTR _rtPlayOffset$70015[ebp]
  00590	8b 55 9c	 mov	 edx, DWORD PTR _rtStartOffset$70005[ebp+4]
  00593	13 95 74 ff ff
	ff		 adc	 edx, DWORD PTR _rtPlayOffset$70015[ebp+4]
  00599	89 4d 98	 mov	 DWORD PTR _rtStartOffset$70005[ebp], ecx
  0059c	89 55 9c	 mov	 DWORD PTR _rtStartOffset$70005[ebp+4], edx

; 1531 :                                 rtDuration -= (rtStart - rtPlay);

  0059f	8b 45 0c	 mov	 eax, DWORD PTR _rtStart$[ebp]
  005a2	2b 85 78 ff ff
	ff		 sub	 eax, DWORD PTR _rtPlay$70013[ebp]
  005a8	8b 4d 10	 mov	 ecx, DWORD PTR _rtStart$[ebp+4]
  005ab	1b 8d 7c ff ff
	ff		 sbb	 ecx, DWORD PTR _rtPlay$70013[ebp+4]
  005b1	8b 55 80	 mov	 edx, DWORD PTR _rtDuration$70006[ebp]
  005b4	2b d0		 sub	 edx, eax
  005b6	8b 45 84	 mov	 eax, DWORD PTR _rtDuration$70006[ebp+4]
  005b9	1b c1		 sbb	 eax, ecx
  005bb	89 55 80	 mov	 DWORD PTR _rtDuration$70006[ebp], edx
  005be	89 45 84	 mov	 DWORD PTR _rtDuration$70006[ebp+4], eax

; 1532 :                                 rtPlay = rtStart;

  005c1	8b 4d 0c	 mov	 ecx, DWORD PTR _rtStart$[ebp]
  005c4	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _rtPlay$70013[ebp], ecx
  005ca	8b 55 10	 mov	 edx, DWORD PTR _rtStart$[ebp+4]
  005cd	89 95 7c ff ff
	ff		 mov	 DWORD PTR _rtPlay$70013[ebp+4], edx
$L70014:

; 1533 :                             }
; 1534 :                             pWave->rtTime = rtPlay + rtOffset;

  005d3	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _rtPlay$70013[ebp]
  005d9	03 45 1c	 add	 eax, DWORD PTR _rtOffset$[ebp]
  005dc	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _rtPlay$70013[ebp+4]
  005e2	13 4d 20	 adc	 ecx, DWORD PTR _rtOffset$[ebp+4]
  005e5	8b 55 94	 mov	 edx, DWORD PTR _pWave$70007[ebp]
  005e8	89 42 08	 mov	 DWORD PTR [edx+8], eax
  005eb	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1535 :                             pWave->dwFlags = DMUS_PMSGF_REFTIME | DMUS_PMSGF_LOCKTOREFTIME;

  005ee	8b 45 94	 mov	 eax, DWORD PTR _pWave$70007[ebp]
  005f1	c7 40 14 41 00
	00 00		 mov	 DWORD PTR [eax+20], 65	; 00000041H

; 1536 :                             pWave->lOffset = 0;

  005f8	8b 4d 94	 mov	 ecx, DWORD PTR _pWave$70007[ebp]
  005fb	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0

; 1537 :                             rtDurationMs = rtDuration / REF_PER_MIL;

  00602	6a 00		 push	 0
  00604	68 10 27 00 00	 push	 10000			; 00002710H
  00609	8b 55 84	 mov	 edx, DWORD PTR _rtDuration$70006[ebp+4]
  0060c	52		 push	 edx
  0060d	8b 45 80	 mov	 eax, DWORD PTR _rtDuration$70006[ebp]
  00610	50		 push	 eax
  00611	e8 00 00 00 00	 call	 __alldiv
  00616	89 45 88	 mov	 DWORD PTR _rtDurationMs$70004[ebp], eax
  00619	89 55 8c	 mov	 DWORD PTR _rtDurationMs$70004[ebp+4], edx

; 1538 :                         }
; 1539 :                         else

  0061c	e9 25 03 00 00	 jmp	 $L70016
$L70012:

; 1540 :                         {
; 1541 :                             REFERENCE_TIME rtPlay = 0;

  00621	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rtPlay$70017[ebp], 0
  0062b	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rtPlay$70017[ebp+4], 0

; 1542 :                             MUSIC_TIME mtPlay = (MUSIC_TIME)rItem.m_rtTimePhysical;

  00635	8b 4d ac	 mov	 ecx, DWORD PTR _rItem$69993[ebp]
  00638	8b 11		 mov	 edx, DWORD PTR [ecx]
  0063a	89 95 6c ff ff
	ff		 mov	 DWORD PTR _mtPlay$70018[ebp], edx

; 1543 :                             pPerf->MusicToReferenceTime(mtPlay + (MUSIC_TIME)rtOffset, &rtPlay);

  00640	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _rtPlay$70017[ebp]
  00646	50		 push	 eax
  00647	8b 4d 1c	 mov	 ecx, DWORD PTR _rtOffset$[ebp]
  0064a	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _mtPlay$70018[ebp]
  00650	03 d1		 add	 edx, ecx
  00652	52		 push	 edx
  00653	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  00656	8b 08		 mov	 ecx, DWORD PTR [eax]
  00658	8b 55 28	 mov	 edx, DWORD PTR _pPerf$[ebp]
  0065b	52		 push	 edx
  0065c	ff 51 14	 call	 DWORD PTR [ecx+20]

; 1544 :                             MUSIC_TIME mtRealPlay = 0;

  0065f	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _mtRealPlay$70021[ebp], 0

; 1545 :                             pPerf->ReferenceToMusicTime(rtPlay + rtStartOffset, &mtRealPlay);

  00669	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _mtRealPlay$70021[ebp]
  0066f	50		 push	 eax
  00670	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _rtPlay$70017[ebp]
  00676	03 4d 98	 add	 ecx, DWORD PTR _rtStartOffset$70005[ebp]
  00679	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _rtPlay$70017[ebp+4]
  0067f	13 55 9c	 adc	 edx, DWORD PTR _rtStartOffset$70005[ebp+4]
  00682	52		 push	 edx
  00683	51		 push	 ecx
  00684	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  00687	8b 08		 mov	 ecx, DWORD PTR [eax]
  00689	8b 55 28	 mov	 edx, DWORD PTR _pPerf$[ebp]
  0068c	52		 push	 edx
  0068d	ff 51 18	 call	 DWORD PTR [ecx+24]

; 1546 :                             if (mtRealPlay > rtOffset + mtPlay)

  00690	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _mtRealPlay$70021[ebp]
  00696	99		 cdq
  00697	8b c8		 mov	 ecx, eax
  00699	8b f2		 mov	 esi, edx
  0069b	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _mtPlay$70018[ebp]
  006a1	99		 cdq
  006a2	8b 7d 1c	 mov	 edi, DWORD PTR _rtOffset$[ebp]
  006a5	03 f8		 add	 edi, eax
  006a7	8b 45 20	 mov	 eax, DWORD PTR _rtOffset$[ebp+4]
  006aa	13 c2		 adc	 eax, edx
  006ac	89 8d f4 fe ff
	ff		 mov	 DWORD PTR tv920[ebp], ecx
  006b2	89 b5 f8 fe ff
	ff		 mov	 DWORD PTR tv920[ebp+4], esi
  006b8	89 bd ec fe ff
	ff		 mov	 DWORD PTR tv923[ebp], edi
  006be	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv923[ebp+4], eax
  006c4	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR tv920[ebp+4]
  006ca	3b 8d f0 fe ff
	ff		 cmp	 ecx, DWORD PTR tv923[ebp+4]
  006d0	7c 50		 jl	 SHORT $L70022
  006d2	7f 0e		 jg	 SHORT $L71367
  006d4	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR tv920[ebp]
  006da	3b 95 ec fe ff
	ff		 cmp	 edx, DWORD PTR tv923[ebp]
  006e0	76 40		 jbe	 SHORT $L70022
$L71367:

; 1547 :                             {
; 1548 :                                 rtDuration -= ConvertOffset(mtRealPlay - (rtOffset + mtPlay), -rItem.m_lPitch);

  006e2	8b 45 ac	 mov	 eax, DWORD PTR _rItem$69993[ebp]
  006e5	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  006e8	f7 d9		 neg	 ecx
  006ea	51		 push	 ecx
  006eb	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _mtRealPlay$70021[ebp]
  006f1	99		 cdq
  006f2	8b c8		 mov	 ecx, eax
  006f4	8b f2		 mov	 esi, edx
  006f6	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _mtPlay$70018[ebp]
  006fc	99		 cdq
  006fd	8b 7d 1c	 mov	 edi, DWORD PTR _rtOffset$[ebp]
  00700	03 f8		 add	 edi, eax
  00702	8b 45 20	 mov	 eax, DWORD PTR _rtOffset$[ebp+4]
  00705	13 c2		 adc	 eax, edx
  00707	2b cf		 sub	 ecx, edi
  00709	1b f0		 sbb	 esi, eax
  0070b	56		 push	 esi
  0070c	51		 push	 ecx
  0070d	e8 00 00 00 00	 call	 ?ConvertOffset@@YG_J_JJ@Z ; ConvertOffset
  00712	8b 4d 80	 mov	 ecx, DWORD PTR _rtDuration$70006[ebp]
  00715	2b c8		 sub	 ecx, eax
  00717	8b 45 84	 mov	 eax, DWORD PTR _rtDuration$70006[ebp+4]
  0071a	1b c2		 sbb	 eax, edx
  0071c	89 4d 80	 mov	 DWORD PTR _rtDuration$70006[ebp], ecx
  0071f	89 45 84	 mov	 DWORD PTR _rtDuration$70006[ebp+4], eax
$L70022:

; 1549 : 
; 1550 :                             }
; 1551 :                             if (mtPlay < (MUSIC_TIME) rtStart)

  00722	8b 4d 0c	 mov	 ecx, DWORD PTR _rtStart$[ebp]
  00725	39 8d 6c ff ff
	ff		 cmp	 DWORD PTR _mtPlay$70018[ebp], ecx
  0072b	0f 8d 63 01 00
	00		 jge	 $L70024

; 1552 :                             {
; 1553 :                                 // Calculate distance from wave start to segment start, but begin
; 1554 :                                 // the calculation at segment start to avoid strangeness
; 1555 :                                 // when attempting to do conversions at times earlier than
; 1556 :                                 // segment start.
; 1557 :                                 REFERENCE_TIME rtRefStartPlus = 0;

  00731	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rtRefStartPlus$70025[ebp], 0
  0073b	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rtRefStartPlus$70025[ebp+4], 0

; 1558 :                                 REFERENCE_TIME rtRefPlayPlus = 0;

  00745	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rtRefPlayPlus$70026[ebp], 0
  0074f	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rtRefPlayPlus$70026[ebp+4], 0

; 1559 :                                 MUSIC_TIME mtNewDuration = 0;

  00759	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _mtNewDuration$70027[ebp], 0

; 1560 :                                 pPerf->MusicToReferenceTime((MUSIC_TIME)rtStart + (MUSIC_TIME)rtStart + (MUSIC_TIME)rtOffset, &rtRefStartPlus);

  00763	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR _rtRefStartPlus$70025[ebp]
  00769	52		 push	 edx
  0076a	8b 45 0c	 mov	 eax, DWORD PTR _rtStart$[ebp]
  0076d	8b 4d 0c	 mov	 ecx, DWORD PTR _rtStart$[ebp]
  00770	03 c1		 add	 eax, ecx
  00772	8b 55 1c	 mov	 edx, DWORD PTR _rtOffset$[ebp]
  00775	03 c2		 add	 eax, edx
  00777	50		 push	 eax
  00778	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  0077b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0077d	8b 55 28	 mov	 edx, DWORD PTR _pPerf$[ebp]
  00780	52		 push	 edx
  00781	ff 51 14	 call	 DWORD PTR [ecx+20]

; 1561 :                                 pPerf->MusicToReferenceTime((MUSIC_TIME)rtStart + mtPlay + (MUSIC_TIME)rtOffset, &rtRefPlayPlus);

  00784	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _rtRefPlayPlus$70026[ebp]
  0078a	50		 push	 eax
  0078b	8b 4d 0c	 mov	 ecx, DWORD PTR _rtStart$[ebp]
  0078e	03 8d 6c ff ff
	ff		 add	 ecx, DWORD PTR _mtPlay$70018[ebp]
  00794	8b 55 1c	 mov	 edx, DWORD PTR _rtOffset$[ebp]
  00797	03 ca		 add	 ecx, edx
  00799	51		 push	 ecx
  0079a	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  0079d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0079f	8b 55 28	 mov	 edx, DWORD PTR _pPerf$[ebp]
  007a2	52		 push	 edx
  007a3	ff 51 14	 call	 DWORD PTR [ecx+20]

; 1562 :                                 rtStartOffset += ConvertOffset((rtRefStartPlus - rtRefPlayPlus), rItem.m_lPitch);

  007a6	8b 45 ac	 mov	 eax, DWORD PTR _rItem$69993[ebp]
  007a9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  007ac	51		 push	 ecx
  007ad	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _rtRefStartPlus$70025[ebp]
  007b3	2b 95 30 ff ff
	ff		 sub	 edx, DWORD PTR _rtRefPlayPlus$70026[ebp]
  007b9	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _rtRefStartPlus$70025[ebp+4]
  007bf	1b 85 34 ff ff
	ff		 sbb	 eax, DWORD PTR _rtRefPlayPlus$70026[ebp+4]
  007c5	50		 push	 eax
  007c6	52		 push	 edx
  007c7	e8 00 00 00 00	 call	 ?ConvertOffset@@YG_J_JJ@Z ; ConvertOffset
  007cc	8b 4d 98	 mov	 ecx, DWORD PTR _rtStartOffset$70005[ebp]
  007cf	03 c8		 add	 ecx, eax
  007d1	8b 45 9c	 mov	 eax, DWORD PTR _rtStartOffset$70005[ebp+4]
  007d4	13 c2		 adc	 eax, edx
  007d6	89 4d 98	 mov	 DWORD PTR _rtStartOffset$70005[ebp], ecx
  007d9	89 45 9c	 mov	 DWORD PTR _rtStartOffset$70005[ebp+4], eax

; 1563 :                                 mtPlay = (MUSIC_TIME) rtStart;

  007dc	8b 4d 0c	 mov	 ecx, DWORD PTR _rtStart$[ebp]
  007df	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _mtPlay$70018[ebp], ecx

; 1564 :                                 REFERENCE_TIME rtRealDuration = 0;

  007e5	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rtRealDuration$70034[ebp], 0
  007ef	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rtRealDuration$70034[ebp+4], 0

; 1565 :                                 pPerf->MusicToReferenceTime((MUSIC_TIME)rtStart + (MUSIC_TIME)rItem.m_rtDuration + (MUSIC_TIME)rtOffset, &rtRealDuration);

  007f9	8d 95 38 ff ff
	ff		 lea	 edx, DWORD PTR _rtRealDuration$70034[ebp]
  007ff	52		 push	 edx
  00800	8b 45 0c	 mov	 eax, DWORD PTR _rtStart$[ebp]
  00803	8b 4d ac	 mov	 ecx, DWORD PTR _rItem$69993[ebp]
  00806	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00809	03 c2		 add	 eax, edx
  0080b	8b 4d 1c	 mov	 ecx, DWORD PTR _rtOffset$[ebp]
  0080e	03 c1		 add	 eax, ecx
  00810	50		 push	 eax
  00811	8b 55 28	 mov	 edx, DWORD PTR _pPerf$[ebp]
  00814	8b 02		 mov	 eax, DWORD PTR [edx]
  00816	8b 4d 28	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00819	51		 push	 ecx
  0081a	ff 50 14	 call	 DWORD PTR [eax+20]

; 1566 :                                 pPerf->ReferenceToMusicTime(rtRealDuration - (ConvertOffset(rItem.m_rtStartOffset, -rItem.m_lPitch) + (rtRefStartPlus - rtRefPlayPlus)), &mtNewDuration);

  0081d	8d 95 4c ff ff
	ff		 lea	 edx, DWORD PTR _mtNewDuration$70027[ebp]
  00823	52		 push	 edx
  00824	8b 45 ac	 mov	 eax, DWORD PTR _rItem$69993[ebp]
  00827	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0082a	f7 d9		 neg	 ecx
  0082c	51		 push	 ecx
  0082d	8b 55 ac	 mov	 edx, DWORD PTR _rItem$69993[ebp]
  00830	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00833	50		 push	 eax
  00834	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00837	51		 push	 ecx
  00838	e8 00 00 00 00	 call	 ?ConvertOffset@@YG_J_JJ@Z ; ConvertOffset
  0083d	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _rtRefStartPlus$70025[ebp]
  00843	2b 8d 30 ff ff
	ff		 sub	 ecx, DWORD PTR _rtRefPlayPlus$70026[ebp]
  00849	8b b5 44 ff ff
	ff		 mov	 esi, DWORD PTR _rtRefStartPlus$70025[ebp+4]
  0084f	1b b5 34 ff ff
	ff		 sbb	 esi, DWORD PTR _rtRefPlayPlus$70026[ebp+4]
  00855	03 c1		 add	 eax, ecx
  00857	13 d6		 adc	 edx, esi
  00859	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _rtRealDuration$70034[ebp]
  0085f	2b c8		 sub	 ecx, eax
  00861	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _rtRealDuration$70034[ebp+4]
  00867	1b c2		 sbb	 eax, edx
  00869	50		 push	 eax
  0086a	51		 push	 ecx
  0086b	8b 4d 28	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  0086e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00870	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  00873	50		 push	 eax
  00874	ff 52 18	 call	 DWORD PTR [edx+24]

; 1567 :                                 rtDuration = (REFERENCE_TIME)mtNewDuration - (rtStart + rtOffset);

  00877	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _mtNewDuration$70027[ebp]
  0087d	99		 cdq
  0087e	8b 4d 0c	 mov	 ecx, DWORD PTR _rtStart$[ebp]
  00881	03 4d 1c	 add	 ecx, DWORD PTR _rtOffset$[ebp]
  00884	8b 75 10	 mov	 esi, DWORD PTR _rtStart$[ebp+4]
  00887	13 75 20	 adc	 esi, DWORD PTR _rtOffset$[ebp+4]
  0088a	2b c1		 sub	 eax, ecx
  0088c	1b d6		 sbb	 edx, esi
  0088e	89 45 80	 mov	 DWORD PTR _rtDuration$70006[ebp], eax
  00891	89 55 84	 mov	 DWORD PTR _rtDuration$70006[ebp+4], edx
$L70024:

; 1568 :                             }
; 1569 :                             pWave->mtTime = mtPlay + (MUSIC_TIME)rtOffset;

  00894	8b 55 1c	 mov	 edx, DWORD PTR _rtOffset$[ebp]
  00897	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _mtPlay$70018[ebp]
  0089d	03 c2		 add	 eax, edx
  0089f	8b 4d 94	 mov	 ecx, DWORD PTR _pWave$70007[ebp]
  008a2	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1570 :                             pWave->dwFlags = DMUS_PMSGF_MUSICTIME;

  008a5	8b 55 94	 mov	 edx, DWORD PTR _pWave$70007[ebp]
  008a8	c7 42 14 02 00
	00 00		 mov	 DWORD PTR [edx+20], 2

; 1571 :                             pWave->lOffset = (MUSIC_TIME)rItem.m_rtTimePhysical - rItem.m_mtTimeLogical;

  008af	8b 45 ac	 mov	 eax, DWORD PTR _rItem$69993[ebp]
  008b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  008b4	8b 55 ac	 mov	 edx, DWORD PTR _rItem$69993[ebp]
  008b7	2b 4a 28	 sub	 ecx, DWORD PTR [edx+40]
  008ba	8b 45 94	 mov	 eax, DWORD PTR _pWave$70007[ebp]
  008bd	89 48 40	 mov	 DWORD PTR [eax+64], ecx

; 1572 :                             REFERENCE_TIME rtZero = 0;

  008c0	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rtZero$70041[ebp], 0
  008ca	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rtZero$70041[ebp+4], 0

; 1573 :                             pPerf->MusicToReferenceTime((MUSIC_TIME)rtOffset + mtPlay, &rtZero);

  008d4	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _rtZero$70041[ebp]
  008da	51		 push	 ecx
  008db	8b 55 1c	 mov	 edx, DWORD PTR _rtOffset$[ebp]
  008de	03 95 6c ff ff
	ff		 add	 edx, DWORD PTR _mtPlay$70018[ebp]
  008e4	52		 push	 edx
  008e5	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  008e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  008ea	8b 55 28	 mov	 edx, DWORD PTR _pPerf$[ebp]
  008ed	52		 push	 edx
  008ee	ff 51 14	 call	 DWORD PTR [ecx+20]

; 1574 :                             pPerf->MusicToReferenceTime((MUSIC_TIME)(rtDuration + rtOffset) + mtPlay, &rtDurationMs);

  008f1	8d 45 88	 lea	 eax, DWORD PTR _rtDurationMs$70004[ebp]
  008f4	50		 push	 eax
  008f5	8b 4d 80	 mov	 ecx, DWORD PTR _rtDuration$70006[ebp]
  008f8	03 4d 1c	 add	 ecx, DWORD PTR _rtOffset$[ebp]
  008fb	8b 55 84	 mov	 edx, DWORD PTR _rtDuration$70006[ebp+4]
  008fe	13 55 20	 adc	 edx, DWORD PTR _rtOffset$[ebp+4]
  00901	03 8d 6c ff ff
	ff		 add	 ecx, DWORD PTR _mtPlay$70018[ebp]
  00907	51		 push	 ecx
  00908	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  0090b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0090d	8b 55 28	 mov	 edx, DWORD PTR _pPerf$[ebp]
  00910	52		 push	 edx
  00911	ff 51 14	 call	 DWORD PTR [ecx+20]

; 1575 :                             rtDurationMs -= rtZero;

  00914	8b 45 88	 mov	 eax, DWORD PTR _rtDurationMs$70004[ebp]
  00917	2b 85 60 ff ff
	ff		 sub	 eax, DWORD PTR _rtZero$70041[ebp]
  0091d	8b 4d 8c	 mov	 ecx, DWORD PTR _rtDurationMs$70004[ebp+4]
  00920	1b 8d 64 ff ff
	ff		 sbb	 ecx, DWORD PTR _rtZero$70041[ebp+4]
  00926	89 45 88	 mov	 DWORD PTR _rtDurationMs$70004[ebp], eax
  00929	89 4d 8c	 mov	 DWORD PTR _rtDurationMs$70004[ebp+4], ecx

; 1576 :                             rtDurationMs /= REF_PER_MIL;

  0092c	6a 00		 push	 0
  0092e	68 10 27 00 00	 push	 10000			; 00002710H
  00933	8b 55 8c	 mov	 edx, DWORD PTR _rtDurationMs$70004[ebp+4]
  00936	52		 push	 edx
  00937	8b 45 88	 mov	 eax, DWORD PTR _rtDurationMs$70004[ebp]
  0093a	50		 push	 eax
  0093b	e8 00 00 00 00	 call	 __alldiv
  00940	89 45 88	 mov	 DWORD PTR _rtDurationMs$70004[ebp], eax
  00943	89 55 8c	 mov	 DWORD PTR _rtDurationMs$70004[ebp+4], edx
$L70016:

; 1577 :                         }
; 1578 :                         // If we're either past the end of the wave, or we're within
; 1579 :                         // 150 ms of the end of a looping wave (and we've just started
; 1580 :                         // playback), or if this is a loop start and the wave should not 
; 1581 :                         // play on loop, don't play the wave.
; 1582 :                         if ( rtDurationMs <= 0 ||
; 1583 :                              (rItem.m_dwLoopEnd && (dwFlags & DMUS_TRACKF_START) && rtDurationMs < 150) ||
; 1584 :                              (rItem.m_dwFlags & DMUS_WAVEF_IGNORELOOPS) && (dwFlags & DMUS_TRACKF_LOOP))

  00946	83 7d 8c 00	 cmp	 DWORD PTR _rtDurationMs$70004[ebp+4], 0
  0094a	7c 43		 jl	 SHORT $L70045
  0094c	7f 06		 jg	 SHORT $L71368
  0094e	83 7d 88 00	 cmp	 DWORD PTR _rtDurationMs$70004[ebp], 0
  00952	76 3b		 jbe	 SHORT $L70045
$L71368:
  00954	8b 4d ac	 mov	 ecx, DWORD PTR _rItem$69993[ebp]
  00957	83 79 44 00	 cmp	 DWORD PTR [ecx+68], 0
  0095b	74 1b		 je	 SHORT $L70046
  0095d	8b 55 24	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00960	83 e2 04	 and	 edx, 4
  00963	85 d2		 test	 edx, edx
  00965	74 11		 je	 SHORT $L70046
  00967	83 7d 8c 00	 cmp	 DWORD PTR _rtDurationMs$70004[ebp+4], 0
  0096b	7c 22		 jl	 SHORT $L70045
  0096d	7f 09		 jg	 SHORT $L70046
  0096f	81 7d 88 96 00
	00 00		 cmp	 DWORD PTR _rtDurationMs$70004[ebp], 150 ; 00000096H
  00976	72 17		 jb	 SHORT $L70045
$L70046:
  00978	8b 45 ac	 mov	 eax, DWORD PTR _rItem$69993[ebp]
  0097b	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0097e	83 e1 20	 and	 ecx, 32			; 00000020H
  00981	85 c9		 test	 ecx, ecx
  00983	74 1f		 je	 SHORT $L70044
  00985	8b 55 24	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00988	83 e2 02	 and	 edx, 2
  0098b	85 d2		 test	 edx, edx
  0098d	74 15		 je	 SHORT $L70044
$L70045:

; 1585 :                         {
; 1586 :                             pPerf->FreePMsg((DMUS_PMSG*)pWave);

  0098f	8b 45 94	 mov	 eax, DWORD PTR _pWave$70007[ebp]
  00992	50		 push	 eax
  00993	8b 4d 28	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00996	8b 11		 mov	 edx, DWORD PTR [ecx]
  00998	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  0099b	50		 push	 eax
  0099c	ff 52 28	 call	 DWORD PTR [edx+40]

; 1587 :                         }
; 1588 :                         else

  0099f	e9 eb 01 00 00	 jmp	 $L70003
$L70044:

; 1589 :                         {
; 1590 :                             // We need to convert the start offset from clock time to sample time. 
; 1591 :                             if (rtStartOffset)

  009a4	8b 4d 98	 mov	 ecx, DWORD PTR _rtStartOffset$70005[ebp]
  009a7	0b 4d 9c	 or	 ecx, DWORD PTR _rtStartOffset$70005[ebp+4]
  009aa	85 c9		 test	 ecx, ecx
  009ac	74 6d		 je	 SHORT $L70049

; 1592 :                             {
; 1593 :                                 WAVEFORMATEX WaveFormat;
; 1594 :                                 rItem.m_pWave->GetFormat(&WaveFormat,sizeof(WaveFormat),NULL);

  009ae	6a 00		 push	 0
  009b0	6a 12		 push	 18			; 00000012H
  009b2	8d 95 1c ff ff
	ff		 lea	 edx, DWORD PTR _WaveFormat$70050[ebp]
  009b8	52		 push	 edx
  009b9	8b 45 ac	 mov	 eax, DWORD PTR _rItem$69993[ebp]
  009bc	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  009bf	8b 55 ac	 mov	 edx, DWORD PTR _rItem$69993[ebp]
  009c2	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  009c5	8b 09		 mov	 ecx, DWORD PTR [ecx]
  009c7	50		 push	 eax
  009c8	ff 51 10	 call	 DWORD PTR [ecx+16]

; 1595 :                                 if (WaveFormat.nSamplesPerSec)

  009cb	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR _WaveFormat$70050[ebp+4], 0
  009d2	74 39		 je	 SHORT $L70051

; 1596 :                                 {
; 1597 :                                     rtStartOffset *= WaveFormat.nSamplesPerSec;

  009d4	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _WaveFormat$70050[ebp+4]
  009da	33 c0		 xor	 eax, eax
  009dc	50		 push	 eax
  009dd	52		 push	 edx
  009de	8b 4d 9c	 mov	 ecx, DWORD PTR _rtStartOffset$70005[ebp+4]
  009e1	51		 push	 ecx
  009e2	8b 55 98	 mov	 edx, DWORD PTR _rtStartOffset$70005[ebp]
  009e5	52		 push	 edx
  009e6	e8 00 00 00 00	 call	 __allmul
  009eb	89 45 98	 mov	 DWORD PTR _rtStartOffset$70005[ebp], eax
  009ee	89 55 9c	 mov	 DWORD PTR _rtStartOffset$70005[ebp+4], edx

; 1598 :                                     rtStartOffset /= 10000000;

  009f1	6a 00		 push	 0
  009f3	68 80 96 98 00	 push	 10000000		; 00989680H
  009f8	8b 45 9c	 mov	 eax, DWORD PTR _rtStartOffset$70005[ebp+4]
  009fb	50		 push	 eax
  009fc	8b 4d 98	 mov	 ecx, DWORD PTR _rtStartOffset$70005[ebp]
  009ff	51		 push	 ecx
  00a00	e8 00 00 00 00	 call	 __alldiv
  00a05	89 45 98	 mov	 DWORD PTR _rtStartOffset$70005[ebp], eax
  00a08	89 55 9c	 mov	 DWORD PTR _rtStartOffset$70005[ebp+4], edx

; 1599 :                                     
; 1600 :                                 }
; 1601 :                                 else

  00a0b	eb 0e		 jmp	 SHORT $L70049
$L70051:

; 1602 :                                 {
; 1603 :                                     rtStartOffset = 0;

  00a0d	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _rtStartOffset$70005[ebp], 0
  00a14	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _rtStartOffset$70005[ebp+4], 0
$L70049:

; 1604 :                                 }
; 1605 :                             }
; 1606 :                             pWave->dwStartOffset = (DWORD) rtStartOffset;

  00a1b	8b 55 98	 mov	 edx, DWORD PTR _rtStartOffset$70005[ebp]
  00a1e	8b 45 94	 mov	 eax, DWORD PTR _pWave$70007[ebp]
  00a21	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 1607 :                             pWave->lVolume = rItem.m_lVolume + lPartVolume + m_lVolume;

  00a24	8b 4d ac	 mov	 ecx, DWORD PTR _rItem$69993[ebp]
  00a27	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00a2a	03 55 c4	 add	 edx, DWORD PTR _lPartVolume$69985[ebp]
  00a2d	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00a33	03 50 38	 add	 edx, DWORD PTR [eax+56]
  00a36	8b 4d 94	 mov	 ecx, DWORD PTR _pWave$70007[ebp]
  00a39	89 51 44	 mov	 DWORD PTR [ecx+68], edx

; 1608 :                             if (rItem.m_wVolumeRange)

  00a3c	8b 55 ac	 mov	 edx, DWORD PTR _rItem$69993[ebp]
  00a3f	0f b7 42 34	 movzx	 eax, WORD PTR [edx+52]
  00a43	85 c0		 test	 eax, eax
  00a45	74 3e		 je	 SHORT $L70054

; 1609 :                             {
; 1610 :                                 long lRand = dm_rand() % (2 * rItem.m_wVolumeRange);

  00a47	e8 00 00 00 00	 call	 ?dm_rand@@YAHXZ		; dm_rand
  00a4c	8b 4d ac	 mov	 ecx, DWORD PTR _rItem$69993[ebp]
  00a4f	0f b7 49 34	 movzx	 ecx, WORD PTR [ecx+52]
  00a53	d1 e1		 shl	 ecx, 1
  00a55	99		 cdq
  00a56	f7 f9		 idiv	 ecx
  00a58	89 95 18 ff ff
	ff		 mov	 DWORD PTR _lRand$70055[ebp], edx

; 1611 :                                 lRand -= rItem.m_wVolumeRange;

  00a5e	8b 55 ac	 mov	 edx, DWORD PTR _rItem$69993[ebp]
  00a61	0f b7 42 34	 movzx	 eax, WORD PTR [edx+52]
  00a65	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _lRand$70055[ebp]
  00a6b	2b c8		 sub	 ecx, eax
  00a6d	89 8d 18 ff ff
	ff		 mov	 DWORD PTR _lRand$70055[ebp], ecx

; 1612 :                                 pWave->lVolume += lRand;

  00a73	8b 55 94	 mov	 edx, DWORD PTR _pWave$70007[ebp]
  00a76	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00a79	03 85 18 ff ff
	ff		 add	 eax, DWORD PTR _lRand$70055[ebp]
  00a7f	8b 4d 94	 mov	 ecx, DWORD PTR _pWave$70007[ebp]
  00a82	89 41 44	 mov	 DWORD PTR [ecx+68], eax
$L70054:

; 1613 :                             }
; 1614 :                             pWave->lPitch = rItem.m_lPitch;

  00a85	8b 55 94	 mov	 edx, DWORD PTR _pWave$70007[ebp]
  00a88	8b 45 ac	 mov	 eax, DWORD PTR _rItem$69993[ebp]
  00a8b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00a8e	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 1615 :                             if (rItem.m_wPitchRange)

  00a91	8b 55 ac	 mov	 edx, DWORD PTR _rItem$69993[ebp]
  00a94	0f b7 42 36	 movzx	 eax, WORD PTR [edx+54]
  00a98	85 c0		 test	 eax, eax
  00a9a	74 3e		 je	 SHORT $L70056

; 1616 :                             {
; 1617 :                                 long lRand = dm_rand() % (2 * rItem.m_wPitchRange);

  00a9c	e8 00 00 00 00	 call	 ?dm_rand@@YAHXZ		; dm_rand
  00aa1	8b 4d ac	 mov	 ecx, DWORD PTR _rItem$69993[ebp]
  00aa4	0f b7 49 36	 movzx	 ecx, WORD PTR [ecx+54]
  00aa8	d1 e1		 shl	 ecx, 1
  00aaa	99		 cdq
  00aab	f7 f9		 idiv	 ecx
  00aad	89 95 14 ff ff
	ff		 mov	 DWORD PTR _lRand$70057[ebp], edx

; 1618 :                                 lRand -= rItem.m_wPitchRange;

  00ab3	8b 55 ac	 mov	 edx, DWORD PTR _rItem$69993[ebp]
  00ab6	0f b7 42 36	 movzx	 eax, WORD PTR [edx+54]
  00aba	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _lRand$70057[ebp]
  00ac0	2b c8		 sub	 ecx, eax
  00ac2	89 8d 14 ff ff
	ff		 mov	 DWORD PTR _lRand$70057[ebp], ecx

; 1619 :                                 pWave->lPitch += lRand;

  00ac8	8b 55 94	 mov	 edx, DWORD PTR _pWave$70007[ebp]
  00acb	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00ace	03 85 14 ff ff
	ff		 add	 eax, DWORD PTR _lRand$70057[ebp]
  00ad4	8b 4d 94	 mov	 ecx, DWORD PTR _pWave$70007[ebp]
  00ad7	89 41 48	 mov	 DWORD PTR [ecx+72], eax
$L70056:

; 1620 :                             }
; 1621 :                             pWave->bFlags = (BYTE)(rItem.m_dwFlags & 0xff);

  00ada	8b 55 ac	 mov	 edx, DWORD PTR _rItem$69993[ebp]
  00add	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00ae0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00ae5	8b 4d 94	 mov	 ecx, DWORD PTR _pWave$70007[ebp]
  00ae8	88 41 58	 mov	 BYTE PTR [ecx+88], al

; 1622 :                             pWave->dwLoopStart = rItem.m_dwLoopStart;

  00aeb	8b 55 94	 mov	 edx, DWORD PTR _pWave$70007[ebp]
  00aee	8b 45 ac	 mov	 eax, DWORD PTR _rItem$69993[ebp]
  00af1	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00af4	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 1623 :                             pWave->dwLoopEnd = rItem.m_dwLoopEnd;

  00af7	8b 55 94	 mov	 edx, DWORD PTR _pWave$70007[ebp]
  00afa	8b 45 ac	 mov	 eax, DWORD PTR _rItem$69993[ebp]
  00afd	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00b00	89 4a 54	 mov	 DWORD PTR [edx+84], ecx

; 1624 :                             // If this isn't looping, let the duration be doubled so one shots will always play through. 
; 1625 :                             if (!pWave->dwLoopEnd)

  00b03	8b 55 94	 mov	 edx, DWORD PTR _pWave$70007[ebp]
  00b06	83 7a 54 00	 cmp	 DWORD PTR [edx+84], 0
  00b0a	75 17		 jne	 SHORT $L70059

; 1626 :                             {
; 1627 :                                 rtDuration *= 2;

  00b0c	6a 00		 push	 0
  00b0e	6a 02		 push	 2
  00b10	8b 45 84	 mov	 eax, DWORD PTR _rtDuration$70006[ebp+4]
  00b13	50		 push	 eax
  00b14	8b 4d 80	 mov	 ecx, DWORD PTR _rtDuration$70006[ebp]
  00b17	51		 push	 ecx
  00b18	e8 00 00 00 00	 call	 __allmul
  00b1d	89 45 80	 mov	 DWORD PTR _rtDuration$70006[ebp], eax
  00b20	89 55 84	 mov	 DWORD PTR _rtDuration$70006[ebp+4], edx
$L70059:

; 1628 :                             }
; 1629 :                             pWave->rtDuration = rtDuration; 

  00b23	8b 55 94	 mov	 edx, DWORD PTR _pWave$70007[ebp]
  00b26	8b 45 80	 mov	 eax, DWORD PTR _rtDuration$70006[ebp]
  00b29	89 42 38	 mov	 DWORD PTR [edx+56], eax
  00b2c	8b 4d 84	 mov	 ecx, DWORD PTR _rtDuration$70006[ebp+4]
  00b2f	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 1630 :                             pWave->punkUser = (IUnknown*)rItem.m_pWave;

  00b32	8b 55 94	 mov	 edx, DWORD PTR _pWave$70007[ebp]
  00b35	8b 45 ac	 mov	 eax, DWORD PTR _rItem$69993[ebp]
  00b38	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00b3b	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 1631 :                             rItem.m_pWave->AddRef();

  00b3e	8b 55 ac	 mov	 edx, DWORD PTR _rItem$69993[ebp]
  00b41	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00b44	8b 4d ac	 mov	 ecx, DWORD PTR _rItem$69993[ebp]
  00b47	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00b4a	8b 00		 mov	 eax, DWORD PTR [eax]
  00b4c	52		 push	 edx
  00b4d	ff 50 04	 call	 DWORD PTR [eax+4]

; 1632 :                             if( pGraph )

  00b50	83 7d e0 00	 cmp	 DWORD PTR _pGraph$[ebp], 0
  00b54	74 10		 je	 SHORT $L70061

; 1633 :                             {
; 1634 :                                 pGraph->StampPMsg( (DMUS_PMSG*)pWave );

  00b56	8b 4d 94	 mov	 ecx, DWORD PTR _pWave$70007[ebp]
  00b59	51		 push	 ecx
  00b5a	8b 55 e0	 mov	 edx, DWORD PTR _pGraph$[ebp]
  00b5d	8b 02		 mov	 eax, DWORD PTR [edx]
  00b5f	8b 4d e0	 mov	 ecx, DWORD PTR _pGraph$[ebp]
  00b62	51		 push	 ecx
  00b63	ff 50 0c	 call	 DWORD PTR [eax+12]
$L70061:

; 1635 :                             }
; 1636 :                             hr = pPerf->SendPMsg( (DMUS_PMSG*)pWave );

  00b66	8b 55 94	 mov	 edx, DWORD PTR _pWave$70007[ebp]
  00b69	52		 push	 edx
  00b6a	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  00b6d	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b6f	8b 55 28	 mov	 edx, DWORD PTR _pPerf$[ebp]
  00b72	52		 push	 edx
  00b73	ff 51 10	 call	 DWORD PTR [ecx+16]
  00b76	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 1637 :                             if(FAILED(hr))

  00b79	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00b7d	7d 10		 jge	 SHORT $L70003

; 1638 :                             {
; 1639 :                                 pPerf->FreePMsg((DMUS_PMSG*)pWave);

  00b7f	8b 45 94	 mov	 eax, DWORD PTR _pWave$70007[ebp]
  00b82	50		 push	 eax
  00b83	8b 4d 28	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00b86	8b 11		 mov	 edx, DWORD PTR [ecx]
  00b88	8b 45 28	 mov	 eax, DWORD PTR _pPerf$[ebp]
  00b8b	50		 push	 eax
  00b8c	ff 52 28	 call	 DWORD PTR [edx+40]
$L70003:

; 1640 :                             }
; 1641 :                         }
; 1642 :                     }
; 1643 :                 }
; 1644 : #endif
; 1645 :             }

  00b8f	e9 82 f7 ff ff	 jmp	 $L69990
$L69988:

; 1646 :         }
; 1647 :         if( pPart )

  00b94	83 7d ec 00	 cmp	 DWORD PTR _pPart$[ebp], 0
  00b98	74 0b		 je	 SHORT $L70067

; 1648 :         {
; 1649 :             pPart = pPart->GetNext();

  00b9a	8b 4d ec	 mov	 ecx, DWORD PTR _pPart$[ebp]
  00b9d	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  00ba2	89 45 ec	 mov	 DWORD PTR _pPart$[ebp], eax
$L70067:

; 1650 :         }
; 1651 :     }

  00ba5	e9 19 f7 ff ff	 jmp	 $L69983
$L69984:

; 1652 : 
; 1653 :     if( pGraph )

  00baa	83 7d e0 00	 cmp	 DWORD PTR _pGraph$[ebp], 0
  00bae	74 0c		 je	 SHORT $L70068

; 1654 :     {
; 1655 :         pGraph->Release();

  00bb0	8b 4d e0	 mov	 ecx, DWORD PTR _pGraph$[ebp]
  00bb3	8b 11		 mov	 edx, DWORD PTR [ecx]
  00bb5	8b 45 e0	 mov	 eax, DWORD PTR _pGraph$[ebp]
  00bb8	50		 push	 eax
  00bb9	ff 52 08	 call	 DWORD PTR [edx+8]
$L70068:

; 1656 :     }
; 1657 :     return hr;

  00bbc	8b 45 e4	 mov	 eax, DWORD PTR _hr$[ebp]
$L69945:

; 1658 : }

  00bbf	5f		 pop	 edi
  00bc0	5e		 pop	 esi
  00bc1	8b e5		 mov	 esp, ebp
  00bc3	5d		 pop	 ebp
  00bc4	c2 30 00	 ret	 48			; 00000030H
?Play@CWavTrack@@IAEJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ENDP ; CWavTrack::Play
_TEXT	ENDS
PUBLIC	?GetHead@?$TList@UWaveItem@@@@QBEPAV?$TListItem@UWaveItem@@@@XZ ; TList<WaveItem>::GetHead
; Function compile flags: /Odt
;	COMDAT ?Seek@CWavTrack@@IAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@KPAUWaveStateData@@_JH3H@Z
_TEXT	SEGMENT
tv137 = -32
_rtWaveTime$70099 = -24
_rWaveItem$70098 = -16
_dwIndex$ = -12
_pWaveItem$ = -8
_pPart$ = -4
_this$ = 8
_pSegSt$ = 12
_pPerf$ = 16
_dwVirtualID$ = 20
_pSD$ = 24
_rtTime$ = 28
_fGetPrevious$ = 36
_rtOffset$ = 40
_fClockTime$ = 48
?Seek@CWavTrack@@IAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@KPAUWaveStateData@@_JH3H@Z PROC NEAR ; CWavTrack::Seek, COMDAT

; 1666 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 1667 :     DWORD dwIndex;
; 1668 :     TListItem<WavePart>* pPart;
; 1669 :     TListItem<WaveItem>* pWaveItem;
; 1670 : 
; 1671 :     // in the case of fGetPrevious (which means DMUS_SEGF_START/LOOP was
; 1672 :     // set in Play() ) we want to reset all lists to the beginning regardless of time.
; 1673 :     if( fGetPrevious )//&& ( rtTime == 0 ) )

  00006	83 7d 24 00	 cmp	 DWORD PTR _fGetPrevious$[ebp], 0
  0000a	74 7c		 je	 SHORT $L70083

; 1674 :     {
; 1675 :         pPart = m_WavePartList.GetHead();

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 48	 add	 ecx, 72			; 00000048H
  00012	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
  00017	89 45 fc	 mov	 DWORD PTR _pPart$[ebp], eax

; 1676 :         for( dwIndex = 0; dwIndex < m_dwPChannelsUsed; dwIndex++ )

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwIndex$[ebp], 0
  00021	eb 09		 jmp	 SHORT $L70084
$L70085:
  00023	8b 45 f4	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00026	83 c0 01	 add	 eax, 1
  00029	89 45 f4	 mov	 DWORD PTR _dwIndex$[ebp], eax
$L70084:
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 55 f4	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  00032	3b 51 40	 cmp	 edx, DWORD PTR [ecx+64]
  00035	73 4a		 jae	 SHORT $L70086

; 1677 :         {
; 1678 :             if( pPart )

  00037	83 7d fc 00	 cmp	 DWORD PTR _pPart$[ebp], 0
  0003b	74 40		 je	 SHORT $L70087

; 1679 :             {
; 1680 :                 pWaveItem = pPart->GetItemValue().m_WaveItemList.GetHead();

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _pPart$[ebp]
  00040	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  00045	83 c0 18	 add	 eax, 24			; 00000018H
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWaveItem@@@@QBEPAV?$TListItem@UWaveItem@@@@XZ ; TList<WaveItem>::GetHead
  0004f	89 45 f8	 mov	 DWORD PTR _pWaveItem$[ebp], eax

; 1681 :                 if( pWaveItem && pSD->apCurrentWave )

  00052	83 7d f8 00	 cmp	 DWORD PTR _pWaveItem$[ebp], 0
  00056	74 18		 je	 SHORT $L70088
  00058	8b 45 18	 mov	 eax, DWORD PTR _pSD$[ebp]
  0005b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0005f	74 0f		 je	 SHORT $L70088

; 1682 :                 {
; 1683 :                     pSD->apCurrentWave[dwIndex] = pWaveItem;

  00061	8b 4d 18	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00064	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00067	8b 45 f4	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  0006a	8b 4d f8	 mov	 ecx, DWORD PTR _pWaveItem$[ebp]
  0006d	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx
$L70088:

; 1684 :                 }
; 1685 :                 pPart = pPart->GetNext();

  00070	8b 4d fc	 mov	 ecx, DWORD PTR _pPart$[ebp]
  00073	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  00078	89 45 fc	 mov	 DWORD PTR _pPart$[ebp], eax

; 1686 :             }
; 1687 :             else

  0007b	eb 02		 jmp	 SHORT $L70089
$L70087:

; 1688 :             {
; 1689 :                 break;

  0007d	eb 02		 jmp	 SHORT $L70086
$L70089:

; 1690 :             }
; 1691 :         }

  0007f	eb a2		 jmp	 SHORT $L70085
$L70086:

; 1692 :         return S_OK;

  00081	33 c0		 xor	 eax, eax
  00083	e9 e3 00 00 00	 jmp	 $L70079
$L70083:

; 1693 :     }
; 1694 : 
; 1695 :     pPart = m_WavePartList.GetHead();

  00088	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	83 c1 48	 add	 ecx, 72			; 00000048H
  0008e	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
  00093	89 45 fc	 mov	 DWORD PTR _pPart$[ebp], eax

; 1696 :     for( dwIndex = 0; dwIndex < m_dwPChannelsUsed; dwIndex++ )

  00096	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwIndex$[ebp], 0
  0009d	eb 09		 jmp	 SHORT $L70091
$L70092:
  0009f	8b 55 f4	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  000a2	83 c2 01	 add	 edx, 1
  000a5	89 55 f4	 mov	 DWORD PTR _dwIndex$[ebp], edx
$L70091:
  000a8	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
  000ae	3b 48 40	 cmp	 ecx, DWORD PTR [eax+64]
  000b1	0f 83 b2 00 00
	00		 jae	 $L70093

; 1697 :     {
; 1698 :         if( pPart )

  000b7	83 7d fc 00	 cmp	 DWORD PTR _pPart$[ebp], 0
  000bb	0f 84 a3 00 00
	00		 je	 $L70094

; 1699 :         {
; 1700 :             // scan the wave event list in this part.
; 1701 :             for( pWaveItem = pPart->GetItemValue().m_WaveItemList.GetHead(); pWaveItem; pWaveItem = pWaveItem->GetNext() )

  000c1	8b 4d fc	 mov	 ecx, DWORD PTR _pPart$[ebp]
  000c4	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  000c9	83 c0 18	 add	 eax, 24			; 00000018H
  000cc	8b c8		 mov	 ecx, eax
  000ce	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWaveItem@@@@QBEPAV?$TListItem@UWaveItem@@@@XZ ; TList<WaveItem>::GetHead
  000d3	89 45 f8	 mov	 DWORD PTR _pWaveItem$[ebp], eax
  000d6	eb 0b		 jmp	 SHORT $L70095
$L70096:
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _pWaveItem$[ebp]
  000db	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ ; TListItem<WaveItem>::GetNext
  000e0	89 45 f8	 mov	 DWORD PTR _pWaveItem$[ebp], eax
$L70095:
  000e3	83 7d f8 00	 cmp	 DWORD PTR _pWaveItem$[ebp], 0
  000e7	74 58		 je	 SHORT $L70097

; 1702 :             {
; 1703 :                 WaveItem& rWaveItem = pWaveItem->GetItemValue();

  000e9	8b 4d f8	 mov	 ecx, DWORD PTR _pWaveItem$[ebp]
  000ec	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWaveItem@@@@QAEAAUWaveItem@@XZ ; TListItem<WaveItem>::GetItemValue
  000f1	89 45 f0	 mov	 DWORD PTR _rWaveItem$70098[ebp], eax

; 1704 :                 REFERENCE_TIME rtWaveTime = fClockTime ? rWaveItem.m_rtTimePhysical : rWaveItem.m_mtTimeLogical;

  000f4	83 7d 30 00	 cmp	 DWORD PTR _fClockTime$[ebp], 0
  000f8	74 10		 je	 SHORT $L71374
  000fa	8b 55 f0	 mov	 edx, DWORD PTR _rWaveItem$70098[ebp]
  000fd	8b 02		 mov	 eax, DWORD PTR [edx]
  000ff	89 45 e0	 mov	 DWORD PTR tv137[ebp], eax
  00102	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00105	89 4d e4	 mov	 DWORD PTR tv137[ebp+4], ecx
  00108	eb 0d		 jmp	 SHORT $L71375
$L71374:
  0010a	8b 55 f0	 mov	 edx, DWORD PTR _rWaveItem$70098[ebp]
  0010d	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00110	99		 cdq
  00111	89 45 e0	 mov	 DWORD PTR tv137[ebp], eax
  00114	89 55 e4	 mov	 DWORD PTR tv137[ebp+4], edx
$L71375:
  00117	8b 45 e0	 mov	 eax, DWORD PTR tv137[ebp]
  0011a	89 45 e8	 mov	 DWORD PTR _rtWaveTime$70099[ebp], eax
  0011d	8b 4d e4	 mov	 ecx, DWORD PTR tv137[ebp+4]
  00120	89 4d ec	 mov	 DWORD PTR _rtWaveTime$70099[ebp+4], ecx

; 1705 :                 if( rtWaveTime >= rtTime )

  00123	8b 55 ec	 mov	 edx, DWORD PTR _rtWaveTime$70099[ebp+4]
  00126	3b 55 20	 cmp	 edx, DWORD PTR _rtTime$[ebp+4]
  00129	7c 0c		 jl	 SHORT $L70100
  0012b	7f 08		 jg	 SHORT $L71376
  0012d	8b 45 e8	 mov	 eax, DWORD PTR _rtWaveTime$70099[ebp]
  00130	3b 45 1c	 cmp	 eax, DWORD PTR _rtTime$[ebp]
  00133	72 02		 jb	 SHORT $L70100
$L71376:

; 1706 :                 {
; 1707 :                     break;

  00135	eb 0a		 jmp	 SHORT $L70097
$L70100:

; 1708 :                 }
; 1709 :                 if( !fGetPrevious )

  00137	83 7d 24 00	 cmp	 DWORD PTR _fGetPrevious$[ebp], 0
  0013b	75 02		 jne	 SHORT $L70101

; 1710 :                 {
; 1711 :                     // if we don't care about previous events, just continue
; 1712 :                     continue;

  0013d	eb 99		 jmp	 SHORT $L70096
$L70101:

; 1713 :                 }
; 1714 :             }

  0013f	eb 97		 jmp	 SHORT $L70096
$L70097:

; 1715 :             if( pSD->apCurrentWave )

  00141	8b 4d 18	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00144	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00148	74 0f		 je	 SHORT $L70102

; 1716 :             {
; 1717 :                 pSD->apCurrentWave[dwIndex] = pWaveItem;

  0014a	8b 55 18	 mov	 edx, DWORD PTR _pSD$[ebp]
  0014d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00150	8b 4d f4	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
  00153	8b 55 f8	 mov	 edx, DWORD PTR _pWaveItem$[ebp]
  00156	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$L70102:

; 1718 :             }
; 1719 :             pPart = pPart->GetNext();

  00159	8b 4d fc	 mov	 ecx, DWORD PTR _pPart$[ebp]
  0015c	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  00161	89 45 fc	 mov	 DWORD PTR _pPart$[ebp], eax
$L70094:

; 1720 :         }
; 1721 :     }

  00164	e9 36 ff ff ff	 jmp	 $L70092
$L70093:

; 1722 : 
; 1723 :     return S_OK;

  00169	33 c0		 xor	 eax, eax
$L70079:

; 1724 : }

  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c2 2c 00	 ret	 44			; 0000002cH
?Seek@CWavTrack@@IAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@KPAUWaveStateData@@_JH3H@Z ENDP ; CWavTrack::Seek
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetParam@CWavTrack@@UAGJABU_GUID@@JPAJPAX@Z
_TEXT	SEGMENT
_this$ = 8
_rguidType$ = 12
_mtTime$ = 16
_pmtNext$ = 20
_pData$ = 24
?GetParam@CWavTrack@@UAGJABU_GUID@@JPAJPAX@Z PROC NEAR	; CWavTrack::GetParam, COMDAT

; 1745 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1746 :     return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 1747 : }

  00008	5d		 pop	 ebp
  00009	c2 14 00	 ret	 20			; 00000014H
?GetParam@CWavTrack@@UAGJABU_GUID@@JPAJPAX@Z ENDP	; CWavTrack::GetParam
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetParam@CWavTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT
_this$ = 8
_rguidType$ = 12
_mtTime$ = 16
_pData$ = 20
?SetParam@CWavTrack@@UAGJABU_GUID@@JPAX@Z PROC NEAR	; CWavTrack::SetParam, COMDAT

; 1764 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1765 :     return SetParamEx(rguidType, mtTime, pData, NULL, 0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	8b 45 14	 mov	 eax, DWORD PTR _pData$[ebp]
  0000a	50		 push	 eax
  0000b	8b 45 10	 mov	 eax, DWORD PTR _mtTime$[ebp]
  0000e	99		 cdq
  0000f	52		 push	 edx
  00010	50		 push	 eax
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _rguidType$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	52		 push	 edx
  0001e	ff 51 3c	 call	 DWORD PTR [ecx+60]

; 1766 : }

  00021	5d		 pop	 ebp
  00022	c2 10 00	 ret	 16			; 00000010H
?SetParam@CWavTrack@@UAGJABU_GUID@@JPAX@Z ENDP		; CWavTrack::SetParam
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetParamEx@CWavTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z
_TEXT	SEGMENT
_this$ = 8
_rguidType$ = 12
_rtTime$ = 16
_prtNext$ = 24
_pParam$ = 28
_pStateData$ = 32
_dwFlags$ = 36
?GetParamEx@CWavTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z PROC NEAR ; CWavTrack::GetParamEx, COMDAT

; 1770 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1771 :     return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 1772 : }

  00008	5d		 pop	 ebp
  00009	c2 20 00	 ret	 32			; 00000020H
?GetParamEx@CWavTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z ENDP	; CWavTrack::GetParamEx
_TEXT	ENDS
PUBLIC	?SetWaveParams@WavePart@@QAEXPAU_DMUS_IO_WAVE_HEADER@@@Z ; WavePart::SetWaveParams
PUBLIC	??_C@_0CH@BMJBMIKG@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??SetParamEx@CWavTrack@@UAGJABU_GUID@@_JPAX2K@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??SetParamEx@CWavTrack@@UAGJABU_GUID@@_JPAX2K@Z@4QBDB DB 'C'
	DB	'BandTrk::SetParamEx', 00H			; `CWavTrack::SetParamEx'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CH@BMJBMIKG@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
CONST	SEGMENT
??_C@_0CH@BMJBMIKG@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@ DB '%'
	DB	's: Invalid pointer (void*)&rguidType', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?SetParamEx@CWavTrack@@UAGJABU_GUID@@_JPAX2K@Z
_TEXT	SEGMENT
_pPart$70149 = -12
_pWaveHeader$70147 = -8
_hr$ = -4
_this$ = 8
_rguidType$ = 12
_rtTime$ = 16
_pParam$ = 24
_pStateData$ = 28
_dwFlags$ = 32
?SetParamEx@CWavTrack@@UAGJABU_GUID@@_JPAX2K@Z PROC NEAR ; CWavTrack::SetParamEx, COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1777 :     V_INAME(CBandTrk::SetParamEx);
; 1778 :     V_REFGUID(rguidType);

  00006	6a 10		 push	 16			; 00000010H
  00008	8b 45 0c	 mov	 eax, DWORD PTR _rguidType$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L70140
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??SetParamEx@CWavTrack@@UAGJABU_GUID@@_JPAX2K@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@BMJBMIKG@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L70140:

; 1779 : 
; 1780 :     HRESULT hr = S_OK;

  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1781 : 
; 1782 : #ifdef DXAPI
; 1783 :     if((pParam == NULL) &&
; 1784 :        (rguidType != GUID_Enable_Auto_Download) &&
; 1785 :        (rguidType != GUID_Disable_Auto_Download))
; 1786 : #else
; 1787 :      if(pParam == NULL) 

  00035	83 7d 18 00	 cmp	 DWORD PTR _pParam$[ebp], 0
  00039	75 07		 jne	 SHORT $L70144

; 1788 : #endif
; 1789 :     {
; 1790 :         return E_POINTER;   

  0003b	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  00040	eb 74		 jmp	 SHORT $L70135
$L70144:

; 1791 :     }
; 1792 :     
; 1793 :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 c1 10	 add	 ecx, 16			; 00000010H
  00048	51		 push	 ecx
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 1794 :     if (rguidType == GUID_WavePlayParams)

  0004f	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_WavePlayParams
  00054	8b 55 0c	 mov	 edx, DWORD PTR _rguidType$[ebp]
  00057	52		 push	 edx
  00058	e8 00 00 00 00	 call	 _==@8
  0005d	85 c0		 test	 eax, eax
  0005f	74 3e		 je	 SHORT $L70146

; 1795 :     {
; 1796 :         DMUS_IO_WAVE_HEADER *pWaveHeader = (DMUS_IO_WAVE_HEADER *)pParam;

  00061	8b 45 18	 mov	 eax, DWORD PTR _pParam$[ebp]
  00064	89 45 f8	 mov	 DWORD PTR _pWaveHeader$70147[ebp], eax

; 1797 :         TListItem<WavePart>* pPart = m_WavePartList.GetHead();

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 40	 add	 ecx, 64			; 00000040H
  0006d	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
  00072	89 45 f4	 mov	 DWORD PTR _pPart$70149[ebp], eax

; 1798 :         for(; pPart; pPart = pPart->GetNext())

  00075	eb 0b		 jmp	 SHORT $L70150
$L70151:
  00077	8b 4d f4	 mov	 ecx, DWORD PTR _pPart$70149[ebp]
  0007a	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  0007f	89 45 f4	 mov	 DWORD PTR _pPart$70149[ebp], eax
$L70150:
  00082	83 7d f4 00	 cmp	 DWORD PTR _pPart$70149[ebp], 0
  00086	74 15		 je	 SHORT $L70152

; 1799 :         {
; 1800 :             pPart->GetItemValue().SetWaveParams(pWaveHeader);

  00088	8b 4d f8	 mov	 ecx, DWORD PTR _pWaveHeader$70147[ebp]
  0008b	51		 push	 ecx
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR _pPart$70149[ebp]
  0008f	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  00094	8b c8		 mov	 ecx, eax
  00096	e8 00 00 00 00	 call	 ?SetWaveParams@WavePart@@QAEXPAU_DMUS_IO_WAVE_HEADER@@@Z ; WavePart::SetWaveParams

; 1801 :         }    

  0009b	eb da		 jmp	 SHORT $L70151
$L70152:

; 1802 :     }
; 1803 : #ifdef DXAPI
; 1804 :     else if(rguidType == GUID_Download)
; 1805 :     {
; 1806 :         IDirectMusicPerformance* pPerf = (IDirectMusicPerformance*)pParam;
; 1807 :         V_INTERFACE(pPerf);
; 1808 : 
; 1809 :         HRESULT hrFail = S_OK;
; 1810 :         DWORD dwSuccess = 0;
; 1811 : 
; 1812 :         TListItem<WavePart>* pPart = m_WavePartList.GetHead();
; 1813 :         for(; pPart; pPart = pPart->GetNext())
; 1814 :         {
; 1815 :             if ( FAILED(hr = pPart->GetItemValue().Download(pPerf, NULL, NULL, GUID_NULL)) )
; 1816 :             {
; 1817 :                 hrFail = hr;
; 1818 :             }
; 1819 :             else
; 1820 :             {
; 1821 :                 dwSuccess++;
; 1822 :             }
; 1823 :         }
; 1824 :         // If we had a failure, return it if we had no successes.
; 1825 :         // Else return S_FALSE for partial success.
; 1826 :         if (FAILED(hrFail) && dwSuccess)
; 1827 :         {
; 1828 :             Trace(1,"Error: Wavetrack download was only partially successful. Some sounds will not play.\n");
; 1829 :             hr = S_FALSE;
; 1830 :         }
; 1831 : #ifdef DBG
; 1832 :         if (FAILED(hr))
; 1833 :         {
; 1834 :             Trace(1, "Error: Wavetrack failed download.\n");
; 1835 :         }
; 1836 : #endif
; 1837 :     }
; 1838 :     else if(rguidType == GUID_DownloadToAudioPath)
; 1839 :     {
; 1840 :         IUnknown* pUnknown = (IUnknown*)pParam;
; 1841 :         V_INTERFACE(pUnknown);
; 1842 : 
; 1843 :         HRESULT hrFail = S_OK;
; 1844 :         DWORD dwSuccess = 0;
; 1845 : 
; 1846 :         IDirectMusicAudioPath* pPath = NULL;
; 1847 :         IDirectMusicPerformance *pPerf = NULL;
; 1848 :         hr = pUnknown->QueryInterface(IID_IDirectMusicAudioPath,(void **)&pPath);
; 1849 :         if (SUCCEEDED(hr))
; 1850 :         {
; 1851 :             hr = pPath->GetObjectInPath(0,DMUS_PATH_PERFORMANCE,0,CLSID_DirectMusicPerformance,0,IID_IDirectMusicPerformance,(void **)&pPerf);
; 1852 :         }
; 1853 :         else
; 1854 :         {
; 1855 :             hr = pUnknown->QueryInterface(IID_IDirectMusicPerformance,(void **)&pPerf);
; 1856 :         }
; 1857 :         if (SUCCEEDED(hr))
; 1858 :         {
; 1859 :             TListItem<WavePart>* pPart = m_WavePartList.GetHead();
; 1860 :             for(; pPart; pPart = pPart->GetNext())
; 1861 :             {
; 1862 :                 if ( FAILED(hr = pPart->GetItemValue().Download(pPerf, pPath, NULL, GUID_NULL)) )
; 1863 :                 {
; 1864 :                     hrFail = hr;
; 1865 :                 }
; 1866 :                 else
; 1867 :                 {
; 1868 :                     dwSuccess++;
; 1869 :                 }
; 1870 :             }
; 1871 :         }
; 1872 :         // If we had a failure, return it if we had no successes.
; 1873 :         // Else return S_FALSE for partial success.
; 1874 :         if (FAILED(hrFail) && dwSuccess)
; 1875 :         {
; 1876 :             Trace(1,"Error: Wavetrack download was only partially successful. Some sounds will not play.\n");
; 1877 :             hr = S_FALSE;
; 1878 :         }
; 1879 : #ifdef DBG
; 1880 :         if (FAILED(hr))
; 1881 :         {
; 1882 :             Trace(1, "Error: Wavetrack failed download.\n");
; 1883 :         }
; 1884 : #endif
; 1885 :         if (pPath) pPath->Release();
; 1886 :         if (pPerf) pPerf->Release();
; 1887 :     }
; 1888 :     else if(rguidType == GUID_Unload)
; 1889 :     {
; 1890 :         IDirectMusicPerformance* pPerf = (IDirectMusicPerformance*)pParam;
; 1891 :         V_INTERFACE(pPerf);
; 1892 :         TListItem<WavePart>* pPart = m_WavePartList.GetHead();
; 1893 :         for(; pPart; pPart = pPart->GetNext())
; 1894 :         {
; 1895 :             pPart->GetItemValue().Unload(pPerf, NULL, NULL);
; 1896 :         }
; 1897 :     }
; 1898 :     else if(rguidType == GUID_UnloadFromAudioPath)
; 1899 :     {
; 1900 :         IUnknown* pUnknown = (IUnknown*)pParam;
; 1901 :         V_INTERFACE(pUnknown);
; 1902 : 
; 1903 :         IDirectMusicAudioPath* pPath = NULL;
; 1904 :         IDirectMusicPerformance *pPerf = NULL;
; 1905 :         hr = pUnknown->QueryInterface(IID_IDirectMusicAudioPath,(void **)&pPath);
; 1906 :         if (SUCCEEDED(hr))
; 1907 :         {
; 1908 :             hr = pPath->GetObjectInPath(0,DMUS_PATH_PERFORMANCE,0,CLSID_DirectMusicPerformance,0,IID_IDirectMusicPerformance,(void **)&pPerf);
; 1909 :         }
; 1910 :         else
; 1911 :         {
; 1912 :             hr = pUnknown->QueryInterface(IID_IDirectMusicPerformance,(void **)&pPerf);
; 1913 :         }
; 1914 :         if (SUCCEEDED(hr))
; 1915 :         {
; 1916 :             TListItem<WavePart>* pPart = m_WavePartList.GetHead();
; 1917 :             for(; pPart; pPart = pPart->GetNext())
; 1918 :             {
; 1919 :                 pPart->GetItemValue().Unload(pPerf, pPath, NULL);
; 1920 :             }
; 1921 :         }
; 1922 :         if (pPath) pPath->Release();
; 1923 :         if (pPerf) pPerf->Release();
; 1924 :     }
; 1925 :     else if(rguidType == GUID_Enable_Auto_Download)
; 1926 :     {
; 1927 :         m_fAutoDownload = TRUE;
; 1928 :         m_fLockAutoDownload = TRUE;
; 1929 :     }
; 1930 :     else if(rguidType == GUID_Disable_Auto_Download)
; 1931 :     {
; 1932 :         m_fAutoDownload = FALSE;
; 1933 :         m_fLockAutoDownload = TRUE;
; 1934 :     }
; 1935 : #endif
; 1936 :     else

  0009d	eb 07		 jmp	 SHORT $L70153
$L70146:

; 1937 :     {
; 1938 :         hr = DMUS_E_TYPE_UNSUPPORTED;

  0009f	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L70153:

; 1939 :     }
; 1940 : 
; 1941 :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  000a6	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000a9	83 c2 10	 add	 edx, 16			; 00000010H
  000ac	52		 push	 edx
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 1942 : 
; 1943 :     return hr;

  000b3	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
$L70135:

; 1944 : }

  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c2 1c 00	 ret	 28			; 0000001cH
?SetParamEx@CWavTrack@@UAGJABU_GUID@@_JPAX2K@Z ENDP	; CWavTrack::SetParamEx
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddNotificationType@CWavTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguidNotification$ = 12
?AddNotificationType@CWavTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CWavTrack::AddNotificationType, COMDAT

; 1957 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1958 :     return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 1959 : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?AddNotificationType@CWavTrack@@UAGJABU_GUID@@@Z ENDP	; CWavTrack::AddNotificationType
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RemoveNotificationType@CWavTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguidNotification$ = 12
?RemoveNotificationType@CWavTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CWavTrack::RemoveNotificationType, COMDAT

; 1972 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1973 :     return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 1974 : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?RemoveNotificationType@CWavTrack@@UAGJABU_GUID@@@Z ENDP ; CWavTrack::RemoveNotificationType
_TEXT	ENDS
PUBLIC	??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@ ; `string'
PUBLIC	??_C@_0EG@JDCIEGEM@Error?3?5Wave?5track?5clone?5failed?5b@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??Clone@CWavTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Clone@CWavTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::Clone', 00H		; `CWavTrack::Clone'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
CONST	SEGMENT
??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@ DB '%s: Inva'
	DB	'lid pointer ppTrack', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@JDCIEGEM@Error?3?5Wave?5track?5clone?5failed?5b@
CONST	SEGMENT
??_C@_0EG@JDCIEGEM@Error?3?5Wave?5track?5clone?5failed?5b@ DB 'Error: Wav'
	DB	'e track clone failed because of invalid start or end time.', 0aH
	DB	00H						; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Clone@CWavTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT
tv87 = -16
$T71398 = -12
_hr$ = -8
_pDM$ = -4
_this$ = 8
_mtStart$ = 12
_mtEnd$ = 16
_ppTrack$ = 20
?Clone@CWavTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z PROC NEAR ; CWavTrack::Clone, COMDAT

; 1992 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1993 :     V_INAME(IDirectMusicTrack::Clone);
; 1994 :     V_PTRPTR_WRITE(ppTrack);

  00006	6a 04		 push	 4
  00008	8b 45 14	 mov	 eax, DWORD PTR _ppTrack$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L70174
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Clone@CWavTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L70174:

; 1995 : 
; 1996 :     HRESULT hr = S_OK;

  0002e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1997 : 
; 1998 :     if((mtStart < 0 )||(mtStart > mtEnd))

  00035	83 7d 0c 00	 cmp	 DWORD PTR _mtStart$[ebp], 0
  00039	7c 08		 jl	 SHORT $L70178
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  0003e	3b 4d 10	 cmp	 ecx, DWORD PTR _mtEnd$[ebp]
  00041	7e 19		 jle	 SHORT $L70177
$L70178:

; 1999 :     {
; 2000 :         Trace(1,"Error: Wave track clone failed because of invalid start or end time.\n");

  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EG@JDCIEGEM@Error?3?5Wave?5track?5clone?5failed?5b@
  00048	6a 01		 push	 1
  0004a	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004f	83 c4 08	 add	 esp, 8

; 2001 :         return E_INVALIDARG;

  00052	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00057	e9 a3 00 00 00	 jmp	 $L70170
$L70177:

; 2002 :     }
; 2003 : 
; 2004 :     ENTER_CRITICAL_SECTION(&m_CrSec);

  0005c	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	83 c2 10	 add	 edx, 16			; 00000010H
  00062	52		 push	 edx
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 2005 :     CWavTrack *pDM;
; 2006 :     NEWCATCH(pDM,CWavTrack(*this, mtStart, mtEnd))

  00069	6a 64		 push	 100			; 00000064H
  0006b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00070	83 c4 04	 add	 esp, 4
  00073	89 45 f4	 mov	 DWORD PTR $T71398[ebp], eax
  00076	83 7d f4 00	 cmp	 DWORD PTR $T71398[ebp], 0
  0007a	74 1c		 je	 SHORT $L71399
  0007c	8b 45 10	 mov	 eax, DWORD PTR _mtEnd$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  00083	51		 push	 ecx
  00084	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00087	83 ea 08	 sub	 edx, 8
  0008a	52		 push	 edx
  0008b	8b 4d f4	 mov	 ecx, DWORD PTR $T71398[ebp]
  0008e	e8 00 00 00 00	 call	 ??0CWavTrack@@QAE@ABV0@JJ@Z ; CWavTrack::CWavTrack
  00093	89 45 f0	 mov	 DWORD PTR tv87[ebp], eax
  00096	eb 07		 jmp	 SHORT $L71400
$L71399:
  00098	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$L71400:
  0009f	8b 45 f0	 mov	 eax, DWORD PTR tv87[ebp]
  000a2	89 45 fc	 mov	 DWORD PTR _pDM$[ebp], eax

; 2007 : 
; 2008 :     if (pDM == NULL)

  000a5	83 7d fc 00	 cmp	 DWORD PTR _pDM$[ebp], 0
  000a9	75 09		 jne	 SHORT $L70184

; 2009 :     {
; 2010 :         hr = E_OUTOFMEMORY;

  000ab	c7 45 f8 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 2011 :     }
; 2012 :     else

  000b2	eb 3b		 jmp	 SHORT $L70186
$L70184:

; 2013 :     {
; 2014 :         hr = pDM->InitTrack(m_dwPChannelsUsed);

  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000ba	52		 push	 edx
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _pDM$[ebp]
  000be	e8 00 00 00 00	 call	 ?InitTrack@CWavTrack@@IAEJK@Z ; CWavTrack::InitTrack
  000c3	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 2015 :         if (SUCCEEDED(hr))

  000c6	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ca	7c 17		 jl	 SHORT $L70188

; 2016 :         {
; 2017 :             hr = pDM->QueryInterface(IID_IDirectMusicTrack, (void**)ppTrack);

  000cc	8b 45 14	 mov	 eax, DWORD PTR _ppTrack$[ebp]
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack
  000d5	8b 4d fc	 mov	 ecx, DWORD PTR _pDM$[ebp]
  000d8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000da	8b 45 fc	 mov	 eax, DWORD PTR _pDM$[ebp]
  000dd	50		 push	 eax
  000de	ff 12		 call	 DWORD PTR [edx]
  000e0	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L70188:

; 2018 :         }
; 2019 :         pDM->Release();

  000e3	8b 4d fc	 mov	 ecx, DWORD PTR _pDM$[ebp]
  000e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e8	8b 45 fc	 mov	 eax, DWORD PTR _pDM$[ebp]
  000eb	50		 push	 eax
  000ec	ff 52 08	 call	 DWORD PTR [edx+8]
$L70186:

; 2020 :     }
; 2021 : 
; 2022 :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  000ef	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	83 c1 10	 add	 ecx, 16			; 00000010H
  000f5	51		 push	 ecx
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 2023 :     return hr;

  000fc	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L70170:

; 2024 : }

  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 10 00	 ret	 16			; 00000010H
?Clone@CWavTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z ENDP	; CWavTrack::Clone
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Compose@CWavTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT
_this$ = 8
_pContext$ = 12
_dwTrackGroup$ = 16
_ppResultTrack$ = 20
?Compose@CWavTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z PROC NEAR ; CWavTrack::Compose, COMDAT

; 2031 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2032 :     return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 2033 : }

  00008	5d		 pop	 ebp
  00009	c2 10 00	 ret	 16			; 00000010H
?Compose@CWavTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z ENDP ; CWavTrack::Compose
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Join@CWavTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z
_TEXT	SEGMENT
_this$ = 8
_pNewTrack$ = 12
_mtJoin$ = 16
_pContext$ = 20
_dwTrackGroup$ = 24
_ppResultTrack$ = 28
?Join@CWavTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z PROC NEAR ; CWavTrack::Join, COMDAT

; 2041 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2042 :     return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 2043 : }

  00008	5d		 pop	 ebp
  00009	c2 18 00	 ret	 24			; 00000018H
?Join@CWavTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z ENDP ; CWavTrack::Join
_TEXT	ENDS
PUBLIC	?ComputeVariation@CWavTrack@@IAEJHAAUWavePart@@PAUWaveStateData@@@Z ; CWavTrack::ComputeVariation
PUBLIC	??_C@_0DF@JEELNDEJ@Error?3?5Unable?5to?5play?5wave?5track@ ; `string'
;	COMDAT ??_C@_0DF@JEELNDEJ@Error?3?5Unable?5to?5play?5wave?5track@
CONST	SEGMENT
??_C@_0DF@JEELNDEJ@Error?3?5Unable?5to?5play?5wave?5track@ DB 'Error: Una'
	DB	'ble to play wave track - not initialized.', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?ComputeVariations@CWavTrack@@IAEJPAUWaveStateData@@@Z
_TEXT	SEGMENT
_this$ = -16
_i$70218 = -12
_hr$ = -8
_pScan$ = -4
_pSD$ = 8
?ComputeVariations@CWavTrack@@IAEJPAUWaveStateData@@@Z PROC NEAR ; CWavTrack::ComputeVariations, COMDAT
; _this$ = ecx

; 2046 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :     if (!pSD) 

  00009	83 7d 08 00	 cmp	 DWORD PTR _pSD$[ebp], 0
  0000d	75 19		 jne	 SHORT $L70210

; 2048 :     {
; 2049 :         Trace(1,"Error: Unable to play wave track - not initialized.\n");

  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@JEELNDEJ@Error?3?5Unable?5to?5play?5wave?5track@
  00014	6a 01		 push	 1
  00016	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0001b	83 c4 08	 add	 esp, 8

; 2050 :         return DMUS_E_NOT_INIT;

  0001e	b8 62 11 78 88	 mov	 eax, -2005397150	; 88781162H
  00023	e9 97 00 00 00	 jmp	 $L70209
$L70210:

; 2051 :     }
; 2052 :     HRESULT hr = S_OK;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 2053 :     // First, initialize the array of variation groups.
; 2054 :     for (int i = 0; i < MAX_WAVE_VARIATION_LOCKS; i++)

  0002f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$70218[ebp], 0
  00036	eb 09		 jmp	 SHORT $L70219
$L70220:
  00038	8b 45 f4	 mov	 eax, DWORD PTR _i$70218[ebp]
  0003b	83 c0 01	 add	 eax, 1
  0003e	89 45 f4	 mov	 DWORD PTR _i$70218[ebp], eax
$L70219:
  00041	81 7d f4 ff 00
	00 00		 cmp	 DWORD PTR _i$70218[ebp], 255 ; 000000ffH
  00048	7d 10		 jge	 SHORT $L70221

; 2055 :     {
; 2056 :         pSD->adwVariationGroups[i] = 0;

  0004a	8b 4d f4	 mov	 ecx, DWORD PTR _i$70218[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _pSD$[ebp]
  00050	c7 44 8a 18 00
	00 00 00	 mov	 DWORD PTR [edx+ecx*4+24], 0

; 2057 :     }

  00058	eb de		 jmp	 SHORT $L70220
$L70221:

; 2058 :     // Now, compute the variations for each part.
; 2059 :     TListItem<WavePart>* pScan = m_WavePartList.GetHead();

  0005a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	83 c1 48	 add	 ecx, 72			; 00000048H
  00060	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
  00065	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax

; 2060 :     for (i = 0; pScan && i < (int)m_dwPChannelsUsed; pScan = pScan->GetNext(), i++)

  00068	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$70218[ebp], 0
  0006f	eb 14		 jmp	 SHORT $L70224
$L70225:
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00074	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  00079	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
  0007c	8b 45 f4	 mov	 eax, DWORD PTR _i$70218[ebp]
  0007f	83 c0 01	 add	 eax, 1
  00082	89 45 f4	 mov	 DWORD PTR _i$70218[ebp], eax
$L70224:
  00085	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00089	74 31		 je	 SHORT $L70226
  0008b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	8b 55 f4	 mov	 edx, DWORD PTR _i$70218[ebp]
  00091	3b 51 40	 cmp	 edx, DWORD PTR [ecx+64]
  00094	7d 26		 jge	 SHORT $L70226

; 2061 :     {
; 2062 :         hr = ComputeVariation(i, pScan->GetItemValue(), pSD);

  00096	8b 45 08	 mov	 eax, DWORD PTR _pSD$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0009d	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  000a2	50		 push	 eax
  000a3	8b 4d f4	 mov	 ecx, DWORD PTR _i$70218[ebp]
  000a6	51		 push	 ecx
  000a7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	e8 00 00 00 00	 call	 ?ComputeVariation@CWavTrack@@IAEJHAAUWavePart@@PAUWaveStateData@@@Z ; CWavTrack::ComputeVariation
  000af	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 2063 :         if (FAILED(hr))

  000b2	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b6	7d 02		 jge	 SHORT $L70228

; 2064 :         {
; 2065 :             break;

  000b8	eb 02		 jmp	 SHORT $L70226
$L70228:

; 2066 :         }
; 2067 :     }

  000ba	eb b5		 jmp	 SHORT $L70225
$L70226:

; 2068 :     return hr;

  000bc	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L70209:

; 2069 : }

  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 04 00	 ret	 4
?ComputeVariations@CWavTrack@@IAEJPAUWaveStateData@@@Z ENDP ; CWavTrack::ComputeVariations
_TEXT	ENDS
EXTRN	_GUID_Variations:BYTE
; Function compile flags: /Odt
;	COMDAT ?SyncVariations@CWavTrack@@IAEJPAUIDirectMusicPerformance@@PAUWaveStateData@@_J2H@Z
_TEXT	SEGMENT
_this$ = -56
_dwSyncPart$70270 = -52
_rPart$70269 = -48
_dwPart$70265 = -44
_nGroup$70260 = -40
_pScan$70264 = -36
_hr$ = -32
_mtNow$ = -28
_rtNext$ = -24
_Variations$ = -16
_mtNext$ = -4
_pPerf$ = 8
_pSD$ = 12
_rtStart$ = 16
_rtOffset$ = 24
_fClockTime$ = 32
?SyncVariations@CWavTrack@@IAEJPAUIDirectMusicPerformance@@PAUWaveStateData@@_J2H@Z PROC NEAR ; CWavTrack::SyncVariations, COMDAT
; _this$ = ecx

; 2076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 2077 :     if (!pSD) 

  0000a	83 7d 0c 00	 cmp	 DWORD PTR _pSD$[ebp], 0
  0000e	75 19		 jne	 SHORT $L70237

; 2078 :     {
; 2079 :         Trace(1,"Error: Unable to play wave track - not initialized.\n");

  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@JEELNDEJ@Error?3?5Unable?5to?5play?5wave?5track@
  00015	6a 01		 push	 1
  00017	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0001c	83 c4 08	 add	 esp, 8

; 2080 :         return DMUS_E_NOT_INIT;

  0001f	b8 62 11 78 88	 mov	 eax, -2005397150	; 88781162H
  00024	e9 3f 02 00 00	 jmp	 $L70236
$L70237:

; 2081 :     }
; 2082 :     HRESULT hr = S_OK;

  00029	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 2083 :     // Get the current variations
; 2084 :     DMUS_VARIATIONS_PARAM Variations;
; 2085 :     memset(&Variations, 0, sizeof(Variations));

  00030	6a 0c		 push	 12			; 0000000cH
  00032	6a 00		 push	 0
  00034	8d 45 f0	 lea	 eax, DWORD PTR _Variations$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _memset
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 :     // Call GetParam for variations to sync to
; 2087 :     MUSIC_TIME mtNow = 0;

  00040	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _mtNow$[ebp], 0

; 2088 :     MUSIC_TIME mtNext = 0;

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mtNext$[ebp], 0

; 2089 :     REFERENCE_TIME rtNext = 0;

  0004e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _rtNext$[ebp], 0
  00055	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _rtNext$[ebp+4], 0

; 2090 :     if (fClockTime)

  0005c	83 7d 20 00	 cmp	 DWORD PTR _fClockTime$[ebp], 0
  00060	0f 84 95 00 00
	00		 je	 $L70248

; 2091 :     {
; 2092 :         pPerf->ReferenceToMusicTime(pSD->rtNextVariation + rtOffset, &mtNow);

  00066	8d 4d e4	 lea	 ecx, DWORD PTR _mtNow$[ebp]
  00069	51		 push	 ecx
  0006a	8b 55 0c	 mov	 edx, DWORD PTR _pSD$[ebp]
  0006d	8b 82 18 04 00
	00		 mov	 eax, DWORD PTR [edx+1048]
  00073	03 45 18	 add	 eax, DWORD PTR _rtOffset$[ebp]
  00076	8b 8a 1c 04 00
	00		 mov	 ecx, DWORD PTR [edx+1052]
  0007c	13 4d 1c	 adc	 ecx, DWORD PTR _rtOffset$[ebp+4]
  0007f	51		 push	 ecx
  00080	50		 push	 eax
  00081	8b 55 08	 mov	 edx, DWORD PTR _pPerf$[ebp]
  00084	8b 02		 mov	 eax, DWORD PTR [edx]
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00089	51		 push	 ecx
  0008a	ff 50 18	 call	 DWORD PTR [eax+24]

; 2093 :         hr = pPerf->GetParam(GUID_Variations, 0xffffffff, DMUS_SEG_ANYTRACK, mtNow, &mtNext, (void*) &Variations);

  0008d	8d 55 f0	 lea	 edx, DWORD PTR _Variations$[ebp]
  00090	52		 push	 edx
  00091	8d 45 fc	 lea	 eax, DWORD PTR _mtNext$[ebp]
  00094	50		 push	 eax
  00095	8b 4d e4	 mov	 ecx, DWORD PTR _mtNow$[ebp]
  00098	51		 push	 ecx
  00099	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0009e	6a ff		 push	 -1
  000a0	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_Variations
  000a5	8b 55 08	 mov	 edx, DWORD PTR _pPerf$[ebp]
  000a8	8b 02		 mov	 eax, DWORD PTR [edx]
  000aa	8b 4d 08	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  000ad	51		 push	 ecx
  000ae	ff 50 6c	 call	 DWORD PTR [eax+108]
  000b1	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax

; 2094 :         if (SUCCEEDED(hr) &&
; 2095 :             SUCCEEDED(pPerf->MusicToReferenceTime(mtNext + mtNow, &rtNext)) )

  000b4	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b8	7c 3f		 jl	 SHORT $L70252
  000ba	8d 55 e8	 lea	 edx, DWORD PTR _rtNext$[ebp]
  000bd	52		 push	 edx
  000be	8b 45 fc	 mov	 eax, DWORD PTR _mtNext$[ebp]
  000c1	03 45 e4	 add	 eax, DWORD PTR _mtNow$[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  000c8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ca	8b 45 08	 mov	 eax, DWORD PTR _pPerf$[ebp]
  000cd	50		 push	 eax
  000ce	ff 52 14	 call	 DWORD PTR [edx+20]
  000d1	85 c0		 test	 eax, eax
  000d3	7c 24		 jl	 SHORT $L70252

; 2096 :         {
; 2097 :             pSD->rtNextVariation += rtNext;

  000d5	8b 4d 0c	 mov	 ecx, DWORD PTR _pSD$[ebp]
  000d8	8b 91 18 04 00
	00		 mov	 edx, DWORD PTR [ecx+1048]
  000de	03 55 e8	 add	 edx, DWORD PTR _rtNext$[ebp]
  000e1	8b 81 1c 04 00
	00		 mov	 eax, DWORD PTR [ecx+1052]
  000e7	13 45 ec	 adc	 eax, DWORD PTR _rtNext$[ebp+4]
  000ea	8b 4d 0c	 mov	 ecx, DWORD PTR _pSD$[ebp]
  000ed	89 91 18 04 00
	00		 mov	 DWORD PTR [ecx+1048], edx
  000f3	89 81 1c 04 00
	00		 mov	 DWORD PTR [ecx+1052], eax
$L70252:

; 2098 :         }
; 2099 :     }
; 2100 :     else

  000f9	eb 6b		 jmp	 SHORT $L70253
$L70248:

; 2101 :     {
; 2102 :         mtNow = (MUSIC_TIME) (pSD->rtNextVariation + rtOffset);

  000fb	8b 55 0c	 mov	 edx, DWORD PTR _pSD$[ebp]
  000fe	8b 82 18 04 00
	00		 mov	 eax, DWORD PTR [edx+1048]
  00104	03 45 18	 add	 eax, DWORD PTR _rtOffset$[ebp]
  00107	8b 8a 1c 04 00
	00		 mov	 ecx, DWORD PTR [edx+1052]
  0010d	13 4d 1c	 adc	 ecx, DWORD PTR _rtOffset$[ebp+4]
  00110	89 45 e4	 mov	 DWORD PTR _mtNow$[ebp], eax

; 2103 :         hr = pPerf->GetParam(GUID_Variations, 0xffffffff, DMUS_SEG_ANYTRACK, mtNow, &mtNext, (void*) &Variations);

  00113	8d 55 f0	 lea	 edx, DWORD PTR _Variations$[ebp]
  00116	52		 push	 edx
  00117	8d 45 fc	 lea	 eax, DWORD PTR _mtNext$[ebp]
  0011a	50		 push	 eax
  0011b	8b 4d e4	 mov	 ecx, DWORD PTR _mtNow$[ebp]
  0011e	51		 push	 ecx
  0011f	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00124	6a ff		 push	 -1
  00126	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_Variations
  0012b	8b 55 08	 mov	 edx, DWORD PTR _pPerf$[ebp]
  0012e	8b 02		 mov	 eax, DWORD PTR [edx]
  00130	8b 4d 08	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00133	51		 push	 ecx
  00134	ff 50 6c	 call	 DWORD PTR [eax+108]
  00137	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax

; 2104 :         if (SUCCEEDED(hr))

  0013a	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0013e	7c 26		 jl	 SHORT $L70253

; 2105 :         {
; 2106 :             pSD->rtNextVariation += mtNext;

  00140	8b 45 fc	 mov	 eax, DWORD PTR _mtNext$[ebp]
  00143	99		 cdq
  00144	8b 4d 0c	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00147	8b b1 18 04 00
	00		 mov	 esi, DWORD PTR [ecx+1048]
  0014d	03 f0		 add	 esi, eax
  0014f	8b 81 1c 04 00
	00		 mov	 eax, DWORD PTR [ecx+1052]
  00155	13 c2		 adc	 eax, edx
  00157	8b 4d 0c	 mov	 ecx, DWORD PTR _pSD$[ebp]
  0015a	89 b1 18 04 00
	00		 mov	 DWORD PTR [ecx+1048], esi
  00160	89 81 1c 04 00
	00		 mov	 DWORD PTR [ecx+1052], eax
$L70253:

; 2107 :         }
; 2108 :     }
; 2109 :     if (SUCCEEDED(hr))

  00166	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0016a	0f 8c e7 00 00
	00		 jl	 $L70259

; 2110 :     {
; 2111 :         // Initialize the array of variation groups.
; 2112 :         for (int nGroup = 0; nGroup < MAX_WAVE_VARIATION_LOCKS; nGroup++)

  00170	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _nGroup$70260[ebp], 0
  00177	eb 09		 jmp	 SHORT $L70261
$L70262:
  00179	8b 55 d8	 mov	 edx, DWORD PTR _nGroup$70260[ebp]
  0017c	83 c2 01	 add	 edx, 1
  0017f	89 55 d8	 mov	 DWORD PTR _nGroup$70260[ebp], edx
$L70261:
  00182	81 7d d8 ff 00
	00 00		 cmp	 DWORD PTR _nGroup$70260[ebp], 255 ; 000000ffH
  00189	7d 10		 jge	 SHORT $L70263

; 2113 :         {
; 2114 :             pSD->adwVariationGroups[nGroup] = 0;

  0018b	8b 45 d8	 mov	 eax, DWORD PTR _nGroup$70260[ebp]
  0018e	8b 4d 0c	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00191	c7 44 81 18 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*4+24], 0

; 2115 :         }

  00199	eb de		 jmp	 SHORT $L70262
$L70263:

; 2116 :         TListItem<WavePart>* pScan = m_WavePartList.GetHead();

  0019b	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019e	83 c1 48	 add	 ecx, 72			; 00000048H
  001a1	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
  001a6	89 45 dc	 mov	 DWORD PTR _pScan$70264[ebp], eax

; 2117 :         for (DWORD dwPart = 0; pScan && dwPart < m_dwPChannelsUsed; pScan = pScan->GetNext(), dwPart++)

  001a9	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _dwPart$70265[ebp], 0
  001b0	eb 14		 jmp	 SHORT $L70266
$L70267:
  001b2	8b 4d dc	 mov	 ecx, DWORD PTR _pScan$70264[ebp]
  001b5	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  001ba	89 45 dc	 mov	 DWORD PTR _pScan$70264[ebp], eax
  001bd	8b 55 d4	 mov	 edx, DWORD PTR _dwPart$70265[ebp]
  001c0	83 c2 01	 add	 edx, 1
  001c3	89 55 d4	 mov	 DWORD PTR _dwPart$70265[ebp], edx
$L70266:
  001c6	83 7d dc 00	 cmp	 DWORD PTR _pScan$70264[ebp], 0
  001ca	0f 84 85 00 00
	00		 je	 $L70268
  001d0	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  001d3	8b 4d d4	 mov	 ecx, DWORD PTR _dwPart$70265[ebp]
  001d6	3b 48 40	 cmp	 ecx, DWORD PTR [eax+64]
  001d9	73 7a		 jae	 SHORT $L70268

; 2118 :         {
; 2119 :             WavePart& rPart = pScan->GetItemValue();

  001db	8b 4d dc	 mov	 ecx, DWORD PTR _pScan$70264[ebp]
  001de	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  001e3	89 45 d0	 mov	 DWORD PTR _rPart$70269[ebp], eax

; 2120 :             for (DWORD dwSyncPart = 0; dwSyncPart < Variations.dwPChannelsUsed; dwSyncPart++)

  001e6	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _dwSyncPart$70270[ebp], 0
  001ed	eb 09		 jmp	 SHORT $L70271
$L70272:
  001ef	8b 55 cc	 mov	 edx, DWORD PTR _dwSyncPart$70270[ebp]
  001f2	83 c2 01	 add	 edx, 1
  001f5	89 55 cc	 mov	 DWORD PTR _dwSyncPart$70270[ebp], edx
$L70271:
  001f8	8b 45 cc	 mov	 eax, DWORD PTR _dwSyncPart$70270[ebp]
  001fb	3b 45 f0	 cmp	 eax, DWORD PTR _Variations$[ebp]
  001fe	73 29		 jae	 SHORT $L70273

; 2121 :             {
; 2122 :                 if (rPart.m_dwPChannel == Variations.padwPChannels[dwSyncPart])

  00200	8b 4d d0	 mov	 ecx, DWORD PTR _rPart$70269[ebp]
  00203	8b 55 cc	 mov	 edx, DWORD PTR _dwSyncPart$70270[ebp]
  00206	8b 45 f4	 mov	 eax, DWORD PTR _Variations$[ebp+4]
  00209	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0020b	3b 0c 90	 cmp	 ecx, DWORD PTR [eax+edx*4]
  0020e	75 17		 jne	 SHORT $L70274

; 2123 :                 {
; 2124 :                     pSD->pdwVariations[dwPart] = Variations.padwVariations[dwSyncPart];

  00210	8b 55 0c	 mov	 edx, DWORD PTR _pSD$[ebp]
  00213	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00216	8b 4d d4	 mov	 ecx, DWORD PTR _dwPart$70265[ebp]
  00219	8b 55 cc	 mov	 edx, DWORD PTR _dwSyncPart$70270[ebp]
  0021c	8b 75 f8	 mov	 esi, DWORD PTR _Variations$[ebp+8]
  0021f	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00222	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx

; 2125 :                     break;

  00225	eb 02		 jmp	 SHORT $L70273
$L70274:

; 2126 :                 }
; 2127 :             }

  00227	eb c6		 jmp	 SHORT $L70272
$L70273:

; 2128 :             if (dwSyncPart == Variations.dwPChannelsUsed) // no part to sync to

  00229	8b 45 cc	 mov	 eax, DWORD PTR _dwSyncPart$70270[ebp]
  0022c	3b 45 f0	 cmp	 eax, DWORD PTR _Variations$[ebp]
  0022f	75 1f		 jne	 SHORT $L70275

; 2129 :             {
; 2130 :                 hr = ComputeVariation((int)dwPart, rPart, pSD);

  00231	8b 4d 0c	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00234	51		 push	 ecx
  00235	8b 55 d0	 mov	 edx, DWORD PTR _rPart$70269[ebp]
  00238	52		 push	 edx
  00239	8b 45 d4	 mov	 eax, DWORD PTR _dwPart$70265[ebp]
  0023c	50		 push	 eax
  0023d	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00240	e8 00 00 00 00	 call	 ?ComputeVariation@CWavTrack@@IAEJHAAUWavePart@@PAUWaveStateData@@@Z ; CWavTrack::ComputeVariation
  00245	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax

; 2131 :                 if (FAILED(hr))

  00248	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0024c	7d 02		 jge	 SHORT $L70275

; 2132 :                 {
; 2133 :                     break;

  0024e	eb 05		 jmp	 SHORT $L70268
$L70275:

; 2134 :                 }
; 2135 :             }
; 2136 :         }

  00250	e9 5d ff ff ff	 jmp	 $L70267
$L70268:

; 2137 :     }
; 2138 :     else

  00255	eb 0e		 jmp	 SHORT $L70279
$L70259:

; 2139 :     {
; 2140 :         return ComputeVariations(pSD);

  00257	8b 4d 0c	 mov	 ecx, DWORD PTR _pSD$[ebp]
  0025a	51		 push	 ecx
  0025b	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0025e	e8 00 00 00 00	 call	 ?ComputeVariations@CWavTrack@@IAEJPAUWaveStateData@@@Z ; CWavTrack::ComputeVariations
  00263	eb 03		 jmp	 SHORT $L70236
$L70279:

; 2141 :     }
; 2142 :     return hr;

  00265	8b 45 e0	 mov	 eax, DWORD PTR _hr$[ebp]
$L70236:

; 2143 : }

  00268	5e		 pop	 esi
  00269	8b e5		 mov	 esp, ebp
  0026b	5d		 pop	 ebp
  0026c	c2 1c 00	 ret	 28			; 0000001cH
?SyncVariations@CWavTrack@@IAEJPAUIDirectMusicPerformance@@PAUWaveStateData@@_J2H@Z ENDP ; CWavTrack::SyncVariations
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?ComputeVariation@CWavTrack@@IAEJHAAUWavePart@@PAUWaveStateData@@@Z
_TEXT	SEGMENT
tv157 = -56
_this$ = -52
_nStart$70328 = -48
_nCount$70330 = -44
_nChoice$70316 = -40
_nCount$70318 = -36
_i$70305 = -32
_n$70292 = -28
_dwMatches$70290 = -24
_bMode$70297 = -17
_nMatchCount$70291 = -16
_nV$70310 = -12
_dwTemp$70299 = -8
_bLockID$ = -1
_nPart$ = 8
_rWavePart$ = 12
_pSD$ = 16
?ComputeVariation@CWavTrack@@IAEJHAAUWavePart@@PAUWaveStateData@@@Z PROC NEAR ; CWavTrack::ComputeVariation, COMDAT
; _this$ = ecx

; 2146 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 2147 :     BYTE bLockID = (BYTE)rWavePart.m_dwLockToPart;

  0000a	8b 45 0c	 mov	 eax, DWORD PTR _rWavePart$[ebp]
  0000d	8a 48 10	 mov	 cl, BYTE PTR [eax+16]
  00010	88 4d ff	 mov	 BYTE PTR _bLockID$[ebp], cl

; 2148 :     if (bLockID && pSD->adwVariationGroups[bLockID - 1] != 0)

  00013	0f b6 55 ff	 movzx	 edx, BYTE PTR _bLockID$[ebp]
  00017	85 d2		 test	 edx, edx
  00019	74 2a		 je	 SHORT $L70288
  0001b	0f b6 45 ff	 movzx	 eax, BYTE PTR _bLockID$[ebp]
  0001f	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00022	83 7c 81 14 00	 cmp	 DWORD PTR [ecx+eax*4+20], 0
  00027	74 1c		 je	 SHORT $L70288

; 2149 :     {
; 2150 :         pSD->pdwVariations[nPart] = pSD->adwVariationGroups[bLockID - 1];

  00029	0f b6 55 ff	 movzx	 edx, BYTE PTR _bLockID$[ebp]
  0002d	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  00030	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00033	8b 45 08	 mov	 eax, DWORD PTR _nPart$[ebp]
  00036	8b 75 10	 mov	 esi, DWORD PTR _pSD$[ebp]
  00039	8b 54 96 14	 mov	 edx, DWORD PTR [esi+edx*4+20]
  0003d	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 2151 :     }
; 2152 :     else

  00040	e9 76 03 00 00	 jmp	 $L70289
$L70288:

; 2153 :     {
; 2154 :         // First, collect all matches.
; 2155 :         DWORD dwMatches = rWavePart.m_dwVariations;

  00045	8b 45 0c	 mov	 eax, DWORD PTR _rWavePart$[ebp]
  00048	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0004b	89 4d e8	 mov	 DWORD PTR _dwMatches$70290[ebp], ecx

; 2156 :         int nMatchCount = 0;

  0004e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _nMatchCount$70291[ebp], 0

; 2157 :         for (int n = 0; n < 32; n++)

  00055	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _n$70292[ebp], 0
  0005c	eb 09		 jmp	 SHORT $L70293
$L70294:
  0005e	8b 55 e4	 mov	 edx, DWORD PTR _n$70292[ebp]
  00061	83 c2 01	 add	 edx, 1
  00064	89 55 e4	 mov	 DWORD PTR _n$70292[ebp], edx
$L70293:
  00067	83 7d e4 20	 cmp	 DWORD PTR _n$70292[ebp], 32 ; 00000020H
  0006b	7d 1e		 jge	 SHORT $L70295

; 2158 :         {
; 2159 :             if (dwMatches & (1 << n)) nMatchCount++;

  0006d	b8 01 00 00 00	 mov	 eax, 1
  00072	8b 4d e4	 mov	 ecx, DWORD PTR _n$70292[ebp]
  00075	d3 e0		 shl	 eax, cl
  00077	8b 4d e8	 mov	 ecx, DWORD PTR _dwMatches$70290[ebp]
  0007a	23 c8		 and	 ecx, eax
  0007c	85 c9		 test	 ecx, ecx
  0007e	74 09		 je	 SHORT $L70296
  00080	8b 55 f0	 mov	 edx, DWORD PTR _nMatchCount$70291[ebp]
  00083	83 c2 01	 add	 edx, 1
  00086	89 55 f0	 mov	 DWORD PTR _nMatchCount$70291[ebp], edx
$L70296:

; 2160 :         }

  00089	eb d3		 jmp	 SHORT $L70294
$L70295:

; 2161 :         // Now, select a variation based on the part's variation mode.
; 2162 :         BYTE bMode = (BYTE)(rWavePart.m_dwPChannelFlags & 0xf); 

  0008b	8b 45 0c	 mov	 eax, DWORD PTR _rWavePart$[ebp]
  0008e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00091	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00094	88 4d ef	 mov	 BYTE PTR _bMode$70297[ebp], cl

; 2163 :         DWORD dwTemp = dwMatches;

  00097	8b 55 e8	 mov	 edx, DWORD PTR _dwMatches$70290[ebp]
  0009a	89 55 f8	 mov	 DWORD PTR _dwTemp$70299[ebp], edx

; 2164 :         if ( bMode == DMUS_VARIATIONT_RANDOM_ROW )

  0009d	0f b6 45 ef	 movzx	 eax, BYTE PTR _bMode$70297[ebp]
  000a1	83 f8 04	 cmp	 eax, 4
  000a4	75 36		 jne	 SHORT $L70300

; 2165 :         {
; 2166 :             dwTemp &= ~pSD->pdwRemoveVariations[nPart];

  000a6	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  000a9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000ac	8b 45 08	 mov	 eax, DWORD PTR _nPart$[ebp]
  000af	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  000b2	f7 d1		 not	 ecx
  000b4	8b 55 f8	 mov	 edx, DWORD PTR _dwTemp$70299[ebp]
  000b7	23 d1		 and	 edx, ecx
  000b9	89 55 f8	 mov	 DWORD PTR _dwTemp$70299[ebp], edx

; 2167 :             if (!dwTemp)

  000bc	83 7d f8 00	 cmp	 DWORD PTR _dwTemp$70299[ebp], 0
  000c0	75 1a		 jne	 SHORT $L70300

; 2168 :             {
; 2169 :                 // start counting all over, but don't repeat this one
; 2170 :                 pSD->pdwRemoveVariations[nPart] = 0;

  000c2	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  000c5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000c8	8b 55 08	 mov	 edx, DWORD PTR _nPart$[ebp]
  000cb	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0

; 2171 :                 dwTemp = dwMatches;

  000d2	8b 45 e8	 mov	 eax, DWORD PTR _dwMatches$70290[ebp]
  000d5	89 45 f8	 mov	 DWORD PTR _dwTemp$70299[ebp], eax

; 2172 :                 bMode = DMUS_VARIATIONT_NO_REPEAT;

  000d8	c6 45 ef 03	 mov	 BYTE PTR _bMode$70297[ebp], 3
$L70300:

; 2173 :             }
; 2174 :         }
; 2175 :         if ( bMode == DMUS_VARIATIONT_NO_REPEAT && pSD->pdwVariations[nPart] != 0 )

  000dc	0f b6 4d ef	 movzx	 ecx, BYTE PTR _bMode$70297[ebp]
  000e0	83 f9 03	 cmp	 ecx, 3
  000e3	75 25		 jne	 SHORT $L70302
  000e5	8b 55 10	 mov	 edx, DWORD PTR _pSD$[ebp]
  000e8	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _nPart$[ebp]
  000ee	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  000f2	74 16		 je	 SHORT $L70302

; 2176 :         {
; 2177 :             dwTemp &= ~pSD->pdwVariations[nPart];

  000f4	8b 55 10	 mov	 edx, DWORD PTR _pSD$[ebp]
  000f7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000fa	8b 4d 08	 mov	 ecx, DWORD PTR _nPart$[ebp]
  000fd	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  00100	f7 d2		 not	 edx
  00102	8b 45 f8	 mov	 eax, DWORD PTR _dwTemp$70299[ebp]
  00105	23 c2		 and	 eax, edx
  00107	89 45 f8	 mov	 DWORD PTR _dwTemp$70299[ebp], eax
$L70302:

; 2178 :         }
; 2179 :         if (dwTemp != dwMatches)

  0010a	8b 4d f8	 mov	 ecx, DWORD PTR _dwTemp$70299[ebp]
  0010d	3b 4d e8	 cmp	 ecx, DWORD PTR _dwMatches$70290[ebp]
  00110	74 51		 je	 SHORT $L70303

; 2180 :         {
; 2181 :             if (dwTemp) // otherwise, keep what we had

  00112	83 7d f8 00	 cmp	 DWORD PTR _dwTemp$70299[ebp], 0
  00116	74 4b		 je	 SHORT $L70303

; 2182 :             {
; 2183 :                 for (int i = 0; i < 32; i++)

  00118	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$70305[ebp], 0
  0011f	eb 09		 jmp	 SHORT $L70306
$L70307:
  00121	8b 55 e0	 mov	 edx, DWORD PTR _i$70305[ebp]
  00124	83 c2 01	 add	 edx, 1
  00127	89 55 e0	 mov	 DWORD PTR _i$70305[ebp], edx
$L70306:
  0012a	83 7d e0 20	 cmp	 DWORD PTR _i$70305[ebp], 32 ; 00000020H
  0012e	7d 2d		 jge	 SHORT $L70308

; 2184 :                 {
; 2185 :                     if ( ((1 << i) & dwMatches) && !((1 << i) & dwTemp) )

  00130	b8 01 00 00 00	 mov	 eax, 1
  00135	8b 4d e0	 mov	 ecx, DWORD PTR _i$70305[ebp]
  00138	d3 e0		 shl	 eax, cl
  0013a	23 45 e8	 and	 eax, DWORD PTR _dwMatches$70290[ebp]
  0013d	85 c0		 test	 eax, eax
  0013f	74 1a		 je	 SHORT $L70309
  00141	ba 01 00 00 00	 mov	 edx, 1
  00146	8b 4d e0	 mov	 ecx, DWORD PTR _i$70305[ebp]
  00149	d3 e2		 shl	 edx, cl
  0014b	23 55 f8	 and	 edx, DWORD PTR _dwTemp$70299[ebp]
  0014e	85 d2		 test	 edx, edx
  00150	75 09		 jne	 SHORT $L70309

; 2186 :                     {
; 2187 :                         nMatchCount--;

  00152	8b 45 f0	 mov	 eax, DWORD PTR _nMatchCount$70291[ebp]
  00155	83 e8 01	 sub	 eax, 1
  00158	89 45 f0	 mov	 DWORD PTR _nMatchCount$70291[ebp], eax
$L70309:

; 2188 :                     }
; 2189 :                 }

  0015b	eb c4		 jmp	 SHORT $L70307
$L70308:

; 2190 :                 dwMatches = dwTemp;

  0015d	8b 4d f8	 mov	 ecx, DWORD PTR _dwTemp$70299[ebp]
  00160	89 4d e8	 mov	 DWORD PTR _dwMatches$70290[ebp], ecx
$L70303:

; 2191 :             }
; 2192 :         }
; 2193 :         int nV = 0;

  00163	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nV$70310[ebp], 0

; 2194 :         switch (bMode)
; 2195 :         {

  0016a	0f b6 55 ef	 movzx	 edx, BYTE PTR _bMode$70297[ebp]
  0016e	89 55 c8	 mov	 DWORD PTR tv157[ebp], edx
  00171	83 7d c8 04	 cmp	 DWORD PTR tv157[ebp], 4
  00175	0f 87 d2 01 00
	00		 ja	 $L70312
  0017b	8b 45 c8	 mov	 eax, DWORD PTR tv157[ebp]
  0017e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L71416[eax*4]
$L70315:

; 2196 :         case DMUS_VARIATIONT_RANDOM_ROW:
; 2197 :         case DMUS_VARIATIONT_NO_REPEAT:
; 2198 :         case DMUS_VARIATIONT_RANDOM:
; 2199 :             {
; 2200 :                 short nChoice = (short) (dm_rand() % nMatchCount);

  00185	e8 00 00 00 00	 call	 ?dm_rand@@YAHXZ		; dm_rand
  0018a	99		 cdq
  0018b	f7 7d f0	 idiv	 DWORD PTR _nMatchCount$70291[ebp]
  0018e	66 89 55 d8	 mov	 WORD PTR _nChoice$70316[ebp], dx

; 2201 :                 short nCount = 0;

  00192	66 c7 45 dc 00
	00		 mov	 WORD PTR _nCount$70318[ebp], 0

; 2202 :                 for (nV = 0; nV < 32; nV++)

  00198	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nV$70310[ebp], 0
  0019f	eb 09		 jmp	 SHORT $L70319
$L70320:
  001a1	8b 4d f4	 mov	 ecx, DWORD PTR _nV$70310[ebp]
  001a4	83 c1 01	 add	 ecx, 1
  001a7	89 4d f4	 mov	 DWORD PTR _nV$70310[ebp], ecx
$L70319:
  001aa	83 7d f4 20	 cmp	 DWORD PTR _nV$70310[ebp], 32 ; 00000020H
  001ae	7d 2d		 jge	 SHORT $L70321

; 2203 :                 {
; 2204 :                     if ((1 << nV) & dwMatches)

  001b0	ba 01 00 00 00	 mov	 edx, 1
  001b5	8b 4d f4	 mov	 ecx, DWORD PTR _nV$70310[ebp]
  001b8	d3 e2		 shl	 edx, cl
  001ba	23 55 e8	 and	 edx, DWORD PTR _dwMatches$70290[ebp]
  001bd	85 d2		 test	 edx, edx
  001bf	74 1a		 je	 SHORT $L70322

; 2205 :                     {
; 2206 :                         if (nChoice == nCount)

  001c1	0f bf 45 d8	 movsx	 eax, WORD PTR _nChoice$70316[ebp]
  001c5	0f bf 4d dc	 movsx	 ecx, WORD PTR _nCount$70318[ebp]
  001c9	3b c1		 cmp	 eax, ecx
  001cb	75 02		 jne	 SHORT $L70323

; 2207 :                             break;

  001cd	eb 0e		 jmp	 SHORT $L70321
$L70323:

; 2208 :                         nCount++;

  001cf	66 8b 55 dc	 mov	 dx, WORD PTR _nCount$70318[ebp]
  001d3	66 83 c2 01	 add	 dx, 1
  001d7	66 89 55 dc	 mov	 WORD PTR _nCount$70318[ebp], dx
$L70322:

; 2209 :                     }
; 2210 :                 }

  001db	eb c4		 jmp	 SHORT $L70320
$L70321:

; 2211 :                 pSD->pdwVariations[nPart] = 1 << nV;

  001dd	b8 01 00 00 00	 mov	 eax, 1
  001e2	8b 4d f4	 mov	 ecx, DWORD PTR _nV$70310[ebp]
  001e5	d3 e0		 shl	 eax, cl
  001e7	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  001ea	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001ed	8b 4d 08	 mov	 ecx, DWORD PTR _nPart$[ebp]
  001f0	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 2212 :                 if (bMode == DMUS_VARIATIONT_RANDOM_ROW)

  001f3	0f b6 55 ef	 movzx	 edx, BYTE PTR _bMode$70297[ebp]
  001f7	83 fa 04	 cmp	 edx, 4
  001fa	75 24		 jne	 SHORT $L70324

; 2213 :                 {
; 2214 :                     pSD->pdwRemoveVariations[nPart] |= pSD->pdwVariations[nPart];

  001fc	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  001ff	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00202	8b 55 10	 mov	 edx, DWORD PTR _pSD$[ebp]
  00205	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00208	8b 55 08	 mov	 edx, DWORD PTR _nPart$[ebp]
  0020b	8b 75 08	 mov	 esi, DWORD PTR _nPart$[ebp]
  0020e	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00211	0b 0c b0	 or	 ecx, DWORD PTR [eax+esi*4]
  00214	8b 55 10	 mov	 edx, DWORD PTR _pSD$[ebp]
  00217	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0021a	8b 55 08	 mov	 edx, DWORD PTR _nPart$[ebp]
  0021d	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
$L70324:

; 2215 :                 }
; 2216 :                 TraceI(3, "New variation: %d\n", nV);
; 2217 :                 break;

  00220	e9 28 01 00 00	 jmp	 $L70312
$L70326:

; 2218 :             }
; 2219 :         case DMUS_VARIATIONT_RANDOM_START:
; 2220 :             // Choose an initial value
; 2221 :             if (pSD->pdwVariations[nPart] == 0)

  00225	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  00228	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0022b	8b 55 08	 mov	 edx, DWORD PTR _nPart$[ebp]
  0022e	83 3c 91 00	 cmp	 DWORD PTR [ecx+edx*4], 0
  00232	75 71		 jne	 SHORT $L70336

; 2222 :             {
; 2223 :                 int nStart = 0;

  00234	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _nStart$70328[ebp], 0

; 2224 :                 nStart = (BYTE) (dm_rand() % nMatchCount);

  0023b	e8 00 00 00 00	 call	 ?dm_rand@@YAHXZ		; dm_rand
  00240	99		 cdq
  00241	f7 7d f0	 idiv	 DWORD PTR _nMatchCount$70291[ebp]
  00244	0f b6 c2	 movzx	 eax, dl
  00247	89 45 d0	 mov	 DWORD PTR _nStart$70328[ebp], eax

; 2225 :                 int nCount = 0;

  0024a	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _nCount$70330[ebp], 0

; 2226 :                 for (nV = 0; nV < 32; nV++)

  00251	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nV$70310[ebp], 0
  00258	eb 09		 jmp	 SHORT $L70331
$L70332:
  0025a	8b 4d f4	 mov	 ecx, DWORD PTR _nV$70310[ebp]
  0025d	83 c1 01	 add	 ecx, 1
  00260	89 4d f4	 mov	 DWORD PTR _nV$70310[ebp], ecx
$L70331:
  00263	83 7d f4 20	 cmp	 DWORD PTR _nV$70310[ebp], 32 ; 00000020H
  00267	7d 26		 jge	 SHORT $L70333

; 2227 :                 {
; 2228 :                     if ((1 << nV) & dwMatches)

  00269	ba 01 00 00 00	 mov	 edx, 1
  0026e	8b 4d f4	 mov	 ecx, DWORD PTR _nV$70310[ebp]
  00271	d3 e2		 shl	 edx, cl
  00273	23 55 e8	 and	 edx, DWORD PTR _dwMatches$70290[ebp]
  00276	85 d2		 test	 edx, edx
  00278	74 13		 je	 SHORT $L70334

; 2229 :                     {
; 2230 :                         if (nStart == nCount)

  0027a	8b 45 d0	 mov	 eax, DWORD PTR _nStart$70328[ebp]
  0027d	3b 45 d4	 cmp	 eax, DWORD PTR _nCount$70330[ebp]
  00280	75 02		 jne	 SHORT $L70335

; 2231 :                             break;

  00282	eb 0b		 jmp	 SHORT $L70333
$L70335:

; 2232 :                         nCount++;

  00284	8b 4d d4	 mov	 ecx, DWORD PTR _nCount$70330[ebp]
  00287	83 c1 01	 add	 ecx, 1
  0028a	89 4d d4	 mov	 DWORD PTR _nCount$70330[ebp], ecx
$L70334:

; 2233 :                     }
; 2234 :                 }

  0028d	eb cb		 jmp	 SHORT $L70332
$L70333:

; 2235 :                 pSD->pdwVariations[nPart] = 1 << nV;

  0028f	ba 01 00 00 00	 mov	 edx, 1
  00294	8b 4d f4	 mov	 ecx, DWORD PTR _nV$70310[ebp]
  00297	d3 e2		 shl	 edx, cl
  00299	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  0029c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0029f	8b 45 08	 mov	 eax, DWORD PTR _nPart$[ebp]
  002a2	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$L70336:

; 2236 :             }
; 2237 :             // Now, go directly to the sequential case (no break)
; 2238 :         case DMUS_VARIATIONT_SEQUENTIAL:
; 2239 :             {
; 2240 :                 if (!pSD->pdwVariations[nPart]) pSD->pdwVariations[nPart] = 1;

  002a5	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  002a8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002ab	8b 45 08	 mov	 eax, DWORD PTR _nPart$[ebp]
  002ae	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  002b2	75 12		 jne	 SHORT $L70337
  002b4	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  002b7	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002ba	8b 45 08	 mov	 eax, DWORD PTR _nPart$[ebp]
  002bd	c7 04 82 01 00
	00 00		 mov	 DWORD PTR [edx+eax*4], 1

; 2241 :                 else

  002c4	eb 39		 jmp	 SHORT $L70341
$L70337:

; 2242 :                 {
; 2243 :                     pSD->pdwVariations[nPart] <<= 1;

  002c6	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  002c9	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002cc	8b 45 08	 mov	 eax, DWORD PTR _nPart$[ebp]
  002cf	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  002d2	d1 e1		 shl	 ecx, 1
  002d4	8b 55 10	 mov	 edx, DWORD PTR _pSD$[ebp]
  002d7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002da	8b 55 08	 mov	 edx, DWORD PTR _nPart$[ebp]
  002dd	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 2244 :                     if (!pSD->pdwVariations[nPart]) pSD->pdwVariations[nPart] = 1;

  002e0	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  002e3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002e6	8b 55 08	 mov	 edx, DWORD PTR _nPart$[ebp]
  002e9	83 3c 91 00	 cmp	 DWORD PTR [ecx+edx*4], 0
  002ed	75 10		 jne	 SHORT $L70341
  002ef	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  002f2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002f5	8b 55 08	 mov	 edx, DWORD PTR _nPart$[ebp]
  002f8	c7 04 91 01 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 1
$L70341:

; 2245 :                 }
; 2246 :                 while (!(pSD->pdwVariations[nPart] & dwMatches))

  002ff	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  00302	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00305	8b 55 08	 mov	 edx, DWORD PTR _nPart$[ebp]
  00308	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0030b	23 45 e8	 and	 eax, DWORD PTR _dwMatches$70290[ebp]
  0030e	85 c0		 test	 eax, eax
  00310	75 3b		 jne	 SHORT $L70312

; 2247 :                 {
; 2248 :                     pSD->pdwVariations[nPart] <<= 1;

  00312	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00315	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00318	8b 45 08	 mov	 eax, DWORD PTR _nPart$[ebp]
  0031b	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  0031e	d1 e1		 shl	 ecx, 1
  00320	8b 55 10	 mov	 edx, DWORD PTR _pSD$[ebp]
  00323	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00326	8b 55 08	 mov	 edx, DWORD PTR _nPart$[ebp]
  00329	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 2249 :                     if (!pSD->pdwVariations[nPart]) pSD->pdwVariations[nPart] = 1;

  0032c	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  0032f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00332	8b 55 08	 mov	 edx, DWORD PTR _nPart$[ebp]
  00335	83 3c 91 00	 cmp	 DWORD PTR [ecx+edx*4], 0
  00339	75 10		 jne	 SHORT $L70343
  0033b	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  0033e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00341	8b 55 08	 mov	 edx, DWORD PTR _nPart$[ebp]
  00344	c7 04 91 01 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 1
$L70343:

; 2250 :                 } 

  0034b	eb b2		 jmp	 SHORT $L70341
$L70312:

; 2251 :                 TraceI(3, "New variation: %d\n", pSD->pdwVariations[nPart]);
; 2252 :                 break;
; 2253 :             }
; 2254 :         }
; 2255 :         // If this is a locked variation, it's the first in its group, so record it.
; 2256 :         if (bLockID)

  0034d	0f b6 45 ff	 movzx	 eax, BYTE PTR _bLockID$[ebp]
  00351	85 c0		 test	 eax, eax
  00353	74 17		 je	 SHORT $L70344

; 2257 :         {
; 2258 :             pSD->adwVariationGroups[bLockID - 1] = pSD->pdwVariations[nPart];

  00355	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00358	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0035b	0f b6 45 ff	 movzx	 eax, BYTE PTR _bLockID$[ebp]
  0035f	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00362	8b 75 08	 mov	 esi, DWORD PTR _nPart$[ebp]
  00365	8b 14 b2	 mov	 edx, DWORD PTR [edx+esi*4]
  00368	89 54 81 14	 mov	 DWORD PTR [ecx+eax*4+20], edx
$L70344:

; 2259 :         }
; 2260 :         if ( (m_dwTrackFlags & DMUS_WAVETRACKF_PERSIST_CONTROL) &&
; 2261 :              m_pdwVariations && 
; 2262 :              m_pdwRemoveVariations )

  0036c	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  0036f	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00372	83 e1 02	 and	 ecx, 2
  00375	85 c9		 test	 ecx, ecx
  00377	74 42		 je	 SHORT $L70289
  00379	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0037c	83 7a 58 00	 cmp	 DWORD PTR [edx+88], 0
  00380	74 39		 je	 SHORT $L70289
  00382	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00385	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  00389	74 30		 je	 SHORT $L70289

; 2263 :         {
; 2264 :             m_pdwVariations[nPart] = pSD->pdwVariations[nPart];

  0038b	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  0038e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00391	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00394	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00397	8b 45 08	 mov	 eax, DWORD PTR _nPart$[ebp]
  0039a	8b 75 08	 mov	 esi, DWORD PTR _nPart$[ebp]
  0039d	8b 14 b2	 mov	 edx, DWORD PTR [edx+esi*4]
  003a0	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 2265 :             m_pdwRemoveVariations[nPart] = pSD->pdwRemoveVariations[nPart];

  003a3	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  003a6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003a9	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  003ac	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  003af	8b 55 08	 mov	 edx, DWORD PTR _nPart$[ebp]
  003b2	8b 75 08	 mov	 esi, DWORD PTR _nPart$[ebp]
  003b5	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  003b8	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
$L70289:

; 2266 :         }
; 2267 :     }
; 2268 :     return S_OK;

  003bb	33 c0		 xor	 eax, eax

; 2269 : }

  003bd	5e		 pop	 esi
  003be	8b e5		 mov	 esp, ebp
  003c0	5d		 pop	 ebp
  003c1	c2 0c 00	 ret	 12			; 0000000cH
$L71416:
  003c4	00 00 00 00	 DD	 $L70336
  003c8	00 00 00 00	 DD	 $L70315
  003cc	00 00 00 00	 DD	 $L70326
  003d0	00 00 00 00	 DD	 $L70315
  003d4	00 00 00 00	 DD	 $L70315
?ComputeVariation@CWavTrack@@IAEJHAAUWavePart@@PAUWaveStateData@@@Z ENDP ; CWavTrack::ComputeVariation
_TEXT	ENDS
PUBLIC	?Add@WavePart@@QAEJPAUIDirectSoundWave@@_JKKPA_J@Z ; WavePart::Add
; Function compile flags: /Odt
;	COMDAT ?AddWave@CWavTrack@@UAGJPAUIDirectSoundWave@@_JKKPA_J@Z
_TEXT	SEGMENT
tv92 = -48
tv76 = -44
$T71428 = -40
$T71427 = -36
$T71424 = -32
$T71423 = -28
$T71420 = -24
_pItemScan$70379 = -20
_dw$70375 = -16
_pScan$70374 = -12
_hr$ = -8
_pNewPart$ = -4
_this$ = 8
_pWave$ = 12
_rtTime$ = 16
_dwPChannel$ = 24
_dwIndex$ = 28
_prtLength$ = 32
?AddWave@CWavTrack@@UAGJPAUIDirectSoundWave@@_JKKPA_J@Z PROC NEAR ; CWavTrack::AddWave, COMDAT

; 2344 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 2345 :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 14	 add	 eax, 20			; 00000014H
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 2346 :     HRESULT hr = S_OK;

  00013	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 2347 :     m_lVolume = 0;

  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 2348 :     m_dwTrackFlags = 0;

  00024	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00027	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0

; 2349 :     TListItem<WavePart>* pNewPart = new TListItem<WavePart>;

  0002e	6a 20		 push	 32			; 00000020H
  00030	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00035	83 c4 04	 add	 esp, 4
  00038	89 45 e8	 mov	 DWORD PTR $T71420[ebp], eax
  0003b	83 7d e8 00	 cmp	 DWORD PTR $T71420[ebp], 0
  0003f	74 0d		 je	 SHORT $L71421
  00041	8b 4d e8	 mov	 ecx, DWORD PTR $T71420[ebp]
  00044	e8 00 00 00 00	 call	 ??0?$TListItem@UWavePart@@@@QAE@XZ ; TListItem<WavePart>::TListItem<WavePart>
  00049	89 45 d4	 mov	 DWORD PTR tv76[ebp], eax
  0004c	eb 07		 jmp	 SHORT $L71422
$L71421:
  0004e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$L71422:
  00055	8b 45 d4	 mov	 eax, DWORD PTR tv76[ebp]
  00058	89 45 fc	 mov	 DWORD PTR _pNewPart$[ebp], eax

; 2350 :     if( !pNewPart )

  0005b	83 7d fc 00	 cmp	 DWORD PTR _pNewPart$[ebp], 0
  0005f	75 0c		 jne	 SHORT $L70360

; 2351 :     {
; 2352 :         hr = E_OUTOFMEMORY;

  00061	c7 45 f8 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 2353 :         goto ON_ERROR;

  00068	e9 7b 01 00 00	 jmp	 $ON_ERROR$70362
$L70360:

; 2354 :     }
; 2355 :     hr = pNewPart->GetItemValue().Add(pWave, rtTime, dwPChannel, dwIndex, prtLength);

  0006d	8b 4d 20	 mov	 ecx, DWORD PTR _prtLength$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 1c	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  00074	52		 push	 edx
  00075	8b 45 18	 mov	 eax, DWORD PTR _dwPChannel$[ebp]
  00078	50		 push	 eax
  00079	8b 4d 14	 mov	 ecx, DWORD PTR _rtTime$[ebp+4]
  0007c	51		 push	 ecx
  0007d	8b 55 10	 mov	 edx, DWORD PTR _rtTime$[ebp]
  00080	52		 push	 edx
  00081	8b 45 0c	 mov	 eax, DWORD PTR _pWave$[ebp]
  00084	50		 push	 eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _pNewPart$[ebp]
  00088	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  0008d	8b c8		 mov	 ecx, eax
  0008f	e8 00 00 00 00	 call	 ?Add@WavePart@@QAEJPAUIDirectSoundWave@@_JKKPA_J@Z ; WavePart::Add
  00094	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 2356 :     if( FAILED ( hr ) )

  00097	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0009b	7d 2d		 jge	 SHORT $L70365

; 2357 :     {
; 2358 :         delete pNewPart;

  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _pNewPart$[ebp]
  000a0	89 4d e0	 mov	 DWORD PTR $T71424[ebp], ecx
  000a3	8b 55 e0	 mov	 edx, DWORD PTR $T71424[ebp]
  000a6	89 55 e4	 mov	 DWORD PTR $T71423[ebp], edx
  000a9	83 7d e4 00	 cmp	 DWORD PTR $T71423[ebp], 0
  000ad	74 0f		 je	 SHORT $L71425
  000af	6a 01		 push	 1
  000b1	8b 4d e4	 mov	 ecx, DWORD PTR $T71423[ebp]
  000b4	e8 00 00 00 00	 call	 ??_G?$TListItem@UWavePart@@@@QAEPAXI@Z
  000b9	89 45 d0	 mov	 DWORD PTR tv92[ebp], eax
  000bc	eb 07		 jmp	 SHORT $L71426
$L71425:
  000be	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$L71426:

; 2359 :         goto ON_ERROR;

  000c5	e9 1e 01 00 00	 jmp	 $ON_ERROR$70362
$L70365:

; 2360 :     }
; 2361 :     InsertByAscendingPChannel( pNewPart );

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _pNewPart$[ebp]
  000cd	50		 push	 eax
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	83 e9 04	 sub	 ecx, 4
  000d4	e8 00 00 00 00	 call	 ?InsertByAscendingPChannel@CWavTrack@@IAEXPAV?$TListItem@UWavePart@@@@@Z ; CWavTrack::InsertByAscendingPChannel

; 2362 :     m_dwWaveItems = 0;

  000d9	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0

; 2363 :     m_dwPChannelsUsed = m_WavePartList.GetCount();

  000e3	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	83 c1 44	 add	 ecx, 68			; 00000044H
  000e9	e8 00 00 00 00	 call	 ?GetCount@?$TList@UWavePart@@@@QBEJXZ ; TList<WavePart>::GetCount
  000ee	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000f1	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 2364 :     if (m_aPChannels)

  000f4	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000f7	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  000fb	74 1f		 je	 SHORT $L70369

; 2365 :     {
; 2366 :         delete [] m_aPChannels;

  000fd	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00103	89 55 dc	 mov	 DWORD PTR $T71427[ebp], edx
  00106	8b 45 dc	 mov	 eax, DWORD PTR $T71427[ebp]
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0010f	83 c4 04	 add	 esp, 4

; 2367 :         m_aPChannels = NULL;

  00112	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0
$L70369:

; 2368 :     }
; 2369 :     m_aPChannels = new DWORD[m_dwPChannelsUsed];

  0011c	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0011f	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00122	c1 e0 02	 shl	 eax, 2
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0012b	83 c4 04	 add	 esp, 4
  0012e	89 45 d8	 mov	 DWORD PTR $T71428[ebp], eax
  00131	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	8b 55 d8	 mov	 edx, DWORD PTR $T71428[ebp]
  00137	89 51 40	 mov	 DWORD PTR [ecx+64], edx

; 2370 :     if (m_aPChannels)

  0013a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0013d	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00141	0f 84 8f 00 00
	00		 je	 $L70373

; 2371 :     {
; 2372 :         TListItem<WavePart>* pScan = m_WavePartList.GetHead();

  00147	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0014a	83 c1 44	 add	 ecx, 68			; 00000044H
  0014d	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ; TList<WavePart>::GetHead
  00152	89 45 f4	 mov	 DWORD PTR _pScan$70374[ebp], eax

; 2373 :         for (DWORD dw = 0; pScan && dw < m_dwPChannelsUsed; pScan = pScan->GetNext(), dw++)

  00155	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dw$70375[ebp], 0
  0015c	eb 14		 jmp	 SHORT $L70376
$L70377:
  0015e	8b 4d f4	 mov	 ecx, DWORD PTR _pScan$70374[ebp]
  00161	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  00166	89 45 f4	 mov	 DWORD PTR _pScan$70374[ebp], eax
  00169	8b 4d f0	 mov	 ecx, DWORD PTR _dw$70375[ebp]
  0016c	83 c1 01	 add	 ecx, 1
  0016f	89 4d f0	 mov	 DWORD PTR _dw$70375[ebp], ecx
$L70376:
  00172	83 7d f4 00	 cmp	 DWORD PTR _pScan$70374[ebp], 0
  00176	74 5c		 je	 SHORT $L70378
  00178	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0017b	8b 45 f0	 mov	 eax, DWORD PTR _dw$70375[ebp]
  0017e	3b 42 3c	 cmp	 eax, DWORD PTR [edx+60]
  00181	73 51		 jae	 SHORT $L70378

; 2374 :         {
; 2375 :             m_aPChannels[dw] = pScan->GetItemValue().m_dwPChannel;

  00183	8b 4d f4	 mov	 ecx, DWORD PTR _pScan$70374[ebp]
  00186	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  0018b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0018e	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00191	8b 4d f0	 mov	 ecx, DWORD PTR _dw$70375[ebp]
  00194	8b 00		 mov	 eax, DWORD PTR [eax]
  00196	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 2376 :             TListItem<WaveItem>* pItemScan = pScan->GetItemValue().m_WaveItemList.GetHead();

  00199	8b 4d f4	 mov	 ecx, DWORD PTR _pScan$70374[ebp]
  0019c	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ; TListItem<WavePart>::GetItemValue
  001a1	83 c0 18	 add	 eax, 24			; 00000018H
  001a4	8b c8		 mov	 ecx, eax
  001a6	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWaveItem@@@@QBEPAV?$TListItem@UWaveItem@@@@XZ ; TList<WaveItem>::GetHead
  001ab	89 45 ec	 mov	 DWORD PTR _pItemScan$70379[ebp], eax

; 2377 :             for (; pItemScan; pItemScan = pItemScan->GetNext())

  001ae	eb 0b		 jmp	 SHORT $L70380
$L70381:
  001b0	8b 4d ec	 mov	 ecx, DWORD PTR _pItemScan$70379[ebp]
  001b3	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ ; TListItem<WaveItem>::GetNext
  001b8	89 45 ec	 mov	 DWORD PTR _pItemScan$70379[ebp], eax
$L70380:
  001bb	83 7d ec 00	 cmp	 DWORD PTR _pItemScan$70379[ebp], 0
  001bf	74 11		 je	 SHORT $L70382

; 2378 :             {
; 2379 : #ifdef DXAPI
; 2380 :                 pItemScan->GetItemValue().m_dwVoiceIndex = m_dwWaveItems;
; 2381 : #endif
; 2382 :                 m_dwWaveItems++;

  001c1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001c4	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  001c7	83 c2 01	 add	 edx, 1
  001ca	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001cd	89 50 5c	 mov	 DWORD PTR [eax+92], edx

; 2383 :             }

  001d0	eb de		 jmp	 SHORT $L70381
$L70382:

; 2384 :         }

  001d2	eb 8a		 jmp	 SHORT $L70377
$L70378:

; 2385 :     }
; 2386 :     else

  001d4	eb 12		 jmp	 SHORT $ON_ERROR$70362
$L70373:

; 2387 :     {
; 2388 :         CleanUp();

  001d6	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001d9	83 e9 04	 sub	 ecx, 4
  001dc	e8 00 00 00 00	 call	 ?CleanUp@CWavTrack@@IAEXXZ ; CWavTrack::CleanUp

; 2389 :         hr = E_OUTOFMEMORY;

  001e1	c7 45 f8 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$ON_ERROR$70362:

; 2390 :     }
; 2391 : ON_ERROR:
; 2392 :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  001e8	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001eb	83 c1 14	 add	 ecx, 20			; 00000014H
  001ee	51		 push	 ecx
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 2393 :     return hr;

  001f5	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2394 : }

  001f8	8b e5		 mov	 esp, ebp
  001fa	5d		 pop	 ebp
  001fb	c2 1c 00	 ret	 28			; 0000001cH
?AddWave@CWavTrack@@UAGJPAUIDirectSoundWave@@_JKKPA_J@Z ENDP ; CWavTrack::AddWave
_TEXT	ENDS
PUBLIC	?Load@WaveItem@@QAEJPAVCRiffParser@@@Z		; WaveItem::Load
PUBLIC	?AddHead@?$TList@UWaveItem@@@@QAEXPAV?$TListItem@UWaveItem@@@@@Z ; TList<WaveItem>::AddHead
PUBLIC	??_C@_0DK@ONLFCIMD@Error?3?5Unable?5to?5read?5wave?5track@ ; `string'
PUBLIC	??_C@_0EH@HFBNOGCM@Warning?3?5Empty?5wave?5item?5in?5wave@ ; `string'
PUBLIC	??0?$TListItem@UWaveItem@@@@QAE@XZ		; TListItem<WaveItem>::TListItem<WaveItem>
PUBLIC	??_G?$TListItem@UWaveItem@@@@QAEPAXI@Z		; TListItem<WaveItem>::`scalar deleting destructor'
;	COMDAT ??_C@_0DK@ONLFCIMD@Error?3?5Unable?5to?5read?5wave?5track@
CONST	SEGMENT
??_C@_0DK@ONLFCIMD@Error?3?5Unable?5to?5read?5wave?5track@ DB 'Error: Una'
	DB	'ble to read wave track - bad wave part header.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@HFBNOGCM@Warning?3?5Empty?5wave?5item?5in?5wave@
CONST	SEGMENT
??_C@_0EH@HFBNOGCM@Warning?3?5Empty?5wave?5item?5in?5wave@ DB 'Warning: E'
	DB	'mpty wave item in wave track. Content should be cleaned up.', 0aH
	DB	00H						; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Load@WavePart@@QAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT
tv145 = -124
tv133 = -120
_this$ = -116
$T71436 = -112
$T71435 = -108
$T71432 = -104
_pNewItem$70449 = -100
_ckList$70428 = -96
_iPartHeader$70404 = -60
_hr$ = -36
_ck$ = -32
_pParser$ = 8
?Load@WavePart@@QAEJPAVCRiffParser@@@Z PROC NEAR	; WavePart::Load, COMDAT
; _this$ = ecx

; 2560 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	89 4d 8c	 mov	 DWORD PTR _this$[ebp], ecx

; 2561 :     HRESULT hr = S_OK; 

  00009	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 2562 :     RIFFIO          ck;
; 2563 :     pParser->EnterList(&ck);

  00010	8d 45 e0	 lea	 eax, DWORD PTR _ck$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00017	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L70393:

; 2564 :     while (pParser->NextChunk(&hr))

  0001c	8d 4d dc	 lea	 ecx, DWORD PTR _hr$[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00023	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  00028	85 c0		 test	 eax, eax
  0002a	0f 84 88 01 00
	00		 je	 $L70394

; 2565 :     {
; 2566 :         if ( ck.ckid == DMUS_FOURCC_WAVEPART_CHUNK )

  00030	81 7d e0 77 61
	70 68		 cmp	 DWORD PTR _ck$[ebp], 1752195447 ; 68706177H
  00037	75 72		 jne	 SHORT $L70403

; 2567 :         {
; 2568 :             DMUS_IO_WAVE_PART_HEADER iPartHeader;
; 2569 :             memset(&iPartHeader, 0, sizeof(iPartHeader));

  00039	6a 18		 push	 24			; 00000018H
  0003b	6a 00		 push	 0
  0003d	8d 55 c4	 lea	 edx, DWORD PTR _iPartHeader$70404[ebp]
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 _memset
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2570 : 
; 2571 :             // Read in the item's header structure
; 2572 :             hr = pParser->Read( &iPartHeader, sizeof( DMUS_IO_WAVE_PART_HEADER ) );

  00049	6a 18		 push	 24			; 00000018H
  0004b	8d 45 c4	 lea	 eax, DWORD PTR _iPartHeader$70404[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00052	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  00057	89 45 dc	 mov	 DWORD PTR _hr$[ebp], eax

; 2573 : 
; 2574 :             // Handle any I/O error by returning a failure code
; 2575 :             if( SUCCEEDED( hr ) )

  0005a	83 7d dc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005e	7c 37		 jl	 SHORT $L70407

; 2576 :             {
; 2577 :                 m_dwPChannel = iPartHeader.dwPChannel;

  00060	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	8b 55 cc	 mov	 edx, DWORD PTR _iPartHeader$70404[ebp+8]
  00066	89 11		 mov	 DWORD PTR [ecx], edx

; 2578 :                 m_dwIndex = iPartHeader.dwIndex;

  00068	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 4d d8	 mov	 ecx, DWORD PTR _iPartHeader$70404[ebp+20]
  0006e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 2579 : 
; 2580 :                 m_lVolume = iPartHeader.lVolume;

  00071	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  00074	8b 45 c4	 mov	 eax, DWORD PTR _iPartHeader$70404[ebp]
  00077	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 2581 :                 m_dwLockToPart = iPartHeader.dwLockToPart;

  0007a	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	8b 55 d0	 mov	 edx, DWORD PTR _iPartHeader$70404[ebp+12]
  00080	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 2582 :                 m_dwPChannelFlags = iPartHeader.dwFlags;

  00083	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 4d d4	 mov	 ecx, DWORD PTR _iPartHeader$70404[ebp+16]
  00089	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2583 :                 m_dwVariations = iPartHeader.dwVariations;

  0008c	8b 55 8c	 mov	 edx, DWORD PTR _this$[ebp]
  0008f	8b 45 c8	 mov	 eax, DWORD PTR _iPartHeader$70404[ebp+4]
  00092	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 2584 :             }
; 2585 :             else

  00095	eb 0f		 jmp	 SHORT $L70408
$L70407:

; 2586 :             {
; 2587 :                 Trace(1,"Error: Unable to read wave track - bad wave part header.\n");

  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@ONLFCIMD@Error?3?5Unable?5to?5read?5wave?5track@
  0009c	6a 01		 push	 1
  0009e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a3	83 c4 08	 add	 esp, 8
$L70408:

; 2588 :             }
; 2589 :         }
; 2590 :         else if ((ck.ckid == FOURCC_LIST ) && ( ck.fccType == DMUS_FOURCC_WAVEITEM_LIST))

  000a6	e9 08 01 00 00	 jmp	 $L70410
$L70403:
  000ab	81 7d e0 4c 49
	53 54		 cmp	 DWORD PTR _ck$[ebp], 1414744396 ; 5453494cH
  000b2	0f 85 fb 00 00
	00		 jne	 $L70410
  000b8	81 7d e8 77 61
	76 69		 cmp	 DWORD PTR _ck$[ebp+8], 1769365879 ; 69766177H
  000bf	0f 85 ee 00 00
	00		 jne	 $L70410

; 2591 :         {
; 2592 :             RIFFIO ckList;
; 2593 :             pParser->EnterList(&ckList);

  000c5	8d 4d a0	 lea	 ecx, DWORD PTR _ckList$70428[ebp]
  000c8	51		 push	 ecx
  000c9	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000cc	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L70430:

; 2594 :             while (pParser->NextChunk(&hr))

  000d1	8d 55 dc	 lea	 edx, DWORD PTR _hr$[ebp]
  000d4	52		 push	 edx
  000d5	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000d8	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  000dd	85 c0		 test	 eax, eax
  000df	0f 84 c6 00 00
	00		 je	 $L70431

; 2595 :             {
; 2596 :                 if (( ckList.ckid == FOURCC_LIST) && ( ckList.fccType == DMUS_FOURCC_WAVE_LIST))

  000e5	81 7d a0 4c 49
	53 54		 cmp	 DWORD PTR _ckList$70428[ebp], 1414744396 ; 5453494cH
  000ec	0f 85 b4 00 00
	00		 jne	 $L70448
  000f2	81 7d a8 77 61
	76 65		 cmp	 DWORD PTR _ckList$70428[ebp+8], 1702257015 ; 65766177H
  000f9	0f 85 a7 00 00
	00		 jne	 $L70448

; 2597 :                 {
; 2598 :                     TListItem<WaveItem>* pNewItem = new TListItem<WaveItem>;

  000ff	6a 50		 push	 80			; 00000050H
  00101	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00106	83 c4 04	 add	 esp, 4
  00109	89 45 98	 mov	 DWORD PTR $T71432[ebp], eax
  0010c	83 7d 98 00	 cmp	 DWORD PTR $T71432[ebp], 0
  00110	74 0d		 je	 SHORT $L71433
  00112	8b 4d 98	 mov	 ecx, DWORD PTR $T71432[ebp]
  00115	e8 00 00 00 00	 call	 ??0?$TListItem@UWaveItem@@@@QAE@XZ ; TListItem<WaveItem>::TListItem<WaveItem>
  0011a	89 45 88	 mov	 DWORD PTR tv133[ebp], eax
  0011d	eb 07		 jmp	 SHORT $L71434
$L71433:
  0011f	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$L71434:
  00126	8b 45 88	 mov	 eax, DWORD PTR tv133[ebp]
  00129	89 45 9c	 mov	 DWORD PTR _pNewItem$70449[ebp], eax

; 2599 :                     if( !pNewItem )

  0012c	83 7d 9c 00	 cmp	 DWORD PTR _pNewItem$70449[ebp], 0
  00130	75 09		 jne	 SHORT $L70452

; 2600 :                     {
; 2601 :                         hr = E_OUTOFMEMORY;

  00132	c7 45 dc 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 2602 :                     }
; 2603 :                     else

  00139	eb 6b		 jmp	 SHORT $L70448
$L70452:

; 2604 :                     {
; 2605 :                         hr = pNewItem->GetItemValue().Load( pParser );

  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0013e	51		 push	 ecx
  0013f	8b 4d 9c	 mov	 ecx, DWORD PTR _pNewItem$70449[ebp]
  00142	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWaveItem@@@@QAEAAUWaveItem@@XZ ; TListItem<WaveItem>::GetItemValue
  00147	8b c8		 mov	 ecx, eax
  00149	e8 00 00 00 00	 call	 ?Load@WaveItem@@QAEJPAVCRiffParser@@@Z ; WaveItem::Load
  0014e	89 45 dc	 mov	 DWORD PTR _hr$[ebp], eax

; 2606 :                         if( FAILED ( hr ) )

  00151	83 7d dc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00155	7d 40		 jge	 SHORT $L70456

; 2607 :                         {
; 2608 :                             delete pNewItem;

  00157	8b 55 9c	 mov	 edx, DWORD PTR _pNewItem$70449[ebp]
  0015a	89 55 90	 mov	 DWORD PTR $T71436[ebp], edx
  0015d	8b 45 90	 mov	 eax, DWORD PTR $T71436[ebp]
  00160	89 45 94	 mov	 DWORD PTR $T71435[ebp], eax
  00163	83 7d 94 00	 cmp	 DWORD PTR $T71435[ebp], 0
  00167	74 0f		 je	 SHORT $L71437
  00169	6a 01		 push	 1
  0016b	8b 4d 94	 mov	 ecx, DWORD PTR $T71435[ebp]
  0016e	e8 00 00 00 00	 call	 ??_G?$TListItem@UWaveItem@@@@QAEPAXI@Z
  00173	89 45 84	 mov	 DWORD PTR tv145[ebp], eax
  00176	eb 07		 jmp	 SHORT $L71438
$L71437:
  00178	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$L71438:

; 2609 :                             Trace(1,"Warning: Empty wave item in wave track. Content should be cleaned up.\n");

  0017f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@HFBNOGCM@Warning?3?5Empty?5wave?5item?5in?5wave@
  00184	6a 01		 push	 1
  00186	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0018b	83 c4 08	 add	 esp, 8

; 2610 :                             hr = S_OK;

  0018e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 2611 :                         }
; 2612 :                         else

  00195	eb 0f		 jmp	 SHORT $L70448
$L70456:

; 2613 :                         {
; 2614 :                             m_WaveItemList.AddHead( pNewItem );

  00197	8b 4d 9c	 mov	 ecx, DWORD PTR _pNewItem$70449[ebp]
  0019a	51		 push	 ecx
  0019b	8b 4d 8c	 mov	 ecx, DWORD PTR _this$[ebp]
  0019e	83 c1 18	 add	 ecx, 24			; 00000018H
  001a1	e8 00 00 00 00	 call	 ?AddHead@?$TList@UWaveItem@@@@QAEXPAV?$TListItem@UWaveItem@@@@@Z ; TList<WaveItem>::AddHead
$L70448:

; 2615 :                         }
; 2616 :                     }
; 2617 :                 }
; 2618 :             }

  001a6	e9 26 ff ff ff	 jmp	 $L70430
$L70431:

; 2619 :             pParser->LeaveList();

  001ab	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  001ae	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList
$L70410:

; 2620 :         }
; 2621 :     }

  001b3	e9 64 fe ff ff	 jmp	 $L70393
$L70394:

; 2622 :     pParser->LeaveList();

  001b8	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  001bb	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 2623 : 
; 2624 :     return hr;

  001c0	8b 45 dc	 mov	 eax, DWORD PTR _hr$[ebp]

; 2625 : }

  001c3	8b e5		 mov	 esp, ebp
  001c5	5d		 pop	 ebp
  001c6	c2 04 00	 ret	 4
?Load@WavePart@@QAEJPAVCRiffParser@@@Z ENDP		; WavePart::Load
_TEXT	ENDS
PUBLIC	?CleanUp@WaveItem@@QAEXXZ			; WaveItem::CleanUp
PUBLIC	?CleanUp@?$TList@UWaveItem@@@@QAEXXZ		; TList<WaveItem>::CleanUp
; Function compile flags: /Odt
;	COMDAT ?CleanUp@WavePart@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8
_pScan$ = -4
?CleanUp@WavePart@@QAEXXZ PROC NEAR			; WavePart::CleanUp, COMDAT
; _this$ = ecx

; 2628 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2629 :     TListItem<WaveItem>* pScan = m_WaveItemList.GetHead();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 18	 add	 ecx, 24			; 00000018H
  0000f	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWaveItem@@@@QBEPAV?$TListItem@UWaveItem@@@@XZ ; TList<WaveItem>::GetHead
  00014	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax

; 2630 :     for (; pScan; pScan = pScan->GetNext() )

  00017	eb 0b		 jmp	 SHORT $L70466
$L70467:
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0001c	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ ; TListItem<WaveItem>::GetNext
  00021	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
$L70466:
  00024	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00028	74 11		 je	 SHORT $L70468

; 2631 :     {
; 2632 :         pScan->GetItemValue().CleanUp();

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0002d	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWaveItem@@@@QAEAAUWaveItem@@XZ ; TListItem<WaveItem>::GetItemValue
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ?CleanUp@WaveItem@@QAEXXZ ; WaveItem::CleanUp

; 2633 :     }

  00039	eb de		 jmp	 SHORT $L70467
$L70468:

; 2634 :     m_WaveItemList.CleanUp();

  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 18	 add	 ecx, 24			; 00000018H
  00041	e8 00 00 00 00	 call	 ?CleanUp@?$TList@UWaveItem@@@@QAEXXZ ; TList<WaveItem>::CleanUp

; 2635 : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?CleanUp@WavePart@@QAEXXZ ENDP				; WavePart::CleanUp
_TEXT	ENDS
PUBLIC	?Reverse@?$TList@UWaveItem@@@@QAEXXZ		; TList<WaveItem>::Reverse
; Function compile flags: /Odt
;	COMDAT ?CopyItems@WavePart@@QAEJABV?$TList@UWaveItem@@@@JJ@Z
_TEXT	SEGMENT
tv159 = -44
tv82 = -40
_this$ = -36
$T71449 = -32
$T71448 = -28
$T71445 = -24
_rNew$70490 = -20
_pNew$70486 = -16
_rScan$70481 = -12
_hr$ = -8
_pScan$ = -4
_rItems$ = 8
_mtStart$ = 12
_mtEnd$ = 16
?CopyItems@WavePart@@QAEJABV?$TList@UWaveItem@@@@JJ@Z PROC NEAR ; WavePart::CopyItems, COMDAT
; _this$ = ecx

; 2638 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 2639 :     HRESULT hr = S_OK;

  0000a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 2640 :     CleanUp();

  00011	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?CleanUp@WavePart@@QAEXXZ ; WavePart::CleanUp

; 2641 :     TListItem<WaveItem>* pScan = rItems.GetHead();

  00019	8b 4d 08	 mov	 ecx, DWORD PTR _rItems$[ebp]
  0001c	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWaveItem@@@@QBEPAV?$TListItem@UWaveItem@@@@XZ ; TList<WaveItem>::GetHead
  00021	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax

; 2642 :     for (; pScan; pScan = pScan->GetNext() )

  00024	eb 0b		 jmp	 SHORT $L70478
$L70479:
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00029	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ ; TListItem<WaveItem>::GetNext
  0002e	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
$L70478:
  00031	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00035	0f 84 81 01 00
	00		 je	 $L70480

; 2643 :     {
; 2644 :         WaveItem& rScan = pScan->GetItemValue();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0003e	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWaveItem@@@@QAEAAUWaveItem@@XZ ; TListItem<WaveItem>::GetItemValue
  00043	89 45 f4	 mov	 DWORD PTR _rScan$70481[ebp], eax

; 2645 :         if (mtStart <= (MUSIC_TIME) rScan.m_rtTimePhysical && 
; 2646 :             (!mtEnd || (MUSIC_TIME) rScan.m_rtTimePhysical < mtEnd) )

  00046	8b 45 f4	 mov	 eax, DWORD PTR _rScan$70481[ebp]
  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	39 4d 0c	 cmp	 DWORD PTR _mtStart$[ebp], ecx
  0004e	0f 8f 63 01 00
	00		 jg	 $L70484
  00054	83 7d 10 00	 cmp	 DWORD PTR _mtEnd$[ebp], 0
  00058	74 0e		 je	 SHORT $L70485
  0005a	8b 55 f4	 mov	 edx, DWORD PTR _rScan$70481[ebp]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	3b 45 10	 cmp	 eax, DWORD PTR _mtEnd$[ebp]
  00062	0f 8d 4f 01 00
	00		 jge	 $L70484
$L70485:

; 2647 :         {
; 2648 :             TListItem<WaveItem>* pNew = new TListItem<WaveItem>;

  00068	6a 50		 push	 80			; 00000050H
  0006a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006f	83 c4 04	 add	 esp, 4
  00072	89 45 e8	 mov	 DWORD PTR $T71445[ebp], eax
  00075	83 7d e8 00	 cmp	 DWORD PTR $T71445[ebp], 0
  00079	74 0d		 je	 SHORT $L71446
  0007b	8b 4d e8	 mov	 ecx, DWORD PTR $T71445[ebp]
  0007e	e8 00 00 00 00	 call	 ??0?$TListItem@UWaveItem@@@@QAE@XZ ; TListItem<WaveItem>::TListItem<WaveItem>
  00083	89 45 d8	 mov	 DWORD PTR tv82[ebp], eax
  00086	eb 07		 jmp	 SHORT $L71447
$L71446:
  00088	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$L71447:
  0008f	8b 4d d8	 mov	 ecx, DWORD PTR tv82[ebp]
  00092	89 4d f0	 mov	 DWORD PTR _pNew$70486[ebp], ecx

; 2649 :             if (pNew)

  00095	83 7d f0 00	 cmp	 DWORD PTR _pNew$70486[ebp], 0
  00099	0f 84 0f 01 00
	00		 je	 $L70489

; 2650 :             {
; 2651 :                 WaveItem& rNew = pNew->GetItemValue();

  0009f	8b 4d f0	 mov	 ecx, DWORD PTR _pNew$70486[ebp]
  000a2	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWaveItem@@@@QAEAAUWaveItem@@XZ ; TListItem<WaveItem>::GetItemValue
  000a7	89 45 ec	 mov	 DWORD PTR _rNew$70490[ebp], eax

; 2652 :                 rNew.m_rtTimePhysical = rScan.m_rtTimePhysical - mtStart;

  000aa	8b 45 0c	 mov	 eax, DWORD PTR _mtStart$[ebp]
  000ad	99		 cdq
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR _rScan$70481[ebp]
  000b1	8b 31		 mov	 esi, DWORD PTR [ecx]
  000b3	2b f0		 sub	 esi, eax
  000b5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000b8	1b c2		 sbb	 eax, edx
  000ba	8b 4d ec	 mov	 ecx, DWORD PTR _rNew$70490[ebp]
  000bd	89 31		 mov	 DWORD PTR [ecx], esi
  000bf	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 2653 :                 rNew.m_lVolume = rScan.m_lVolume;

  000c2	8b 55 ec	 mov	 edx, DWORD PTR _rNew$70490[ebp]
  000c5	8b 45 f4	 mov	 eax, DWORD PTR _rScan$70481[ebp]
  000c8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000cb	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 2654 :                 rNew.m_lPitch = rScan.m_lPitch;

  000ce	8b 55 ec	 mov	 edx, DWORD PTR _rNew$70490[ebp]
  000d1	8b 45 f4	 mov	 eax, DWORD PTR _rScan$70481[ebp]
  000d4	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000d7	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 2655 :                 rNew.m_dwVariations = rScan.m_dwVariations;

  000da	8b 55 ec	 mov	 edx, DWORD PTR _rNew$70490[ebp]
  000dd	8b 45 f4	 mov	 eax, DWORD PTR _rScan$70481[ebp]
  000e0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e3	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 2656 :                 rNew.m_rtStartOffset = rScan.m_rtStartOffset;

  000e6	8b 55 ec	 mov	 edx, DWORD PTR _rNew$70490[ebp]
  000e9	8b 45 f4	 mov	 eax, DWORD PTR _rScan$70481[ebp]
  000ec	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ef	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  000f2	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  000f5	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 2657 :                 rNew.m_rtDuration = rScan.m_rtDuration;

  000f8	8b 4d ec	 mov	 ecx, DWORD PTR _rNew$70490[ebp]
  000fb	8b 55 f4	 mov	 edx, DWORD PTR _rScan$70481[ebp]
  000fe	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00101	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00104	8b 52 24	 mov	 edx, DWORD PTR [edx+36]
  00107	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 2658 :                 rNew.m_mtTimeLogical = rScan.m_mtTimeLogical;

  0010a	8b 45 ec	 mov	 eax, DWORD PTR _rNew$70490[ebp]
  0010d	8b 4d f4	 mov	 ecx, DWORD PTR _rScan$70481[ebp]
  00110	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00113	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 2659 :                 rNew.m_dwFlags = rScan.m_dwFlags;

  00116	8b 45 ec	 mov	 eax, DWORD PTR _rNew$70490[ebp]
  00119	8b 4d f4	 mov	 ecx, DWORD PTR _rScan$70481[ebp]
  0011c	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0011f	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 2660 :                 rNew.m_pWave = rScan.m_pWave;

  00122	8b 45 ec	 mov	 eax, DWORD PTR _rNew$70490[ebp]
  00125	8b 4d f4	 mov	 ecx, DWORD PTR _rScan$70481[ebp]
  00128	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0012b	89 50 30	 mov	 DWORD PTR [eax+48], edx

; 2661 :                 rNew.m_dwLoopStart = rScan.m_dwLoopStart;

  0012e	8b 45 ec	 mov	 eax, DWORD PTR _rNew$70490[ebp]
  00131	8b 4d f4	 mov	 ecx, DWORD PTR _rScan$70481[ebp]
  00134	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00137	89 50 40	 mov	 DWORD PTR [eax+64], edx

; 2662 :                 rNew.m_dwLoopEnd = rScan.m_dwLoopEnd;

  0013a	8b 45 ec	 mov	 eax, DWORD PTR _rNew$70490[ebp]
  0013d	8b 4d f4	 mov	 ecx, DWORD PTR _rScan$70481[ebp]
  00140	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00143	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 2663 :                 rNew.m_fIsStreaming = rScan.m_fIsStreaming;

  00146	8b 45 ec	 mov	 eax, DWORD PTR _rNew$70490[ebp]
  00149	8b 4d f4	 mov	 ecx, DWORD PTR _rScan$70481[ebp]
  0014c	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0014f	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 2664 :                 if (rNew.m_pWave)

  00152	8b 45 ec	 mov	 eax, DWORD PTR _rNew$70490[ebp]
  00155	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  00159	74 12		 je	 SHORT $L70491

; 2665 :                 {
; 2666 :                     rNew.m_pWave->AddRef();

  0015b	8b 4d ec	 mov	 ecx, DWORD PTR _rNew$70490[ebp]
  0015e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00161	8b 45 ec	 mov	 eax, DWORD PTR _rNew$70490[ebp]
  00164	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00167	8b 12		 mov	 edx, DWORD PTR [edx]
  00169	51		 push	 ecx
  0016a	ff 52 04	 call	 DWORD PTR [edx+4]
$L70491:

; 2667 :                 }
; 2668 :                 if (SUCCEEDED(hr))

  0016d	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00171	7c 11		 jl	 SHORT $L70493

; 2669 :                 {
; 2670 :                     m_WaveItemList.AddHead(pNew);

  00173	8b 45 f0	 mov	 eax, DWORD PTR _pNew$70486[ebp]
  00176	50		 push	 eax
  00177	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017a	83 c1 18	 add	 ecx, 24			; 00000018H
  0017d	e8 00 00 00 00	 call	 ?AddHead@?$TList@UWaveItem@@@@QAEXPAV?$TListItem@UWaveItem@@@@@Z ; TList<WaveItem>::AddHead

; 2671 :                 }
; 2672 :                 else

  00182	eb 28		 jmp	 SHORT $L70494
$L70493:

; 2673 :                 {
; 2674 :                     delete pNew;

  00184	8b 4d f0	 mov	 ecx, DWORD PTR _pNew$70486[ebp]
  00187	89 4d e0	 mov	 DWORD PTR $T71449[ebp], ecx
  0018a	8b 55 e0	 mov	 edx, DWORD PTR $T71449[ebp]
  0018d	89 55 e4	 mov	 DWORD PTR $T71448[ebp], edx
  00190	83 7d e4 00	 cmp	 DWORD PTR $T71448[ebp], 0
  00194	74 0f		 je	 SHORT $L71450
  00196	6a 01		 push	 1
  00198	8b 4d e4	 mov	 ecx, DWORD PTR $T71448[ebp]
  0019b	e8 00 00 00 00	 call	 ??_G?$TListItem@UWaveItem@@@@QAEPAXI@Z
  001a0	89 45 d4	 mov	 DWORD PTR tv159[ebp], eax
  001a3	eb 07		 jmp	 SHORT $L70494
$L71450:
  001a5	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$L70494:

; 2675 :                 }
; 2676 :             }
; 2677 :             else

  001ac	eb 09		 jmp	 SHORT $L70484
$L70489:

; 2678 :             {
; 2679 :                 hr = E_OUTOFMEMORY;

  001ae	c7 45 f8 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 2680 :                 break;

  001b5	eb 05		 jmp	 SHORT $L70480
$L70484:

; 2681 :             }
; 2682 :         }
; 2683 :     }

  001b7	e9 6a fe ff ff	 jmp	 $L70479
$L70480:

; 2684 :     if (SUCCEEDED(hr))

  001bc	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001c0	7c 0d		 jl	 SHORT $L70500

; 2685 :     {
; 2686 :         m_WaveItemList.Reverse();

  001c2	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c5	83 c1 18	 add	 ecx, 24			; 00000018H
  001c8	e8 00 00 00 00	 call	 ?Reverse@?$TList@UWaveItem@@@@QAEXXZ ; TList<WaveItem>::Reverse

; 2687 :     }
; 2688 :     else

  001cd	eb 08		 jmp	 SHORT $L70501
$L70500:

; 2689 :     {
; 2690 :         CleanUp();

  001cf	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d2	e8 00 00 00 00	 call	 ?CleanUp@WavePart@@QAEXXZ ; WavePart::CleanUp
$L70501:

; 2691 :     }
; 2692 :     return hr;

  001d7	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2693 : }

  001da	5e		 pop	 esi
  001db	8b e5		 mov	 esp, ebp
  001dd	5d		 pop	 ebp
  001de	c2 0c 00	 ret	 12			; 0000000cH
?CopyItems@WavePart@@QAEJABV?$TList@UWaveItem@@@@JJ@Z ENDP ; WavePart::CopyItems
_TEXT	ENDS
PUBLIC	?SetWaveParams@WaveItem@@QAEXPAU_DMUS_IO_WAVE_HEADER@@@Z ; WaveItem::SetWaveParams
; Function compile flags: /Odt
;	COMDAT ?SetWaveParams@WavePart@@QAEXPAU_DMUS_IO_WAVE_HEADER@@@Z
_TEXT	SEGMENT
_this$ = -8
_pItem$ = -4
_pWaveHeader$ = 8
?SetWaveParams@WavePart@@QAEXPAU_DMUS_IO_WAVE_HEADER@@@Z PROC NEAR ; WavePart::SetWaveParams, COMDAT
; _this$ = ecx

; 2697 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2698 :     TListItem<WaveItem>* pItem = m_WaveItemList.GetHead();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 18	 add	 ecx, 24			; 00000018H
  0000f	e8 00 00 00 00	 call	 ?GetHead@?$TList@UWaveItem@@@@QBEPAV?$TListItem@UWaveItem@@@@XZ ; TList<WaveItem>::GetHead
  00014	89 45 fc	 mov	 DWORD PTR _pItem$[ebp], eax

; 2699 :     for(; pItem; pItem = pItem->GetNext())

  00017	eb 0b		 jmp	 SHORT $L70507
$L70508:
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _pItem$[ebp]
  0001c	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ ; TListItem<WaveItem>::GetNext
  00021	89 45 fc	 mov	 DWORD PTR _pItem$[ebp], eax
$L70507:
  00024	83 7d fc 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  00028	74 15		 je	 SHORT $L70505

; 2700 :     {
; 2701 :         pItem->GetItemValue().SetWaveParams(pWaveHeader);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _pWaveHeader$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWaveItem@@@@QAEAAUWaveItem@@XZ ; TListItem<WaveItem>::GetItemValue
  00036	8b c8		 mov	 ecx, eax
  00038	e8 00 00 00 00	 call	 ?SetWaveParams@WaveItem@@QAEXPAU_DMUS_IO_WAVE_HEADER@@@Z ; WaveItem::SetWaveParams

; 2702 :     }

  0003d	eb da		 jmp	 SHORT $L70508
$L70505:

; 2703 : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?SetWaveParams@WavePart@@QAEXPAU_DMUS_IO_WAVE_HEADER@@@Z ENDP ; WavePart::SetWaveParams
_TEXT	ENDS
PUBLIC	?Add@WaveItem@@QAEJPAUIDirectSoundWave@@_JPA_J@Z ; WaveItem::Add
; Function compile flags: /Odt
;	COMDAT ?Add@WavePart@@QAEJPAUIDirectSoundWave@@_JKKPA_J@Z
_TEXT	SEGMENT
tv88 = -32
tv74 = -28
_this$ = -24
$T71462 = -20
$T71461 = -16
$T71458 = -12
_pNewItem$ = -8
_hr$ = -4
_pWave$ = 8
_rtTime$ = 12
_dwPChannel$ = 20
_dwIndex$ = 24
_prtLength$ = 28
?Add@WavePart@@QAEJPAUIDirectSoundWave@@_JKKPA_J@Z PROC NEAR ; WavePart::Add, COMDAT
; _this$ = ecx

; 2764 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 2765 :     HRESULT hr = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 2766 :     m_dwPChannel = dwPChannel;

  00010	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 4d 14	 mov	 ecx, DWORD PTR _dwPChannel$[ebp]
  00016	89 08		 mov	 DWORD PTR [eax], ecx

; 2767 :     m_dwIndex = dwIndex;

  00018	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 45 18	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  0001e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 2768 : 
; 2769 :     m_lVolume = 0;

  00021	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 2770 :     m_dwLockToPart = 0;

  0002b	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 2771 :     m_dwPChannelFlags = 0;

  00035	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2772 :     m_dwVariations = 0xffffffff;

  0003f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 2773 : 
; 2774 :     TListItem<WaveItem>* pNewItem = new TListItem<WaveItem>;

  00049	6a 50		 push	 80			; 00000050H
  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00050	83 c4 04	 add	 esp, 4
  00053	89 45 f4	 mov	 DWORD PTR $T71458[ebp], eax
  00056	83 7d f4 00	 cmp	 DWORD PTR $T71458[ebp], 0
  0005a	74 0d		 je	 SHORT $L71459
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR $T71458[ebp]
  0005f	e8 00 00 00 00	 call	 ??0?$TListItem@UWaveItem@@@@QAE@XZ ; TListItem<WaveItem>::TListItem<WaveItem>
  00064	89 45 e4	 mov	 DWORD PTR tv74[ebp], eax
  00067	eb 07		 jmp	 SHORT $L71460
$L71459:
  00069	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$L71460:
  00070	8b 55 e4	 mov	 edx, DWORD PTR tv74[ebp]
  00073	89 55 f8	 mov	 DWORD PTR _pNewItem$[ebp], edx

; 2775 :     if( pNewItem == NULL )

  00076	83 7d f8 00	 cmp	 DWORD PTR _pNewItem$[ebp], 0
  0007a	75 09		 jne	 SHORT $L70523

; 2776 :     {
; 2777 :         hr = E_OUTOFMEMORY;

  0007c	c7 45 fc 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 2778 :         goto ON_ERROR;

  00083	eb 61		 jmp	 SHORT $ON_ERROR$70525
$L70523:

; 2779 :     }
; 2780 :     hr = pNewItem->GetItemValue().Add( pWave, rtTime, prtLength );

  00085	8b 45 1c	 mov	 eax, DWORD PTR _prtLength$[ebp]
  00088	50		 push	 eax
  00089	8b 4d 10	 mov	 ecx, DWORD PTR _rtTime$[ebp+4]
  0008c	51		 push	 ecx
  0008d	8b 55 0c	 mov	 edx, DWORD PTR _rtTime$[ebp]
  00090	52		 push	 edx
  00091	8b 45 08	 mov	 eax, DWORD PTR _pWave$[ebp]
  00094	50		 push	 eax
  00095	8b 4d f8	 mov	 ecx, DWORD PTR _pNewItem$[ebp]
  00098	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UWaveItem@@@@QAEAAUWaveItem@@XZ ; TListItem<WaveItem>::GetItemValue
  0009d	8b c8		 mov	 ecx, eax
  0009f	e8 00 00 00 00	 call	 ?Add@WaveItem@@QAEJPAUIDirectSoundWave@@_JPA_J@Z ; WaveItem::Add
  000a4	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 2781 :     if( FAILED ( hr ) )

  000a7	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ab	7d 2a		 jge	 SHORT $L70528

; 2782 :     {
; 2783 :         delete pNewItem;

  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _pNewItem$[ebp]
  000b0	89 4d ec	 mov	 DWORD PTR $T71462[ebp], ecx
  000b3	8b 55 ec	 mov	 edx, DWORD PTR $T71462[ebp]
  000b6	89 55 f0	 mov	 DWORD PTR $T71461[ebp], edx
  000b9	83 7d f0 00	 cmp	 DWORD PTR $T71461[ebp], 0
  000bd	74 0f		 je	 SHORT $L71463
  000bf	6a 01		 push	 1
  000c1	8b 4d f0	 mov	 ecx, DWORD PTR $T71461[ebp]
  000c4	e8 00 00 00 00	 call	 ??_G?$TListItem@UWaveItem@@@@QAEPAXI@Z
  000c9	89 45 e0	 mov	 DWORD PTR tv88[ebp], eax
  000cc	eb 07		 jmp	 SHORT $L71464
$L71463:
  000ce	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$L71464:

; 2784 :         goto ON_ERROR;

  000d5	eb 0f		 jmp	 SHORT $ON_ERROR$70525
$L70528:

; 2785 :     }
; 2786 :     m_WaveItemList.AddHead( pNewItem );

  000d7	8b 45 f8	 mov	 eax, DWORD PTR _pNewItem$[ebp]
  000da	50		 push	 eax
  000db	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	83 c1 18	 add	 ecx, 24			; 00000018H
  000e1	e8 00 00 00 00	 call	 ?AddHead@?$TList@UWaveItem@@@@QAEXPAV?$TListItem@UWaveItem@@@@@Z ; TList<WaveItem>::AddHead
$ON_ERROR$70525:

; 2787 : ON_ERROR:
; 2788 :     return hr;

  000e6	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 2789 : }

  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 18 00	 ret	 24			; 00000018H
?Add@WavePart@@QAEJPAUIDirectSoundWave@@_JKKPA_J@Z ENDP	; WavePart::Add
_TEXT	ENDS
PUBLIC	?LoadReference@WaveItem@@QAEJPAVCRiffParser@@@Z	; WaveItem::LoadReference
PUBLIC	??_C@_0BG@ECNEBDKL@m_rtTimePhysical?5?$DN?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_0CM@HABPMDLN@Wave?5track?5unable?5to?5load?5refere@ ; `string'
PUBLIC	??_C@_0DB@NMLLPLIH@Content?5Error?3?5Unable?5to?5load?5WA@ ; `string'
PUBLIC	??_C@_0EL@OGHKJELM@Content?5Error?3?5Wave?5item?5in?5wave@ ; `string'
;	COMDAT ??_C@_0BG@ECNEBDKL@m_rtTimePhysical?5?$DN?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BG@ECNEBDKL@m_rtTimePhysical?5?$DN?$DN?50?$AA@ DB 'm_rtTimePhysica'
	DB	'l == 0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HABPMDLN@Wave?5track?5unable?5to?5load?5refere@
CONST	SEGMENT
??_C@_0CM@HABPMDLN@Wave?5track?5unable?5to?5load?5refere@ DB 'Wave track '
	DB	'unable to load referenced wave.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NMLLPLIH@Content?5Error?3?5Unable?5to?5load?5WA@
CONST	SEGMENT
??_C@_0DB@NMLLPLIH@Content?5Error?3?5Unable?5to?5load?5WA@ DB 'Content Er'
	DB	'ror: Unable to load WAVE_ITEM_HEADER.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@OGHKJELM@Content?5Error?3?5Wave?5item?5in?5wave@
CONST	SEGMENT
??_C@_0EL@OGHKJELM@Content?5Error?3?5Wave?5item?5in?5wave@ DB 'Content Er'
	DB	'ror: Wave item in wave track is missing reference to wave dat'
	DB	'a.', 0aH, 00H				; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Load@WaveItem@@QAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT
tv148 = -128
_this$ = -124
_iItemHeader$70555 = -120
_bLoadedWave$ = -48
_hr$ = -44
_ck$ = -40
_bLoadedHeader$ = -4
_pParser$ = 8
?Load@WaveItem@@QAEJPAVCRiffParser@@@Z PROC NEAR	; WaveItem::Load, COMDAT
; _this$ = ecx

; 2795 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	89 4d 84	 mov	 DWORD PTR _this$[ebp], ecx

; 2796 :     RIFFIO          ck;
; 2797 :     HRESULT         hr = S_OK;

  0000c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 2798 :     BOOL            bLoadedHeader = FALSE;

  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bLoadedHeader$[ebp], 0

; 2799 :     BOOL            bLoadedWave   = FALSE;

  0001a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _bLoadedWave$[ebp], 0

; 2800 : 
; 2801 :     // LoadListItem does not expect to be called twice on the same object
; 2802 :     // Code assumes item consists of initial values
; 2803 :     ASSERT( m_rtTimePhysical == 0 );

  00021	8b 45 84	 mov	 eax, DWORD PTR _this$[ebp]
  00024	89 45 80	 mov	 DWORD PTR tv148[ebp], eax
  00027	8b 4d 80	 mov	 ecx, DWORD PTR tv148[ebp]
  0002a	8b 55 80	 mov	 edx, DWORD PTR tv148[ebp]
  0002d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002f	0b 42 04	 or	 eax, DWORD PTR [edx+4]
  00032	85 c0		 test	 eax, eax
  00034	74 17		 je	 SHORT $L70541
  00036	6a 00		 push	 0
  00038	68 f3 0a 00 00	 push	 2803			; 00000af3H
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@EFNABGPN@c?3?2xbox?2private?2windows?2directx?2@
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@ECNEBDKL@m_rtTimePhysical?5?$DN?$DN?50?$AA@
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L70541:

; 2804 :     pParser->EnterList(&ck);

  0004d	8d 4d d8	 lea	 ecx, DWORD PTR _ck$[ebp]
  00050	51		 push	 ecx
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00054	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L70544:

; 2805 :     while (pParser->NextChunk(&hr))

  00059	8d 55 d4	 lea	 edx, DWORD PTR _hr$[ebp]
  0005c	52		 push	 edx
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00060	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  00065	85 c0		 test	 eax, eax
  00067	0f 84 18 01 00
	00		 je	 $L70545

; 2806 :     {
; 2807 :         if ( ck.ckid == DMUS_FOURCC_WAVEITEM_CHUNK)

  0006d	81 7d d8 77 61
	69 68		 cmp	 DWORD PTR _ck$[ebp], 1751736695 ; 68696177H
  00074	0f 85 c9 00 00
	00		 jne	 $L70554

; 2808 :         {
; 2809 :             DMUS_IO_WAVE_ITEM_HEADER iItemHeader;
; 2810 :             iItemHeader.wVolumeRange = 0;

  0007a	66 c7 45 c8 00
	00		 mov	 WORD PTR _iItemHeader$70555[ebp+64], 0

; 2811 :             iItemHeader.wPitchRange = 0;

  00080	66 c7 45 ca 00
	00		 mov	 WORD PTR _iItemHeader$70555[ebp+66], 0

; 2812 :             // Read in the item's header structure
; 2813 :             hr = pParser->Read( &iItemHeader, sizeof( DMUS_IO_WAVE_ITEM_HEADER ) );

  00086	6a 48		 push	 72			; 00000048H
  00088	8d 45 88	 lea	 eax, DWORD PTR _iItemHeader$70555[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0008f	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  00094	89 45 d4	 mov	 DWORD PTR _hr$[ebp], eax

; 2814 : 
; 2815 :             // Handle any I/O error by returning a failure code
; 2816 :             if( SUCCEEDED( hr ) )

  00097	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0009b	0f 8c a0 00 00
	00		 jl	 $L70558

; 2817 :             {
; 2818 :                 m_lVolume = iItemHeader.lVolume;

  000a1	8b 4d 84	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	8b 55 88	 mov	 edx, DWORD PTR _iItemHeader$70555[ebp]
  000a7	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 2819 :                 m_lPitch = iItemHeader.lPitch;

  000aa	8b 45 84	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 4d 8c	 mov	 ecx, DWORD PTR _iItemHeader$70555[ebp+4]
  000b0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 2820 :                 m_dwVariations = iItemHeader.dwVariations;

  000b3	8b 55 84	 mov	 edx, DWORD PTR _this$[ebp]
  000b6	8b 45 90	 mov	 eax, DWORD PTR _iItemHeader$70555[ebp+8]
  000b9	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 2821 :                 m_rtTimePhysical = iItemHeader.rtTime;

  000bc	8b 4d 84	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	8b 55 98	 mov	 edx, DWORD PTR _iItemHeader$70555[ebp+16]
  000c2	89 11		 mov	 DWORD PTR [ecx], edx
  000c4	8b 45 9c	 mov	 eax, DWORD PTR _iItemHeader$70555[ebp+20]
  000c7	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 2822 :                 m_rtStartOffset = iItemHeader.rtStartOffset;  

  000ca	8b 4d 84	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	8b 55 a0	 mov	 edx, DWORD PTR _iItemHeader$70555[ebp+24]
  000d0	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  000d3	8b 45 a4	 mov	 eax, DWORD PTR _iItemHeader$70555[ebp+28]
  000d6	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 2823 :                 m_rtDuration = iItemHeader.rtDuration;

  000d9	8b 4d 84	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	8b 55 b0	 mov	 edx, DWORD PTR _iItemHeader$70555[ebp+40]
  000df	89 51 20	 mov	 DWORD PTR [ecx+32], edx
  000e2	8b 45 b4	 mov	 eax, DWORD PTR _iItemHeader$70555[ebp+44]
  000e5	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 2824 :                 m_mtTimeLogical = iItemHeader.mtLogicalTime;

  000e8	8b 4d 84	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	8b 55 b8	 mov	 edx, DWORD PTR _iItemHeader$70555[ebp+48]
  000ee	89 51 28	 mov	 DWORD PTR [ecx+40], edx

; 2825 :                 m_dwFlags = iItemHeader.dwFlags;

  000f1	8b 45 84	 mov	 eax, DWORD PTR _this$[ebp]
  000f4	8b 4d c4	 mov	 ecx, DWORD PTR _iItemHeader$70555[ebp+60]
  000f7	89 48 2c	 mov	 DWORD PTR [eax+44], ecx

; 2826 :                 m_dwLoopStart = iItemHeader.dwLoopStart;

  000fa	8b 55 84	 mov	 edx, DWORD PTR _this$[ebp]
  000fd	8b 45 bc	 mov	 eax, DWORD PTR _iItemHeader$70555[ebp+52]
  00100	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 2827 :                 m_dwLoopEnd = iItemHeader.dwLoopEnd;

  00103	8b 4d 84	 mov	 ecx, DWORD PTR _this$[ebp]
  00106	8b 55 c0	 mov	 edx, DWORD PTR _iItemHeader$70555[ebp+56]
  00109	89 51 44	 mov	 DWORD PTR [ecx+68], edx

; 2828 :                 m_wVolumeRange = iItemHeader.wVolumeRange;

  0010c	8b 45 84	 mov	 eax, DWORD PTR _this$[ebp]
  0010f	66 8b 4d c8	 mov	 cx, WORD PTR _iItemHeader$70555[ebp+64]
  00113	66 89 48 34	 mov	 WORD PTR [eax+52], cx

; 2829 :                 m_wPitchRange = iItemHeader.wPitchRange;

  00117	8b 55 84	 mov	 edx, DWORD PTR _this$[ebp]
  0011a	66 8b 45 ca	 mov	 ax, WORD PTR _iItemHeader$70555[ebp+66]
  0011e	66 89 42 36	 mov	 WORD PTR [edx+54], ax

; 2830 :                 if (m_dwLoopEnd)

  00122	8b 4d 84	 mov	 ecx, DWORD PTR _this$[ebp]
  00125	83 79 44 00	 cmp	 DWORD PTR [ecx+68], 0
  00129	74 0f		 je	 SHORT $L70559

; 2831 :                     m_dwLoopEnd++; // fix for bug 38505

  0012b	8b 55 84	 mov	 edx, DWORD PTR _this$[ebp]
  0012e	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00131	83 c0 01	 add	 eax, 1
  00134	8b 4d 84	 mov	 ecx, DWORD PTR _this$[ebp]
  00137	89 41 44	 mov	 DWORD PTR [ecx+68], eax
$L70559:

; 2832 :                 bLoadedHeader = TRUE;

  0013a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bLoadedHeader$[ebp], 1
$L70558:

; 2833 :             }
; 2834 :         }
; 2835 :         else if ((ck.ckid == FOURCC_LIST) && ( ck.fccType == DMUS_FOURCC_REF_LIST ))

  00141	eb 3d		 jmp	 SHORT $L70560
$L70554:
  00143	81 7d d8 4c 49
	53 54		 cmp	 DWORD PTR _ck$[ebp], 1414744396 ; 5453494cH
  0014a	75 34		 jne	 SHORT $L70560
  0014c	81 7d e0 44 4d
	52 46		 cmp	 DWORD PTR _ck$[ebp+8], 1179798852 ; 46524d44H
  00153	75 2b		 jne	 SHORT $L70560

; 2836 :         {
; 2837 :             hr = LoadReference( pParser );

  00155	8b 55 08	 mov	 edx, DWORD PTR _pParser$[ebp]
  00158	52		 push	 edx
  00159	8b 4d 84	 mov	 ecx, DWORD PTR _this$[ebp]
  0015c	e8 00 00 00 00	 call	 ?LoadReference@WaveItem@@QAEJPAVCRiffParser@@@Z ; WaveItem::LoadReference
  00161	89 45 d4	 mov	 DWORD PTR _hr$[ebp], eax

; 2838 : #ifdef DBG
; 2839 :             if (FAILED(hr))

  00164	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00168	7d 0f		 jge	 SHORT $L70579

; 2840 :             {
; 2841 :                 Trace(1,"Wave track unable to load referenced wave.\n");

  0016a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@HABPMDLN@Wave?5track?5unable?5to?5load?5refere@
  0016f	6a 01		 push	 1
  00171	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00176	83 c4 08	 add	 esp, 8
$L70579:

; 2842 :             }
; 2843 : #endif
; 2844 :             bLoadedWave = TRUE;

  00179	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _bLoadedWave$[ebp], 1
$L70560:

; 2845 :         }
; 2846 :     }

  00180	e9 d4 fe ff ff	 jmp	 $L70544
$L70545:

; 2847 :     pParser->LeaveList();

  00185	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00188	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 2848 :     
; 2849 :     //If all the calls succeeded but we did not load the necessary data, fail.
; 2850 :     if (SUCCEEDED(hr))

  0018d	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00191	7c 3a		 jl	 SHORT $L70582

; 2851 :     {
; 2852 :         if (!bLoadedHeader)

  00193	83 7d fc 00	 cmp	 DWORD PTR _bLoadedHeader$[ebp], 0
  00197	75 18		 jne	 SHORT $L70583

; 2853 :         {
; 2854 :             Trace(1, "Content Error: Unable to load WAVE_ITEM_HEADER.\n");

  00199	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@NMLLPLIH@Content?5Error?3?5Unable?5to?5load?5WA@
  0019e	6a 01		 push	 1
  001a0	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  001a5	83 c4 08	 add	 esp, 8

; 2855 :             hr = DMUS_E_BADWAVE;

  001a8	c7 45 d4 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 2856 :         }
; 2857 :         else if (!bLoadedWave)

  001af	eb 1c		 jmp	 SHORT $L70582
$L70583:
  001b1	83 7d d0 00	 cmp	 DWORD PTR _bLoadedWave$[ebp], 0
  001b5	75 16		 jne	 SHORT $L70582

; 2858 :         {
; 2859 :             Trace(1, "Content Error: Wave item in wave track is missing reference to wave data.\n");

  001b7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EL@OGHKJELM@Content?5Error?3?5Wave?5item?5in?5wave@
  001bc	6a 01		 push	 1
  001be	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  001c3	83 c4 08	 add	 esp, 8

; 2860 :             hr = DMUS_E_BADWAVE;

  001c6	c7 45 d4 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L70582:

; 2861 :         }
; 2862 :     }
; 2863 : 
; 2864 :     return hr;

  001cd	8b 45 d4	 mov	 eax, DWORD PTR _hr$[ebp]

; 2865 : }

  001d0	8b e5		 mov	 esp, ebp
  001d2	5d		 pop	 ebp
  001d3	c2 04 00	 ret	 4
?Load@WaveItem@@QAEJPAVCRiffParser@@@Z ENDP		; WaveItem::Load
_TEXT	ENDS
EXTRN	?LoadReferencedObject@CLinkParser@@QAEJPAVCRiffParser@@PAPAXABU_GUID@@H@Z:NEAR ; CLinkParser::LoadReferencedObject
EXTRN	_IID_IDirectSoundWave:BYTE
; Function compile flags: /Odt
;	COMDAT ?LoadReference@WaveItem@@QAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT
_this$ = -32
_dwFlags$70602 = -28
_rtReadAhead$70601 = -24
_hr$ = -12
_pWave$ = -8
_LinkParser$ = -1
_pParser$ = 8
?LoadReference@WaveItem@@QAEJPAVCRiffParser@@@Z PROC NEAR ; WaveItem::LoadReference, COMDAT
; _this$ = ecx

; 2868 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 2869 :     CLinkParser LinkParser;
; 2870 :     IDirectSoundWave* pWave;
; 2871 :     HRESULT hr = LinkParser.LoadReferencedObject(pParser,(void **)&pWave,IID_IDirectSoundWave,FALSE);

  00009	6a 00		 push	 0
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectSoundWave
  00010	8d 45 f8	 lea	 eax, DWORD PTR _pWave$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00017	51		 push	 ecx
  00018	8d 4d ff	 lea	 ecx, DWORD PTR _LinkParser$[ebp]
  0001b	e8 00 00 00 00	 call	 ?LoadReferencedObject@CLinkParser@@QAEJPAVCRiffParser@@PAPAXABU_GUID@@H@Z ; CLinkParser::LoadReferencedObject
  00020	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 2872 :     if (SUCCEEDED(hr))

  00023	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00027	7c 77		 jl	 SHORT $L70599

; 2873 :     {
; 2874 :         if (m_pWave) m_pWave->Release();

  00029	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  00030	74 12		 je	 SHORT $L70600
  00032	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00038	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0003e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00040	50		 push	 eax
  00041	ff 51 08	 call	 DWORD PTR [ecx+8]
$L70600:

; 2875 :         m_pWave = pWave; // no need to AddRef; GetObject did that

  00044	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00047	8b 45 f8	 mov	 eax, DWORD PTR _pWave$[ebp]
  0004a	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 2876 :         REFERENCE_TIME rtReadAhead = 0;

  0004d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _rtReadAhead$70601[ebp], 0
  00054	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _rtReadAhead$70601[ebp+4], 0

; 2877 :         DWORD dwFlags = 0;

  0005b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dwFlags$70602[ebp], 0

; 2878 :         m_pWave->GetStreamingParms(&dwFlags, &rtReadAhead);

  00062	8d 4d e8	 lea	 ecx, DWORD PTR _rtReadAhead$70601[ebp]
  00065	51		 push	 ecx
  00066	8d 55 e4	 lea	 edx, DWORD PTR _dwFlags$70602[ebp]
  00069	52		 push	 edx
  0006a	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00070	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00073	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00076	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00078	50		 push	 eax
  00079	ff 51 14	 call	 DWORD PTR [ecx+20]

; 2879 :         m_fIsStreaming = dwFlags & DMUS_WAVEF_STREAMING ? TRUE : FALSE;

  0007c	8b 55 e4	 mov	 edx, DWORD PTR _dwFlags$70602[ebp]
  0007f	83 e2 02	 and	 edx, 2
  00082	f7 da		 neg	 edx
  00084	1b d2		 sbb	 edx, edx
  00086	f7 da		 neg	 edx
  00088	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 2880 :         m_fUseNoPreRoll = dwFlags & DMUS_WAVEF_NOPREROLL ? TRUE : FALSE;

  0008e	8b 4d e4	 mov	 ecx, DWORD PTR _dwFlags$70602[ebp]
  00091	83 e1 08	 and	 ecx, 8
  00094	f7 d9		 neg	 ecx
  00096	1b c9		 sbb	 ecx, ecx
  00098	f7 d9		 neg	 ecx
  0009a	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0009d	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx
$L70599:

; 2881 :     }
; 2882 :     return hr;

  000a0	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 2883 : }

  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
?LoadReference@WaveItem@@QAEJPAVCRiffParser@@@Z ENDP	; WaveItem::LoadReference
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?CleanUp@WaveItem@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?CleanUp@WaveItem@@QAEXXZ PROC NEAR			; WaveItem::CleanUp, COMDAT
; _this$ = ecx

; 3172 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3173 :     if (m_pWave)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0000e	74 1c		 je	 SHORT $L70605

; 3174 :     {
; 3175 :         m_pWave->Release();

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0001c	8b 12		 mov	 edx, DWORD PTR [edx]
  0001e	51		 push	 ecx
  0001f	ff 52 08	 call	 DWORD PTR [edx+8]

; 3176 :         m_pWave = NULL;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
$L70605:

; 3177 :     }
; 3178 : #ifdef DXAPI
; 3179 :     if (m_pDownloadedWave)
; 3180 :     {
; 3181 :         m_pDownloadedWave->Release();
; 3182 :         m_pDownloadedWave = NULL;
; 3183 :     }
; 3184 : #endif
; 3185 : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?CleanUp@WaveItem@@QAEXXZ ENDP				; WaveItem::CleanUp
_TEXT	ENDS
EXTRN	_IID_IPrivateWave:BYTE
; Function compile flags: /Odt
;	COMDAT ?SetWaveParams@WaveItem@@QAEXPAU_DMUS_IO_WAVE_HEADER@@@Z
_TEXT	SEGMENT
_this$ = -8
_pPrivWave$ = -4
_pWaveHeader$ = 8
?SetWaveParams@WaveItem@@QAEXPAU_DMUS_IO_WAVE_HEADER@@@Z PROC NEAR ; WaveItem::SetWaveParams, COMDAT
; _this$ = ecx

; 3189 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3190 :     IPrivateWave* pPrivWave = NULL;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pPrivWave$[ebp], 0

; 3191 :     if (SUCCEEDED(m_pWave->QueryInterface(IID_IPrivateWave, (void**)&pPrivWave)))

  00010	8d 45 fc	 lea	 eax, DWORD PTR _pPrivWave$[ebp]
  00013	50		 push	 eax
  00014	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPrivateWave
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00025	8b 12		 mov	 edx, DWORD PTR [edx]
  00027	51		 push	 ecx
  00028	ff 12		 call	 DWORD PTR [edx]
  0002a	85 c0		 test	 eax, eax
  0002c	0f 8c 96 00 00
	00		 jl	 $L70610

; 3192 :     {
; 3193 :         pPrivWave->SetWaveParams(pWaveHeader->rtReadAhead,pWaveHeader->dwFlags);

  00032	8b 45 08	 mov	 eax, DWORD PTR _pWaveHeader$[ebp]
  00035	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00038	51		 push	 ecx
  00039	8b 55 08	 mov	 edx, DWORD PTR _pWaveHeader$[ebp]
  0003c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003f	50		 push	 eax
  00040	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00042	51		 push	 ecx
  00043	8b 55 fc	 mov	 edx, DWORD PTR _pPrivWave$[ebp]
  00046	8b 02		 mov	 eax, DWORD PTR [edx]
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _pPrivWave$[ebp]
  0004b	51		 push	 ecx
  0004c	ff 50 10	 call	 DWORD PTR [eax+16]

; 3194 :         m_dwFlags &= ~(DMUS_WAVEF_IGNORELOOPS | DMUS_WAVEF_NOINVALIDATE);

  0004f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00055	83 e0 db	 and	 eax, -37		; ffffffdbH
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 3195 :         m_dwFlags |= pWaveHeader->dwFlags & (DMUS_WAVEF_IGNORELOOPS | DMUS_WAVEF_NOINVALIDATE);

  0005e	8b 55 08	 mov	 edx, DWORD PTR _pWaveHeader$[ebp]
  00061	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00064	83 e0 24	 and	 eax, 36			; 00000024H
  00067	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0006d	0b d0		 or	 edx, eax
  0006f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00072	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 3196 :         m_pWave->GetStreamingParms(&pWaveHeader->dwFlags, &pWaveHeader->rtReadAhead);

  00075	8b 4d 08	 mov	 ecx, DWORD PTR _pWaveHeader$[ebp]
  00078	51		 push	 ecx
  00079	8b 55 08	 mov	 edx, DWORD PTR _pWaveHeader$[ebp]
  0007c	83 c2 08	 add	 edx, 8
  0007f	52		 push	 edx
  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00086	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00089	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0008c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0008e	50		 push	 eax
  0008f	ff 51 14	 call	 DWORD PTR [ecx+20]

; 3197 :         m_fIsStreaming = pWaveHeader->dwFlags & DMUS_WAVEF_STREAMING ? TRUE : FALSE;

  00092	8b 55 08	 mov	 edx, DWORD PTR _pWaveHeader$[ebp]
  00095	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00098	83 e0 02	 and	 eax, 2
  0009b	f7 d8		 neg	 eax
  0009d	1b c0		 sbb	 eax, eax
  0009f	f7 d8		 neg	 eax
  000a1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 3198 :         m_fUseNoPreRoll = pWaveHeader->dwFlags & DMUS_WAVEF_NOPREROLL ? TRUE : FALSE;

  000a7	8b 55 08	 mov	 edx, DWORD PTR _pWaveHeader$[ebp]
  000aa	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000ad	83 e0 08	 and	 eax, 8
  000b0	f7 d8		 neg	 eax
  000b2	1b c0		 sbb	 eax, eax
  000b4	f7 d8		 neg	 eax
  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 3199 :         pPrivWave->Release();

  000bc	8b 55 fc	 mov	 edx, DWORD PTR _pPrivWave$[ebp]
  000bf	8b 02		 mov	 eax, DWORD PTR [edx]
  000c1	8b 4d fc	 mov	 ecx, DWORD PTR _pPrivWave$[ebp]
  000c4	51		 push	 ecx
  000c5	ff 50 08	 call	 DWORD PTR [eax+8]
$L70610:

; 3200 :     }
; 3201 : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 04 00	 ret	 4
?SetWaveParams@WaveItem@@QAEXPAU_DMUS_IO_WAVE_HEADER@@@Z ENDP ; WaveItem::SetWaveParams
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Add@WaveItem@@QAEJPAUIDirectSoundWave@@_JPA_J@Z
_TEXT	SEGMENT
_this$ = -32
_dwFlags$70635 = -28
_rtReadAhead$70634 = -24
_hr$ = -16
_pPrivWave$ = -12
_rtLength$ = -8
_pWave$ = 8
_rtTime$ = 12
_prtLength$ = 20
?Add@WaveItem@@QAEJPAUIDirectSoundWave@@_JPA_J@Z PROC NEAR ; WaveItem::Add, COMDAT
; _this$ = ecx

; 3206 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 3207 :     HRESULT hr = S_OK;

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 3208 :     IPrivateWave* pPrivWave = NULL;

  00010	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pPrivWave$[ebp], 0

; 3209 :     *prtLength = 0; // in case GetLength fails...

  00017	8b 45 14	 mov	 eax, DWORD PTR _prtLength$[ebp]
  0001a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00020	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 3210 :     REFERENCE_TIME rtLength = 0;

  00027	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _rtLength$[ebp], 0
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rtLength$[ebp+4], 0

; 3211 :     m_rtDuration = 0;

  00035	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  0003f	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 3212 :     if (SUCCEEDED(hr = pWave->QueryInterface(IID_IPrivateWave, (void**)&pPrivWave)))

  00046	8d 55 f4	 lea	 edx, DWORD PTR _pPrivWave$[ebp]
  00049	52		 push	 edx
  0004a	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPrivateWave
  0004f	8b 45 08	 mov	 eax, DWORD PTR _pWave$[ebp]
  00052	8b 08		 mov	 ecx, DWORD PTR [eax]
  00054	8b 55 08	 mov	 edx, DWORD PTR _pWave$[ebp]
  00057	52		 push	 edx
  00058	ff 11		 call	 DWORD PTR [ecx]
  0005a	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
  0005d	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00061	7c 5e		 jl	 SHORT $L70627

; 3213 :     {
; 3214 :         if (SUCCEEDED(hr = pPrivWave->GetLength(&rtLength,&m_dwLoopStart,&m_dwLoopEnd)))

  00063	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00066	83 c0 44	 add	 eax, 68			; 00000044H
  00069	50		 push	 eax
  0006a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 c1 40	 add	 ecx, 64			; 00000040H
  00070	51		 push	 ecx
  00071	8d 55 f8	 lea	 edx, DWORD PTR _rtLength$[ebp]
  00074	52		 push	 edx
  00075	8b 45 f4	 mov	 eax, DWORD PTR _pPrivWave$[ebp]
  00078	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007a	8b 55 f4	 mov	 edx, DWORD PTR _pPrivWave$[ebp]
  0007d	52		 push	 edx
  0007e	ff 51 0c	 call	 DWORD PTR [ecx+12]
  00081	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
  00084	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00088	7c 2b		 jl	 SHORT $L70629

; 3215 :         {
; 3216 :             // Assumes the track is clock time
; 3217 :             m_rtDuration = rtLength * REF_PER_MIL;

  0008a	6a 00		 push	 0
  0008c	68 10 27 00 00	 push	 10000			; 00002710H
  00091	8b 45 fc	 mov	 eax, DWORD PTR _rtLength$[ebp+4]
  00094	50		 push	 eax
  00095	8b 4d f8	 mov	 ecx, DWORD PTR _rtLength$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 __allmul
  0009e	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  000a4	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 3218 :             *prtLength = rtLength; // NOTE: length in milliseconds; duration in Ref time

  000a7	8b 55 14	 mov	 edx, DWORD PTR _prtLength$[ebp]
  000aa	8b 45 f8	 mov	 eax, DWORD PTR _rtLength$[ebp]
  000ad	89 02		 mov	 DWORD PTR [edx], eax
  000af	8b 4d fc	 mov	 ecx, DWORD PTR _rtLength$[ebp+4]
  000b2	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$L70629:

; 3219 :         }
; 3220 :         pPrivWave->Release();

  000b5	8b 55 f4	 mov	 edx, DWORD PTR _pPrivWave$[ebp]
  000b8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ba	8b 4d f4	 mov	 ecx, DWORD PTR _pPrivWave$[ebp]
  000bd	51		 push	 ecx
  000be	ff 50 08	 call	 DWORD PTR [eax+8]
$L70627:

; 3221 :     }
; 3222 :     if (SUCCEEDED(hr))

  000c1	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c5	0f 8c ed 00 00
	00		 jl	 $L70631

; 3223 :     {
; 3224 :         m_lVolume = 0;

  000cb	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000ce	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 3225 :         m_lPitch = 0;

  000d5	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  000d8	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 3226 :         m_dwVariations = 0xffffffff;

  000df	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e2	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [ecx+16], -1

; 3227 :         m_rtTimePhysical = rtTime;

  000e9	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000ec	8b 45 0c	 mov	 eax, DWORD PTR _rtTime$[ebp]
  000ef	89 02		 mov	 DWORD PTR [edx], eax
  000f1	8b 4d 10	 mov	 ecx, DWORD PTR _rtTime$[ebp+4]
  000f4	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 3228 :         m_rtStartOffset = 0;  

  000f7	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000fa	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0
  00101	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0

; 3229 :         m_mtTimeLogical = 0;

  00108	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0010b	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 3230 :         m_dwFlags = 0;

  00112	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 3231 :         if (m_pWave)

  0011c	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0011f	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  00123	74 1c		 je	 SHORT $L70632

; 3232 :         {
; 3233 :             m_pWave->Release();

  00125	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00128	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0012b	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0012e	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00131	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00133	50		 push	 eax
  00134	ff 51 08	 call	 DWORD PTR [ecx+8]

; 3234 :             m_pWave = NULL;

  00137	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0013a	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
$L70632:

; 3235 :         }
; 3236 :         m_pWave = pWave;

  00141	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00144	8b 4d 08	 mov	 ecx, DWORD PTR _pWave$[ebp]
  00147	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 3237 :         if (m_pWave)

  0014a	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0014d	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  00151	74 65		 je	 SHORT $L70631

; 3238 :         {
; 3239 :             m_pWave->AddRef();

  00153	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00156	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00159	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0015c	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0015f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00161	50		 push	 eax
  00162	ff 51 04	 call	 DWORD PTR [ecx+4]

; 3240 :             REFERENCE_TIME rtReadAhead = 0;

  00165	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _rtReadAhead$70634[ebp], 0
  0016c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _rtReadAhead$70634[ebp+4], 0

; 3241 :             DWORD dwFlags = 0;

  00173	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dwFlags$70635[ebp], 0

; 3242 :             m_pWave->GetStreamingParms(&dwFlags, &rtReadAhead);

  0017a	8d 55 e8	 lea	 edx, DWORD PTR _rtReadAhead$70634[ebp]
  0017d	52		 push	 edx
  0017e	8d 45 e4	 lea	 eax, DWORD PTR _dwFlags$70635[ebp]
  00181	50		 push	 eax
  00182	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00185	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00188	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0018b	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0018e	8b 12		 mov	 edx, DWORD PTR [edx]
  00190	51		 push	 ecx
  00191	ff 52 14	 call	 DWORD PTR [edx+20]

; 3243 :             m_fIsStreaming = dwFlags & DMUS_WAVEF_STREAMING ? TRUE : FALSE;

  00194	8b 45 e4	 mov	 eax, DWORD PTR _dwFlags$70635[ebp]
  00197	83 e0 02	 and	 eax, 2
  0019a	f7 d8		 neg	 eax
  0019c	1b c0		 sbb	 eax, eax
  0019e	f7 d8		 neg	 eax
  001a0	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 3244 :             m_fUseNoPreRoll = dwFlags & DMUS_WAVEF_NOPREROLL ? TRUE : FALSE;

  001a6	8b 55 e4	 mov	 edx, DWORD PTR _dwFlags$70635[ebp]
  001a9	83 e2 08	 and	 edx, 8
  001ac	f7 da		 neg	 edx
  001ae	1b d2		 sbb	 edx, edx
  001b0	f7 da		 neg	 edx
  001b2	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  001b5	89 50 3c	 mov	 DWORD PTR [eax+60], edx
$L70631:

; 3245 :         }
; 3246 : #ifdef DXAPI
; 3247 :         if (m_pDownloadedWave)
; 3248 :         {
; 3249 :             m_pDownloadedWave->Release();
; 3250 :         }
; 3251 :         m_pDownloadedWave = NULL;
; 3252 : #endif
; 3253 :     }
; 3254 :     return hr;

  001b8	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]

; 3255 : }

  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c2 10 00	 ret	 16			; 00000010H
?Add@WaveItem@@QAEJPAUIDirectSoundWave@@_JPA_J@Z ENDP	; WaveItem::Add
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\tlist.h
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UWaveItem@@@@QBEPAV?$TListItem@UWaveItem@@@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@?$TList@UWaveItem@@@@QBEPAV?$TListItem@UWaveItem@@@@XZ PROC NEAR ; TList<WaveItem>::GetHead, COMDAT
; _this$ = ecx

; 61   :     TListItem<T> *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@?$TList@UWaveItem@@@@QBEPAV?$TListItem@UWaveItem@@@@XZ ENDP ; TList<WaveItem>::GetHead
_TEXT	ENDS
PUBLIC	?Delete@?$TListItem@UWaveItem@@@@SGXPAV1@@Z	; TListItem<WaveItem>::Delete
; Function compile flags: /Odt
;	COMDAT ?CleanUp@?$TList@UWaveItem@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?CleanUp@?$TList@UWaveItem@@@@QAEXXZ PROC NEAR		; TList<WaveItem>::CleanUp, COMDAT
; _this$ = ecx

; 65   : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   : 		//if (m_pHead) delete m_pHead;
; 67   : 		if (m_pHead) TListItem<T>::Delete(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 0b		 je	 SHORT $L70640
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?Delete@?$TListItem@UWaveItem@@@@SGXPAV1@@Z ; TListItem<WaveItem>::Delete
$L70640:

; 68   : 		m_pHead=NULL;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 69   : 	}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?CleanUp@?$TList@UWaveItem@@@@QAEXXZ ENDP		; TList<WaveItem>::CleanUp
_TEXT	ENDS
PUBLIC	?SetNext@?$TListItem@UWaveItem@@@@QAEXPAV1@@Z	; TListItem<WaveItem>::SetNext
; Function compile flags: /Odt
;	COMDAT ?AddHead@?$TList@UWaveItem@@@@QAEXPAV?$TListItem@UWaveItem@@@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddHead@?$TList@UWaveItem@@@@QAEXPAV?$TListItem@UWaveItem@@@@@Z PROC NEAR ; TList<WaveItem>::AddHead, COMDAT
; _this$ = ecx

; 80   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : //            assert(pItem!=NULL);
; 82   :             pItem->SetNext(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00010	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UWaveItem@@@@QAEXPAV1@@Z ; TListItem<WaveItem>::SetNext

; 83   :             m_pHead=pItem;

  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0001b	89 02		 mov	 DWORD PTR [edx], eax

; 84   :         }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?AddHead@?$TList@UWaveItem@@@@QAEXPAV?$TListItem@UWaveItem@@@@@Z ENDP ; TList<WaveItem>::AddHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0?$TList@UWavePart@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$TList@UWavePart@@@@QAE@XZ PROC NEAR		; TList<WavePart>::TList<WavePart>, COMDAT
; _this$ = ecx

; 55   :     TList() {m_pHead=NULL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0?$TList@UWavePart@@@@QAE@XZ ENDP			; TList<WavePart>::TList<WavePart>
_TEXT	ENDS
PUBLIC	?Delete@?$TListItem@UWavePart@@@@SGXPAV1@@Z	; TListItem<WavePart>::Delete
; Function compile flags: /Odt
;	COMDAT ??1?$TList@UWavePart@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$TList@UWavePart@@@@QAE@XZ PROC NEAR		; TList<WavePart>::~TList<WavePart>, COMDAT
; _this$ = ecx

; 57   : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 58   : 		//if (m_pHead != NULL) delete m_pHead;
; 59   : 		TListItem<T>::Delete(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?Delete@?$TListItem@UWavePart@@@@SGXPAV1@@Z ; TListItem<WavePart>::Delete

; 60   : 	} // new destructor

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??1?$TList@UWavePart@@@@QAE@XZ ENDP			; TList<WavePart>::~TList<WavePart>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ PROC NEAR ; TList<WavePart>::GetHead, COMDAT
; _this$ = ecx

; 61   :     TListItem<T> *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@?$TList@UWavePart@@@@QBEPAV?$TListItem@UWavePart@@@@XZ ENDP ; TList<WavePart>::GetHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UWavePart@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?CleanUp@?$TList@UWavePart@@@@QAEXXZ PROC NEAR		; TList<WavePart>::CleanUp, COMDAT
; _this$ = ecx

; 65   : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   : 		//if (m_pHead) delete m_pHead;
; 67   : 		if (m_pHead) TListItem<T>::Delete(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 0b		 je	 SHORT $L70651
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?Delete@?$TListItem@UWavePart@@@@SGXPAV1@@Z ; TListItem<WavePart>::Delete
$L70651:

; 68   : 		m_pHead=NULL;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 69   : 	}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?CleanUp@?$TList@UWavePart@@@@QAEXXZ ENDP		; TList<WavePart>::CleanUp
_TEXT	ENDS
PUBLIC	?GetCount@?$TListItem@UWavePart@@@@QBEJXZ	; TListItem<WavePart>::GetCount
; Function compile flags: /Odt
;	COMDAT ?GetCount@?$TList@UWavePart@@@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?GetCount@?$TList@UWavePart@@@@QBEJXZ PROC NEAR		; TList<WavePart>::GetCount, COMDAT
; _this$ = ecx

; 70   :     LONG GetCount() const {return m_pHead->GetCount();}; 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	e8 00 00 00 00	 call	 ?GetCount@?$TListItem@UWavePart@@@@QBEJXZ ; TListItem<WavePart>::GetCount
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?GetCount@?$TList@UWavePart@@@@QBEJXZ ENDP		; TList<WavePart>::GetCount
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UWavePart@@@@QAEXPAV?$TListItem@UWavePart@@@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddHead@?$TList@UWavePart@@@@QAEXPAV?$TListItem@UWavePart@@@@@Z PROC NEAR ; TList<WavePart>::AddHead, COMDAT
; _this$ = ecx

; 80   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : //            assert(pItem!=NULL);
; 82   :             pItem->SetNext(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00010	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UWavePart@@@@QAEXPAV1@@Z ; TListItem<WavePart>::SetNext

; 83   :             m_pHead=pItem;

  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0001b	89 02		 mov	 DWORD PTR [edx], eax

; 84   :         }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?AddHead@?$TList@UWavePart@@@@QAEXPAV?$TListItem@UWavePart@@@@@Z ENDP ; TList<WavePart>::AddHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RemoveHead@?$TList@UWavePart@@@@QAEPAV?$TListItem@UWavePart@@@@XZ
_TEXT	SEGMENT
_this$ = -8
_li$ = -4
?RemoveHead@?$TList@UWavePart@@@@QAEPAV?$TListItem@UWavePart@@@@XZ PROC NEAR ; TList<WavePart>::RemoveHead, COMDAT
; _this$ = ecx

; 91   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 92   :             TListItem<T> *li;
; 93   :             li=m_pHead;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR _li$[ebp], ecx

; 94   :             if(m_pHead)

  00011	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00014	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00017	74 19		 je	 SHORT $L70659

; 95   : 			{
; 96   :                 m_pHead=m_pHead->GetNext();

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	89 01		 mov	 DWORD PTR [ecx], eax

; 97   : 				li->SetNext(NULL);

  00028	6a 00		 push	 0
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  0002d	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UWavePart@@@@QAEXPAV1@@Z ; TListItem<WavePart>::SetNext
$L70659:

; 98   : 			}
; 99   :             return li;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _li$[ebp]

; 100  :         }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?RemoveHead@?$TList@UWavePart@@@@QAEPAV?$TListItem@UWavePart@@@@XZ ENDP ; TList<WavePart>::RemoveHead
_TEXT	ENDS
PUBLIC	??0WaveItem@@QAE@XZ				; WaveItem::WaveItem
; Function compile flags: /Odt
;	COMDAT ??0?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$TListItem@UWaveItem@@@@QAE@XZ PROC NEAR		; TListItem<WaveItem>::TListItem<WaveItem>, COMDAT
; _this$ = ecx

; 28   :     TListItem() { m_pNext=NULL; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0WaveItem@@QAE@XZ	; WaveItem::WaveItem
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??0?$TListItem@UWaveItem@@@@QAE@XZ ENDP			; TListItem<WaveItem>::TListItem<WaveItem>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ PROC NEAR	; TListItem<WaveItem>::GetNext, COMDAT
; _this$ = ecx

; 32   :     TListItem<T> *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 48	 mov	 eax, DWORD PTR [eax+72]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ ENDP	; TListItem<WaveItem>::GetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UWaveItem@@@@QAEAAUWaveItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetItemValue@?$TListItem@UWaveItem@@@@QAEAAUWaveItem@@XZ PROC NEAR ; TListItem<WaveItem>::GetItemValue, COMDAT
; _this$ = ecx

; 40   :     T& GetItemValue() { return m_Tinfo; }  // additional member function

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?GetItemValue@?$TListItem@UWaveItem@@@@QAEAAUWaveItem@@XZ ENDP ; TListItem<WaveItem>::GetItemValue
_TEXT	ENDS
PUBLIC	??0WavePart@@QAE@XZ				; WavePart::WavePart
; Function compile flags: /Odt
;	COMDAT ??0?$TListItem@UWavePart@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$TListItem@UWavePart@@@@QAE@XZ PROC NEAR		; TListItem<WavePart>::TListItem<WavePart>, COMDAT
; _this$ = ecx

; 28   :     TListItem() { m_pNext=NULL; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0WavePart@@QAE@XZ	; WavePart::WavePart
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??0?$TListItem@UWavePart@@@@QAE@XZ ENDP			; TListItem<WavePart>::TListItem<WavePart>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ PROC NEAR	; TListItem<WavePart>::GetNext, COMDAT
; _this$ = ecx

; 32   :     TListItem<T> *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ENDP	; TListItem<WavePart>::GetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UWavePart@@@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@?$TListItem@UWavePart@@@@QAEXPAV1@@Z PROC NEAR	; TListItem<WavePart>::SetNext, COMDAT
; _this$ = ecx

; 33   :     void SetNext(TListItem<T> *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetNext@?$TListItem@UWavePart@@@@QAEXPAV1@@Z ENDP	; TListItem<WavePart>::SetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ PROC NEAR ; TListItem<WavePart>::GetItemValue, COMDAT
; _this$ = ecx

; 40   :     T& GetItemValue() { return m_Tinfo; }  // additional member function

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?GetItemValue@?$TListItem@UWavePart@@@@QAEAAUWavePart@@XZ ENDP ; TListItem<WavePart>::GetItemValue
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UWaveItem@@@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@?$TListItem@UWaveItem@@@@QAEXPAV1@@Z PROC NEAR	; TListItem<WaveItem>::SetNext, COMDAT
; _this$ = ecx

; 33   :     void SetNext(TListItem<T> *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 48 48	 mov	 DWORD PTR [eax+72], ecx
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetNext@?$TListItem@UWaveItem@@@@QAEXPAV1@@Z ENDP	; TListItem<WaveItem>::SetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\tlist.cpp
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UWavePart@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12
_pNewHead$70792 = -8
_pNext$70793 = -4
?Reverse@?$TList@UWavePart@@@@QAEXXZ PROC NEAR		; TList<WavePart>::Reverse, COMDAT
; _this$ = ecx

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 198  : 	if( m_pHead )

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 66		 je	 SHORT $L70790

; 199  : 	{
; 200  : 		TListItem<T>* pNewHead = m_pHead;

  00011	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 55 f8	 mov	 DWORD PTR _pNewHead$70792[ebp], edx

; 201  : 		TListItem<T>* pNext = m_pHead->GetNext();

  00019	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  00023	89 45 fc	 mov	 DWORD PTR _pNext$70793[ebp], eax

; 202  : 		pNewHead->SetNext(NULL);

  00026	6a 00		 push	 0
  00028	8b 4d f8	 mov	 ecx, DWORD PTR _pNewHead$70792[ebp]
  0002b	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UWavePart@@@@QAEXPAV1@@Z ; TListItem<WavePart>::SetNext

; 203  : 		for( m_pHead = pNext; m_pHead; m_pHead = pNext )

  00030	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 55 fc	 mov	 edx, DWORD PTR _pNext$70793[ebp]
  00036	89 11		 mov	 DWORD PTR [ecx], edx
  00038	eb 08		 jmp	 SHORT $L70794
$L70795:
  0003a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _pNext$70793[ebp]
  00040	89 08		 mov	 DWORD PTR [eax], ecx
$L70794:
  00042	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00045	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00048	74 25		 je	 SHORT $L70796

; 204  : 		{
; 205  : 			pNext = m_pHead->GetNext();

  0004a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004f	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWavePart@@@@QBEPAV1@XZ ; TListItem<WavePart>::GetNext
  00054	89 45 fc	 mov	 DWORD PTR _pNext$70793[ebp], eax

; 206  : 			m_pHead->SetNext(pNewHead);

  00057	8b 4d f8	 mov	 ecx, DWORD PTR _pNewHead$70792[ebp]
  0005a	51		 push	 ecx
  0005b	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00060	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UWavePart@@@@QAEXPAV1@@Z ; TListItem<WavePart>::SetNext

; 207  : 			pNewHead = m_pHead;

  00065	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006a	89 4d f8	 mov	 DWORD PTR _pNewHead$70792[ebp], ecx

; 208  : 		}

  0006d	eb cb		 jmp	 SHORT $L70795
$L70796:

; 209  : 		m_pHead = pNewHead;

  0006f	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00072	8b 45 f8	 mov	 eax, DWORD PTR _pNewHead$70792[ebp]
  00075	89 02		 mov	 DWORD PTR [edx], eax
$L70790:

; 210  : 	}
; 211  : }

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?Reverse@?$TList@UWavePart@@@@QAEXXZ ENDP		; TList<WavePart>::Reverse
_TEXT	ENDS
PUBLIC	??1WavePart@@QAE@XZ				; WavePart::~WavePart
; Function compile flags: /Odt
;	COMDAT ??1?$TListItem@UWavePart@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$TListItem@UWavePart@@@@QAE@XZ PROC NEAR		; TListItem<WavePart>::~TListItem<WavePart>, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	//if (m_pNext != NULL) { delete m_pNext; }
; 22   : 	// IMPORTANT: user of the list is required to delete content first!
; 23   : 	//ZeroMemory(&m_Tinfo, sizeof(T));
; 24   : }

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1WavePart@@QAE@XZ	; WavePart::~WavePart
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$TListItem@UWavePart@@@@QAE@XZ ENDP			; TListItem<WavePart>::~TListItem<WavePart>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UWavePart@@@@SGXPAV1@@Z
_TEXT	SEGMENT
tv70 = -20
$T71544 = -16
$T71543 = -12
_pScan$ = -8
_pNext$ = -4
_pFirst$ = 8
?Delete@?$TListItem@UWavePart@@@@SGXPAV1@@Z PROC NEAR	; TListItem<WavePart>::Delete, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 29   : 	TListItem<T>* pScan = pFirst;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pFirst$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _pScan$[ebp], eax

; 30   : 	TListItem<T>* pNext = NULL;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pNext$[ebp], 0
$L70806:

; 31   : 	while (pScan)

  00013	83 7d f8 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00017	74 39		 je	 SHORT $L70802

; 32   : 	{
; 33   : 		pNext = pScan->m_pNext;

  00019	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0001c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0001f	89 55 fc	 mov	 DWORD PTR _pNext$[ebp], edx

; 34   : 		delete pScan;

  00022	8b 45 f8	 mov	 eax, DWORD PTR _pScan$[ebp]
  00025	89 45 f0	 mov	 DWORD PTR $T71544[ebp], eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR $T71544[ebp]
  0002b	89 4d f4	 mov	 DWORD PTR $T71543[ebp], ecx
  0002e	83 7d f4 00	 cmp	 DWORD PTR $T71543[ebp], 0
  00032	74 0f		 je	 SHORT $L71545
  00034	6a 01		 push	 1
  00036	8b 4d f4	 mov	 ecx, DWORD PTR $T71543[ebp]
  00039	e8 00 00 00 00	 call	 ??_G?$TListItem@UWavePart@@@@QAEPAXI@Z
  0003e	89 45 ec	 mov	 DWORD PTR tv70[ebp], eax
  00041	eb 07		 jmp	 SHORT $L71546
$L71545:
  00043	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$L71546:

; 35   : 		pScan = pNext;

  0004a	8b 55 fc	 mov	 edx, DWORD PTR _pNext$[ebp]
  0004d	89 55 f8	 mov	 DWORD PTR _pScan$[ebp], edx

; 36   : 	}

  00050	eb c1		 jmp	 SHORT $L70806
$L70802:

; 37   : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?Delete@?$TListItem@UWavePart@@@@SGXPAV1@@Z ENDP	; TListItem<WavePart>::Delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetCount@?$TListItem@UWavePart@@@@QBEJXZ
_TEXT	SEGMENT
_this$ = -12
_l$ = -8
_li$ = -4
?GetCount@?$TListItem@UWavePart@@@@QBEJXZ PROC NEAR	; TListItem<WavePart>::GetCount, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 42   :     LONG l;
; 43   :     const TListItem<T> *li;
; 44   : 
; 45   :     for(l=0,li=this; li!=NULL ; li=li->m_pNext,++l);

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _l$[ebp], 0
  00010	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00013	89 45 fc	 mov	 DWORD PTR _li$[ebp], eax
  00016	eb 12		 jmp	 SHORT $L70816
$L70817:
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  0001b	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0001e	89 55 fc	 mov	 DWORD PTR _li$[ebp], edx
  00021	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]
  00024	83 c0 01	 add	 eax, 1
  00027	89 45 f8	 mov	 DWORD PTR _l$[ebp], eax
$L70816:
  0002a	83 7d fc 00	 cmp	 DWORD PTR _li$[ebp], 0
  0002e	74 02		 je	 SHORT $L70818
  00030	eb e6		 jmp	 SHORT $L70817
$L70818:

; 46   :     return l;

  00032	8b 45 f8	 mov	 eax, DWORD PTR _l$[ebp]

; 47   : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?GetCount@?$TListItem@UWavePart@@@@QBEJXZ ENDP		; TListItem<WavePart>::GetCount
_TEXT	ENDS
PUBLIC	?MergeSort@?$TListItem@UWaveItem@@@@QAEPAV1@P6GHAAUWaveItem@@0@Z@Z ; TListItem<WaveItem>::MergeSort
; Function compile flags: /Odt
;	COMDAT ?MergeSort@?$TList@UWaveItem@@@@QAEXP6GHAAUWaveItem@@0@Z@Z
_TEXT	SEGMENT
_this$ = -4
_fcnCompare$ = 8
?MergeSort@?$TList@UWaveItem@@@@QAEXP6GHAAUWaveItem@@0@Z@Z PROC NEAR ; TList<WaveItem>::MergeSort, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 191  : 	if (m_pHead != NULL && m_pHead->GetNext() != NULL)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 21		 je	 SHORT $L70824
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00014	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ ; TListItem<WaveItem>::GetNext
  00019	85 c0		 test	 eax, eax
  0001b	74 13		 je	 SHORT $L70824

; 192  : 		m_pHead = m_pHead->MergeSort(fcnCompare);

  0001d	8b 55 08	 mov	 edx, DWORD PTR _fcnCompare$[ebp]
  00020	52		 push	 edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	e8 00 00 00 00	 call	 ?MergeSort@?$TListItem@UWaveItem@@@@QAEPAV1@P6GHAAUWaveItem@@0@Z@Z ; TListItem<WaveItem>::MergeSort
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 01		 mov	 DWORD PTR [ecx], eax
$L70824:

; 193  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?MergeSort@?$TList@UWaveItem@@@@QAEXP6GHAAUWaveItem@@0@Z@Z ENDP ; TList<WaveItem>::MergeSort
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UWaveItem@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12
_pNewHead$70831 = -8
_pNext$70832 = -4
?Reverse@?$TList@UWaveItem@@@@QAEXXZ PROC NEAR		; TList<WaveItem>::Reverse, COMDAT
; _this$ = ecx

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 198  : 	if( m_pHead )

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 66		 je	 SHORT $L70829

; 199  : 	{
; 200  : 		TListItem<T>* pNewHead = m_pHead;

  00011	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 55 f8	 mov	 DWORD PTR _pNewHead$70831[ebp], edx

; 201  : 		TListItem<T>* pNext = m_pHead->GetNext();

  00019	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ ; TListItem<WaveItem>::GetNext
  00023	89 45 fc	 mov	 DWORD PTR _pNext$70832[ebp], eax

; 202  : 		pNewHead->SetNext(NULL);

  00026	6a 00		 push	 0
  00028	8b 4d f8	 mov	 ecx, DWORD PTR _pNewHead$70831[ebp]
  0002b	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UWaveItem@@@@QAEXPAV1@@Z ; TListItem<WaveItem>::SetNext

; 203  : 		for( m_pHead = pNext; m_pHead; m_pHead = pNext )

  00030	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 55 fc	 mov	 edx, DWORD PTR _pNext$70832[ebp]
  00036	89 11		 mov	 DWORD PTR [ecx], edx
  00038	eb 08		 jmp	 SHORT $L70833
$L70834:
  0003a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _pNext$70832[ebp]
  00040	89 08		 mov	 DWORD PTR [eax], ecx
$L70833:
  00042	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00045	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00048	74 25		 je	 SHORT $L70835

; 204  : 		{
; 205  : 			pNext = m_pHead->GetNext();

  0004a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004f	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ ; TListItem<WaveItem>::GetNext
  00054	89 45 fc	 mov	 DWORD PTR _pNext$70832[ebp], eax

; 206  : 			m_pHead->SetNext(pNewHead);

  00057	8b 4d f8	 mov	 ecx, DWORD PTR _pNewHead$70831[ebp]
  0005a	51		 push	 ecx
  0005b	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00060	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UWaveItem@@@@QAEXPAV1@@Z ; TListItem<WaveItem>::SetNext

; 207  : 			pNewHead = m_pHead;

  00065	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006a	89 4d f8	 mov	 DWORD PTR _pNewHead$70831[ebp], ecx

; 208  : 		}

  0006d	eb cb		 jmp	 SHORT $L70834
$L70835:

; 209  : 		m_pHead = pNewHead;

  0006f	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00072	8b 45 f8	 mov	 eax, DWORD PTR _pNewHead$70831[ebp]
  00075	89 02		 mov	 DWORD PTR [edx], eax
$L70829:

; 210  : 	}
; 211  : }

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?Reverse@?$TList@UWaveItem@@@@QAEXXZ ENDP		; TList<WaveItem>::Reverse
_TEXT	ENDS
PUBLIC	?Divide@?$TListItem@UWaveItem@@@@AAEXAAPAV1@0@Z	; TListItem<WaveItem>::Divide
PUBLIC	?Merge@?$TListItem@UWaveItem@@@@AAEPAV1@PAV1@P6GHAAUWaveItem@@1@Z@Z ; TListItem<WaveItem>::Merge
; Function compile flags: /Odt
;	COMDAT ?MergeSort@?$TListItem@UWaveItem@@@@QAEPAV1@P6GHAAUWaveItem@@0@Z@Z
_TEXT	SEGMENT
_this$ = -12
_pList2$70864 = -8
_pList1$70863 = -4
_fcnCompare$ = 8
?MergeSort@?$TListItem@UWaveItem@@@@QAEPAV1@P6GHAAUWaveItem@@0@Z@Z PROC NEAR ; TListItem<WaveItem>::MergeSort, COMDAT
; _this$ = ecx

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 108  : 	if (m_pNext != NULL)

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  00010	74 36		 je	 SHORT $L70862

; 109  : 	{
; 110  : 		TListItem<T> *pList1, *pList2;
; 111  : 		Divide(pList1, pList2);

  00012	8d 4d f8	 lea	 ecx, DWORD PTR _pList2$70864[ebp]
  00015	51		 push	 ecx
  00016	8d 55 fc	 lea	 edx, DWORD PTR _pList1$70863[ebp]
  00019	52		 push	 edx
  0001a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?Divide@?$TListItem@UWaveItem@@@@AAEXAAPAV1@0@Z ; TListItem<WaveItem>::Divide

; 112  : 		return pList1->MergeSort(fcnCompare)->Merge(pList2->MergeSort(fcnCompare), fcnCompare);

  00022	8b 45 08	 mov	 eax, DWORD PTR _fcnCompare$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _fcnCompare$[ebp]
  00029	51		 push	 ecx
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _pList2$70864[ebp]
  0002d	e8 00 00 00 00	 call	 ?MergeSort@?$TListItem@UWaveItem@@@@QAEPAV1@P6GHAAUWaveItem@@0@Z@Z ; TListItem<WaveItem>::MergeSort
  00032	50		 push	 eax
  00033	8b 55 08	 mov	 edx, DWORD PTR _fcnCompare$[ebp]
  00036	52		 push	 edx
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _pList1$70863[ebp]
  0003a	e8 00 00 00 00	 call	 ?MergeSort@?$TListItem@UWaveItem@@@@QAEPAV1@P6GHAAUWaveItem@@0@Z@Z ; TListItem<WaveItem>::MergeSort
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?Merge@?$TListItem@UWaveItem@@@@AAEPAV1@PAV1@P6GHAAUWaveItem@@1@Z@Z ; TListItem<WaveItem>::Merge
  00046	eb 03		 jmp	 SHORT $L70861
$L70862:

; 113  : 	}
; 114  : 	return this;

  00048	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$L70861:

; 115  : }

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?MergeSort@?$TListItem@UWaveItem@@@@QAEPAV1@P6GHAAUWaveItem@@0@Z@Z ENDP ; TListItem<WaveItem>::MergeSort
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UWaveItem@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT
_this$ = -16
_pCurrent$ = -12
_pTail1$ = -8
_pTail2$ = -4
_pHead1$ = 8
_pHead2$ = 12
?Divide@?$TListItem@UWaveItem@@@@AAEXAAPAV1@0@Z PROC NEAR ; TListItem<WaveItem>::Divide, COMDAT
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 	TListItem<T> *pCurrent = this, *pTail1 = NULL, *pTail2 = NULL;

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR _pCurrent$[ebp], eax
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pTail1$[ebp], 0
  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pTail2$[ebp], 0
$L70939:

; 121  : 	do
; 122  : 	{
; 123  : 		pHead1 = pCurrent;

  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _pHead1$[ebp]
  00020	8b 55 f4	 mov	 edx, DWORD PTR _pCurrent$[ebp]
  00023	89 11		 mov	 DWORD PTR [ecx], edx

; 124  : 		pCurrent = pCurrent->m_pNext;

  00025	8b 45 f4	 mov	 eax, DWORD PTR _pCurrent$[ebp]
  00028	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0002b	89 4d f4	 mov	 DWORD PTR _pCurrent$[ebp], ecx

; 125  : 		pHead1->m_pNext = pTail1;

  0002e	8b 55 08	 mov	 edx, DWORD PTR _pHead1$[ebp]
  00031	8b 02		 mov	 eax, DWORD PTR [edx]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _pTail1$[ebp]
  00036	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 126  : 		pTail1 = pHead1;

  00039	8b 55 08	 mov	 edx, DWORD PTR _pHead1$[ebp]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 45 f8	 mov	 DWORD PTR _pTail1$[ebp], eax

; 127  : 		if (pCurrent != NULL)

  00041	83 7d f4 00	 cmp	 DWORD PTR _pCurrent$[ebp], 0
  00045	74 24		 je	 SHORT $L70940

; 128  : 		{
; 129  : 			pHead2 = pCurrent;

  00047	8b 4d 0c	 mov	 ecx, DWORD PTR _pHead2$[ebp]
  0004a	8b 55 f4	 mov	 edx, DWORD PTR _pCurrent$[ebp]
  0004d	89 11		 mov	 DWORD PTR [ecx], edx

; 130  : 			pCurrent = pCurrent->m_pNext;

  0004f	8b 45 f4	 mov	 eax, DWORD PTR _pCurrent$[ebp]
  00052	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00055	89 4d f4	 mov	 DWORD PTR _pCurrent$[ebp], ecx

; 131  : 			pHead2->m_pNext = pTail2;

  00058	8b 55 0c	 mov	 edx, DWORD PTR _pHead2$[ebp]
  0005b	8b 02		 mov	 eax, DWORD PTR [edx]
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _pTail2$[ebp]
  00060	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 132  : 			pTail2 = pHead2;

  00063	8b 55 0c	 mov	 edx, DWORD PTR _pHead2$[ebp]
  00066	8b 02		 mov	 eax, DWORD PTR [edx]
  00068	89 45 fc	 mov	 DWORD PTR _pTail2$[ebp], eax
$L70940:

; 133  : 		}
; 134  : 	} while (pCurrent != NULL);

  0006b	83 7d f4 00	 cmp	 DWORD PTR _pCurrent$[ebp], 0
  0006f	75 ac		 jne	 SHORT $L70939

; 135  : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 08 00	 ret	 8
?Divide@?$TListItem@UWaveItem@@@@AAEXAAPAV1@0@Z ENDP	; TListItem<WaveItem>::Divide
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UWaveItem@@@@AAEPAV1@PAV1@P6GHAAUWaveItem@@1@Z@Z
_TEXT	SEGMENT
_this$ = -20
_pMergeItem$ = -16
_pResultTail$ = -12
_pResultHead$ = -8
_pThisList$ = -4
_pOtherList$ = 8
_fcnCompare$ = 12
?Merge@?$TListItem@UWaveItem@@@@AAEPAV1@PAV1@P6GHAAUWaveItem@@1@Z@Z PROC NEAR ; TListItem<WaveItem>::Merge, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 140  : 	if (!pOtherList) return this;

  00009	83 7d 08 00	 cmp	 DWORD PTR _pOtherList$[ebp], 0
  0000d	75 08		 jne	 SHORT $L70950
  0000f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00012	e9 af 00 00 00	 jmp	 $L70949
$L70950:

; 141  : 	TListItem<T>
; 142  : 		*pThisList = this, *pResultHead = NULL, *pResultTail = NULL, *pMergeItem = NULL;

  00017	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	89 45 fc	 mov	 DWORD PTR _pThisList$[ebp], eax
  0001d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pResultHead$[ebp], 0
  00024	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pResultTail$[ebp], 0
  0002b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pMergeItem$[ebp], 0
$L70956:

; 143  : 	while (pThisList && pOtherList)

  00032	83 7d fc 00	 cmp	 DWORD PTR _pThisList$[ebp], 0
  00036	74 6b		 je	 SHORT $L70957
  00038	83 7d 08 00	 cmp	 DWORD PTR _pOtherList$[ebp], 0
  0003c	74 65		 je	 SHORT $L70957

; 144  : 	{
; 145  : 		if ( fcnCompare(pThisList->m_Tinfo, pOtherList->m_Tinfo) )

  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _pOtherList$[ebp]
  00041	51		 push	 ecx
  00042	8b 55 fc	 mov	 edx, DWORD PTR _pThisList$[ebp]
  00045	52		 push	 edx
  00046	ff 55 0c	 call	 DWORD PTR _fcnCompare$[ebp]
  00049	85 c0		 test	 eax, eax
  0004b	74 13		 je	 SHORT $L70958

; 146  : 		{
; 147  : 			pMergeItem = pThisList;

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _pThisList$[ebp]
  00050	89 45 f0	 mov	 DWORD PTR _pMergeItem$[ebp], eax

; 148  : 			pThisList = pThisList->GetNext();

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _pThisList$[ebp]
  00056	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ ; TListItem<WaveItem>::GetNext
  0005b	89 45 fc	 mov	 DWORD PTR _pThisList$[ebp], eax

; 149  : 		}
; 150  : 		else

  0005e	eb 11		 jmp	 SHORT $L70959
$L70958:

; 151  : 		{
; 152  : 			pMergeItem = pOtherList;

  00060	8b 4d 08	 mov	 ecx, DWORD PTR _pOtherList$[ebp]
  00063	89 4d f0	 mov	 DWORD PTR _pMergeItem$[ebp], ecx

; 153  : 			pOtherList = pOtherList->GetNext();

  00066	8b 4d 08	 mov	 ecx, DWORD PTR _pOtherList$[ebp]
  00069	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UWaveItem@@@@QBEPAV1@XZ ; TListItem<WaveItem>::GetNext
  0006e	89 45 08	 mov	 DWORD PTR _pOtherList$[ebp], eax
$L70959:

; 154  : 		}
; 155  : 		pMergeItem->SetNext(NULL);

  00071	6a 00		 push	 0
  00073	8b 4d f0	 mov	 ecx, DWORD PTR _pMergeItem$[ebp]
  00076	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UWaveItem@@@@QAEXPAV1@@Z ; TListItem<WaveItem>::SetNext

; 156  : 		if (!pResultTail)

  0007b	83 7d f4 00	 cmp	 DWORD PTR _pResultTail$[ebp], 0
  0007f	75 0e		 jne	 SHORT $L70960

; 157  : 		{
; 158  : 			pResultHead = pResultTail = pMergeItem;

  00081	8b 55 f0	 mov	 edx, DWORD PTR _pMergeItem$[ebp]
  00084	89 55 f4	 mov	 DWORD PTR _pResultTail$[ebp], edx
  00087	8b 45 f4	 mov	 eax, DWORD PTR _pResultTail$[ebp]
  0008a	89 45 f8	 mov	 DWORD PTR _pResultHead$[ebp], eax

; 159  : 		}
; 160  : 		else

  0008d	eb 12		 jmp	 SHORT $L70961
$L70960:

; 161  : 		{
; 162  : 			pResultTail->SetNext(pMergeItem);

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _pMergeItem$[ebp]
  00092	51		 push	 ecx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _pResultTail$[ebp]
  00096	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UWaveItem@@@@QAEXPAV1@@Z ; TListItem<WaveItem>::SetNext

; 163  : 			pResultTail = pMergeItem;

  0009b	8b 55 f0	 mov	 edx, DWORD PTR _pMergeItem$[ebp]
  0009e	89 55 f4	 mov	 DWORD PTR _pResultTail$[ebp], edx
$L70961:

; 164  : 		}
; 165  : 	}

  000a1	eb 8f		 jmp	 SHORT $L70956
$L70957:

; 166  : 	if (pThisList) pResultTail->SetNext(pThisList);

  000a3	83 7d fc 00	 cmp	 DWORD PTR _pThisList$[ebp], 0
  000a7	74 0e		 je	 SHORT $L70962
  000a9	8b 45 fc	 mov	 eax, DWORD PTR _pThisList$[ebp]
  000ac	50		 push	 eax
  000ad	8b 4d f4	 mov	 ecx, DWORD PTR _pResultTail$[ebp]
  000b0	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UWaveItem@@@@QAEXPAV1@@Z ; TListItem<WaveItem>::SetNext

; 167  : 	else pResultTail->SetNext(pOtherList);

  000b5	eb 0c		 jmp	 SHORT $L70963
$L70962:
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _pOtherList$[ebp]
  000ba	51		 push	 ecx
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR _pResultTail$[ebp]
  000be	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UWaveItem@@@@QAEXPAV1@@Z ; TListItem<WaveItem>::SetNext
$L70963:

; 168  : 	return pResultHead;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _pResultHead$[ebp]
$L70949:

; 169  : }

  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 08 00	 ret	 8
?Merge@?$TListItem@UWaveItem@@@@AAEPAV1@PAV1@P6GHAAUWaveItem@@1@Z@Z ENDP ; TListItem<WaveItem>::Merge
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@CWavTrack@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CWavTrack@@W3AGJABU_GUID@@PAPAX@Z PROC NEAR ; CWavTrack::QueryInterface, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CWavTrack@@UAGJABU_GUID@@PAPAX@Z ; CWavTrack::QueryInterface
?QueryInterface@CWavTrack@@W3AGJABU_GUID@@PAPAX@Z ENDP	; CWavTrack::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CWavTrack@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CWavTrack@@W3AGKXZ PROC NEAR			; CWavTrack::AddRef, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CWavTrack@@UAGKXZ ; CWavTrack::AddRef
?AddRef@CWavTrack@@W3AGKXZ ENDP				; CWavTrack::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CWavTrack@@W3AGKXZ
_TEXT	SEGMENT
?Release@CWavTrack@@W3AGKXZ PROC NEAR			; CWavTrack::Release, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?Release@CWavTrack@@UAGKXZ ; CWavTrack::Release
?Release@CWavTrack@@W3AGKXZ ENDP			; CWavTrack::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@CWavTrack@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CWavTrack@@W7AGJABU_GUID@@PAPAX@Z PROC NEAR ; CWavTrack::QueryInterface, COMDAT
  00000	83 6c 24 04 08	 sub	 DWORD PTR [esp+4], 8
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CWavTrack@@UAGJABU_GUID@@PAPAX@Z ; CWavTrack::QueryInterface
?QueryInterface@CWavTrack@@W7AGJABU_GUID@@PAPAX@Z ENDP	; CWavTrack::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CWavTrack@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CWavTrack@@W7AGKXZ PROC NEAR			; CWavTrack::AddRef, COMDAT
  00000	83 6c 24 04 08	 sub	 DWORD PTR [esp+4], 8
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CWavTrack@@UAGKXZ ; CWavTrack::AddRef
?AddRef@CWavTrack@@W7AGKXZ ENDP				; CWavTrack::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CWavTrack@@W7AGKXZ
_TEXT	SEGMENT
?Release@CWavTrack@@W7AGKXZ PROC NEAR			; CWavTrack::Release, COMDAT
  00000	83 6c 24 04 08	 sub	 DWORD PTR [esp+4], 8
  00005	e9 00 00 00 00	 jmp	 ?Release@CWavTrack@@UAGKXZ ; CWavTrack::Release
?Release@CWavTrack@@W7AGKXZ ENDP			; CWavTrack::Release
_TEXT	ENDS
EXTRN	?DirectMusicAllocI@@YGPAXI@Z:NEAR		; DirectMusicAllocI
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xalloc.h
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_cb$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 13   :     return DirectMusicAllocI(cb);

  00003	8b 45 08	 mov	 eax, DWORD PTR _cb$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicAllocI@@YGPAXI@Z ; DirectMusicAllocI

; 14   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
EXTRN	?DirectMusicFreeI@@YGXPAX@Z:NEAR		; DirectMusicFreeI
; Function compile flags: /Odt
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 19   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_U@YAPAXI@Z
_TEXT	SEGMENT
_cb$ = 8
??_U@YAPAXI@Z PROC NEAR					; operator new[], COMDAT

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   :     return DirectMusicAllocI(cb);

  00003	8b 45 08	 mov	 eax, DWORD PTR _cb$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicAllocI@@YGPAXI@Z ; DirectMusicAllocI

; 24   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??_U@YAPAXI@Z ENDP					; operator new[]
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??_V@YAXPAX@Z PROC NEAR					; operator delete[], COMDAT

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 29   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??_V@YAXPAX@Z ENDP					; operator delete[]
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xboxutil.h
_TEXT	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT
___formal$ = 8
?DeleteCriticalSection@@YGXPAX@Z PROC NEAR		; DeleteCriticalSection, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : }

  00003	5d		 pop	 ebp
  00004	c2 04 00	 ret	 4
?DeleteCriticalSection@@YGXPAX@Z ENDP			; DeleteCriticalSection
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IUnknown@@QAE@XZ PROC NEAR				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\wavtrack.h
_TEXT	ENDS
;	COMDAT ??0WaveItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0WaveItem@@QAE@XZ PROC NEAR				; WaveItem::WaveItem, COMDAT
; _this$ = ecx

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  0003f	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00046	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00049	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  00050	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0
  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	66 c7 40 34 00
	00		 mov	 WORD PTR [eax+52], 0
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	66 c7 41 36 00
	00		 mov	 WORD PTR [ecx+54], 0
  00087	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008a	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0
  00091	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00094	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0
  000a5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a8	c7 42 44 00 00
	00 00		 mov	 DWORD PTR [edx+68], 0

; 87   :     }

  000af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
??0WaveItem@@QAE@XZ ENDP				; WaveItem::WaveItem
_TEXT	ENDS
PUBLIC	??0?$TList@UWaveItem@@@@QAE@XZ			; TList<WaveItem>::TList<WaveItem>
; Function compile flags: /Odt
;	COMDAT ??0WavePart@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0WavePart@@QAE@XZ PROC NEAR				; WavePart::WavePart, COMDAT
; _this$ = ecx

; 154  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 c1 18	 add	 ecx, 24			; 00000018H
  00048	e8 00 00 00 00	 call	 ??0?$TList@UWaveItem@@@@QAE@XZ ; TList<WaveItem>::TList<WaveItem>

; 155  :     }

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
??0WavePart@@QAE@XZ ENDP				; WavePart::WavePart
_TEXT	ENDS
PUBLIC	??1?$TList@UWaveItem@@@@QAE@XZ			; TList<WaveItem>::~TList<WaveItem>
; Function compile flags: /Odt
;	COMDAT ??1WavePart@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1WavePart@@QAE@XZ PROC NEAR				; WavePart::~WavePart, COMDAT
; _this$ = ecx

; 158  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 159  :         CleanUp();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?CleanUp@WavePart@@QAEXXZ ; WavePart::CleanUp

; 160  :     }

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 18	 add	 ecx, 24			; 00000018H
  00015	e8 00 00 00 00	 call	 ??1?$TList@UWaveItem@@@@QAE@XZ ; TList<WaveItem>::~TList<WaveItem>
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??1WavePart@@QAE@XZ ENDP				; WavePart::~WavePart
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0WaveStateData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8
_i$48506 = -4
??0WaveStateData@@QAE@XZ PROC NEAR			; WaveStateData::WaveStateData, COMDAT
; _this$ = ecx

; 259  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0001c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  00026	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0003a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	c7 82 18 04 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+1048], 0
  00047	c7 82 1c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+1052], 0
  00051	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 80 20 04 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1056], 0
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	c7 81 24 04 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1060], 0
  0006b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	c7 82 28 04 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+1064], 0
  00078	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	c7 80 2c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1068], 0
  00085	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	c7 81 30 04 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1072], 0
  00092	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00095	c6 82 34 04 00
	00 00		 mov	 BYTE PTR [edx+1076], 0

; 260  :         for (int i = 0; i < MAX_WAVE_VARIATION_LOCKS; i++)

  0009c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$48506[ebp], 0
  000a3	eb 09		 jmp	 SHORT $L48507
$L48508:
  000a5	8b 45 fc	 mov	 eax, DWORD PTR _i$48506[ebp]
  000a8	83 c0 01	 add	 eax, 1
  000ab	89 45 fc	 mov	 DWORD PTR _i$48506[ebp], eax
$L48507:
  000ae	81 7d fc ff 00
	00 00		 cmp	 DWORD PTR _i$48506[ebp], 255 ; 000000ffH
  000b5	7d 10		 jge	 SHORT $L48505

; 261  :         {
; 262  :             adwVariationGroups[i] = 0;

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _i$48506[ebp]
  000ba	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	c7 44 8a 18 00
	00 00 00	 mov	 DWORD PTR [edx+ecx*4+24], 0

; 263  :         }

  000c5	eb de		 jmp	 SHORT $L48508
$L48505:

; 264  :     }

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
??0WaveStateData@@QAE@XZ ENDP				; WaveStateData::WaveStateData
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1WaveStateData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
$T71618 = -12
$T71617 = -8
$T71616 = -4
??1WaveStateData@@QAE@XZ PROC NEAR			; WaveStateData::~WaveStateData, COMDAT
; _this$ = ecx

; 267  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 268  :         if( apCurrentWave )

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	74 15		 je	 SHORT $L48512

; 269  :         {
; 270  :             delete [] apCurrentWave;

  00012	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	89 55 fc	 mov	 DWORD PTR $T71616[ebp], edx
  0001b	8b 45 fc	 mov	 eax, DWORD PTR $T71616[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 04	 add	 esp, 4
$L48512:

; 271  :         }
; 272  :         if( pdwVariations )

  00027	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  0002e	74 15		 je	 SHORT $L48514

; 273  :         {
; 274  :             delete [] pdwVariations;

  00030	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00033	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00036	89 45 f8	 mov	 DWORD PTR $T71617[ebp], eax
  00039	8b 4d f8	 mov	 ecx, DWORD PTR $T71617[ebp]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00042	83 c4 04	 add	 esp, 4
$L48514:

; 275  :         }
; 276  :         if( pdwRemoveVariations )

  00045	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00048	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  0004c	74 15		 je	 SHORT $L48511

; 277  :         {
; 278  :             delete [] pdwRemoveVariations;

  0004e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00054	89 4d f4	 mov	 DWORD PTR $T71618[ebp], ecx
  00057	8b 55 f4	 mov	 edx, DWORD PTR $T71618[ebp]
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00060	83 c4 04	 add	 esp, 4
$L48511:

; 279  :         }
; 280  : #ifdef DXAPI
; 281  :         if (m_apVoice)
; 282  :         {
; 283  :             for (DWORD dw = 0; dw < m_dwVoices; dw++)
; 284  :             {
; 285  :                 if (m_apVoice[dw])
; 286  :                 {
; 287  :                     m_apVoice[dw]->Release();
; 288  :                 }
; 289  :             }
; 290  :             delete [] m_apVoice;
; 291  :         }
; 292  :         if( m_pAudioPath )
; 293  :         {
; 294  :             m_pAudioPath->Release();
; 295  :         }
; 296  :         TListItem<WaveDLOnPlay>* pWDLOnPlay = NULL;
; 297  :         while (!m_WaveDLList.IsEmpty())
; 298  :         {
; 299  :             pWDLOnPlay = m_WaveDLList.RemoveHead();
; 300  :             delete pWDLOnPlay;
; 301  :         }
; 302  : #endif
; 303  :     }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
??1WaveStateData@@QAE@XZ ENDP				; WaveStateData::~WaveStateData
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Variations@WaveStateData@@QAEKAAUWavePart@@H@Z
_TEXT	SEGMENT
_this$ = -4
_rPart$ = 8
_nPartIndex$ = 12
?Variations@WaveStateData@@QAEKAAUWavePart@@H@Z PROC NEAR ; WaveStateData::Variations, COMDAT
; _this$ = ecx

; 317  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 318  :         if (m_dwLockID && rPart.m_dwLockToPart == m_dwLockID)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 b8 2c 04 00
	00 00		 cmp	 DWORD PTR [eax+1068], 0
  00011	74 1c		 je	 SHORT $L48524
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _rPart$[ebp]
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0001c	3b 82 2c 04 00
	00		 cmp	 eax, DWORD PTR [edx+1068]
  00022	75 0b		 jne	 SHORT $L48524

; 319  :         {
; 320  :             TraceI(4, "Variations for locked part\n");
; 321  :             return m_dwVariation;

  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	8b 81 20 04 00
	00		 mov	 eax, DWORD PTR [ecx+1056]
  0002d	eb 44		 jmp	 SHORT $L48523
$L48524:

; 322  :         }
; 323  :         else if ( m_fAudition &&
; 324  :                   (rPart.m_dwPChannel == m_dwPart) &&
; 325  :                   (rPart.m_dwIndex == m_dwIndex) )

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	83 ba 30 04 00
	00 00		 cmp	 DWORD PTR [edx+1072], 0
  00039	74 2c		 je	 SHORT $L48527
  0003b	8b 45 08	 mov	 eax, DWORD PTR _rPart$[ebp]
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	8b 10		 mov	 edx, DWORD PTR [eax]
  00043	3b 91 24 04 00
	00		 cmp	 edx, DWORD PTR [ecx+1060]
  00049	75 1c		 jne	 SHORT $L48527
  0004b	8b 45 08	 mov	 eax, DWORD PTR _rPart$[ebp]
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00054	3b 91 28 04 00
	00		 cmp	 edx, DWORD PTR [ecx+1064]
  0005a	75 0b		 jne	 SHORT $L48527

; 326  :         {
; 327  :             TraceI(4, "Variations for current part\n");
; 328  :             return m_dwVariation;

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 80 20 04 00
	00		 mov	 eax, DWORD PTR [eax+1056]
  00065	eb 0c		 jmp	 SHORT $L48523
$L48527:

; 329  :         }
; 330  :         else
; 331  :         {
; 332  :             TraceI(4, "Variations for a different part\n");
; 333  :             return pdwVariations[nPartIndex];

  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0006d	8b 45 0c	 mov	 eax, DWORD PTR _nPartIndex$[ebp]
  00070	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
$L48523:

; 334  :         }
; 335  :     }

  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 08 00	 ret	 8
?Variations@WaveStateData@@QAEKAAUWavePart@@H@Z ENDP	; WaveStateData::Variations
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\tlist.h
_TEXT	ENDS
;	COMDAT ??0?$TList@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$TList@UWaveItem@@@@QAE@XZ PROC NEAR		; TList<WaveItem>::TList<WaveItem>, COMDAT
; _this$ = ecx

; 55   :     TList() {m_pHead=NULL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0?$TList@UWaveItem@@@@QAE@XZ ENDP			; TList<WaveItem>::TList<WaveItem>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1?$TList@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$TList@UWaveItem@@@@QAE@XZ PROC NEAR		; TList<WaveItem>::~TList<WaveItem>, COMDAT
; _this$ = ecx

; 57   : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 58   : 		//if (m_pHead != NULL) delete m_pHead;
; 59   : 		TListItem<T>::Delete(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?Delete@?$TListItem@UWaveItem@@@@SGXPAV1@@Z ; TListItem<WaveItem>::Delete

; 60   : 	} // new destructor

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??1?$TList@UWaveItem@@@@QAE@XZ ENDP			; TList<WaveItem>::~TList<WaveItem>
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\tlist.cpp
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UWaveItem@@@@SGXPAV1@@Z
_TEXT	SEGMENT
tv70 = -20
$T71632 = -16
$T71631 = -12
_pScan$ = -8
_pNext$ = -4
_pFirst$ = 8
?Delete@?$TListItem@UWaveItem@@@@SGXPAV1@@Z PROC NEAR	; TListItem<WaveItem>::Delete, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 29   : 	TListItem<T>* pScan = pFirst;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pFirst$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _pScan$[ebp], eax

; 30   : 	TListItem<T>* pNext = NULL;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pNext$[ebp], 0
$L69293:

; 31   : 	while (pScan)

  00013	83 7d f8 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00017	74 39		 je	 SHORT $L69289

; 32   : 	{
; 33   : 		pNext = pScan->m_pNext;

  00019	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0001c	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  0001f	89 55 fc	 mov	 DWORD PTR _pNext$[ebp], edx

; 34   : 		delete pScan;

  00022	8b 45 f8	 mov	 eax, DWORD PTR _pScan$[ebp]
  00025	89 45 f0	 mov	 DWORD PTR $T71632[ebp], eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR $T71632[ebp]
  0002b	89 4d f4	 mov	 DWORD PTR $T71631[ebp], ecx
  0002e	83 7d f4 00	 cmp	 DWORD PTR $T71631[ebp], 0
  00032	74 0f		 je	 SHORT $L71633
  00034	6a 01		 push	 1
  00036	8b 4d f4	 mov	 ecx, DWORD PTR $T71631[ebp]
  00039	e8 00 00 00 00	 call	 ??_G?$TListItem@UWaveItem@@@@QAEPAXI@Z
  0003e	89 45 ec	 mov	 DWORD PTR tv70[ebp], eax
  00041	eb 07		 jmp	 SHORT $L71634
$L71633:
  00043	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$L71634:

; 35   : 		pScan = pNext;

  0004a	8b 55 fc	 mov	 edx, DWORD PTR _pNext$[ebp]
  0004d	89 55 f8	 mov	 DWORD PTR _pScan$[ebp], edx

; 36   : 	}

  00050	eb c1		 jmp	 SHORT $L69293
$L69289:

; 37   : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?Delete@?$TListItem@UWaveItem@@@@SGXPAV1@@Z ENDP	; TListItem<WaveItem>::Delete
_TEXT	ENDS
PUBLIC	??1?$TListItem@UWaveItem@@@@QAE@XZ		; TListItem<WaveItem>::~TListItem<WaveItem>
; Function compile flags: /Odt
;	COMDAT ??_G?$TListItem@UWaveItem@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_G?$TListItem@UWaveItem@@@@QAEPAXI@Z PROC NEAR	; TListItem<WaveItem>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$TListItem@UWaveItem@@@@QAE@XZ ; TListItem<WaveItem>::~TListItem<WaveItem>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69395
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69395:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$TListItem@UWaveItem@@@@QAEPAXI@Z ENDP		; TListItem<WaveItem>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1WaveItem@@QAE@XZ				; WaveItem::~WaveItem
; Function compile flags: /Odt
;	COMDAT ??1?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$TListItem@UWaveItem@@@@QAE@XZ PROC NEAR		; TListItem<WaveItem>::~TListItem<WaveItem>, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	//if (m_pNext != NULL) { delete m_pNext; }
; 22   : 	// IMPORTANT: user of the list is required to delete content first!
; 23   : 	//ZeroMemory(&m_Tinfo, sizeof(T));
; 24   : }

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1WaveItem@@QAE@XZ	; WaveItem::~WaveItem
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$TListItem@UWaveItem@@@@QAE@XZ ENDP			; TListItem<WaveItem>::~TListItem<WaveItem>
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\wavtrack.h
_TEXT	ENDS
;	COMDAT ??1WaveItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1WaveItem@@QAE@XZ PROC NEAR				; WaveItem::~WaveItem, COMDAT
; _this$ = ecx

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 91   :         CleanUp();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?CleanUp@WaveItem@@QAEXXZ ; WaveItem::CleanUp

; 92   :     }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1WaveItem@@QAE@XZ ENDP				; WaveItem::~WaveItem
_TEXT	ENDS
END
