; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	..\song.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@NECHKODH@?$CB?$CI?5m_pTrackState?5?$CG?$CG?5?$CBm_pTrack?5?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GDIFGDFN@pCopy?9?$DOm_pTrack?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@LLLGOMEJ@pCTrack?9?$DOm_pTrack?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@PCCANLAO@Song?5?$CFlx?5created?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@EAFHGBI@Song?5?$CFlx?5destroyed?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DM@OFNHKHOC@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DO@GAFGMFIO@Error?3?5Accessing?5object?5after?5it@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0GH@FBELLCFF@Error?3?5Corrupt?5song?0?5one?5or?5more@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@MBMPAIOH@?$CFs?3?5Invalid?5pointer?5pAudioPath?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DB@CBBEFLOE@Warning?3?5This?5API?5does?5not?5do?5an@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EE@EDHKKHFP@Warning?3?5Only?5?$CFld?5of?5the?5total?5?$CF@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@BMJBMIKG@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@IPCOEDEC@?$CFs?3?5Invalid?5pointer?5ppSegment?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@NNHAJGJJ@?$CFs?3?5Invalid?5pointer?5wszName?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CM@OFDAIGJE@Error?3?5Unable?5to?5find?5segment?5?$CFl@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DF@DCEEFACH@Error?3?5Unable?5to?5find?5starting?5s@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@CFDENOHG@?$CFs?3?5Invalid?5pointer?5ppAudioPathC@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DL@BENGCCJE@Warning?3?5No?5embedded?5audiopath?5c@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07KCKPANJI@pStream?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07HPHNCKCM@pParser?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JNKEPJON@pVSource?9?$DOm_pTransitions?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@GPHBKJME@pVDestination?9?$DOm_pTransitions?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DD@KPAEFGEI@Warning?3?5No?5transition?5segment?5w@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FC@FEDNCMD@Error?3?5Unable?5to?5compose?5song?5be@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BGAOHDMM@?$CBp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT ??0CTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateCopyWithBlankState@CTrackList@@QAEJPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CVirtualSegment@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTrackList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CVirtualSegment@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTrackByParam@CVirtualSegment@@QAEPAVCTrack@@PAV2@ABU_GUID@@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CVirtualSegmentList@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCVirtualSegment@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSongSegment@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSongSegment@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddSegment@CSongSegmentList@@QAEJPAVCSegment@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CSongSegmentList@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSongSegment@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSong@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicSong@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicObjectP@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGraphList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSongSegmentList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSegmentList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CVirtualSegmentList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSong@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CSong@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Zombie@CSong@@UAGXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CSong@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CSong@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSong@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compose@CSong@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Download@CSong@@UAGJPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unload@CSong@@UAGJPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParam@CSong@@UAGJABU_GUID@@KKJPAJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Instantiate@CSong@@AAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EnumSegment@CSong@@UAGJKPAPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPlaySegment@CSong@@QAEJKPAPAVCSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSegment@CSong@@UAGJPBGPAPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAudioPathConfig@CSong@@UAGJPAPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassID@CSong@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsDirty@CSong@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CSong@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSegment@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadAudioPath@CSong@@AAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadSegmentList@CSong@@AAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadGraphList@CSong@@AAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTransitionSegment@CSong@@QAEJPAVCSegment@@0PAU_DMUS_IO_TRANSITION_DEF@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSourceSegment@CSong@@AAEXPAPAVCSegment@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetGraph@CSong@@AAEXPAPAVCGraph@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSegmentTrack@CSong@@AAEHPAPAUIDirectMusicTrack@@KKKABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadVirtualSegmentList@CSong@@AAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadTrackRefList@CSong@@AAEJPAVCRiffParser@@PAVCVirtualSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Save@CSong@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CSong@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ComposingTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ComposingTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddTrack@ComposingTrack@@QAEJPAVCVirtualSegment@@PAVCTrack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Less@@YGHAAUCompositionComponent@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compose@ComposingTrack@@QAEJPAUIDirectMusicSong@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UCompositionComponent@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UCompositionComponent@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UCompositionComponent@@@@QBEPAV?$TListItem@UCompositionComponent@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UCompositionComponent@@@@QAEXPAV?$TListItem@UCompositionComponent@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@ULyricInfo@@@@QBEPAV?$TListItem@ULyricInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@ULyricInfo@@@@QAEXPAV?$TListItem@ULyricInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@ULyricInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@ULyricInfo@@@@QAEAAULyricInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@UTriggerInfo@@@@SGHAAUTriggerInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@ULyricInfo@@@@SGHAAULyricInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@VComposingTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@VComposingTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@VComposingTrack@@@@QBEPAV?$TListItem@VComposingTrack@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@VComposingTrack@@@@QAEXPAV?$TListItem@VComposingTrack@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@VComposingTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@VComposingTrack@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@VComposingTrack@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@VComposingTrack@@@@QAEAAVComposingTrack@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UClassGuidCounts@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UClassGuidCounts@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UClassGuidCounts@@@@QBEPAV?$TListItem@UClassGuidCounts@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UClassGuidCounts@@@@QAEXPAV?$TListItem@UClassGuidCounts@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UClassGuidCounts@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UClassGuidCounts@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UClassGuidCounts@@@@QAEAAUClassGuidCounts@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UCompositionComponent@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UCompositionComponent@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UCompositionComponent@@@@QAEAAUCompositionComponent@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@ULyricInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEAAV01@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UClassGuidCounts@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UCompositionComponent@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UTriggerInfo@@@@QAEXP6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@ULyricInfo@@@@QAEXP6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_SEQ_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_CURVE_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@_J@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UObjectInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@VComposingTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UClassGuidCounts@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UCompositionComponent@@@@QAEXP6GHAAUCompositionComponent@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UCompositionComponent@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ObjectInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@VComposingTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UClassGuidCounts@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UCompositionComponent@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UTriggerInfo@@@@QAEPAV1@P6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@ULyricInfo@@@@QAEPAV1@P6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@VComposingTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UClassGuidCounts@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UCompositionComponent@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UCompositionComponent@@@@QAEPAV1@P6GHAAUCompositionComponent@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UTriggerInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UTriggerInfo@@@@AAEPAV1@PAV1@P6GHAAUTriggerInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@ULyricInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@ULyricInfo@@@@AAEPAV1@PAV1@P6GHAAULyricInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UCompositionComponent@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UCompositionComponent@@@@AAEPAV1@PAV1@P6GHAAUCompositionComponent@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSong@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CSong@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CSong@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSong@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CSong@@W7AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CSong@@W7AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSong@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CSong@@WM@AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CSong@@WM@AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UParamInfo@CParamControlTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UParamInfo@CParamControlTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ParamInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WaveItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WString@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WString@SmartRef@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@ULyricInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@ULyricInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UTriggerInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??SetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCTrack@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Less@CTrack@@QAE_NPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _!=@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddTail@CVirtualSegmentList@@QAEXPAVCVirtualSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_U@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@CGraph@@QAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@CGraphList@@QAEPAVCGraph@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@CSongSegment@@QAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@CSongSegmentList@@QAEPAVCSongSegment@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddTail@CGraphList@@QAEXPAVCGraph@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStream@CRiffParser@@QAEPAUIStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@CVirtualSegmentList@@QAEXPAVCVirtualSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Load@CSong@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CSong@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetAudioPathConfig@CSong@@UAGJPAPAUIUnknown@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetSegment@CSong@@UAGJPBGPAPAUIDirectMusicSegment@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??EnumSegment@CSong@@UAGJKPAPAUIDirectMusicSegment@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Instantiate@CSong@@AAEJXZ@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddTail@CSegmentList@@QAEXPAVCSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetParam@CSong@@UAGJABU_GUID@@KKJPAJPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetCount@AList@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@CSegment@@QAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@CSegmentList@@QAEPAVCSegment@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Unload@CSong@@UAGJPAUIUnknown@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Download@CSong@@UAGJPAUIUnknown@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetPriority@ComposingTrack@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPriority@ComposingTrack@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTrackID@ComposingTrack@@QAEXAAU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTrackGroup@ComposingTrack@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTrackGroup@ComposingTrack@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTrackID@ComposingTrack@@QAE?AU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@CVirtualSegment@@QAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7IDirectMusicObjectP@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CSong@@6BIDirectMusicObjectP@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSong@@6BIDirectMusicObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSong@@6BIPersistStream@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSong@@6BIDirectMusicSong@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?RemoveHead@CSongSegmentList@@QAEPAVCSongSegment@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddTail@CSongSegmentList@@QAEXPAVCSongSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@CTrackList@@QAEPAVCTrack@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@CTrack@@QAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Cat@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CTrackList@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@CTrackList@@QAEPAVCTrack@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0AListItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	??0CTrack@@QAE@XZ				; CTrack::CTrack
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	??0AListItem@@QAE@XZ				; AListItem::AListItem
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
; File c:\xbox\private\windows\directx\dmusic\dmime\song.cpp
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CTrack@@QAE@XZ PROC NEAR				; CTrack::CTrack, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AListItem@@QAE@XZ	; AListItem::AListItem

; 17   : 	m_pTrack = NULL;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 18   :     m_pTrack8 = NULL;

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 19   : 	m_pTrackState = NULL;

  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0

; 20   : 	m_bDone = FALSE;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 21   :     m_dwPriority = 0;

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 22   :     m_dwPosition = 0;

  00041	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00044	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0

; 23   :     m_dwFlags = DMUS_TRACKCONFIG_DEFAULT;

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	c7 40 34 38 00
	00 00		 mov	 DWORD PTR [eax+52], 56	; 00000038H

; 24   :     m_dwInternalFlags = 0;

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 25   :     m_dwGroupBits = 0xFFFFFFFF;

  0005f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00062	c7 42 28 ff ff
	ff ff		 mov	 DWORD PTR [edx+40], -1

; 26   :     m_dwVirtualID = 0;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 27   :     m_guidClassID = GUID_NULL;

  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	83 c1 04	 add	 ecx, 4
  00079	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __GUID_00000000_0000_0000_0000_000000000000
  0007f	89 11		 mov	 DWORD PTR [ecx], edx
  00081	a1 04 00 00 00	 mov	 eax, DWORD PTR __GUID_00000000_0000_0000_0000_000000000000+4
  00086	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00089	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR __GUID_00000000_0000_0000_0000_000000000000+8
  0008f	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00092	a1 0c 00 00 00	 mov	 eax, DWORD PTR __GUID_00000000_0000_0000_0000_000000000000+12
  00097	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 28   : }

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
??0CTrack@@QAE@XZ ENDP					; CTrack::CTrack
_TEXT	ENDS
PUBLIC	??1CTrack@@QAE@XZ				; CTrack::~CTrack
PUBLIC	??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CA@NECHKODH@?$CB?$CI?5m_pTrackState?5?$CG?$CG?5?$CBm_pTrack?5?$CJ?$AA@ ; `string'
EXTRN	?DebugAssert@@YGXPAD0K@Z:NEAR			; DebugAssert
;	COMDAT ??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dmusic\dmime\song.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NECHKODH@?$CB?$CI?5m_pTrackState?5?$CG?$CG?5?$CBm_pTrack?5?$CJ?$AA@
CONST	SEGMENT
??_C@_0CA@NECHKODH@?$CB?$CI?5m_pTrackState?5?$CG?$CG?5?$CBm_pTrack?5?$CJ?$AA@ DB '!'
	DB	'( m_pTrackState && !m_pTrack )', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??1CTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CTrack@@QAE@XZ PROC NEAR				; CTrack::~CTrack, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 	assert( !( m_pTrackState && !m_pTrack ) ); // if we have state but no track, something's wrong

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0000e	74 1a		 je	 SHORT $L71718
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00017	75 11		 jne	 SHORT $L71718
  00019	6a 20		 push	 32			; 00000020H
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@NECHKODH@?$CB?$CI?5m_pTrackState?5?$CG?$CG?5?$CBm_pTrack?5?$CJ?$AA@
  00025	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L71718:

; 33   : 	if( m_pTrack )

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00031	74 34		 je	 SHORT $L69426

; 34   : 	{
; 35   : 		if( m_pTrackState )

  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  0003a	74 19		 je	 SHORT $L69427

; 36   : 		{
; 37   : 			m_pTrack->EndPlay( m_pTrackState ); // allow the track to delete its state data

  0003c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0004f	8b 12		 mov	 edx, DWORD PTR [edx]
  00051	51		 push	 ecx
  00052	ff 52 14	 call	 DWORD PTR [edx+20]
$L69427:

; 38   : 		}
; 39   : 		m_pTrack->Release();

  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00061	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00063	50		 push	 eax
  00064	ff 51 08	 call	 DWORD PTR [ecx+8]
$L69426:

; 40   : 	}
; 41   :     if ( m_pTrack8 )

  00067	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006a	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  0006e	74 12		 je	 SHORT $L69422

; 42   :     {
; 43   :         m_pTrack8->Release();

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00076	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00079	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0007c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007e	50		 push	 eax
  0007f	ff 51 08	 call	 DWORD PTR [ecx+8]
$L69422:

; 44   :     }
; 45   : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
??1CTrack@@QAE@XZ ENDP					; CTrack::~CTrack
_TEXT	ENDS
PUBLIC	?GetNext@CTrack@@QAEPAV1@XZ			; CTrack::GetNext
PUBLIC	??_C@_0BA@GDIFGDFN@pCopy?9?$DOm_pTrack?$AA@	; `string'
PUBLIC	?Clear@CTrackList@@QAEXXZ			; CTrackList::Clear
PUBLIC	?CreateCopyWithBlankState@CTrackList@@QAEJPAV1@@Z ; CTrackList::CreateCopyWithBlankState
PUBLIC	??_C@_05MAJJAKPI@FALSE?$AA@			; `string'
PUBLIC	?SetNext@AListItem@@QAEXPAV1@@Z			; AListItem::SetNext
PUBLIC	?Cat@AList@@QAEXPAVAListItem@@@Z		; AList::Cat
;	COMDAT ??_C@_0BA@GDIFGDFN@pCopy?9?$DOm_pTrack?$AA@
CONST	SEGMENT
??_C@_0BA@GDIFGDFN@pCopy?9?$DOm_pTrack?$AA@ DB 'pCopy->m_pTrack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE?$AA@
CONST	SEGMENT
??_C@_05MAJJAKPI@FALSE?$AA@ DB 'FALSE', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?CreateCopyWithBlankState@CTrackList@@QAEJPAV1@@Z
_TEXT	SEGMENT
tv72 = -20
_this$ = -16
$T71722 = -12
_pTrack$69434 = -8
_pCopy$69435 = -4
_pTrackList$ = 8
?CreateCopyWithBlankState@CTrackList@@QAEJPAV1@@Z PROC NEAR ; CTrackList::CreateCopyWithBlankState, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 	if( pTrackList )

  0000b	83 7d 08 00	 cmp	 DWORD PTR _pTrackList$[ebp], 0
  0000f	0f 84 f3 00 00
	00		 je	 $L69433

; 50   : 	{
; 51   : 		CTrack* pTrack;
; 52   : 		CTrack* pCopy;
; 53   : 		pTrackList->Clear();

  00015	8b 4d 08	 mov	 ecx, DWORD PTR _pTrackList$[ebp]
  00018	e8 00 00 00 00	 call	 ?Clear@CTrackList@@QAEXXZ ; CTrackList::Clear

; 54   : 		pTrack = (CTrack*)m_pHead;

  0001d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	89 4d f8	 mov	 DWORD PTR _pTrack$69434[ebp], ecx
$L69438:

; 55   : 		while( pTrack )

  00025	83 7d f8 00	 cmp	 DWORD PTR _pTrack$69434[ebp], 0
  00029	0f 84 d7 00 00
	00		 je	 $L69439

; 56   : 		{
; 57   : 			pCopy = new CTrack;

  0002f	6a 3c		 push	 60			; 0000003cH
  00031	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 f4	 mov	 DWORD PTR $T71722[ebp], eax
  0003c	83 7d f4 00	 cmp	 DWORD PTR $T71722[ebp], 0
  00040	74 0d		 je	 SHORT $L71723
  00042	8b 4d f4	 mov	 ecx, DWORD PTR $T71722[ebp]
  00045	e8 00 00 00 00	 call	 ??0CTrack@@QAE@XZ	; CTrack::CTrack
  0004a	89 45 ec	 mov	 DWORD PTR tv72[ebp], eax
  0004d	eb 07		 jmp	 SHORT $L71724
$L71723:
  0004f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L71724:
  00056	8b 55 ec	 mov	 edx, DWORD PTR tv72[ebp]
  00059	89 55 fc	 mov	 DWORD PTR _pCopy$69435[ebp], edx

; 58   : 			if( pCopy )

  0005c	83 7d fc 00	 cmp	 DWORD PTR _pCopy$69435[ebp], 0
  00060	74 76		 je	 SHORT $L69442

; 59   : 			{
; 60   : 				// copy the IDirectMusicTrack pointer, but leave
; 61   : 				// the track state blank.
; 62   :                 *pCopy = *pTrack;

  00062	8b 75 f8	 mov	 esi, DWORD PTR _pTrack$69434[ebp]
  00065	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0006a	8b 7d fc	 mov	 edi, DWORD PTR _pCopy$69435[ebp]
  0006d	f3 a5		 rep movsd

; 63   :                 pCopy->SetNext(NULL);

  0006f	6a 00		 push	 0
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _pCopy$69435[ebp]
  00074	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 64   :                 pCopy->m_pTrackState = NULL;

  00079	8b 45 fc	 mov	 eax, DWORD PTR _pCopy$69435[ebp]
  0007c	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 65   : 				assert( pCopy->m_pTrack );

  00083	8b 4d fc	 mov	 ecx, DWORD PTR _pCopy$69435[ebp]
  00086	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  0008a	75 11		 jne	 SHORT $L71725
  0008c	6a 41		 push	 65			; 00000041H
  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
  00093	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@GDIFGDFN@pCopy?9?$DOm_pTrack?$AA@
  00098	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L71725:

; 66   : 				pCopy->m_pTrack->AddRef();

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _pCopy$69435[ebp]
  000a0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _pCopy$69435[ebp]
  000a6	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000a9	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000ab	50		 push	 eax
  000ac	ff 51 04	 call	 DWORD PTR [ecx+4]

; 67   :                 if (pCopy->m_pTrack8)

  000af	8b 55 fc	 mov	 edx, DWORD PTR _pCopy$69435[ebp]
  000b2	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  000b6	74 12		 je	 SHORT $L69445

; 68   :                 {
; 69   :                     pCopy->m_pTrack8->AddRef();

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _pCopy$69435[ebp]
  000bb	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000be	8b 55 fc	 mov	 edx, DWORD PTR _pCopy$69435[ebp]
  000c1	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000c4	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000c6	50		 push	 eax
  000c7	ff 51 04	 call	 DWORD PTR [ecx+4]
$L69445:

; 70   :                 }
; 71   : 				pTrackList->Cat( pCopy );

  000ca	8b 55 fc	 mov	 edx, DWORD PTR _pCopy$69435[ebp]
  000cd	52		 push	 edx
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _pTrackList$[ebp]
  000d1	e8 00 00 00 00	 call	 ?Cat@AList@@QAEXPAVAListItem@@@Z ; AList::Cat

; 72   : 			}
; 73   : 			else

  000d6	eb 1e		 jmp	 SHORT $L69446
$L69442:

; 74   : 			{
; 75   : 				assert(FALSE); // out of memory

  000d8	33 c0		 xor	 eax, eax
  000da	85 c0		 test	 eax, eax
  000dc	75 11		 jne	 SHORT $L71726
  000de	6a 4b		 push	 75			; 0000004bH
  000e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
  000e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05MAJJAKPI@FALSE?$AA@
  000ea	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L71726:

; 76   : 				return E_OUTOFMEMORY;

  000ef	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  000f4	eb 32		 jmp	 SHORT $L69432
$L69446:

; 77   : 			}
; 78   : 			pTrack = pTrack->GetNext();

  000f6	8b 4d f8	 mov	 ecx, DWORD PTR _pTrack$69434[ebp]
  000f9	e8 00 00 00 00	 call	 ?GetNext@CTrack@@QAEPAV1@XZ ; CTrack::GetNext
  000fe	89 45 f8	 mov	 DWORD PTR _pTrack$69434[ebp], eax

; 79   : 		}

  00101	e9 1f ff ff ff	 jmp	 $L69438
$L69439:

; 80   : 	}
; 81   : 	else

  00106	eb 1e		 jmp	 SHORT $L69450
$L69433:

; 82   : 	{
; 83   : 		assert(FALSE); // out of memory

  00108	33 d2		 xor	 edx, edx
  0010a	85 d2		 test	 edx, edx
  0010c	75 11		 jne	 SHORT $L71727
  0010e	6a 53		 push	 83			; 00000053H
  00110	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
  00115	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05MAJJAKPI@FALSE?$AA@
  0011a	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L71727:

; 84   : 		return E_OUTOFMEMORY;

  0011f	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00124	eb 02		 jmp	 SHORT $L69432
$L69450:

; 85   : 	}
; 86   : 	return S_OK;

  00126	33 c0		 xor	 eax, eax
$L69432:

; 87   : }

  00128	5f		 pop	 edi
  00129	5e		 pop	 esi
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c2 04 00	 ret	 4
?CreateCopyWithBlankState@CTrackList@@QAEJPAV1@@Z ENDP	; CTrackList::CreateCopyWithBlankState
_TEXT	ENDS
PUBLIC	??0CVirtualSegment@@QAE@XZ			; CVirtualSegment::CVirtualSegment
PUBLIC	??0CTrackList@@QAE@XZ				; CTrackList::CTrackList
; Function compile flags: /Odt
;	COMDAT ??0CVirtualSegment@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CVirtualSegment@@QAE@XZ PROC NEAR			; CVirtualSegment::CVirtualSegment, COMDAT
; _this$ = ecx

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AListItem@@QAE@XZ	; AListItem::AListItem
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 04	 add	 ecx, 4
  00015	e8 00 00 00 00	 call	 ??0CTrackList@@QAE@XZ

; 92   :     m_wszName[0] = 0;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	66 c7 40 6c 00
	00		 mov	 WORD PTR [eax+108], 0

; 93   :     m_pSourceSegment = NULL;

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 94   :     m_pPlaySegment = NULL;

  0002d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00030	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 95   :     m_pGraph = NULL;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 96   :     m_dwFlags = 0;

  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 97   :     m_dwID = 0;

  0004b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004e	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0

; 98   :     m_dwNextPlayID = DMUS_SONG_NOSEG;

  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	c7 40 1c ff ff
	ff ff		 mov	 DWORD PTR [eax+28], -1

; 99   :     m_dwNextPlayFlags = 0;

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 100  :     m_mtTime = 0;

  00069	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], 0

; 101  :     m_dwTransitionCount = 0;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00076	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], 0

; 102  :     m_pTransitions = NULL;

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0

; 103  :     m_SegHeader.rtLength = 0;

  00087	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008a	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0
  00091	c7 42 44 00 00
	00 00		 mov	 DWORD PTR [edx+68], 0

; 104  :     m_SegHeader.dwFlags = 0;

  00098	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 105  :     m_SegHeader.dwRepeats = 0;      /* Number of repeats. By default, 0. */

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 106  :     m_SegHeader.mtLength = 0xC00;   /* Length, in music time. */

  000ac	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000af	c7 42 2c 00 0c
	00 00		 mov	 DWORD PTR [edx+44], 3072 ; 00000c00H

; 107  :     m_SegHeader.mtPlayStart = 0;    /* Start of playback. By default, 0. */

  000b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 108  :     m_SegHeader.mtLoopStart = 0;    /* Start of looping portion. By default, 0. */

  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 109  :     m_SegHeader.mtLoopEnd = 0;      /* End of loop. Must be greater than dwPlayStart. By default equal to length. */

  000ca	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cd	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0

; 110  :     m_SegHeader.dwResolution = 0;   /* Default resolution. */

  000d4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d7	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0

; 111  : }

  000de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
??0CVirtualSegment@@QAE@XZ ENDP				; CVirtualSegment::CVirtualSegment
_TEXT	ENDS
PUBLIC	??0AList@@QAE@XZ				; AList::AList
; Function compile flags: /Odt
;	COMDAT ??0CTrackList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CTrackList@@QAE@XZ PROC NEAR				; CTrackList::CTrackList, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AList@@QAE@XZ	; AList::AList
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CTrackList@@QAE@XZ ENDP				; CTrackList::CTrackList
_TEXT	ENDS
PUBLIC	??1CVirtualSegment@@QAE@XZ			; CVirtualSegment::~CVirtualSegment
; Function compile flags: /Odt
;	COMDAT ??1CVirtualSegment@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8
$T71737 = -4
??1CVirtualSegment@@QAE@XZ PROC NEAR			; CVirtualSegment::~CVirtualSegment, COMDAT
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 116  :     if (m_pSourceSegment)

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00010	74 12		 je	 SHORT $L69462

; 117  :     {
; 118  :         m_pSourceSegment->Release();

  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00018	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001e	8b 12		 mov	 edx, DWORD PTR [edx]
  00020	51		 push	 ecx
  00021	ff 52 08	 call	 DWORD PTR [edx+8]
$L69462:

; 119  :     }
; 120  :     if (m_pPlaySegment)

  00024	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00027	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0002b	74 12		 je	 SHORT $L69463

; 121  :     {
; 122  :         m_pPlaySegment->Release();

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00039	8b 12		 mov	 edx, DWORD PTR [edx]
  0003b	51		 push	 ecx
  0003c	ff 52 08	 call	 DWORD PTR [edx+8]
$L69463:

; 123  :     }
; 124  :     if (m_pGraph)

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00046	74 12		 je	 SHORT $L69464

; 125  :     {
; 126  :         m_pGraph->Release();

  00048	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0004e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00054	8b 12		 mov	 edx, DWORD PTR [edx]
  00056	51		 push	 ecx
  00057	ff 52 08	 call	 DWORD PTR [edx+8]
$L69464:

; 127  :     }
; 128  :     if (m_pTransitions)

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	83 78 68 00	 cmp	 DWORD PTR [eax+104], 0
  00061	74 15		 je	 SHORT $L69465

; 129  :     {
; 130  :         delete [] m_pTransitions;

  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  00069	89 55 fc	 mov	 DWORD PTR $T71737[ebp], edx
  0006c	8b 45 fc	 mov	 eax, DWORD PTR $T71737[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00075	83 c4 04	 add	 esp, 4
$L69465:

; 131  :     }
; 132  :     m_TrackList.Clear();

  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	83 c1 04	 add	 ecx, 4
  0007e	e8 00 00 00 00	 call	 ?Clear@CTrackList@@QAEXXZ ; CTrackList::Clear

; 133  : }

  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??1CVirtualSegment@@QAE@XZ ENDP				; CVirtualSegment::~CVirtualSegment
_TEXT	ENDS
PUBLIC	?GetTrackByParam@CVirtualSegment@@QAEPAVCTrack@@PAV2@ABU_GUID@@KK@Z ; CVirtualSegment::GetTrackByParam
PUBLIC	?GetHead@CTrackList@@QAEPAVCTrack@@XZ		; CTrackList::GetHead
PUBLIC	??_C@_0BC@LLLGOMEJ@pCTrack?9?$DOm_pTrack?$AA@	; `string'
PUBLIC	_==@8
EXTRN	__imp__RtlAssert@16:NEAR
;	COMDAT ??_C@_0BC@LLLGOMEJ@pCTrack?9?$DOm_pTrack?$AA@
CONST	SEGMENT
??_C@_0BC@LLLGOMEJ@pCTrack?9?$DOm_pTrack?$AA@ DB 'pCTrack->m_pTrack', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetTrackByParam@CVirtualSegment@@QAEPAVCTrack@@PAV2@ABU_GUID@@KK@Z
_TEXT	SEGMENT
_this$ = -4
_pCTrack$ = 8
_rguidType$ = 12
_dwGroupBits$ = 16
_dwIndex$ = 20
?GetTrackByParam@CVirtualSegment@@QAEPAVCTrack@@PAV2@ABU_GUID@@KK@Z PROC NEAR ; CVirtualSegment::GetTrackByParam, COMDAT
; _this$ = ecx

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 138  : 	// If the caller was already part way through the list, it passes the current
; 139  :     // track. Otherwise, NULL to indicate start at the top.
; 140  :     if (pCTrack)

  00007	83 7d 08 00	 cmp	 DWORD PTR _pCTrack$[ebp], 0
  0000b	74 0d		 je	 SHORT $L69474

; 141  :     {
; 142  :         pCTrack = pCTrack->GetNext();

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pCTrack$[ebp]
  00010	e8 00 00 00 00	 call	 ?GetNext@CTrack@@QAEPAV1@XZ ; CTrack::GetNext
  00015	89 45 08	 mov	 DWORD PTR _pCTrack$[ebp], eax

; 143  :     }
; 144  :     else

  00018	eb 0e		 jmp	 SHORT $L69477
$L69474:

; 145  :     {
; 146  : 	    pCTrack = m_TrackList.GetHead();

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 04	 add	 ecx, 4
  00020	e8 00 00 00 00	 call	 ?GetHead@CTrackList@@QAEPAVCTrack@@XZ ; CTrackList::GetHead
  00025	89 45 08	 mov	 DWORD PTR _pCTrack$[ebp], eax
$L69477:

; 147  :     }
; 148  : 	while( pCTrack )

  00028	83 7d 08 00	 cmp	 DWORD PTR _pCTrack$[ebp], 0
  0002c	0f 84 8a 00 00
	00		 je	 $L69478

; 149  : 	{
; 150  : 		ASSERT(pCTrack->m_pTrack);

  00032	8b 45 08	 mov	 eax, DWORD PTR _pCTrack$[ebp]
  00035	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00039	75 17		 jne	 SHORT $L69479
  0003b	6a 00		 push	 0
  0003d	68 96 00 00 00	 push	 150			; 00000096H
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@LLLGOMEJ@pCTrack?9?$DOm_pTrack?$AA@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69479:

; 151  : 		if( (pCTrack->m_dwGroupBits & dwGroupBits ) && 
; 152  :             (pCTrack->m_dwFlags & DMUS_TRACKCONFIG_CONTROL_ENABLED))

  00052	8b 4d 08	 mov	 ecx, DWORD PTR _pCTrack$[ebp]
  00055	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00058	23 55 10	 and	 edx, DWORD PTR _dwGroupBits$[ebp]
  0005b	85 d2		 test	 edx, edx
  0005d	74 4d		 je	 SHORT $L69481
  0005f	8b 45 08	 mov	 eax, DWORD PTR _pCTrack$[ebp]
  00062	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00065	83 e1 08	 and	 ecx, 8
  00068	85 c9		 test	 ecx, ecx
  0006a	74 40		 je	 SHORT $L69481

; 153  : 		{
; 154  : 			if( (GUID_NULL == rguidType) || (pCTrack->m_pTrack->IsParamSupported( rguidType ) == S_OK ))

  0006c	8b 55 0c	 mov	 edx, DWORD PTR _rguidType$[ebp]
  0006f	52		 push	 edx
  00070	68 00 00 00 00	 push	 OFFSET FLAT:__GUID_00000000_0000_0000_0000_000000000000
  00075	e8 00 00 00 00	 call	 _==@8
  0007a	85 c0		 test	 eax, eax
  0007c	75 1a		 jne	 SHORT $L69484
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _rguidType$[ebp]
  00081	50		 push	 eax
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _pCTrack$[ebp]
  00085	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00088	8b 45 08	 mov	 eax, DWORD PTR _pCTrack$[ebp]
  0008b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0008e	8b 12		 mov	 edx, DWORD PTR [edx]
  00090	51		 push	 ecx
  00091	ff 52 24	 call	 DWORD PTR [edx+36]
  00094	85 c0		 test	 eax, eax
  00096	75 14		 jne	 SHORT $L69481
$L69484:

; 155  : 			{
; 156  : 				if( 0 == dwIndex )

  00098	83 7d 14 00	 cmp	 DWORD PTR _dwIndex$[ebp], 0
  0009c	75 05		 jne	 SHORT $L69485

; 157  : 				{
; 158  :                     return pCTrack;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _pCTrack$[ebp]
  000a1	eb 1b		 jmp	 SHORT $L69473
$L69485:

; 159  : 				}
; 160  : 				dwIndex--;

  000a3	8b 45 14	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  000a6	83 e8 01	 sub	 eax, 1
  000a9	89 45 14	 mov	 DWORD PTR _dwIndex$[ebp], eax
$L69481:

; 161  : 			}
; 162  : 		}
; 163  : 		pCTrack = pCTrack->GetNext();

  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _pCTrack$[ebp]
  000af	e8 00 00 00 00	 call	 ?GetNext@CTrack@@QAEPAV1@XZ ; CTrack::GetNext
  000b4	89 45 08	 mov	 DWORD PTR _pCTrack$[ebp], eax

; 164  : 	}

  000b7	e9 6c ff ff ff	 jmp	 $L69477
$L69478:

; 165  :     return NULL;

  000bc	33 c0		 xor	 eax, eax
$L69473:

; 166  : }

  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 10 00	 ret	 16			; 00000010H
?GetTrackByParam@CVirtualSegment@@QAEPAVCTrack@@PAV2@ABU_GUID@@KK@Z ENDP ; CVirtualSegment::GetTrackByParam
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\guiddef.h
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8
_guidOther$ = 12
_==@8	PROC NEAR					; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  :     return IsEqualGUID(guidOne,guidOther);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IsEqualGUID@8

; 190  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:NEAR
; Function compile flags: /Odt
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8
_rguid2$ = 12
_IsEqualGUID@8 PROC NEAR				; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _memcmp
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 157  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
PUBLIC	??_GCVirtualSegment@@QAEPAXI@Z			; CVirtualSegment::`scalar deleting destructor'
PUBLIC	?Clear@CVirtualSegmentList@@QAEXXZ		; CVirtualSegmentList::Clear
PUBLIC	?RemoveHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ ; CVirtualSegmentList::RemoveHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\song.cpp
;	COMDAT ?Clear@CVirtualSegmentList@@QAEXXZ
_TEXT	SEGMENT
tv71 = -20
_this$ = -16
$T71751 = -12
$T71750 = -8
_pVirtualSegment$ = -4
?Clear@CVirtualSegmentList@@QAEXXZ PROC NEAR		; CVirtualSegmentList::Clear, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
$L69491:

; 170  :     CVirtualSegment *pVirtualSegment;
; 171  :     while (pVirtualSegment = RemoveHead())

  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?RemoveHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ ; CVirtualSegmentList::RemoveHead
  00011	89 45 fc	 mov	 DWORD PTR _pVirtualSegment$[ebp], eax
  00014	83 7d fc 00	 cmp	 DWORD PTR _pVirtualSegment$[ebp], 0
  00018	74 2a		 je	 SHORT $L69488

; 172  :     {
; 173  :         delete pVirtualSegment;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  0001d	89 45 f4	 mov	 DWORD PTR $T71751[ebp], eax
  00020	8b 4d f4	 mov	 ecx, DWORD PTR $T71751[ebp]
  00023	89 4d f8	 mov	 DWORD PTR $T71750[ebp], ecx
  00026	83 7d f8 00	 cmp	 DWORD PTR $T71750[ebp], 0
  0002a	74 0f		 je	 SHORT $L71752
  0002c	6a 01		 push	 1
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR $T71750[ebp]
  00031	e8 00 00 00 00	 call	 ??_GCVirtualSegment@@QAEPAXI@Z
  00036	89 45 ec	 mov	 DWORD PTR tv71[ebp], eax
  00039	eb 07		 jmp	 SHORT $L71753
$L71752:
  0003b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L71753:

; 174  :     }

  00042	eb c5		 jmp	 SHORT $L69491
$L69488:

; 175  : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?Clear@CVirtualSegmentList@@QAEXXZ ENDP			; CVirtualSegmentList::Clear
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCVirtualSegment@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCVirtualSegment@@QAEPAXI@Z PROC NEAR		; CVirtualSegment::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CVirtualSegment@@QAE@XZ ; CVirtualSegment::~CVirtualSegment
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69498
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69498:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCVirtualSegment@@QAEPAXI@Z ENDP			; CVirtualSegment::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CSongSegment@@QAE@XZ				; CSongSegment::CSongSegment
; Function compile flags: /Odt
;	COMDAT ??0CSongSegment@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSongSegment@@QAE@XZ PROC NEAR			; CSongSegment::CSongSegment, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AListItem@@QAE@XZ	; AListItem::AListItem

; 180  :     m_pSegment = NULL;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 181  :     m_dwLoadID = 0;

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 182  : }

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0CSongSegment@@QAE@XZ ENDP				; CSongSegment::CSongSegment
_TEXT	ENDS
PUBLIC	??1CSongSegment@@QAE@XZ				; CSongSegment::~CSongSegment
; Function compile flags: /Odt
;	COMDAT ??1CSongSegment@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CSongSegment@@QAE@XZ PROC NEAR			; CSongSegment::~CSongSegment, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  :     if (m_pSegment)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 12		 je	 SHORT $L69504

; 188  :     {
; 189  :         m_pSegment->Release();

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001c	8b 12		 mov	 edx, DWORD PTR [edx]
  0001e	51		 push	 ecx
  0001f	ff 52 08	 call	 DWORD PTR [edx+8]
$L69504:

; 190  :     }
; 191  : }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??1CSongSegment@@QAE@XZ ENDP				; CSongSegment::~CSongSegment
_TEXT	ENDS
PUBLIC	?AddSegment@CSongSegmentList@@QAEJPAVCSegment@@K@Z ; CSongSegmentList::AddSegment
PUBLIC	?AddTail@CSongSegmentList@@QAEXPAVCSongSegment@@@Z ; CSongSegmentList::AddTail
; Function compile flags: /Odt
;	COMDAT ?AddSegment@CSongSegmentList@@QAEJPAVCSegment@@K@Z
_TEXT	SEGMENT
tv69 = -16
_this$ = -12
$T71766 = -8
_pSeg$ = -4
_pSegment$ = 8
_dwLoadID$ = 12
?AddSegment@CSongSegmentList@@QAEJPAVCSegment@@K@Z PROC NEAR ; CSongSegmentList::AddSegment, COMDAT
; _this$ = ecx

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 196  :     CSongSegment *pSeg = new CSongSegment;

  00009	6a 0c		 push	 12			; 0000000cH
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 f8	 mov	 DWORD PTR $T71766[ebp], eax
  00016	83 7d f8 00	 cmp	 DWORD PTR $T71766[ebp], 0
  0001a	74 0d		 je	 SHORT $L71767
  0001c	8b 4d f8	 mov	 ecx, DWORD PTR $T71766[ebp]
  0001f	e8 00 00 00 00	 call	 ??0CSongSegment@@QAE@XZ	; CSongSegment::CSongSegment
  00024	89 45 f0	 mov	 DWORD PTR tv69[ebp], eax
  00027	eb 07		 jmp	 SHORT $L71768
$L71767:
  00029	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$L71768:
  00030	8b 45 f0	 mov	 eax, DWORD PTR tv69[ebp]
  00033	89 45 fc	 mov	 DWORD PTR _pSeg$[ebp], eax

; 197  :     if (pSeg)

  00036	83 7d fc 00	 cmp	 DWORD PTR _pSeg$[ebp], 0
  0003a	74 2e		 je	 SHORT $L69514

; 198  :     {
; 199  :         pSeg->m_dwLoadID = dwLoadID;

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _pSeg$[ebp]
  0003f	8b 55 0c	 mov	 edx, DWORD PTR _dwLoadID$[ebp]
  00042	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 200  :         pSeg->m_pSegment = pSegment;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _pSeg$[ebp]
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  0004b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 201  :         pSegment->AddRef();

  0004e	8b 55 08	 mov	 edx, DWORD PTR _pSegment$[ebp]
  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  00056	51		 push	 ecx
  00057	ff 50 04	 call	 DWORD PTR [eax+4]

; 202  :         AddTail(pSeg);

  0005a	8b 55 fc	 mov	 edx, DWORD PTR _pSeg$[ebp]
  0005d	52		 push	 edx
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?AddTail@CSongSegmentList@@QAEXPAVCSongSegment@@@Z ; CSongSegmentList::AddTail

; 203  :         return S_OK;

  00066	33 c0		 xor	 eax, eax
  00068	eb 05		 jmp	 SHORT $L69510
$L69514:

; 204  :     }
; 205  :     return E_OUTOFMEMORY;

  0006a	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
$L69510:

; 206  : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?AddSegment@CSongSegmentList@@QAEJPAVCSegment@@K@Z ENDP	; CSongSegmentList::AddSegment
_TEXT	ENDS
PUBLIC	??_GCSongSegment@@QAEPAXI@Z			; CSongSegment::`scalar deleting destructor'
PUBLIC	?Clear@CSongSegmentList@@QAEXXZ			; CSongSegmentList::Clear
PUBLIC	?RemoveHead@CSongSegmentList@@QAEPAVCSongSegment@@XZ ; CSongSegmentList::RemoveHead
; Function compile flags: /Odt
;	COMDAT ?Clear@CSongSegmentList@@QAEXXZ
_TEXT	SEGMENT
tv71 = -20
_this$ = -16
$T71773 = -12
$T71772 = -8
_pSongSegment$ = -4
?Clear@CSongSegmentList@@QAEXXZ PROC NEAR		; CSongSegmentList::Clear, COMDAT
; _this$ = ecx

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
$L69522:

; 210  :     CSongSegment *pSongSegment;
; 211  :     while (pSongSegment = RemoveHead())

  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?RemoveHead@CSongSegmentList@@QAEPAVCSongSegment@@XZ ; CSongSegmentList::RemoveHead
  00011	89 45 fc	 mov	 DWORD PTR _pSongSegment$[ebp], eax
  00014	83 7d fc 00	 cmp	 DWORD PTR _pSongSegment$[ebp], 0
  00018	74 2a		 je	 SHORT $L69519

; 212  :     {
; 213  :         delete pSongSegment;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _pSongSegment$[ebp]
  0001d	89 45 f4	 mov	 DWORD PTR $T71773[ebp], eax
  00020	8b 4d f4	 mov	 ecx, DWORD PTR $T71773[ebp]
  00023	89 4d f8	 mov	 DWORD PTR $T71772[ebp], ecx
  00026	83 7d f8 00	 cmp	 DWORD PTR $T71772[ebp], 0
  0002a	74 0f		 je	 SHORT $L71774
  0002c	6a 01		 push	 1
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR $T71772[ebp]
  00031	e8 00 00 00 00	 call	 ??_GCSongSegment@@QAEPAXI@Z
  00036	89 45 ec	 mov	 DWORD PTR tv71[ebp], eax
  00039	eb 07		 jmp	 SHORT $L71775
$L71774:
  0003b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L71775:

; 214  :     }

  00042	eb c5		 jmp	 SHORT $L69522
$L69519:

; 215  : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?Clear@CSongSegmentList@@QAEXXZ ENDP			; CSongSegmentList::Clear
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCSongSegment@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCSongSegment@@QAEPAXI@Z PROC NEAR			; CSongSegment::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSongSegment@@QAE@XZ	; CSongSegment::~CSongSegment
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69529
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69529:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCSongSegment@@QAEPAXI@Z ENDP			; CSongSegment::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CInfo@@QAE@XZ				; CInfo::CInfo
PUBLIC	??0CSegmentList@@QAE@XZ				; CSegmentList::CSegmentList
PUBLIC	??0CGraphList@@QAE@XZ				; CGraphList::CGraphList
PUBLIC	??0IDirectMusicSong@@QAE@XZ			; IDirectMusicSong::IDirectMusicSong
PUBLIC	??0CVirtualSegmentList@@QAE@XZ			; CVirtualSegmentList::CVirtualSegmentList
PUBLIC	??0CSongSegmentList@@QAE@XZ			; CSongSegmentList::CSongSegmentList
PUBLIC	??0CSong@@QAE@XZ				; CSong::CSong
PUBLIC	?QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z	; CSong::QueryInterface
PUBLIC	?AddRef@CSong@@UAGKXZ				; CSong::AddRef
PUBLIC	?Release@CSong@@UAGKXZ				; CSong::Release
PUBLIC	?Compose@CSong@@UAGJXZ				; CSong::Compose
PUBLIC	?GetParam@CSong@@UAGJABU_GUID@@KKJPAJPAX@Z	; CSong::GetParam
PUBLIC	?GetSegment@CSong@@UAGJPBGPAPAUIDirectMusicSegment@@@Z ; CSong::GetSegment
PUBLIC	?EnumSegment@CSong@@UAGJKPAPAUIDirectMusicSegment@@@Z ; CSong::EnumSegment
PUBLIC	?GetAudioPathConfig@CSong@@UAGJPAPAUIUnknown@@@Z ; CSong::GetAudioPathConfig
PUBLIC	?Download@CSong@@UAGJPAUIUnknown@@@Z		; CSong::Download
PUBLIC	?Unload@CSong@@UAGJPAUIUnknown@@@Z		; CSong::Unload
PUBLIC	?GetClassID@CSong@@UAGJPAU_GUID@@@Z		; CSong::GetClassID
PUBLIC	?IsDirty@CSong@@UAGJXZ				; CSong::IsDirty
PUBLIC	?Load@CSong@@UAGJPAUIStream@@@Z			; CSong::Load
PUBLIC	?Save@CSong@@UAGJPAUIStream@@H@Z		; CSong::Save
PUBLIC	?GetSizeMax@CSong@@UAGJPAT_ULARGE_INTEGER@@@Z	; CSong::GetSizeMax
PUBLIC	?GetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z ; CSong::GetDescriptor
PUBLIC	?SetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z ; CSong::SetDescriptor
PUBLIC	?ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z ; CSong::ParseDescriptor
PUBLIC	?Zombie@CSong@@UAGXXZ				; CSong::Zombie
PUBLIC	?QueryInterface@CSong@@W3AGJABU_GUID@@PAPAX@Z	; CSong::QueryInterface
PUBLIC	?AddRef@CSong@@W3AGKXZ				; CSong::AddRef
PUBLIC	??0IPersistStream@@QAE@XZ			; IPersistStream::IPersistStream
PUBLIC	?Release@CSong@@W3AGKXZ				; CSong::Release
PUBLIC	?QueryInterface@CSong@@W7AGJABU_GUID@@PAPAX@Z	; CSong::QueryInterface
PUBLIC	?AddRef@CSong@@W7AGKXZ				; CSong::AddRef
PUBLIC	?Release@CSong@@W7AGKXZ				; CSong::Release
PUBLIC	?QueryInterface@CSong@@WM@AGJABU_GUID@@PAPAX@Z	; CSong::QueryInterface
PUBLIC	?AddRef@CSong@@WM@AGKXZ				; CSong::AddRef
PUBLIC	?Release@CSong@@WM@AGKXZ			; CSong::Release
PUBLIC	??_7CSong@@6BIDirectMusicSong@@@		; CSong::`vftable'
PUBLIC	??_7CSong@@6BIPersistStream@@@			; CSong::`vftable'
PUBLIC	??_7CSong@@6BIDirectMusicObject@@@		; CSong::`vftable'
PUBLIC	??_7CSong@@6BIDirectMusicObjectP@@@		; CSong::`vftable'
PUBLIC	??0IDirectMusicObject@@QAE@XZ			; IDirectMusicObject::IDirectMusicObject
PUBLIC	??0IDirectMusicObjectP@@QAE@XZ			; IDirectMusicObjectP::IDirectMusicObjectP
EXTRN	?Init@CInfo@@QAEXXZ:NEAR			; CInfo::Init
EXTRN	??0CMemTrack@@QAE@K@Z:NEAR			; CMemTrack::CMemTrack
EXTRN	__imp__RtlInitializeCriticalSection@4:NEAR
;	COMDAT ??_7CSong@@6BIDirectMusicSong@@@
CONST	SEGMENT
??_7CSong@@6BIDirectMusicSong@@@ DD FLAT:?QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z ; CSong::`vftable'
	DD	FLAT:?AddRef@CSong@@UAGKXZ
	DD	FLAT:?Release@CSong@@UAGKXZ
	DD	FLAT:?Compose@CSong@@UAGJXZ
	DD	FLAT:?GetParam@CSong@@UAGJABU_GUID@@KKJPAJPAX@Z
	DD	FLAT:?GetSegment@CSong@@UAGJPBGPAPAUIDirectMusicSegment@@@Z
	DD	FLAT:?GetAudioPathConfig@CSong@@UAGJPAPAUIUnknown@@@Z
	DD	FLAT:?Download@CSong@@UAGJPAUIUnknown@@@Z
	DD	FLAT:?Unload@CSong@@UAGJPAUIUnknown@@@Z
	DD	FLAT:?EnumSegment@CSong@@UAGJKPAPAUIDirectMusicSegment@@@Z
CONST	ENDS
;	COMDAT ??_7CSong@@6BIPersistStream@@@
CONST	SEGMENT
??_7CSong@@6BIPersistStream@@@ DD FLAT:?QueryInterface@CSong@@W3AGJABU_GUID@@PAPAX@Z ; CSong::`vftable'
	DD	FLAT:?AddRef@CSong@@W3AGKXZ
	DD	FLAT:?Release@CSong@@W3AGKXZ
	DD	FLAT:?GetClassID@CSong@@UAGJPAU_GUID@@@Z
	DD	FLAT:?IsDirty@CSong@@UAGJXZ
	DD	FLAT:?Load@CSong@@UAGJPAUIStream@@@Z
	DD	FLAT:?Save@CSong@@UAGJPAUIStream@@H@Z
	DD	FLAT:?GetSizeMax@CSong@@UAGJPAT_ULARGE_INTEGER@@@Z
CONST	ENDS
;	COMDAT ??_7CSong@@6BIDirectMusicObject@@@
CONST	SEGMENT
??_7CSong@@6BIDirectMusicObject@@@ DD FLAT:?QueryInterface@CSong@@W7AGJABU_GUID@@PAPAX@Z ; CSong::`vftable'
	DD	FLAT:?AddRef@CSong@@W7AGKXZ
	DD	FLAT:?Release@CSong@@W7AGKXZ
	DD	FLAT:?GetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z
	DD	FLAT:?SetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z
	DD	FLAT:?ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z
CONST	ENDS
;	COMDAT ??_7CSong@@6BIDirectMusicObjectP@@@
CONST	SEGMENT
??_7CSong@@6BIDirectMusicObjectP@@@ DD FLAT:?QueryInterface@CSong@@WM@AGJABU_GUID@@PAPAX@Z ; CSong::`vftable'
	DD	FLAT:?AddRef@CSong@@WM@AGKXZ
	DD	FLAT:?Release@CSong@@WM@AGKXZ
	DD	FLAT:?Zombie@CSong@@UAGXXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CSong@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSong@@QAE@XZ PROC NEAR				; CSong::CSong, COMDAT
; _this$ = ecx

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IDirectMusicSong@@QAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 04	 add	 ecx, 4
  00015	e8 00 00 00 00	 call	 ??0IPersistStream@@QAE@XZ
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??0IDirectMusicObject@@QAE@XZ
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0002b	e8 00 00 00 00	 call	 ??0IDirectMusicObjectP@@QAE@XZ
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSong@@6BIDirectMusicSong@@@
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CSong@@6BIPersistStream@@@
  00043	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00046	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET FLAT:??_7CSong@@6BIDirectMusicObject@@@
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET FLAT:??_7CSong@@6BIDirectMusicObjectP@@@
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	83 c1 14	 add	 ecx, 20			; 00000014H
  0005d	e8 00 00 00 00	 call	 ??0CGraphList@@QAE@XZ
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	83 c1 18	 add	 ecx, 24			; 00000018H
  00068	e8 00 00 00 00	 call	 ??0CSongSegmentList@@QAE@XZ
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00073	e8 00 00 00 00	 call	 ??0CSegmentList@@QAE@XZ
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	83 c1 20	 add	 ecx, 32			; 00000020H
  0007e	e8 00 00 00 00	 call	 ??0CVirtualSegmentList@@QAE@XZ
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00089	e8 00 00 00 00	 call	 ??0CInfo@@QAE@XZ	; CInfo::CInfo
  0008e	6a 1b		 push	 27			; 0000001bH
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	81 c1 80 03 00
	00		 add	 ecx, 896		; 00000380H
  00099	e8 00 00 00 00	 call	 ??0CMemTrack@@QAE@K@Z	; CMemTrack::CMemTrack

; 220  :     INITIALIZE_CRITICAL_SECTION(&m_CriticalSection);

  0009e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	83 c1 24	 add	 ecx, 36			; 00000024H
  000a4	51		 push	 ecx
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 221  :     m_dwStartSegID = DMUS_SONG_NOSEG;

  000ab	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ae	c7 42 44 ff ff
	ff ff		 mov	 DWORD PTR [edx+68], -1

; 222  :     m_pAudioPathConfig = NULL;

  000b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 223  :     m_Info.Init();

  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	83 c1 4c	 add	 ecx, 76			; 0000004cH
  000c5	e8 00 00 00 00	 call	 ?Init@CInfo@@QAEXXZ	; CInfo::Init

; 224  :     m_cRef = 1;

  000ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	c7 41 48 01 00
	00 00		 mov	 DWORD PTR [ecx+72], 1

; 225  :     m_dwFlags = 0;

  000d4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d7	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0

; 226  :     m_pUnkDispatch = NULL;

  000de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	c7 80 78 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+888], 0

; 227  :     IncrementDLLCount();
; 228  :     m_fZombie = false;

  000eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	c6 81 7c 03 00
	00 00		 mov	 BYTE PTR [ecx+892], 0

; 229  :     TraceI(2, "Song %lx created\n", this );
; 230  : }

  000f5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
??0CSong@@QAE@XZ ENDP					; CSong::CSong
_TEXT	ENDS
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
; Function compile flags: /Odt
;	COMDAT ??0IDirectMusicSong@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicSong@@QAE@XZ PROC NEAR			; IDirectMusicSong::IDirectMusicSong, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicSong@@QAE@XZ ENDP			; IDirectMusicSong::IDirectMusicSong
_TEXT	ENDS
PUBLIC	??0IPersist@@QAE@XZ				; IPersist::IPersist
; Function compile flags: /Odt
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersistStream@@QAE@XZ PROC NEAR			; IPersistStream::IPersistStream, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPersist@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersistStream@@QAE@XZ ENDP				; IPersistStream::IPersistStream
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IDirectMusicObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicObject@@QAE@XZ PROC NEAR			; IDirectMusicObject::IDirectMusicObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicObject@@QAE@XZ ENDP			; IDirectMusicObject::IDirectMusicObject
_TEXT	ENDS
PUBLIC	??_7IDirectMusicObjectP@@6B@			; IDirectMusicObjectP::`vftable'
EXTRN	__purecall:NEAR
;	COMDAT ??_7IDirectMusicObjectP@@6B@
CONST	SEGMENT
??_7IDirectMusicObjectP@@6B@ DD FLAT:__purecall		; IDirectMusicObjectP::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0IDirectMusicObjectP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicObjectP@@QAE@XZ PROC NEAR		; IDirectMusicObjectP::IDirectMusicObjectP, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7IDirectMusicObjectP@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0IDirectMusicObjectP@@QAE@XZ ENDP			; IDirectMusicObjectP::IDirectMusicObjectP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CGraphList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CGraphList@@QAE@XZ PROC NEAR				; CGraphList::CGraphList, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AList@@QAE@XZ	; AList::AList
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CGraphList@@QAE@XZ ENDP				; CGraphList::CGraphList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CSongSegmentList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSongSegmentList@@QAE@XZ PROC NEAR			; CSongSegmentList::CSongSegmentList, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AList@@QAE@XZ	; AList::AList
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSongSegmentList@@QAE@XZ ENDP			; CSongSegmentList::CSongSegmentList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CSegmentList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSegmentList@@QAE@XZ PROC NEAR			; CSegmentList::CSegmentList, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AList@@QAE@XZ	; AList::AList
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CSegmentList@@QAE@XZ ENDP				; CSegmentList::CSegmentList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CVirtualSegmentList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CVirtualSegmentList@@QAE@XZ PROC NEAR		; CVirtualSegmentList::CVirtualSegmentList, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AList@@QAE@XZ	; AList::AList
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CVirtualSegmentList@@QAE@XZ ENDP			; CVirtualSegmentList::CVirtualSegmentList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersist@@QAE@XZ PROC NEAR				; IPersist::IPersist, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersist@@QAE@XZ ENDP				; IPersist::IPersist
_TEXT	ENDS
PUBLIC	??1CSong@@QAE@XZ				; CSong::~CSong
PUBLIC	?DeleteCriticalSection@@YGXPAX@Z		; DeleteCriticalSection
PUBLIC	?Clear@CSong@@AAEXXZ				; CSong::Clear
EXTRN	??1CMemTrack@@QAE@XZ:NEAR			; CMemTrack::~CMemTrack
; Function compile flags: /Odt
;	COMDAT ??1CSong@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CSong@@QAE@XZ PROC NEAR				; CSong::~CSong, COMDAT
; _this$ = ecx

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSong@@6BIDirectMusicSong@@@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CSong@@6BIPersistStream@@@
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET FLAT:??_7CSong@@6BIDirectMusicObject@@@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET FLAT:??_7CSong@@6BIDirectMusicObjectP@@@

; 234  :     Clear();

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?Clear@CSong@@AAEXXZ	; CSong::Clear

; 235  : 
; 236  :     if (m_pUnkDispatch)

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 b9 78 03 00
	00 00		 cmp	 DWORD PTR [ecx+888], 0
  00040	74 18		 je	 SHORT $L69555

; 237  :     {
; 238  :         m_pUnkDispatch->Release(); // free IDispatch implementation we may have borrowed

  00042	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00045	8b 82 78 03 00
	00		 mov	 eax, DWORD PTR [edx+888]
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	8b 91 78 03 00
	00		 mov	 edx, DWORD PTR [ecx+888]
  00054	8b 00		 mov	 eax, DWORD PTR [eax]
  00056	52		 push	 edx
  00057	ff 50 08	 call	 DWORD PTR [eax+8]
$L69555:

; 239  :     }
; 240  :     DELETE_CRITICAL_SECTION(&m_CriticalSection);

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	83 c1 24	 add	 ecx, 36			; 00000024H
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 ?DeleteCriticalSection@@YGXPAX@Z ; DeleteCriticalSection

; 241  :     DecrementDLLCount();
; 242  :     TraceI(2, "Song %lx destroyed\n", this );
; 243  : }

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	81 c1 80 03 00
	00		 add	 ecx, 896		; 00000380H
  0006f	e8 00 00 00 00	 call	 ??1CMemTrack@@QAE@XZ	; CMemTrack::~CMemTrack
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
??1CSong@@QAE@XZ ENDP					; CSong::~CSong
_TEXT	ENDS
EXTRN	?Clear@CSegmentList@@QAEXXZ:NEAR		; CSegmentList::Clear
EXTRN	?Clear@CGraphList@@QAEXXZ:NEAR			; CGraphList::Clear
; Function compile flags: /Odt
;	COMDAT ?Clear@CSong@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Clear@CSong@@AAEXXZ PROC NEAR				; CSong::Clear, COMDAT
; _this$ = ecx

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 248  :     if (m_pAudioPathConfig) 

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0000e	74 1c		 je	 SHORT $L69560

; 249  :     {
; 250  :         m_pAudioPathConfig->Release();

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001c	8b 12		 mov	 edx, DWORD PTR [edx]
  0001e	51		 push	 ecx
  0001f	ff 52 08	 call	 DWORD PTR [edx+8]

; 251  :         m_pAudioPathConfig = NULL;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$L69560:

; 252  :     }
; 253  :     m_GraphList.Clear();

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 14	 add	 ecx, 20			; 00000014H
  00032	e8 00 00 00 00	 call	 ?Clear@CGraphList@@QAEXXZ ; CGraphList::Clear

; 254  :     m_PlayList.Clear();

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0003d	e8 00 00 00 00	 call	 ?Clear@CSegmentList@@QAEXXZ ; CSegmentList::Clear

; 255  :     m_SegmentList.Clear();

  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 c1 18	 add	 ecx, 24			; 00000018H
  00048	e8 00 00 00 00	 call	 ?Clear@CSongSegmentList@@QAEXXZ ; CSongSegmentList::Clear

; 256  :     m_VirtualSegmentList.Clear();

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 20	 add	 ecx, 32			; 00000020H
  00053	e8 00 00 00 00	 call	 ?Clear@CVirtualSegmentList@@QAEXXZ ; CVirtualSegmentList::Clear

; 257  :     m_dwStartSegID = DMUS_SONG_NOSEG;

  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	c7 41 44 ff ff
	ff ff		 mov	 DWORD PTR [ecx+68], -1

; 258  :     m_dwFlags = 0;

  00062	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00065	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0

; 259  :     m_Info.Init();

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00072	e8 00 00 00 00	 call	 ?Init@CInfo@@QAEXXZ	; CInfo::Init

; 260  : }

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?Clear@CSong@@AAEXXZ ENDP				; CSong::Clear
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Zombie@CSong@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8
?Zombie@CSong@@UAGXXZ PROC NEAR				; CSong::Zombie, COMDAT

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 264  : 	Clear();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  00009	e8 00 00 00 00	 call	 ?Clear@CSong@@AAEXXZ	; CSong::Clear

; 265  : 	m_fZombie = true;

  0000e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c6 80 70 03 00
	00 01		 mov	 BYTE PTR [eax+880], 1

; 266  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?Zombie@CSong@@UAGXXZ ENDP				; CSong::Zombie
_TEXT	ENDS
PUBLIC	??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ ; `string'
PUBLIC	??_C@_0DM@OFNHKHOC@Warning?3?5Request?5to?5query?5unknow@ ; `string'
EXTRN	_CLSID_AutDirectMusicSong:BYTE
EXTRN	_IID_IDispatch:BYTE
EXTRN	?DebugTrace@@YAXHPADZZ:NEAR			; DebugTrace
EXTRN	_DebugBreak@0:NEAR
EXTRN	_IID_IUnknown:BYTE
EXTRN	_IID_IDirectMusicObject:BYTE
EXTRN	_IID_IDirectMusicSong:BYTE
EXTRN	_DirectMusicCreateInstance@16:NEAR
EXTRN	_IID_CSong:BYTE
EXTRN	_IID_IPersistStream:BYTE
EXTRN	_IsBadReadPtr@8:NEAR
EXTRN	_IsBadWritePtr@8:NEAR
EXTRN	_IID_IDirectMusicObjectP:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z@4QBDB DB 'C'
	DB	'Song::QueryInterface', 00H			; `CSong::QueryInterface'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT
??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ DB '%s: Invalid '
	DB	'pointer ppv', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT
??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ DB '%'
	DB	's: Invalid pointer (void*)&iid', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@OFNHKHOC@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT
??_C@_0DM@OFNHKHOC@Warning?3?5Request?5to?5query?5unknow@ DB 'Warning: Re'
	DB	'quest to query unknown interface on Song object', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv142 = -12
tv135 = -8
tv128 = -4
_this$ = 8
_iid$ = 12
_ppv$ = 16
?QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z PROC NEAR	; CSong::QueryInterface, COMDAT

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 272  :     V_INAME(CSong::QueryInterface);
; 273  :     V_PTRPTR_WRITE(ppv);

  00006	6a 04		 push	 4
  00008	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69572
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69572:

; 274  :     V_REFGUID(iid);

  0002e	6a 10		 push	 16			; 00000010H
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00039	85 c0		 test	 eax, eax
  0003b	74 19		 je	 SHORT $L69576
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
  00047	6a ff		 push	 -1
  00049	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 _DebugBreak@0
$L69576:

; 275  : 
; 276  :     *ppv = NULL;

  00056	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  00059	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 277  :     if (iid == IID_IUnknown || iid == IID_IDirectMusicSong)

  0005f	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IUnknown
  00064	8b 45 0c	 mov	 eax, DWORD PTR _iid$[ebp]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 _==@8
  0006d	85 c0		 test	 eax, eax
  0006f	75 12		 jne	 SHORT $L69579
  00071	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicSong
  00076	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 _==@8
  0007f	85 c0		 test	 eax, eax
  00081	74 0d		 je	 SHORT $L69578
$L69579:

; 278  :     {
; 279  :         *ppv = static_cast<IDirectMusicSong*>(this);

  00083	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  00086	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00089	89 02		 mov	 DWORD PTR [edx], eax

; 280  :     }
; 281  :     else if (iid == IID_CSong)

  0008b	e9 29 01 00 00	 jmp	 $L69581
$L69578:
  00090	68 00 00 00 00	 push	 OFFSET FLAT:_IID_CSong
  00095	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _==@8
  0009e	85 c0		 test	 eax, eax
  000a0	74 0d		 je	 SHORT $L69582

; 282  :     {
; 283  :         *ppv = static_cast<CSong*>(this);

  000a2	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  000a5	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	89 02		 mov	 DWORD PTR [edx], eax

; 284  :     }
; 285  :     else if (iid == IID_IPersistStream)

  000aa	e9 0a 01 00 00	 jmp	 $L69581
$L69582:
  000af	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPersistStream
  000b4	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 _==@8
  000bd	85 c0		 test	 eax, eax
  000bf	74 25		 je	 SHORT $L69585

; 286  :     {
; 287  :         *ppv = static_cast<IPersistStream*>(this);

  000c1	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  000c5	74 0b		 je	 SHORT $L71821
  000c7	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ca	83 c2 04	 add	 edx, 4
  000cd	89 55 fc	 mov	 DWORD PTR tv128[ebp], edx
  000d0	eb 07		 jmp	 SHORT $L71822
$L71821:
  000d2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$L71822:
  000d9	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR tv128[ebp]
  000df	89 08		 mov	 DWORD PTR [eax], ecx

; 288  :     }
; 289  :     else if(iid == IID_IDirectMusicObject)

  000e1	e9 d3 00 00 00	 jmp	 $L69581
$L69585:
  000e6	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicObject
  000eb	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  000ee	52		 push	 edx
  000ef	e8 00 00 00 00	 call	 _==@8
  000f4	85 c0		 test	 eax, eax
  000f6	74 25		 je	 SHORT $L69588

; 290  :     {
; 291  :         *ppv = static_cast<IDirectMusicObject*>(this);

  000f8	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  000fc	74 0b		 je	 SHORT $L71823
  000fe	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00101	83 c0 08	 add	 eax, 8
  00104	89 45 f8	 mov	 DWORD PTR tv135[ebp], eax
  00107	eb 07		 jmp	 SHORT $L71824
$L71823:
  00109	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$L71824:
  00110	8b 4d 10	 mov	 ecx, DWORD PTR _ppv$[ebp]
  00113	8b 55 f8	 mov	 edx, DWORD PTR tv135[ebp]
  00116	89 11		 mov	 DWORD PTR [ecx], edx

; 292  :     }
; 293  : 	else if (iid == IID_IDirectMusicObjectP)

  00118	e9 9c 00 00 00	 jmp	 $L69581
$L69588:
  0011d	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicObjectP
  00122	8b 45 0c	 mov	 eax, DWORD PTR _iid$[ebp]
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 _==@8
  0012b	85 c0		 test	 eax, eax
  0012d	74 22		 je	 SHORT $L69591

; 294  : 	{
; 295  : 		*ppv = static_cast<IDirectMusicObjectP*>(this);

  0012f	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  00133	74 0b		 je	 SHORT $L71825
  00135	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00138	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0013b	89 4d f4	 mov	 DWORD PTR tv142[ebp], ecx
  0013e	eb 07		 jmp	 SHORT $L71826
$L71825:
  00140	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv142[ebp], 0
$L71826:
  00147	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  0014a	8b 45 f4	 mov	 eax, DWORD PTR tv142[ebp]
  0014d	89 02		 mov	 DWORD PTR [edx], eax

; 296  : 	}
; 297  : 	else if(iid == IID_IDispatch)

  0014f	eb 68		 jmp	 SHORT $L69581
$L69591:
  00151	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDispatch
  00156	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00159	51		 push	 ecx
  0015a	e8 00 00 00 00	 call	 _==@8
  0015f	85 c0		 test	 eax, eax
  00161	74 56		 je	 SHORT $L69581

; 298  : 	{
; 299  : 		// A helper scripting object implements IDispatch, which we expose via COM aggregation.
; 300  : 		if (!m_pUnkDispatch)

  00163	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00166	83 ba 78 03 00
	00 00		 cmp	 DWORD PTR [edx+888], 0
  0016d	75 1c		 jne	 SHORT $L69595

; 301  : 		{
; 302  : 			// Create the helper object
; 303  : 			DirectMusicCreateInstance(
; 304  : 				CLSID_AutDirectMusicSong,
; 305  : 				static_cast<IDirectMusicSong*>(this),
; 306  : 				IID_IUnknown,
; 307  : 				reinterpret_cast<void**>(&m_pUnkDispatch));

  0016f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00172	05 78 03 00 00	 add	 eax, 888		; 00000378H
  00177	50		 push	 eax
  00178	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IUnknown
  0017d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	51		 push	 ecx
  00181	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_AutDirectMusicSong
  00186	e8 00 00 00 00	 call	 _DirectMusicCreateInstance@16
$L69595:

; 308  : 		}
; 309  : 		if (m_pUnkDispatch)

  0018b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0018e	83 ba 78 03 00
	00 00		 cmp	 DWORD PTR [edx+888], 0
  00195	74 22		 je	 SHORT $L69581

; 310  : 		{
; 311  : 			return m_pUnkDispatch->QueryInterface(IID_IDispatch, ppv);

  00197	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  0019a	50		 push	 eax
  0019b	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDispatch
  001a0	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	8b 91 78 03 00
	00		 mov	 edx, DWORD PTR [ecx+888]
  001a9	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001ac	8b 88 78 03 00
	00		 mov	 ecx, DWORD PTR [eax+888]
  001b2	8b 12		 mov	 edx, DWORD PTR [edx]
  001b4	51		 push	 ecx
  001b5	ff 12		 call	 DWORD PTR [edx]
  001b7	eb 2c		 jmp	 SHORT $L69568
$L69581:

; 312  : 		}
; 313  : 	}
; 314  : 
; 315  : 	if (*ppv == NULL)

  001b9	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  001bc	83 38 00	 cmp	 DWORD PTR [eax], 0
  001bf	75 16		 jne	 SHORT $L69599

; 316  :     {
; 317  :         Trace(4,"Warning: Request to query unknown interface on Song object\n");

  001c1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@OFNHKHOC@Warning?3?5Request?5to?5query?5unknow@
  001c6	6a 04		 push	 4
  001c8	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  001cd	83 c4 08	 add	 esp, 8

; 318  :         return E_NOINTERFACE;

  001d0	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
  001d5	eb 0e		 jmp	 SHORT $L69568
$L69599:

; 319  :     }
; 320  : 
; 321  :     reinterpret_cast<IUnknown*>(this)->AddRef();

  001d7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001da	8b 11		 mov	 edx, DWORD PTR [ecx]
  001dc	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001df	50		 push	 eax
  001e0	ff 52 04	 call	 DWORD PTR [edx+4]

; 322  :     return S_OK;

  001e3	33 c0		 xor	 eax, eax
$L69568:

; 323  : }

  001e5	8b e5		 mov	 esp, ebp
  001e7	5d		 pop	 ebp
  001e8	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z ENDP	; CSong::QueryInterface
_TEXT	ENDS
EXTRN	__InterlockedIncrement@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?AddRef@CSong@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@CSong@@UAGKXZ PROC NEAR				; CSong::AddRef, COMDAT

; 327  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 328  :     return InterlockedIncrement(&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 48	 add	 eax, 72			; 00000048H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 329  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@CSong@@UAGKXZ ENDP				; CSong::AddRef
_TEXT	ENDS
PUBLIC	??_GCSong@@QAEPAXI@Z				; CSong::`scalar deleting destructor'
EXTRN	__InterlockedDecrement@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Release@CSong@@UAGKXZ
_TEXT	SEGMENT
tv73 = -12
$T71834 = -8
$T71833 = -4
_this$ = 8
?Release@CSong@@UAGKXZ PROC NEAR			; CSong::Release, COMDAT

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 333  :     if (!InterlockedDecrement(&m_cRef))

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 48	 add	 eax, 72			; 00000048H
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	85 c0		 test	 eax, eax
  00014	75 36		 jne	 SHORT $L69610

; 334  :     {
; 335  : 		m_cRef = 100; // artificial reference count to prevent reentrency due to COM aggregation

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	c7 41 48 64 00
	00 00		 mov	 DWORD PTR [ecx+72], 100	; 00000064H

; 336  :         delete this;

  00020	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00023	89 55 f8	 mov	 DWORD PTR $T71834[ebp], edx
  00026	8b 45 f8	 mov	 eax, DWORD PTR $T71834[ebp]
  00029	89 45 fc	 mov	 DWORD PTR $T71833[ebp], eax
  0002c	83 7d fc 00	 cmp	 DWORD PTR $T71833[ebp], 0
  00030	74 0f		 je	 SHORT $L71835
  00032	6a 01		 push	 1
  00034	8b 4d fc	 mov	 ecx, DWORD PTR $T71833[ebp]
  00037	e8 00 00 00 00	 call	 ??_GCSong@@QAEPAXI@Z
  0003c	89 45 f4	 mov	 DWORD PTR tv73[ebp], eax
  0003f	eb 07		 jmp	 SHORT $L71836
$L71835:
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L71836:

; 337  :         return 0;

  00048	33 c0		 xor	 eax, eax
  0004a	eb 06		 jmp	 SHORT $L69609
$L69610:

; 338  :     }
; 339  : 
; 340  :     return m_cRef;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
$L69609:

; 341  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?Release@CSong@@UAGKXZ ENDP				; CSong::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCSong@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCSong@@QAEPAXI@Z PROC NEAR				; CSong::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSong@@QAE@XZ	; CSong::~CSong
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69616
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69616:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCSong@@QAEPAXI@Z ENDP				; CSong::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?GetHead@?$TList@VComposingTrack@@@@QBEPAV?$TListItem@VComposingTrack@@@@XZ ; TList<ComposingTrack>::GetHead
PUBLIC	?AddHead@?$TList@VComposingTrack@@@@QAEXPAV?$TListItem@VComposingTrack@@@@@Z ; TList<ComposingTrack>::AddHead
PUBLIC	??_C@_0GH@FBELLCFF@Error?3?5Corrupt?5song?0?5one?5or?5more@ ; `string'
PUBLIC	??0?$TListItem@VComposingTrack@@@@QAE@XZ	; TListItem<ComposingTrack>::TListItem<ComposingTrack>
PUBLIC	?GetNext@?$TListItem@VComposingTrack@@@@QBEPAV1@XZ ; TListItem<ComposingTrack>::GetNext
PUBLIC	?SetNext@?$TListItem@VComposingTrack@@@@QAEXPAV1@@Z ; TListItem<ComposingTrack>::SetNext
PUBLIC	?GetItemValue@?$TListItem@VComposingTrack@@@@QAEAAVComposingTrack@@XZ ; TListItem<ComposingTrack>::GetItemValue
PUBLIC	?GetNext@CVirtualSegment@@QAEPAV1@XZ		; CVirtualSegment::GetNext
PUBLIC	?GetHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ ; CVirtualSegmentList::GetHead
PUBLIC	?GetTrackGroup@ComposingTrack@@QAEKXZ		; ComposingTrack::GetTrackGroup
PUBLIC	?GetTrackID@ComposingTrack@@QAE?AU_GUID@@XZ	; ComposingTrack::GetTrackID
PUBLIC	?GetPriority@ComposingTrack@@QAEKXZ		; ComposingTrack::GetPriority
PUBLIC	?SetPriority@ComposingTrack@@QAEXK@Z		; ComposingTrack::SetPriority
PUBLIC	?SetTrackGroup@ComposingTrack@@QAEXK@Z		; ComposingTrack::SetTrackGroup
PUBLIC	?SetTrackID@ComposingTrack@@QAEXAAU_GUID@@@Z	; ComposingTrack::SetTrackID
PUBLIC	?AddTrack@ComposingTrack@@QAEJPAVCVirtualSegment@@PAVCTrack@@@Z ; ComposingTrack::AddTrack
PUBLIC	?Compose@ComposingTrack@@QAEJPAUIDirectMusicSong@@@Z ; ComposingTrack::Compose
PUBLIC	??_C@_0DO@GAFGMFIO@Error?3?5Accessing?5object?5after?5it@ ; `string'
PUBLIC	??0?$TList@VComposingTrack@@@@QAE@XZ		; TList<ComposingTrack>::TList<ComposingTrack>
PUBLIC	??1?$TList@VComposingTrack@@@@QAE@XZ		; TList<ComposingTrack>::~TList<ComposingTrack>
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
;	COMDAT ??_C@_0DO@GAFGMFIO@Error?3?5Accessing?5object?5after?5it@
CONST	SEGMENT
??_C@_0DO@GAFGMFIO@Error?3?5Accessing?5object?5after?5it@ DB 'Error: Acce'
	DB	'ssing object after it has been garbage collected. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@FBELLCFF@Error?3?5Corrupt?5song?0?5one?5or?5more@
CONST	SEGMENT
??_C@_0GH@FBELLCFF@Error?3?5Corrupt?5song?0?5one?5or?5more@ DB 'Error: Co'
	DB	'rrupt song, one or more virtual segments do not resolve to re'
	DB	'al segments. Unable to compose.', 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Compose@CSong@@UAGJXZ
_TEXT	SEGMENT
tv159 = -92
$T71847 = -88
$T71844 = -84
$T71843 = -80
_pMaster$69767 = -64
_rMaster$69757 = -60
_pPrevious$69753 = -56
_rTrack$69751 = -52
_pMaster$69752 = -48
_pTrackItem$69745 = -44
_dwMaster$69740 = -40
_dwIntersection$69742 = -36
_rMaster$69737 = -32
_dwTrackGroup$69688 = -28
_pMaster$69689 = -24
_pTrack$69683 = -20
_pSegment$69682 = -16
_MasterTrackList$ = -12
_hr$ = -8
_pVirtualSegment$ = -4
_this$ = 8
?Compose@CSong@@UAGJXZ PROC NEAR			; CSong::Compose, COMDAT

; 344  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH

; 345  : 	CHECK_ZOMBIE(m_fZombie);

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	0f b6 88 7c 03
	00 00		 movzx	 ecx, BYTE PTR [eax+892]
  00010	85 c9		 test	 ecx, ecx
  00012	74 19		 je	 SHORT $L69620
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@GAFGMFIO@Error?3?5Accessing?5object?5after?5it@
  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00020	83 c4 08	 add	 esp, 8
  00023	b8 16 12 78 08	 mov	 eax, 142086678		; 08781216H
  00028	e9 d7 02 00 00	 jmp	 $L69619
$L69620:

; 346  : 
; 347  :     HRESULT hr = S_OK;

  0002d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 348  :     ENTER_CRITICAL_SECTION(&m_CriticalSection);

  00034	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00037	83 c2 24	 add	 edx, 36			; 00000024H
  0003a	52		 push	 edx
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 349  :     // Go through the seg ref list and create master composition tracks for each composing track.
; 350  :     TList<ComposingTrack> MasterTrackList;

  00041	8d 4d f4	 lea	 ecx, DWORD PTR _MasterTrackList$[ebp]
  00044	e8 00 00 00 00	 call	 ??0?$TList@VComposingTrack@@@@QAE@XZ ; TList<ComposingTrack>::TList<ComposingTrack>

; 351  :     CVirtualSegment* pVirtualSegment = m_VirtualSegmentList.GetHead();

  00049	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	83 c1 20	 add	 ecx, 32			; 00000020H
  0004f	e8 00 00 00 00	 call	 ?GetHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ ; CVirtualSegmentList::GetHead
  00054	89 45 fc	 mov	 DWORD PTR _pVirtualSegment$[ebp], eax

; 352  :     for (; pVirtualSegment; pVirtualSegment = pVirtualSegment->GetNext())

  00057	eb 0b		 jmp	 SHORT $L69676
$L69677:
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  0005c	e8 00 00 00 00	 call	 ?GetNext@CVirtualSegment@@QAEPAV1@XZ ; CVirtualSegment::GetNext
  00061	89 45 fc	 mov	 DWORD PTR _pVirtualSegment$[ebp], eax
$L69676:
  00064	83 7d fc 00	 cmp	 DWORD PTR _pVirtualSegment$[ebp], 0
  00068	0f 84 2d 02 00
	00		 je	 $L69678

; 353  :     {
; 354  :         if (!pVirtualSegment->m_pPlaySegment)

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  00071	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00075	75 1b		 jne	 SHORT $L69679

; 355  :         {
; 356  :             Trace(1,"Error: Corrupt song, one or more virtual segments do not resolve to real segments. Unable to compose.\n");

  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GH@FBELLCFF@Error?3?5Corrupt?5song?0?5one?5or?5more@
  0007c	6a 01		 push	 1
  0007e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00083	83 c4 08	 add	 esp, 8

; 357  :             hr = E_POINTER;

  00086	c7 45 f8 03 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467261 ; 80004003H

; 358  :             break;

  0008d	e9 09 02 00 00	 jmp	 $L69678
$L69679:

; 359  :         }
; 360  :         CSegment *pSegment = pVirtualSegment->m_pPlaySegment;

  00092	8b 4d fc	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  00095	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00098	89 55 f0	 mov	 DWORD PTR _pSegment$69682[ebp], edx

; 361  :         CTrack* pTrack = pSegment->m_TrackList.GetHead();

  0009b	8b 4d f0	 mov	 ecx, DWORD PTR _pSegment$69682[ebp]
  0009e	83 c1 44	 add	 ecx, 68			; 00000044H
  000a1	e8 00 00 00 00	 call	 ?GetHead@CTrackList@@QAEPAVCTrack@@XZ ; CTrackList::GetHead
  000a6	89 45 ec	 mov	 DWORD PTR _pTrack$69683[ebp], eax

; 362  :         for (; pTrack; pTrack = pTrack->GetNext())

  000a9	eb 0b		 jmp	 SHORT $L69684
$L69685:
  000ab	8b 4d ec	 mov	 ecx, DWORD PTR _pTrack$69683[ebp]
  000ae	e8 00 00 00 00	 call	 ?GetNext@CTrack@@QAEPAV1@XZ ; CTrack::GetNext
  000b3	89 45 ec	 mov	 DWORD PTR _pTrack$69683[ebp], eax
$L69684:
  000b6	83 7d ec 00	 cmp	 DWORD PTR _pTrack$69683[ebp], 0
  000ba	0f 84 ce 01 00
	00		 je	 $L69686

; 363  :         {
; 364  :             if (pTrack->m_dwFlags & DMUS_TRACKCONFIG_COMPOSING)

  000c0	8b 45 ec	 mov	 eax, DWORD PTR _pTrack$69683[ebp]
  000c3	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000c6	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  000cc	85 c9		 test	 ecx, ecx
  000ce	0f 84 ad 01 00
	00		 je	 $L69687

; 365  :             {
; 366  :                 DWORD dwTrackGroup = pTrack->m_dwGroupBits;

  000d4	8b 55 ec	 mov	 edx, DWORD PTR _pTrack$69683[ebp]
  000d7	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000da	89 45 e4	 mov	 DWORD PTR _dwTrackGroup$69688[ebp], eax

; 367  :                 // filter out any group bits already covered by other master tracks of same type
; 368  :                 TListItem<ComposingTrack>* pMaster = MasterTrackList.GetHead();

  000dd	8d 4d f4	 lea	 ecx, DWORD PTR _MasterTrackList$[ebp]
  000e0	e8 00 00 00 00	 call	 ?GetHead@?$TList@VComposingTrack@@@@QBEPAV?$TListItem@VComposingTrack@@@@XZ ; TList<ComposingTrack>::GetHead
  000e5	89 45 e8	 mov	 DWORD PTR _pMaster$69689[ebp], eax

; 369  :                 for (; pMaster; pMaster = pMaster->GetNext())

  000e8	eb 0b		 jmp	 SHORT $L69734
$L69735:
  000ea	8b 4d e8	 mov	 ecx, DWORD PTR _pMaster$69689[ebp]
  000ed	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@VComposingTrack@@@@QBEPAV1@XZ ; TListItem<ComposingTrack>::GetNext
  000f2	89 45 e8	 mov	 DWORD PTR _pMaster$69689[ebp], eax
$L69734:
  000f5	83 7d e8 00	 cmp	 DWORD PTR _pMaster$69689[ebp], 0
  000f9	74 78		 je	 SHORT $L69736

; 370  :                 {
; 371  :                     ComposingTrack& rMaster = pMaster->GetItemValue();

  000fb	8b 4d e8	 mov	 ecx, DWORD PTR _pMaster$69689[ebp]
  000fe	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@VComposingTrack@@@@QAEAAVComposingTrack@@XZ ; TListItem<ComposingTrack>::GetItemValue
  00103	89 45 e0	 mov	 DWORD PTR _rMaster$69737[ebp], eax

; 372  :                     if (rMaster.GetTrackID() == pTrack->m_guidClassID)

  00106	8b 4d ec	 mov	 ecx, DWORD PTR _pTrack$69683[ebp]
  00109	83 c1 04	 add	 ecx, 4
  0010c	51		 push	 ecx
  0010d	8d 55 b0	 lea	 edx, DWORD PTR $T71843[ebp]
  00110	52		 push	 edx
  00111	8b 4d e0	 mov	 ecx, DWORD PTR _rMaster$69737[ebp]
  00114	e8 00 00 00 00	 call	 ?GetTrackID@ComposingTrack@@QAE?AU_GUID@@XZ ; ComposingTrack::GetTrackID
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 _==@8
  0011f	85 c0		 test	 eax, eax
  00121	74 4b		 je	 SHORT $L69739

; 373  :                     {
; 374  :                         DWORD dwMaster = rMaster.GetTrackGroup();

  00123	8b 4d e0	 mov	 ecx, DWORD PTR _rMaster$69737[ebp]
  00126	e8 00 00 00 00	 call	 ?GetTrackGroup@ComposingTrack@@QAEKXZ ; ComposingTrack::GetTrackGroup
  0012b	89 45 d8	 mov	 DWORD PTR _dwMaster$69740[ebp], eax

; 375  :                         if (dwMaster == dwTrackGroup)

  0012e	8b 45 d8	 mov	 eax, DWORD PTR _dwMaster$69740[ebp]
  00131	3b 45 e4	 cmp	 eax, DWORD PTR _dwTrackGroup$69688[ebp]
  00134	75 1c		 jne	 SHORT $L69741

; 376  :                         {
; 377  :                             // Exact match: put the track here.
; 378  :                             hr = rMaster.AddTrack(pVirtualSegment, pTrack);

  00136	8b 4d ec	 mov	 ecx, DWORD PTR _pTrack$69683[ebp]
  00139	51		 push	 ecx
  0013a	8b 55 fc	 mov	 edx, DWORD PTR _pVirtualSegment$[ebp]
  0013d	52		 push	 edx
  0013e	8b 4d e0	 mov	 ecx, DWORD PTR _rMaster$69737[ebp]
  00141	e8 00 00 00 00	 call	 ?AddTrack@ComposingTrack@@QAEJPAVCVirtualSegment@@PAVCTrack@@@Z ; ComposingTrack::AddTrack
  00146	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 379  :                             dwTrackGroup = 0;

  00149	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dwTrackGroup$69688[ebp], 0

; 380  :                             break;

  00150	eb 21		 jmp	 SHORT $L69736
$L69741:

; 381  :                         }
; 382  :                         DWORD dwIntersection = dwMaster & dwTrackGroup;

  00152	8b 45 d8	 mov	 eax, DWORD PTR _dwMaster$69740[ebp]
  00155	23 45 e4	 and	 eax, DWORD PTR _dwTrackGroup$69688[ebp]
  00158	89 45 dc	 mov	 DWORD PTR _dwIntersection$69742[ebp], eax

; 383  :                         if (dwIntersection)

  0015b	83 7d dc 00	 cmp	 DWORD PTR _dwIntersection$69742[ebp], 0
  0015f	74 0d		 je	 SHORT $L69739

; 384  :                         {
; 385  :                             dwTrackGroup |= ~dwIntersection;

  00161	8b 4d dc	 mov	 ecx, DWORD PTR _dwIntersection$69742[ebp]
  00164	f7 d1		 not	 ecx
  00166	8b 55 e4	 mov	 edx, DWORD PTR _dwTrackGroup$69688[ebp]
  00169	0b d1		 or	 edx, ecx
  0016b	89 55 e4	 mov	 DWORD PTR _dwTrackGroup$69688[ebp], edx
$L69739:

; 386  :                         }
; 387  :                     }
; 388  :                 }

  0016e	e9 77 ff ff ff	 jmp	 $L69735
$L69736:

; 389  :                 // If we've still got any group bits left, add a new composing track
; 390  :                 if (dwTrackGroup)

  00173	83 7d e4 00	 cmp	 DWORD PTR _dwTrackGroup$69688[ebp], 0
  00177	0f 84 04 01 00
	00		 je	 $L69687

; 391  :                 {
; 392  :                     TListItem<ComposingTrack>* pTrackItem = new TListItem<ComposingTrack>;

  0017d	6a 20		 push	 32			; 00000020H
  0017f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00184	83 c4 04	 add	 esp, 4
  00187	89 45 ac	 mov	 DWORD PTR $T71844[ebp], eax
  0018a	83 7d ac 00	 cmp	 DWORD PTR $T71844[ebp], 0
  0018e	74 0d		 je	 SHORT $L71845
  00190	8b 4d ac	 mov	 ecx, DWORD PTR $T71844[ebp]
  00193	e8 00 00 00 00	 call	 ??0?$TListItem@VComposingTrack@@@@QAE@XZ ; TListItem<ComposingTrack>::TListItem<ComposingTrack>
  00198	89 45 a4	 mov	 DWORD PTR tv159[ebp], eax
  0019b	eb 07		 jmp	 SHORT $L71846
$L71845:
  0019d	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$L71846:
  001a4	8b 45 a4	 mov	 eax, DWORD PTR tv159[ebp]
  001a7	89 45 d4	 mov	 DWORD PTR _pTrackItem$69745[ebp], eax

; 393  :                     if (!pTrackItem)

  001aa	83 7d d4 00	 cmp	 DWORD PTR _pTrackItem$69745[ebp], 0
  001ae	75 0c		 jne	 SHORT $L69748

; 394  :                     {
; 395  :                         hr = E_OUTOFMEMORY;

  001b0	c7 45 f8 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 396  :                     }
; 397  :                     else

  001b7	e9 c5 00 00 00	 jmp	 $L69687
$L69748:

; 398  :                     {
; 399  :                         ComposingTrack& rTrack = pTrackItem->GetItemValue();

  001bc	8b 4d d4	 mov	 ecx, DWORD PTR _pTrackItem$69745[ebp]
  001bf	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@VComposingTrack@@@@QAEAAVComposingTrack@@XZ ; TListItem<ComposingTrack>::GetItemValue
  001c4	89 45 cc	 mov	 DWORD PTR _rTrack$69751[ebp], eax

; 400  :                         rTrack.SetTrackGroup(dwTrackGroup);

  001c7	8b 4d e4	 mov	 ecx, DWORD PTR _dwTrackGroup$69688[ebp]
  001ca	51		 push	 ecx
  001cb	8b 4d cc	 mov	 ecx, DWORD PTR _rTrack$69751[ebp]
  001ce	e8 00 00 00 00	 call	 ?SetTrackGroup@ComposingTrack@@QAEXK@Z ; ComposingTrack::SetTrackGroup

; 401  :                         rTrack.SetTrackID(pTrack->m_guidClassID);

  001d3	8b 55 ec	 mov	 edx, DWORD PTR _pTrack$69683[ebp]
  001d6	83 c2 04	 add	 edx, 4
  001d9	52		 push	 edx
  001da	8b 4d cc	 mov	 ecx, DWORD PTR _rTrack$69751[ebp]
  001dd	e8 00 00 00 00	 call	 ?SetTrackID@ComposingTrack@@QAEXAAU_GUID@@@Z ; ComposingTrack::SetTrackID

; 402  :                         rTrack.SetPriority(pTrack->m_dwPriority);

  001e2	8b 45 ec	 mov	 eax, DWORD PTR _pTrack$69683[ebp]
  001e5	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001e8	51		 push	 ecx
  001e9	8b 4d cc	 mov	 ecx, DWORD PTR _rTrack$69751[ebp]
  001ec	e8 00 00 00 00	 call	 ?SetPriority@ComposingTrack@@QAEXK@Z ; ComposingTrack::SetPriority

; 403  :                         // add tracks in priority order (higher priority first)
; 404  :                         TListItem<ComposingTrack>* pMaster = MasterTrackList.GetHead();

  001f1	8d 4d f4	 lea	 ecx, DWORD PTR _MasterTrackList$[ebp]
  001f4	e8 00 00 00 00	 call	 ?GetHead@?$TList@VComposingTrack@@@@QBEPAV?$TListItem@VComposingTrack@@@@XZ ; TList<ComposingTrack>::GetHead
  001f9	89 45 d0	 mov	 DWORD PTR _pMaster$69752[ebp], eax

; 405  :                         TListItem<ComposingTrack>* pPrevious = NULL;

  001fc	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _pPrevious$69753[ebp], 0

; 406  :                         for (; pMaster; pMaster = pMaster->GetNext())

  00203	eb 0b		 jmp	 SHORT $L69754
$L69755:
  00205	8b 4d d0	 mov	 ecx, DWORD PTR _pMaster$69752[ebp]
  00208	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@VComposingTrack@@@@QBEPAV1@XZ ; TListItem<ComposingTrack>::GetNext
  0020d	89 45 d0	 mov	 DWORD PTR _pMaster$69752[ebp], eax
$L69754:
  00210	83 7d d0 00	 cmp	 DWORD PTR _pMaster$69752[ebp], 0
  00214	74 25		 je	 SHORT $L69756

; 407  :                         {
; 408  :                             ComposingTrack& rMaster = pMaster->GetItemValue();

  00216	8b 4d d0	 mov	 ecx, DWORD PTR _pMaster$69752[ebp]
  00219	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@VComposingTrack@@@@QAEAAVComposingTrack@@XZ ; TListItem<ComposingTrack>::GetItemValue
  0021e	89 45 c4	 mov	 DWORD PTR _rMaster$69757[ebp], eax

; 409  :                             if (pTrack->m_dwPriority > rMaster.GetPriority()) break;

  00221	8b 4d c4	 mov	 ecx, DWORD PTR _rMaster$69757[ebp]
  00224	e8 00 00 00 00	 call	 ?GetPriority@ComposingTrack@@QAEKXZ ; ComposingTrack::GetPriority
  00229	8b 55 ec	 mov	 edx, DWORD PTR _pTrack$69683[ebp]
  0022c	39 42 2c	 cmp	 DWORD PTR [edx+44], eax
  0022f	76 02		 jbe	 SHORT $L69758
  00231	eb 08		 jmp	 SHORT $L69756
$L69758:

; 410  :                             pPrevious = pMaster;

  00233	8b 45 d0	 mov	 eax, DWORD PTR _pMaster$69752[ebp]
  00236	89 45 c8	 mov	 DWORD PTR _pPrevious$69753[ebp], eax

; 411  :                         }

  00239	eb ca		 jmp	 SHORT $L69755
$L69756:

; 412  :                         if (!pPrevious) // this has higher priority than anything in the list

  0023b	83 7d c8 00	 cmp	 DWORD PTR _pPrevious$69753[ebp], 0
  0023f	75 0e		 jne	 SHORT $L69759

; 413  :                         {
; 414  :                             MasterTrackList.AddHead(pTrackItem);

  00241	8b 4d d4	 mov	 ecx, DWORD PTR _pTrackItem$69745[ebp]
  00244	51		 push	 ecx
  00245	8d 4d f4	 lea	 ecx, DWORD PTR _MasterTrackList$[ebp]
  00248	e8 00 00 00 00	 call	 ?AddHead@?$TList@VComposingTrack@@@@QAEXPAV?$TListItem@VComposingTrack@@@@@Z ; TList<ComposingTrack>::AddHead

; 415  :                         }
; 416  :                         else // lower priority than pPrevious, higher than pMaster

  0024d	eb 18		 jmp	 SHORT $L69760
$L69759:

; 417  :                         {
; 418  :                             pTrackItem->SetNext(pMaster);

  0024f	8b 55 d0	 mov	 edx, DWORD PTR _pMaster$69752[ebp]
  00252	52		 push	 edx
  00253	8b 4d d4	 mov	 ecx, DWORD PTR _pTrackItem$69745[ebp]
  00256	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@VComposingTrack@@@@QAEXPAV1@@Z ; TListItem<ComposingTrack>::SetNext

; 419  :                             pPrevious->SetNext(pTrackItem);

  0025b	8b 45 d4	 mov	 eax, DWORD PTR _pTrackItem$69745[ebp]
  0025e	50		 push	 eax
  0025f	8b 4d c8	 mov	 ecx, DWORD PTR _pPrevious$69753[ebp]
  00262	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@VComposingTrack@@@@QAEXPAV1@@Z ; TListItem<ComposingTrack>::SetNext
$L69760:

; 420  :                         }
; 421  :                         hr = pTrackItem->GetItemValue().AddTrack(pVirtualSegment, pTrack);

  00267	8b 4d ec	 mov	 ecx, DWORD PTR _pTrack$69683[ebp]
  0026a	51		 push	 ecx
  0026b	8b 55 fc	 mov	 edx, DWORD PTR _pVirtualSegment$[ebp]
  0026e	52		 push	 edx
  0026f	8b 4d d4	 mov	 ecx, DWORD PTR _pTrackItem$69745[ebp]
  00272	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@VComposingTrack@@@@QAEAAVComposingTrack@@XZ ; TListItem<ComposingTrack>::GetItemValue
  00277	8b c8		 mov	 ecx, eax
  00279	e8 00 00 00 00	 call	 ?AddTrack@ComposingTrack@@QAEJPAVCVirtualSegment@@PAVCTrack@@@Z ; ComposingTrack::AddTrack
  0027e	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L69687:

; 422  :                     }
; 423  :                 }
; 424  :             }
; 425  :             if (FAILED(hr)) break;

  00281	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00285	7d 02		 jge	 SHORT $L69762
  00287	eb 05		 jmp	 SHORT $L69686
$L69762:

; 426  :         }

  00289	e9 1d fe ff ff	 jmp	 $L69685
$L69686:

; 427  :         if (FAILED(hr)) break;

  0028e	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00292	7d 02		 jge	 SHORT $L69764
  00294	eb 05		 jmp	 SHORT $L69678
$L69764:

; 428  :     }

  00296	e9 be fd ff ff	 jmp	 $L69677
$L69678:

; 429  :     // Call compose on each master composition track
; 430  :     if (SUCCEEDED(hr))

  0029b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0029f	7c 45		 jl	 SHORT $L69766

; 431  :     {
; 432  :         TListItem<ComposingTrack>* pMaster = MasterTrackList.GetHead();

  002a1	8d 4d f4	 lea	 ecx, DWORD PTR _MasterTrackList$[ebp]
  002a4	e8 00 00 00 00	 call	 ?GetHead@?$TList@VComposingTrack@@@@QBEPAV?$TListItem@VComposingTrack@@@@XZ ; TList<ComposingTrack>::GetHead
  002a9	89 45 c0	 mov	 DWORD PTR _pMaster$69767[ebp], eax

; 433  :         if (pMaster)

  002ac	83 7d c0 00	 cmp	 DWORD PTR _pMaster$69767[ebp], 0
  002b0	74 2d		 je	 SHORT $L69768

; 434  :         {
; 435  :             for (; pMaster; pMaster = pMaster->GetNext())

  002b2	eb 0b		 jmp	 SHORT $L69769
$L69770:
  002b4	8b 4d c0	 mov	 ecx, DWORD PTR _pMaster$69767[ebp]
  002b7	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@VComposingTrack@@@@QBEPAV1@XZ ; TListItem<ComposingTrack>::GetNext
  002bc	89 45 c0	 mov	 DWORD PTR _pMaster$69767[ebp], eax
$L69769:
  002bf	83 7d c0 00	 cmp	 DWORD PTR _pMaster$69767[ebp], 0
  002c3	74 18		 je	 SHORT $L69771

; 436  :             {
; 437  :                 hr = pMaster->GetItemValue().Compose(this);

  002c5	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  002c8	50		 push	 eax
  002c9	8b 4d c0	 mov	 ecx, DWORD PTR _pMaster$69767[ebp]
  002cc	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@VComposingTrack@@@@QAEAAVComposingTrack@@XZ ; TListItem<ComposingTrack>::GetItemValue
  002d1	8b c8		 mov	 ecx, eax
  002d3	e8 00 00 00 00	 call	 ?Compose@ComposingTrack@@QAEJPAUIDirectMusicSong@@@Z ; ComposingTrack::Compose
  002d8	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 438  :             }

  002db	eb d7		 jmp	 SHORT $L69770
$L69771:

; 439  :         }
; 440  :         else hr = S_FALSE;

  002dd	eb 07		 jmp	 SHORT $L69766
$L69768:
  002df	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 1
$L69766:

; 441  :     }
; 442  :     LEAVE_CRITICAL_SECTION(&m_CriticalSection);

  002e6	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  002e9	83 c1 24	 add	 ecx, 36			; 00000024H
  002ec	51		 push	 ecx
  002ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 443  :     return hr;

  002f3	8b 55 f8	 mov	 edx, DWORD PTR _hr$[ebp]
  002f6	89 55 a8	 mov	 DWORD PTR $T71847[ebp], edx
  002f9	8d 4d f4	 lea	 ecx, DWORD PTR _MasterTrackList$[ebp]
  002fc	e8 00 00 00 00	 call	 ??1?$TList@VComposingTrack@@@@QAE@XZ ; TList<ComposingTrack>::~TList<ComposingTrack>
  00301	8b 45 a8	 mov	 eax, DWORD PTR $T71847[ebp]
$L69619:

; 444  : }

  00304	8b e5		 mov	 esp, ebp
  00306	5d		 pop	 ebp
  00307	c2 04 00	 ret	 4
?Compose@CSong@@UAGJXZ ENDP				; CSong::Compose
_TEXT	ENDS
PUBLIC	??_C@_0CA@MBMPAIOH@?$CFs?3?5Invalid?5pointer?5pAudioPath?6?$AA@ ; `string'
PUBLIC	??_C@_0DB@CBBEFLOE@Warning?3?5This?5API?5does?5not?5do?5an@ ; `string'
EXTRN	_IsBadCodePtr@4:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??Download@CSong@@UAGJPAUIUnknown@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Download@CSong@@UAGJPAUIUnknown@@@Z@4QBDB DB 'I'
	DB	'DirectMusicSong::Download', 00H		; `CSong::Download'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CA@MBMPAIOH@?$CFs?3?5Invalid?5pointer?5pAudioPath?6?$AA@
CONST	SEGMENT
??_C@_0CA@MBMPAIOH@?$CFs?3?5Invalid?5pointer?5pAudioPath?6?$AA@ DB '%s: I'
	DB	'nvalid pointer pAudioPath', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@CBBEFLOE@Warning?3?5This?5API?5does?5not?5do?5an@
CONST	SEGMENT
??_C@_0DB@CBBEFLOE@Warning?3?5This?5API?5does?5not?5do?5an@ DB 'Warning: '
	DB	'This API does not do anything on xbox.', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Download@CSong@@UAGJPAUIUnknown@@@Z
_TEXT	SEGMENT
_dwSuccess$ = -12
_hr$ = -8
_hrFail$ = -4
_this$ = 8
_pAudioPath$ = 12
?Download@CSong@@UAGJPAUIUnknown@@@Z PROC NEAR		; CSong::Download, COMDAT

; 448  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 449  :     V_INAME(IDirectMusicSong::Download);
; 450  :     V_INTERFACE(pAudioPath);

  00006	6a 04		 push	 4
  00008	8b 45 0c	 mov	 eax, DWORD PTR _pAudioPath$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69782
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Download@CSong@@UAGJPAUIUnknown@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@MBMPAIOH@?$CFs?3?5Invalid?5pointer?5pAudioPath?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69782:
  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pAudioPath$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003b	85 c0		 test	 eax, eax
  0003d	74 19		 je	 SHORT $L69786
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Download@CSong@@UAGJPAUIUnknown@@@Z@4QBDB
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@MBMPAIOH@?$CFs?3?5Invalid?5pointer?5pAudioPath?6?$AA@
  00049	6a ff		 push	 -1
  0004b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	e8 00 00 00 00	 call	 _DebugBreak@0
$L69786:
  00058	8b 45 0c	 mov	 eax, DWORD PTR _pAudioPath$[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00065	85 c0		 test	 eax, eax
  00067	74 19		 je	 SHORT $L69788
  00069	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Download@CSong@@UAGJPAUIUnknown@@@Z@4QBDB
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@MBMPAIOH@?$CFs?3?5Invalid?5pointer?5pAudioPath?6?$AA@
  00073	6a ff		 push	 -1
  00075	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	e8 00 00 00 00	 call	 _DebugBreak@0
$L69788:

; 451  : 
; 452  : 	CHECK_ZOMBIE(m_fZombie);

  00082	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00085	0f b6 88 7c 03
	00 00		 movzx	 ecx, BYTE PTR [eax+892]
  0008c	85 c9		 test	 ecx, ecx
  0008e	74 16		 je	 SHORT $L69789
  00090	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@GAFGMFIO@Error?3?5Accessing?5object?5after?5it@
  00095	6a 00		 push	 0
  00097	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0009c	83 c4 08	 add	 esp, 8
  0009f	b8 16 12 78 08	 mov	 eax, 142086678		; 08781216H
  000a4	eb 27		 jmp	 SHORT $L69778
$L69789:

; 453  : 
; 454  :     DWORD dwSuccess = 0;

  000a6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwSuccess$[ebp], 0

; 455  :     HRESULT hr = S_OK;

  000ad	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 456  :     HRESULT hrFail = S_OK;

  000b4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hrFail$[ebp], 0

; 457  : 
; 458  :     Trace(1,"Warning: This API does not do anything on xbox.\n");

  000bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@CBBEFLOE@Warning?3?5This?5API?5does?5not?5do?5an@
  000c0	6a 01		 push	 1
  000c2	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000c7	83 c4 08	 add	 esp, 8

; 459  : 
; 460  : #ifdef DXAPI
; 461  : 
; 462  :     ENTER_CRITICAL_SECTION(&m_CriticalSection);
; 463  :     CSegment *pSegment = m_PlayList.GetHead();
; 464  :     for (;pSegment;pSegment = pSegment->GetNext())
; 465  :     {
; 466  :         if (SUCCEEDED(hr = pSegment->Download(pAudioPath)))
; 467  :         {
; 468  :             // count partial successes, so that S_FALSE will be returned if we have, e.g.,
; 469  :             // one partial success followed by one failure
; 470  :             dwSuccess++;
; 471  :         }
; 472  :         if (hr != S_OK) 
; 473  :         {
; 474  :             // keep track of partial successes so that they always percolate up
; 475  :             hrFail = hr;
; 476  :         }
; 477  :     }
; 478  :     LEAVE_CRITICAL_SECTION(&m_CriticalSection);
; 479  :     if (hrFail != S_OK && dwSuccess)
; 480  :     {
; 481  :         Trace(1,"Warning: Only %ld of the total %ld segments successfully downloaded.\n",
; 482  :             dwSuccess,m_PlayList.GetCount());
; 483  :         hr = S_FALSE;
; 484  :     }
; 485  : #endif //DXAPI
; 486  :     return hr;

  000ca	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L69778:

; 487  : }

  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 08 00	 ret	 8
?Download@CSong@@UAGJPAUIUnknown@@@Z ENDP		; CSong::Download
_TEXT	ENDS
PUBLIC	??_C@_0EE@EDHKKHFP@Warning?3?5Only?5?$CFld?5of?5the?5total?5?$CF@ ; `string'
PUBLIC	?GetHead@CSegmentList@@QAEPAVCSegment@@XZ	; CSegmentList::GetHead
PUBLIC	?GetCount@AList@@QBEJXZ				; AList::GetCount
PUBLIC	?GetNext@CSegment@@QAEPAV1@XZ			; CSegment::GetNext
;	COMDAT ?__szValidateInterfaceName@?1??Unload@CSong@@UAGJPAUIUnknown@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Unload@CSong@@UAGJPAUIUnknown@@@Z@4QBDB DB 'I'
	DB	'DirectMusicSong::Unload', 00H		; `CSong::Unload'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0EE@EDHKKHFP@Warning?3?5Only?5?$CFld?5of?5the?5total?5?$CF@
CONST	SEGMENT
??_C@_0EE@EDHKKHFP@Warning?3?5Only?5?$CFld?5of?5the?5total?5?$CF@ DB 'War'
	DB	'ning: Only %ld of the total %ld segments successfully unloade'
	DB	'd.', 0aH, 00H				; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Unload@CSong@@UAGJPAUIUnknown@@@Z
_TEXT	SEGMENT
_dwSuccess$ = -16
_hr$ = -12
_hrFail$ = -8
_pSegment$ = -4
_this$ = 8
_pAudioPath$ = 12
?Unload@CSong@@UAGJPAUIUnknown@@@Z PROC NEAR		; CSong::Unload, COMDAT

; 491  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 492  :     V_INAME(IDirectMusicSong::Unload);
; 493  :     V_INTERFACE(pAudioPath);

  00006	6a 04		 push	 4
  00008	8b 45 0c	 mov	 eax, DWORD PTR _pAudioPath$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69807
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Unload@CSong@@UAGJPAUIUnknown@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@MBMPAIOH@?$CFs?3?5Invalid?5pointer?5pAudioPath?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69807:
  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pAudioPath$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003b	85 c0		 test	 eax, eax
  0003d	74 19		 je	 SHORT $L69810
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Unload@CSong@@UAGJPAUIUnknown@@@Z@4QBDB
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@MBMPAIOH@?$CFs?3?5Invalid?5pointer?5pAudioPath?6?$AA@
  00049	6a ff		 push	 -1
  0004b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	e8 00 00 00 00	 call	 _DebugBreak@0
$L69810:
  00058	8b 45 0c	 mov	 eax, DWORD PTR _pAudioPath$[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00065	85 c0		 test	 eax, eax
  00067	74 19		 je	 SHORT $L69812
  00069	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Unload@CSong@@UAGJPAUIUnknown@@@Z@4QBDB
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@MBMPAIOH@?$CFs?3?5Invalid?5pointer?5pAudioPath?6?$AA@
  00073	6a ff		 push	 -1
  00075	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	e8 00 00 00 00	 call	 _DebugBreak@0
$L69812:

; 494  : 
; 495  : 	CHECK_ZOMBIE(m_fZombie);

  00082	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00085	0f b6 88 7c 03
	00 00		 movzx	 ecx, BYTE PTR [eax+892]
  0008c	85 c9		 test	 ecx, ecx
  0008e	74 19		 je	 SHORT $L69813
  00090	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@GAFGMFIO@Error?3?5Accessing?5object?5after?5it@
  00095	6a 00		 push	 0
  00097	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0009c	83 c4 08	 add	 esp, 8
  0009f	b8 16 12 78 08	 mov	 eax, 142086678		; 08781216H
  000a4	e9 b1 00 00 00	 jmp	 $L69803
$L69813:

; 496  : 
; 497  :     DWORD dwSuccess = 0;

  000a9	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwSuccess$[ebp], 0

; 498  :     HRESULT hr = S_OK;

  000b0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 499  :     HRESULT hrFail = S_OK;

  000b7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hrFail$[ebp], 0

; 500  :     ENTER_CRITICAL_SECTION(&m_CriticalSection);

  000be	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000c1	83 c2 24	 add	 edx, 36			; 00000024H
  000c4	52		 push	 edx
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 501  :     CSegment *pSegment = m_PlayList.GetHead();

  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	83 c1 1c	 add	 ecx, 28			; 0000001cH
  000d1	e8 00 00 00 00	 call	 ?GetHead@CSegmentList@@QAEPAVCSegment@@XZ ; CSegmentList::GetHead
  000d6	89 45 fc	 mov	 DWORD PTR _pSegment$[ebp], eax

; 502  :     for (;pSegment;pSegment = pSegment->GetNext())

  000d9	eb 0b		 jmp	 SHORT $L69824
$L69825:
  000db	8b 4d fc	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  000de	e8 00 00 00 00	 call	 ?GetNext@CSegment@@QAEPAV1@XZ ; CSegment::GetNext
  000e3	89 45 fc	 mov	 DWORD PTR _pSegment$[ebp], eax
$L69824:
  000e6	83 7d fc 00	 cmp	 DWORD PTR _pSegment$[ebp], 0
  000ea	74 2c		 je	 SHORT $L69826

; 503  :     {
; 504  :         if (SUCCEEDED(hr = pSegment->Unload(pAudioPath)))

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _pAudioPath$[ebp]
  000ef	50		 push	 eax
  000f0	8b 4d fc	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  000f3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f5	8b 45 fc	 mov	 eax, DWORD PTR _pSegment$[ebp]
  000f8	50		 push	 eax
  000f9	ff 52 18	 call	 DWORD PTR [edx+24]
  000fc	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
  000ff	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00103	7c 0b		 jl	 SHORT $L69828

; 505  :         {
; 506  :             dwSuccess++;

  00105	8b 4d f0	 mov	 ecx, DWORD PTR _dwSuccess$[ebp]
  00108	83 c1 01	 add	 ecx, 1
  0010b	89 4d f0	 mov	 DWORD PTR _dwSuccess$[ebp], ecx

; 507  :         }
; 508  :         else

  0010e	eb 06		 jmp	 SHORT $L69829
$L69828:

; 509  :         {
; 510  :             hrFail = hr;

  00110	8b 55 f4	 mov	 edx, DWORD PTR _hr$[ebp]
  00113	89 55 f8	 mov	 DWORD PTR _hrFail$[ebp], edx
$L69829:

; 511  :         }
; 512  :     }

  00116	eb c3		 jmp	 SHORT $L69825
$L69826:

; 513  :     LEAVE_CRITICAL_SECTION(&m_CriticalSection);

  00118	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0011b	83 c0 24	 add	 eax, 36			; 00000024H
  0011e	50		 push	 eax
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 514  :     if (FAILED(hrFail) && dwSuccess)

  00125	83 7d f8 00	 cmp	 DWORD PTR _hrFail$[ebp], 0
  00129	7d 2c		 jge	 SHORT $L69831
  0012b	83 7d f0 00	 cmp	 DWORD PTR _dwSuccess$[ebp], 0
  0012f	74 26		 je	 SHORT $L69831

; 515  :     {
; 516  :         Trace(1,"Warning: Only %ld of the total %ld segments successfully unloaded.\n",
; 517  :             dwSuccess,m_PlayList.GetCount());

  00131	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00137	e8 00 00 00 00	 call	 ?GetCount@AList@@QBEJXZ	; AList::GetCount
  0013c	50		 push	 eax
  0013d	8b 4d f0	 mov	 ecx, DWORD PTR _dwSuccess$[ebp]
  00140	51		 push	 ecx
  00141	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@EDHKKHFP@Warning?3?5Only?5?$CFld?5of?5the?5total?5?$CF@
  00146	6a 01		 push	 1
  00148	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0014d	83 c4 10	 add	 esp, 16			; 00000010H

; 518  :         hr = S_FALSE;

  00150	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 1
$L69831:

; 519  :     }
; 520  :     return hr;

  00157	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]
$L69803:

; 521  : }

  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c2 08 00	 ret	 8
?Unload@CSong@@UAGJPAUIUnknown@@@Z ENDP			; CSong::Unload
_TEXT	ENDS
PUBLIC	??_C@_0CH@BMJBMIKG@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@ ; `string'
PUBLIC	??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??GetParam@CSong@@UAGJABU_GUID@@KKJPAJPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetParam@CSong@@UAGJABU_GUID@@KKJPAJPAX@Z@4QBDB DB 'I'
	DB	'DirectMusiCSong::GetParam', 00H		; `CSong::GetParam'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CH@BMJBMIKG@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
CONST	SEGMENT
??_C@_0CH@BMJBMIKG@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@ DB '%'
	DB	's: Invalid pointer (void*)&rguidType', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@
CONST	SEGMENT
??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@ DB '%s: Inval'
	DB	'id pointer pmtNext', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetParam@CSong@@UAGJABU_GUID@@KKJPAJPAX@Z
_TEXT	SEGMENT
_hr$ = -8
_pVirtualSegment$ = -4
_this$ = 8
_rguidType$ = 12
_dwGroupBits$ = 16
_dwIndex$ = 20
_mtTime$ = 24
_pmtNext$ = 28
_pParam$ = 32
?GetParam@CSong@@UAGJABU_GUID@@KKJPAJPAX@Z PROC NEAR	; CSong::GetParam, COMDAT

; 529  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 530  :     V_INAME(IDirectMusiCSong::GetParam);
; 531  :     V_REFGUID(rguidType);

  00006	6a 10		 push	 16			; 00000010H
  00008	8b 45 0c	 mov	 eax, DWORD PTR _rguidType$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69847
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetParam@CSong@@UAGJABU_GUID@@KKJPAJPAX@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@BMJBMIKG@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69847:

; 532  :     V_PTR_WRITE_OPT(pmtNext,MUSIC_TIME);

  0002e	83 7d 1c 00	 cmp	 DWORD PTR _pmtNext$[ebp], 0
  00032	74 28		 je	 SHORT $L69849
  00034	6a 04		 push	 4
  00036	8b 4d 1c	 mov	 ecx, DWORD PTR _pmtNext$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0003f	85 c0		 test	 eax, eax
  00041	74 19		 je	 SHORT $L69849
  00043	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetParam@CSong@@UAGJABU_GUID@@KKJPAJPAX@Z@4QBDB
  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@
  0004d	6a ff		 push	 -1
  0004f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	e8 00 00 00 00	 call	 _DebugBreak@0
$L69849:

; 533  : 
; 534  : 	CHECK_ZOMBIE(m_fZombie);

  0005c	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	0f b6 82 7c 03
	00 00		 movzx	 eax, BYTE PTR [edx+892]
  00066	85 c0		 test	 eax, eax
  00068	74 19		 je	 SHORT $L69853
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@GAFGMFIO@Error?3?5Accessing?5object?5after?5it@
  0006f	6a 00		 push	 0
  00071	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00076	83 c4 08	 add	 esp, 8
  00079	b8 16 12 78 08	 mov	 eax, 142086678		; 08781216H
  0007e	e9 f1 00 00 00	 jmp	 $L69842
$L69853:

; 535  : 
; 536  :     HRESULT hr = DMUS_E_TRACK_NOT_FOUND;

  00083	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 537  :     ENTER_CRITICAL_SECTION(&m_CriticalSection);

  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	83 c1 24	 add	 ecx, 36			; 00000024H
  00090	51		 push	 ecx
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 538  :     /*CSegment *pSegment = m_PlayList.GetHead();
; 539  :     for (;pSegment;pSegment = pSegment->GetNext())
; 540  :     {
; 541  :         if (pSegment->m_mtStart <= mtTime && 
; 542  :             mtTime < pSegment->m_mtStart + pSegment->m_mtLength)
; 543  :         {
; 544  :             hr = pSegment->GetParam(rguidType, dwGroupBits, dwIndex, mtTime - pSegment->m_mtStart, pmtNext, pParam);
; 545  :             if (SUCCEEDED(hr)) break;
; 546  :         }
; 547  :     }*/
; 548  :     CVirtualSegment *pVirtualSegment = m_VirtualSegmentList.GetHead();

  00097	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	83 c1 20	 add	 ecx, 32			; 00000020H
  0009d	e8 00 00 00 00	 call	 ?GetHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ ; CVirtualSegmentList::GetHead
  000a2	89 45 fc	 mov	 DWORD PTR _pVirtualSegment$[ebp], eax

; 549  :     for (;pVirtualSegment;pVirtualSegment = pVirtualSegment->GetNext())

  000a5	eb 0b		 jmp	 SHORT $L69861
$L69862:
  000a7	8b 4d fc	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  000aa	e8 00 00 00 00	 call	 ?GetNext@CVirtualSegment@@QAEPAV1@XZ ; CVirtualSegment::GetNext
  000af	89 45 fc	 mov	 DWORD PTR _pVirtualSegment$[ebp], eax
$L69861:
  000b2	83 7d fc 00	 cmp	 DWORD PTR _pVirtualSegment$[ebp], 0
  000b6	74 65		 je	 SHORT $L69863

; 550  :     {
; 551  :         if (pVirtualSegment->m_mtTime <= mtTime &&
; 552  :             pVirtualSegment->m_pPlaySegment &&
; 553  :             mtTime < pVirtualSegment->m_mtTime + pVirtualSegment->m_pPlaySegment->m_mtLength)

  000b8	8b 55 fc	 mov	 edx, DWORD PTR _pVirtualSegment$[ebp]
  000bb	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  000be	3b 45 18	 cmp	 eax, DWORD PTR _mtTime$[ebp]
  000c1	7f 58		 jg	 SHORT $L69864
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  000c6	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  000ca	74 4f		 je	 SHORT $L69864
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _pVirtualSegment$[ebp]
  000cf	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  000d5	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000d8	03 50 70	 add	 edx, DWORD PTR [eax+112]
  000db	39 55 18	 cmp	 DWORD PTR _mtTime$[ebp], edx
  000de	7d 3b		 jge	 SHORT $L69864

; 554  :         {
; 555  :             hr = pVirtualSegment->m_pPlaySegment->GetParam(rguidType, dwGroupBits, dwIndex, mtTime - pVirtualSegment->m_mtTime, pmtNext, pParam);

  000e0	8b 45 20	 mov	 eax, DWORD PTR _pParam$[ebp]
  000e3	50		 push	 eax
  000e4	8b 4d 1c	 mov	 ecx, DWORD PTR _pmtNext$[ebp]
  000e7	51		 push	 ecx
  000e8	8b 55 fc	 mov	 edx, DWORD PTR _pVirtualSegment$[ebp]
  000eb	8b 45 18	 mov	 eax, DWORD PTR _mtTime$[ebp]
  000ee	2b 42 60	 sub	 eax, DWORD PTR [edx+96]
  000f1	50		 push	 eax
  000f2	8b 4d 14	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
  000f5	51		 push	 ecx
  000f6	8b 55 10	 mov	 edx, DWORD PTR _dwGroupBits$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 0c	 mov	 eax, DWORD PTR _rguidType$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d fc	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  00101	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00104	8b 45 fc	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  00107	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0010a	8b 12		 mov	 edx, DWORD PTR [edx]
  0010c	51		 push	 ecx
  0010d	ff 52 6c	 call	 DWORD PTR [edx+108]
  00110	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 556  :             if (SUCCEEDED(hr)) break;

  00113	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00117	7c 02		 jl	 SHORT $L69864
  00119	eb 02		 jmp	 SHORT $L69863
$L69864:

; 557  :         }
; 558  :     }

  0011b	eb 8a		 jmp	 SHORT $L69862
$L69863:

; 559  : /*    for (;pVirtualSegment;pVirtualSegment = pVirtualSegment->GetNext())
; 560  :     {
; 561  :         if (pVirtualSegment->m_mtTime <= mtTime)
; 562  :         {
; 563  :             CTrack* pCTrack;
; 564  :             pCTrack = pVirtualSegment->GetTrackByParam(NULL, rguidType,dwGroupBits, dwIndex);
; 565  :             while (pCTrack)
; 566  :             {
; 567  :                 if (pCTrack->m_pTrack8)
; 568  :                 {
; 569  :                     REFERENCE_TIME rtNext, *prtNext;
; 570  :                     // We need to store the next time in a 64 bit pointer. But, don't
; 571  :                     // make 'em fill it in unless the caller requested it. 
; 572  :                     if (pmtNext)
; 573  :                     {
; 574  :                         prtNext = &rtNext;
; 575  :                     }
; 576  :                     else
; 577  :                     {
; 578  :                         prtNext = NULL;
; 579  :                     }
; 580  :                     hr = pCTrack->m_pTrack8->GetParamEx( rguidType, mtTime - pVirtualSegment->m_mtTime, prtNext, pParam,
; 581  :                         NULL, 0 );
; 582  :                     if (pmtNext)
; 583  :                     {
; 584  :                         *pmtNext = (MUSIC_TIME) rtNext;
; 585  :                     }
; 586  :                 }
; 587  :                 else
; 588  :                 {
; 589  :                     hr = pCTrack->m_pTrack->GetParam( rguidType, mtTime - pVirtualSegment->m_mtTime, pmtNext, pParam );
; 590  : / *                 if( pmtNext && (( *pmtNext == 0 ) || (*pmtNext > (m_mtLength - mtTime))))
; 591  :                     {
; 592  :                         *pmtNext = m_mtLength - mtTime;
; 593  :                     }* /
; 594  :                 }
; 595  :                 // If nothing was found and dwIndex was DMUS_SEG_ANYTRACK, try again...
; 596  :                 if (fMultipleTry && (hr == DMUS_E_NOT_FOUND))
; 597  :                 {
; 598  :                     pCTrack = pVirtualSegment->GetTrackByParam(pCTrack, rguidType,dwGroupBits, dwIndex);
; 599  :                 }
; 600  :                 else
; 601  :                 {
; 602  :                     pCTrack = NULL;
; 603  :                 }
; 604  :             }
; 605  :         }
; 606  :     }*/
; 607  :     if (FAILED(hr) && pmtNext)

  0011d	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00121	7d 41		 jge	 SHORT $L69868
  00123	83 7d 1c 00	 cmp	 DWORD PTR _pmtNext$[ebp], 0
  00127	74 3b		 je	 SHORT $L69868

; 608  :     {
; 609  :         // return the time of the first segment after mtTime (or 0 if there is no such segment)
; 610  :         pVirtualSegment = m_VirtualSegmentList.GetHead();

  00129	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	83 c1 20	 add	 ecx, 32			; 00000020H
  0012f	e8 00 00 00 00	 call	 ?GetHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ ; CVirtualSegmentList::GetHead
  00134	89 45 fc	 mov	 DWORD PTR _pVirtualSegment$[ebp], eax

; 611  :         for (;pVirtualSegment;pVirtualSegment = pVirtualSegment->GetNext())

  00137	eb 0b		 jmp	 SHORT $L69869
$L69870:
  00139	8b 4d fc	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  0013c	e8 00 00 00 00	 call	 ?GetNext@CVirtualSegment@@QAEPAV1@XZ ; CVirtualSegment::GetNext
  00141	89 45 fc	 mov	 DWORD PTR _pVirtualSegment$[ebp], eax
$L69869:
  00144	83 7d fc 00	 cmp	 DWORD PTR _pVirtualSegment$[ebp], 0
  00148	74 1a		 je	 SHORT $L69868

; 612  :         {
; 613  :             if (pVirtualSegment->m_mtTime > mtTime)

  0014a	8b 45 fc	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  0014d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00150	3b 4d 18	 cmp	 ecx, DWORD PTR _mtTime$[ebp]
  00153	7e 0d		 jle	 SHORT $L69872

; 614  :             {
; 615  :                 *pmtNext = pVirtualSegment->m_mtTime;

  00155	8b 55 1c	 mov	 edx, DWORD PTR _pmtNext$[ebp]
  00158	8b 45 fc	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  0015b	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0015e	89 0a		 mov	 DWORD PTR [edx], ecx

; 616  :                 break;

  00160	eb 02		 jmp	 SHORT $L69868
$L69872:

; 617  :             }
; 618  :         }

  00162	eb d5		 jmp	 SHORT $L69870
$L69868:

; 619  :     }
; 620  :     LEAVE_CRITICAL_SECTION(&m_CriticalSection);

  00164	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00167	83 c2 24	 add	 edx, 36			; 00000024H
  0016a	52		 push	 edx
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 621  :     return hr;

  00171	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L69842:

; 622  : }

  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c2 1c 00	 ret	 28			; 0000001cH
?GetParam@CSong@@UAGJABU_GUID@@KKJPAJPAX@Z ENDP		; CSong::GetParam
_TEXT	ENDS
PUBLIC	?AddTail@CSegmentList@@QAEXPAVCSegment@@@Z	; CSegmentList::AddTail
PUBLIC	?Instantiate@CSong@@AAEJXZ			; CSong::Instantiate
PUBLIC	?AddHead@AList@@QAEXPAVAListItem@@@Z		; AList::AddHead
EXTRN	_wcscpy:NEAR
EXTRN	??0CSegment@@QAE@PAU_DMUS_IO_SEGMENT_HEADER@@PAV0@@Z:NEAR ; CSegment::CSegment
; Function compile flags: /Odt
;	COMDAT ?Instantiate@CSong@@AAEJXZ
_TEXT	SEGMENT
tv141 = -36
tv83 = -32
_this$ = -28
$T71863 = -24
$T71860 = -20
_pCopy$69891 = -16
_pTrack$69887 = -12
_pSegment$69882 = -8
_pRef$ = -4
?Instantiate@CSong@@AAEJXZ PROC NEAR			; CSong::Instantiate, COMDAT
; _this$ = ecx

; 625  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 626  :     V_INAME(IDirectMusicSong::Instantiate);
; 627  :     ENTER_CRITICAL_SECTION(&m_CriticalSection);

  0000b	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	83 c0 24	 add	 eax, 36			; 00000024H
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 628  :     CVirtualSegment *pRef = m_VirtualSegmentList.GetHead();

  00018	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 20	 add	 ecx, 32			; 00000020H
  0001e	e8 00 00 00 00	 call	 ?GetHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ ; CVirtualSegmentList::GetHead
  00023	89 45 fc	 mov	 DWORD PTR _pRef$[ebp], eax

; 629  :     m_PlayList.Clear();

  00026	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002c	e8 00 00 00 00	 call	 ?Clear@CSegmentList@@QAEXXZ ; CSegmentList::Clear

; 630  :     for (;pRef;pRef = pRef->GetNext())

  00031	eb 0b		 jmp	 SHORT $L69879
$L69880:
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _pRef$[ebp]
  00036	e8 00 00 00 00	 call	 ?GetNext@CVirtualSegment@@QAEPAV1@XZ ; CVirtualSegment::GetNext
  0003b	89 45 fc	 mov	 DWORD PTR _pRef$[ebp], eax
$L69879:
  0003e	83 7d fc 00	 cmp	 DWORD PTR _pRef$[ebp], 0
  00042	0f 84 be 01 00
	00		 je	 $L69881

; 631  :     {
; 632  :         // the constructor below does an AddRef.
; 633  :         CSegment *pSegment = new CSegment(&pRef->m_SegHeader,pRef->m_pSourceSegment);

  00048	68 e0 03 00 00	 push	 992			; 000003e0H
  0004d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00052	83 c4 04	 add	 esp, 4
  00055	89 45 ec	 mov	 DWORD PTR $T71860[ebp], eax
  00058	83 7d ec 00	 cmp	 DWORD PTR $T71860[ebp], 0
  0005c	74 1b		 je	 SHORT $L71861
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _pRef$[ebp]
  00061	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00064	52		 push	 edx
  00065	8b 45 fc	 mov	 eax, DWORD PTR _pRef$[ebp]
  00068	83 c0 28	 add	 eax, 40			; 00000028H
  0006b	50		 push	 eax
  0006c	8b 4d ec	 mov	 ecx, DWORD PTR $T71860[ebp]
  0006f	e8 00 00 00 00	 call	 ??0CSegment@@QAE@PAU_DMUS_IO_SEGMENT_HEADER@@PAV0@@Z ; CSegment::CSegment
  00074	89 45 e0	 mov	 DWORD PTR tv83[ebp], eax
  00077	eb 07		 jmp	 SHORT $L71862
$L71861:
  00079	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$L71862:
  00080	8b 4d e0	 mov	 ecx, DWORD PTR tv83[ebp]
  00083	89 4d f8	 mov	 DWORD PTR _pSegment$69882[ebp], ecx

; 634  :         if (pSegment)

  00086	83 7d f8 00	 cmp	 DWORD PTR _pSegment$69882[ebp], 0
  0008a	0f 84 71 01 00
	00		 je	 $L69885

; 635  :         {
; 636  :             if (pRef->m_wszName[0])

  00090	8b 55 fc	 mov	 edx, DWORD PTR _pRef$[ebp]
  00093	0f b7 42 6c	 movzx	 eax, WORD PTR [edx+108]
  00097	85 c0		 test	 eax, eax
  00099	74 2e		 je	 SHORT $L69886

; 637  :             {
; 638  :                 wcscpy(pSegment->m_Info.m_wszName,pRef->m_wszName);

  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _pRef$[ebp]
  0009e	83 c1 6c	 add	 ecx, 108		; 0000006cH
  000a1	51		 push	 ecx
  000a2	8b 55 f8	 mov	 edx, DWORD PTR _pSegment$69882[ebp]
  000a5	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 _wcscpy
  000b1	83 c4 08	 add	 esp, 8

; 639  :                 pSegment->m_Info.m_dwValidData |= DMUS_OBJ_NAME;

  000b4	8b 45 f8	 mov	 eax, DWORD PTR _pSegment$69882[ebp]
  000b7	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000bd	83 c9 04	 or	 ecx, 4
  000c0	8b 55 f8	 mov	 edx, DWORD PTR _pSegment$69882[ebp]
  000c3	89 8a 90 00 00
	00		 mov	 DWORD PTR [edx+144], ecx
$L69886:

; 640  :             }
; 641  :             CTrack *pTrack;
; 642  :             for (pTrack = pRef->m_TrackList.GetHead();pTrack;pTrack = pTrack->GetNext())

  000c9	8b 4d fc	 mov	 ecx, DWORD PTR _pRef$[ebp]
  000cc	83 c1 04	 add	 ecx, 4
  000cf	e8 00 00 00 00	 call	 ?GetHead@CTrackList@@QAEPAVCTrack@@XZ ; CTrackList::GetHead
  000d4	89 45 f4	 mov	 DWORD PTR _pTrack$69887[ebp], eax
  000d7	eb 0b		 jmp	 SHORT $L69888
$L69889:
  000d9	8b 4d f4	 mov	 ecx, DWORD PTR _pTrack$69887[ebp]
  000dc	e8 00 00 00 00	 call	 ?GetNext@CTrack@@QAEPAV1@XZ ; CTrack::GetNext
  000e1	89 45 f4	 mov	 DWORD PTR _pTrack$69887[ebp], eax
$L69888:
  000e4	83 7d f4 00	 cmp	 DWORD PTR _pTrack$69887[ebp], 0
  000e8	0f 84 95 00 00
	00		 je	 $L69890

; 643  :             {
; 644  :                 CTrack *pCopy = new CTrack;

  000ee	6a 3c		 push	 60			; 0000003cH
  000f0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f5	83 c4 04	 add	 esp, 4
  000f8	89 45 e8	 mov	 DWORD PTR $T71863[ebp], eax
  000fb	83 7d e8 00	 cmp	 DWORD PTR $T71863[ebp], 0
  000ff	74 0d		 je	 SHORT $L71864
  00101	8b 4d e8	 mov	 ecx, DWORD PTR $T71863[ebp]
  00104	e8 00 00 00 00	 call	 ??0CTrack@@QAE@XZ	; CTrack::CTrack
  00109	89 45 dc	 mov	 DWORD PTR tv141[ebp], eax
  0010c	eb 07		 jmp	 SHORT $L71865
$L71864:
  0010e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv141[ebp], 0
$L71865:
  00115	8b 45 dc	 mov	 eax, DWORD PTR tv141[ebp]
  00118	89 45 f0	 mov	 DWORD PTR _pCopy$69891[ebp], eax

; 645  :                 if( pCopy )

  0011b	83 7d f0 00	 cmp	 DWORD PTR _pCopy$69891[ebp], 0
  0011f	74 5d		 je	 SHORT $L69894

; 646  :                 {
; 647  :                     *pCopy = *pTrack;

  00121	8b 75 f4	 mov	 esi, DWORD PTR _pTrack$69887[ebp]
  00124	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00129	8b 7d f0	 mov	 edi, DWORD PTR _pCopy$69891[ebp]
  0012c	f3 a5		 rep movsd

; 648  :                     pCopy->SetNext(NULL);

  0012e	6a 00		 push	 0
  00130	8b 4d f0	 mov	 ecx, DWORD PTR _pCopy$69891[ebp]
  00133	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 649  :                     pCopy->m_pTrackState = NULL;

  00138	8b 4d f0	 mov	 ecx, DWORD PTR _pCopy$69891[ebp]
  0013b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 650  :                     pCopy->m_pTrack->AddRef();

  00142	8b 55 f0	 mov	 edx, DWORD PTR _pCopy$69891[ebp]
  00145	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00148	8b 4d f0	 mov	 ecx, DWORD PTR _pCopy$69891[ebp]
  0014b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0014e	8b 00		 mov	 eax, DWORD PTR [eax]
  00150	52		 push	 edx
  00151	ff 50 04	 call	 DWORD PTR [eax+4]

; 651  :                     if (pCopy->m_pTrack8)

  00154	8b 4d f0	 mov	 ecx, DWORD PTR _pCopy$69891[ebp]
  00157	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  0015b	74 12		 je	 SHORT $L69895

; 652  :                     {
; 653  :                         pCopy->m_pTrack8->AddRef();

  0015d	8b 55 f0	 mov	 edx, DWORD PTR _pCopy$69891[ebp]
  00160	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00163	8b 4d f0	 mov	 ecx, DWORD PTR _pCopy$69891[ebp]
  00166	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00169	8b 00		 mov	 eax, DWORD PTR [eax]
  0016b	52		 push	 edx
  0016c	ff 50 04	 call	 DWORD PTR [eax+4]
$L69895:

; 654  :                     }
; 655  :                     // The tracks were in backwards order. This puts them back in order, and ahead of the segment tracks.
; 656  :                     pSegment->m_TrackList.AddHead( pCopy );

  0016f	8b 4d f0	 mov	 ecx, DWORD PTR _pCopy$69891[ebp]
  00172	51		 push	 ecx
  00173	8b 4d f8	 mov	 ecx, DWORD PTR _pSegment$69882[ebp]
  00176	83 c1 44	 add	 ecx, 68			; 00000044H
  00179	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead
$L69894:

; 657  :                 }
; 658  :             }

  0017e	e9 56 ff ff ff	 jmp	 $L69889
$L69890:

; 659  :             pSegment->m_pSong = this;

  00183	8b 55 f8	 mov	 edx, DWORD PTR _pSegment$69882[ebp]
  00186	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00189	89 82 c8 03 00
	00		 mov	 DWORD PTR [edx+968], eax

; 660  :             pSegment->m_dwPlayID = pRef->m_dwID;

  0018f	8b 4d f8	 mov	 ecx, DWORD PTR _pSegment$69882[ebp]
  00192	8b 55 fc	 mov	 edx, DWORD PTR _pRef$[ebp]
  00195	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00198	89 81 cc 03 00
	00		 mov	 DWORD PTR [ecx+972], eax

; 661  : //Trace(0,"Intantiating PlaySegment %ls with ID %ld.\n",pRef->m_wszName,pRef->m_dwID);
; 662  :             pSegment->m_dwNextPlayFlags = pRef->m_dwNextPlayFlags;

  0019e	8b 4d f8	 mov	 ecx, DWORD PTR _pSegment$69882[ebp]
  001a1	8b 55 fc	 mov	 edx, DWORD PTR _pRef$[ebp]
  001a4	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  001a7	89 81 d4 03 00
	00		 mov	 DWORD PTR [ecx+980], eax

; 663  :             pSegment->m_dwNextPlayID = pRef->m_dwNextPlayID;

  001ad	8b 4d f8	 mov	 ecx, DWORD PTR _pSegment$69882[ebp]
  001b0	8b 55 fc	 mov	 edx, DWORD PTR _pRef$[ebp]
  001b3	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  001b6	89 81 d0 03 00
	00		 mov	 DWORD PTR [ecx+976], eax

; 664  :             m_PlayList.AddTail(pSegment);

  001bc	8b 4d f8	 mov	 ecx, DWORD PTR _pSegment$69882[ebp]
  001bf	51		 push	 ecx
  001c0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001c3	83 c1 1c	 add	 ecx, 28			; 0000001cH
  001c6	e8 00 00 00 00	 call	 ?AddTail@CSegmentList@@QAEXPAVCSegment@@@Z ; CSegmentList::AddTail

; 665  :             if (pRef->m_pPlaySegment) pRef->m_pPlaySegment->Release();

  001cb	8b 55 fc	 mov	 edx, DWORD PTR _pRef$[ebp]
  001ce	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  001d2	74 12		 je	 SHORT $L69896
  001d4	8b 45 fc	 mov	 eax, DWORD PTR _pRef$[ebp]
  001d7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001da	8b 55 fc	 mov	 edx, DWORD PTR _pRef$[ebp]
  001dd	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001e0	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001e2	50		 push	 eax
  001e3	ff 51 08	 call	 DWORD PTR [ecx+8]
$L69896:

; 666  :             pRef->m_pPlaySegment = pSegment;

  001e6	8b 55 fc	 mov	 edx, DWORD PTR _pRef$[ebp]
  001e9	8b 45 f8	 mov	 eax, DWORD PTR _pSegment$69882[ebp]
  001ec	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 667  :             pRef->m_pPlaySegment->AddRef();

  001ef	8b 4d fc	 mov	 ecx, DWORD PTR _pRef$[ebp]
  001f2	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001f5	8b 45 fc	 mov	 eax, DWORD PTR _pRef$[ebp]
  001f8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001fb	8b 12		 mov	 edx, DWORD PTR [edx]
  001fd	51		 push	 ecx
  001fe	ff 52 04	 call	 DWORD PTR [edx+4]
$L69885:

; 668  :         }
; 669  :     }

  00201	e9 2d fe ff ff	 jmp	 $L69880
$L69881:

; 670  :     LEAVE_CRITICAL_SECTION(&m_CriticalSection);

  00206	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00209	83 c0 24	 add	 eax, 36			; 00000024H
  0020c	50		 push	 eax
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 671  :     return S_OK;

  00213	33 c0		 xor	 eax, eax

; 672  : }

  00215	5f		 pop	 edi
  00216	5e		 pop	 esi
  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c3		 ret	 0
?Instantiate@CSong@@AAEJXZ ENDP				; CSong::Instantiate
_TEXT	ENDS
PUBLIC	??_C@_0BP@IPCOEDEC@?$CFs?3?5Invalid?5pointer?5ppSegment?6?$AA@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??EnumSegment@CSong@@UAGJKPAPAUIDirectMusicSegment@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??EnumSegment@CSong@@UAGJKPAPAUIDirectMusicSegment@@@Z@4QBDB DB 'I'
	DB	'DirectMusicSong::EnumSegment', 00H		; `CSong::EnumSegment'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BP@IPCOEDEC@?$CFs?3?5Invalid?5pointer?5ppSegment?6?$AA@
CONST	SEGMENT
??_C@_0BP@IPCOEDEC@?$CFs?3?5Invalid?5pointer?5ppSegment?6?$AA@ DB '%s: In'
	DB	'valid pointer ppSegment', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?EnumSegment@CSong@@UAGJKPAPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT
_hr$ = -8
_pSegment$ = -4
_this$ = 8
_dwIndex$ = 12
_ppSegment$ = 16
?EnumSegment@CSong@@UAGJKPAPAUIDirectMusicSegment@@@Z PROC NEAR ; CSong::EnumSegment, COMDAT

; 675  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 676  :     V_INAME(IDirectMusicSong::EnumSegment);
; 677  :     V_PTRPTR_WRITE (ppSegment);

  00006	6a 04		 push	 4
  00008	8b 45 10	 mov	 eax, DWORD PTR _ppSegment$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69906
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??EnumSegment@CSong@@UAGJKPAPAUIDirectMusicSegment@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@IPCOEDEC@?$CFs?3?5Invalid?5pointer?5ppSegment?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69906:

; 678  : 
; 679  : 	CHECK_ZOMBIE(m_fZombie);

  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	0f b6 91 7c 03
	00 00		 movzx	 edx, BYTE PTR [ecx+892]
  00038	85 d2		 test	 edx, edx
  0003a	74 16		 je	 SHORT $L69908
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@GAFGMFIO@Error?3?5Accessing?5object?5after?5it@
  00041	6a 00		 push	 0
  00043	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00048	83 c4 08	 add	 esp, 8
  0004b	b8 16 12 78 08	 mov	 eax, 142086678		; 08781216H
  00050	eb 77		 jmp	 SHORT $L69902
$L69908:

; 680  : 
; 681  :     HRESULT hr = S_FALSE;

  00052	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 1

; 682  :     ENTER_CRITICAL_SECTION(&m_CriticalSection);

  00059	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	83 c0 24	 add	 eax, 36			; 00000024H
  0005f	50		 push	 eax
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 683  :     CSegment *pSegment = m_PlayList.GetHead();

  00066	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0006c	e8 00 00 00 00	 call	 ?GetHead@CSegmentList@@QAEPAVCSegment@@XZ ; CSegmentList::GetHead
  00071	89 45 fc	 mov	 DWORD PTR _pSegment$[ebp], eax

; 684  :     for (;pSegment && dwIndex;pSegment = pSegment->GetNext()) dwIndex--;

  00074	eb 0b		 jmp	 SHORT $L69916
$L69917:
  00076	8b 4d fc	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  00079	e8 00 00 00 00	 call	 ?GetNext@CSegment@@QAEPAV1@XZ ; CSegment::GetNext
  0007e	89 45 fc	 mov	 DWORD PTR _pSegment$[ebp], eax
$L69916:
  00081	83 7d fc 00	 cmp	 DWORD PTR _pSegment$[ebp], 0
  00085	74 11		 je	 SHORT $L69918
  00087	83 7d 0c 00	 cmp	 DWORD PTR _dwIndex$[ebp], 0
  0008b	74 0b		 je	 SHORT $L69918
  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
  00090	83 e9 01	 sub	 ecx, 1
  00093	89 4d 0c	 mov	 DWORD PTR _dwIndex$[ebp], ecx
  00096	eb de		 jmp	 SHORT $L69917
$L69918:

; 685  :     if (pSegment)

  00098	83 7d fc 00	 cmp	 DWORD PTR _pSegment$[ebp], 0
  0009c	74 1b		 je	 SHORT $L69919

; 686  :     {
; 687  :         *ppSegment = static_cast<IDirectMusicSegment*>(pSegment);

  0009e	8b 55 10	 mov	 edx, DWORD PTR _ppSegment$[ebp]
  000a1	8b 45 fc	 mov	 eax, DWORD PTR _pSegment$[ebp]
  000a4	89 02		 mov	 DWORD PTR [edx], eax

; 688  :         pSegment->AddRef();

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  000a9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ab	8b 45 fc	 mov	 eax, DWORD PTR _pSegment$[ebp]
  000ae	50		 push	 eax
  000af	ff 52 04	 call	 DWORD PTR [edx+4]

; 689  :         hr = S_OK;

  000b2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$L69919:

; 690  :     }    
; 691  :     LEAVE_CRITICAL_SECTION(&m_CriticalSection);

  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	83 c1 24	 add	 ecx, 36			; 00000024H
  000bf	51		 push	 ecx
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 692  :     return hr;

  000c6	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L69902:

; 693  : }

  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 0c 00	 ret	 12			; 0000000cH
?EnumSegment@CSong@@UAGJKPAPAUIDirectMusicSegment@@@Z ENDP ; CSong::EnumSegment
_TEXT	ENDS
PUBLIC	?GetPlaySegment@CSong@@QAEJKPAPAVCSegment@@@Z	; CSong::GetPlaySegment
; Function compile flags: /Odt
;	COMDAT ?GetPlaySegment@CSong@@QAEJKPAPAVCSegment@@@Z
_TEXT	SEGMENT
_this$ = -12
_hr$ = -8
_pSegment$ = -4
_dwIndex$ = 8
_ppSegment$ = 12
?GetPlaySegment@CSong@@QAEJKPAPAVCSegment@@@Z PROC NEAR	; CSong::GetPlaySegment, COMDAT
; _this$ = ecx

; 696  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 697  :     HRESULT hr = S_FALSE;

  00009	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 1

; 698  :     ENTER_CRITICAL_SECTION(&m_CriticalSection);

  00010	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 24	 add	 eax, 36			; 00000024H
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 699  :     CSegment *pSegment = m_PlayList.GetHead();

  0001d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00023	e8 00 00 00 00	 call	 ?GetHead@CSegmentList@@QAEPAVCSegment@@XZ ; CSegmentList::GetHead
  00028	89 45 fc	 mov	 DWORD PTR _pSegment$[ebp], eax

; 700  :     for (;pSegment;pSegment = pSegment->GetNext())

  0002b	eb 0b		 jmp	 SHORT $L69930
$L69931:
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  00030	e8 00 00 00 00	 call	 ?GetNext@CSegment@@QAEPAV1@XZ ; CSegment::GetNext
  00035	89 45 fc	 mov	 DWORD PTR _pSegment$[ebp], eax
$L69930:
  00038	83 7d fc 00	 cmp	 DWORD PTR _pSegment$[ebp], 0
  0003c	74 2d		 je	 SHORT $L69932

; 701  :     {
; 702  :         if (pSegment->m_dwPlayID == dwIndex)

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  00041	8b 91 cc 03 00
	00		 mov	 edx, DWORD PTR [ecx+972]
  00047	3b 55 08	 cmp	 edx, DWORD PTR _dwIndex$[ebp]
  0004a	75 1d		 jne	 SHORT $L69933

; 703  :         {
; 704  :             *ppSegment = pSegment;

  0004c	8b 45 0c	 mov	 eax, DWORD PTR _ppSegment$[ebp]
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  00052	89 08		 mov	 DWORD PTR [eax], ecx

; 705  :             pSegment->AddRef();

  00054	8b 55 fc	 mov	 edx, DWORD PTR _pSegment$[ebp]
  00057	8b 02		 mov	 eax, DWORD PTR [edx]
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  0005c	51		 push	 ecx
  0005d	ff 50 04	 call	 DWORD PTR [eax+4]

; 706  :             hr = S_OK;

  00060	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 707  :             break;

  00067	eb 02		 jmp	 SHORT $L69932
$L69933:

; 708  :         }
; 709  :     }

  00069	eb c2		 jmp	 SHORT $L69931
$L69932:

; 710  :     LEAVE_CRITICAL_SECTION(&m_CriticalSection);

  0006b	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	83 c2 24	 add	 edx, 36			; 00000024H
  00071	52		 push	 edx
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 711  :     return hr;

  00078	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 712  : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
?GetPlaySegment@CSong@@QAEJKPAPAVCSegment@@@Z ENDP	; CSong::GetPlaySegment
_TEXT	ENDS
PUBLIC	??_C@_0BN@NNHAJGJJ@?$CFs?3?5Invalid?5pointer?5wszName?6?$AA@ ; `string'
PUBLIC	??_C@_0CM@OFDAIGJE@Error?3?5Unable?5to?5find?5segment?5?$CFl@ ; `string'
PUBLIC	??_C@_0DF@DCEEFACH@Error?3?5Unable?5to?5find?5starting?5s@ ; `string'
EXTRN	__wcsicmp:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??GetSegment@CSong@@UAGJPBGPAPAUIDirectMusicSegment@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetSegment@CSong@@UAGJPBGPAPAUIDirectMusicSegment@@@Z@4QBDB DB 'I'
	DB	'DirectMusicSong::GetSegment', 00H		; `CSong::GetSegment'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BN@NNHAJGJJ@?$CFs?3?5Invalid?5pointer?5wszName?6?$AA@
CONST	SEGMENT
??_C@_0BN@NNHAJGJJ@?$CFs?3?5Invalid?5pointer?5wszName?6?$AA@ DB '%s: Inva'
	DB	'lid pointer wszName', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OFDAIGJE@Error?3?5Unable?5to?5find?5segment?5?$CFl@
CONST	SEGMENT
??_C@_0CM@OFDAIGJE@Error?3?5Unable?5to?5find?5segment?5?$CFl@ DB 'Error: '
	DB	'Unable to find segment %ls in song.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@DCEEFACH@Error?3?5Unable?5to?5find?5starting?5s@
CONST	SEGMENT
??_C@_0DF@DCEEFACH@Error?3?5Unable?5to?5find?5starting?5s@ DB 'Error: Una'
	DB	'ble to find starting segment in the song.', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetSegment@CSong@@UAGJPBGPAPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT
_hr$ = -8
_pSegment$ = -4
_this$ = 8
_wszName$ = 12
_ppSegment$ = 16
?GetSegment@CSong@@UAGJPBGPAPAUIDirectMusicSegment@@@Z PROC NEAR ; CSong::GetSegment, COMDAT

; 716  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 717  :     V_INAME(IDirectMusicSong::GetSegment);
; 718  :     V_PTRPTR_WRITE(ppSegment);

  00006	6a 04		 push	 4
  00008	8b 45 10	 mov	 eax, DWORD PTR _ppSegment$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69943
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetSegment@CSong@@UAGJPBGPAPAUIDirectMusicSegment@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@IPCOEDEC@?$CFs?3?5Invalid?5pointer?5ppSegment?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69943:

; 719  : 
; 720  : 	CHECK_ZOMBIE(m_fZombie);

  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	0f b6 91 7c 03
	00 00		 movzx	 edx, BYTE PTR [ecx+892]
  00038	85 d2		 test	 edx, edx
  0003a	74 19		 je	 SHORT $L69944
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@GAFGMFIO@Error?3?5Accessing?5object?5after?5it@
  00041	6a 00		 push	 0
  00043	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00048	83 c4 08	 add	 esp, 8
  0004b	b8 16 12 78 08	 mov	 eax, 142086678		; 08781216H
  00050	e9 f9 00 00 00	 jmp	 $L69939
$L69944:

; 721  : 
; 722  :     HRESULT hr = S_FALSE;

  00055	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 1

; 723  :     CSegment *pSegment;
; 724  :     if (wszName)

  0005c	83 7d 0c 00	 cmp	 DWORD PTR _wszName$[ebp], 0
  00060	0f 84 95 00 00
	00		 je	 $L69952

; 725  :     {
; 726  :         V_BUFPTR_READ(wszName,2);

  00066	6a 02		 push	 2
  00068	8b 45 0c	 mov	 eax, DWORD PTR _wszName$[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00071	85 c0		 test	 eax, eax
  00073	74 19		 je	 SHORT $L69953
  00075	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetSegment@CSong@@UAGJPBGPAPAUIDirectMusicSegment@@@Z@4QBDB
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@NNHAJGJJ@?$CFs?3?5Invalid?5pointer?5wszName?6?$AA@
  0007f	6a ff		 push	 -1
  00081	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH
  00089	e8 00 00 00 00	 call	 _DebugBreak@0
$L69953:

; 727  :         ENTER_CRITICAL_SECTION(&m_CriticalSection);

  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	83 c1 24	 add	 ecx, 36			; 00000024H
  00094	51		 push	 ecx
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 728  :         pSegment = m_PlayList.GetHead();

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  000a1	e8 00 00 00 00	 call	 ?GetHead@CSegmentList@@QAEPAVCSegment@@XZ ; CSegmentList::GetHead
  000a6	89 45 fc	 mov	 DWORD PTR _pSegment$[ebp], eax

; 729  :         for (;pSegment;pSegment = pSegment->GetNext())

  000a9	eb 0b		 jmp	 SHORT $L69955
$L69956:
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  000ae	e8 00 00 00 00	 call	 ?GetNext@CSegment@@QAEPAV1@XZ ; CSegment::GetNext
  000b3	89 45 fc	 mov	 DWORD PTR _pSegment$[ebp], eax
$L69955:
  000b6	83 7d fc 00	 cmp	 DWORD PTR _pSegment$[ebp], 0
  000ba	74 30		 je	 SHORT $L69957

; 730  :         {
; 731  :             if (_wcsicmp(pSegment->m_Info.m_wszName, wszName) == 0)

  000bc	8b 55 0c	 mov	 edx, DWORD PTR _wszName$[ebp]
  000bf	52		 push	 edx
  000c0	8b 45 fc	 mov	 eax, DWORD PTR _pSegment$[ebp]
  000c3	05 94 00 00 00	 add	 eax, 148		; 00000094H
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 __wcsicmp
  000ce	83 c4 08	 add	 esp, 8
  000d1	85 c0		 test	 eax, eax
  000d3	75 15		 jne	 SHORT $L69958

; 732  :             {
; 733  :                 pSegment->AddRef();

  000d5	8b 4d fc	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  000d8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000da	8b 45 fc	 mov	 eax, DWORD PTR _pSegment$[ebp]
  000dd	50		 push	 eax
  000de	ff 52 04	 call	 DWORD PTR [edx+4]

; 734  :                 hr = S_OK;

  000e1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 735  :                 break;

  000e8	eb 02		 jmp	 SHORT $L69957
$L69958:

; 736  :             }
; 737  :         }

  000ea	eb bf		 jmp	 SHORT $L69956
$L69957:

; 738  :         LEAVE_CRITICAL_SECTION(&m_CriticalSection);

  000ec	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	83 c1 24	 add	 ecx, 36			; 00000024H
  000f2	51		 push	 ecx
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 739  :     }
; 740  :     else

  000f9	eb 16		 jmp	 SHORT $L69960
$L69952:

; 741  :     {
; 742  :         hr = GetPlaySegment( m_dwStartSegID,&pSegment);

  000fb	8d 55 fc	 lea	 edx, DWORD PTR _pSegment$[ebp]
  000fe	52		 push	 edx
  000ff	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00102	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00105	51		 push	 ecx
  00106	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?GetPlaySegment@CSong@@QAEJKPAPAVCSegment@@@Z ; CSong::GetPlaySegment
  0010e	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L69960:

; 743  :     }
; 744  :     if (hr == S_OK)

  00111	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00115	75 0a		 jne	 SHORT $L69962

; 745  :     {
; 746  :         *ppSegment = static_cast<IDirectMusicSegment*>(pSegment);

  00117	8b 55 10	 mov	 edx, DWORD PTR _ppSegment$[ebp]
  0011a	8b 45 fc	 mov	 eax, DWORD PTR _pSegment$[ebp]
  0011d	89 02		 mov	 DWORD PTR [edx], eax

; 747  :     }
; 748  :     else

  0011f	eb 2a		 jmp	 SHORT $L69964
$L69962:

; 749  :     {
; 750  : #ifdef DBG
; 751  :         if (wszName)

  00121	83 7d 0c 00	 cmp	 DWORD PTR _wszName$[ebp], 0
  00125	74 15		 je	 SHORT $L69965

; 752  :         {
; 753  :             Trace(1,"Error: Unable to find segment %ls in song.\n",wszName);

  00127	8b 4d 0c	 mov	 ecx, DWORD PTR _wszName$[ebp]
  0012a	51		 push	 ecx
  0012b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@OFDAIGJE@Error?3?5Unable?5to?5find?5segment?5?$CFl@
  00130	6a 01		 push	 1
  00132	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00137	83 c4 0c	 add	 esp, 12			; 0000000cH

; 754  :         }
; 755  :         else

  0013a	eb 0f		 jmp	 SHORT $L69964
$L69965:

; 756  :         {
; 757  :             Trace(1,"Error: Unable to find starting segment in the song.\n");

  0013c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@DCEEFACH@Error?3?5Unable?5to?5find?5starting?5s@
  00141	6a 01		 push	 1
  00143	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00148	83 c4 08	 add	 esp, 8
$L69964:

; 758  :         }
; 759  : #endif
; 760  :     }
; 761  :     return hr;

  0014b	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L69939:

; 762  : }

  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c2 0c 00	 ret	 12			; 0000000cH
?GetSegment@CSong@@UAGJPBGPAPAUIDirectMusicSegment@@@Z ENDP ; CSong::GetSegment
_TEXT	ENDS
PUBLIC	??_C@_0CH@CFDENOHG@?$CFs?3?5Invalid?5pointer?5ppAudioPathC@ ; `string'
PUBLIC	??_C@_0DL@BENGCCJE@Warning?3?5No?5embedded?5audiopath?5c@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??GetAudioPathConfig@CSong@@UAGJPAPAUIUnknown@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetAudioPathConfig@CSong@@UAGJPAPAUIUnknown@@@Z@4QBDB DB 'I'
	DB	'DirectMusicSegment::GetAudioPathConfig', 00H ; `CSong::GetAudioPathConfig'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CH@CFDENOHG@?$CFs?3?5Invalid?5pointer?5ppAudioPathC@
CONST	SEGMENT
??_C@_0CH@CFDENOHG@?$CFs?3?5Invalid?5pointer?5ppAudioPathC@ DB '%s: Inval'
	DB	'id pointer ppAudioPathConfig', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@BENGCCJE@Warning?3?5No?5embedded?5audiopath?5c@
CONST	SEGMENT
??_C@_0DL@BENGCCJE@Warning?3?5No?5embedded?5audiopath?5c@ DB 'Warning: No'
	DB	' embedded audiopath configuration in the song.', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetAudioPathConfig@CSong@@UAGJPAPAUIUnknown@@@Z
_TEXT	SEGMENT
_hr$ = -4
_this$ = 8
_ppAudioPathConfig$ = 12
?GetAudioPathConfig@CSong@@UAGJPAPAUIUnknown@@@Z PROC NEAR ; CSong::GetAudioPathConfig, COMDAT

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 767  :     V_INAME(IDirectMusicSegment::GetAudioPathConfig);
; 768  :     V_PTRPTR_WRITE(ppAudioPathConfig);

  00004	6a 04		 push	 4
  00006	8b 45 0c	 mov	 eax, DWORD PTR _ppAudioPathConfig$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $L69976
  00013	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetAudioPathConfig@CSong@@UAGJPAPAUIUnknown@@@Z@4QBDB
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@CFDENOHG@?$CFs?3?5Invalid?5pointer?5ppAudioPathC@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L69976:

; 769  : #ifdef DXAPI
; 770  : 	CHECK_ZOMBIE(m_fZombie);
; 771  : #endif
; 772  : 
; 773  :     HRESULT hr;
; 774  :     ENTER_CRITICAL_SECTION(&m_CriticalSection);

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 24	 add	 ecx, 36			; 00000024H
  00032	51		 push	 ecx
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 775  :     if (m_pAudioPathConfig)

  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00040	74 1f		 je	 SHORT $L69979

; 776  :     {
; 777  :         hr = m_pAudioPathConfig->QueryInterface(IID_IUnknown,(void **)ppAudioPathConfig);

  00042	8b 45 0c	 mov	 eax, DWORD PTR _ppAudioPathConfig$[ebp]
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IUnknown
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00051	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00057	8b 12		 mov	 edx, DWORD PTR [edx]
  00059	51		 push	 ecx
  0005a	ff 12		 call	 DWORD PTR [edx]
  0005c	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 778  :     }
; 779  :     else

  0005f	eb 16		 jmp	 SHORT $L69981
$L69979:

; 780  :     {
; 781  :         Trace(2,"Warning: No embedded audiopath configuration in the song.\n");         

  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@BENGCCJE@Warning?3?5No?5embedded?5audiopath?5c@
  00066	6a 02		 push	 2
  00068	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0006d	83 c4 08	 add	 esp, 8

; 782  :         hr = DMUS_E_NO_AUDIOPATH_CONFIG;

  00070	c7 45 fc 28 12
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005396952 ; 88781228H
$L69981:

; 783  :     }
; 784  :     LEAVE_CRITICAL_SECTION(&m_CriticalSection);

  00077	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	83 c0 24	 add	 eax, 36			; 00000024H
  0007d	50		 push	 eax
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 785  :     return hr;

  00084	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 786  : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 08 00	 ret	 8
?GetAudioPathConfig@CSong@@UAGJPAPAUIUnknown@@@Z ENDP	; CSong::GetAudioPathConfig
_TEXT	ENDS
PUBLIC	??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ ; `string'
EXTRN	_CLSID_DirectMusicSong:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CSong@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetClassID@CSong@@UAGJPAU_GUID@@@Z@4QBDB DB 'C'
	DB	'Song::GetClassID', 00H			; `CSong::GetClassID'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT
??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pClassID', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetClassID@CSong@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_pClassID$ = 12
?GetClassID@CSong@@UAGJPAU_GUID@@@Z PROC NEAR		; CSong::GetClassID, COMDAT

; 792  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 793  :     V_INAME(CSong::GetClassID);
; 794  :     V_PTR_WRITE(pClassID, CLSID); 

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pClassID$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L69994
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetClassID@CSong@@UAGJPAU_GUID@@@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L69994:

; 795  : #ifdef DXAPI
; 796  : 	CHECK_ZOMBIE(m_fZombie);
; 797  : #endif
; 798  : 
; 799  :     *pClassID = CLSID_DirectMusicSong;

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _pClassID$[ebp]
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicSong
  00034	89 11		 mov	 DWORD PTR [ecx], edx
  00036	a1 04 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicSong+4
  0003b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0003e	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicSong+8
  00044	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00047	a1 0c 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicSong+12
  0004c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 800  :     return S_OK;

  0004f	33 c0		 xor	 eax, eax

; 801  : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?GetClassID@CSong@@UAGJPAU_GUID@@@Z ENDP		; CSong::GetClassID
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsDirty@CSong@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?IsDirty@CSong@@UAGJXZ PROC NEAR			; CSong::IsDirty, COMDAT

; 807  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 808  :     return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 809  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?IsDirty@CSong@@UAGJXZ ENDP				; CSong::IsDirty
_TEXT	ENDS
PUBLIC	??_GCSegment@@QAEPAXI@Z				; CSegment::`scalar deleting destructor'
PUBLIC	??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ ; `string'
PUBLIC	?AddHead@CVirtualSegmentList@@QAEXPAVCVirtualSegment@@@Z ; CVirtualSegmentList::AddHead
PUBLIC	?LoadSegmentList@CSong@@AAEJPAVCRiffParser@@@Z	; CSong::LoadSegmentList
PUBLIC	?LoadVirtualSegmentList@CSong@@AAEJPAVCRiffParser@@@Z ; CSong::LoadVirtualSegmentList
PUBLIC	?LoadAudioPath@CSong@@AAEJPAUIStream@@@Z	; CSong::LoadAudioPath
EXTRN	?ReadChunk@CInfo@@QAEJPAVCRiffParser@@K@Z:NEAR	; CInfo::ReadChunk
EXTRN	_CLSID_DirectMusicContainer:BYTE
EXTRN	_IID_IDirectMusicGetLoader:BYTE
EXTRN	_IID_IDirectMusicContainer:BYTE
EXTRN	??0CSegment@@QAE@XZ:NEAR			; CSegment::CSegment
EXTRN	??0CRiffParser@@QAE@PAUIStream@@@Z:NEAR		; CRiffParser::CRiffParser
EXTRN	?NextChunk@CRiffParser@@QAEHPAJ@Z:NEAR		; CRiffParser::NextChunk
EXTRN	?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z:NEAR	; CRiffParser::EnterList
EXTRN	?LeaveList@CRiffParser@@QAEXXZ:NEAR		; CRiffParser::LeaveList
EXTRN	?SeekBack@CRiffParser@@QAEJXZ:NEAR		; CRiffParser::SeekBack
EXTRN	?SeekForward@CRiffParser@@QAEJXZ:NEAR		; CRiffParser::SeekForward
EXTRN	?Read@CRiffParser@@QAEJPAXK@Z:NEAR		; CRiffParser::Read
;	COMDAT ?__szValidateInterfaceName@?1??Load@CSong@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Load@CSong@@UAGJPAUIStream@@@Z@4QBDB DB 'C'
	DB	'Song::Load', 00H				; `CSong::Load'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT
??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pIStream', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Load@CSong@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT
tv378 = -1876
tv327 = -1872
tv248 = -1868
tv159 = -1864
tv143 = -1860
$T71896 = -1856
$T71895 = -1852
$T71892 = -1848
$T71889 = -1844
_Desc$70178 = -1840
_pVirtual$70180 = -988
_pSegment$70172 = -984
_pObject$70138 = -980
_Desc$70127 = -976
_hr$70130 = -124
_pGetLoader$70129 = -120
_pLoader$70128 = -116
_ioSongHdr$70051 = -112
_ckNext$70033 = -104
_pContainer$70034 = -72
_hr$ = -68
_Parser$ = -64
_ckMain$ = -32
_this$ = 8
_pIStream$ = 12
?Load@CSong@@UAGJPAUIStream@@@Z PROC NEAR		; CSong::Load, COMDAT

; 812  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 07 00
	00		 sub	 esp, 1876		; 00000754H

; 813  :     V_INAME(CSong::Load);
; 814  :     V_INTERFACE(pIStream);

  00009	6a 04		 push	 4
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00014	85 c0		 test	 eax, eax
  00016	74 19		 je	 SHORT $L70008
  00018	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CSong@@UAGJPAUIStream@@@Z@4QBDB
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00022	6a ff		 push	 -1
  00024	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	e8 00 00 00 00	 call	 _DebugBreak@0
$L70008:
  00031	6a 04		 push	 4
  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003e	85 c0		 test	 eax, eax
  00040	74 19		 je	 SHORT $L70011
  00042	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CSong@@UAGJPAUIStream@@@Z@4QBDB
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  0004c	6a ff		 push	 -1
  0004e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	e8 00 00 00 00	 call	 _DebugBreak@0
$L70011:
  0005b	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00060	8b 11		 mov	 edx, DWORD PTR [ecx]
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00068	85 c0		 test	 eax, eax
  0006a	74 19		 je	 SHORT $L70013
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CSong@@UAGJPAUIStream@@@Z@4QBDB
  00071	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00076	6a ff		 push	 -1
  00078	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	e8 00 00 00 00	 call	 _DebugBreak@0
$L70013:

; 815  : 
; 816  :     // Song format temporarily turned off for DX8 release.
; 817  : #ifdef DXAPI
; 818  :     return E_NOTIMPL;
; 819  : #else
; 820  : 	CHECK_ZOMBIE(m_fZombie);

  00085	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00088	0f b6 88 78 03
	00 00		 movzx	 ecx, BYTE PTR [eax+888]
  0008f	85 c9		 test	 ecx, ecx
  00091	74 19		 je	 SHORT $L70014
  00093	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@GAFGMFIO@Error?3?5Accessing?5object?5after?5it@
  00098	6a 00		 push	 0
  0009a	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0009f	83 c4 08	 add	 esp, 8
  000a2	b8 16 12 78 08	 mov	 eax, 142086678		; 08781216H
  000a7	e9 9d 06 00 00	 jmp	 $L70004
$L70014:

; 821  : 
; 822  :     // Create RIFF parser. 
; 823  :     CRiffParser Parser(pIStream);

  000ac	8b 55 0c	 mov	 edx, DWORD PTR _pIStream$[ebp]
  000af	52		 push	 edx
  000b0	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000b3	e8 00 00 00 00	 call	 ??0CRiffParser@@QAE@PAUIStream@@@Z ; CRiffParser::CRiffParser

; 824  : 
; 825  :     RIFFIO ckMain;
; 826  :     HRESULT hr = S_OK;

  000b8	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 827  :     // First, clear the song in case it is being read into a second time.
; 828  :     Clear();

  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	83 e9 04	 sub	 ecx, 4
  000c5	e8 00 00 00 00	 call	 ?Clear@CSong@@AAEXXZ	; CSong::Clear

; 829  : 
; 830  :     Parser.EnterList(&ckMain);  

  000ca	8d 45 e0	 lea	 eax, DWORD PTR _ckMain$[ebp]
  000cd	50		 push	 eax
  000ce	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000d1	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList

; 831  :     if (Parser.NextChunk(&hr))

  000d6	8d 4d bc	 lea	 ecx, DWORD PTR _hr$[ebp]
  000d9	51		 push	 ecx
  000da	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000dd	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  000e2	85 c0		 test	 eax, eax
  000e4	0f 84 2a 06 00
	00		 je	 $L70023

; 832  :     {
; 833  :         if (ckMain.fccType == DMUS_FOURCC_SONG_FORM)

  000ea	81 7d e8 44 4d
	53 4f		 cmp	 DWORD PTR _ckMain$[ebp+8], 1330859332 ; 4f534d44H
  000f1	0f 85 1f 03 00
	00		 jne	 $L70032

; 834  :         {
; 835  :             ENTER_CRITICAL_SECTION(&m_CriticalSection);

  000f7	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000fa	83 c2 20	 add	 edx, 32			; 00000020H
  000fd	52		 push	 edx
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 836  :             RIFFIO ckNext;
; 837  :             IDirectMusicContainer *pContainer = NULL; // For handling embedded container with linked objects.

  00104	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _pContainer$70034[ebp], 0

; 838  :             Parser.EnterList(&ckNext);

  0010b	8d 45 98	 lea	 eax, DWORD PTR _ckNext$70033[ebp]
  0010e	50		 push	 eax
  0010f	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  00112	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L70036:

; 839  :             while(Parser.NextChunk(&hr))

  00117	8d 4d bc	 lea	 ecx, DWORD PTR _hr$[ebp]
  0011a	51		 push	 ecx
  0011b	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  0011e	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  00123	85 c0		 test	 eax, eax
  00125	0f 84 bf 02 00
	00		 je	 $L70037

; 840  :             {
; 841  :                 switch(ckNext.ckid)
; 842  :                 {

  0012b	8b 55 98	 mov	 edx, DWORD PTR _ckNext$70033[ebp]
  0012e	89 95 bc f8 ff
	ff		 mov	 DWORD PTR tv143[ebp], edx
  00134	81 bd bc f8 ff
	ff 64 61 74 65	 cmp	 DWORD PTR tv143[ebp], 1702125924 ; 65746164H
  0013e	77 41		 ja	 SHORT $L71888
  00140	81 bd bc f8 ff
	ff 64 61 74 65	 cmp	 DWORD PTR tv143[ebp], 1702125924 ; 65746164H
  0014a	0f 84 8f 00 00
	00		 je	 $L70063
  00150	81 bd bc f8 ff
	ff 52 49 46 46	 cmp	 DWORD PTR tv143[ebp], 1179011410 ; 46464952H
  0015a	0f 84 9a 00 00
	00		 je	 $L70096
  00160	81 bd bc f8 ff
	ff 4c 49 53 54	 cmp	 DWORD PTR tv143[ebp], 1414744396 ; 5453494cH
  0016a	0f 84 8a 00 00
	00		 je	 $L70096
  00170	81 bd bc f8 ff
	ff 67 75 69 64	 cmp	 DWORD PTR tv143[ebp], 1684632935 ; 64697567H
  0017a	74 63		 je	 SHORT $L70063
  0017c	e9 64 02 00 00	 jmp	 $L70039
$L71888:
  00181	81 bd bc f8 ff
	ff 63 61 74 67	 cmp	 DWORD PTR tv143[ebp], 1735680355 ; 67746163H
  0018b	74 52		 je	 SHORT $L70063
  0018d	81 bd bc f8 ff
	ff 73 6e 67 68	 cmp	 DWORD PTR tv143[ebp], 1751608947 ; 68676e73H
  00197	74 11		 je	 SHORT $L70050
  00199	81 bd bc f8 ff
	ff 76 65 72 73	 cmp	 DWORD PTR tv143[ebp], 1936876918 ; 73726576H
  001a3	74 3a		 je	 SHORT $L70063
  001a5	e9 3b 02 00 00	 jmp	 $L70039
$L70050:

; 843  :                     case DMUS_FOURCC_SONG_CHUNK:
; 844  :                         DMUS_IO_SONG_HEADER ioSongHdr;
; 845  :                         ioSongHdr.dwFlags = 0;

  001aa	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _ioSongHdr$70051[ebp], 0

; 846  :                         hr = Parser.Read(&ioSongHdr, sizeof(DMUS_IO_SONG_HEADER));

  001b1	6a 08		 push	 8
  001b3	8d 45 90	 lea	 eax, DWORD PTR _ioSongHdr$70051[ebp]
  001b6	50		 push	 eax
  001b7	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  001ba	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  001bf	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 847  :                         if(SUCCEEDED(hr))

  001c2	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001c6	7c 12		 jl	 SHORT $L70054

; 848  :                         {
; 849  :                             m_dwFlags = ioSongHdr.dwFlags;

  001c8	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001cb	8b 55 90	 mov	 edx, DWORD PTR _ioSongHdr$70051[ebp]
  001ce	89 51 3c	 mov	 DWORD PTR [ecx+60], edx

; 850  :                             m_dwStartSegID = ioSongHdr.dwStartSegID;

  001d1	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001d4	8b 4d 94	 mov	 ecx, DWORD PTR _ioSongHdr$70051[ebp+4]
  001d7	89 48 40	 mov	 DWORD PTR [eax+64], ecx
$L70054:

; 851  :                         }
; 852  :                         break;

  001da	e9 06 02 00 00	 jmp	 $L70039
$L70063:

; 853  : 			        case DMUS_FOURCC_GUID_CHUNK:
; 854  : 			        case DMUS_FOURCC_VERSION_CHUNK:
; 855  : 			        case DMUS_FOURCC_CATEGORY_CHUNK:
; 856  : 			        case DMUS_FOURCC_DATE_CHUNK:
; 857  :                         hr = m_Info.ReadChunk(&Parser,ckNext.ckid);

  001df	8b 55 98	 mov	 edx, DWORD PTR _ckNext$70033[ebp]
  001e2	52		 push	 edx
  001e3	8d 45 c0	 lea	 eax, DWORD PTR _Parser$[ebp]
  001e6	50		 push	 eax
  001e7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001ea	83 c1 48	 add	 ecx, 72			; 00000048H
  001ed	e8 00 00 00 00	 call	 ?ReadChunk@CInfo@@QAEJPAVCRiffParser@@K@Z ; CInfo::ReadChunk
  001f2	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 858  :                         break;

  001f5	e9 eb 01 00 00	 jmp	 $L70039
$L70096:

; 859  :                     case FOURCC_LIST:
; 860  :                     case FOURCC_RIFF:
; 861  :                         switch(ckNext.fccType)
; 862  :                         {

  001fa	8b 4d a0	 mov	 ecx, DWORD PTR _ckNext$70033[ebp+8]
  001fd	89 8d b8 f8 ff
	ff		 mov	 DWORD PTR tv159[ebp], ecx
  00203	81 bd b8 f8 ff
	ff 44 4d 41 50	 cmp	 DWORD PTR tv159[ebp], 1346456900 ; 50414d44H
  0020d	77 2d		 ja	 SHORT $L71887
  0020f	81 bd b8 f8 ff
	ff 44 4d 41 50	 cmp	 DWORD PTR tv159[ebp], 1346456900 ; 50414d44H
  00219	0f 84 a4 01 00
	00		 je	 $L70167
  0021f	81 bd b8 f8 ff
	ff 44 4d 43 4e	 cmp	 DWORD PTR tv159[ebp], 1313033540 ; 4e434d44H
  00229	74 51		 je	 SHORT $L70126
  0022b	81 bd b8 f8 ff
	ff 55 4e 46 4f	 cmp	 DWORD PTR tv159[ebp], 1330007637 ; 4f464e55H
  00235	74 2a		 je	 SHORT $L70117
  00237	e9 a9 01 00 00	 jmp	 $L70039
$L71887:
  0023c	81 bd b8 f8 ff
	ff 73 65 67 6c	 cmp	 DWORD PTR tv159[ebp], 1818715507 ; 6c676573H
  00246	0f 84 4f 01 00
	00		 je	 $L70149
  0024c	81 bd b8 f8 ff
	ff 73 72 73 6c	 cmp	 DWORD PTR tv159[ebp], 1819505267 ; 6c737273H
  00256	0f 84 53 01 00
	00		 je	 $L70158
  0025c	e9 84 01 00 00	 jmp	 $L70039
$L70117:

; 863  :                         case DMUS_FOURCC_UNFO_LIST:
; 864  :                                 hr = m_Info.ReadChunk(&Parser,ckNext.fccType);

  00261	8b 55 a0	 mov	 edx, DWORD PTR _ckNext$70033[ebp+8]
  00264	52		 push	 edx
  00265	8d 45 c0	 lea	 eax, DWORD PTR _Parser$[ebp]
  00268	50		 push	 eax
  00269	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0026c	83 c1 48	 add	 ecx, 72			; 00000048H
  0026f	e8 00 00 00 00	 call	 ?ReadChunk@CInfo@@QAEJPAVCRiffParser@@K@Z ; CInfo::ReadChunk
  00274	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 865  :                                 break;

  00277	e9 69 01 00 00	 jmp	 $L70039
$L70126:

; 866  :                         case DMUS_FOURCC_CONTAINER_FORM:
; 867  :                             // An embedded container RIFF chunk which includes a bunch
; 868  :                             // of objects referenced by the song. This should precede the
; 869  :                             // segments and gets loaded prior to them. Loading this
; 870  :                             // causes all of its objects to get SetObject'd in the loader,
; 871  :                             // so they later get pulled in as requested by the tracks in the segments.
; 872  :                             // After the tracks are loaded, the loader references are
; 873  :                             // released by a call to release the IDirectMusicContainer.
; 874  :                             {
; 875  :                                 DMUS_OBJECTDESC Desc;
; 876  :                                 IDirectMusicLoader *pLoader;
; 877  :                                 IDirectMusicGetLoader *pGetLoader;
; 878  :                                 HRESULT hr = pIStream->QueryInterface(IID_IDirectMusicGetLoader,(void **) &pGetLoader);

  0027c	8d 4d 88	 lea	 ecx, DWORD PTR _pGetLoader$70129[ebp]
  0027f	51		 push	 ecx
  00280	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicGetLoader
  00285	8b 55 0c	 mov	 edx, DWORD PTR _pIStream$[ebp]
  00288	8b 02		 mov	 eax, DWORD PTR [edx]
  0028a	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  0028d	51		 push	 ecx
  0028e	ff 10		 call	 DWORD PTR [eax]
  00290	89 45 84	 mov	 DWORD PTR _hr$70130[ebp], eax

; 879  :                                 if (SUCCEEDED(hr))

  00293	83 7d 84 00	 cmp	 DWORD PTR _hr$70130[ebp], 0
  00297	0f 8c fc 00 00
	00		 jl	 $L70133

; 880  :                                 {
; 881  :                                     if (SUCCEEDED(pGetLoader->GetLoader(&pLoader)))

  0029d	8d 55 8c	 lea	 edx, DWORD PTR _pLoader$70128[ebp]
  002a0	52		 push	 edx
  002a1	8b 45 88	 mov	 eax, DWORD PTR _pGetLoader$70129[ebp]
  002a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a6	8b 55 88	 mov	 edx, DWORD PTR _pGetLoader$70129[ebp]
  002a9	52		 push	 edx
  002aa	ff 51 0c	 call	 DWORD PTR [ecx+12]
  002ad	85 c0		 test	 eax, eax
  002af	0f 8c d8 00 00
	00		 jl	 $L70135

; 882  :                                     {
; 883  :                                         // Move back stream's current position
; 884  :                                         Parser.SeekBack();

  002b5	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  002b8	e8 00 00 00 00	 call	 ?SeekBack@CRiffParser@@QAEJXZ ; CRiffParser::SeekBack

; 885  :                                         Desc.dwSize = sizeof(Desc);

  002bd	c7 85 30 fc ff
	ff 50 03 00 00	 mov	 DWORD PTR _Desc$70127[ebp], 848 ; 00000350H

; 886  :                                         Desc.dwValidData = DMUS_OBJ_CLASS | DMUS_OBJ_STREAM;

  002c7	c7 85 34 fc ff
	ff 02 08 00 00	 mov	 DWORD PTR _Desc$70127[ebp+4], 2050 ; 00000802H

; 887  :                                         Desc.guidClass = CLSID_DirectMusicContainer;

  002d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicContainer
  002d6	89 85 48 fc ff
	ff		 mov	 DWORD PTR _Desc$70127[ebp+24], eax
  002dc	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _CLSID_DirectMusicContainer+4
  002e2	89 8d 4c fc ff
	ff		 mov	 DWORD PTR _Desc$70127[ebp+28], ecx
  002e8	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicContainer+8
  002ee	89 95 50 fc ff
	ff		 mov	 DWORD PTR _Desc$70127[ebp+32], edx
  002f4	a1 0c 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicContainer+12
  002f9	89 85 54 fc ff
	ff		 mov	 DWORD PTR _Desc$70127[ebp+36], eax

; 888  :                                         Desc.pStream = pIStream;

  002ff	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00302	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _Desc$70127[ebp+844], ecx

; 889  :                                         pLoader->GetObject(&Desc,IID_IDirectMusicContainer,(void **) &pContainer);

  00308	8d 55 b8	 lea	 edx, DWORD PTR _pContainer$70034[ebp]
  0030b	52		 push	 edx
  0030c	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicContainer
  00311	8d 85 30 fc ff
	ff		 lea	 eax, DWORD PTR _Desc$70127[ebp]
  00317	50		 push	 eax
  00318	8b 4d 8c	 mov	 ecx, DWORD PTR _pLoader$70128[ebp]
  0031b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0031d	8b 45 8c	 mov	 eax, DWORD PTR _pLoader$70128[ebp]
  00320	50		 push	 eax
  00321	ff 52 0c	 call	 DWORD PTR [edx+12]

; 890  :                                         if (pContainer)

  00324	83 7d b8 00	 cmp	 DWORD PTR _pContainer$70034[ebp], 0
  00328	74 4f		 je	 SHORT $L70137

; 891  :                                         {
; 892  :                                             // Don't cache the container object! We want it and the
; 893  :                                             // objects it references to go away when the segment is done loading.
; 894  :                                             IDirectMusicObject *pObject = NULL;

  0032a	c7 85 2c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _pObject$70138[ebp], 0

; 895  :                                             pContainer->QueryInterface(IID_IDirectMusicObject,(void **)&pObject);

  00334	8d 8d 2c fc ff
	ff		 lea	 ecx, DWORD PTR _pObject$70138[ebp]
  0033a	51		 push	 ecx
  0033b	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicObject
  00340	8b 55 b8	 mov	 edx, DWORD PTR _pContainer$70034[ebp]
  00343	8b 02		 mov	 eax, DWORD PTR [edx]
  00345	8b 4d b8	 mov	 ecx, DWORD PTR _pContainer$70034[ebp]
  00348	51		 push	 ecx
  00349	ff 10		 call	 DWORD PTR [eax]

; 896  :                                             if (pObject)

  0034b	83 bd 2c fc ff
	ff 00		 cmp	 DWORD PTR _pObject$70138[ebp], 0
  00352	74 25		 je	 SHORT $L70137

; 897  :                                             {
; 898  :                                                 pLoader->ReleaseObject(pObject);

  00354	8b 95 2c fc ff
	ff		 mov	 edx, DWORD PTR _pObject$70138[ebp]
  0035a	52		 push	 edx
  0035b	8b 45 8c	 mov	 eax, DWORD PTR _pLoader$70128[ebp]
  0035e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00360	8b 55 8c	 mov	 edx, DWORD PTR _pLoader$70128[ebp]
  00363	52		 push	 edx
  00364	ff 51 28	 call	 DWORD PTR [ecx+40]

; 899  :                                                 pObject->Release();

  00367	8b 85 2c fc ff
	ff		 mov	 eax, DWORD PTR _pObject$70138[ebp]
  0036d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036f	8b 95 2c fc ff
	ff		 mov	 edx, DWORD PTR _pObject$70138[ebp]
  00375	52		 push	 edx
  00376	ff 51 08	 call	 DWORD PTR [ecx+8]
$L70137:

; 900  :                                             }
; 901  :                                         }
; 902  :                                         // Now, seek to the end of this chunk.
; 903  :                                         Parser.SeekForward();

  00379	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  0037c	e8 00 00 00 00	 call	 ?SeekForward@CRiffParser@@QAEJXZ ; CRiffParser::SeekForward

; 904  :                                         pLoader->Release();

  00381	8b 45 8c	 mov	 eax, DWORD PTR _pLoader$70128[ebp]
  00384	8b 08		 mov	 ecx, DWORD PTR [eax]
  00386	8b 55 8c	 mov	 edx, DWORD PTR _pLoader$70128[ebp]
  00389	52		 push	 edx
  0038a	ff 51 08	 call	 DWORD PTR [ecx+8]
$L70135:

; 905  :                                     }
; 906  :                                     pGetLoader->Release();

  0038d	8b 45 88	 mov	 eax, DWORD PTR _pGetLoader$70129[ebp]
  00390	8b 08		 mov	 ecx, DWORD PTR [eax]
  00392	8b 55 88	 mov	 edx, DWORD PTR _pGetLoader$70129[ebp]
  00395	52		 push	 edx
  00396	ff 51 08	 call	 DWORD PTR [ecx+8]
$L70133:

; 907  :                                 }
; 908  :                             }
; 909  :                             break;

  00399	eb 4a		 jmp	 SHORT $L70039
$L70149:

; 910  :                         case DMUS_FOURCC_SONGSEGMENTS_LIST:
; 911  :                             hr = LoadSegmentList(&Parser); //pIStream, pIDirectMusicStream, ckNext);

  0039b	8d 45 c0	 lea	 eax, DWORD PTR _Parser$[ebp]
  0039e	50		 push	 eax
  0039f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  003a2	83 e9 04	 sub	 ecx, 4
  003a5	e8 00 00 00 00	 call	 ?LoadSegmentList@CSong@@AAEJPAVCRiffParser@@@Z ; CSong::LoadSegmentList
  003aa	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 912  :                             break;

  003ad	eb 36		 jmp	 SHORT $L70039
$L70158:

; 913  :                         case DMUS_FOURCC_SEGREFS_LIST:
; 914  :                             hr = LoadVirtualSegmentList(&Parser);

  003af	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  003b2	51		 push	 ecx
  003b3	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  003b6	83 e9 04	 sub	 ecx, 4
  003b9	e8 00 00 00 00	 call	 ?LoadVirtualSegmentList@CSong@@AAEJPAVCRiffParser@@@Z ; CSong::LoadVirtualSegmentList
  003be	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 915  :                             break;

  003c1	eb 22		 jmp	 SHORT $L70039
$L70167:

; 916  :                         case DMUS_FOURCC_AUDIOPATH_FORM:
; 917  :                             // Move back to start of this chunk.
; 918  :                             Parser.SeekBack();

  003c3	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  003c6	e8 00 00 00 00	 call	 ?SeekBack@CRiffParser@@QAEJXZ ; CRiffParser::SeekBack

; 919  :                             hr = LoadAudioPath(pIStream);

  003cb	8b 55 0c	 mov	 edx, DWORD PTR _pIStream$[ebp]
  003ce	52		 push	 edx
  003cf	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  003d2	83 e9 04	 sub	 ecx, 4
  003d5	e8 00 00 00 00	 call	 ?LoadAudioPath@CSong@@AAEJPAUIStream@@@Z ; CSong::LoadAudioPath
  003da	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 920  :                             // Now, seek to the end of this chunk.
; 921  :                             Parser.SeekForward();

  003dd	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  003e0	e8 00 00 00 00	 call	 ?SeekForward@CRiffParser@@QAEJXZ ; CRiffParser::SeekForward
$L70039:

; 922  :                             break;
; 923  :                         default:
; 924  :                             break;
; 925  :                         }
; 926  :                         break;
; 927  : 
; 928  :                     default:
; 929  :                         break;
; 930  : 
; 931  :                 }
; 932  :             }

  003e5	e9 2d fd ff ff	 jmp	 $L70036
$L70037:

; 933  :             Parser.LeaveList();

  003ea	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  003ed	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 934  :             LEAVE_CRITICAL_SECTION(&m_CriticalSection);

  003f2	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  003f5	83 c0 20	 add	 eax, 32			; 00000020H
  003f8	50		 push	 eax
  003f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 935  : 
; 936  :             if (pContainer)

  003ff	83 7d b8 00	 cmp	 DWORD PTR _pContainer$70034[ebp], 0
  00403	74 0c		 je	 SHORT $L70170

; 937  :             {
; 938  :                 pContainer->Release();

  00405	8b 4d b8	 mov	 ecx, DWORD PTR _pContainer$70034[ebp]
  00408	8b 11		 mov	 edx, DWORD PTR [ecx]
  0040a	8b 45 b8	 mov	 eax, DWORD PTR _pContainer$70034[ebp]
  0040d	50		 push	 eax
  0040e	ff 52 08	 call	 DWORD PTR [edx+8]
$L70170:

; 939  :             }
; 940  :         }
; 941  :         else

  00411	e9 fe 02 00 00	 jmp	 $L70023
$L70032:

; 942  :         {
; 943  :             // Couldn't find the chunk header for a song. 
; 944  :             // But, maybe this is actually a segment, in which case see if
; 945  :             // the segment object will load it.
; 946  :             CSegment *pSegment = new CSegment;

  00416	68 e0 03 00 00	 push	 992			; 000003e0H
  0041b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00420	83 c4 04	 add	 esp, 4
  00423	89 85 cc f8 ff
	ff		 mov	 DWORD PTR $T71889[ebp], eax
  00429	83 bd cc f8 ff
	ff 00		 cmp	 DWORD PTR $T71889[ebp], 0
  00430	74 13		 je	 SHORT $L71890
  00432	8b 8d cc f8 ff
	ff		 mov	 ecx, DWORD PTR $T71889[ebp]
  00438	e8 00 00 00 00	 call	 ??0CSegment@@QAE@XZ	; CSegment::CSegment
  0043d	89 85 b4 f8 ff
	ff		 mov	 DWORD PTR tv248[ebp], eax
  00443	eb 0a		 jmp	 SHORT $L71891
$L71890:
  00445	c7 85 b4 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv248[ebp], 0
$L71891:
  0044f	8b 8d b4 f8 ff
	ff		 mov	 ecx, DWORD PTR tv248[ebp]
  00455	89 8d 28 fc ff
	ff		 mov	 DWORD PTR _pSegment$70172[ebp], ecx

; 947  :             if (pSegment)

  0045b	83 bd 28 fc ff
	ff 00		 cmp	 DWORD PTR _pSegment$70172[ebp], 0
  00462	0f 84 a5 02 00
	00		 je	 $L70175

; 948  :             {
; 949  :                 pSegment->AddRef(); // Segment::Load (and possibly others) may need the refcount

  00468	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  0046e	8b 02		 mov	 eax, DWORD PTR [edx]
  00470	8b 8d 28 fc ff
	ff		 mov	 ecx, DWORD PTR _pSegment$70172[ebp]
  00476	51		 push	 ecx
  00477	ff 50 04	 call	 DWORD PTR [eax+4]

; 950  :                 // Force the version so audiopath functionality will be supported.
; 951  :                 pSegment->m_dwVersion = 8;

  0047a	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  00480	c7 82 bc 03 00
	00 08 00 00 00	 mov	 DWORD PTR [edx+956], 8

; 952  :                 Parser.SeekBack();

  0048a	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  0048d	e8 00 00 00 00	 call	 ?SeekBack@CRiffParser@@QAEJXZ ; CRiffParser::SeekBack

; 953  :                 hr = pSegment->Load(pIStream);

  00492	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00495	50		 push	 eax
  00496	8b 8d 28 fc ff
	ff		 mov	 ecx, DWORD PTR _pSegment$70172[ebp]
  0049c	83 c1 04	 add	 ecx, 4
  0049f	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  004a5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  004a8	51		 push	 ecx
  004a9	ff 50 14	 call	 DWORD PTR [eax+20]
  004ac	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 954  :                 if (SUCCEEDED(hr))

  004af	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  004b3	0f 8c 0c 02 00
	00		 jl	 $L70177

; 955  :                 {
; 956  :                     DMUS_OBJECTDESC Desc;
; 957  :                     Desc.dwSize = sizeof (Desc);

  004b9	c7 85 d0 f8 ff
	ff 50 03 00 00	 mov	 DWORD PTR _Desc$70178[ebp], 848 ; 00000350H

; 958  :                     pSegment->GetDescriptor(&Desc);

  004c3	8d 8d d0 f8 ff
	ff		 lea	 ecx, DWORD PTR _Desc$70178[ebp]
  004c9	51		 push	 ecx
  004ca	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  004d0	83 c2 08	 add	 edx, 8
  004d3	8b 85 28 fc ff
	ff		 mov	 eax, DWORD PTR _pSegment$70172[ebp]
  004d9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004dc	52		 push	 edx
  004dd	ff 51 0c	 call	 DWORD PTR [ecx+12]

; 959  :                     Desc.guidClass = CLSID_DirectMusicSong;

  004e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicSong
  004e6	89 95 e8 f8 ff
	ff		 mov	 DWORD PTR _Desc$70178[ebp+24], edx
  004ec	a1 04 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicSong+4
  004f1	89 85 ec f8 ff
	ff		 mov	 DWORD PTR _Desc$70178[ebp+28], eax
  004f7	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _CLSID_DirectMusicSong+8
  004fd	89 8d f0 f8 ff
	ff		 mov	 DWORD PTR _Desc$70178[ebp+32], ecx
  00503	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicSong+12
  00509	89 95 f4 f8 ff
	ff		 mov	 DWORD PTR _Desc$70178[ebp+36], edx

; 960  :                     SetDescriptor(&Desc);

  0050f	8d 85 d0 f8 ff
	ff		 lea	 eax, DWORD PTR _Desc$70178[ebp]
  00515	50		 push	 eax
  00516	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00519	83 c1 04	 add	 ecx, 4
  0051c	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0051f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00522	51		 push	 ecx
  00523	ff 50 10	 call	 DWORD PTR [eax+16]

; 961  :                     // AddSegment addref's by one.
; 962  :                     m_SegmentList.AddSegment(pSegment,0);

  00526	6a 00		 push	 0
  00528	8b 8d 28 fc ff
	ff		 mov	 ecx, DWORD PTR _pSegment$70172[ebp]
  0052e	51		 push	 ecx
  0052f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00532	83 c1 14	 add	 ecx, 20			; 00000014H
  00535	e8 00 00 00 00	 call	 ?AddSegment@CSongSegmentList@@QAEJPAVCSegment@@K@Z ; CSongSegmentList::AddSegment

; 963  :                     pSegment->GetAudioPathConfig((IUnknown **) &m_pAudioPathConfig);

  0053a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0053d	83 c2 0c	 add	 edx, 12			; 0000000cH
  00540	52		 push	 edx
  00541	8b 85 28 fc ff
	ff		 mov	 eax, DWORD PTR _pSegment$70172[ebp]
  00547	8b 08		 mov	 ecx, DWORD PTR [eax]
  00549	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  0054f	52		 push	 edx
  00550	ff 51 7c	 call	 DWORD PTR [ecx+124]

; 964  :                     m_dwStartSegID = 0; // Points to this segment.

  00553	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00556	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 965  :                     CVirtualSegment *pVirtual = new CVirtualSegment;

  0055d	68 f0 00 00 00	 push	 240			; 000000f0H
  00562	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00567	83 c4 04	 add	 esp, 4
  0056a	89 85 c8 f8 ff
	ff		 mov	 DWORD PTR $T71892[ebp], eax
  00570	83 bd c8 f8 ff
	ff 00		 cmp	 DWORD PTR $T71892[ebp], 0
  00577	74 13		 je	 SHORT $L71893
  00579	8b 8d c8 f8 ff
	ff		 mov	 ecx, DWORD PTR $T71892[ebp]
  0057f	e8 00 00 00 00	 call	 ??0CVirtualSegment@@QAE@XZ ; CVirtualSegment::CVirtualSegment
  00584	89 85 b0 f8 ff
	ff		 mov	 DWORD PTR tv327[ebp], eax
  0058a	eb 0a		 jmp	 SHORT $L71894
$L71893:
  0058c	c7 85 b0 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv327[ebp], 0
$L71894:
  00596	8b 8d b0 f8 ff
	ff		 mov	 ecx, DWORD PTR tv327[ebp]
  0059c	89 8d 24 fc ff
	ff		 mov	 DWORD PTR _pVirtual$70180[ebp], ecx

; 966  :                     if (pVirtual)

  005a2	83 bd 24 fc ff
	ff 00		 cmp	 DWORD PTR _pVirtual$70180[ebp], 0
  005a9	0f 84 fd 00 00
	00		 je	 $L70183

; 967  :                     {
; 968  :                         pVirtual->m_pSourceSegment = pSegment;

  005af	8b 95 24 fc ff
	ff		 mov	 edx, DWORD PTR _pVirtual$70180[ebp]
  005b5	8b 85 28 fc ff
	ff		 mov	 eax, DWORD PTR _pSegment$70172[ebp]
  005bb	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 969  :                         pSegment->AddRef();

  005be	8b 8d 28 fc ff
	ff		 mov	 ecx, DWORD PTR _pSegment$70172[ebp]
  005c4	8b 11		 mov	 edx, DWORD PTR [ecx]
  005c6	8b 85 28 fc ff
	ff		 mov	 eax, DWORD PTR _pSegment$70172[ebp]
  005cc	50		 push	 eax
  005cd	ff 52 04	 call	 DWORD PTR [edx+4]

; 970  :                         pVirtual->m_SegHeader.dwRepeats = pSegment->m_dwRepeats;

  005d0	8b 8d 24 fc ff
	ff		 mov	 ecx, DWORD PTR _pVirtual$70180[ebp]
  005d6	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  005dc	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  005df	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 971  :                         pVirtual->m_SegHeader.dwResolution = pSegment->m_dwResolution;

  005e2	8b 8d 24 fc ff
	ff		 mov	 ecx, DWORD PTR _pVirtual$70180[ebp]
  005e8	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  005ee	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  005f1	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 972  :                         pVirtual->m_SegHeader.mtLength = pSegment->m_mtLength;

  005f4	8b 8d 24 fc ff
	ff		 mov	 ecx, DWORD PTR _pVirtual$70180[ebp]
  005fa	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  00600	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  00603	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 973  :                         pVirtual->m_SegHeader.mtLoopEnd = pSegment->m_mtLoopEnd;

  00606	8b 8d 24 fc ff
	ff		 mov	 ecx, DWORD PTR _pVirtual$70180[ebp]
  0060c	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  00612	8b 42 7c	 mov	 eax, DWORD PTR [edx+124]
  00615	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 974  :                         pVirtual->m_SegHeader.mtLoopStart = pSegment->m_mtLoopStart;

  00618	8b 8d 24 fc ff
	ff		 mov	 ecx, DWORD PTR _pVirtual$70180[ebp]
  0061e	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  00624	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00627	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 975  :                         pVirtual->m_SegHeader.mtPlayStart = pSegment->m_mtStart;

  0062a	8b 8d 24 fc ff
	ff		 mov	 ecx, DWORD PTR _pVirtual$70180[ebp]
  00630	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  00636	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00639	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 976  :                         pVirtual->m_SegHeader.rtLength = pSegment->m_rtLength;

  0063c	8b 8d 24 fc ff
	ff		 mov	 ecx, DWORD PTR _pVirtual$70180[ebp]
  00642	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  00648	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  0064b	89 41 40	 mov	 DWORD PTR [ecx+64], eax
  0064e	8b 52 5c	 mov	 edx, DWORD PTR [edx+92]
  00651	89 51 44	 mov	 DWORD PTR [ecx+68], edx

; 977  :                         pVirtual->m_SegHeader.dwFlags = pSegment->m_dwSegFlags;

  00654	8b 85 24 fc ff
	ff		 mov	 eax, DWORD PTR _pVirtual$70180[ebp]
  0065a	8b 8d 28 fc ff
	ff		 mov	 ecx, DWORD PTR _pSegment$70172[ebp]
  00660	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00663	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 978  :                         if (pSegment->m_Info.m_dwValidData & DMUS_OBJ_NAME)

  00666	8b 85 28 fc ff
	ff		 mov	 eax, DWORD PTR _pSegment$70172[ebp]
  0066c	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00672	83 e1 04	 and	 ecx, 4
  00675	85 c9		 test	 ecx, ecx
  00677	74 1f		 je	 SHORT $L70184

; 979  :                         {
; 980  :                             wcscpy(pVirtual->m_wszName,pSegment->m_Info.m_wszName);

  00679	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  0067f	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00685	52		 push	 edx
  00686	8b 85 24 fc ff
	ff		 mov	 eax, DWORD PTR _pVirtual$70180[ebp]
  0068c	83 c0 6c	 add	 eax, 108		; 0000006cH
  0068f	50		 push	 eax
  00690	e8 00 00 00 00	 call	 _wcscpy
  00695	83 c4 08	 add	 esp, 8
$L70184:

; 981  :                         }
; 982  :                         m_VirtualSegmentList.AddHead(pVirtual);

  00698	8b 8d 24 fc ff
	ff		 mov	 ecx, DWORD PTR _pVirtual$70180[ebp]
  0069e	51		 push	 ecx
  0069f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  006a2	83 c1 1c	 add	 ecx, 28			; 0000001cH
  006a5	e8 00 00 00 00	 call	 ?AddHead@CVirtualSegmentList@@QAEXPAVCVirtualSegment@@@Z ; CVirtualSegmentList::AddHead

; 983  :                     }                
; 984  :                     else

  006aa	eb 07		 jmp	 SHORT $L70185
$L70183:

; 985  :                     {
; 986  :                         hr = E_OUTOFMEMORY;

  006ac	c7 45 bc 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$L70185:

; 987  :                     }
; 988  :                     pSegment->Release(); // release the initial AddRef

  006b3	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  006b9	8b 02		 mov	 eax, DWORD PTR [edx]
  006bb	8b 8d 28 fc ff
	ff		 mov	 ecx, DWORD PTR _pSegment$70172[ebp]
  006c1	51		 push	 ecx
  006c2	ff 50 08	 call	 DWORD PTR [eax+8]
$L70177:

; 989  :                 }
; 990  :                 if (FAILED(hr))

  006c5	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  006c9	7d 40		 jge	 SHORT $L70188

; 991  :                 {
; 992  :                     delete pSegment;

  006cb	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR _pSegment$70172[ebp]
  006d1	89 95 c0 f8 ff
	ff		 mov	 DWORD PTR $T71896[ebp], edx
  006d7	8b 85 c0 f8 ff
	ff		 mov	 eax, DWORD PTR $T71896[ebp]
  006dd	89 85 c4 f8 ff
	ff		 mov	 DWORD PTR $T71895[ebp], eax
  006e3	83 bd c4 f8 ff
	ff 00		 cmp	 DWORD PTR $T71895[ebp], 0
  006ea	74 15		 je	 SHORT $L71897
  006ec	6a 01		 push	 1
  006ee	8b 8d c4 f8 ff
	ff		 mov	 ecx, DWORD PTR $T71895[ebp]
  006f4	e8 00 00 00 00	 call	 ??_GCSegment@@QAEPAXI@Z
  006f9	89 85 ac f8 ff
	ff		 mov	 DWORD PTR tv378[ebp], eax
  006ff	eb 0a		 jmp	 SHORT $L70188
$L71897:
  00701	c7 85 ac f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv378[ebp], 0
$L70188:

; 993  :                 }
; 994  :             }
; 995  :             else

  0070b	eb 07		 jmp	 SHORT $L70023
$L70175:

; 996  :             {
; 997  :                 hr = E_OUTOFMEMORY;

  0070d	c7 45 bc 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$L70023:

; 998  :             }
; 999  :         }
; 1000 :     }
; 1001 :     // If there are no virtual segments, clear the song and fail the load
; 1002 :     if ( !m_VirtualSegmentList.GetHead() )

  00714	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00717	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0071a	e8 00 00 00 00	 call	 ?GetHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ ; CVirtualSegmentList::GetHead
  0071f	85 c0		 test	 eax, eax
  00721	75 12		 jne	 SHORT $L70193

; 1003 :     {
; 1004 :         Clear();

  00723	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00726	83 e9 04	 sub	 ecx, 4
  00729	e8 00 00 00 00	 call	 ?Clear@CSong@@AAEXXZ	; CSong::Clear

; 1005 :         hr = DMUS_E_NOT_INIT;

  0072e	c7 45 bc 62 11
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005397150 ; 88781162H
$L70193:

; 1006 :     }
; 1007 :     if (SUCCEEDED(hr)) Instantiate();

  00735	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00739	7c 0b		 jl	 SHORT $L70199
  0073b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0073e	83 e9 04	 sub	 ecx, 4
  00741	e8 00 00 00 00	 call	 ?Instantiate@CSong@@AAEJXZ ; CSong::Instantiate
$L70199:

; 1008 :     return hr;

  00746	8b 45 bc	 mov	 eax, DWORD PTR _hr$[ebp]
$L70004:

; 1009 : #endif
; 1010 : }

  00749	8b e5		 mov	 esp, ebp
  0074b	5d		 pop	 ebp
  0074c	c2 08 00	 ret	 8
?Load@CSong@@UAGJPAUIStream@@@Z ENDP			; CSong::Load
_TEXT	ENDS
EXTRN	??1CSegment@@QAE@XZ:NEAR			; CSegment::~CSegment
; Function compile flags: /Odt
;	COMDAT ??_GCSegment@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCSegment@@QAEPAXI@Z PROC NEAR			; CSegment::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSegment@@QAE@XZ	; CSegment::~CSegment
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L70203
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L70203:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCSegment@@QAEPAXI@Z ENDP				; CSegment::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_07KCKPANJI@pStream?$AA@			; `string'
EXTRN	??0CAudioPathConfig@@QAE@XZ:NEAR		; CAudioPathConfig::CAudioPathConfig
;	COMDAT ??_C@_07KCKPANJI@pStream?$AA@
CONST	SEGMENT
??_C@_07KCKPANJI@pStream?$AA@ DB 'pStream', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?LoadAudioPath@CSong@@AAEJPAUIStream@@@Z
_TEXT	SEGMENT
tv74 = -20
_this$ = -16
$T71906 = -12
_pPath$ = -8
_hr$ = -4
_pStream$ = 8
?LoadAudioPath@CSong@@AAEJPAUIStream@@@Z PROC NEAR	; CSong::LoadAudioPath, COMDAT
; _this$ = ecx

; 1013 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1014 :     assert(pStream);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  0000d	75 14		 jne	 SHORT $L71905
  0000f	68 f6 03 00 00	 push	 1014			; 000003f6H
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07KCKPANJI@pStream?$AA@
  0001e	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L71905:

; 1015 : 
; 1016 :     CAudioPathConfig *pPath = new CAudioPathConfig;

  00023	68 6c 03 00 00	 push	 876			; 0000036cH
  00028	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 f4	 mov	 DWORD PTR $T71906[ebp], eax
  00033	83 7d f4 00	 cmp	 DWORD PTR $T71906[ebp], 0
  00037	74 0d		 je	 SHORT $L71907
  00039	8b 4d f4	 mov	 ecx, DWORD PTR $T71906[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CAudioPathConfig@@QAE@XZ ; CAudioPathConfig::CAudioPathConfig
  00041	89 45 ec	 mov	 DWORD PTR tv74[ebp], eax
  00044	eb 07		 jmp	 SHORT $L71908
$L71907:
  00046	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$L71908:
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR tv74[ebp]
  00050	89 4d f8	 mov	 DWORD PTR _pPath$[ebp], ecx

; 1017 :     if (pPath == NULL) {

  00053	83 7d f8 00	 cmp	 DWORD PTR _pPath$[ebp], 0
  00057	75 07		 jne	 SHORT $L70213

; 1018 :         return E_OUTOFMEMORY;

  00059	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  0005e	eb 54		 jmp	 SHORT $L70207
$L70213:

; 1019 :     }
; 1020 : 
; 1021 :     HRESULT hr = pPath->Load(pStream);

  00060	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  00063	52		 push	 edx
  00064	8b 45 f8	 mov	 eax, DWORD PTR _pPath$[ebp]
  00067	8b 08		 mov	 ecx, DWORD PTR [eax]
  00069	8b 55 f8	 mov	 edx, DWORD PTR _pPath$[ebp]
  0006c	52		 push	 edx
  0006d	ff 51 14	 call	 DWORD PTR [ecx+20]
  00070	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 1022 : 
; 1023 :     ENTER_CRITICAL_SECTION(&m_CriticalSection);

  00073	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00076	83 c0 24	 add	 eax, 36			; 00000024H
  00079	50		 push	 eax
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 1024 :     if(m_pAudioPathConfig)

  00080	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00087	74 12		 je	 SHORT $L70216

; 1025 :     {
; 1026 :         m_pAudioPathConfig->Release();

  00089	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0008c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00095	8b 00		 mov	 eax, DWORD PTR [eax]
  00097	52		 push	 edx
  00098	ff 50 08	 call	 DWORD PTR [eax+8]
$L70216:

; 1027 :     }
; 1028 :     m_pAudioPathConfig = pPath;

  0009b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	8b 55 f8	 mov	 edx, DWORD PTR _pPath$[ebp]
  000a1	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1029 :     LEAVE_CRITICAL_SECTION(&m_CriticalSection);

  000a4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a7	83 c0 24	 add	 eax, 36			; 00000024H
  000aa	50		 push	 eax
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 1030 :     
; 1031 :     return hr;

  000b1	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
$L70207:

; 1032 : }

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 04 00	 ret	 4
?LoadAudioPath@CSong@@AAEJPAUIStream@@@Z ENDP		; CSong::LoadAudioPath
_TEXT	ENDS
PUBLIC	??_C@_07HPHNCKCM@pParser?$AA@			; `string'
PUBLIC	?GetStream@CRiffParser@@QAEPAUIStream@@XZ	; CRiffParser::GetStream
EXTRN	?LoadReferencedObject@CLinkParser@@QAEJPAVCRiffParser@@PAPAXABU_GUID@@H@Z:NEAR ; CLinkParser::LoadReferencedObject
EXTRN	_IID_CSegment:BYTE
;	COMDAT ??_C@_07HPHNCKCM@pParser?$AA@
CONST	SEGMENT
??_C@_07HPHNCKCM@pParser?$AA@ DB 'pParser', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?LoadSegmentList@CSong@@AAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT
tv92 = -104
tv83 = -100
tv75 = -96
_this$ = -92
$T71913 = -88
_LinkParser$70311 = -81
_pSegment$70295 = -80
_hr$ = -76
_ckNext$ = -72
_dwSegmentCount$ = -36
_ckChild$ = -32
_pParser$ = 8
?LoadSegmentList@CSong@@AAEJPAVCRiffParser@@@Z PROC NEAR ; CSong::LoadSegmentList, COMDAT
; _this$ = ecx

; 1151 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	89 4d a4	 mov	 DWORD PTR _this$[ebp], ecx

; 1152 :     assert(pParser);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pParser$[ebp], 0
  0000d	75 14		 jne	 SHORT $L71912
  0000f	68 80 04 00 00	 push	 1152			; 00000480H
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07HPHNCKCM@pParser?$AA@
  0001e	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L71912:

; 1153 : 
; 1154 :     RIFFIO ckNext, ckChild;
; 1155 :     DWORD dwSegmentCount = 0;

  00023	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _dwSegmentCount$[ebp], 0

; 1156 : 
; 1157 :     HRESULT hr = S_OK;

  0002a	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1158 :     pParser->EnterList(&ckNext);

  00031	8d 4d b8	 lea	 ecx, DWORD PTR _ckNext$[ebp]
  00034	51		 push	 ecx
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00038	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L70229:

; 1159 :     while(pParser->NextChunk(&hr))

  0003d	8d 55 b4	 lea	 edx, DWORD PTR _hr$[ebp]
  00040	52		 push	 edx
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00044	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  00049	85 c0		 test	 eax, eax
  0004b	0f 84 68 01 00
	00		 je	 $L70230

; 1160 :     {   
; 1161 :         switch(ckNext.ckid)
; 1162 :         {

  00051	8b 45 b8	 mov	 eax, DWORD PTR _ckNext$[ebp]
  00054	89 45 a0	 mov	 DWORD PTR tv75[ebp], eax
  00057	81 7d a0 4c 49
	53 54		 cmp	 DWORD PTR tv75[ebp], 1414744396 ; 5453494cH
  0005e	74 05		 je	 SHORT $L70243
  00060	e9 4f 01 00 00	 jmp	 $L70232
$L70243:

; 1163 :         case FOURCC_LIST:
; 1164 :             if (ckNext.fccType == DMUS_FOURCC_SONGSEGMENT_LIST)

  00065	81 7d c0 73 73
	67 6c		 cmp	 DWORD PTR _ckNext$[ebp+8], 1818719091 ; 6c677373H
  0006c	0f 85 42 01 00
	00		 jne	 $L70232

; 1165 :             {
; 1166 :                 pParser->EnterList(&ckChild);

  00072	8d 4d e0	 lea	 ecx, DWORD PTR _ckChild$[ebp]
  00075	51		 push	 ecx
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00079	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L70254:

; 1167 :                 while (pParser->NextChunk(&hr))

  0007e	8d 55 b4	 lea	 edx, DWORD PTR _hr$[ebp]
  00081	52		 push	 edx
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00085	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  0008a	85 c0		 test	 eax, eax
  0008c	0f 84 1a 01 00
	00		 je	 $L70255

; 1168 :                 {
; 1169 :                     switch(ckChild.ckid)
; 1170 :                     {

  00092	8b 45 e0	 mov	 eax, DWORD PTR _ckChild$[ebp]
  00095	89 45 9c	 mov	 DWORD PTR tv83[ebp], eax
  00098	81 7d 9c 52 49
	46 46		 cmp	 DWORD PTR tv83[ebp], 1179011410 ; 46464952H
  0009f	74 0e		 je	 SHORT $L70268
  000a1	81 7d 9c 4c 49
	53 54		 cmp	 DWORD PTR tv83[ebp], 1414744396 ; 5453494cH
  000a8	74 05		 je	 SHORT $L70268
  000aa	e9 f8 00 00 00	 jmp	 $L70257
$L70268:

; 1171 :                     case FOURCC_RIFF:
; 1172 :                     case FOURCC_LIST:
; 1173 :                         if ((ckChild.fccType == DMUS_FOURCC_SEGMENT_FORM) || 
; 1174 :                             (ckChild.fccType == DMUS_FOURCC_REF_LIST))

  000af	81 7d e8 44 4d
	53 47		 cmp	 DWORD PTR _ckChild$[ebp+8], 1196641604 ; 47534d44H
  000b6	74 0d		 je	 SHORT $L70294
  000b8	81 7d e8 44 4d
	52 46		 cmp	 DWORD PTR _ckChild$[ebp+8], 1179798852 ; 46524d44H
  000bf	0f 85 e2 00 00
	00		 jne	 $L70257
$L70294:

; 1175 :                         {
; 1176 :                             CSegment *pSegment = NULL;

  000c5	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _pSegment$70295[ebp], 0

; 1177 :                             if (ckChild.fccType == DMUS_FOURCC_SEGMENT_FORM)

  000cc	81 7d e8 44 4d
	53 47		 cmp	 DWORD PTR _ckChild$[ebp+8], 1196641604 ; 47534d44H
  000d3	0f 85 86 00 00
	00		 jne	 $L70304

; 1178 :                             {
; 1179 :                                 pSegment = new CSegment;

  000d9	68 e0 03 00 00	 push	 992			; 000003e0H
  000de	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000e3	83 c4 04	 add	 esp, 4
  000e6	89 45 a8	 mov	 DWORD PTR $T71913[ebp], eax
  000e9	83 7d a8 00	 cmp	 DWORD PTR $T71913[ebp], 0
  000ed	74 0d		 je	 SHORT $L71914
  000ef	8b 4d a8	 mov	 ecx, DWORD PTR $T71913[ebp]
  000f2	e8 00 00 00 00	 call	 ??0CSegment@@QAE@XZ	; CSegment::CSegment
  000f7	89 45 98	 mov	 DWORD PTR tv92[ebp], eax
  000fa	eb 07		 jmp	 SHORT $L71915
$L71914:
  000fc	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$L71915:
  00103	8b 4d 98	 mov	 ecx, DWORD PTR tv92[ebp]
  00106	89 4d b0	 mov	 DWORD PTR _pSegment$70295[ebp], ecx

; 1180 :                                 if (pSegment)

  00109	83 7d b0 00	 cmp	 DWORD PTR _pSegment$70295[ebp], 0
  0010d	74 47		 je	 SHORT $L70307

; 1181 :                                 {
; 1182 :                                     pSegment->AddRef(); // Segment::Load may need a refcount

  0010f	8b 55 b0	 mov	 edx, DWORD PTR _pSegment$70295[ebp]
  00112	8b 02		 mov	 eax, DWORD PTR [edx]
  00114	8b 4d b0	 mov	 ecx, DWORD PTR _pSegment$70295[ebp]
  00117	51		 push	 ecx
  00118	ff 50 04	 call	 DWORD PTR [eax+4]

; 1183 :                                     // Force the version so audiopath functionality will be supported.
; 1184 :                                     pSegment->m_dwVersion = 8;

  0011b	8b 55 b0	 mov	 edx, DWORD PTR _pSegment$70295[ebp]
  0011e	c7 82 bc 03 00
	00 08 00 00 00	 mov	 DWORD PTR [edx+956], 8

; 1185 :                                     // Move back to start of this chunk.
; 1186 :                                     pParser->SeekBack();

  00128	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0012b	e8 00 00 00 00	 call	 ?SeekBack@CRiffParser@@QAEJXZ ; CRiffParser::SeekBack

; 1187 :                                     hr = pSegment->Load(pParser->GetStream());

  00130	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00133	e8 00 00 00 00	 call	 ?GetStream@CRiffParser@@QAEPAUIStream@@XZ ; CRiffParser::GetStream
  00138	50		 push	 eax
  00139	8b 45 b0	 mov	 eax, DWORD PTR _pSegment$70295[ebp]
  0013c	83 c0 04	 add	 eax, 4
  0013f	8b 4d b0	 mov	 ecx, DWORD PTR _pSegment$70295[ebp]
  00142	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00145	50		 push	 eax
  00146	ff 52 14	 call	 DWORD PTR [edx+20]
  00149	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax

; 1188 :                                     pParser->SeekForward();

  0014c	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0014f	e8 00 00 00 00	 call	 ?SeekForward@CRiffParser@@QAEJXZ ; CRiffParser::SeekForward

; 1189 :                                 }
; 1190 :                                 else

  00154	eb 07		 jmp	 SHORT $L70308
$L70307:

; 1191 :                                 {
; 1192 :                                     return E_OUTOFMEMORY;

  00156	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  0015b	eb 67		 jmp	 SHORT $L70220
$L70308:

; 1193 :                                 }
; 1194 :                             }
; 1195 :                             else

  0015d	eb 1a		 jmp	 SHORT $L70310
$L70304:

; 1196 :                             {
; 1197 :                                 // This will increment the refcount for the segment
; 1198 :                                 CLinkParser LinkParser;
; 1199 :                                 hr = LinkParser.LoadReferencedObject(pParser,(void **)&pSegment,IID_CSegment,TRUE);

  0015f	6a 01		 push	 1
  00161	68 00 00 00 00	 push	 OFFSET FLAT:_IID_CSegment
  00166	8d 45 b0	 lea	 eax, DWORD PTR _pSegment$70295[ebp]
  00169	50		 push	 eax
  0016a	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0016d	51		 push	 ecx
  0016e	8d 4d af	 lea	 ecx, DWORD PTR _LinkParser$70311[ebp]
  00171	e8 00 00 00 00	 call	 ?LoadReferencedObject@CLinkParser@@QAEJPAVCRiffParser@@PAPAXABU_GUID@@H@Z ; CLinkParser::LoadReferencedObject
  00176	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax
$L70310:

; 1200 : //                                hr = LoadReferencedSegment( &pSegment, pParser );
; 1201 :                             }
; 1202 :                             if (SUCCEEDED(hr))

  00179	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0017d	7c 13		 jl	 SHORT $L70314

; 1203 :                             {
; 1204 :                                 // This increments the refcount.
; 1205 :                                 m_SegmentList.AddSegment(pSegment,dwSegmentCount);

  0017f	8b 55 dc	 mov	 edx, DWORD PTR _dwSegmentCount$[ebp]
  00182	52		 push	 edx
  00183	8b 45 b0	 mov	 eax, DWORD PTR _pSegment$70295[ebp]
  00186	50		 push	 eax
  00187	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  0018a	83 c1 18	 add	 ecx, 24			; 00000018H
  0018d	e8 00 00 00 00	 call	 ?AddSegment@CSongSegmentList@@QAEJPAVCSegment@@K@Z ; CSongSegmentList::AddSegment
$L70314:

; 1206 :                             }
; 1207 :                             pSegment->Release(); // Release the extra AddRef

  00192	8b 4d b0	 mov	 ecx, DWORD PTR _pSegment$70295[ebp]
  00195	8b 11		 mov	 edx, DWORD PTR [ecx]
  00197	8b 45 b0	 mov	 eax, DWORD PTR _pSegment$70295[ebp]
  0019a	50		 push	 eax
  0019b	ff 52 08	 call	 DWORD PTR [edx+8]

; 1208 :                             dwSegmentCount++;

  0019e	8b 4d dc	 mov	 ecx, DWORD PTR _dwSegmentCount$[ebp]
  001a1	83 c1 01	 add	 ecx, 1
  001a4	89 4d dc	 mov	 DWORD PTR _dwSegmentCount$[ebp], ecx
$L70257:

; 1209 :                         }
; 1210 :                         break;
; 1211 :                     }
; 1212 :                 }

  001a7	e9 d2 fe ff ff	 jmp	 $L70254
$L70255:

; 1213 :                 pParser->LeaveList();

  001ac	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  001af	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList
$L70232:

; 1214 :             }
; 1215 : 
; 1216 :         default:
; 1217 :             break;
; 1218 : 
; 1219 :         }
; 1220 :     }

  001b4	e9 84 fe ff ff	 jmp	 $L70229
$L70230:

; 1221 :     pParser->LeaveList();

  001b9	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  001bc	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 1222 : 
; 1223 :     return hr;

  001c1	8b 45 b4	 mov	 eax, DWORD PTR _hr$[ebp]
$L70220:

; 1224 : }

  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c2 04 00	 ret	 4
?LoadSegmentList@CSong@@AAEJPAVCRiffParser@@@Z ENDP	; CSong::LoadSegmentList
_TEXT	ENDS
PUBLIC	?AddTail@CGraphList@@QAEXPAVCGraph@@@Z		; CGraphList::AddTail
PUBLIC	?LoadGraphList@CSong@@AAEJPAVCRiffParser@@@Z	; CSong::LoadGraphList
EXTRN	??0CGraph@@QAE@XZ:NEAR				; CGraph::CGraph
; Function compile flags: /Odt
;	COMDAT ?LoadGraphList@CSong@@AAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT
tv78 = -64
tv71 = -60
tv70 = -56
_this$ = -52
$T71919 = -48
_pGraph$70344 = -44
_dwGraphCount$ = -40
_hr$ = -36
_ckNext$ = -32
_pParser$ = 8
?LoadGraphList@CSong@@AAEJPAVCRiffParser@@@Z PROC NEAR	; CSong::LoadGraphList, COMDAT
; _this$ = ecx

; 1228 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 1229 : 
; 1230 :     RIFFIO ckNext;
; 1231 :     DWORD dwGraphCount = 0;

  00009	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _dwGraphCount$[ebp], 0

; 1232 : 
; 1233 :     HRESULT hr = S_OK;

  00010	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1234 :     pParser->EnterList(&ckNext);

  00017	8d 45 e0	 lea	 eax, DWORD PTR _ckNext$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0001e	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L70325:

; 1235 :     while(pParser->NextChunk(&hr))

  00023	8d 4d dc	 lea	 ecx, DWORD PTR _hr$[ebp]
  00026	51		 push	 ecx
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0002a	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  0002f	85 c0		 test	 eax, eax
  00031	0f 84 c2 00 00
	00		 je	 $L70326

; 1236 :     {   
; 1237 :         switch(ckNext.ckid)
; 1238 :         {

  00037	8b 55 e0	 mov	 edx, DWORD PTR _ckNext$[ebp]
  0003a	89 55 c8	 mov	 DWORD PTR tv70[ebp], edx
  0003d	81 7d c8 52 49
	46 46		 cmp	 DWORD PTR tv70[ebp], 1179011410 ; 46464952H
  00044	74 05		 je	 SHORT $L70339
  00046	e9 a9 00 00 00	 jmp	 $L70328
$L70339:

; 1239 :             case FOURCC_RIFF:
; 1240 :                 switch(ckNext.fccType)
; 1241 :                 {

  0004b	8b 45 e8	 mov	 eax, DWORD PTR _ckNext$[ebp+8]
  0004e	89 45 c4	 mov	 DWORD PTR tv71[ebp], eax
  00051	81 7d c4 44 4d
	54 47		 cmp	 DWORD PTR tv71[ebp], 1196707140 ; 47544d44H
  00058	74 05		 je	 SHORT $L70353
  0005a	e9 95 00 00 00	 jmp	 $L70328
$L70353:

; 1242 :                     CGraph *pGraph;
; 1243 :                     case DMUS_FOURCC_TOOLGRAPH_FORM :
; 1244 :                         // Move back to start of this chunk.
; 1245 :                         pParser->SeekBack();

  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00062	e8 00 00 00 00	 call	 ?SeekBack@CRiffParser@@QAEJXZ ; CRiffParser::SeekBack

; 1246 :                         pGraph = new CGraph;

  00067	68 70 03 00 00	 push	 880			; 00000370H
  0006c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00071	83 c4 04	 add	 esp, 4
  00074	89 45 d0	 mov	 DWORD PTR $T71919[ebp], eax
  00077	83 7d d0 00	 cmp	 DWORD PTR $T71919[ebp], 0
  0007b	74 0d		 je	 SHORT $L71920
  0007d	8b 4d d0	 mov	 ecx, DWORD PTR $T71919[ebp]
  00080	e8 00 00 00 00	 call	 ??0CGraph@@QAE@XZ	; CGraph::CGraph
  00085	89 45 c0	 mov	 DWORD PTR tv78[ebp], eax
  00088	eb 07		 jmp	 SHORT $L71921
$L71920:
  0008a	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$L71921:
  00091	8b 4d c0	 mov	 ecx, DWORD PTR tv78[ebp]
  00094	89 4d d4	 mov	 DWORD PTR _pGraph$70344[ebp], ecx

; 1247 :                         if (pGraph)

  00097	83 7d d4 00	 cmp	 DWORD PTR _pGraph$70344[ebp], 0
  0009b	74 48		 je	 SHORT $L70356

; 1248 :                         {
; 1249 :                             hr = pGraph->Load(pParser->GetStream());

  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000a0	e8 00 00 00 00	 call	 ?GetStream@CRiffParser@@QAEPAUIStream@@XZ ; CRiffParser::GetStream
  000a5	50		 push	 eax
  000a6	8b 55 d4	 mov	 edx, DWORD PTR _pGraph$70344[ebp]
  000a9	83 c2 04	 add	 edx, 4
  000ac	8b 45 d4	 mov	 eax, DWORD PTR _pGraph$70344[ebp]
  000af	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b2	52		 push	 edx
  000b3	ff 51 14	 call	 DWORD PTR [ecx+20]
  000b6	89 45 dc	 mov	 DWORD PTR _hr$[ebp], eax

; 1250 :                             dwGraphCount++;

  000b9	8b 55 d8	 mov	 edx, DWORD PTR _dwGraphCount$[ebp]
  000bc	83 c2 01	 add	 edx, 1
  000bf	89 55 d8	 mov	 DWORD PTR _dwGraphCount$[ebp], edx

; 1251 :                             if (SUCCEEDED(hr))

  000c2	83 7d dc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c6	7c 1b		 jl	 SHORT $L70358

; 1252 :                             {
; 1253 :                                 m_GraphList.AddTail(pGraph);

  000c8	8b 45 d4	 mov	 eax, DWORD PTR _pGraph$70344[ebp]
  000cb	50		 push	 eax
  000cc	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	83 c1 14	 add	 ecx, 20			; 00000014H
  000d2	e8 00 00 00 00	 call	 ?AddTail@CGraphList@@QAEXPAVCGraph@@@Z ; CGraphList::AddTail

; 1254 :                                 pGraph->m_dwLoadID = dwGraphCount;

  000d7	8b 4d d4	 mov	 ecx, DWORD PTR _pGraph$70344[ebp]
  000da	8b 55 d8	 mov	 edx, DWORD PTR _dwGraphCount$[ebp]
  000dd	89 91 6c 03 00
	00		 mov	 DWORD PTR [ecx+876], edx
$L70358:

; 1255 :                             }
; 1256 :                         }
; 1257 :                         else

  000e3	eb 07		 jmp	 SHORT $L70359
$L70356:

; 1258 :                         {
; 1259 :                             return E_OUTOFMEMORY;

  000e5	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  000ea	eb 18		 jmp	 SHORT $L70319
$L70359:

; 1260 :                         }
; 1261 :                         pParser->SeekForward();

  000ec	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000ef	e8 00 00 00 00	 call	 ?SeekForward@CRiffParser@@QAEJXZ ; CRiffParser::SeekForward
$L70328:

; 1262 :                         break;          
; 1263 :                     default:
; 1264 :                         break;
; 1265 :                 }
; 1266 :                 break;
; 1267 : 
; 1268 :             default:
; 1269 :                 break;
; 1270 : 
; 1271 :         }
; 1272 :     }

  000f4	e9 2a ff ff ff	 jmp	 $L70325
$L70326:

; 1273 :     pParser->LeaveList();

  000f9	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000fc	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 1274 :     return hr;

  00101	8b 45 dc	 mov	 eax, DWORD PTR _hr$[ebp]
$L70319:

; 1275 : }

  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 04 00	 ret	 4
?LoadGraphList@CSong@@AAEJPAVCRiffParser@@@Z ENDP	; CSong::LoadGraphList
_TEXT	ENDS
PUBLIC	??_C@_0BJ@JNKEPJON@pVSource?9?$DOm_pTransitions?$AA@ ; `string'
PUBLIC	?GetTransitionSegment@CSong@@QAEJPAVCSegment@@0PAU_DMUS_IO_TRANSITION_DEF@@@Z ; CSong::GetTransitionSegment
PUBLIC	??_C@_0BO@GPHBKJME@pVDestination?9?$DOm_pTransitions?$AA@ ; `string'
PUBLIC	??_C@_0DD@KPAEFGEI@Warning?3?5No?5transition?5segment?5w@ ; `string'
EXTRN	?dm_rand@@YAHXZ:NEAR				; dm_rand
;	COMDAT ??_C@_0BJ@JNKEPJON@pVSource?9?$DOm_pTransitions?$AA@
CONST	SEGMENT
??_C@_0BJ@JNKEPJON@pVSource?9?$DOm_pTransitions?$AA@ DB 'pVSource->m_pTra'
	DB	'nsitions', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GPHBKJME@pVDestination?9?$DOm_pTransitions?$AA@
CONST	SEGMENT
??_C@_0BO@GPHBKJME@pVDestination?9?$DOm_pTransitions?$AA@ DB 'pVDestinati'
	DB	'on->m_pTransitions', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KPAEFGEI@Warning?3?5No?5transition?5segment?5w@
CONST	SEGMENT
??_C@_0DD@KPAEFGEI@Warning?3?5No?5transition?5segment?5w@ DB 'Warning: No'
	DB	' transition segment was found in song.', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetTransitionSegment@CSong@@QAEJPAVCSegment@@0PAU_DMUS_IO_TRANSITION_DEF@@@Z
_TEXT	SEGMENT
_this$ = -40
_dwIndex$70414 = -36
_dwMatchCount$70415 = -32
_dwChoice$70420 = -28
_dwIndex$70392 = -24
_dwMatchCount$70393 = -20
_dwChoice$70398 = -16
_pVSource$ = -12
_hr$ = -8
_pVDestination$ = -4
_pSource$ = 8
_pDestination$ = 12
_pTransDef$ = 16
?GetTransitionSegment@CSong@@QAEJPAVCSegment@@0PAU_DMUS_IO_TRANSITION_DEF@@@Z PROC NEAR ; CSong::GetTransitionSegment, COMDAT
; _this$ = ecx

; 1280 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 1281 :     HRESULT hr = DMUS_E_NOT_FOUND;

  00009	c7 45 f8 61 11
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005397151 ; 88781161H

; 1282 : //    if (pSource) Trace(0,"Transitioning from %ls ",pSource->m_wszName);
; 1283 : //    if (pDestination) Trace(0,"to %ls",pDestination->m_wszName);
; 1284 : //    Trace(0,"\n");
; 1285 :     ENTER_CRITICAL_SECTION(&m_CriticalSection);

  00010	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 24	 add	 eax, 36			; 00000024H
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 1286 :     // Default values for other fields, in case we don't find a match.
; 1287 :     pTransDef->dwPlayFlags = 0;

  0001d	8b 4d 10	 mov	 ecx, DWORD PTR _pTransDef$[ebp]
  00020	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 1288 :     pTransDef->dwTransitionID = DMUS_SONG_NOSEG;

  00027	8b 55 10	 mov	 edx, DWORD PTR _pTransDef$[ebp]
  0002a	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1

; 1289 :     pTransDef->dwSegmentID = DMUS_SONG_NOSEG;

  00031	8b 45 10	 mov	 eax, DWORD PTR _pTransDef$[ebp]
  00034	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 1290 :     CVirtualSegment *pVSource = NULL;

  0003a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pVSource$[ebp], 0

; 1291 :     // If there is a source segment, look to see if it's in this song
; 1292 :     // and pull the matchin virtual segment.
; 1293 :     if (pSource)

  00041	83 7d 08 00	 cmp	 DWORD PTR _pSource$[ebp], 0
  00045	74 30		 je	 SHORT $L70375

; 1294 :     {
; 1295 :         pVSource = m_VirtualSegmentList.GetHead();

  00047	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 c1 20	 add	 ecx, 32			; 00000020H
  0004d	e8 00 00 00 00	 call	 ?GetHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ ; CVirtualSegmentList::GetHead
  00052	89 45 f4	 mov	 DWORD PTR _pVSource$[ebp], eax

; 1296 :         for (;pVSource;pVSource = pVSource->GetNext())

  00055	eb 0b		 jmp	 SHORT $L70376
$L70377:
  00057	8b 4d f4	 mov	 ecx, DWORD PTR _pVSource$[ebp]
  0005a	e8 00 00 00 00	 call	 ?GetNext@CVirtualSegment@@QAEPAV1@XZ ; CVirtualSegment::GetNext
  0005f	89 45 f4	 mov	 DWORD PTR _pVSource$[ebp], eax
$L70376:
  00062	83 7d f4 00	 cmp	 DWORD PTR _pVSource$[ebp], 0
  00066	74 0f		 je	 SHORT $L70375

; 1297 :         {
; 1298 :             if (pVSource->m_pPlaySegment == pSource) 

  00068	8b 4d f4	 mov	 ecx, DWORD PTR _pVSource$[ebp]
  0006b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0006e	3b 55 08	 cmp	 edx, DWORD PTR _pSource$[ebp]
  00071	75 02		 jne	 SHORT $L70379

; 1299 :             {
; 1300 : //                Trace(0,"Found match for source segment %ls in song\n",pSource->m_wszName);
; 1301 :                 break;

  00073	eb 02		 jmp	 SHORT $L70375
$L70379:

; 1302 :             }
; 1303 :         }

  00075	eb e0		 jmp	 SHORT $L70377
$L70375:

; 1304 :     }
; 1305 :     CVirtualSegment *pVDestination = NULL;

  00077	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVDestination$[ebp], 0

; 1306 :     // If there is a destination segment, look to see if it's in this song
; 1307 :     // and pull the matching virtual segment.
; 1308 :     if (pDestination)

  0007e	83 7d 0c 00	 cmp	 DWORD PTR _pDestination$[ebp], 0
  00082	74 30		 je	 SHORT $L70381

; 1309 :     {
; 1310 :         pVDestination = m_VirtualSegmentList.GetHead();

  00084	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	83 c1 20	 add	 ecx, 32			; 00000020H
  0008a	e8 00 00 00 00	 call	 ?GetHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ ; CVirtualSegmentList::GetHead
  0008f	89 45 fc	 mov	 DWORD PTR _pVDestination$[ebp], eax

; 1311 :         for (;pVDestination;pVDestination = pVDestination->GetNext())

  00092	eb 0b		 jmp	 SHORT $L70382
$L70383:
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _pVDestination$[ebp]
  00097	e8 00 00 00 00	 call	 ?GetNext@CVirtualSegment@@QAEPAV1@XZ ; CVirtualSegment::GetNext
  0009c	89 45 fc	 mov	 DWORD PTR _pVDestination$[ebp], eax
$L70382:
  0009f	83 7d fc 00	 cmp	 DWORD PTR _pVDestination$[ebp], 0
  000a3	74 0f		 je	 SHORT $L70381

; 1312 :         {
; 1313 :             if (pVDestination->m_pPlaySegment == pDestination) 

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _pVDestination$[ebp]
  000a8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000ab	3b 4d 0c	 cmp	 ecx, DWORD PTR _pDestination$[ebp]
  000ae	75 02		 jne	 SHORT $L70385

; 1314 :             {
; 1315 : //                Trace(0,"Found match for destination segment %ls in song\n",pDestination->m_wszName);
; 1316 :                 break;

  000b0	eb 02		 jmp	 SHORT $L70381
$L70385:

; 1317 :             }
; 1318 :         }

  000b2	eb e0		 jmp	 SHORT $L70383
$L70381:

; 1319 :     }
; 1320 : 
; 1321 :     if (pVSource)

  000b4	83 7d f4 00	 cmp	 DWORD PTR _pVSource$[ebp], 0
  000b8	0f 84 78 01 00
	00		 je	 $L70386

; 1322 :     {
; 1323 :         if (pVDestination)

  000be	83 7d fc 00	 cmp	 DWORD PTR _pVDestination$[ebp], 0
  000c2	74 0d		 je	 SHORT $L70387

; 1324 :         {
; 1325 :             pTransDef->dwSegmentID = pVDestination->m_dwID;

  000c4	8b 55 10	 mov	 edx, DWORD PTR _pTransDef$[ebp]
  000c7	8b 45 fc	 mov	 eax, DWORD PTR _pVDestination$[ebp]
  000ca	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000cd	89 0a		 mov	 DWORD PTR [edx], ecx

; 1326 :         }
; 1327 :         else

  000cf	eb 09		 jmp	 SHORT $L70388
$L70387:

; 1328 :         {
; 1329 :             // If there is no destination, mark this to transition to nothing.
; 1330 :             pTransDef->dwSegmentID = DMUS_SONG_NOSEG;

  000d1	8b 55 10	 mov	 edx, DWORD PTR _pTransDef$[ebp]
  000d4	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1
$L70388:

; 1331 :         }
; 1332 :         if (pVSource->m_dwTransitionCount)

  000da	8b 45 f4	 mov	 eax, DWORD PTR _pVSource$[ebp]
  000dd	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  000e1	0f 84 4a 01 00
	00		 je	 $L70389

; 1333 :         {
; 1334 :             ASSERT(pVSource->m_pTransitions);

  000e7	8b 4d f4	 mov	 ecx, DWORD PTR _pVSource$[ebp]
  000ea	83 79 68 00	 cmp	 DWORD PTR [ecx+104], 0
  000ee	75 17		 jne	 SHORT $L70390
  000f0	6a 00		 push	 0
  000f2	68 36 05 00 00	 push	 1334			; 00000536H
  000f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
  000fc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@JNKEPJON@pVSource?9?$DOm_pTransitions?$AA@
  00101	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L70390:

; 1335 :             DWORD dwIndex;
; 1336 :             DWORD dwMatchCount = 0;

  00107	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwMatchCount$70393[ebp], 0

; 1337 :             // First, find out how many transitions match the requirement. 
; 1338 :             // We'll randomly select from the matching ones.
; 1339 :             for (dwIndex = 0; dwIndex < pVSource->m_dwTransitionCount; dwIndex++)

  0010e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dwIndex$70392[ebp], 0
  00115	eb 09		 jmp	 SHORT $L70394
$L70395:
  00117	8b 55 e8	 mov	 edx, DWORD PTR _dwIndex$70392[ebp]
  0011a	83 c2 01	 add	 edx, 1
  0011d	89 55 e8	 mov	 DWORD PTR _dwIndex$70392[ebp], edx
$L70394:
  00120	8b 45 f4	 mov	 eax, DWORD PTR _pVSource$[ebp]
  00123	8b 4d e8	 mov	 ecx, DWORD PTR _dwIndex$70392[ebp]
  00126	3b 48 64	 cmp	 ecx, DWORD PTR [eax+100]
  00129	73 21		 jae	 SHORT $L70396

; 1340 :             {
; 1341 :                 if (pVSource->m_pTransitions[dwIndex].dwSegmentID == pTransDef->dwSegmentID)

  0012b	8b 55 e8	 mov	 edx, DWORD PTR _dwIndex$70392[ebp]
  0012e	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00131	8b 45 f4	 mov	 eax, DWORD PTR _pVSource$[ebp]
  00134	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  00137	8b 45 10	 mov	 eax, DWORD PTR _pTransDef$[ebp]
  0013a	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  0013d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0013f	75 09		 jne	 SHORT $L70397

; 1342 :                 {
; 1343 :                     dwMatchCount++;

  00141	8b 55 ec	 mov	 edx, DWORD PTR _dwMatchCount$70393[ebp]
  00144	83 c2 01	 add	 edx, 1
  00147	89 55 ec	 mov	 DWORD PTR _dwMatchCount$70393[ebp], edx
$L70397:

; 1344 :                 }
; 1345 :             }

  0014a	eb cb		 jmp	 SHORT $L70395
$L70396:

; 1346 :             DWORD dwChoice;
; 1347 :             if (dwMatchCount)

  0014c	83 7d ec 00	 cmp	 DWORD PTR _dwMatchCount$70393[ebp], 0
  00150	74 0d		 je	 SHORT $L70399

; 1348 :             {
; 1349 :                 dwChoice = dm_rand() % dwMatchCount;

  00152	e8 00 00 00 00	 call	 ?dm_rand@@YAHXZ		; dm_rand
  00157	33 d2		 xor	 edx, edx
  00159	f7 75 ec	 div	 DWORD PTR _dwMatchCount$70393[ebp]
  0015c	89 55 f0	 mov	 DWORD PTR _dwChoice$70398[ebp], edx
$L70399:

; 1350 :             }
; 1351 :             for (dwIndex = 0; dwIndex < pVSource->m_dwTransitionCount; dwIndex++)

  0015f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dwIndex$70392[ebp], 0
  00166	eb 09		 jmp	 SHORT $L70400
$L70401:
  00168	8b 45 e8	 mov	 eax, DWORD PTR _dwIndex$70392[ebp]
  0016b	83 c0 01	 add	 eax, 1
  0016e	89 45 e8	 mov	 DWORD PTR _dwIndex$70392[ebp], eax
$L70400:
  00171	8b 4d f4	 mov	 ecx, DWORD PTR _pVSource$[ebp]
  00174	8b 55 e8	 mov	 edx, DWORD PTR _dwIndex$70392[ebp]
  00177	3b 51 64	 cmp	 edx, DWORD PTR [ecx+100]
  0017a	0f 83 b1 00 00
	00		 jae	 $L70389

; 1352 :             {
; 1353 :                 if (pVSource->m_pTransitions[dwIndex].dwSegmentID == pTransDef->dwSegmentID)

  00180	8b 45 e8	 mov	 eax, DWORD PTR _dwIndex$70392[ebp]
  00183	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00186	8b 4d f4	 mov	 ecx, DWORD PTR _pVSource$[ebp]
  00189	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  0018c	8b 4d 10	 mov	 ecx, DWORD PTR _pTransDef$[ebp]
  0018f	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00192	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00194	75 46		 jne	 SHORT $L70403

; 1354 :                 {
; 1355 :                     if (!dwChoice)

  00196	83 7d f0 00	 cmp	 DWORD PTR _dwChoice$70398[ebp], 0
  0019a	75 35		 jne	 SHORT $L70404

; 1356 :                     {
; 1357 : //Trace(0,"Chose transition from %lx with Transition %lx, flags %lx\n",pVSource->m_pTransitions[dwIndex].dwSegmentID,
; 1358 : //    pVSource->m_pTransitions[dwIndex].dwTransitionID,pVSource->m_pTransitions[dwIndex].dwPlayFlags);
; 1359 :                         pTransDef->dwPlayFlags = pVSource->m_pTransitions[dwIndex].dwPlayFlags;

  0019c	8b 45 e8	 mov	 eax, DWORD PTR _dwIndex$70392[ebp]
  0019f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  001a2	8b 4d f4	 mov	 ecx, DWORD PTR _pVSource$[ebp]
  001a5	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  001a8	8b 4d 10	 mov	 ecx, DWORD PTR _pTransDef$[ebp]
  001ab	8b 54 02 08	 mov	 edx, DWORD PTR [edx+eax+8]
  001af	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 1360 :                         pTransDef->dwTransitionID = pVSource->m_pTransitions[dwIndex].dwTransitionID;

  001b2	8b 45 e8	 mov	 eax, DWORD PTR _dwIndex$70392[ebp]
  001b5	6b c0 0c	 imul	 eax, 12			; 0000000cH
  001b8	8b 4d f4	 mov	 ecx, DWORD PTR _pVSource$[ebp]
  001bb	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  001be	8b 4d 10	 mov	 ecx, DWORD PTR _pTransDef$[ebp]
  001c1	8b 54 02 04	 mov	 edx, DWORD PTR [edx+eax+4]
  001c5	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1361 :                         hr = S_OK;

  001c8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1362 :                         break;

  001cf	eb 60		 jmp	 SHORT $L70389
$L70404:

; 1363 :                     }
; 1364 :                     dwChoice--;

  001d1	8b 45 f0	 mov	 eax, DWORD PTR _dwChoice$70398[ebp]
  001d4	83 e8 01	 sub	 eax, 1
  001d7	89 45 f0	 mov	 DWORD PTR _dwChoice$70398[ebp], eax

; 1365 :                 }
; 1366 :                 else if ((pVSource->m_pTransitions[dwIndex].dwSegmentID == DMUS_SONG_ANYSEG) && !dwMatchCount)

  001da	eb 50		 jmp	 SHORT $L70406
$L70403:
  001dc	8b 4d e8	 mov	 ecx, DWORD PTR _dwIndex$70392[ebp]
  001df	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  001e2	8b 55 f4	 mov	 edx, DWORD PTR _pVSource$[ebp]
  001e5	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  001e8	81 3c 01 00 00
	00 80		 cmp	 DWORD PTR [ecx+eax], -2147483648 ; 80000000H
  001ef	75 3b		 jne	 SHORT $L70406
  001f1	83 7d ec 00	 cmp	 DWORD PTR _dwMatchCount$70393[ebp], 0
  001f5	75 35		 jne	 SHORT $L70406

; 1367 :                 {
; 1368 :                     // Mark the segment and flags, but don't break because we might still have the matched segment in the list.
; 1369 :                     pTransDef->dwPlayFlags = pVSource->m_pTransitions[dwIndex].dwPlayFlags;

  001f7	8b 4d e8	 mov	 ecx, DWORD PTR _dwIndex$70392[ebp]
  001fa	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  001fd	8b 55 f4	 mov	 edx, DWORD PTR _pVSource$[ebp]
  00200	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00203	8b 55 10	 mov	 edx, DWORD PTR _pTransDef$[ebp]
  00206	8b 44 08 08	 mov	 eax, DWORD PTR [eax+ecx+8]
  0020a	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1370 :                     pTransDef->dwTransitionID = pVSource->m_pTransitions[dwIndex].dwTransitionID;

  0020d	8b 4d e8	 mov	 ecx, DWORD PTR _dwIndex$70392[ebp]
  00210	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00213	8b 55 f4	 mov	 edx, DWORD PTR _pVSource$[ebp]
  00216	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00219	8b 55 10	 mov	 edx, DWORD PTR _pTransDef$[ebp]
  0021c	8b 44 08 04	 mov	 eax, DWORD PTR [eax+ecx+4]
  00220	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1371 : //Trace(0,"Found default transition from %lx with Transition %lx, flags %lx\n",pVSource->m_pTransitions[dwIndex].dwSegmentID,
; 1372 : //    pVSource->m_pTransitions[dwIndex].dwTransitionID,pVSource->m_pTransitions[dwIndex].dwPlayFlags);
; 1373 :                     hr = S_OK;

  00223	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1374 :                     break;

  0022a	eb 05		 jmp	 SHORT $L70389
$L70406:

; 1375 :                 }
; 1376 :             }

  0022c	e9 37 ff ff ff	 jmp	 $L70401
$L70389:

; 1377 :         }
; 1378 :     }
; 1379 :     else if (pVDestination)

  00231	e9 06 01 00 00	 jmp	 $L70409
$L70386:
  00236	83 7d fc 00	 cmp	 DWORD PTR _pVDestination$[ebp], 0
  0023a	0f 84 fc 00 00
	00		 je	 $L70409

; 1380 :     {
; 1381 :         // This is the special case where there is no source segment, perhaps because we are starting
; 1382 :         // playback or we are starting from a different song. In this case, look for a transition in the destination
; 1383 :         // segment for the special case of DMUS_SONG_NOFROMSEG. Typically, this represents a transition
; 1384 :         // segment that is an intro.
; 1385 :         if (pVDestination->m_dwTransitionCount)

  00240	8b 4d fc	 mov	 ecx, DWORD PTR _pVDestination$[ebp]
  00243	83 79 64 00	 cmp	 DWORD PTR [ecx+100], 0
  00247	0f 84 ef 00 00
	00		 je	 $L70409

; 1386 :         {
; 1387 :             ASSERT(pVDestination->m_pTransitions);

  0024d	8b 55 fc	 mov	 edx, DWORD PTR _pVDestination$[ebp]
  00250	83 7a 68 00	 cmp	 DWORD PTR [edx+104], 0
  00254	75 17		 jne	 SHORT $L70412
  00256	6a 00		 push	 0
  00258	68 6b 05 00 00	 push	 1387			; 0000056bH
  0025d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
  00262	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@GPHBKJME@pVDestination?9?$DOm_pTransitions?$AA@
  00267	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L70412:

; 1388 :             DWORD dwIndex;
; 1389 :             DWORD dwMatchCount = 0;

  0026d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _dwMatchCount$70415[ebp], 0

; 1390 :             // First, find out how many transitions match the requirement. 
; 1391 :             // We'll randomly select from the matching ones.
; 1392 :             for (dwIndex = 0; dwIndex < pVDestination->m_dwTransitionCount; dwIndex++)

  00274	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _dwIndex$70414[ebp], 0
  0027b	eb 09		 jmp	 SHORT $L70416
$L70417:
  0027d	8b 45 dc	 mov	 eax, DWORD PTR _dwIndex$70414[ebp]
  00280	83 c0 01	 add	 eax, 1
  00283	89 45 dc	 mov	 DWORD PTR _dwIndex$70414[ebp], eax
$L70416:
  00286	8b 4d fc	 mov	 ecx, DWORD PTR _pVDestination$[ebp]
  00289	8b 55 dc	 mov	 edx, DWORD PTR _dwIndex$70414[ebp]
  0028c	3b 51 64	 cmp	 edx, DWORD PTR [ecx+100]
  0028f	73 20		 jae	 SHORT $L70418

; 1393 :             {
; 1394 :                 if (pVDestination->m_pTransitions[dwIndex].dwSegmentID == DMUS_SONG_NOFROMSEG)

  00291	8b 45 dc	 mov	 eax, DWORD PTR _dwIndex$70414[ebp]
  00294	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00297	8b 4d fc	 mov	 ecx, DWORD PTR _pVDestination$[ebp]
  0029a	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  0029d	81 3c 10 01 00
	00 80		 cmp	 DWORD PTR [eax+edx], -2147483647 ; 80000001H
  002a4	75 09		 jne	 SHORT $L70419

; 1395 :                 {
; 1396 :                     dwMatchCount++;

  002a6	8b 45 e0	 mov	 eax, DWORD PTR _dwMatchCount$70415[ebp]
  002a9	83 c0 01	 add	 eax, 1
  002ac	89 45 e0	 mov	 DWORD PTR _dwMatchCount$70415[ebp], eax
$L70419:

; 1397 :                 }
; 1398 :             }

  002af	eb cc		 jmp	 SHORT $L70417
$L70418:

; 1399 :             DWORD dwChoice;
; 1400 :             if (dwMatchCount)

  002b1	83 7d e0 00	 cmp	 DWORD PTR _dwMatchCount$70415[ebp], 0
  002b5	74 0d		 je	 SHORT $L70421

; 1401 :             {
; 1402 :                 dwChoice = dm_rand() % dwMatchCount;

  002b7	e8 00 00 00 00	 call	 ?dm_rand@@YAHXZ		; dm_rand
  002bc	33 d2		 xor	 edx, edx
  002be	f7 75 e0	 div	 DWORD PTR _dwMatchCount$70415[ebp]
  002c1	89 55 e4	 mov	 DWORD PTR _dwChoice$70420[ebp], edx
$L70421:

; 1403 :             }
; 1404 :             for (dwIndex = 0; dwIndex < pVDestination->m_dwTransitionCount; dwIndex++)

  002c4	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _dwIndex$70414[ebp], 0
  002cb	eb 09		 jmp	 SHORT $L70422
$L70423:
  002cd	8b 4d dc	 mov	 ecx, DWORD PTR _dwIndex$70414[ebp]
  002d0	83 c1 01	 add	 ecx, 1
  002d3	89 4d dc	 mov	 DWORD PTR _dwIndex$70414[ebp], ecx
$L70422:
  002d6	8b 55 fc	 mov	 edx, DWORD PTR _pVDestination$[ebp]
  002d9	8b 45 dc	 mov	 eax, DWORD PTR _dwIndex$70414[ebp]
  002dc	3b 42 64	 cmp	 eax, DWORD PTR [edx+100]
  002df	73 5b		 jae	 SHORT $L70409

; 1405 :             {
; 1406 :                 if (pVDestination->m_pTransitions[dwIndex].dwSegmentID == DMUS_SONG_NOFROMSEG)

  002e1	8b 4d dc	 mov	 ecx, DWORD PTR _dwIndex$70414[ebp]
  002e4	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  002e7	8b 55 fc	 mov	 edx, DWORD PTR _pVDestination$[ebp]
  002ea	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  002ed	81 3c 01 01 00
	00 80		 cmp	 DWORD PTR [ecx+eax], -2147483647 ; 80000001H
  002f4	75 44		 jne	 SHORT $L70425

; 1407 :                 {
; 1408 :                     if (!dwChoice)

  002f6	83 7d e4 00	 cmp	 DWORD PTR _dwChoice$70420[ebp], 0
  002fa	75 35		 jne	 SHORT $L70426

; 1409 :                     {
; 1410 : //Trace(0,"Chose transition from NONE with Transition %lx, flags %lx\n",
; 1411 : //    pVDestination->m_pTransitions[dwIndex].dwTransitionID,pVDestination->m_pTransitions[dwIndex].dwPlayFlags);
; 1412 :                         pTransDef->dwPlayFlags = pVDestination->m_pTransitions[dwIndex].dwPlayFlags;

  002fc	8b 4d dc	 mov	 ecx, DWORD PTR _dwIndex$70414[ebp]
  002ff	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00302	8b 55 fc	 mov	 edx, DWORD PTR _pVDestination$[ebp]
  00305	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00308	8b 55 10	 mov	 edx, DWORD PTR _pTransDef$[ebp]
  0030b	8b 44 08 08	 mov	 eax, DWORD PTR [eax+ecx+8]
  0030f	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1413 :                         pTransDef->dwTransitionID = pVDestination->m_pTransitions[dwIndex].dwTransitionID;

  00312	8b 4d dc	 mov	 ecx, DWORD PTR _dwIndex$70414[ebp]
  00315	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00318	8b 55 fc	 mov	 edx, DWORD PTR _pVDestination$[ebp]
  0031b	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  0031e	8b 55 10	 mov	 edx, DWORD PTR _pTransDef$[ebp]
  00321	8b 44 08 04	 mov	 eax, DWORD PTR [eax+ecx+4]
  00325	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1414 :                         hr = S_OK;

  00328	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1415 :                         break;

  0032f	eb 0b		 jmp	 SHORT $L70409
$L70426:

; 1416 :                     }
; 1417 :                     dwChoice--;

  00331	8b 4d e4	 mov	 ecx, DWORD PTR _dwChoice$70420[ebp]
  00334	83 e9 01	 sub	 ecx, 1
  00337	89 4d e4	 mov	 DWORD PTR _dwChoice$70420[ebp], ecx
$L70425:

; 1418 :                 }
; 1419 :             }

  0033a	eb 91		 jmp	 SHORT $L70423
$L70409:

; 1420 :         }
; 1421 :     }
; 1422 :     LEAVE_CRITICAL_SECTION(&m_CriticalSection);

  0033c	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0033f	83 c2 24	 add	 edx, 36			; 00000024H
  00342	52		 push	 edx
  00343	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 1423 : #ifdef DBG
; 1424 :     if (hr == DMUS_E_NOT_FOUND)

  00349	81 7d f8 61 11
	78 88		 cmp	 DWORD PTR _hr$[ebp], -2005397151 ; 88781161H
  00350	75 0f		 jne	 SHORT $L70432

; 1425 :     {
; 1426 :         Trace(2,"Warning: No transition segment was found in song.\n");

  00352	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@KPAEFGEI@Warning?3?5No?5transition?5segment?5w@
  00357	6a 02		 push	 2
  00359	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0035e	83 c4 08	 add	 esp, 8
$L70432:

; 1427 :     }
; 1428 : #endif
; 1429 :     return hr;

  00361	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1430 : }

  00364	8b e5		 mov	 esp, ebp
  00366	5d		 pop	 ebp
  00367	c2 0c 00	 ret	 12			; 0000000cH
?GetTransitionSegment@CSong@@QAEJPAVCSegment@@0PAU_DMUS_IO_TRANSITION_DEF@@@Z ENDP ; CSong::GetTransitionSegment
_TEXT	ENDS
PUBLIC	?GetNext@CSongSegment@@QAEPAV1@XZ		; CSongSegment::GetNext
PUBLIC	?GetHead@CSongSegmentList@@QAEPAVCSongSegment@@XZ ; CSongSegmentList::GetHead
PUBLIC	?GetSourceSegment@CSong@@AAEXPAPAVCSegment@@K@Z	; CSong::GetSourceSegment
; Function compile flags: /Odt
;	COMDAT ?GetSourceSegment@CSong@@AAEXPAPAVCSegment@@K@Z
_TEXT	SEGMENT
_this$ = -8
_pSongSegment$ = -4
_ppSegment$ = 8
_dwSegmentID$ = 12
?GetSourceSegment@CSong@@AAEXPAPAVCSegment@@K@Z PROC NEAR ; CSong::GetSourceSegment, COMDAT
; _this$ = ecx

; 1435 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1436 :     CSongSegment *pSongSegment = m_SegmentList.GetHead();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 18	 add	 ecx, 24			; 00000018H
  0000f	e8 00 00 00 00	 call	 ?GetHead@CSongSegmentList@@QAEPAVCSongSegment@@XZ ; CSongSegmentList::GetHead
  00014	89 45 fc	 mov	 DWORD PTR _pSongSegment$[ebp], eax
$L70441:

; 1437 :     while (pSongSegment)

  00017	83 7d fc 00	 cmp	 DWORD PTR _pSongSegment$[ebp], 0
  0001b	74 40		 je	 SHORT $L70438

; 1438 :     {
; 1439 :         if (pSongSegment->m_dwLoadID == dwSegmentID)

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _pSongSegment$[ebp]
  00020	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00023	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwSegmentID$[ebp]
  00026	75 28		 jne	 SHORT $L70443

; 1440 :         {
; 1441 :             if (pSongSegment->m_pSegment)

  00028	8b 55 fc	 mov	 edx, DWORD PTR _pSongSegment$[ebp]
  0002b	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002f	74 1f		 je	 SHORT $L70443

; 1442 :             {
; 1443 :                 pSongSegment->m_pSegment->AddRef();

  00031	8b 45 fc	 mov	 eax, DWORD PTR _pSongSegment$[ebp]
  00034	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00037	8b 55 fc	 mov	 edx, DWORD PTR _pSongSegment$[ebp]
  0003a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003f	50		 push	 eax
  00040	ff 51 04	 call	 DWORD PTR [ecx+4]

; 1444 :                 *ppSegment = pSongSegment->m_pSegment;

  00043	8b 55 08	 mov	 edx, DWORD PTR _ppSegment$[ebp]
  00046	8b 45 fc	 mov	 eax, DWORD PTR _pSongSegment$[ebp]
  00049	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004c	89 0a		 mov	 DWORD PTR [edx], ecx

; 1445 :                 return;

  0004e	eb 0d		 jmp	 SHORT $L70438
$L70443:

; 1446 :             }
; 1447 :         }
; 1448 :         pSongSegment = pSongSegment->GetNext();

  00050	8b 4d fc	 mov	 ecx, DWORD PTR _pSongSegment$[ebp]
  00053	e8 00 00 00 00	 call	 ?GetNext@CSongSegment@@QAEPAV1@XZ ; CSongSegment::GetNext
  00058	89 45 fc	 mov	 DWORD PTR _pSongSegment$[ebp], eax

; 1449 :     }

  0005b	eb ba		 jmp	 SHORT $L70441
$L70438:

; 1450 : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
?GetSourceSegment@CSong@@AAEXPAPAVCSegment@@K@Z ENDP	; CSong::GetSourceSegment
_TEXT	ENDS
PUBLIC	?GetNext@CGraph@@QAEPAV1@XZ			; CGraph::GetNext
PUBLIC	?GetHead@CGraphList@@QAEPAVCGraph@@XZ		; CGraphList::GetHead
PUBLIC	?GetGraph@CSong@@AAEXPAPAVCGraph@@K@Z		; CSong::GetGraph
; Function compile flags: /Odt
;	COMDAT ?GetGraph@CSong@@AAEXPAPAVCGraph@@K@Z
_TEXT	SEGMENT
_this$ = -8
_pGraph$ = -4
_ppGraph$ = 8
_dwGraphID$ = 12
?GetGraph@CSong@@AAEXPAPAVCGraph@@K@Z PROC NEAR		; CSong::GetGraph, COMDAT
; _this$ = ecx

; 1454 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1455 :     CGraph *pGraph = m_GraphList.GetHead();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	e8 00 00 00 00	 call	 ?GetHead@CGraphList@@QAEPAVCGraph@@XZ ; CGraphList::GetHead
  00014	89 45 fc	 mov	 DWORD PTR _pGraph$[ebp], eax
$L70452:

; 1456 :     while (pGraph)

  00017	83 7d fc 00	 cmp	 DWORD PTR _pGraph$[ebp], 0
  0001b	74 31		 je	 SHORT $L70449

; 1457 :     {
; 1458 :         if (pGraph->m_dwLoadID == dwGraphID)

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _pGraph$[ebp]
  00020	8b 88 6c 03 00
	00		 mov	 ecx, DWORD PTR [eax+876]
  00026	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwGraphID$[ebp]
  00029	75 16		 jne	 SHORT $L70454

; 1459 :         {
; 1460 :             pGraph->AddRef();

  0002b	8b 55 fc	 mov	 edx, DWORD PTR _pGraph$[ebp]
  0002e	8b 02		 mov	 eax, DWORD PTR [edx]
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _pGraph$[ebp]
  00033	51		 push	 ecx
  00034	ff 50 04	 call	 DWORD PTR [eax+4]

; 1461 :             *ppGraph = pGraph;

  00037	8b 55 08	 mov	 edx, DWORD PTR _ppGraph$[ebp]
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _pGraph$[ebp]
  0003d	89 02		 mov	 DWORD PTR [edx], eax

; 1462 :             return;

  0003f	eb 0d		 jmp	 SHORT $L70449
$L70454:

; 1463 :         }
; 1464 :         pGraph = pGraph->GetNext();

  00041	8b 4d fc	 mov	 ecx, DWORD PTR _pGraph$[ebp]
  00044	e8 00 00 00 00	 call	 ?GetNext@CGraph@@QAEPAV1@XZ ; CGraph::GetNext
  00049	89 45 fc	 mov	 DWORD PTR _pGraph$[ebp], eax

; 1465 :     }

  0004c	eb c9		 jmp	 SHORT $L70452
$L70449:

; 1466 : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?GetGraph@CSong@@AAEXPAPAVCGraph@@K@Z ENDP		; CSong::GetGraph
_TEXT	ENDS
PUBLIC	?GetSegmentTrack@CSong@@AAEHPAPAUIDirectMusicTrack@@KKKABU_GUID@@@Z ; CSong::GetSegmentTrack
; Function compile flags: /Odt
;	COMDAT ?GetSegmentTrack@CSong@@AAEHPAPAUIDirectMusicTrack@@KKKABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = -8
_pSongSegment$ = -4
_ppTrack$ = 8
_dwSegmentID$ = 12
_dwGroupBits$ = 16
_dwIndex$ = 20
_guidClassID$ = 24
?GetSegmentTrack@CSong@@AAEHPAPAUIDirectMusicTrack@@KKKABU_GUID@@@Z PROC NEAR ; CSong::GetSegmentTrack, COMDAT
; _this$ = ecx

; 1470 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1471 :     CSongSegment *pSongSegment = m_SegmentList.GetHead();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 18	 add	 ecx, 24			; 00000018H
  0000f	e8 00 00 00 00	 call	 ?GetHead@CSongSegmentList@@QAEPAVCSongSegment@@XZ ; CSongSegmentList::GetHead
  00014	89 45 fc	 mov	 DWORD PTR _pSongSegment$[ebp], eax
$L70465:

; 1472 :     while (pSongSegment)

  00017	83 7d fc 00	 cmp	 DWORD PTR _pSongSegment$[ebp], 0
  0001b	74 4a		 je	 SHORT $L70466

; 1473 :     {
; 1474 :         if (pSongSegment->m_dwLoadID == dwSegmentID)

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _pSongSegment$[ebp]
  00020	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00023	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwSegmentID$[ebp]
  00026	75 32		 jne	 SHORT $L70467

; 1475 :         {
; 1476 :             if (pSongSegment->m_pSegment)

  00028	8b 55 fc	 mov	 edx, DWORD PTR _pSongSegment$[ebp]
  0002b	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002f	74 29		 je	 SHORT $L70467

; 1477 :             {
; 1478 :                 return (pSongSegment->m_pSegment->GetTrack(guidClassID,dwGroupBits,dwIndex,ppTrack) == S_OK);

  00031	8b 45 08	 mov	 eax, DWORD PTR _ppTrack$[ebp]
  00034	50		 push	 eax
  00035	8b 4d 14	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
  00038	51		 push	 ecx
  00039	8b 55 10	 mov	 edx, DWORD PTR _dwGroupBits$[ebp]
  0003c	52		 push	 edx
  0003d	8b 45 18	 mov	 eax, DWORD PTR _guidClassID$[ebp]
  00040	50		 push	 eax
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _pSongSegment$[ebp]
  00044	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00047	8b 45 fc	 mov	 eax, DWORD PTR _pSongSegment$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8b 12		 mov	 edx, DWORD PTR [edx]
  0004f	51		 push	 ecx
  00050	ff 52 54	 call	 DWORD PTR [edx+84]
  00053	f7 d8		 neg	 eax
  00055	1b c0		 sbb	 eax, eax
  00057	40		 inc	 eax
  00058	eb 0f		 jmp	 SHORT $L70462
$L70467:

; 1479 :             }
; 1480 :         }
; 1481 :         pSongSegment = pSongSegment->GetNext();

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _pSongSegment$[ebp]
  0005d	e8 00 00 00 00	 call	 ?GetNext@CSongSegment@@QAEPAV1@XZ ; CSongSegment::GetNext
  00062	89 45 fc	 mov	 DWORD PTR _pSongSegment$[ebp], eax

; 1482 :     }

  00065	eb b0		 jmp	 SHORT $L70465
$L70466:

; 1483 :     return FALSE;

  00067	33 c0		 xor	 eax, eax
$L70462:

; 1484 : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 14 00	 ret	 20			; 00000014H
?GetSegmentTrack@CSong@@AAEHPAPAUIDirectMusicTrack@@KKKABU_GUID@@@Z ENDP ; CSong::GetSegmentTrack
_TEXT	ENDS
PUBLIC	?AddTail@CVirtualSegmentList@@QAEXPAVCVirtualSegment@@@Z ; CVirtualSegmentList::AddTail
PUBLIC	?LoadTrackRefList@CSong@@AAEJPAVCRiffParser@@PAVCVirtualSegment@@@Z ; CSong::LoadTrackRefList
; Function compile flags: /Odt
;	COMDAT ?LoadVirtualSegmentList@CSong@@AAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT
tv241 = -192
tv130 = -188
tv87 = -184
tv86 = -180
tv77 = -176
tv71 = -172
tv70 = -168
_this$ = -164
$T71943 = -160
$T71942 = -156
$T71940 = -152
$T71937 = -148
_dwTransCount$70610 = -144
_ioVirtualSegment$70596 = -140
_fGotSegmentHeader$70523 = -120
_fGotHeader$70522 = -116
_hr$ = -112
_pVirtualSegment$ = -108
_ckUNFO$ = -104
_ckNext$ = -72
_dwSegmentCount$ = -40
_mtTime$ = -36
_ckChild$ = -32
_pParser$ = 8
?LoadVirtualSegmentList@CSong@@AAEJPAVCRiffParser@@@Z PROC NEAR ; CSong::LoadVirtualSegmentList, COMDAT
; _this$ = ecx

; 1489 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 1490 :     RIFFIO ckNext;
; 1491 :     RIFFIO ckChild;
; 1492 :     RIFFIO ckUNFO;
; 1493 :     DWORD dwSegmentCount = 0;

  0000f	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _dwSegmentCount$[ebp], 0

; 1494 :     CVirtualSegment *pVirtualSegment;
; 1495 :     MUSIC_TIME mtTime = 0;

  00016	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _mtTime$[ebp], 0

; 1496 : 
; 1497 :     HRESULT hr = S_OK;

  0001d	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1498 :     pParser->EnterList(&ckNext);

  00024	8d 45 b8	 lea	 eax, DWORD PTR _ckNext$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0002b	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L70483:

; 1499 :     while(pParser->NextChunk(&hr))

  00030	8d 4d 90	 lea	 ecx, DWORD PTR _hr$[ebp]
  00033	51		 push	 ecx
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00037	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  0003c	85 c0		 test	 eax, eax
  0003e	0f 84 80 03 00
	00		 je	 $L70484

; 1500 :     {   
; 1501 :         switch(ckNext.ckid)
; 1502 :         {

  00044	8b 55 b8	 mov	 edx, DWORD PTR _ckNext$[ebp]
  00047	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], edx
  0004d	81 bd 58 ff ff
	ff 52 49 46 46	 cmp	 DWORD PTR tv70[ebp], 1179011410 ; 46464952H
  00057	74 11		 je	 SHORT $L70497
  00059	81 bd 58 ff ff
	ff 4c 49 53 54	 cmp	 DWORD PTR tv70[ebp], 1414744396 ; 5453494cH
  00063	74 05		 je	 SHORT $L70497
  00065	e9 55 03 00 00	 jmp	 $L70486
$L70497:

; 1503 :             case FOURCC_RIFF:
; 1504 :             case FOURCC_LIST:
; 1505 :                 switch(ckNext.fccType)
; 1506 :                 {

  0006a	8b 45 c0	 mov	 eax, DWORD PTR _ckNext$[ebp+8]
  0006d	89 85 54 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], eax
  00073	81 bd 54 ff ff
	ff 73 67 72 6c	 cmp	 DWORD PTR tv71[ebp], 1819436915 ; 6c726773H
  0007d	74 05		 je	 SHORT $L70518
  0007f	e9 3b 03 00 00	 jmp	 $L70486
$L70518:

; 1507 :                     case DMUS_FOURCC_SEGREF_LIST:
; 1508 :                         pVirtualSegment = new CVirtualSegment;

  00084	68 f0 00 00 00	 push	 240			; 000000f0H
  00089	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008e	83 c4 04	 add	 esp, 4
  00091	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T71937[ebp], eax
  00097	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR $T71937[ebp], 0
  0009e	74 13		 je	 SHORT $L71938
  000a0	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR $T71937[ebp]
  000a6	e8 00 00 00 00	 call	 ??0CVirtualSegment@@QAE@XZ ; CVirtualSegment::CVirtualSegment
  000ab	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv77[ebp], eax
  000b1	eb 0a		 jmp	 SHORT $L71939
$L71938:
  000b3	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$L71939:
  000bd	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv77[ebp]
  000c3	89 4d 94	 mov	 DWORD PTR _pVirtualSegment$[ebp], ecx

; 1509 :                         if (pVirtualSegment)

  000c6	83 7d 94 00	 cmp	 DWORD PTR _pVirtualSegment$[ebp], 0
  000ca	0f 84 e8 02 00
	00		 je	 $L70521

; 1510 :                         {
; 1511 :                             BOOL fGotHeader = FALSE;

  000d0	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _fGotHeader$70522[ebp], 0

; 1512 :                             BOOL fGotSegmentHeader = FALSE;

  000d7	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _fGotSegmentHeader$70523[ebp], 0

; 1513 :                             pVirtualSegment->m_mtTime = mtTime; // Give the start time, an accumulation of all preceding segments. 

  000de	8b 55 94	 mov	 edx, DWORD PTR _pVirtualSegment$[ebp]
  000e1	8b 45 dc	 mov	 eax, DWORD PTR _mtTime$[ebp]
  000e4	89 42 60	 mov	 DWORD PTR [edx+96], eax

; 1514 :                             pParser->EnterList(&ckChild);

  000e7	8d 4d e0	 lea	 ecx, DWORD PTR _ckChild$[ebp]
  000ea	51		 push	 ecx
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000ee	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L70525:

; 1515 :                             while(pParser->NextChunk(&hr))

  000f3	8d 55 90	 lea	 edx, DWORD PTR _hr$[ebp]
  000f6	52		 push	 edx
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000fa	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  000ff	85 c0		 test	 eax, eax
  00101	0f 84 4a 02 00
	00		 je	 $L70526

; 1516 :                             {
; 1517 :                                 switch( ckChild.ckid )
; 1518 :                                 {

  00107	8b 45 e0	 mov	 eax, DWORD PTR _ckChild$[ebp]
  0010a	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv86[ebp], eax
  00110	81 bd 4c ff ff
	ff 73 65 67 68	 cmp	 DWORD PTR tv86[ebp], 1751606643 ; 68676573H
  0011a	77 2d		 ja	 SHORT $L71941
  0011c	81 bd 4c ff ff
	ff 73 65 67 68	 cmp	 DWORD PTR tv86[ebp], 1751606643 ; 68676573H
  00126	0f 84 dc 01 00
	00		 je	 $L70627
  0012c	81 bd 4c ff ff
	ff 52 49 46 46	 cmp	 DWORD PTR tv86[ebp], 1179011410 ; 46464952H
  00136	74 36		 je	 SHORT $L70539
  00138	81 bd 4c ff ff
	ff 4c 49 53 54	 cmp	 DWORD PTR tv86[ebp], 1414744396 ; 5453494cH
  00142	74 2a		 je	 SHORT $L70539
  00144	e9 03 02 00 00	 jmp	 $L70528
$L71941:
  00149	81 bd 4c ff ff
	ff 73 67 72 68	 cmp	 DWORD PTR tv86[ebp], 1752328051 ; 68726773H
  00153	0f 84 a9 00 00
	00		 je	 $L70595
  00159	81 bd 4c ff ff
	ff 73 74 72 68	 cmp	 DWORD PTR tv86[ebp], 1752331379 ; 68727473H
  00163	0f 84 21 01 00
	00		 je	 $L70609
  00169	e9 de 01 00 00	 jmp	 $L70528
$L70539:

; 1519 :                                     case FOURCC_RIFF:
; 1520 :                                     case FOURCC_LIST:
; 1521 :                                         switch(ckChild.fccType)
; 1522 :                                         {

  0016e	8b 4d e8	 mov	 ecx, DWORD PTR _ckChild$[ebp+8]
  00171	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
  00177	81 bd 48 ff ff
	ff 55 4e 46 4f	 cmp	 DWORD PTR tv87[ebp], 1330007637 ; 4f464e55H
  00181	74 26		 je	 SHORT $L70569
  00183	81 bd 48 ff ff
	ff 74 72 73 6c	 cmp	 DWORD PTR tv87[ebp], 1819505268 ; 6c737274H
  0018d	74 02		 je	 SHORT $L70560
  0018f	eb 6c		 jmp	 SHORT $L70549
$L70560:

; 1523 :                                         case DMUS_FOURCC_TRACKREFS_LIST:
; 1524 :                                             hr = LoadTrackRefList(pParser, pVirtualSegment);

  00191	8b 55 94	 mov	 edx, DWORD PTR _pVirtualSegment$[ebp]
  00194	52		 push	 edx
  00195	8b 45 08	 mov	 eax, DWORD PTR _pParser$[ebp]
  00198	50		 push	 eax
  00199	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0019f	e8 00 00 00 00	 call	 ?LoadTrackRefList@CSong@@AAEJPAVCRiffParser@@PAVCVirtualSegment@@@Z ; CSong::LoadTrackRefList
  001a4	89 45 90	 mov	 DWORD PTR _hr$[ebp], eax

; 1525 :                                             break;

  001a7	eb 54		 jmp	 SHORT $L70549
$L70569:

; 1526 :                                         case DMUS_FOURCC_UNFO_LIST:
; 1527 :                                             pParser->EnterList(&ckUNFO);

  001a9	8d 4d 98	 lea	 ecx, DWORD PTR _ckUNFO$[ebp]
  001ac	51		 push	 ecx
  001ad	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  001b0	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L70571:

; 1528 :                                             while(pParser->NextChunk(&hr))

  001b5	8d 55 90	 lea	 edx, DWORD PTR _hr$[ebp]
  001b8	52		 push	 edx
  001b9	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  001bc	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  001c1	85 c0		 test	 eax, eax
  001c3	74 30		 je	 SHORT $L70572

; 1529 :                                             {
; 1530 :                                                 switch( ckUNFO.ckid )
; 1531 :                                                 {

  001c5	8b 45 98	 mov	 eax, DWORD PTR _ckUNFO$[ebp]
  001c8	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv130[ebp], eax
  001ce	81 bd 44 ff ff
	ff 55 4e 41 4d	 cmp	 DWORD PTR tv130[ebp], 1296125525 ; 4d414e55H
  001d8	74 02		 je	 SHORT $L70585
  001da	eb 17		 jmp	 SHORT $L70574
$L70585:

; 1532 :                                                     case DMUS_FOURCC_UNAM_CHUNK:
; 1533 :                                                     {
; 1534 :                                                         hr = pParser->Read(pVirtualSegment->m_wszName, sizeof(pVirtualSegment->m_wszName));

  001dc	68 80 00 00 00	 push	 128			; 00000080H
  001e1	8b 4d 94	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  001e4	83 c1 6c	 add	 ecx, 108		; 0000006cH
  001e7	51		 push	 ecx
  001e8	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  001eb	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  001f0	89 45 90	 mov	 DWORD PTR _hr$[ebp], eax
$L70574:

; 1535 :                                                         break;
; 1536 :                                                     }
; 1537 :                                                     default:
; 1538 :                                                         break;
; 1539 :                                                 }
; 1540 :                                             }

  001f3	eb c0		 jmp	 SHORT $L70571
$L70572:

; 1541 :                                             pParser->LeaveList();

  001f5	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  001f8	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList
$L70549:

; 1542 :                                         }
; 1543 :                                         break;

  001fd	e9 4a 01 00 00	 jmp	 $L70528
$L70595:

; 1544 :                                     case DMUS_FOURCC_SEGREF_CHUNK:
; 1545 :                                     {
; 1546 :                                         DMUS_IO_SEGREF_HEADER ioVirtualSegment;
; 1547 :                                         hr = pParser->Read(&ioVirtualSegment,sizeof(ioVirtualSegment));

  00202	6a 14		 push	 20			; 00000014H
  00204	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR _ioVirtualSegment$70596[ebp]
  0020a	52		 push	 edx
  0020b	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0020e	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  00213	89 45 90	 mov	 DWORD PTR _hr$[ebp], eax

; 1548 :                                         if(SUCCEEDED(hr) )

  00216	83 7d 90 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0021a	7c 69		 jl	 SHORT $L70598

; 1549 :                                         {
; 1550 :                                             pVirtualSegment->m_dwFlags = ioVirtualSegment.dwFlags;

  0021c	8b 45 94	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  0021f	8b 4d 80	 mov	 ecx, DWORD PTR _ioVirtualSegment$70596[ebp+12]
  00222	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1551 :                                             pVirtualSegment->m_dwID = ioVirtualSegment.dwID;

  00225	8b 55 94	 mov	 edx, DWORD PTR _pVirtualSegment$[ebp]
  00228	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _ioVirtualSegment$70596[ebp]
  0022e	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 1552 :                                             pVirtualSegment->m_dwNextPlayID = ioVirtualSegment.dwNextPlayID;

  00231	8b 4d 94	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  00234	8b 55 84	 mov	 edx, DWORD PTR _ioVirtualSegment$70596[ebp+16]
  00237	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 1553 :                                             if (ioVirtualSegment.dwSegmentID != DMUS_SONG_NOSEG)

  0023a	83 bd 78 ff ff
	ff ff		 cmp	 DWORD PTR _ioVirtualSegment$70596[ebp+4], -1
  00241	74 19		 je	 SHORT $L70599

; 1554 :                                             {
; 1555 :                                                 GetSourceSegment(&pVirtualSegment->m_pSourceSegment,ioVirtualSegment.dwSegmentID);

  00243	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _ioVirtualSegment$70596[ebp+4]
  00249	50		 push	 eax
  0024a	8b 4d 94	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  0024d	83 c1 08	 add	 ecx, 8
  00250	51		 push	 ecx
  00251	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00257	e8 00 00 00 00	 call	 ?GetSourceSegment@CSong@@AAEXPAPAVCSegment@@K@Z ; CSong::GetSourceSegment
$L70599:

; 1556 :                                             }
; 1557 :                                             if (ioVirtualSegment.dwToolGraphID != DMUS_SONG_NOSEG)

  0025c	83 bd 7c ff ff
	ff ff		 cmp	 DWORD PTR _ioVirtualSegment$70596[ebp+8], -1
  00263	74 19		 je	 SHORT $L70600

; 1558 :                                             {
; 1559 :                                                 GetGraph(&pVirtualSegment->m_pGraph,ioVirtualSegment.dwToolGraphID);

  00265	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _ioVirtualSegment$70596[ebp+8]
  0026b	52		 push	 edx
  0026c	8b 45 94	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  0026f	83 c0 10	 add	 eax, 16			; 00000010H
  00272	50		 push	 eax
  00273	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00279	e8 00 00 00 00	 call	 ?GetGraph@CSong@@AAEXPAPAVCGraph@@K@Z ; CSong::GetGraph
$L70600:

; 1560 :                                             }
; 1561 :                                             fGotHeader = TRUE;

  0027e	c7 45 8c 01 00
	00 00		 mov	 DWORD PTR _fGotHeader$70522[ebp], 1
$L70598:

; 1562 :                                         }
; 1563 :                                         break;

  00285	e9 c2 00 00 00	 jmp	 $L70528
$L70609:

; 1564 :                                     }
; 1565 :                                     case DMUS_FOURCC_SEGTRANS_CHUNK:
; 1566 :                                         {
; 1567 :                                             DWORD dwTransCount;
; 1568 :                                             dwTransCount = ckChild.cksize / sizeof(DMUS_IO_TRANSITION_DEF);

  0028a	8b 45 e4	 mov	 eax, DWORD PTR _ckChild$[ebp+4]
  0028d	33 d2		 xor	 edx, edx
  0028f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00294	f7 f1		 div	 ecx
  00296	89 85 70 ff ff
	ff		 mov	 DWORD PTR _dwTransCount$70610[ebp], eax

; 1569 :                                             if (dwTransCount > 0)

  0029c	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _dwTransCount$70610[ebp], 0
  002a3	76 61		 jbe	 SHORT $L70612

; 1570 :                                             {
; 1571 :                                                 pVirtualSegment->m_pTransitions = new DMUS_IO_TRANSITION_DEF[dwTransCount];

  002a5	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _dwTransCount$70610[ebp]
  002ab	6b d2 0c	 imul	 edx, 12			; 0000000cH
  002ae	52		 push	 edx
  002af	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  002b4	83 c4 04	 add	 esp, 4
  002b7	89 85 68 ff ff
	ff		 mov	 DWORD PTR $T71940[ebp], eax
  002bd	8b 45 94	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  002c0	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR $T71940[ebp]
  002c6	89 48 68	 mov	 DWORD PTR [eax+104], ecx

; 1572 :                                                 if (pVirtualSegment->m_pTransitions)

  002c9	8b 55 94	 mov	 edx, DWORD PTR _pVirtualSegment$[ebp]
  002cc	83 7a 68 00	 cmp	 DWORD PTR [edx+104], 0
  002d0	74 2a		 je	 SHORT $L70615

; 1573 :                                                 {
; 1574 :                                                     pVirtualSegment->m_dwTransitionCount = dwTransCount;

  002d2	8b 45 94	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  002d5	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _dwTransCount$70610[ebp]
  002db	89 48 64	 mov	 DWORD PTR [eax+100], ecx

; 1575 :                                                     hr = pParser->Read(pVirtualSegment->m_pTransitions,sizeof(DMUS_IO_TRANSITION_DEF)*dwTransCount);

  002de	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _dwTransCount$70610[ebp]
  002e4	6b d2 0c	 imul	 edx, 12			; 0000000cH
  002e7	52		 push	 edx
  002e8	8b 45 94	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  002eb	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  002ee	51		 push	 ecx
  002ef	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  002f2	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  002f7	89 45 90	 mov	 DWORD PTR _hr$[ebp], eax

; 1576 :                                                 }
; 1577 :                                                 else

  002fa	eb 0a		 jmp	 SHORT $L70612
$L70615:

; 1578 :                                                 {
; 1579 :                                                     return E_OUTOFMEMORY;

  002fc	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00301	e9 c9 00 00 00	 jmp	 $L70473
$L70612:

; 1580 :                                                 }                                                        
; 1581 :                                             }
; 1582 :                                         }
; 1583 :                                         break;

  00306	eb 44		 jmp	 SHORT $L70528
$L70627:

; 1584 :                                     case DMUS_FOURCC_SEGMENT_CHUNK:
; 1585 :                                         fGotSegmentHeader = TRUE;

  00308	c7 45 88 01 00
	00 00		 mov	 DWORD PTR _fGotSegmentHeader$70523[ebp], 1

; 1586 :                                         hr = pParser->Read(&pVirtualSegment->m_SegHeader, sizeof(DMUS_IO_SEGMENT_HEADER));

  0030f	6a 38		 push	 56			; 00000038H
  00311	8b 55 94	 mov	 edx, DWORD PTR _pVirtualSegment$[ebp]
  00314	83 c2 28	 add	 edx, 40			; 00000028H
  00317	52		 push	 edx
  00318	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0031b	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  00320	89 45 90	 mov	 DWORD PTR _hr$[ebp], eax

; 1587 :                                         mtTime += (pVirtualSegment->m_SegHeader.dwRepeats * (pVirtualSegment->m_SegHeader.mtLoopEnd - pVirtualSegment->m_SegHeader.mtLoopStart)) + 
; 1588 :                                             pVirtualSegment->m_SegHeader.mtLength - pVirtualSegment->m_SegHeader.mtPlayStart;

  00323	8b 45 94	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  00326	8b 4d 94	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  00329	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  0032c	2b 51 34	 sub	 edx, DWORD PTR [ecx+52]
  0032f	8b 45 94	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  00332	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00335	0f af ca	 imul	 ecx, edx
  00338	8b 55 94	 mov	 edx, DWORD PTR _pVirtualSegment$[ebp]
  0033b	03 4a 2c	 add	 ecx, DWORD PTR [edx+44]
  0033e	8b 45 94	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  00341	2b 48 30	 sub	 ecx, DWORD PTR [eax+48]
  00344	8b 55 dc	 mov	 edx, DWORD PTR _mtTime$[ebp]
  00347	03 d1		 add	 edx, ecx
  00349	89 55 dc	 mov	 DWORD PTR _mtTime$[ebp], edx
$L70528:

; 1589 :                                     default:
; 1590 :                                         break;
; 1591 :                                 }
; 1592 :                             }

  0034c	e9 a2 fd ff ff	 jmp	 $L70525
$L70526:

; 1593 :                             pParser->LeaveList();

  00351	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00354	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 1594 :                             if (fGotHeader && fGotSegmentHeader)

  00359	83 7d 8c 00	 cmp	 DWORD PTR _fGotHeader$70522[ebp], 0
  0035d	74 1a		 je	 SHORT $L70630
  0035f	83 7d 88 00	 cmp	 DWORD PTR _fGotSegmentHeader$70523[ebp], 0
  00363	74 14		 je	 SHORT $L70630

; 1595 :                             {
; 1596 : //Trace(0,"Adding VSegment %ls with ID %ld to song.\n",pVirtualSegment->m_wszName,pVirtualSegment->m_dwID);
; 1597 :                                 m_VirtualSegmentList.AddTail(pVirtualSegment);

  00365	8b 45 94	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  00368	50		 push	 eax
  00369	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0036f	83 c1 20	 add	 ecx, 32			; 00000020H
  00372	e8 00 00 00 00	 call	 ?AddTail@CVirtualSegmentList@@QAEXPAVCVirtualSegment@@@Z ; CVirtualSegmentList::AddTail

; 1598 :                             }
; 1599 :                             else

  00377	eb 3d		 jmp	 SHORT $L70631
$L70630:

; 1600 :                             {
; 1601 :                                 delete pVirtualSegment;

  00379	8b 4d 94	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  0037c	89 8d 60 ff ff
	ff		 mov	 DWORD PTR $T71943[ebp], ecx
  00382	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR $T71943[ebp]
  00388	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T71942[ebp], edx
  0038e	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR $T71942[ebp], 0
  00395	74 15		 je	 SHORT $L71944
  00397	6a 01		 push	 1
  00399	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T71942[ebp]
  0039f	e8 00 00 00 00	 call	 ??_GCVirtualSegment@@QAEPAXI@Z
  003a4	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv241[ebp], eax
  003aa	eb 0a		 jmp	 SHORT $L70631
$L71944:
  003ac	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv241[ebp], 0
$L70631:

; 1602 :                             }
; 1603 :                             break;

  003b6	eb 07		 jmp	 SHORT $L70486
$L70521:

; 1604 :                         }
; 1605 :                         else
; 1606 :                         {
; 1607 :                             return E_OUTOFMEMORY;

  003b8	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  003bd	eb 10		 jmp	 SHORT $L70473
$L70486:

; 1608 :                         }
; 1609 :                         break;
; 1610 :                     default:
; 1611 :                         break;
; 1612 :                 }
; 1613 :                 break;
; 1614 : 
; 1615 :             default:
; 1616 :                 break;
; 1617 : 
; 1618 :         }
; 1619 :     }

  003bf	e9 6c fc ff ff	 jmp	 $L70483
$L70484:

; 1620 :     pParser->LeaveList();

  003c4	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  003c7	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 1621 :     return hr;

  003cc	8b 45 90	 mov	 eax, DWORD PTR _hr$[ebp]
$L70473:

; 1622 : }

  003cf	8b e5		 mov	 esp, ebp
  003d1	5d		 pop	 ebp
  003d2	c2 04 00	 ret	 4
?LoadVirtualSegmentList@CSong@@AAEJPAVCRiffParser@@@Z ENDP ; CSong::LoadVirtualSegmentList
_TEXT	ENDS
PUBLIC	??0?$TList@UClassGuidCounts@@@@QAE@XZ		; TList<ClassGuidCounts>::TList<ClassGuidCounts>
PUBLIC	??1?$TList@UClassGuidCounts@@@@QAE@XZ		; TList<ClassGuidCounts>::~TList<ClassGuidCounts>
PUBLIC	?GetHead@?$TList@UClassGuidCounts@@@@QBEPAV?$TListItem@UClassGuidCounts@@@@XZ ; TList<ClassGuidCounts>::GetHead
PUBLIC	?AddHead@?$TList@UClassGuidCounts@@@@QAEXPAV?$TListItem@UClassGuidCounts@@@@@Z ; TList<ClassGuidCounts>::AddHead
PUBLIC	??0?$TListItem@UClassGuidCounts@@@@QAE@XZ	; TListItem<ClassGuidCounts>::TListItem<ClassGuidCounts>
PUBLIC	?GetNext@?$TListItem@UClassGuidCounts@@@@QBEPAV1@XZ ; TListItem<ClassGuidCounts>::GetNext
PUBLIC	?GetItemValue@?$TListItem@UClassGuidCounts@@@@QAEAAUClassGuidCounts@@XZ ; TListItem<ClassGuidCounts>::GetItemValue
PUBLIC	?Less@CTrack@@QAE_NPAV1@@Z			; CTrack::Less
PUBLIC	??_GCTrack@@QAEPAXI@Z				; CTrack::`scalar deleting destructor'
EXTRN	_IID_IDirectMusicTrack8:BYTE
; Function compile flags: /Odt
;	COMDAT ?LoadTrackRefList@CSong@@AAEJPAVCRiffParser@@PAVCVirtualSegment@@@Z
_TEXT	SEGMENT
tv266 = -212
tv219 = -208
tv212 = -204
tv88 = -200
tv80 = -196
tv74 = -192
tv73 = -188
_this$ = -184
$T71961 = -180
$T71960 = -176
$T71957 = -172
$T71956 = -168
$T71955 = -164
$T71952 = -160
$T71949 = -156
_pNew$70843 = -152
_pScan$70833 = -148
_pPrevTrack$70834 = -144
_dwID$70781 = -140
_ioTrackRef$70737 = -136
_ioTrackExtrasHdr$70739 = -128
_pCountItem$70736 = -120
_ioTrackHdr$70738 = -116
_fGotRef$70741 = -84
_fGotHeader$70740 = -80
_pTrack$70723 = -76
_hr$ = -72
_GuidCountList$ = -68
_ckNext$ = -64
_ckChild$ = -32
_pParser$ = 8
_pVirtualSegment$ = 12
?LoadTrackRefList@CSong@@AAEJPAVCRiffParser@@PAVCVirtualSegment@@@Z PROC NEAR ; CSong::LoadTrackRefList, COMDAT
; _this$ = ecx

; 1631 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	56		 push	 esi
  0000a	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 1632 :     RIFFIO ckNext;
; 1633 :     RIFFIO ckChild;
; 1634 : 
; 1635 :     HRESULT hr = S_OK;

  00010	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1636 :     TList<ClassGuidCounts> GuidCountList;

  00017	8d 4d bc	 lea	 ecx, DWORD PTR _GuidCountList$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$TList@UClassGuidCounts@@@@QAE@XZ ; TList<ClassGuidCounts>::TList<ClassGuidCounts>

; 1637 :     pParser->EnterList(&ckNext);

  0001f	8d 45 c0	 lea	 eax, DWORD PTR _ckNext$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00026	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L70704:

; 1638 :     while(pParser->NextChunk(&hr))

  0002b	8d 4d b8	 lea	 ecx, DWORD PTR _hr$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00032	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  00037	85 c0		 test	 eax, eax
  00039	0f 84 4e 04 00
	00		 je	 $L70705

; 1639 :     {
; 1640 :         switch(ckNext.ckid)
; 1641 :         {

  0003f	8b 55 c0	 mov	 edx, DWORD PTR _ckNext$[ebp]
  00042	89 95 44 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], edx
  00048	81 bd 44 ff ff
	ff 4c 49 53 54	 cmp	 DWORD PTR tv73[ebp], 1414744396 ; 5453494cH
  00052	74 05		 je	 SHORT $L70718
  00054	e9 2f 04 00 00	 jmp	 $L70707
$L70718:

; 1642 :             case FOURCC_LIST:
; 1643 :                 switch(ckNext.fccType)
; 1644 :                 {

  00059	8b 45 c8	 mov	 eax, DWORD PTR _ckNext$[ebp+8]
  0005c	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
  00062	81 bd 40 ff ff
	ff 74 6b 72 6c	 cmp	 DWORD PTR tv74[ebp], 1819437940 ; 6c726b74H
  0006c	74 05		 je	 SHORT $L70732
  0006e	e9 15 04 00 00	 jmp	 $L70707
$L70732:

; 1645 :                     CTrack *pTrack;
; 1646 :                     case DMUS_FOURCC_TRACKREF_LIST :
; 1647 :                         pTrack = new CTrack;

  00073	6a 3c		 push	 60			; 0000003cH
  00075	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007a	83 c4 04	 add	 esp, 4
  0007d	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T71949[ebp], eax
  00083	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR $T71949[ebp], 0
  0008a	74 13		 je	 SHORT $L71950
  0008c	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR $T71949[ebp]
  00092	e8 00 00 00 00	 call	 ??0CTrack@@QAE@XZ	; CTrack::CTrack
  00097	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv80[ebp], eax
  0009d	eb 0a		 jmp	 SHORT $L71951
$L71950:
  0009f	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv80[ebp], 0
$L71951:
  000a9	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR tv80[ebp]
  000af	89 4d b4	 mov	 DWORD PTR _pTrack$70723[ebp], ecx

; 1648 :                         if (pTrack)

  000b2	83 7d b4 00	 cmp	 DWORD PTR _pTrack$70723[ebp], 0
  000b6	0f 84 b2 03 00
	00		 je	 $L70735

; 1649 :                         {
; 1650 :                             TListItem<ClassGuidCounts>* pCountItem = NULL;

  000bc	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _pCountItem$70736[ebp], 0

; 1651 :                             DMUS_IO_TRACKREF_HEADER ioTrackRef;
; 1652 :                             DMUS_IO_TRACK_HEADER ioTrackHdr;
; 1653 :                             DMUS_IO_TRACK_EXTRAS_HEADER ioTrackExtrasHdr;
; 1654 :                             ioTrackExtrasHdr.dwPriority = 0;

  000c3	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _ioTrackExtrasHdr$70739[ebp+4], 0

; 1655 :                             ioTrackExtrasHdr.dwFlags = DMUS_TRACKCONFIG_DEFAULT;

  000ca	c7 45 80 38 00
	00 00		 mov	 DWORD PTR _ioTrackExtrasHdr$70739[ebp], 56 ; 00000038H

; 1656 :                             ioTrackHdr.dwPosition = 0;

  000d1	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _ioTrackHdr$70738[ebp+16], 0

; 1657 :                             BOOL fGotHeader = FALSE;

  000d8	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _fGotHeader$70740[ebp], 0

; 1658 :                             BOOL fGotRef = FALSE;

  000df	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _fGotRef$70741[ebp], 0

; 1659 :                             pParser->EnterList(&ckChild);

  000e6	8d 55 e0	 lea	 edx, DWORD PTR _ckChild$[ebp]
  000e9	52		 push	 edx
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000ed	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L70743:

; 1660 :                             while(pParser->NextChunk(&hr))

  000f2	8d 45 b8	 lea	 eax, DWORD PTR _hr$[ebp]
  000f5	50		 push	 eax
  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000f9	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  000fe	85 c0		 test	 eax, eax
  00100	0f 84 ca 00 00
	00		 je	 $L70744

; 1661 :                             {
; 1662 :                                 switch( ckChild.ckid )
; 1663 :                                 {

  00106	8b 4d e0	 mov	 ecx, DWORD PTR _ckChild$[ebp]
  00109	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv88[ebp], ecx
  0010f	81 bd 38 ff ff
	ff 74 72 6b 68	 cmp	 DWORD PTR tv88[ebp], 1751872116 ; 686b7274H
  00119	74 3f		 je	 SHORT $L70767
  0011b	81 bd 38 ff ff
	ff 74 6b 72 68	 cmp	 DWORD PTR tv88[ebp], 1752329076 ; 68726b74H
  00125	74 11		 je	 SHORT $L70757
  00127	81 bd 38 ff ff
	ff 74 72 6b 78	 cmp	 DWORD PTR tv88[ebp], 2020307572 ; 786b7274H
  00131	74 75		 je	 SHORT $L70777
  00133	e9 93 00 00 00	 jmp	 $L70746
$L70757:

; 1664 :                                     case DMUS_FOURCC_TRACKREF_CHUNK:
; 1665 :                                     {
; 1666 :                                         hr = pParser->Read(&ioTrackRef, sizeof(ioTrackRef));

  00138	6a 08		 push	 8
  0013a	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _ioTrackRef$70737[ebp]
  00140	52		 push	 edx
  00141	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00144	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  00149	89 45 b8	 mov	 DWORD PTR _hr$[ebp], eax

; 1667 :                                         fGotRef = SUCCEEDED(hr);

  0014c	33 c0		 xor	 eax, eax
  0014e	83 7d b8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00152	0f 9d c0	 setge	 al
  00155	89 45 ac	 mov	 DWORD PTR _fGotRef$70741[ebp], eax

; 1668 :                                         break;

  00158	eb 71		 jmp	 SHORT $L70746
$L70767:

; 1669 :                                     }
; 1670 :                                     case DMUS_FOURCC_TRACK_CHUNK:
; 1671 :                                     {
; 1672 :                                         hr = pParser->Read(&ioTrackHdr, sizeof(ioTrackHdr));

  0015a	6a 20		 push	 32			; 00000020H
  0015c	8d 4d 8c	 lea	 ecx, DWORD PTR _ioTrackHdr$70738[ebp]
  0015f	51		 push	 ecx
  00160	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00163	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  00168	89 45 b8	 mov	 DWORD PTR _hr$[ebp], eax

; 1673 :                                         fGotHeader = SUCCEEDED(hr);

  0016b	33 d2		 xor	 edx, edx
  0016d	83 7d b8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00171	0f 9d c2	 setge	 dl
  00174	89 55 b0	 mov	 DWORD PTR _fGotHeader$70740[ebp], edx

; 1674 :                                         pTrack->m_guidClassID = ioTrackHdr.guidClassID;

  00177	8b 45 b4	 mov	 eax, DWORD PTR _pTrack$70723[ebp]
  0017a	83 c0 04	 add	 eax, 4
  0017d	8b 4d 8c	 mov	 ecx, DWORD PTR _ioTrackHdr$70738[ebp]
  00180	89 08		 mov	 DWORD PTR [eax], ecx
  00182	8b 55 90	 mov	 edx, DWORD PTR _ioTrackHdr$70738[ebp+4]
  00185	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00188	8b 4d 94	 mov	 ecx, DWORD PTR _ioTrackHdr$70738[ebp+8]
  0018b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0018e	8b 55 98	 mov	 edx, DWORD PTR _ioTrackHdr$70738[ebp+12]
  00191	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 1675 :                                         pTrack->m_dwGroupBits = ioTrackHdr.dwGroup;

  00194	8b 45 b4	 mov	 eax, DWORD PTR _pTrack$70723[ebp]
  00197	8b 4d a0	 mov	 ecx, DWORD PTR _ioTrackHdr$70738[ebp+20]
  0019a	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 1676 :                                         pTrack->m_dwPosition = ioTrackHdr.dwPosition;

  0019d	8b 55 b4	 mov	 edx, DWORD PTR _pTrack$70723[ebp]
  001a0	8b 45 9c	 mov	 eax, DWORD PTR _ioTrackHdr$70738[ebp+16]
  001a3	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 1677 :                                         break;

  001a6	eb 23		 jmp	 SHORT $L70746
$L70777:

; 1678 :                                     }
; 1679 :                                     case DMUS_FOURCC_TRACK_EXTRAS_CHUNK:
; 1680 :                                     {
; 1681 :                                         hr = pParser->Read(&ioTrackExtrasHdr, sizeof(ioTrackExtrasHdr));

  001a8	6a 08		 push	 8
  001aa	8d 4d 80	 lea	 ecx, DWORD PTR _ioTrackExtrasHdr$70739[ebp]
  001ad	51		 push	 ecx
  001ae	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  001b1	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  001b6	89 45 b8	 mov	 DWORD PTR _hr$[ebp], eax

; 1682 :                                         pTrack->m_dwPriority = ioTrackExtrasHdr.dwPriority;

  001b9	8b 55 b4	 mov	 edx, DWORD PTR _pTrack$70723[ebp]
  001bc	8b 45 84	 mov	 eax, DWORD PTR _ioTrackExtrasHdr$70739[ebp+4]
  001bf	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 1683 :                                         pTrack->m_dwFlags = ioTrackExtrasHdr.dwFlags;

  001c2	8b 4d b4	 mov	 ecx, DWORD PTR _pTrack$70723[ebp]
  001c5	8b 55 80	 mov	 edx, DWORD PTR _ioTrackExtrasHdr$70739[ebp]
  001c8	89 51 34	 mov	 DWORD PTR [ecx+52], edx
$L70746:

; 1684 :                                         break;
; 1685 : 
; 1686 :                                     }
; 1687 :                                     default:
; 1688 :                                         break;
; 1689 :                                 }
; 1690 :                             }

  001cb	e9 22 ff ff ff	 jmp	 $L70743
$L70744:

; 1691 :                             pParser->LeaveList();

  001d0	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  001d3	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 1692 :                             if (fGotHeader && fGotRef)

  001d8	83 7d b0 00	 cmp	 DWORD PTR _fGotHeader$70740[ebp], 0
  001dc	0f 84 a4 00 00
	00		 je	 $L70779
  001e2	83 7d ac 00	 cmp	 DWORD PTR _fGotRef$70741[ebp], 0
  001e6	0f 84 9a 00 00
	00		 je	 $L70779

; 1693 :                             {
; 1694 :                                 if (ioTrackRef.dwSegmentID != DMUS_SONG_NOSEG)

  001ec	83 bd 78 ff ff
	ff ff		 cmp	 DWORD PTR _ioTrackRef$70737[ebp], -1
  001f3	0f 84 8d 00 00
	00		 je	 $L70779

; 1695 :                                 {
; 1696 :                                     DWORD dwID = 0;

  001f9	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwID$70781[ebp], 0

; 1697 :                                     for (pCountItem = GuidCountList.GetHead(); pCountItem; pCountItem = pCountItem->GetNext())

  00203	8d 4d bc	 lea	 ecx, DWORD PTR _GuidCountList$[ebp]
  00206	e8 00 00 00 00	 call	 ?GetHead@?$TList@UClassGuidCounts@@@@QBEPAV?$TListItem@UClassGuidCounts@@@@XZ ; TList<ClassGuidCounts>::GetHead
  0020b	89 45 88	 mov	 DWORD PTR _pCountItem$70736[ebp], eax
  0020e	eb 0b		 jmp	 SHORT $L70826
$L70827:
  00210	8b 4d 88	 mov	 ecx, DWORD PTR _pCountItem$70736[ebp]
  00213	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UClassGuidCounts@@@@QBEPAV1@XZ ; TListItem<ClassGuidCounts>::GetNext
  00218	89 45 88	 mov	 DWORD PTR _pCountItem$70736[ebp], eax
$L70826:
  0021b	83 7d 88 00	 cmp	 DWORD PTR _pCountItem$70736[ebp], 0
  0021f	74 1d		 je	 SHORT $L70828

; 1698 :                                     {
; 1699 :                                         if (pCountItem->GetItemValue().guidClass == pTrack->m_guidClassID)

  00221	8b 45 b4	 mov	 eax, DWORD PTR _pTrack$70723[ebp]
  00224	83 c0 04	 add	 eax, 4
  00227	50		 push	 eax
  00228	8b 4d 88	 mov	 ecx, DWORD PTR _pCountItem$70736[ebp]
  0022b	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UClassGuidCounts@@@@QAEAAUClassGuidCounts@@XZ ; TListItem<ClassGuidCounts>::GetItemValue
  00230	50		 push	 eax
  00231	e8 00 00 00 00	 call	 _==@8
  00236	85 c0		 test	 eax, eax
  00238	74 02		 je	 SHORT $L70829

; 1700 :                                         {
; 1701 :                                             break;

  0023a	eb 02		 jmp	 SHORT $L70828
$L70829:

; 1702 :                                         }
; 1703 :                                     }

  0023c	eb d2		 jmp	 SHORT $L70827
$L70828:

; 1704 :                                     if (pCountItem)

  0023e	83 7d 88 00	 cmp	 DWORD PTR _pCountItem$70736[ebp], 0
  00242	74 11		 je	 SHORT $L70830

; 1705 :                                     {
; 1706 :                                         dwID = pCountItem->GetItemValue().dwCount;

  00244	8b 4d 88	 mov	 ecx, DWORD PTR _pCountItem$70736[ebp]
  00247	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UClassGuidCounts@@@@QAEAAUClassGuidCounts@@XZ ; TListItem<ClassGuidCounts>::GetItemValue
  0024c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0024f	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _dwID$70781[ebp], ecx
$L70830:

; 1707 :                                     }
; 1708 :                                     fGotHeader = GetSegmentTrack(&pTrack->m_pTrack,ioTrackRef.dwSegmentID,pTrack->m_dwGroupBits,dwID,pTrack->m_guidClassID);

  00255	8b 55 b4	 mov	 edx, DWORD PTR _pTrack$70723[ebp]
  00258	83 c2 04	 add	 edx, 4
  0025b	52		 push	 edx
  0025c	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _dwID$70781[ebp]
  00262	50		 push	 eax
  00263	8b 4d b4	 mov	 ecx, DWORD PTR _pTrack$70723[ebp]
  00266	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00269	52		 push	 edx
  0026a	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _ioTrackRef$70737[ebp]
  00270	50		 push	 eax
  00271	8b 4d b4	 mov	 ecx, DWORD PTR _pTrack$70723[ebp]
  00274	83 c1 14	 add	 ecx, 20			; 00000014H
  00277	51		 push	 ecx
  00278	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0027e	e8 00 00 00 00	 call	 ?GetSegmentTrack@CSong@@AAEHPAPAUIDirectMusicTrack@@KKKABU_GUID@@@Z ; CSong::GetSegmentTrack
  00283	89 45 b0	 mov	 DWORD PTR _fGotHeader$70740[ebp], eax
$L70779:

; 1709 :                                 }
; 1710 :                             }
; 1711 :                             if (fGotHeader && pTrack->m_pTrack)

  00286	83 7d b0 00	 cmp	 DWORD PTR _fGotHeader$70740[ebp], 0
  0028a	0f 84 9f 01 00
	00		 je	 $L70831
  00290	8b 55 b4	 mov	 edx, DWORD PTR _pTrack$70723[ebp]
  00293	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00297	0f 84 92 01 00
	00		 je	 $L70831

; 1712 :                             {
; 1713 :                                 pTrack->m_pTrack->QueryInterface(IID_IDirectMusicTrack8,(void **) &pTrack->m_pTrack8);

  0029d	8b 45 b4	 mov	 eax, DWORD PTR _pTrack$70723[ebp]
  002a0	83 c0 18	 add	 eax, 24			; 00000018H
  002a3	50		 push	 eax
  002a4	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack8
  002a9	8b 4d b4	 mov	 ecx, DWORD PTR _pTrack$70723[ebp]
  002ac	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002af	8b 45 b4	 mov	 eax, DWORD PTR _pTrack$70723[ebp]
  002b2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002b5	8b 12		 mov	 edx, DWORD PTR [edx]
  002b7	51		 push	 ecx
  002b8	ff 12		 call	 DWORD PTR [edx]

; 1714 :                                 // Add the track based on position.
; 1715 :                                 CTrack* pScan = pVirtualSegment->m_TrackList.GetHead();

  002ba	8b 4d 0c	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  002bd	83 c1 04	 add	 ecx, 4
  002c0	e8 00 00 00 00	 call	 ?GetHead@CTrackList@@QAEPAVCTrack@@XZ ; CTrackList::GetHead
  002c5	89 85 6c ff ff
	ff		 mov	 DWORD PTR _pScan$70833[ebp], eax

; 1716 :                                 CTrack* pPrevTrack = NULL;

  002cb	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pPrevTrack$70834[ebp], 0

; 1717 :                                 for (; pScan; pScan = pScan->GetNext())

  002d5	eb 11		 jmp	 SHORT $L70835
$L70836:
  002d7	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _pScan$70833[ebp]
  002dd	e8 00 00 00 00	 call	 ?GetNext@CTrack@@QAEPAV1@XZ ; CTrack::GetNext
  002e2	89 85 6c ff ff
	ff		 mov	 DWORD PTR _pScan$70833[ebp], eax
$L70835:
  002e8	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR _pScan$70833[ebp], 0
  002ef	74 26		 je	 SHORT $L70837

; 1718 :                                 {
; 1719 :                                     if (pTrack->Less(pScan))

  002f1	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pScan$70833[ebp]
  002f7	50		 push	 eax
  002f8	8b 4d b4	 mov	 ecx, DWORD PTR _pTrack$70723[ebp]
  002fb	e8 00 00 00 00	 call	 ?Less@CTrack@@QAE_NPAV1@@Z ; CTrack::Less
  00300	0f b6 c8	 movzx	 ecx, al
  00303	85 c9		 test	 ecx, ecx
  00305	74 02		 je	 SHORT $L70838

; 1720 :                                     {
; 1721 :                                         break;

  00307	eb 0e		 jmp	 SHORT $L70837
$L70838:

; 1722 :                                     }
; 1723 :                                     pPrevTrack = pScan;

  00309	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _pScan$70833[ebp]
  0030f	89 95 70 ff ff
	ff		 mov	 DWORD PTR _pPrevTrack$70834[ebp], edx

; 1724 :                                 }

  00315	eb c0		 jmp	 SHORT $L70836
$L70837:

; 1725 :                                 if (pPrevTrack)

  00317	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _pPrevTrack$70834[ebp], 0
  0031e	74 20		 je	 SHORT $L70839

; 1726 :                                 {
; 1727 :                                     pPrevTrack->SetNext(pTrack);

  00320	8b 45 b4	 mov	 eax, DWORD PTR _pTrack$70723[ebp]
  00323	50		 push	 eax
  00324	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _pPrevTrack$70834[ebp]
  0032a	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 1728 :                                     pTrack->SetNext(pScan);

  0032f	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _pScan$70833[ebp]
  00335	51		 push	 ecx
  00336	8b 4d b4	 mov	 ecx, DWORD PTR _pTrack$70723[ebp]
  00339	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 1729 :                                 }
; 1730 :                                 else

  0033e	eb 0f		 jmp	 SHORT $L70840
$L70839:

; 1731 :                                 {
; 1732 :                                     pVirtualSegment->m_TrackList.AddHead( pTrack );

  00340	8b 55 b4	 mov	 edx, DWORD PTR _pTrack$70723[ebp]
  00343	52		 push	 edx
  00344	8b 4d 0c	 mov	 ecx, DWORD PTR _pVirtualSegment$[ebp]
  00347	83 c1 04	 add	 ecx, 4
  0034a	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead
$L70840:

; 1733 :                                 }
; 1734 :                                 if (pCountItem)

  0034f	83 7d 88 00	 cmp	 DWORD PTR _pCountItem$70736[ebp], 0
  00353	74 29		 je	 SHORT $L70841

; 1735 :                                 {
; 1736 :                                     pCountItem->GetItemValue().dwCount++;

  00355	8b 4d 88	 mov	 ecx, DWORD PTR _pCountItem$70736[ebp]
  00358	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UClassGuidCounts@@@@QAEAAUClassGuidCounts@@XZ ; TListItem<ClassGuidCounts>::GetItemValue
  0035d	83 c0 10	 add	 eax, 16			; 00000010H
  00360	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv212[ebp], eax
  00366	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv212[ebp]
  0036c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036e	83 c1 01	 add	 ecx, 1
  00371	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR tv212[ebp]
  00377	89 0a		 mov	 DWORD PTR [edx], ecx

; 1737 :                                 }
; 1738 :                                 else

  00379	e9 af 00 00 00	 jmp	 $L70842
$L70841:

; 1739 :                                 {
; 1740 :                                     TListItem<ClassGuidCounts>* pNew = new TListItem<ClassGuidCounts>;

  0037e	6a 18		 push	 24			; 00000018H
  00380	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00385	83 c4 04	 add	 esp, 4
  00388	89 85 60 ff ff
	ff		 mov	 DWORD PTR $T71952[ebp], eax
  0038e	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR $T71952[ebp], 0
  00395	74 13		 je	 SHORT $L71953
  00397	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR $T71952[ebp]
  0039d	e8 00 00 00 00	 call	 ??0?$TListItem@UClassGuidCounts@@@@QAE@XZ ; TListItem<ClassGuidCounts>::TListItem<ClassGuidCounts>
  003a2	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv219[ebp], eax
  003a8	eb 0a		 jmp	 SHORT $L71954
$L71953:
  003aa	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv219[ebp], 0
$L71954:
  003b4	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv219[ebp]
  003ba	89 85 68 ff ff
	ff		 mov	 DWORD PTR _pNew$70843[ebp], eax

; 1741 :                                     if (pNew)

  003c0	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR _pNew$70843[ebp], 0
  003c7	74 4a		 je	 SHORT $L70846

; 1742 :                                     {
; 1743 :                                         pNew->GetItemValue().dwCount = 1;

  003c9	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _pNew$70843[ebp]
  003cf	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UClassGuidCounts@@@@QAEAAUClassGuidCounts@@XZ ; TListItem<ClassGuidCounts>::GetItemValue
  003d4	c7 40 10 01 00
	00 00		 mov	 DWORD PTR [eax+16], 1

; 1744 :                                         pNew->GetItemValue().guidClass = pTrack->m_guidClassID;

  003db	8b 75 b4	 mov	 esi, DWORD PTR _pTrack$70723[ebp]
  003de	83 c6 04	 add	 esi, 4
  003e1	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _pNew$70843[ebp]
  003e7	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UClassGuidCounts@@@@QAEAAUClassGuidCounts@@XZ ; TListItem<ClassGuidCounts>::GetItemValue
  003ec	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003ee	89 08		 mov	 DWORD PTR [eax], ecx
  003f0	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  003f3	89 50 04	 mov	 DWORD PTR [eax+4], edx
  003f6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  003f9	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  003fc	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  003ff	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 1745 :                                         GuidCountList.AddHead(pNew);

  00402	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _pNew$70843[ebp]
  00408	50		 push	 eax
  00409	8d 4d bc	 lea	 ecx, DWORD PTR _GuidCountList$[ebp]
  0040c	e8 00 00 00 00	 call	 ?AddHead@?$TList@UClassGuidCounts@@@@QAEXPAV?$TListItem@UClassGuidCounts@@@@@Z ; TList<ClassGuidCounts>::AddHead

; 1746 :                                     }
; 1747 :                                     else return E_OUTOFMEMORY;

  00411	eb 1a		 jmp	 SHORT $L70842
$L70846:
  00413	c7 85 5c ff ff
	ff 0e 00 07 80	 mov	 DWORD PTR $T71955[ebp], -2147024882 ; 8007000eH
  0041d	8d 4d bc	 lea	 ecx, DWORD PTR _GuidCountList$[ebp]
  00420	e8 00 00 00 00	 call	 ??1?$TList@UClassGuidCounts@@@@QAE@XZ ; TList<ClassGuidCounts>::~TList<ClassGuidCounts>
  00425	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T71955[ebp]
  0042b	eb 7f		 jmp	 SHORT $L70651
$L70842:

; 1748 :                                 }
; 1749 :                             }
; 1750 :                             else

  0042d	eb 3d		 jmp	 SHORT $L70850
$L70831:

; 1751 :                             {
; 1752 :                                 delete pTrack;

  0042f	8b 4d b4	 mov	 ecx, DWORD PTR _pTrack$70723[ebp]
  00432	89 8d 54 ff ff
	ff		 mov	 DWORD PTR $T71957[ebp], ecx
  00438	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR $T71957[ebp]
  0043e	89 95 58 ff ff
	ff		 mov	 DWORD PTR $T71956[ebp], edx
  00444	83 bd 58 ff ff
	ff 00		 cmp	 DWORD PTR $T71956[ebp], 0
  0044b	74 15		 je	 SHORT $L71958
  0044d	6a 01		 push	 1
  0044f	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR $T71956[ebp]
  00455	e8 00 00 00 00	 call	 ??_GCTrack@@QAEPAXI@Z
  0045a	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv266[ebp], eax
  00460	eb 0a		 jmp	 SHORT $L70850
$L71958:
  00462	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv266[ebp], 0
$L70850:

; 1753 :                             }
; 1754 :                             break;

  0046c	eb 1a		 jmp	 SHORT $L70707
$L70735:

; 1755 :                         }
; 1756 :                         else
; 1757 :                         {
; 1758 :                             return E_OUTOFMEMORY;

  0046e	c7 85 50 ff ff
	ff 0e 00 07 80	 mov	 DWORD PTR $T71960[ebp], -2147024882 ; 8007000eH
  00478	8d 4d bc	 lea	 ecx, DWORD PTR _GuidCountList$[ebp]
  0047b	e8 00 00 00 00	 call	 ??1?$TList@UClassGuidCounts@@@@QAE@XZ ; TList<ClassGuidCounts>::~TList<ClassGuidCounts>
  00480	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR $T71960[ebp]
  00486	eb 24		 jmp	 SHORT $L70651
$L70707:

; 1759 :                         }
; 1760 :                         break;
; 1761 :                     
; 1762 :                     default:
; 1763 :                         break;
; 1764 :                 }
; 1765 :                 break;
; 1766 : 
; 1767 :             default:
; 1768 :                 break;
; 1769 : 
; 1770 :         }
; 1771 :     }

  00488	e9 9e fb ff ff	 jmp	 $L70704
$L70705:

; 1772 :     pParser->LeaveList();

  0048d	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00490	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 1773 :     return hr;

  00495	8b 45 b8	 mov	 eax, DWORD PTR _hr$[ebp]
  00498	89 85 4c ff ff
	ff		 mov	 DWORD PTR $T71961[ebp], eax
  0049e	8d 4d bc	 lea	 ecx, DWORD PTR _GuidCountList$[ebp]
  004a1	e8 00 00 00 00	 call	 ??1?$TList@UClassGuidCounts@@@@QAE@XZ ; TList<ClassGuidCounts>::~TList<ClassGuidCounts>
  004a6	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR $T71961[ebp]
$L70651:

; 1774 : }

  004ac	5e		 pop	 esi
  004ad	8b e5		 mov	 esp, ebp
  004af	5d		 pop	 ebp
  004b0	c2 08 00	 ret	 8
?LoadTrackRefList@CSong@@AAEJPAVCRiffParser@@PAVCVirtualSegment@@@Z ENDP ; CSong::LoadTrackRefList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Save@CSong@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT
_this$ = 8
_pIStream$ = 12
_fClearDirty$ = 16
?Save@CSong@@UAGJPAUIStream@@H@Z PROC NEAR		; CSong::Save, COMDAT

; 1777 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1778 :     return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 1779 : }

  00008	5d		 pop	 ebp
  00009	c2 0c 00	 ret	 12			; 0000000cH
?Save@CSong@@UAGJPAUIStream@@H@Z ENDP			; CSong::Save
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CSong@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT
_this$ = 8
_pcbSize$ = 12
?GetSizeMax@CSong@@UAGJPAT_ULARGE_INTEGER@@@Z PROC NEAR	; CSong::GetSizeMax, COMDAT

; 1782 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1783 :     return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 1784 : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?GetSizeMax@CSong@@UAGJPAT_ULARGE_INTEGER@@@Z ENDP	; CSong::GetSizeMax
_TEXT	ENDS
PUBLIC	??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@ ; `string'
PUBLIC	??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@ ; `string'
PUBLIC	??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@ ; `string'
EXTRN	?GetDescriptor@CInfo@@QAEJPAU_DMUS_OBJECTDESC@@ABU_GUID@@@Z:NEAR ; CInfo::GetDescriptor
;	COMDAT ??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@
CONST	SEGMENT
??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@ DB 'offsetof(DM'
	DB	'US_OBJECTDESC, dwSize) == 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@ DB '%s@%s: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB DB 'C'
	DB	'Song::GetDescriptor', 00H			; `CSong::GetDescriptor'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
CONST	SEGMENT
??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@ DB '%s: p'
	DB	'Desc does not point to as much memory as pDesc->dwSize indica'
	DB	'tes', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@
CONST	SEGMENT
??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@ DB '%'
	DB	's: pDesc->dwSize is too small', 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z
_TEXT	SEGMENT
_this$ = 8
_pDesc$ = 12
?GetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z PROC NEAR ; CSong::GetDescriptor, COMDAT

; 1791 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1792 :     // Argument validation
; 1793 :     V_INAME(CSong::GetDescriptor);
; 1794 :     V_STRUCTPTR_WRITE(pDesc, DMUS_OBJECTDESC);

  00003	33 c0		 xor	 eax, eax
  00005	85 c0		 test	 eax, eax
  00007	74 23		 je	 SHORT $L70878
  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@
  0000e	68 02 07 00 00	 push	 1794			; 00000702H
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 14	 add	 esp, 20			; 00000014H
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L70878:
  0002c	6a 04		 push	 4
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _pDesc$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $L70882
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
  00045	6a ff		 push	 -1
  00047	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	e8 00 00 00 00	 call	 _DebugBreak@0
$L70882:
  00054	8b 55 0c	 mov	 edx, DWORD PTR _pDesc$[ebp]
  00057	81 3a 50 03 00
	00		 cmp	 DWORD PTR [edx], 848	; 00000350H
  0005d	73 19		 jae	 SHORT $L70885
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00064	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@
  00069	6a ff		 push	 -1
  0006b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
  00073	e8 00 00 00 00	 call	 _DebugBreak@0
$L70885:
  00078	8b 45 0c	 mov	 eax, DWORD PTR _pDesc$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	51		 push	 ecx
  0007e	8b 55 0c	 mov	 edx, DWORD PTR _pDesc$[ebp]
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00087	85 c0		 test	 eax, eax
  00089	74 19		 je	 SHORT $L70887
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00090	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
  00095	6a ff		 push	 -1
  00097	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	e8 00 00 00 00	 call	 _DebugBreak@0
$L70887:

; 1795 : #ifdef DXAPI
; 1796 : 	CHECK_ZOMBIE(m_fZombie);
; 1797 : #endif
; 1798 :     return m_Info.GetDescriptor(pDesc,CLSID_DirectMusicSong);

  000a4	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSong
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _pDesc$[ebp]
  000ac	50		 push	 eax
  000ad	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	83 c1 44	 add	 ecx, 68			; 00000044H
  000b3	e8 00 00 00 00	 call	 ?GetDescriptor@CInfo@@QAEJPAU_DMUS_OBJECTDESC@@ABU_GUID@@@Z ; CInfo::GetDescriptor

; 1799 : }

  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
?GetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z ENDP	; CSong::GetDescriptor
_TEXT	ENDS
EXTRN	?SetDescriptor@CInfo@@QAEJPAU_DMUS_OBJECTDESC@@@Z:NEAR ; CInfo::SetDescriptor
;	COMDAT ?__szValidateInterfaceName@?1??SetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??SetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB DB 'C'
	DB	'Song::SetDescriptor', 00H			; `CSong::SetDescriptor'::`2'::__szValidateInterfaceName
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?SetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z
_TEXT	SEGMENT
_this$ = 8
_pDesc$ = 12
?SetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z PROC NEAR ; CSong::SetDescriptor, COMDAT

; 1802 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1803 :     // Argument validation
; 1804 :     V_INAME(CSong::SetDescriptor);
; 1805 :     V_STRUCTPTR_READ(pDesc, DMUS_OBJECTDESC);

  00003	33 c0		 xor	 eax, eax
  00005	85 c0		 test	 eax, eax
  00007	74 23		 je	 SHORT $L70896
  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@
  0000e	68 0d 07 00 00	 push	 1805			; 0000070dH
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 14	 add	 esp, 20			; 00000014H
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L70896:
  0002c	6a 04		 push	 4
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _pDesc$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $L70898
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??SetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
  00045	6a ff		 push	 -1
  00047	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	e8 00 00 00 00	 call	 _DebugBreak@0
$L70898:
  00054	8b 55 0c	 mov	 edx, DWORD PTR _pDesc$[ebp]
  00057	81 3a 50 03 00
	00		 cmp	 DWORD PTR [edx], 848	; 00000350H
  0005d	73 19		 jae	 SHORT $L70900
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??SetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00064	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@
  00069	6a ff		 push	 -1
  0006b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
  00073	e8 00 00 00 00	 call	 _DebugBreak@0
$L70900:
  00078	8b 45 0c	 mov	 eax, DWORD PTR _pDesc$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	51		 push	 ecx
  0007e	8b 55 0c	 mov	 edx, DWORD PTR _pDesc$[ebp]
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00087	85 c0		 test	 eax, eax
  00089	74 19		 je	 SHORT $L70901
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??SetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00090	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
  00095	6a ff		 push	 -1
  00097	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	e8 00 00 00 00	 call	 _DebugBreak@0
$L70901:

; 1806 : #ifdef DXAPI
; 1807 : 	CHECK_ZOMBIE(m_fZombie);
; 1808 : #endif
; 1809 :     return m_Info.SetDescriptor(pDesc);

  000a4	8b 45 0c	 mov	 eax, DWORD PTR _pDesc$[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	83 c1 44	 add	 ecx, 68			; 00000044H
  000ae	e8 00 00 00 00	 call	 ?SetDescriptor@CInfo@@QAEJPAU_DMUS_OBJECTDESC@@@Z ; CInfo::SetDescriptor

; 1810 : }

  000b3	5d		 pop	 ebp
  000b4	c2 08 00	 ret	 8
?SetDescriptor@CSong@@UAGJPAU_DMUS_OBJECTDESC@@@Z ENDP	; CSong::SetDescriptor
_TEXT	ENDS
EXTRN	?ParseDescriptor@CInfo@@QAEJPAUIStream@@PAU_DMUS_OBJECTDESC@@KABU_GUID@@@Z:NEAR ; CInfo::ParseDescriptor
EXTRN	_CLSID_DirectMusicSegment:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB DB 'C'
	DB	'Song::ParseDescriptor', 00H			; `CSong::ParseDescriptor'::`2'::__szValidateInterfaceName
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z
_TEXT	SEGMENT
_li$ = -24
_hr$ = -12
_ul$ = -8
_this$ = 8
_pIStream$ = 12
_pDesc$ = 16
?ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z PROC NEAR ; CSong::ParseDescriptor, COMDAT

; 1813 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1814 :     V_INAME(CSong::ParseDescriptor);
; 1815 :     V_INTERFACE(pIStream);

  00006	6a 04		 push	 4
  00008	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L70910
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L70910:
  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003b	85 c0		 test	 eax, eax
  0003d	74 19		 je	 SHORT $L70913
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00049	6a ff		 push	 -1
  0004b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	e8 00 00 00 00	 call	 _DebugBreak@0
$L70913:
  00058	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00065	85 c0		 test	 eax, eax
  00067	74 19		 je	 SHORT $L70915
  00069	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00073	6a ff		 push	 -1
  00075	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	e8 00 00 00 00	 call	 _DebugBreak@0
$L70915:

; 1816 :     V_STRUCTPTR_WRITE(pDesc, DMUS_OBJECTDESC);

  00082	33 c0		 xor	 eax, eax
  00084	85 c0		 test	 eax, eax
  00086	74 23		 je	 SHORT $L70918
  00088	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@
  0008d	68 18 07 00 00	 push	 1816			; 00000718H
  00092	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@MIGNIOBE@c?3?2xbox?2private?2windows?2directx?2@
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@
  0009c	6a ff		 push	 -1
  0009e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
  000a6	e8 00 00 00 00	 call	 _DebugBreak@0
$L70918:
  000ab	6a 04		 push	 4
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _pDesc$[ebp]
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b6	85 c0		 test	 eax, eax
  000b8	74 19		 je	 SHORT $L70920
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
  000bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
  000c4	6a ff		 push	 -1
  000c6	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ce	e8 00 00 00 00	 call	 _DebugBreak@0
$L70920:
  000d3	8b 55 10	 mov	 edx, DWORD PTR _pDesc$[ebp]
  000d6	81 3a 50 03 00
	00		 cmp	 DWORD PTR [edx], 848	; 00000350H
  000dc	73 19		 jae	 SHORT $L70922
  000de	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@
  000e8	6a ff		 push	 -1
  000ea	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f2	e8 00 00 00 00	 call	 _DebugBreak@0
$L70922:
  000f7	8b 45 10	 mov	 eax, DWORD PTR _pDesc$[ebp]
  000fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fc	51		 push	 ecx
  000fd	8b 55 10	 mov	 edx, DWORD PTR _pDesc$[ebp]
  00100	52		 push	 edx
  00101	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00106	85 c0		 test	 eax, eax
  00108	74 19		 je	 SHORT $L70923
  0010a	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
  0010f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
  00114	6a ff		 push	 -1
  00116	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011e	e8 00 00 00 00	 call	 _DebugBreak@0
$L70923:

; 1817 : #ifdef DXAPI
; 1818 : 	CHECK_ZOMBIE(m_fZombie);
; 1819 : #endif
; 1820 : 	// Save stream's current position. If this can't parse a song, we'll try a segment.
; 1821 : 	LARGE_INTEGER li;
; 1822 :     ULARGE_INTEGER ul;
; 1823 :     li.HighPart = 0;

  00123	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _li$[ebp+4], 0

; 1824 :     li.LowPart = 0;

  0012a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _li$[ebp], 0

; 1825 :     pIStream->Seek(li, STREAM_SEEK_CUR, &ul);

  00131	8d 45 f8	 lea	 eax, DWORD PTR _ul$[ebp]
  00134	50		 push	 eax
  00135	6a 01		 push	 1
  00137	8b 4d ec	 mov	 ecx, DWORD PTR _li$[ebp+4]
  0013a	51		 push	 ecx
  0013b	8b 55 e8	 mov	 edx, DWORD PTR _li$[ebp]
  0013e	52		 push	 edx
  0013f	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00142	8b 08		 mov	 ecx, DWORD PTR [eax]
  00144	8b 55 0c	 mov	 edx, DWORD PTR _pIStream$[ebp]
  00147	52		 push	 edx
  00148	ff 51 14	 call	 DWORD PTR [ecx+20]

; 1826 : 	pDesc->dwValidData = 0;

  0014b	8b 45 10	 mov	 eax, DWORD PTR _pDesc$[ebp]
  0014e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1827 :     HRESULT hr = m_Info.ParseDescriptor(pIStream,pDesc,DMUS_FOURCC_SONG_FORM,CLSID_DirectMusicSong);

  00155	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSong
  0015a	68 44 4d 53 4f	 push	 1330859332		; 4f534d44H
  0015f	8b 4d 10	 mov	 ecx, DWORD PTR _pDesc$[ebp]
  00162	51		 push	 ecx
  00163	8b 55 0c	 mov	 edx, DWORD PTR _pIStream$[ebp]
  00166	52		 push	 edx
  00167	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	83 c1 44	 add	 ecx, 68			; 00000044H
  0016d	e8 00 00 00 00	 call	 ?ParseDescriptor@CInfo@@QAEJPAUIStream@@PAU_DMUS_OBJECTDESC@@KABU_GUID@@@Z ; CInfo::ParseDescriptor
  00172	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 1828 :     if (FAILED(hr))

  00175	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00179	7d 45		 jge	 SHORT $L70936

; 1829 :     {
; 1830 :         li.HighPart = 0;

  0017b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _li$[ebp+4], 0

; 1831 : 		li.LowPart = ul.LowPart;

  00182	8b 45 f8	 mov	 eax, DWORD PTR _ul$[ebp]
  00185	89 45 e8	 mov	 DWORD PTR _li$[ebp], eax

; 1832 : 		pIStream->Seek(li, STREAM_SEEK_SET, NULL);

  00188	6a 00		 push	 0
  0018a	6a 00		 push	 0
  0018c	8b 4d ec	 mov	 ecx, DWORD PTR _li$[ebp+4]
  0018f	51		 push	 ecx
  00190	8b 55 e8	 mov	 edx, DWORD PTR _li$[ebp]
  00193	52		 push	 edx
  00194	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00197	8b 08		 mov	 ecx, DWORD PTR [eax]
  00199	8b 55 0c	 mov	 edx, DWORD PTR _pIStream$[ebp]
  0019c	52		 push	 edx
  0019d	ff 51 14	 call	 DWORD PTR [ecx+20]

; 1833 :         hr = m_Info.ParseDescriptor(pIStream,pDesc,DMUS_FOURCC_SEGMENT_FORM,CLSID_DirectMusicSegment);

  001a0	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSegment
  001a5	68 44 4d 53 47	 push	 1196641604		; 47534d44H
  001aa	8b 45 10	 mov	 eax, DWORD PTR _pDesc$[ebp]
  001ad	50		 push	 eax
  001ae	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  001b1	51		 push	 ecx
  001b2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001b5	83 c1 44	 add	 ecx, 68			; 00000044H
  001b8	e8 00 00 00 00	 call	 ?ParseDescriptor@CInfo@@QAEJPAUIStream@@PAU_DMUS_OBJECTDESC@@KABU_GUID@@@Z ; CInfo::ParseDescriptor
  001bd	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L70936:

; 1834 :     }
; 1835 :     return hr;

  001c0	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 1836 : }

  001c3	8b e5		 mov	 esp, ebp
  001c5	5d		 pop	 ebp
  001c6	c2 0c 00	 ret	 12			; 0000000cH
?ParseDescriptor@CSong@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z ENDP ; CSong::ParseDescriptor
_TEXT	ENDS
PUBLIC	??0ComposingTrack@@QAE@XZ			; ComposingTrack::ComposingTrack
PUBLIC	??0?$TList@UCompositionComponent@@@@QAE@XZ	; TList<CompositionComponent>::TList<CompositionComponent>
EXTRN	_memset:NEAR
; Function compile flags: /Odt
;	COMDAT ??0ComposingTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0ComposingTrack@@QAE@XZ PROC NEAR			; ComposingTrack::ComposingTrack, COMDAT
; _this$ = ecx

; 1839 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 c1 18	 add	 ecx, 24			; 00000018H
  00021	e8 00 00 00 00	 call	 ??0?$TList@UCompositionComponent@@@@QAE@XZ ; TList<CompositionComponent>::TList<CompositionComponent>

; 1840 :     memset((void*) &m_guidClassID, 0, sizeof(m_guidClassID));

  00026	6a 10		 push	 16			; 00000010H
  00028	6a 00		 push	 0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _memset
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1841 : }

  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0ComposingTrack@@QAE@XZ ENDP				; ComposingTrack::ComposingTrack
_TEXT	ENDS
PUBLIC	?GetNext@?$TListItem@UCompositionComponent@@@@QBEPAV1@XZ ; TListItem<CompositionComponent>::GetNext
PUBLIC	?GetItemValue@?$TListItem@UCompositionComponent@@@@QAEAAUCompositionComponent@@XZ ; TListItem<CompositionComponent>::GetItemValue
PUBLIC	??1ComposingTrack@@QAE@XZ			; ComposingTrack::~ComposingTrack
PUBLIC	??1?$TList@UCompositionComponent@@@@QAE@XZ	; TList<CompositionComponent>::~TList<CompositionComponent>
PUBLIC	?GetHead@?$TList@UCompositionComponent@@@@QBEPAV?$TListItem@UCompositionComponent@@@@XZ ; TList<CompositionComponent>::GetHead
; Function compile flags: /Odt
;	COMDAT ??1ComposingTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12
_rComponent$71000 = -8
_pComponent$ = -4
??1ComposingTrack@@QAE@XZ PROC NEAR			; ComposingTrack::~ComposingTrack, COMDAT
; _this$ = ecx

; 1844 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1845 :     TListItem<CompositionComponent>* pComponent = m_Components.GetHead();

  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 18	 add	 ecx, 24			; 00000018H
  0000f	e8 00 00 00 00	 call	 ?GetHead@?$TList@UCompositionComponent@@@@QBEPAV?$TListItem@UCompositionComponent@@@@XZ ; TList<CompositionComponent>::GetHead
  00014	89 45 fc	 mov	 DWORD PTR _pComponent$[ebp], eax

; 1846 :     for (; pComponent; pComponent = pComponent->GetNext())

  00017	eb 0b		 jmp	 SHORT $L70997
$L70998:
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _pComponent$[ebp]
  0001c	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UCompositionComponent@@@@QBEPAV1@XZ ; TListItem<CompositionComponent>::GetNext
  00021	89 45 fc	 mov	 DWORD PTR _pComponent$[ebp], eax
$L70997:
  00024	83 7d fc 00	 cmp	 DWORD PTR _pComponent$[ebp], 0
  00028	74 63		 je	 SHORT $L70951

; 1847 :     {
; 1848 :         CompositionComponent& rComponent = pComponent->GetItemValue();

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _pComponent$[ebp]
  0002d	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UCompositionComponent@@@@QAEAAUCompositionComponent@@XZ ; TListItem<CompositionComponent>::GetItemValue
  00032	89 45 f8	 mov	 DWORD PTR _rComponent$71000[ebp], eax

; 1849 :         if (rComponent.pVirtualSegment && rComponent.pVirtualSegment->m_pPlaySegment)

  00035	8b 45 f8	 mov	 eax, DWORD PTR _rComponent$71000[ebp]
  00038	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003b	74 21		 je	 SHORT $L71001
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _rComponent$71000[ebp]
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  00046	74 16		 je	 SHORT $L71001

; 1850 :         {
; 1851 :             rComponent.pVirtualSegment->m_pPlaySegment->Release();

  00048	8b 45 f8	 mov	 eax, DWORD PTR _rComponent$71000[ebp]
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00050	8b 45 f8	 mov	 eax, DWORD PTR _rComponent$71000[ebp]
  00053	8b 08		 mov	 ecx, DWORD PTR [eax]
  00055	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00058	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0005a	50		 push	 eax
  0005b	ff 51 08	 call	 DWORD PTR [ecx+8]
$L71001:

; 1852 :         }
; 1853 :         if (rComponent.pComposingTrack && rComponent.pComposingTrack->m_pTrack8)

  0005e	8b 55 f8	 mov	 edx, DWORD PTR _rComponent$71000[ebp]
  00061	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00065	74 24		 je	 SHORT $L71002
  00067	8b 45 f8	 mov	 eax, DWORD PTR _rComponent$71000[ebp]
  0006a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006d	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00071	74 18		 je	 SHORT $L71002

; 1854 :         {
; 1855 :             rComponent.pComposingTrack->m_pTrack8->Release();

  00073	8b 55 f8	 mov	 edx, DWORD PTR _rComponent$71000[ebp]
  00076	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00079	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0007c	8b 55 f8	 mov	 edx, DWORD PTR _rComponent$71000[ebp]
  0007f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00082	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00085	8b 01		 mov	 eax, DWORD PTR [ecx]
  00087	52		 push	 edx
  00088	ff 50 08	 call	 DWORD PTR [eax+8]
$L71002:

; 1856 :         }
; 1857 :     }

  0008b	eb 8c		 jmp	 SHORT $L70998
$L70951:

; 1858 : }

  0008d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	83 c1 18	 add	 ecx, 24			; 00000018H
  00093	e8 00 00 00 00	 call	 ??1?$TList@UCompositionComponent@@@@QAE@XZ ; TList<CompositionComponent>::~TList<CompositionComponent>
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
??1ComposingTrack@@QAE@XZ ENDP				; ComposingTrack::~ComposingTrack
_TEXT	ENDS
PUBLIC	??0?$TListItem@UCompositionComponent@@@@QAE@XZ	; TListItem<CompositionComponent>::TListItem<CompositionComponent>
PUBLIC	??_C@_0FC@FEDNCMD@Error?3?5Unable?5to?5compose?5song?5be@ ; `string'
PUBLIC	?AddHead@?$TList@UCompositionComponent@@@@QAEXPAV?$TListItem@UCompositionComponent@@@@@Z ; TList<CompositionComponent>::AddHead
;	COMDAT ??_C@_0FC@FEDNCMD@Error?3?5Unable?5to?5compose?5song?5be@
CONST	SEGMENT
??_C@_0FC@FEDNCMD@Error?3?5Unable?5to?5compose?5song?5be@ DB 'Error: Unab'
	DB	'le to compose song because of a required segment or track is '
	DB	'missing.', 0aH, 00H				; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?AddTrack@ComposingTrack@@QAEJPAVCVirtualSegment@@PAVCTrack@@@Z
_TEXT	SEGMENT
tv77 = -24
_this$ = -20
$T71986 = -16
_rComponent$71020 = -12
_pComponent$ = -8
_hr$ = -4
_pVirtualSegment$ = 8
_pTrack$ = 12
?AddTrack@ComposingTrack@@QAEJPAVCVirtualSegment@@PAVCTrack@@@Z PROC NEAR ; ComposingTrack::AddTrack, COMDAT
; _this$ = ecx

; 1861 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1862 :     HRESULT hr = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1863 :     if (!pVirtualSegment || !pVirtualSegment->m_pPlaySegment || !pTrack || !pTrack->m_pTrack8)

  00010	83 7d 08 00	 cmp	 DWORD PTR _pVirtualSegment$[ebp], 0
  00014	74 18		 je	 SHORT $L71011
  00016	8b 45 08	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  00019	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0001d	74 0f		 je	 SHORT $L71011
  0001f	83 7d 0c 00	 cmp	 DWORD PTR _pTrack$[ebp], 0
  00023	74 09		 je	 SHORT $L71011
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  00028	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  0002c	75 19		 jne	 SHORT $L71010
$L71011:

; 1864 :     {
; 1865 :         Trace(1,"Error: Unable to compose song because of a required segment or track is missing.\n");

  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FC@FEDNCMD@Error?3?5Unable?5to?5compose?5song?5be@
  00033	6a 01		 push	 1
  00035	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0003a	83 c4 08	 add	 esp, 8

; 1866 :         return E_INVALIDARG;

  0003d	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00042	e9 9a 00 00 00	 jmp	 $L71007
$L71010:

; 1867 :     }
; 1868 :     TListItem<CompositionComponent>* pComponent = new TListItem<CompositionComponent>;

  00047	6a 10		 push	 16			; 00000010H
  00049	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004e	83 c4 04	 add	 esp, 4
  00051	89 45 f0	 mov	 DWORD PTR $T71986[ebp], eax
  00054	83 7d f0 00	 cmp	 DWORD PTR $T71986[ebp], 0
  00058	74 0d		 je	 SHORT $L71987
  0005a	8b 4d f0	 mov	 ecx, DWORD PTR $T71986[ebp]
  0005d	e8 00 00 00 00	 call	 ??0?$TListItem@UCompositionComponent@@@@QAE@XZ ; TListItem<CompositionComponent>::TListItem<CompositionComponent>
  00062	89 45 e8	 mov	 DWORD PTR tv77[ebp], eax
  00065	eb 07		 jmp	 SHORT $L71988
$L71987:
  00067	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$L71988:
  0006e	8b 55 e8	 mov	 edx, DWORD PTR tv77[ebp]
  00071	89 55 f8	 mov	 DWORD PTR _pComponent$[ebp], edx

; 1869 :     if (!pComponent)

  00074	83 7d f8 00	 cmp	 DWORD PTR _pComponent$[ebp], 0
  00078	75 09		 jne	 SHORT $L71017

; 1870 :     {
; 1871 :         hr = E_OUTOFMEMORY;

  0007a	c7 45 fc 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 1872 :     }
; 1873 :     else

  00081	eb 5b		 jmp	 SHORT $L71019
$L71017:

; 1874 :     {
; 1875 :         pVirtualSegment->m_pPlaySegment->AddRef();

  00083	8b 45 08	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  00086	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00089	8b 55 08	 mov	 edx, DWORD PTR _pVirtualSegment$[ebp]
  0008c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0008f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00091	50		 push	 eax
  00092	ff 51 04	 call	 DWORD PTR [ecx+4]

; 1876 :         pTrack->m_pTrack8->AddRef();

  00095	8b 55 0c	 mov	 edx, DWORD PTR _pTrack$[ebp]
  00098	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0009b	8b 4d 0c	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  0009e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000a1	8b 00		 mov	 eax, DWORD PTR [eax]
  000a3	52		 push	 edx
  000a4	ff 50 04	 call	 DWORD PTR [eax+4]

; 1877 :         CompositionComponent& rComponent = pComponent->GetItemValue();

  000a7	8b 4d f8	 mov	 ecx, DWORD PTR _pComponent$[ebp]
  000aa	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UCompositionComponent@@@@QAEAAUCompositionComponent@@XZ ; TListItem<CompositionComponent>::GetItemValue
  000af	89 45 f4	 mov	 DWORD PTR _rComponent$71020[ebp], eax

; 1878 :         rComponent.pVirtualSegment = pVirtualSegment;

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR _rComponent$71020[ebp]
  000b5	8b 55 08	 mov	 edx, DWORD PTR _pVirtualSegment$[ebp]
  000b8	89 11		 mov	 DWORD PTR [ecx], edx

; 1879 :         rComponent.pComposingTrack = pTrack;

  000ba	8b 45 f4	 mov	 eax, DWORD PTR _rComponent$71020[ebp]
  000bd	8b 4d 0c	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  000c0	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1880 :         rComponent.mtTime = pVirtualSegment->m_mtTime;

  000c3	8b 55 f4	 mov	 edx, DWORD PTR _rComponent$71020[ebp]
  000c6	8b 45 08	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  000c9	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000cc	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1881 :         m_Components.AddHead(pComponent);

  000cf	8b 55 f8	 mov	 edx, DWORD PTR _pComponent$[ebp]
  000d2	52		 push	 edx
  000d3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d6	83 c1 18	 add	 ecx, 24			; 00000018H
  000d9	e8 00 00 00 00	 call	 ?AddHead@?$TList@UCompositionComponent@@@@QAEXPAV?$TListItem@UCompositionComponent@@@@@Z ; TList<CompositionComponent>::AddHead
$L71019:

; 1882 :     }
; 1883 :     return hr;

  000de	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
$L71007:

; 1884 : }

  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c2 08 00	 ret	 8
?AddTrack@ComposingTrack@@QAEJPAVCVirtualSegment@@PAVCTrack@@@Z ENDP ; ComposingTrack::AddTrack
_TEXT	ENDS
PUBLIC	?Less@@YGHAAUCompositionComponent@@0@Z		; Less
; Function compile flags: /Odt
;	COMDAT ?Less@@YGHAAUCompositionComponent@@0@Z
_TEXT	SEGMENT
_Comp1$ = 8
_Comp2$ = 12
?Less@@YGHAAUCompositionComponent@@0@Z PROC NEAR	; Less, COMDAT

; 1887 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1888 :     return Comp1.mtTime < Comp2.mtTime; 

  00003	8b 45 08	 mov	 eax, DWORD PTR _Comp1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _Comp2$[ebp]
  00009	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0000c	33 c0		 xor	 eax, eax
  0000e	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00011	0f 9c c0	 setl	 al

; 1889 : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?Less@@YGHAAUCompositionComponent@@0@Z ENDP		; Less
_TEXT	ENDS
PUBLIC	?MergeSort@?$TList@UCompositionComponent@@@@QAEXP6GHAAUCompositionComponent@@0@Z@Z ; TList<CompositionComponent>::MergeSort
; Function compile flags: /Odt
;	COMDAT ?Compose@ComposingTrack@@QAEJPAUIDirectMusicSong@@@Z
_TEXT	SEGMENT
_this$ = -68
_mtLength$71065 = -64
_pComposedFragment$71066 = -60
_guidClassId$71057 = -56
_rComponent$71054 = -40
_pPersist$71056 = -36
_pOldTrack$71055 = -32
_mtEnd$71050 = -28
_mtStart$71049 = -24
_rComponent$71037 = -20
_pComponent$ = -16
_hr$ = -12
_pComposedTrack$ = -8
_pMasterTrack$ = -4
_pSong$ = 8
?Compose@ComposingTrack@@QAEJPAUIDirectMusicSong@@@Z PROC NEAR ; ComposingTrack::Compose, COMDAT
; _this$ = ecx

; 1893 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 1894 :     HRESULT hr = S_OK;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1895 :     IDirectMusicTrack8* pMasterTrack = NULL;

  00010	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pMasterTrack$[ebp], 0

; 1896 :     IDirectMusicTrack8* pComposedTrack = NULL;

  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pComposedTrack$[ebp], 0

; 1897 :     m_Components.MergeSort(Less);

  0001e	68 00 00 00 00	 push	 OFFSET FLAT:?Less@@YGHAAUCompositionComponent@@0@Z ; Less
  00023	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 18	 add	 ecx, 24			; 00000018H
  00029	e8 00 00 00 00	 call	 ?MergeSort@?$TList@UCompositionComponent@@@@QAEXP6GHAAUCompositionComponent@@0@Z@Z ; TList<CompositionComponent>::MergeSort

; 1898 :     // Join the tracks together according to the ordering of their associated segments.
; 1899 :     TListItem<CompositionComponent>* pComponent = m_Components.GetHead();

  0002e	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 18	 add	 ecx, 24			; 00000018H
  00034	e8 00 00 00 00	 call	 ?GetHead@?$TList@UCompositionComponent@@@@QBEPAV?$TListItem@UCompositionComponent@@@@XZ ; TList<CompositionComponent>::GetHead
  00039	89 45 f0	 mov	 DWORD PTR _pComponent$[ebp], eax

; 1900 :     for (; pComponent; pComponent = pComponent->GetNext())

  0003c	eb 0b		 jmp	 SHORT $L71034
$L71035:
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _pComponent$[ebp]
  00041	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UCompositionComponent@@@@QBEPAV1@XZ ; TListItem<CompositionComponent>::GetNext
  00046	89 45 f0	 mov	 DWORD PTR _pComponent$[ebp], eax
$L71034:
  00049	83 7d f0 00	 cmp	 DWORD PTR _pComponent$[ebp], 0
  0004d	74 74		 je	 SHORT $L71036

; 1901 :     {
; 1902 :         CompositionComponent& rComponent = pComponent->GetItemValue();

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _pComponent$[ebp]
  00052	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UCompositionComponent@@@@QAEAAUCompositionComponent@@XZ ; TListItem<CompositionComponent>::GetItemValue
  00057	89 45 ec	 mov	 DWORD PTR _rComponent$71037[ebp], eax

; 1903 :         if (!pMasterTrack)

  0005a	83 7d fc 00	 cmp	 DWORD PTR _pMasterTrack$[ebp], 0
  0005e	75 23		 jne	 SHORT $L71038

; 1904 :         {
; 1905 :             //MUSIC_TIME mtEnd = 0;
; 1906 :             //if (pComponent->GetNext())
; 1907 :             //{
; 1908 :             //  mtEnd = pComponent->GetNext()->GetItemValue().mtTime;
; 1909 :             //}
; 1910 :             //else
; 1911 :             //{
; 1912 :             //  rComponent.pVirtualSegment->m_pPlaySegment->GetLength(&mtEnd);
; 1913 :             //}
; 1914 :             //hr = rComponent.pComposingTrack->m_pTrack8->Clone(0, mtEnd, (IDirectMusicTrack**)&pMasterTrack);
; 1915 :             hr = rComponent.pComposingTrack->m_pTrack8->Clone(0, 0, (IDirectMusicTrack**)&pMasterTrack);

  00060	8d 45 fc	 lea	 eax, DWORD PTR _pMasterTrack$[ebp]
  00063	50		 push	 eax
  00064	6a 00		 push	 0
  00066	6a 00		 push	 0
  00068	8b 4d ec	 mov	 ecx, DWORD PTR _rComponent$71037[ebp]
  0006b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00071	8b 4d ec	 mov	 ecx, DWORD PTR _rComponent$71037[ebp]
  00074	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00077	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  0007a	8b 10		 mov	 edx, DWORD PTR [eax]
  0007c	51		 push	 ecx
  0007d	ff 52 30	 call	 DWORD PTR [edx+48]
  00080	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L71038:

; 1916 :         }
; 1917 :         //else
; 1918 :         if (SUCCEEDED(hr))

  00083	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00087	7c 2d		 jl	 SHORT $L71041

; 1919 :         {
; 1920 :             hr = pMasterTrack->Join(rComponent.pComposingTrack->m_pTrack8, rComponent.mtTime, pSong, m_dwTrackGroup, NULL);

  00089	6a 00		 push	 0
  0008b	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00091	51		 push	 ecx
  00092	8b 55 08	 mov	 edx, DWORD PTR _pSong$[ebp]
  00095	52		 push	 edx
  00096	8b 45 ec	 mov	 eax, DWORD PTR _rComponent$71037[ebp]
  00099	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009c	51		 push	 ecx
  0009d	8b 55 ec	 mov	 edx, DWORD PTR _rComponent$71037[ebp]
  000a0	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000a3	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000a6	51		 push	 ecx
  000a7	8b 55 fc	 mov	 edx, DWORD PTR _pMasterTrack$[ebp]
  000aa	8b 02		 mov	 eax, DWORD PTR [edx]
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _pMasterTrack$[ebp]
  000af	51		 push	 ecx
  000b0	ff 50 44	 call	 DWORD PTR [eax+68]
  000b3	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L71041:

; 1921 :         }
; 1922 :         if (FAILED(hr)) break;

  000b6	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ba	7d 02		 jge	 SHORT $L71043
  000bc	eb 05		 jmp	 SHORT $L71036
$L71043:

; 1923 :     }

  000be	e9 7b ff ff ff	 jmp	 $L71035
$L71036:

; 1924 : 
; 1925 :     // Call Compose on the joined track.
; 1926 :     if (SUCCEEDED(hr))

  000c3	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c7	7c 1e		 jl	 SHORT $L71045

; 1927 :     {
; 1928 :         hr = pMasterTrack->Compose(pSong, m_dwTrackGroup, (IDirectMusicTrack**)&pComposedTrack);

  000c9	8d 55 f8	 lea	 edx, DWORD PTR _pComposedTrack$[ebp]
  000cc	52		 push	 edx
  000cd	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  000d0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d3	51		 push	 ecx
  000d4	8b 55 08	 mov	 edx, DWORD PTR _pSong$[ebp]
  000d7	52		 push	 edx
  000d8	8b 45 fc	 mov	 eax, DWORD PTR _pMasterTrack$[ebp]
  000db	8b 08		 mov	 ecx, DWORD PTR [eax]
  000dd	8b 55 fc	 mov	 edx, DWORD PTR _pMasterTrack$[ebp]
  000e0	52		 push	 edx
  000e1	ff 51 40	 call	 DWORD PTR [ecx+64]
  000e4	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L71045:

; 1929 :     }
; 1930 : 
; 1931 :     // Split the composed result according to the original segments.
; 1932 :     if (SUCCEEDED(hr))

  000e7	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000eb	0f 8c 63 02 00
	00		 jl	 $L71048

; 1933 :     {
; 1934 :         MUSIC_TIME mtStart = 0;

  000f1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _mtStart$71049[ebp], 0

; 1935 :         MUSIC_TIME mtEnd = 0;

  000f8	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _mtEnd$71050[ebp], 0

; 1936 :         pComponent = m_Components.GetHead();

  000ff	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	83 c1 18	 add	 ecx, 24			; 00000018H
  00105	e8 00 00 00 00	 call	 ?GetHead@?$TList@UCompositionComponent@@@@QBEPAV?$TListItem@UCompositionComponent@@@@XZ ; TList<CompositionComponent>::GetHead
  0010a	89 45 f0	 mov	 DWORD PTR _pComponent$[ebp], eax

; 1937 :         for (; pComponent; pComponent = pComponent->GetNext())

  0010d	eb 0b		 jmp	 SHORT $L71051
$L71052:
  0010f	8b 4d f0	 mov	 ecx, DWORD PTR _pComponent$[ebp]
  00112	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UCompositionComponent@@@@QBEPAV1@XZ ; TListItem<CompositionComponent>::GetNext
  00117	89 45 f0	 mov	 DWORD PTR _pComponent$[ebp], eax
$L71051:
  0011a	83 7d f0 00	 cmp	 DWORD PTR _pComponent$[ebp], 0
  0011e	0f 84 1e 02 00
	00		 je	 $L71053

; 1938 :         {
; 1939 :             CompositionComponent& rComponent = pComponent->GetItemValue();

  00124	8b 4d f0	 mov	 ecx, DWORD PTR _pComponent$[ebp]
  00127	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UCompositionComponent@@@@QAEAAUCompositionComponent@@XZ ; TListItem<CompositionComponent>::GetItemValue
  0012c	89 45 d8	 mov	 DWORD PTR _rComponent$71054[ebp], eax

; 1940 :             mtStart = rComponent.mtTime;

  0012f	8b 45 d8	 mov	 eax, DWORD PTR _rComponent$71054[ebp]
  00132	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00135	89 4d e8	 mov	 DWORD PTR _mtStart$71049[ebp], ecx

; 1941 :             // only split off a composed track if the original segment contained a composing track
; 1942 :             IDirectMusicTrack* pOldTrack = NULL;

  00138	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _pOldTrack$71055[ebp], 0

; 1943 :             IPersistStream* pPersist = NULL;

  0013f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pPersist$71056[ebp], 0

; 1944 :             GUID guidClassId;
; 1945 :             memset(&guidClassId, 0, sizeof(guidClassId));

  00146	6a 10		 push	 16			; 00000010H
  00148	6a 00		 push	 0
  0014a	8d 55 c8	 lea	 edx, DWORD PTR _guidClassId$71057[ebp]
  0014d	52		 push	 edx
  0014e	e8 00 00 00 00	 call	 _memset
  00153	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1946 :             if (SUCCEEDED(pMasterTrack->QueryInterface(IID_IPersistStream, (void**)&pPersist)) &&
; 1947 :                 SUCCEEDED(pPersist->GetClassID(&guidClassId)) &&
; 1948 :                 SUCCEEDED( rComponent.pVirtualSegment->m_pPlaySegment->GetTrack( guidClassId, m_dwTrackGroup, 0, &pOldTrack ) )  )

  00156	8d 45 dc	 lea	 eax, DWORD PTR _pPersist$71056[ebp]
  00159	50		 push	 eax
  0015a	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPersistStream
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _pMasterTrack$[ebp]
  00162	8b 11		 mov	 edx, DWORD PTR [ecx]
  00164	8b 45 fc	 mov	 eax, DWORD PTR _pMasterTrack$[ebp]
  00167	50		 push	 eax
  00168	ff 12		 call	 DWORD PTR [edx]
  0016a	85 c0		 test	 eax, eax
  0016c	0f 8c b9 01 00
	00		 jl	 $L71062
  00172	8d 4d c8	 lea	 ecx, DWORD PTR _guidClassId$71057[ebp]
  00175	51		 push	 ecx
  00176	8b 55 dc	 mov	 edx, DWORD PTR _pPersist$71056[ebp]
  00179	8b 02		 mov	 eax, DWORD PTR [edx]
  0017b	8b 4d dc	 mov	 ecx, DWORD PTR _pPersist$71056[ebp]
  0017e	51		 push	 ecx
  0017f	ff 50 0c	 call	 DWORD PTR [eax+12]
  00182	85 c0		 test	 eax, eax
  00184	0f 8c a1 01 00
	00		 jl	 $L71062
  0018a	8d 55 e0	 lea	 edx, DWORD PTR _pOldTrack$71055[ebp]
  0018d	52		 push	 edx
  0018e	6a 00		 push	 0
  00190	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00193	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00196	51		 push	 ecx
  00197	8d 55 c8	 lea	 edx, DWORD PTR _guidClassId$71057[ebp]
  0019a	52		 push	 edx
  0019b	8b 45 d8	 mov	 eax, DWORD PTR _rComponent$71054[ebp]
  0019e	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a0	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001a3	8b 45 d8	 mov	 eax, DWORD PTR _rComponent$71054[ebp]
  001a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a8	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  001ab	8b 0a		 mov	 ecx, DWORD PTR [edx]
  001ad	50		 push	 eax
  001ae	ff 51 54	 call	 DWORD PTR [ecx+84]
  001b1	85 c0		 test	 eax, eax
  001b3	0f 8c 72 01 00
	00		 jl	 $L71062

; 1949 :             {
; 1950 :                 pPersist->Release();

  001b9	8b 55 dc	 mov	 edx, DWORD PTR _pPersist$71056[ebp]
  001bc	8b 02		 mov	 eax, DWORD PTR [edx]
  001be	8b 4d dc	 mov	 ecx, DWORD PTR _pPersist$71056[ebp]
  001c1	51		 push	 ecx
  001c2	ff 50 08	 call	 DWORD PTR [eax+8]

; 1951 :                 pOldTrack->Release();

  001c5	8b 55 e0	 mov	 edx, DWORD PTR _pOldTrack$71055[ebp]
  001c8	8b 02		 mov	 eax, DWORD PTR [edx]
  001ca	8b 4d e0	 mov	 ecx, DWORD PTR _pOldTrack$71055[ebp]
  001cd	51		 push	 ecx
  001ce	ff 50 08	 call	 DWORD PTR [eax+8]

; 1952 :                 if (pComponent->GetNext())

  001d1	8b 4d f0	 mov	 ecx, DWORD PTR _pComponent$[ebp]
  001d4	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UCompositionComponent@@@@QBEPAV1@XZ ; TListItem<CompositionComponent>::GetNext
  001d9	85 c0		 test	 eax, eax
  001db	74 17		 je	 SHORT $L71063

; 1953 :                 {
; 1954 :                     mtEnd = pComponent->GetNext()->GetItemValue().mtTime;

  001dd	8b 4d f0	 mov	 ecx, DWORD PTR _pComponent$[ebp]
  001e0	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UCompositionComponent@@@@QBEPAV1@XZ ; TListItem<CompositionComponent>::GetNext
  001e5	8b c8		 mov	 ecx, eax
  001e7	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UCompositionComponent@@@@QAEAAUCompositionComponent@@XZ ; TListItem<CompositionComponent>::GetItemValue
  001ec	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001ef	89 55 e4	 mov	 DWORD PTR _mtEnd$71050[ebp], edx

; 1955 :                 }
; 1956 :                 else

  001f2	eb 2a		 jmp	 SHORT $L71064
$L71063:

; 1957 :                 {
; 1958 :                     MUSIC_TIME mtLength = 0;

  001f4	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _mtLength$71065[ebp], 0

; 1959 :                     rComponent.pVirtualSegment->m_pPlaySegment->GetLength(&mtLength);

  001fb	8d 45 c0	 lea	 eax, DWORD PTR _mtLength$71065[ebp]
  001fe	50		 push	 eax
  001ff	8b 4d d8	 mov	 ecx, DWORD PTR _rComponent$71054[ebp]
  00202	8b 11		 mov	 edx, DWORD PTR [ecx]
  00204	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00207	8b 4d d8	 mov	 ecx, DWORD PTR _rComponent$71054[ebp]
  0020a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0020c	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0020f	8b 10		 mov	 edx, DWORD PTR [eax]
  00211	51		 push	 ecx
  00212	ff 52 1c	 call	 DWORD PTR [edx+28]

; 1960 :                     mtEnd = mtStart + mtLength;

  00215	8b 45 e8	 mov	 eax, DWORD PTR _mtStart$71049[ebp]
  00218	03 45 c0	 add	 eax, DWORD PTR _mtLength$71065[ebp]
  0021b	89 45 e4	 mov	 DWORD PTR _mtEnd$71050[ebp], eax
$L71064:

; 1961 :                 }
; 1962 :                 IDirectMusicTrack8* pComposedFragment = NULL;

  0021e	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _pComposedFragment$71066[ebp], 0

; 1963 :                 hr = pComposedTrack->Clone(mtStart, mtEnd, (IDirectMusicTrack**)&pComposedFragment);

  00225	8d 4d c4	 lea	 ecx, DWORD PTR _pComposedFragment$71066[ebp]
  00228	51		 push	 ecx
  00229	8b 55 e4	 mov	 edx, DWORD PTR _mtEnd$71050[ebp]
  0022c	52		 push	 edx
  0022d	8b 45 e8	 mov	 eax, DWORD PTR _mtStart$71049[ebp]
  00230	50		 push	 eax
  00231	8b 4d f8	 mov	 ecx, DWORD PTR _pComposedTrack$[ebp]
  00234	8b 11		 mov	 edx, DWORD PTR [ecx]
  00236	8b 45 f8	 mov	 eax, DWORD PTR _pComposedTrack$[ebp]
  00239	50		 push	 eax
  0023a	ff 52 30	 call	 DWORD PTR [edx+48]
  0023d	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 1964 :                 if (SUCCEEDED(hr))

  00240	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00244	0f 8c d7 00 00
	00		 jl	 $L71069

; 1965 :                 {
; 1966 :                     // Remove any tracks of this type (in the same group) from the segment.
; 1967 :                     pOldTrack = NULL;

  0024a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _pOldTrack$71055[ebp], 0

; 1968 :                     pPersist = NULL;

  00251	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pPersist$71056[ebp], 0

; 1969 :                     memset(&guidClassId, 0, sizeof(guidClassId));

  00258	6a 10		 push	 16			; 00000010H
  0025a	6a 00		 push	 0
  0025c	8d 4d c8	 lea	 ecx, DWORD PTR _guidClassId$71057[ebp]
  0025f	51		 push	 ecx
  00260	e8 00 00 00 00	 call	 _memset
  00265	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1970 :                     if (SUCCEEDED(pComposedFragment->QueryInterface(IID_IPersistStream, (void**)&pPersist)) )

  00268	8d 55 dc	 lea	 edx, DWORD PTR _pPersist$71056[ebp]
  0026b	52		 push	 edx
  0026c	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPersistStream
  00271	8b 45 c4	 mov	 eax, DWORD PTR _pComposedFragment$71066[ebp]
  00274	8b 08		 mov	 ecx, DWORD PTR [eax]
  00276	8b 55 c4	 mov	 edx, DWORD PTR _pComposedFragment$71066[ebp]
  00279	52		 push	 edx
  0027a	ff 11		 call	 DWORD PTR [ecx]
  0027c	85 c0		 test	 eax, eax
  0027e	7c 71		 jl	 SHORT $L71072

; 1971 :                     {
; 1972 :                         if (SUCCEEDED(pPersist->GetClassID(&guidClassId)) &&
; 1973 :                             SUCCEEDED( rComponent.pVirtualSegment->m_pPlaySegment->GetTrack( guidClassId, m_dwTrackGroup, 0, &pOldTrack ) ) )

  00280	8d 45 c8	 lea	 eax, DWORD PTR _guidClassId$71057[ebp]
  00283	50		 push	 eax
  00284	8b 4d dc	 mov	 ecx, DWORD PTR _pPersist$71056[ebp]
  00287	8b 11		 mov	 edx, DWORD PTR [ecx]
  00289	8b 45 dc	 mov	 eax, DWORD PTR _pPersist$71056[ebp]
  0028c	50		 push	 eax
  0028d	ff 52 0c	 call	 DWORD PTR [edx+12]
  00290	85 c0		 test	 eax, eax
  00292	7c 51		 jl	 SHORT $L71075
  00294	8d 4d e0	 lea	 ecx, DWORD PTR _pOldTrack$71055[ebp]
  00297	51		 push	 ecx
  00298	6a 00		 push	 0
  0029a	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0029d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002a0	50		 push	 eax
  002a1	8d 4d c8	 lea	 ecx, DWORD PTR _guidClassId$71057[ebp]
  002a4	51		 push	 ecx
  002a5	8b 55 d8	 mov	 edx, DWORD PTR _rComponent$71054[ebp]
  002a8	8b 02		 mov	 eax, DWORD PTR [edx]
  002aa	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002ad	8b 55 d8	 mov	 edx, DWORD PTR _rComponent$71054[ebp]
  002b0	8b 02		 mov	 eax, DWORD PTR [edx]
  002b2	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  002b5	8b 01		 mov	 eax, DWORD PTR [ecx]
  002b7	52		 push	 edx
  002b8	ff 50 54	 call	 DWORD PTR [eax+84]
  002bb	85 c0		 test	 eax, eax
  002bd	7c 26		 jl	 SHORT $L71075

; 1974 :                         {
; 1975 :                             rComponent.pVirtualSegment->m_pPlaySegment->RemoveTrack( pOldTrack );

  002bf	8b 4d e0	 mov	 ecx, DWORD PTR _pOldTrack$71055[ebp]
  002c2	51		 push	 ecx
  002c3	8b 55 d8	 mov	 edx, DWORD PTR _rComponent$71054[ebp]
  002c6	8b 02		 mov	 eax, DWORD PTR [edx]
  002c8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002cb	8b 55 d8	 mov	 edx, DWORD PTR _rComponent$71054[ebp]
  002ce	8b 02		 mov	 eax, DWORD PTR [edx]
  002d0	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  002d3	8b 01		 mov	 eax, DWORD PTR [ecx]
  002d5	52		 push	 edx
  002d6	ff 50 60	 call	 DWORD PTR [eax+96]

; 1976 :                             pOldTrack->Release();

  002d9	8b 4d e0	 mov	 ecx, DWORD PTR _pOldTrack$71055[ebp]
  002dc	8b 11		 mov	 edx, DWORD PTR [ecx]
  002de	8b 45 e0	 mov	 eax, DWORD PTR _pOldTrack$71055[ebp]
  002e1	50		 push	 eax
  002e2	ff 52 08	 call	 DWORD PTR [edx+8]
$L71075:

; 1977 :                         }
; 1978 :                         pPersist->Release();

  002e5	8b 4d dc	 mov	 ecx, DWORD PTR _pPersist$71056[ebp]
  002e8	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ea	8b 45 dc	 mov	 eax, DWORD PTR _pPersist$71056[ebp]
  002ed	50		 push	 eax
  002ee	ff 52 08	 call	 DWORD PTR [edx+8]
$L71072:

; 1979 :                     }
; 1980 :                     hr = rComponent.pVirtualSegment->m_pPlaySegment->InsertTrack(pComposedFragment, m_dwTrackGroup);

  002f1	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f4	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002f7	52		 push	 edx
  002f8	8b 45 c4	 mov	 eax, DWORD PTR _pComposedFragment$71066[ebp]
  002fb	50		 push	 eax
  002fc	8b 4d d8	 mov	 ecx, DWORD PTR _rComponent$71054[ebp]
  002ff	8b 11		 mov	 edx, DWORD PTR [ecx]
  00301	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00304	8b 4d d8	 mov	 ecx, DWORD PTR _rComponent$71054[ebp]
  00307	8b 11		 mov	 edx, DWORD PTR [ecx]
  00309	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0030c	8b 10		 mov	 edx, DWORD PTR [eax]
  0030e	51		 push	 ecx
  0030f	ff 52 5c	 call	 DWORD PTR [edx+92]
  00312	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 1981 :                     pComposedFragment->Release(); // release from the Clone

  00315	8b 45 c4	 mov	 eax, DWORD PTR _pComposedFragment$71066[ebp]
  00318	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031a	8b 55 c4	 mov	 edx, DWORD PTR _pComposedFragment$71066[ebp]
  0031d	52		 push	 edx
  0031e	ff 51 08	 call	 DWORD PTR [ecx+8]
$L71069:

; 1982 :                 }
; 1983 : 
; 1984 :                 if (FAILED(hr)) break;

  00321	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00325	7d 02		 jge	 SHORT $L71077
  00327	eb 19		 jmp	 SHORT $L71053
$L71077:

; 1985 :             }
; 1986 :             else // the QI to pPersist might have succeeded, so clean it up

  00329	eb 12		 jmp	 SHORT $L71078
$L71062:

; 1987 :             {
; 1988 :                 if (pPersist) pPersist->Release();

  0032b	83 7d dc 00	 cmp	 DWORD PTR _pPersist$71056[ebp], 0
  0032f	74 0c		 je	 SHORT $L71078
  00331	8b 45 dc	 mov	 eax, DWORD PTR _pPersist$71056[ebp]
  00334	8b 08		 mov	 ecx, DWORD PTR [eax]
  00336	8b 55 dc	 mov	 edx, DWORD PTR _pPersist$71056[ebp]
  00339	52		 push	 edx
  0033a	ff 51 08	 call	 DWORD PTR [ecx+8]
$L71078:

; 1989 :             }
; 1990 :         }

  0033d	e9 cd fd ff ff	 jmp	 $L71052
$L71053:

; 1991 :         if (pComposedTrack) pComposedTrack->Release();

  00342	83 7d f8 00	 cmp	 DWORD PTR _pComposedTrack$[ebp], 0
  00346	74 0c		 je	 SHORT $L71048
  00348	8b 45 f8	 mov	 eax, DWORD PTR _pComposedTrack$[ebp]
  0034b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0034d	8b 55 f8	 mov	 edx, DWORD PTR _pComposedTrack$[ebp]
  00350	52		 push	 edx
  00351	ff 51 08	 call	 DWORD PTR [ecx+8]
$L71048:

; 1992 :     }
; 1993 : 
; 1994 :     if (pMasterTrack) pMasterTrack->Release();

  00354	83 7d fc 00	 cmp	 DWORD PTR _pMasterTrack$[ebp], 0
  00358	74 0c		 je	 SHORT $L71081
  0035a	8b 45 fc	 mov	 eax, DWORD PTR _pMasterTrack$[ebp]
  0035d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0035f	8b 55 fc	 mov	 edx, DWORD PTR _pMasterTrack$[ebp]
  00362	52		 push	 edx
  00363	ff 51 08	 call	 DWORD PTR [ecx+8]
$L71081:

; 1995 :     return hr;

  00366	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 1996 : }

  00369	8b e5		 mov	 esp, ebp
  0036b	5d		 pop	 ebp
  0036c	c2 04 00	 ret	 4
?Compose@ComposingTrack@@QAEJPAUIDirectMusicSong@@@Z ENDP ; ComposingTrack::Compose
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\tlist.h
_TEXT	ENDS
;	COMDAT ??0?$TList@UCompositionComponent@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$TList@UCompositionComponent@@@@QAE@XZ PROC NEAR	; TList<CompositionComponent>::TList<CompositionComponent>, COMDAT
; _this$ = ecx

; 55   :     TList() {m_pHead=NULL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0?$TList@UCompositionComponent@@@@QAE@XZ ENDP		; TList<CompositionComponent>::TList<CompositionComponent>
_TEXT	ENDS
PUBLIC	?Delete@?$TListItem@UCompositionComponent@@@@SGXPAV1@@Z ; TListItem<CompositionComponent>::Delete
; Function compile flags: /Odt
;	COMDAT ??1?$TList@UCompositionComponent@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$TList@UCompositionComponent@@@@QAE@XZ PROC NEAR	; TList<CompositionComponent>::~TList<CompositionComponent>, COMDAT
; _this$ = ecx

; 57   : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 58   : 		//if (m_pHead != NULL) delete m_pHead;
; 59   : 		TListItem<T>::Delete(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?Delete@?$TListItem@UCompositionComponent@@@@SGXPAV1@@Z ; TListItem<CompositionComponent>::Delete

; 60   : 	} // new destructor

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??1?$TList@UCompositionComponent@@@@QAE@XZ ENDP		; TList<CompositionComponent>::~TList<CompositionComponent>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UCompositionComponent@@@@QBEPAV?$TListItem@UCompositionComponent@@@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@?$TList@UCompositionComponent@@@@QBEPAV?$TListItem@UCompositionComponent@@@@XZ PROC NEAR ; TList<CompositionComponent>::GetHead, COMDAT
; _this$ = ecx

; 61   :     TListItem<T> *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@?$TList@UCompositionComponent@@@@QBEPAV?$TListItem@UCompositionComponent@@@@XZ ENDP ; TList<CompositionComponent>::GetHead
_TEXT	ENDS
PUBLIC	?SetNext@?$TListItem@UCompositionComponent@@@@QAEXPAV1@@Z ; TListItem<CompositionComponent>::SetNext
; Function compile flags: /Odt
;	COMDAT ?AddHead@?$TList@UCompositionComponent@@@@QAEXPAV?$TListItem@UCompositionComponent@@@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddHead@?$TList@UCompositionComponent@@@@QAEXPAV?$TListItem@UCompositionComponent@@@@@Z PROC NEAR ; TList<CompositionComponent>::AddHead, COMDAT
; _this$ = ecx

; 80   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : //            assert(pItem!=NULL);
; 82   :             pItem->SetNext(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00010	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UCompositionComponent@@@@QAEXPAV1@@Z ; TListItem<CompositionComponent>::SetNext

; 83   :             m_pHead=pItem;

  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0001b	89 02		 mov	 DWORD PTR [edx], eax

; 84   :         }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?AddHead@?$TList@UCompositionComponent@@@@QAEXPAV?$TListItem@UCompositionComponent@@@@@Z ENDP ; TList<CompositionComponent>::AddHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0?$TList@VComposingTrack@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$TList@VComposingTrack@@@@QAE@XZ PROC NEAR		; TList<ComposingTrack>::TList<ComposingTrack>, COMDAT
; _this$ = ecx

; 55   :     TList() {m_pHead=NULL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0?$TList@VComposingTrack@@@@QAE@XZ ENDP		; TList<ComposingTrack>::TList<ComposingTrack>
_TEXT	ENDS
PUBLIC	?Delete@?$TListItem@VComposingTrack@@@@SGXPAV1@@Z ; TListItem<ComposingTrack>::Delete
; Function compile flags: /Odt
;	COMDAT ??1?$TList@VComposingTrack@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$TList@VComposingTrack@@@@QAE@XZ PROC NEAR		; TList<ComposingTrack>::~TList<ComposingTrack>, COMDAT
; _this$ = ecx

; 57   : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 58   : 		//if (m_pHead != NULL) delete m_pHead;
; 59   : 		TListItem<T>::Delete(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?Delete@?$TListItem@VComposingTrack@@@@SGXPAV1@@Z ; TListItem<ComposingTrack>::Delete

; 60   : 	} // new destructor

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??1?$TList@VComposingTrack@@@@QAE@XZ ENDP		; TList<ComposingTrack>::~TList<ComposingTrack>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@VComposingTrack@@@@QBEPAV?$TListItem@VComposingTrack@@@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@?$TList@VComposingTrack@@@@QBEPAV?$TListItem@VComposingTrack@@@@XZ PROC NEAR ; TList<ComposingTrack>::GetHead, COMDAT
; _this$ = ecx

; 61   :     TListItem<T> *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@?$TList@VComposingTrack@@@@QBEPAV?$TListItem@VComposingTrack@@@@XZ ENDP ; TList<ComposingTrack>::GetHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@VComposingTrack@@@@QAEXPAV?$TListItem@VComposingTrack@@@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddHead@?$TList@VComposingTrack@@@@QAEXPAV?$TListItem@VComposingTrack@@@@@Z PROC NEAR ; TList<ComposingTrack>::AddHead, COMDAT
; _this$ = ecx

; 80   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : //            assert(pItem!=NULL);
; 82   :             pItem->SetNext(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00010	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@VComposingTrack@@@@QAEXPAV1@@Z ; TListItem<ComposingTrack>::SetNext

; 83   :             m_pHead=pItem;

  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0001b	89 02		 mov	 DWORD PTR [edx], eax

; 84   :         }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?AddHead@?$TList@VComposingTrack@@@@QAEXPAV?$TListItem@VComposingTrack@@@@@Z ENDP ; TList<ComposingTrack>::AddHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0?$TListItem@VComposingTrack@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$TListItem@VComposingTrack@@@@QAE@XZ PROC NEAR	; TListItem<ComposingTrack>::TListItem<ComposingTrack>, COMDAT
; _this$ = ecx

; 28   :     TListItem() { m_pNext=NULL; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0ComposingTrack@@QAE@XZ ; ComposingTrack::ComposingTrack
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??0?$TListItem@VComposingTrack@@@@QAE@XZ ENDP		; TListItem<ComposingTrack>::TListItem<ComposingTrack>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@VComposingTrack@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@?$TListItem@VComposingTrack@@@@QBEPAV1@XZ PROC NEAR ; TListItem<ComposingTrack>::GetNext, COMDAT
; _this$ = ecx

; 32   :     TListItem<T> *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetNext@?$TListItem@VComposingTrack@@@@QBEPAV1@XZ ENDP	; TListItem<ComposingTrack>::GetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@VComposingTrack@@@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@?$TListItem@VComposingTrack@@@@QAEXPAV1@@Z PROC NEAR ; TListItem<ComposingTrack>::SetNext, COMDAT
; _this$ = ecx

; 33   :     void SetNext(TListItem<T> *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetNext@?$TListItem@VComposingTrack@@@@QAEXPAV1@@Z ENDP ; TListItem<ComposingTrack>::SetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@VComposingTrack@@@@QAEAAVComposingTrack@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetItemValue@?$TListItem@VComposingTrack@@@@QAEAAVComposingTrack@@XZ PROC NEAR ; TListItem<ComposingTrack>::GetItemValue, COMDAT
; _this$ = ecx

; 40   :     T& GetItemValue() { return m_Tinfo; }  // additional member function

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?GetItemValue@?$TListItem@VComposingTrack@@@@QAEAAVComposingTrack@@XZ ENDP ; TListItem<ComposingTrack>::GetItemValue
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0?$TList@UClassGuidCounts@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$TList@UClassGuidCounts@@@@QAE@XZ PROC NEAR		; TList<ClassGuidCounts>::TList<ClassGuidCounts>, COMDAT
; _this$ = ecx

; 55   :     TList() {m_pHead=NULL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0?$TList@UClassGuidCounts@@@@QAE@XZ ENDP		; TList<ClassGuidCounts>::TList<ClassGuidCounts>
_TEXT	ENDS
PUBLIC	?Delete@?$TListItem@UClassGuidCounts@@@@SGXPAV1@@Z ; TListItem<ClassGuidCounts>::Delete
; Function compile flags: /Odt
;	COMDAT ??1?$TList@UClassGuidCounts@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$TList@UClassGuidCounts@@@@QAE@XZ PROC NEAR		; TList<ClassGuidCounts>::~TList<ClassGuidCounts>, COMDAT
; _this$ = ecx

; 57   : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 58   : 		//if (m_pHead != NULL) delete m_pHead;
; 59   : 		TListItem<T>::Delete(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?Delete@?$TListItem@UClassGuidCounts@@@@SGXPAV1@@Z ; TListItem<ClassGuidCounts>::Delete

; 60   : 	} // new destructor

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??1?$TList@UClassGuidCounts@@@@QAE@XZ ENDP		; TList<ClassGuidCounts>::~TList<ClassGuidCounts>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UClassGuidCounts@@@@QBEPAV?$TListItem@UClassGuidCounts@@@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@?$TList@UClassGuidCounts@@@@QBEPAV?$TListItem@UClassGuidCounts@@@@XZ PROC NEAR ; TList<ClassGuidCounts>::GetHead, COMDAT
; _this$ = ecx

; 61   :     TListItem<T> *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@?$TList@UClassGuidCounts@@@@QBEPAV?$TListItem@UClassGuidCounts@@@@XZ ENDP ; TList<ClassGuidCounts>::GetHead
_TEXT	ENDS
PUBLIC	?SetNext@?$TListItem@UClassGuidCounts@@@@QAEXPAV1@@Z ; TListItem<ClassGuidCounts>::SetNext
; Function compile flags: /Odt
;	COMDAT ?AddHead@?$TList@UClassGuidCounts@@@@QAEXPAV?$TListItem@UClassGuidCounts@@@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddHead@?$TList@UClassGuidCounts@@@@QAEXPAV?$TListItem@UClassGuidCounts@@@@@Z PROC NEAR ; TList<ClassGuidCounts>::AddHead, COMDAT
; _this$ = ecx

; 80   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : //            assert(pItem!=NULL);
; 82   :             pItem->SetNext(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00010	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UClassGuidCounts@@@@QAEXPAV1@@Z ; TListItem<ClassGuidCounts>::SetNext

; 83   :             m_pHead=pItem;

  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0001b	89 02		 mov	 DWORD PTR [edx], eax

; 84   :         }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?AddHead@?$TList@UClassGuidCounts@@@@QAEXPAV?$TListItem@UClassGuidCounts@@@@@Z ENDP ; TList<ClassGuidCounts>::AddHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UClassGuidCounts@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$TListItem@UClassGuidCounts@@@@QAE@XZ PROC NEAR	; TListItem<ClassGuidCounts>::TListItem<ClassGuidCounts>, COMDAT
; _this$ = ecx

; 28   :     TListItem() { m_pNext=NULL; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0?$TListItem@UClassGuidCounts@@@@QAE@XZ ENDP		; TListItem<ClassGuidCounts>::TListItem<ClassGuidCounts>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UClassGuidCounts@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@?$TListItem@UClassGuidCounts@@@@QBEPAV1@XZ PROC NEAR ; TListItem<ClassGuidCounts>::GetNext, COMDAT
; _this$ = ecx

; 32   :     TListItem<T> *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetNext@?$TListItem@UClassGuidCounts@@@@QBEPAV1@XZ ENDP ; TListItem<ClassGuidCounts>::GetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UClassGuidCounts@@@@QAEAAUClassGuidCounts@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetItemValue@?$TListItem@UClassGuidCounts@@@@QAEAAUClassGuidCounts@@XZ PROC NEAR ; TListItem<ClassGuidCounts>::GetItemValue, COMDAT
; _this$ = ecx

; 40   :     T& GetItemValue() { return m_Tinfo; }  // additional member function

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?GetItemValue@?$TListItem@UClassGuidCounts@@@@QAEAAUClassGuidCounts@@XZ ENDP ; TListItem<ClassGuidCounts>::GetItemValue
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UCompositionComponent@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$TListItem@UCompositionComponent@@@@QAE@XZ PROC NEAR ; TListItem<CompositionComponent>::TListItem<CompositionComponent>, COMDAT
; _this$ = ecx

; 28   :     TListItem() { m_pNext=NULL; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0?$TListItem@UCompositionComponent@@@@QAE@XZ ENDP	; TListItem<CompositionComponent>::TListItem<CompositionComponent>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UCompositionComponent@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@?$TListItem@UCompositionComponent@@@@QBEPAV1@XZ PROC NEAR ; TListItem<CompositionComponent>::GetNext, COMDAT
; _this$ = ecx

; 32   :     TListItem<T> *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetNext@?$TListItem@UCompositionComponent@@@@QBEPAV1@XZ ENDP ; TListItem<CompositionComponent>::GetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UCompositionComponent@@@@QAEAAUCompositionComponent@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetItemValue@?$TListItem@UCompositionComponent@@@@QAEAAUCompositionComponent@@XZ PROC NEAR ; TListItem<CompositionComponent>::GetItemValue, COMDAT
; _this$ = ecx

; 40   :     T& GetItemValue() { return m_Tinfo; }  // additional member function

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?GetItemValue@?$TListItem@UCompositionComponent@@@@QAEAAUCompositionComponent@@XZ ENDP ; TListItem<CompositionComponent>::GetItemValue
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UClassGuidCounts@@@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@?$TListItem@UClassGuidCounts@@@@QAEXPAV1@@Z PROC NEAR ; TListItem<ClassGuidCounts>::SetNext, COMDAT
; _this$ = ecx

; 33   :     void SetNext(TListItem<T> *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetNext@?$TListItem@UClassGuidCounts@@@@QAEXPAV1@@Z ENDP ; TListItem<ClassGuidCounts>::SetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UCompositionComponent@@@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@?$TListItem@UCompositionComponent@@@@QAEXPAV1@@Z PROC NEAR ; TListItem<CompositionComponent>::SetNext, COMDAT
; _this$ = ecx

; 33   :     void SetNext(TListItem<T> *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetNext@?$TListItem@UCompositionComponent@@@@QAEXPAV1@@Z ENDP ; TListItem<CompositionComponent>::SetNext
_TEXT	ENDS
PUBLIC	??_G?$TListItem@VComposingTrack@@@@QAEPAXI@Z	; TListItem<ComposingTrack>::`scalar deleting destructor'
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\tlist.cpp
;	COMDAT ?Delete@?$TListItem@VComposingTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT
tv70 = -20
$T72071 = -16
$T72070 = -12
_pScan$ = -8
_pNext$ = -4
_pFirst$ = 8
?Delete@?$TListItem@VComposingTrack@@@@SGXPAV1@@Z PROC NEAR ; TListItem<ComposingTrack>::Delete, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 29   : 	TListItem<T>* pScan = pFirst;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pFirst$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _pScan$[ebp], eax

; 30   : 	TListItem<T>* pNext = NULL;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pNext$[ebp], 0
$L71247:

; 31   : 	while (pScan)

  00013	83 7d f8 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00017	74 39		 je	 SHORT $L71243

; 32   : 	{
; 33   : 		pNext = pScan->m_pNext;

  00019	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0001c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0001f	89 55 fc	 mov	 DWORD PTR _pNext$[ebp], edx

; 34   : 		delete pScan;

  00022	8b 45 f8	 mov	 eax, DWORD PTR _pScan$[ebp]
  00025	89 45 f0	 mov	 DWORD PTR $T72071[ebp], eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR $T72071[ebp]
  0002b	89 4d f4	 mov	 DWORD PTR $T72070[ebp], ecx
  0002e	83 7d f4 00	 cmp	 DWORD PTR $T72070[ebp], 0
  00032	74 0f		 je	 SHORT $L72072
  00034	6a 01		 push	 1
  00036	8b 4d f4	 mov	 ecx, DWORD PTR $T72070[ebp]
  00039	e8 00 00 00 00	 call	 ??_G?$TListItem@VComposingTrack@@@@QAEPAXI@Z
  0003e	89 45 ec	 mov	 DWORD PTR tv70[ebp], eax
  00041	eb 07		 jmp	 SHORT $L72073
$L72072:
  00043	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$L72073:

; 35   : 		pScan = pNext;

  0004a	8b 55 fc	 mov	 edx, DWORD PTR _pNext$[ebp]
  0004d	89 55 f8	 mov	 DWORD PTR _pScan$[ebp], edx

; 36   : 	}

  00050	eb c1		 jmp	 SHORT $L71247
$L71243:

; 37   : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?Delete@?$TListItem@VComposingTrack@@@@SGXPAV1@@Z ENDP	; TListItem<ComposingTrack>::Delete
_TEXT	ENDS
PUBLIC	??_G?$TListItem@UClassGuidCounts@@@@QAEPAXI@Z	; TListItem<ClassGuidCounts>::`scalar deleting destructor'
; Function compile flags: /Odt
;	COMDAT ?Delete@?$TListItem@UClassGuidCounts@@@@SGXPAV1@@Z
_TEXT	SEGMENT
tv70 = -20
$T72078 = -16
$T72077 = -12
_pScan$ = -8
_pNext$ = -4
_pFirst$ = 8
?Delete@?$TListItem@UClassGuidCounts@@@@SGXPAV1@@Z PROC NEAR ; TListItem<ClassGuidCounts>::Delete, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 29   : 	TListItem<T>* pScan = pFirst;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pFirst$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _pScan$[ebp], eax

; 30   : 	TListItem<T>* pNext = NULL;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pNext$[ebp], 0
$L71257:

; 31   : 	while (pScan)

  00013	83 7d f8 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00017	74 39		 je	 SHORT $L71253

; 32   : 	{
; 33   : 		pNext = pScan->m_pNext;

  00019	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0001c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0001f	89 55 fc	 mov	 DWORD PTR _pNext$[ebp], edx

; 34   : 		delete pScan;

  00022	8b 45 f8	 mov	 eax, DWORD PTR _pScan$[ebp]
  00025	89 45 f0	 mov	 DWORD PTR $T72078[ebp], eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR $T72078[ebp]
  0002b	89 4d f4	 mov	 DWORD PTR $T72077[ebp], ecx
  0002e	83 7d f4 00	 cmp	 DWORD PTR $T72077[ebp], 0
  00032	74 0f		 je	 SHORT $L72079
  00034	6a 01		 push	 1
  00036	8b 4d f4	 mov	 ecx, DWORD PTR $T72077[ebp]
  00039	e8 00 00 00 00	 call	 ??_G?$TListItem@UClassGuidCounts@@@@QAEPAXI@Z
  0003e	89 45 ec	 mov	 DWORD PTR tv70[ebp], eax
  00041	eb 07		 jmp	 SHORT $L72080
$L72079:
  00043	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$L72080:

; 35   : 		pScan = pNext;

  0004a	8b 55 fc	 mov	 edx, DWORD PTR _pNext$[ebp]
  0004d	89 55 f8	 mov	 DWORD PTR _pScan$[ebp], edx

; 36   : 	}

  00050	eb c1		 jmp	 SHORT $L71257
$L71253:

; 37   : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?Delete@?$TListItem@UClassGuidCounts@@@@SGXPAV1@@Z ENDP	; TListItem<ClassGuidCounts>::Delete
_TEXT	ENDS
PUBLIC	?MergeSort@?$TListItem@UCompositionComponent@@@@QAEPAV1@P6GHAAUCompositionComponent@@0@Z@Z ; TListItem<CompositionComponent>::MergeSort
; Function compile flags: /Odt
;	COMDAT ?MergeSort@?$TList@UCompositionComponent@@@@QAEXP6GHAAUCompositionComponent@@0@Z@Z
_TEXT	SEGMENT
_this$ = -4
_fcnCompare$ = 8
?MergeSort@?$TList@UCompositionComponent@@@@QAEXP6GHAAUCompositionComponent@@0@Z@Z PROC NEAR ; TList<CompositionComponent>::MergeSort, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 191  : 	if (m_pHead != NULL && m_pHead->GetNext() != NULL)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 21		 je	 SHORT $L71266
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00014	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UCompositionComponent@@@@QBEPAV1@XZ ; TListItem<CompositionComponent>::GetNext
  00019	85 c0		 test	 eax, eax
  0001b	74 13		 je	 SHORT $L71266

; 192  : 		m_pHead = m_pHead->MergeSort(fcnCompare);

  0001d	8b 55 08	 mov	 edx, DWORD PTR _fcnCompare$[ebp]
  00020	52		 push	 edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	e8 00 00 00 00	 call	 ?MergeSort@?$TListItem@UCompositionComponent@@@@QAEPAV1@P6GHAAUCompositionComponent@@0@Z@Z ; TListItem<CompositionComponent>::MergeSort
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 01		 mov	 DWORD PTR [ecx], eax
$L71266:

; 193  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?MergeSort@?$TList@UCompositionComponent@@@@QAEXP6GHAAUCompositionComponent@@0@Z@Z ENDP ; TList<CompositionComponent>::MergeSort
_TEXT	ENDS
PUBLIC	??_G?$TListItem@UCompositionComponent@@@@QAEPAXI@Z ; TListItem<CompositionComponent>::`scalar deleting destructor'
; Function compile flags: /Odt
;	COMDAT ?Delete@?$TListItem@UCompositionComponent@@@@SGXPAV1@@Z
_TEXT	SEGMENT
tv70 = -20
$T72088 = -16
$T72087 = -12
_pScan$ = -8
_pNext$ = -4
_pFirst$ = 8
?Delete@?$TListItem@UCompositionComponent@@@@SGXPAV1@@Z PROC NEAR ; TListItem<CompositionComponent>::Delete, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 29   : 	TListItem<T>* pScan = pFirst;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pFirst$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _pScan$[ebp], eax

; 30   : 	TListItem<T>* pNext = NULL;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pNext$[ebp], 0
$L71274:

; 31   : 	while (pScan)

  00013	83 7d f8 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00017	74 39		 je	 SHORT $L71270

; 32   : 	{
; 33   : 		pNext = pScan->m_pNext;

  00019	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0001c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0001f	89 55 fc	 mov	 DWORD PTR _pNext$[ebp], edx

; 34   : 		delete pScan;

  00022	8b 45 f8	 mov	 eax, DWORD PTR _pScan$[ebp]
  00025	89 45 f0	 mov	 DWORD PTR $T72088[ebp], eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR $T72088[ebp]
  0002b	89 4d f4	 mov	 DWORD PTR $T72087[ebp], ecx
  0002e	83 7d f4 00	 cmp	 DWORD PTR $T72087[ebp], 0
  00032	74 0f		 je	 SHORT $L72089
  00034	6a 01		 push	 1
  00036	8b 4d f4	 mov	 ecx, DWORD PTR $T72087[ebp]
  00039	e8 00 00 00 00	 call	 ??_G?$TListItem@UCompositionComponent@@@@QAEPAXI@Z
  0003e	89 45 ec	 mov	 DWORD PTR tv70[ebp], eax
  00041	eb 07		 jmp	 SHORT $L72090
$L72089:
  00043	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$L72090:

; 35   : 		pScan = pNext;

  0004a	8b 55 fc	 mov	 edx, DWORD PTR _pNext$[ebp]
  0004d	89 55 f8	 mov	 DWORD PTR _pScan$[ebp], edx

; 36   : 	}

  00050	eb c1		 jmp	 SHORT $L71274
$L71270:

; 37   : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?Delete@?$TListItem@UCompositionComponent@@@@SGXPAV1@@Z ENDP ; TListItem<CompositionComponent>::Delete
_TEXT	ENDS
PUBLIC	??1?$TListItem@VComposingTrack@@@@QAE@XZ	; TListItem<ComposingTrack>::~TListItem<ComposingTrack>
; Function compile flags: /Odt
;	COMDAT ??_G?$TListItem@VComposingTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_G?$TListItem@VComposingTrack@@@@QAEPAXI@Z PROC NEAR	; TListItem<ComposingTrack>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$TListItem@VComposingTrack@@@@QAE@XZ ; TListItem<ComposingTrack>::~TListItem<ComposingTrack>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L71285
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L71285:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$TListItem@VComposingTrack@@@@QAEPAXI@Z ENDP	; TListItem<ComposingTrack>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$TListItem@UClassGuidCounts@@@@QAE@XZ	; TListItem<ClassGuidCounts>::~TListItem<ClassGuidCounts>
; Function compile flags: /Odt
;	COMDAT ??_G?$TListItem@UClassGuidCounts@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_G?$TListItem@UClassGuidCounts@@@@QAEPAXI@Z PROC NEAR	; TListItem<ClassGuidCounts>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$TListItem@UClassGuidCounts@@@@QAE@XZ ; TListItem<ClassGuidCounts>::~TListItem<ClassGuidCounts>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L71288
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L71288:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$TListItem@UClassGuidCounts@@@@QAEPAXI@Z ENDP	; TListItem<ClassGuidCounts>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$TListItem@UCompositionComponent@@@@QAE@XZ	; TListItem<CompositionComponent>::~TListItem<CompositionComponent>
; Function compile flags: /Odt
;	COMDAT ??_G?$TListItem@UCompositionComponent@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_G?$TListItem@UCompositionComponent@@@@QAEPAXI@Z PROC NEAR ; TListItem<CompositionComponent>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$TListItem@UCompositionComponent@@@@QAE@XZ ; TListItem<CompositionComponent>::~TListItem<CompositionComponent>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L71291
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L71291:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$TListItem@UCompositionComponent@@@@QAEPAXI@Z ENDP	; TListItem<CompositionComponent>::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1?$TListItem@VComposingTrack@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$TListItem@VComposingTrack@@@@QAE@XZ PROC NEAR	; TListItem<ComposingTrack>::~TListItem<ComposingTrack>, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	//if (m_pNext != NULL) { delete m_pNext; }
; 22   : 	// IMPORTANT: user of the list is required to delete content first!
; 23   : 	//ZeroMemory(&m_Tinfo, sizeof(T));
; 24   : }

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1ComposingTrack@@QAE@XZ ; ComposingTrack::~ComposingTrack
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$TListItem@VComposingTrack@@@@QAE@XZ ENDP		; TListItem<ComposingTrack>::~TListItem<ComposingTrack>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UClassGuidCounts@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$TListItem@UClassGuidCounts@@@@QAE@XZ PROC NEAR	; TListItem<ClassGuidCounts>::~TListItem<ClassGuidCounts>, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	//if (m_pNext != NULL) { delete m_pNext; }
; 22   : 	// IMPORTANT: user of the list is required to delete content first!
; 23   : 	//ZeroMemory(&m_Tinfo, sizeof(T));
; 24   : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1?$TListItem@UClassGuidCounts@@@@QAE@XZ ENDP		; TListItem<ClassGuidCounts>::~TListItem<ClassGuidCounts>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UCompositionComponent@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$TListItem@UCompositionComponent@@@@QAE@XZ PROC NEAR ; TListItem<CompositionComponent>::~TListItem<CompositionComponent>, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	//if (m_pNext != NULL) { delete m_pNext; }
; 22   : 	// IMPORTANT: user of the list is required to delete content first!
; 23   : 	//ZeroMemory(&m_Tinfo, sizeof(T));
; 24   : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1?$TListItem@UCompositionComponent@@@@QAE@XZ ENDP	; TListItem<CompositionComponent>::~TListItem<CompositionComponent>
_TEXT	ENDS
PUBLIC	?Divide@?$TListItem@UCompositionComponent@@@@AAEXAAPAV1@0@Z ; TListItem<CompositionComponent>::Divide
PUBLIC	?Merge@?$TListItem@UCompositionComponent@@@@AAEPAV1@PAV1@P6GHAAUCompositionComponent@@1@Z@Z ; TListItem<CompositionComponent>::Merge
; Function compile flags: /Odt
;	COMDAT ?MergeSort@?$TListItem@UCompositionComponent@@@@QAEPAV1@P6GHAAUCompositionComponent@@0@Z@Z
_TEXT	SEGMENT
_this$ = -12
_pList2$71327 = -8
_pList1$71326 = -4
_fcnCompare$ = 8
?MergeSort@?$TListItem@UCompositionComponent@@@@QAEPAV1@P6GHAAUCompositionComponent@@0@Z@Z PROC NEAR ; TListItem<CompositionComponent>::MergeSort, COMDAT
; _this$ = ecx

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 108  : 	if (m_pNext != NULL)

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00010	74 36		 je	 SHORT $L71325

; 109  : 	{
; 110  : 		TListItem<T> *pList1, *pList2;
; 111  : 		Divide(pList1, pList2);

  00012	8d 4d f8	 lea	 ecx, DWORD PTR _pList2$71327[ebp]
  00015	51		 push	 ecx
  00016	8d 55 fc	 lea	 edx, DWORD PTR _pList1$71326[ebp]
  00019	52		 push	 edx
  0001a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?Divide@?$TListItem@UCompositionComponent@@@@AAEXAAPAV1@0@Z ; TListItem<CompositionComponent>::Divide

; 112  : 		return pList1->MergeSort(fcnCompare)->Merge(pList2->MergeSort(fcnCompare), fcnCompare);

  00022	8b 45 08	 mov	 eax, DWORD PTR _fcnCompare$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _fcnCompare$[ebp]
  00029	51		 push	 ecx
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _pList2$71327[ebp]
  0002d	e8 00 00 00 00	 call	 ?MergeSort@?$TListItem@UCompositionComponent@@@@QAEPAV1@P6GHAAUCompositionComponent@@0@Z@Z ; TListItem<CompositionComponent>::MergeSort
  00032	50		 push	 eax
  00033	8b 55 08	 mov	 edx, DWORD PTR _fcnCompare$[ebp]
  00036	52		 push	 edx
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _pList1$71326[ebp]
  0003a	e8 00 00 00 00	 call	 ?MergeSort@?$TListItem@UCompositionComponent@@@@QAEPAV1@P6GHAAUCompositionComponent@@0@Z@Z ; TListItem<CompositionComponent>::MergeSort
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ?Merge@?$TListItem@UCompositionComponent@@@@AAEPAV1@PAV1@P6GHAAUCompositionComponent@@1@Z@Z ; TListItem<CompositionComponent>::Merge
  00046	eb 03		 jmp	 SHORT $L71324
$L71325:

; 113  : 	}
; 114  : 	return this;

  00048	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$L71324:

; 115  : }

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?MergeSort@?$TListItem@UCompositionComponent@@@@QAEPAV1@P6GHAAUCompositionComponent@@0@Z@Z ENDP ; TListItem<CompositionComponent>::MergeSort
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UCompositionComponent@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT
_this$ = -16
_pCurrent$ = -12
_pTail1$ = -8
_pTail2$ = -4
_pHead1$ = 8
_pHead2$ = 12
?Divide@?$TListItem@UCompositionComponent@@@@AAEXAAPAV1@0@Z PROC NEAR ; TListItem<CompositionComponent>::Divide, COMDAT
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 	TListItem<T> *pCurrent = this, *pTail1 = NULL, *pTail2 = NULL;

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR _pCurrent$[ebp], eax
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pTail1$[ebp], 0
  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pTail2$[ebp], 0
$L71402:

; 121  : 	do
; 122  : 	{
; 123  : 		pHead1 = pCurrent;

  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _pHead1$[ebp]
  00020	8b 55 f4	 mov	 edx, DWORD PTR _pCurrent$[ebp]
  00023	89 11		 mov	 DWORD PTR [ecx], edx

; 124  : 		pCurrent = pCurrent->m_pNext;

  00025	8b 45 f4	 mov	 eax, DWORD PTR _pCurrent$[ebp]
  00028	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002b	89 4d f4	 mov	 DWORD PTR _pCurrent$[ebp], ecx

; 125  : 		pHead1->m_pNext = pTail1;

  0002e	8b 55 08	 mov	 edx, DWORD PTR _pHead1$[ebp]
  00031	8b 02		 mov	 eax, DWORD PTR [edx]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _pTail1$[ebp]
  00036	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 126  : 		pTail1 = pHead1;

  00039	8b 55 08	 mov	 edx, DWORD PTR _pHead1$[ebp]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 45 f8	 mov	 DWORD PTR _pTail1$[ebp], eax

; 127  : 		if (pCurrent != NULL)

  00041	83 7d f4 00	 cmp	 DWORD PTR _pCurrent$[ebp], 0
  00045	74 24		 je	 SHORT $L71403

; 128  : 		{
; 129  : 			pHead2 = pCurrent;

  00047	8b 4d 0c	 mov	 ecx, DWORD PTR _pHead2$[ebp]
  0004a	8b 55 f4	 mov	 edx, DWORD PTR _pCurrent$[ebp]
  0004d	89 11		 mov	 DWORD PTR [ecx], edx

; 130  : 			pCurrent = pCurrent->m_pNext;

  0004f	8b 45 f4	 mov	 eax, DWORD PTR _pCurrent$[ebp]
  00052	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00055	89 4d f4	 mov	 DWORD PTR _pCurrent$[ebp], ecx

; 131  : 			pHead2->m_pNext = pTail2;

  00058	8b 55 0c	 mov	 edx, DWORD PTR _pHead2$[ebp]
  0005b	8b 02		 mov	 eax, DWORD PTR [edx]
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _pTail2$[ebp]
  00060	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 132  : 			pTail2 = pHead2;

  00063	8b 55 0c	 mov	 edx, DWORD PTR _pHead2$[ebp]
  00066	8b 02		 mov	 eax, DWORD PTR [edx]
  00068	89 45 fc	 mov	 DWORD PTR _pTail2$[ebp], eax
$L71403:

; 133  : 		}
; 134  : 	} while (pCurrent != NULL);

  0006b	83 7d f4 00	 cmp	 DWORD PTR _pCurrent$[ebp], 0
  0006f	75 ac		 jne	 SHORT $L71402

; 135  : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 08 00	 ret	 8
?Divide@?$TListItem@UCompositionComponent@@@@AAEXAAPAV1@0@Z ENDP ; TListItem<CompositionComponent>::Divide
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UCompositionComponent@@@@AAEPAV1@PAV1@P6GHAAUCompositionComponent@@1@Z@Z
_TEXT	SEGMENT
_this$ = -20
_pMergeItem$ = -16
_pResultTail$ = -12
_pResultHead$ = -8
_pThisList$ = -4
_pOtherList$ = 8
_fcnCompare$ = 12
?Merge@?$TListItem@UCompositionComponent@@@@AAEPAV1@PAV1@P6GHAAUCompositionComponent@@1@Z@Z PROC NEAR ; TListItem<CompositionComponent>::Merge, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 140  : 	if (!pOtherList) return this;

  00009	83 7d 08 00	 cmp	 DWORD PTR _pOtherList$[ebp], 0
  0000d	75 08		 jne	 SHORT $L71413
  0000f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00012	e9 af 00 00 00	 jmp	 $L71412
$L71413:

; 141  : 	TListItem<T>
; 142  : 		*pThisList = this, *pResultHead = NULL, *pResultTail = NULL, *pMergeItem = NULL;

  00017	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	89 45 fc	 mov	 DWORD PTR _pThisList$[ebp], eax
  0001d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pResultHead$[ebp], 0
  00024	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pResultTail$[ebp], 0
  0002b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pMergeItem$[ebp], 0
$L71419:

; 143  : 	while (pThisList && pOtherList)

  00032	83 7d fc 00	 cmp	 DWORD PTR _pThisList$[ebp], 0
  00036	74 6b		 je	 SHORT $L71420
  00038	83 7d 08 00	 cmp	 DWORD PTR _pOtherList$[ebp], 0
  0003c	74 65		 je	 SHORT $L71420

; 144  : 	{
; 145  : 		if ( fcnCompare(pThisList->m_Tinfo, pOtherList->m_Tinfo) )

  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _pOtherList$[ebp]
  00041	51		 push	 ecx
  00042	8b 55 fc	 mov	 edx, DWORD PTR _pThisList$[ebp]
  00045	52		 push	 edx
  00046	ff 55 0c	 call	 DWORD PTR _fcnCompare$[ebp]
  00049	85 c0		 test	 eax, eax
  0004b	74 13		 je	 SHORT $L71421

; 146  : 		{
; 147  : 			pMergeItem = pThisList;

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _pThisList$[ebp]
  00050	89 45 f0	 mov	 DWORD PTR _pMergeItem$[ebp], eax

; 148  : 			pThisList = pThisList->GetNext();

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _pThisList$[ebp]
  00056	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UCompositionComponent@@@@QBEPAV1@XZ ; TListItem<CompositionComponent>::GetNext
  0005b	89 45 fc	 mov	 DWORD PTR _pThisList$[ebp], eax

; 149  : 		}
; 150  : 		else

  0005e	eb 11		 jmp	 SHORT $L71422
$L71421:

; 151  : 		{
; 152  : 			pMergeItem = pOtherList;

  00060	8b 4d 08	 mov	 ecx, DWORD PTR _pOtherList$[ebp]
  00063	89 4d f0	 mov	 DWORD PTR _pMergeItem$[ebp], ecx

; 153  : 			pOtherList = pOtherList->GetNext();

  00066	8b 4d 08	 mov	 ecx, DWORD PTR _pOtherList$[ebp]
  00069	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UCompositionComponent@@@@QBEPAV1@XZ ; TListItem<CompositionComponent>::GetNext
  0006e	89 45 08	 mov	 DWORD PTR _pOtherList$[ebp], eax
$L71422:

; 154  : 		}
; 155  : 		pMergeItem->SetNext(NULL);

  00071	6a 00		 push	 0
  00073	8b 4d f0	 mov	 ecx, DWORD PTR _pMergeItem$[ebp]
  00076	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UCompositionComponent@@@@QAEXPAV1@@Z ; TListItem<CompositionComponent>::SetNext

; 156  : 		if (!pResultTail)

  0007b	83 7d f4 00	 cmp	 DWORD PTR _pResultTail$[ebp], 0
  0007f	75 0e		 jne	 SHORT $L71423

; 157  : 		{
; 158  : 			pResultHead = pResultTail = pMergeItem;

  00081	8b 55 f0	 mov	 edx, DWORD PTR _pMergeItem$[ebp]
  00084	89 55 f4	 mov	 DWORD PTR _pResultTail$[ebp], edx
  00087	8b 45 f4	 mov	 eax, DWORD PTR _pResultTail$[ebp]
  0008a	89 45 f8	 mov	 DWORD PTR _pResultHead$[ebp], eax

; 159  : 		}
; 160  : 		else

  0008d	eb 12		 jmp	 SHORT $L71424
$L71423:

; 161  : 		{
; 162  : 			pResultTail->SetNext(pMergeItem);

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _pMergeItem$[ebp]
  00092	51		 push	 ecx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _pResultTail$[ebp]
  00096	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UCompositionComponent@@@@QAEXPAV1@@Z ; TListItem<CompositionComponent>::SetNext

; 163  : 			pResultTail = pMergeItem;

  0009b	8b 55 f0	 mov	 edx, DWORD PTR _pMergeItem$[ebp]
  0009e	89 55 f4	 mov	 DWORD PTR _pResultTail$[ebp], edx
$L71424:

; 164  : 		}
; 165  : 	}

  000a1	eb 8f		 jmp	 SHORT $L71419
$L71420:

; 166  : 	if (pThisList) pResultTail->SetNext(pThisList);

  000a3	83 7d fc 00	 cmp	 DWORD PTR _pThisList$[ebp], 0
  000a7	74 0e		 je	 SHORT $L71425
  000a9	8b 45 fc	 mov	 eax, DWORD PTR _pThisList$[ebp]
  000ac	50		 push	 eax
  000ad	8b 4d f4	 mov	 ecx, DWORD PTR _pResultTail$[ebp]
  000b0	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UCompositionComponent@@@@QAEXPAV1@@Z ; TListItem<CompositionComponent>::SetNext

; 167  : 	else pResultTail->SetNext(pOtherList);

  000b5	eb 0c		 jmp	 SHORT $L71426
$L71425:
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _pOtherList$[ebp]
  000ba	51		 push	 ecx
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR _pResultTail$[ebp]
  000be	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UCompositionComponent@@@@QAEXPAV1@@Z ; TListItem<CompositionComponent>::SetNext
$L71426:

; 168  : 	return pResultHead;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _pResultHead$[ebp]
$L71412:

; 169  : }

  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 08 00	 ret	 8
?Merge@?$TListItem@UCompositionComponent@@@@AAEPAV1@PAV1@P6GHAAUCompositionComponent@@1@Z@Z ENDP ; TListItem<CompositionComponent>::Merge
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSong@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CSong@@W3AGJABU_GUID@@PAPAX@Z PROC NEAR	; CSong::QueryInterface, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z ; CSong::QueryInterface
?QueryInterface@CSong@@W3AGJABU_GUID@@PAPAX@Z ENDP	; CSong::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CSong@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CSong@@W3AGKXZ PROC NEAR			; CSong::AddRef, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CSong@@UAGKXZ	; CSong::AddRef
?AddRef@CSong@@W3AGKXZ ENDP				; CSong::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CSong@@W3AGKXZ
_TEXT	SEGMENT
?Release@CSong@@W3AGKXZ PROC NEAR			; CSong::Release, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?Release@CSong@@UAGKXZ	; CSong::Release
?Release@CSong@@W3AGKXZ ENDP				; CSong::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSong@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CSong@@W7AGJABU_GUID@@PAPAX@Z PROC NEAR	; CSong::QueryInterface, COMDAT
  00000	83 6c 24 04 08	 sub	 DWORD PTR [esp+4], 8
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z ; CSong::QueryInterface
?QueryInterface@CSong@@W7AGJABU_GUID@@PAPAX@Z ENDP	; CSong::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CSong@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CSong@@W7AGKXZ PROC NEAR			; CSong::AddRef, COMDAT
  00000	83 6c 24 04 08	 sub	 DWORD PTR [esp+4], 8
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CSong@@UAGKXZ	; CSong::AddRef
?AddRef@CSong@@W7AGKXZ ENDP				; CSong::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CSong@@W7AGKXZ
_TEXT	SEGMENT
?Release@CSong@@W7AGKXZ PROC NEAR			; CSong::Release, COMDAT
  00000	83 6c 24 04 08	 sub	 DWORD PTR [esp+4], 8
  00005	e9 00 00 00 00	 jmp	 ?Release@CSong@@UAGKXZ	; CSong::Release
?Release@CSong@@W7AGKXZ ENDP				; CSong::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSong@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CSong@@WM@AGJABU_GUID@@PAPAX@Z PROC NEAR ; CSong::QueryInterface, COMDAT
  00000	83 6c 24 04 0c	 sub	 DWORD PTR [esp+4], 12	; 0000000cH
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CSong@@UAGJABU_GUID@@PAPAX@Z ; CSong::QueryInterface
?QueryInterface@CSong@@WM@AGJABU_GUID@@PAPAX@Z ENDP	; CSong::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CSong@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@CSong@@WM@AGKXZ PROC NEAR			; CSong::AddRef, COMDAT
  00000	83 6c 24 04 0c	 sub	 DWORD PTR [esp+4], 12	; 0000000cH
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CSong@@UAGKXZ	; CSong::AddRef
?AddRef@CSong@@WM@AGKXZ ENDP				; CSong::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CSong@@WM@AGKXZ
_TEXT	SEGMENT
?Release@CSong@@WM@AGKXZ PROC NEAR			; CSong::Release, COMDAT
  00000	83 6c 24 04 0c	 sub	 DWORD PTR [esp+4], 12	; 0000000cH
  00005	e9 00 00 00 00	 jmp	 ?Release@CSong@@UAGKXZ	; CSong::Release
?Release@CSong@@WM@AGKXZ ENDP				; CSong::Release
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ??0AListItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0AListItem@@QAE@XZ PROC NEAR				; AListItem::AListItem, COMDAT
; _this$ = ecx

; 17   :     AListItem() { m_pNext=NULL; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0AListItem@@QAE@XZ ENDP				; AListItem::AListItem
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@AListItem@@QAEXPAV1@@Z PROC NEAR		; AListItem::SetNext, COMDAT
; _this$ = ecx

; 19   :     void SetNext(AListItem *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetNext@AListItem@@QAEXPAV1@@Z ENDP			; AListItem::SetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0AList@@QAE@XZ PROC NEAR				; AList::AList, COMDAT
; _this$ = ecx

; 34   :     AList() {m_pHead=NULL;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0AList@@QAE@XZ ENDP					; AList::AList
_TEXT	ENDS
EXTRN	?GetCount@AListItem@@QBEJXZ:NEAR		; AListItem::GetCount
; Function compile flags: /Odt
;	COMDAT ?GetCount@AList@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?GetCount@AList@@QBEJXZ PROC NEAR			; AList::GetCount, COMDAT
; _this$ = ecx

; 38   :     LONG GetCount() const {return m_pHead->GetCount();}; 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	e8 00 00 00 00	 call	 ?GetCount@AListItem@@QBEJXZ ; AListItem::GetCount
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?GetCount@AList@@QBEJXZ ENDP				; AList::GetCount
_TEXT	ENDS
EXTRN	?Cat@AListItem@@QAEPAV1@PAV1@@Z:NEAR		; AListItem::Cat
; Function compile flags: /Odt
;	COMDAT ?Cat@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?Cat@AList@@QAEXPAVAListItem@@@Z PROC NEAR		; AList::Cat, COMDAT
; _this$ = ecx

; 41   :     void Cat(AListItem *pItem) {m_pHead=m_pHead->Cat(pItem);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00010	e8 00 00 00 00	 call	 ?Cat@AListItem@@QAEPAV1@PAV1@@Z ; AListItem::Cat
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	89 02		 mov	 DWORD PTR [edx], eax
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?Cat@AList@@QAEXPAVAListItem@@@Z ENDP			; AList::Cat
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddHead@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddHead@AList@@QAEXPAVAListItem@@@Z PROC NEAR		; AList::AddHead, COMDAT
; _this$ = ecx

; 51   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :             if (pItem!=NULL)

  00007	83 7d 08 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  0000b	74 16		 je	 SHORT $L32730

; 53   :             {
; 54   :                 pItem->SetNext(m_pHead);

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	51		 push	 ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00016	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 55   :                 m_pHead=pItem;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00021	89 02		 mov	 DWORD PTR [edx], eax
$L32730:

; 56   :             }
; 57   :         };

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?AddHead@AList@@QAEXPAVAListItem@@@Z ENDP		; AList::AddHead
_TEXT	ENDS
EXTRN	?DirectMusicAllocI@@YGPAXI@Z:NEAR		; DirectMusicAllocI
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xalloc.h
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_cb$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 13   :     return DirectMusicAllocI(cb);

  00003	8b 45 08	 mov	 eax, DWORD PTR _cb$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicAllocI@@YGPAXI@Z ; DirectMusicAllocI

; 14   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
EXTRN	?DirectMusicFreeI@@YGXPAX@Z:NEAR		; DirectMusicFreeI
; Function compile flags: /Odt
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 19   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_U@YAPAXI@Z
_TEXT	SEGMENT
_cb$ = 8
??_U@YAPAXI@Z PROC NEAR					; operator new[], COMDAT

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   :     return DirectMusicAllocI(cb);

  00003	8b 45 08	 mov	 eax, DWORD PTR _cb$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicAllocI@@YGPAXI@Z ; DirectMusicAllocI

; 24   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??_U@YAPAXI@Z ENDP					; operator new[]
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??_V@YAXPAX@Z PROC NEAR					; operator delete[], COMDAT

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 29   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??_V@YAXPAX@Z ENDP					; operator delete[]
_TEXT	ENDS
PUBLIC	?GetNext@AListItem@@QBEPAV1@XZ			; AListItem::GetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\trklist.h
;	COMDAT ?GetNext@CTrack@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@CTrack@@QAEPAV1@XZ PROC NEAR			; CTrack::GetNext, COMDAT
; _this$ = ecx

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 		return (CTrack*)AListItem::GetNext();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext

; 25   : 	};

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetNext@CTrack@@QAEPAV1@XZ ENDP			; CTrack::GetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@AListItem@@QBEPAV1@XZ PROC NEAR		; AListItem::GetNext, COMDAT
; _this$ = ecx

; 18   :     AListItem *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetNext@AListItem@@QBEPAV1@XZ ENDP			; AListItem::GetNext
_TEXT	ENDS
PUBLIC	_!=@8
EXTRN	_CLSID_DirectMusicSysExTrack:BYTE
EXTRN	_CLSID_DirectMusicBandTrack:BYTE
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\trklist.h
;	COMDAT ?Less@CTrack@@QAE_NPAV1@@Z
_TEXT	SEGMENT
tv88 = -8
_this$ = -4
_pCTrack$ = 8
?Less@CTrack@@QAE_NPAV1@@Z PROC NEAR			; CTrack::Less, COMDAT
; _this$ = ecx

; 27   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   :         // Give the sysex track priority over any other track at the same position,
; 29   :         // and the band track priority over any track but the sysex track. 
; 30   :         return
; 31   :             ( m_dwPosition < pCTrack->m_dwPosition ||
; 32   :               (m_dwPosition == pCTrack->m_dwPosition && 
; 33   :                m_guidClassID == CLSID_DirectMusicSysExTrack) ||
; 34   :               (m_dwPosition == pCTrack->m_dwPosition && 
; 35   :                m_guidClassID == CLSID_DirectMusicBandTrack &&
; 36   :                pCTrack->m_guidClassID != CLSID_DirectMusicSysExTrack) );

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pCTrack$[ebp]
  0000f	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00012	3b 51 30	 cmp	 edx, DWORD PTR [ecx+48]
  00015	72 64		 jb	 SHORT $L72185
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _pCTrack$[ebp]
  0001d	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00020	3b 51 30	 cmp	 edx, DWORD PTR [ecx+48]
  00023	75 15		 jne	 SHORT $L72184
  00025	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSysExTrack
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c0 04	 add	 eax, 4
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _==@8
  00036	85 c0		 test	 eax, eax
  00038	75 41		 jne	 SHORT $L72185
$L72184:
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	8b 55 08	 mov	 edx, DWORD PTR _pCTrack$[ebp]
  00040	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00043	3b 42 30	 cmp	 eax, DWORD PTR [edx+48]
  00046	75 2a		 jne	 SHORT $L72186
  00048	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicBandTrack
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 _==@8
  00059	85 c0		 test	 eax, eax
  0005b	74 15		 je	 SHORT $L72186
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicSysExTrack
  00062	8b 55 08	 mov	 edx, DWORD PTR _pCTrack$[ebp]
  00065	83 c2 04	 add	 edx, 4
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 _!=@8
  0006e	85 c0		 test	 eax, eax
  00070	75 09		 jne	 SHORT $L72185
$L72186:
  00072	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
  00079	eb 07		 jmp	 SHORT $L72187
$L72185:
  0007b	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
$L72187:
  00082	8a 45 f8	 mov	 al, BYTE PTR tv88[ebp]

; 37   :     }

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 04 00	 ret	 4
?Less@CTrack@@QAE_NPAV1@@Z ENDP				; CTrack::Less
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\guiddef.h
_TEXT	ENDS
;	COMDAT _!=@8
_TEXT	SEGMENT
_guidOne$ = 8
_guidOther$ = 12
_!=@8	PROC NEAR					; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 194  :     return !(guidOne == guidOther);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _==@8
  00010	f7 d8		 neg	 eax
  00012	1b c0		 sbb	 eax, eax
  00014	40		 inc	 eax

; 195  : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
_!=@8	ENDP
_TEXT	ENDS
PUBLIC	?GetHead@AList@@QBEPAVAListItem@@XZ		; AList::GetHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\trklist.h
;	COMDAT ?GetHead@CTrackList@@QAEPAVCTrack@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@CTrackList@@QAEPAVCTrack@@XZ PROC NEAR		; CTrackList::GetHead, COMDAT
; _this$ = ecx

; 58   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 		return (CTrack*)AList::GetHead();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetHead@AList@@QBEPAVAListItem@@XZ ; AList::GetHead

; 60   : 	};

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetHead@CTrackList@@QAEPAVCTrack@@XZ ENDP		; CTrackList::GetHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@AList@@QBEPAVAListItem@@XZ PROC NEAR		; AList::GetHead, COMDAT
; _this$ = ecx

; 35   :     AListItem *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@AList@@QBEPAVAListItem@@XZ ENDP		; AList::GetHead
_TEXT	ENDS
PUBLIC	?RemoveHead@CTrackList@@QAEPAVCTrack@@XZ	; CTrackList::RemoveHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\trklist.h
;	COMDAT ?Clear@CTrackList@@QAEXXZ
_TEXT	SEGMENT
tv71 = -20
_this$ = -16
$T72201 = -12
$T72200 = -8
_pTrack$ = -4
?Clear@CTrackList@@QAEXXZ PROC NEAR			; CTrackList::Clear, COMDAT
; _this$ = ecx

; 70   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
$L40796:

; 71   : 		CTrack* pTrack;
; 72   : 		while( pTrack = RemoveHead() )

  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?RemoveHead@CTrackList@@QAEPAVCTrack@@XZ ; CTrackList::RemoveHead
  00011	89 45 fc	 mov	 DWORD PTR _pTrack$[ebp], eax
  00014	83 7d fc 00	 cmp	 DWORD PTR _pTrack$[ebp], 0
  00018	74 2a		 je	 SHORT $L40793

; 73   : 		{
; 74   : 			delete pTrack;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _pTrack$[ebp]
  0001d	89 45 f4	 mov	 DWORD PTR $T72201[ebp], eax
  00020	8b 4d f4	 mov	 ecx, DWORD PTR $T72201[ebp]
  00023	89 4d f8	 mov	 DWORD PTR $T72200[ebp], ecx
  00026	83 7d f8 00	 cmp	 DWORD PTR $T72200[ebp], 0
  0002a	74 0f		 je	 SHORT $L72202
  0002c	6a 01		 push	 1
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR $T72200[ebp]
  00031	e8 00 00 00 00	 call	 ??_GCTrack@@QAEPAXI@Z
  00036	89 45 ec	 mov	 DWORD PTR tv71[ebp], eax
  00039	eb 07		 jmp	 SHORT $L72203
$L72202:
  0003b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L72203:

; 75   : 		}

  00042	eb c5		 jmp	 SHORT $L40796
$L40793:

; 76   : 	}

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?Clear@CTrackList@@QAEXXZ ENDP				; CTrackList::Clear
_TEXT	ENDS
PUBLIC	?RemoveHead@AList@@QAEPAVAListItem@@XZ		; AList::RemoveHead
; Function compile flags: /Odt
;	COMDAT ?RemoveHead@CTrackList@@QAEPAVCTrack@@XZ
_TEXT	SEGMENT
_this$ = -4
?RemoveHead@CTrackList@@QAEPAVCTrack@@XZ PROC NEAR	; CTrackList::RemoveHead, COMDAT
; _this$ = ecx

; 62   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 		return (CTrack*)AList::RemoveHead();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?RemoveHead@AList@@QAEPAVAListItem@@XZ ; AList::RemoveHead

; 64   : 	};

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?RemoveHead@CTrackList@@QAEPAVCTrack@@XZ ENDP		; CTrackList::RemoveHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -8
_li$ = -4
?RemoveHead@AList@@QAEPAVAListItem@@XZ PROC NEAR	; AList::RemoveHead, COMDAT
; _this$ = ecx

; 71   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 72   :             AListItem *li;
; 73   :             li = m_pHead;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR _li$[ebp], ecx

; 74   :             if(m_pHead)

  00011	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00014	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00017	74 19		 je	 SHORT $L32744

; 75   :             {
; 76   :                 m_pHead = m_pHead->GetNext();

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	89 01		 mov	 DWORD PTR [ecx], eax

; 77   :                 li->SetNext(NULL);

  00028	6a 00		 push	 0
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  0002d	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext
$L32744:

; 78   :             }
; 79   :             return li;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _li$[ebp]

; 80   :         }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?RemoveHead@AList@@QAEPAVAListItem@@XZ ENDP		; AList::RemoveHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCTrack@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCTrack@@QAEPAXI@Z PROC NEAR				; CTrack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CTrack@@QAE@XZ	; CTrack::~CTrack
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L40803
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L40803:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCTrack@@QAEPAXI@Z ENDP				; CTrack::`scalar deleting destructor'
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\dmstrm.h
_TEXT	ENDS
;	COMDAT ?GetStream@CRiffParser@@QAEPAUIStream@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetStream@CRiffParser@@QAEPAUIStream@@XZ PROC NEAR	; CRiffParser::GetStream, COMDAT
; _this$ = ecx

; 96   :     IStream *   GetStream() { return m_pStream; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetStream@CRiffParser@@QAEPAUIStream@@XZ ENDP		; CRiffParser::GetStream
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0CInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CInfo@@QAE@XZ PROC NEAR				; CInfo::CInfo, COMDAT
; _this$ = ecx

; 111  :     CInfo() { Init(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Init@CInfo@@QAEXXZ	; CInfo::Init
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CInfo@@QAE@XZ ENDP					; CInfo::CInfo
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xboxutil.h
_TEXT	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT
___formal$ = 8
?DeleteCriticalSection@@YGXPAX@Z PROC NEAR		; DeleteCriticalSection, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : }

  00003	5d		 pop	 ebp
  00004	c2 04 00	 ret	 4
?DeleteCriticalSection@@YGXPAX@Z ENDP			; DeleteCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\dmsegobj.h
_TEXT	ENDS
;	COMDAT ?GetNext@CSegment@@QAEPAV1@XZ
_TEXT	SEGMENT
tv71 = -12
tv68 = -8
_this$ = -4
?GetNext@CSegment@@QAEPAV1@XZ PROC NEAR			; CSegment::GetNext, COMDAT
; _this$ = ecx

; 41   :     CSegment* GetNext() { return (CSegment*)AListItem::GetNext();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 10	 add	 ecx, 16			; 00000010H
  0000f	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  00014	89 45 f8	 mov	 DWORD PTR tv68[ebp], eax
  00017	83 7d f8 00	 cmp	 DWORD PTR tv68[ebp], 0
  0001b	74 0b		 je	 SHORT $L72225
  0001d	8b 45 f8	 mov	 eax, DWORD PTR tv68[ebp]
  00020	83 e8 10	 sub	 eax, 16			; 00000010H
  00023	89 45 f4	 mov	 DWORD PTR tv71[ebp], eax
  00026	eb 07		 jmp	 SHORT $L72226
$L72225:
  00028	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L72226:
  0002f	8b 45 f4	 mov	 eax, DWORD PTR tv71[ebp]
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GetNext@CSegment@@QAEPAV1@XZ ENDP			; CSegment::GetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetHead@CSegmentList@@QAEPAVCSegment@@XZ
_TEXT	SEGMENT
tv69 = -12
tv66 = -8
_this$ = -4
?GetHead@CSegmentList@@QAEPAVCSegment@@XZ PROC NEAR	; CSegmentList::GetHead, COMDAT
; _this$ = ecx

; 209  :     CSegment* GetHead(){return (CSegment*)AList::GetHead();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetHead@AList@@QBEPAVAListItem@@XZ ; AList::GetHead
  00011	89 45 f8	 mov	 DWORD PTR tv66[ebp], eax
  00014	83 7d f8 00	 cmp	 DWORD PTR tv66[ebp], 0
  00018	74 0b		 je	 SHORT $L72230
  0001a	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  0001d	83 e8 10	 sub	 eax, 16			; 00000010H
  00020	89 45 f4	 mov	 DWORD PTR tv69[ebp], eax
  00023	eb 07		 jmp	 SHORT $L72231
$L72230:
  00025	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$L72231:
  0002c	8b 45 f4	 mov	 eax, DWORD PTR tv69[ebp]
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?GetHead@CSegmentList@@QAEPAVCSegment@@XZ ENDP		; CSegmentList::GetHead
_TEXT	ENDS
EXTRN	?AddTail@AList@@QAEXPAVAListItem@@@Z:NEAR	; AList::AddTail
; Function compile flags: /Odt
;	COMDAT ?AddTail@CSegmentList@@QAEXPAVCSegment@@@Z
_TEXT	SEGMENT
tv67 = -8
_this$ = -4
_pSegment$ = 8
?AddTail@CSegmentList@@QAEXPAVCSegment@@@Z PROC NEAR	; CSegmentList::AddTail, COMDAT
; _this$ = ecx

; 213  :     void AddTail(CSegment* pSegment){AList::AddTail((AListItem*)pSegment);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d 08 00	 cmp	 DWORD PTR _pSegment$[ebp], 0
  0000d	74 0b		 je	 SHORT $L72235
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pSegment$[ebp]
  00012	83 c0 10	 add	 eax, 16			; 00000010H
  00015	89 45 f8	 mov	 DWORD PTR tv67[ebp], eax
  00018	eb 07		 jmp	 SHORT $L72236
$L72235:
  0001a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$L72236:
  00021	8b 4d f8	 mov	 ecx, DWORD PTR tv67[ebp]
  00024	51		 push	 ecx
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?AddTail@AList@@QAEXPAVAListItem@@@Z ; AList::AddTail
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?AddTail@CSegmentList@@QAEXPAVCSegment@@@Z ENDP		; CSegmentList::AddTail
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\dmgraph.h
_TEXT	ENDS
;	COMDAT ?GetNext@CGraph@@QAEPAV1@XZ
_TEXT	SEGMENT
tv71 = -12
tv68 = -8
_this$ = -4
?GetNext@CGraph@@QAEPAV1@XZ PROC NEAR			; CGraph::GetNext, COMDAT
; _this$ = ecx

; 98   :     CGraph* GetNext() { return (CGraph*)AListItem::GetNext();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  00014	89 45 f8	 mov	 DWORD PTR tv68[ebp], eax
  00017	83 7d f8 00	 cmp	 DWORD PTR tv68[ebp], 0
  0001b	74 0b		 je	 SHORT $L72240
  0001d	8b 45 f8	 mov	 eax, DWORD PTR tv68[ebp]
  00020	83 e8 14	 sub	 eax, 20			; 00000014H
  00023	89 45 f4	 mov	 DWORD PTR tv71[ebp], eax
  00026	eb 07		 jmp	 SHORT $L72241
$L72240:
  00028	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L72241:
  0002f	8b 45 f4	 mov	 eax, DWORD PTR tv71[ebp]
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GetNext@CGraph@@QAEPAV1@XZ ENDP			; CGraph::GetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetHead@CGraphList@@QAEPAVCGraph@@XZ
_TEXT	SEGMENT
tv69 = -12
tv66 = -8
_this$ = -4
?GetHead@CGraphList@@QAEPAVCGraph@@XZ PROC NEAR		; CGraphList::GetHead, COMDAT
; _this$ = ecx

; 153  :     CGraph* GetHead(){return (CGraph*)AList::GetHead();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetHead@AList@@QBEPAVAListItem@@XZ ; AList::GetHead
  00011	89 45 f8	 mov	 DWORD PTR tv66[ebp], eax
  00014	83 7d f8 00	 cmp	 DWORD PTR tv66[ebp], 0
  00018	74 0b		 je	 SHORT $L72245
  0001a	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  0001d	83 e8 14	 sub	 eax, 20			; 00000014H
  00020	89 45 f4	 mov	 DWORD PTR tv69[ebp], eax
  00023	eb 07		 jmp	 SHORT $L72246
$L72245:
  00025	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$L72246:
  0002c	8b 45 f4	 mov	 eax, DWORD PTR tv69[ebp]
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?GetHead@CGraphList@@QAEPAVCGraph@@XZ ENDP		; CGraphList::GetHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddTail@CGraphList@@QAEXPAVCGraph@@@Z
_TEXT	SEGMENT
tv67 = -8
_this$ = -4
_pGraph$ = 8
?AddTail@CGraphList@@QAEXPAVCGraph@@@Z PROC NEAR	; CGraphList::AddTail, COMDAT
; _this$ = ecx

; 157  :     void AddTail(CGraph* pGraph){AList::AddTail((AListItem*)pGraph);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d 08 00	 cmp	 DWORD PTR _pGraph$[ebp], 0
  0000d	74 0b		 je	 SHORT $L72250
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pGraph$[ebp]
  00012	83 c0 14	 add	 eax, 20			; 00000014H
  00015	89 45 f8	 mov	 DWORD PTR tv67[ebp], eax
  00018	eb 07		 jmp	 SHORT $L72251
$L72250:
  0001a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$L72251:
  00021	8b 4d f8	 mov	 ecx, DWORD PTR tv67[ebp]
  00024	51		 push	 ecx
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?AddTail@AList@@QAEXPAVAListItem@@@Z ; AList::AddTail
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?AddTail@CGraphList@@QAEXPAVCGraph@@@Z ENDP		; CGraphList::AddTail
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\song.h
_TEXT	ENDS
;	COMDAT ?GetNext@CVirtualSegment@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@CVirtualSegment@@QAEPAV1@XZ PROC NEAR		; CVirtualSegment::GetNext, COMDAT
; _this$ = ecx

; 23   :     CVirtualSegment* GetNext() { return (CVirtualSegment*)AListItem::GetNext();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetNext@CVirtualSegment@@QAEPAV1@XZ ENDP		; CVirtualSegment::GetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddHead@CVirtualSegmentList@@QAEXPAVCVirtualSegment@@@Z
_TEXT	SEGMENT
_this$ = -4
_pVirtualSegment$ = 8
?AddHead@CVirtualSegmentList@@QAEXPAVCVirtualSegment@@@Z PROC NEAR ; CVirtualSegmentList::AddHead, COMDAT
; _this$ = ecx

; 46   :     void AddHead(CVirtualSegment* pVirtualSegment) { AList::AddHead((AListItem*)pVirtualSegment);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?AddHead@CVirtualSegmentList@@QAEXPAVCVirtualSegment@@@Z ENDP ; CVirtualSegmentList::AddHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ PROC NEAR ; CVirtualSegmentList::GetHead, COMDAT
; _this$ = ecx

; 48   :     CVirtualSegment* GetHead(){return (CVirtualSegment*)AList::GetHead();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetHead@AList@@QBEPAVAListItem@@XZ ; AList::GetHead
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ ENDP ; CVirtualSegmentList::GetHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RemoveHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ
_TEXT	SEGMENT
_this$ = -4
?RemoveHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ PROC NEAR ; CVirtualSegmentList::RemoveHead, COMDAT
; _this$ = ecx

; 50   :     CVirtualSegment* RemoveHead()  { return (CVirtualSegment *)AList::RemoveHead();};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?RemoveHead@AList@@QAEPAVAListItem@@XZ ; AList::RemoveHead
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?RemoveHead@CVirtualSegmentList@@QAEPAVCVirtualSegment@@XZ ENDP ; CVirtualSegmentList::RemoveHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddTail@CVirtualSegmentList@@QAEXPAVCVirtualSegment@@@Z
_TEXT	SEGMENT
_this$ = -4
_pVirtualSegment$ = 8
?AddTail@CVirtualSegmentList@@QAEXPAVCVirtualSegment@@@Z PROC NEAR ; CVirtualSegmentList::AddTail, COMDAT
; _this$ = ecx

; 52   :     void AddTail(CVirtualSegment* pVirtualSegment){AList::AddTail((AListItem*)pVirtualSegment);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _pVirtualSegment$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?AddTail@AList@@QAEXPAVAListItem@@@Z ; AList::AddTail
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?AddTail@CVirtualSegmentList@@QAEXPAVCVirtualSegment@@@Z ENDP ; CVirtualSegmentList::AddTail
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetNext@CSongSegment@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@CSongSegment@@QAEPAV1@XZ PROC NEAR		; CSongSegment::GetNext, COMDAT
; _this$ = ecx

; 61   :     CSongSegment* GetNext() { return (CSongSegment*)AListItem::GetNext();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetNext@CSongSegment@@QAEPAV1@XZ ENDP			; CSongSegment::GetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetHead@CSongSegmentList@@QAEPAVCSongSegment@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@CSongSegmentList@@QAEPAVCSongSegment@@XZ PROC NEAR ; CSongSegmentList::GetHead, COMDAT
; _this$ = ecx

; 73   :     CSongSegment* GetHead(){return (CSongSegment*)AList::GetHead();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetHead@AList@@QBEPAVAListItem@@XZ ; AList::GetHead
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetHead@CSongSegmentList@@QAEPAVCSongSegment@@XZ ENDP	; CSongSegmentList::GetHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RemoveHead@CSongSegmentList@@QAEPAVCSongSegment@@XZ
_TEXT	SEGMENT
_this$ = -4
?RemoveHead@CSongSegmentList@@QAEPAVCSongSegment@@XZ PROC NEAR ; CSongSegmentList::RemoveHead, COMDAT
; _this$ = ecx

; 75   :     CSongSegment* RemoveHead()  { return (CSongSegment *)AList::RemoveHead();};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?RemoveHead@AList@@QAEPAVAListItem@@XZ ; AList::RemoveHead
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?RemoveHead@CSongSegmentList@@QAEPAVCSongSegment@@XZ ENDP ; CSongSegmentList::RemoveHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddTail@CSongSegmentList@@QAEXPAVCSongSegment@@@Z
_TEXT	SEGMENT
_this$ = -4
_pSongSegment$ = 8
?AddTail@CSongSegmentList@@QAEXPAVCSongSegment@@@Z PROC NEAR ; CSongSegmentList::AddTail, COMDAT
; _this$ = ecx

; 77   :     void AddTail(CSongSegment* pSongSegment){AList::AddTail((AListItem*)pSongSegment);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _pSongSegment$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?AddTail@AList@@QAEXPAVAListItem@@@Z ; AList::AddTail
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?AddTail@CSongSegmentList@@QAEXPAVCSongSegment@@@Z ENDP	; CSongSegmentList::AddTail
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetTrackGroup@ComposingTrack@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4
?GetTrackGroup@ComposingTrack@@QAEKXZ PROC NEAR		; ComposingTrack::GetTrackGroup, COMDAT
; _this$ = ecx

; 181  : 	DWORD GetTrackGroup() { return m_dwTrackGroup; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetTrackGroup@ComposingTrack@@QAEKXZ ENDP		; ComposingTrack::GetTrackGroup
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetTrackID@ComposingTrack@@QAE?AU_GUID@@XZ
_TEXT	SEGMENT
_this$ = -4
___$ReturnUdt$ = 8
?GetTrackID@ComposingTrack@@QAE?AU_GUID@@XZ PROC NEAR	; ComposingTrack::GetTrackID, COMDAT
; _this$ = ecx

; 182  : 	GUID GetTrackID() { return m_guidClassID; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	89 11		 mov	 DWORD PTR [ecx], edx
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00017	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001a	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0001d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00020	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?GetTrackID@ComposingTrack@@QAE?AU_GUID@@XZ ENDP	; ComposingTrack::GetTrackID
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetPriority@ComposingTrack@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4
?GetPriority@ComposingTrack@@QAEKXZ PROC NEAR		; ComposingTrack::GetPriority, COMDAT
; _this$ = ecx

; 183  : 	DWORD GetPriority() { return m_dwPriority; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetPriority@ComposingTrack@@QAEKXZ ENDP		; ComposingTrack::GetPriority
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetPriority@ComposingTrack@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4
_dwPriority$ = 8
?SetPriority@ComposingTrack@@QAEXK@Z PROC NEAR		; ComposingTrack::SetPriority, COMDAT
; _this$ = ecx

; 184  : 	void SetPriority(DWORD dwPriority) { m_dwPriority = dwPriority; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _dwPriority$[ebp]
  0000d	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetPriority@ComposingTrack@@QAEXK@Z ENDP		; ComposingTrack::SetPriority
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetTrackGroup@ComposingTrack@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4
_dwTrackGroup$ = 8
?SetTrackGroup@ComposingTrack@@QAEXK@Z PROC NEAR	; ComposingTrack::SetTrackGroup, COMDAT
; _this$ = ecx

; 185  : 	void SetTrackGroup(DWORD dwTrackGroup) { m_dwTrackGroup = dwTrackGroup; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _dwTrackGroup$[ebp]
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetTrackGroup@ComposingTrack@@QAEXK@Z ENDP		; ComposingTrack::SetTrackGroup
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetTrackID@ComposingTrack@@QAEXAAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = -4
_rguidClassID$ = 8
?SetTrackID@ComposingTrack@@QAEXAAU_GUID@@@Z PROC NEAR	; ComposingTrack::SetTrackID, COMDAT
; _this$ = ecx

; 186  : 	void SetTrackID(GUID& rguidClassID) { m_guidClassID = rguidClassID; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _rguidClassID$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	89 11		 mov	 DWORD PTR [ecx], edx
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00017	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001a	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0001d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00020	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?SetTrackID@ComposingTrack@@QAEXAAU_GUID@@@Z ENDP	; ComposingTrack::SetTrackID
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IUnknown@@QAE@XZ PROC NEAR				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
END
