; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	..\dmgraph.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EB@GKHJDOIB@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DF@JOBHFIBI@Error?3?5Multiple?5install?5of?5the?5s@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@JNPCPOMI@?$CFs?3?5Invalid?5pointer?5pTool?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CC@KOMENMPL@?$CFs?3?5Invalid?5pointer?5pdwPChannels@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@EMDDDLDF@?$CFs?3?5Invalid?5pointer?5ppObject?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CK@CKOABBED@Error?3?5Requested?5Tool?5not?5found?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BM@GEGNKCGL@?$CFs?3?5Invalid?5pointer?5ppTool?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@EBPDABHM@Warning?3?5GetTool?5failed?5because?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CI@BCOEMLMC@Error?3?5RemoveTool?5?9?5Tool?5not?5in?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@CHDJODOG@?$CFs?3?5Invalid?5pointer?5ppGraph?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@CLPCNMAH@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@COBHEKOB@pToolRef?9?$DOm_pdwMediaTypes?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@KLPIMHHM@?$CFs?3?5Invalid?5pointer?5pPMsg?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DE@PPCGKDDL@Error?3?5Unknown?5file?5format?5when?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DC@KHAODKAN@Error?3?5Tool?5header?5chunk?5not?5fir@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@ILHNFHGG@Error?3?5Invalid?5Tool?5header?4?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@FBJJDMKD@Error?3?5File?5read?5error?5loading?5T@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@IKMLDJOH@Error?5reading?5Tool?5chunk?5?9?5not?5R@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07KCKPANJI@pStream?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@IPMBDPJO@Error?5creating?5tool?5for?5loading?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@HINHCEF@Error?5loading?5data?5into?5tool?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BGAOHDMM@?$CBp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT ??0CGraph@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicGraph@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IGraphClone@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGraph@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CGraph@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CGraph@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGraph@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Shutdown@CGraph@@IAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCToolRef@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertTool@CGraph@@IAEJPAUIDirectMusicTool@@PAKKJPAU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertTool@CGraph@@UAGJPAUIDirectMusicTool@@PAKKJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetObjectInPath@CGraph@@QAEJKABU_GUID@@K0PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTool@CGraph@@UAGJKPAPAUIDirectMusicTool@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveTool@CGraph@@UAGJPAUIDirectMusicTool@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@CGraph@@UAGJPAPAUIDirectMusicGraph@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckType@CGraph@@IAEHKPAVCToolRef@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StampPMsg@CGraph@@UAGJPAU_DMUS_PMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassID@CGraph@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsDirty@CGraph@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CGraph@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CGraph@@QAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadTool@CGraph@@IAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateTool@CGraph@@IAEJU_DMUS_IO_TOOL_HEADER@@PAUIStream@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Save@CGraph@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CGraph@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CGraphList@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@ULyricInfo@@@@QBEPAV?$TListItem@ULyricInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@ULyricInfo@@@@QAEXPAV?$TListItem@ULyricInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@ULyricInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@ULyricInfo@@@@QAEAAULyricInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@UTriggerInfo@@@@SGHAAUTriggerInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@ULyricInfo@@@@SGHAAULyricInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@ULyricInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEAAV01@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UTriggerInfo@@@@QAEXP6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@ULyricInfo@@@@QAEXP6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_SEQ_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_CURVE_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@_J@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UObjectInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ObjectInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UTriggerInfo@@@@QAEPAV1@P6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@ULyricInfo@@@@QAEPAV1@P6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UTriggerInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UTriggerInfo@@@@AAEPAV1@PAV1@P6GHAAUTriggerInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@ULyricInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@ULyricInfo@@@@AAEPAV1@PAV1@P6GHAAULyricInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CGraph@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CGraph@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CGraph@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CGraph@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CGraph@@W7AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CGraph@@W7AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CGraph@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CGraph@@WM@AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CGraph@@WM@AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UParamInfo@CParamControlTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UParamInfo@CParamControlTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ParamInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WaveItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WString@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WString@SmartRef@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@ULyricInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@ULyricInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UTriggerInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@CGraphList@@QAEPAVCGraph@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??SetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetStream@CRiffParser@@QAEPAUIStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Load@CGraph@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CGraph@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??StampPMsg@CGraph@@UAGJPAU_DMUS_PMSG@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Clone@CGraph@@UAGJPAPAUIDirectMusicGraph@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Remove@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??RemoveTool@CGraph@@UAGJPAUIDirectMusicTool@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetTool@CGraph@@UAGJKPAPAUIDirectMusicTool@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetObjectInPath@CGraph@@QAEJKABU_GUID@@K0PAPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??InsertTool@CGraph@@UAGJPAUIDirectMusicTool@@PAKKJ@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetItem@CGraph@@QAEPAVCToolRef@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItem@AList@@QAEPAVAListItem@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCount@AList@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_U@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CToolRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@CToolRef@@QAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@CGraph@@QAEPAVCToolRef@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CToolRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@CGraph@@QAEPAVCToolRef@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmpty@AList@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CGraph@@6BIGraphClone@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CGraph@@6BIDirectMusicObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CGraph@@6BIPersistStream@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CGraph@@6BIDirectMusicGraph@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0AListItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	??0CInfo@@QAE@XZ				; CInfo::CInfo
PUBLIC	??0IDirectMusicGraph@@QAE@XZ			; IDirectMusicGraph::IDirectMusicGraph
PUBLIC	??0IGraphClone@@QAE@XZ				; IGraphClone::IGraphClone
PUBLIC	??0CGraph@@QAE@XZ				; CGraph::CGraph
PUBLIC	?QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z	; CGraph::QueryInterface
PUBLIC	?AddRef@CGraph@@UAGKXZ				; CGraph::AddRef
PUBLIC	?Release@CGraph@@UAGKXZ				; CGraph::Release
PUBLIC	?InsertTool@CGraph@@UAGJPAUIDirectMusicTool@@PAKKJ@Z ; CGraph::InsertTool
PUBLIC	?GetTool@CGraph@@UAGJKPAPAUIDirectMusicTool@@@Z	; CGraph::GetTool
PUBLIC	?RemoveTool@CGraph@@UAGJPAUIDirectMusicTool@@@Z	; CGraph::RemoveTool
PUBLIC	?StampPMsg@CGraph@@UAGJPAU_DMUS_PMSG@@@Z	; CGraph::StampPMsg
PUBLIC	?Clone@CGraph@@UAGJPAPAUIDirectMusicGraph@@@Z	; CGraph::Clone
PUBLIC	?GetClassID@CGraph@@UAGJPAU_GUID@@@Z		; CGraph::GetClassID
PUBLIC	?IsDirty@CGraph@@UAGJXZ				; CGraph::IsDirty
PUBLIC	?Load@CGraph@@UAGJPAUIStream@@@Z		; CGraph::Load
PUBLIC	?Save@CGraph@@UAGJPAUIStream@@H@Z		; CGraph::Save
PUBLIC	?GetSizeMax@CGraph@@UAGJPAT_ULARGE_INTEGER@@@Z	; CGraph::GetSizeMax
PUBLIC	?GetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z ; CGraph::GetDescriptor
PUBLIC	?SetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z ; CGraph::SetDescriptor
PUBLIC	?ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z ; CGraph::ParseDescriptor
PUBLIC	??_7CGraph@@6BIDirectMusicGraph@@@		; CGraph::`vftable'
PUBLIC	??_7CGraph@@6BIPersistStream@@@			; CGraph::`vftable'
PUBLIC	??_7CGraph@@6BIDirectMusicObject@@@		; CGraph::`vftable'
PUBLIC	??_7CGraph@@6BIGraphClone@@@			; CGraph::`vftable'
PUBLIC	?QueryInterface@CGraph@@W3AGJABU_GUID@@PAPAX@Z	; CGraph::QueryInterface
PUBLIC	?AddRef@CGraph@@W3AGKXZ				; CGraph::AddRef
PUBLIC	?Release@CGraph@@W3AGKXZ			; CGraph::Release
PUBLIC	?QueryInterface@CGraph@@W7AGJABU_GUID@@PAPAX@Z	; CGraph::QueryInterface
PUBLIC	?AddRef@CGraph@@W7AGKXZ				; CGraph::AddRef
PUBLIC	?Release@CGraph@@W7AGKXZ			; CGraph::Release
PUBLIC	?QueryInterface@CGraph@@WM@AGJABU_GUID@@PAPAX@Z	; CGraph::QueryInterface
PUBLIC	?AddRef@CGraph@@WM@AGKXZ			; CGraph::AddRef
PUBLIC	?Release@CGraph@@WM@AGKXZ			; CGraph::Release
PUBLIC	??0IPersistStream@@QAE@XZ			; IPersistStream::IPersistStream
PUBLIC	??0IDirectMusicObject@@QAE@XZ			; IDirectMusicObject::IDirectMusicObject
PUBLIC	??0AListItem@@QAE@XZ				; AListItem::AListItem
PUBLIC	??0AList@@QAE@XZ				; AList::AList
EXTRN	??0CMemTrack@@QAE@K@Z:NEAR			; CMemTrack::CMemTrack
EXTRN	__imp__RtlInitializeCriticalSection@4:NEAR
;	COMDAT ??_7CGraph@@6BIDirectMusicGraph@@@
; File c:\xbox\private\windows\directx\dmusic\dmime\dmgraph.cpp
CONST	SEGMENT
??_7CGraph@@6BIDirectMusicGraph@@@ DD FLAT:?QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z ; CGraph::`vftable'
	DD	FLAT:?AddRef@CGraph@@UAGKXZ
	DD	FLAT:?Release@CGraph@@UAGKXZ
	DD	FLAT:?StampPMsg@CGraph@@UAGJPAU_DMUS_PMSG@@@Z
	DD	FLAT:?InsertTool@CGraph@@UAGJPAUIDirectMusicTool@@PAKKJ@Z
	DD	FLAT:?GetTool@CGraph@@UAGJKPAPAUIDirectMusicTool@@@Z
	DD	FLAT:?RemoveTool@CGraph@@UAGJPAUIDirectMusicTool@@@Z
CONST	ENDS
;	COMDAT ??_7CGraph@@6BIPersistStream@@@
CONST	SEGMENT
??_7CGraph@@6BIPersistStream@@@ DD FLAT:?QueryInterface@CGraph@@W3AGJABU_GUID@@PAPAX@Z ; CGraph::`vftable'
	DD	FLAT:?AddRef@CGraph@@W3AGKXZ
	DD	FLAT:?Release@CGraph@@W3AGKXZ
	DD	FLAT:?GetClassID@CGraph@@UAGJPAU_GUID@@@Z
	DD	FLAT:?IsDirty@CGraph@@UAGJXZ
	DD	FLAT:?Load@CGraph@@UAGJPAUIStream@@@Z
	DD	FLAT:?Save@CGraph@@UAGJPAUIStream@@H@Z
	DD	FLAT:?GetSizeMax@CGraph@@UAGJPAT_ULARGE_INTEGER@@@Z
CONST	ENDS
;	COMDAT ??_7CGraph@@6BIDirectMusicObject@@@
CONST	SEGMENT
??_7CGraph@@6BIDirectMusicObject@@@ DD FLAT:?QueryInterface@CGraph@@W7AGJABU_GUID@@PAPAX@Z ; CGraph::`vftable'
	DD	FLAT:?AddRef@CGraph@@W7AGKXZ
	DD	FLAT:?Release@CGraph@@W7AGKXZ
	DD	FLAT:?GetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z
	DD	FLAT:?SetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z
	DD	FLAT:?ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z
CONST	ENDS
;	COMDAT ??_7CGraph@@6BIGraphClone@@@
CONST	SEGMENT
??_7CGraph@@6BIGraphClone@@@ DD FLAT:?QueryInterface@CGraph@@WM@AGJABU_GUID@@PAPAX@Z ; CGraph::`vftable'
	DD	FLAT:?AddRef@CGraph@@WM@AGKXZ
	DD	FLAT:?Release@CGraph@@WM@AGKXZ
	DD	FLAT:?Clone@CGraph@@UAGJPAPAUIDirectMusicGraph@@@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CGraph@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CGraph@@QAE@XZ PROC NEAR				; CGraph::CGraph, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IDirectMusicGraph@@QAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 04	 add	 ecx, 4
  00015	e8 00 00 00 00	 call	 ??0IPersistStream@@QAE@XZ
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??0IDirectMusicObject@@QAE@XZ
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0002b	e8 00 00 00 00	 call	 ??0IGraphClone@@QAE@XZ
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 c1 10	 add	 ecx, 16			; 00000010H
  00036	e8 00 00 00 00	 call	 ??0AList@@QAE@XZ	; AList::AList
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 14	 add	 ecx, 20			; 00000014H
  00041	e8 00 00 00 00	 call	 ??0AListItem@@QAE@XZ	; AListItem::AListItem
  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CGraph@@6BIDirectMusicGraph@@@
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CGraph@@6BIPersistStream@@@
  00059	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET FLAT:??_7CGraph@@6BIDirectMusicObject@@@
  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET FLAT:??_7CGraph@@6BIGraphClone@@@
  0006d	6a 0c		 push	 12			; 0000000cH
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	83 c1 34	 add	 ecx, 52			; 00000034H
  00075	e8 00 00 00 00	 call	 ??0CMemTrack@@QAE@K@Z	; CMemTrack::CMemTrack
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	83 c1 40	 add	 ecx, 64			; 00000040H
  00080	e8 00 00 00 00	 call	 ??0CInfo@@QAE@XZ	; CInfo::CInfo

; 8    : 	m_cRef = 1;

  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	c7 41 3c 01 00
	00 00		 mov	 DWORD PTR [ecx+60], 1

; 9    : 	INITIALIZE_CRITICAL_SECTION(&m_CrSec);

  0008f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00092	83 c2 18	 add	 edx, 24			; 00000018H
  00095	52		 push	 edx
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 10   :     IncrementDLLCount();
; 11   : }

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
??0CGraph@@QAE@XZ ENDP					; CGraph::CGraph
_TEXT	ENDS
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
; Function compile flags: /Odt
;	COMDAT ??0IDirectMusicGraph@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicGraph@@QAE@XZ PROC NEAR			; IDirectMusicGraph::IDirectMusicGraph, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicGraph@@QAE@XZ ENDP			; IDirectMusicGraph::IDirectMusicGraph
_TEXT	ENDS
PUBLIC	??0IPersist@@QAE@XZ				; IPersist::IPersist
; Function compile flags: /Odt
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersistStream@@QAE@XZ PROC NEAR			; IPersistStream::IPersistStream, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPersist@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersistStream@@QAE@XZ ENDP				; IPersistStream::IPersistStream
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IDirectMusicObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicObject@@QAE@XZ PROC NEAR			; IDirectMusicObject::IDirectMusicObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicObject@@QAE@XZ ENDP			; IDirectMusicObject::IDirectMusicObject
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IGraphClone@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IGraphClone@@QAE@XZ PROC NEAR			; IGraphClone::IGraphClone, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IGraphClone@@QAE@XZ ENDP				; IGraphClone::IGraphClone
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersist@@QAE@XZ PROC NEAR				; IPersist::IPersist, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersist@@QAE@XZ ENDP				; IPersist::IPersist
_TEXT	ENDS
PUBLIC	??1CGraph@@QAE@XZ				; CGraph::~CGraph
PUBLIC	?Shutdown@CGraph@@IAGJXZ			; CGraph::Shutdown
PUBLIC	?DeleteCriticalSection@@YGXPAX@Z		; DeleteCriticalSection
EXTRN	??1CMemTrack@@QAE@XZ:NEAR			; CMemTrack::~CMemTrack
; Function compile flags: /Odt
;	COMDAT ??1CGraph@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CGraph@@QAE@XZ PROC NEAR				; CGraph::~CGraph, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CGraph@@6BIDirectMusicGraph@@@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CGraph@@6BIPersistStream@@@
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET FLAT:??_7CGraph@@6BIDirectMusicObject@@@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET FLAT:??_7CGraph@@6BIGraphClone@@@

; 15   : 	Shutdown();  // shouldn't be needed, but doesn't hurt

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ?Shutdown@CGraph@@IAGJXZ ; CGraph::Shutdown

; 16   : 	DELETE_CRITICAL_SECTION(&m_CrSec);

  00037	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	83 c2 18	 add	 edx, 24			; 00000018H
  0003d	52		 push	 edx
  0003e	e8 00 00 00 00	 call	 ?DeleteCriticalSection@@YGXPAX@Z ; DeleteCriticalSection

; 17   : 	DecrementDLLCount();
; 18   : }

  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	83 c1 34	 add	 ecx, 52			; 00000034H
  00049	e8 00 00 00 00	 call	 ??1CMemTrack@@QAE@XZ	; CMemTrack::~CMemTrack
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??1CGraph@@QAE@XZ ENDP					; CGraph::~CGraph
_TEXT	ENDS
PUBLIC	??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ ; `string'
PUBLIC	??_C@_0EB@GKHJDOIB@Warning?3?5Request?5to?5query?5unknow@ ; `string'
PUBLIC	_==@8
EXTRN	?DebugTrace@@YAXHPADZZ:NEAR			; DebugTrace
EXTRN	_IID_CGraph:BYTE
EXTRN	_IID_IGraphClone:BYTE
EXTRN	_DebugBreak@0:NEAR
EXTRN	_IID_IUnknown:BYTE
EXTRN	_IID_IDirectMusicGraph:BYTE
EXTRN	_IID_IDirectMusicObject:BYTE
EXTRN	_IID_IPersistStream:BYTE
EXTRN	_IsBadReadPtr@8:NEAR
EXTRN	_IsBadWritePtr@8:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z@4QBDB DB 'C'
	DB	'Graph::QueryInterface', 00H			; `CGraph::QueryInterface'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT
??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ DB '%s: Invalid '
	DB	'pointer ppv', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT
??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ DB '%'
	DB	's: Invalid pointer (void*)&iid', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@GKHJDOIB@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT
??_C@_0EB@GKHJDOIB@Warning?3?5Request?5to?5query?5unknow@ DB 'Warning: Re'
	DB	'quest to query unknown interface on ToolGraph object', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv146 = -12
tv139 = -8
tv132 = -4
_this$ = 8
_iid$ = 12
_ppv$ = 16
?QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z PROC NEAR	; CGraph::QueryInterface, COMDAT

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 24   : 	V_INAME(CGraph::QueryInterface);
; 25   : 	V_PTRPTR_WRITE(ppv);

  00006	6a 04		 push	 4
  00008	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69440
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69440:

; 26   : 	V_REFGUID(iid);

  0002e	6a 10		 push	 16			; 00000010H
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00039	85 c0		 test	 eax, eax
  0003b	74 19		 je	 SHORT $L69444
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
  00047	6a ff		 push	 -1
  00049	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 _DebugBreak@0
$L69444:

; 27   : 
; 28   :     if (iid == IID_IUnknown || iid == IID_IDirectMusicGraph || iid == IID_IDirectMusicGraph8)

  00056	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IUnknown
  0005b	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  0005e	52		 push	 edx
  0005f	e8 00 00 00 00	 call	 _==@8
  00064	85 c0		 test	 eax, eax
  00066	75 24		 jne	 SHORT $L69447
  00068	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicGraph
  0006d	8b 45 0c	 mov	 eax, DWORD PTR _iid$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _==@8
  00076	85 c0		 test	 eax, eax
  00078	75 12		 jne	 SHORT $L69447
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicGraph
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _==@8
  00088	85 c0		 test	 eax, eax
  0008a	74 0d		 je	 SHORT $L69446
$L69447:

; 29   :     {
; 30   :         *ppv = static_cast<IDirectMusicGraph8*>(this);

  0008c	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  0008f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00092	89 02		 mov	 DWORD PTR [edx], eax

; 31   : 	} 
; 32   :     else if (iid == IID_CGraph)

  00094	e9 dd 00 00 00	 jmp	 $L69449
$L69446:
  00099	68 00 00 00 00	 push	 OFFSET FLAT:_IID_CGraph
  0009e	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 _==@8
  000a7	85 c0		 test	 eax, eax
  000a9	74 0d		 je	 SHORT $L69450

; 33   : 	{
; 34   :         *ppv = static_cast<CGraph*>(this);

  000ab	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  000ae	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	89 02		 mov	 DWORD PTR [edx], eax

; 35   : 	}  
; 36   :     else if (iid == IID_IDirectMusicObject)

  000b3	e9 be 00 00 00	 jmp	 $L69449
$L69450:
  000b8	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicObject
  000bd	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 _==@8
  000c6	85 c0		 test	 eax, eax
  000c8	74 25		 je	 SHORT $L69453

; 37   :     {
; 38   :         *ppv = static_cast<IDirectMusicObject*>(this);

  000ca	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  000ce	74 0b		 je	 SHORT $L70514
  000d0	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000d3	83 c2 08	 add	 edx, 8
  000d6	89 55 fc	 mov	 DWORD PTR tv132[ebp], edx
  000d9	eb 07		 jmp	 SHORT $L70515
$L70514:
  000db	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$L70515:
  000e2	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  000e5	8b 4d fc	 mov	 ecx, DWORD PTR tv132[ebp]
  000e8	89 08		 mov	 DWORD PTR [eax], ecx

; 39   :     }
; 40   : 	else if (iid == IID_IPersistStream)

  000ea	e9 87 00 00 00	 jmp	 $L69449
$L69453:
  000ef	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPersistStream
  000f4	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 _==@8
  000fd	85 c0		 test	 eax, eax
  000ff	74 22		 je	 SHORT $L69456

; 41   : 	{
; 42   :         *ppv = static_cast<IPersistStream*>(this);

  00101	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  00105	74 0b		 je	 SHORT $L70516
  00107	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	83 c0 04	 add	 eax, 4
  0010d	89 45 f8	 mov	 DWORD PTR tv139[ebp], eax
  00110	eb 07		 jmp	 SHORT $L70517
$L70516:
  00112	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$L70517:
  00119	8b 4d 10	 mov	 ecx, DWORD PTR _ppv$[ebp]
  0011c	8b 55 f8	 mov	 edx, DWORD PTR tv139[ebp]
  0011f	89 11		 mov	 DWORD PTR [ecx], edx

; 43   : 	}
; 44   :     else if (iid == IID_IGraphClone)

  00121	eb 53		 jmp	 SHORT $L69449
$L69456:
  00123	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IGraphClone
  00128	8b 45 0c	 mov	 eax, DWORD PTR _iid$[ebp]
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 _==@8
  00131	85 c0		 test	 eax, eax
  00133	74 22		 je	 SHORT $L69459

; 45   : 	{
; 46   :         *ppv = static_cast<IGraphClone*>(this);

  00135	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  00139	74 0b		 je	 SHORT $L70518
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0013e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00141	89 4d f4	 mov	 DWORD PTR tv146[ebp], ecx
  00144	eb 07		 jmp	 SHORT $L70519
$L70518:
  00146	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$L70519:
  0014d	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  00150	8b 45 f4	 mov	 eax, DWORD PTR tv146[ebp]
  00153	89 02		 mov	 DWORD PTR [edx], eax

; 47   : 	}
; 48   :     else

  00155	eb 1f		 jmp	 SHORT $L69449
$L69459:

; 49   :     {
; 50   :         *ppv = NULL;

  00157	8b 4d 10	 mov	 ecx, DWORD PTR _ppv$[ebp]
  0015a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 51   :         Trace(4,"Warning: Request to query unknown interface on ToolGraph object\n");

  00160	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@GKHJDOIB@Warning?3?5Request?5to?5query?5unknow@
  00165	6a 04		 push	 4
  00167	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0016c	83 c4 08	 add	 esp, 8

; 52   :         return E_NOINTERFACE;

  0016f	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
  00174	eb 0e		 jmp	 SHORT $L69436
$L69449:

; 53   :     }
; 54   : 
; 55   :     reinterpret_cast<IUnknown*>(this)->AddRef();

  00176	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00179	8b 02		 mov	 eax, DWORD PTR [edx]
  0017b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0017e	51		 push	 ecx
  0017f	ff 50 04	 call	 DWORD PTR [eax+4]

; 56   :     return S_OK;

  00182	33 c0		 xor	 eax, eax
$L69436:

; 57   : }

  00184	8b e5		 mov	 esp, ebp
  00186	5d		 pop	 ebp
  00187	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z ENDP	; CGraph::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\guiddef.h
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8
_guidOther$ = 12
_==@8	PROC NEAR					; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  :     return IsEqualGUID(guidOne,guidOther);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IsEqualGUID@8

; 190  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:NEAR
; Function compile flags: /Odt
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8
_rguid2$ = 12
_IsEqualGUID@8 PROC NEAR				; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _memcmp
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 157  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
EXTRN	__InterlockedIncrement@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\dmgraph.cpp
;	COMDAT ?AddRef@CGraph@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@CGraph@@UAGKXZ PROC NEAR			; CGraph::AddRef, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   :     return InterlockedIncrement(&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 3c	 add	 eax, 60			; 0000003cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 67   : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@CGraph@@UAGKXZ ENDP				; CGraph::AddRef
_TEXT	ENDS
PUBLIC	??_GCGraph@@QAEPAXI@Z				; CGraph::`scalar deleting destructor'
EXTRN	__InterlockedDecrement@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Release@CGraph@@UAGKXZ
_TEXT	SEGMENT
tv72 = -12
$T70533 = -8
$T70532 = -4
_this$ = 8
?Release@CGraph@@UAGKXZ PROC NEAR			; CGraph::Release, COMDAT

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 76   :     if (!InterlockedDecrement(&m_cRef))

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 3c	 add	 eax, 60			; 0000003cH
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	85 c0		 test	 eax, eax
  00014	75 2c		 jne	 SHORT $L69472

; 77   :     {
; 78   :         delete this;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	89 4d f8	 mov	 DWORD PTR $T70533[ebp], ecx
  0001c	8b 55 f8	 mov	 edx, DWORD PTR $T70533[ebp]
  0001f	89 55 fc	 mov	 DWORD PTR $T70532[ebp], edx
  00022	83 7d fc 00	 cmp	 DWORD PTR $T70532[ebp], 0
  00026	74 0f		 je	 SHORT $L70534
  00028	6a 01		 push	 1
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR $T70532[ebp]
  0002d	e8 00 00 00 00	 call	 ??_GCGraph@@QAEPAXI@Z
  00032	89 45 f4	 mov	 DWORD PTR tv72[ebp], eax
  00035	eb 07		 jmp	 SHORT $L70535
$L70534:
  00037	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L70535:

; 79   :         return 0;

  0003e	33 c0		 xor	 eax, eax
  00040	eb 06		 jmp	 SHORT $L69471
$L69472:

; 80   :     }
; 81   : 
; 82   :     return m_cRef;

  00042	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
$L69471:

; 83   : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?Release@CGraph@@UAGKXZ ENDP				; CGraph::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCGraph@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCGraph@@QAEPAXI@Z PROC NEAR				; CGraph::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CGraph@@QAE@XZ	; CGraph::~CGraph
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69478
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69478:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCGraph@@QAEPAXI@Z ENDP				; CGraph::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_GCToolRef@@QAEPAXI@Z				; CToolRef::`scalar deleting destructor'
PUBLIC	?RemoveHead@CGraph@@QAEPAVCToolRef@@XZ		; CGraph::RemoveHead
PUBLIC	?IsEmpty@AList@@QBEHXZ				; AList::IsEmpty
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Shutdown@CGraph@@IAGJXZ
_TEXT	SEGMENT
tv77 = -20
$T70543 = -16
$T70542 = -12
_pObj$ = -8
_hr$ = -4
_this$ = 8
?Shutdown@CGraph@@IAGJXZ PROC NEAR			; CGraph::Shutdown, COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 98   : 	// release all Tools
; 99   : 	CToolRef*	pObj;
; 100  : 	HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 101  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 c0 18	 add	 eax, 24			; 00000018H
  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 102  : 	if( IsEmpty() )

  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 10	 add	 ecx, 16			; 00000010H
  00020	e8 00 00 00 00	 call	 ?IsEmpty@AList@@QBEHXZ	; AList::IsEmpty
  00025	85 c0		 test	 eax, eax
  00027	74 09		 je	 SHORT $L69489

; 103  : 	{
; 104  : 		hr = S_FALSE;

  00029	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 1

; 105  : 	}
; 106  :     else

  00030	eb 3b		 jmp	 SHORT $L69487
$L69489:

; 107  :     {
; 108  : 	    while( pObj = RemoveHead() )

  00032	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?RemoveHead@CGraph@@QAEPAVCToolRef@@XZ ; CGraph::RemoveHead
  0003a	89 45 f8	 mov	 DWORD PTR _pObj$[ebp], eax
  0003d	83 7d f8 00	 cmp	 DWORD PTR _pObj$[ebp], 0
  00041	74 2a		 je	 SHORT $L69487

; 109  : 	    {
; 110  :             delete pObj;

  00043	8b 4d f8	 mov	 ecx, DWORD PTR _pObj$[ebp]
  00046	89 4d f0	 mov	 DWORD PTR $T70543[ebp], ecx
  00049	8b 55 f0	 mov	 edx, DWORD PTR $T70543[ebp]
  0004c	89 55 f4	 mov	 DWORD PTR $T70542[ebp], edx
  0004f	83 7d f4 00	 cmp	 DWORD PTR $T70542[ebp], 0
  00053	74 0f		 je	 SHORT $L70544
  00055	6a 01		 push	 1
  00057	8b 4d f4	 mov	 ecx, DWORD PTR $T70542[ebp]
  0005a	e8 00 00 00 00	 call	 ??_GCToolRef@@QAEPAXI@Z
  0005f	89 45 ec	 mov	 DWORD PTR tv77[ebp], eax
  00062	eb 07		 jmp	 SHORT $L70545
$L70544:
  00064	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$L70545:

; 111  : 	    }

  0006b	eb c5		 jmp	 SHORT $L69489
$L69487:

; 112  :     }
; 113  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  0006d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00070	83 c0 18	 add	 eax, 24			; 00000018H
  00073	50		 push	 eax
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 114  : 	return hr;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 115  : }

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
?Shutdown@CGraph@@IAGJXZ ENDP				; CGraph::Shutdown
_TEXT	ENDS
PUBLIC	??1CToolRef@@QAE@XZ				; CToolRef::~CToolRef
; Function compile flags: /Odt
;	COMDAT ??_GCToolRef@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCToolRef@@QAEPAXI@Z PROC NEAR			; CToolRef::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CToolRef@@QAE@XZ	; CToolRef::~CToolRef
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69496
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69496:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCToolRef@@QAEPAXI@Z ENDP				; CToolRef::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CToolRef@@QAE@XZ				; CToolRef::CToolRef
PUBLIC	?GetNext@CToolRef@@QAEPAV1@XZ			; CToolRef::GetNext
PUBLIC	?GetHead@CGraph@@QAEPAVCToolRef@@XZ		; CGraph::GetHead
PUBLIC	?GetItem@CGraph@@QAEPAVCToolRef@@J@Z		; CGraph::GetItem
PUBLIC	?InsertTool@CGraph@@IAEJPAUIDirectMusicTool@@PAKKJPAU_GUID@@@Z ; CGraph::InsertTool
PUBLIC	??_C@_0DF@JOBHFIBI@Error?3?5Multiple?5install?5of?5the?5s@ ; `string'
PUBLIC	?GetCount@AList@@QBEJXZ				; AList::GetCount
EXTRN	_IID_IDirectMusicTool8:BYTE
EXTRN	_memcpy:NEAR
EXTRN	?InsertBefore@AList@@QAEXPAVAListItem@@0@Z:NEAR	; AList::InsertBefore
EXTRN	?AddTail@AList@@QAEXPAVAListItem@@@Z:NEAR	; AList::AddTail
;	COMDAT ??_C@_0DF@JOBHFIBI@Error?3?5Multiple?5install?5of?5the?5s@
CONST	SEGMENT
??_C@_0DF@JOBHFIBI@Error?3?5Multiple?5install?5of?5the?5s@ DB 'Error: Mul'
	DB	'tiple install of the same tool in a graph', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?InsertTool@CGraph@@IAEJPAUIDirectMusicTool@@PAKKJPAU_GUID@@@Z
_TEXT	SEGMENT
tv207 = -80
tv187 = -76
tv82 = -72
_this$ = -68
$T70563 = -64
$T70562 = -60
$T70561 = -56
$T70558 = -52
$T70557 = -48
$T70556 = -44
$T70555 = -40
$T70552 = -36
_hr$69536 = -32
_pPersist$69525 = -28
_pdwArray$69518 = -24
_pTool8$69519 = -20
_dwTemp$69517 = -16
_pNext$69555 = -12
_pToolRef$ = -8
_hr$ = -4
_pTool$ = 8
_pdwPChannels$ = 12
_cPChannels$ = 16
_lIndex$ = 20
_pguidClassID$ = 24
?InsertTool@CGraph@@IAEJPAUIDirectMusicTool@@PAKKJPAU_GUID@@@Z PROC NEAR ; CGraph::InsertTool, COMDAT
; _this$ = ecx

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 124  : 	HRESULT hr = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 125  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  00010	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 18	 add	 eax, 24			; 00000018H
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 126  : 
; 127  : 	CToolRef*	pToolRef;
; 128  : 	// make sure that this Tool instance isn't already in the Graph
; 129  : 	for( pToolRef = GetHead(); pToolRef; pToolRef = pToolRef->GetNext() )

  0001d	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?GetHead@CGraph@@QAEPAVCToolRef@@XZ ; CGraph::GetHead
  00025	89 45 f8	 mov	 DWORD PTR _pToolRef$[ebp], eax
  00028	eb 0b		 jmp	 SHORT $L69508
$L69509:
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _pToolRef$[ebp]
  0002d	e8 00 00 00 00	 call	 ?GetNext@CToolRef@@QAEPAV1@XZ ; CToolRef::GetNext
  00032	89 45 f8	 mov	 DWORD PTR _pToolRef$[ebp], eax
$L69508:
  00035	83 7d f8 00	 cmp	 DWORD PTR _pToolRef$[ebp], 0
  00039	74 33		 je	 SHORT $L69510

; 130  : 	{
; 131  : 		if( pTool == pToolRef->m_pTool )

  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _pToolRef$[ebp]
  0003e	8b 55 08	 mov	 edx, DWORD PTR _pTool$[ebp]
  00041	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  00044	75 26		 jne	 SHORT $L69511

; 132  : 		{
; 133  : 			LEAVE_CRITICAL_SECTION(&m_CrSec);

  00046	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	83 c0 18	 add	 eax, 24			; 00000018H
  0004c	50		 push	 eax
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 134  :             Trace(1,"Error: Multiple install of the same tool in a graph\n");

  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@JOBHFIBI@Error?3?5Multiple?5install?5of?5the?5s@
  00058	6a 01		 push	 1
  0005a	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0005f	83 c4 08	 add	 esp, 8

; 135  : 	        return DMUS_E_ALREADY_EXISTS;

  00062	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00067	e9 f8 02 00 00	 jmp	 $L69504
$L69511:

; 136  : 		}
; 137  : 	}

  0006c	eb bc		 jmp	 SHORT $L69509
$L69510:

; 138  : 	// insert this Tool instance into the Graph
; 139  : 	pToolRef = new CToolRef;

  0006e	6a 30		 push	 48			; 00000030H
  00070	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00075	83 c4 04	 add	 esp, 4
  00078	89 45 dc	 mov	 DWORD PTR $T70552[ebp], eax
  0007b	83 7d dc 00	 cmp	 DWORD PTR $T70552[ebp], 0
  0007f	74 0d		 je	 SHORT $L70553
  00081	8b 4d dc	 mov	 ecx, DWORD PTR $T70552[ebp]
  00084	e8 00 00 00 00	 call	 ??0CToolRef@@QAE@XZ	; CToolRef::CToolRef
  00089	89 45 b8	 mov	 DWORD PTR tv82[ebp], eax
  0008c	eb 07		 jmp	 SHORT $L70554
$L70553:
  0008e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$L70554:
  00095	8b 4d b8	 mov	 ecx, DWORD PTR tv82[ebp]
  00098	89 4d f8	 mov	 DWORD PTR _pToolRef$[ebp], ecx

; 140  : 	if( pToolRef )

  0009b	83 7d f8 00	 cmp	 DWORD PTR _pToolRef$[ebp], 0
  0009f	0f 84 a8 02 00
	00		 je	 $L69516

; 141  : 	{
; 142  : 		DWORD		dwTemp;
; 143  : 		DWORD*		pdwArray = NULL;

  000a5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pdwArray$69518[ebp], 0

; 144  : 
; 145  : 		pToolRef->m_pTool = pTool;

  000ac	8b 55 f8	 mov	 edx, DWORD PTR _pToolRef$[ebp]
  000af	8b 45 08	 mov	 eax, DWORD PTR _pTool$[ebp]
  000b2	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 146  : 		pTool->AddRef();

  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _pTool$[ebp]
  000b8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ba	8b 45 08	 mov	 eax, DWORD PTR _pTool$[ebp]
  000bd	50		 push	 eax
  000be	ff 52 04	 call	 DWORD PTR [edx+4]

; 147  : 		pTool->Init(this);

  000c1	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	51		 push	 ecx
  000c5	8b 55 08	 mov	 edx, DWORD PTR _pTool$[ebp]
  000c8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _pTool$[ebp]
  000cd	51		 push	 ecx
  000ce	ff 50 0c	 call	 DWORD PTR [eax+12]

; 148  : 		dwTemp = 0;

  000d1	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwTemp$69517[ebp], 0

; 149  :         IDirectMusicTool8 *pTool8;
; 150  :         if (SUCCEEDED(pTool->QueryInterface(IID_IDirectMusicTool8,(void **) &pTool8)))

  000d8	8d 55 ec	 lea	 edx, DWORD PTR _pTool8$69519[ebp]
  000db	52		 push	 edx
  000dc	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTool8
  000e1	8b 45 08	 mov	 eax, DWORD PTR _pTool$[ebp]
  000e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e6	8b 55 08	 mov	 edx, DWORD PTR _pTool$[ebp]
  000e9	52		 push	 edx
  000ea	ff 11		 call	 DWORD PTR [ecx]
  000ec	85 c0		 test	 eax, eax
  000ee	7c 16		 jl	 SHORT $L69522

; 151  :         {
; 152  :             pToolRef->m_fSupportsClone = TRUE;

  000f0	8b 45 f8	 mov	 eax, DWORD PTR _pToolRef$[ebp]
  000f3	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [eax+20], 1

; 153  :             pTool8->Release();

  000fa	8b 4d ec	 mov	 ecx, DWORD PTR _pTool8$69519[ebp]
  000fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ff	8b 45 ec	 mov	 eax, DWORD PTR _pTool8$69519[ebp]
  00102	50		 push	 eax
  00103	ff 52 08	 call	 DWORD PTR [edx+8]
$L69522:

; 154  :         }
; 155  :         if (pguidClassID)

  00106	83 7d 18 00	 cmp	 DWORD PTR _pguidClassID$[ebp], 0
  0010a	74 21		 je	 SHORT $L69523

; 156  :         {
; 157  :             pToolRef->m_guidClassID = *pguidClassID;

  0010c	8b 4d 18	 mov	 ecx, DWORD PTR _pguidClassID$[ebp]
  0010f	8b 55 f8	 mov	 edx, DWORD PTR _pToolRef$[ebp]
  00112	83 c2 04	 add	 edx, 4
  00115	8b 01		 mov	 eax, DWORD PTR [ecx]
  00117	89 02		 mov	 DWORD PTR [edx], eax
  00119	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0011c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0011f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00122	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00125	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00128	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 158  :         }
; 159  :         else

  0012b	eb 37		 jmp	 SHORT $L69524
$L69523:

; 160  :         {
; 161  :             IPersistStream *pPersist;
; 162  :             if (SUCCEEDED(pTool->QueryInterface(IID_IPersistStream,(void **) &pPersist)))

  0012d	8d 55 e4	 lea	 edx, DWORD PTR _pPersist$69525[ebp]
  00130	52		 push	 edx
  00131	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPersistStream
  00136	8b 45 08	 mov	 eax, DWORD PTR _pTool$[ebp]
  00139	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013b	8b 55 08	 mov	 edx, DWORD PTR _pTool$[ebp]
  0013e	52		 push	 edx
  0013f	ff 11		 call	 DWORD PTR [ecx]
  00141	85 c0		 test	 eax, eax
  00143	7c 1f		 jl	 SHORT $L69524

; 163  :             {
; 164  :                 pPersist->GetClassID(&pToolRef->m_guidClassID);

  00145	8b 45 f8	 mov	 eax, DWORD PTR _pToolRef$[ebp]
  00148	83 c0 04	 add	 eax, 4
  0014b	50		 push	 eax
  0014c	8b 4d e4	 mov	 ecx, DWORD PTR _pPersist$69525[ebp]
  0014f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00151	8b 45 e4	 mov	 eax, DWORD PTR _pPersist$69525[ebp]
  00154	50		 push	 eax
  00155	ff 52 0c	 call	 DWORD PTR [edx+12]

; 165  :                 pPersist->Release();

  00158	8b 4d e4	 mov	 ecx, DWORD PTR _pPersist$69525[ebp]
  0015b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0015d	8b 45 e4	 mov	 eax, DWORD PTR _pPersist$69525[ebp]
  00160	50		 push	 eax
  00161	ff 52 08	 call	 DWORD PTR [edx+8]
$L69524:

; 166  :             }
; 167  :         }
; 168  : 		pTool->GetMsgDeliveryType(&dwTemp);

  00164	8d 4d f0	 lea	 ecx, DWORD PTR _dwTemp$69517[ebp]
  00167	51		 push	 ecx
  00168	8b 55 08	 mov	 edx, DWORD PTR _pTool$[ebp]
  0016b	8b 02		 mov	 eax, DWORD PTR [edx]
  0016d	8b 4d 08	 mov	 ecx, DWORD PTR _pTool$[ebp]
  00170	51		 push	 ecx
  00171	ff 50 10	 call	 DWORD PTR [eax+16]

; 169  : 		if( (dwTemp != DMUS_PMSGF_TOOL_IMMEDIATE) && (dwTemp != DMUS_PMSGF_TOOL_QUEUE) && (dwTemp != DMUS_PMSGF_TOOL_ATTIME) )

  00174	83 7d f0 04	 cmp	 DWORD PTR _dwTemp$69517[ebp], 4
  00178	74 13		 je	 SHORT $L69529
  0017a	83 7d f0 08	 cmp	 DWORD PTR _dwTemp$69517[ebp], 8
  0017e	74 0d		 je	 SHORT $L69529
  00180	83 7d f0 10	 cmp	 DWORD PTR _dwTemp$69517[ebp], 16 ; 00000010H
  00184	74 07		 je	 SHORT $L69529

; 170  : 		{
; 171  : 			dwTemp = DMUS_PMSGF_TOOL_IMMEDIATE;

  00186	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR _dwTemp$69517[ebp], 4
$L69529:

; 172  : 		}
; 173  : 		pToolRef->m_dwQueue = dwTemp;

  0018d	8b 55 f8	 mov	 edx, DWORD PTR _pToolRef$[ebp]
  00190	8b 45 f0	 mov	 eax, DWORD PTR _dwTemp$69517[ebp]
  00193	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 174  : 		if( FAILED( pTool->GetMediaTypeArraySize(&dwTemp)))

  00196	8d 4d f0	 lea	 ecx, DWORD PTR _dwTemp$69517[ebp]
  00199	51		 push	 ecx
  0019a	8b 55 08	 mov	 edx, DWORD PTR _pTool$[ebp]
  0019d	8b 02		 mov	 eax, DWORD PTR [edx]
  0019f	8b 4d 08	 mov	 ecx, DWORD PTR _pTool$[ebp]
  001a2	51		 push	 ecx
  001a3	ff 50 14	 call	 DWORD PTR [eax+20]
  001a6	85 c0		 test	 eax, eax
  001a8	7d 07		 jge	 SHORT $L69531

; 175  : 		{
; 176  : 			dwTemp = 0;

  001aa	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwTemp$69517[ebp], 0
$L69531:

; 177  : 		}
; 178  : 		pToolRef->m_dwMTArraySize = dwTemp;

  001b1	8b 55 f8	 mov	 edx, DWORD PTR _pToolRef$[ebp]
  001b4	8b 45 f0	 mov	 eax, DWORD PTR _dwTemp$69517[ebp]
  001b7	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 179  : 		if( dwTemp )

  001ba	83 7d f0 00	 cmp	 DWORD PTR _dwTemp$69517[ebp], 0
  001be	0f 84 a6 00 00
	00		 je	 $L69532

; 180  : 		{
; 181  : 			pdwArray = new DWORD[dwTemp];

  001c4	8b 4d f0	 mov	 ecx, DWORD PTR _dwTemp$69517[ebp]
  001c7	c1 e1 02	 shl	 ecx, 2
  001ca	51		 push	 ecx
  001cb	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  001d0	83 c4 04	 add	 esp, 4
  001d3	89 45 d8	 mov	 DWORD PTR $T70555[ebp], eax
  001d6	8b 55 d8	 mov	 edx, DWORD PTR $T70555[ebp]
  001d9	89 55 e8	 mov	 DWORD PTR _pdwArray$69518[ebp], edx

; 182  : 			if( pdwArray )

  001dc	83 7d e8 00	 cmp	 DWORD PTR _pdwArray$69518[ebp], 0
  001e0	74 49		 je	 SHORT $L69535

; 183  : 			{
; 184  : 				HRESULT hr = pTool->GetMediaTypes( &pdwArray, dwTemp );

  001e2	8b 45 f0	 mov	 eax, DWORD PTR _dwTemp$69517[ebp]
  001e5	50		 push	 eax
  001e6	8d 4d e8	 lea	 ecx, DWORD PTR _pdwArray$69518[ebp]
  001e9	51		 push	 ecx
  001ea	8b 55 08	 mov	 edx, DWORD PTR _pTool$[ebp]
  001ed	8b 02		 mov	 eax, DWORD PTR [edx]
  001ef	8b 4d 08	 mov	 ecx, DWORD PTR _pTool$[ebp]
  001f2	51		 push	 ecx
  001f3	ff 50 18	 call	 DWORD PTR [eax+24]
  001f6	89 45 e0	 mov	 DWORD PTR _hr$69536[ebp], eax

; 185  : 				if( hr == E_NOTIMPL )

  001f9	81 7d e0 01 40
	00 80		 cmp	 DWORD PTR _hr$69536[ebp], -2147467263 ; 80004001H
  00200	75 1e		 jne	 SHORT $L69538

; 186  : 				{
; 187  : 					delete [] pdwArray;

  00202	8b 55 e8	 mov	 edx, DWORD PTR _pdwArray$69518[ebp]
  00205	89 55 d4	 mov	 DWORD PTR $T70556[ebp], edx
  00208	8b 45 d4	 mov	 eax, DWORD PTR $T70556[ebp]
  0020b	50		 push	 eax
  0020c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00211	83 c4 04	 add	 esp, 4

; 188  : 					pToolRef->m_dwMTArraySize = 0;

  00214	8b 4d f8	 mov	 ecx, DWORD PTR _pToolRef$[ebp]
  00217	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 189  : 				}
; 190  : 				else

  0021e	eb 09		 jmp	 SHORT $L69540
$L69538:

; 191  : 				{
; 192  : 					pToolRef->m_pdwMediaTypes = pdwArray;

  00220	8b 55 f8	 mov	 edx, DWORD PTR _pToolRef$[ebp]
  00223	8b 45 e8	 mov	 eax, DWORD PTR _pdwArray$69518[ebp]
  00226	89 42 24	 mov	 DWORD PTR [edx+36], eax
$L69540:

; 193  : 				}
; 194  : 			}
; 195  : 			else

  00229	eb 3f		 jmp	 SHORT $L69532
$L69535:

; 196  : 			{
; 197  : 				delete pToolRef;

  0022b	8b 4d f8	 mov	 ecx, DWORD PTR _pToolRef$[ebp]
  0022e	89 4d cc	 mov	 DWORD PTR $T70558[ebp], ecx
  00231	8b 55 cc	 mov	 edx, DWORD PTR $T70558[ebp]
  00234	89 55 d0	 mov	 DWORD PTR $T70557[ebp], edx
  00237	83 7d d0 00	 cmp	 DWORD PTR $T70557[ebp], 0
  0023b	74 0f		 je	 SHORT $L70559
  0023d	6a 01		 push	 1
  0023f	8b 4d d0	 mov	 ecx, DWORD PTR $T70557[ebp]
  00242	e8 00 00 00 00	 call	 ??_GCToolRef@@QAEPAXI@Z
  00247	89 45 b4	 mov	 DWORD PTR tv187[ebp], eax
  0024a	eb 07		 jmp	 SHORT $L70560
$L70559:
  0024c	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv187[ebp], 0
$L70560:

; 198  : 				LEAVE_CRITICAL_SECTION(&m_CrSec);

  00253	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00256	83 c0 18	 add	 eax, 24			; 00000018H
  00259	50		 push	 eax
  0025a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 199  :                 return E_OUTOFMEMORY;

  00260	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00265	e9 fa 00 00 00	 jmp	 $L69504
$L69532:

; 200  : 			}
; 201  : 		}
; 202  : 		if( pdwPChannels )

  0026a	83 7d 0c 00	 cmp	 DWORD PTR _pdwPChannels$[ebp], 0
  0026e	0f 84 85 00 00
	00		 je	 $L69545

; 203  : 		{
; 204  : 			pToolRef->m_pdwPChannels = new DWORD[cPChannels];

  00274	8b 4d 10	 mov	 ecx, DWORD PTR _cPChannels$[ebp]
  00277	c1 e1 02	 shl	 ecx, 2
  0027a	51		 push	 ecx
  0027b	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00280	83 c4 04	 add	 esp, 4
  00283	89 45 c8	 mov	 DWORD PTR $T70561[ebp], eax
  00286	8b 55 f8	 mov	 edx, DWORD PTR _pToolRef$[ebp]
  00289	8b 45 c8	 mov	 eax, DWORD PTR $T70561[ebp]
  0028c	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 205  : 			if( pToolRef->m_pdwPChannels )

  0028f	8b 4d f8	 mov	 ecx, DWORD PTR _pToolRef$[ebp]
  00292	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00296	74 25		 je	 SHORT $L69548

; 206  : 			{
; 207  : 				memcpy( pToolRef->m_pdwPChannels, pdwPChannels, sizeof(DWORD) * cPChannels );

  00298	8b 55 10	 mov	 edx, DWORD PTR _cPChannels$[ebp]
  0029b	c1 e2 02	 shl	 edx, 2
  0029e	52		 push	 edx
  0029f	8b 45 0c	 mov	 eax, DWORD PTR _pdwPChannels$[ebp]
  002a2	50		 push	 eax
  002a3	8b 4d f8	 mov	 ecx, DWORD PTR _pToolRef$[ebp]
  002a6	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  002a9	52		 push	 edx
  002aa	e8 00 00 00 00	 call	 _memcpy
  002af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 208  :                 pToolRef->m_dwPCArraySize = cPChannels;

  002b2	8b 45 f8	 mov	 eax, DWORD PTR _pToolRef$[ebp]
  002b5	8b 4d 10	 mov	 ecx, DWORD PTR _cPChannels$[ebp]
  002b8	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 209  : 			}
; 210  : 			else

  002bb	eb 3c		 jmp	 SHORT $L69545
$L69548:

; 211  : 			{
; 212  : 				delete pToolRef;

  002bd	8b 55 f8	 mov	 edx, DWORD PTR _pToolRef$[ebp]
  002c0	89 55 c0	 mov	 DWORD PTR $T70563[ebp], edx
  002c3	8b 45 c0	 mov	 eax, DWORD PTR $T70563[ebp]
  002c6	89 45 c4	 mov	 DWORD PTR $T70562[ebp], eax
  002c9	83 7d c4 00	 cmp	 DWORD PTR $T70562[ebp], 0
  002cd	74 0f		 je	 SHORT $L70564
  002cf	6a 01		 push	 1
  002d1	8b 4d c4	 mov	 ecx, DWORD PTR $T70562[ebp]
  002d4	e8 00 00 00 00	 call	 ??_GCToolRef@@QAEPAXI@Z
  002d9	89 45 b0	 mov	 DWORD PTR tv207[ebp], eax
  002dc	eb 07		 jmp	 SHORT $L70565
$L70564:
  002de	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv207[ebp], 0
$L70565:

; 213  : 				LEAVE_CRITICAL_SECTION(&m_CrSec);

  002e5	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  002e8	83 c1 18	 add	 ecx, 24			; 00000018H
  002eb	51		 push	 ecx
  002ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 214  :                 return E_OUTOFMEMORY;

  002f2	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  002f7	eb 6b		 jmp	 SHORT $L69504
$L69545:

; 215  : 			}
; 216  : 		}
; 217  : 
; 218  :         if (lIndex < 0)

  002f9	83 7d 14 00	 cmp	 DWORD PTR _lIndex$[ebp], 0
  002fd	7d 13		 jge	 SHORT $L69554

; 219  :         {
; 220  :             lIndex += AList::GetCount();       // Make index be offset from end.

  002ff	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00302	83 c1 10	 add	 ecx, 16			; 00000010H
  00305	e8 00 00 00 00	 call	 ?GetCount@AList@@QBEJXZ	; AList::GetCount
  0030a	8b 55 14	 mov	 edx, DWORD PTR _lIndex$[ebp]
  0030d	03 d0		 add	 edx, eax
  0030f	89 55 14	 mov	 DWORD PTR _lIndex$[ebp], edx
$L69554:

; 221  :         }
; 222  :         CToolRef *pNext = GetItem(lIndex);

  00312	8b 45 14	 mov	 eax, DWORD PTR _lIndex$[ebp]
  00315	50		 push	 eax
  00316	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00319	e8 00 00 00 00	 call	 ?GetItem@CGraph@@QAEPAVCToolRef@@J@Z ; CGraph::GetItem
  0031e	89 45 f4	 mov	 DWORD PTR _pNext$69555[ebp], eax

; 223  :         if (pNext)

  00321	83 7d f4 00	 cmp	 DWORD PTR _pNext$69555[ebp], 0
  00325	74 15		 je	 SHORT $L69556

; 224  :         {
; 225  :             InsertBefore(pNext,pToolRef);

  00327	8b 4d f8	 mov	 ecx, DWORD PTR _pToolRef$[ebp]
  0032a	51		 push	 ecx
  0032b	8b 55 f4	 mov	 edx, DWORD PTR _pNext$69555[ebp]
  0032e	52		 push	 edx
  0032f	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00332	83 c1 10	 add	 ecx, 16			; 00000010H
  00335	e8 00 00 00 00	 call	 ?InsertBefore@AList@@QAEXPAVAListItem@@0@Z ; AList::InsertBefore

; 226  :         }
; 227  :         else

  0033a	eb 0f		 jmp	 SHORT $L69557
$L69556:

; 228  :         {
; 229  :             AList::AddTail(pToolRef);

  0033c	8b 45 f8	 mov	 eax, DWORD PTR _pToolRef$[ebp]
  0033f	50		 push	 eax
  00340	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00343	83 c1 10	 add	 ecx, 16			; 00000010H
  00346	e8 00 00 00 00	 call	 ?AddTail@AList@@QAEXPAVAListItem@@@Z ; AList::AddTail
$L69557:

; 230  :         }
; 231  : 	}
; 232  : 	else

  0034b	eb 07		 jmp	 SHORT $L69558
$L69516:

; 233  : 	{
; 234  : 		hr = E_OUTOFMEMORY;

  0034d	c7 45 fc 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$L69558:

; 235  : 	}
; 236  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  00354	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00357	83 c1 18	 add	 ecx, 24			; 00000018H
  0035a	51		 push	 ecx
  0035b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 237  : 	return hr;

  00361	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
$L69504:

; 238  : }

  00364	8b e5		 mov	 esp, ebp
  00366	5d		 pop	 ebp
  00367	c2 14 00	 ret	 20			; 00000014H
?InsertTool@CGraph@@IAEJPAUIDirectMusicTool@@PAKKJPAU_GUID@@@Z ENDP ; CGraph::InsertTool
_TEXT	ENDS
PUBLIC	??_C@_0BL@JNPCPOMI@?$CFs?3?5Invalid?5pointer?5pTool?6?$AA@ ; `string'
PUBLIC	??_C@_0CC@KOMENMPL@?$CFs?3?5Invalid?5pointer?5pdwPChannels@ ; `string'
EXTRN	_IsBadCodePtr@4:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??InsertTool@CGraph@@UAGJPAUIDirectMusicTool@@PAKKJ@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??InsertTool@CGraph@@UAGJPAUIDirectMusicTool@@PAKKJ@Z@4QBDB DB 'I'
	DB	'DirectMusicGraph::InsertTool', 00H		; `CGraph::InsertTool'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BL@JNPCPOMI@?$CFs?3?5Invalid?5pointer?5pTool?6?$AA@
CONST	SEGMENT
??_C@_0BL@JNPCPOMI@?$CFs?3?5Invalid?5pointer?5pTool?6?$AA@ DB '%s: Invali'
	DB	'd pointer pTool', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KOMENMPL@?$CFs?3?5Invalid?5pointer?5pdwPChannels@
CONST	SEGMENT
??_C@_0CC@KOMENMPL@?$CFs?3?5Invalid?5pointer?5pdwPChannels@ DB '%s: Inval'
	DB	'id pointer pdwPChannels', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?InsertTool@CGraph@@UAGJPAUIDirectMusicTool@@PAKKJ@Z
_TEXT	SEGMENT
_hr$ = -4
_this$ = 8
_pTool$ = 12
_pdwPChannels$ = 16
_cPChannels$ = 20
_lIndex$ = 24
?InsertTool@CGraph@@UAGJPAUIDirectMusicTool@@PAKKJ@Z PROC NEAR ; CGraph::InsertTool, COMDAT

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 253  : 	V_INAME(IDirectMusicGraph::InsertTool);
; 254  : 	V_INTERFACE(pTool);

  00004	6a 04		 push	 4
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pTool$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $L69570
  00013	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InsertTool@CGraph@@UAGJPAUIDirectMusicTool@@PAKKJ@Z@4QBDB
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@JNPCPOMI@?$CFs?3?5Invalid?5pointer?5pTool?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L69570:
  0002c	6a 04		 push	 4
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _pTool$[ebp]
  00031	8b 11		 mov	 edx, DWORD PTR [ecx]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00039	85 c0		 test	 eax, eax
  0003b	74 19		 je	 SHORT $L69574
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InsertTool@CGraph@@UAGJPAUIDirectMusicTool@@PAKKJ@Z@4QBDB
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@JNPCPOMI@?$CFs?3?5Invalid?5pointer?5pTool?6?$AA@
  00047	6a ff		 push	 -1
  00049	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 _DebugBreak@0
$L69574:
  00056	8b 45 0c	 mov	 eax, DWORD PTR _pTool$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00063	85 c0		 test	 eax, eax
  00065	74 19		 je	 SHORT $L69576
  00067	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InsertTool@CGraph@@UAGJPAUIDirectMusicTool@@PAKKJ@Z@4QBDB
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@JNPCPOMI@?$CFs?3?5Invalid?5pointer?5pTool?6?$AA@
  00071	6a ff		 push	 -1
  00073	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	e8 00 00 00 00	 call	 _DebugBreak@0
$L69576:

; 255  : 	V_BUFPTR_READ_OPT(pdwPChannels, sizeof(DWORD) * cPChannels);

  00080	83 7d 10 00	 cmp	 DWORD PTR _pdwPChannels$[ebp], 0
  00084	74 2d		 je	 SHORT $L69577
  00086	8b 45 14	 mov	 eax, DWORD PTR _cPChannels$[ebp]
  00089	c1 e0 02	 shl	 eax, 2
  0008c	50		 push	 eax
  0008d	8b 4d 10	 mov	 ecx, DWORD PTR _pdwPChannels$[ebp]
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00096	85 c0		 test	 eax, eax
  00098	74 19		 je	 SHORT $L69577
  0009a	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InsertTool@CGraph@@UAGJPAUIDirectMusicTool@@PAKKJ@Z@4QBDB
  0009f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@KOMENMPL@?$CFs?3?5Invalid?5pointer?5pdwPChannels@
  000a4	6a ff		 push	 -1
  000a6	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ae	e8 00 00 00 00	 call	 _DebugBreak@0
$L69577:

; 256  : 	ENTER_API_CRITICAL_SECTION;
; 257  : 	HRESULT hr = InsertTool(pTool,pdwPChannels,cPChannels,lIndex,NULL);

  000b3	6a 00		 push	 0
  000b5	8b 55 18	 mov	 edx, DWORD PTR _lIndex$[ebp]
  000b8	52		 push	 edx
  000b9	8b 45 14	 mov	 eax, DWORD PTR _cPChannels$[ebp]
  000bc	50		 push	 eax
  000bd	8b 4d 10	 mov	 ecx, DWORD PTR _pdwPChannels$[ebp]
  000c0	51		 push	 ecx
  000c1	8b 55 0c	 mov	 edx, DWORD PTR _pTool$[ebp]
  000c4	52		 push	 edx
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000c8	e8 00 00 00 00	 call	 ?InsertTool@CGraph@@IAEJPAUIDirectMusicTool@@PAKKJPAU_GUID@@@Z ; CGraph::InsertTool
  000cd	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 258  : 	LEAVE_API_CRITICAL_SECTION;
; 259  : 	return hr;

  000d0	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 260  : }

  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 14 00	 ret	 20			; 00000014H
?InsertTool@CGraph@@UAGJPAUIDirectMusicTool@@PAKKJ@Z ENDP ; CGraph::InsertTool
_TEXT	ENDS
PUBLIC	?GetObjectInPath@CGraph@@QAEJKABU_GUID@@K0PAPAX@Z ; CGraph::GetObjectInPath
PUBLIC	??_C@_0BO@EMDDDLDF@?$CFs?3?5Invalid?5pointer?5ppObject?6?$AA@ ; `string'
PUBLIC	??_C@_0CK@CKOABBED@Error?3?5Requested?5Tool?5not?5found?5@ ; `string'
EXTRN	_GUID_All_Objects:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??GetObjectInPath@CGraph@@QAEJKABU_GUID@@K0PAPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetObjectInPath@CGraph@@QAEJKABU_GUID@@K0PAPAX@Z@4QBDB DB 'I'
	DB	'DirectMusicGraph::GetObjectInPath', 00H	; `CGraph::GetObjectInPath'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@EMDDDLDF@?$CFs?3?5Invalid?5pointer?5ppObject?6?$AA@
CONST	SEGMENT
??_C@_0BO@EMDDDLDF@?$CFs?3?5Invalid?5pointer?5ppObject?6?$AA@ DB '%s: Inv'
	DB	'alid pointer ppObject', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CKOABBED@Error?3?5Requested?5Tool?5not?5found?5@
CONST	SEGMENT
??_C@_0CK@CKOABBED@Error?3?5Requested?5Tool?5not?5found?5@ DB 'Error: Req'
	DB	'uested Tool not found in Graph', 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetObjectInPath@CGraph@@QAEJKABU_GUID@@K0PAPAX@Z
_TEXT	SEGMENT
tv94 = -24
_this$ = -20
_cCount$69609 = -16
_fFound$69607 = -12
_pPlace$ = -8
_hr$ = -4
_dwPChannel$ = 8
_guidObject$ = 12
_dwIndex$ = 16
_iidInterface$ = 20
_ppObject$ = 24
?GetObjectInPath@CGraph@@QAEJKABU_GUID@@K0PAPAX@Z PROC NEAR ; CGraph::GetObjectInPath, COMDAT
; _this$ = ecx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 266  : 	V_INAME(IDirectMusicGraph::GetObjectInPath);
; 267  : 	V_PTRPTR_WRITE(ppObject);

  00009	6a 04		 push	 4
  0000b	8b 45 18	 mov	 eax, DWORD PTR _ppObject$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00014	85 c0		 test	 eax, eax
  00016	74 19		 je	 SHORT $L69593
  00018	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetObjectInPath@CGraph@@QAEJKABU_GUID@@K0PAPAX@Z@4QBDB
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@EMDDDLDF@?$CFs?3?5Invalid?5pointer?5ppObject?6?$AA@
  00022	6a ff		 push	 -1
  00024	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	e8 00 00 00 00	 call	 _DebugBreak@0
$L69593:

; 268  :     HRESULT hr = DMUS_E_NOT_FOUND;

  00031	c7 45 fc 61 11
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005397151 ; 88781161H

; 269  : 	CToolRef*	pPlace;
; 270  : 	if( !IsEmpty() )

  00038	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	83 c1 10	 add	 ecx, 16			; 00000010H
  0003e	e8 00 00 00 00	 call	 ?IsEmpty@AList@@QBEHXZ	; AList::IsEmpty
  00043	85 c0		 test	 eax, eax
  00045	0f 85 0b 01 00
	00		 jne	 $L69601

; 271  : 	{
; 272  : 	    pPlace = NULL;

  0004b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pPlace$[ebp], 0

; 273  : 	    // search for the tool
; 274  : 	    ENTER_CRITICAL_SECTION(&m_CrSec);

  00052	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	83 c1 18	 add	 ecx, 24			; 00000018H
  00058	51		 push	 ecx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 275  : 	    for( pPlace = GetHead(); pPlace; 

  0005f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?GetHead@CGraph@@QAEPAVCToolRef@@XZ ; CGraph::GetHead
  00067	89 45 f8	 mov	 DWORD PTR _pPlace$[ebp], eax
  0006a	eb 0b		 jmp	 SHORT $L69602
$L69603:

; 276  : 		    pPlace = pPlace->GetNext() )

  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  0006f	e8 00 00 00 00	 call	 ?GetNext@CToolRef@@QAEPAV1@XZ ; CToolRef::GetNext
  00074	89 45 f8	 mov	 DWORD PTR _pPlace$[ebp], eax
$L69602:
  00077	83 7d f8 00	 cmp	 DWORD PTR _pPlace$[ebp], 0
  0007b	0f 84 a6 00 00
	00		 je	 $L69604

; 277  : 	    {
; 278  :             if ((guidObject == pPlace->m_guidClassID) || (guidObject == GUID_All_Objects))

  00081	8b 55 f8	 mov	 edx, DWORD PTR _pPlace$[ebp]
  00084	83 c2 04	 add	 edx, 4
  00087	52		 push	 edx
  00088	8b 45 0c	 mov	 eax, DWORD PTR _guidObject$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _==@8
  00091	85 c0		 test	 eax, eax
  00093	75 12		 jne	 SHORT $L69606
  00095	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_All_Objects
  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR _guidObject$[ebp]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 _==@8
  000a3	85 c0		 test	 eax, eax
  000a5	74 7b		 je	 SHORT $L69605
$L69606:

; 279  :             {
; 280  :                 BOOL fFound = (!pPlace->m_pdwPChannels || (dwPChannel >= DMUS_PCHANNEL_ALL));

  000a7	8b 55 f8	 mov	 edx, DWORD PTR _pPlace$[ebp]
  000aa	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  000ae	74 0f		 je	 SHORT $L70572
  000b0	83 7d 08 fb	 cmp	 DWORD PTR _dwPChannel$[ebp], -5 ; fffffffbH
  000b4	73 09		 jae	 SHORT $L70572
  000b6	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
  000bd	eb 07		 jmp	 SHORT $L70573
$L70572:
  000bf	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv94[ebp], 1
$L70573:
  000c6	8b 45 e8	 mov	 eax, DWORD PTR tv94[ebp]
  000c9	89 45 f4	 mov	 DWORD PTR _fFound$69607[ebp], eax

; 281  :                 if( !fFound )

  000cc	83 7d f4 00	 cmp	 DWORD PTR _fFound$69607[ebp], 0
  000d0	75 39		 jne	 SHORT $L69608

; 282  : 			    {
; 283  : 				    DWORD cCount;
; 284  : 			        // scan through the array of PChannels to see if this one
; 285  : 			        // supports dwPChannel
; 286  : 			        for( cCount = 0; cCount < pPlace->m_dwPCArraySize; cCount++)

  000d2	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _cCount$69609[ebp], 0
  000d9	eb 09		 jmp	 SHORT $L69610
$L69611:
  000db	8b 4d f0	 mov	 ecx, DWORD PTR _cCount$69609[ebp]
  000de	83 c1 01	 add	 ecx, 1
  000e1	89 4d f0	 mov	 DWORD PTR _cCount$69609[ebp], ecx
$L69610:
  000e4	8b 55 f8	 mov	 edx, DWORD PTR _pPlace$[ebp]
  000e7	8b 45 f0	 mov	 eax, DWORD PTR _cCount$69609[ebp]
  000ea	3b 42 28	 cmp	 eax, DWORD PTR [edx+40]
  000ed	73 1c		 jae	 SHORT $L69608

; 287  : 			        {
; 288  : 				        if( dwPChannel == pPlace->m_pdwPChannels[cCount] )

  000ef	8b 4d f8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  000f2	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  000f5	8b 45 f0	 mov	 eax, DWORD PTR _cCount$69609[ebp]
  000f8	8b 4d 08	 mov	 ecx, DWORD PTR _dwPChannel$[ebp]
  000fb	3b 0c 82	 cmp	 ecx, DWORD PTR [edx+eax*4]
  000fe	75 09		 jne	 SHORT $L69613

; 289  : 				        {
; 290  :                             fFound = TRUE;

  00100	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _fFound$69607[ebp], 1

; 291  : 					        // yep, it supports it
; 292  :                             break;

  00107	eb 02		 jmp	 SHORT $L69608
$L69613:

; 293  : 				        }
; 294  : 			        }

  00109	eb d0		 jmp	 SHORT $L69611
$L69608:

; 295  :                 }
; 296  :                 if (fFound)

  0010b	83 7d f4 00	 cmp	 DWORD PTR _fFound$69607[ebp], 0
  0010f	74 11		 je	 SHORT $L69605

; 297  :                 {
; 298  :                     if (!dwIndex)

  00111	83 7d 10 00	 cmp	 DWORD PTR _dwIndex$[ebp], 0
  00115	75 02		 jne	 SHORT $L69615

; 299  :                     {
; 300  :                         break;

  00117	eb 0e		 jmp	 SHORT $L69604
$L69615:

; 301  :                     }
; 302  :                     else
; 303  :                     {
; 304  :                         dwIndex--;

  00119	8b 55 10	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  0011c	83 ea 01	 sub	 edx, 1
  0011f	89 55 10	 mov	 DWORD PTR _dwIndex$[ebp], edx
$L69605:

; 305  :                     }
; 306  :                 }
; 307  :             }
; 308  : 	    }

  00122	e9 45 ff ff ff	 jmp	 $L69603
$L69604:

; 309  : 	    if( pPlace )

  00127	83 7d f8 00	 cmp	 DWORD PTR _pPlace$[ebp], 0
  0012b	74 1c		 je	 SHORT $L69617

; 310  : 	    {
; 311  :             hr = pPlace->m_pTool->QueryInterface(iidInterface,ppObject);

  0012d	8b 45 18	 mov	 eax, DWORD PTR _ppObject$[ebp]
  00130	50		 push	 eax
  00131	8b 4d 14	 mov	 ecx, DWORD PTR _iidInterface$[ebp]
  00134	51		 push	 ecx
  00135	8b 55 f8	 mov	 edx, DWORD PTR _pPlace$[ebp]
  00138	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0013b	8b 4d f8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  0013e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00141	8b 00		 mov	 eax, DWORD PTR [eax]
  00143	52		 push	 edx
  00144	ff 10		 call	 DWORD PTR [eax]
  00146	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L69617:

; 312  :         }
; 313  : 	    LEAVE_CRITICAL_SECTION(&m_CrSec);

  00149	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014c	83 c1 18	 add	 ecx, 24			; 00000018H
  0014f	51		 push	 ecx
  00150	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4
$L69601:

; 314  :     }
; 315  : #ifdef DBG
; 316  :     if (hr == DMUS_E_NOT_FOUND)

  00156	81 7d fc 61 11
	78 88		 cmp	 DWORD PTR _hr$[ebp], -2005397151 ; 88781161H
  0015d	75 0f		 jne	 SHORT $L69622

; 317  :     {
; 318  :         Trace(1,"Error: Requested Tool not found in Graph\n");

  0015f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@CKOABBED@Error?3?5Requested?5Tool?5not?5found?5@
  00164	6a 01		 push	 1
  00166	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0016b	83 c4 08	 add	 esp, 8
$L69622:

; 319  :     }
; 320  : #endif
; 321  :     return hr;

  0016e	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 322  : 
; 323  : }

  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 14 00	 ret	 20			; 00000014H
?GetObjectInPath@CGraph@@QAEJKABU_GUID@@K0PAPAX@Z ENDP	; CGraph::GetObjectInPath
_TEXT	ENDS
PUBLIC	??_C@_0BM@GEGNKCGL@?$CFs?3?5Invalid?5pointer?5ppTool?6?$AA@ ; `string'
PUBLIC	??_C@_0DJ@EBPDABHM@Warning?3?5GetTool?5failed?5because?5@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??GetTool@CGraph@@UAGJKPAPAUIDirectMusicTool@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetTool@CGraph@@UAGJKPAPAUIDirectMusicTool@@@Z@4QBDB DB 'I'
	DB	'DirectMusicGraph::GetTool', 00H		; `CGraph::GetTool'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BM@GEGNKCGL@?$CFs?3?5Invalid?5pointer?5ppTool?6?$AA@
CONST	SEGMENT
??_C@_0BM@GEGNKCGL@?$CFs?3?5Invalid?5pointer?5ppTool?6?$AA@ DB '%s: Inval'
	DB	'id pointer ppTool', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@EBPDABHM@Warning?3?5GetTool?5failed?5because?5@
CONST	SEGMENT
??_C@_0DJ@EBPDABHM@Warning?3?5GetTool?5failed?5because?5@ DB 'Warning: Ge'
	DB	'tTool failed because the Tool Graph is empty', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetTool@CGraph@@UAGJKPAPAUIDirectMusicTool@@@Z
_TEXT	SEGMENT
_pPlace$ = -8
_hr$ = -4
_this$ = 8
_dwIndex$ = 12
_ppTool$ = 16
?GetTool@CGraph@@UAGJKPAPAUIDirectMusicTool@@@Z PROC NEAR ; CGraph::GetTool, COMDAT

; 340  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 341  : 	V_INAME(IDirectMusicGraph::GetTool);
; 342  : 	V_PTRPTR_WRITE(ppTool);

  00006	6a 04		 push	 4
  00008	8b 45 10	 mov	 eax, DWORD PTR _ppTool$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69632
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetTool@CGraph@@UAGJKPAPAUIDirectMusicTool@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@GEGNKCGL@?$CFs?3?5Invalid?5pointer?5ppTool?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69632:

; 343  : 	CToolRef*	pPlace;
; 344  : 	HRESULT hr = S_OK;

  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 345  : 
; 346  : 	if( IsEmpty() )

  00035	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 10	 add	 ecx, 16			; 00000010H
  0003b	e8 00 00 00 00	 call	 ?IsEmpty@AList@@QBEHXZ	; AList::IsEmpty
  00040	85 c0		 test	 eax, eax
  00042	74 16		 je	 SHORT $L69637

; 347  : 	{
; 348  :         Trace(2,"Warning: GetTool failed because the Tool Graph is empty\n");

  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@EBPDABHM@Warning?3?5GetTool?5failed?5because?5@
  00049	6a 02		 push	 2
  0004b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00050	83 c4 08	 add	 esp, 8

; 349  : 		return DMUS_E_NOT_FOUND;

  00053	b8 61 11 78 88	 mov	 eax, -2005397151	; 88781161H
  00058	eb 7d		 jmp	 SHORT $L69628
$L69637:

; 350  : 	}
; 351  : 	pPlace = NULL;

  0005a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pPlace$[ebp], 0

; 352  : 	// search for the indexed tool
; 353  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  00061	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	83 c1 18	 add	 ecx, 24			; 00000018H
  00067	51		 push	 ecx
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 354  : 	ENTER_API_CRITICAL_SECTION;
; 355  : 	for( pPlace = GetHead(); ( dwIndex > 0 ) && pPlace; 

  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?GetHead@CGraph@@QAEPAVCToolRef@@XZ ; CGraph::GetHead
  00076	89 45 f8	 mov	 DWORD PTR _pPlace$[ebp], eax
  00079	eb 0b		 jmp	 SHORT $L69643
$L69644:

; 356  : 		pPlace = pPlace->GetNext() )

  0007b	8b 4d f8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  0007e	e8 00 00 00 00	 call	 ?GetNext@CToolRef@@QAEPAV1@XZ ; CToolRef::GetNext
  00083	89 45 f8	 mov	 DWORD PTR _pPlace$[ebp], eax
$L69643:
  00086	83 7d 0c 00	 cmp	 DWORD PTR _dwIndex$[ebp], 0
  0008a	76 11		 jbe	 SHORT $L69645
  0008c	83 7d f8 00	 cmp	 DWORD PTR _pPlace$[ebp], 0
  00090	74 0b		 je	 SHORT $L69645

; 357  : 	{
; 358  : 		dwIndex--;

  00092	8b 55 0c	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  00095	83 ea 01	 sub	 edx, 1
  00098	89 55 0c	 mov	 DWORD PTR _dwIndex$[ebp], edx

; 359  : 	}

  0009b	eb de		 jmp	 SHORT $L69644
$L69645:

; 360  : 	if( NULL == pPlace )

  0009d	83 7d f8 00	 cmp	 DWORD PTR _pPlace$[ebp], 0
  000a1	75 09		 jne	 SHORT $L69646

; 361  : 	{
; 362  : 		hr = DMUS_E_NOT_FOUND;

  000a3	c7 45 fc 61 11
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005397151 ; 88781161H

; 363  : 	}
; 364  :     else

  000aa	eb 1b		 jmp	 SHORT $L69651
$L69646:

; 365  :     {
; 366  : 	    *ppTool = pPlace->m_pTool;

  000ac	8b 45 10	 mov	 eax, DWORD PTR _ppTool$[ebp]
  000af	8b 4d f8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  000b2	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000b5	89 10		 mov	 DWORD PTR [eax], edx

; 367  : 	    (*ppTool)->AddRef();

  000b7	8b 45 10	 mov	 eax, DWORD PTR _ppTool$[ebp]
  000ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bc	8b 55 10	 mov	 edx, DWORD PTR _ppTool$[ebp]
  000bf	8b 02		 mov	 eax, DWORD PTR [edx]
  000c1	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000c3	50		 push	 eax
  000c4	ff 51 04	 call	 DWORD PTR [ecx+4]
$L69651:

; 368  :     }
; 369  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  000c7	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ca	83 c2 18	 add	 edx, 24			; 00000018H
  000cd	52		 push	 edx
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 370  : 	LEAVE_API_CRITICAL_SECTION;
; 371  : 	return hr;

  000d4	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
$L69628:

; 372  : }

  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 0c 00	 ret	 12			; 0000000cH
?GetTool@CGraph@@UAGJKPAPAUIDirectMusicTool@@@Z ENDP	; CGraph::GetTool
_TEXT	ENDS
PUBLIC	??_C@_0CI@BCOEMLMC@Error?3?5RemoveTool?5?9?5Tool?5not?5in?5@ ; `string'
PUBLIC	?Remove@AList@@QAEXPAVAListItem@@@Z		; AList::Remove
;	COMDAT ?__szValidateInterfaceName@?1??RemoveTool@CGraph@@UAGJPAUIDirectMusicTool@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??RemoveTool@CGraph@@UAGJPAUIDirectMusicTool@@@Z@4QBDB DB 'I'
	DB	'DirectMusicGraph::RemoveTool', 00H		; `CGraph::RemoveTool'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CI@BCOEMLMC@Error?3?5RemoveTool?5?9?5Tool?5not?5in?5@
CONST	SEGMENT
??_C@_0CI@BCOEMLMC@Error?3?5RemoveTool?5?9?5Tool?5not?5in?5@ DB 'Error: R'
	DB	'emoveTool - Tool not in Graph.', 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?RemoveTool@CGraph@@UAGJPAUIDirectMusicTool@@@Z
_TEXT	SEGMENT
tv137 = -20
$T70581 = -16
$T70580 = -12
_pPlace$ = -8
_hr$ = -4
_this$ = 8
_pTool$ = 12
?RemoveTool@CGraph@@UAGJPAUIDirectMusicTool@@@Z PROC NEAR ; CGraph::RemoveTool, COMDAT

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 388  : 	V_INAME(IDirectMusicGraph::RemoveTool);
; 389  : 	V_INTERFACE(pTool);

  00006	6a 04		 push	 4
  00008	8b 45 0c	 mov	 eax, DWORD PTR _pTool$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69659
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??RemoveTool@CGraph@@UAGJPAUIDirectMusicTool@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@JNPCPOMI@?$CFs?3?5Invalid?5pointer?5pTool?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69659:
  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pTool$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003b	85 c0		 test	 eax, eax
  0003d	74 19		 je	 SHORT $L69662
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??RemoveTool@CGraph@@UAGJPAUIDirectMusicTool@@@Z@4QBDB
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@JNPCPOMI@?$CFs?3?5Invalid?5pointer?5pTool?6?$AA@
  00049	6a ff		 push	 -1
  0004b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	e8 00 00 00 00	 call	 _DebugBreak@0
$L69662:
  00058	8b 45 0c	 mov	 eax, DWORD PTR _pTool$[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00065	85 c0		 test	 eax, eax
  00067	74 19		 je	 SHORT $L69664
  00069	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??RemoveTool@CGraph@@UAGJPAUIDirectMusicTool@@@Z@4QBDB
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@JNPCPOMI@?$CFs?3?5Invalid?5pointer?5pTool?6?$AA@
  00073	6a ff		 push	 -1
  00075	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	e8 00 00 00 00	 call	 _DebugBreak@0
$L69664:

; 390  : 	CToolRef*	pPlace;
; 391  : 	HRESULT hr = S_OK;

  00082	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 392  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  00089	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	83 c0 18	 add	 eax, 24			; 00000018H
  0008f	50		 push	 eax
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 393  : 	ENTER_API_CRITICAL_SECTION;
; 394  : 	// search for the tool
; 395  : 	for( pPlace = GetHead(); pPlace; pPlace = pPlace->GetNext() )

  00096	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?GetHead@CGraph@@QAEPAVCToolRef@@XZ ; CGraph::GetHead
  0009e	89 45 f8	 mov	 DWORD PTR _pPlace$[ebp], eax
  000a1	eb 0b		 jmp	 SHORT $L69668
$L69669:
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  000a6	e8 00 00 00 00	 call	 ?GetNext@CToolRef@@QAEPAV1@XZ ; CToolRef::GetNext
  000ab	89 45 f8	 mov	 DWORD PTR _pPlace$[ebp], eax
$L69668:
  000ae	83 7d f8 00	 cmp	 DWORD PTR _pPlace$[ebp], 0
  000b2	74 0f		 je	 SHORT $L69670

; 396  : 	{
; 397  : 		if( pPlace->m_pTool == pTool )

  000b4	8b 4d f8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  000b7	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000ba	3b 55 0c	 cmp	 edx, DWORD PTR _pTool$[ebp]
  000bd	75 02		 jne	 SHORT $L69671

; 398  : 			break;

  000bf	eb 02		 jmp	 SHORT $L69670
$L69671:

; 399  : 	}

  000c1	eb e0		 jmp	 SHORT $L69669
$L69670:

; 400  : 	if( NULL == pPlace )

  000c3	83 7d f8 00	 cmp	 DWORD PTR _pPlace$[ebp], 0
  000c7	75 18		 jne	 SHORT $L69672

; 401  : 	{
; 402  :         Trace(1,"Error: RemoveTool - Tool not in Graph.\n");

  000c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@BCOEMLMC@Error?3?5RemoveTool?5?9?5Tool?5not?5in?5@
  000ce	6a 01		 push	 1
  000d0	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000d5	83 c4 08	 add	 esp, 8

; 403  : 		hr = DMUS_E_NOT_FOUND;

  000d8	c7 45 fc 61 11
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005397151 ; 88781161H

; 404  : 	}
; 405  :     else

  000df	eb 37		 jmp	 SHORT $L69678
$L69672:

; 406  :     {
; 407  :         AList::Remove(pPlace);

  000e1	8b 45 f8	 mov	 eax, DWORD PTR _pPlace$[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000e8	83 c1 10	 add	 ecx, 16			; 00000010H
  000eb	e8 00 00 00 00	 call	 ?Remove@AList@@QAEXPAVAListItem@@@Z ; AList::Remove

; 408  : 	    delete pPlace;

  000f0	8b 4d f8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  000f3	89 4d f0	 mov	 DWORD PTR $T70581[ebp], ecx
  000f6	8b 55 f0	 mov	 edx, DWORD PTR $T70581[ebp]
  000f9	89 55 f4	 mov	 DWORD PTR $T70580[ebp], edx
  000fc	83 7d f4 00	 cmp	 DWORD PTR $T70580[ebp], 0
  00100	74 0f		 je	 SHORT $L70582
  00102	6a 01		 push	 1
  00104	8b 4d f4	 mov	 ecx, DWORD PTR $T70580[ebp]
  00107	e8 00 00 00 00	 call	 ??_GCToolRef@@QAEPAXI@Z
  0010c	89 45 ec	 mov	 DWORD PTR tv137[ebp], eax
  0010f	eb 07		 jmp	 SHORT $L69678
$L70582:
  00111	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$L69678:

; 409  :     }
; 410  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  00118	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0011b	83 c0 18	 add	 eax, 24			; 00000018H
  0011e	50		 push	 eax
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 411  : 	LEAVE_API_CRITICAL_SECTION;
; 412  : 	return hr;

  00125	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 413  : }

  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c2 08 00	 ret	 8
?RemoveTool@CGraph@@UAGJPAUIDirectMusicTool@@@Z ENDP	; CGraph::RemoveTool
_TEXT	ENDS
PUBLIC	??_C@_0BN@CHDJODOG@?$CFs?3?5Invalid?5pointer?5ppGraph?6?$AA@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??Clone@CGraph@@UAGJPAPAUIDirectMusicGraph@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Clone@CGraph@@UAGJPAPAUIDirectMusicGraph@@@Z@4QBDB DB 'I'
	DB	'DirectMusicGraph::Clone', 00H		; `CGraph::Clone'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BN@CHDJODOG@?$CFs?3?5Invalid?5pointer?5ppGraph?6?$AA@
CONST	SEGMENT
??_C@_0BN@CHDJODOG@?$CFs?3?5Invalid?5pointer?5ppGraph?6?$AA@ DB '%s: Inva'
	DB	'lid pointer ppGraph', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Clone@CGraph@@UAGJPAPAUIDirectMusicGraph@@@Z
_TEXT	SEGMENT
tv204 = -56
tv128 = -52
tv79 = -48
$T70596 = -44
$T70595 = -40
$T70594 = -36
$T70593 = -32
$T70590 = -28
$T70587 = -24
_pTool8$69720 = -20
_pSource$69696 = -16
_pDest$69697 = -12
_hr$ = -8
_pNew$ = -4
_this$ = 8
_ppGraph$ = 12
?Clone@CGraph@@UAGJPAPAUIDirectMusicGraph@@@Z PROC NEAR	; CGraph::Clone, COMDAT

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 419  :     V_INAME(IDirectMusicGraph::Clone);
; 420  : 	V_PTRPTR_WRITE(ppGraph);

  00008	6a 04		 push	 4
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _ppGraph$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00013	85 c0		 test	 eax, eax
  00015	74 19		 je	 SHORT $L69688
  00017	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Clone@CGraph@@UAGJPAPAUIDirectMusicGraph@@@Z@4QBDB
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@CHDJODOG@?$CFs?3?5Invalid?5pointer?5ppGraph?6?$AA@
  00021	6a ff		 push	 -1
  00023	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002b	e8 00 00 00 00	 call	 _DebugBreak@0
$L69688:

; 421  : 
; 422  :     HRESULT hr = E_OUTOFMEMORY;

  00030	c7 45 f8 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 423  :    	ENTER_CRITICAL_SECTION(&m_CrSec);

  00037	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0003d	51		 push	 ecx
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 424  :     CGraph *pNew = new CGraph;

  00044	68 70 03 00 00	 push	 880			; 00000370H
  00049	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004e	83 c4 04	 add	 esp, 4
  00051	89 45 e8	 mov	 DWORD PTR $T70587[ebp], eax
  00054	83 7d e8 00	 cmp	 DWORD PTR $T70587[ebp], 0
  00058	74 0d		 je	 SHORT $L70588
  0005a	8b 4d e8	 mov	 ecx, DWORD PTR $T70587[ebp]
  0005d	e8 00 00 00 00	 call	 ??0CGraph@@QAE@XZ	; CGraph::CGraph
  00062	89 45 d0	 mov	 DWORD PTR tv79[ebp], eax
  00065	eb 07		 jmp	 SHORT $L70589
$L70588:
  00067	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$L70589:
  0006e	8b 55 d0	 mov	 edx, DWORD PTR tv79[ebp]
  00071	89 55 fc	 mov	 DWORD PTR _pNew$[ebp], edx

; 425  :     if (pNew)

  00074	83 7d fc 00	 cmp	 DWORD PTR _pNew$[ebp], 0
  00078	0f 84 26 02 00
	00		 je	 $L69695

; 426  :     {
; 427  :         pNew->m_Info = m_Info;

  0007e	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  00081	83 c6 34	 add	 esi, 52			; 00000034H
  00084	8b 7d fc	 mov	 edi, DWORD PTR _pNew$[ebp]
  00087	83 c7 40	 add	 edi, 64			; 00000040H
  0008a	b9 cb 00 00 00	 mov	 ecx, 203		; 000000cbH
  0008f	f3 a5		 rep movsd

; 428  :         CToolRef *pSource = GetHead();

  00091	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  00097	e8 00 00 00 00	 call	 ?GetHead@CGraph@@QAEPAVCToolRef@@XZ ; CGraph::GetHead
  0009c	89 45 f0	 mov	 DWORD PTR _pSource$69696[ebp], eax

; 429  :         CToolRef *pDest;
; 430  :         for (;pSource;pSource = pSource->GetNext())

  0009f	eb 0b		 jmp	 SHORT $L69698
$L69699:
  000a1	8b 4d f0	 mov	 ecx, DWORD PTR _pSource$69696[ebp]
  000a4	e8 00 00 00 00	 call	 ?GetNext@CToolRef@@QAEPAV1@XZ ; CToolRef::GetNext
  000a9	89 45 f0	 mov	 DWORD PTR _pSource$69696[ebp], eax
$L69698:
  000ac	83 7d f0 00	 cmp	 DWORD PTR _pSource$69696[ebp], 0
  000b0	0f 84 ee 01 00
	00		 je	 $L69695

; 431  :         {
; 432  :             pDest = new CToolRef;

  000b6	6a 30		 push	 48			; 00000030H
  000b8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000bd	83 c4 04	 add	 esp, 4
  000c0	89 45 e4	 mov	 DWORD PTR $T70590[ebp], eax
  000c3	83 7d e4 00	 cmp	 DWORD PTR $T70590[ebp], 0
  000c7	74 0d		 je	 SHORT $L70591
  000c9	8b 4d e4	 mov	 ecx, DWORD PTR $T70590[ebp]
  000cc	e8 00 00 00 00	 call	 ??0CToolRef@@QAE@XZ	; CToolRef::CToolRef
  000d1	89 45 cc	 mov	 DWORD PTR tv128[ebp], eax
  000d4	eb 07		 jmp	 SHORT $L70592
$L70591:
  000d6	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$L70592:
  000dd	8b 45 cc	 mov	 eax, DWORD PTR tv128[ebp]
  000e0	89 45 f4	 mov	 DWORD PTR _pDest$69697[ebp], eax

; 433  :             if (pDest)

  000e3	83 7d f4 00	 cmp	 DWORD PTR _pDest$69697[ebp], 0
  000e7	0f 84 81 01 00
	00		 je	 $L69703

; 434  :             {
; 435  :                 pNew->AList::AddTail(pDest);

  000ed	8b 4d f4	 mov	 ecx, DWORD PTR _pDest$69697[ebp]
  000f0	51		 push	 ecx
  000f1	8b 4d fc	 mov	 ecx, DWORD PTR _pNew$[ebp]
  000f4	83 c1 10	 add	 ecx, 16			; 00000010H
  000f7	e8 00 00 00 00	 call	 ?AddTail@AList@@QAEXPAVAListItem@@@Z ; AList::AddTail

; 436  :                 pDest->m_dwMTArraySize = pSource->m_dwMTArraySize;

  000fc	8b 55 f4	 mov	 edx, DWORD PTR _pDest$69697[ebp]
  000ff	8b 45 f0	 mov	 eax, DWORD PTR _pSource$69696[ebp]
  00102	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00105	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 437  :                 pDest->m_dwPCArraySize = pSource->m_dwPCArraySize;

  00108	8b 55 f4	 mov	 edx, DWORD PTR _pDest$69697[ebp]
  0010b	8b 45 f0	 mov	 eax, DWORD PTR _pSource$69696[ebp]
  0010e	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00111	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 438  :                 pDest->m_dwQueue = pSource->m_dwQueue;

  00114	8b 55 f4	 mov	 edx, DWORD PTR _pDest$69697[ebp]
  00117	8b 45 f0	 mov	 eax, DWORD PTR _pSource$69696[ebp]
  0011a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0011d	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 439  :                 pDest->m_fSupportsClone = pSource->m_fSupportsClone;

  00120	8b 55 f4	 mov	 edx, DWORD PTR _pDest$69697[ebp]
  00123	8b 45 f0	 mov	 eax, DWORD PTR _pSource$69696[ebp]
  00126	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00129	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 440  :                 pDest->m_guidClassID = pSource->m_guidClassID;

  0012c	8b 55 f0	 mov	 edx, DWORD PTR _pSource$69696[ebp]
  0012f	83 c2 04	 add	 edx, 4
  00132	8b 45 f4	 mov	 eax, DWORD PTR _pDest$69697[ebp]
  00135	83 c0 04	 add	 eax, 4
  00138	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0013a	89 08		 mov	 DWORD PTR [eax], ecx
  0013c	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0013f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00142	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00145	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00148	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  0014b	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 441  :                 if (pSource->m_dwMTArraySize)

  0014e	8b 45 f0	 mov	 eax, DWORD PTR _pSource$69696[ebp]
  00151	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00155	74 55		 je	 SHORT $L69704

; 442  :                 {
; 443  :                     pDest->m_pdwMediaTypes = new DWORD[pSource->m_dwMTArraySize];

  00157	8b 4d f0	 mov	 ecx, DWORD PTR _pSource$69696[ebp]
  0015a	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0015d	c1 e2 02	 shl	 edx, 2
  00160	52		 push	 edx
  00161	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00166	83 c4 04	 add	 esp, 4
  00169	89 45 e0	 mov	 DWORD PTR $T70593[ebp], eax
  0016c	8b 45 f4	 mov	 eax, DWORD PTR _pDest$69697[ebp]
  0016f	8b 4d e0	 mov	 ecx, DWORD PTR $T70593[ebp]
  00172	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 444  :                     if (pDest->m_pdwMediaTypes)

  00175	8b 55 f4	 mov	 edx, DWORD PTR _pDest$69697[ebp]
  00178	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  0017c	74 22		 je	 SHORT $L69707

; 445  :                     {
; 446  :                         memcpy(pDest->m_pdwMediaTypes,pSource->m_pdwMediaTypes,
; 447  :                             sizeof(DWORD)*pDest->m_dwMTArraySize);

  0017e	8b 45 f4	 mov	 eax, DWORD PTR _pDest$69697[ebp]
  00181	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00184	c1 e1 02	 shl	 ecx, 2
  00187	51		 push	 ecx
  00188	8b 55 f0	 mov	 edx, DWORD PTR _pSource$69696[ebp]
  0018b	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0018e	50		 push	 eax
  0018f	8b 4d f4	 mov	 ecx, DWORD PTR _pDest$69697[ebp]
  00192	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00195	52		 push	 edx
  00196	e8 00 00 00 00	 call	 _memcpy
  0019b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 448  :                     }
; 449  :                     else

  0019e	eb 0a		 jmp	 SHORT $L69709
$L69707:

; 450  :                     {
; 451  :                         pDest->m_dwMTArraySize = 0;

  001a0	8b 45 f4	 mov	 eax, DWORD PTR _pDest$69697[ebp]
  001a3	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
$L69709:

; 452  :                     }
; 453  :                 }
; 454  :                 else

  001aa	eb 0a		 jmp	 SHORT $L69710
$L69704:

; 455  :                 {
; 456  :                     pDest->m_pdwMediaTypes = NULL;

  001ac	8b 4d f4	 mov	 ecx, DWORD PTR _pDest$69697[ebp]
  001af	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
$L69710:

; 457  :                 }
; 458  :                 if (pSource->m_dwPCArraySize)

  001b6	8b 55 f0	 mov	 edx, DWORD PTR _pSource$69696[ebp]
  001b9	83 7a 28 00	 cmp	 DWORD PTR [edx+40], 0
  001bd	74 55		 je	 SHORT $L69711

; 459  :                 {
; 460  :                     pDest->m_pdwPChannels = new DWORD[pSource->m_dwPCArraySize];

  001bf	8b 45 f0	 mov	 eax, DWORD PTR _pSource$69696[ebp]
  001c2	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001c5	c1 e1 02	 shl	 ecx, 2
  001c8	51		 push	 ecx
  001c9	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  001ce	83 c4 04	 add	 esp, 4
  001d1	89 45 dc	 mov	 DWORD PTR $T70594[ebp], eax
  001d4	8b 55 f4	 mov	 edx, DWORD PTR _pDest$69697[ebp]
  001d7	8b 45 dc	 mov	 eax, DWORD PTR $T70594[ebp]
  001da	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 461  :                     if (pDest->m_pdwPChannels)

  001dd	8b 4d f4	 mov	 ecx, DWORD PTR _pDest$69697[ebp]
  001e0	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  001e4	74 22		 je	 SHORT $L69714

; 462  :                     {
; 463  :                         memcpy(pDest->m_pdwPChannels,pSource->m_pdwPChannels,
; 464  :                             sizeof(DWORD)*pDest->m_dwPCArraySize);

  001e6	8b 55 f4	 mov	 edx, DWORD PTR _pDest$69697[ebp]
  001e9	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  001ec	c1 e0 02	 shl	 eax, 2
  001ef	50		 push	 eax
  001f0	8b 4d f0	 mov	 ecx, DWORD PTR _pSource$69696[ebp]
  001f3	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  001f6	52		 push	 edx
  001f7	8b 45 f4	 mov	 eax, DWORD PTR _pDest$69697[ebp]
  001fa	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001fd	51		 push	 ecx
  001fe	e8 00 00 00 00	 call	 _memcpy
  00203	83 c4 0c	 add	 esp, 12			; 0000000cH

; 465  :                     }
; 466  :                     else

  00206	eb 0a		 jmp	 SHORT $L69716
$L69714:

; 467  :                     {
; 468  :                         pDest->m_dwPCArraySize = 0;

  00208	8b 55 f4	 mov	 edx, DWORD PTR _pDest$69697[ebp]
  0020b	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0
$L69716:

; 469  :                     }
; 470  :                 }
; 471  :                 else

  00212	eb 0a		 jmp	 SHORT $L69717
$L69711:

; 472  :                 {
; 473  :                     pDest->m_pdwPChannels = NULL;

  00214	8b 45 f4	 mov	 eax, DWORD PTR _pDest$69697[ebp]
  00217	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
$L69717:

; 474  :                 }
; 475  :                 if (pSource->m_pTool)

  0021e	8b 4d f0	 mov	 ecx, DWORD PTR _pSource$69696[ebp]
  00221	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00225	74 45		 je	 SHORT $L69718

; 476  :                 {
; 477  :                     if (pDest->m_fSupportsClone)

  00227	8b 55 f4	 mov	 edx, DWORD PTR _pDest$69697[ebp]
  0022a	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  0022e	74 1e		 je	 SHORT $L69719

; 478  :                     {
; 479  :                         IDirectMusicTool8 *pTool8 = (IDirectMusicTool8 *) pSource->m_pTool;

  00230	8b 45 f0	 mov	 eax, DWORD PTR _pSource$69696[ebp]
  00233	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00236	89 4d ec	 mov	 DWORD PTR _pTool8$69720[ebp], ecx

; 480  :                         pTool8->Clone(&pDest->m_pTool);

  00239	8b 55 f4	 mov	 edx, DWORD PTR _pDest$69697[ebp]
  0023c	83 c2 18	 add	 edx, 24			; 00000018H
  0023f	52		 push	 edx
  00240	8b 45 ec	 mov	 eax, DWORD PTR _pTool8$69720[ebp]
  00243	8b 08		 mov	 ecx, DWORD PTR [eax]
  00245	8b 55 ec	 mov	 edx, DWORD PTR _pTool8$69720[ebp]
  00248	52		 push	 edx
  00249	ff 51 24	 call	 DWORD PTR [ecx+36]

; 481  :                     }
; 482  :                     else

  0024c	eb 1e		 jmp	 SHORT $L69718
$L69719:

; 483  :                     {
; 484  :                         pDest->m_pTool = pSource->m_pTool;

  0024e	8b 45 f4	 mov	 eax, DWORD PTR _pDest$69697[ebp]
  00251	8b 4d f0	 mov	 ecx, DWORD PTR _pSource$69696[ebp]
  00254	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00257	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 485  :                         pDest->m_pTool->AddRef();

  0025a	8b 45 f4	 mov	 eax, DWORD PTR _pDest$69697[ebp]
  0025d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00260	8b 55 f4	 mov	 edx, DWORD PTR _pDest$69697[ebp]
  00263	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00266	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00268	50		 push	 eax
  00269	ff 51 04	 call	 DWORD PTR [ecx+4]
$L69718:

; 486  :                     }
; 487  :                 }
; 488  :             }
; 489  :             else

  0026c	eb 31		 jmp	 SHORT $L69723
$L69703:

; 490  :             {
; 491  :                 delete pNew;

  0026e	8b 55 fc	 mov	 edx, DWORD PTR _pNew$[ebp]
  00271	89 55 d4	 mov	 DWORD PTR $T70596[ebp], edx
  00274	8b 45 d4	 mov	 eax, DWORD PTR $T70596[ebp]
  00277	89 45 d8	 mov	 DWORD PTR $T70595[ebp], eax
  0027a	83 7d d8 00	 cmp	 DWORD PTR $T70595[ebp], 0
  0027e	74 0f		 je	 SHORT $L70597
  00280	6a 01		 push	 1
  00282	8b 4d d8	 mov	 ecx, DWORD PTR $T70595[ebp]
  00285	e8 00 00 00 00	 call	 ??_GCGraph@@QAEPAXI@Z
  0028a	89 45 c8	 mov	 DWORD PTR tv204[ebp], eax
  0028d	eb 07		 jmp	 SHORT $L70598
$L70597:
  0028f	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv204[ebp], 0
$L70598:

; 492  :                 pNew = NULL;

  00296	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pNew$[ebp], 0

; 493  :                 break;

  0029d	eb 05		 jmp	 SHORT $L69695
$L69723:

; 494  :             }
; 495  :         }

  0029f	e9 fd fd ff ff	 jmp	 $L69699
$L69695:

; 496  :     }
; 497  :     *ppGraph = (IDirectMusicGraph *) pNew;

  002a4	8b 4d 0c	 mov	 ecx, DWORD PTR _ppGraph$[ebp]
  002a7	8b 55 fc	 mov	 edx, DWORD PTR _pNew$[ebp]
  002aa	89 11		 mov	 DWORD PTR [ecx], edx

; 498  : 	if (pNew) hr = S_OK;

  002ac	83 7d fc 00	 cmp	 DWORD PTR _pNew$[ebp], 0
  002b0	74 07		 je	 SHORT $L69727
  002b2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$L69727:

; 499  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  002b9	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  002bc	83 c0 0c	 add	 eax, 12			; 0000000cH
  002bf	50		 push	 eax
  002c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 500  :     return hr;

  002c6	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 501  : }

  002c9	5f		 pop	 edi
  002ca	5e		 pop	 esi
  002cb	8b e5		 mov	 esp, ebp
  002cd	5d		 pop	 ebp
  002ce	c2 08 00	 ret	 8
?Clone@CGraph@@UAGJPAPAUIDirectMusicGraph@@@Z ENDP	; CGraph::Clone
_TEXT	ENDS
PUBLIC	??_C@_0BL@KLPIMHHM@?$CFs?3?5Invalid?5pointer?5pPMsg?6?$AA@ ; `string'
PUBLIC	?CheckType@CGraph@@IAEHKPAVCToolRef@@@Z		; CGraph::CheckType
;	COMDAT ?__szValidateInterfaceName@?1??StampPMsg@CGraph@@UAGJPAU_DMUS_PMSG@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??StampPMsg@CGraph@@UAGJPAU_DMUS_PMSG@@@Z@4QBDB DB 'I'
	DB	'DirectMusicGraph::StampPMsg', 00H		; `CGraph::StampPMsg'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BL@KLPIMHHM@?$CFs?3?5Invalid?5pointer?5pPMsg?6?$AA@
CONST	SEGMENT
??_C@_0BL@KLPIMHHM@?$CFs?3?5Invalid?5pointer?5pPMsg?6?$AA@ DB '%s: Invali'
	DB	'd pointer pPMsg', 0aH, 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?StampPMsg@CGraph@@UAGJPAU_DMUS_PMSG@@@Z
_TEXT	SEGMENT
_cCount$69774 = -28
_pPlace$ = -24
_hr$ = -20
_pPriorTool$ = -16
_dwType$ = -12
_dwPChannel$ = -8
_fFound$ = -4
_this$ = 8
_pPMsg$ = 12
?StampPMsg@CGraph@@UAGJPAU_DMUS_PMSG@@@Z PROC NEAR	; CGraph::StampPMsg, COMDAT

; 529  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 530  : 	V_INAME(IDirectMusicGraph::StampPMsg);
; 531  : 	V_BUFPTR_WRITE(pPMsg, sizeof(DMUS_PMSG));

  00006	6a 38		 push	 56			; 00000038H
  00008	8b 45 0c	 mov	 eax, DWORD PTR _pPMsg$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69752
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??StampPMsg@CGraph@@UAGJPAU_DMUS_PMSG@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@KLPIMHHM@?$CFs?3?5Invalid?5pointer?5pPMsg?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69752:

; 532  : 
; 533  : 	HRESULT hr = S_OK;

  0002e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 534  :     if( NULL == pPMsg )

  00035	83 7d 0c 00	 cmp	 DWORD PTR _pPMsg$[ebp], 0
  00039	75 0a		 jne	 SHORT $L69756

; 535  : 	{
; 536  : 		return E_INVALIDARG;

  0003b	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00040	e9 92 01 00 00	 jmp	 $L69748
$L69756:

; 537  : 	}
; 538  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  00045	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 18	 add	 ecx, 24			; 00000018H
  0004b	51		 push	 ecx
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 539  : 	ENTER_API_CRITICAL_SECTION;
; 540  : 
; 541  : 	CToolRef*	pPlace = GetHead();

  00052	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?GetHead@CGraph@@QAEPAVCToolRef@@XZ ; CGraph::GetHead
  0005a	89 45 e8	 mov	 DWORD PTR _pPlace$[ebp], eax

; 542  : 	IDirectMusicTool*	pPriorTool;
; 543  : 	DWORD		dwType;
; 544  : 	DWORD		dwPChannel;
; 545  : 	
; 546  : 
; 547  : 	pPriorTool = pPMsg->pTool;

  0005d	8b 55 0c	 mov	 edx, DWORD PTR _pPMsg$[ebp]
  00060	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00063	89 45 f0	 mov	 DWORD PTR _pPriorTool$[ebp], eax

; 548  : 	dwType = pPMsg->dwType;

  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _pPMsg$[ebp]
  00069	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0006c	89 55 f4	 mov	 DWORD PTR _dwType$[ebp], edx

; 549  : 	dwPChannel = pPMsg->dwPChannel;

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _pPMsg$[ebp]
  00072	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00075	89 4d f8	 mov	 DWORD PTR _dwPChannel$[ebp], ecx

; 550  : 	if( pPriorTool )

  00078	83 7d f0 00	 cmp	 DWORD PTR _pPriorTool$[ebp], 0
  0007c	74 2d		 je	 SHORT $L69762

; 551  : 	{
; 552  : 		for( ; pPlace; pPlace = pPlace->GetNext() )

  0007e	eb 0b		 jmp	 SHORT $L69763
$L69764:
  00080	8b 4d e8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  00083	e8 00 00 00 00	 call	 ?GetNext@CToolRef@@QAEPAV1@XZ ; CToolRef::GetNext
  00088	89 45 e8	 mov	 DWORD PTR _pPlace$[ebp], eax
$L69763:
  0008b	83 7d e8 00	 cmp	 DWORD PTR _pPlace$[ebp], 0
  0008f	74 1a		 je	 SHORT $L69762

; 553  : 		{
; 554  : 			if( pPriorTool == pPlace->m_pTool )

  00091	8b 55 e8	 mov	 edx, DWORD PTR _pPlace$[ebp]
  00094	8b 45 f0	 mov	 eax, DWORD PTR _pPriorTool$[ebp]
  00097	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  0009a	75 0d		 jne	 SHORT $L69766

; 555  : 			{
; 556  : 				pPlace = pPlace->GetNext();

  0009c	8b 4d e8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  0009f	e8 00 00 00 00	 call	 ?GetNext@CToolRef@@QAEPAV1@XZ ; CToolRef::GetNext
  000a4	89 45 e8	 mov	 DWORD PTR _pPlace$[ebp], eax

; 557  : 				break;

  000a7	eb 02		 jmp	 SHORT $L69762
$L69766:

; 558  : 			}
; 559  : 		}

  000a9	eb d5		 jmp	 SHORT $L69764
$L69762:

; 560  : 	}
; 561  :     BOOL fFound = FALSE;

  000ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fFound$[ebp], 0

; 562  : 	for( ; pPlace ; pPlace = pPlace->GetNext() )

  000b2	eb 0b		 jmp	 SHORT $L69768
$L69769:
  000b4	8b 4d e8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  000b7	e8 00 00 00 00	 call	 ?GetNext@CToolRef@@QAEPAV1@XZ ; CToolRef::GetNext
  000bc	89 45 e8	 mov	 DWORD PTR _pPlace$[ebp], eax
$L69768:
  000bf	83 7d e8 00	 cmp	 DWORD PTR _pPlace$[ebp], 0
  000c3	74 68		 je	 SHORT $L69770

; 563  : 	{
; 564  : 		if( CheckType(dwType, pPlace) )

  000c5	8b 4d e8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  000c8	51		 push	 ecx
  000c9	8b 55 f4	 mov	 edx, DWORD PTR _dwType$[ebp]
  000cc	52		 push	 edx
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	e8 00 00 00 00	 call	 ?CheckType@CGraph@@IAEHKPAVCToolRef@@@Z ; CGraph::CheckType
  000d5	85 c0		 test	 eax, eax
  000d7	74 4a		 je	 SHORT $L69771

; 565  : 		{
; 566  : 			if( !pPlace->m_pdwPChannels || (dwPChannel >= DMUS_PCHANNEL_BROADCAST_GROUPS))

  000d9	8b 45 e8	 mov	 eax, DWORD PTR _pPlace$[ebp]
  000dc	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  000e0	74 06		 je	 SHORT $L69773
  000e2	83 7d f8 fc	 cmp	 DWORD PTR _dwPChannel$[ebp], -4 ; fffffffcH
  000e6	72 02		 jb	 SHORT $L69772
$L69773:

; 567  : 			{
; 568  : 				// supports all tracks, or requested channel is broadcast.
; 569  : 				break;

  000e8	eb 43		 jmp	 SHORT $L69770
$L69772:

; 570  : 			}
; 571  : 			DWORD cCount;
; 572  : 			// scan through the array of PChannels to see if this one
; 573  : 			// supports dwPChannel
; 574  : 			for( cCount = 0; cCount < pPlace->m_dwPCArraySize; cCount++)

  000ea	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _cCount$69774[ebp], 0
  000f1	eb 09		 jmp	 SHORT $L69775
$L69776:
  000f3	8b 4d e4	 mov	 ecx, DWORD PTR _cCount$69774[ebp]
  000f6	83 c1 01	 add	 ecx, 1
  000f9	89 4d e4	 mov	 DWORD PTR _cCount$69774[ebp], ecx
$L69775:
  000fc	8b 55 e8	 mov	 edx, DWORD PTR _pPlace$[ebp]
  000ff	8b 45 e4	 mov	 eax, DWORD PTR _cCount$69774[ebp]
  00102	3b 42 28	 cmp	 eax, DWORD PTR [edx+40]
  00105	73 1c		 jae	 SHORT $L69771

; 575  : 			{
; 576  : 				if( dwPChannel == pPlace->m_pdwPChannels[cCount] )

  00107	8b 4d e8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  0010a	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0010d	8b 45 e4	 mov	 eax, DWORD PTR _cCount$69774[ebp]
  00110	8b 4d f8	 mov	 ecx, DWORD PTR _dwPChannel$[ebp]
  00113	3b 0c 82	 cmp	 ecx, DWORD PTR [edx+eax*4]
  00116	75 09		 jne	 SHORT $L69778

; 577  : 				{
; 578  :                     fFound = TRUE;

  00118	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fFound$[ebp], 1

; 579  : 					// yep, it supports it
; 580  :                     break;

  0011f	eb 02		 jmp	 SHORT $L69771
$L69778:

; 581  : 				}
; 582  : 			}

  00121	eb d0		 jmp	 SHORT $L69776
$L69771:

; 583  : 		}
; 584  :         if (fFound) break;

  00123	83 7d fc 00	 cmp	 DWORD PTR _fFound$[ebp], 0
  00127	74 02		 je	 SHORT $L69779
  00129	eb 02		 jmp	 SHORT $L69770
$L69779:

; 585  : 	}

  0012b	eb 87		 jmp	 SHORT $L69769
$L69770:

; 586  : 	// release the current tool
; 587  : 	if( pPMsg->pTool )

  0012d	8b 55 0c	 mov	 edx, DWORD PTR _pPMsg$[ebp]
  00130	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  00134	74 1c		 je	 SHORT $L69780

; 588  : 	{
; 589  : 		pPMsg->pTool->Release();

  00136	8b 45 0c	 mov	 eax, DWORD PTR _pPMsg$[ebp]
  00139	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0013c	8b 55 0c	 mov	 edx, DWORD PTR _pPMsg$[ebp]
  0013f	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00142	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00144	50		 push	 eax
  00145	ff 51 08	 call	 DWORD PTR [ecx+8]

; 590  : 		pPMsg->pTool = NULL;

  00148	8b 55 0c	 mov	 edx, DWORD PTR _pPMsg$[ebp]
  0014b	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
$L69780:

; 591  : 	}
; 592  : 	if( NULL == pPlace )

  00152	83 7d e8 00	 cmp	 DWORD PTR _pPlace$[ebp], 0
  00156	75 09		 jne	 SHORT $L69781

; 593  : 	{
; 594  : 		hr = DMUS_S_LAST_TOOL;

  00158	c7 45 ec 11 12
	78 08		 mov	 DWORD PTR _hr$[ebp], 142086673 ; 08781211H

; 595  : 	}
; 596  : 	else

  0015f	eb 66		 jmp	 SHORT $L69786
$L69781:

; 597  :     {
; 598  :         // if there is no graph pointer, set it to this
; 599  : 	    if( NULL == pPMsg->pGraph )

  00161	8b 45 0c	 mov	 eax, DWORD PTR _pPMsg$[ebp]
  00164	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00168	75 15		 jne	 SHORT $L69787

; 600  : 	    {
; 601  : 		    pPMsg->pGraph = this;

  0016a	8b 4d 0c	 mov	 ecx, DWORD PTR _pPMsg$[ebp]
  0016d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00170	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 602  : 		    AddRef();

  00173	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00176	8b 08		 mov	 ecx, DWORD PTR [eax]
  00178	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0017b	52		 push	 edx
  0017c	ff 51 04	 call	 DWORD PTR [ecx+4]
$L69787:

; 603  : 	    }
; 604  : 	    // set to the new tool and addref
; 605  :         if (pPlace->m_pTool) // Just in case, the ptool sometimes goes away in debugging situations after a long break.

  0017f	8b 45 e8	 mov	 eax, DWORD PTR _pPlace$[ebp]
  00182	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00186	74 1e		 je	 SHORT $L69788

; 606  :         {
; 607  : 	        pPMsg->pTool = pPlace->m_pTool;

  00188	8b 4d 0c	 mov	 ecx, DWORD PTR _pPMsg$[ebp]
  0018b	8b 55 e8	 mov	 edx, DWORD PTR _pPlace$[ebp]
  0018e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00191	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 608  : 	        pPMsg->pTool->AddRef();

  00194	8b 4d 0c	 mov	 ecx, DWORD PTR _pPMsg$[ebp]
  00197	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0019a	8b 45 0c	 mov	 eax, DWORD PTR _pPMsg$[ebp]
  0019d	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001a0	8b 12		 mov	 edx, DWORD PTR [edx]
  001a2	51		 push	 ecx
  001a3	ff 52 04	 call	 DWORD PTR [edx+4]
$L69788:

; 609  :         }
; 610  : 	    // set the event's queue type
; 611  : 	    pPMsg->dwFlags &= ~(DMUS_PMSGF_TOOL_IMMEDIATE | DMUS_PMSGF_TOOL_QUEUE | DMUS_PMSGF_TOOL_ATTIME);

  001a6	8b 45 0c	 mov	 eax, DWORD PTR _pPMsg$[ebp]
  001a9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001ac	83 e1 e3	 and	 ecx, -29		; ffffffe3H
  001af	8b 55 0c	 mov	 edx, DWORD PTR _pPMsg$[ebp]
  001b2	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 612  : 	    pPMsg->dwFlags |= pPlace->m_dwQueue;

  001b5	8b 45 0c	 mov	 eax, DWORD PTR _pPMsg$[ebp]
  001b8	8b 4d e8	 mov	 ecx, DWORD PTR _pPlace$[ebp]
  001bb	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  001be	0b 51 1c	 or	 edx, DWORD PTR [ecx+28]
  001c1	8b 45 0c	 mov	 eax, DWORD PTR _pPMsg$[ebp]
  001c4	89 50 14	 mov	 DWORD PTR [eax+20], edx
$L69786:

; 613  :     }
; 614  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  001c7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001ca	83 c1 18	 add	 ecx, 24			; 00000018H
  001cd	51		 push	 ecx
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 615  : 	LEAVE_API_CRITICAL_SECTION;
; 616  : 	return hr;

  001d4	8b 45 ec	 mov	 eax, DWORD PTR _hr$[ebp]
$L69748:

; 617  : }

  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c2 08 00	 ret	 8
?StampPMsg@CGraph@@UAGJPAU_DMUS_PMSG@@@Z ENDP		; CGraph::StampPMsg
_TEXT	ENDS
PUBLIC	??_C@_0DJ@CLPCNMAH@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BK@COBHEKOB@pToolRef?9?$DOm_pdwMediaTypes?$AA@ ; `string'
EXTRN	__imp__RtlAssert@16:NEAR
;	COMDAT ??_C@_0DJ@CLPCNMAH@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DJ@CLPCNMAH@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dmusic\dmime\dmgraph.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@COBHEKOB@pToolRef?9?$DOm_pdwMediaTypes?$AA@
CONST	SEGMENT
??_C@_0BK@COBHEKOB@pToolRef?9?$DOm_pdwMediaTypes?$AA@ DB 'pToolRef->m_pdw'
	DB	'MediaTypes', 00H				; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?CheckType@CGraph@@IAEHKPAVCToolRef@@@Z
_TEXT	SEGMENT
_this$ = -12
_dw$69737 = -8
_fReturn$ = -4
_dwType$ = 8
_pToolRef$ = 12
?CheckType@CGraph@@IAEHKPAVCToolRef@@@Z PROC NEAR	; CGraph::CheckType, COMDAT
; _this$ = ecx

; 505  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 506  : 	BOOL fReturn = FALSE;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fReturn$[ebp], 0

; 507  : 	if( pToolRef->m_dwMTArraySize == 0 )

  00010	8b 45 0c	 mov	 eax, DWORD PTR _pToolRef$[ebp]
  00013	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00017	75 09		 jne	 SHORT $L69735

; 508  : 	{
; 509  : 		fReturn = TRUE; // supports all types

  00019	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fReturn$[ebp], 1

; 510  : 	}
; 511  : 	else

  00020	eb 59		 jmp	 SHORT $L69736
$L69735:

; 512  : 	{
; 513  : 		DWORD dw;
; 514  : 		ASSERT( pToolRef->m_pdwMediaTypes );

  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _pToolRef$[ebp]
  00025	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00029	75 17		 jne	 SHORT $L69738
  0002b	6a 00		 push	 0
  0002d	68 02 02 00 00	 push	 514			; 00000202H
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@CLPCNMAH@c?3?2xbox?2private?2windows?2directx?2@
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@COBHEKOB@pToolRef?9?$DOm_pdwMediaTypes?$AA@
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69738:

; 515  : 		for( dw = 0; dw < pToolRef->m_dwMTArraySize; dw++ )

  00042	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dw$69737[ebp], 0
  00049	eb 09		 jmp	 SHORT $L69741
$L69742:
  0004b	8b 55 f8	 mov	 edx, DWORD PTR _dw$69737[ebp]
  0004e	83 c2 01	 add	 edx, 1
  00051	89 55 f8	 mov	 DWORD PTR _dw$69737[ebp], edx
$L69741:
  00054	8b 45 0c	 mov	 eax, DWORD PTR _pToolRef$[ebp]
  00057	8b 4d f8	 mov	 ecx, DWORD PTR _dw$69737[ebp]
  0005a	3b 48 20	 cmp	 ecx, DWORD PTR [eax+32]
  0005d	73 1c		 jae	 SHORT $L69736

; 516  : 		{
; 517  : 			if( dwType == pToolRef->m_pdwMediaTypes[dw] )

  0005f	8b 55 0c	 mov	 edx, DWORD PTR _pToolRef$[ebp]
  00062	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _dw$69737[ebp]
  00068	8b 55 08	 mov	 edx, DWORD PTR _dwType$[ebp]
  0006b	3b 14 88	 cmp	 edx, DWORD PTR [eax+ecx*4]
  0006e	75 09		 jne	 SHORT $L69744

; 518  : 			{
; 519  : 				fReturn = TRUE;

  00070	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fReturn$[ebp], 1

; 520  : 				break;

  00077	eb 02		 jmp	 SHORT $L69736
$L69744:

; 521  : 			}
; 522  : 		}

  00079	eb d0		 jmp	 SHORT $L69742
$L69736:

; 523  : 	}
; 524  : 	return fReturn;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _fReturn$[ebp]

; 525  : }

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 08 00	 ret	 8
?CheckType@CGraph@@IAEHKPAVCToolRef@@@Z ENDP		; CGraph::CheckType
_TEXT	ENDS
PUBLIC	??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ ; `string'
EXTRN	_CLSID_DirectMusicGraph:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CGraph@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetClassID@CGraph@@UAGJPAU_GUID@@@Z@4QBDB DB 'C'
	DB	'Graph::GetClassID', 00H			; `CGraph::GetClassID'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT
??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pClassID', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetClassID@CGraph@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_pClassID$ = 12
?GetClassID@CGraph@@UAGJPAU_GUID@@@Z PROC NEAR		; CGraph::GetClassID, COMDAT

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 624  : 	V_INAME(CGraph::GetClassID);
; 625  : 	V_PTR_WRITE(pClassID, CLSID); 

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pClassID$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L69796
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetClassID@CGraph@@UAGJPAU_GUID@@@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L69796:

; 626  : 	*pClassID = CLSID_DirectMusicGraph;

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _pClassID$[ebp]
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicGraph
  00034	89 11		 mov	 DWORD PTR [ecx], edx
  00036	a1 04 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicGraph+4
  0003b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0003e	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicGraph+8
  00044	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00047	a1 0c 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicGraph+12
  0004c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 627  : 	return S_OK;

  0004f	33 c0		 xor	 eax, eax

; 628  : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?GetClassID@CGraph@@UAGJPAU_GUID@@@Z ENDP		; CGraph::GetClassID
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsDirty@CGraph@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?IsDirty@CGraph@@UAGJXZ PROC NEAR			; CGraph::IsDirty, COMDAT

; 634  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 635  : 	return S_FALSE;

  00003	b8 01 00 00 00	 mov	 eax, 1

; 636  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?IsDirty@CGraph@@UAGJXZ ENDP				; CGraph::IsDirty
_TEXT	ENDS
PUBLIC	??_C@_0DE@PPCGKDDL@Error?3?5Unknown?5file?5format?5when?5@ ; `string'
PUBLIC	??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ ; `string'
PUBLIC	?Load@CGraph@@QAEJPAVCRiffParser@@@Z		; CGraph::Load
EXTRN	??0CRiffParser@@QAE@PAUIStream@@@Z:NEAR		; CRiffParser::CRiffParser
EXTRN	?NextChunk@CRiffParser@@QAEHPAJ@Z:NEAR		; CRiffParser::NextChunk
EXTRN	?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z:NEAR	; CRiffParser::EnterList
;	COMDAT ?__szValidateInterfaceName@?1??Load@CGraph@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Load@CGraph@@UAGJPAUIStream@@@Z@4QBDB DB 'I'
	DB	'PersistStream::Load', 00H			; `CGraph::Load'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT
??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pIStream', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@PPCGKDDL@Error?3?5Unknown?5file?5format?5when?5@
CONST	SEGMENT
??_C@_0DE@PPCGKDDL@Error?3?5Unknown?5file?5format?5when?5@ DB 'Error: Unk'
	DB	'nown file format when parsing Tool Graph', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Load@CGraph@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT
_hr$ = -68
_Parser$ = -64
_ckMain$ = -32
_this$ = 8
_pIStream$ = 12
?Load@CGraph@@UAGJPAUIStream@@@Z PROC NEAR		; CGraph::Load, COMDAT

; 639  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H

; 640  : 	V_INAME(IPersistStream::Load);
; 641  : 	V_INTERFACE(pIStream);

  00006	6a 04		 push	 4
  00008	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69810
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CGraph@@UAGJPAUIStream@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69810:
  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003b	85 c0		 test	 eax, eax
  0003d	74 19		 je	 SHORT $L69813
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CGraph@@UAGJPAUIStream@@@Z@4QBDB
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00049	6a ff		 push	 -1
  0004b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	e8 00 00 00 00	 call	 _DebugBreak@0
$L69813:
  00058	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00065	85 c0		 test	 eax, eax
  00067	74 19		 je	 SHORT $L69815
  00069	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CGraph@@UAGJPAUIStream@@@Z@4QBDB
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00073	6a ff		 push	 -1
  00075	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	e8 00 00 00 00	 call	 _DebugBreak@0
$L69815:

; 642  : 
; 643  :     CRiffParser Parser(pIStream);

  00082	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00085	50		 push	 eax
  00086	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  00089	e8 00 00 00 00	 call	 ??0CRiffParser@@QAE@PAUIStream@@@Z ; CRiffParser::CRiffParser

; 644  :     RIFFIO ckMain;
; 645  :     HRESULT hr = S_OK;

  0008e	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 646  : 
; 647  :     Parser.EnterList(&ckMain);  

  00095	8d 4d e0	 lea	 ecx, DWORD PTR _ckMain$[ebp]
  00098	51		 push	 ecx
  00099	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  0009c	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList

; 648  :     if (Parser.NextChunk(&hr) && (ckMain.fccType == DMUS_FOURCC_TOOLGRAPH_FORM))

  000a1	8d 55 bc	 lea	 edx, DWORD PTR _hr$[ebp]
  000a4	52		 push	 edx
  000a5	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000a8	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  000ad	85 c0		 test	 eax, eax
  000af	74 29		 je	 SHORT $L69828
  000b1	81 7d e8 44 4d
	54 47		 cmp	 DWORD PTR _ckMain$[ebp+8], 1196707140 ; 47544d44H
  000b8	75 20		 jne	 SHORT $L69828

; 649  :     {
; 650  :         Shutdown(); // Clear out the tools that are currently in the graph.

  000ba	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	83 e8 04	 sub	 eax, 4
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ?Shutdown@CGraph@@IAGJXZ ; CGraph::Shutdown

; 651  :         hr = Load(&Parser);

  000c6	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000c9	51		 push	 ecx
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	83 e9 04	 sub	 ecx, 4
  000d0	e8 00 00 00 00	 call	 ?Load@CGraph@@QAEJPAVCRiffParser@@@Z ; CGraph::Load
  000d5	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 652  :     }
; 653  :     else

  000d8	eb 16		 jmp	 SHORT $L69829
$L69828:

; 654  :     {
; 655  :         Trace(1,"Error: Unknown file format when parsing Tool Graph\n");

  000da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@PPCGKDDL@Error?3?5Unknown?5file?5format?5when?5@
  000df	6a 01		 push	 1
  000e1	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000e6	83 c4 08	 add	 esp, 8

; 656  :         hr = DMUS_E_DESCEND_CHUNK_FAIL;

  000e9	c7 45 bc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L69829:

; 657  :     }
; 658  :     return hr;

  000f0	8b 45 bc	 mov	 eax, DWORD PTR _hr$[ebp]

; 659  : }

  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 08 00	 ret	 8
?Load@CGraph@@UAGJPAUIStream@@@Z ENDP			; CGraph::Load
_TEXT	ENDS
PUBLIC	?LoadTool@CGraph@@IAEJPAVCRiffParser@@@Z	; CGraph::LoadTool
EXTRN	?ReadChunk@CInfo@@QAEJPAVCRiffParser@@K@Z:NEAR	; CInfo::ReadChunk
EXTRN	?LeaveList@CRiffParser@@QAEXXZ:NEAR		; CRiffParser::LeaveList
; Function compile flags: /Odt
;	COMDAT ?Load@CGraph@@QAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT
tv76 = -80
tv70 = -76
_this$ = -72
_hr$ = -68
_ckNext$ = -64
_ckChild$ = -32
_pParser$ = 8
?Load@CGraph@@QAEJPAVCRiffParser@@@Z PROC NEAR		; CGraph::Load, COMDAT
; _this$ = ecx

; 663  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	89 4d b8	 mov	 DWORD PTR _this$[ebp], ecx

; 664  : 	RIFFIO ckNext;
; 665  :     RIFFIO ckChild;
; 666  :     HRESULT hr = S_OK;

  00009	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 667  :     pParser->EnterList(&ckNext);

  00010	8d 45 c0	 lea	 eax, DWORD PTR _ckNext$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00017	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L69841:

; 668  : 	while(pParser->NextChunk(&hr))

  0001c	8d 4d bc	 lea	 ecx, DWORD PTR _hr$[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00023	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  00028	85 c0		 test	 eax, eax
  0002a	0f 84 dc 00 00
	00		 je	 $L69842

; 669  : 	{
; 670  : 		switch(ckNext.ckid)
; 671  : 		{

  00030	8b 55 c0	 mov	 edx, DWORD PTR _ckNext$[ebp]
  00033	89 55 b4	 mov	 DWORD PTR tv70[ebp], edx
  00036	81 7d b4 64 61
	74 65		 cmp	 DWORD PTR tv70[ebp], 1702125924 ; 65746164H
  0003d	77 20		 ja	 SHORT $L70617
  0003f	81 7d b4 64 61
	74 65		 cmp	 DWORD PTR tv70[ebp], 1702125924 ; 65746164H
  00046	74 2e		 je	 SHORT $L69855
  00048	81 7d b4 4c 49
	53 54		 cmp	 DWORD PTR tv70[ebp], 1414744396 ; 5453494cH
  0004f	74 3d		 je	 SHORT $L69888
  00051	81 7d b4 67 75
	69 64		 cmp	 DWORD PTR tv70[ebp], 1684632935 ; 64697567H
  00058	74 1c		 je	 SHORT $L69855
  0005a	e9 a8 00 00 00	 jmp	 $L69844
$L70617:
  0005f	81 7d b4 63 61
	74 67		 cmp	 DWORD PTR tv70[ebp], 1735680355 ; 67746163H
  00066	74 0e		 je	 SHORT $L69855
  00068	81 7d b4 76 65
	72 73		 cmp	 DWORD PTR tv70[ebp], 1936876918 ; 73726576H
  0006f	74 05		 je	 SHORT $L69855
  00071	e9 91 00 00 00	 jmp	 $L69844
$L69855:

; 672  :         case DMUS_FOURCC_GUID_CHUNK:
; 673  :         case DMUS_FOURCC_VERSION_CHUNK:
; 674  :         case DMUS_FOURCC_CATEGORY_CHUNK:
; 675  :         case DMUS_FOURCC_DATE_CHUNK:
; 676  :             hr = m_Info.ReadChunk(pParser,ckNext.ckid);

  00076	8b 45 c0	 mov	 eax, DWORD PTR _ckNext$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0007d	51		 push	 ecx
  0007e	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	83 c1 40	 add	 ecx, 64			; 00000040H
  00084	e8 00 00 00 00	 call	 ?ReadChunk@CInfo@@QAEJPAVCRiffParser@@K@Z ; CInfo::ReadChunk
  00089	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 677  : 			break;

  0008c	eb 79		 jmp	 SHORT $L69844
$L69888:

; 678  : 		case FOURCC_LIST:
; 679  : 			switch(ckNext.fccType)
; 680  : 			{

  0008e	8b 55 c8	 mov	 edx, DWORD PTR _ckNext$[ebp+8]
  00091	89 55 b0	 mov	 DWORD PTR tv76[ebp], edx
  00094	81 7d b0 55 4e
	46 4f		 cmp	 DWORD PTR tv76[ebp], 1330007637 ; 4f464e55H
  0009b	74 0b		 je	 SHORT $L69901
  0009d	81 7d b0 74 6f
	6c 6c		 cmp	 DWORD PTR tv76[ebp], 1819045748 ; 6c6c6f74H
  000a4	74 1a		 je	 SHORT $L69910
  000a6	eb 5f		 jmp	 SHORT $L69844
$L69901:

; 681  :                 case DMUS_FOURCC_UNFO_LIST:
; 682  :                     hr = m_Info.ReadChunk(pParser,ckNext.fccType);

  000a8	8b 45 c8	 mov	 eax, DWORD PTR _ckNext$[ebp+8]
  000ab	50		 push	 eax
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000af	51		 push	 ecx
  000b0	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	83 c1 40	 add	 ecx, 64			; 00000040H
  000b6	e8 00 00 00 00	 call	 ?ReadChunk@CInfo@@QAEJPAVCRiffParser@@K@Z ; CInfo::ReadChunk
  000bb	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 683  : 					break;

  000be	eb 47		 jmp	 SHORT $L69844
$L69910:

; 684  : 				case DMUS_FOURCC_TOOL_LIST:
; 685  :                     pParser->EnterList(&ckChild);

  000c0	8d 55 e0	 lea	 edx, DWORD PTR _ckChild$[ebp]
  000c3	52		 push	 edx
  000c4	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000c7	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L69912:

; 686  : 	                while(pParser->NextChunk(&hr))

  000cc	8d 45 bc	 lea	 eax, DWORD PTR _hr$[ebp]
  000cf	50		 push	 eax
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000d3	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  000d8	85 c0		 test	 eax, eax
  000da	74 23		 je	 SHORT $L69913

; 687  : 	                {
; 688  : 		                if ((ckChild.ckid == FOURCC_RIFF) && 
; 689  :                             (ckChild.fccType == DMUS_FOURCC_TOOL_FORM))

  000dc	81 7d e0 52 49
	46 46		 cmp	 DWORD PTR _ckChild$[ebp], 1179011410 ; 46464952H
  000e3	75 18		 jne	 SHORT $L69930
  000e5	81 7d e8 44 4d
	54 4c		 cmp	 DWORD PTR _ckChild$[ebp+8], 1280593220 ; 4c544d44H
  000ec	75 0f		 jne	 SHORT $L69930

; 690  :                         {
; 691  : 			                hr = LoadTool(pParser);

  000ee	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000f1	51		 push	 ecx
  000f2	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	e8 00 00 00 00	 call	 ?LoadTool@CGraph@@IAEJPAVCRiffParser@@@Z ; CGraph::LoadTool
  000fa	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax
$L69930:

; 692  : 		                } 
; 693  : 	                }

  000fd	eb cd		 jmp	 SHORT $L69912
$L69913:

; 694  :                     pParser->LeaveList();

  000ff	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00102	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList
$L69844:

; 695  : 					break;
; 696  : 			}
; 697  : 			break;
; 698  : 		}
; 699  : 	}

  00107	e9 10 ff ff ff	 jmp	 $L69841
$L69842:

; 700  :     pParser->LeaveList();

  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0010f	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 701  : 
; 702  : 	return hr;

  00114	8b 45 bc	 mov	 eax, DWORD PTR _hr$[ebp]

; 703  : }

  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
?Load@CGraph@@QAEJPAVCRiffParser@@@Z ENDP		; CGraph::Load
_TEXT	ENDS
PUBLIC	??_C@_0DC@KHAODKAN@Error?3?5Tool?5header?5chunk?5not?5fir@ ; `string'
PUBLIC	??_C@_0BN@ILHNFHGG@Error?3?5Invalid?5Tool?5header?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@FBJJDMKD@Error?3?5File?5read?5error?5loading?5T@ ; `string'
PUBLIC	??_C@_0CN@IKMLDJOH@Error?5reading?5Tool?5chunk?5?9?5not?5R@ ; `string'
PUBLIC	?CreateTool@CGraph@@IAEJU_DMUS_IO_TOOL_HEADER@@PAUIStream@@PAK@Z ; CGraph::CreateTool
PUBLIC	?GetStream@CRiffParser@@QAEPAUIStream@@XZ	; CRiffParser::GetStream
EXTRN	?SeekBack@CRiffParser@@QAEJXZ:NEAR		; CRiffParser::SeekBack
EXTRN	?SeekForward@CRiffParser@@QAEJXZ:NEAR		; CRiffParser::SeekForward
EXTRN	?Read@CRiffParser@@QAEJPAXK@Z:NEAR		; CRiffParser::Read
;	COMDAT ??_C@_0DC@KHAODKAN@Error?3?5Tool?5header?5chunk?5not?5fir@
CONST	SEGMENT
??_C@_0DC@KHAODKAN@Error?3?5Tool?5header?5chunk?5not?5fir@ DB 'Error: Too'
	DB	'l header chunk not first in tool list.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@ILHNFHGG@Error?3?5Invalid?5Tool?5header?4?6?$AA@
CONST	SEGMENT
??_C@_0BN@ILHNFHGG@Error?3?5Invalid?5Tool?5header?4?6?$AA@ DB 'Error: Inv'
	DB	'alid Tool header.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FBJJDMKD@Error?3?5File?5read?5error?5loading?5T@
CONST	SEGMENT
??_C@_0CG@FBJJDMKD@Error?3?5File?5read?5error?5loading?5T@ DB 'Error: Fil'
	DB	'e read error loading Tool.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@IKMLDJOH@Error?5reading?5Tool?5chunk?5?9?5not?5R@
CONST	SEGMENT
??_C@_0CN@IKMLDJOH@Error?5reading?5Tool?5chunk?5?9?5not?5R@ DB 'Error rea'
	DB	'ding Tool chunk - not RIFF format.', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?LoadTool@CGraph@@IAEJPAVCRiffParser@@@Z
_TEXT	SEGMENT
_this$ = -96
$T70623 = -92
$T70622 = -88
$T70621 = -84
_hr$ = -80
_ioDMToolHdr$ = -76
_ckNext$ = -40
_cbSize$ = -8
_pdwPChannels$ = -4
_pParser$ = 8
?LoadTool@CGraph@@IAEJPAVCRiffParser@@@Z PROC NEAR	; CGraph::LoadTool, COMDAT
; _this$ = ecx

; 706  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d a0	 mov	 DWORD PTR _this$[ebp], ecx

; 707  : 	RIFFIO ckNext;
; 708  : 	DWORD cbSize;
; 709  : 	
; 710  : 	DMUS_IO_TOOL_HEADER ioDMToolHdr;
; 711  : 	DWORD *pdwPChannels = NULL;

  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pdwPChannels$[ebp], 0

; 712  : 
; 713  : 	HRESULT hr = S_OK; 

  00012	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 714  : 
; 715  :     pParser->EnterList(&ckNext);

  00019	8d 45 d8	 lea	 eax, DWORD PTR _ckNext$[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00020	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList

; 716  : 
; 717  :     if (pParser->NextChunk(&hr))

  00025	8d 4d b0	 lea	 ecx, DWORD PTR _hr$[ebp]
  00028	51		 push	 ecx
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0002c	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  00031	85 c0		 test	 eax, eax
  00033	0f 84 0c 01 00
	00		 je	 $L69941

; 718  :     {
; 719  : 		if(ckNext.ckid != DMUS_FOURCC_TOOL_CHUNK)

  00039	81 7d d8 74 6f
	6c 68		 cmp	 DWORD PTR _ckNext$[ebp], 1751936884 ; 686c6f74H
  00040	74 21		 je	 SHORT $L69950

; 720  : 		{
; 721  :             pParser->LeaveList();

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00045	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 722  :             Trace(1,"Error: Tool header chunk not first in tool list.\n");

  0004a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DC@KHAODKAN@Error?3?5Tool?5header?5chunk?5not?5fir@
  0004f	6a 01		 push	 1
  00051	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00056	83 c4 08	 add	 esp, 8

; 723  : 			return DMUS_E_TOOL_HDR_NOT_FIRST_CK;

  00059	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  0005e	e9 95 01 00 00	 jmp	 $L69934
$L69950:

; 724  : 		}	
; 725  : 		
; 726  : 		hr = pParser->Read(&ioDMToolHdr, sizeof(DMUS_IO_TOOL_HEADER));

  00063	6a 24		 push	 36			; 00000024H
  00065	8d 55 b4	 lea	 edx, DWORD PTR _ioDMToolHdr$[ebp]
  00068	52		 push	 edx
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0006c	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  00071	89 45 b0	 mov	 DWORD PTR _hr$[ebp], eax

; 727  : 		
; 728  : 		if(ioDMToolHdr.ckid == 0 && ioDMToolHdr.fccType == NULL)

  00074	83 7d cc 00	 cmp	 DWORD PTR _ioDMToolHdr$[ebp+24], 0
  00078	75 27		 jne	 SHORT $L69954
  0007a	83 7d d0 00	 cmp	 DWORD PTR _ioDMToolHdr$[ebp+28], 0
  0007e	75 21		 jne	 SHORT $L69954

; 729  : 		{
; 730  : 			pParser->LeaveList();

  00080	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00083	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 731  :             Trace(1,"Error: Invalid Tool header.\n");

  00088	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@ILHNFHGG@Error?3?5Invalid?5Tool?5header?4?6?$AA@
  0008d	6a 01		 push	 1
  0008f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00094	83 c4 08	 add	 esp, 8

; 732  : 			return DMUS_E_INVALID_TOOL_HDR;

  00097	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  0009c	e9 57 01 00 00	 jmp	 $L69934
$L69954:

; 733  : 		}
; 734  : 		
; 735  : 		if(ioDMToolHdr.cPChannels)

  000a1	83 7d c8 00	 cmp	 DWORD PTR _ioDMToolHdr$[ebp+20], 0
  000a5	0f 84 98 00 00
	00		 je	 $L69957

; 736  : 		{
; 737  : 			pdwPChannels = new DWORD[ioDMToolHdr.cPChannels];

  000ab	8b 45 c8	 mov	 eax, DWORD PTR _ioDMToolHdr$[ebp+20]
  000ae	c1 e0 02	 shl	 eax, 2
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000b7	83 c4 04	 add	 esp, 4
  000ba	89 45 ac	 mov	 DWORD PTR $T70621[ebp], eax
  000bd	8b 4d ac	 mov	 ecx, DWORD PTR $T70621[ebp]
  000c0	89 4d fc	 mov	 DWORD PTR _pdwPChannels$[ebp], ecx

; 738  : 			// subtract 1 from cPChannels, because 1 element is actually stored
; 739  : 			// in the ioDMToolHdr array.
; 740  : 			cbSize = (ioDMToolHdr.cPChannels - 1) * sizeof(DWORD);

  000c3	8b 55 c8	 mov	 edx, DWORD PTR _ioDMToolHdr$[ebp+20]
  000c6	8d 04 95 fc ff
	ff ff		 lea	 eax, DWORD PTR [edx*4-4]
  000cd	89 45 f8	 mov	 DWORD PTR _cbSize$[ebp], eax

; 741  : 			if(pdwPChannels)

  000d0	83 7d fc 00	 cmp	 DWORD PTR _pdwPChannels$[ebp], 0
  000d4	74 66		 je	 SHORT $L69961

; 742  : 			{
; 743  : 				pdwPChannels[0] = ioDMToolHdr.dwPChannels[0];

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR _pdwPChannels$[ebp]
  000d9	8b 55 d4	 mov	 edx, DWORD PTR _ioDMToolHdr$[ebp+32]
  000dc	89 11		 mov	 DWORD PTR [ecx], edx

; 744  : 				if( cbSize )

  000de	83 7d f8 00	 cmp	 DWORD PTR _cbSize$[ebp], 0
  000e2	74 56		 je	 SHORT $L69962

; 745  : 				{
; 746  : 					hr = pParser->Read(&pdwPChannels[1], cbSize);

  000e4	8b 45 f8	 mov	 eax, DWORD PTR _cbSize$[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _pdwPChannels$[ebp]
  000eb	83 c1 04	 add	 ecx, 4
  000ee	51		 push	 ecx
  000ef	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000f2	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  000f7	89 45 b0	 mov	 DWORD PTR _hr$[ebp], eax

; 747  : 					if(FAILED(hr))

  000fa	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000fe	7d 3a		 jge	 SHORT $L69962

; 748  : 					{
; 749  : 						delete [] pdwPChannels;

  00100	8b 55 fc	 mov	 edx, DWORD PTR _pdwPChannels$[ebp]
  00103	89 55 a8	 mov	 DWORD PTR $T70622[ebp], edx
  00106	8b 45 a8	 mov	 eax, DWORD PTR $T70622[ebp]
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0010f	83 c4 04	 add	 esp, 4

; 750  : 						pdwPChannels = NULL;

  00112	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pdwPChannels$[ebp], 0

; 751  :                         pParser->LeaveList();

  00119	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0011c	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 752  :                         Trace(1,"Error: File read error loading Tool.\n");

  00121	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FBJJDMKD@Error?3?5File?5read?5error?5loading?5T@
  00126	6a 01		 push	 1
  00128	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0012d	83 c4 08	 add	 esp, 8

; 753  : 						return DMUS_E_CANNOTREAD;

  00130	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00135	e9 be 00 00 00	 jmp	 $L69934
$L69962:

; 754  : 					}
; 755  : 				}
; 756  : 			}
; 757  : 			else

  0013a	eb 07		 jmp	 SHORT $L69957
$L69961:

; 758  : 			{
; 759  : 				hr = E_OUTOFMEMORY;

  0013c	c7 45 b0 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$L69957:

; 760  : 			}
; 761  : 		}
; 762  : 	}
; 763  : 	else

  00143	eb 1e		 jmp	 SHORT $L69974
$L69941:

; 764  : 	{
; 765  :         pParser->LeaveList();

  00145	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00148	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 766  :         Trace(1,"Error reading Tool chunk - not RIFF format.\n");

  0014d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@IKMLDJOH@Error?5reading?5Tool?5chunk?5?9?5not?5R@
  00152	6a 01		 push	 1
  00154	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00159	83 c4 08	 add	 esp, 8

; 767  : 		hr = DMUS_E_DESCEND_CHUNK_FAIL;

  0015c	c7 45 b0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L69974:

; 768  : 	}
; 769  :     while (pParser->NextChunk(&hr))

  00163	8d 4d b0	 lea	 ecx, DWORD PTR _hr$[ebp]
  00166	51		 push	 ecx
  00167	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  0016a	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  0016f	85 c0		 test	 eax, eax
  00171	74 5b		 je	 SHORT $L69975

; 770  :     {
; 771  :         if((((ckNext.ckid == FOURCC_LIST) || (ckNext.ckid == FOURCC_RIFF))
; 772  : 		    && ckNext.fccType == ioDMToolHdr.fccType) ||
; 773  :             (ckNext.ckid == ioDMToolHdr.ckid))

  00173	81 7d d8 4c 49
	53 54		 cmp	 DWORD PTR _ckNext$[ebp], 1414744396 ; 5453494cH
  0017a	74 09		 je	 SHORT $L69995
  0017c	81 7d d8 52 49
	46 46		 cmp	 DWORD PTR _ckNext$[ebp], 1179011410 ; 46464952H
  00183	75 08		 jne	 SHORT $L69994
$L69995:
  00185	8b 55 e0	 mov	 edx, DWORD PTR _ckNext$[ebp+8]
  00188	3b 55 d0	 cmp	 edx, DWORD PTR _ioDMToolHdr$[ebp+28]
  0018b	74 08		 je	 SHORT $L69993
$L69994:
  0018d	8b 45 d8	 mov	 eax, DWORD PTR _ckNext$[ebp]
  00190	3b 45 cc	 cmp	 eax, DWORD PTR _ioDMToolHdr$[ebp+24]
  00193	75 37		 jne	 SHORT $L69992
$L69993:

; 774  : 		{
; 775  :             pParser->SeekBack();

  00195	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00198	e8 00 00 00 00	 call	 ?SeekBack@CRiffParser@@QAEJXZ ; CRiffParser::SeekBack

; 776  : 			hr = CreateTool(ioDMToolHdr, pParser->GetStream(), pdwPChannels);

  0019d	8b 4d fc	 mov	 ecx, DWORD PTR _pdwPChannels$[ebp]
  001a0	51		 push	 ecx
  001a1	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  001a4	e8 00 00 00 00	 call	 ?GetStream@CRiffParser@@QAEPAUIStream@@XZ ; CRiffParser::GetStream
  001a9	50		 push	 eax
  001aa	83 ec 24	 sub	 esp, 36			; 00000024H
  001ad	b9 09 00 00 00	 mov	 ecx, 9
  001b2	8d 75 b4	 lea	 esi, DWORD PTR _ioDMToolHdr$[ebp]
  001b5	8b fc		 mov	 edi, esp
  001b7	f3 a5		 rep movsd
  001b9	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  001bc	e8 00 00 00 00	 call	 ?CreateTool@CGraph@@IAEJU_DMUS_IO_TOOL_HEADER@@PAUIStream@@PAK@Z ; CGraph::CreateTool
  001c1	89 45 b0	 mov	 DWORD PTR _hr$[ebp], eax

; 777  :             pParser->SeekForward();

  001c4	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  001c7	e8 00 00 00 00	 call	 ?SeekForward@CRiffParser@@QAEJXZ ; CRiffParser::SeekForward
$L69992:

; 778  : 		} 
; 779  : 	}

  001cc	eb 95		 jmp	 SHORT $L69974
$L69975:

; 780  : 
; 781  :     pParser->LeaveList();

  001ce	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  001d1	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 782  : 
; 783  :     if( pdwPChannels )

  001d6	83 7d fc 00	 cmp	 DWORD PTR _pdwPChannels$[ebp], 0
  001da	74 19		 je	 SHORT $L69996

; 784  :     {
; 785  :         delete [] pdwPChannels;

  001dc	8b 55 fc	 mov	 edx, DWORD PTR _pdwPChannels$[ebp]
  001df	89 55 a4	 mov	 DWORD PTR $T70623[ebp], edx
  001e2	8b 45 a4	 mov	 eax, DWORD PTR $T70623[ebp]
  001e5	50		 push	 eax
  001e6	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001eb	83 c4 04	 add	 esp, 4

; 786  :         pdwPChannels = NULL;

  001ee	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pdwPChannels$[ebp], 0
$L69996:

; 787  :     }
; 788  : 
; 789  : 	return hr;

  001f5	8b 45 b0	 mov	 eax, DWORD PTR _hr$[ebp]
$L69934:

; 790  : }

  001f8	5f		 pop	 edi
  001f9	5e		 pop	 esi
  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c2 04 00	 ret	 4
?LoadTool@CGraph@@IAEJPAVCRiffParser@@@Z ENDP		; CGraph::LoadTool
_TEXT	ENDS
PUBLIC	??_C@_07KCKPANJI@pStream?$AA@			; `string'
PUBLIC	??_C@_0CB@IPMBDPJO@Error?5creating?5tool?5for?5loading?6@ ; `string'
PUBLIC	??_C@_0BO@HINHCEF@Error?5loading?5data?5into?5tool?6?$AA@ ; `string'
EXTRN	?DebugAssert@@YGXPAD0K@Z:NEAR			; DebugAssert
EXTRN	_IID_IDirectMusicTool:BYTE
EXTRN	_DirectMusicCreateInstance@16:NEAR
;	COMDAT ??_C@_07KCKPANJI@pStream?$AA@
CONST	SEGMENT
??_C@_07KCKPANJI@pStream?$AA@ DB 'pStream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IPMBDPJO@Error?5creating?5tool?5for?5loading?6@
CONST	SEGMENT
??_C@_0CB@IPMBDPJO@Error?5creating?5tool?5for?5loading?6@ DB 'Error creat'
	DB	'ing tool for loading', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HINHCEF@Error?5loading?5data?5into?5tool?6?$AA@
CONST	SEGMENT
??_C@_0BO@HINHCEF@Error?5loading?5data?5into?5tool?6?$AA@ DB 'Error loadi'
	DB	'ng data into tool', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?CreateTool@CGraph@@IAEJU_DMUS_IO_TOOL_HEADER@@PAUIStream@@PAK@Z
_TEXT	SEGMENT
_this$ = -16
_hr$ = -12
_pDMTool$ = -8
_pIPersistStream$ = -4
_ioDMToolHdr$ = 8
_pStream$ = 44
_pdwPChannels$ = 48
?CreateTool@CGraph@@IAEJU_DMUS_IO_TOOL_HEADER@@PAUIStream@@PAK@Z PROC NEAR ; CGraph::CreateTool, COMDAT
; _this$ = ecx

; 793  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 794  : 	assert(pStream);

  00009	83 7d 2c 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  0000d	75 14		 jne	 SHORT $L70627
  0000f	68 1a 03 00 00	 push	 794			; 0000031aH
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@CLPCNMAH@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07KCKPANJI@pStream?$AA@
  0001e	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L70627:

; 795  : 
; 796  : 	IDirectMusicTool* pDMTool = NULL;

  00023	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pDMTool$[ebp], 0

; 797  : 	HRESULT hr = DirectMusicCreateInstance(ioDMToolHdr.guidClassID,
; 798  : 								  NULL,
; 799  : 								  IID_IDirectMusicTool,
; 800  : 								  (void**)&pDMTool);

  0002a	8d 4d f8	 lea	 ecx, DWORD PTR _pDMTool$[ebp]
  0002d	51		 push	 ecx
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTool
  00033	6a 00		 push	 0
  00035	8d 55 08	 lea	 edx, DWORD PTR _ioDMToolHdr$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 _DirectMusicCreateInstance@16
  0003e	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 801  : 	IPersistStream *pIPersistStream = NULL;

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pIPersistStream$[ebp], 0

; 802  : 	
; 803  : 	if(SUCCEEDED(hr))

  00048	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004c	7c 19		 jl	 SHORT $L70011

; 804  : 	{
; 805  : 		hr = pDMTool->QueryInterface(IID_IPersistStream, (void **)&pIPersistStream);

  0004e	8d 45 fc	 lea	 eax, DWORD PTR _pIPersistStream$[ebp]
  00051	50		 push	 eax
  00052	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPersistStream
  00057	8b 4d f8	 mov	 ecx, DWORD PTR _pDMTool$[ebp]
  0005a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _pDMTool$[ebp]
  0005f	50		 push	 eax
  00060	ff 12		 call	 DWORD PTR [edx]
  00062	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 806  : 	}
; 807  :     else

  00065	eb 0f		 jmp	 SHORT $L70013
$L70011:

; 808  :     {
; 809  :         Trace(1,"Error creating tool for loading\n");

  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@IPMBDPJO@Error?5creating?5tool?5for?5loading?6@
  0006c	6a 01		 push	 1
  0006e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00073	83 c4 08	 add	 esp, 8
$L70013:

; 810  :     }
; 811  : 
; 812  : 	if(SUCCEEDED(hr))

  00076	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0007a	7c 28		 jl	 SHORT $L70016

; 813  : 	{
; 814  : 		hr = pIPersistStream->Load(pStream);

  0007c	8b 4d 2c	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0007f	51		 push	 ecx
  00080	8b 55 fc	 mov	 edx, DWORD PTR _pIPersistStream$[ebp]
  00083	8b 02		 mov	 eax, DWORD PTR [edx]
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _pIPersistStream$[ebp]
  00088	51		 push	 ecx
  00089	ff 50 14	 call	 DWORD PTR [eax+20]
  0008c	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 815  : #ifdef DBG
; 816  :         if (FAILED(hr))

  0008f	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00093	7d 0f		 jge	 SHORT $L70016

; 817  :         {
; 818  :             Trace(1,"Error loading data into tool\n");

  00095	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@HINHCEF@Error?5loading?5data?5into?5tool?6?$AA@
  0009a	6a 01		 push	 1
  0009c	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a1	83 c4 08	 add	 esp, 8
$L70016:

; 819  :         }
; 820  : #endif
; 821  : 	}
; 822  : 
; 823  : 	if(SUCCEEDED(hr))

  000a4	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a8	7c 1f		 jl	 SHORT $L70021

; 824  : 	{
; 825  : 		hr = InsertTool(pDMTool, pdwPChannels, ioDMToolHdr.cPChannels, ioDMToolHdr.lIndex, &ioDMToolHdr.guidClassID);  

  000aa	8d 55 08	 lea	 edx, DWORD PTR _ioDMToolHdr$[ebp]
  000ad	52		 push	 edx
  000ae	8b 45 18	 mov	 eax, DWORD PTR _ioDMToolHdr$[ebp+16]
  000b1	50		 push	 eax
  000b2	8b 4d 1c	 mov	 ecx, DWORD PTR _ioDMToolHdr$[ebp+20]
  000b5	51		 push	 ecx
  000b6	8b 55 30	 mov	 edx, DWORD PTR _pdwPChannels$[ebp]
  000b9	52		 push	 edx
  000ba	8b 45 f8	 mov	 eax, DWORD PTR _pDMTool$[ebp]
  000bd	50		 push	 eax
  000be	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?InsertTool@CGraph@@IAEJPAUIDirectMusicTool@@PAKKJPAU_GUID@@@Z ; CGraph::InsertTool
  000c6	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L70021:

; 826  : 	}
; 827  : 
; 828  : 	if(pIPersistStream)

  000c9	83 7d fc 00	 cmp	 DWORD PTR _pIPersistStream$[ebp], 0
  000cd	74 0c		 je	 SHORT $L70022

; 829  : 	{
; 830  : 		pIPersistStream->Release();

  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _pIPersistStream$[ebp]
  000d2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d4	8b 45 fc	 mov	 eax, DWORD PTR _pIPersistStream$[ebp]
  000d7	50		 push	 eax
  000d8	ff 52 08	 call	 DWORD PTR [edx+8]
$L70022:

; 831  : 	}
; 832  : 	
; 833  : 	if(pDMTool)

  000db	83 7d f8 00	 cmp	 DWORD PTR _pDMTool$[ebp], 0
  000df	74 0c		 je	 SHORT $L70023

; 834  : 	{
; 835  : 		pDMTool->Release();

  000e1	8b 4d f8	 mov	 ecx, DWORD PTR _pDMTool$[ebp]
  000e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e6	8b 45 f8	 mov	 eax, DWORD PTR _pDMTool$[ebp]
  000e9	50		 push	 eax
  000ea	ff 52 08	 call	 DWORD PTR [edx+8]
$L70023:

; 836  : 	}
; 837  : 
; 838  : 	return hr;

  000ed	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 839  : }

  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 2c 00	 ret	 44			; 0000002cH
?CreateTool@CGraph@@IAEJU_DMUS_IO_TOOL_HEADER@@PAUIStream@@PAK@Z ENDP ; CGraph::CreateTool
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Save@CGraph@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT
_this$ = 8
_pIStream$ = 12
_fClearDirty$ = 16
?Save@CGraph@@UAGJPAUIStream@@H@Z PROC NEAR		; CGraph::Save, COMDAT

; 842  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 843  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 844  : }

  00008	5d		 pop	 ebp
  00009	c2 0c 00	 ret	 12			; 0000000cH
?Save@CGraph@@UAGJPAUIStream@@H@Z ENDP			; CGraph::Save
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CGraph@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT
_this$ = 8
_pcbSize$ = 12
?GetSizeMax@CGraph@@UAGJPAT_ULARGE_INTEGER@@@Z PROC NEAR ; CGraph::GetSizeMax, COMDAT

; 847  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 848  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 849  : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?GetSizeMax@CGraph@@UAGJPAT_ULARGE_INTEGER@@@Z ENDP	; CGraph::GetSizeMax
_TEXT	ENDS
PUBLIC	??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@ ; `string'
PUBLIC	??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@ ; `string'
PUBLIC	??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@ ; `string'
EXTRN	?GetDescriptor@CInfo@@QAEJPAU_DMUS_OBJECTDESC@@ABU_GUID@@@Z:NEAR ; CInfo::GetDescriptor
;	COMDAT ??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@
CONST	SEGMENT
??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@ DB 'offsetof(DM'
	DB	'US_OBJECTDESC, dwSize) == 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@ DB '%s@%s: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB DB 'C'
	DB	'Graph::GetDescriptor', 00H			; `CGraph::GetDescriptor'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
CONST	SEGMENT
??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@ DB '%s: p'
	DB	'Desc does not point to as much memory as pDesc->dwSize indica'
	DB	'tes', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@
CONST	SEGMENT
??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@ DB '%'
	DB	's: pDesc->dwSize is too small', 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z
_TEXT	SEGMENT
_this$ = 8
_pDesc$ = 12
?GetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z PROC NEAR ; CGraph::GetDescriptor, COMDAT

; 855  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 856  : 	// Argument validation
; 857  : 	V_INAME(CGraph::GetDescriptor);
; 858  : 	V_STRUCTPTR_WRITE(pDesc, DMUS_OBJECTDESC);

  00003	33 c0		 xor	 eax, eax
  00005	85 c0		 test	 eax, eax
  00007	74 23		 je	 SHORT $L70043
  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@
  0000e	68 5a 03 00 00	 push	 858			; 0000035aH
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@CLPCNMAH@c?3?2xbox?2private?2windows?2directx?2@
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 14	 add	 esp, 20			; 00000014H
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L70043:
  0002c	6a 04		 push	 4
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _pDesc$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $L70047
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
  00045	6a ff		 push	 -1
  00047	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	e8 00 00 00 00	 call	 _DebugBreak@0
$L70047:
  00054	8b 55 0c	 mov	 edx, DWORD PTR _pDesc$[ebp]
  00057	81 3a 50 03 00
	00		 cmp	 DWORD PTR [edx], 848	; 00000350H
  0005d	73 19		 jae	 SHORT $L70050
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00064	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@
  00069	6a ff		 push	 -1
  0006b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
  00073	e8 00 00 00 00	 call	 _DebugBreak@0
$L70050:
  00078	8b 45 0c	 mov	 eax, DWORD PTR _pDesc$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	51		 push	 ecx
  0007e	8b 55 0c	 mov	 edx, DWORD PTR _pDesc$[ebp]
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00087	85 c0		 test	 eax, eax
  00089	74 19		 je	 SHORT $L70052
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00090	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
  00095	6a ff		 push	 -1
  00097	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	e8 00 00 00 00	 call	 _DebugBreak@0
$L70052:

; 859  :     return m_Info.GetDescriptor(pDesc,CLSID_DirectMusicGraph);

  000a4	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicGraph
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _pDesc$[ebp]
  000ac	50		 push	 eax
  000ad	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	83 c1 38	 add	 ecx, 56			; 00000038H
  000b3	e8 00 00 00 00	 call	 ?GetDescriptor@CInfo@@QAEJPAU_DMUS_OBJECTDESC@@ABU_GUID@@@Z ; CInfo::GetDescriptor

; 860  : }

  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
?GetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z ENDP	; CGraph::GetDescriptor
_TEXT	ENDS
EXTRN	?SetDescriptor@CInfo@@QAEJPAU_DMUS_OBJECTDESC@@@Z:NEAR ; CInfo::SetDescriptor
;	COMDAT ?__szValidateInterfaceName@?1??SetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??SetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB DB 'C'
	DB	'Graph::SetDescriptor', 00H			; `CGraph::SetDescriptor'::`2'::__szValidateInterfaceName
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?SetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z
_TEXT	SEGMENT
_this$ = 8
_pDesc$ = 12
?SetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z PROC NEAR ; CGraph::SetDescriptor, COMDAT

; 863  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 864  : 	// Argument validation
; 865  : 	V_INAME(CGraph::SetDescriptor);
; 866  : 	V_STRUCTPTR_READ(pDesc, DMUS_OBJECTDESC);

  00003	33 c0		 xor	 eax, eax
  00005	85 c0		 test	 eax, eax
  00007	74 23		 je	 SHORT $L70061
  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@
  0000e	68 62 03 00 00	 push	 866			; 00000362H
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@CLPCNMAH@c?3?2xbox?2private?2windows?2directx?2@
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 14	 add	 esp, 20			; 00000014H
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L70061:
  0002c	6a 04		 push	 4
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _pDesc$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $L70063
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??SetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
  00045	6a ff		 push	 -1
  00047	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	e8 00 00 00 00	 call	 _DebugBreak@0
$L70063:
  00054	8b 55 0c	 mov	 edx, DWORD PTR _pDesc$[ebp]
  00057	81 3a 50 03 00
	00		 cmp	 DWORD PTR [edx], 848	; 00000350H
  0005d	73 19		 jae	 SHORT $L70065
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??SetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00064	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@
  00069	6a ff		 push	 -1
  0006b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
  00073	e8 00 00 00 00	 call	 _DebugBreak@0
$L70065:
  00078	8b 45 0c	 mov	 eax, DWORD PTR _pDesc$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	51		 push	 ecx
  0007e	8b 55 0c	 mov	 edx, DWORD PTR _pDesc$[ebp]
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00087	85 c0		 test	 eax, eax
  00089	74 19		 je	 SHORT $L70066
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??SetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00090	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
  00095	6a ff		 push	 -1
  00097	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	e8 00 00 00 00	 call	 _DebugBreak@0
$L70066:

; 867  : 	return m_Info.SetDescriptor(pDesc);

  000a4	8b 45 0c	 mov	 eax, DWORD PTR _pDesc$[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	83 c1 38	 add	 ecx, 56			; 00000038H
  000ae	e8 00 00 00 00	 call	 ?SetDescriptor@CInfo@@QAEJPAU_DMUS_OBJECTDESC@@@Z ; CInfo::SetDescriptor

; 868  : }

  000b3	5d		 pop	 ebp
  000b4	c2 08 00	 ret	 8
?SetDescriptor@CGraph@@UAGJPAU_DMUS_OBJECTDESC@@@Z ENDP	; CGraph::SetDescriptor
_TEXT	ENDS
EXTRN	?ParseDescriptor@CInfo@@QAEJPAUIStream@@PAU_DMUS_OBJECTDESC@@KABU_GUID@@@Z:NEAR ; CInfo::ParseDescriptor
;	COMDAT ?__szValidateInterfaceName@?1??ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB DB 'C'
	DB	'Graph::ParseDescriptor', 00H		; `CGraph::ParseDescriptor'::`2'::__szValidateInterfaceName
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z
_TEXT	SEGMENT
_this$ = 8
_pIStream$ = 12
_pDesc$ = 16
?ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z PROC NEAR ; CGraph::ParseDescriptor, COMDAT

; 871  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 872  :     V_INAME(CGraph::ParseDescriptor);
; 873  :     V_INTERFACE(pIStream);

  00003	6a 04		 push	 4
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L70075
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L70075:
  0002b	6a 04		 push	 4
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	52		 push	 edx
  00033	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00038	85 c0		 test	 eax, eax
  0003a	74 19		 je	 SHORT $L70078
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00046	6a ff		 push	 -1
  00048	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	e8 00 00 00 00	 call	 _DebugBreak@0
$L70078:
  00055	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00062	85 c0		 test	 eax, eax
  00064	74 19		 je	 SHORT $L70080
  00066	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
  0006b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00070	6a ff		 push	 -1
  00072	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	e8 00 00 00 00	 call	 _DebugBreak@0
$L70080:

; 874  :     V_STRUCTPTR_WRITE(pDesc, DMUS_OBJECTDESC);

  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	74 23		 je	 SHORT $L70083
  00085	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@DNOFJOKI@offsetof?$CIDMUS_OBJECTDESC?0?5dwSize@
  0008a	68 6a 03 00 00	 push	 874			; 0000036aH
  0008f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@CLPCNMAH@c?3?2xbox?2private?2windows?2directx?2@
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@JDNNJMNO@?$CFs?$EA?$CFs?3?5?$CFs?6?$AA@
  00099	6a ff		 push	 -1
  0009b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a0	83 c4 14	 add	 esp, 20			; 00000014H
  000a3	e8 00 00 00 00	 call	 _DebugBreak@0
$L70083:
  000a8	6a 04		 push	 4
  000aa	8b 4d 10	 mov	 ecx, DWORD PTR _pDesc$[ebp]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b3	85 c0		 test	 eax, eax
  000b5	74 19		 je	 SHORT $L70085
  000b7	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
  000c1	6a ff		 push	 -1
  000c3	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cb	e8 00 00 00 00	 call	 _DebugBreak@0
$L70085:
  000d0	8b 55 10	 mov	 edx, DWORD PTR _pDesc$[ebp]
  000d3	81 3a 50 03 00
	00		 cmp	 DWORD PTR [edx], 848	; 00000350H
  000d9	73 19		 jae	 SHORT $L70087
  000db	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
  000e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@DAJLLPMH@?$CFs?3?5pDesc?9?$DOdwSize?5is?5too?5small?6?$AA@
  000e5	6a ff		 push	 -1
  000e7	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ef	e8 00 00 00 00	 call	 _DebugBreak@0
$L70087:
  000f4	8b 45 10	 mov	 eax, DWORD PTR _pDesc$[ebp]
  000f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f9	51		 push	 ecx
  000fa	8b 55 10	 mov	 edx, DWORD PTR _pDesc$[ebp]
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00103	85 c0		 test	 eax, eax
  00105	74 19		 je	 SHORT $L70088
  00107	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z@4QBDB
  0010c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@OOGGANMB@?$CFs?3?5pDesc?5does?5not?5point?5to?5as?5m@
  00111	6a ff		 push	 -1
  00113	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00118	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011b	e8 00 00 00 00	 call	 _DebugBreak@0
$L70088:

; 875  :     return m_Info.ParseDescriptor(pIStream,pDesc,DMUS_FOURCC_TOOLGRAPH_FORM,CLSID_DirectMusicGraph);

  00120	68 00 00 00 00	 push	 OFFSET FLAT:_CLSID_DirectMusicGraph
  00125	68 44 4d 54 47	 push	 1196707140		; 47544d44H
  0012a	8b 45 10	 mov	 eax, DWORD PTR _pDesc$[ebp]
  0012d	50		 push	 eax
  0012e	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00131	51		 push	 ecx
  00132	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	83 c1 38	 add	 ecx, 56			; 00000038H
  00138	e8 00 00 00 00	 call	 ?ParseDescriptor@CInfo@@QAEJPAUIStream@@PAU_DMUS_OBJECTDESC@@KABU_GUID@@@Z ; CInfo::ParseDescriptor

; 876  : }

  0013d	5d		 pop	 ebp
  0013e	c2 0c 00	 ret	 12			; 0000000cH
?ParseDescriptor@CGraph@@UAGJPAUIStream@@PAU_DMUS_OBJECTDESC@@@Z ENDP ; CGraph::ParseDescriptor
_TEXT	ENDS
PUBLIC	?Clear@CGraphList@@QAEXXZ			; CGraphList::Clear
PUBLIC	?RemoveHead@CGraphList@@QAEPAVCGraph@@XZ	; CGraphList::RemoveHead
; Function compile flags: /Odt
;	COMDAT ?Clear@CGraphList@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8
_pGraph$ = -4
?Clear@CGraphList@@QAEXXZ PROC NEAR			; CGraphList::Clear, COMDAT
; _this$ = ecx

; 879  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$L70102:

; 880  :     CGraph *pGraph;
; 881  :     while (pGraph = RemoveHead())

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?RemoveHead@CGraphList@@QAEPAVCGraph@@XZ ; CGraphList::RemoveHead
  00011	89 45 fc	 mov	 DWORD PTR _pGraph$[ebp], eax
  00014	83 7d fc 00	 cmp	 DWORD PTR _pGraph$[ebp], 0
  00018	74 0e		 je	 SHORT $L70099

; 882  :     {
; 883  :         pGraph->Release();

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _pGraph$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _pGraph$[ebp]
  00022	52		 push	 edx
  00023	ff 51 08	 call	 DWORD PTR [ecx+8]

; 884  :     }

  00026	eb e1		 jmp	 SHORT $L70102
$L70099:

; 885  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?Clear@CGraphList@@QAEXXZ ENDP				; CGraphList::Clear
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@CGraph@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CGraph@@W3AGJABU_GUID@@PAPAX@Z PROC NEAR ; CGraph::QueryInterface, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z ; CGraph::QueryInterface
?QueryInterface@CGraph@@W3AGJABU_GUID@@PAPAX@Z ENDP	; CGraph::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CGraph@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CGraph@@W3AGKXZ PROC NEAR			; CGraph::AddRef, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CGraph@@UAGKXZ	; CGraph::AddRef
?AddRef@CGraph@@W3AGKXZ ENDP				; CGraph::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CGraph@@W3AGKXZ
_TEXT	SEGMENT
?Release@CGraph@@W3AGKXZ PROC NEAR			; CGraph::Release, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?Release@CGraph@@UAGKXZ	; CGraph::Release
?Release@CGraph@@W3AGKXZ ENDP				; CGraph::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@CGraph@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CGraph@@W7AGJABU_GUID@@PAPAX@Z PROC NEAR ; CGraph::QueryInterface, COMDAT
  00000	83 6c 24 04 08	 sub	 DWORD PTR [esp+4], 8
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z ; CGraph::QueryInterface
?QueryInterface@CGraph@@W7AGJABU_GUID@@PAPAX@Z ENDP	; CGraph::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CGraph@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CGraph@@W7AGKXZ PROC NEAR			; CGraph::AddRef, COMDAT
  00000	83 6c 24 04 08	 sub	 DWORD PTR [esp+4], 8
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CGraph@@UAGKXZ	; CGraph::AddRef
?AddRef@CGraph@@W7AGKXZ ENDP				; CGraph::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CGraph@@W7AGKXZ
_TEXT	SEGMENT
?Release@CGraph@@W7AGKXZ PROC NEAR			; CGraph::Release, COMDAT
  00000	83 6c 24 04 08	 sub	 DWORD PTR [esp+4], 8
  00005	e9 00 00 00 00	 jmp	 ?Release@CGraph@@UAGKXZ	; CGraph::Release
?Release@CGraph@@W7AGKXZ ENDP				; CGraph::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@CGraph@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CGraph@@WM@AGJABU_GUID@@PAPAX@Z PROC NEAR ; CGraph::QueryInterface, COMDAT
  00000	83 6c 24 04 0c	 sub	 DWORD PTR [esp+4], 12	; 0000000cH
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CGraph@@UAGJABU_GUID@@PAPAX@Z ; CGraph::QueryInterface
?QueryInterface@CGraph@@WM@AGJABU_GUID@@PAPAX@Z ENDP	; CGraph::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CGraph@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@CGraph@@WM@AGKXZ PROC NEAR			; CGraph::AddRef, COMDAT
  00000	83 6c 24 04 0c	 sub	 DWORD PTR [esp+4], 12	; 0000000cH
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CGraph@@UAGKXZ	; CGraph::AddRef
?AddRef@CGraph@@WM@AGKXZ ENDP				; CGraph::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CGraph@@WM@AGKXZ
_TEXT	SEGMENT
?Release@CGraph@@WM@AGKXZ PROC NEAR			; CGraph::Release, COMDAT
  00000	83 6c 24 04 0c	 sub	 DWORD PTR [esp+4], 12	; 0000000cH
  00005	e9 00 00 00 00	 jmp	 ?Release@CGraph@@UAGKXZ	; CGraph::Release
?Release@CGraph@@WM@AGKXZ ENDP				; CGraph::Release
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ??0AListItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0AListItem@@QAE@XZ PROC NEAR				; AListItem::AListItem, COMDAT
; _this$ = ecx

; 17   :     AListItem() { m_pNext=NULL; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0AListItem@@QAE@XZ ENDP				; AListItem::AListItem
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0AList@@QAE@XZ PROC NEAR				; AList::AList, COMDAT
; _this$ = ecx

; 34   :     AList() {m_pHead=NULL;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0AList@@QAE@XZ ENDP					; AList::AList
_TEXT	ENDS
EXTRN	?GetCount@AListItem@@QBEJXZ:NEAR		; AListItem::GetCount
; Function compile flags: /Odt
;	COMDAT ?GetCount@AList@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?GetCount@AList@@QBEJXZ PROC NEAR			; AList::GetCount, COMDAT
; _this$ = ecx

; 38   :     LONG GetCount() const {return m_pHead->GetCount();}; 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	e8 00 00 00 00	 call	 ?GetCount@AListItem@@QBEJXZ ; AListItem::GetCount
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?GetCount@AList@@QBEJXZ ENDP				; AList::GetCount
_TEXT	ENDS
EXTRN	?Remove@AListItem@@QAEPAV1@PAV1@@Z:NEAR		; AListItem::Remove
; Function compile flags: /Odt
;	COMDAT ?Remove@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?Remove@AList@@QAEXPAVAListItem@@@Z PROC NEAR		; AList::Remove, COMDAT
; _this$ = ecx

; 60   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 61   :             if (pItem != NULL)

  00007	83 7d 08 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  0000b	74 13		 je	 SHORT $L32733

; 62   :             {
; 63   :                 m_pHead=m_pHead->Remove(pItem);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00010	50		 push	 eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	e8 00 00 00 00	 call	 ?Remove@AListItem@@QAEPAV1@PAV1@@Z ; AListItem::Remove
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	89 02		 mov	 DWORD PTR [edx], eax
$L32733:

; 64   :             }
; 65   :         };

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?Remove@AList@@QAEXPAVAListItem@@@Z ENDP		; AList::Remove
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsEmpty@AList@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsEmpty@AList@@QBEHXZ PROC NEAR			; AList::IsEmpty, COMDAT
; _this$ = ecx

; 68   :     BOOL IsEmpty(void) const {return (m_pHead==NULL);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	0f 94 c1	 sete	 cl
  00012	8b c1		 mov	 eax, ecx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?IsEmpty@AList@@QBEHXZ ENDP				; AList::IsEmpty
_TEXT	ENDS
EXTRN	?DirectMusicAllocI@@YGPAXI@Z:NEAR		; DirectMusicAllocI
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xalloc.h
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_cb$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 13   :     return DirectMusicAllocI(cb);

  00003	8b 45 08	 mov	 eax, DWORD PTR _cb$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicAllocI@@YGPAXI@Z ; DirectMusicAllocI

; 14   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
EXTRN	?DirectMusicFreeI@@YGXPAX@Z:NEAR		; DirectMusicFreeI
; Function compile flags: /Odt
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 19   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_U@YAPAXI@Z
_TEXT	SEGMENT
_cb$ = 8
??_U@YAPAXI@Z PROC NEAR					; operator new[], COMDAT

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   :     return DirectMusicAllocI(cb);

  00003	8b 45 08	 mov	 eax, DWORD PTR _cb$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicAllocI@@YGPAXI@Z ; DirectMusicAllocI

; 24   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??_U@YAPAXI@Z ENDP					; operator new[]
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??_V@YAXPAX@Z PROC NEAR					; operator delete[], COMDAT

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 29   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??_V@YAXPAX@Z ENDP					; operator delete[]
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\dmstrm.h
_TEXT	ENDS
;	COMDAT ?GetStream@CRiffParser@@QAEPAUIStream@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetStream@CRiffParser@@QAEPAUIStream@@XZ PROC NEAR	; CRiffParser::GetStream, COMDAT
; _this$ = ecx

; 96   :     IStream *   GetStream() { return m_pStream; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetStream@CRiffParser@@QAEPAUIStream@@XZ ENDP		; CRiffParser::GetStream
_TEXT	ENDS
EXTRN	?Init@CInfo@@QAEXXZ:NEAR			; CInfo::Init
; Function compile flags: /Odt
;	COMDAT ??0CInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CInfo@@QAE@XZ PROC NEAR				; CInfo::CInfo, COMDAT
; _this$ = ecx

; 111  :     CInfo() { Init(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Init@CInfo@@QAEXXZ	; CInfo::Init
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CInfo@@QAE@XZ ENDP					; CInfo::CInfo
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xboxutil.h
_TEXT	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT
___formal$ = 8
?DeleteCriticalSection@@YGXPAX@Z PROC NEAR		; DeleteCriticalSection, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : }

  00003	5d		 pop	 ebp
  00004	c2 04 00	 ret	 4
?DeleteCriticalSection@@YGXPAX@Z ENDP			; DeleteCriticalSection
_TEXT	ENDS
EXTRN	_GUID_NULL:BYTE
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\dmgraph.h
;	COMDAT ??0CToolRef@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CToolRef@@QAE@XZ PROC NEAR				; CToolRef::CToolRef, COMDAT
; _this$ = ecx

; 17   : 	CToolRef()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AListItem@@QAE@XZ	; AListItem::AListItem

; 18   : 	{
; 19   :         m_fSupportsClone = FALSE;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 20   : 		m_pTool = NULL;

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 21   : 		m_dwQueue = 0;

  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0

; 22   : 		m_dwMTArraySize = 0;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 23   :         m_dwPCArraySize = 0;

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 24   : 		m_pdwMediaTypes = NULL;

  00041	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00044	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0

; 25   : 		m_pdwPChannels = NULL;

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 26   :         m_guidClassID = GUID_NULL;

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	83 c1 04	 add	 ecx, 4
  0005b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _GUID_NULL
  00061	89 11		 mov	 DWORD PTR [ecx], edx
  00063	a1 04 00 00 00	 mov	 eax, DWORD PTR _GUID_NULL+4
  00068	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0006b	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _GUID_NULL+8
  00071	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00074	a1 0c 00 00 00	 mov	 eax, DWORD PTR _GUID_NULL+12
  00079	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 27   : 	};

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
??0CToolRef@@QAE@XZ ENDP				; CToolRef::CToolRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1CToolRef@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12
$T70716 = -8
$T70715 = -4
??1CToolRef@@QAE@XZ PROC NEAR				; CToolRef::~CToolRef, COMDAT
; _this$ = ecx

; 32   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 		if( m_pdwPChannels )

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00010	74 15		 je	 SHORT $L42274

; 34   : 		{
; 35   : 			delete [] m_pdwPChannels;

  00012	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00018	89 55 fc	 mov	 DWORD PTR $T70715[ebp], edx
  0001b	8b 45 fc	 mov	 eax, DWORD PTR $T70715[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 04	 add	 esp, 4
$L42274:

; 36   : 		}
; 37   : 		if( m_pdwMediaTypes )

  00027	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0002e	74 15		 je	 SHORT $L42276

; 38   : 		{
; 39   : 			delete [] m_pdwMediaTypes;

  00030	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00033	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00036	89 45 f8	 mov	 DWORD PTR $T70716[ebp], eax
  00039	8b 4d f8	 mov	 ecx, DWORD PTR $T70716[ebp]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00042	83 c4 04	 add	 esp, 4
$L42276:

; 40   : 		}
; 41   : 		if( m_pTool )

  00045	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00048	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  0004c	74 12		 je	 SHORT $L42273

; 42   : 		{
; 43   : 			m_pTool->Release();

  0004e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00054	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00057	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0005a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0005c	50		 push	 eax
  0005d	ff 51 08	 call	 DWORD PTR [ecx+8]
$L42273:

; 44   : 		}
; 45   : 	};

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
??1CToolRef@@QAE@XZ ENDP				; CToolRef::~CToolRef
_TEXT	ENDS
PUBLIC	?GetNext@AListItem@@QBEPAV1@XZ			; AListItem::GetNext
; Function compile flags: /Odt
;	COMDAT ?GetNext@CToolRef@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@CToolRef@@QAEPAV1@XZ PROC NEAR			; CToolRef::GetNext, COMDAT
; _this$ = ecx

; 47   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 		return (CToolRef*)AListItem::GetNext();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext

; 49   : 	};

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetNext@CToolRef@@QAEPAV1@XZ ENDP			; CToolRef::GetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@AListItem@@QBEPAV1@XZ PROC NEAR		; AListItem::GetNext, COMDAT
; _this$ = ecx

; 18   :     AListItem *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetNext@AListItem@@QBEPAV1@XZ ENDP			; AListItem::GetNext
_TEXT	ENDS
PUBLIC	?GetHead@AList@@QBEPAVAListItem@@XZ		; AList::GetHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\dmgraph.h
;	COMDAT ?GetHead@CGraph@@QAEPAVCToolRef@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@CGraph@@QAEPAVCToolRef@@XZ PROC NEAR		; CGraph::GetHead, COMDAT
; _this$ = ecx

; 95   :     CToolRef* GetHead(){return (CToolRef*)AList::GetHead();};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ?GetHead@AList@@QBEPAVAListItem@@XZ ; AList::GetHead
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?GetHead@CGraph@@QAEPAVCToolRef@@XZ ENDP		; CGraph::GetHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@AList@@QBEPAVAListItem@@XZ PROC NEAR		; AList::GetHead, COMDAT
; _this$ = ecx

; 35   :     AListItem *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@AList@@QBEPAVAListItem@@XZ ENDP		; AList::GetHead
_TEXT	ENDS
PUBLIC	?RemoveHead@AList@@QAEPAVAListItem@@XZ		; AList::RemoveHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\dmgraph.h
;	COMDAT ?RemoveHead@CGraph@@QAEPAVCToolRef@@XZ
_TEXT	SEGMENT
_this$ = -4
?RemoveHead@CGraph@@QAEPAVCToolRef@@XZ PROC NEAR	; CGraph::RemoveHead, COMDAT
; _this$ = ecx

; 96   :     CToolRef* RemoveHead(){return (CToolRef*)AList::RemoveHead();};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ?RemoveHead@AList@@QAEPAVAListItem@@XZ ; AList::RemoveHead
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?RemoveHead@CGraph@@QAEPAVCToolRef@@XZ ENDP		; CGraph::RemoveHead
_TEXT	ENDS
PUBLIC	?SetNext@AListItem@@QAEXPAV1@@Z			; AListItem::SetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -8
_li$ = -4
?RemoveHead@AList@@QAEPAVAListItem@@XZ PROC NEAR	; AList::RemoveHead, COMDAT
; _this$ = ecx

; 71   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 72   :             AListItem *li;
; 73   :             li = m_pHead;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR _li$[ebp], ecx

; 74   :             if(m_pHead)

  00011	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00014	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00017	74 19		 je	 SHORT $L32744

; 75   :             {
; 76   :                 m_pHead = m_pHead->GetNext();

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	89 01		 mov	 DWORD PTR [ecx], eax

; 77   :                 li->SetNext(NULL);

  00028	6a 00		 push	 0
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  0002d	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext
$L32744:

; 78   :             }
; 79   :             return li;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _li$[ebp]

; 80   :         }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?RemoveHead@AList@@QAEPAVAListItem@@XZ ENDP		; AList::RemoveHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@AListItem@@QAEXPAV1@@Z PROC NEAR		; AListItem::SetNext, COMDAT
; _this$ = ecx

; 19   :     void SetNext(AListItem *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetNext@AListItem@@QAEXPAV1@@Z ENDP			; AListItem::SetNext
_TEXT	ENDS
PUBLIC	?GetItem@AList@@QAEPAVAListItem@@J@Z		; AList::GetItem
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\dmgraph.h
;	COMDAT ?GetItem@CGraph@@QAEPAVCToolRef@@J@Z
_TEXT	SEGMENT
_this$ = -4
_lIndex$ = 8
?GetItem@CGraph@@QAEPAVCToolRef@@J@Z PROC NEAR		; CGraph::GetItem, COMDAT
; _this$ = ecx

; 97   :     CToolRef* GetItem(LONG lIndex){return (CToolRef*) AList::GetItem(lIndex);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lIndex$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 10	 add	 ecx, 16			; 00000010H
  00011	e8 00 00 00 00	 call	 ?GetItem@AList@@QAEPAVAListItem@@J@Z ; AList::GetItem
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetItem@CGraph@@QAEPAVCToolRef@@J@Z ENDP		; CGraph::GetItem
_TEXT	ENDS
EXTRN	?GetItem@AListItem@@QAEPAV1@J@Z:NEAR		; AListItem::GetItem
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
;	COMDAT ?GetItem@AList@@QAEPAVAListItem@@J@Z
_TEXT	SEGMENT
_this$ = -4
_index$ = 8
?GetItem@AList@@QAEPAVAListItem@@J@Z PROC NEAR		; AList::GetItem, COMDAT
; _this$ = ecx

; 39   :     AListItem *GetItem(LONG index) { return m_pHead->GetItem(index);}; 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00010	e8 00 00 00 00	 call	 ?GetItem@AListItem@@QAEPAV1@J@Z ; AListItem::GetItem
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetItem@AList@@QAEPAVAListItem@@J@Z ENDP		; AList::GetItem
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\dmgraph.h
_TEXT	ENDS
;	COMDAT ?RemoveHead@CGraphList@@QAEPAVCGraph@@XZ
_TEXT	SEGMENT
tv69 = -12
tv66 = -8
_this$ = -4
?RemoveHead@CGraphList@@QAEPAVCGraph@@XZ PROC NEAR	; CGraphList::RemoveHead, COMDAT
; _this$ = ecx

; 155  :     CGraph* RemoveHead() {return (CGraph *) AList::RemoveHead();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?RemoveHead@AList@@QAEPAVAListItem@@XZ ; AList::RemoveHead
  00011	89 45 f8	 mov	 DWORD PTR tv66[ebp], eax
  00014	83 7d f8 00	 cmp	 DWORD PTR tv66[ebp], 0
  00018	74 0b		 je	 SHORT $L70747
  0001a	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  0001d	83 e8 14	 sub	 eax, 20			; 00000014H
  00020	89 45 f4	 mov	 DWORD PTR tv69[ebp], eax
  00023	eb 07		 jmp	 SHORT $L70748
$L70747:
  00025	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$L70748:
  0002c	8b 45 f4	 mov	 eax, DWORD PTR tv69[ebp]
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?RemoveHead@CGraphList@@QAEPAVCGraph@@XZ ENDP		; CGraphList::RemoveHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IUnknown@@QAE@XZ PROC NEAR				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
END
