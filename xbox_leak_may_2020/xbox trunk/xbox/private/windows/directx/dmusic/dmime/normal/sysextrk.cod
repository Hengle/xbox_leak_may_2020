; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	..\sysextrk.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DM@JIJONHDD@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@GBLGCFIF@Error?3?5Invalid?5data?5in?5sysex?5tra@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CE@IILNMOB@Error?3?5Unable?5to?5read?5sysex?5trac@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DK@FGJKIDFG@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MIJOINAD@pStateData?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DO@CMNGMJOA@Error?3?5Unable?5to?5clone?5sysex?5tra@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BGAOHDMM@?$CBp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT ?Construct@CSysExTrack@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSysExTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack8@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SysExList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSysExTrack@@QAE@AAV0@JJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSysExTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSysExTrack@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CSysExTrack@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CSysExTrack@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSysExTrack@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassID@CSysExTrack@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsDirty@CSysExTrack@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CSysExTrack@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Save@CSysExTrack@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CSysExTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsParamSupported@CSysExTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CSysExTrack@@UAGJPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndPlay@CSysExTrack@@UAGJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Play@CSysExTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Seek@CSysExTrack@@IAEJPAXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParam@CSysExTrack@@UAGJABU_GUID@@JPAJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetParam@CSysExTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParamEx@CSysExTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetParamEx@CSysExTrack@@UAGJABU_GUID@@_JPAX2K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddNotificationType@CSysExTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveNotificationType@CSysExTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@CSysExTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compose@CSysExTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Join@CSysExTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@ULyricInfo@@@@QBEPAV?$TListItem@ULyricInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@ULyricInfo@@@@QAEXPAV?$TListItem@ULyricInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@ULyricInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@ULyricInfo@@@@QAEAAULyricInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@UTriggerInfo@@@@SGHAAUTriggerInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@ULyricInfo@@@@SGHAAULyricInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@ULyricInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEAAV01@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UTriggerInfo@@@@QAEXP6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@ULyricInfo@@@@QAEXP6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_SEQ_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_CURVE_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@_J@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UObjectInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ObjectInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UTriggerInfo@@@@QAEPAV1@P6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@ULyricInfo@@@@QAEPAV1@P6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UTriggerInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UTriggerInfo@@@@AAEPAV1@PAV1@P6GHAAUTriggerInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@ULyricInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@ULyricInfo@@@@AAEPAV1@PAV1@P6GHAAULyricInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSysExTrack@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CSysExTrack@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CSysExTrack@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UParamInfo@CParamControlTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UParamInfo@CParamControlTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ParamInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WaveItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WString@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WString@SmartRef@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@ULyricInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@ULyricInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UTriggerInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Clone@CSysExTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?6??EndPlay@CSysExTrack@@UAGJPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0SysExStateData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteAll@SysExList@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Load@CSysExTrack@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CSysExTrack@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CSysExTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSysExListItem@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SysExListItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItem@SysExListItem@@QAEJUFullSysexEvent@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_U@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SysExListItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AListItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@SysExListItem@@QAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@SysExList@@QAEPAVSysExListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1SysExList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CSysExTrack@@6BIDirectMusicTrack8@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSysExTrack@@6BIPersistStream@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?Construct@CSysExTrack@@IAEXXZ			; CSysExTrack::Construct
EXTRN	__imp__RtlInitializeCriticalSection@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\sysextrk.cpp
;	COMDAT ?Construct@CSysExTrack@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Construct@CSysExTrack@@IAEXXZ PROC NEAR		; CSysExTrack::Construct, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 37   :     IncrementDLLCount();
; 38   : 
; 39   : 	m_cRef = 1;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1

; 40   : 	m_dwValidate = 0;

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 41   :     m_fCSInitialized = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0

; 42   : 	INITIALIZE_CRITICAL_SECTION(&m_CrSec);

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	83 c0 14	 add	 eax, 20			; 00000014H
  0002b	50		 push	 eax
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 43   :     m_fCSInitialized = TRUE;

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	c7 41 30 01 00
	00 00		 mov	 DWORD PTR [ecx+48], 1

; 44   : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?Construct@CSysExTrack@@IAEXXZ ENDP			; CSysExTrack::Construct
_TEXT	ENDS
PUBLIC	??_7CSysExTrack@@6BIDirectMusicTrack8@@@	; CSysExTrack::`vftable'
PUBLIC	??0IDirectMusicTrack8@@QAE@XZ			; IDirectMusicTrack8::IDirectMusicTrack8
PUBLIC	?QueryInterface@CSysExTrack@@W3AGJABU_GUID@@PAPAX@Z ; CSysExTrack::QueryInterface
PUBLIC	?AddRef@CSysExTrack@@W3AGKXZ			; CSysExTrack::AddRef
PUBLIC	?Release@CSysExTrack@@W3AGKXZ			; CSysExTrack::Release
PUBLIC	??0IPersistStream@@QAE@XZ			; IPersistStream::IPersistStream
PUBLIC	??0SysExList@@QAE@XZ				; SysExList::SysExList
PUBLIC	??0CSysExTrack@@QAE@XZ				; CSysExTrack::CSysExTrack
PUBLIC	?QueryInterface@CSysExTrack@@UAGJABU_GUID@@PAPAX@Z ; CSysExTrack::QueryInterface
PUBLIC	?AddRef@CSysExTrack@@UAGKXZ			; CSysExTrack::AddRef
PUBLIC	?Release@CSysExTrack@@UAGKXZ			; CSysExTrack::Release
PUBLIC	?IsParamSupported@CSysExTrack@@UAGJABU_GUID@@@Z	; CSysExTrack::IsParamSupported
PUBLIC	?Init@CSysExTrack@@UAGJPAUIDirectMusicSegment@@@Z ; CSysExTrack::Init
PUBLIC	?InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ; CSysExTrack::InitPlay
PUBLIC	?EndPlay@CSysExTrack@@UAGJPAX@Z			; CSysExTrack::EndPlay
PUBLIC	?Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ; CSysExTrack::Play
PUBLIC	?GetParam@CSysExTrack@@UAGJABU_GUID@@JPAJPAX@Z	; CSysExTrack::GetParam
PUBLIC	?SetParam@CSysExTrack@@UAGJABU_GUID@@JPAX@Z	; CSysExTrack::SetParam
PUBLIC	?AddNotificationType@CSysExTrack@@UAGJABU_GUID@@@Z ; CSysExTrack::AddNotificationType
PUBLIC	?RemoveNotificationType@CSysExTrack@@UAGJABU_GUID@@@Z ; CSysExTrack::RemoveNotificationType
PUBLIC	?Clone@CSysExTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z ; CSysExTrack::Clone
PUBLIC	?PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ; CSysExTrack::PlayEx
PUBLIC	?GetParamEx@CSysExTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z ; CSysExTrack::GetParamEx
PUBLIC	?SetParamEx@CSysExTrack@@UAGJABU_GUID@@_JPAX2K@Z ; CSysExTrack::SetParamEx
PUBLIC	?Compose@CSysExTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z ; CSysExTrack::Compose
PUBLIC	?Join@CSysExTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z ; CSysExTrack::Join
PUBLIC	?GetClassID@CSysExTrack@@UAGJPAU_GUID@@@Z	; CSysExTrack::GetClassID
PUBLIC	?IsDirty@CSysExTrack@@UAGJXZ			; CSysExTrack::IsDirty
PUBLIC	?Load@CSysExTrack@@UAGJPAUIStream@@@Z		; CSysExTrack::Load
PUBLIC	?Save@CSysExTrack@@UAGJPAUIStream@@H@Z		; CSysExTrack::Save
PUBLIC	?GetSizeMax@CSysExTrack@@UAGJPAT_ULARGE_INTEGER@@@Z ; CSysExTrack::GetSizeMax
PUBLIC	??_7CSysExTrack@@6BIPersistStream@@@		; CSysExTrack::`vftable'
EXTRN	??0CMemTrack@@QAE@K@Z:NEAR			; CMemTrack::CMemTrack
;	COMDAT ??_7CSysExTrack@@6BIPersistStream@@@
CONST	SEGMENT
??_7CSysExTrack@@6BIPersistStream@@@ DD FLAT:?QueryInterface@CSysExTrack@@UAGJABU_GUID@@PAPAX@Z ; CSysExTrack::`vftable'
	DD	FLAT:?AddRef@CSysExTrack@@UAGKXZ
	DD	FLAT:?Release@CSysExTrack@@UAGKXZ
	DD	FLAT:?GetClassID@CSysExTrack@@UAGJPAU_GUID@@@Z
	DD	FLAT:?IsDirty@CSysExTrack@@UAGJXZ
	DD	FLAT:?Load@CSysExTrack@@UAGJPAUIStream@@@Z
	DD	FLAT:?Save@CSysExTrack@@UAGJPAUIStream@@H@Z
	DD	FLAT:?GetSizeMax@CSysExTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
CONST	ENDS
;	COMDAT ??_7CSysExTrack@@6BIDirectMusicTrack8@@@
CONST	SEGMENT
??_7CSysExTrack@@6BIDirectMusicTrack8@@@ DD FLAT:?QueryInterface@CSysExTrack@@W3AGJABU_GUID@@PAPAX@Z ; CSysExTrack::`vftable'
	DD	FLAT:?AddRef@CSysExTrack@@W3AGKXZ
	DD	FLAT:?Release@CSysExTrack@@W3AGKXZ
	DD	FLAT:?Init@CSysExTrack@@UAGJPAUIDirectMusicSegment@@@Z
	DD	FLAT:?InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
	DD	FLAT:?EndPlay@CSysExTrack@@UAGJPAX@Z
	DD	FLAT:?Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
	DD	FLAT:?GetParam@CSysExTrack@@UAGJABU_GUID@@JPAJPAX@Z
	DD	FLAT:?SetParam@CSysExTrack@@UAGJABU_GUID@@JPAX@Z
	DD	FLAT:?IsParamSupported@CSysExTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?AddNotificationType@CSysExTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?RemoveNotificationType@CSysExTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?Clone@CSysExTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
	DD	FLAT:?PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
	DD	FLAT:?GetParamEx@CSysExTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z
	DD	FLAT:?SetParamEx@CSysExTrack@@UAGJABU_GUID@@_JPAX2K@Z
	DD	FLAT:?Compose@CSysExTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z
	DD	FLAT:?Join@CSysExTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CSysExTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSysExTrack@@QAE@XZ PROC NEAR			; CSysExTrack::CSysExTrack, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPersistStream@@QAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 04	 add	 ecx, 4
  00015	e8 00 00 00 00	 call	 ??0IDirectMusicTrack8@@QAE@XZ
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSysExTrack@@6BIPersistStream@@@
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CSysExTrack@@6BIDirectMusicTrack8@@@
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 08	 add	 ecx, 8
  00033	e8 00 00 00 00	 call	 ??0SysExList@@QAE@XZ
  00038	6a 1c		 push	 28			; 0000001cH
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 c1 34	 add	 ecx, 52			; 00000034H
  00040	e8 00 00 00 00	 call	 ??0CMemTrack@@QAE@K@Z	; CMemTrack::CMemTrack

; 48   : 	Construct();

  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?Construct@CSysExTrack@@IAEXXZ ; CSysExTrack::Construct

; 49   : }

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
??0CSysExTrack@@QAE@XZ ENDP				; CSysExTrack::CSysExTrack
_TEXT	ENDS
PUBLIC	??0IPersist@@QAE@XZ				; IPersist::IPersist
; Function compile flags: /Odt
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersistStream@@QAE@XZ PROC NEAR			; IPersistStream::IPersistStream, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPersist@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersistStream@@QAE@XZ ENDP				; IPersistStream::IPersistStream
_TEXT	ENDS
PUBLIC	??0IDirectMusicTrack@@QAE@XZ			; IDirectMusicTrack::IDirectMusicTrack
; Function compile flags: /Odt
;	COMDAT ??0IDirectMusicTrack8@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicTrack8@@QAE@XZ PROC NEAR			; IDirectMusicTrack8::IDirectMusicTrack8, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IDirectMusicTrack@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicTrack8@@QAE@XZ ENDP			; IDirectMusicTrack8::IDirectMusicTrack8
_TEXT	ENDS
PUBLIC	??0AList@@QAE@XZ				; AList::AList
; Function compile flags: /Odt
;	COMDAT ??0SysExList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SysExList@@QAE@XZ PROC NEAR				; SysExList::SysExList, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AList@@QAE@XZ	; AList::AList
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0SysExList@@QAE@XZ ENDP				; SysExList::SysExList
_TEXT	ENDS
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
; Function compile flags: /Odt
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersist@@QAE@XZ PROC NEAR				; IPersist::IPersist, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersist@@QAE@XZ ENDP				; IPersist::IPersist
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicTrack@@QAE@XZ PROC NEAR			; IDirectMusicTrack::IDirectMusicTrack, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicTrack@@QAE@XZ ENDP			; IDirectMusicTrack::IDirectMusicTrack
_TEXT	ENDS
PUBLIC	??0SysExListItem@@QAE@XZ			; SysExListItem::SysExListItem
PUBLIC	?SetItem@SysExListItem@@QAEJUFullSysexEvent@@@Z	; SysExListItem::SetItem
PUBLIC	?GetNext@SysExListItem@@QAEPAV1@XZ		; SysExListItem::GetNext
PUBLIC	??_GSysExListItem@@QAEPAXI@Z			; SysExListItem::`scalar deleting destructor'
PUBLIC	?GetHead@SysExList@@QAEPAVSysExListItem@@XZ	; SysExList::GetHead
PUBLIC	??0CSysExTrack@@QAE@AAV0@JJ@Z			; CSysExTrack::CSysExTrack
EXTRN	_memcpy:NEAR
EXTRN	?AddTail@AList@@QAEXPAVAListItem@@@Z:NEAR	; AList::AddTail
; Function compile flags: /Odt
;	COMDAT ??0CSysExTrack@@QAE@AAV0@JJ@Z
_TEXT	SEGMENT
tv153 = -56
tv131 = -52
_this$ = -48
$T70258 = -44
$T70257 = -40
$T70256 = -36
$T70253 = -32
_item$69452 = -28
_pNew$69448 = -12
_pItem$69442 = -8
_pScan$ = -4
_rTrack$ = 8
_mtStart$ = 12
_mtEnd$ = 16
??0CSysExTrack@@QAE@AAV0@JJ@Z PROC NEAR			; CSysExTrack::CSysExTrack, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0IPersistStream@@QAE@XZ
  00011	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	83 c1 04	 add	 ecx, 4
  00017	e8 00 00 00 00	 call	 ??0IDirectMusicTrack8@@QAE@XZ
  0001c	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSysExTrack@@6BIPersistStream@@@
  00025	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CSysExTrack@@6BIDirectMusicTrack8@@@
  0002f	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 08	 add	 ecx, 8
  00035	e8 00 00 00 00	 call	 ??0SysExList@@QAE@XZ
  0003a	6a 1c		 push	 28			; 0000001cH
  0003c	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 34	 add	 ecx, 52			; 00000034H
  00042	e8 00 00 00 00	 call	 ??0CMemTrack@@QAE@K@Z	; CMemTrack::CMemTrack

; 54   : 	Construct();

  00047	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?Construct@CSysExTrack@@IAEXXZ ; CSysExTrack::Construct

; 55   : 	SysExListItem* pScan = rTrack.m_SysExEventList.GetHead();

  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _rTrack$[ebp]
  00052	83 c1 08	 add	 ecx, 8
  00055	e8 00 00 00 00	 call	 ?GetHead@SysExList@@QAEPAVSysExListItem@@XZ ; SysExList::GetHead
  0005a	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax

; 56   : 
; 57   : 	for(; pScan; pScan = pScan->GetNext())

  0005d	eb 0b		 jmp	 SHORT $L69439
$L69440:
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00062	e8 00 00 00 00	 call	 ?GetNext@SysExListItem@@QAEPAV1@XZ ; SysExListItem::GetNext
  00067	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
$L69439:
  0006a	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  0006e	0f 84 11 01 00
	00		 je	 $L69437

; 58   : 	{
; 59   : 		FullSysexEvent* pItem = pScan->m_pItem;

  00074	8b 55 fc	 mov	 edx, DWORD PTR _pScan$[ebp]
  00077	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007a	89 45 f8	 mov	 DWORD PTR _pItem$69442[ebp], eax

; 60   : 		if( NULL == pItem )

  0007d	83 7d f8 00	 cmp	 DWORD PTR _pItem$69442[ebp], 0
  00081	75 02		 jne	 SHORT $L69443

; 61   : 		{
; 62   : 			continue;

  00083	eb da		 jmp	 SHORT $L69440
$L69443:

; 63   : 		}
; 64   : 		else if( pItem->mtTime < mtStart )

  00085	8b 4d f8	 mov	 ecx, DWORD PTR _pItem$69442[ebp]
  00088	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008a	3b 55 0c	 cmp	 edx, DWORD PTR _mtStart$[ebp]
  0008d	7d 02		 jge	 SHORT $L69445

; 65   : 		{
; 66   : 			continue;

  0008f	eb ce		 jmp	 SHORT $L69440
$L69445:

; 67   : 		}
; 68   : 		else if (pItem->mtTime < mtEnd)

  00091	8b 45 f8	 mov	 eax, DWORD PTR _pItem$69442[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	3b 4d 10	 cmp	 ecx, DWORD PTR _mtEnd$[ebp]
  00099	0f 8d df 00 00
	00		 jge	 $L69447

; 69   : 		{
; 70   : 			SysExListItem* pNew = new SysExListItem;

  0009f	6a 08		 push	 8
  000a1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a6	83 c4 04	 add	 esp, 4
  000a9	89 45 e0	 mov	 DWORD PTR $T70253[ebp], eax
  000ac	83 7d e0 00	 cmp	 DWORD PTR $T70253[ebp], 0
  000b0	74 0d		 je	 SHORT $L70254
  000b2	8b 4d e0	 mov	 ecx, DWORD PTR $T70253[ebp]
  000b5	e8 00 00 00 00	 call	 ??0SysExListItem@@QAE@XZ ; SysExListItem::SysExListItem
  000ba	89 45 cc	 mov	 DWORD PTR tv131[ebp], eax
  000bd	eb 07		 jmp	 SHORT $L70255
$L70254:
  000bf	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$L70255:
  000c6	8b 55 cc	 mov	 edx, DWORD PTR tv131[ebp]
  000c9	89 55 f4	 mov	 DWORD PTR _pNew$69448[ebp], edx

; 71   : 			if (pNew)

  000cc	83 7d f4 00	 cmp	 DWORD PTR _pNew$69448[ebp], 0
  000d0	0f 84 a6 00 00
	00		 je	 $L69451

; 72   : 			{
; 73   : 				FullSysexEvent item;
; 74   : 				item.mtTime = pItem->mtTime - mtStart;

  000d6	8b 45 f8	 mov	 eax, DWORD PTR _pItem$69442[ebp]
  000d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000db	2b 4d 0c	 sub	 ecx, DWORD PTR _mtStart$[ebp]
  000de	89 4d e4	 mov	 DWORD PTR _item$69452[ebp], ecx

; 75   : 				item.dwSysExLength = pItem->dwSysExLength;

  000e1	8b 55 f8	 mov	 edx, DWORD PTR _pItem$69442[ebp]
  000e4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000e7	89 45 ec	 mov	 DWORD PTR _item$69452[ebp+8], eax

; 76   : 				if (item.dwSysExLength && (item.pbSysExData = new BYTE[item.dwSysExLength]))

  000ea	83 7d ec 00	 cmp	 DWORD PTR _item$69452[ebp+8], 0
  000ee	74 64		 je	 SHORT $L69455
  000f0	8b 4d ec	 mov	 ecx, DWORD PTR _item$69452[ebp+8]
  000f3	51		 push	 ecx
  000f4	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000f9	83 c4 04	 add	 esp, 4
  000fc	89 45 dc	 mov	 DWORD PTR $T70256[ebp], eax
  000ff	8b 55 dc	 mov	 edx, DWORD PTR $T70256[ebp]
  00102	89 55 f0	 mov	 DWORD PTR _item$69452[ebp+12], edx
  00105	83 7d f0 00	 cmp	 DWORD PTR _item$69452[ebp+12], 0
  00109	74 49		 je	 SHORT $L69455

; 77   :                 {
; 78   : 					memcpy( item.pbSysExData, pItem->pbSysExData, item.dwSysExLength );

  0010b	8b 45 ec	 mov	 eax, DWORD PTR _item$69452[ebp+8]
  0010e	50		 push	 eax
  0010f	8b 4d f8	 mov	 ecx, DWORD PTR _pItem$69442[ebp]
  00112	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00115	52		 push	 edx
  00116	8b 45 f0	 mov	 eax, DWORD PTR _item$69452[ebp+12]
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 _memcpy

; 79   : 					pNew->SetItem(item);

  0011f	83 c4 fc	 add	 esp, -4			; fffffffcH
  00122	8b cc		 mov	 ecx, esp
  00124	8b 55 e4	 mov	 edx, DWORD PTR _item$69452[ebp]
  00127	89 11		 mov	 DWORD PTR [ecx], edx
  00129	8b 45 e8	 mov	 eax, DWORD PTR _item$69452[ebp+4]
  0012c	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0012f	8b 55 ec	 mov	 edx, DWORD PTR _item$69452[ebp+8]
  00132	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00135	8b 45 f0	 mov	 eax, DWORD PTR _item$69452[ebp+12]
  00138	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0013b	8b 4d f4	 mov	 ecx, DWORD PTR _pNew$69448[ebp]
  0013e	e8 00 00 00 00	 call	 ?SetItem@SysExListItem@@QAEJUFullSysexEvent@@@Z ; SysExListItem::SetItem

; 80   : 					m_SysExEventList.AddTail(pNew);

  00143	8b 4d f4	 mov	 ecx, DWORD PTR _pNew$69448[ebp]
  00146	51		 push	 ecx
  00147	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0014a	83 c1 08	 add	 ecx, 8
  0014d	e8 00 00 00 00	 call	 ?AddTail@AList@@QAEXPAVAListItem@@@Z ; AList::AddTail

; 81   : 				}
; 82   :                 else

  00152	eb 28		 jmp	 SHORT $L69451
$L69455:

; 83   :                 {
; 84   :                     delete pNew;

  00154	8b 55 f4	 mov	 edx, DWORD PTR _pNew$69448[ebp]
  00157	89 55 d4	 mov	 DWORD PTR $T70258[ebp], edx
  0015a	8b 45 d4	 mov	 eax, DWORD PTR $T70258[ebp]
  0015d	89 45 d8	 mov	 DWORD PTR $T70257[ebp], eax
  00160	83 7d d8 00	 cmp	 DWORD PTR $T70257[ebp], 0
  00164	74 0f		 je	 SHORT $L70259
  00166	6a 01		 push	 1
  00168	8b 4d d8	 mov	 ecx, DWORD PTR $T70257[ebp]
  0016b	e8 00 00 00 00	 call	 ??_GSysExListItem@@QAEPAXI@Z
  00170	89 45 c8	 mov	 DWORD PTR tv153[ebp], eax
  00173	eb 07		 jmp	 SHORT $L69451
$L70259:
  00175	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$L69451:

; 85   :                 }
; 86   : 			}
; 87   : 		}
; 88   : 		else break;

  0017c	eb 02		 jmp	 SHORT $L69444
$L69447:
  0017e	eb 05		 jmp	 SHORT $L69437
$L69444:

; 89   : 	}

  00180	e9 da fe ff ff	 jmp	 $L69440
$L69437:

; 90   : }

  00185	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00188	8b e5		 mov	 esp, ebp
  0018a	5d		 pop	 ebp
  0018b	c2 0c 00	 ret	 12			; 0000000cH
??0CSysExTrack@@QAE@AAV0@JJ@Z ENDP			; CSysExTrack::CSysExTrack
_TEXT	ENDS
PUBLIC	?DeleteCriticalSection@@YGXPAX@Z		; DeleteCriticalSection
PUBLIC	??1SysExList@@QAE@XZ				; SysExList::~SysExList
PUBLIC	??1CSysExTrack@@QAE@XZ				; CSysExTrack::~CSysExTrack
EXTRN	??1CMemTrack@@QAE@XZ:NEAR			; CMemTrack::~CMemTrack
; Function compile flags: /Odt
;	COMDAT ??1CSysExTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CSysExTrack@@QAE@XZ PROC NEAR			; CSysExTrack::~CSysExTrack, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSysExTrack@@6BIPersistStream@@@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CSysExTrack@@6BIDirectMusicTrack8@@@

; 94   :     if (m_fCSInitialized)

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  00021	74 0c		 je	 SHORT $L69462

; 95   :     {
; 96   : 	    DELETE_CRITICAL_SECTION(&m_CrSec);

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 14	 add	 eax, 20			; 00000014H
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?DeleteCriticalSection@@YGXPAX@Z ; DeleteCriticalSection
$L69462:

; 97   :     }
; 98   : 
; 99   :     DecrementDLLCount();
; 100  : }

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 34	 add	 ecx, 52			; 00000034H
  00035	e8 00 00 00 00	 call	 ??1CMemTrack@@QAE@XZ	; CMemTrack::~CMemTrack
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 c1 08	 add	 ecx, 8
  00040	e8 00 00 00 00	 call	 ??1SysExList@@QAE@XZ	; SysExList::~SysExList
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??1CSysExTrack@@QAE@XZ ENDP				; CSysExTrack::~CSysExTrack
_TEXT	ENDS
PUBLIC	??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ ; `string'
PUBLIC	??_C@_0DM@JIJONHDD@Warning?3?5Request?5to?5query?5unknow@ ; `string'
PUBLIC	_==@8
EXTRN	_IID_IDirectMusicTrack:BYTE
EXTRN	_IID_IDirectMusicTrack8:BYTE
EXTRN	?DebugTrace@@YAXHPADZZ:NEAR			; DebugTrace
EXTRN	_DebugBreak@0:NEAR
EXTRN	_IID_IUnknown:BYTE
EXTRN	_IID_IPersistStream:BYTE
EXTRN	_IsBadReadPtr@8:NEAR
EXTRN	_IsBadWritePtr@8:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CSysExTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??QueryInterface@CSysExTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB DB 'C'
	DB	'SysExTrack::QueryInterface', 00H		; `CSysExTrack::QueryInterface'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT
??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ DB '%s: Invalid '
	DB	'pointer ppv', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT
??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ DB '%'
	DB	's: Invalid pointer (void*)&iid', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@JIJONHDD@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT
??_C@_0DM@JIJONHDD@Warning?3?5Request?5to?5query?5unknow@ DB 'Warning: Re'
	DB	'quest to query unknown interface on Sysex Track', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?QueryInterface@CSysExTrack@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv92 = -4
_this$ = 8
_iid$ = 12
_ppv$ = 16
?QueryInterface@CSysExTrack@@UAGJABU_GUID@@PAPAX@Z PROC NEAR ; CSysExTrack::QueryInterface, COMDAT

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 119  : 	V_INAME(CSysExTrack::QueryInterface);
; 120  : 	V_PTRPTR_WRITE(ppv);

  00004	6a 04		 push	 4
  00006	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $L69472
  00013	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CSysExTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L69472:

; 121  : 	V_REFGUID(iid);

  0002c	6a 10		 push	 16			; 00000010H
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $L69476
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CSysExTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
  00045	6a ff		 push	 -1
  00047	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69476:

; 122  : 
; 123  :    if (iid == IID_IUnknown || iid == IID_IDirectMusicTrack || iid == IID_IDirectMusicTrack8)

  00054	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IUnknown
  00059	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _==@8
  00062	85 c0		 test	 eax, eax
  00064	75 24		 jne	 SHORT $L69479
  00066	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack
  0006b	8b 45 0c	 mov	 eax, DWORD PTR _iid$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _==@8
  00074	85 c0		 test	 eax, eax
  00076	75 12		 jne	 SHORT $L69479
  00078	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack8
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 _==@8
  00086	85 c0		 test	 eax, eax
  00088	74 22		 je	 SHORT $L69478
$L69479:

; 124  :     {
; 125  :         *ppv = static_cast<IDirectMusicTrack*>(this);

  0008a	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  0008e	74 0b		 je	 SHORT $L70267
  00090	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00093	83 c2 04	 add	 edx, 4
  00096	89 55 fc	 mov	 DWORD PTR tv92[ebp], edx
  00099	eb 07		 jmp	 SHORT $L70268
$L70267:
  0009b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$L70268:
  000a2	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR tv92[ebp]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx

; 126  :     } else

  000aa	eb 3b		 jmp	 SHORT $L69481
$L69478:

; 127  : 	if (iid == IID_IPersistStream)

  000ac	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPersistStream
  000b1	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 _==@8
  000ba	85 c0		 test	 eax, eax
  000bc	74 0a		 je	 SHORT $L69482

; 128  : 	{
; 129  :         *ppv = static_cast<IPersistStream*>(this);

  000be	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	89 08		 mov	 DWORD PTR [eax], ecx

; 130  : 	} else

  000c6	eb 1f		 jmp	 SHORT $L69481
$L69482:

; 131  :     {
; 132  :         *ppv = NULL;

  000c8	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  000cb	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 133  :         Trace(4,"Warning: Request to query unknown interface on Sysex Track\n");

  000d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@JIJONHDD@Warning?3?5Request?5to?5query?5unknow@
  000d6	6a 04		 push	 4
  000d8	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000dd	83 c4 08	 add	 esp, 8

; 134  :         return E_NOINTERFACE;

  000e0	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
  000e5	eb 0e		 jmp	 SHORT $L69468
$L69481:

; 135  :     }
; 136  : 
; 137  :     reinterpret_cast<IUnknown*>(this)->AddRef();

  000e7	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ec	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	52		 push	 edx
  000f0	ff 51 04	 call	 DWORD PTR [ecx+4]

; 138  :     return S_OK;

  000f3	33 c0		 xor	 eax, eax
$L69468:

; 139  : }

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@CSysExTrack@@UAGJABU_GUID@@PAPAX@Z ENDP	; CSysExTrack::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\guiddef.h
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8
_guidOther$ = 12
_==@8	PROC NEAR					; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  :     return IsEqualGUID(guidOne,guidOther);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IsEqualGUID@8

; 190  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:NEAR
; Function compile flags: /Odt
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8
_rguid2$ = 12
_IsEqualGUID@8 PROC NEAR				; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _memcmp
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 157  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
EXTRN	__InterlockedIncrement@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\sysextrk.cpp
;	COMDAT ?AddRef@CSysExTrack@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@CSysExTrack@@UAGKXZ PROC NEAR			; CSysExTrack::AddRef, COMDAT

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 151  :     return InterlockedIncrement(&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 152  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@CSysExTrack@@UAGKXZ ENDP			; CSysExTrack::AddRef
_TEXT	ENDS
PUBLIC	??_GCSysExTrack@@QAEPAXI@Z			; CSysExTrack::`scalar deleting destructor'
EXTRN	__InterlockedDecrement@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Release@CSysExTrack@@UAGKXZ
_TEXT	SEGMENT
tv72 = -12
$T70282 = -8
$T70281 = -4
_this$ = 8
?Release@CSysExTrack@@UAGKXZ PROC NEAR			; CSysExTrack::Release, COMDAT

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 164  :     if (!InterlockedDecrement(&m_cRef))

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 0c	 add	 eax, 12			; 0000000cH
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	85 c0		 test	 eax, eax
  00014	75 2c		 jne	 SHORT $L69495

; 165  :     {
; 166  :         delete this;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	89 4d f8	 mov	 DWORD PTR $T70282[ebp], ecx
  0001c	8b 55 f8	 mov	 edx, DWORD PTR $T70282[ebp]
  0001f	89 55 fc	 mov	 DWORD PTR $T70281[ebp], edx
  00022	83 7d fc 00	 cmp	 DWORD PTR $T70281[ebp], 0
  00026	74 0f		 je	 SHORT $L70283
  00028	6a 01		 push	 1
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR $T70281[ebp]
  0002d	e8 00 00 00 00	 call	 ??_GCSysExTrack@@QAEPAXI@Z
  00032	89 45 f4	 mov	 DWORD PTR tv72[ebp], eax
  00035	eb 07		 jmp	 SHORT $L70284
$L70283:
  00037	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L70284:

; 167  :         return 0;

  0003e	33 c0		 xor	 eax, eax
  00040	eb 06		 jmp	 SHORT $L69494
$L69495:

; 168  :     }
; 169  : 
; 170  :     return m_cRef;

  00042	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
$L69494:

; 171  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?Release@CSysExTrack@@UAGKXZ ENDP			; CSysExTrack::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCSysExTrack@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCSysExTrack@@QAEPAXI@Z PROC NEAR			; CSysExTrack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSysExTrack@@QAE@XZ	; CSysExTrack::~CSysExTrack
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69501
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69501:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCSysExTrack@@QAEPAXI@Z ENDP				; CSysExTrack::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ ; `string'
EXTRN	_CLSID_DirectMusicSysExTrack:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CSysExTrack@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetClassID@CSysExTrack@@UAGJPAU_GUID@@@Z@4QBDB DB 'C'
	DB	'SysExTrack::GetClassID', 00H		; `CSysExTrack::GetClassID'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT
??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pClassID', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetClassID@CSysExTrack@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_pClassID$ = 12
?GetClassID@CSysExTrack@@UAGJPAU_GUID@@@Z PROC NEAR	; CSysExTrack::GetClassID, COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 178  : 	V_INAME(CSysExTrack::GetClassID);
; 179  : 	V_PTR_WRITE(pClassID, CLSID); 

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pClassID$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L69509
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetClassID@CSysExTrack@@UAGJPAU_GUID@@@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L69509:

; 180  : 	*pClassID = CLSID_DirectMusicSysExTrack;

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _pClassID$[ebp]
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicSysExTrack
  00034	89 11		 mov	 DWORD PTR [ecx], edx
  00036	a1 04 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicSysExTrack+4
  0003b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0003e	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicSysExTrack+8
  00044	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00047	a1 0c 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicSysExTrack+12
  0004c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 181  : 	return S_OK;

  0004f	33 c0		 xor	 eax, eax

; 182  : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?GetClassID@CSysExTrack@@UAGJPAU_GUID@@@Z ENDP		; CSysExTrack::GetClassID
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsDirty@CSysExTrack@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?IsDirty@CSysExTrack@@UAGJXZ PROC NEAR			; CSysExTrack::IsDirty, COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  : 	return S_FALSE;

  00003	b8 01 00 00 00	 mov	 eax, 1

; 190  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?IsDirty@CSysExTrack@@UAGJXZ ENDP			; CSysExTrack::IsDirty
_TEXT	ENDS
PUBLIC	??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ ; `string'
PUBLIC	?DeleteAll@SysExList@@QAEXXZ			; SysExList::DeleteAll
PUBLIC	??_C@_0CF@GBLGCFIF@Error?3?5Invalid?5data?5in?5sysex?5tra@ ; `string'
PUBLIC	??_C@_0CE@IILNMOB@Error?3?5Unable?5to?5read?5sysex?5trac@ ; `string'
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
EXTRN	_IsBadCodePtr@4:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??Load@CSysExTrack@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Load@CSysExTrack@@UAGJPAUIStream@@@Z@4QBDB DB 'C'
	DB	'SysExTrack::Load', 00H			; `CSysExTrack::Load'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT
??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pIStream', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GBLGCFIF@Error?3?5Invalid?5data?5in?5sysex?5tra@
CONST	SEGMENT
??_C@_0CF@GBLGCFIF@Error?3?5Invalid?5data?5in?5sysex?5tra@ DB 'Error: Inv'
	DB	'alid data in sysex track.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IILNMOB@Error?3?5Unable?5to?5read?5sysex?5trac@
CONST	SEGMENT
??_C@_0CE@IILNMOB@Error?3?5Unable?5to?5read?5sysex?5trac@ DB 'Error: Unab'
	DB	'le to read sysex track.', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Load@CSysExTrack@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT
tv174 = -72
$T70303 = -68
$T70302 = -64
$T70299 = -60
$T70298 = -56
$T70297 = -52
_pNew$69564 = -48
_sysexEvent$ = -44
_hr$ = -28
_lSize$ = -24
_dwChunk$ = -20
_SysexItem$ = -16
_pbSysExData$ = -4
_this$ = 8
_pIStream$ = 12
?Load@CSysExTrack@@UAGJPAUIStream@@@Z PROC NEAR		; CSysExTrack::Load, COMDAT

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H

; 206  : 	V_INAME(CSysExTrack::Load);
; 207  : 	V_INTERFACE(pIStream);

  00006	6a 04		 push	 4
  00008	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69523
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CSysExTrack@@UAGJPAUIStream@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69523:
  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003b	85 c0		 test	 eax, eax
  0003d	74 19		 je	 SHORT $L69526
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CSysExTrack@@UAGJPAUIStream@@@Z@4QBDB
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00049	6a ff		 push	 -1
  0004b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	e8 00 00 00 00	 call	 _DebugBreak@0
$L69526:
  00058	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00065	85 c0		 test	 eax, eax
  00067	74 19		 je	 SHORT $L69528
  00069	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CSysExTrack@@UAGJPAUIStream@@@Z@4QBDB
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00073	6a ff		 push	 -1
  00075	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	e8 00 00 00 00	 call	 _DebugBreak@0
$L69528:

; 208  : 
; 209  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  00082	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00085	83 c0 14	 add	 eax, 20			; 00000014H
  00088	50		 push	 eax
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 210  : 	HRESULT hr = S_OK;

  0008f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 211  : 
; 212  : 	m_dwValidate++;

  00096	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0009c	83 c2 01	 add	 edx, 1
  0009f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 213  : 	if( m_SysExEventList.GetHead() )

  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	83 c1 08	 add	 ecx, 8
  000ab	e8 00 00 00 00	 call	 ?GetHead@SysExList@@QAEPAVSysExListItem@@XZ ; SysExList::GetHead
  000b0	85 c0		 test	 eax, eax
  000b2	74 0b		 je	 SHORT $L69531

; 214  : 	{
; 215  : 		m_SysExEventList.DeleteAll();

  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	83 c1 08	 add	 ecx, 8
  000ba	e8 00 00 00 00	 call	 ?DeleteAll@SysExList@@QAEXXZ ; SysExList::DeleteAll
$L69531:

; 216  : 	}
; 217  : 
; 218  : 	// copy contents of the stream into the list.
; 219  : 	//DMUS_IO_SYSEX_ITEM sysexEvent;
; 220  : 	FullSysexEvent sysexEvent;
; 221  : 	// read in the chunk id
; 222  : 	DWORD dwChunk;
; 223  : 	long lSize;
; 224  : 	pIStream->Read( &dwChunk, sizeof(DWORD), NULL);

  000bf	6a 00		 push	 0
  000c1	6a 04		 push	 4
  000c3	8d 4d ec	 lea	 ecx, DWORD PTR _dwChunk$[ebp]
  000c6	51		 push	 ecx
  000c7	8b 55 0c	 mov	 edx, DWORD PTR _pIStream$[ebp]
  000ca	8b 02		 mov	 eax, DWORD PTR [edx]
  000cc	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  000cf	51		 push	 ecx
  000d0	ff 50 0c	 call	 DWORD PTR [eax+12]

; 225  : 	if( dwChunk != DMUS_FOURCC_SYSEX_TRACK )

  000d3	81 7d ec 73 79
	65 78		 cmp	 DWORD PTR _dwChunk$[ebp], 2019916147 ; 78657973H
  000da	74 26		 je	 SHORT $L69544

; 226  : 	{
; 227  :         Trace(1,"Error: Invalid data in sysex track.\n");

  000dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@GBLGCFIF@Error?3?5Invalid?5data?5in?5sysex?5tra@
  000e1	6a 01		 push	 1
  000e3	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000e8	83 c4 08	 add	 esp, 8

; 228  :         LEAVE_CRITICAL_SECTION(&m_CrSec);

  000eb	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ee	83 c2 14	 add	 edx, 20			; 00000014H
  000f1	52		 push	 edx
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 229  : 		return DMUS_E_CHUNKNOTFOUND;

  000f8	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  000fd	e9 81 01 00 00	 jmp	 $L69519
$L69544:

; 230  : 	}
; 231  : 	// read in the overall size
; 232  : 	pIStream->Read( &lSize, sizeof(long), NULL );

  00102	6a 00		 push	 0
  00104	6a 04		 push	 4
  00106	8d 45 e8	 lea	 eax, DWORD PTR _lSize$[ebp]
  00109	50		 push	 eax
  0010a	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  0010d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010f	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00112	50		 push	 eax
  00113	ff 52 0c	 call	 DWORD PTR [edx+12]
$L69551:

; 233  : 	DMUS_IO_SYSEX_ITEM SysexItem;
; 234  : 	BYTE* pbSysExData;
; 235  : 	while( lSize > 0 )

  00116	83 7d e8 00	 cmp	 DWORD PTR _lSize$[ebp], 0
  0011a	0f 8e 53 01 00
	00		 jle	 $L69552

; 236  : 	{
; 237  : 		pIStream->Read( &SysexItem, sizeof(DMUS_IO_SYSEX_ITEM), NULL );

  00120	6a 00		 push	 0
  00122	6a 0c		 push	 12			; 0000000cH
  00124	8d 4d f0	 lea	 ecx, DWORD PTR _SysexItem$[ebp]
  00127	51		 push	 ecx
  00128	8b 55 0c	 mov	 edx, DWORD PTR _pIStream$[ebp]
  0012b	8b 02		 mov	 eax, DWORD PTR [edx]
  0012d	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00130	51		 push	 ecx
  00131	ff 50 0c	 call	 DWORD PTR [eax+12]

; 238  : 		lSize -= sizeof(DMUS_IO_SYSEX_ITEM);

  00134	8b 55 e8	 mov	 edx, DWORD PTR _lSize$[ebp]
  00137	83 ea 0c	 sub	 edx, 12			; 0000000cH
  0013a	89 55 e8	 mov	 DWORD PTR _lSize$[ebp], edx

; 239  : 		pbSysExData = new BYTE[SysexItem.dwSysExLength];

  0013d	8b 45 f8	 mov	 eax, DWORD PTR _SysexItem$[ebp+8]
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00146	83 c4 04	 add	 esp, 4
  00149	89 45 cc	 mov	 DWORD PTR $T70297[ebp], eax
  0014c	8b 4d cc	 mov	 ecx, DWORD PTR $T70297[ebp]
  0014f	89 4d fc	 mov	 DWORD PTR _pbSysExData$[ebp], ecx

; 240  : 		if( !pbSysExData )

  00152	83 7d fc 00	 cmp	 DWORD PTR _pbSysExData$[ebp], 0
  00156	75 0c		 jne	 SHORT $L69557

; 241  : 		{
; 242  : 			hr = E_OUTOFMEMORY;

  00158	c7 45 e4 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 243  : 			break;

  0015f	e9 0f 01 00 00	 jmp	 $L69552
$L69557:

; 244  : 		}
; 245  : 		if( FAILED( pIStream->Read( pbSysExData, SysexItem.dwSysExLength, NULL )))

  00164	6a 00		 push	 0
  00166	8b 55 f8	 mov	 edx, DWORD PTR _SysexItem$[ebp+8]
  00169	52		 push	 edx
  0016a	8b 45 fc	 mov	 eax, DWORD PTR _pbSysExData$[ebp]
  0016d	50		 push	 eax
  0016e	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00171	8b 11		 mov	 edx, DWORD PTR [ecx]
  00173	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00176	50		 push	 eax
  00177	ff 52 0c	 call	 DWORD PTR [edx+12]
  0017a	85 c0		 test	 eax, eax
  0017c	7d 2d		 jge	 SHORT $L69560

; 246  : 		{
; 247  :             Trace(1,"Error: Unable to read sysex track.\n");

  0017e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@IILNMOB@Error?3?5Unable?5to?5read?5sysex?5trac@
  00183	6a 01		 push	 1
  00185	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0018a	83 c4 08	 add	 esp, 8

; 248  : 			hr = DMUS_E_CANNOTREAD;

  0018d	c7 45 e4 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 249  : 			delete [] pbSysExData;

  00194	8b 4d fc	 mov	 ecx, DWORD PTR _pbSysExData$[ebp]
  00197	89 4d c8	 mov	 DWORD PTR $T70298[ebp], ecx
  0019a	8b 55 c8	 mov	 edx, DWORD PTR $T70298[ebp]
  0019d	52		 push	 edx
  0019e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001a3	83 c4 04	 add	 esp, 4

; 250  : 			break;

  001a6	e9 c8 00 00 00	 jmp	 $L69552
$L69560:

; 251  : 		}
; 252  : 		lSize -= SysexItem.dwSysExLength;

  001ab	8b 45 e8	 mov	 eax, DWORD PTR _lSize$[ebp]
  001ae	2b 45 f8	 sub	 eax, DWORD PTR _SysexItem$[ebp+8]
  001b1	89 45 e8	 mov	 DWORD PTR _lSize$[ebp], eax

; 253  : 		sysexEvent.mtTime = SysexItem.mtTime;

  001b4	8b 4d f0	 mov	 ecx, DWORD PTR _SysexItem$[ebp]
  001b7	89 4d d4	 mov	 DWORD PTR _sysexEvent$[ebp], ecx

; 254  : 		sysexEvent.dwPChannel = SysexItem.dwPChannel;

  001ba	8b 55 f4	 mov	 edx, DWORD PTR _SysexItem$[ebp+4]
  001bd	89 55 d8	 mov	 DWORD PTR _sysexEvent$[ebp+4], edx

; 255  : 		sysexEvent.dwSysExLength = SysexItem.dwSysExLength;

  001c0	8b 45 f8	 mov	 eax, DWORD PTR _SysexItem$[ebp+8]
  001c3	89 45 dc	 mov	 DWORD PTR _sysexEvent$[ebp+8], eax

; 256  : 		sysexEvent.pbSysExData = pbSysExData;

  001c6	8b 4d fc	 mov	 ecx, DWORD PTR _pbSysExData$[ebp]
  001c9	89 4d e0	 mov	 DWORD PTR _sysexEvent$[ebp+12], ecx

; 257  : 		SysExListItem* pNew = new SysExListItem;

  001cc	6a 08		 push	 8
  001ce	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001d3	83 c4 04	 add	 esp, 4
  001d6	89 45 c4	 mov	 DWORD PTR $T70299[ebp], eax
  001d9	83 7d c4 00	 cmp	 DWORD PTR $T70299[ebp], 0
  001dd	74 0d		 je	 SHORT $L70300
  001df	8b 4d c4	 mov	 ecx, DWORD PTR $T70299[ebp]
  001e2	e8 00 00 00 00	 call	 ??0SysExListItem@@QAE@XZ ; SysExListItem::SysExListItem
  001e7	89 45 b8	 mov	 DWORD PTR tv174[ebp], eax
  001ea	eb 07		 jmp	 SHORT $L70301
$L70300:
  001ec	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv174[ebp], 0
$L70301:
  001f3	8b 55 b8	 mov	 edx, DWORD PTR tv174[ebp]
  001f6	89 55 d0	 mov	 DWORD PTR _pNew$69564[ebp], edx

; 258  : 		if (pNew)

  001f9	83 7d d0 00	 cmp	 DWORD PTR _pNew$69564[ebp], 0
  001fd	74 54		 je	 SHORT $L69567

; 259  : 		{
; 260  : 			if( FAILED( pNew->SetItem(sysexEvent)))

  001ff	83 ec 10	 sub	 esp, 16			; 00000010H
  00202	8b c4		 mov	 eax, esp
  00204	8b 4d d4	 mov	 ecx, DWORD PTR _sysexEvent$[ebp]
  00207	89 08		 mov	 DWORD PTR [eax], ecx
  00209	8b 55 d8	 mov	 edx, DWORD PTR _sysexEvent$[ebp+4]
  0020c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0020f	8b 4d dc	 mov	 ecx, DWORD PTR _sysexEvent$[ebp+8]
  00212	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00215	8b 55 e0	 mov	 edx, DWORD PTR _sysexEvent$[ebp+12]
  00218	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0021b	8b 4d d0	 mov	 ecx, DWORD PTR _pNew$69564[ebp]
  0021e	e8 00 00 00 00	 call	 ?SetItem@SysExListItem@@QAEJUFullSysexEvent@@@Z ; SysExListItem::SetItem
  00223	85 c0		 test	 eax, eax
  00225	7d 1b		 jge	 SHORT $L69569

; 261  : 			{
; 262  : 				delete [] pbSysExData;

  00227	8b 45 fc	 mov	 eax, DWORD PTR _pbSysExData$[ebp]
  0022a	89 45 c0	 mov	 DWORD PTR $T70302[ebp], eax
  0022d	8b 4d c0	 mov	 ecx, DWORD PTR $T70302[ebp]
  00230	51		 push	 ecx
  00231	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00236	83 c4 04	 add	 esp, 4

; 263  : 				hr = E_OUTOFMEMORY;

  00239	c7 45 e4 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 264  : 				break;

  00240	eb 31		 jmp	 SHORT $L69552
$L69569:

; 265  : 			}
; 266  : 			m_SysExEventList.AddTail(pNew);

  00242	8b 55 d0	 mov	 edx, DWORD PTR _pNew$69564[ebp]
  00245	52		 push	 edx
  00246	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00249	83 c1 08	 add	 ecx, 8
  0024c	e8 00 00 00 00	 call	 ?AddTail@AList@@QAEXPAVAListItem@@@Z ; AList::AddTail

; 267  : 		}
; 268  : 		else

  00251	eb 1b		 jmp	 SHORT $L69572
$L69567:

; 269  : 		{
; 270  : 			delete [] pbSysExData;

  00253	8b 45 fc	 mov	 eax, DWORD PTR _pbSysExData$[ebp]
  00256	89 45 bc	 mov	 DWORD PTR $T70303[ebp], eax
  00259	8b 4d bc	 mov	 ecx, DWORD PTR $T70303[ebp]
  0025c	51		 push	 ecx
  0025d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00262	83 c4 04	 add	 esp, 4

; 271  : 			hr = E_OUTOFMEMORY;

  00265	c7 45 e4 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 272  : 			break;

  0026c	eb 05		 jmp	 SHORT $L69552
$L69572:

; 273  : 		}
; 274  : 	}

  0026e	e9 a3 fe ff ff	 jmp	 $L69551
$L69552:

; 275  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  00273	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00276	83 c2 14	 add	 edx, 20			; 00000014H
  00279	52		 push	 edx
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 276  : 	return hr;

  00280	8b 45 e4	 mov	 eax, DWORD PTR _hr$[ebp]
$L69519:

; 277  : }

  00283	8b e5		 mov	 esp, ebp
  00285	5d		 pop	 ebp
  00286	c2 08 00	 ret	 8
?Load@CSysExTrack@@UAGJPAUIStream@@@Z ENDP		; CSysExTrack::Load
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Save@CSysExTrack@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT
_this$ = 8
_pIStream$ = 12
_fClearDirty$ = 16
?Save@CSysExTrack@@UAGJPAUIStream@@H@Z PROC NEAR	; CSysExTrack::Save, COMDAT

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 281  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 282  : }

  00008	5d		 pop	 ebp
  00009	c2 0c 00	 ret	 12			; 0000000cH
?Save@CSysExTrack@@UAGJPAUIStream@@H@Z ENDP		; CSysExTrack::Save
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CSysExTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT
_this$ = 8
_pcbSize$ = 12
?GetSizeMax@CSysExTrack@@UAGJPAT_ULARGE_INTEGER@@@Z PROC NEAR ; CSysExTrack::GetSizeMax, COMDAT

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 286  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 287  : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?GetSizeMax@CSysExTrack@@UAGJPAT_ULARGE_INTEGER@@@Z ENDP ; CSysExTrack::GetSizeMax
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsParamSupported@CSysExTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguid$ = 12
?IsParamSupported@CSysExTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CSysExTrack::IsParamSupported, COMDAT

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 295  : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?IsParamSupported@CSysExTrack@@UAGJABU_GUID@@@Z ENDP	; CSysExTrack::IsParamSupported
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Init@CSysExTrack@@UAGJPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT
_this$ = 8
_pSegment$ = 12
?Init@CSysExTrack@@UAGJPAUIDirectMusicSegment@@@Z PROC NEAR ; CSysExTrack::Init, COMDAT

; 311  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 312  : 	return S_OK;

  00003	33 c0		 xor	 eax, eax

; 313  : }

  00005	5d		 pop	 ebp
  00006	c2 08 00	 ret	 8
?Init@CSysExTrack@@UAGJPAUIDirectMusicSegment@@@Z ENDP	; CSysExTrack::Init
_TEXT	ENDS
PUBLIC	??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@ ; `string'
PUBLIC	??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@ ; `string'
PUBLIC	??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@ ; `string'
PUBLIC	??0SysExStateData@@QAE@XZ			; SysExStateData::SysExStateData
;	COMDAT ?__szValidateInterfaceName@?1??InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::InitPlay', 00H		; `CSysExTrack::InitPlay'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
CONST	SEGMENT
??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@ DB '%s: Inva'
	DB	'lid pointer ppStateData', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
CONST	SEGMENT
??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@ DB '%s: Inval'
	DB	'id pointer pSegmentState', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
CONST	SEGMENT
??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@ DB '%s: Inval'
	DB	'id pointer pPerformance', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT
tv150 = -12
$T70319 = -8
_pStateData$ = -4
_this$ = 8
_pSegmentState$ = 12
_pPerformance$ = 16
_ppStateData$ = 20
_dwTrackID$ = 24
_dwFlags$ = 28
?InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z PROC NEAR ; CSysExTrack::InitPlay, COMDAT

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 322  : 	V_INAME(IDirectMusicTrack::InitPlay);
; 323  : 	V_PTRPTR_WRITE(ppStateData);

  00006	6a 04		 push	 4
  00008	8b 45 14	 mov	 eax, DWORD PTR _ppStateData$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69607
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69607:

; 324  : 	V_INTERFACE(pSegmentState);

  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegmentState$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00039	85 c0		 test	 eax, eax
  0003b	74 19		 je	 SHORT $L69609
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  00047	6a ff		 push	 -1
  00049	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 _DebugBreak@0
$L69609:
  00056	6a 04		 push	 4
  00058	8b 55 0c	 mov	 edx, DWORD PTR _pSegmentState$[ebp]
  0005b	8b 02		 mov	 eax, DWORD PTR [edx]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00063	85 c0		 test	 eax, eax
  00065	74 19		 je	 SHORT $L69612
  00067	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  00071	6a ff		 push	 -1
  00073	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	e8 00 00 00 00	 call	 _DebugBreak@0
$L69612:
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegmentState$[ebp]
  00083	8b 11		 mov	 edx, DWORD PTR [ecx]
  00085	8b 02		 mov	 eax, DWORD PTR [edx]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0008d	85 c0		 test	 eax, eax
  0008f	74 19		 je	 SHORT $L69614
  00091	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  0009b	6a ff		 push	 -1
  0009d	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a5	e8 00 00 00 00	 call	 _DebugBreak@0
$L69614:

; 325  : 	V_INTERFACE(pPerformance);

  000aa	6a 04		 push	 4
  000ac	8b 4d 10	 mov	 ecx, DWORD PTR _pPerformance$[ebp]
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b5	85 c0		 test	 eax, eax
  000b7	74 19		 je	 SHORT $L69616
  000b9	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  000be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
  000c3	6a ff		 push	 -1
  000c5	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cd	e8 00 00 00 00	 call	 _DebugBreak@0
$L69616:
  000d2	6a 04		 push	 4
  000d4	8b 55 10	 mov	 edx, DWORD PTR _pPerformance$[ebp]
  000d7	8b 02		 mov	 eax, DWORD PTR [edx]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000df	85 c0		 test	 eax, eax
  000e1	74 19		 je	 SHORT $L69619
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  000e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
  000ed	6a ff		 push	 -1
  000ef	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f7	e8 00 00 00 00	 call	 _DebugBreak@0
$L69619:
  000fc	8b 4d 10	 mov	 ecx, DWORD PTR _pPerformance$[ebp]
  000ff	8b 11		 mov	 edx, DWORD PTR [ecx]
  00101	8b 02		 mov	 eax, DWORD PTR [edx]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00109	85 c0		 test	 eax, eax
  0010b	74 19		 je	 SHORT $L69621
  0010d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00112	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
  00117	6a ff		 push	 -1
  00119	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00121	e8 00 00 00 00	 call	 _DebugBreak@0
$L69621:

; 326  : 
; 327  : 	SysExStateData* pStateData;
; 328  : 	pStateData = new SysExStateData;

  00126	6a 18		 push	 24			; 00000018H
  00128	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0012d	83 c4 04	 add	 esp, 4
  00130	89 45 f8	 mov	 DWORD PTR $T70319[ebp], eax
  00133	83 7d f8 00	 cmp	 DWORD PTR $T70319[ebp], 0
  00137	74 0d		 je	 SHORT $L70320
  00139	8b 4d f8	 mov	 ecx, DWORD PTR $T70319[ebp]
  0013c	e8 00 00 00 00	 call	 ??0SysExStateData@@QAE@XZ ; SysExStateData::SysExStateData
  00141	89 45 f4	 mov	 DWORD PTR tv150[ebp], eax
  00144	eb 07		 jmp	 SHORT $L70321
$L70320:
  00146	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv150[ebp], 0
$L70321:
  0014d	8b 4d f4	 mov	 ecx, DWORD PTR tv150[ebp]
  00150	89 4d fc	 mov	 DWORD PTR _pStateData$[ebp], ecx

; 329  : 	if( NULL == pStateData )

  00153	83 7d fc 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  00157	75 07		 jne	 SHORT $L69625

; 330  : 		return E_OUTOFMEMORY;

  00159	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  0015e	eb 41		 jmp	 SHORT $L69603
$L69625:

; 331  : 	*ppStateData = pStateData;

  00160	8b 55 14	 mov	 edx, DWORD PTR _ppStateData$[ebp]
  00163	8b 45 fc	 mov	 eax, DWORD PTR _pStateData$[ebp]
  00166	89 02		 mov	 DWORD PTR [edx], eax

; 332  : 	pStateData->dwVirtualTrackID = dwTrackID;

  00168	8b 4d fc	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  0016b	8b 55 18	 mov	 edx, DWORD PTR _dwTrackID$[ebp]
  0016e	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 333  : 	pStateData->pPerformance = pPerformance; // weak reference, no addref.

  00171	8b 45 fc	 mov	 eax, DWORD PTR _pStateData$[ebp]
  00174	8b 4d 10	 mov	 ecx, DWORD PTR _pPerformance$[ebp]
  00177	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 334  : 	pStateData->pSegState = pSegmentState; // weak reference, no addref.

  0017a	8b 55 fc	 mov	 edx, DWORD PTR _pStateData$[ebp]
  0017d	8b 45 0c	 mov	 eax, DWORD PTR _pSegmentState$[ebp]
  00180	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 335  : 	pStateData->pCurrentSysEx = m_SysExEventList.GetHead();

  00183	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00186	83 c1 04	 add	 ecx, 4
  00189	e8 00 00 00 00	 call	 ?GetHead@SysExList@@QAEPAVSysExListItem@@XZ ; SysExList::GetHead
  0018e	8b 4d fc	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  00191	89 01		 mov	 DWORD PTR [ecx], eax

; 336  : 	pStateData->dwValidate = m_dwValidate;

  00193	8b 55 fc	 mov	 edx, DWORD PTR _pStateData$[ebp]
  00196	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00199	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0019c	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 337  : 	return S_OK;

  0019f	33 c0		 xor	 eax, eax
$L69603:

; 338  : }

  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c2 18 00	 ret	 24			; 00000018H
?InitPlay@CSysExTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ENDP ; CSysExTrack::InitPlay
_TEXT	ENDS
PUBLIC	??_C@_0DK@FGJKIDFG@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0L@MIJOINAD@pStateData?$AA@		; `string'
PUBLIC	??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@ ; `string'
EXTRN	__imp__RtlAssert@16:NEAR
;	COMDAT ??_C@_0DK@FGJKIDFG@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DK@FGJKIDFG@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dmusic\dmime\sysextrk.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIJOINAD@pStateData?$AA@
CONST	SEGMENT
??_C@_0L@MIJOINAD@pStateData?$AA@ DB 'pStateData', 00H	; `string'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?6??EndPlay@CSysExTrack@@UAGJPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?6??EndPlay@CSysExTrack@@UAGJPAX@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::EndPlay', 00H		; `CSysExTrack::EndPlay'::`7'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
CONST	SEGMENT
??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@ DB '%s: I'
	DB	'nvalid pointer pStateData', 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?EndPlay@CSysExTrack@@UAGJPAX@Z
_TEXT	SEGMENT
$T70325 = -8
_pSD$69640 = -4
_this$ = 8
_pStateData$ = 12
?EndPlay@CSysExTrack@@UAGJPAX@Z PROC NEAR		; CSysExTrack::EndPlay, COMDAT

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 343  : 	ASSERT( pStateData );

  00006	83 7d 0c 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  0000a	75 17		 jne	 SHORT $L69632
  0000c	6a 00		 push	 0
  0000e	68 57 01 00 00	 push	 343			; 00000157H
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FGJKIDFG@c?3?2xbox?2private?2windows?2directx?2@
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@MIJOINAD@pStateData?$AA@
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69632:

; 344  : 	if( pStateData )

  00023	83 7d 0c 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  00027	74 40		 je	 SHORT $L69635

; 345  : 	{
; 346  : 		V_INAME(IDirectMusicTrack::EndPlay);
; 347  : 		V_BUFPTR_WRITE(pStateData, sizeof(SysExStateData));

  00029	6a 18		 push	 24			; 00000018H
  0002b	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00034	85 c0		 test	 eax, eax
  00036	74 19		 je	 SHORT $L69639
  00038	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?6??EndPlay@CSysExTrack@@UAGJPAX@Z@4QBDB
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
  00042	6a ff		 push	 -1
  00044	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 _DebugBreak@0
$L69639:

; 348  : 		SysExStateData* pSD = (SysExStateData*)pStateData;

  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  00054	89 4d fc	 mov	 DWORD PTR _pSD$69640[ebp], ecx

; 349  : 		delete pSD;

  00057	8b 55 fc	 mov	 edx, DWORD PTR _pSD$69640[ebp]
  0005a	89 55 f8	 mov	 DWORD PTR $T70325[ebp], edx
  0005d	8b 45 f8	 mov	 eax, DWORD PTR $T70325[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00066	83 c4 04	 add	 esp, 4
$L69635:

; 350  : 	}
; 351  : 	return S_OK;

  00069	33 c0		 xor	 eax, eax

; 352  : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
?EndPlay@CSysExTrack@@UAGJPAX@Z ENDP			; CSysExTrack::EndPlay
_TEXT	ENDS
PUBLIC	??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@ ; `string'
PUBLIC	?Play@CSysExTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ; CSysExTrack::Play
EXTRN	__alldiv:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::PlayEx', 00H		; `CSysExTrack::PlayEx'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
CONST	SEGMENT
??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@ DB '%s: Invali'
	DB	'd pointer pPerf', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
CONST	SEGMENT
??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@ DB '%s: Inval'
	DB	'id pointer pSegSt', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT
_hr$ = -4
_this$ = 8
_pStateData$ = 12
_rtStart$ = 16
_rtEnd$ = 24
_rtOffset$ = 32
_dwFlags$ = 40
_pPerf$ = 44
_pSegSt$ = 48
_dwVirtualID$ = 52
?PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z PROC NEAR ; CSysExTrack::PlayEx, COMDAT

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 359  : 	V_INAME(IDirectMusicTrack::PlayEx);
; 360  : 	V_BUFPTR_WRITE( pStateData, sizeof(SysExStateData));

  00004	6a 18		 push	 24			; 00000018H
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $L69658
  00013	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L69658:

; 361  : 	V_INTERFACE(pPerf);

  0002c	6a 04		 push	 4
  0002e	8b 4d 2c	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $L69660
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00045	6a ff		 push	 -1
  00047	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69660:
  00054	6a 04		 push	 4
  00056	8b 55 2c	 mov	 edx, DWORD PTR _pPerf$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00061	85 c0		 test	 eax, eax
  00063	74 19		 je	 SHORT $L69663
  00065	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  0006f	6a ff		 push	 -1
  00071	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	e8 00 00 00 00	 call	 _DebugBreak@0
$L69663:
  0007e	8b 4d 2c	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00081	8b 11		 mov	 edx, DWORD PTR [ecx]
  00083	8b 02		 mov	 eax, DWORD PTR [edx]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0008b	85 c0		 test	 eax, eax
  0008d	74 19		 je	 SHORT $L69665
  0008f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00099	6a ff		 push	 -1
  0009b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a3	e8 00 00 00 00	 call	 _DebugBreak@0
$L69665:

; 362  : 	V_INTERFACE(pSegSt);

  000a8	6a 04		 push	 4
  000aa	8b 4d 30	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b3	85 c0		 test	 eax, eax
  000b5	74 19		 je	 SHORT $L69667
  000b7	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000c1	6a ff		 push	 -1
  000c3	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cb	e8 00 00 00 00	 call	 _DebugBreak@0
$L69667:
  000d0	6a 04		 push	 4
  000d2	8b 55 30	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  000d5	8b 02		 mov	 eax, DWORD PTR [edx]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000dd	85 c0		 test	 eax, eax
  000df	74 19		 je	 SHORT $L69670
  000e1	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000eb	6a ff		 push	 -1
  000ed	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	e8 00 00 00 00	 call	 _DebugBreak@0
$L69670:
  000fa	8b 4d 30	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  000fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ff	8b 02		 mov	 eax, DWORD PTR [edx]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00107	85 c0		 test	 eax, eax
  00109	74 19		 je	 SHORT $L69672
  0010b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00110	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  00115	6a ff		 push	 -1
  00117	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69672:

; 363  : 
; 364  :     HRESULT hr;
; 365  :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00124	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	83 c1 10	 add	 ecx, 16			; 00000010H
  0012a	51		 push	 ecx
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 366  :     if (dwFlags & DMUS_TRACKF_CLOCK)

  00131	8b 55 28	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00134	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  0013a	85 d2		 test	 edx, edx
  0013c	74 6d		 je	 SHORT $L69674

; 367  :     {
; 368  :         // Convert all reference times to millisecond times. Then, just use same MUSIC_TIME
; 369  :         // variables.
; 370  : 	    hr = Play(pStateData,(MUSIC_TIME)(rtStart / REF_PER_MIL),(MUSIC_TIME)(rtEnd / REF_PER_MIL),
; 371  :             (MUSIC_TIME)(rtOffset / REF_PER_MIL),rtOffset,dwFlags,pPerf,pSegSt,dwVirtualID,TRUE);

  0013e	6a 01		 push	 1
  00140	8b 45 34	 mov	 eax, DWORD PTR _dwVirtualID$[ebp]
  00143	50		 push	 eax
  00144	8b 4d 30	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  00147	51		 push	 ecx
  00148	8b 55 2c	 mov	 edx, DWORD PTR _pPerf$[ebp]
  0014b	52		 push	 edx
  0014c	8b 45 28	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0014f	50		 push	 eax
  00150	8b 4d 24	 mov	 ecx, DWORD PTR _rtOffset$[ebp+4]
  00153	51		 push	 ecx
  00154	8b 55 20	 mov	 edx, DWORD PTR _rtOffset$[ebp]
  00157	52		 push	 edx
  00158	6a 00		 push	 0
  0015a	68 10 27 00 00	 push	 10000			; 00002710H
  0015f	8b 45 24	 mov	 eax, DWORD PTR _rtOffset$[ebp+4]
  00162	50		 push	 eax
  00163	8b 4d 20	 mov	 ecx, DWORD PTR _rtOffset$[ebp]
  00166	51		 push	 ecx
  00167	e8 00 00 00 00	 call	 __alldiv
  0016c	50		 push	 eax
  0016d	6a 00		 push	 0
  0016f	68 10 27 00 00	 push	 10000			; 00002710H
  00174	8b 55 1c	 mov	 edx, DWORD PTR _rtEnd$[ebp+4]
  00177	52		 push	 edx
  00178	8b 45 18	 mov	 eax, DWORD PTR _rtEnd$[ebp]
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 __alldiv
  00181	50		 push	 eax
  00182	6a 00		 push	 0
  00184	68 10 27 00 00	 push	 10000			; 00002710H
  00189	8b 4d 14	 mov	 ecx, DWORD PTR _rtStart$[ebp+4]
  0018c	51		 push	 ecx
  0018d	8b 55 10	 mov	 edx, DWORD PTR _rtStart$[ebp]
  00190	52		 push	 edx
  00191	e8 00 00 00 00	 call	 __alldiv
  00196	50		 push	 eax
  00197	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  0019a	50		 push	 eax
  0019b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0019e	83 e9 04	 sub	 ecx, 4
  001a1	e8 00 00 00 00	 call	 ?Play@CSysExTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ; CSysExTrack::Play
  001a6	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 372  :     }
; 373  :     else

  001a9	eb 34		 jmp	 SHORT $L69678
$L69674:

; 374  :     {
; 375  : 	    hr = Play(pStateData,(MUSIC_TIME)rtStart,(MUSIC_TIME)rtEnd,
; 376  :             (MUSIC_TIME)rtOffset,0,dwFlags,pPerf,pSegSt,dwVirtualID,FALSE);

  001ab	6a 00		 push	 0
  001ad	8b 4d 34	 mov	 ecx, DWORD PTR _dwVirtualID$[ebp]
  001b0	51		 push	 ecx
  001b1	8b 55 30	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  001b4	52		 push	 edx
  001b5	8b 45 2c	 mov	 eax, DWORD PTR _pPerf$[ebp]
  001b8	50		 push	 eax
  001b9	8b 4d 28	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  001bc	51		 push	 ecx
  001bd	6a 00		 push	 0
  001bf	6a 00		 push	 0
  001c1	8b 55 20	 mov	 edx, DWORD PTR _rtOffset$[ebp]
  001c4	52		 push	 edx
  001c5	8b 45 18	 mov	 eax, DWORD PTR _rtEnd$[ebp]
  001c8	50		 push	 eax
  001c9	8b 4d 10	 mov	 ecx, DWORD PTR _rtStart$[ebp]
  001cc	51		 push	 ecx
  001cd	8b 55 0c	 mov	 edx, DWORD PTR _pStateData$[ebp]
  001d0	52		 push	 edx
  001d1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001d4	83 e9 04	 sub	 ecx, 4
  001d7	e8 00 00 00 00	 call	 ?Play@CSysExTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ; CSysExTrack::Play
  001dc	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L69678:

; 377  :     }
; 378  :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  001df	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001e2	83 c0 10	 add	 eax, 16			; 00000010H
  001e5	50		 push	 eax
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 379  : 	return hr;

  001ec	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 380  : }

  001ef	8b e5		 mov	 esp, ebp
  001f1	5d		 pop	 ebp
  001f2	c2 30 00	 ret	 48			; 00000030H
?PlayEx@CSysExTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ENDP ; CSysExTrack::PlayEx
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::Play', 00H		; `CSysExTrack::Play'::`2'::__szValidateInterfaceName
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT
_hr$ = -4
_this$ = 8
_pStateData$ = 12
_mtStart$ = 16
_mtEnd$ = 20
_mtOffset$ = 24
_dwFlags$ = 28
_pPerf$ = 32
_pSegSt$ = 36
_dwVirtualID$ = 40
?Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z PROC NEAR ; CSysExTrack::Play, COMDAT

; 399  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 400  : 	V_INAME(IDirectMusicTrack::Play);
; 401  : 	V_BUFPTR_WRITE( pStateData, sizeof(SysExStateData));

  00004	6a 18		 push	 24			; 00000018H
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $L69696
  00013	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L69696:

; 402  : 	V_INTERFACE(pPerf);

  0002c	6a 04		 push	 4
  0002e	8b 4d 20	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $L69698
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00045	6a ff		 push	 -1
  00047	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69698:
  00054	6a 04		 push	 4
  00056	8b 55 20	 mov	 edx, DWORD PTR _pPerf$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00061	85 c0		 test	 eax, eax
  00063	74 19		 je	 SHORT $L69701
  00065	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  0006f	6a ff		 push	 -1
  00071	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	e8 00 00 00 00	 call	 _DebugBreak@0
$L69701:
  0007e	8b 4d 20	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00081	8b 11		 mov	 edx, DWORD PTR [ecx]
  00083	8b 02		 mov	 eax, DWORD PTR [edx]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0008b	85 c0		 test	 eax, eax
  0008d	74 19		 je	 SHORT $L69703
  0008f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00099	6a ff		 push	 -1
  0009b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a3	e8 00 00 00 00	 call	 _DebugBreak@0
$L69703:

; 403  : 	V_INTERFACE(pSegSt);

  000a8	6a 04		 push	 4
  000aa	8b 4d 24	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b3	85 c0		 test	 eax, eax
  000b5	74 19		 je	 SHORT $L69705
  000b7	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000c1	6a ff		 push	 -1
  000c3	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cb	e8 00 00 00 00	 call	 _DebugBreak@0
$L69705:
  000d0	6a 04		 push	 4
  000d2	8b 55 24	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  000d5	8b 02		 mov	 eax, DWORD PTR [edx]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000dd	85 c0		 test	 eax, eax
  000df	74 19		 je	 SHORT $L69708
  000e1	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000eb	6a ff		 push	 -1
  000ed	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	e8 00 00 00 00	 call	 _DebugBreak@0
$L69708:
  000fa	8b 4d 24	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  000fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ff	8b 02		 mov	 eax, DWORD PTR [edx]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00107	85 c0		 test	 eax, eax
  00109	74 19		 je	 SHORT $L69710
  0010b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00110	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  00115	6a ff		 push	 -1
  00117	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69710:

; 404  : 
; 405  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  00124	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	83 c1 10	 add	 ecx, 16			; 00000010H
  0012a	51		 push	 ecx
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 406  : 	HRESULT	hr = Play(pStateData,mtStart,mtEnd,mtOffset,0,dwFlags,pPerf,pSegSt,dwVirtualID,FALSE);

  00131	6a 00		 push	 0
  00133	8b 55 28	 mov	 edx, DWORD PTR _dwVirtualID$[ebp]
  00136	52		 push	 edx
  00137	8b 45 24	 mov	 eax, DWORD PTR _pSegSt$[ebp]
  0013a	50		 push	 eax
  0013b	8b 4d 20	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  0013e	51		 push	 ecx
  0013f	8b 55 1c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00142	52		 push	 edx
  00143	6a 00		 push	 0
  00145	6a 00		 push	 0
  00147	8b 45 18	 mov	 eax, DWORD PTR _mtOffset$[ebp]
  0014a	50		 push	 eax
  0014b	8b 4d 14	 mov	 ecx, DWORD PTR _mtEnd$[ebp]
  0014e	51		 push	 ecx
  0014f	8b 55 10	 mov	 edx, DWORD PTR _mtStart$[ebp]
  00152	52		 push	 edx
  00153	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  00156	50		 push	 eax
  00157	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0015a	83 e9 04	 sub	 ecx, 4
  0015d	e8 00 00 00 00	 call	 ?Play@CSysExTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ; CSysExTrack::Play
  00162	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 407  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  00165	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00168	83 c1 10	 add	 ecx, 16			; 00000010H
  0016b	51		 push	 ecx
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 408  : 	return hr;

  00172	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 409  : }

  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 24 00	 ret	 36			; 00000024H
?Play@CSysExTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ENDP ; CSysExTrack::Play
_TEXT	ENDS
PUBLIC	?Seek@CSysExTrack@@IAEJPAXJ@Z			; CSysExTrack::Seek
EXTRN	_IID_IDirectMusicGraph:BYTE
; Function compile flags: /Odt
;	COMDAT ?Play@CSysExTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z
_TEXT	SEGMENT
_this$ = -28
_pItem$69753 = -24
_pSD$ = -20
_pGraph$ = -16
_hr$ = -12
_pSysEx$ = -8
_fSeek$ = -4
_pStateData$ = 8
_mtStart$ = 12
_mtEnd$ = 16
_mtOffset$ = 20
_rtOffset$ = 24
_dwFlags$ = 32
_pPerf$ = 36
_pSegSt$ = 40
_dwVirtualID$ = 44
_fClockTime$ = 48
?Play@CSysExTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z PROC NEAR ; CSysExTrack::Play, COMDAT
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 429  :     if (dwFlags & DMUS_TRACKF_PLAY_OFF)

  00009	8b 45 20	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0000c	83 e0 40	 and	 eax, 64			; 00000040H
  0000f	85 c0		 test	 eax, eax
  00011	74 07		 je	 SHORT $L69725

; 430  :     {
; 431  : 	    return S_OK;

  00013	33 c0		 xor	 eax, eax
  00015	e9 82 02 00 00	 jmp	 $L69724
$L69725:

; 432  :     }
; 433  : 	IDirectMusicGraph* pGraph = NULL;

  0001a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pGraph$[ebp], 0

; 434  : 	DMUS_SYSEX_PMSG* pSysEx;
; 435  : 	SysExStateData* pSD = (SysExStateData*)pStateData;

  00021	8b 4d 08	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  00024	89 4d ec	 mov	 DWORD PTR _pSD$[ebp], ecx

; 436  : 	HRESULT	hr = S_OK;

  00027	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 437  : 	BOOL fSeek = (dwFlags & DMUS_TRACKF_SEEK) ? TRUE : FALSE;

  0002e	8b 55 20	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00031	83 e2 01	 and	 edx, 1
  00034	f7 da		 neg	 edx
  00036	1b d2		 sbb	 edx, edx
  00038	f7 da		 neg	 edx
  0003a	89 55 fc	 mov	 DWORD PTR _fSeek$[ebp], edx

; 438  : 
; 439  : 	// if mtStart is 0 and dwFlags contains DMUS_TRACKF_START, we want to be sure to
; 440  : 	// send out any negative time events. So, we'll set mtStart to -768.
; 441  : 	if( (mtStart == 0) && ( dwFlags & DMUS_TRACKF_START ))

  0003d	83 7d 0c 00	 cmp	 DWORD PTR _mtStart$[ebp], 0
  00041	75 11		 jne	 SHORT $L69734
  00043	8b 45 20	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00046	83 e0 04	 and	 eax, 4
  00049	85 c0		 test	 eax, eax
  0004b	74 07		 je	 SHORT $L69734

; 442  : 	{
; 443  : 		mtStart = -768;

  0004d	c7 45 0c 00 fd
	ff ff		 mov	 DWORD PTR _mtStart$[ebp], -768 ; fffffd00H
$L69734:

; 444  : 	}
; 445  : 
; 446  : 	// if pSD->pCurrentSysEx is NULL, and we're in a normal Play call (dwFlags is 0)
; 447  : 	// this means that we either have no events, or we got to the end of the event
; 448  : 	// list previously. So, it's safe to just return.
; 449  : 	if( (pSD->pCurrentSysEx == NULL) && (dwFlags == 0) )

  00054	8b 4d ec	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00057	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0005a	75 10		 jne	 SHORT $L69735
  0005c	83 7d 20 00	 cmp	 DWORD PTR _dwFlags$[ebp], 0
  00060	75 0a		 jne	 SHORT $L69735

; 450  : 	{
; 451  : 		return S_FALSE;

  00062	b8 01 00 00 00	 mov	 eax, 1
  00067	e9 30 02 00 00	 jmp	 $L69724
$L69735:

; 452  : 	}
; 453  : 
; 454  : 	if( pSD->dwValidate != m_dwValidate )

  0006c	8b 55 ec	 mov	 edx, DWORD PTR _pSD$[ebp]
  0006f	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00072	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00075	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00078	74 15		 je	 SHORT $L69737

; 455  : 	{
; 456  : 		pSD->dwValidate = m_dwValidate;

  0007a	8b 55 ec	 mov	 edx, DWORD PTR _pSD$[ebp]
  0007d	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00080	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00083	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 457  : 		pSD->pCurrentSysEx = NULL;

  00086	8b 55 ec	 mov	 edx, DWORD PTR _pSD$[ebp]
  00089	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L69737:

; 458  : 	}
; 459  : 	if( NULL == m_SysExEventList.GetHead() )

  0008f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	83 c1 08	 add	 ecx, 8
  00095	e8 00 00 00 00	 call	 ?GetHead@SysExList@@QAEPAVSysExListItem@@XZ ; SysExList::GetHead
  0009a	85 c0		 test	 eax, eax
  0009c	75 0a		 jne	 SHORT $L69738

; 460  : 	{
; 461  : 		return DMUS_S_END;

  0009e	b8 02 12 78 08	 mov	 eax, 142086658		; 08781202H
  000a3	e9 f4 01 00 00	 jmp	 $L69724
$L69738:

; 462  : 	}
; 463  : 	// if the previous end time isn't the same as the current start time,
; 464  : 	// we need to seek to the right position.
; 465  : 	if( fSeek || ( pSD->mtPrevEnd != mtStart ))

  000a8	83 7d fc 00	 cmp	 DWORD PTR _fSeek$[ebp], 0
  000ac	75 0b		 jne	 SHORT $L69744
  000ae	8b 45 ec	 mov	 eax, DWORD PTR _pSD$[ebp]
  000b1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000b4	3b 4d 0c	 cmp	 ecx, DWORD PTR _mtStart$[ebp]
  000b7	74 12		 je	 SHORT $L69743
$L69744:

; 466  : 	{
; 467  : 		Seek( pStateData, mtStart );

  000b9	8b 55 0c	 mov	 edx, DWORD PTR _mtStart$[ebp]
  000bc	52		 push	 edx
  000bd	8b 45 08	 mov	 eax, DWORD PTR _pStateData$[ebp]
  000c0	50		 push	 eax
  000c1	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	e8 00 00 00 00	 call	 ?Seek@CSysExTrack@@IAEJPAXJ@Z ; CSysExTrack::Seek

; 468  : 	}
; 469  : 	else if( NULL == pSD->pCurrentSysEx )

  000c9	eb 18		 jmp	 SHORT $L69745
$L69743:
  000cb	8b 4d ec	 mov	 ecx, DWORD PTR _pSD$[ebp]
  000ce	83 39 00	 cmp	 DWORD PTR [ecx], 0
  000d1	75 10		 jne	 SHORT $L69745

; 470  : 	{
; 471  : 		pSD->pCurrentSysEx = m_SysExEventList.GetHead();

  000d3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000d6	83 c1 08	 add	 ecx, 8
  000d9	e8 00 00 00 00	 call	 ?GetHead@SysExList@@QAEPAVSysExListItem@@XZ ; SysExList::GetHead
  000de	8b 55 ec	 mov	 edx, DWORD PTR _pSD$[ebp]
  000e1	89 02		 mov	 DWORD PTR [edx], eax
$L69745:

; 472  : 	}
; 473  : 	pSD->mtPrevEnd = mtEnd;

  000e3	8b 45 ec	 mov	 eax, DWORD PTR _pSD$[ebp]
  000e6	8b 4d 10	 mov	 ecx, DWORD PTR _mtEnd$[ebp]
  000e9	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 474  : 
; 475  : 	if( FAILED( pSD->pSegState->QueryInterface( IID_IDirectMusicGraph,
; 476  : 		(void**)&pGraph )))

  000ec	8d 55 f0	 lea	 edx, DWORD PTR _pGraph$[ebp]
  000ef	52		 push	 edx
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicGraph
  000f5	8b 45 ec	 mov	 eax, DWORD PTR _pSD$[ebp]
  000f8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000fb	8b 55 ec	 mov	 edx, DWORD PTR _pSD$[ebp]
  000fe	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00101	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00103	50		 push	 eax
  00104	ff 11		 call	 DWORD PTR [ecx]
  00106	85 c0		 test	 eax, eax
  00108	7d 07		 jge	 SHORT $L69749

; 477  : 	{
; 478  : 		pGraph = NULL;

  0010a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pGraph$[ebp], 0
$L69749:

; 479  : 	}
; 480  : 
; 481  : 	for( ; pSD->pCurrentSysEx; pSD->pCurrentSysEx = pSD->pCurrentSysEx->GetNext() )

  00111	eb 0f		 jmp	 SHORT $L69750
$L69751:
  00113	8b 55 ec	 mov	 edx, DWORD PTR _pSD$[ebp]
  00116	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00118	e8 00 00 00 00	 call	 ?GetNext@SysExListItem@@QAEPAV1@XZ ; SysExListItem::GetNext
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00120	89 01		 mov	 DWORD PTR [ecx], eax
$L69750:
  00122	8b 55 ec	 mov	 edx, DWORD PTR _pSD$[ebp]
  00125	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00128	0f 84 59 01 00
	00		 je	 $L69752

; 482  : 	{
; 483  : 		FullSysexEvent* pItem = pSD->pCurrentSysEx->m_pItem;

  0012e	8b 45 ec	 mov	 eax, DWORD PTR _pSD$[ebp]
  00131	8b 08		 mov	 ecx, DWORD PTR [eax]
  00133	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00136	89 55 e8	 mov	 DWORD PTR _pItem$69753[ebp], edx

; 484  : 		if( NULL == pItem )

  00139	83 7d e8 00	 cmp	 DWORD PTR _pItem$69753[ebp], 0
  0013d	75 02		 jne	 SHORT $L69754

; 485  : 		{
; 486  : 			continue;

  0013f	eb d2		 jmp	 SHORT $L69751
$L69754:

; 487  : 		}
; 488  : 		if( pItem->mtTime >= mtEnd )

  00141	8b 45 e8	 mov	 eax, DWORD PTR _pItem$69753[ebp]
  00144	8b 08		 mov	 ecx, DWORD PTR [eax]
  00146	3b 4d 10	 cmp	 ecx, DWORD PTR _mtEnd$[ebp]
  00149	7c 0c		 jl	 SHORT $L69755

; 489  : 		{
; 490  : 			// this time is in the future. Return now to retain the same
; 491  : 			// seek pointers for next time.
; 492  : 			hr = S_OK;

  0014b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 493  : 			break;

  00152	e9 30 01 00 00	 jmp	 $L69752
$L69755:

; 494  : 		}
; 495  : 		if( (pItem->mtTime < mtStart) && !fSeek )

  00157	8b 55 e8	 mov	 edx, DWORD PTR _pItem$69753[ebp]
  0015a	8b 02		 mov	 eax, DWORD PTR [edx]
  0015c	3b 45 0c	 cmp	 eax, DWORD PTR _mtStart$[ebp]
  0015f	7d 0b		 jge	 SHORT $L69757
  00161	83 7d fc 00	 cmp	 DWORD PTR _fSeek$[ebp], 0
  00165	75 05		 jne	 SHORT $L69757

; 496  : 		{
; 497  : 			break;

  00167	e9 1b 01 00 00	 jmp	 $L69752
$L69757:

; 498  : 		}
; 499  : 		// allocate a DMUS_SYSEX_PMSG of the approriate size and read 
; 500  : 		// the sysex data into it
; 501  : 		if( SUCCEEDED( hr = pSD->pPerformance->AllocPMsg( 
; 502  : 			sizeof(DMUS_SYSEX_PMSG) + pItem->dwSysExLength, (DMUS_PMSG**)&pSysEx ) ) )

  0016c	8d 4d f8	 lea	 ecx, DWORD PTR _pSysEx$[ebp]
  0016f	51		 push	 ecx
  00170	8b 55 e8	 mov	 edx, DWORD PTR _pItem$69753[ebp]
  00173	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00176	83 c0 40	 add	 eax, 64			; 00000040H
  00179	50		 push	 eax
  0017a	8b 4d ec	 mov	 ecx, DWORD PTR _pSD$[ebp]
  0017d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00180	8b 45 ec	 mov	 eax, DWORD PTR _pSD$[ebp]
  00183	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00186	8b 12		 mov	 edx, DWORD PTR [edx]
  00188	51		 push	 ecx
  00189	ff 52 24	 call	 DWORD PTR [edx+36]
  0018c	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
  0018f	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00193	0f 8c e0 00 00
	00		 jl	 $L69761

; 503  : 		{
; 504  : 			memcpy( pSysEx->abData, pItem->pbSysExData, pItem->dwSysExLength );

  00199	8b 45 e8	 mov	 eax, DWORD PTR _pItem$69753[ebp]
  0019c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0019f	51		 push	 ecx
  001a0	8b 55 e8	 mov	 edx, DWORD PTR _pItem$69753[ebp]
  001a3	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001a6	50		 push	 eax
  001a7	8b 4d f8	 mov	 ecx, DWORD PTR _pSysEx$[ebp]
  001aa	83 c1 3c	 add	 ecx, 60			; 0000003cH
  001ad	51		 push	 ecx
  001ae	e8 00 00 00 00	 call	 _memcpy
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 505  :             if (fClockTime)

  001b6	83 7d 30 00	 cmp	 DWORD PTR _fClockTime$[ebp], 0
  001ba	74 27		 je	 SHORT $L69762

; 506  :             {
; 507  :                 pSysEx->rtTime = (pItem->mtTime  * REF_PER_MIL) + rtOffset;

  001bc	8b 55 e8	 mov	 edx, DWORD PTR _pItem$69753[ebp]
  001bf	8b 02		 mov	 eax, DWORD PTR [edx]
  001c1	69 c0 10 27 00
	00		 imul	 eax, 10000		; 00002710H
  001c7	99		 cdq
  001c8	03 45 18	 add	 eax, DWORD PTR _rtOffset$[ebp]
  001cb	13 55 1c	 adc	 edx, DWORD PTR _rtOffset$[ebp+4]
  001ce	8b 4d f8	 mov	 ecx, DWORD PTR _pSysEx$[ebp]
  001d1	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  001d4	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 508  :                 pSysEx->dwFlags = DMUS_PMSGF_REFTIME | DMUS_PMSGF_LOCKTOREFTIME;

  001d7	8b 55 f8	 mov	 edx, DWORD PTR _pSysEx$[ebp]
  001da	c7 42 14 41 00
	00 00		 mov	 DWORD PTR [edx+20], 65	; 00000041H

; 509  : 
; 510  :             }
; 511  :             else

  001e1	eb 18		 jmp	 SHORT $L69763
$L69762:

; 512  :             {
; 513  : 			    pSysEx->mtTime = pItem->mtTime + mtOffset;

  001e3	8b 45 e8	 mov	 eax, DWORD PTR _pItem$69753[ebp]
  001e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e8	03 4d 14	 add	 ecx, DWORD PTR _mtOffset$[ebp]
  001eb	8b 55 f8	 mov	 edx, DWORD PTR _pSysEx$[ebp]
  001ee	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 514  :                 pSysEx->dwFlags = DMUS_PMSGF_MUSICTIME;

  001f1	8b 45 f8	 mov	 eax, DWORD PTR _pSysEx$[ebp]
  001f4	c7 40 14 02 00
	00 00		 mov	 DWORD PTR [eax+20], 2
$L69763:

; 515  :             }
; 516  : 			pSysEx->dwLen = pItem->dwSysExLength;

  001fb	8b 4d f8	 mov	 ecx, DWORD PTR _pSysEx$[ebp]
  001fe	8b 55 e8	 mov	 edx, DWORD PTR _pItem$69753[ebp]
  00201	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00204	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 517  : 			pSysEx->dwPChannel = 0;

  00207	8b 4d f8	 mov	 ecx, DWORD PTR _pSysEx$[ebp]
  0020a	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 518  : 			pSysEx->dwVirtualTrackID = pSD->dwVirtualTrackID;

  00211	8b 55 f8	 mov	 edx, DWORD PTR _pSysEx$[ebp]
  00214	8b 45 ec	 mov	 eax, DWORD PTR _pSD$[ebp]
  00217	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0021a	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 519  : 			pSysEx->dwType = DMUS_PMSGT_SYSEX;

  0021d	8b 55 f8	 mov	 edx, DWORD PTR _pSysEx$[ebp]
  00220	c7 42 28 02 00
	00 00		 mov	 DWORD PTR [edx+40], 2

; 520  : 			pSysEx->dwGroupID = 0xffffffff;

  00227	8b 45 f8	 mov	 eax, DWORD PTR _pSysEx$[ebp]
  0022a	c7 40 30 ff ff
	ff ff		 mov	 DWORD PTR [eax+48], -1

; 521  : 
; 522  : 			if( pGraph )

  00231	83 7d f0 00	 cmp	 DWORD PTR _pGraph$[ebp], 0
  00235	74 10		 je	 SHORT $L69764

; 523  : 			{
; 524  : 				pGraph->StampPMsg( (DMUS_PMSG*)pSysEx );

  00237	8b 4d f8	 mov	 ecx, DWORD PTR _pSysEx$[ebp]
  0023a	51		 push	 ecx
  0023b	8b 55 f0	 mov	 edx, DWORD PTR _pGraph$[ebp]
  0023e	8b 02		 mov	 eax, DWORD PTR [edx]
  00240	8b 4d f0	 mov	 ecx, DWORD PTR _pGraph$[ebp]
  00243	51		 push	 ecx
  00244	ff 50 0c	 call	 DWORD PTR [eax+12]
$L69764:

; 525  : 			}
; 526  : 			if(FAILED(pSD->pPerformance->SendPMsg( (DMUS_PMSG*)pSysEx )))

  00247	8b 55 f8	 mov	 edx, DWORD PTR _pSysEx$[ebp]
  0024a	52		 push	 edx
  0024b	8b 45 ec	 mov	 eax, DWORD PTR _pSD$[ebp]
  0024e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00251	8b 55 ec	 mov	 edx, DWORD PTR _pSD$[ebp]
  00254	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00257	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00259	50		 push	 eax
  0025a	ff 51 10	 call	 DWORD PTR [ecx+16]
  0025d	85 c0		 test	 eax, eax
  0025f	7d 16		 jge	 SHORT $L69768

; 527  : 			{
; 528  : 				pSD->pPerformance->FreePMsg( (DMUS_PMSG*)pSysEx );

  00261	8b 55 f8	 mov	 edx, DWORD PTR _pSysEx$[ebp]
  00264	52		 push	 edx
  00265	8b 45 ec	 mov	 eax, DWORD PTR _pSD$[ebp]
  00268	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0026b	8b 55 ec	 mov	 edx, DWORD PTR _pSD$[ebp]
  0026e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00271	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00273	50		 push	 eax
  00274	ff 51 28	 call	 DWORD PTR [ecx+40]
$L69768:

; 529  : 			}
; 530  : 		}
; 531  :         else

  00277	eb 09		 jmp	 SHORT $L69770
$L69761:

; 532  :         {
; 533  :             hr = DMUS_S_END;

  00279	c7 45 f4 02 12
	78 08		 mov	 DWORD PTR _hr$[ebp], 142086658 ; 08781202H

; 534  :             break;

  00280	eb 05		 jmp	 SHORT $L69752
$L69770:

; 535  :         }
; 536  : 	}

  00282	e9 8c fe ff ff	 jmp	 $L69751
$L69752:

; 537  : 	if( pGraph )

  00287	83 7d f0 00	 cmp	 DWORD PTR _pGraph$[ebp], 0
  0028b	74 0c		 je	 SHORT $L69775

; 538  : 	{
; 539  : 		pGraph->Release();

  0028d	8b 55 f0	 mov	 edx, DWORD PTR _pGraph$[ebp]
  00290	8b 02		 mov	 eax, DWORD PTR [edx]
  00292	8b 4d f0	 mov	 ecx, DWORD PTR _pGraph$[ebp]
  00295	51		 push	 ecx
  00296	ff 50 08	 call	 DWORD PTR [eax+8]
$L69775:

; 540  : 	}
; 541  : 	return hr;

  00299	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]
$L69724:

; 542  : }

  0029c	8b e5		 mov	 esp, ebp
  0029e	5d		 pop	 ebp
  0029f	c2 2c 00	 ret	 44			; 0000002cH
?Play@CSysExTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ENDP ; CSysExTrack::Play
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Seek@CSysExTrack@@IAEJPAXJ@Z
_TEXT	SEGMENT
_this$ = -12
_pSD$ = -8
_pItem$ = -4
_pStateData$ = 8
_mtTime$ = 12
?Seek@CSysExTrack@@IAEJPAXJ@Z PROC NEAR			; CSysExTrack::Seek, COMDAT
; _this$ = ecx

; 547  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 548  : 	SysExStateData* pSD = (SysExStateData*)pStateData;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pStateData$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _pSD$[ebp], eax

; 549  : 
; 550  : 	if( NULL == m_SysExEventList.GetHead() )

  0000f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ?GetHead@SysExList@@QAEPAVSysExListItem@@XZ ; SysExList::GetHead
  0001a	85 c0		 test	 eax, eax
  0001c	75 07		 jne	 SHORT $L69783

; 551  : 	{
; 552  : 		return S_FALSE;

  0001e	b8 01 00 00 00	 mov	 eax, 1
  00023	eb 71		 jmp	 SHORT $L69780
$L69783:

; 553  : 	}
; 554  : 	if( NULL == pSD->pCurrentSysEx )

  00025	8b 4d f8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00028	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0002b	75 10		 jne	 SHORT $L69785

; 555  : 	{
; 556  : 		pSD->pCurrentSysEx = m_SysExEventList.GetHead();

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 08	 add	 ecx, 8
  00033	e8 00 00 00 00	 call	 ?GetHead@SysExList@@QAEPAVSysExListItem@@XZ ; SysExList::GetHead
  00038	8b 55 f8	 mov	 edx, DWORD PTR _pSD$[ebp]
  0003b	89 02		 mov	 DWORD PTR [edx], eax
$L69785:

; 557  : 	}
; 558  : 	// if the current event's time is on or past mtTime, we need to rewind to the beginning
; 559  : 	FullSysexEvent* pItem = pSD->pCurrentSysEx->m_pItem;

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _pSD$[ebp]
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00045	89 55 fc	 mov	 DWORD PTR _pItem$[ebp], edx

; 560  : 	if( pItem->mtTime >= mtTime )

  00048	8b 45 fc	 mov	 eax, DWORD PTR _pItem$[ebp]
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	3b 4d 0c	 cmp	 ecx, DWORD PTR _mtTime$[ebp]
  00050	7c 10		 jl	 SHORT $L69787

; 561  : 	{
; 562  : 		pSD->pCurrentSysEx = m_SysExEventList.GetHead();

  00052	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	83 c1 08	 add	 ecx, 8
  00058	e8 00 00 00 00	 call	 ?GetHead@SysExList@@QAEPAVSysExListItem@@XZ ; SysExList::GetHead
  0005d	8b 55 f8	 mov	 edx, DWORD PTR _pSD$[ebp]
  00060	89 02		 mov	 DWORD PTR [edx], eax
$L69787:

; 563  : 	}
; 564  : 	// now start seeking until we find an event with time on or past mtTime
; 565  : 	for( ; pSD->pCurrentSysEx; pSD->pCurrentSysEx = pSD->pCurrentSysEx->GetNext() )

  00062	eb 0f		 jmp	 SHORT $L69788
$L69789:
  00064	8b 45 f8	 mov	 eax, DWORD PTR _pSD$[ebp]
  00067	8b 08		 mov	 ecx, DWORD PTR [eax]
  00069	e8 00 00 00 00	 call	 ?GetNext@SysExListItem@@QAEPAV1@XZ ; SysExListItem::GetNext
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00071	89 01		 mov	 DWORD PTR [ecx], eax
$L69788:
  00073	8b 55 f8	 mov	 edx, DWORD PTR _pSD$[ebp]
  00076	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00079	74 19		 je	 SHORT $L69790

; 566  : 	{
; 567  : 		pItem = pSD->pCurrentSysEx->m_pItem;

  0007b	8b 45 f8	 mov	 eax, DWORD PTR _pSD$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00083	89 55 fc	 mov	 DWORD PTR _pItem$[ebp], edx

; 568  : 		if( pItem->mtTime >= mtTime )

  00086	8b 45 fc	 mov	 eax, DWORD PTR _pItem$[ebp]
  00089	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008b	3b 4d 0c	 cmp	 ecx, DWORD PTR _mtTime$[ebp]
  0008e	7c 02		 jl	 SHORT $L69791

; 569  : 		{
; 570  : 			break;

  00090	eb 02		 jmp	 SHORT $L69790
$L69791:

; 571  : 		}
; 572  : 	}

  00092	eb d0		 jmp	 SHORT $L69789
$L69790:

; 573  : 	return S_OK;

  00094	33 c0		 xor	 eax, eax
$L69780:

; 574  : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
?Seek@CSysExTrack@@IAEJPAXJ@Z ENDP			; CSysExTrack::Seek
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetParam@CSysExTrack@@UAGJABU_GUID@@JPAJPAX@Z
_TEXT	SEGMENT
_this$ = 8
_rguid$ = 12
_mtTime$ = 16
_pmtNext$ = 20
_pData$ = 24
?GetParam@CSysExTrack@@UAGJABU_GUID@@JPAJPAX@Z PROC NEAR ; CSysExTrack::GetParam, COMDAT

; 581  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 583  : }

  00008	5d		 pop	 ebp
  00009	c2 14 00	 ret	 20			; 00000014H
?GetParam@CSysExTrack@@UAGJABU_GUID@@JPAJPAX@Z ENDP	; CSysExTrack::GetParam
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetParam@CSysExTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT
_this$ = 8
_rguid$ = 12
_mtTime$ = 16
_pData$ = 20
?SetParam@CSysExTrack@@UAGJABU_GUID@@JPAX@Z PROC NEAR	; CSysExTrack::SetParam, COMDAT

; 589  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 590  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 591  : }

  00008	5d		 pop	 ebp
  00009	c2 10 00	 ret	 16			; 00000010H
?SetParam@CSysExTrack@@UAGJABU_GUID@@JPAX@Z ENDP	; CSysExTrack::SetParam
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetParamEx@CSysExTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z
_TEXT	SEGMENT
_this$ = 8
_rguidType$ = 12
_rtTime$ = 16
_prtNext$ = 24
_pParam$ = 28
_pStateData$ = 32
_dwFlags$ = 36
?GetParamEx@CSysExTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z PROC NEAR ; CSysExTrack::GetParamEx, COMDAT

; 595  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 596  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 597  : }

  00008	5d		 pop	 ebp
  00009	c2 20 00	 ret	 32			; 00000020H
?GetParamEx@CSysExTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z ENDP ; CSysExTrack::GetParamEx
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetParamEx@CSysExTrack@@UAGJABU_GUID@@_JPAX2K@Z
_TEXT	SEGMENT
_this$ = 8
_rguidType$ = 12
_rtTime$ = 16
_pParam$ = 24
_pStateData$ = 28
_dwFlags$ = 32
?SetParamEx@CSysExTrack@@UAGJABU_GUID@@_JPAX2K@Z PROC NEAR ; CSysExTrack::SetParamEx, COMDAT

; 601  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 603  : }

  00008	5d		 pop	 ebp
  00009	c2 1c 00	 ret	 28			; 0000001cH
?SetParamEx@CSysExTrack@@UAGJABU_GUID@@_JPAX2K@Z ENDP	; CSysExTrack::SetParamEx
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddNotificationType@CSysExTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguidNotification$ = 12
?AddNotificationType@CSysExTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CSysExTrack::AddNotificationType, COMDAT

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 608  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 609  : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?AddNotificationType@CSysExTrack@@UAGJABU_GUID@@@Z ENDP	; CSysExTrack::AddNotificationType
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RemoveNotificationType@CSysExTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguidNotification$ = 12
?RemoveNotificationType@CSysExTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CSysExTrack::RemoveNotificationType, COMDAT

; 613  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 614  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 615  : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?RemoveNotificationType@CSysExTrack@@UAGJABU_GUID@@@Z ENDP ; CSysExTrack::RemoveNotificationType
_TEXT	ENDS
PUBLIC	??_C@_0DO@CMNGMJOA@Error?3?5Unable?5to?5clone?5sysex?5tra@ ; `string'
PUBLIC	??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??Clone@CSysExTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Clone@CSysExTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::Clone', 00H		; `CSysExTrack::Clone'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
CONST	SEGMENT
??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@ DB '%s: Inva'
	DB	'lid pointer ppTrack', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@CMNGMJOA@Error?3?5Unable?5to?5clone?5sysex?5tra@
CONST	SEGMENT
??_C@_0DO@CMNGMJOA@Error?3?5Unable?5to?5clone?5sysex?5tra@ DB 'Error: Una'
	DB	'ble to clone sysex track, invalid start parameter.', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Clone@CSysExTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT
tv88 = -16
$T70360 = -12
_hr$ = -8
_pDM$ = -4
_this$ = 8
_mtStart$ = 12
_mtEnd$ = 16
_ppTrack$ = 20
?Clone@CSysExTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z PROC NEAR ; CSysExTrack::Clone, COMDAT

; 621  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 622  : 	V_INAME(IDirectMusicTrack::Clone);
; 623  : 	V_PTRPTR_WRITE(ppTrack);

  00006	6a 04		 push	 4
  00008	8b 45 14	 mov	 eax, DWORD PTR _ppTrack$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69846
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Clone@CSysExTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69846:

; 624  : 
; 625  : 	HRESULT hr = S_OK;

  0002e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 626  : 
; 627  : 	if((mtStart < 0 ) || (mtStart > mtEnd))

  00035	83 7d 0c 00	 cmp	 DWORD PTR _mtStart$[ebp], 0
  00039	7c 08		 jl	 SHORT $L69850
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  0003e	3b 4d 10	 cmp	 ecx, DWORD PTR _mtEnd$[ebp]
  00041	7e 1d		 jle	 SHORT $L69849
$L69850:

; 628  : 	{
; 629  :         Trace(1,"Error: Unable to clone sysex track, invalid start parameter.\n",mtStart);

  00043	8b 55 0c	 mov	 edx, DWORD PTR _mtStart$[ebp]
  00046	52		 push	 edx
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@CMNGMJOA@Error?3?5Unable?5to?5clone?5sysex?5tra@
  0004c	6a 01		 push	 1
  0004e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 630  : 		return E_INVALIDARG;

  00056	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  0005b	e9 89 00 00 00	 jmp	 $L69842
$L69849:

; 631  : 	}
; 632  : 
; 633  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  00060	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 c0 10	 add	 eax, 16			; 00000010H
  00066	50		 push	 eax
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 634  : 
; 635  :     CSysExTrack *pDM;
; 636  :     NEWCATCH(pDM,CSysExTrack(*this, mtStart, mtEnd))

  0006d	6a 3c		 push	 60			; 0000003cH
  0006f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00074	83 c4 04	 add	 esp, 4
  00077	89 45 f4	 mov	 DWORD PTR $T70360[ebp], eax
  0007a	83 7d f4 00	 cmp	 DWORD PTR $T70360[ebp], 0
  0007e	74 1c		 je	 SHORT $L70361
  00080	8b 4d 10	 mov	 ecx, DWORD PTR _mtEnd$[ebp]
  00083	51		 push	 ecx
  00084	8b 55 0c	 mov	 edx, DWORD PTR _mtStart$[ebp]
  00087	52		 push	 edx
  00088	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	83 e8 04	 sub	 eax, 4
  0008e	50		 push	 eax
  0008f	8b 4d f4	 mov	 ecx, DWORD PTR $T70360[ebp]
  00092	e8 00 00 00 00	 call	 ??0CSysExTrack@@QAE@AAV0@JJ@Z ; CSysExTrack::CSysExTrack
  00097	89 45 f0	 mov	 DWORD PTR tv88[ebp], eax
  0009a	eb 07		 jmp	 SHORT $L70362
$L70361:
  0009c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$L70362:
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR tv88[ebp]
  000a6	89 4d fc	 mov	 DWORD PTR _pDM$[ebp], ecx

; 637  : /*    try
; 638  :     {
; 639  :         pDM = new CSysExTrack(*this, mtStart, mtEnd);
; 640  :     }
; 641  :     catch( ... )
; 642  :     {
; 643  :         pDM = NULL;
; 644  :     }*/
; 645  : 
; 646  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  000a9	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ac	83 c2 10	 add	 edx, 16			; 00000010H
  000af	52		 push	 edx
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 647  :     if (pDM == NULL) {

  000b6	83 7d fc 00	 cmp	 DWORD PTR _pDM$[ebp], 0
  000ba	75 07		 jne	 SHORT $L69856

; 648  :         return E_OUTOFMEMORY;

  000bc	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  000c1	eb 26		 jmp	 SHORT $L69842
$L69856:

; 649  :     }
; 650  : 
; 651  :     hr = pDM->QueryInterface(IID_IDirectMusicTrack, (void**)ppTrack);

  000c3	8b 45 14	 mov	 eax, DWORD PTR _ppTrack$[ebp]
  000c6	50		 push	 eax
  000c7	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack
  000cc	8b 4d fc	 mov	 ecx, DWORD PTR _pDM$[ebp]
  000cf	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d1	8b 45 fc	 mov	 eax, DWORD PTR _pDM$[ebp]
  000d4	50		 push	 eax
  000d5	ff 12		 call	 DWORD PTR [edx]
  000d7	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 652  :     pDM->Release();

  000da	8b 4d fc	 mov	 ecx, DWORD PTR _pDM$[ebp]
  000dd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000df	8b 45 fc	 mov	 eax, DWORD PTR _pDM$[ebp]
  000e2	50		 push	 eax
  000e3	ff 52 08	 call	 DWORD PTR [edx+8]

; 653  : 
; 654  : 	return hr;

  000e6	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L69842:

; 655  : }

  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 10 00	 ret	 16			; 00000010H
?Clone@CSysExTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z ENDP ; CSysExTrack::Clone
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Compose@CSysExTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT
_this$ = 8
_pContext$ = 12
_dwTrackGroup$ = 16
_ppResultTrack$ = 20
?Compose@CSysExTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z PROC NEAR ; CSysExTrack::Compose, COMDAT

; 662  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 663  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 664  : }

  00008	5d		 pop	 ebp
  00009	c2 10 00	 ret	 16			; 00000010H
?Compose@CSysExTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z ENDP ; CSysExTrack::Compose
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Join@CSysExTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z
_TEXT	SEGMENT
_this$ = 8
_pNewTrack$ = 12
_mtJoin$ = 16
_pContext$ = 20
_dwTrackGroup$ = 24
_ppResultTrack$ = 28
?Join@CSysExTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z PROC NEAR ; CSysExTrack::Join, COMDAT

; 672  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 673  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 674  : }

  00008	5d		 pop	 ebp
  00009	c2 18 00	 ret	 24			; 00000018H
?Join@CSysExTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z ENDP ; CSysExTrack::Join
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@CSysExTrack@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CSysExTrack@@W3AGJABU_GUID@@PAPAX@Z PROC NEAR ; CSysExTrack::QueryInterface, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CSysExTrack@@UAGJABU_GUID@@PAPAX@Z ; CSysExTrack::QueryInterface
?QueryInterface@CSysExTrack@@W3AGJABU_GUID@@PAPAX@Z ENDP ; CSysExTrack::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CSysExTrack@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CSysExTrack@@W3AGKXZ PROC NEAR			; CSysExTrack::AddRef, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CSysExTrack@@UAGKXZ ; CSysExTrack::AddRef
?AddRef@CSysExTrack@@W3AGKXZ ENDP			; CSysExTrack::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CSysExTrack@@W3AGKXZ
_TEXT	SEGMENT
?Release@CSysExTrack@@W3AGKXZ PROC NEAR			; CSysExTrack::Release, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?Release@CSysExTrack@@UAGKXZ ; CSysExTrack::Release
?Release@CSysExTrack@@W3AGKXZ ENDP			; CSysExTrack::Release
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0AList@@QAE@XZ PROC NEAR				; AList::AList, COMDAT
; _this$ = ecx

; 34   :     AList() {m_pHead=NULL;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0AList@@QAE@XZ ENDP					; AList::AList
_TEXT	ENDS
EXTRN	?DirectMusicAllocI@@YGPAXI@Z:NEAR		; DirectMusicAllocI
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xalloc.h
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_cb$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 13   :     return DirectMusicAllocI(cb);

  00003	8b 45 08	 mov	 eax, DWORD PTR _cb$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicAllocI@@YGPAXI@Z ; DirectMusicAllocI

; 14   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
EXTRN	?DirectMusicFreeI@@YGXPAX@Z:NEAR		; DirectMusicFreeI
; Function compile flags: /Odt
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 19   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_U@YAPAXI@Z
_TEXT	SEGMENT
_cb$ = 8
??_U@YAPAXI@Z PROC NEAR					; operator new[], COMDAT

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   :     return DirectMusicAllocI(cb);

  00003	8b 45 08	 mov	 eax, DWORD PTR _cb$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicAllocI@@YGPAXI@Z ; DirectMusicAllocI

; 24   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??_U@YAPAXI@Z ENDP					; operator new[]
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??_V@YAXPAX@Z PROC NEAR					; operator delete[], COMDAT

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 29   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??_V@YAXPAX@Z ENDP					; operator delete[]
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xboxutil.h
_TEXT	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT
___formal$ = 8
?DeleteCriticalSection@@YGXPAX@Z PROC NEAR		; DeleteCriticalSection, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : }

  00003	5d		 pop	 ebp
  00004	c2 04 00	 ret	 4
?DeleteCriticalSection@@YGXPAX@Z ENDP			; DeleteCriticalSection
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IUnknown@@QAE@XZ PROC NEAR				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??0AListItem@@QAE@XZ				; AListItem::AListItem
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\sysextrk.h
;	COMDAT ??0SysExListItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SysExListItem@@QAE@XZ PROC NEAR			; SysExListItem::SysExListItem, COMDAT
; _this$ = ecx

; 20   : 	SysExListItem()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AListItem@@QAE@XZ	; AListItem::AListItem

; 21   : 	{
; 22   : 		m_pItem = NULL;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 23   : 	};

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??0SysExListItem@@QAE@XZ ENDP				; SysExListItem::SysExListItem
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ??0AListItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0AListItem@@QAE@XZ PROC NEAR				; AListItem::AListItem, COMDAT
; _this$ = ecx

; 17   :     AListItem() { m_pNext=NULL; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0AListItem@@QAE@XZ ENDP				; AListItem::AListItem
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\sysextrk.h
_TEXT	ENDS
;	COMDAT ?SetItem@SysExListItem@@QAEJUFullSysexEvent@@@Z
_TEXT	SEGMENT
_this$ = -12
$T70409 = -8
$T70408 = -4
_item$ = 8
?SetItem@SysExListItem@@QAEJUFullSysexEvent@@@Z PROC NEAR ; SysExListItem::SetItem, COMDAT
; _this$ = ecx

; 26   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 		if( m_pItem )

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	74 1a		 je	 SHORT $L51008

; 28   : 		{
; 29   : 			delete [] m_pItem->pbSysExData;

  00012	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0001b	89 45 fc	 mov	 DWORD PTR $T70408[ebp], eax
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR $T70408[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00027	83 c4 04	 add	 esp, 4

; 30   : 		}
; 31   : 		else

  0002a	eb 16		 jmp	 SHORT $L51010
$L51008:

; 32   : 		{
; 33   : 			m_pItem = new FullSysexEvent;

  0002c	6a 10		 push	 16			; 00000010H
  0002e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 f8	 mov	 DWORD PTR $T70409[ebp], eax
  00039	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8b 45 f8	 mov	 eax, DWORD PTR $T70409[ebp]
  0003f	89 42 04	 mov	 DWORD PTR [edx+4], eax
$L51010:

; 34   : 		}
; 35   : 		if( m_pItem )

  00042	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00049	74 27		 je	 SHORT $L51013

; 36   : 		{
; 37   : 			m_pItem->mtTime = item.mtTime;

  0004b	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0004e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _item$[ebp]
  00054	89 08		 mov	 DWORD PTR [eax], ecx

; 38   : 			m_pItem->dwSysExLength = item.dwSysExLength;

  00056	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00059	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005c	8b 4d 10	 mov	 ecx, DWORD PTR _item$[ebp+8]
  0005f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 39   : 			m_pItem->pbSysExData = item.pbSysExData;

  00062	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00068	8b 4d 14	 mov	 ecx, DWORD PTR _item$[ebp+12]
  0006b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 40   : 			return S_OK;

  0006e	33 c0		 xor	 eax, eax
  00070	eb 05		 jmp	 SHORT $L51007
$L51013:

; 41   : 		}
; 42   : 		else
; 43   : 		{
; 44   : 			return E_OUTOFMEMORY;

  00072	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
$L51007:

; 45   : 		}
; 46   : 	};

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 10 00	 ret	 16			; 00000010H
?SetItem@SysExListItem@@QAEJUFullSysexEvent@@@Z ENDP	; SysExListItem::SetItem
_TEXT	ENDS
PUBLIC	?GetNext@AListItem@@QBEPAV1@XZ			; AListItem::GetNext
; Function compile flags: /Odt
;	COMDAT ?GetNext@SysExListItem@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@SysExListItem@@QAEPAV1@XZ PROC NEAR		; SysExListItem::GetNext, COMDAT
; _this$ = ecx

; 61   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 		return (SysExListItem*)AListItem::GetNext();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext

; 63   : 	};

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetNext@SysExListItem@@QAEPAV1@XZ ENDP			; SysExListItem::GetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@AListItem@@QBEPAV1@XZ PROC NEAR		; AListItem::GetNext, COMDAT
; _this$ = ecx

; 18   :     AListItem *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetNext@AListItem@@QBEPAV1@XZ ENDP			; AListItem::GetNext
_TEXT	ENDS
PUBLIC	?RemoveHead@AList@@QAEPAVAListItem@@XZ		; AList::RemoveHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\sysextrk.h
;	COMDAT ??1SysExList@@QAE@XZ
_TEXT	SEGMENT
tv71 = -20
_this$ = -16
$T70420 = -12
$T70419 = -8
_pItem$ = -4
??1SysExList@@QAE@XZ PROC NEAR				; SysExList::~SysExList, COMDAT
; _this$ = ecx

; 72   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
$L51043:

; 73   : 		SysExListItem* pItem;
; 74   : 		while( pItem = (SysExListItem*)AList::RemoveHead() )

  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?RemoveHead@AList@@QAEPAVAListItem@@XZ ; AList::RemoveHead
  00011	89 45 fc	 mov	 DWORD PTR _pItem$[ebp], eax
  00014	83 7d fc 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  00018	74 2a		 je	 SHORT $L51040

; 75   : 		{
; 76   : 			delete pItem;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _pItem$[ebp]
  0001d	89 45 f4	 mov	 DWORD PTR $T70420[ebp], eax
  00020	8b 4d f4	 mov	 ecx, DWORD PTR $T70420[ebp]
  00023	89 4d f8	 mov	 DWORD PTR $T70419[ebp], ecx
  00026	83 7d f8 00	 cmp	 DWORD PTR $T70419[ebp], 0
  0002a	74 0f		 je	 SHORT $L70421
  0002c	6a 01		 push	 1
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR $T70419[ebp]
  00031	e8 00 00 00 00	 call	 ??_GSysExListItem@@QAEPAXI@Z
  00036	89 45 ec	 mov	 DWORD PTR tv71[ebp], eax
  00039	eb 07		 jmp	 SHORT $L70422
$L70421:
  0003b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L70422:

; 77   : 		}

  00042	eb c5		 jmp	 SHORT $L51043
$L51040:

; 78   : 	};

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
??1SysExList@@QAE@XZ ENDP				; SysExList::~SysExList
_TEXT	ENDS
PUBLIC	?SetNext@AListItem@@QAEXPAV1@@Z			; AListItem::SetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -8
_li$ = -4
?RemoveHead@AList@@QAEPAVAListItem@@XZ PROC NEAR	; AList::RemoveHead, COMDAT
; _this$ = ecx

; 71   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 72   :             AListItem *li;
; 73   :             li = m_pHead;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR _li$[ebp], ecx

; 74   :             if(m_pHead)

  00011	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00014	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00017	74 19		 je	 SHORT $L32744

; 75   :             {
; 76   :                 m_pHead = m_pHead->GetNext();

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	89 01		 mov	 DWORD PTR [ecx], eax

; 77   :                 li->SetNext(NULL);

  00028	6a 00		 push	 0
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  0002d	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext
$L32744:

; 78   :             }
; 79   :             return li;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _li$[ebp]

; 80   :         }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?RemoveHead@AList@@QAEPAVAListItem@@XZ ENDP		; AList::RemoveHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@AListItem@@QAEXPAV1@@Z PROC NEAR		; AListItem::SetNext, COMDAT
; _this$ = ecx

; 19   :     void SetNext(AListItem *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetNext@AListItem@@QAEXPAV1@@Z ENDP			; AListItem::SetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\sysextrk.h
_TEXT	ENDS
;	COMDAT ?DeleteAll@SysExList@@QAEXXZ
_TEXT	SEGMENT
tv71 = -20
_this$ = -16
$T70433 = -12
$T70432 = -8
_pItem$ = -4
?DeleteAll@SysExList@@QAEXXZ PROC NEAR			; SysExList::DeleteAll, COMDAT
; _this$ = ecx

; 81   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
$L51052:

; 82   : 		SysExListItem* pItem;
; 83   : 		while( pItem = (SysExListItem*)AList::RemoveHead() )

  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?RemoveHead@AList@@QAEPAVAListItem@@XZ ; AList::RemoveHead
  00011	89 45 fc	 mov	 DWORD PTR _pItem$[ebp], eax
  00014	83 7d fc 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  00018	74 2a		 je	 SHORT $L51049

; 84   : 		{
; 85   : 			delete pItem;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _pItem$[ebp]
  0001d	89 45 f4	 mov	 DWORD PTR $T70433[ebp], eax
  00020	8b 4d f4	 mov	 ecx, DWORD PTR $T70433[ebp]
  00023	89 4d f8	 mov	 DWORD PTR $T70432[ebp], ecx
  00026	83 7d f8 00	 cmp	 DWORD PTR $T70432[ebp], 0
  0002a	74 0f		 je	 SHORT $L70434
  0002c	6a 01		 push	 1
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR $T70432[ebp]
  00031	e8 00 00 00 00	 call	 ??_GSysExListItem@@QAEPAXI@Z
  00036	89 45 ec	 mov	 DWORD PTR tv71[ebp], eax
  00039	eb 07		 jmp	 SHORT $L70435
$L70434:
  0003b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L70435:

; 86   : 		}

  00042	eb c5		 jmp	 SHORT $L51052
$L51049:

; 87   : 	};

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?DeleteAll@SysExList@@QAEXXZ ENDP			; SysExList::DeleteAll
_TEXT	ENDS
PUBLIC	?GetHead@AList@@QBEPAVAListItem@@XZ		; AList::GetHead
; Function compile flags: /Odt
;	COMDAT ?GetHead@SysExList@@QAEPAVSysExListItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@SysExList@@QAEPAVSysExListItem@@XZ PROC NEAR	; SysExList::GetHead, COMDAT
; _this$ = ecx

; 90   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 91   : 		return (SysExListItem*)AList::GetHead();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetHead@AList@@QBEPAVAListItem@@XZ ; AList::GetHead

; 92   : 	};

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetHead@SysExList@@QAEPAVSysExListItem@@XZ ENDP	; SysExList::GetHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@AList@@QBEPAVAListItem@@XZ PROC NEAR		; AList::GetHead, COMDAT
; _this$ = ecx

; 35   :     AListItem *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@AList@@QBEPAVAListItem@@XZ ENDP		; AList::GetHead
_TEXT	ENDS
PUBLIC	??1SysExListItem@@QAE@XZ			; SysExListItem::~SysExListItem
; Function compile flags: /Odt
;	COMDAT ??_GSysExListItem@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GSysExListItem@@QAEPAXI@Z PROC NEAR			; SysExListItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1SysExListItem@@QAE@XZ ; SysExListItem::~SysExListItem
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L51063
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L51063:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GSysExListItem@@QAEPAXI@Z ENDP			; SysExListItem::`scalar deleting destructor'
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\sysextrk.h
_TEXT	ENDS
;	COMDAT ??1SysExListItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12
$T70449 = -8
$T70448 = -4
??1SysExListItem@@QAE@XZ PROC NEAR			; SysExListItem::~SysExListItem, COMDAT
; _this$ = ecx

; 49   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 		if( m_pItem )

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	74 39		 je	 SHORT $L51018

; 51   : 		{
; 52   : 			if( m_pItem->pbSysExData )

  00012	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0001c	74 18		 je	 SHORT $L51020

; 53   : 			{
; 54   : 				delete [] m_pItem->pbSysExData;

  0001e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00024	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00027	89 55 fc	 mov	 DWORD PTR $T70448[ebp], edx
  0002a	8b 45 fc	 mov	 eax, DWORD PTR $T70448[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00033	83 c4 04	 add	 esp, 4
$L51020:

; 55   : 			}
; 56   : 			delete m_pItem;

  00036	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003c	89 55 f8	 mov	 DWORD PTR $T70449[ebp], edx
  0003f	8b 45 f8	 mov	 eax, DWORD PTR $T70449[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	83 c4 04	 add	 esp, 4
$L51018:

; 57   : 		}
; 58   : 	};

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
??1SysExListItem@@QAE@XZ ENDP				; SysExListItem::~SysExListItem
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0SysExStateData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0SysExStateData@@QAE@XZ PROC NEAR			; SysExStateData::SysExStateData, COMDAT
; _this$ = ecx

; 104  : 	SysExStateData()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  : 	{
; 106  : 		mtPrevEnd = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 107  : 	}

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0SysExStateData@@QAE@XZ ENDP				; SysExStateData::SysExStateData
_TEXT	ENDS
END
