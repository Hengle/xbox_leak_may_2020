; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	..\trackhelp.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DG@CDOBMKMG@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@CCKODMAP@?$CFs?3?5Invalid?5pointer?5pSegment?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BGAOHDMM@?$CBp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT ??0CBasicTrack@@IAE@PAJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack8@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CBasicTrack@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CBasicTrack@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CBasicTrack@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassID@CBasicTrack@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CBasicTrack@@UAGJPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Play@CBasicTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PlayEx@CBasicTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParamEx@CBasicTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetParamEx@CBasicTrack@@UAGJABU_GUID@@_JPAX2K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compose@CBasicTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Join@CBasicTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@ULyricInfo@@@@QBEPAV?$TListItem@ULyricInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@ULyricInfo@@@@QAEXPAV?$TListItem@ULyricInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@ULyricInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@ULyricInfo@@@@QAEAAULyricInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@UTriggerInfo@@@@SGHAAUTriggerInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@ULyricInfo@@@@SGHAAULyricInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@ULyricInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEAAV01@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UTriggerInfo@@@@QAEXP6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@ULyricInfo@@@@QAEXP6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_SEQ_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_CURVE_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@_J@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UObjectInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ObjectInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UTriggerInfo@@@@QAEPAV1@P6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@ULyricInfo@@@@QAEPAV1@P6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UTriggerInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UTriggerInfo@@@@AAEPAV1@PAV1@P6GHAAUTriggerInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@ULyricInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@ULyricInfo@@@@AAEPAV1@PAV1@P6GHAAULyricInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UParamInfo@CParamControlTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UParamInfo@CParamControlTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ParamInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WaveItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WString@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WString@SmartRef@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@ULyricInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@ULyricInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UTriggerInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Init@CBasicTrack@@UAGJPAUIDirectMusicSegment@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CBasicTrack@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CBasicTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBasicTrack@@6BIDirectMusicTrack8@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?QueryInterface@CBasicTrack@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CBasicTrack@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CBasicTrack@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParam@CBasicTrack@@UAGJABU_GUID@@JPAJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetParam@CBasicTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsParamSupported@CBasicTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddNotificationType@CBasicTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveNotificationType@CBasicTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBasicTrack@@6BIPersistStream@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?IsDirty@CBasicTrack@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Save@CBasicTrack@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CBasicTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBasicTrack@@MAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBasicTrack@@MAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	??0IDirectMusicTrack8@@QAE@XZ			; IDirectMusicTrack8::IDirectMusicTrack8
PUBLIC	?QueryInterface@CBasicTrack@@UAGJABU_GUID@@PAPAX@Z ; CBasicTrack::QueryInterface
PUBLIC	?AddRef@CBasicTrack@@UAGKXZ			; CBasicTrack::AddRef
PUBLIC	?Release@CBasicTrack@@UAGKXZ			; CBasicTrack::Release
PUBLIC	?GetClassID@CBasicTrack@@UAGJPAU_GUID@@@Z	; CBasicTrack::GetClassID
PUBLIC	?IsDirty@CBasicTrack@@UAGJXZ			; CBasicTrack::IsDirty
PUBLIC	?Save@CBasicTrack@@UAGJPAUIStream@@H@Z		; CBasicTrack::Save
PUBLIC	?GetSizeMax@CBasicTrack@@UAGJPAT_ULARGE_INTEGER@@@Z ; CBasicTrack::GetSizeMax
PUBLIC	?IsParamSupported@CBasicTrack@@UAGJABU_GUID@@@Z	; CBasicTrack::IsParamSupported
PUBLIC	?Init@CBasicTrack@@UAGJPAUIDirectMusicSegment@@@Z ; CBasicTrack::Init
PUBLIC	?Play@CBasicTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ; CBasicTrack::Play
PUBLIC	?GetParam@CBasicTrack@@UAGJABU_GUID@@JPAJPAX@Z	; CBasicTrack::GetParam
PUBLIC	?SetParam@CBasicTrack@@UAGJABU_GUID@@JPAX@Z	; CBasicTrack::SetParam
PUBLIC	?AddNotificationType@CBasicTrack@@UAGJABU_GUID@@@Z ; CBasicTrack::AddNotificationType
PUBLIC	?RemoveNotificationType@CBasicTrack@@UAGJABU_GUID@@@Z ; CBasicTrack::RemoveNotificationType
PUBLIC	?PlayEx@CBasicTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ; CBasicTrack::PlayEx
PUBLIC	?GetParamEx@CBasicTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z ; CBasicTrack::GetParamEx
PUBLIC	?SetParamEx@CBasicTrack@@UAGJABU_GUID@@_JPAX2K@Z ; CBasicTrack::SetParamEx
PUBLIC	?Compose@CBasicTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z ; CBasicTrack::Compose
PUBLIC	?Join@CBasicTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z ; CBasicTrack::Join
PUBLIC	??0CBasicTrack@@IAE@PAJABU_GUID@@@Z		; CBasicTrack::CBasicTrack
PUBLIC	??_7CBasicTrack@@6BIPersistStream@@@		; CBasicTrack::`vftable'
PUBLIC	??_7CBasicTrack@@6BIDirectMusicTrack8@@@	; CBasicTrack::`vftable'
PUBLIC	??_GCBasicTrack@@MAEPAXI@Z			; CBasicTrack::`scalar deleting destructor'
PUBLIC	??0IPersistStream@@QAE@XZ			; IPersistStream::IPersistStream
PUBLIC	?QueryInterface@CBasicTrack@@W3AGJABU_GUID@@PAPAX@Z ; CBasicTrack::QueryInterface
PUBLIC	?AddRef@CBasicTrack@@W3AGKXZ			; CBasicTrack::AddRef
PUBLIC	?Release@CBasicTrack@@W3AGKXZ			; CBasicTrack::Release
EXTRN	__purecall:NEAR
EXTRN	__InterlockedIncrement@4:NEAR
EXTRN	??_ECBasicTrack@@MAEPAXI@Z:NEAR			; CBasicTrack::`vector deleting destructor'
EXTRN	__imp__RtlInitializeCriticalSection@4:NEAR
;	COMDAT ??_7CBasicTrack@@6BIPersistStream@@@
; File c:\xbox\private\windows\directx\dmusic\dmime\trackhelp.cpp
CONST	SEGMENT
??_7CBasicTrack@@6BIPersistStream@@@ DD FLAT:?QueryInterface@CBasicTrack@@UAGJABU_GUID@@PAPAX@Z ; CBasicTrack::`vftable'
	DD	FLAT:?AddRef@CBasicTrack@@UAGKXZ
	DD	FLAT:?Release@CBasicTrack@@UAGKXZ
	DD	FLAT:?GetClassID@CBasicTrack@@UAGJPAU_GUID@@@Z
	DD	FLAT:?IsDirty@CBasicTrack@@UAGJXZ
	DD	FLAT:__purecall
	DD	FLAT:?Save@CBasicTrack@@UAGJPAUIStream@@H@Z
	DD	FLAT:?GetSizeMax@CBasicTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
	DD	FLAT:??_ECBasicTrack@@MAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7CBasicTrack@@6BIDirectMusicTrack8@@@
CONST	SEGMENT
??_7CBasicTrack@@6BIDirectMusicTrack8@@@ DD FLAT:?QueryInterface@CBasicTrack@@W3AGJABU_GUID@@PAPAX@Z ; CBasicTrack::`vftable'
	DD	FLAT:?AddRef@CBasicTrack@@W3AGKXZ
	DD	FLAT:?Release@CBasicTrack@@W3AGKXZ
	DD	FLAT:?Init@CBasicTrack@@UAGJPAUIDirectMusicSegment@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Play@CBasicTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
	DD	FLAT:?GetParam@CBasicTrack@@UAGJABU_GUID@@JPAJPAX@Z
	DD	FLAT:?SetParam@CBasicTrack@@UAGJABU_GUID@@JPAX@Z
	DD	FLAT:?IsParamSupported@CBasicTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?AddNotificationType@CBasicTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?RemoveNotificationType@CBasicTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:__purecall
	DD	FLAT:?PlayEx@CBasicTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
	DD	FLAT:?GetParamEx@CBasicTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z
	DD	FLAT:?SetParamEx@CBasicTrack@@UAGJABU_GUID@@_JPAX2K@Z
	DD	FLAT:?Compose@CBasicTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z
	DD	FLAT:?Join@CBasicTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CBasicTrack@@IAE@PAJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = -4
_plModuleLockCounter$ = 8
_rclsid$ = 12
??0CBasicTrack@@IAE@PAJABU_GUID@@@Z PROC NEAR		; CBasicTrack::CBasicTrack, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPersistStream@@QAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 04	 add	 ecx, 4
  00015	e8 00 00 00 00	 call	 ??0IDirectMusicTrack8@@QAE@XZ
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBasicTrack@@6BIPersistStream@@@
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CBasicTrack@@6BIDirectMusicTrack8@@@
  0002d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00030	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _plModuleLockCounter$[ebp]
  0003d	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 45 0c	 mov	 eax, DWORD PTR _rclsid$[ebp]
  00046	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 20   : 	INITIALIZE_CRITICAL_SECTION(&m_CriticalSection);

  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	83 c1 08	 add	 ecx, 8
  0004f	51		 push	 ecx
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 21   : 	InterlockedIncrement(plModuleLockCounter);

  00056	8b 55 08	 mov	 edx, DWORD PTR _plModuleLockCounter$[ebp]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 22   : }

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
??0CBasicTrack@@IAE@PAJABU_GUID@@@Z ENDP		; CBasicTrack::CBasicTrack
_TEXT	ENDS
PUBLIC	??0IPersist@@QAE@XZ				; IPersist::IPersist
; Function compile flags: /Odt
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersistStream@@QAE@XZ PROC NEAR			; IPersistStream::IPersistStream, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPersist@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersistStream@@QAE@XZ ENDP				; IPersistStream::IPersistStream
_TEXT	ENDS
PUBLIC	??0IDirectMusicTrack@@QAE@XZ			; IDirectMusicTrack::IDirectMusicTrack
; Function compile flags: /Odt
;	COMDAT ??0IDirectMusicTrack8@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicTrack8@@QAE@XZ PROC NEAR			; IDirectMusicTrack8::IDirectMusicTrack8, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IDirectMusicTrack@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicTrack8@@QAE@XZ ENDP			; IDirectMusicTrack8::IDirectMusicTrack8
_TEXT	ENDS
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
; Function compile flags: /Odt
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersist@@QAE@XZ PROC NEAR				; IPersist::IPersist, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersist@@QAE@XZ ENDP				; IPersist::IPersist
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicTrack@@QAE@XZ PROC NEAR			; IDirectMusicTrack::IDirectMusicTrack, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicTrack@@QAE@XZ ENDP			; IDirectMusicTrack::IDirectMusicTrack
_TEXT	ENDS
PUBLIC	??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ ; `string'
PUBLIC	??_C@_0DG@CDOBMKMG@Warning?3?5Request?5to?5query?5unknow@ ; `string'
PUBLIC	_==@8
EXTRN	_IID_IDirectMusicTrack:BYTE
EXTRN	_IID_IDirectMusicTrack8:BYTE
EXTRN	?DebugTrace@@YAXHPADZZ:NEAR			; DebugTrace
EXTRN	_DebugBreak@0:NEAR
EXTRN	_IID_IUnknown:BYTE
EXTRN	_IID_IPersist:BYTE
EXTRN	_IID_IPersistStream:BYTE
EXTRN	_IsBadReadPtr@8:NEAR
EXTRN	_IsBadWritePtr@8:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CBasicTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??QueryInterface@CBasicTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB DB 'C'
	DB	'BasicTrack::QueryInterface', 00H		; `CBasicTrack::QueryInterface'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT
??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ DB '%s: Invalid '
	DB	'pointer ppv', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT
??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ DB '%'
	DB	's: Invalid pointer (void*)&iid', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@CDOBMKMG@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT
??_C@_0DG@CDOBMKMG@Warning?3?5Request?5to?5query?5unknow@ DB 'Warning: Re'
	DB	'quest to query unknown interface on Track', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?QueryInterface@CBasicTrack@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv92 = -4
_this$ = 8
_iid$ = 12
_ppv$ = 16
?QueryInterface@CBasicTrack@@UAGJABU_GUID@@PAPAX@Z PROC NEAR ; CBasicTrack::QueryInterface, COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 30   : 	V_INAME(CBasicTrack::QueryInterface);
; 31   : 	V_PTRPTR_WRITE(ppv);

  00004	6a 04		 push	 4
  00006	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $L69437
  00013	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CBasicTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L69437:

; 32   : 	V_REFGUID(iid);

  0002c	6a 10		 push	 16			; 00000010H
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $L69441
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CBasicTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
  00045	6a ff		 push	 -1
  00047	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69441:

; 33   : 
; 34   : 	if (iid == IID_IUnknown || iid == IID_IDirectMusicTrack || iid == IID_IDirectMusicTrack8)

  00054	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IUnknown
  00059	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _==@8
  00062	85 c0		 test	 eax, eax
  00064	75 24		 jne	 SHORT $L69444
  00066	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack
  0006b	8b 45 0c	 mov	 eax, DWORD PTR _iid$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _==@8
  00074	85 c0		 test	 eax, eax
  00076	75 12		 jne	 SHORT $L69444
  00078	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack8
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 _==@8
  00086	85 c0		 test	 eax, eax
  00088	74 22		 je	 SHORT $L69443
$L69444:

; 35   : 		*ppv = static_cast<IDirectMusicTrack8*>(this);

  0008a	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  0008e	74 0b		 je	 SHORT $L69886
  00090	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00093	83 c2 04	 add	 edx, 4
  00096	89 55 fc	 mov	 DWORD PTR tv92[ebp], edx
  00099	eb 07		 jmp	 SHORT $L69887
$L69886:
  0009b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$L69887:
  000a2	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR tv92[ebp]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx

; 36   : 	else if (iid == IID_IPersistStream)

  000aa	eb 57		 jmp	 SHORT $L69446
$L69443:
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPersistStream
  000b1	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 _==@8
  000ba	85 c0		 test	 eax, eax
  000bc	74 0a		 je	 SHORT $L69447

; 37   : 		*ppv = static_cast<IPersistStream*>(this);

  000be	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	89 08		 mov	 DWORD PTR [eax], ecx

; 38   : 	else if (iid == IID_IPersist)

  000c6	eb 3b		 jmp	 SHORT $L69446
$L69447:
  000c8	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPersist
  000cd	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  000d0	52		 push	 edx
  000d1	e8 00 00 00 00	 call	 _==@8
  000d6	85 c0		 test	 eax, eax
  000d8	74 0a		 je	 SHORT $L69450

; 39   : 		*ppv = static_cast<IPersist*>(this);

  000da	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  000dd	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	89 08		 mov	 DWORD PTR [eax], ecx

; 40   : 	else

  000e2	eb 1f		 jmp	 SHORT $L69446
$L69450:

; 41   : 	{
; 42   : 		*ppv = NULL;

  000e4	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  000e7	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 43   :         Trace(4,"Warning: Request to query unknown interface on Track\n");

  000ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@CDOBMKMG@Warning?3?5Request?5to?5query?5unknow@
  000f2	6a 04		 push	 4
  000f4	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000f9	83 c4 08	 add	 esp, 8

; 44   : 		return E_NOINTERFACE;

  000fc	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
  00101	eb 0e		 jmp	 SHORT $L69433
$L69446:

; 45   : 	}
; 46   : 	
; 47   : 	reinterpret_cast<IUnknown*>(this)->AddRef();

  00103	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00106	8b 08		 mov	 ecx, DWORD PTR [eax]
  00108	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0010b	52		 push	 edx
  0010c	ff 51 04	 call	 DWORD PTR [ecx+4]

; 48   : 	return S_OK;

  0010f	33 c0		 xor	 eax, eax
$L69433:

; 49   : }

  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@CBasicTrack@@UAGJABU_GUID@@PAPAX@Z ENDP	; CBasicTrack::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CBasicTrack@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@CBasicTrack@@UAGKXZ PROC NEAR			; CBasicTrack::AddRef, COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   : 	return InterlockedIncrement(&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 24	 add	 eax, 36			; 00000024H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 55   : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@CBasicTrack@@UAGKXZ ENDP			; CBasicTrack::AddRef
_TEXT	ENDS
PUBLIC	?DeleteCriticalSection@@YGXPAX@Z		; DeleteCriticalSection
EXTRN	__InterlockedDecrement@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Release@CBasicTrack@@UAGKXZ
_TEXT	SEGMENT
tv76 = -12
$T69895 = -8
$T69894 = -4
_this$ = 8
?Release@CBasicTrack@@UAGKXZ PROC NEAR			; CBasicTrack::Release, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 60   : 	if (!InterlockedDecrement(&m_cRef))

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 24	 add	 eax, 36			; 00000024H
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	85 c0		 test	 eax, eax
  00014	75 3b		 jne	 SHORT $L69463

; 61   : 	{
; 62   : 		DELETE_CRITICAL_SECTION(&m_CriticalSection);

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 08	 add	 ecx, 8
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ?DeleteCriticalSection@@YGXPAX@Z ; DeleteCriticalSection

; 63   : 		delete this;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	89 55 f8	 mov	 DWORD PTR $T69895[ebp], edx
  00028	8b 45 f8	 mov	 eax, DWORD PTR $T69895[ebp]
  0002b	89 45 fc	 mov	 DWORD PTR $T69894[ebp], eax
  0002e	83 7d fc 00	 cmp	 DWORD PTR $T69894[ebp], 0
  00032	74 12		 je	 SHORT $L69896
  00034	6a 01		 push	 1
  00036	8b 4d fc	 mov	 ecx, DWORD PTR $T69894[ebp]
  00039	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR $T69894[ebp]
  0003e	ff 52 20	 call	 DWORD PTR [edx+32]
  00041	89 45 f4	 mov	 DWORD PTR tv76[ebp], eax
  00044	eb 07		 jmp	 SHORT $L69897
$L69896:
  00046	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$L69897:

; 64   : 		return 0;

  0004d	33 c0		 xor	 eax, eax
  0004f	eb 06		 jmp	 SHORT $L69462
$L69463:

; 65   : 	}
; 66   : 
; 67   : 	return m_cRef;

  00051	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
$L69462:

; 68   : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?Release@CBasicTrack@@UAGKXZ ENDP			; CBasicTrack::Release
_TEXT	ENDS
PUBLIC	??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CBasicTrack@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetClassID@CBasicTrack@@UAGJPAU_GUID@@@Z@4QBDB DB 'C'
	DB	'BasicTrack::GetClassID', 00H		; `CBasicTrack::GetClassID'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT
??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pClassID', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetClassID@CBasicTrack@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_pClassID$ = 12
?GetClassID@CBasicTrack@@UAGJPAU_GUID@@@Z PROC NEAR	; CBasicTrack::GetClassID, COMDAT

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 76   : 	V_INAME(CBasicTrack::GetClassID);
; 77   : 	V_PTR_WRITE(pClassID, sizeof(pClassID));

  00003	6a 04		 push	 4
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pClassID$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L69472
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetClassID@CBasicTrack@@UAGJPAU_GUID@@@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L69472:

; 78   : 	*pClassID = m_rclsid;

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00031	8b 45 0c	 mov	 eax, DWORD PTR _pClassID$[ebp]
  00034	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00036	89 08		 mov	 DWORD PTR [eax], ecx
  00038	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0003b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0003e	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00041	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00044	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00047	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 79   : 	return S_OK;

  0004a	33 c0		 xor	 eax, eax

; 80   : }

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
?GetClassID@CBasicTrack@@UAGJPAU_GUID@@@Z ENDP		; CBasicTrack::GetClassID
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\guiddef.h
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8
_guidOther$ = 12
_==@8	PROC NEAR					; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  :     return IsEqualGUID(guidOne,guidOther);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IsEqualGUID@8

; 190  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:NEAR
; Function compile flags: /Odt
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8
_rguid2$ = 12
_IsEqualGUID@8 PROC NEAR				; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _memcmp
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 157  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@CCKODMAP@?$CFs?3?5Invalid?5pointer?5pSegment?6?$AA@ ; `string'
EXTRN	_IsBadCodePtr@4:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??Init@CBasicTrack@@UAGJPAUIDirectMusicSegment@@@Z@4QBDB
; File c:\xbox\private\windows\directx\dmusic\dmime\trackhelp.cpp
CONST	SEGMENT
?__szValidateInterfaceName@?1??Init@CBasicTrack@@UAGJPAUIDirectMusicSegment@@@Z@4QBDB DB 'C'
	DB	'BasicTrack::Init', 00H			; `CBasicTrack::Init'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@CCKODMAP@?$CFs?3?5Invalid?5pointer?5pSegment?6?$AA@
CONST	SEGMENT
??_C@_0BO@CCKODMAP@?$CFs?3?5Invalid?5pointer?5pSegment?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pSegment', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Init@CBasicTrack@@UAGJPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT
_this$ = 8
_pSegment$ = 12
?Init@CBasicTrack@@UAGJPAUIDirectMusicSegment@@@Z PROC NEAR ; CBasicTrack::Init, COMDAT

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   : 	V_INAME(CBasicTrack::Init);
; 89   : 	V_INTERFACE(pSegment);

  00003	6a 04		 push	 4
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pSegment$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L69482
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Init@CBasicTrack@@UAGJPAUIDirectMusicSegment@@@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@CCKODMAP@?$CFs?3?5Invalid?5pointer?5pSegment?6?$AA@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L69482:
  0002b	6a 04		 push	 4
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegment$[ebp]
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	52		 push	 edx
  00033	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00038	85 c0		 test	 eax, eax
  0003a	74 19		 je	 SHORT $L69486
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Init@CBasicTrack@@UAGJPAUIDirectMusicSegment@@@Z@4QBDB
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@CCKODMAP@?$CFs?3?5Invalid?5pointer?5pSegment?6?$AA@
  00046	6a ff		 push	 -1
  00048	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	e8 00 00 00 00	 call	 _DebugBreak@0
$L69486:
  00055	8b 45 0c	 mov	 eax, DWORD PTR _pSegment$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00062	85 c0		 test	 eax, eax
  00064	74 19		 je	 SHORT $L69488
  00066	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Init@CBasicTrack@@UAGJPAUIDirectMusicSegment@@@Z@4QBDB
  0006b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@CCKODMAP@?$CFs?3?5Invalid?5pointer?5pSegment?6?$AA@
  00070	6a ff		 push	 -1
  00072	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	e8 00 00 00 00	 call	 _DebugBreak@0
$L69488:

; 90   : 	return S_OK;

  0007f	33 c0		 xor	 eax, eax

; 91   : }

  00081	5d		 pop	 ebp
  00082	c2 08 00	 ret	 8
?Init@CBasicTrack@@UAGJPAUIDirectMusicSegment@@@Z ENDP	; CBasicTrack::Init
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Play@CBasicTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT
_this$ = 8
_pStateData$ = 12
_mtStart$ = 16
_mtEnd$ = 20
_mtOffset$ = 24
_dwFlags$ = 28
_pPerf$ = 32
_pSegSt$ = 36
_dwVirtualID$ = 40
?Play@CBasicTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z PROC NEAR ; CBasicTrack::Play, COMDAT

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 104  : 	return this->PlayMusicOrClock(
; 105  : 					pStateData,
; 106  : 					mtStart,
; 107  : 					mtEnd,
; 108  : 					mtOffset,
; 109  : 					0,
; 110  : 					dwFlags,
; 111  : 					pPerf,
; 112  : 					pSegSt,
; 113  : 					dwVirtualID,
; 114  : 					false);

  00003	6a 00		 push	 0
  00005	8b 45 28	 mov	 eax, DWORD PTR _dwVirtualID$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 24	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 20	 mov	 edx, DWORD PTR _pPerf$[ebp]
  00010	52		 push	 edx
  00011	8b 45 1c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00014	50		 push	 eax
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	8b 4d 18	 mov	 ecx, DWORD PTR _mtOffset$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 14	 mov	 edx, DWORD PTR _mtEnd$[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR _mtStart$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  00028	51		 push	 ecx
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 e9 04	 sub	 ecx, 4
  0002f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  00035	ff 50 24	 call	 DWORD PTR [eax+36]

; 115  : }

  00038	5d		 pop	 ebp
  00039	c2 24 00	 ret	 36			; 00000024H
?Play@CBasicTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ENDP ; CBasicTrack::Play
_TEXT	ENDS
EXTRN	__alldiv:NEAR
; Function compile flags: /Odt
;	COMDAT ?PlayEx@CBasicTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT
_this$ = 8
_pStateData$ = 12
_rtStart$ = 16
_rtEnd$ = 24
_rtOffset$ = 32
_dwFlags$ = 40
_pPerf$ = 44
_pSegSt$ = 48
_dwVirtualID$ = 52
?PlayEx@CBasicTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z PROC NEAR ; CBasicTrack::PlayEx, COMDAT

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 130  :     if (dwFlags & DMUS_TRACKF_CLOCK)

  00003	8b 45 28	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  0000b	85 c0		 test	 eax, eax
  0000d	74 6e		 je	 SHORT $L69512

; 131  :     {
; 132  : 	    // Convert all reference times to millisecond times and then just use them as if this were MUSIC_TIME.
; 133  : 	    return this->PlayMusicOrClock(
; 134  : 					pStateData,
; 135  : 					static_cast<MUSIC_TIME>(rtStart / gc_RefPerMil),
; 136  : 					static_cast<MUSIC_TIME>(rtEnd / gc_RefPerMil),
; 137  : 					static_cast<MUSIC_TIME>(rtOffset / gc_RefPerMil),
; 138  : 					rtOffset,
; 139  : 					dwFlags,
; 140  : 					pPerf,
; 141  : 					pSegSt,
; 142  : 					dwVirtualID,
; 143  : 					true);

  0000f	6a 01		 push	 1
  00011	8b 4d 34	 mov	 ecx, DWORD PTR _dwVirtualID$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 30	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  00018	52		 push	 edx
  00019	8b 45 2c	 mov	 eax, DWORD PTR _pPerf$[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d 28	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00020	51		 push	 ecx
  00021	8b 55 24	 mov	 edx, DWORD PTR _rtOffset$[ebp+4]
  00024	52		 push	 edx
  00025	8b 45 20	 mov	 eax, DWORD PTR _rtOffset$[ebp]
  00028	50		 push	 eax
  00029	6a 00		 push	 0
  0002b	68 10 27 00 00	 push	 10000			; 00002710H
  00030	8b 4d 24	 mov	 ecx, DWORD PTR _rtOffset$[ebp+4]
  00033	51		 push	 ecx
  00034	8b 55 20	 mov	 edx, DWORD PTR _rtOffset$[ebp]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 __alldiv
  0003d	50		 push	 eax
  0003e	6a 00		 push	 0
  00040	68 10 27 00 00	 push	 10000			; 00002710H
  00045	8b 45 1c	 mov	 eax, DWORD PTR _rtEnd$[ebp+4]
  00048	50		 push	 eax
  00049	8b 4d 18	 mov	 ecx, DWORD PTR _rtEnd$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 __alldiv
  00052	50		 push	 eax
  00053	6a 00		 push	 0
  00055	68 10 27 00 00	 push	 10000			; 00002710H
  0005a	8b 55 14	 mov	 edx, DWORD PTR _rtStart$[ebp+4]
  0005d	52		 push	 edx
  0005e	8b 45 10	 mov	 eax, DWORD PTR _rtStart$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 __alldiv
  00067	50		 push	 eax
  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  0006b	51		 push	 ecx
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	83 e9 04	 sub	 ecx, 4
  00072	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00075	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  00078	ff 50 24	 call	 DWORD PTR [eax+36]
  0007b	eb 35		 jmp	 SHORT $L69511
$L69512:

; 144  :     }
; 145  :     else
; 146  :     {
; 147  :         return this->PlayMusicOrClock(
; 148  : 					pStateData,
; 149  : 					static_cast<MUSIC_TIME>(rtStart),
; 150  : 					static_cast<MUSIC_TIME>(rtEnd),
; 151  : 					static_cast<MUSIC_TIME>(rtOffset),
; 152  : 					0,
; 153  : 					dwFlags,
; 154  : 					pPerf,
; 155  : 					pSegSt,
; 156  : 					dwVirtualID,
; 157  : 					false);

  0007d	6a 00		 push	 0
  0007f	8b 4d 34	 mov	 ecx, DWORD PTR _dwVirtualID$[ebp]
  00082	51		 push	 ecx
  00083	8b 55 30	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  00086	52		 push	 edx
  00087	8b 45 2c	 mov	 eax, DWORD PTR _pPerf$[ebp]
  0008a	50		 push	 eax
  0008b	8b 4d 28	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0008e	51		 push	 ecx
  0008f	6a 00		 push	 0
  00091	6a 00		 push	 0
  00093	8b 55 20	 mov	 edx, DWORD PTR _rtOffset$[ebp]
  00096	52		 push	 edx
  00097	8b 45 18	 mov	 eax, DWORD PTR _rtEnd$[ebp]
  0009a	50		 push	 eax
  0009b	8b 4d 10	 mov	 ecx, DWORD PTR _rtStart$[ebp]
  0009e	51		 push	 ecx
  0009f	8b 55 0c	 mov	 edx, DWORD PTR _pStateData$[ebp]
  000a2	52		 push	 edx
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	83 e9 04	 sub	 ecx, 4
  000a9	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000af	ff 52 24	 call	 DWORD PTR [edx+36]
$L69511:

; 158  :     }
; 159  : }

  000b2	5d		 pop	 ebp
  000b3	c2 30 00	 ret	 48			; 00000030H
?PlayEx@CBasicTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ENDP ; CBasicTrack::PlayEx
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetParamEx@CBasicTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z
_TEXT	SEGMENT
_hr$ = -8
_mtNext$ = -4
_this$ = 8
_rguidType$ = 12
_rtTime$ = 16
_prtNext$ = 24
_pParam$ = 28
_pStateData$ = 32
_dwFlags$ = 36
?GetParamEx@CBasicTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z PROC NEAR ; CBasicTrack::GetParamEx, COMDAT

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 169  :     HRESULT hr;
; 170  :     MUSIC_TIME mtNext;
; 171  :     if (dwFlags & DMUS_TRACK_PARAMF_CLOCK)

  00006	8b 45 24	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00009	83 e0 01	 and	 eax, 1
  0000c	85 c0		 test	 eax, eax
  0000e	74 4a		 je	 SHORT $L69531

; 172  :     {
; 173  : 	    hr = GetParam(rguidType, static_cast<MUSIC_TIME>(rtTime / gc_RefPerMil), &mtNext, pParam);

  00010	8b 4d 1c	 mov	 ecx, DWORD PTR _pParam$[ebp]
  00013	51		 push	 ecx
  00014	8d 55 fc	 lea	 edx, DWORD PTR _mtNext$[ebp]
  00017	52		 push	 edx
  00018	6a 00		 push	 0
  0001a	68 10 27 00 00	 push	 10000			; 00002710H
  0001f	8b 45 14	 mov	 eax, DWORD PTR _rtTime$[ebp+4]
  00022	50		 push	 eax
  00023	8b 4d 10	 mov	 ecx, DWORD PTR _rtTime$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 __alldiv
  0002c	50		 push	 eax
  0002d	8b 55 0c	 mov	 edx, DWORD PTR _rguidType$[ebp]
  00030	52		 push	 edx
  00031	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	50		 push	 eax
  0003a	ff 52 1c	 call	 DWORD PTR [edx+28]
  0003d	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 174  : 	    if (prtNext)

  00040	83 7d 18 00	 cmp	 DWORD PTR _prtNext$[ebp], 0
  00044	74 12		 je	 SHORT $L69533

; 175  : 	    {
; 176  : 		    *prtNext = mtNext * gc_RefPerMil;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _mtNext$[ebp]
  00049	69 c0 10 27 00
	00		 imul	 eax, 10000		; 00002710H
  0004f	99		 cdq
  00050	8b 4d 18	 mov	 ecx, DWORD PTR _prtNext$[ebp]
  00053	89 01		 mov	 DWORD PTR [ecx], eax
  00055	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$L69533:

; 177  : 	    }
; 178  :     }
; 179  :     else

  00058	eb 31		 jmp	 SHORT $L69534
$L69531:

; 180  :     {
; 181  : 	    hr = GetParam(rguidType, static_cast<MUSIC_TIME>(rtTime), &mtNext, pParam);

  0005a	8b 55 1c	 mov	 edx, DWORD PTR _pParam$[ebp]
  0005d	52		 push	 edx
  0005e	8d 45 fc	 lea	 eax, DWORD PTR _mtNext$[ebp]
  00061	50		 push	 eax
  00062	8b 4d 10	 mov	 ecx, DWORD PTR _rtTime$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 0c	 mov	 edx, DWORD PTR _rguidType$[ebp]
  00069	52		 push	 edx
  0006a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	8b 11		 mov	 edx, DWORD PTR [ecx]
  00072	50		 push	 eax
  00073	ff 52 1c	 call	 DWORD PTR [edx+28]
  00076	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 182  :         if (prtNext)

  00079	83 7d 18 00	 cmp	 DWORD PTR _prtNext$[ebp], 0
  0007d	74 0c		 je	 SHORT $L69534

; 183  :         {
; 184  :             *prtNext = mtNext;

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _mtNext$[ebp]
  00082	99		 cdq
  00083	8b 4d 18	 mov	 ecx, DWORD PTR _prtNext$[ebp]
  00086	89 01		 mov	 DWORD PTR [ecx], eax
  00088	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$L69534:

; 185  :         }
; 186  :     }
; 187  :     return hr;

  0008b	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 188  : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 20 00	 ret	 32			; 00000020H
?GetParamEx@CBasicTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z ENDP ; CBasicTrack::GetParamEx
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetParamEx@CBasicTrack@@UAGJABU_GUID@@_JPAX2K@Z
_TEXT	SEGMENT
_this$ = 8
_rguidType$ = 12
_rtTime$ = 16
_pParam$ = 24
_pStateData$ = 28
_dwFlags$ = 32
?SetParamEx@CBasicTrack@@UAGJABU_GUID@@_JPAX2K@Z PROC NEAR ; CBasicTrack::SetParamEx, COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 195  :     if (dwFlags & DMUS_TRACK_PARAMF_CLOCK)

  00003	8b 45 20	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	85 c0		 test	 eax, eax
  0000b	74 1a		 je	 SHORT $L69545

; 196  :     {
; 197  :         rtTime /= gc_RefPerMil;

  0000d	6a 00		 push	 0
  0000f	68 10 27 00 00	 push	 10000			; 00002710H
  00014	8b 4d 14	 mov	 ecx, DWORD PTR _rtTime$[ebp+4]
  00017	51		 push	 ecx
  00018	8b 55 10	 mov	 edx, DWORD PTR _rtTime$[ebp]
  0001b	52		 push	 edx
  0001c	e8 00 00 00 00	 call	 __alldiv
  00021	89 45 10	 mov	 DWORD PTR _rtTime$[ebp], eax
  00024	89 55 14	 mov	 DWORD PTR _rtTime$[ebp+4], edx
$L69545:

; 198  :     }
; 199  : 	return SetParam(rguidType, static_cast<MUSIC_TIME>(rtTime ), pParam);

  00027	8b 45 18	 mov	 eax, DWORD PTR _pParam$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 10	 mov	 ecx, DWORD PTR _rtTime$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 55 0c	 mov	 edx, DWORD PTR _rguidType$[ebp]
  00032	52		 push	 edx
  00033	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003b	50		 push	 eax
  0003c	ff 52 20	 call	 DWORD PTR [edx+32]

; 200  : }

  0003f	5d		 pop	 ebp
  00040	c2 1c 00	 ret	 28			; 0000001cH
?SetParamEx@CBasicTrack@@UAGJABU_GUID@@_JPAX2K@Z ENDP	; CBasicTrack::SetParamEx
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Compose@CBasicTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT
_this$ = 8
_pContext$ = 12
_dwTrackGroup$ = 16
_ppResultTrack$ = 20
?Compose@CBasicTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z PROC NEAR ; CBasicTrack::Compose, COMDAT

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 208  : }

  00008	5d		 pop	 ebp
  00009	c2 10 00	 ret	 16			; 00000010H
?Compose@CBasicTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z ENDP ; CBasicTrack::Compose
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Join@CBasicTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z
_TEXT	SEGMENT
_this$ = 8
_pNewTrack$ = 12
_mtJoin$ = 16
_pContext$ = 20
_dwTrackGroup$ = 24
_ppResultTrack$ = 28
?Join@CBasicTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z PROC NEAR ; CBasicTrack::Join, COMDAT

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 217  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 218  : }

  00008	5d		 pop	 ebp
  00009	c2 18 00	 ret	 24			; 00000018H
?Join@CBasicTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z ENDP ; CBasicTrack::Join
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xboxutil.h
_TEXT	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT
___formal$ = 8
?DeleteCriticalSection@@YGXPAX@Z PROC NEAR		; DeleteCriticalSection, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : }

  00003	5d		 pop	 ebp
  00004	c2 04 00	 ret	 4
?DeleteCriticalSection@@YGXPAX@Z ENDP			; DeleteCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\trackhelp.h
_TEXT	ENDS
;	COMDAT ?IsDirty@CBasicTrack@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?IsDirty@CBasicTrack@@UAGJXZ PROC NEAR			; CBasicTrack::IsDirty, COMDAT

; 87   : 	STDMETHOD(IsDirty)() {return S_FALSE;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?IsDirty@CBasicTrack@@UAGJXZ ENDP			; CBasicTrack::IsDirty
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Save@CBasicTrack@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT
_this$ = 8
_pStream$ = 12
_fClearDirty$ = 16
?Save@CBasicTrack@@UAGJPAUIStream@@H@Z PROC NEAR	; CBasicTrack::Save, COMDAT

; 89   : 	STDMETHOD(Save)(IStream* pStream, BOOL fClearDirty) {return E_NOTIMPL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H
  00008	5d		 pop	 ebp
  00009	c2 0c 00	 ret	 12			; 0000000cH
?Save@CBasicTrack@@UAGJPAUIStream@@H@Z ENDP		; CBasicTrack::Save
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CBasicTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT
_this$ = 8
_pcbSize$ = 12
?GetSizeMax@CBasicTrack@@UAGJPAT_ULARGE_INTEGER@@@Z PROC NEAR ; CBasicTrack::GetSizeMax, COMDAT

; 90   : 	STDMETHOD(GetSizeMax)(ULARGE_INTEGER* pcbSize) {return E_NOTIMPL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H
  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?GetSizeMax@CBasicTrack@@UAGJPAT_ULARGE_INTEGER@@@Z ENDP ; CBasicTrack::GetSizeMax
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsParamSupported@CBasicTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguid$ = 12
?IsParamSupported@CBasicTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CBasicTrack::IsParamSupported, COMDAT

; 93   : 	STDMETHOD(IsParamSupported)(REFGUID rguid) {return DMUS_E_TYPE_UNSUPPORTED;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?IsParamSupported@CBasicTrack@@UAGJABU_GUID@@@Z ENDP	; CBasicTrack::IsParamSupported
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetParam@CBasicTrack@@UAGJABU_GUID@@JPAJPAX@Z
_TEXT	SEGMENT
_this$ = 8
_rguid$ = 12
_mtTime$ = 16
_pmtNext$ = 20
_pData$ = 24
?GetParam@CBasicTrack@@UAGJABU_GUID@@JPAJPAX@Z PROC NEAR ; CBasicTrack::GetParam, COMDAT

; 111  : 	STDMETHOD(GetParam)(REFGUID rguid,MUSIC_TIME mtTime,MUSIC_TIME* pmtNext,void *pData) {return DMUS_E_GET_UNSUPPORTED;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 24 11 78 88	 mov	 eax, -2005397212	; 88781124H
  00008	5d		 pop	 ebp
  00009	c2 14 00	 ret	 20			; 00000014H
?GetParam@CBasicTrack@@UAGJABU_GUID@@JPAJPAX@Z ENDP	; CBasicTrack::GetParam
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetParam@CBasicTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT
_this$ = 8
_rguid$ = 12
_mtTime$ = 16
_pData$ = 20
?SetParam@CBasicTrack@@UAGJABU_GUID@@JPAX@Z PROC NEAR	; CBasicTrack::SetParam, COMDAT

; 112  : 	STDMETHOD(SetParam)(REFGUID rguid,MUSIC_TIME mtTime,void *pData) {return DMUS_E_SET_UNSUPPORTED;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 23 11 78 88	 mov	 eax, -2005397213	; 88781123H
  00008	5d		 pop	 ebp
  00009	c2 10 00	 ret	 16			; 00000010H
?SetParam@CBasicTrack@@UAGJABU_GUID@@JPAX@Z ENDP	; CBasicTrack::SetParam
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddNotificationType@CBasicTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguidNotification$ = 12
?AddNotificationType@CBasicTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CBasicTrack::AddNotificationType, COMDAT

; 113  : 	STDMETHOD(AddNotificationType)(REFGUID rguidNotification) {return E_NOTIMPL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H
  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?AddNotificationType@CBasicTrack@@UAGJABU_GUID@@@Z ENDP	; CBasicTrack::AddNotificationType
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RemoveNotificationType@CBasicTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguidNotification$ = 12
?RemoveNotificationType@CBasicTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CBasicTrack::RemoveNotificationType, COMDAT

; 114  : 	STDMETHOD(RemoveNotificationType)(REFGUID rguidNotification) {return E_NOTIMPL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H
  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?RemoveNotificationType@CBasicTrack@@UAGJABU_GUID@@@Z ENDP ; CBasicTrack::RemoveNotificationType
_TEXT	ENDS
PUBLIC	??1CBasicTrack@@MAE@XZ				; CBasicTrack::~CBasicTrack
; Function compile flags: /Odt
;	COMDAT ??_GCBasicTrack@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCBasicTrack@@MAEPAXI@Z PROC NEAR			; CBasicTrack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CBasicTrack@@MAE@XZ	; CBasicTrack::~CBasicTrack
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L44456
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L44456:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCBasicTrack@@MAEPAXI@Z ENDP				; CBasicTrack::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?DirectMusicFreeI@@YGXPAX@Z:NEAR		; DirectMusicFreeI
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xalloc.h
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 19   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\trackhelp.h
_TEXT	ENDS
;	COMDAT ??1CBasicTrack@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CBasicTrack@@MAE@XZ PROC NEAR			; CBasicTrack::~CBasicTrack, COMDAT
; _this$ = ecx

; 142  : 	virtual ~CBasicTrack() { InterlockedDecrement(m_plModuleLockCounter); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBasicTrack@@6BIPersistStream@@@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CBasicTrack@@6BIDirectMusicTrack8@@@
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??1CBasicTrack@@MAE@XZ ENDP				; CBasicTrack::~CBasicTrack
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IUnknown@@QAE@XZ PROC NEAR				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@CBasicTrack@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CBasicTrack@@W3AGJABU_GUID@@PAPAX@Z PROC NEAR ; CBasicTrack::QueryInterface, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CBasicTrack@@UAGJABU_GUID@@PAPAX@Z ; CBasicTrack::QueryInterface
?QueryInterface@CBasicTrack@@W3AGJABU_GUID@@PAPAX@Z ENDP ; CBasicTrack::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CBasicTrack@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CBasicTrack@@W3AGKXZ PROC NEAR			; CBasicTrack::AddRef, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CBasicTrack@@UAGKXZ ; CBasicTrack::AddRef
?AddRef@CBasicTrack@@W3AGKXZ ENDP			; CBasicTrack::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CBasicTrack@@W3AGKXZ
_TEXT	SEGMENT
?Release@CBasicTrack@@W3AGKXZ PROC NEAR			; CBasicTrack::Release, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?Release@CBasicTrack@@UAGKXZ ; CBasicTrack::Release
?Release@CBasicTrack@@W3AGKXZ ENDP			; CBasicTrack::Release
_TEXT	ENDS
END
