; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	..\debug.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0GA@KHOBEPJE@You?5must?5call?5either?5DirectMusic@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@IPANJKBI@gDirectMusicFactoryFn?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@BKIAOFMH@Must?5not?5be?5NULL?4?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@MBKPMPGB@pNormalHeap?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@IFOMJOJI@pPhysicalHeap?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08GDJJAGJA@pFactory?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EK@LGFMFPKM@DirectMusicInitialize?5or?5DirectM@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@KEBJLOHM@gDirectMusicFactoryFn?5?$DN?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EG@KNBHKIAP@DirectMusic?5normal?5heap?5failed?5t@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CI@INEIEFDE@Allocated?5memory?5must?5be?5DWORD?5a@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LAHOJOBB@?$CI?$CI?$CIint?$CJ?5pData?$CJ?5?$CG?53?$CJ?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EI@CMCHJIAC@DirectMusic?5physical?5heap?5failed@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FH@COFEKOPP@Normal?5fixed?5size?5heap?5is?5out?5of@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EP@BEJLINDD@DirectMusicFixedSizeHeap?5allocat@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09OHLBFDEF@Bad?5Block?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@IDKLHCLO@pB?9?$DObUsed?5?$DN?$DN?5?8z?8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@DJMBAJGO@Heap?5Corruption?5at?5beginning?5of?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@NGABMKMF@Heap?5Corruption?5at?5end?5of?5block?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0HF@POFHDONH@Difference?5between?5pB?5?$CI?$CF08X?$CJ?5and@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@CJKAOPFE@?$CI?$CI?$CIint?$CJ?5pBlock?$CJ?5?$CG?53?$CJ?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05FBJAGGIG@bytes?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@EDMCMILL@bytes?5peak?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@HHDICGCL@allocations?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@EENEEEFN@allocations?5peak?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@GHJKDOLM@allocation?5byte?5rate?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@FDONEMPH@allocation?5rate?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08CDPBLBHA@physical?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06IKLLLDHL@normal?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@BCFIFOMH@DM?5heap?5?$CFs?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@KGNAIPKA@ASSERT?3?5?$CC?$CFs?$CC?5?$CFs?$EA?$CFlu?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@MAJGHNOA@File?5Stream?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@HNOCJJCE@Memory?5Stream?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@BIMMIMAI@Stream?5Stream?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07OJELGGAG@Segment?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@KLBAJPCB@Segment?5State?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06FLJJKOBF@Loader?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@KPPBKPKK@Performance?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@HENIGKNL@Wave?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04HIICAAFP@Wave?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@GCPCOKGM@Audio?5Path?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@HINAPOMB@Audio?5Path?5Config?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06CEFAHBNL@Script?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@FMNAONLH@Tool?5Graph?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04NLKMNLCE@Band?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@HAMLOCKF@Band?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKEMJMO@DLS?5Collection?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@FDDPIOKF@Instrument?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08CHJMLLDB@Composer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KFBFHGNH@ChordMap?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08NLCKCAFE@Template?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@KHEBECI@SignPost?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@FFGPJGHP@ChordMap?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@DGGAFCHD@Lyrics?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@FKKHLJNN@Marker?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@NIFNOE@Parameter?5Control?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@LEILHMLC@Segment?5Trigger?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@ODMHEKFE@Sequence?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04ENNOEBOG@Song?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@IHKKDEOC@System?5Exclusive?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@NDBHALDK@Tempo?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@ECNCKNIP@Time?5Signature?5Track?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09OIACHIKC@Container?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@LMECJLFI@Synthesizer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@MLPBJPAN@DM?5allocated?5?$CFss?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@BDDCPJE@Objects?5Allocated?3?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06HGDECJBG@?$CFld?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02KMOGBIGO@s?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@EPKFPGHB@DirectMusicDumpMemStats?3?5Using?5C@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BGAOHDMM@?$CBp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT ?DirectMusicInitializedCheck@@YGXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicInitializeEx@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicInitialize@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DirectMusicAllocI@@YGPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DirectMusicFreeI@@YGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DirectMusicPhysicalAllocI@@YGPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DirectMusicPhysicalFreeI@@YGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2DirectMusicDefaultHeap@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3DirectMusicDefaultHeap@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DirectMusicDefaultHeap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@DirectMusicDefaultHeap@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1DirectMusicDefaultHeap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@DirectMusicDefaultHeap@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@DirectMusicDefaultHeap@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@DirectMusicDefaultHeap@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@DirectMusicDefaultHeap@@UAGJKPAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@DirectMusicDefaultHeap@@UAGJPAXPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@DirectMusicDefaultHeap@@UAGJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicHeap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GDirectMusicDefaultHeap@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2DirectMusicDefaultPhysicalHeap@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3DirectMusicDefaultPhysicalHeap@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DirectMusicDefaultPhysicalHeap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@DirectMusicDefaultPhysicalHeap@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1DirectMusicDefaultPhysicalHeap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@DirectMusicDefaultPhysicalHeap@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@DirectMusicDefaultPhysicalHeap@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@DirectMusicDefaultPhysicalHeap@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@DirectMusicDefaultPhysicalHeap@@UAGJKPAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@DirectMusicDefaultPhysicalHeap@@UAGJPAXPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@DirectMusicDefaultPhysicalHeap@@UAGJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GDirectMusicDefaultPhysicalHeap@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2DirectMusicFixedSizeHeap2@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3DirectMusicFixedSizeHeap2@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DirectMusicFixedSizeHeap2@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@DirectMusicFixedSizeHeap2@@QAEJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1DirectMusicFixedSizeHeap2@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@DirectMusicFixedSizeHeap2@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@DirectMusicFixedSizeHeap2@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@DirectMusicFixedSizeHeap2@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@DirectMusicFixedSizeHeap2@@UAGJKPAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@DirectMusicFixedSizeHeap2@@UAGJPAXPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@DirectMusicFixedSizeHeap2@@UAGJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GDirectMusicFixedSizeHeap2@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3DirectMusicFixedSizeHeap@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1DirectMusicFixedSizeHeap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@DirectMusicFixedSizeHeap@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@DirectMusicFixedSizeHeap@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@DirectMusicFixedSizeHeap@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@DirectMusicFixedSizeHeap@@UAGJKPAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@DirectMusicFixedSizeHeap@@UAGJPAXPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@DirectMusicFixedSizeHeap@@UAGJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GDirectMusicFixedSizeHeap@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2DirectMusicFixedSizePhysicalHeap@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3DirectMusicFixedSizePhysicalHeap@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0DirectMusicFixedSizePhysicalHeap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@DirectMusicFixedSizePhysicalHeap@@QAEJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1DirectMusicFixedSizePhysicalHeap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@DirectMusicFixedSizePhysicalHeap@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@DirectMusicFixedSizePhysicalHeap@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@DirectMusicFixedSizePhysicalHeap@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@DirectMusicFixedSizePhysicalHeap@@UAGJKPAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@DirectMusicFixedSizePhysicalHeap@@UAGJPAXPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@DirectMusicFixedSizePhysicalHeap@@UAGJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VerifyHeap@DirectMusicFixedSizePhysicalHeap@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GDirectMusicFixedSizePhysicalHeap@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2PerformanceCounterWrapper@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3PerformanceCounterWrapper@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0PerformanceCounterWrapper@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PerformanceCounterWrapper@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@PerformanceCounterWrapper@@QAEJ_NPAUIDirectMusicHeap@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@PerformanceCounterWrapper@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@PerformanceCounterWrapper@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@PerformanceCounterWrapper@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@PerformanceCounterWrapper@@UAGJKPAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@PerformanceCounterWrapper@@UAGJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Alloc@PerformanceCounterWrapper@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@PerformanceCounterWrapper@@UAGJPAXPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free2@PerformanceCounterWrapper@@QAEJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GPerformanceCounterWrapper@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WrapPerformanceCountersAroundHeap@@YGJ_NPAUIDirectMusicHeap@@PAPAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicAlloc@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicFree@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicPhysicalAlloc@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicPhysicalFree@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicCreateDefaultHeap@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicCreateDefaultPhysicalHeap@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicCreateFixedSizeHeap@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicCreateFixedSizePhysicalHeap@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DirectMusicInitializeFixedSizeHeaps@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DebugTrace@@YAXHPADZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DebugAssert@@YGXPAD0K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DirectMusicSetDebugLevel@@YGXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E1
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E2
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMemTrackList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMemTrackList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@CMemTrackList@@QAEXPAVCMemTrack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@CMemTrackList@@QAEPAVCMemTrack@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@CMemTrackList@@QAEPAVCMemTrack@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@CMemTrackList@@QAEXPAVCMemTrack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCount@CMemTrackList@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMemTrack@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMemTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterDMusicObjectCounters@@YGXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterDMusicObjectCounters@@YGXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DirectMusicMemCheck@@YGJKPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DirectMusicMemDump@@YGXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DirectMusicDumpMemStats@@YGXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DMusicRegisterPerformanceCounters@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DMusicUnregisterPerformanceCounters@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@ULyricInfo@@@@QBEPAV?$TListItem@ULyricInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@ULyricInfo@@@@QAEXPAV?$TListItem@ULyricInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@ULyricInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@ULyricInfo@@@@QAEAAULyricInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@UTriggerInfo@@@@SGHAAUTriggerInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@ULyricInfo@@@@SGHAAULyricInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@ULyricInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEAAV01@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UTriggerInfo@@@@QAEXP6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@ULyricInfo@@@@QAEXP6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_SEQ_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_CURVE_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@_J@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UObjectInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ObjectInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UTriggerInfo@@@@QAEPAV1@P6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@ULyricInfo@@@@QAEPAV1@P6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UTriggerInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UTriggerInfo@@@@AAEPAV1@PAV1@P6GHAAUTriggerInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@ULyricInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@ULyricInfo@@@@AAEPAV1@PAV1@P6GHAAULyricInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UParamInfo@CParamControlTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UParamInfo@CParamControlTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ParamInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WaveItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WString@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WString@SmartRef@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@ULyricInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@ULyricInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UTriggerInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AListItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCount@AList@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7PerformanceCounterWrapper@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7DirectMusicFixedSizePhysicalHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7DirectMusicFixedSizeHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7DirectMusicFixedSizeHeap2@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7DirectMusicDefaultPhysicalHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7DirectMusicDefaultHeap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0M@MAJGHNOA@File?5Stream?$AA@		; `string'
PUBLIC	??_C@_0O@HNOCJJCE@Memory?5Stream?$AA@		; `string'
PUBLIC	??_C@_0O@BIMMIMAI@Stream?5Stream?$AA@		; `string'
PUBLIC	?gpDMHeap@@3PAUIDirectMusicHeap@@A		; gpDMHeap
PUBLIC	??_C@_07OJELGGAG@Segment?$AA@			; `string'
PUBLIC	?gpDMPhysicalHeap@@3PAUIDirectMusicHeap@@A	; gpDMPhysicalHeap
PUBLIC	??_C@_0O@KLBAJPCB@Segment?5State?$AA@		; `string'
PUBLIC	??_C@_06FLJJKOBF@Loader?$AA@			; `string'
PUBLIC	??_C@_0M@KPPBKPKK@Performance?$AA@		; `string'
PUBLIC	??_C@_0L@HENIGKNL@Wave?5Track?$AA@		; `string'
PUBLIC	??_C@_04HIICAAFP@Wave?$AA@			; `string'
PUBLIC	??_C@_0L@GCPCOKGM@Audio?5Path?$AA@		; `string'
PUBLIC	??_C@_0BC@HINAPOMB@Audio?5Path?5Config?$AA@	; `string'
PUBLIC	??_C@_06CEFAHBNL@Script?$AA@			; `string'
PUBLIC	??_C@_0L@FMNAONLH@Tool?5Graph?$AA@		; `string'
PUBLIC	??_C@_04NLKMNLCE@Band?$AA@			; `string'
PUBLIC	??_C@_0L@HAMLOCKF@Band?5Track?$AA@		; `string'
PUBLIC	??_C@_0P@FIKEMJMO@DLS?5Collection?$AA@		; `string'
PUBLIC	??_C@_0L@FDDPIOKF@Instrument?$AA@		; `string'
PUBLIC	??_C@_08CHJMLLDB@Composer?$AA@			; `string'
PUBLIC	??_C@_08KFBFHGNH@ChordMap?$AA@			; `string'
PUBLIC	??_C@_08NLCKCAFE@Template?$AA@			; `string'
PUBLIC	??_C@_0P@KHEBECI@SignPost?5Track?$AA@		; `string'
PUBLIC	??_C@_0P@FFGPJGHP@ChordMap?5Track?$AA@		; `string'
PUBLIC	??_C@_0N@DGGAFCHD@Lyrics?5Track?$AA@		; `string'
PUBLIC	??_C@_0N@FKKHLJNN@Marker?5Track?$AA@		; `string'
PUBLIC	??_C@_0BI@NIFNOE@Parameter?5Control?5Track?$AA@	; `string'
PUBLIC	??_C@_0BG@LEILHMLC@Segment?5Trigger?5Track?$AA@	; `string'
PUBLIC	??_C@_0P@ODMHEKFE@Sequence?5Track?$AA@		; `string'
PUBLIC	??_C@_04ENNOEBOG@Song?$AA@			; `string'
PUBLIC	??_C@_0BH@IHKKDEOC@System?5Exclusive?5Track?$AA@ ; `string'
PUBLIC	??_C@_0M@NDBHALDK@Tempo?5Track?$AA@		; `string'
PUBLIC	??_C@_0BF@ECNCKNIP@Time?5Signature?5Track?$AA@	; `string'
PUBLIC	??_C@_09OIACHIKC@Container?$AA@			; `string'
PUBLIC	??_C@_0M@LMECJLFI@Synthesizer?$AA@		; `string'
_BSS	SEGMENT
_giRIPLevel DD	01H DUP (?)
?gpDMHeap@@3PAUIDirectMusicHeap@@A DD 01H DUP (?)	; gpDMHeap
?gpDMPhysicalHeap@@3PAUIDirectMusicHeap@@A DD 01H DUP (?) ; gpDMPhysicalHeap
_BSS	ENDS
CONST	SEGMENT
_szDebugPrefix DB 'DMUSIC: ', 00H
CONST	ENDS
_DATA	SEGMENT
_giDebugLevel DD 01H
_gfAssertBreak DD 01H
_fNeedPrefix DD	01H
_DATA	ENDS
;	COMDAT ??_C@_0M@MAJGHNOA@File?5Stream?$AA@
CONST	SEGMENT
??_C@_0M@MAJGHNOA@File?5Stream?$AA@ DB 'File Stream', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HNOCJJCE@Memory?5Stream?$AA@
CONST	SEGMENT
??_C@_0O@HNOCJJCE@Memory?5Stream?$AA@ DB 'Memory Stream', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BIMMIMAI@Stream?5Stream?$AA@
CONST	SEGMENT
??_C@_0O@BIMMIMAI@Stream?5Stream?$AA@ DB 'Stream Stream', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07OJELGGAG@Segment?$AA@
CONST	SEGMENT
??_C@_07OJELGGAG@Segment?$AA@ DB 'Segment', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KLBAJPCB@Segment?5State?$AA@
CONST	SEGMENT
??_C@_0O@KLBAJPCB@Segment?5State?$AA@ DB 'Segment State', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FLJJKOBF@Loader?$AA@
CONST	SEGMENT
??_C@_06FLJJKOBF@Loader?$AA@ DB 'Loader', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KPPBKPKK@Performance?$AA@
CONST	SEGMENT
??_C@_0M@KPPBKPKK@Performance?$AA@ DB 'Performance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HENIGKNL@Wave?5Track?$AA@
CONST	SEGMENT
??_C@_0L@HENIGKNL@Wave?5Track?$AA@ DB 'Wave Track', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIICAAFP@Wave?$AA@
CONST	SEGMENT
??_C@_04HIICAAFP@Wave?$AA@ DB 'Wave', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GCPCOKGM@Audio?5Path?$AA@
CONST	SEGMENT
??_C@_0L@GCPCOKGM@Audio?5Path?$AA@ DB 'Audio Path', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HINAPOMB@Audio?5Path?5Config?$AA@
CONST	SEGMENT
??_C@_0BC@HINAPOMB@Audio?5Path?5Config?$AA@ DB 'Audio Path Config', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CEFAHBNL@Script?$AA@
CONST	SEGMENT
??_C@_06CEFAHBNL@Script?$AA@ DB 'Script', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FMNAONLH@Tool?5Graph?$AA@
CONST	SEGMENT
??_C@_0L@FMNAONLH@Tool?5Graph?$AA@ DB 'Tool Graph', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NLKMNLCE@Band?$AA@
CONST	SEGMENT
??_C@_04NLKMNLCE@Band?$AA@ DB 'Band', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HAMLOCKF@Band?5Track?$AA@
CONST	SEGMENT
??_C@_0L@HAMLOCKF@Band?5Track?$AA@ DB 'Band Track', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKEMJMO@DLS?5Collection?$AA@
CONST	SEGMENT
??_C@_0P@FIKEMJMO@DLS?5Collection?$AA@ DB 'DLS Collection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FDDPIOKF@Instrument?$AA@
CONST	SEGMENT
??_C@_0L@FDDPIOKF@Instrument?$AA@ DB 'Instrument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CHJMLLDB@Composer?$AA@
CONST	SEGMENT
??_C@_08CHJMLLDB@Composer?$AA@ DB 'Composer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFBFHGNH@ChordMap?$AA@
CONST	SEGMENT
??_C@_08KFBFHGNH@ChordMap?$AA@ DB 'ChordMap', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLCKCAFE@Template?$AA@
CONST	SEGMENT
??_C@_08NLCKCAFE@Template?$AA@ DB 'Template', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KHEBECI@SignPost?5Track?$AA@
CONST	SEGMENT
??_C@_0P@KHEBECI@SignPost?5Track?$AA@ DB 'SignPost Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FFGPJGHP@ChordMap?5Track?$AA@
CONST	SEGMENT
??_C@_0P@FFGPJGHP@ChordMap?5Track?$AA@ DB 'ChordMap Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DGGAFCHD@Lyrics?5Track?$AA@
CONST	SEGMENT
??_C@_0N@DGGAFCHD@Lyrics?5Track?$AA@ DB 'Lyrics Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FKKHLJNN@Marker?5Track?$AA@
CONST	SEGMENT
??_C@_0N@FKKHLJNN@Marker?5Track?$AA@ DB 'Marker Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NIFNOE@Parameter?5Control?5Track?$AA@
CONST	SEGMENT
??_C@_0BI@NIFNOE@Parameter?5Control?5Track?$AA@ DB 'Parameter Control Tra'
	DB	'ck', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LEILHMLC@Segment?5Trigger?5Track?$AA@
CONST	SEGMENT
??_C@_0BG@LEILHMLC@Segment?5Trigger?5Track?$AA@ DB 'Segment Trigger Track'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ODMHEKFE@Sequence?5Track?$AA@
CONST	SEGMENT
??_C@_0P@ODMHEKFE@Sequence?5Track?$AA@ DB 'Sequence Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENNOEBOG@Song?$AA@
CONST	SEGMENT
??_C@_04ENNOEBOG@Song?$AA@ DB 'Song', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IHKKDEOC@System?5Exclusive?5Track?$AA@
CONST	SEGMENT
??_C@_0BH@IHKKDEOC@System?5Exclusive?5Track?$AA@ DB 'System Exclusive Tra'
	DB	'ck', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NDBHALDK@Tempo?5Track?$AA@
CONST	SEGMENT
??_C@_0M@NDBHALDK@Tempo?5Track?$AA@ DB 'Tempo Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ECNCKNIP@Time?5Signature?5Track?$AA@
CONST	SEGMENT
??_C@_0BF@ECNCKNIP@Time?5Signature?5Track?$AA@ DB 'Time Signature Track', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OIACHIKC@Container?$AA@
CONST	SEGMENT
??_C@_09OIACHIKC@Container?$AA@ DB 'Container', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LMECJLFI@Synthesizer?$AA@
CONST	SEGMENT
??_C@_0M@LMECJLFI@Synthesizer?$AA@ DB 'Synthesizer', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+4
_gpNames DD	FLAT:??_C@_0M@MAJGHNOA@File?5Stream?$AA@
	DD	FLAT:??_C@_0O@HNOCJJCE@Memory?5Stream?$AA@
	DD	FLAT:??_C@_0O@BIMMIMAI@Stream?5Stream?$AA@
	DD	FLAT:??_C@_07OJELGGAG@Segment?$AA@
	DD	FLAT:??_C@_0O@KLBAJPCB@Segment?5State?$AA@
	DD	FLAT:??_C@_06FLJJKOBF@Loader?$AA@
	DD	FLAT:??_C@_0M@KPPBKPKK@Performance?$AA@
	DD	FLAT:??_C@_0L@HENIGKNL@Wave?5Track?$AA@
	DD	FLAT:??_C@_04HIICAAFP@Wave?$AA@
	DD	FLAT:??_C@_0L@GCPCOKGM@Audio?5Path?$AA@
	DD	FLAT:??_C@_0BC@HINAPOMB@Audio?5Path?5Config?$AA@
	DD	FLAT:??_C@_06CEFAHBNL@Script?$AA@
	DD	FLAT:??_C@_0L@FMNAONLH@Tool?5Graph?$AA@
	DD	FLAT:??_C@_04NLKMNLCE@Band?$AA@
	DD	FLAT:??_C@_0L@HAMLOCKF@Band?5Track?$AA@
	DD	FLAT:??_C@_0P@FIKEMJMO@DLS?5Collection?$AA@
	DD	FLAT:??_C@_0L@FDDPIOKF@Instrument?$AA@
	DD	FLAT:??_C@_08CHJMLLDB@Composer?$AA@
	DD	FLAT:??_C@_08KFBFHGNH@ChordMap?$AA@
	DD	FLAT:??_C@_08NLCKCAFE@Template?$AA@
	DD	FLAT:??_C@_0P@KHEBECI@SignPost?5Track?$AA@
	DD	FLAT:??_C@_0P@FFGPJGHP@ChordMap?5Track?$AA@
	DD	FLAT:??_C@_0N@DGGAFCHD@Lyrics?5Track?$AA@
	DD	FLAT:??_C@_0N@FKKHLJNN@Marker?5Track?$AA@
	DD	FLAT:??_C@_0BI@NIFNOE@Parameter?5Control?5Track?$AA@
	DD	FLAT:??_C@_0BG@LEILHMLC@Segment?5Trigger?5Track?$AA@
	DD	FLAT:??_C@_0P@ODMHEKFE@Sequence?5Track?$AA@
	DD	FLAT:??_C@_04ENNOEBOG@Song?$AA@
	DD	FLAT:??_C@_0BH@IHKKDEOC@System?5Exclusive?5Track?$AA@
	DD	FLAT:??_C@_0M@NDBHALDK@Tempo?5Track?$AA@
	DD	FLAT:??_C@_0BF@ECNCKNIP@Time?5Signature?5Track?$AA@
	DD	FLAT:??_C@_09OIACHIKC@Container?$AA@
	DD	FLAT:??_C@_0M@LMECJLFI@Synthesizer?$AA@
_DATA	ENDS
PUBLIC	?DirectMusicInitializedCheck@@YGXXZ		; DirectMusicInitializedCheck
PUBLIC	??_C@_0GA@KHOBEPJE@You?5must?5call?5either?5DirectMusic@ ; `string'
PUBLIC	??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BO@IPANJKBI@gDirectMusicFactoryFn?5?$CB?$DN?5NULL?$AA@ ; `string'
EXTRN	__imp__RtlAssert@16:NEAR
EXTRN	?gDirectMusicFactoryFn@@3P6GJABU_GUID@@PAUIUnknown@@0PAPAX@ZA:DWORD ; gDirectMusicFactoryFn
;	COMDAT ??_C@_0GA@KHOBEPJE@You?5must?5call?5either?5DirectMusic@
; File c:\xbox\private\windows\directx\dmusic\dmime\debug.cpp
CONST	SEGMENT
??_C@_0GA@KHOBEPJE@You?5must?5call?5either?5DirectMusic@ DB 'You must cal'
	DB	'l either DirectMusicInitialize or DirectMusicInitializeEx bef'
	DB	'ore using DirectMusic.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pri'
	DB	'vate\windows\directx\dmusic\dmime\debug.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IPANJKBI@gDirectMusicFactoryFn?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BO@IPANJKBI@gDirectMusicFactoryFn?5?$CB?$DN?5NULL?$AA@ DB 'gDirect'
	DB	'MusicFactoryFn != NULL', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?DirectMusicInitializedCheck@@YGXXZ
_TEXT	SEGMENT
?DirectMusicInitializedCheck@@YGXXZ PROC NEAR		; DirectMusicInitializedCheck, COMDAT

; 48   : void DirectMusicInitializedCheck(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 	ASSERTMSG("You must call either DirectMusicInitialize or DirectMusicInitializeEx before using DirectMusic.",
; 50   : 		gDirectMusicFactoryFn != NULL);

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDirectMusicFactoryFn@@3P6GJABU_GUID@@PAUIUnknown@@0PAPAX@ZA, 0 ; gDirectMusicFactoryFn
  0000a	75 17		 jne	 SHORT $L69427
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GA@KHOBEPJE@You?5must?5call?5either?5DirectMusic@
  00011	6a 32		 push	 50			; 00000032H
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@IPANJKBI@gDirectMusicFactoryFn?5?$CB?$DN?5NULL?$AA@
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69427:

; 51   : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?DirectMusicInitializedCheck@@YGXXZ ENDP		; DirectMusicInitializedCheck
_TEXT	ENDS
PUBLIC	_DirectMusicInitializeEx@12
PUBLIC	?WrapPerformanceCountersAroundHeap@@YGJ_NPAUIDirectMusicHeap@@PAPAU1@@Z ; WrapPerformanceCountersAroundHeap
PUBLIC	??_C@_0BC@BKIAOFMH@Must?5not?5be?5NULL?4?$AA@	; `string'
PUBLIC	??_C@_0M@MBKPMPGB@pNormalHeap?$AA@		; `string'
PUBLIC	??_C@_0O@IFOMJOJI@pPhysicalHeap?$AA@		; `string'
PUBLIC	??_C@_08GDJJAGJA@pFactory?$AA@			; `string'
PUBLIC	??_C@_0EK@LGFMFPKM@DirectMusicInitialize?5or?5DirectM@ ; `string'
PUBLIC	??_C@_0BO@KEBJLOHM@gDirectMusicFactoryFn?5?$DN?$DN?5NULL?$AA@ ; `string'
EXTRN	?InitializeDirectMusicDoWorkCriticalSection@@YGXXZ:NEAR ; InitializeDirectMusicDoWorkCriticalSection
EXTRN	?CScriptTrackCallListInitialize@@YGXXZ:NEAR	; CScriptTrackCallListInitialize
;	COMDAT ??_C@_0BC@BKIAOFMH@Must?5not?5be?5NULL?4?$AA@
CONST	SEGMENT
??_C@_0BC@BKIAOFMH@Must?5not?5be?5NULL?4?$AA@ DB 'Must not be NULL.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MBKPMPGB@pNormalHeap?$AA@
CONST	SEGMENT
??_C@_0M@MBKPMPGB@pNormalHeap?$AA@ DB 'pNormalHeap', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IFOMJOJI@pPhysicalHeap?$AA@
CONST	SEGMENT
??_C@_0O@IFOMJOJI@pPhysicalHeap?$AA@ DB 'pPhysicalHeap', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDJJAGJA@pFactory?$AA@
CONST	SEGMENT
??_C@_08GDJJAGJA@pFactory?$AA@ DB 'pFactory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@LGFMFPKM@DirectMusicInitialize?5or?5DirectM@
CONST	SEGMENT
??_C@_0EK@LGFMFPKM@DirectMusicInitialize?5or?5DirectM@ DB 'DirectMusicIni'
	DB	'tialize or DirectMusicInitializeEx has already been called.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KEBJLOHM@gDirectMusicFactoryFn?5?$DN?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BO@KEBJLOHM@gDirectMusicFactoryFn?5?$DN?$DN?5NULL?$AA@ DB 'gDirect'
	DB	'MusicFactoryFn == NULL', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _DirectMusicInitializeEx@12
_TEXT	SEGMENT
_hr$ = -8
_pWrappedHeap$ = -4
_pNormalHeap$ = 8
_pPhysicalHeap$ = 12
_pFactory$ = 16
_DirectMusicInitializeEx@12 PROC NEAR			; COMDAT

; 54   :                                        LPDIRECTMUSICFACTORYFN pFactory){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 55   :     ASSERTMSG("Must not be NULL.",pNormalHeap);

  00006	83 7d 08 00	 cmp	 DWORD PTR _pNormalHeap$[ebp], 0
  0000a	75 17		 jne	 SHORT $L69437
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@BKIAOFMH@Must?5not?5be?5NULL?4?$AA@
  00011	6a 37		 push	 55			; 00000037H
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@MBKPMPGB@pNormalHeap?$AA@
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69437:

; 56   :     ASSERTMSG("Must not be NULL.",pPhysicalHeap);

  00023	83 7d 0c 00	 cmp	 DWORD PTR _pPhysicalHeap$[ebp], 0
  00027	75 17		 jne	 SHORT $L69440
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@BKIAOFMH@Must?5not?5be?5NULL?4?$AA@
  0002e	6a 38		 push	 56			; 00000038H
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@IFOMJOJI@pPhysicalHeap?$AA@
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69440:

; 57   :     ASSERTMSG("Must not be NULL.",pFactory);

  00040	83 7d 10 00	 cmp	 DWORD PTR _pFactory$[ebp], 0
  00044	75 17		 jne	 SHORT $L69442
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@BKIAOFMH@Must?5not?5be?5NULL?4?$AA@
  0004b	6a 39		 push	 57			; 00000039H
  0004d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
  00052	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08GDJJAGJA@pFactory?$AA@
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69442:

; 58   : 
; 59   :     ASSERTMSG("DirectMusicInitialize or DirectMusicInitializeEx has already been called.",
; 60   :         gDirectMusicFactoryFn == NULL);

  0005d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDirectMusicFactoryFn@@3P6GJABU_GUID@@PAUIUnknown@@0PAPAX@ZA, 0 ; gDirectMusicFactoryFn
  00064	74 17		 je	 SHORT $L69444
  00066	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EK@LGFMFPKM@DirectMusicInitialize?5or?5DirectM@
  0006b	6a 3c		 push	 60			; 0000003cH
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@KEBJLOHM@gDirectMusicFactoryFn?5?$DN?$DN?5NULL?$AA@
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69444:

; 61   : 
; 62   :     HRESULT hr = S_OK;

  0007d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 63   : 
; 64   : #ifdef IMPLEMENT_PERFORMANCE_COUNTERS
; 65   :     IDirectMusicHeap* pWrappedHeap;
; 66   :     hr = WrapPerformanceCountersAroundHeap(false, pNormalHeap, &pWrappedHeap);

  00084	8d 45 fc	 lea	 eax, DWORD PTR _pWrappedHeap$[ebp]
  00087	50		 push	 eax
  00088	8b 4d 08	 mov	 ecx, DWORD PTR _pNormalHeap$[ebp]
  0008b	51		 push	 ecx
  0008c	6a 00		 push	 0
  0008e	e8 00 00 00 00	 call	 ?WrapPerformanceCountersAroundHeap@@YGJ_NPAUIDirectMusicHeap@@PAPAU1@@Z ; WrapPerformanceCountersAroundHeap
  00093	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 67   :     if(SUCCEEDED(hr)){

  00096	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0009a	7c 06		 jl	 SHORT $L69451

; 68   :         pNormalHeap = pWrappedHeap;

  0009c	8b 55 fc	 mov	 edx, DWORD PTR _pWrappedHeap$[ebp]
  0009f	89 55 08	 mov	 DWORD PTR _pNormalHeap$[ebp], edx
$L69451:

; 69   :     }
; 70   :     if(SUCCEEDED(hr)){

  000a2	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a6	7c 12		 jl	 SHORT $L69453

; 71   :         hr = WrapPerformanceCountersAroundHeap(true, pPhysicalHeap, &pWrappedHeap);

  000a8	8d 45 fc	 lea	 eax, DWORD PTR _pWrappedHeap$[ebp]
  000ab	50		 push	 eax
  000ac	8b 4d 0c	 mov	 ecx, DWORD PTR _pPhysicalHeap$[ebp]
  000af	51		 push	 ecx
  000b0	6a 01		 push	 1
  000b2	e8 00 00 00 00	 call	 ?WrapPerformanceCountersAroundHeap@@YGJ_NPAUIDirectMusicHeap@@PAPAU1@@Z ; WrapPerformanceCountersAroundHeap
  000b7	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L69453:

; 72   :     }
; 73   :     if(SUCCEEDED(hr)){

  000ba	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000be	7c 06		 jl	 SHORT $L69455

; 74   :         pPhysicalHeap = pWrappedHeap;

  000c0	8b 55 fc	 mov	 edx, DWORD PTR _pWrappedHeap$[ebp]
  000c3	89 55 0c	 mov	 DWORD PTR _pPhysicalHeap$[ebp], edx
$L69455:

; 75   :     }
; 76   : #else
; 77   :     pNormalHeap->AddRef();
; 78   :     pPhysicalHeap->AddRef();
; 79   : #endif
; 80   : 
; 81   :     if(SUCCEEDED(hr)){

  000c6	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ca	7c 24		 jl	 SHORT $L69457

; 82   :         gpDMHeap = pNormalHeap;

  000cc	8b 45 08	 mov	 eax, DWORD PTR _pNormalHeap$[ebp]
  000cf	a3 00 00 00 00	 mov	 DWORD PTR ?gpDMHeap@@3PAUIDirectMusicHeap@@A, eax ; gpDMHeap

; 83   : 
; 84   :         gpDMPhysicalHeap = pPhysicalHeap;

  000d4	8b 4d 0c	 mov	 ecx, DWORD PTR _pPhysicalHeap$[ebp]
  000d7	89 0d 00 00 00
	00		 mov	 DWORD PTR ?gpDMPhysicalHeap@@3PAUIDirectMusicHeap@@A, ecx ; gpDMPhysicalHeap

; 85   : 
; 86   :         gDirectMusicFactoryFn = pFactory;

  000dd	8b 55 10	 mov	 edx, DWORD PTR _pFactory$[ebp]
  000e0	89 15 00 00 00
	00		 mov	 DWORD PTR ?gDirectMusicFactoryFn@@3P6GJABU_GUID@@PAUIUnknown@@0PAPAX@ZA, edx ; gDirectMusicFactoryFn

; 87   : 
; 88   :         CScriptTrackCallListInitialize();

  000e6	e8 00 00 00 00	 call	 ?CScriptTrackCallListInitialize@@YGXXZ ; CScriptTrackCallListInitialize

; 89   :         InitializeDirectMusicDoWorkCriticalSection();

  000eb	e8 00 00 00 00	 call	 ?InitializeDirectMusicDoWorkCriticalSection@@YGXXZ ; InitializeDirectMusicDoWorkCriticalSection
$L69457:

; 90   :     }
; 91   :     return hr;

  000f0	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 92   : }

  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 0c 00	 ret	 12			; 0000000cH
_DirectMusicInitializeEx@12 ENDP
_TEXT	ENDS
PUBLIC	_DirectMusicCreateDefaultHeap@4
PUBLIC	_DirectMusicCreateDefaultPhysicalHeap@4
PUBLIC	_DirectMusicInitialize@0
EXTRN	_DirectMusicDefaultFactory@16:NEAR
; Function compile flags: /Odt
;	COMDAT _DirectMusicInitialize@0
_TEXT	SEGMENT
_pPhysicalHeap$ = -12
_hr$ = -8
_pHeap$ = -4
_DirectMusicInitialize@0 PROC NEAR			; COMDAT

; 94   : HRESULT WINAPI DirectMusicInitialize(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 95   :     HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 96   :     IDirectMusicHeap* pHeap = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pHeap$[ebp], 0

; 97   :     IDirectMusicHeap* pPhysicalHeap = NULL;

  00014	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pPhysicalHeap$[ebp], 0

; 98   :     if(SUCCEEDED(hr)){

  0001b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0001f	7c 0c		 jl	 SHORT $L69465

; 99   :         hr = DirectMusicCreateDefaultHeap(&pHeap);

  00021	8d 45 fc	 lea	 eax, DWORD PTR _pHeap$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _DirectMusicCreateDefaultHeap@4
  0002a	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L69465:

; 100  :     }
; 101  :     if(SUCCEEDED(hr)){

  0002d	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00031	7c 0c		 jl	 SHORT $L69467

; 102  :         hr = DirectMusicCreateDefaultPhysicalHeap(&pPhysicalHeap);

  00033	8d 4d f4	 lea	 ecx, DWORD PTR _pPhysicalHeap$[ebp]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 _DirectMusicCreateDefaultPhysicalHeap@4
  0003c	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L69467:

; 103  :     }
; 104  :     if(SUCCEEDED(hr)){

  0003f	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00043	7c 15		 jl	 SHORT $L69469

; 105  :         hr = DirectMusicInitializeEx(pHeap, pPhysicalHeap, &DirectMusicDefaultFactory);

  00045	68 00 00 00 00	 push	 OFFSET FLAT:_DirectMusicDefaultFactory@16
  0004a	8b 55 f4	 mov	 edx, DWORD PTR _pPhysicalHeap$[ebp]
  0004d	52		 push	 edx
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _pHeap$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _DirectMusicInitializeEx@12
  00057	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L69469:

; 106  :     }
; 107  :     if(pHeap){

  0005a	83 7d fc 00	 cmp	 DWORD PTR _pHeap$[ebp], 0
  0005e	74 0c		 je	 SHORT $L69470

; 108  :         pHeap->Release();

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _pHeap$[ebp]
  00063	8b 11		 mov	 edx, DWORD PTR [ecx]
  00065	8b 45 fc	 mov	 eax, DWORD PTR _pHeap$[ebp]
  00068	50		 push	 eax
  00069	ff 52 08	 call	 DWORD PTR [edx+8]
$L69470:

; 109  :     }
; 110  :     if(pPhysicalHeap){

  0006c	83 7d f4 00	 cmp	 DWORD PTR _pPhysicalHeap$[ebp], 0
  00070	74 0c		 je	 SHORT $L69471

; 111  :         pPhysicalHeap->Release();

  00072	8b 4d f4	 mov	 ecx, DWORD PTR _pPhysicalHeap$[ebp]
  00075	8b 11		 mov	 edx, DWORD PTR [ecx]
  00077	8b 45 f4	 mov	 eax, DWORD PTR _pPhysicalHeap$[ebp]
  0007a	50		 push	 eax
  0007b	ff 52 08	 call	 DWORD PTR [edx+8]
$L69471:

; 112  :     }
; 113  :     return hr;

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 114  : }

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
_DirectMusicInitialize@0 ENDP
_TEXT	ENDS
PUBLIC	?DebugTrace@@YAXHPADZZ				; DebugTrace
PUBLIC	??_C@_0EG@KNBHKIAP@DirectMusic?5normal?5heap?5failed?5t@ ; `string'
PUBLIC	??_C@_0CI@INEIEFDE@Allocated?5memory?5must?5be?5DWORD?5a@ ; `string'
PUBLIC	??_C@_0BJ@LAHOJOBB@?$CI?$CI?$CIint?$CJ?5pData?$CJ?5?$CG?53?$CJ?5?$DN?$DN?50?$AA@ ; `string'
PUBLIC	?DirectMusicAllocI@@YGPAXI@Z			; DirectMusicAllocI
;	COMDAT ??_C@_0EG@KNBHKIAP@DirectMusic?5normal?5heap?5failed?5t@
CONST	SEGMENT
??_C@_0EG@KNBHKIAP@DirectMusic?5normal?5heap?5failed?5t@ DB 'DirectMusic '
	DB	'normal heap failed to allocate a block of size %d bytes.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@INEIEFDE@Allocated?5memory?5must?5be?5DWORD?5a@
CONST	SEGMENT
??_C@_0CI@INEIEFDE@Allocated?5memory?5must?5be?5DWORD?5a@ DB 'Allocated m'
	DB	'emory must be DWORD aligned.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LAHOJOBB@?$CI?$CI?$CIint?$CJ?5pData?$CJ?5?$CG?53?$CJ?5?$DN?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BJ@LAHOJOBB@?$CI?$CI?$CIint?$CJ?5pData?$CJ?5?$CG?53?$CJ?5?$DN?$DN?50?$AA@ DB '('
	DB	'((int) pData) & 3) == 0', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?DirectMusicAllocI@@YGPAXI@Z
_TEXT	SEGMENT
_hr$ = -8
_pData$ = -4
_cb$ = 8
?DirectMusicAllocI@@YGPAXI@Z PROC NEAR			; DirectMusicAllocI, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 118  :     if(!gpDMHeap) {

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gpDMHeap@@3PAUIDirectMusicHeap@@A, 0 ; gpDMHeap
  0000d	75 05		 jne	 SHORT $L69475

; 119  :     	DirectMusicInitializedCheck();

  0000f	e8 00 00 00 00	 call	 ?DirectMusicInitializedCheck@@YGXXZ ; DirectMusicInitializedCheck
$L69475:

; 120  :     }
; 121  :     void* pData = NULL;

  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pData$[ebp], 0

; 122  :     HRESULT hr = gpDMHeap->Allocate(cb, &pData);

  0001b	8d 45 fc	 lea	 eax, DWORD PTR _pData$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _cb$[ebp]
  00022	51		 push	 ecx
  00023	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gpDMHeap@@3PAUIDirectMusicHeap@@A ; gpDMHeap
  00029	8b 02		 mov	 eax, DWORD PTR [edx]
  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gpDMHeap@@3PAUIDirectMusicHeap@@A ; gpDMHeap
  00031	51		 push	 ecx
  00032	ff 50 0c	 call	 DWORD PTR [eax+12]
  00035	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 123  :     if(FAILED(hr) || pData == NULL){

  00038	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003c	7c 06		 jl	 SHORT $L69480
  0003e	83 7d fc 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00042	75 17		 jne	 SHORT $L69479
$L69480:

; 124  :         Trace(1,"DirectMusic normal heap failed to allocate a block of size %d bytes.\n", cb);

  00044	8b 55 08	 mov	 edx, DWORD PTR _cb$[ebp]
  00047	52		 push	 edx
  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EG@KNBHKIAP@DirectMusic?5normal?5heap?5failed?5t@
  0004d	6a 01		 push	 1
  0004f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 125  :         return NULL;

  00057	33 c0		 xor	 eax, eax
  00059	eb 24		 jmp	 SHORT $L69474
$L69479:

; 126  :     }
; 127  :     ASSERTMSG("Allocated memory must be DWORD aligned.", (((int) pData) & 3) == 0);

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _pData$[ebp]
  0005e	83 e0 03	 and	 eax, 3
  00061	85 c0		 test	 eax, eax
  00063	74 17		 je	 SHORT $L69483
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@INEIEFDE@Allocated?5memory?5must?5be?5DWORD?5a@
  0006a	6a 7f		 push	 127			; 0000007fH
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
  00071	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@LAHOJOBB@?$CI?$CI?$CIint?$CJ?5pData?$CJ?5?$CG?53?$CJ?5?$DN?$DN?50?$AA@
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69483:

; 128  :     return pData;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _pData$[ebp]
$L69474:

; 129  : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?DirectMusicAllocI@@YGPAXI@Z ENDP			; DirectMusicAllocI
_TEXT	ENDS
PUBLIC	?DirectMusicFreeI@@YGXPAX@Z			; DirectMusicFreeI
; Function compile flags: /Odt
;	COMDAT ?DirectMusicFreeI@@YGXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
?DirectMusicFreeI@@YGXPAX@Z PROC NEAR			; DirectMusicFreeI, COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 133  :     if(!gpDMHeap) {

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gpDMHeap@@3PAUIDirectMusicHeap@@A, 0 ; gpDMHeap
  0000a	75 05		 jne	 SHORT $L69489

; 134  :     	DirectMusicInitializedCheck();

  0000c	e8 00 00 00 00	 call	 ?DirectMusicInitializedCheck@@YGXXZ ; DirectMusicInitializedCheck
$L69489:

; 135  :     }
; 136  :     if(pv){

  00011	83 7d 08 00	 cmp	 DWORD PTR _pv$[ebp], 0
  00015	74 15		 je	 SHORT $L69488

; 137  :         gpDMHeap->Free(pv);

  00017	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  0001a	50		 push	 eax
  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gpDMHeap@@3PAUIDirectMusicHeap@@A ; gpDMHeap
  00021	8b 11		 mov	 edx, DWORD PTR [ecx]
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gpDMHeap@@3PAUIDirectMusicHeap@@A ; gpDMHeap
  00028	50		 push	 eax
  00029	ff 52 14	 call	 DWORD PTR [edx+20]
$L69488:

; 138  :     }
; 139  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?DirectMusicFreeI@@YGXPAX@Z ENDP			; DirectMusicFreeI
_TEXT	ENDS
PUBLIC	??_C@_0EI@CMCHJIAC@DirectMusic?5physical?5heap?5failed@ ; `string'
PUBLIC	?DirectMusicPhysicalAllocI@@YGPAXI@Z		; DirectMusicPhysicalAllocI
;	COMDAT ??_C@_0EI@CMCHJIAC@DirectMusic?5physical?5heap?5failed@
CONST	SEGMENT
??_C@_0EI@CMCHJIAC@DirectMusic?5physical?5heap?5failed@ DB 'DirectMusic p'
	DB	'hysical heap failed to allocate a block of size %d bytes.', 0aH
	DB	00H						; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?DirectMusicPhysicalAllocI@@YGPAXI@Z
_TEXT	SEGMENT
_hr$ = -8
_pData$ = -4
_dwSize$ = 8
?DirectMusicPhysicalAllocI@@YGPAXI@Z PROC NEAR		; DirectMusicPhysicalAllocI, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 143  :     if(!gpDMPhysicalHeap) {

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gpDMPhysicalHeap@@3PAUIDirectMusicHeap@@A, 0 ; gpDMPhysicalHeap
  0000d	75 05		 jne	 SHORT $L69494

; 144  :     	DirectMusicInitializedCheck();

  0000f	e8 00 00 00 00	 call	 ?DirectMusicInitializedCheck@@YGXXZ ; DirectMusicInitializedCheck
$L69494:

; 145  :     }
; 146  :     void* pData = NULL;

  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pData$[ebp], 0

; 147  :     HRESULT hr = gpDMPhysicalHeap->Allocate(dwSize, &pData);

  0001b	8d 45 fc	 lea	 eax, DWORD PTR _pData$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _dwSize$[ebp]
  00022	51		 push	 ecx
  00023	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gpDMPhysicalHeap@@3PAUIDirectMusicHeap@@A ; gpDMPhysicalHeap
  00029	8b 02		 mov	 eax, DWORD PTR [edx]
  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gpDMPhysicalHeap@@3PAUIDirectMusicHeap@@A ; gpDMPhysicalHeap
  00031	51		 push	 ecx
  00032	ff 50 0c	 call	 DWORD PTR [eax+12]
  00035	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 148  :     ASSERTMSG("Allocated memory must be DWORD aligned.", (((int) pData) & 3) == 0);

  00038	8b 55 fc	 mov	 edx, DWORD PTR _pData$[ebp]
  0003b	83 e2 03	 and	 edx, 3
  0003e	85 d2		 test	 edx, edx
  00040	74 1a		 je	 SHORT $L69498
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@INEIEFDE@Allocated?5memory?5must?5be?5DWORD?5a@
  00047	68 94 00 00 00	 push	 148			; 00000094H
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@LAHOJOBB@?$CI?$CI?$CIint?$CJ?5pData?$CJ?5?$CG?53?$CJ?5?$DN?$DN?50?$AA@
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69498:

; 149  :     if(FAILED(hr) || pData == NULL){

  0005c	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00060	7c 06		 jl	 SHORT $L69501
  00062	83 7d fc 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00066	75 17		 jne	 SHORT $L69500
$L69501:

; 150  :         Trace(1,"DirectMusic physical heap failed to allocate a block of size %d bytes.\n", dwSize);

  00068	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0006b	50		 push	 eax
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EI@CMCHJIAC@DirectMusic?5physical?5heap?5failed@
  00071	6a 01		 push	 1
  00073	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH

; 151  :         return NULL;

  0007b	33 c0		 xor	 eax, eax
  0007d	eb 03		 jmp	 SHORT $L69493
$L69500:

; 152  :     }
; 153  :     return pData;

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _pData$[ebp]
$L69493:

; 154  : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
?DirectMusicPhysicalAllocI@@YGPAXI@Z ENDP		; DirectMusicPhysicalAllocI
_TEXT	ENDS
PUBLIC	?DirectMusicPhysicalFreeI@@YGXPAX@Z		; DirectMusicPhysicalFreeI
; Function compile flags: /Odt
;	COMDAT ?DirectMusicPhysicalFreeI@@YGXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
?DirectMusicPhysicalFreeI@@YGXPAX@Z PROC NEAR		; DirectMusicPhysicalFreeI, COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 158  :     if(!gpDMPhysicalHeap) {

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gpDMPhysicalHeap@@3PAUIDirectMusicHeap@@A, 0 ; gpDMPhysicalHeap
  0000a	75 05		 jne	 SHORT $L69506

; 159  :         DirectMusicInitializedCheck();

  0000c	e8 00 00 00 00	 call	 ?DirectMusicInitializedCheck@@YGXXZ ; DirectMusicInitializedCheck
$L69506:

; 160  :     }
; 161  :     if(pv){

  00011	83 7d 08 00	 cmp	 DWORD PTR _pv$[ebp], 0
  00015	74 15		 je	 SHORT $L69505

; 162  :         gpDMPhysicalHeap->Free(pv);

  00017	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  0001a	50		 push	 eax
  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gpDMPhysicalHeap@@3PAUIDirectMusicHeap@@A ; gpDMPhysicalHeap
  00021	8b 11		 mov	 edx, DWORD PTR [ecx]
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gpDMPhysicalHeap@@3PAUIDirectMusicHeap@@A ; gpDMPhysicalHeap
  00028	50		 push	 eax
  00029	ff 52 14	 call	 DWORD PTR [edx+20]
$L69505:

; 163  :     }
; 164  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?DirectMusicPhysicalFreeI@@YGXPAX@Z ENDP		; DirectMusicPhysicalFreeI
_TEXT	ENDS
PUBLIC	??2PerformanceCounterWrapper@@SAPAXI@Z		; PerformanceCounterWrapper::operator new
PUBLIC	??0PerformanceCounterWrapper@@QAE@XZ		; PerformanceCounterWrapper::PerformanceCounterWrapper
PUBLIC	?Initialize@PerformanceCounterWrapper@@QAEJ_NPAUIDirectMusicHeap@@@Z ; PerformanceCounterWrapper::Initialize
; Function compile flags: /Odt
;	COMDAT ?WrapPerformanceCountersAroundHeap@@YGJ_NPAUIDirectMusicHeap@@PAPAU1@@Z
_TEXT	SEGMENT
tv69 = -16
$T71027 = -12
_hr$ = -8
_pHeap$ = -4
_bPhysicalHeap$ = 8
_pInsideHeap$ = 12
_ppHeap$ = 16
?WrapPerformanceCountersAroundHeap@@YGJ_NPAUIDirectMusicHeap@@PAPAU1@@Z PROC NEAR ; WrapPerformanceCountersAroundHeap, COMDAT

; 937  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 938  :     HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 939  :     PerformanceCounterWrapper* pHeap = new PerformanceCounterWrapper();

  0000d	68 a8 00 00 00	 push	 168			; 000000a8H
  00012	e8 00 00 00 00	 call	 ??2PerformanceCounterWrapper@@SAPAXI@Z ; PerformanceCounterWrapper::operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	89 45 f4	 mov	 DWORD PTR $T71027[ebp], eax
  0001d	83 7d f4 00	 cmp	 DWORD PTR $T71027[ebp], 0
  00021	74 0d		 je	 SHORT $L71028
  00023	8b 4d f4	 mov	 ecx, DWORD PTR $T71027[ebp]
  00026	e8 00 00 00 00	 call	 ??0PerformanceCounterWrapper@@QAE@XZ ; PerformanceCounterWrapper::PerformanceCounterWrapper
  0002b	89 45 f0	 mov	 DWORD PTR tv69[ebp], eax
  0002e	eb 07		 jmp	 SHORT $L71029
$L71028:
  00030	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$L71029:
  00037	8b 45 f0	 mov	 eax, DWORD PTR tv69[ebp]
  0003a	89 45 fc	 mov	 DWORD PTR _pHeap$[ebp], eax

; 940  :     if(!pHeap){

  0003d	83 7d fc 00	 cmp	 DWORD PTR _pHeap$[ebp], 0
  00041	75 07		 jne	 SHORT $L70223

; 941  :         hr = E_OUTOFMEMORY;

  00043	c7 45 f8 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$L70223:

; 942  :     }
; 943  :     if(SUCCEEDED(hr)){

  0004a	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004e	7c 2f		 jl	 SHORT $L70226

; 944  :         hr = pHeap->Initialize(bPhysicalHeap, pInsideHeap);

  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _pInsideHeap$[ebp]
  00053	51		 push	 ecx
  00054	8a 55 08	 mov	 dl, BYTE PTR _bPhysicalHeap$[ebp]
  00057	52		 push	 edx
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _pHeap$[ebp]
  0005b	e8 00 00 00 00	 call	 ?Initialize@PerformanceCounterWrapper@@QAEJ_NPAUIDirectMusicHeap@@@Z ; PerformanceCounterWrapper::Initialize
  00060	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 945  :         if(SUCCEEDED(hr)){

  00063	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00067	7c 0a		 jl	 SHORT $L70228

; 946  :             *ppHeap = pHeap;

  00069	8b 45 10	 mov	 eax, DWORD PTR _ppHeap$[ebp]
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _pHeap$[ebp]
  0006f	89 08		 mov	 DWORD PTR [eax], ecx

; 947  :         }
; 948  :         else {

  00071	eb 0c		 jmp	 SHORT $L70226
$L70228:

; 949  :             pHeap->Release();

  00073	8b 55 fc	 mov	 edx, DWORD PTR _pHeap$[ebp]
  00076	8b 02		 mov	 eax, DWORD PTR [edx]
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _pHeap$[ebp]
  0007b	51		 push	 ecx
  0007c	ff 50 08	 call	 DWORD PTR [eax+8]
$L70226:

; 950  :         }
; 951  :     }
; 952  :     return hr;

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 953  : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 0c 00	 ret	 12			; 0000000cH
?WrapPerformanceCountersAroundHeap@@YGJ_NPAUIDirectMusicHeap@@PAPAU1@@Z ENDP ; WrapPerformanceCountersAroundHeap
_TEXT	ENDS
EXTRN	_LocalAlloc@8:NEAR
; Function compile flags: /Odt
;	COMDAT ??2PerformanceCounterWrapper@@SAPAXI@Z
_TEXT	SEGMENT
_cbBuffer$ = 8
??2PerformanceCounterWrapper@@SAPAXI@Z PROC NEAR	; PerformanceCounterWrapper::operator new, COMDAT

; 765  :     LOCALALLOC_NEWDELETE

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	e8 00 00 00 00	 call	 _LocalAlloc@8
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??2PerformanceCounterWrapper@@SAPAXI@Z ENDP		; PerformanceCounterWrapper::operator new
_TEXT	ENDS
PUBLIC	?QueryInterface@PerformanceCounterWrapper@@UAGJABU_GUID@@PAPAX@Z ; PerformanceCounterWrapper::QueryInterface
PUBLIC	?AddRef@PerformanceCounterWrapper@@UAGKXZ	; PerformanceCounterWrapper::AddRef
PUBLIC	?Release@PerformanceCounterWrapper@@UAGKXZ	; PerformanceCounterWrapper::Release
PUBLIC	?Allocate@PerformanceCounterWrapper@@UAGJKPAPAX@Z ; PerformanceCounterWrapper::Allocate
PUBLIC	?Free@PerformanceCounterWrapper@@UAGJPAX@Z	; PerformanceCounterWrapper::Free
PUBLIC	?GetSize@PerformanceCounterWrapper@@UAGJPAXPAK@Z ; PerformanceCounterWrapper::GetSize
PUBLIC	??_7PerformanceCounterWrapper@@6B@		; PerformanceCounterWrapper::`vftable'
PUBLIC	??0IDirectMusicHeap@@QAE@XZ			; IDirectMusicHeap::IDirectMusicHeap
EXTRN	__imp__RtlInitializeCriticalSection@4:NEAR
;	COMDAT ??_7PerformanceCounterWrapper@@6B@
CONST	SEGMENT
??_7PerformanceCounterWrapper@@6B@ DD FLAT:?QueryInterface@PerformanceCounterWrapper@@UAGJABU_GUID@@PAPAX@Z ; PerformanceCounterWrapper::`vftable'
	DD	FLAT:?AddRef@PerformanceCounterWrapper@@UAGKXZ
	DD	FLAT:?Release@PerformanceCounterWrapper@@UAGKXZ
	DD	FLAT:?Allocate@PerformanceCounterWrapper@@UAGJKPAPAX@Z
	DD	FLAT:?GetSize@PerformanceCounterWrapper@@UAGJPAXPAK@Z
	DD	FLAT:?Free@PerformanceCounterWrapper@@UAGJPAX@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0PerformanceCounterWrapper@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0PerformanceCounterWrapper@@QAE@XZ PROC NEAR		; PerformanceCounterWrapper::PerformanceCounterWrapper, COMDAT
; _this$ = ecx

; 767  :     PerformanceCounterWrapper(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IDirectMusicHeap@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7PerformanceCounterWrapper@@6B@

; 768  :         InitializeCriticalSection(&m_csHeap);

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 08	 add	 ecx, 8
  0001e	51		 push	 ecx
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 769  :         m_cRef = 1;

  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	c7 42 04 01 00
	00 00		 mov	 DWORD PTR [edx+4], 1

; 770  :         m_pHeap = 0;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 80 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+164], 0

; 771  :         m_bPhysicalHeap = false;

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	c6 41 3c 00	 mov	 BYTE PTR [ecx+60], 0

; 772  :     }

  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??0PerformanceCounterWrapper@@QAE@XZ ENDP		; PerformanceCounterWrapper::PerformanceCounterWrapper
_TEXT	ENDS
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
; Function compile flags: /Odt
;	COMDAT ??0IDirectMusicHeap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicHeap@@QAE@XZ PROC NEAR			; IDirectMusicHeap::IDirectMusicHeap, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicHeap@@QAE@XZ ENDP			; IDirectMusicHeap::IDirectMusicHeap
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Initialize@PerformanceCounterWrapper@@QAEJ_NPAUIDirectMusicHeap@@@Z
_TEXT	SEGMENT
_this$ = -4
_bIsPhysicalHeap$ = 8
_pHeap$ = 12
?Initialize@PerformanceCounterWrapper@@QAEJ_NPAUIDirectMusicHeap@@@Z PROC NEAR ; PerformanceCounterWrapper::Initialize, COMDAT
; _this$ = ecx

; 781  :     HRESULT Initialize(bool bIsPhysicalHeap, IDirectMusicHeap* pHeap){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 782  :         m_bPhysicalHeap = bIsPhysicalHeap;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8a 4d 08	 mov	 cl, BYTE PTR _bIsPhysicalHeap$[ebp]
  0000d	88 48 3c	 mov	 BYTE PTR [eax+60], cl

; 783  :         m_pHeap = pHeap;

  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	8b 45 0c	 mov	 eax, DWORD PTR _pHeap$[ebp]
  00016	89 82 a4 00 00
	00		 mov	 DWORD PTR [edx+164], eax

; 784  :         m_pHeap->AddRef();

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0002e	8b 12		 mov	 edx, DWORD PTR [edx]
  00030	51		 push	 ecx
  00031	ff 52 04	 call	 DWORD PTR [edx+4]

; 785  :         m_dwHeapAllocation = 0;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 786  :         m_dwHeapAllocationPeak = 0;

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 787  :         m_dwHeapAllocationBlocks = 0;

  00048	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0

; 788  :         m_dwHeapAllocationBlocksPeak = 0;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 789  :         m_dwHeapAllocationRate = 0;

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 790  :         m_dwHeapAllocationBlocksRate = 0;

  00066	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00069	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0

; 791  :         return S_OK;

  00070	33 c0		 xor	 eax, eax

; 792  :     }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
?Initialize@PerformanceCounterWrapper@@QAEJ_NPAUIDirectMusicHeap@@@Z ENDP ; PerformanceCounterWrapper::Initialize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@PerformanceCounterWrapper@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8
_riid$ = 12
_ppvObj$ = 16
?QueryInterface@PerformanceCounterWrapper@@UAGJABU_GUID@@PAPAX@Z PROC NEAR ; PerformanceCounterWrapper::QueryInterface, COMDAT

; 796  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  :         return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 798  :     }

  00008	5d		 pop	 ebp
  00009	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@PerformanceCounterWrapper@@UAGJABU_GUID@@PAPAX@Z ENDP ; PerformanceCounterWrapper::QueryInterface
_TEXT	ENDS
EXTRN	__InterlockedIncrement@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?AddRef@PerformanceCounterWrapper@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@PerformanceCounterWrapper@@UAGKXZ PROC NEAR	; PerformanceCounterWrapper::AddRef, COMDAT

; 802  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 803  :         return InterlockedIncrement(&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 04	 add	 eax, 4
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 804  :     }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@PerformanceCounterWrapper@@UAGKXZ ENDP		; PerformanceCounterWrapper::AddRef
_TEXT	ENDS
PUBLIC	??_GPerformanceCounterWrapper@@QAEPAXI@Z	; PerformanceCounterWrapper::`scalar deleting destructor'
EXTRN	__InterlockedDecrement@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Release@PerformanceCounterWrapper@@UAGKXZ
_TEXT	SEGMENT
tv72 = -16
$T71052 = -12
$T71051 = -8
_cRef$ = -4
_this$ = 8
?Release@PerformanceCounterWrapper@@UAGKXZ PROC NEAR	; PerformanceCounterWrapper::Release, COMDAT

; 807  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 808  :         ULONG cRef;
; 809  :             
; 810  :         cRef = InterlockedDecrement(&m_cRef);

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 04	 add	 eax, 4
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	89 45 fc	 mov	 DWORD PTR _cRef$[ebp], eax

; 811  : 
; 812  :         if (cRef == 0)

  00015	83 7d fc 00	 cmp	 DWORD PTR _cRef$[ebp], 0
  00019	75 28		 jne	 SHORT $L70158

; 813  :             delete this;

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	89 4d f4	 mov	 DWORD PTR $T71052[ebp], ecx
  00021	8b 55 f4	 mov	 edx, DWORD PTR $T71052[ebp]
  00024	89 55 f8	 mov	 DWORD PTR $T71051[ebp], edx
  00027	83 7d f8 00	 cmp	 DWORD PTR $T71051[ebp], 0
  0002b	74 0f		 je	 SHORT $L71053
  0002d	6a 01		 push	 1
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR $T71051[ebp]
  00032	e8 00 00 00 00	 call	 ??_GPerformanceCounterWrapper@@QAEPAXI@Z
  00037	89 45 f0	 mov	 DWORD PTR tv72[ebp], eax
  0003a	eb 07		 jmp	 SHORT $L70158
$L71053:
  0003c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L70158:

; 814  : 
; 815  :         return cRef;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _cRef$[ebp]

; 816  :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?Release@PerformanceCounterWrapper@@UAGKXZ ENDP		; PerformanceCounterWrapper::Release
_TEXT	ENDS
PUBLIC	?Alloc@PerformanceCounterWrapper@@QAEPAXI@Z	; PerformanceCounterWrapper::Alloc
; Function compile flags: /Odt
;	COMDAT ?Allocate@PerformanceCounterWrapper@@UAGJKPAPAX@Z
_TEXT	SEGMENT
_pData$ = -4
_this$ = 8
_dwSize$ = 12
_ppData$ = 16
?Allocate@PerformanceCounterWrapper@@UAGJKPAPAX@Z PROC NEAR ; PerformanceCounterWrapper::Allocate, COMDAT

; 821  :     STDMETHOD(Allocate)   (THIS_ DWORD dwSize, PVOID* ppData){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 822  :         PVOID pData = Alloc(dwSize);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00007	50		 push	 eax
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?Alloc@PerformanceCounterWrapper@@QAEPAXI@Z ; PerformanceCounterWrapper::Alloc
  00010	89 45 fc	 mov	 DWORD PTR _pData$[ebp], eax

; 823  :         if(!pData){

  00013	83 7d fc 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00017	75 07		 jne	 SHORT $L70164

; 824  :             return E_OUTOFMEMORY;

  00019	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  0001e	eb 0a		 jmp	 SHORT $L70162
$L70164:

; 825  :         }
; 826  :         *ppData = pData;

  00020	8b 4d 10	 mov	 ecx, DWORD PTR _ppData$[ebp]
  00023	8b 55 fc	 mov	 edx, DWORD PTR _pData$[ebp]
  00026	89 11		 mov	 DWORD PTR [ecx], edx

; 827  :         return S_OK;

  00028	33 c0		 xor	 eax, eax
$L70162:

; 828  :     }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
?Allocate@PerformanceCounterWrapper@@UAGJKPAPAX@Z ENDP	; PerformanceCounterWrapper::Allocate
_TEXT	ENDS
PUBLIC	?Free2@PerformanceCounterWrapper@@QAEJPAX@Z	; PerformanceCounterWrapper::Free2
; Function compile flags: /Odt
;	COMDAT ?Free@PerformanceCounterWrapper@@UAGJPAX@Z
_TEXT	SEGMENT
_this$ = 8
_pData$ = 12
?Free@PerformanceCounterWrapper@@UAGJPAX@Z PROC NEAR	; PerformanceCounterWrapper::Free, COMDAT

; 830  :     STDMETHOD(Free)   (THIS_ PVOID pData){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 831  :         return Free2(pData);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Free2@PerformanceCounterWrapper@@QAEJPAX@Z ; PerformanceCounterWrapper::Free2

; 832  :     }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?Free@PerformanceCounterWrapper@@UAGJPAX@Z ENDP		; PerformanceCounterWrapper::Free
_TEXT	ENDS
PUBLIC	??_C@_0BK@CJKAOPFE@?$CI?$CI?$CIint?$CJ?5pBlock?$CJ?5?$CG?53?$CJ?5?$DN?$DN?50?$AA@ ; `string'
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
;	COMDAT ??_C@_0BK@CJKAOPFE@?$CI?$CI?$CIint?$CJ?5pBlock?$CJ?5?$CG?53?$CJ?5?$DN?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BK@CJKAOPFE@?$CI?$CI?$CIint?$CJ?5pBlock?$CJ?5?$CG?53?$CJ?5?$DN?$DN?50?$AA@ DB '('
	DB	'((int) pBlock) & 3) == 0', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Alloc@PerformanceCounterWrapper@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -12
_pBlock$ = -8
_hr$ = -4
_cb$ = 8
?Alloc@PerformanceCounterWrapper@@QAEPAXI@Z PROC NEAR	; PerformanceCounterWrapper::Alloc, COMDAT
; _this$ = ecx

; 834  :     void* Alloc(size_t cb){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 835  :         DWORD* pBlock = 0;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pBlock$[ebp], 0

; 836  :         HRESULT hr = m_pHeap->Allocate(cb, (PVOID*) & pBlock);

  00010	8d 45 f8	 lea	 eax, DWORD PTR _pBlock$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _cb$[ebp]
  00017	51		 push	 ecx
  00018	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00021	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	52		 push	 edx
  0002d	ff 50 0c	 call	 DWORD PTR [eax+12]
  00030	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 837  :         if(FAILED(hr)){

  00033	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00037	7d 07		 jge	 SHORT $L70175

; 838  :             return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	e9 be 00 00 00	 jmp	 $L70170
$L70175:

; 839  :         }
; 840  :         if(!pBlock){

  00040	83 7d f8 00	 cmp	 DWORD PTR _pBlock$[ebp], 0
  00044	75 07		 jne	 SHORT $L70176

; 841  :             return NULL;

  00046	33 c0		 xor	 eax, eax
  00048	e9 b1 00 00 00	 jmp	 $L70170
$L70176:

; 842  :         }
; 843  :         ASSERTMSG("Allocated memory must be DWORD aligned.", (((int) pBlock) & 3) == 0);

  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _pBlock$[ebp]
  00050	83 e1 03	 and	 ecx, 3
  00053	85 c9		 test	 ecx, ecx
  00055	74 1a		 je	 SHORT $L70178
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@INEIEFDE@Allocated?5memory?5must?5be?5DWORD?5a@
  0005c	68 4b 03 00 00	 push	 843			; 0000034bH
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
  00066	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@CJKAOPFE@?$CI?$CI?$CIint?$CJ?5pBlock?$CJ?5?$CG?53?$CJ?5?$DN?$DN?50?$AA@
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L70178:

; 844  :         EnterCriticalSection(&m_csHeap);

  00071	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00074	83 c2 08	 add	 edx, 8
  00077	52		 push	 edx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 845  :         m_dwHeapAllocation += cb;

  0007e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00084	03 4d 08	 add	 ecx, DWORD PTR _cb$[ebp]
  00087	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0008a	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 846  :         if(m_dwHeapAllocation > m_dwHeapAllocationPeak){

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00090	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00096	3b 51 28	 cmp	 edx, DWORD PTR [ecx+40]
  00099	76 0c		 jbe	 SHORT $L70180

; 847  :             m_dwHeapAllocationPeak = m_dwHeapAllocation;

  0009b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000a4	89 50 28	 mov	 DWORD PTR [eax+40], edx
$L70180:

; 848  :         }
; 849  :         ++m_dwHeapAllocationBlocks;

  000a7	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000ad	83 c1 01	 add	 ecx, 1
  000b0	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000b3	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 850  :         if(m_dwHeapAllocationBlocks > m_dwHeapAllocationBlocksPeak){

  000b6	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  000bf	3b 51 30	 cmp	 edx, DWORD PTR [ecx+48]
  000c2	76 0c		 jbe	 SHORT $L70181

; 851  :             m_dwHeapAllocationBlocksPeak = m_dwHeapAllocationBlocks;

  000c4	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  000cd	89 50 30	 mov	 DWORD PTR [eax+48], edx
$L70181:

; 852  :         }
; 853  :         m_dwHeapAllocationRate += cb;

  000d0	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000d6	03 4d 08	 add	 ecx, DWORD PTR _cb$[ebp]
  000d9	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000dc	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 854  :         ++m_dwHeapAllocationBlocksRate;

  000df	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000e5	83 c1 01	 add	 ecx, 1
  000e8	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000eb	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 855  :         LeaveCriticalSection(&m_csHeap);

  000ee	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000f1	83 c0 08	 add	 eax, 8
  000f4	50		 push	 eax
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 856  : 
; 857  :         return pBlock;

  000fb	8b 45 f8	 mov	 eax, DWORD PTR _pBlock$[ebp]
$L70170:

; 858  :     }

  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 04 00	 ret	 4
?Alloc@PerformanceCounterWrapper@@QAEPAXI@Z ENDP	; PerformanceCounterWrapper::Alloc
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSize@PerformanceCounterWrapper@@UAGJPAXPAK@Z
_TEXT	SEGMENT
_this$ = 8
_pData$ = 12
_pcbSize$ = 16
?GetSize@PerformanceCounterWrapper@@UAGJPAXPAK@Z PROC NEAR ; PerformanceCounterWrapper::GetSize, COMDAT

; 860  :     STDMETHOD(GetSize)(THIS_ PVOID pData, LPDWORD pcbSize){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 861  :         return m_pHeap->GetSize(pData, pcbSize);

  00003	8b 45 10	 mov	 eax, DWORD PTR _pcbSize$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0001d	8b 00		 mov	 eax, DWORD PTR [eax]
  0001f	52		 push	 edx
  00020	ff 50 10	 call	 DWORD PTR [eax+16]

; 862  :     }

  00023	5d		 pop	 ebp
  00024	c2 0c 00	 ret	 12			; 0000000cH
?GetSize@PerformanceCounterWrapper@@UAGJPAXPAK@Z ENDP	; PerformanceCounterWrapper::GetSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Free2@PerformanceCounterWrapper@@QAEJPAX@Z
_TEXT	SEGMENT
_this$ = -12
_cb$70189 = -8
_hr$ = -4
_pv$ = 8
?Free2@PerformanceCounterWrapper@@QAEJPAX@Z PROC NEAR	; PerformanceCounterWrapper::Free2, COMDAT
; _this$ = ecx

; 865  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         HRESULT hr = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 867  :         if(pv){

  00010	83 7d 08 00	 cmp	 DWORD PTR _pv$[ebp], 0
  00014	0f 84 82 00 00
	00		 je	 $L70188

; 868  :             DWORD cb;
; 869  :             hr = m_pHeap->GetSize(pv, &cb);

  0001a	8d 45 f8	 lea	 eax, DWORD PTR _cb$70189[ebp]
  0001d	50		 push	 eax
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _pv$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  0002b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	52		 push	 edx
  00037	ff 50 10	 call	 DWORD PTR [eax+16]
  0003a	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 870  :             if(SUCCEEDED(hr)){

  0003d	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00041	7c 57		 jl	 SHORT $L70191

; 871  :                 EnterCriticalSection(&m_csHeap);

  00043	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	83 c1 08	 add	 ecx, 8
  00049	51		 push	 ecx
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 872  :                 m_dwHeapAllocation -= cb;

  00050	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00053	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00056	2b 45 f8	 sub	 eax, DWORD PTR _cb$70189[ebp]
  00059	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 873  :                 --m_dwHeapAllocationBlocks;

  0005f	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00062	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00065	83 e8 01	 sub	 eax, 1
  00068	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 874  :                 LeaveCriticalSection(&m_csHeap);

  0006e	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00071	83 c2 08	 add	 edx, 8
  00074	52		 push	 edx
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 875  :                 hr = m_pHeap->Free(pv);

  0007b	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00088	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00091	8b 12		 mov	 edx, DWORD PTR [edx]
  00093	51		 push	 ecx
  00094	ff 52 14	 call	 DWORD PTR [edx+20]
  00097	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L70191:

; 876  :             }
; 877  :         }
; 878  :         else {

  0009a	eb 07		 jmp	 SHORT $L70192
$L70188:

; 879  :             hr = E_FAIL;

  0009c	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L70192:

; 880  :         }
; 881  :         return hr;

  000a3	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 882  :     }

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
?Free2@PerformanceCounterWrapper@@QAEJPAX@Z ENDP	; PerformanceCounterWrapper::Free2
_TEXT	ENDS
PUBLIC	??3PerformanceCounterWrapper@@SAXPAX@Z		; PerformanceCounterWrapper::operator delete
PUBLIC	??1PerformanceCounterWrapper@@QAE@XZ		; PerformanceCounterWrapper::~PerformanceCounterWrapper
; Function compile flags: /Odt
;	COMDAT ??_GPerformanceCounterWrapper@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GPerformanceCounterWrapper@@QAEPAXI@Z PROC NEAR	; PerformanceCounterWrapper::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1PerformanceCounterWrapper@@QAE@XZ ; PerformanceCounterWrapper::~PerformanceCounterWrapper
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L70212
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3PerformanceCounterWrapper@@SAXPAX@Z ; PerformanceCounterWrapper::operator delete
  00022	83 c4 04	 add	 esp, 4
$L70212:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GPerformanceCounterWrapper@@QAEPAXI@Z ENDP		; PerformanceCounterWrapper::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_LocalFree@4:NEAR
; Function compile flags: /Odt
;	COMDAT ??3PerformanceCounterWrapper@@SAXPAX@Z
_TEXT	SEGMENT
_pvBuffer$ = 8
??3PerformanceCounterWrapper@@SAXPAX@Z PROC NEAR	; PerformanceCounterWrapper::operator delete, COMDAT

; 765  :     LOCALALLOC_NEWDELETE

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 00	 cmp	 DWORD PTR _pvBuffer$[ebp], 0
  00007	74 09		 je	 SHORT $L70138
  00009	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _LocalFree@4
$L70138:
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??3PerformanceCounterWrapper@@SAXPAX@Z ENDP		; PerformanceCounterWrapper::operator delete
_TEXT	ENDS
PUBLIC	?DeleteCriticalSection@@YGXPAX@Z		; DeleteCriticalSection
; Function compile flags: /Odt
;	COMDAT ??1PerformanceCounterWrapper@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1PerformanceCounterWrapper@@QAE@XZ PROC NEAR		; PerformanceCounterWrapper::~PerformanceCounterWrapper, COMDAT
; _this$ = ecx

; 774  :     ~PerformanceCounterWrapper(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7PerformanceCounterWrapper@@6B@

; 775  :         if(m_pHeap){

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
  0001a	74 18		 je	 SHORT $L70146

; 776  :             m_pHeap->Release();

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
  00030	52		 push	 edx
  00031	ff 50 08	 call	 DWORD PTR [eax+8]
$L70146:

; 777  :         }
; 778  :         DeleteCriticalSection(&m_csHeap);

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 08	 add	 ecx, 8
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 ?DeleteCriticalSection@@YGXPAX@Z ; DeleteCriticalSection

; 779  :     }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??1PerformanceCounterWrapper@@QAE@XZ ENDP		; PerformanceCounterWrapper::~PerformanceCounterWrapper
_TEXT	ENDS
PUBLIC	_DirectMusicAlloc@4
; Function compile flags: /Odt
;	COMDAT _DirectMusicAlloc@4
_TEXT	SEGMENT
_cb$ = 8
_DirectMusicAlloc@4 PROC NEAR				; COMDAT

; 958  : void* WINAPI DirectMusicAlloc(size_t cb){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 959  :     return DirectMusicAllocI(cb);

  00003	8b 45 08	 mov	 eax, DWORD PTR _cb$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicAllocI@@YGPAXI@Z ; DirectMusicAllocI

; 960  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
_DirectMusicAlloc@4 ENDP
_TEXT	ENDS
PUBLIC	_DirectMusicFree@4
; Function compile flags: /Odt
;	COMDAT _DirectMusicFree@4
_TEXT	SEGMENT
_pv$ = 8
_DirectMusicFree@4 PROC NEAR				; COMDAT

; 962  : void WINAPI DirectMusicFree(void *pv){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 963  :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 964  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
_DirectMusicFree@4 ENDP
_TEXT	ENDS
PUBLIC	_DirectMusicPhysicalAlloc@4
; Function compile flags: /Odt
;	COMDAT _DirectMusicPhysicalAlloc@4
_TEXT	SEGMENT
_dwSize$ = 8
_DirectMusicPhysicalAlloc@4 PROC NEAR			; COMDAT

; 966  : void* WINAPI DirectMusicPhysicalAlloc(size_t dwSize){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 967  :     return DirectMusicPhysicalAllocI(dwSize);

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicPhysicalAllocI@@YGPAXI@Z ; DirectMusicPhysicalAllocI

; 968  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
_DirectMusicPhysicalAlloc@4 ENDP
_TEXT	ENDS
PUBLIC	_DirectMusicPhysicalFree@4
; Function compile flags: /Odt
;	COMDAT _DirectMusicPhysicalFree@4
_TEXT	SEGMENT
_lpAddress$ = 8
_DirectMusicPhysicalFree@4 PROC NEAR			; COMDAT

; 970  : void WINAPI DirectMusicPhysicalFree(void* lpAddress){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 971  :     DirectMusicPhysicalFreeI(lpAddress);

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpAddress$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicPhysicalFreeI@@YGXPAX@Z ; DirectMusicPhysicalFreeI

; 972  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
_DirectMusicPhysicalFree@4 ENDP
_TEXT	ENDS
PUBLIC	??2DirectMusicDefaultHeap@@SAPAXI@Z		; DirectMusicDefaultHeap::operator new
PUBLIC	??0DirectMusicDefaultHeap@@QAE@XZ		; DirectMusicDefaultHeap::DirectMusicDefaultHeap
PUBLIC	?Initialize@DirectMusicDefaultHeap@@QAEJXZ	; DirectMusicDefaultHeap::Initialize
; Function compile flags: /Odt
;	COMDAT _DirectMusicCreateDefaultHeap@4
_TEXT	SEGMENT
tv69 = -16
$T71094 = -12
_hr$ = -8
_pHeap$ = -4
_ppHeap$ = 8
_DirectMusicCreateDefaultHeap@4 PROC NEAR		; COMDAT

; 975  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 976  :     HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 977  :     DirectMusicDefaultHeap* pHeap = new DirectMusicDefaultHeap();

  0000d	6a 08		 push	 8
  0000f	e8 00 00 00 00	 call	 ??2DirectMusicDefaultHeap@@SAPAXI@Z ; DirectMusicDefaultHeap::operator new
  00014	83 c4 04	 add	 esp, 4
  00017	89 45 f4	 mov	 DWORD PTR $T71094[ebp], eax
  0001a	83 7d f4 00	 cmp	 DWORD PTR $T71094[ebp], 0
  0001e	74 0d		 je	 SHORT $L71095
  00020	8b 4d f4	 mov	 ecx, DWORD PTR $T71094[ebp]
  00023	e8 00 00 00 00	 call	 ??0DirectMusicDefaultHeap@@QAE@XZ ; DirectMusicDefaultHeap::DirectMusicDefaultHeap
  00028	89 45 f0	 mov	 DWORD PTR tv69[ebp], eax
  0002b	eb 07		 jmp	 SHORT $L71096
$L71095:
  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$L71096:
  00034	8b 45 f0	 mov	 eax, DWORD PTR tv69[ebp]
  00037	89 45 fc	 mov	 DWORD PTR _pHeap$[ebp], eax

; 978  :     if(!pHeap){

  0003a	83 7d fc 00	 cmp	 DWORD PTR _pHeap$[ebp], 0
  0003e	75 07		 jne	 SHORT $L70250

; 979  :         hr = E_OUTOFMEMORY;

  00040	c7 45 f8 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$L70250:

; 980  :     }
; 981  :     if(SUCCEEDED(hr)){

  00047	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004b	7c 27		 jl	 SHORT $L70253

; 982  :         hr = pHeap->Initialize();

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _pHeap$[ebp]
  00050	e8 00 00 00 00	 call	 ?Initialize@DirectMusicDefaultHeap@@QAEJXZ ; DirectMusicDefaultHeap::Initialize
  00055	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 983  :         if(SUCCEEDED(hr)){

  00058	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005c	7c 0a		 jl	 SHORT $L70255

; 984  :             *ppHeap = pHeap;

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _ppHeap$[ebp]
  00061	8b 55 fc	 mov	 edx, DWORD PTR _pHeap$[ebp]
  00064	89 11		 mov	 DWORD PTR [ecx], edx

; 985  :         }
; 986  :         else {

  00066	eb 0c		 jmp	 SHORT $L70253
$L70255:

; 987  :             pHeap->Release();

  00068	8b 45 fc	 mov	 eax, DWORD PTR _pHeap$[ebp]
  0006b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006d	8b 55 fc	 mov	 edx, DWORD PTR _pHeap$[ebp]
  00070	52		 push	 edx
  00071	ff 51 08	 call	 DWORD PTR [ecx+8]
$L70253:

; 988  :         }
; 989  :     }
; 990  :     return hr;

  00074	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 991  : }

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
_DirectMusicCreateDefaultHeap@4 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??2DirectMusicDefaultHeap@@SAPAXI@Z
_TEXT	SEGMENT
_cbBuffer$ = 8
??2DirectMusicDefaultHeap@@SAPAXI@Z PROC NEAR		; DirectMusicDefaultHeap::operator new, COMDAT

; 178  :     LOCALALLOC_NEWDELETE

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	e8 00 00 00 00	 call	 _LocalAlloc@8
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??2DirectMusicDefaultHeap@@SAPAXI@Z ENDP		; DirectMusicDefaultHeap::operator new
_TEXT	ENDS
PUBLIC	?QueryInterface@DirectMusicDefaultHeap@@UAGJABU_GUID@@PAPAX@Z ; DirectMusicDefaultHeap::QueryInterface
PUBLIC	?AddRef@DirectMusicDefaultHeap@@UAGKXZ		; DirectMusicDefaultHeap::AddRef
PUBLIC	?Release@DirectMusicDefaultHeap@@UAGKXZ		; DirectMusicDefaultHeap::Release
PUBLIC	?Allocate@DirectMusicDefaultHeap@@UAGJKPAPAX@Z	; DirectMusicDefaultHeap::Allocate
PUBLIC	?GetSize@DirectMusicDefaultHeap@@UAGJPAXPAK@Z	; DirectMusicDefaultHeap::GetSize
PUBLIC	?Free@DirectMusicDefaultHeap@@UAGJPAX@Z		; DirectMusicDefaultHeap::Free
PUBLIC	??_7DirectMusicDefaultHeap@@6B@			; DirectMusicDefaultHeap::`vftable'
;	COMDAT ??_7DirectMusicDefaultHeap@@6B@
CONST	SEGMENT
??_7DirectMusicDefaultHeap@@6B@ DD FLAT:?QueryInterface@DirectMusicDefaultHeap@@UAGJABU_GUID@@PAPAX@Z ; DirectMusicDefaultHeap::`vftable'
	DD	FLAT:?AddRef@DirectMusicDefaultHeap@@UAGKXZ
	DD	FLAT:?Release@DirectMusicDefaultHeap@@UAGKXZ
	DD	FLAT:?Allocate@DirectMusicDefaultHeap@@UAGJKPAPAX@Z
	DD	FLAT:?GetSize@DirectMusicDefaultHeap@@UAGJPAXPAK@Z
	DD	FLAT:?Free@DirectMusicDefaultHeap@@UAGJPAX@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0DirectMusicDefaultHeap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0DirectMusicDefaultHeap@@QAE@XZ PROC NEAR		; DirectMusicDefaultHeap::DirectMusicDefaultHeap, COMDAT
; _this$ = ecx

; 180  :     DirectMusicDefaultHeap(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IDirectMusicHeap@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7DirectMusicDefaultHeap@@6B@

; 181  :         m_cRef = 1;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 182  :     }

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0DirectMusicDefaultHeap@@QAE@XZ ENDP			; DirectMusicDefaultHeap::DirectMusicDefaultHeap
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Initialize@DirectMusicDefaultHeap@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4
?Initialize@DirectMusicDefaultHeap@@QAEJXZ PROC NEAR	; DirectMusicDefaultHeap::Initialize, COMDAT
; _this$ = ecx

; 184  :     HRESULT Initialize() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 185  :         return S_OK;

  00007	33 c0		 xor	 eax, eax

; 186  :     }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?Initialize@DirectMusicDefaultHeap@@QAEJXZ ENDP		; DirectMusicDefaultHeap::Initialize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@DirectMusicDefaultHeap@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8
_riid$ = 12
_ppvObj$ = 16
?QueryInterface@DirectMusicDefaultHeap@@UAGJABU_GUID@@PAPAX@Z PROC NEAR ; DirectMusicDefaultHeap::QueryInterface, COMDAT

; 192  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 193  :         return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 194  :     }

  00008	5d		 pop	 ebp
  00009	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@DirectMusicDefaultHeap@@UAGJABU_GUID@@PAPAX@Z ENDP ; DirectMusicDefaultHeap::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@DirectMusicDefaultHeap@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@DirectMusicDefaultHeap@@UAGKXZ PROC NEAR	; DirectMusicDefaultHeap::AddRef, COMDAT

; 198  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 199  :         return InterlockedIncrement(&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 04	 add	 eax, 4
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 200  :     }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@DirectMusicDefaultHeap@@UAGKXZ ENDP		; DirectMusicDefaultHeap::AddRef
_TEXT	ENDS
PUBLIC	??_GDirectMusicDefaultHeap@@QAEPAXI@Z		; DirectMusicDefaultHeap::`scalar deleting destructor'
; Function compile flags: /Odt
;	COMDAT ?Release@DirectMusicDefaultHeap@@UAGKXZ
_TEXT	SEGMENT
tv72 = -16
$T71116 = -12
$T71115 = -8
_cRef$ = -4
_this$ = 8
?Release@DirectMusicDefaultHeap@@UAGKXZ PROC NEAR	; DirectMusicDefaultHeap::Release, COMDAT

; 203  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 204  :         ULONG cRef;
; 205  :             
; 206  :         cRef = InterlockedDecrement(&m_cRef);

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 04	 add	 eax, 4
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	89 45 fc	 mov	 DWORD PTR _cRef$[ebp], eax

; 207  : 
; 208  :         if (cRef == 0)

  00015	83 7d fc 00	 cmp	 DWORD PTR _cRef$[ebp], 0
  00019	75 28		 jne	 SHORT $L69567

; 209  :             delete this;

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	89 4d f4	 mov	 DWORD PTR $T71116[ebp], ecx
  00021	8b 55 f4	 mov	 edx, DWORD PTR $T71116[ebp]
  00024	89 55 f8	 mov	 DWORD PTR $T71115[ebp], edx
  00027	83 7d f8 00	 cmp	 DWORD PTR $T71115[ebp], 0
  0002b	74 0f		 je	 SHORT $L71117
  0002d	6a 01		 push	 1
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR $T71115[ebp]
  00032	e8 00 00 00 00	 call	 ??_GDirectMusicDefaultHeap@@QAEPAXI@Z
  00037	89 45 f0	 mov	 DWORD PTR tv72[ebp], eax
  0003a	eb 07		 jmp	 SHORT $L69567
$L71117:
  0003c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L69567:

; 210  : 
; 211  :         return cRef;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _cRef$[ebp]

; 212  :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?Release@DirectMusicDefaultHeap@@UAGKXZ ENDP		; DirectMusicDefaultHeap::Release
_TEXT	ENDS
EXTRN	_RtlAllocateHeap@12:NEAR
EXTRN	_GetProcessHeap@0:NEAR
; Function compile flags: /Odt
;	COMDAT ?Allocate@DirectMusicDefaultHeap@@UAGJKPAPAX@Z
_TEXT	SEGMENT
_this$ = 8
_dwSize$ = 12
_ppData$ = 16
?Allocate@DirectMusicDefaultHeap@@UAGJKPAPAX@Z PROC NEAR ; DirectMusicDefaultHeap::Allocate, COMDAT

; 217  :     STDMETHOD(Allocate)   (THIS_ DWORD dwSize, PVOID* ppData){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 218  :         *ppData = HeapAlloc(GetProcessHeap(),0, dwSize); // LocalAlloc is threadsafe. Can't use malloc/free because it might not be threadsafe.

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	e8 00 00 00 00	 call	 _GetProcessHeap@0
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _RtlAllocateHeap@12
  00014	8b 4d 10	 mov	 ecx, DWORD PTR _ppData$[ebp]
  00017	89 01		 mov	 DWORD PTR [ecx], eax

; 219  :         if(!*ppData){

  00019	8b 55 10	 mov	 edx, DWORD PTR _ppData$[ebp]
  0001c	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0001f	75 07		 jne	 SHORT $L69572

; 220  :             return E_OUTOFMEMORY;

  00021	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00026	eb 02		 jmp	 SHORT $L69571
$L69572:

; 221  :         }
; 222  :         return S_OK;

  00028	33 c0		 xor	 eax, eax
$L69571:

; 223  :     }

  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
?Allocate@DirectMusicDefaultHeap@@UAGJKPAPAX@Z ENDP	; DirectMusicDefaultHeap::Allocate
_TEXT	ENDS
EXTRN	_RtlSizeHeap@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetSize@DirectMusicDefaultHeap@@UAGJPAXPAK@Z
_TEXT	SEGMENT
_dwSize$69580 = -8
_hr$ = -4
_this$ = 8
_pData$ = 12
_pcbSize$ = 16
?GetSize@DirectMusicDefaultHeap@@UAGJPAXPAK@Z PROC NEAR	; DirectMusicDefaultHeap::GetSize, COMDAT

; 225  :     STDMETHOD(GetSize)(THIS_ PVOID pData, LPDWORD pcbSize){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 226  :         HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 227  :         if(pData){

  0000d	83 7d 0c 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00011	74 2d		 je	 SHORT $L69579

; 228  :             DWORD dwSize = HeapSize(GetProcessHeap(), 0, pData);

  00013	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00016	50		 push	 eax
  00017	6a 00		 push	 0
  00019	e8 00 00 00 00	 call	 _GetProcessHeap@0
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _RtlSizeHeap@12
  00024	89 45 f8	 mov	 DWORD PTR _dwSize$69580[ebp], eax

; 229  :             if(dwSize ==0xFFFFFFFF){

  00027	83 7d f8 ff	 cmp	 DWORD PTR _dwSize$69580[ebp], -1
  0002b	75 09		 jne	 SHORT $L69581

; 230  :                 hr = E_FAIL;

  0002d	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 231  :             }
; 232  :             else {

  00034	eb 08		 jmp	 SHORT $L69583
$L69581:

; 233  :                 *pcbSize = dwSize;

  00036	8b 4d 10	 mov	 ecx, DWORD PTR _pcbSize$[ebp]
  00039	8b 55 f8	 mov	 edx, DWORD PTR _dwSize$69580[ebp]
  0003c	89 11		 mov	 DWORD PTR [ecx], edx
$L69583:

; 234  :             }
; 235  :         }
; 236  :         else {

  0003e	eb 07		 jmp	 SHORT $L69584
$L69579:

; 237  :             hr = E_FAIL;

  00040	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L69584:

; 238  :         }
; 239  :         return hr;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 240  :     }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
?GetSize@DirectMusicDefaultHeap@@UAGJPAXPAK@Z ENDP	; DirectMusicDefaultHeap::GetSize
_TEXT	ENDS
EXTRN	_HeapFree@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?Free@DirectMusicDefaultHeap@@UAGJPAX@Z
_TEXT	SEGMENT
_this$ = 8
_pData$ = 12
?Free@DirectMusicDefaultHeap@@UAGJPAX@Z PROC NEAR	; DirectMusicDefaultHeap::Free, COMDAT

; 242  :     STDMETHOD(Free)   (THIS_ PVOID pData){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 243  :         HeapFree(GetProcessHeap(),0,pData); // LocalFree is threadsafe. Can't use malloc/free because it might not be threadsafe.

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	e8 00 00 00 00	 call	 _GetProcessHeap@0
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _HeapFree@12

; 244  :         return S_OK;

  00014	33 c0		 xor	 eax, eax

; 245  :     }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?Free@DirectMusicDefaultHeap@@UAGJPAX@Z ENDP		; DirectMusicDefaultHeap::Free
_TEXT	ENDS
PUBLIC	??3DirectMusicDefaultHeap@@SAXPAX@Z		; DirectMusicDefaultHeap::operator delete
PUBLIC	??1DirectMusicDefaultHeap@@QAE@XZ		; DirectMusicDefaultHeap::~DirectMusicDefaultHeap
; Function compile flags: /Odt
;	COMDAT ??_GDirectMusicDefaultHeap@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GDirectMusicDefaultHeap@@QAEPAXI@Z PROC NEAR		; DirectMusicDefaultHeap::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1DirectMusicDefaultHeap@@QAE@XZ ; DirectMusicDefaultHeap::~DirectMusicDefaultHeap
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69594
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3DirectMusicDefaultHeap@@SAXPAX@Z ; DirectMusicDefaultHeap::operator delete
  00022	83 c4 04	 add	 esp, 4
$L69594:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GDirectMusicDefaultHeap@@QAEPAXI@Z ENDP		; DirectMusicDefaultHeap::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??3DirectMusicDefaultHeap@@SAXPAX@Z
_TEXT	SEGMENT
_pvBuffer$ = 8
??3DirectMusicDefaultHeap@@SAXPAX@Z PROC NEAR		; DirectMusicDefaultHeap::operator delete, COMDAT

; 178  :     LOCALALLOC_NEWDELETE

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 00	 cmp	 DWORD PTR _pvBuffer$[ebp], 0
  00007	74 09		 je	 SHORT $L69548
  00009	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _LocalFree@4
$L69548:
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??3DirectMusicDefaultHeap@@SAXPAX@Z ENDP		; DirectMusicDefaultHeap::operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1DirectMusicDefaultHeap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1DirectMusicDefaultHeap@@QAE@XZ PROC NEAR		; DirectMusicDefaultHeap::~DirectMusicDefaultHeap, COMDAT
; _this$ = ecx

; 188  :     ~DirectMusicDefaultHeap() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7DirectMusicDefaultHeap@@6B@
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1DirectMusicDefaultHeap@@QAE@XZ ENDP			; DirectMusicDefaultHeap::~DirectMusicDefaultHeap
_TEXT	ENDS
PUBLIC	??2DirectMusicDefaultPhysicalHeap@@SAPAXI@Z	; DirectMusicDefaultPhysicalHeap::operator new
PUBLIC	??0DirectMusicDefaultPhysicalHeap@@QAE@XZ	; DirectMusicDefaultPhysicalHeap::DirectMusicDefaultPhysicalHeap
PUBLIC	?Initialize@DirectMusicDefaultPhysicalHeap@@QAEJXZ ; DirectMusicDefaultPhysicalHeap::Initialize
; Function compile flags: /Odt
;	COMDAT _DirectMusicCreateDefaultPhysicalHeap@4
_TEXT	SEGMENT
tv69 = -16
$T71140 = -12
_hr$ = -8
_pHeap$ = -4
_ppHeap$ = 8
_DirectMusicCreateDefaultPhysicalHeap@4 PROC NEAR	; COMDAT

; 994  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 995  :     HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 996  :     DirectMusicDefaultPhysicalHeap* pHeap = new DirectMusicDefaultPhysicalHeap();

  0000d	6a 08		 push	 8
  0000f	e8 00 00 00 00	 call	 ??2DirectMusicDefaultPhysicalHeap@@SAPAXI@Z ; DirectMusicDefaultPhysicalHeap::operator new
  00014	83 c4 04	 add	 esp, 4
  00017	89 45 f4	 mov	 DWORD PTR $T71140[ebp], eax
  0001a	83 7d f4 00	 cmp	 DWORD PTR $T71140[ebp], 0
  0001e	74 0d		 je	 SHORT $L71141
  00020	8b 4d f4	 mov	 ecx, DWORD PTR $T71140[ebp]
  00023	e8 00 00 00 00	 call	 ??0DirectMusicDefaultPhysicalHeap@@QAE@XZ ; DirectMusicDefaultPhysicalHeap::DirectMusicDefaultPhysicalHeap
  00028	89 45 f0	 mov	 DWORD PTR tv69[ebp], eax
  0002b	eb 07		 jmp	 SHORT $L71142
$L71141:
  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$L71142:
  00034	8b 45 f0	 mov	 eax, DWORD PTR tv69[ebp]
  00037	89 45 fc	 mov	 DWORD PTR _pHeap$[ebp], eax

; 997  :     if(!pHeap){

  0003a	83 7d fc 00	 cmp	 DWORD PTR _pHeap$[ebp], 0
  0003e	75 07		 jne	 SHORT $L70265

; 998  :         hr = E_OUTOFMEMORY;

  00040	c7 45 f8 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$L70265:

; 999  :     }
; 1000 :     if(SUCCEEDED(hr)){

  00047	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004b	7c 27		 jl	 SHORT $L70268

; 1001 :         hr = pHeap->Initialize();

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _pHeap$[ebp]
  00050	e8 00 00 00 00	 call	 ?Initialize@DirectMusicDefaultPhysicalHeap@@QAEJXZ ; DirectMusicDefaultPhysicalHeap::Initialize
  00055	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 1002 :         if(SUCCEEDED(hr)){

  00058	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005c	7c 0a		 jl	 SHORT $L70270

; 1003 :             *ppHeap = pHeap;

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _ppHeap$[ebp]
  00061	8b 55 fc	 mov	 edx, DWORD PTR _pHeap$[ebp]
  00064	89 11		 mov	 DWORD PTR [ecx], edx

; 1004 :         }
; 1005 :         else {

  00066	eb 0c		 jmp	 SHORT $L70268
$L70270:

; 1006 :             pHeap->Release();

  00068	8b 45 fc	 mov	 eax, DWORD PTR _pHeap$[ebp]
  0006b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006d	8b 55 fc	 mov	 edx, DWORD PTR _pHeap$[ebp]
  00070	52		 push	 edx
  00071	ff 51 08	 call	 DWORD PTR [ecx+8]
$L70268:

; 1007 :         }
; 1008 :     }
; 1009 :     return hr;

  00074	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1010 : }

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
_DirectMusicCreateDefaultPhysicalHeap@4 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??2DirectMusicDefaultPhysicalHeap@@SAPAXI@Z
_TEXT	SEGMENT
_cbBuffer$ = 8
??2DirectMusicDefaultPhysicalHeap@@SAPAXI@Z PROC NEAR	; DirectMusicDefaultPhysicalHeap::operator new, COMDAT

; 250  :     LOCALALLOC_NEWDELETE

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	e8 00 00 00 00	 call	 _LocalAlloc@8
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??2DirectMusicDefaultPhysicalHeap@@SAPAXI@Z ENDP	; DirectMusicDefaultPhysicalHeap::operator new
_TEXT	ENDS
PUBLIC	?QueryInterface@DirectMusicDefaultPhysicalHeap@@UAGJABU_GUID@@PAPAX@Z ; DirectMusicDefaultPhysicalHeap::QueryInterface
PUBLIC	?AddRef@DirectMusicDefaultPhysicalHeap@@UAGKXZ	; DirectMusicDefaultPhysicalHeap::AddRef
PUBLIC	?Release@DirectMusicDefaultPhysicalHeap@@UAGKXZ	; DirectMusicDefaultPhysicalHeap::Release
PUBLIC	?Allocate@DirectMusicDefaultPhysicalHeap@@UAGJKPAPAX@Z ; DirectMusicDefaultPhysicalHeap::Allocate
PUBLIC	?GetSize@DirectMusicDefaultPhysicalHeap@@UAGJPAXPAK@Z ; DirectMusicDefaultPhysicalHeap::GetSize
PUBLIC	?Free@DirectMusicDefaultPhysicalHeap@@UAGJPAX@Z	; DirectMusicDefaultPhysicalHeap::Free
PUBLIC	??_7DirectMusicDefaultPhysicalHeap@@6B@		; DirectMusicDefaultPhysicalHeap::`vftable'
;	COMDAT ??_7DirectMusicDefaultPhysicalHeap@@6B@
CONST	SEGMENT
??_7DirectMusicDefaultPhysicalHeap@@6B@ DD FLAT:?QueryInterface@DirectMusicDefaultPhysicalHeap@@UAGJABU_GUID@@PAPAX@Z ; DirectMusicDefaultPhysicalHeap::`vftable'
	DD	FLAT:?AddRef@DirectMusicDefaultPhysicalHeap@@UAGKXZ
	DD	FLAT:?Release@DirectMusicDefaultPhysicalHeap@@UAGKXZ
	DD	FLAT:?Allocate@DirectMusicDefaultPhysicalHeap@@UAGJKPAPAX@Z
	DD	FLAT:?GetSize@DirectMusicDefaultPhysicalHeap@@UAGJPAXPAK@Z
	DD	FLAT:?Free@DirectMusicDefaultPhysicalHeap@@UAGJPAX@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0DirectMusicDefaultPhysicalHeap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0DirectMusicDefaultPhysicalHeap@@QAE@XZ PROC NEAR	; DirectMusicDefaultPhysicalHeap::DirectMusicDefaultPhysicalHeap, COMDAT
; _this$ = ecx

; 252  :     DirectMusicDefaultPhysicalHeap(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IDirectMusicHeap@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7DirectMusicDefaultPhysicalHeap@@6B@

; 253  :         m_cRef = 1;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 254  :     }

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0DirectMusicDefaultPhysicalHeap@@QAE@XZ ENDP		; DirectMusicDefaultPhysicalHeap::DirectMusicDefaultPhysicalHeap
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Initialize@DirectMusicDefaultPhysicalHeap@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4
?Initialize@DirectMusicDefaultPhysicalHeap@@QAEJXZ PROC NEAR ; DirectMusicDefaultPhysicalHeap::Initialize, COMDAT
; _this$ = ecx

; 256  :     HRESULT Initialize() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 257  :         return S_OK;

  00007	33 c0		 xor	 eax, eax

; 258  :     }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?Initialize@DirectMusicDefaultPhysicalHeap@@QAEJXZ ENDP	; DirectMusicDefaultPhysicalHeap::Initialize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@DirectMusicDefaultPhysicalHeap@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8
_riid$ = 12
_ppvObj$ = 16
?QueryInterface@DirectMusicDefaultPhysicalHeap@@UAGJABU_GUID@@PAPAX@Z PROC NEAR ; DirectMusicDefaultPhysicalHeap::QueryInterface, COMDAT

; 264  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 265  :         return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 266  :     }

  00008	5d		 pop	 ebp
  00009	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@DirectMusicDefaultPhysicalHeap@@UAGJABU_GUID@@PAPAX@Z ENDP ; DirectMusicDefaultPhysicalHeap::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@DirectMusicDefaultPhysicalHeap@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@DirectMusicDefaultPhysicalHeap@@UAGKXZ PROC NEAR ; DirectMusicDefaultPhysicalHeap::AddRef, COMDAT

; 270  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  :         return InterlockedIncrement(&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 04	 add	 eax, 4
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 272  :     }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@DirectMusicDefaultPhysicalHeap@@UAGKXZ ENDP	; DirectMusicDefaultPhysicalHeap::AddRef
_TEXT	ENDS
PUBLIC	??_GDirectMusicDefaultPhysicalHeap@@QAEPAXI@Z	; DirectMusicDefaultPhysicalHeap::`scalar deleting destructor'
; Function compile flags: /Odt
;	COMDAT ?Release@DirectMusicDefaultPhysicalHeap@@UAGKXZ
_TEXT	SEGMENT
tv72 = -16
$T71162 = -12
$T71161 = -8
_cRef$ = -4
_this$ = 8
?Release@DirectMusicDefaultPhysicalHeap@@UAGKXZ PROC NEAR ; DirectMusicDefaultPhysicalHeap::Release, COMDAT

; 275  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 276  :         ULONG cRef;
; 277  :             
; 278  :         cRef = InterlockedDecrement(&m_cRef);

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 04	 add	 eax, 4
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	89 45 fc	 mov	 DWORD PTR _cRef$[ebp], eax

; 279  : 
; 280  :         if (cRef == 0)

  00015	83 7d fc 00	 cmp	 DWORD PTR _cRef$[ebp], 0
  00019	75 28		 jne	 SHORT $L69654

; 281  :             delete this;

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	89 4d f4	 mov	 DWORD PTR $T71162[ebp], ecx
  00021	8b 55 f4	 mov	 edx, DWORD PTR $T71162[ebp]
  00024	89 55 f8	 mov	 DWORD PTR $T71161[ebp], edx
  00027	83 7d f8 00	 cmp	 DWORD PTR $T71161[ebp], 0
  0002b	74 0f		 je	 SHORT $L71163
  0002d	6a 01		 push	 1
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR $T71161[ebp]
  00032	e8 00 00 00 00	 call	 ??_GDirectMusicDefaultPhysicalHeap@@QAEPAXI@Z
  00037	89 45 f0	 mov	 DWORD PTR tv72[ebp], eax
  0003a	eb 07		 jmp	 SHORT $L69654
$L71163:
  0003c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L69654:

; 282  : 
; 283  :         return cRef;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _cRef$[ebp]

; 284  :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?Release@DirectMusicDefaultPhysicalHeap@@UAGKXZ ENDP	; DirectMusicDefaultPhysicalHeap::Release
_TEXT	ENDS
EXTRN	_XPhysicalAlloc@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?Allocate@DirectMusicDefaultPhysicalHeap@@UAGJKPAPAX@Z
_TEXT	SEGMENT
_pData$ = -4
_this$ = 8
_dwSize$ = 12
_ppData$ = 16
?Allocate@DirectMusicDefaultPhysicalHeap@@UAGJKPAPAX@Z PROC NEAR ; DirectMusicDefaultPhysicalHeap::Allocate, COMDAT

; 289  :     STDMETHOD(Allocate)   (THIS_ DWORD dwSize, PVOID* ppData){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 290  :         PVOID pData = XPhysicalAlloc(dwSize+4, MAXULONG_PTR, 0, PAGE_READWRITE);

  00004	6a 04		 push	 4
  00006	6a 00		 push	 0
  00008	6a ff		 push	 -1
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0000d	83 c0 04	 add	 eax, 4
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _XPhysicalAlloc@16
  00016	89 45 fc	 mov	 DWORD PTR _pData$[ebp], eax

; 291  :         if(!pData){

  00019	83 7d fc 00	 cmp	 DWORD PTR _pData$[ebp], 0
  0001d	75 07		 jne	 SHORT $L69661

; 292  :             return E_OUTOFMEMORY;

  0001f	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00024	eb 15		 jmp	 SHORT $L69658
$L69661:

; 293  :         }
; 294  :         ((DWORD*) pData)[0] = dwSize;

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _pData$[ebp]
  00029	8b 55 0c	 mov	 edx, DWORD PTR _dwSize$[ebp]
  0002c	89 11		 mov	 DWORD PTR [ecx], edx

; 295  :         *ppData = ((DWORD*) pData) + 1;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _pData$[ebp]
  00031	83 c0 04	 add	 eax, 4
  00034	8b 4d 10	 mov	 ecx, DWORD PTR _ppData$[ebp]
  00037	89 01		 mov	 DWORD PTR [ecx], eax

; 296  :         return S_OK;

  00039	33 c0		 xor	 eax, eax
$L69658:

; 297  :     }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 0c 00	 ret	 12			; 0000000cH
?Allocate@DirectMusicDefaultPhysicalHeap@@UAGJKPAPAX@Z ENDP ; DirectMusicDefaultPhysicalHeap::Allocate
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSize@DirectMusicDefaultPhysicalHeap@@UAGJPAXPAK@Z
_TEXT	SEGMENT
_hr$ = -4
_this$ = 8
_pData$ = 12
_pcbSize$ = 16
?GetSize@DirectMusicDefaultPhysicalHeap@@UAGJPAXPAK@Z PROC NEAR ; DirectMusicDefaultPhysicalHeap::GetSize, COMDAT

; 299  :     STDMETHOD(GetSize) (THIS_ PVOID pData, LPDWORD pcbSize){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 300  :         HRESULT hr = S_OK;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 301  :         if(pData){

  0000b	83 7d 0c 00	 cmp	 DWORD PTR _pData$[ebp], 0
  0000f	74 0d		 je	 SHORT $L69670

; 302  :             *pcbSize = ((DWORD*) pData)[-1];

  00011	8b 45 10	 mov	 eax, DWORD PTR _pcbSize$[ebp]
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  00017	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0001a	89 10		 mov	 DWORD PTR [eax], edx

; 303  :         }
; 304  :         else {

  0001c	eb 07		 jmp	 SHORT $L69672
$L69670:

; 305  :             hr = E_FAIL;

  0001e	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L69672:

; 306  :         }
; 307  :         return hr;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 308  :     }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
?GetSize@DirectMusicDefaultPhysicalHeap@@UAGJPAXPAK@Z ENDP ; DirectMusicDefaultPhysicalHeap::GetSize
_TEXT	ENDS
EXTRN	_XPhysicalFree@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Free@DirectMusicDefaultPhysicalHeap@@UAGJPAX@Z
_TEXT	SEGMENT
_this$ = 8
_pData$ = 12
?Free@DirectMusicDefaultPhysicalHeap@@UAGJPAX@Z PROC NEAR ; DirectMusicDefaultPhysicalHeap::Free, COMDAT

; 310  :     STDMETHOD(Free)   (THIS_ PVOID pData){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 311  :         XPhysicalFree(((DWORD*) pData)-1);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00006	83 e8 04	 sub	 eax, 4
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _XPhysicalFree@4

; 312  :         return S_OK;

  0000f	33 c0		 xor	 eax, eax

; 313  :     }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?Free@DirectMusicDefaultPhysicalHeap@@UAGJPAX@Z ENDP	; DirectMusicDefaultPhysicalHeap::Free
_TEXT	ENDS
PUBLIC	??3DirectMusicDefaultPhysicalHeap@@SAXPAX@Z	; DirectMusicDefaultPhysicalHeap::operator delete
PUBLIC	??1DirectMusicDefaultPhysicalHeap@@QAE@XZ	; DirectMusicDefaultPhysicalHeap::~DirectMusicDefaultPhysicalHeap
; Function compile flags: /Odt
;	COMDAT ??_GDirectMusicDefaultPhysicalHeap@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GDirectMusicDefaultPhysicalHeap@@QAEPAXI@Z PROC NEAR	; DirectMusicDefaultPhysicalHeap::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1DirectMusicDefaultPhysicalHeap@@QAE@XZ ; DirectMusicDefaultPhysicalHeap::~DirectMusicDefaultPhysicalHeap
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69681
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3DirectMusicDefaultPhysicalHeap@@SAXPAX@Z ; DirectMusicDefaultPhysicalHeap::operator delete
  00022	83 c4 04	 add	 esp, 4
$L69681:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GDirectMusicDefaultPhysicalHeap@@QAEPAXI@Z ENDP	; DirectMusicDefaultPhysicalHeap::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??3DirectMusicDefaultPhysicalHeap@@SAXPAX@Z
_TEXT	SEGMENT
_pvBuffer$ = 8
??3DirectMusicDefaultPhysicalHeap@@SAXPAX@Z PROC NEAR	; DirectMusicDefaultPhysicalHeap::operator delete, COMDAT

; 250  :     LOCALALLOC_NEWDELETE

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 00	 cmp	 DWORD PTR _pvBuffer$[ebp], 0
  00007	74 09		 je	 SHORT $L69635
  00009	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _LocalFree@4
$L69635:
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??3DirectMusicDefaultPhysicalHeap@@SAXPAX@Z ENDP	; DirectMusicDefaultPhysicalHeap::operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1DirectMusicDefaultPhysicalHeap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1DirectMusicDefaultPhysicalHeap@@QAE@XZ PROC NEAR	; DirectMusicDefaultPhysicalHeap::~DirectMusicDefaultPhysicalHeap, COMDAT
; _this$ = ecx

; 260  :     ~DirectMusicDefaultPhysicalHeap() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7DirectMusicDefaultPhysicalHeap@@6B@
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1DirectMusicDefaultPhysicalHeap@@QAE@XZ ENDP		; DirectMusicDefaultPhysicalHeap::~DirectMusicDefaultPhysicalHeap
_TEXT	ENDS
PUBLIC	??2DirectMusicFixedSizeHeap2@@SAPAXI@Z		; DirectMusicFixedSizeHeap2::operator new
PUBLIC	??0DirectMusicFixedSizeHeap2@@QAE@XZ		; DirectMusicFixedSizeHeap2::DirectMusicFixedSizeHeap2
PUBLIC	?Initialize@DirectMusicFixedSizeHeap2@@QAEJK@Z	; DirectMusicFixedSizeHeap2::Initialize
PUBLIC	_DirectMusicCreateFixedSizeHeap@8
; Function compile flags: /Odt
;	COMDAT _DirectMusicCreateFixedSizeHeap@8
_TEXT	SEGMENT
tv69 = -16
$T71186 = -12
_hr$ = -8
_pHeap$ = -4
_dwHeapSize$ = 8
_ppHeap$ = 12
_DirectMusicCreateFixedSizeHeap@8 PROC NEAR		; COMDAT

; 1013 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1014 :     HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1015 :     DirectMusicFixedSizeHeap2* pHeap = new DirectMusicFixedSizeHeap2();

  0000d	6a 30		 push	 48			; 00000030H
  0000f	e8 00 00 00 00	 call	 ??2DirectMusicFixedSizeHeap2@@SAPAXI@Z ; DirectMusicFixedSizeHeap2::operator new
  00014	83 c4 04	 add	 esp, 4
  00017	89 45 f4	 mov	 DWORD PTR $T71186[ebp], eax
  0001a	83 7d f4 00	 cmp	 DWORD PTR $T71186[ebp], 0
  0001e	74 0d		 je	 SHORT $L71187
  00020	8b 4d f4	 mov	 ecx, DWORD PTR $T71186[ebp]
  00023	e8 00 00 00 00	 call	 ??0DirectMusicFixedSizeHeap2@@QAE@XZ ; DirectMusicFixedSizeHeap2::DirectMusicFixedSizeHeap2
  00028	89 45 f0	 mov	 DWORD PTR tv69[ebp], eax
  0002b	eb 07		 jmp	 SHORT $L71188
$L71187:
  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$L71188:
  00034	8b 45 f0	 mov	 eax, DWORD PTR tv69[ebp]
  00037	89 45 fc	 mov	 DWORD PTR _pHeap$[ebp], eax

; 1016 :     if(!pHeap){

  0003a	83 7d fc 00	 cmp	 DWORD PTR _pHeap$[ebp], 0
  0003e	75 07		 jne	 SHORT $L70281

; 1017 :         hr = E_OUTOFMEMORY;

  00040	c7 45 f8 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$L70281:

; 1018 :     }
; 1019 :     if(SUCCEEDED(hr)){

  00047	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004b	7c 2b		 jl	 SHORT $L70284

; 1020 :         hr = pHeap->Initialize(dwHeapSize);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _dwHeapSize$[ebp]
  00050	51		 push	 ecx
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _pHeap$[ebp]
  00054	e8 00 00 00 00	 call	 ?Initialize@DirectMusicFixedSizeHeap2@@QAEJK@Z ; DirectMusicFixedSizeHeap2::Initialize
  00059	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 1021 :         if(SUCCEEDED(hr)){

  0005c	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00060	7c 0a		 jl	 SHORT $L70286

; 1022 :             *ppHeap = pHeap;

  00062	8b 55 0c	 mov	 edx, DWORD PTR _ppHeap$[ebp]
  00065	8b 45 fc	 mov	 eax, DWORD PTR _pHeap$[ebp]
  00068	89 02		 mov	 DWORD PTR [edx], eax

; 1023 :         }
; 1024 :         else {

  0006a	eb 0c		 jmp	 SHORT $L70284
$L70286:

; 1025 :             pHeap->Release();

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _pHeap$[ebp]
  0006f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00071	8b 45 fc	 mov	 eax, DWORD PTR _pHeap$[ebp]
  00074	50		 push	 eax
  00075	ff 52 08	 call	 DWORD PTR [edx+8]
$L70284:

; 1026 :         }
; 1027 :     }
; 1028 :     return hr;

  00078	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1029 : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_DirectMusicCreateFixedSizeHeap@8 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??2DirectMusicFixedSizeHeap2@@SAPAXI@Z
_TEXT	SEGMENT
_cbBuffer$ = 8
??2DirectMusicFixedSizeHeap2@@SAPAXI@Z PROC NEAR	; DirectMusicFixedSizeHeap2::operator new, COMDAT

; 318  :     LOCALALLOC_NEWDELETE

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	e8 00 00 00 00	 call	 _LocalAlloc@8
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??2DirectMusicFixedSizeHeap2@@SAPAXI@Z ENDP		; DirectMusicFixedSizeHeap2::operator new
_TEXT	ENDS
PUBLIC	?QueryInterface@DirectMusicFixedSizeHeap2@@UAGJABU_GUID@@PAPAX@Z ; DirectMusicFixedSizeHeap2::QueryInterface
PUBLIC	?AddRef@DirectMusicFixedSizeHeap2@@UAGKXZ	; DirectMusicFixedSizeHeap2::AddRef
PUBLIC	?Release@DirectMusicFixedSizeHeap2@@UAGKXZ	; DirectMusicFixedSizeHeap2::Release
PUBLIC	?Allocate@DirectMusicFixedSizeHeap2@@UAGJKPAPAX@Z ; DirectMusicFixedSizeHeap2::Allocate
PUBLIC	?GetSize@DirectMusicFixedSizeHeap2@@UAGJPAXPAK@Z ; DirectMusicFixedSizeHeap2::GetSize
PUBLIC	?Free@DirectMusicFixedSizeHeap2@@UAGJPAX@Z	; DirectMusicFixedSizeHeap2::Free
PUBLIC	??_7DirectMusicFixedSizeHeap2@@6B@		; DirectMusicFixedSizeHeap2::`vftable'
;	COMDAT ??_7DirectMusicFixedSizeHeap2@@6B@
CONST	SEGMENT
??_7DirectMusicFixedSizeHeap2@@6B@ DD FLAT:?QueryInterface@DirectMusicFixedSizeHeap2@@UAGJABU_GUID@@PAPAX@Z ; DirectMusicFixedSizeHeap2::`vftable'
	DD	FLAT:?AddRef@DirectMusicFixedSizeHeap2@@UAGKXZ
	DD	FLAT:?Release@DirectMusicFixedSizeHeap2@@UAGKXZ
	DD	FLAT:?Allocate@DirectMusicFixedSizeHeap2@@UAGJKPAPAX@Z
	DD	FLAT:?GetSize@DirectMusicFixedSizeHeap2@@UAGJPAXPAK@Z
	DD	FLAT:?Free@DirectMusicFixedSizeHeap2@@UAGJPAX@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0DirectMusicFixedSizeHeap2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0DirectMusicFixedSizeHeap2@@QAE@XZ PROC NEAR		; DirectMusicFixedSizeHeap2::DirectMusicFixedSizeHeap2, COMDAT
; _this$ = ecx

; 320  :     DirectMusicFixedSizeHeap2(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IDirectMusicHeap@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7DirectMusicFixedSizeHeap2@@6B@

; 321  :         m_cRef = 1;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 322  :         m_hHeap = GetProcessHeap();

  00022	e8 00 00 00 00	 call	 _GetProcessHeap@0
  00027	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 323  :         InitializeCriticalSection(&m_csPhysicalHeap);

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 c0 08	 add	 eax, 8
  00033	50		 push	 eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 324  :     }

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??0DirectMusicFixedSizeHeap2@@QAE@XZ ENDP		; DirectMusicFixedSizeHeap2::DirectMusicFixedSizeHeap2
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Initialize@DirectMusicFixedSizeHeap2@@QAEJK@Z
_TEXT	SEGMENT
_this$ = -4
_dwNormalHeapSize$ = 8
?Initialize@DirectMusicFixedSizeHeap2@@QAEJK@Z PROC NEAR ; DirectMusicFixedSizeHeap2::Initialize, COMDAT
; _this$ = ecx

; 326  :     HRESULT Initialize(DWORD dwNormalHeapSize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 327  :         m_dwLimit = dwNormalHeapSize;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _dwNormalHeapSize$[ebp]
  0000d	89 48 2c	 mov	 DWORD PTR [eax+44], ecx

; 328  :         m_dwSize = 0;

  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0

; 329  :         return S_OK;

  0001a	33 c0		 xor	 eax, eax

; 330  :     }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?Initialize@DirectMusicFixedSizeHeap2@@QAEJK@Z ENDP	; DirectMusicFixedSizeHeap2::Initialize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@DirectMusicFixedSizeHeap2@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8
_riid$ = 12
_ppvObj$ = 16
?QueryInterface@DirectMusicFixedSizeHeap2@@UAGJABU_GUID@@PAPAX@Z PROC NEAR ; DirectMusicFixedSizeHeap2::QueryInterface, COMDAT

; 339  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 340  :         return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 341  :     }

  00008	5d		 pop	 ebp
  00009	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@DirectMusicFixedSizeHeap2@@UAGJABU_GUID@@PAPAX@Z ENDP ; DirectMusicFixedSizeHeap2::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@DirectMusicFixedSizeHeap2@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@DirectMusicFixedSizeHeap2@@UAGKXZ PROC NEAR	; DirectMusicFixedSizeHeap2::AddRef, COMDAT

; 345  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 346  :         return InterlockedIncrement(&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 04	 add	 eax, 4
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 347  :     }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@DirectMusicFixedSizeHeap2@@UAGKXZ ENDP		; DirectMusicFixedSizeHeap2::AddRef
_TEXT	ENDS
PUBLIC	??_GDirectMusicFixedSizeHeap2@@QAEPAXI@Z	; DirectMusicFixedSizeHeap2::`scalar deleting destructor'
; Function compile flags: /Odt
;	COMDAT ?Release@DirectMusicFixedSizeHeap2@@UAGKXZ
_TEXT	SEGMENT
tv72 = -16
$T71208 = -12
$T71207 = -8
_cRef$ = -4
_this$ = 8
?Release@DirectMusicFixedSizeHeap2@@UAGKXZ PROC NEAR	; DirectMusicFixedSizeHeap2::Release, COMDAT

; 350  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 351  :         ULONG cRef;
; 352  :             
; 353  :         cRef = InterlockedDecrement(&m_cRef);

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 04	 add	 eax, 4
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	89 45 fc	 mov	 DWORD PTR _cRef$[ebp], eax

; 354  : 
; 355  :         if (cRef == 0)

  00015	83 7d fc 00	 cmp	 DWORD PTR _cRef$[ebp], 0
  00019	75 28		 jne	 SHORT $L69746

; 356  :             delete this;

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	89 4d f4	 mov	 DWORD PTR $T71208[ebp], ecx
  00021	8b 55 f4	 mov	 edx, DWORD PTR $T71208[ebp]
  00024	89 55 f8	 mov	 DWORD PTR $T71207[ebp], edx
  00027	83 7d f8 00	 cmp	 DWORD PTR $T71207[ebp], 0
  0002b	74 0f		 je	 SHORT $L71209
  0002d	6a 01		 push	 1
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR $T71207[ebp]
  00032	e8 00 00 00 00	 call	 ??_GDirectMusicFixedSizeHeap2@@QAEPAXI@Z
  00037	89 45 f0	 mov	 DWORD PTR tv72[ebp], eax
  0003a	eb 07		 jmp	 SHORT $L69746
$L71209:
  0003c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L69746:

; 357  : 
; 358  :         return cRef;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _cRef$[ebp]

; 359  :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?Release@DirectMusicFixedSizeHeap2@@UAGKXZ ENDP		; DirectMusicFixedSizeHeap2::Release
_TEXT	ENDS
PUBLIC	??_C@_0FH@COFEKOPP@Normal?5fixed?5size?5heap?5is?5out?5of@ ; `string'
;	COMDAT ??_C@_0FH@COFEKOPP@Normal?5fixed?5size?5heap?5is?5out?5of@
CONST	SEGMENT
??_C@_0FH@COFEKOPP@Normal?5fixed?5size?5heap?5is?5out?5of@ DB 'Normal fix'
	DB	'ed size heap is out of memory. Limit = %d, current size = %d,'
	DB	' request = %d.', 0aH, 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Allocate@DirectMusicFixedSizeHeap2@@UAGJKPAPAX@Z
_TEXT	SEGMENT
_pData$69754 = -8
_hr$ = -4
_this$ = 8
_dwSize$ = 12
_ppData$ = 16
?Allocate@DirectMusicFixedSizeHeap2@@UAGJKPAPAX@Z PROC NEAR ; DirectMusicFixedSizeHeap2::Allocate, COMDAT

; 364  :     STDMETHOD(Allocate)   (THIS_ DWORD dwSize, PVOID* ppData){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 365  :         HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 366  :         EnterCriticalSection(&m_csPhysicalHeap);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 c0 08	 add	 eax, 8
  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 367  :         if(m_dwSize + dwSize <= m_dwLimit){

  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00020	03 55 0c	 add	 edx, DWORD PTR _dwSize$[ebp]
  00023	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00026	3b 50 2c	 cmp	 edx, DWORD PTR [eax+44]
  00029	77 3d		 ja	 SHORT $L69753

; 368  :             PVOID pData = HeapAlloc(m_hHeap, 0, dwSize);

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _dwSize$[ebp]
  0002e	51		 push	 ecx
  0002f	6a 00		 push	 0
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _RtlAllocateHeap@12
  0003d	89 45 f8	 mov	 DWORD PTR _pData$69754[ebp], eax

; 369  :             if(!pData){

  00040	83 7d f8 00	 cmp	 DWORD PTR _pData$69754[ebp], 0
  00044	75 09		 jne	 SHORT $L69755

; 370  : 			    hr = E_OUTOFMEMORY;

  00046	c7 45 fc 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 371  :             }
; 372  :             else {

  0004d	eb 17		 jmp	 SHORT $L69757
$L69755:

; 373  :                 m_dwSize += dwSize;

  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00055	03 55 0c	 add	 edx, DWORD PTR _dwSize$[ebp]
  00058	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 374  :                 *ppData = pData;

  0005e	8b 4d 10	 mov	 ecx, DWORD PTR _ppData$[ebp]
  00061	8b 55 f8	 mov	 edx, DWORD PTR _pData$69754[ebp]
  00064	89 11		 mov	 DWORD PTR [ecx], edx
$L69757:

; 375  :             }
; 376  :         }
; 377  :         else {

  00066	eb 28		 jmp	 SHORT $L69758
$L69753:

; 378  :             Trace(1,"Normal fixed size heap is out of memory. Limit = %d, current size = %d, request = %d.\n",
; 379  :                 m_dwLimit, m_dwSize, dwSize);

  00068	8b 45 0c	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00072	52		 push	 edx
  00073	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00079	51		 push	 ecx
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@COFEKOPP@Normal?5fixed?5size?5heap?5is?5out?5of@
  0007f	6a 01		 push	 1
  00081	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00086	83 c4 14	 add	 esp, 20			; 00000014H

; 380  : 		    hr = E_OUTOFMEMORY;

  00089	c7 45 fc 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$L69758:

; 381  :         }
; 382  :         LeaveCriticalSection(&m_csPhysicalHeap);

  00090	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00093	83 c2 08	 add	 edx, 8
  00096	52		 push	 edx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 383  :         return hr;

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 384  :     }

  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 0c 00	 ret	 12			; 0000000cH
?Allocate@DirectMusicFixedSizeHeap2@@UAGJKPAPAX@Z ENDP	; DirectMusicFixedSizeHeap2::Allocate
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSize@DirectMusicFixedSizeHeap2@@UAGJPAXPAK@Z
_TEXT	SEGMENT
_dwSize$69766 = -8
_hr$ = -4
_this$ = 8
_pData$ = 12
_pcbSize$ = 16
?GetSize@DirectMusicFixedSizeHeap2@@UAGJPAXPAK@Z PROC NEAR ; DirectMusicFixedSizeHeap2::GetSize, COMDAT

; 386  :     STDMETHOD(GetSize) (THIS_ PVOID pData, LPDWORD pcbSize){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 387  :         HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 388  :         if(pData){

  0000d	83 7d 0c 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00011	74 2e		 je	 SHORT $L69765

; 389  :             DWORD dwSize = HeapSize(m_hHeap, 0, pData);

  00013	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00016	50		 push	 eax
  00017	6a 00		 push	 0
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 _RtlSizeHeap@12
  00025	89 45 f8	 mov	 DWORD PTR _dwSize$69766[ebp], eax

; 390  :             if(dwSize ==0xFFFFFFFF){

  00028	83 7d f8 ff	 cmp	 DWORD PTR _dwSize$69766[ebp], -1
  0002c	75 09		 jne	 SHORT $L69767

; 391  :                 hr = E_FAIL;

  0002e	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 392  :             }
; 393  :             else {

  00035	eb 08		 jmp	 SHORT $L69769
$L69767:

; 394  :                 *pcbSize = dwSize;

  00037	8b 45 10	 mov	 eax, DWORD PTR _pcbSize$[ebp]
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR _dwSize$69766[ebp]
  0003d	89 08		 mov	 DWORD PTR [eax], ecx
$L69769:

; 395  :             }
; 396  :         }
; 397  :         else {

  0003f	eb 07		 jmp	 SHORT $L69770
$L69765:

; 398  :             hr = E_FAIL;

  00041	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L69770:

; 399  :         }
; 400  :         return hr;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 401  :     }

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 0c 00	 ret	 12			; 0000000cH
?GetSize@DirectMusicFixedSizeHeap2@@UAGJPAXPAK@Z ENDP	; DirectMusicFixedSizeHeap2::GetSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Free@DirectMusicFixedSizeHeap2@@UAGJPAX@Z
_TEXT	SEGMENT
_dwSize$69777 = -8
_hr$ = -4
_this$ = 8
_pData$ = 12
?Free@DirectMusicFixedSizeHeap2@@UAGJPAX@Z PROC NEAR	; DirectMusicFixedSizeHeap2::Free, COMDAT

; 403  :     STDMETHOD(Free)   (THIS_ PVOID pData){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 404  :         HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 405  :         if(pData){

  0000d	83 7d 0c 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00011	74 5d		 je	 SHORT $L69776

; 406  :             EnterCriticalSection(&m_csPhysicalHeap);

  00013	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00016	83 c0 08	 add	 eax, 8
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 407  :             DWORD dwSize = HeapSize(m_hHeap, 0, pData);

  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  00023	51		 push	 ecx
  00024	6a 00		 push	 0
  00026	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00029	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _RtlSizeHeap@12
  00032	89 45 f8	 mov	 DWORD PTR _dwSize$69777[ebp], eax

; 408  :             if(m_dwSize >= dwSize){

  00035	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0003b	3b 55 f8	 cmp	 edx, DWORD PTR _dwSize$69777[ebp]
  0003e	72 0f		 jb	 SHORT $L69778

; 409  :                 m_dwSize -= dwSize;

  00040	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00046	2b 4d f8	 sub	 ecx, DWORD PTR _dwSize$69777[ebp]
  00049	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0004c	89 4a 28	 mov	 DWORD PTR [edx+40], ecx
$L69778:

; 410  :             }
; 411  :             HeapFree(m_hHeap, 0, pData);

  0004f	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00052	50		 push	 eax
  00053	6a 00		 push	 0
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _HeapFree@12

; 412  :             LeaveCriticalSection(&m_csPhysicalHeap);

  00061	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00064	83 c0 08	 add	 eax, 8
  00067	50		 push	 eax
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 413  :         }
; 414  :         else {

  0006e	eb 07		 jmp	 SHORT $L69779
$L69776:

; 415  :             hr = E_FAIL;

  00070	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L69779:

; 416  :         }
; 417  :         return hr;

  00077	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 418  :     }

  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
?Free@DirectMusicFixedSizeHeap2@@UAGJPAX@Z ENDP		; DirectMusicFixedSizeHeap2::Free
_TEXT	ENDS
PUBLIC	??3DirectMusicFixedSizeHeap2@@SAXPAX@Z		; DirectMusicFixedSizeHeap2::operator delete
PUBLIC	??1DirectMusicFixedSizeHeap2@@QAE@XZ		; DirectMusicFixedSizeHeap2::~DirectMusicFixedSizeHeap2
; Function compile flags: /Odt
;	COMDAT ??_GDirectMusicFixedSizeHeap2@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GDirectMusicFixedSizeHeap2@@QAEPAXI@Z PROC NEAR	; DirectMusicFixedSizeHeap2::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1DirectMusicFixedSizeHeap2@@QAE@XZ ; DirectMusicFixedSizeHeap2::~DirectMusicFixedSizeHeap2
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69784
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3DirectMusicFixedSizeHeap2@@SAXPAX@Z ; DirectMusicFixedSizeHeap2::operator delete
  00022	83 c4 04	 add	 esp, 4
$L69784:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GDirectMusicFixedSizeHeap2@@QAEPAXI@Z ENDP		; DirectMusicFixedSizeHeap2::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??3DirectMusicFixedSizeHeap2@@SAXPAX@Z
_TEXT	SEGMENT
_pvBuffer$ = 8
??3DirectMusicFixedSizeHeap2@@SAXPAX@Z PROC NEAR	; DirectMusicFixedSizeHeap2::operator delete, COMDAT

; 318  :     LOCALALLOC_NEWDELETE

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 00	 cmp	 DWORD PTR _pvBuffer$[ebp], 0
  00007	74 09		 je	 SHORT $L69727
  00009	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _LocalFree@4
$L69727:
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??3DirectMusicFixedSizeHeap2@@SAXPAX@Z ENDP		; DirectMusicFixedSizeHeap2::operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1DirectMusicFixedSizeHeap2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1DirectMusicFixedSizeHeap2@@QAE@XZ PROC NEAR		; DirectMusicFixedSizeHeap2::~DirectMusicFixedSizeHeap2, COMDAT
; _this$ = ecx

; 332  :     ~DirectMusicFixedSizeHeap2() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7DirectMusicFixedSizeHeap2@@6B@

; 333  :         // We don't delete m_hHeap, since it's the default process heap
; 334  :         DeleteCriticalSection(&m_csPhysicalHeap);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?DeleteCriticalSection@@YGXPAX@Z ; DeleteCriticalSection

; 335  :     }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??1DirectMusicFixedSizeHeap2@@QAE@XZ ENDP		; DirectMusicFixedSizeHeap2::~DirectMusicFixedSizeHeap2
_TEXT	ENDS
PUBLIC	??2DirectMusicFixedSizePhysicalHeap@@SAPAXI@Z	; DirectMusicFixedSizePhysicalHeap::operator new
PUBLIC	??0DirectMusicFixedSizePhysicalHeap@@QAE@XZ	; DirectMusicFixedSizePhysicalHeap::DirectMusicFixedSizePhysicalHeap
PUBLIC	?Initialize@DirectMusicFixedSizePhysicalHeap@@QAEJK@Z ; DirectMusicFixedSizePhysicalHeap::Initialize
PUBLIC	_DirectMusicCreateFixedSizePhysicalHeap@8
; Function compile flags: /Odt
;	COMDAT _DirectMusicCreateFixedSizePhysicalHeap@8
_TEXT	SEGMENT
tv69 = -16
$T71232 = -12
_hr$ = -8
_pHeap$ = -4
_dwHeapSize$ = 8
_ppHeap$ = 12
_DirectMusicCreateFixedSizePhysicalHeap@8 PROC NEAR	; COMDAT

; 1032 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1033 :     HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1034 :     DirectMusicFixedSizePhysicalHeap* pHeap = new DirectMusicFixedSizePhysicalHeap();

  0000d	6a 28		 push	 40			; 00000028H
  0000f	e8 00 00 00 00	 call	 ??2DirectMusicFixedSizePhysicalHeap@@SAPAXI@Z ; DirectMusicFixedSizePhysicalHeap::operator new
  00014	83 c4 04	 add	 esp, 4
  00017	89 45 f4	 mov	 DWORD PTR $T71232[ebp], eax
  0001a	83 7d f4 00	 cmp	 DWORD PTR $T71232[ebp], 0
  0001e	74 0d		 je	 SHORT $L71233
  00020	8b 4d f4	 mov	 ecx, DWORD PTR $T71232[ebp]
  00023	e8 00 00 00 00	 call	 ??0DirectMusicFixedSizePhysicalHeap@@QAE@XZ ; DirectMusicFixedSizePhysicalHeap::DirectMusicFixedSizePhysicalHeap
  00028	89 45 f0	 mov	 DWORD PTR tv69[ebp], eax
  0002b	eb 07		 jmp	 SHORT $L71234
$L71233:
  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$L71234:
  00034	8b 45 f0	 mov	 eax, DWORD PTR tv69[ebp]
  00037	89 45 fc	 mov	 DWORD PTR _pHeap$[ebp], eax

; 1035 :     if(!pHeap){

  0003a	83 7d fc 00	 cmp	 DWORD PTR _pHeap$[ebp], 0
  0003e	75 07		 jne	 SHORT $L70297

; 1036 :         hr = E_OUTOFMEMORY;

  00040	c7 45 f8 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$L70297:

; 1037 :     }
; 1038 :     if(SUCCEEDED(hr)){

  00047	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004b	7c 2b		 jl	 SHORT $L70300

; 1039 :         hr = pHeap->Initialize(dwHeapSize);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _dwHeapSize$[ebp]
  00050	51		 push	 ecx
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _pHeap$[ebp]
  00054	e8 00 00 00 00	 call	 ?Initialize@DirectMusicFixedSizePhysicalHeap@@QAEJK@Z ; DirectMusicFixedSizePhysicalHeap::Initialize
  00059	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 1040 :         if(SUCCEEDED(hr)){

  0005c	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00060	7c 0a		 jl	 SHORT $L70302

; 1041 :             *ppHeap = pHeap;

  00062	8b 55 0c	 mov	 edx, DWORD PTR _ppHeap$[ebp]
  00065	8b 45 fc	 mov	 eax, DWORD PTR _pHeap$[ebp]
  00068	89 02		 mov	 DWORD PTR [edx], eax

; 1042 :         }
; 1043 :         else {

  0006a	eb 0c		 jmp	 SHORT $L70300
$L70302:

; 1044 :             pHeap->Release();

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _pHeap$[ebp]
  0006f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00071	8b 45 fc	 mov	 eax, DWORD PTR _pHeap$[ebp]
  00074	50		 push	 eax
  00075	ff 52 08	 call	 DWORD PTR [edx+8]
$L70300:

; 1045 :         }
; 1046 :     }
; 1047 :     return hr;

  00078	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1048 : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_DirectMusicCreateFixedSizePhysicalHeap@8 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??2DirectMusicFixedSizePhysicalHeap@@SAPAXI@Z
_TEXT	SEGMENT
_cbBuffer$ = 8
??2DirectMusicFixedSizePhysicalHeap@@SAPAXI@Z PROC NEAR	; DirectMusicFixedSizePhysicalHeap::operator new, COMDAT

; 567  :     LOCALALLOC_NEWDELETE

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	e8 00 00 00 00	 call	 _LocalAlloc@8
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??2DirectMusicFixedSizePhysicalHeap@@SAPAXI@Z ENDP	; DirectMusicFixedSizePhysicalHeap::operator new
_TEXT	ENDS
PUBLIC	?QueryInterface@DirectMusicFixedSizePhysicalHeap@@UAGJABU_GUID@@PAPAX@Z ; DirectMusicFixedSizePhysicalHeap::QueryInterface
PUBLIC	?AddRef@DirectMusicFixedSizePhysicalHeap@@UAGKXZ ; DirectMusicFixedSizePhysicalHeap::AddRef
PUBLIC	?Release@DirectMusicFixedSizePhysicalHeap@@UAGKXZ ; DirectMusicFixedSizePhysicalHeap::Release
PUBLIC	?Allocate@DirectMusicFixedSizePhysicalHeap@@UAGJKPAPAX@Z ; DirectMusicFixedSizePhysicalHeap::Allocate
PUBLIC	?GetSize@DirectMusicFixedSizePhysicalHeap@@UAGJPAXPAK@Z ; DirectMusicFixedSizePhysicalHeap::GetSize
PUBLIC	?Free@DirectMusicFixedSizePhysicalHeap@@UAGJPAX@Z ; DirectMusicFixedSizePhysicalHeap::Free
PUBLIC	?VerifyHeap@DirectMusicFixedSizePhysicalHeap@@UAGJXZ ; DirectMusicFixedSizePhysicalHeap::VerifyHeap
PUBLIC	??_7DirectMusicFixedSizePhysicalHeap@@6B@	; DirectMusicFixedSizePhysicalHeap::`vftable'
;	COMDAT ??_7DirectMusicFixedSizePhysicalHeap@@6B@
CONST	SEGMENT
??_7DirectMusicFixedSizePhysicalHeap@@6B@ DD FLAT:?QueryInterface@DirectMusicFixedSizePhysicalHeap@@UAGJABU_GUID@@PAPAX@Z ; DirectMusicFixedSizePhysicalHeap::`vftable'
	DD	FLAT:?AddRef@DirectMusicFixedSizePhysicalHeap@@UAGKXZ
	DD	FLAT:?Release@DirectMusicFixedSizePhysicalHeap@@UAGKXZ
	DD	FLAT:?Allocate@DirectMusicFixedSizePhysicalHeap@@UAGJKPAPAX@Z
	DD	FLAT:?GetSize@DirectMusicFixedSizePhysicalHeap@@UAGJPAXPAK@Z
	DD	FLAT:?Free@DirectMusicFixedSizePhysicalHeap@@UAGJPAX@Z
	DD	FLAT:?VerifyHeap@DirectMusicFixedSizePhysicalHeap@@UAGJXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0DirectMusicFixedSizePhysicalHeap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0DirectMusicFixedSizePhysicalHeap@@QAE@XZ PROC NEAR	; DirectMusicFixedSizePhysicalHeap::DirectMusicFixedSizePhysicalHeap, COMDAT
; _this$ = ecx

; 569  :     DirectMusicFixedSizePhysicalHeap(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IDirectMusicHeap@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7DirectMusicFixedSizePhysicalHeap@@6B@

; 570  :         m_cRef = 1;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 24 01 00
	00 00		 mov	 DWORD PTR [ecx+36], 1

; 571  :         m_pHead = 0;

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0

; 572  :         InitializeCriticalSection(&m_csPhysicalHeap);

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c0 04	 add	 eax, 4
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 573  :     }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0DirectMusicFixedSizePhysicalHeap@@QAE@XZ ENDP	; DirectMusicFixedSizePhysicalHeap::DirectMusicFixedSizePhysicalHeap
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Initialize@DirectMusicFixedSizePhysicalHeap@@QAEJK@Z
_TEXT	SEGMENT
_this$ = -4
_dwPhysicalHeapSize$ = 8
?Initialize@DirectMusicFixedSizePhysicalHeap@@QAEJK@Z PROC NEAR ; DirectMusicFixedSizePhysicalHeap::Initialize, COMDAT
; _this$ = ecx

; 589  :     HRESULT Initialize(DWORD dwPhysicalHeapSize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 590  : 
; 591  :         if(dwPhysicalHeapSize < sizeof(BlockHead)){

  00007	83 7d 08 0c	 cmp	 DWORD PTR _dwPhysicalHeapSize$[ebp], 12 ; 0000000cH
  0000b	73 09		 jae	 SHORT $L69969

; 592  :             dwPhysicalHeapSize = 0;

  0000d	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _dwPhysicalHeapSize$[ebp], 0

; 593  :         }
; 594  :         else {

  00014	eb 4d		 jmp	 SHORT $L69970
$L69969:

; 595  :             m_pHead = (BlockHead*) XPhysicalAlloc(dwPhysicalHeapSize, MAXULONG_PTR, 0, PAGE_READWRITE);

  00016	6a 04		 push	 4
  00018	6a 00		 push	 0
  0001a	6a ff		 push	 -1
  0001c	8b 45 08	 mov	 eax, DWORD PTR _dwPhysicalHeapSize$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _XPhysicalAlloc@16
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 596  :             if(!m_pHead){

  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  00032	75 07		 jne	 SHORT $L69973

; 597  :                 return E_OUTOFMEMORY;

  00034	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00039	eb 2a		 jmp	 SHORT $L69967
$L69973:

; 598  :             }
; 599  :             m_pHead->pNext = 0;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00041	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 600  :             m_pHead->size = dwPhysicalHeapSize-sizeof(BlockHead);

  00047	8b 55 08	 mov	 edx, DWORD PTR _dwPhysicalHeapSize$[ebp]
  0004a	83 ea 0c	 sub	 edx, 12			; 0000000cH
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00053	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 601  :             m_pHead->bUsed = 0;

  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0005c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$L69970:

; 602  :         }
; 603  : 
; 604  :         return S_OK;

  00063	33 c0		 xor	 eax, eax
$L69967:

; 605  :     }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?Initialize@DirectMusicFixedSizePhysicalHeap@@QAEJK@Z ENDP ; DirectMusicFixedSizePhysicalHeap::Initialize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@DirectMusicFixedSizePhysicalHeap@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8
_riid$ = 12
_ppvObj$ = 16
?QueryInterface@DirectMusicFixedSizePhysicalHeap@@UAGJABU_GUID@@PAPAX@Z PROC NEAR ; DirectMusicFixedSizePhysicalHeap::QueryInterface, COMDAT

; 616  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  :         return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 618  :     }

  00008	5d		 pop	 ebp
  00009	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@DirectMusicFixedSizePhysicalHeap@@UAGJABU_GUID@@PAPAX@Z ENDP ; DirectMusicFixedSizePhysicalHeap::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@DirectMusicFixedSizePhysicalHeap@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@DirectMusicFixedSizePhysicalHeap@@UAGKXZ PROC NEAR ; DirectMusicFixedSizePhysicalHeap::AddRef, COMDAT

; 622  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 623  :         return InterlockedIncrement(&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 24	 add	 eax, 36			; 00000024H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 624  :     }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@DirectMusicFixedSizePhysicalHeap@@UAGKXZ ENDP	; DirectMusicFixedSizePhysicalHeap::AddRef
_TEXT	ENDS
PUBLIC	??_GDirectMusicFixedSizePhysicalHeap@@QAEPAXI@Z	; DirectMusicFixedSizePhysicalHeap::`scalar deleting destructor'
; Function compile flags: /Odt
;	COMDAT ?Release@DirectMusicFixedSizePhysicalHeap@@UAGKXZ
_TEXT	SEGMENT
tv72 = -16
$T71254 = -12
$T71253 = -8
_cRef$ = -4
_this$ = 8
?Release@DirectMusicFixedSizePhysicalHeap@@UAGKXZ PROC NEAR ; DirectMusicFixedSizePhysicalHeap::Release, COMDAT

; 627  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 628  :         ULONG cRef;
; 629  :             
; 630  :         cRef = InterlockedDecrement(&m_cRef);

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 24	 add	 eax, 36			; 00000024H
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	89 45 fc	 mov	 DWORD PTR _cRef$[ebp], eax

; 631  : 
; 632  :         if (cRef == 0)

  00015	83 7d fc 00	 cmp	 DWORD PTR _cRef$[ebp], 0
  00019	75 28		 jne	 SHORT $L69988

; 633  :             delete this;

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	89 4d f4	 mov	 DWORD PTR $T71254[ebp], ecx
  00021	8b 55 f4	 mov	 edx, DWORD PTR $T71254[ebp]
  00024	89 55 f8	 mov	 DWORD PTR $T71253[ebp], edx
  00027	83 7d f8 00	 cmp	 DWORD PTR $T71253[ebp], 0
  0002b	74 0f		 je	 SHORT $L71255
  0002d	6a 01		 push	 1
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR $T71253[ebp]
  00032	e8 00 00 00 00	 call	 ??_GDirectMusicFixedSizePhysicalHeap@@QAEPAXI@Z
  00037	89 45 f0	 mov	 DWORD PTR tv72[ebp], eax
  0003a	eb 07		 jmp	 SHORT $L69988
$L71255:
  0003c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L69988:

; 634  : 
; 635  :         return cRef;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _cRef$[ebp]

; 636  :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?Release@DirectMusicFixedSizePhysicalHeap@@UAGKXZ ENDP	; DirectMusicFixedSizePhysicalHeap::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Allocate@DirectMusicFixedSizePhysicalHeap@@UAGJKPAPAX@Z
_TEXT	SEGMENT
_pNew$70008 = -12
_pB$69996 = -8
_pData$ = -4
_this$ = 8
_dwSize$ = 12
_ppData$ = 16
?Allocate@DirectMusicFixedSizePhysicalHeap@@UAGJKPAPAX@Z PROC NEAR ; DirectMusicFixedSizePhysicalHeap::Allocate, COMDAT

; 641  :     STDMETHOD(Allocate)   (THIS_ DWORD dwSize, PVOID* ppData){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 642  :         if(!m_pHead){

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0000d	75 0a		 jne	 SHORT $L69993

; 643  :             return E_OUTOFMEMORY;

  0000f	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00014	e9 20 01 00 00	 jmp	 $L69992
$L69993:

; 644  :         }
; 645  : 		VERIFYHEAP
; 646  :         PVOID pData = NULL;

  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pData$[ebp], 0

; 647  :         //Round up to the nearest DWORD.
; 648  :         dwSize = (dwSize + 3) & ~3;

  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _dwSize$[ebp]
  00023	83 c1 03	 add	 ecx, 3
  00026	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00029	89 4d 0c	 mov	 DWORD PTR _dwSize$[ebp], ecx

; 649  : 
; 650  :         EnterCriticalSection(&m_csPhysicalHeap);

  0002c	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	83 c2 04	 add	 edx, 4
  00032	52		 push	 edx
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 651  :         for(BlockHead* pB = m_pHead; pB; pB = pB->pNext){

  00039	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0003f	89 4d f8	 mov	 DWORD PTR _pB$69996[ebp], ecx
  00042	eb 08		 jmp	 SHORT $L69997
$L69998:
  00044	8b 55 f8	 mov	 edx, DWORD PTR _pB$69996[ebp]
  00047	8b 02		 mov	 eax, DWORD PTR [edx]
  00049	89 45 f8	 mov	 DWORD PTR _pB$69996[ebp], eax
$L69997:
  0004c	83 7d f8 00	 cmp	 DWORD PTR _pB$69996[ebp], 0
  00050	0f 84 bf 00 00
	00		 je	 $L69999

; 652  :             if((! pB->bUsed)){

  00056	8b 4d f8	 mov	 ecx, DWORD PTR _pB$69996[ebp]
  00059	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0005d	0f 85 ad 00 00
	00		 jne	 $L70000
$L70002:

; 653  :                 // Coalesce with next block, if possible
; 654  :                 while(pB->pNext && !pB->pNext->bUsed){

  00063	8b 55 f8	 mov	 edx, DWORD PTR _pB$69996[ebp]
  00066	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00069	74 31		 je	 SHORT $L70003
  0006b	8b 45 f8	 mov	 eax, DWORD PTR _pB$69996[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00074	75 26		 jne	 SHORT $L70003

; 655  :                     pB->size += pB->pNext->size + sizeof(BlockHead);

  00076	8b 55 f8	 mov	 edx, DWORD PTR _pB$69996[ebp]
  00079	8b 02		 mov	 eax, DWORD PTR [edx]
  0007b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007e	8b 55 f8	 mov	 edx, DWORD PTR _pB$69996[ebp]
  00081	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00084	8d 4c 01 0c	 lea	 ecx, DWORD PTR [ecx+eax+12]
  00088	8b 55 f8	 mov	 edx, DWORD PTR _pB$69996[ebp]
  0008b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 656  :                     pB->pNext = pB->pNext->pNext;

  0008e	8b 45 f8	 mov	 eax, DWORD PTR _pB$69996[ebp]
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	8b 55 f8	 mov	 edx, DWORD PTR _pB$69996[ebp]
  00096	8b 01		 mov	 eax, DWORD PTR [ecx]
  00098	89 02		 mov	 DWORD PTR [edx], eax

; 657  :                 }

  0009a	eb c7		 jmp	 SHORT $L70002
$L70003:

; 658  :                 // Is this block big enough to use?
; 659  :                 if(dwSize <= pB->size){

  0009c	8b 4d f8	 mov	 ecx, DWORD PTR _pB$69996[ebp]
  0009f	8b 55 0c	 mov	 edx, DWORD PTR _dwSize$[ebp]
  000a2	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000a5	77 69		 ja	 SHORT $L70000

; 660  :                     // Is it big enough to split?
; 661  :                     if(dwSize + sizeof(BlockHead) < pB->size){

  000a7	8b 45 0c	 mov	 eax, DWORD PTR _dwSize$[ebp]
  000aa	83 c0 0c	 add	 eax, 12			; 0000000cH
  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _pB$69996[ebp]
  000b0	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000b3	73 46		 jae	 SHORT $L70007

; 662  :                         // split
; 663  :                         BlockHead* pNew = (BlockHead*) (((char*) pB) + sizeof(BlockHead) + dwSize);

  000b5	8b 55 0c	 mov	 edx, DWORD PTR _dwSize$[ebp]
  000b8	8b 45 f8	 mov	 eax, DWORD PTR _pB$69996[ebp]
  000bb	8d 4c 10 0c	 lea	 ecx, DWORD PTR [eax+edx+12]
  000bf	89 4d f4	 mov	 DWORD PTR _pNew$70008[ebp], ecx

; 664  :                         pNew->pNext = pB->pNext;

  000c2	8b 55 f4	 mov	 edx, DWORD PTR _pNew$70008[ebp]
  000c5	8b 45 f8	 mov	 eax, DWORD PTR _pB$69996[ebp]
  000c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ca	89 0a		 mov	 DWORD PTR [edx], ecx

; 665  :                         pNew->size = pB->size - (dwSize + sizeof(BlockHead));

  000cc	8b 55 0c	 mov	 edx, DWORD PTR _dwSize$[ebp]
  000cf	83 c2 0c	 add	 edx, 12			; 0000000cH
  000d2	8b 45 f8	 mov	 eax, DWORD PTR _pB$69996[ebp]
  000d5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d8	2b ca		 sub	 ecx, edx
  000da	8b 55 f4	 mov	 edx, DWORD PTR _pNew$70008[ebp]
  000dd	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 666  :                         pNew->bUsed = 0;

  000e0	8b 45 f4	 mov	 eax, DWORD PTR _pNew$70008[ebp]
  000e3	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 667  : 						pB->size = dwSize;

  000ea	8b 4d f8	 mov	 ecx, DWORD PTR _pB$69996[ebp]
  000ed	8b 55 0c	 mov	 edx, DWORD PTR _dwSize$[ebp]
  000f0	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 668  :                         pB->pNext = pNew;

  000f3	8b 45 f8	 mov	 eax, DWORD PTR _pB$69996[ebp]
  000f6	8b 4d f4	 mov	 ecx, DWORD PTR _pNew$70008[ebp]
  000f9	89 08		 mov	 DWORD PTR [eax], ecx
$L70007:

; 669  :                     }
; 670  :                     pB->bUsed = 'z';

  000fb	8b 55 f8	 mov	 edx, DWORD PTR _pB$69996[ebp]
  000fe	c7 42 08 7a 00
	00 00		 mov	 DWORD PTR [edx+8], 122	; 0000007aH

; 671  :                     pData = (void*) (((char*) pB) + sizeof(BlockHead));

  00105	8b 45 f8	 mov	 eax, DWORD PTR _pB$69996[ebp]
  00108	83 c0 0c	 add	 eax, 12			; 0000000cH
  0010b	89 45 fc	 mov	 DWORD PTR _pData$[ebp], eax

; 672  :                     break;

  0010e	eb 05		 jmp	 SHORT $L69999
$L70000:

; 673  :                 }
; 674  :             }
; 675  :         }

  00110	e9 2f ff ff ff	 jmp	 $L69998
$L69999:

; 676  :         LeaveCriticalSection(&m_csPhysicalHeap);

  00115	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00118	83 c1 04	 add	 ecx, 4
  0011b	51		 push	 ecx
  0011c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 677  : 		VERIFYHEAP
; 678  :         if(!pData){

  00122	83 7d fc 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00126	75 07		 jne	 SHORT $L70016

; 679  :             return E_OUTOFMEMORY;

  00128	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  0012d	eb 0a		 jmp	 SHORT $L69992
$L70016:

; 680  :         }
; 681  :         *ppData = pData;

  0012f	8b 55 10	 mov	 edx, DWORD PTR _ppData$[ebp]
  00132	8b 45 fc	 mov	 eax, DWORD PTR _pData$[ebp]
  00135	89 02		 mov	 DWORD PTR [edx], eax

; 682  : 		VERIFYHEAP
; 683  :         return S_OK;

  00137	33 c0		 xor	 eax, eax
$L69992:

; 684  :     }

  00139	8b e5		 mov	 esp, ebp
  0013b	5d		 pop	 ebp
  0013c	c2 0c 00	 ret	 12			; 0000000cH
?Allocate@DirectMusicFixedSizePhysicalHeap@@UAGJKPAPAX@Z ENDP ; DirectMusicFixedSizePhysicalHeap::Allocate
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSize@DirectMusicFixedSizePhysicalHeap@@UAGJPAXPAK@Z
_TEXT	SEGMENT
_pB$70024 = -8
_hr$ = -4
_this$ = 8
_pData$ = 12
_pcbSize$ = 16
?GetSize@DirectMusicFixedSizePhysicalHeap@@UAGJPAXPAK@Z PROC NEAR ; DirectMusicFixedSizePhysicalHeap::GetSize, COMDAT

; 686  :     STDMETHOD(GetSize) (THIS_ PVOID pData, LPDWORD pcbSize){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 687  :         HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 688  :         if(pData){

  0000d	83 7d 0c 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00011	74 16		 je	 SHORT $L70023

; 689  :             BlockHead* pB = (BlockHead*)(((char*) pData) - sizeof(BlockHead));

  00013	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00016	83 e8 0c	 sub	 eax, 12			; 0000000cH
  00019	89 45 f8	 mov	 DWORD PTR _pB$70024[ebp], eax

; 690  :             *pcbSize = pB->size;

  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _pcbSize$[ebp]
  0001f	8b 55 f8	 mov	 edx, DWORD PTR _pB$70024[ebp]
  00022	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00025	89 01		 mov	 DWORD PTR [ecx], eax

; 691  :         }
; 692  :         else {

  00027	eb 07		 jmp	 SHORT $L70028
$L70023:

; 693  :             hr = E_FAIL;

  00029	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L70028:

; 694  :         }
; 695  :         return hr;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 696  :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
?GetSize@DirectMusicFixedSizePhysicalHeap@@UAGJPAXPAK@Z ENDP ; DirectMusicFixedSizePhysicalHeap::GetSize
_TEXT	ENDS
PUBLIC	??_C@_09OHLBFDEF@Bad?5Block?$AA@		; `string'
PUBLIC	??_C@_0BB@IDKLHCLO@pB?9?$DObUsed?5?$DN?$DN?5?8z?8?$AA@ ; `string'
;	COMDAT ??_C@_09OHLBFDEF@Bad?5Block?$AA@
CONST	SEGMENT
??_C@_09OHLBFDEF@Bad?5Block?$AA@ DB 'Bad Block', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IDKLHCLO@pB?9?$DObUsed?5?$DN?$DN?5?8z?8?$AA@
CONST	SEGMENT
??_C@_0BB@IDKLHCLO@pB?9?$DObUsed?5?$DN?$DN?5?8z?8?$AA@ DB 'pB->bUsed == '''
	DB	'z''', 00H					; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Free@DirectMusicFixedSizePhysicalHeap@@UAGJPAX@Z
_TEXT	SEGMENT
_pB$70035 = -4
_this$ = 8
_pData$ = 12
?Free@DirectMusicFixedSizePhysicalHeap@@UAGJPAX@Z PROC NEAR ; DirectMusicFixedSizePhysicalHeap::Free, COMDAT

; 698  :     STDMETHOD(Free)   (THIS_ PVOID pData){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 699  :         if(!m_pHead){

  00004	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00007	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0000b	75 07		 jne	 SHORT $L70032

; 700  :             return E_FAIL;

  0000d	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00012	eb 58		 jmp	 SHORT $L70031
$L70032:

; 701  :         }
; 702  :         if(pData){

  00014	83 7d 0c 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00018	74 50		 je	 SHORT $L70034

; 703  : 			VERIFYHEAP
; 704  :             EnterCriticalSection(&m_csPhysicalHeap);

  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 04	 add	 ecx, 4
  00020	51		 push	 ecx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 705  :             BlockHead* pB = (BlockHead*)(((char*) pData) - sizeof(BlockHead));

  00027	8b 55 0c	 mov	 edx, DWORD PTR _pData$[ebp]
  0002a	83 ea 0c	 sub	 edx, 12			; 0000000cH
  0002d	89 55 fc	 mov	 DWORD PTR _pB$70035[ebp], edx

; 706  :             ASSERTMSG("Bad Block", pB->bUsed == 'z');

  00030	8b 45 fc	 mov	 eax, DWORD PTR _pB$70035[ebp]
  00033	83 78 08 7a	 cmp	 DWORD PTR [eax+8], 122	; 0000007aH
  00037	74 1a		 je	 SHORT $L70039
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09OHLBFDEF@Bad?5Block?$AA@
  0003e	68 c2 02 00 00	 push	 706			; 000002c2H
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@IDKLHCLO@pB?9?$DObUsed?5?$DN?$DN?5?8z?8?$AA@
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L70039:

; 707  :             pB->bUsed = 0;

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _pB$70035[ebp]
  00056	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 708  :             LeaveCriticalSection(&m_csPhysicalHeap);

  0005d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00060	83 c2 04	 add	 edx, 4
  00063	52		 push	 edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4
$L70034:

; 709  : 			VERIFYHEAP
; 710  :         }
; 711  :         return S_OK;

  0006a	33 c0		 xor	 eax, eax
$L70031:

; 712  :     }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 08 00	 ret	 8
?Free@DirectMusicFixedSizePhysicalHeap@@UAGJPAX@Z ENDP	; DirectMusicFixedSizePhysicalHeap::Free
_TEXT	ENDS
PUBLIC	?DebugAssert@@YGXPAD0K@Z			; DebugAssert
PUBLIC	??_C@_0CG@DJMBAJGO@Heap?5Corruption?5at?5beginning?5of?5@ ; `string'
PUBLIC	??_C@_05MAJJAKPI@FALSE?$AA@			; `string'
PUBLIC	??_C@_0CA@NGABMKMF@Heap?5Corruption?5at?5end?5of?5block?$AA@ ; `string'
PUBLIC	??_C@_0HF@POFHDONH@Difference?5between?5pB?5?$CI?$CF08X?$CJ?5and@ ; `string'
;	COMDAT ??_C@_0CG@DJMBAJGO@Heap?5Corruption?5at?5beginning?5of?5@
CONST	SEGMENT
??_C@_0CG@DJMBAJGO@Heap?5Corruption?5at?5beginning?5of?5@ DB 'Heap Corrup'
	DB	'tion at beginning of block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE?$AA@
CONST	SEGMENT
??_C@_05MAJJAKPI@FALSE?$AA@ DB 'FALSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NGABMKMF@Heap?5Corruption?5at?5end?5of?5block?$AA@
CONST	SEGMENT
??_C@_0CA@NGABMKMF@Heap?5Corruption?5at?5end?5of?5block?$AA@ DB 'Heap Cor'
	DB	'ruption at end of block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HF@POFHDONH@Difference?5between?5pB?5?$CI?$CF08X?$CJ?5and@
CONST	SEGMENT
??_C@_0HF@POFHDONH@Difference?5between?5pB?5?$CI?$CF08X?$CJ?5and@ DB 'Dif'
	DB	'ference between pB (%08X) and pB->pNext (%08X) is %08X (%d), '
	DB	'but the size of pB + sizeof(BlockHead) is %08X (%d)', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?VerifyHeap@DirectMusicFixedSizePhysicalHeap@@UAGJXZ
_TEXT	SEGMENT
_pByte$ = -12
_pB$ = -8
_dwCount$ = -4
_this$ = 8
?VerifyHeap@DirectMusicFixedSizePhysicalHeap@@UAGJXZ PROC NEAR ; DirectMusicFixedSizePhysicalHeap::VerifyHeap, COMDAT

; 716  : 	STDMETHOD(VerifyHeap)(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 717  : 		DWORD dwCount = 0;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwCount$[ebp], 0

; 718  : 		BlockHead *pB = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pB$[ebp], 0

; 719  : 		char *pByte;
; 720  : 
; 721  : 		EnterCriticalSection(&m_csPhysicalHeap);

  00014	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 722  : 
; 723  : 		for(pB = m_pHead; pB; pB = pB->pNext){

  00021	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00027	89 55 f8	 mov	 DWORD PTR _pB$[ebp], edx
  0002a	eb 08		 jmp	 SHORT $L70048
$L70049:
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _pB$[ebp]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	89 4d f8	 mov	 DWORD PTR _pB$[ebp], ecx
$L70048:
  00034	83 7d f8 00	 cmp	 DWORD PTR _pB$[ebp], 0
  00038	0f 84 fe 00 00
	00		 je	 $L70050

; 724  : 			dwCount++;

  0003e	8b 55 fc	 mov	 edx, DWORD PTR _dwCount$[ebp]
  00041	83 c2 01	 add	 edx, 1
  00044	89 55 fc	 mov	 DWORD PTR _dwCount$[ebp], edx

; 725  : 			pByte = (char *)pB;

  00047	8b 45 f8	 mov	 eax, DWORD PTR _pB$[ebp]
  0004a	89 45 f4	 mov	 DWORD PTR _pByte$[ebp], eax

; 726  :         
; 727  : 			//Verify that the first and last byte in this block are 'X'.
; 728  : 			if(pB->bUsed == 0){

  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _pB$[ebp]
  00050	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00054	75 71		 jne	 SHORT $L70052

; 729  : 				if((pByte + sizeof(BlockHead))[0] != 'X'){

  00056	8b 55 f4	 mov	 edx, DWORD PTR _pByte$[ebp]
  00059	0f be 42 0c	 movsx	 eax, BYTE PTR [edx+12]
  0005d	83 f8 58	 cmp	 eax, 88			; 00000058H
  00060	74 29		 je	 SHORT $L70054

; 730  : 					Trace(1,"Heap Corruption at beginning of block");

  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@DJMBAJGO@Heap?5Corruption?5at?5beginning?5of?5@
  00067	6a 01		 push	 1
  00069	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0006e	83 c4 08	 add	 esp, 8

; 731  : 					assert(FALSE);

  00071	33 c9		 xor	 ecx, ecx
  00073	85 c9		 test	 ecx, ecx
  00075	75 14		 jne	 SHORT $L70054
  00077	68 db 02 00 00	 push	 731			; 000002dbH
  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05MAJJAKPI@FALSE?$AA@
  00086	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L70054:

; 732  : 				}
; 733  : 
; 734  : 				if((pByte + sizeof(BlockHead))[pB->size - 1] != 'X'){

  0008b	8b 45 f8	 mov	 eax, DWORD PTR _pB$[ebp]
  0008e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00091	8b 55 f4	 mov	 edx, DWORD PTR _pByte$[ebp]
  00094	0f be 44 0a 0b	 movsx	 eax, BYTE PTR [edx+ecx+11]
  00099	83 f8 58	 cmp	 eax, 88			; 00000058H
  0009c	74 29		 je	 SHORT $L70052

; 735  : 					Trace(1,"Heap Corruption at end of block");

  0009e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@NGABMKMF@Heap?5Corruption?5at?5end?5of?5block?$AA@
  000a3	6a 01		 push	 1
  000a5	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000aa	83 c4 08	 add	 esp, 8

; 736  : 					assert(FALSE);

  000ad	33 c9		 xor	 ecx, ecx
  000af	85 c9		 test	 ecx, ecx
  000b1	75 14		 jne	 SHORT $L70052
  000b3	68 e0 02 00 00	 push	 736			; 000002e0H
  000b8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
  000bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05MAJJAKPI@FALSE?$AA@
  000c2	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L70052:

; 737  : 				}
; 738  : 			}
; 739  : 
; 740  : 			//Verify that the sizes match.
; 741  : 			if (pB->pNext) {

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _pB$[ebp]
  000ca	83 38 00	 cmp	 DWORD PTR [eax], 0
  000cd	74 68		 je	 SHORT $L70062

; 742  : 				if((char *)pB->pNext - (char *)pB != pB->size + sizeof(BlockHead)){

  000cf	8b 4d f8	 mov	 ecx, DWORD PTR _pB$[ebp]
  000d2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d4	2b 55 f8	 sub	 edx, DWORD PTR _pB$[ebp]
  000d7	8b 45 f8	 mov	 eax, DWORD PTR _pB$[ebp]
  000da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000dd	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000e0	3b d1		 cmp	 edx, ecx
  000e2	74 53		 je	 SHORT $L70062

; 743  : 					Trace(1,"Difference between pB (%08X) and pB->pNext (%08X) is %08X (%d), but the size of pB + sizeof(BlockHead) is %08X (%d)\n",
; 744  : 						 pB,
; 745  : 						 pB->pNext,
; 746  : 						 (char *)pB->pNext - (char *)pB,
; 747  : 						 (char *)pB->pNext - (char *)pB,
; 748  : 						 pB->size,
; 749  : 						 pB->size
; 750  : 						 );

  000e4	8b 55 f8	 mov	 edx, DWORD PTR _pB$[ebp]
  000e7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ea	50		 push	 eax
  000eb	8b 4d f8	 mov	 ecx, DWORD PTR _pB$[ebp]
  000ee	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f1	52		 push	 edx
  000f2	8b 45 f8	 mov	 eax, DWORD PTR _pB$[ebp]
  000f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f7	2b 4d f8	 sub	 ecx, DWORD PTR _pB$[ebp]
  000fa	51		 push	 ecx
  000fb	8b 55 f8	 mov	 edx, DWORD PTR _pB$[ebp]
  000fe	8b 02		 mov	 eax, DWORD PTR [edx]
  00100	2b 45 f8	 sub	 eax, DWORD PTR _pB$[ebp]
  00103	50		 push	 eax
  00104	8b 4d f8	 mov	 ecx, DWORD PTR _pB$[ebp]
  00107	8b 11		 mov	 edx, DWORD PTR [ecx]
  00109	52		 push	 edx
  0010a	8b 45 f8	 mov	 eax, DWORD PTR _pB$[ebp]
  0010d	50		 push	 eax
  0010e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0HF@POFHDONH@Difference?5between?5pB?5?$CI?$CF08X?$CJ?5and@
  00113	6a 01		 push	 1
  00115	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011a	83 c4 20	 add	 esp, 32			; 00000020H

; 751  : 					assert(FALSE);

  0011d	33 c9		 xor	 ecx, ecx
  0011f	85 c9		 test	 ecx, ecx
  00121	75 14		 jne	 SHORT $L70062
  00123	68 ef 02 00 00	 push	 751			; 000002efH
  00128	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@IAHHHIP@c?3?2xbox?2private?2windows?2directx?2@
  0012d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05MAJJAKPI@FALSE?$AA@
  00132	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L70062:

; 752  : 				}
; 753  : 			}
; 754  : 		}

  00137	e9 f0 fe ff ff	 jmp	 $L70049
$L70050:

; 755  : 
; 756  : 		LeaveCriticalSection(&m_csPhysicalHeap);

  0013c	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0013f	83 c0 04	 add	 eax, 4
  00142	50		 push	 eax
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 757  : 		return S_OK;

  00149	33 c0		 xor	 eax, eax

; 758  : 	}

  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c2 04 00	 ret	 4
?VerifyHeap@DirectMusicFixedSizePhysicalHeap@@UAGJXZ ENDP ; DirectMusicFixedSizePhysicalHeap::VerifyHeap
_TEXT	ENDS
PUBLIC	??3DirectMusicFixedSizePhysicalHeap@@SAXPAX@Z	; DirectMusicFixedSizePhysicalHeap::operator delete
PUBLIC	??1DirectMusicFixedSizePhysicalHeap@@QAE@XZ	; DirectMusicFixedSizePhysicalHeap::~DirectMusicFixedSizePhysicalHeap
; Function compile flags: /Odt
;	COMDAT ??_GDirectMusicFixedSizePhysicalHeap@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GDirectMusicFixedSizePhysicalHeap@@QAEPAXI@Z PROC NEAR ; DirectMusicFixedSizePhysicalHeap::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1DirectMusicFixedSizePhysicalHeap@@QAE@XZ ; DirectMusicFixedSizePhysicalHeap::~DirectMusicFixedSizePhysicalHeap
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L70077
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3DirectMusicFixedSizePhysicalHeap@@SAXPAX@Z ; DirectMusicFixedSizePhysicalHeap::operator delete
  00022	83 c4 04	 add	 esp, 4
$L70077:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GDirectMusicFixedSizePhysicalHeap@@QAEPAXI@Z ENDP	; DirectMusicFixedSizePhysicalHeap::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??3DirectMusicFixedSizePhysicalHeap@@SAXPAX@Z
_TEXT	SEGMENT
_pvBuffer$ = 8
??3DirectMusicFixedSizePhysicalHeap@@SAXPAX@Z PROC NEAR	; DirectMusicFixedSizePhysicalHeap::operator delete, COMDAT

; 567  :     LOCALALLOC_NEWDELETE

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 00	 cmp	 DWORD PTR _pvBuffer$[ebp], 0
  00007	74 09		 je	 SHORT $L69960
  00009	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _LocalFree@4
$L69960:
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??3DirectMusicFixedSizePhysicalHeap@@SAXPAX@Z ENDP	; DirectMusicFixedSizePhysicalHeap::operator delete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1DirectMusicFixedSizePhysicalHeap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1DirectMusicFixedSizePhysicalHeap@@QAE@XZ PROC NEAR	; DirectMusicFixedSizePhysicalHeap::~DirectMusicFixedSizePhysicalHeap, COMDAT
; _this$ = ecx

; 607  :     ~DirectMusicFixedSizePhysicalHeap() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7DirectMusicFixedSizePhysicalHeap@@6B@

; 608  :         if(m_pHead){

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00017	74 0c		 je	 SHORT $L69979

; 609  :             XPhysicalFree(m_pHead);

  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _XPhysicalFree@4
$L69979:

; 610  :         }
; 611  :         DeleteCriticalSection(&m_csPhysicalHeap);

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	83 c1 04	 add	 ecx, 4
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?DeleteCriticalSection@@YGXPAX@Z ; DeleteCriticalSection

; 612  :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??1DirectMusicFixedSizePhysicalHeap@@QAE@XZ ENDP	; DirectMusicFixedSizePhysicalHeap::~DirectMusicFixedSizePhysicalHeap
_TEXT	ENDS
PUBLIC	_DirectMusicInitializeFixedSizeHeaps@12
; Function compile flags: /Odt
;	COMDAT _DirectMusicInitializeFixedSizeHeaps@12
_TEXT	SEGMENT
_pPhysicalHeap$ = -12
_hr$ = -8
_pNormalHeap$ = -4
_dwNormalHeapSize$ = 8
_dwPhysicalHeapSize$ = 12
_pFactory$ = 16
_DirectMusicInitializeFixedSizeHeaps@12 PROC NEAR	; COMDAT

; 1052 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1053 : 	IDirectMusicHeap* pPhysicalHeap = NULL;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pPhysicalHeap$[ebp], 0

; 1054 : 	IDirectMusicHeap* pNormalHeap = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pNormalHeap$[ebp], 0

; 1055 : 	HRESULT hr = S_OK;

  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1056 : 	if(SUCCEEDED(hr)){

  0001b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0001f	7c 10		 jl	 SHORT $L70314

; 1057 : 		hr = DirectMusicCreateFixedSizeHeap(dwNormalHeapSize, &pNormalHeap);

  00021	8d 45 fc	 lea	 eax, DWORD PTR _pNormalHeap$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _dwNormalHeapSize$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _DirectMusicCreateFixedSizeHeap@8
  0002e	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L70314:

; 1058 : 	}
; 1059 : 	if(SUCCEEDED(hr)){

  00031	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00035	7c 10		 jl	 SHORT $L70316

; 1060 : 		hr = DirectMusicCreateFixedSizePhysicalHeap(dwPhysicalHeapSize, &pPhysicalHeap);

  00037	8d 55 f4	 lea	 edx, DWORD PTR _pPhysicalHeap$[ebp]
  0003a	52		 push	 edx
  0003b	8b 45 0c	 mov	 eax, DWORD PTR _dwPhysicalHeapSize$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _DirectMusicCreateFixedSizePhysicalHeap@8
  00044	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L70316:

; 1061 : 	}
; 1062 : 	if(SUCCEEDED(hr)){

  00047	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004b	7c 14		 jl	 SHORT $L70318

; 1063 : 		hr = DirectMusicInitializeEx(pNormalHeap, pPhysicalHeap, pFactory);

  0004d	8b 4d 10	 mov	 ecx, DWORD PTR _pFactory$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 f4	 mov	 edx, DWORD PTR _pPhysicalHeap$[ebp]
  00054	52		 push	 edx
  00055	8b 45 fc	 mov	 eax, DWORD PTR _pNormalHeap$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _DirectMusicInitializeEx@12
  0005e	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L70318:

; 1064 : 	}
; 1065 : 	if(pPhysicalHeap){

  00061	83 7d f4 00	 cmp	 DWORD PTR _pPhysicalHeap$[ebp], 0
  00065	74 0c		 je	 SHORT $L70319

; 1066 : 		pPhysicalHeap->Release();

  00067	8b 4d f4	 mov	 ecx, DWORD PTR _pPhysicalHeap$[ebp]
  0006a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006c	8b 45 f4	 mov	 eax, DWORD PTR _pPhysicalHeap$[ebp]
  0006f	50		 push	 eax
  00070	ff 52 08	 call	 DWORD PTR [edx+8]
$L70319:

; 1067 : 	}
; 1068 : 	if(pNormalHeap){

  00073	83 7d fc 00	 cmp	 DWORD PTR _pNormalHeap$[ebp], 0
  00077	74 0c		 je	 SHORT $L70320

; 1069 : 		pNormalHeap->Release();

  00079	8b 4d fc	 mov	 ecx, DWORD PTR _pNormalHeap$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	8b 45 fc	 mov	 eax, DWORD PTR _pNormalHeap$[ebp]
  00081	50		 push	 eax
  00082	ff 52 08	 call	 DWORD PTR [edx+8]
$L70320:

; 1070 : 	}
; 1071 : 	return hr;

  00085	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1072 : }

  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 0c 00	 ret	 12			; 0000000cH
_DirectMusicInitializeFixedSizeHeaps@12 ENDP
_TEXT	ENDS
EXTRN	_DebugBreak@0:NEAR
EXTRN	_OutputDebugStringA@4:NEAR
EXTRN	_vsprintf:NEAR
; Function compile flags: /Odt
;	COMDAT ?DebugTrace@@YAXHPADZZ
_TEXT	SEGMENT
_sz$ = -520
_va$ = -4
_iDebugLevel$ = 8
_pstrFormat$ = 12
?DebugTrace@@YAXHPADZZ PROC NEAR			; DebugTrace, COMDAT

; 1131 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 02 00
	00		 sub	 esp, 520		; 00000208H

; 1132 :     char sz[512];
; 1133 : 
; 1134 :     if (iDebugLevel != -1 && iDebugLevel > giDebugLevel)

  00009	83 7d 08 ff	 cmp	 DWORD PTR _iDebugLevel$[ebp], -1
  0000d	74 10		 je	 SHORT $L70334
  0000f	8b 45 08	 mov	 eax, DWORD PTR _iDebugLevel$[ebp]
  00012	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _giDebugLevel
  00018	7e 05		 jle	 SHORT $L70334

; 1135 :     {
; 1136 :         return;

  0001a	e9 98 00 00 00	 jmp	 $L70332
$L70334:

; 1137 :     }
; 1138 : 
; 1139 :     va_list va;
; 1140 : 
; 1141 :     va_start(va, pstrFormat);

  0001f	8d 4d 10	 lea	 ecx, DWORD PTR _pstrFormat$[ebp+4]
  00022	89 4d fc	 mov	 DWORD PTR _va$[ebp], ecx

; 1142 :     vsprintf(sz, pstrFormat, va);

  00025	8b 55 fc	 mov	 edx, DWORD PTR _va$[ebp]
  00028	52		 push	 edx
  00029	8b 45 0c	 mov	 eax, DWORD PTR _pstrFormat$[ebp]
  0002c	50		 push	 eax
  0002d	8d 8d f8 fd ff
	ff		 lea	 ecx, DWORD PTR _sz$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _vsprintf
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1143 :     va_end(va);

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _va$[ebp], 0

; 1144 : 
; 1145 :     if (fNeedPrefix)

  00043	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _fNeedPrefix, 0
  0004a	74 0a		 je	 SHORT $L70341

; 1146 :     {
; 1147 :         OutputDebugStringA(szDebugPrefix);

  0004c	68 00 00 00 00	 push	 OFFSET FLAT:_szDebugPrefix
  00051	e8 00 00 00 00	 call	 _OutputDebugStringA@4
$L70341:

; 1148 :     }
; 1149 :     
; 1150 :     OutputDebugStringA(sz);

  00056	8d 95 f8 fd ff
	ff		 lea	 edx, DWORD PTR _sz$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 1151 : 
; 1152 :     // Let them construct multiple piece trace outs w/o
; 1153 :     // prefixing each one
; 1154 :     //
; 1155 :     fNeedPrefix = FALSE;

  00062	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _fNeedPrefix, 0

; 1156 :     for (;*pstrFormat && !fNeedPrefix; ++pstrFormat)

  0006c	eb 09		 jmp	 SHORT $L70342
$L70343:
  0006e	8b 45 0c	 mov	 eax, DWORD PTR _pstrFormat$[ebp]
  00071	83 c0 01	 add	 eax, 1
  00074	89 45 0c	 mov	 DWORD PTR _pstrFormat$[ebp], eax
$L70342:
  00077	8b 4d 0c	 mov	 ecx, DWORD PTR _pstrFormat$[ebp]
  0007a	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0007d	85 d2		 test	 edx, edx
  0007f	74 20		 je	 SHORT $L70344
  00081	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _fNeedPrefix, 0
  00088	75 17		 jne	 SHORT $L70344

; 1157 :     {
; 1158 :         if (*pstrFormat == '\n')

  0008a	8b 45 0c	 mov	 eax, DWORD PTR _pstrFormat$[ebp]
  0008d	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00090	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00093	75 0a		 jne	 SHORT $L70345

; 1159 :         {
; 1160 :             fNeedPrefix = TRUE;

  00095	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _fNeedPrefix, 1
$L70345:

; 1161 :         }
; 1162 :     }

  0009f	eb cd		 jmp	 SHORT $L70343
$L70344:

; 1163 : #ifndef DXAPI
; 1164 : 	if ((iDebugLevel >= 0) && (iDebugLevel <= giRIPLevel)) 

  000a1	83 7d 08 00	 cmp	 DWORD PTR _iDebugLevel$[ebp], 0
  000a5	7c 10		 jl	 SHORT $L70332
  000a7	8b 55 08	 mov	 edx, DWORD PTR _iDebugLevel$[ebp]
  000aa	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _giRIPLevel
  000b0	7f 05		 jg	 SHORT $L70332

; 1165 : 	{
; 1166 : 		DebugBreak();

  000b2	e8 00 00 00 00	 call	 _DebugBreak@0
$L70332:

; 1167 : 	}
; 1168 : #endif
; 1169 : }

  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
?DebugTrace@@YAXHPADZZ ENDP				; DebugTrace
_TEXT	ENDS
PUBLIC	??_C@_0BF@KGNAIPKA@ASSERT?3?5?$CC?$CFs?$CC?5?$CFs?$EA?$CFlu?6?$AA@ ; `string'
;	COMDAT ??_C@_0BF@KGNAIPKA@ASSERT?3?5?$CC?$CFs?$CC?5?$CFs?$EA?$CFlu?6?$AA@
CONST	SEGMENT
??_C@_0BF@KGNAIPKA@ASSERT?3?5?$CC?$CFs?$CC?5?$CFs?$EA?$CFlu?6?$AA@ DB 'AS'
	DB	'SERT: "%s" %s@%lu', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?DebugAssert@@YGXPAD0K@Z
_TEXT	SEGMENT
_szExp$ = 8
_szFile$ = 12
_ulLine$ = 16
?DebugAssert@@YGXPAD0K@Z PROC NEAR			; DebugAssert, COMDAT

; 1175 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1176 :     DebugTrace(-1, "ASSERT: \"%s\" %s@%lu\n", szExp, szFile, ulLine);

  00003	8b 45 10	 mov	 eax, DWORD PTR _ulLine$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _szFile$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _szExp$[ebp]
  0000e	52		 push	 edx
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@KGNAIPKA@ASSERT?3?5?$CC?$CFs?$CC?5?$CFs?$EA?$CFlu?6?$AA@
  00014	6a ff		 push	 -1
  00016	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0001b	83 c4 14	 add	 esp, 20			; 00000014H

; 1177 :     if (gfAssertBreak)

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _gfAssertBreak, 0
  00025	74 05		 je	 SHORT $L70351

; 1178 :     {
; 1179 :         DebugBreak();

  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L70351:

; 1180 :     }
; 1181 : }

  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
?DebugAssert@@YGXPAD0K@Z ENDP				; DebugAssert
_TEXT	ENDS
PUBLIC	?DirectMusicSetDebugLevel@@YGXHH@Z		; DirectMusicSetDebugLevel
; Function compile flags: /Odt
;	COMDAT ?DirectMusicSetDebugLevel@@YGXHH@Z
_TEXT	SEGMENT
_iDebugLevel$ = 8
_iRIPLevel$ = 12
?DirectMusicSetDebugLevel@@YGXHH@Z PROC NEAR		; DirectMusicSetDebugLevel, COMDAT

; 1184 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1185 :     giDebugLevel = iDebugLevel;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iDebugLevel$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR _giDebugLevel, eax

; 1186 :     giRIPLevel = iRIPLevel;

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _iRIPLevel$[ebp]
  0000e	89 0d 00 00 00
	00		 mov	 DWORD PTR _giRIPLevel, ecx

; 1187 : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?DirectMusicSetDebugLevel@@YGXHH@Z ENDP			; DirectMusicSetDebugLevel
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0CMemTrackList@@QAE@XZ			; CMemTrackList::CMemTrackList
EXTRN	_atexit:NEAR
CRT$XCU	SEGMENT
_$S3	DD	FLAT:_$E1
; Function compile flags: /Odt
CRT$XCU	ENDS
;	COMDAT _$E1
text$yc	SEGMENT
_$E1	PROC NEAR					; COMDAT

; 1189 : CMemTrackList g_MemTrackList[DMTRACK_MAX];

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET FLAT:??0CMemTrackList@@QAE@XZ ; CMemTrackList::CMemTrackList
  00008	6a 21		 push	 33			; 00000021H
  0000a	6a 20		 push	 32			; 00000020H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:?g_MemTrackList@@3PAVCMemTrackList@@A ; g_MemTrackList
  00011	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z
  00016	68 00 00 00 00	 push	 OFFSET FLAT:_$E2
  0001b	e8 00 00 00 00	 call	 _atexit
  00020	83 c4 04	 add	 esp, 4
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_$E1	ENDP
text$yc	ENDS
PUBLIC	??_I@YGXPAXIHP6EX0@Z@Z				; `vector destructor iterator'
PUBLIC	??1CMemTrackList@@QAE@XZ			; CMemTrackList::~CMemTrackList
; Function compile flags: /Odt
;	COMDAT _$E2
text$yd	SEGMENT
_$E2	PROC NEAR					; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET FLAT:??1CMemTrackList@@QAE@XZ ; CMemTrackList::~CMemTrackList
  00008	6a 21		 push	 33			; 00000021H
  0000a	6a 20		 push	 32			; 00000020H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:?g_MemTrackList@@3PAVCMemTrackList@@A ; g_MemTrackList
  00011	e8 00 00 00 00	 call	 ??_I@YGXPAXIHP6EX0@Z@Z
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_$E2	ENDP
; Function compile flags: /Odt
text$yd	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8
___s$ = 12
___n$ = 16
___f$ = 20
??_H@YGXPAXIHP6EPAX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L70381:
  00003	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00006	83 e8 01	 sub	 eax, 1
  00009	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  0000c	83 7d 10 00	 cmp	 DWORD PTR ___n$[ebp], 0
  00010	7c 11		 jl	 SHORT $L70379
  00012	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00015	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001b	03 4d 0c	 add	 ecx, DWORD PTR ___s$[ebp]
  0001e	89 4d 08	 mov	 DWORD PTR ___t$[ebp], ecx
  00021	eb e0		 jmp	 SHORT $L70381
$L70379:
  00023	5d		 pop	 ebp
  00024	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_I@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8
___s$ = 12
___n$ = 16
___f$ = 20
??_I@YGXPAXIHP6EX0@Z@Z PROC NEAR			; `vector destructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR ___s$[ebp]
  00006	0f af 45 10	 imul	 eax, DWORD PTR ___n$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0000d	03 c8		 add	 ecx, eax
  0000f	89 4d 08	 mov	 DWORD PTR ___t$[ebp], ecx
$L70393:
  00012	8b 55 10	 mov	 edx, DWORD PTR ___n$[ebp]
  00015	83 ea 01	 sub	 edx, 1
  00018	89 55 10	 mov	 DWORD PTR ___n$[ebp], edx
  0001b	83 7d 10 00	 cmp	 DWORD PTR ___n$[ebp], 0
  0001f	7c 11		 jl	 SHORT $L70390
  00021	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00024	2b 45 0c	 sub	 eax, DWORD PTR ___s$[ebp]
  00027	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0002d	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00030	eb e0		 jmp	 SHORT $L70393
$L70390:
  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
??_I@YGXPAXIHP6EX0@Z@Z ENDP				; `vector destructor iterator'
_TEXT	ENDS
PUBLIC	??0AList@@QAE@XZ				; AList::AList
; Function compile flags: /Odt
;	COMDAT ??0CMemTrackList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CMemTrackList@@QAE@XZ PROC NEAR			; CMemTrackList::CMemTrackList, COMDAT
; _this$ = ecx

; 1192 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AList@@QAE@XZ	; AList::AList

; 1193 :     InitializeCriticalSection(&m_CriticalSection);

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 c0 04	 add	 eax, 4
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 1194 : }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??0CMemTrackList@@QAE@XZ ENDP				; CMemTrackList::CMemTrackList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1CMemTrackList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CMemTrackList@@QAE@XZ PROC NEAR			; CMemTrackList::~CMemTrackList, COMDAT
; _this$ = ecx

; 1197 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1198 :     DeleteCriticalSection(&m_CriticalSection);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?DeleteCriticalSection@@YGXPAX@Z ; DeleteCriticalSection

; 1199 : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??1CMemTrackList@@QAE@XZ ENDP				; CMemTrackList::~CMemTrackList
_TEXT	ENDS
PUBLIC	?AddHead@CMemTrackList@@QAEXPAVCMemTrack@@@Z	; CMemTrackList::AddHead
PUBLIC	?AddHead@AList@@QAEXPAVAListItem@@@Z		; AList::AddHead
; Function compile flags: /Odt
;	COMDAT ?AddHead@CMemTrackList@@QAEXPAVCMemTrack@@@Z
_TEXT	SEGMENT
_this$ = -4
_pMemTrack$ = 8
?AddHead@CMemTrackList@@QAEXPAVCMemTrack@@@Z PROC NEAR	; CMemTrackList::AddHead, COMDAT
; _this$ = ecx

; 1202 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1203 :     EnterCriticalSection(&m_CriticalSection);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4
  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 1204 :     AList::AddHead((AListItem*)pMemTrack);

  00014	8b 4d 08	 mov	 ecx, DWORD PTR _pMemTrack$[ebp]
  00017	51		 push	 ecx
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead

; 1205 :     LeaveCriticalSection(&m_CriticalSection);

  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	83 c2 04	 add	 edx, 4
  00026	52		 push	 edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 1206 : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?AddHead@CMemTrackList@@QAEXPAVCMemTrack@@@Z ENDP	; CMemTrackList::AddHead
_TEXT	ENDS
PUBLIC	?GetHead@CMemTrackList@@QAEPAVCMemTrack@@XZ	; CMemTrackList::GetHead
PUBLIC	?GetHead@AList@@QBEPAVAListItem@@XZ		; AList::GetHead
; Function compile flags: /Odt
;	COMDAT ?GetHead@CMemTrackList@@QAEPAVCMemTrack@@XZ
_TEXT	SEGMENT
_this$ = -8
_pHead$ = -4
?GetHead@CMemTrackList@@QAEPAVCMemTrack@@XZ PROC NEAR	; CMemTrackList::GetHead, COMDAT
; _this$ = ecx

; 1209 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1210 :     CMemTrack *pHead;
; 1211 :     EnterCriticalSection(&m_CriticalSection);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 1212 :     pHead = (CMemTrack*)AList::GetHead();

  00016	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?GetHead@AList@@QBEPAVAListItem@@XZ ; AList::GetHead
  0001e	89 45 fc	 mov	 DWORD PTR _pHead$[ebp], eax

; 1213 :     LeaveCriticalSection(&m_CriticalSection);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 04	 add	 ecx, 4
  00027	51		 push	 ecx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 1214 :     return pHead;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _pHead$[ebp]

; 1215 : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?GetHead@CMemTrackList@@QAEPAVCMemTrack@@XZ ENDP	; CMemTrackList::GetHead
_TEXT	ENDS
PUBLIC	?RemoveHead@CMemTrackList@@QAEPAVCMemTrack@@XZ	; CMemTrackList::RemoveHead
PUBLIC	?RemoveHead@AList@@QAEPAVAListItem@@XZ		; AList::RemoveHead
; Function compile flags: /Odt
;	COMDAT ?RemoveHead@CMemTrackList@@QAEPAVCMemTrack@@XZ
_TEXT	SEGMENT
_this$ = -8
_pHead$ = -4
?RemoveHead@CMemTrackList@@QAEPAVCMemTrack@@XZ PROC NEAR ; CMemTrackList::RemoveHead, COMDAT
; _this$ = ecx

; 1218 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1219 :     CMemTrack *pHead;
; 1220 :     EnterCriticalSection(&m_CriticalSection);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 1221 :     pHead = (CMemTrack *) AList::RemoveHead();

  00016	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?RemoveHead@AList@@QAEPAVAListItem@@XZ ; AList::RemoveHead
  0001e	89 45 fc	 mov	 DWORD PTR _pHead$[ebp], eax

; 1222 :     LeaveCriticalSection(&m_CriticalSection);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 04	 add	 ecx, 4
  00027	51		 push	 ecx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 1223 :     return pHead;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _pHead$[ebp]

; 1224 : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?RemoveHead@CMemTrackList@@QAEPAVCMemTrack@@XZ ENDP	; CMemTrackList::RemoveHead
_TEXT	ENDS
PUBLIC	?Remove@CMemTrackList@@QAEXPAVCMemTrack@@@Z	; CMemTrackList::Remove
PUBLIC	?Remove@AList@@QAEXPAVAListItem@@@Z		; AList::Remove
; Function compile flags: /Odt
;	COMDAT ?Remove@CMemTrackList@@QAEXPAVCMemTrack@@@Z
_TEXT	SEGMENT
_this$ = -4
_pMemTrack$ = 8
?Remove@CMemTrackList@@QAEXPAVCMemTrack@@@Z PROC NEAR	; CMemTrackList::Remove, COMDAT
; _this$ = ecx

; 1227 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1228 :     EnterCriticalSection(&m_CriticalSection);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4
  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 1229 :     AList::Remove((AListItem*)pMemTrack);

  00014	8b 4d 08	 mov	 ecx, DWORD PTR _pMemTrack$[ebp]
  00017	51		 push	 ecx
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?Remove@AList@@QAEXPAVAListItem@@@Z ; AList::Remove

; 1230 :     LeaveCriticalSection(&m_CriticalSection);

  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	83 c2 04	 add	 edx, 4
  00026	52		 push	 edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 1231 : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?Remove@CMemTrackList@@QAEXPAVCMemTrack@@@Z ENDP	; CMemTrackList::Remove
_TEXT	ENDS
PUBLIC	?GetCount@CMemTrackList@@QAEJXZ			; CMemTrackList::GetCount
PUBLIC	?GetCount@AList@@QBEJXZ				; AList::GetCount
; Function compile flags: /Odt
;	COMDAT ?GetCount@CMemTrackList@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8
_lCount$ = -4
?GetCount@CMemTrackList@@QAEJXZ PROC NEAR		; CMemTrackList::GetCount, COMDAT
; _this$ = ecx

; 1234 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1235 :     LONG lCount;
; 1236 :     EnterCriticalSection(&m_CriticalSection);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 1237 :     lCount = AList::GetCount();

  00016	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?GetCount@AList@@QBEJXZ	; AList::GetCount
  0001e	89 45 fc	 mov	 DWORD PTR _lCount$[ebp], eax

; 1238 :     LeaveCriticalSection(&m_CriticalSection);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 04	 add	 ecx, 4
  00027	51		 push	 ecx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 1239 :     return lCount;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _lCount$[ebp]

; 1240 : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?GetCount@CMemTrackList@@QAEJXZ ENDP			; CMemTrackList::GetCount
_TEXT	ENDS
PUBLIC	??0CMemTrack@@QAE@K@Z				; CMemTrack::CMemTrack
PUBLIC	??0AListItem@@QAE@XZ				; AListItem::AListItem
_BSS	SEGMENT
_gDMusicClassInstanceCount DD 021H DUP (?)
; Function compile flags: /Odt
_BSS	ENDS
;	COMDAT ??0CMemTrack@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4
_dwClass$ = 8
??0CMemTrack@@QAE@K@Z PROC NEAR				; CMemTrack::CMemTrack, COMDAT
; _this$ = ecx

; 1247 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AListItem@@QAE@XZ	; AListItem::AListItem

; 1248 :     m_dwClass = dwClass;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _dwClass$[ebp]
  00015	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1249 :     if (dwClass < DMTRACK_MAX)

  00018	83 7d 08 21	 cmp	 DWORD PTR _dwClass$[ebp], 33 ; 00000021H
  0001c	73 28		 jae	 SHORT $L70430

; 1250 :     {
; 1251 :         g_MemTrackList[dwClass].AddHead(this);

  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	52		 push	 edx
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _dwClass$[ebp]
  00025	c1 e1 05	 shl	 ecx, 5
  00028	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:?g_MemTrackList@@3PAVCMemTrackList@@A ; g_MemTrackList
  0002e	e8 00 00 00 00	 call	 ?AddHead@CMemTrackList@@QAEXPAVCMemTrack@@@Z ; CMemTrackList::AddHead

; 1252 : #ifdef IMPLEMENT_PERFORMANCE_COUNTERS
; 1253 :         InterlockedIncrement(&gDMusicClassInstanceCount[m_dwClass]);

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00039	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR _gDMusicClassInstanceCount[ecx*4]
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 __InterlockedIncrement@4
$L70430:

; 1254 : #endif
; 1255 : 
; 1256 :     }
; 1257 : }

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
??0CMemTrack@@QAE@K@Z ENDP				; CMemTrack::CMemTrack
_TEXT	ENDS
PUBLIC	??1CMemTrack@@QAE@XZ				; CMemTrack::~CMemTrack
; Function compile flags: /Odt
;	COMDAT ??1CMemTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CMemTrack@@QAE@XZ PROC NEAR				; CMemTrack::~CMemTrack, COMDAT
; _this$ = ecx

; 1260 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1261 :     if (m_dwClass < DMTRACK_MAX)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 21	 cmp	 DWORD PTR [eax+4], 33	; 00000021H
  0000e	73 2b		 jae	 SHORT $L70434

; 1262 :     {
; 1263 : #ifdef IMPLEMENT_PERFORMANCE_COUNTERS
; 1264 :         InterlockedDecrement(&gDMusicClassInstanceCount[m_dwClass]);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00016	8d 04 95 00 00
	00 00		 lea	 eax, DWORD PTR _gDMusicClassInstanceCount[edx*4]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 __InterlockedDecrement@4

; 1265 : #endif
; 1266 :         g_MemTrackList[m_dwClass].Remove(this);

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0002d	c1 e1 05	 shl	 ecx, 5
  00030	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:?g_MemTrackList@@3PAVCMemTrackList@@A ; g_MemTrackList
  00036	e8 00 00 00 00	 call	 ?Remove@CMemTrackList@@QAEXPAVCMemTrack@@@Z ; CMemTrackList::Remove
$L70434:

; 1267 :     }
; 1268 : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1CMemTrack@@QAE@XZ ENDP				; CMemTrack::~CMemTrack
_TEXT	ENDS
PUBLIC	?DirectMusicMemCheck@@YGJKPAPAD@Z		; DirectMusicMemCheck
; Function compile flags: /Odt
;	COMDAT ?DirectMusicMemCheck@@YGJKPAPAD@Z
_TEXT	SEGMENT
_dwMemType$ = 8
_ppName$ = 12
?DirectMusicMemCheck@@YGJKPAPAD@Z PROC NEAR		; DirectMusicMemCheck, COMDAT

; 1335 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1336 :     if (dwMemType >= DMTRACK_MAX)

  00003	83 7d 08 21	 cmp	 DWORD PTR _dwMemType$[ebp], 33 ; 00000021H
  00007	72 05		 jb	 SHORT $L70489

; 1337 :     {
; 1338 :         return -1;

  00009	83 c8 ff	 or	 eax, -1
  0000c	eb 26		 jmp	 SHORT $L70488
$L70489:

; 1339 :     }
; 1340 :     if (ppName)

  0000e	83 7d 0c 00	 cmp	 DWORD PTR _ppName$[ebp], 0
  00012	74 0f		 je	 SHORT $L70490

; 1341 :     {
; 1342 :         *ppName = gpNames[dwMemType];

  00014	8b 45 0c	 mov	 eax, DWORD PTR _ppName$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _dwMemType$[ebp]
  0001a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _gpNames[ecx*4]
  00021	89 10		 mov	 DWORD PTR [eax], edx
$L70490:

; 1343 :     }
; 1344 :     return g_MemTrackList[dwMemType].GetCount();

  00023	8b 4d 08	 mov	 ecx, DWORD PTR _dwMemType$[ebp]
  00026	c1 e1 05	 shl	 ecx, 5
  00029	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:?g_MemTrackList@@3PAVCMemTrackList@@A ; g_MemTrackList
  0002f	e8 00 00 00 00	 call	 ?GetCount@CMemTrackList@@QAEJXZ ; CMemTrackList::GetCount
$L70488:

; 1345 : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?DirectMusicMemCheck@@YGJKPAPAD@Z ENDP			; DirectMusicMemCheck
_TEXT	ENDS
PUBLIC	?DirectMusicMemDump@@YGXXZ			; DirectMusicMemDump
PUBLIC	?DirectMusicDumpMemStats@@YGXXZ			; DirectMusicDumpMemStats
PUBLIC	??_C@_0BE@BDDCPJE@Objects?5Allocated?3?6?$AA@	; `string'
PUBLIC	??_C@_06HGDECJBG@?$CFld?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_02KMOGBIGO@s?6?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	_DbgPrint:NEAR
;	COMDAT ??_C@_0BE@BDDCPJE@Objects?5Allocated?3?6?$AA@
CONST	SEGMENT
??_C@_0BE@BDDCPJE@Objects?5Allocated?3?6?$AA@ DB 'Objects Allocated:', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06HGDECJBG@?$CFld?5?$CFs?$AA@
CONST	SEGMENT
??_C@_06HGDECJBG@?$CFld?5?$CFs?$AA@ DB '%ld %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMOGBIGO@s?6?$AA@
CONST	SEGMENT
??_C@_02KMOGBIGO@s?6?$AA@ DB 's', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?DirectMusicMemDump@@YGXXZ
_TEXT	SEGMENT
_dwI$ = -4
?DirectMusicMemDump@@YGXXZ PROC NEAR			; DirectMusicMemDump, COMDAT

; 1350 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1351 :     DWORD dwI;
; 1352 :     DbgPrint("Objects Allocated:\n");

  00004	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@BDDCPJE@Objects?5Allocated?3?6?$AA@
  00009	e8 00 00 00 00	 call	 _DbgPrint
  0000e	83 c4 04	 add	 esp, 4

; 1353 :     for (dwI = 0; dwI < DMTRACK_MAX;dwI++)

  00011	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwI$[ebp], 0
  00018	eb 09		 jmp	 SHORT $L70496
$L70497:
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _dwI$[ebp]
  0001d	83 c0 01	 add	 eax, 1
  00020	89 45 fc	 mov	 DWORD PTR _dwI$[ebp], eax
$L70496:
  00023	83 7d fc 21	 cmp	 DWORD PTR _dwI$[ebp], 33 ; 00000021H
  00027	73 76		 jae	 SHORT $L70498

; 1354 :     {
; 1355 :         if (g_MemTrackList[dwI].GetCount())

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _dwI$[ebp]
  0002c	c1 e1 05	 shl	 ecx, 5
  0002f	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:?g_MemTrackList@@3PAVCMemTrackList@@A ; g_MemTrackList
  00035	e8 00 00 00 00	 call	 ?GetCount@CMemTrackList@@QAEJXZ ; CMemTrackList::GetCount
  0003a	85 c0		 test	 eax, eax
  0003c	74 5c		 je	 SHORT $L70499

; 1356 :         {
; 1357 :             DbgPrint("%ld %s",g_MemTrackList[dwI].GetCount(),gpNames[dwI]);

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _dwI$[ebp]
  00041	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _gpNames[ecx*4]
  00048	52		 push	 edx
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _dwI$[ebp]
  0004c	c1 e1 05	 shl	 ecx, 5
  0004f	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:?g_MemTrackList@@3PAVCMemTrackList@@A ; g_MemTrackList
  00055	e8 00 00 00 00	 call	 ?GetCount@CMemTrackList@@QAEJXZ ; CMemTrackList::GetCount
  0005a	50		 push	 eax
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06HGDECJBG@?$CFld?5?$CFs?$AA@
  00060	e8 00 00 00 00	 call	 _DbgPrint
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1358 :             if (g_MemTrackList[dwI].GetCount() > 1)

  00068	8b 4d fc	 mov	 ecx, DWORD PTR _dwI$[ebp]
  0006b	c1 e1 05	 shl	 ecx, 5
  0006e	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:?g_MemTrackList@@3PAVCMemTrackList@@A ; g_MemTrackList
  00074	e8 00 00 00 00	 call	 ?GetCount@CMemTrackList@@QAEJXZ ; CMemTrackList::GetCount
  00079	83 f8 01	 cmp	 eax, 1
  0007c	7e 0f		 jle	 SHORT $L70501

; 1359 :             {
; 1360 :                 DbgPrint("s\n");

  0007e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02KMOGBIGO@s?6?$AA@
  00083	e8 00 00 00 00	 call	 _DbgPrint
  00088	83 c4 04	 add	 esp, 4

; 1361 :             }
; 1362 :             else

  0008b	eb 0d		 jmp	 SHORT $L70499
$L70501:

; 1363 :             {
; 1364 :                 DbgPrint("\n");

  0008d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00092	e8 00 00 00 00	 call	 _DbgPrint
  00097	83 c4 04	 add	 esp, 4
$L70499:

; 1365 :             }
; 1366 :         }
; 1367 :     }

  0009a	e9 7b ff ff ff	 jmp	 $L70497
$L70498:

; 1368 : 
; 1369 :     DirectMusicDumpMemStats();

  0009f	e8 00 00 00 00	 call	 ?DirectMusicDumpMemStats@@YGXXZ ; DirectMusicDumpMemStats

; 1370 : }

  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
?DirectMusicMemDump@@YGXXZ ENDP				; DirectMusicMemDump
_TEXT	ENDS
PUBLIC	??_C@_0CN@EPKFPGHB@DirectMusicDumpMemStats?3?5Using?5C@ ; `string'
;	COMDAT ??_C@_0CN@EPKFPGHB@DirectMusicDumpMemStats?3?5Using?5C@
CONST	SEGMENT
??_C@_0CN@EPKFPGHB@DirectMusicDumpMemStats?3?5Using?5C@ DB 'DirectMusicDu'
	DB	'mpMemStats: Using C allocator.', 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?DirectMusicDumpMemStats@@YGXXZ
_TEXT	SEGMENT
?DirectMusicDumpMemStats@@YGXXZ PROC NEAR		; DirectMusicDumpMemStats, COMDAT

; 2287 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2288 :     Trace(1,"DirectMusicDumpMemStats: Using C allocator.\n");

  00003	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@EPKFPGHB@DirectMusicDumpMemStats?3?5Using?5C@
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0000f	83 c4 08	 add	 esp, 8

; 2289 : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?DirectMusicDumpMemStats@@YGXXZ ENDP			; DirectMusicDumpMemStats
_TEXT	ENDS
PUBLIC	?RegisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ ; PerformanceCounterWrapper::RegisterPerformanceCounters
PUBLIC	_DMusicRegisterPerformanceCounters@0
EXTRN	_DMRegisterPMsgPerformanceCounters@0:NEAR
; Function compile flags: /Odt
;	COMDAT _DMusicRegisterPerformanceCounters@0
_TEXT	SEGMENT
_DMusicRegisterPerformanceCounters@0 PROC NEAR		; COMDAT

; 2292 : extern "C" void DMusicRegisterPerformanceCounters(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2293 :     if(gpDMHeap){

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gpDMHeap@@3PAUIDirectMusicHeap@@A, 0 ; gpDMHeap
  0000a	74 0b		 je	 SHORT $L70524

; 2294 :         // We know this is really a PerformanceCounterWrapper
; 2295 :         ((PerformanceCounterWrapper*)gpDMHeap)->RegisterPerformanceCounters();

  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gpDMHeap@@3PAUIDirectMusicHeap@@A ; gpDMHeap
  00012	e8 00 00 00 00	 call	 ?RegisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ ; PerformanceCounterWrapper::RegisterPerformanceCounters
$L70524:

; 2296 :     }
; 2297 :     if(gpDMPhysicalHeap){

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gpDMPhysicalHeap@@3PAUIDirectMusicHeap@@A, 0 ; gpDMPhysicalHeap
  0001e	74 0b		 je	 SHORT $L70526

; 2298 :         // We know this is really a PerformanceCounterWrapper
; 2299 :         ((PerformanceCounterWrapper*)gpDMPhysicalHeap)->RegisterPerformanceCounters();

  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gpDMPhysicalHeap@@3PAUIDirectMusicHeap@@A ; gpDMPhysicalHeap
  00026	e8 00 00 00 00	 call	 ?RegisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ ; PerformanceCounterWrapper::RegisterPerformanceCounters
$L70526:

; 2300 :     }
; 2301 : 
; 2302 : #ifdef DBG
; 2303 :     RegisterDMusicObjectCounters();

  0002b	e8 00 00 00 00	 call	 ?RegisterDMusicObjectCounters@@YGXXZ ; RegisterDMusicObjectCounters

; 2304 : #endif
; 2305 :     DMRegisterPMsgPerformanceCounters();

  00030	e8 00 00 00 00	 call	 _DMRegisterPMsgPerformanceCounters@0

; 2306 : }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_DMusicRegisterPerformanceCounters@0 ENDP
_TEXT	ENDS
PUBLIC	?Name@PerformanceCounterWrapper@@QAEPADPBD@Z	; PerformanceCounterWrapper::Name
PUBLIC	??_C@_05FBJAGGIG@bytes?$AA@			; `string'
PUBLIC	??_C@_0L@EDMCMILL@bytes?5peak?$AA@		; `string'
PUBLIC	??_C@_0M@HHDICGCL@allocations?$AA@		; `string'
PUBLIC	??_C@_0BB@EENEEEFN@allocations?5peak?$AA@	; `string'
PUBLIC	??_C@_0BF@GHJKDOLM@allocation?5byte?5rate?$AA@	; `string'
PUBLIC	??_C@_0BA@FDONEMPH@allocation?5rate?$AA@	; `string'
EXTRN	_DMusicRegisterPerformanceCounter@12:NEAR
;	COMDAT ??_C@_05FBJAGGIG@bytes?$AA@
CONST	SEGMENT
??_C@_05FBJAGGIG@bytes?$AA@ DB 'bytes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EDMCMILL@bytes?5peak?$AA@
CONST	SEGMENT
??_C@_0L@EDMCMILL@bytes?5peak?$AA@ DB 'bytes peak', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HHDICGCL@allocations?$AA@
CONST	SEGMENT
??_C@_0M@HHDICGCL@allocations?$AA@ DB 'allocations', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EENEEEFN@allocations?5peak?$AA@
CONST	SEGMENT
??_C@_0BB@EENEEEFN@allocations?5peak?$AA@ DB 'allocations peak', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GHJKDOLM@allocation?5byte?5rate?$AA@
CONST	SEGMENT
??_C@_0BF@GHJKDOLM@allocation?5byte?5rate?$AA@ DB 'allocation byte rate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FDONEMPH@allocation?5rate?$AA@
CONST	SEGMENT
??_C@_0BA@FDONEMPH@allocation?5rate?$AA@ DB 'allocation rate', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?RegisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?RegisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ PROC NEAR ; PerformanceCounterWrapper::RegisterPerformanceCounters, COMDAT
; _this$ = ecx

; 884  :     void RegisterPerformanceCounters(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 885  :         DMusicRegisterPerformanceCounter( Name("bytes"),
; 886  :                                       DMCOUNT_VALUE  | DMCOUNT_ASYNC32,
; 887  :                                       &m_dwHeapAllocation );

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 24	 add	 eax, 36			; 00000024H
  0000d	50		 push	 eax
  0000e	68 00 00 02 00	 push	 131072			; 00020000H
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05FBJAGGIG@bytes?$AA@
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z ; PerformanceCounterWrapper::Name
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _DMusicRegisterPerformanceCounter@12

; 888  :         DMusicRegisterPerformanceCounter( Name("bytes peak"),
; 889  :                                       DMCOUNT_VALUE  | DMCOUNT_ASYNC32,
; 890  :                                       &m_dwHeapAllocationPeak );

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	83 c1 28	 add	 ecx, 40			; 00000028H
  0002c	51		 push	 ecx
  0002d	68 00 00 02 00	 push	 131072			; 00020000H
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@EDMCMILL@bytes?5peak?$AA@
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z ; PerformanceCounterWrapper::Name
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _DMusicRegisterPerformanceCounter@12

; 891  :         DMusicRegisterPerformanceCounter( Name("allocations"),
; 892  :                                       DMCOUNT_VALUE  | DMCOUNT_ASYNC32,
; 893  :                                       &m_dwHeapAllocationBlocks );

  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	83 c2 2c	 add	 edx, 44			; 0000002cH
  0004b	52		 push	 edx
  0004c	68 00 00 02 00	 push	 131072			; 00020000H
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@HHDICGCL@allocations?$AA@
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z ; PerformanceCounterWrapper::Name
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _DMusicRegisterPerformanceCounter@12

; 894  :         DMusicRegisterPerformanceCounter( Name("allocations peak"),
; 895  :                                       DMCOUNT_VALUE  | DMCOUNT_ASYNC32,
; 896  :                                       &m_dwHeapAllocationBlocksPeak );

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	83 c0 30	 add	 eax, 48			; 00000030H
  0006a	50		 push	 eax
  0006b	68 00 00 02 00	 push	 131072			; 00020000H
  00070	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@EENEEEFN@allocations?5peak?$AA@
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z ; PerformanceCounterWrapper::Name
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _DMusicRegisterPerformanceCounter@12

; 897  :         DMusicRegisterPerformanceCounter( Name("allocation byte rate"),
; 898  :                                       DMCOUNT_EVENT  | DMCOUNT_ASYNC32,
; 899  :                                       &m_dwHeapAllocationRate );

  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	83 c1 34	 add	 ecx, 52			; 00000034H
  00089	51		 push	 ecx
  0008a	68 10 00 02 00	 push	 131088			; 00020010H
  0008f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@GHJKDOLM@allocation?5byte?5rate?$AA@
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	e8 00 00 00 00	 call	 ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z ; PerformanceCounterWrapper::Name
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _DMusicRegisterPerformanceCounter@12

; 900  :         DMusicRegisterPerformanceCounter( Name("allocation rate"),
; 901  :                                       DMCOUNT_EVENT  | DMCOUNT_ASYNC32,
; 902  :                                       &m_dwHeapAllocationBlocksRate );

  000a2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a5	83 c2 38	 add	 edx, 56			; 00000038H
  000a8	52		 push	 edx
  000a9	68 10 00 02 00	 push	 131088			; 00020010H
  000ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@FDONEMPH@allocation?5rate?$AA@
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	e8 00 00 00 00	 call	 ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z ; PerformanceCounterWrapper::Name
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 _DMusicRegisterPerformanceCounter@12

; 903  : 
; 904  :     }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
?RegisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ ENDP ; PerformanceCounterWrapper::RegisterPerformanceCounters
_TEXT	ENDS
PUBLIC	??_C@_08CDPBLBHA@physical?$AA@			; `string'
PUBLIC	??_C@_06IKLLLDHL@normal?$AA@			; `string'
PUBLIC	??_C@_0O@BCFIFOMH@DM?5heap?5?$CFs?5?$CFs?$AA@	; `string'
EXTRN	__snprintf:NEAR
;	COMDAT ??_C@_08CDPBLBHA@physical?$AA@
CONST	SEGMENT
??_C@_08CDPBLBHA@physical?$AA@ DB 'physical', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKLLLDHL@normal?$AA@
CONST	SEGMENT
??_C@_06IKLLLDHL@normal?$AA@ DB 'normal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BCFIFOMH@DM?5heap?5?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0O@BCFIFOMH@DM?5heap?5?$CFs?5?$CFs?$AA@ DB 'DM heap %s %s', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z
_TEXT	SEGMENT
tv69 = -8
_this$ = -4
_sBase$ = 8
?Name@PerformanceCounterWrapper@@QAEPADPBD@Z PROC NEAR	; PerformanceCounterWrapper::Name, COMDAT
; _this$ = ecx

; 915  :     char* Name(const char* sBase){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 916  :         _snprintf(m_sNameBuffer, sizeof(m_sNameBuffer), "DM heap %s %s", m_bPhysicalHeap ? "physical" : "normal" , sBase);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 48 3c	 movzx	 ecx, BYTE PTR [eax+60]
  00010	85 c9		 test	 ecx, ecx
  00012	74 09		 je	 SHORT $L71350
  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET FLAT:??_C@_08CDPBLBHA@physical?$AA@
  0001b	eb 07		 jmp	 SHORT $L71351
$L71350:
  0001d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET FLAT:??_C@_06IKLLLDHL@normal?$AA@
$L71351:
  00024	8b 55 08	 mov	 edx, DWORD PTR _sBase$[ebp]
  00027	52		 push	 edx
  00028	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@BCFIFOMH@DM?5heap?5?$CFs?5?$CFs?$AA@
  00031	6a 64		 push	 100			; 00000064H
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	83 c1 3d	 add	 ecx, 61			; 0000003dH
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 __snprintf
  0003f	83 c4 14	 add	 esp, 20			; 00000014H

; 917  :         return m_sNameBuffer;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 c0 3d	 add	 eax, 61			; 0000003dH

; 918  :     }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?Name@PerformanceCounterWrapper@@QAEPADPBD@Z ENDP	; PerformanceCounterWrapper::Name
_TEXT	ENDS
PUBLIC	??_C@_0BB@MLPBJPAN@DM?5allocated?5?$CFss?$AA@	; `string'
;	COMDAT ??_C@_0BB@MLPBJPAN@DM?5allocated?5?$CFss?$AA@
CONST	SEGMENT
??_C@_0BB@MLPBJPAN@DM?5allocated?5?$CFss?$AA@ DB 'DM allocated %ss', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?RegisterDMusicObjectCounters@@YGXXZ
_TEXT	SEGMENT
_buf$70476 = -208
_dwI$70472 = -4
?RegisterDMusicObjectCounters@@YGXXZ PROC NEAR		; RegisterDMusicObjectCounters, COMDAT

; 1309 : static void RegisterDMusicObjectCounters(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H

; 1310 :     for (DWORD dwI = 0; dwI < DMTRACK_MAX;dwI++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwI$70472[ebp], 0
  00010	eb 09		 jmp	 SHORT $L70473
$L70474:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _dwI$70472[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _dwI$70472[ebp], eax
$L70473:
  0001b	83 7d fc 21	 cmp	 DWORD PTR _dwI$70472[ebp], 33 ; 00000021H
  0001f	73 46		 jae	 SHORT $L70471

; 1311 :     {
; 1312 :         char buf[200];
; 1313 :         _snprintf(buf,sizeof(buf),"DM allocated %ss", gpNames[dwI]);

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _dwI$70472[ebp]
  00024	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _gpNames[ecx*4]
  0002b	52		 push	 edx
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@MLPBJPAN@DM?5allocated?5?$CFss?$AA@
  00031	68 c8 00 00 00	 push	 200			; 000000c8H
  00036	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _buf$70476[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 __snprintf
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 1314 :         buf[sizeof(buf)-1] = 0;

  00045	c6 45 f7 00	 mov	 BYTE PTR _buf$70476[ebp+199], 0

; 1315 :         DMusicRegisterPerformanceCounter( buf,
; 1316 :                                   DMCOUNT_VALUE  | DMCOUNT_ASYNC32,
; 1317 :                                   &gDMusicClassInstanceCount[dwI] );

  00049	8b 4d fc	 mov	 ecx, DWORD PTR _dwI$70472[ebp]
  0004c	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR _gDMusicClassInstanceCount[ecx*4]
  00053	52		 push	 edx
  00054	68 00 00 02 00	 push	 131072			; 00020000H
  00059	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _buf$70476[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _DMusicRegisterPerformanceCounter@12

; 1318 :     }

  00065	eb ab		 jmp	 SHORT $L70474
$L70471:

; 1319 : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?RegisterDMusicObjectCounters@@YGXXZ ENDP		; RegisterDMusicObjectCounters
_TEXT	ENDS
PUBLIC	?UnregisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ ; PerformanceCounterWrapper::UnregisterPerformanceCounters
PUBLIC	_DMusicUnregisterPerformanceCounters@0
EXTRN	_DMUnregisterPMsgPerformanceCounters@0:NEAR
; Function compile flags: /Odt
;	COMDAT _DMusicUnregisterPerformanceCounters@0
_TEXT	SEGMENT
_DMusicUnregisterPerformanceCounters@0 PROC NEAR	; COMDAT

; 2308 : extern "C" void DMusicUnregisterPerformanceCounters(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2309 :     if(gpDMHeap){

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gpDMHeap@@3PAUIDirectMusicHeap@@A, 0 ; gpDMHeap
  0000a	74 0b		 je	 SHORT $L70530

; 2310 :         // We know this is really a PerformanceCounterWrapper
; 2311 :         ((PerformanceCounterWrapper*)gpDMHeap)->UnregisterPerformanceCounters();

  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gpDMHeap@@3PAUIDirectMusicHeap@@A ; gpDMHeap
  00012	e8 00 00 00 00	 call	 ?UnregisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ ; PerformanceCounterWrapper::UnregisterPerformanceCounters
$L70530:

; 2312 :     }
; 2313 :     if(gpDMPhysicalHeap){

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gpDMPhysicalHeap@@3PAUIDirectMusicHeap@@A, 0 ; gpDMPhysicalHeap
  0001e	74 0b		 je	 SHORT $L70532

; 2314 :         // We know this is really a PerformanceCounterWrapper
; 2315 :         ((PerformanceCounterWrapper*)gpDMPhysicalHeap)->UnregisterPerformanceCounters();

  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gpDMPhysicalHeap@@3PAUIDirectMusicHeap@@A ; gpDMPhysicalHeap
  00026	e8 00 00 00 00	 call	 ?UnregisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ ; PerformanceCounterWrapper::UnregisterPerformanceCounters
$L70532:

; 2316 :     }
; 2317 : #ifdef DBG
; 2318 :     UnregisterDMusicObjectCounters();

  0002b	e8 00 00 00 00	 call	 ?UnregisterDMusicObjectCounters@@YGXXZ ; UnregisterDMusicObjectCounters

; 2319 : #endif
; 2320 :     DMUnregisterPMsgPerformanceCounters();

  00030	e8 00 00 00 00	 call	 _DMUnregisterPMsgPerformanceCounters@0

; 2321 : }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_DMusicUnregisterPerformanceCounters@0 ENDP
_TEXT	ENDS
EXTRN	_DMusicUnregisterPerformanceCounter@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?UnregisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?UnregisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ PROC NEAR ; PerformanceCounterWrapper::UnregisterPerformanceCounters, COMDAT
; _this$ = ecx

; 906  :     void UnregisterPerformanceCounters(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 907  :         DMusicUnregisterPerformanceCounter(Name("bytes"));

  00007	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05FBJAGGIG@bytes?$AA@
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z ; PerformanceCounterWrapper::Name
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _DMusicUnregisterPerformanceCounter@4

; 908  :         DMusicUnregisterPerformanceCounter(Name("bytes peak"));

  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@EDMCMILL@bytes?5peak?$AA@
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z ; PerformanceCounterWrapper::Name
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _DMusicUnregisterPerformanceCounter@4

; 909  :         DMusicUnregisterPerformanceCounter(Name("allocations"));

  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@HHDICGCL@allocations?$AA@
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z ; PerformanceCounterWrapper::Name
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _DMusicUnregisterPerformanceCounter@4

; 910  :         DMusicUnregisterPerformanceCounter(Name("allocations peak"));

  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@EENEEEFN@allocations?5peak?$AA@
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z ; PerformanceCounterWrapper::Name
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _DMusicUnregisterPerformanceCounter@4

; 911  :         DMusicUnregisterPerformanceCounter(Name("allocation byte rate"));

  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@GHJKDOLM@allocation?5byte?5rate?$AA@
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z ; PerformanceCounterWrapper::Name
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _DMusicUnregisterPerformanceCounter@4

; 912  :         DMusicUnregisterPerformanceCounter(Name("allocation rate"));

  00066	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@FDONEMPH@allocation?5rate?$AA@
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?Name@PerformanceCounterWrapper@@QAEPADPBD@Z ; PerformanceCounterWrapper::Name
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _DMusicUnregisterPerformanceCounter@4

; 913  :     }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
?UnregisterPerformanceCounters@PerformanceCounterWrapper@@QAEXXZ ENDP ; PerformanceCounterWrapper::UnregisterPerformanceCounters
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?UnregisterDMusicObjectCounters@@YGXXZ
_TEXT	SEGMENT
_buf$70484 = -208
_dwI$70480 = -4
?UnregisterDMusicObjectCounters@@YGXXZ PROC NEAR	; UnregisterDMusicObjectCounters, COMDAT

; 1321 : static void UnregisterDMusicObjectCounters(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H

; 1322 :     for (DWORD dwI = 0; dwI < DMTRACK_MAX;dwI++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwI$70480[ebp], 0
  00010	eb 09		 jmp	 SHORT $L70481
$L70482:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _dwI$70480[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _dwI$70480[ebp], eax
$L70481:
  0001b	83 7d fc 21	 cmp	 DWORD PTR _dwI$70480[ebp], 33 ; 00000021H
  0001f	73 36		 jae	 SHORT $L70479

; 1323 :     {
; 1324 :         char buf[200];
; 1325 :         _snprintf(buf,sizeof(buf),"DM allocated %ss", gpNames[dwI]);

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _dwI$70480[ebp]
  00024	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _gpNames[ecx*4]
  0002b	52		 push	 edx
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@MLPBJPAN@DM?5allocated?5?$CFss?$AA@
  00031	68 c8 00 00 00	 push	 200			; 000000c8H
  00036	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _buf$70484[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 __snprintf
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 :         buf[sizeof(buf)-1] = 0;

  00045	c6 45 f7 00	 mov	 BYTE PTR _buf$70484[ebp+199], 0

; 1327 :         DMusicUnregisterPerformanceCounter( buf );

  00049	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _buf$70484[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 _DMusicUnregisterPerformanceCounter@4

; 1328 :     }

  00055	eb bb		 jmp	 SHORT $L70482
$L70479:

; 1329 : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?UnregisterDMusicObjectCounters@@YGXXZ ENDP		; UnregisterDMusicObjectCounters
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ??0AListItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0AListItem@@QAE@XZ PROC NEAR				; AListItem::AListItem, COMDAT
; _this$ = ecx

; 17   :     AListItem() { m_pNext=NULL; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0AListItem@@QAE@XZ ENDP				; AListItem::AListItem
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0AList@@QAE@XZ PROC NEAR				; AList::AList, COMDAT
; _this$ = ecx

; 34   :     AList() {m_pHead=NULL;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0AList@@QAE@XZ ENDP					; AList::AList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@AList@@QBEPAVAListItem@@XZ PROC NEAR		; AList::GetHead, COMDAT
; _this$ = ecx

; 35   :     AListItem *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@AList@@QBEPAVAListItem@@XZ ENDP		; AList::GetHead
_TEXT	ENDS
EXTRN	?GetCount@AListItem@@QBEJXZ:NEAR		; AListItem::GetCount
; Function compile flags: /Odt
;	COMDAT ?GetCount@AList@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4
?GetCount@AList@@QBEJXZ PROC NEAR			; AList::GetCount, COMDAT
; _this$ = ecx

; 38   :     LONG GetCount() const {return m_pHead->GetCount();}; 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	e8 00 00 00 00	 call	 ?GetCount@AListItem@@QBEJXZ ; AListItem::GetCount
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?GetCount@AList@@QBEJXZ ENDP				; AList::GetCount
_TEXT	ENDS
PUBLIC	?SetNext@AListItem@@QAEXPAV1@@Z			; AListItem::SetNext
; Function compile flags: /Odt
;	COMDAT ?AddHead@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddHead@AList@@QAEXPAVAListItem@@@Z PROC NEAR		; AList::AddHead, COMDAT
; _this$ = ecx

; 51   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :             if (pItem!=NULL)

  00007	83 7d 08 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  0000b	74 16		 je	 SHORT $L32730

; 53   :             {
; 54   :                 pItem->SetNext(m_pHead);

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	51		 push	 ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00016	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 55   :                 m_pHead=pItem;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00021	89 02		 mov	 DWORD PTR [edx], eax
$L32730:

; 56   :             }
; 57   :         };

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?AddHead@AList@@QAEXPAVAListItem@@@Z ENDP		; AList::AddHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@AListItem@@QAEXPAV1@@Z PROC NEAR		; AListItem::SetNext, COMDAT
; _this$ = ecx

; 19   :     void SetNext(AListItem *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetNext@AListItem@@QAEXPAV1@@Z ENDP			; AListItem::SetNext
_TEXT	ENDS
EXTRN	?Remove@AListItem@@QAEPAV1@PAV1@@Z:NEAR		; AListItem::Remove
; Function compile flags: /Odt
;	COMDAT ?Remove@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?Remove@AList@@QAEXPAVAListItem@@@Z PROC NEAR		; AList::Remove, COMDAT
; _this$ = ecx

; 60   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 61   :             if (pItem != NULL)

  00007	83 7d 08 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  0000b	74 13		 je	 SHORT $L32733

; 62   :             {
; 63   :                 m_pHead=m_pHead->Remove(pItem);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00010	50		 push	 eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00016	e8 00 00 00 00	 call	 ?Remove@AListItem@@QAEPAV1@PAV1@@Z ; AListItem::Remove
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	89 02		 mov	 DWORD PTR [edx], eax
$L32733:

; 64   :             }
; 65   :         };

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?Remove@AList@@QAEXPAVAListItem@@@Z ENDP		; AList::Remove
_TEXT	ENDS
PUBLIC	?GetNext@AListItem@@QBEPAV1@XZ			; AListItem::GetNext
; Function compile flags: /Odt
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -8
_li$ = -4
?RemoveHead@AList@@QAEPAVAListItem@@XZ PROC NEAR	; AList::RemoveHead, COMDAT
; _this$ = ecx

; 71   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 72   :             AListItem *li;
; 73   :             li = m_pHead;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR _li$[ebp], ecx

; 74   :             if(m_pHead)

  00011	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00014	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00017	74 19		 je	 SHORT $L32744

; 75   :             {
; 76   :                 m_pHead = m_pHead->GetNext();

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	89 01		 mov	 DWORD PTR [ecx], eax

; 77   :                 li->SetNext(NULL);

  00028	6a 00		 push	 0
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  0002d	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext
$L32744:

; 78   :             }
; 79   :             return li;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _li$[ebp]

; 80   :         }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?RemoveHead@AList@@QAEPAVAListItem@@XZ ENDP		; AList::RemoveHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@AListItem@@QBEPAV1@XZ PROC NEAR		; AListItem::GetNext, COMDAT
; _this$ = ecx

; 18   :     AListItem *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetNext@AListItem@@QBEPAV1@XZ ENDP			; AListItem::GetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xboxutil.h
_TEXT	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT
___formal$ = 8
?DeleteCriticalSection@@YGXPAX@Z PROC NEAR		; DeleteCriticalSection, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : }

  00003	5d		 pop	 ebp
  00004	c2 04 00	 ret	 4
?DeleteCriticalSection@@YGXPAX@Z ENDP			; DeleteCriticalSection
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IUnknown@@QAE@XZ PROC NEAR				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	?g_MemTrackList@@3PAVCMemTrackList@@A		; g_MemTrackList
_BSS	SEGMENT
?g_MemTrackList@@3PAVCMemTrackList@@A DB 0420H DUP (?)	; g_MemTrackList
_BSS	ENDS
END
