; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	..\tsigtrk.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EF@CDDPGKGG@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DK@MIJKGBNN@Error?3?5Failure?5reading?5bad?5data?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CO@NPIADNEG@Error?3?5Failure?5reading?5time?5sign@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EH@JCFONBI@Warning?3?5invalid?5content?3?5DMUS_I@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DM@FBCFGGNM@Warning?3?5invalid?5content?3?5DMUS_I@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EE@NLDDFOKP@Warning?3?5invalid?5content?3?5DMUS_I@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@GKELFHD@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MIJOINAD@pStateData?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@CCONHGNO@TimeSigtrk?3?5TimeSig?5event?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CP@NOENDGNM@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FD@CDLBOJHG@Error?3?5Clone?5failed?5on?5time?5sign@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BGAOHDMM@?$CBp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT ??0CTimeSigItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Construct@CTimeSigTrack@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSigTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSigList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTimeSigTrack@@QAE@PAV0@JJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CTimeSigTrack@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTimeSigTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CTimeSigTrack@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CTimeSigTrack@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CTimeSigTrack@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTimeSigTrack@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassID@CTimeSigTrack@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsDirty@CTimeSigTrack@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CTimeSigTrack@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadTimeSigList@CTimeSigTrack@@IAEJPAVCRiffParser@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Save@CTimeSigTrack@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CTimeSigTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsParamSupported@CTimeSigTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CTimeSigTrack@@UAGJPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndPlay@CTimeSigTrack@@UAGJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Seek@CTimeSigTrack@@IAGJPAXJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NotificationMeasureBeat@CTimeSigTrack@@IAEJJJPAVCTimeSigStateData@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@CTimeSigTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@ULyricInfo@@@@QBEPAV?$TListItem@ULyricInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@ULyricInfo@@@@QAEXPAV?$TListItem@ULyricInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@ULyricInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@ULyricInfo@@@@QAEAAULyricInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@UTriggerInfo@@@@SGHAAUTriggerInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@ULyricInfo@@@@SGHAAULyricInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@ULyricInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEAAV01@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UTriggerInfo@@@@QAEXP6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@ULyricInfo@@@@QAEXP6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_SEQ_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_CURVE_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@_J@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UObjectInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ObjectInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UTriggerInfo@@@@QAEPAV1@P6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@ULyricInfo@@@@QAEPAV1@P6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UTriggerInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UTriggerInfo@@@@AAEPAV1@PAV1@P6GHAAUTriggerInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@ULyricInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@ULyricInfo@@@@AAEPAV1@PAV1@P6GHAAULyricInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CTimeSigTrack@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CTimeSigTrack@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CTimeSigTrack@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UParamInfo@CParamControlTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UParamInfo@CParamControlTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ParamInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WaveItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WString@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WString@SmartRef@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@ULyricInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@ULyricInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UTriggerInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Clone@CTimeSigTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??RemoveNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??AddNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??SetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?IsEmpty@AList@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?6??EndPlay@CTimeSigTrack@@UAGJPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CTimeSigStateData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??IsParamSupported@CTimeSigTrack@@UAGJABU_GUID@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Load@CTimeSigTrack@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CTimeSigTrack@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CTimeSigTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@CTimeSigItem@@QAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CTimeSigTrack@@6BIDirectMusicTrack@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CTimeSigTrack@@6BIPersistStream@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0AListItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	??0CTimeSigItem@@QAE@XZ				; CTimeSigItem::CTimeSigItem
PUBLIC	??0AListItem@@QAE@XZ				; AListItem::AListItem
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\tsigtrk.cpp
;	COMDAT ??0CTimeSigItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CTimeSigItem@@QAE@XZ PROC NEAR			; CTimeSigItem::CTimeSigItem, COMDAT
; _this$ = ecx

; 35   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AListItem@@QAE@XZ	; AListItem::AListItem

; 36   :     m_TimeSig.lTime = 0;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 37   :     m_TimeSig.bBeatsPerMeasure = 0; 

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	c6 41 08 00	 mov	 BYTE PTR [ecx+8], 0

; 38   :     m_TimeSig.bBeat = 0;

  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	c6 42 09 00	 mov	 BYTE PTR [edx+9], 0

; 39   :     m_TimeSig.wGridsPerBeat = 0;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	66 c7 40 0a 00
	00		 mov	 WORD PTR [eax+10], 0

; 40   : }

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
??0CTimeSigItem@@QAE@XZ ENDP				; CTimeSigItem::CTimeSigItem
_TEXT	ENDS
PUBLIC	?Construct@CTimeSigTrack@@IAEXXZ		; CTimeSigTrack::Construct
EXTRN	__imp__RtlInitializeCriticalSection@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Construct@CTimeSigTrack@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Construct@CTimeSigTrack@@IAEXXZ PROC NEAR		; CTimeSigTrack::Construct, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 47   :     IncrementDLLCount();
; 48   : 
; 49   : 	m_cRef = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 50   :     m_fCSInitialized = FALSE;

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 51   : 	INITIALIZE_CRITICAL_SECTION(&m_CrSec);

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	83 c2 14	 add	 edx, 20			; 00000014H
  00021	52		 push	 edx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 52   :     m_fCSInitialized = TRUE;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	c7 40 30 01 00
	00 00		 mov	 DWORD PTR [eax+48], 1

; 53   : 	m_dwValidate = 0;

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 54   : 	m_fNotificationMeasureBeat = FALSE;

  0003c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0

; 55   : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?Construct@CTimeSigTrack@@IAEXXZ ENDP			; CTimeSigTrack::Construct
_TEXT	ENDS
PUBLIC	??0CTimeSigList@@QAE@XZ				; CTimeSigList::CTimeSigList
PUBLIC	??0CTimeSigTrack@@QAE@XZ			; CTimeSigTrack::CTimeSigTrack
PUBLIC	?QueryInterface@CTimeSigTrack@@UAGJABU_GUID@@PAPAX@Z ; CTimeSigTrack::QueryInterface
PUBLIC	?AddRef@CTimeSigTrack@@UAGKXZ			; CTimeSigTrack::AddRef
PUBLIC	?Release@CTimeSigTrack@@UAGKXZ			; CTimeSigTrack::Release
PUBLIC	?IsParamSupported@CTimeSigTrack@@UAGJABU_GUID@@@Z ; CTimeSigTrack::IsParamSupported
PUBLIC	?Init@CTimeSigTrack@@UAGJPAUIDirectMusicSegment@@@Z ; CTimeSigTrack::Init
PUBLIC	?InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ; CTimeSigTrack::InitPlay
PUBLIC	?EndPlay@CTimeSigTrack@@UAGJPAX@Z		; CTimeSigTrack::EndPlay
PUBLIC	?Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ; CTimeSigTrack::Play
PUBLIC	?GetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAJPAX@Z ; CTimeSigTrack::GetParam
PUBLIC	?SetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAX@Z	; CTimeSigTrack::SetParam
PUBLIC	?AddNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z ; CTimeSigTrack::AddNotificationType
PUBLIC	?RemoveNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z ; CTimeSigTrack::RemoveNotificationType
PUBLIC	?Clone@CTimeSigTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z ; CTimeSigTrack::Clone
PUBLIC	?GetClassID@CTimeSigTrack@@UAGJPAU_GUID@@@Z	; CTimeSigTrack::GetClassID
PUBLIC	?IsDirty@CTimeSigTrack@@UAGJXZ			; CTimeSigTrack::IsDirty
PUBLIC	?Load@CTimeSigTrack@@UAGJPAUIStream@@@Z		; CTimeSigTrack::Load
PUBLIC	?Save@CTimeSigTrack@@UAGJPAUIStream@@H@Z	; CTimeSigTrack::Save
PUBLIC	?GetSizeMax@CTimeSigTrack@@UAGJPAT_ULARGE_INTEGER@@@Z ; CTimeSigTrack::GetSizeMax
PUBLIC	??_7CTimeSigTrack@@6BIPersistStream@@@		; CTimeSigTrack::`vftable'
PUBLIC	??_7CTimeSigTrack@@6BIDirectMusicTrack@@@	; CTimeSigTrack::`vftable'
PUBLIC	?QueryInterface@CTimeSigTrack@@W3AGJABU_GUID@@PAPAX@Z ; CTimeSigTrack::QueryInterface
PUBLIC	?AddRef@CTimeSigTrack@@W3AGKXZ			; CTimeSigTrack::AddRef
PUBLIC	?Release@CTimeSigTrack@@W3AGKXZ			; CTimeSigTrack::Release
PUBLIC	??0IPersistStream@@QAE@XZ			; IPersistStream::IPersistStream
PUBLIC	??0IDirectMusicTrack@@QAE@XZ			; IDirectMusicTrack::IDirectMusicTrack
EXTRN	??0CMemTrack@@QAE@K@Z:NEAR			; CMemTrack::CMemTrack
;	COMDAT ??_7CTimeSigTrack@@6BIPersistStream@@@
CONST	SEGMENT
??_7CTimeSigTrack@@6BIPersistStream@@@ DD FLAT:?QueryInterface@CTimeSigTrack@@UAGJABU_GUID@@PAPAX@Z ; CTimeSigTrack::`vftable'
	DD	FLAT:?AddRef@CTimeSigTrack@@UAGKXZ
	DD	FLAT:?Release@CTimeSigTrack@@UAGKXZ
	DD	FLAT:?GetClassID@CTimeSigTrack@@UAGJPAU_GUID@@@Z
	DD	FLAT:?IsDirty@CTimeSigTrack@@UAGJXZ
	DD	FLAT:?Load@CTimeSigTrack@@UAGJPAUIStream@@@Z
	DD	FLAT:?Save@CTimeSigTrack@@UAGJPAUIStream@@H@Z
	DD	FLAT:?GetSizeMax@CTimeSigTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
CONST	ENDS
;	COMDAT ??_7CTimeSigTrack@@6BIDirectMusicTrack@@@
CONST	SEGMENT
??_7CTimeSigTrack@@6BIDirectMusicTrack@@@ DD FLAT:?QueryInterface@CTimeSigTrack@@W3AGJABU_GUID@@PAPAX@Z ; CTimeSigTrack::`vftable'
	DD	FLAT:?AddRef@CTimeSigTrack@@W3AGKXZ
	DD	FLAT:?Release@CTimeSigTrack@@W3AGKXZ
	DD	FLAT:?Init@CTimeSigTrack@@UAGJPAUIDirectMusicSegment@@@Z
	DD	FLAT:?InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
	DD	FLAT:?EndPlay@CTimeSigTrack@@UAGJPAX@Z
	DD	FLAT:?Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
	DD	FLAT:?GetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAJPAX@Z
	DD	FLAT:?SetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAX@Z
	DD	FLAT:?IsParamSupported@CTimeSigTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?AddNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?RemoveNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?Clone@CTimeSigTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CTimeSigTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CTimeSigTrack@@QAE@XZ PROC NEAR			; CTimeSigTrack::CTimeSigTrack, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPersistStream@@QAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 04	 add	 ecx, 4
  00015	e8 00 00 00 00	 call	 ??0IDirectMusicTrack@@QAE@XZ
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CTimeSigTrack@@6BIPersistStream@@@
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CTimeSigTrack@@6BIDirectMusicTrack@@@
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 08	 add	 ecx, 8
  00033	e8 00 00 00 00	 call	 ??0CTimeSigList@@QAE@XZ
  00038	6a 1e		 push	 30			; 0000001eH
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 c1 40	 add	 ecx, 64			; 00000040H
  00040	e8 00 00 00 00	 call	 ??0CMemTrack@@QAE@K@Z	; CMemTrack::CMemTrack

; 59   : 	Construct();

  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?Construct@CTimeSigTrack@@IAEXXZ ; CTimeSigTrack::Construct

; 60   : 	m_fActive = TRUE;

  0004d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00050	c7 42 38 01 00
	00 00		 mov	 DWORD PTR [edx+56], 1

; 61   :     m_fStateSetBySetParam = FALSE;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0

; 62   : }

  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
??0CTimeSigTrack@@QAE@XZ ENDP				; CTimeSigTrack::CTimeSigTrack
_TEXT	ENDS
PUBLIC	??0IPersist@@QAE@XZ				; IPersist::IPersist
; Function compile flags: /Odt
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersistStream@@QAE@XZ PROC NEAR			; IPersistStream::IPersistStream, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPersist@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersistStream@@QAE@XZ ENDP				; IPersistStream::IPersistStream
_TEXT	ENDS
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
; Function compile flags: /Odt
;	COMDAT ??0IDirectMusicTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicTrack@@QAE@XZ PROC NEAR			; IDirectMusicTrack::IDirectMusicTrack, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicTrack@@QAE@XZ ENDP			; IDirectMusicTrack::IDirectMusicTrack
_TEXT	ENDS
PUBLIC	??0AList@@QAE@XZ				; AList::AList
; Function compile flags: /Odt
;	COMDAT ??0CTimeSigList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CTimeSigList@@QAE@XZ PROC NEAR			; CTimeSigList::CTimeSigList, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0AList@@QAE@XZ	; AList::AList
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CTimeSigList@@QAE@XZ ENDP				; CTimeSigList::CTimeSigList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersist@@QAE@XZ PROC NEAR				; IPersist::IPersist, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersist@@QAE@XZ ENDP				; IPersist::IPersist
_TEXT	ENDS
PUBLIC	?GetNext@CTimeSigItem@@QAEPAV1@XZ		; CTimeSigItem::GetNext
PUBLIC	?GetHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ	; CTimeSigList::GetHead
PUBLIC	??0CTimeSigTrack@@QAE@PAV0@JJ@Z			; CTimeSigTrack::CTimeSigTrack
PUBLIC	?AddHead@AList@@QAEXPAVAListItem@@@Z		; AList::AddHead
EXTRN	?Reverse@AList@@QAEXXZ:NEAR			; AList::Reverse
; Function compile flags: /Odt
;	COMDAT ??0CTimeSigTrack@@QAE@PAV0@JJ@Z
_TEXT	SEGMENT
tv158 = -36
tv135 = -32
_this$ = -28
$T70338 = -24
$T70335 = -20
_pNew$69454 = -16
_pNew$69448 = -12
_pPrevious$ = -8
_pScan$ = -4
_pSourceTrack$ = 8
_mtStart$ = 12
_mtEnd$ = 16
??0CTimeSigTrack@@QAE@PAV0@JJ@Z PROC NEAR		; CTimeSigTrack::CTimeSigTrack, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0IPersistStream@@QAE@XZ
  00011	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	83 c1 04	 add	 ecx, 4
  00017	e8 00 00 00 00	 call	 ??0IDirectMusicTrack@@QAE@XZ
  0001c	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CTimeSigTrack@@6BIPersistStream@@@
  00025	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CTimeSigTrack@@6BIDirectMusicTrack@@@
  0002f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 08	 add	 ecx, 8
  00035	e8 00 00 00 00	 call	 ??0CTimeSigList@@QAE@XZ
  0003a	6a 1e		 push	 30			; 0000001eH
  0003c	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 40	 add	 ecx, 64			; 00000040H
  00042	e8 00 00 00 00	 call	 ??0CMemTrack@@QAE@K@Z	; CMemTrack::CMemTrack

; 67   : 	Construct();

  00047	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?Construct@CTimeSigTrack@@IAEXXZ ; CTimeSigTrack::Construct

; 68   : 	m_fActive = pSourceTrack->m_fActive;

  0004f	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 45 08	 mov	 eax, DWORD PTR _pSourceTrack$[ebp]
  00055	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00058	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 69   :     m_fStateSetBySetParam = pSourceTrack->m_fStateSetBySetParam;

  0005b	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 45 08	 mov	 eax, DWORD PTR _pSourceTrack$[ebp]
  00061	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00064	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 70   :     // Clone the time signature list.
; 71   : 	CTimeSigItem* pScan = pSourceTrack->m_TSigEventList.GetHead();

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _pSourceTrack$[ebp]
  0006a	83 c1 08	 add	 ecx, 8
  0006d	e8 00 00 00 00	 call	 ?GetHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ ; CTimeSigList::GetHead
  00072	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax

; 72   : 	CTimeSigItem* pPrevious = NULL;

  00075	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pPrevious$[ebp], 0

; 73   : 	for(; pScan; pScan = pScan->GetNext())

  0007c	eb 0b		 jmp	 SHORT $L69441
$L69442:
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00081	e8 00 00 00 00	 call	 ?GetNext@CTimeSigItem@@QAEPAV1@XZ ; CTimeSigItem::GetNext
  00086	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
$L69441:
  00089	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  0008d	0f 84 9f 00 00
	00		 je	 $L69443

; 74   : 	{
; 75   : 		if (pScan->m_TimeSig.lTime < mtStart)

  00093	8b 55 fc	 mov	 edx, DWORD PTR _pScan$[ebp]
  00096	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00099	3b 45 0c	 cmp	 eax, DWORD PTR _mtStart$[ebp]
  0009c	7d 0b		 jge	 SHORT $L69444

; 76   : 		{
; 77   : 			pPrevious = pScan;

  0009e	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  000a1	89 4d f8	 mov	 DWORD PTR _pPrevious$[ebp], ecx

; 78   : 		}
; 79   : 		else if (pScan->m_TimeSig.lTime < mtEnd)

  000a4	e9 84 00 00 00	 jmp	 $L69445
$L69444:
  000a9	8b 55 fc	 mov	 edx, DWORD PTR _pScan$[ebp]
  000ac	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000af	3b 45 10	 cmp	 eax, DWORD PTR _mtEnd$[ebp]
  000b2	7d 77		 jge	 SHORT $L69446

; 80   : 		{
; 81   : 			if (pScan->m_TimeSig.lTime == mtStart)

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  000b7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ba	3b 55 0c	 cmp	 edx, DWORD PTR _mtStart$[ebp]
  000bd	75 07		 jne	 SHORT $L69447

; 82   : 			{
; 83   : 				pPrevious = NULL;

  000bf	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pPrevious$[ebp], 0
$L69447:

; 84   : 			}
; 85   : 			CTimeSigItem* pNew = new CTimeSigItem;

  000c6	6a 0c		 push	 12			; 0000000cH
  000c8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000cd	83 c4 04	 add	 esp, 4
  000d0	89 45 ec	 mov	 DWORD PTR $T70335[ebp], eax
  000d3	83 7d ec 00	 cmp	 DWORD PTR $T70335[ebp], 0
  000d7	74 0d		 je	 SHORT $L70336
  000d9	8b 4d ec	 mov	 ecx, DWORD PTR $T70335[ebp]
  000dc	e8 00 00 00 00	 call	 ??0CTimeSigItem@@QAE@XZ	; CTimeSigItem::CTimeSigItem
  000e1	89 45 e0	 mov	 DWORD PTR tv135[ebp], eax
  000e4	eb 07		 jmp	 SHORT $L70337
$L70336:
  000e6	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$L70337:
  000ed	8b 45 e0	 mov	 eax, DWORD PTR tv135[ebp]
  000f0	89 45 f4	 mov	 DWORD PTR _pNew$69448[ebp], eax

; 86   : 			if (pNew)

  000f3	83 7d f4 00	 cmp	 DWORD PTR _pNew$69448[ebp], 0
  000f7	74 30		 je	 SHORT $L69451

; 87   : 			{
; 88   : 				pNew->m_TimeSig = pScan->m_TimeSig;

  000f9	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  000fc	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ff	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00102	8b 4d f4	 mov	 ecx, DWORD PTR _pNew$69448[ebp]
  00105	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00108	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 89   : 				pNew->m_TimeSig.lTime = pScan->m_TimeSig.lTime - mtStart;

  0010b	8b 55 fc	 mov	 edx, DWORD PTR _pScan$[ebp]
  0010e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00111	2b 45 0c	 sub	 eax, DWORD PTR _mtStart$[ebp]
  00114	8b 4d f4	 mov	 ecx, DWORD PTR _pNew$69448[ebp]
  00117	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 90   : 				m_TSigEventList.AddHead(pNew); // instead of AddTail, which is n^2. We reverse below.

  0011a	8b 55 f4	 mov	 edx, DWORD PTR _pNew$69448[ebp]
  0011d	52		 push	 edx
  0011e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	83 c1 08	 add	 ecx, 8
  00124	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead
$L69451:

; 91   : 			}
; 92   : 		}
; 93   : 		else break;

  00129	eb 02		 jmp	 SHORT $L69445
$L69446:
  0012b	eb 05		 jmp	 SHORT $L69443
$L69445:

; 94   : 	}

  0012d	e9 4c ff ff ff	 jmp	 $L69442
$L69443:

; 95   : 	m_TSigEventList.Reverse(); // Now, put list in order.

  00132	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	83 c1 08	 add	 ecx, 8
  00138	e8 00 00 00 00	 call	 ?Reverse@AList@@QAEXXZ	; AList::Reverse

; 96   :     // Then, install the time signature that precedes the clone.
; 97   : 	if (pPrevious)

  0013d	83 7d f8 00	 cmp	 DWORD PTR _pPrevious$[ebp], 0
  00141	74 5e		 je	 SHORT $L69438

; 98   : 	{
; 99   : 		CTimeSigItem* pNew = new CTimeSigItem;

  00143	6a 0c		 push	 12			; 0000000cH
  00145	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0014a	83 c4 04	 add	 esp, 4
  0014d	89 45 e8	 mov	 DWORD PTR $T70338[ebp], eax
  00150	83 7d e8 00	 cmp	 DWORD PTR $T70338[ebp], 0
  00154	74 0d		 je	 SHORT $L70339
  00156	8b 4d e8	 mov	 ecx, DWORD PTR $T70338[ebp]
  00159	e8 00 00 00 00	 call	 ??0CTimeSigItem@@QAE@XZ	; CTimeSigItem::CTimeSigItem
  0015e	89 45 dc	 mov	 DWORD PTR tv158[ebp], eax
  00161	eb 07		 jmp	 SHORT $L70340
$L70339:
  00163	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$L70340:
  0016a	8b 45 dc	 mov	 eax, DWORD PTR tv158[ebp]
  0016d	89 45 f0	 mov	 DWORD PTR _pNew$69454[ebp], eax

; 100  : 		if (pNew)

  00170	83 7d f0 00	 cmp	 DWORD PTR _pNew$69454[ebp], 0
  00174	74 2b		 je	 SHORT $L69438

; 101  : 		{
; 102  : 			pNew->m_TimeSig = pPrevious->m_TimeSig;

  00176	8b 4d f8	 mov	 ecx, DWORD PTR _pPrevious$[ebp]
  00179	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0017c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0017f	8b 4d f0	 mov	 ecx, DWORD PTR _pNew$69454[ebp]
  00182	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00185	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 103  : 			pNew->m_TimeSig.lTime = 0;

  00188	8b 55 f0	 mov	 edx, DWORD PTR _pNew$69454[ebp]
  0018b	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 104  : 			m_TSigEventList.AddHead(pNew);

  00192	8b 45 f0	 mov	 eax, DWORD PTR _pNew$69454[ebp]
  00195	50		 push	 eax
  00196	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00199	83 c1 08	 add	 ecx, 8
  0019c	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead
$L69438:

; 105  : 		}
; 106  : 	}
; 107  : }

  001a1	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c2 0c 00	 ret	 12			; 0000000cH
??0CTimeSigTrack@@QAE@PAV0@JJ@Z ENDP			; CTimeSigTrack::CTimeSigTrack
_TEXT	ENDS
PUBLIC	?RemoveHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ ; CTimeSigList::RemoveHead
PUBLIC	?Clear@CTimeSigTrack@@IAEXXZ			; CTimeSigTrack::Clear
; Function compile flags: /Odt
;	COMDAT ?Clear@CTimeSigTrack@@IAEXXZ
_TEXT	SEGMENT
_this$ = -12
$T70344 = -8
_pItem$ = -4
?Clear@CTimeSigTrack@@IAEXXZ PROC NEAR			; CTimeSigTrack::Clear, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
$L69463:

; 112  :     CTimeSigItem* pItem;
; 113  : 	while( pItem = m_TSigEventList.RemoveHead() )

  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 08	 add	 ecx, 8
  0000f	e8 00 00 00 00	 call	 ?RemoveHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ ; CTimeSigList::RemoveHead
  00014	89 45 fc	 mov	 DWORD PTR _pItem$[ebp], eax
  00017	83 7d fc 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  0001b	74 14		 je	 SHORT $L69460

; 114  : 	{
; 115  : 		delete pItem;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _pItem$[ebp]
  00020	89 45 f8	 mov	 DWORD PTR $T70344[ebp], eax
  00023	8b 4d f8	 mov	 ecx, DWORD PTR $T70344[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	83 c4 04	 add	 esp, 4

; 116  : 	}

  0002f	eb d8		 jmp	 SHORT $L69463
$L69460:

; 117  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?Clear@CTimeSigTrack@@IAEXXZ ENDP			; CTimeSigTrack::Clear
_TEXT	ENDS
PUBLIC	??1CTimeSigTrack@@QAE@XZ			; CTimeSigTrack::~CTimeSigTrack
PUBLIC	?DeleteCriticalSection@@YGXPAX@Z		; DeleteCriticalSection
EXTRN	??1CMemTrack@@QAE@XZ:NEAR			; CMemTrack::~CMemTrack
; Function compile flags: /Odt
;	COMDAT ??1CTimeSigTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CTimeSigTrack@@QAE@XZ PROC NEAR			; CTimeSigTrack::~CTimeSigTrack, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CTimeSigTrack@@6BIPersistStream@@@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CTimeSigTrack@@6BIDirectMusicTrack@@@

; 121  :     Clear();

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?Clear@CTimeSigTrack@@IAEXXZ ; CTimeSigTrack::Clear

; 122  :     if (m_fCSInitialized)

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  00029	74 0c		 je	 SHORT $L69468

; 123  :     {
; 124  : 	    DELETE_CRITICAL_SECTION(&m_CrSec);

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c0 14	 add	 eax, 20			; 00000014H
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?DeleteCriticalSection@@YGXPAX@Z ; DeleteCriticalSection
$L69468:

; 125  :     }
; 126  :     DecrementDLLCount();
; 127  : }

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 40	 add	 ecx, 64			; 00000040H
  0003d	e8 00 00 00 00	 call	 ??1CMemTrack@@QAE@XZ	; CMemTrack::~CMemTrack
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??1CTimeSigTrack@@QAE@XZ ENDP				; CTimeSigTrack::~CTimeSigTrack
_TEXT	ENDS
PUBLIC	??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ ; `string'
PUBLIC	??_C@_0EF@CDDPGKGG@Warning?3?5Request?5to?5query?5unknow@ ; `string'
PUBLIC	_==@8
EXTRN	_IID_IDirectMusicTrack:BYTE
EXTRN	?DebugTrace@@YAXHPADZZ:NEAR			; DebugTrace
EXTRN	_DebugBreak@0:NEAR
EXTRN	_IID_IUnknown:BYTE
EXTRN	_IID_IPersistStream:BYTE
EXTRN	_IsBadReadPtr@8:NEAR
EXTRN	_IsBadWritePtr@8:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CTimeSigTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??QueryInterface@CTimeSigTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB DB 'C'
	DB	'TimeSigTrack::QueryInterface', 00H		; `CTimeSigTrack::QueryInterface'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT
??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ DB '%s: Invalid '
	DB	'pointer ppv', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT
??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ DB '%'
	DB	's: Invalid pointer (void*)&iid', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@CDDPGKGG@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT
??_C@_0EF@CDDPGKGG@Warning?3?5Request?5to?5query?5unknow@ DB 'Warning: Re'
	DB	'quest to query unknown interface on Time Signature Track', 0aH
	DB	00H						; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?QueryInterface@CTimeSigTrack@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv88 = -4
_this$ = 8
_iid$ = 12
_ppv$ = 16
?QueryInterface@CTimeSigTrack@@UAGJABU_GUID@@PAPAX@Z PROC NEAR ; CTimeSigTrack::QueryInterface, COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 146  : 	V_INAME(CTimeSigTrack::QueryInterface);
; 147  : 	V_PTRPTR_WRITE(ppv);

  00004	6a 04		 push	 4
  00006	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $L69478
  00013	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CTimeSigTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L69478:

; 148  : 	V_REFGUID(iid);

  0002c	6a 10		 push	 16			; 00000010H
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $L69482
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CTimeSigTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
  00045	6a ff		 push	 -1
  00047	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69482:

; 149  : 
; 150  :    if (iid == IID_IUnknown || iid == IID_IDirectMusicTrack)

  00054	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IUnknown
  00059	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _==@8
  00062	85 c0		 test	 eax, eax
  00064	75 12		 jne	 SHORT $L69485
  00066	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack
  0006b	8b 45 0c	 mov	 eax, DWORD PTR _iid$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _==@8
  00074	85 c0		 test	 eax, eax
  00076	74 22		 je	 SHORT $L69484
$L69485:

; 151  :     {
; 152  :         *ppv = static_cast<IDirectMusicTrack*>(this);

  00078	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  0007c	74 0b		 je	 SHORT $L70351
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	83 c1 04	 add	 ecx, 4
  00084	89 4d fc	 mov	 DWORD PTR tv88[ebp], ecx
  00087	eb 07		 jmp	 SHORT $L70352
$L70351:
  00089	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$L70352:
  00090	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  00093	8b 45 fc	 mov	 eax, DWORD PTR tv88[ebp]
  00096	89 02		 mov	 DWORD PTR [edx], eax

; 153  :     } else

  00098	eb 3b		 jmp	 SHORT $L69487
$L69484:

; 154  : 	if (iid == IID_IPersistStream)

  0009a	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPersistStream
  0009f	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _==@8
  000a8	85 c0		 test	 eax, eax
  000aa	74 0a		 je	 SHORT $L69488

; 155  : 	{
; 156  :         *ppv = static_cast<IPersistStream*>(this);

  000ac	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  000af	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 	} else

  000b4	eb 1f		 jmp	 SHORT $L69487
$L69488:

; 158  :     {
; 159  :         *ppv = NULL;

  000b6	8b 4d 10	 mov	 ecx, DWORD PTR _ppv$[ebp]
  000b9	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 160  :         Trace(4,"Warning: Request to query unknown interface on Time Signature Track\n");

  000bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EF@CDDPGKGG@Warning?3?5Request?5to?5query?5unknow@
  000c4	6a 04		 push	 4
  000c6	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000cb	83 c4 08	 add	 esp, 8

; 161  :         return E_NOINTERFACE;

  000ce	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
  000d3	eb 0e		 jmp	 SHORT $L69474
$L69487:

; 162  :     }
; 163  : 
; 164  :     reinterpret_cast<IUnknown*>(this)->AddRef();

  000d5	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	8b 02		 mov	 eax, DWORD PTR [edx]
  000da	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	51		 push	 ecx
  000de	ff 50 04	 call	 DWORD PTR [eax+4]

; 165  :     return S_OK;

  000e1	33 c0		 xor	 eax, eax
$L69474:

; 166  : }

  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@CTimeSigTrack@@UAGJABU_GUID@@PAPAX@Z ENDP ; CTimeSigTrack::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\guiddef.h
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8
_guidOther$ = 12
_==@8	PROC NEAR					; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  :     return IsEqualGUID(guidOne,guidOther);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IsEqualGUID@8

; 190  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:NEAR
; Function compile flags: /Odt
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8
_rguid2$ = 12
_IsEqualGUID@8 PROC NEAR				; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _memcmp
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 157  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
EXTRN	__InterlockedIncrement@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\tsigtrk.cpp
;	COMDAT ?AddRef@CTimeSigTrack@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@CTimeSigTrack@@UAGKXZ PROC NEAR			; CTimeSigTrack::AddRef, COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 178  :     return InterlockedIncrement(&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 179  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@CTimeSigTrack@@UAGKXZ ENDP			; CTimeSigTrack::AddRef
_TEXT	ENDS
PUBLIC	??_GCTimeSigTrack@@QAEPAXI@Z			; CTimeSigTrack::`scalar deleting destructor'
EXTRN	__InterlockedDecrement@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Release@CTimeSigTrack@@UAGKXZ
_TEXT	SEGMENT
tv72 = -12
$T70366 = -8
$T70365 = -4
_this$ = 8
?Release@CTimeSigTrack@@UAGKXZ PROC NEAR		; CTimeSigTrack::Release, COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 191  :     if (!InterlockedDecrement(&m_cRef))

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 0c	 add	 eax, 12			; 0000000cH
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	85 c0		 test	 eax, eax
  00014	75 2c		 jne	 SHORT $L69501

; 192  :     {
; 193  :         delete this;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	89 4d f8	 mov	 DWORD PTR $T70366[ebp], ecx
  0001c	8b 55 f8	 mov	 edx, DWORD PTR $T70366[ebp]
  0001f	89 55 fc	 mov	 DWORD PTR $T70365[ebp], edx
  00022	83 7d fc 00	 cmp	 DWORD PTR $T70365[ebp], 0
  00026	74 0f		 je	 SHORT $L70367
  00028	6a 01		 push	 1
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR $T70365[ebp]
  0002d	e8 00 00 00 00	 call	 ??_GCTimeSigTrack@@QAEPAXI@Z
  00032	89 45 f4	 mov	 DWORD PTR tv72[ebp], eax
  00035	eb 07		 jmp	 SHORT $L70368
$L70367:
  00037	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L70368:

; 194  :         return 0;

  0003e	33 c0		 xor	 eax, eax
  00040	eb 06		 jmp	 SHORT $L69500
$L69501:

; 195  :     }
; 196  : 
; 197  :     return m_cRef;

  00042	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
$L69500:

; 198  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?Release@CTimeSigTrack@@UAGKXZ ENDP			; CTimeSigTrack::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCTimeSigTrack@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCTimeSigTrack@@QAEPAXI@Z PROC NEAR			; CTimeSigTrack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CTimeSigTrack@@QAE@XZ ; CTimeSigTrack::~CTimeSigTrack
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69507
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69507:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCTimeSigTrack@@QAEPAXI@Z ENDP			; CTimeSigTrack::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ ; `string'
EXTRN	_CLSID_DirectMusicTimeSigTrack:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CTimeSigTrack@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetClassID@CTimeSigTrack@@UAGJPAU_GUID@@@Z@4QBDB DB 'C'
	DB	'TimeSigTrack::GetClassID', 00H		; `CTimeSigTrack::GetClassID'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT
??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pClassID', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetClassID@CTimeSigTrack@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_pClassID$ = 12
?GetClassID@CTimeSigTrack@@UAGJPAU_GUID@@@Z PROC NEAR	; CTimeSigTrack::GetClassID, COMDAT

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  : 	V_INAME(CTimeSigTrack::GetClassID);
; 206  : 	V_PTR_WRITE(pClassID, CLSID); 

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pClassID$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L69515
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetClassID@CTimeSigTrack@@UAGJPAU_GUID@@@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L69515:

; 207  : 	*pClassID = CLSID_DirectMusicTimeSigTrack;

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _pClassID$[ebp]
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicTimeSigTrack
  00034	89 11		 mov	 DWORD PTR [ecx], edx
  00036	a1 04 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicTimeSigTrack+4
  0003b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0003e	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicTimeSigTrack+8
  00044	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00047	a1 0c 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicTimeSigTrack+12
  0004c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 208  : 	return S_OK;

  0004f	33 c0		 xor	 eax, eax

; 209  : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?GetClassID@CTimeSigTrack@@UAGJPAU_GUID@@@Z ENDP	; CTimeSigTrack::GetClassID
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsDirty@CTimeSigTrack@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?IsDirty@CTimeSigTrack@@UAGJXZ PROC NEAR		; CTimeSigTrack::IsDirty, COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  : 	return S_FALSE;

  00003	b8 01 00 00 00	 mov	 eax, 1

; 217  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?IsDirty@CTimeSigTrack@@UAGJXZ ENDP			; CTimeSigTrack::IsDirty
_TEXT	ENDS
PUBLIC	??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ ; `string'
PUBLIC	?LoadTimeSigList@CTimeSigTrack@@IAEJPAVCRiffParser@@J@Z ; CTimeSigTrack::LoadTimeSigList
PUBLIC	??_C@_0DK@MIJKGBNN@Error?3?5Failure?5reading?5bad?5data?5@ ; `string'
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
EXTRN	_IsBadCodePtr@4:NEAR
EXTRN	??0CRiffParser@@QAE@PAUIStream@@@Z:NEAR		; CRiffParser::CRiffParser
EXTRN	?NextChunk@CRiffParser@@QAEHPAJ@Z:NEAR		; CRiffParser::NextChunk
EXTRN	?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z:NEAR	; CRiffParser::EnterList
EXTRN	?LeaveList@CRiffParser@@QAEXXZ:NEAR		; CRiffParser::LeaveList
;	COMDAT ?__szValidateInterfaceName@?1??Load@CTimeSigTrack@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Load@CTimeSigTrack@@UAGJPAUIStream@@@Z@4QBDB DB 'C'
	DB	'TimeSigTrack::Load', 00H			; `CTimeSigTrack::Load'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT
??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pIStream', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@MIJKGBNN@Error?3?5Failure?5reading?5bad?5data?5@
CONST	SEGMENT
??_C@_0DK@MIJKGBNN@Error?3?5Failure?5reading?5bad?5data?5@ DB 'Error: Fai'
	DB	'lure reading bad data in time signature track.', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Load@CTimeSigTrack@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT
tv145 = -108
_ckNext$69567 = -104
_hr$ = -68
_Parser$ = -64
_ckMain$ = -32
_this$ = 8
_pIStream$ = 12
?Load@CTimeSigTrack@@UAGJPAUIStream@@@Z PROC NEAR	; CTimeSigTrack::Load, COMDAT

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH

; 235  : 	V_INAME(CTimeSigTrack::Load);
; 236  : 	V_INTERFACE(pIStream);

  00006	6a 04		 push	 4
  00008	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69529
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CTimeSigTrack@@UAGJPAUIStream@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69529:
  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003b	85 c0		 test	 eax, eax
  0003d	74 19		 je	 SHORT $L69532
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CTimeSigTrack@@UAGJPAUIStream@@@Z@4QBDB
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00049	6a ff		 push	 -1
  0004b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	e8 00 00 00 00	 call	 _DebugBreak@0
$L69532:
  00058	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00065	85 c0		 test	 eax, eax
  00067	74 19		 je	 SHORT $L69534
  00069	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CTimeSigTrack@@UAGJPAUIStream@@@Z@4QBDB
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00073	6a ff		 push	 -1
  00075	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	e8 00 00 00 00	 call	 _DebugBreak@0
$L69534:

; 237  : 
; 238  :     CRiffParser Parser(pIStream);

  00082	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00085	50		 push	 eax
  00086	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  00089	e8 00 00 00 00	 call	 ??0CRiffParser@@QAE@PAUIStream@@@Z ; CRiffParser::CRiffParser

; 239  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	83 c1 14	 add	 ecx, 20			; 00000014H
  00094	51		 push	 ecx
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 240  : 	m_dwValidate++; // used to validate state data that's out there

  0009b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0009e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000a1	83 c0 01	 add	 eax, 1
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 241  :     RIFFIO ckMain;
; 242  : 
; 243  :     HRESULT hr = S_OK;

  000aa	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 244  : 
; 245  :     Parser.EnterList(&ckMain);  

  000b1	8d 55 e0	 lea	 edx, DWORD PTR _ckMain$[ebp]
  000b4	52		 push	 edx
  000b5	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000b8	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList

; 246  :     if (Parser.NextChunk(&hr))

  000bd	8d 45 bc	 lea	 eax, DWORD PTR _hr$[ebp]
  000c0	50		 push	 eax
  000c1	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  000c4	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  000c9	85 c0		 test	 eax, eax
  000cb	0f 84 9a 00 00
	00		 je	 $L69539

; 247  :     { 
; 248  :  		if (ckMain.ckid == DMUS_FOURCC_TIMESIG_CHUNK)

  000d1	81 7d e0 74 69
	6d 73		 cmp	 DWORD PTR _ckMain$[ebp], 1936550260 ; 736d6974H
  000d8	75 15		 jne	 SHORT $L69548

; 249  :         {
; 250  :             hr = LoadTimeSigList(&Parser,ckMain.cksize);

  000da	8b 4d e4	 mov	 ecx, DWORD PTR _ckMain$[ebp+4]
  000dd	51		 push	 ecx
  000de	8d 55 c0	 lea	 edx, DWORD PTR _Parser$[ebp]
  000e1	52		 push	 edx
  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	e8 00 00 00 00	 call	 ?LoadTimeSigList@CTimeSigTrack@@IAEJPAVCRiffParser@@J@Z ; CTimeSigTrack::LoadTimeSigList
  000ea	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 251  :         }
; 252  :         else if ((ckMain.ckid == FOURCC_LIST) && 

  000ed	eb 7c		 jmp	 SHORT $L69539
$L69548:

; 253  :             (ckMain.fccType == DMUS_FOURCC_TIMESIGTRACK_LIST))

  000ef	81 7d e0 4c 49
	53 54		 cmp	 DWORD PTR _ckMain$[ebp], 1414744396 ; 5453494cH
  000f6	75 5d		 jne	 SHORT $L69566
  000f8	81 7d e8 54 49
	4d 53		 cmp	 DWORD PTR _ckMain$[ebp+8], 1397573972 ; 534d4954H
  000ff	75 54		 jne	 SHORT $L69566

; 254  :         {
; 255  :             Clear();

  00101	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00104	e8 00 00 00 00	 call	 ?Clear@CTimeSigTrack@@IAEXXZ ; CTimeSigTrack::Clear

; 256  : 	        RIFFIO ckNext;    // Descends into the children chunks.
; 257  :             Parser.EnterList(&ckNext);

  00109	8d 45 98	 lea	 eax, DWORD PTR _ckNext$69567[ebp]
  0010c	50		 push	 eax
  0010d	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  00110	e8 00 00 00 00	 call	 ?EnterList@CRiffParser@@QAEXPAU_RIFFIO@@@Z ; CRiffParser::EnterList
$L69569:

; 258  :             while (Parser.NextChunk(&hr))

  00115	8d 4d bc	 lea	 ecx, DWORD PTR _hr$[ebp]
  00118	51		 push	 ecx
  00119	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  0011c	e8 00 00 00 00	 call	 ?NextChunk@CRiffParser@@QAEHPAJ@Z ; CRiffParser::NextChunk
  00121	85 c0		 test	 eax, eax
  00123	74 26		 je	 SHORT $L69570

; 259  :             {
; 260  : 		        switch(ckNext.ckid)
; 261  : 		        {

  00125	8b 55 98	 mov	 edx, DWORD PTR _ckNext$69567[ebp]
  00128	89 55 94	 mov	 DWORD PTR tv145[ebp], edx
  0012b	81 7d 94 74 69
	6d 73		 cmp	 DWORD PTR tv145[ebp], 1936550260 ; 736d6974H
  00132	74 02		 je	 SHORT $L69583
  00134	eb 13		 jmp	 SHORT $L69572
$L69583:

; 262  :                 case DMUS_FOURCC_TIMESIG_CHUNK :
; 263  :                     hr = LoadTimeSigList(&Parser,ckNext.cksize);

  00136	8b 45 9c	 mov	 eax, DWORD PTR _ckNext$69567[ebp+4]
  00139	50		 push	 eax
  0013a	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  0013d	51		 push	 ecx
  0013e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	e8 00 00 00 00	 call	 ?LoadTimeSigList@CTimeSigTrack@@IAEJPAVCRiffParser@@J@Z ; CTimeSigTrack::LoadTimeSigList
  00146	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax
$L69572:

; 264  :                     break;
; 265  :                 }    
; 266  :             }

  00149	eb ca		 jmp	 SHORT $L69569
$L69570:

; 267  :             Parser.LeaveList();

  0014b	8d 4d c0	 lea	 ecx, DWORD PTR _Parser$[ebp]
  0014e	e8 00 00 00 00	 call	 ?LeaveList@CRiffParser@@QAEXXZ ; CRiffParser::LeaveList

; 268  :         }
; 269  :         else

  00153	eb 16		 jmp	 SHORT $L69539
$L69566:

; 270  :         {
; 271  :             Trace(1,"Error: Failure reading bad data in time signature track.\n");

  00155	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@MIJKGBNN@Error?3?5Failure?5reading?5bad?5data?5@
  0015a	6a 01		 push	 1
  0015c	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00161	83 c4 08	 add	 esp, 8

; 272  :             hr = DMUS_E_CHUNKNOTFOUND;

  00164	c7 45 bc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L69539:

; 273  :         }
; 274  :     }
; 275  : 
; 276  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  0016b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0016e	83 c2 14	 add	 edx, 20			; 00000014H
  00171	52		 push	 edx
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 277  : 	return hr;

  00178	8b 45 bc	 mov	 eax, DWORD PTR _hr$[ebp]

; 278  : }

  0017b	8b e5		 mov	 esp, ebp
  0017d	5d		 pop	 ebp
  0017e	c2 08 00	 ret	 8
?Load@CTimeSigTrack@@UAGJPAUIStream@@@Z ENDP		; CTimeSigTrack::Load
_TEXT	ENDS
PUBLIC	??_C@_0CO@NPIADNEG@Error?3?5Failure?5reading?5time?5sign@ ; `string'
PUBLIC	??_C@_0EH@JCFONBI@Warning?3?5invalid?5content?3?5DMUS_I@ ; `string'
PUBLIC	??_C@_0DM@FBCFGGNM@Warning?3?5invalid?5content?3?5DMUS_I@ ; `string'
PUBLIC	??_C@_0EE@NLDDFOKP@Warning?3?5invalid?5content?3?5DMUS_I@ ; `string'
EXTRN	?Read@CRiffParser@@QAEJPAXK@Z:NEAR		; CRiffParser::Read
EXTRN	?Skip@CRiffParser@@QAEJK@Z:NEAR			; CRiffParser::Skip
;	COMDAT ??_C@_0CO@NPIADNEG@Error?3?5Failure?5reading?5time?5sign@
CONST	SEGMENT
??_C@_0CO@NPIADNEG@Error?3?5Failure?5reading?5time?5sign@ DB 'Error: Fail'
	DB	'ure reading time signature track.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@JCFONBI@Warning?3?5invalid?5content?3?5DMUS_I@
CONST	SEGMENT
??_C@_0EH@JCFONBI@Warning?3?5invalid?5content?3?5DMUS_I@ DB 'Warning: inv'
	DB	'alid content: DMUS_IO_TIMESIGNATURE_ITEM.bBeatsPerMeasure', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@FBCFGGNM@Warning?3?5invalid?5content?3?5DMUS_I@
CONST	SEGMENT
??_C@_0DM@FBCFGGNM@Warning?3?5invalid?5content?3?5DMUS_I@ DB 'Warning: in'
	DB	'valid content: DMUS_IO_TIMESIGNATURE_ITEM.bBeat', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@NLDDFOKP@Warning?3?5invalid?5content?3?5DMUS_I@
CONST	SEGMENT
??_C@_0EE@NLDDFOKP@Warning?3?5invalid?5content?3?5DMUS_I@ DB 'Warning: in'
	DB	'valid content: DMUS_IO_TIMESIGNATURE_ITEM.wGridsPerBeat', 0aH
	DB	00H						; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?LoadTimeSigList@CTimeSigTrack@@IAEJPAVCRiffParser@@J@Z
_TEXT	SEGMENT
tv172 = -52
tv81 = -48
_this$ = -44
$T70388 = -40
$T70387 = -36
$T70384 = -32
_pCopy$69631 = -28
_pNew$69611 = -24
_pTop$69629 = -20
_dwRead$69598 = -16
_dwSeek$69599 = -12
_hr$ = -8
_dwSubSize$ = -4
_pParser$ = 8
_lChunkSize$ = 12
?LoadTimeSigList@CTimeSigTrack@@IAEJPAVCRiffParser@@J@Z PROC NEAR ; CTimeSigTrack::LoadTimeSigList, COMDAT
; _this$ = ecx

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 283  : 	HRESULT hr;
; 284  : 
; 285  : 	// copy contents of the stream into the list.
; 286  : 	DWORD dwSubSize;
; 287  : 	// read in the size of the data structures
; 288  : 	hr = pParser->Read( &dwSubSize, sizeof(DWORD));

  00009	6a 04		 push	 4
  0000b	8d 45 fc	 lea	 eax, DWORD PTR _dwSubSize$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00012	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  00017	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 289  :     if (SUCCEEDED(hr))

  0001a	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0001e	0f 8c f9 01 00
	00		 jl	 $L69596

; 290  :     {
; 291  : 	    lChunkSize -= sizeof(DWORD);

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _lChunkSize$[ebp]
  00027	83 e9 04	 sub	 ecx, 4
  0002a	89 4d 0c	 mov	 DWORD PTR _lChunkSize$[ebp], ecx

; 292  : 
; 293  : 	    DWORD dwRead, dwSeek;
; 294  : 	    if( dwSubSize > sizeof(DMUS_IO_TIMESIGNATURE_ITEM) )

  0002d	83 7d fc 08	 cmp	 DWORD PTR _dwSubSize$[ebp], 8
  00031	76 12		 jbe	 SHORT $L69601

; 295  : 	    {
; 296  : 		    dwRead = sizeof(DMUS_IO_TIMESIGNATURE_ITEM);

  00033	c7 45 f0 08 00
	00 00		 mov	 DWORD PTR _dwRead$69598[ebp], 8

; 297  : 		    dwSeek = dwSubSize - dwRead;

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _dwSubSize$[ebp]
  0003d	2b 55 f0	 sub	 edx, DWORD PTR _dwRead$69598[ebp]
  00040	89 55 f4	 mov	 DWORD PTR _dwSeek$69599[ebp], edx

; 298  : 	    }
; 299  : 	    else

  00043	eb 0d		 jmp	 SHORT $L69603
$L69601:

; 300  : 	    {
; 301  : 		    dwRead = dwSubSize;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _dwSubSize$[ebp]
  00048	89 45 f0	 mov	 DWORD PTR _dwRead$69598[ebp], eax

; 302  : 		    dwSeek = 0;

  0004b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwSeek$69599[ebp], 0
$L69603:

; 303  : 	    }
; 304  : 	    if( 0 == dwRead )

  00052	83 7d f0 00	 cmp	 DWORD PTR _dwRead$69598[ebp], 0
  00056	75 1b		 jne	 SHORT $L69609

; 305  : 	    {
; 306  :             Trace(1,"Error: Failure reading time signature track.\n");

  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@NPIADNEG@Error?3?5Failure?5reading?5time?5sign@
  0005d	6a 01		 push	 1
  0005f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00064	83 c4 08	 add	 esp, 8

; 307  : 		    hr = DMUS_E_CANNOTREAD;

  00067	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 308  : 	    }
; 309  :         else

  0006e	e9 aa 01 00 00	 jmp	 $L69596
$L69609:

; 310  :         {
; 311  : 	        while( lChunkSize > 0 )

  00073	83 7d 0c 00	 cmp	 DWORD PTR _lChunkSize$[ebp], 0
  00077	0f 8e 16 01 00
	00		 jle	 $L69610

; 312  : 	        {
; 313  :                 CTimeSigItem *pNew = new CTimeSigItem;

  0007d	6a 0c		 push	 12			; 0000000cH
  0007f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00084	83 c4 04	 add	 esp, 4
  00087	89 45 e0	 mov	 DWORD PTR $T70384[ebp], eax
  0008a	83 7d e0 00	 cmp	 DWORD PTR $T70384[ebp], 0
  0008e	74 0d		 je	 SHORT $L70385
  00090	8b 4d e0	 mov	 ecx, DWORD PTR $T70384[ebp]
  00093	e8 00 00 00 00	 call	 ??0CTimeSigItem@@QAE@XZ	; CTimeSigItem::CTimeSigItem
  00098	89 45 d0	 mov	 DWORD PTR tv81[ebp], eax
  0009b	eb 07		 jmp	 SHORT $L70386
$L70385:
  0009d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$L70386:
  000a4	8b 4d d0	 mov	 ecx, DWORD PTR tv81[ebp]
  000a7	89 4d e8	 mov	 DWORD PTR _pNew$69611[ebp], ecx

; 314  :                 if (pNew)

  000aa	83 7d e8 00	 cmp	 DWORD PTR _pNew$69611[ebp], 0
  000ae	0f 84 da 00 00
	00		 je	 $L69614

; 315  :                 {
; 316  : 		            if( FAILED( pParser->Read( &pNew->m_TimeSig, dwRead )))

  000b4	8b 55 f0	 mov	 edx, DWORD PTR _dwRead$69598[ebp]
  000b7	52		 push	 edx
  000b8	8b 45 e8	 mov	 eax, DWORD PTR _pNew$69611[ebp]
  000bb	83 c0 04	 add	 eax, 4
  000be	50		 push	 eax
  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  000c2	e8 00 00 00 00	 call	 ?Read@CRiffParser@@QAEJPAXK@Z ; CRiffParser::Read
  000c7	85 c0		 test	 eax, eax
  000c9	7d 1e		 jge	 SHORT $L69616

; 317  : 		            {
; 318  :                         delete pNew;

  000cb	8b 4d e8	 mov	 ecx, DWORD PTR _pNew$69611[ebp]
  000ce	89 4d dc	 mov	 DWORD PTR $T70387[ebp], ecx
  000d1	8b 55 dc	 mov	 edx, DWORD PTR $T70387[ebp]
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000da	83 c4 04	 add	 esp, 4

; 319  : 			            hr = DMUS_E_CANNOTREAD;

  000dd	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 320  : 			            break;

  000e4	e9 aa 00 00 00	 jmp	 $L69610
$L69616:

; 321  : 		            }
; 322  : 				    // make sure this time sig is OK
; 323  : 				    if (!pNew->m_TimeSig.bBeatsPerMeasure)

  000e9	8b 45 e8	 mov	 eax, DWORD PTR _pNew$69611[ebp]
  000ec	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  000f0	85 c9		 test	 ecx, ecx
  000f2	75 16		 jne	 SHORT $L69619

; 324  : 				    {
; 325  : 					    Trace(1, "Warning: invalid content: DMUS_IO_TIMESIGNATURE_ITEM.bBeatsPerMeasure\n");

  000f4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@JCFONBI@Warning?3?5invalid?5content?3?5DMUS_I@
  000f9	6a 01		 push	 1
  000fb	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00100	83 c4 08	 add	 esp, 8

; 326  : 					    pNew->m_TimeSig.bBeatsPerMeasure = 4;

  00103	8b 55 e8	 mov	 edx, DWORD PTR _pNew$69611[ebp]
  00106	c6 42 08 04	 mov	 BYTE PTR [edx+8], 4
$L69619:

; 327  : 				    }
; 328  : 				    if (!pNew->m_TimeSig.bBeat)

  0010a	8b 45 e8	 mov	 eax, DWORD PTR _pNew$69611[ebp]
  0010d	0f b6 48 09	 movzx	 ecx, BYTE PTR [eax+9]
  00111	85 c9		 test	 ecx, ecx
  00113	75 16		 jne	 SHORT $L69621

; 329  : 				    {
; 330  : 					    Trace(1, "Warning: invalid content: DMUS_IO_TIMESIGNATURE_ITEM.bBeat\n");

  00115	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@FBCFGGNM@Warning?3?5invalid?5content?3?5DMUS_I@
  0011a	6a 01		 push	 1
  0011c	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00121	83 c4 08	 add	 esp, 8

; 331  : 					    pNew->m_TimeSig.bBeat = 4;

  00124	8b 55 e8	 mov	 edx, DWORD PTR _pNew$69611[ebp]
  00127	c6 42 09 04	 mov	 BYTE PTR [edx+9], 4
$L69621:

; 332  : 				    }
; 333  : 				    if (!pNew->m_TimeSig.wGridsPerBeat)

  0012b	8b 45 e8	 mov	 eax, DWORD PTR _pNew$69611[ebp]
  0012e	0f b7 48 0a	 movzx	 ecx, WORD PTR [eax+10]
  00132	85 c9		 test	 ecx, ecx
  00134	75 18		 jne	 SHORT $L69623

; 334  : 				    {
; 335  : 					    Trace(1, "Warning: invalid content: DMUS_IO_TIMESIGNATURE_ITEM.wGridsPerBeat\n");

  00136	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@NLDDFOKP@Warning?3?5invalid?5content?3?5DMUS_I@
  0013b	6a 01		 push	 1
  0013d	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00142	83 c4 08	 add	 esp, 8

; 336  : 					    pNew->m_TimeSig.wGridsPerBeat = 4;

  00145	8b 55 e8	 mov	 edx, DWORD PTR _pNew$69611[ebp]
  00148	66 c7 42 0a 04
	00		 mov	 WORD PTR [edx+10], 4
$L69623:

; 337  : 				    }
; 338  :                     m_TSigEventList.AddHead(pNew); 

  0014e	8b 45 e8	 mov	 eax, DWORD PTR _pNew$69611[ebp]
  00151	50		 push	 eax
  00152	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00155	83 c1 08	 add	 ecx, 8
  00158	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead

; 339  : 		            lChunkSize -= dwRead;

  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _lChunkSize$[ebp]
  00160	2b 4d f0	 sub	 ecx, DWORD PTR _dwRead$69598[ebp]
  00163	89 4d 0c	 mov	 DWORD PTR _lChunkSize$[ebp], ecx

; 340  : 		            if( dwSeek )

  00166	83 7d f4 00	 cmp	 DWORD PTR _dwSeek$69599[ebp], 0
  0016a	74 22		 je	 SHORT $L69614

; 341  : 		            {
; 342  : 			            if( FAILED( pParser->Skip(dwSeek)))

  0016c	8b 55 f4	 mov	 edx, DWORD PTR _dwSeek$69599[ebp]
  0016f	52		 push	 edx
  00170	8b 4d 08	 mov	 ecx, DWORD PTR _pParser$[ebp]
  00173	e8 00 00 00 00	 call	 ?Skip@CRiffParser@@QAEJK@Z ; CRiffParser::Skip
  00178	85 c0		 test	 eax, eax
  0017a	7d 09		 jge	 SHORT $L69627

; 343  : 			            {
; 344  : 				            hr = DMUS_E_CANNOTSEEK;

  0017c	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 345  : 				            break;

  00183	eb 0e		 jmp	 SHORT $L69610
$L69627:

; 346  : 			            }
; 347  : 			            lChunkSize -= dwSeek;

  00185	8b 45 0c	 mov	 eax, DWORD PTR _lChunkSize$[ebp]
  00188	2b 45 f4	 sub	 eax, DWORD PTR _dwSeek$69599[ebp]
  0018b	89 45 0c	 mov	 DWORD PTR _lChunkSize$[ebp], eax
$L69614:

; 348  : 		            }
; 349  : 		        }
; 350  : 	        }

  0018e	e9 e0 fe ff ff	 jmp	 $L69609
$L69610:

; 351  :             m_TSigEventList.Reverse();

  00193	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00196	83 c1 08	 add	 ecx, 8
  00199	e8 00 00 00 00	 call	 ?Reverse@AList@@QAEXXZ	; AList::Reverse

; 352  :             // If there is no time signature at the start, make a copy of the 
; 353  :             // first time signature and stick it there. This resolves a bug in 6.1 
; 354  :             // where notification messages and GetParam() were inconsistent
; 355  :             // in their behavior under this circumstance. This ensures they behave
; 356  :             // the same.
; 357  :             CTimeSigItem *pTop = m_TSigEventList.GetHead();

  0019e	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  001a1	83 c1 08	 add	 ecx, 8
  001a4	e8 00 00 00 00	 call	 ?GetHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ ; CTimeSigList::GetHead
  001a9	89 45 ec	 mov	 DWORD PTR _pTop$69629[ebp], eax

; 358  :             if (pTop && (pTop->m_TimeSig.lTime > 0))

  001ac	83 7d ec 00	 cmp	 DWORD PTR _pTop$69629[ebp], 0
  001b0	74 6b		 je	 SHORT $L69596
  001b2	8b 4d ec	 mov	 ecx, DWORD PTR _pTop$69629[ebp]
  001b5	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  001b9	7e 62		 jle	 SHORT $L69596

; 359  :             {
; 360  :                 CTimeSigItem *pCopy = new CTimeSigItem;

  001bb	6a 0c		 push	 12			; 0000000cH
  001bd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001c2	83 c4 04	 add	 esp, 4
  001c5	89 45 d8	 mov	 DWORD PTR $T70388[ebp], eax
  001c8	83 7d d8 00	 cmp	 DWORD PTR $T70388[ebp], 0
  001cc	74 0d		 je	 SHORT $L70389
  001ce	8b 4d d8	 mov	 ecx, DWORD PTR $T70388[ebp]
  001d1	e8 00 00 00 00	 call	 ??0CTimeSigItem@@QAE@XZ	; CTimeSigItem::CTimeSigItem
  001d6	89 45 cc	 mov	 DWORD PTR tv172[ebp], eax
  001d9	eb 07		 jmp	 SHORT $L70390
$L70389:
  001db	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv172[ebp], 0
$L70390:
  001e2	8b 55 cc	 mov	 edx, DWORD PTR tv172[ebp]
  001e5	89 55 e4	 mov	 DWORD PTR _pCopy$69631[ebp], edx

; 361  :                 if (pCopy)

  001e8	83 7d e4 00	 cmp	 DWORD PTR _pCopy$69631[ebp], 0
  001ec	74 2f		 je	 SHORT $L69596

; 362  :                 {
; 363  :                     *pCopy = *pTop;

  001ee	8b 45 ec	 mov	 eax, DWORD PTR _pTop$69629[ebp]
  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _pCopy$69631[ebp]
  001f4	8b 10		 mov	 edx, DWORD PTR [eax]
  001f6	89 11		 mov	 DWORD PTR [ecx], edx
  001f8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001fb	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  001fe	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00201	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 364  :                     pCopy->m_TimeSig.lTime = 0;

  00204	8b 4d e4	 mov	 ecx, DWORD PTR _pCopy$69631[ebp]
  00207	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 365  :                     m_TSigEventList.AddHead(pCopy);

  0020e	8b 55 e4	 mov	 edx, DWORD PTR _pCopy$69631[ebp]
  00211	52		 push	 edx
  00212	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00215	83 c1 08	 add	 ecx, 8
  00218	e8 00 00 00 00	 call	 ?AddHead@AList@@QAEXPAVAListItem@@@Z ; AList::AddHead
$L69596:

; 366  :                 }                
; 367  :             }
; 368  :         }
; 369  :     }
; 370  : 	return hr;

  0021d	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 371  : }

  00220	8b e5		 mov	 esp, ebp
  00222	5d		 pop	 ebp
  00223	c2 08 00	 ret	 8
?LoadTimeSigList@CTimeSigTrack@@IAEJPAVCRiffParser@@J@Z ENDP ; CTimeSigTrack::LoadTimeSigList
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Save@CTimeSigTrack@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT
_this$ = 8
_pIStream$ = 12
_fClearDirty$ = 16
?Save@CTimeSigTrack@@UAGJPAUIStream@@H@Z PROC NEAR	; CTimeSigTrack::Save, COMDAT

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 375  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 376  : }

  00008	5d		 pop	 ebp
  00009	c2 0c 00	 ret	 12			; 0000000cH
?Save@CTimeSigTrack@@UAGJPAUIStream@@H@Z ENDP		; CTimeSigTrack::Save
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CTimeSigTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT
_this$ = 8
_pcbSize$ = 12
?GetSizeMax@CTimeSigTrack@@UAGJPAT_ULARGE_INTEGER@@@Z PROC NEAR ; CTimeSigTrack::GetSizeMax, COMDAT

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 380  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 381  : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?GetSizeMax@CTimeSigTrack@@UAGJPAT_ULARGE_INTEGER@@@Z ENDP ; CTimeSigTrack::GetSizeMax
_TEXT	ENDS
PUBLIC	??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@ ; `string'
EXTRN	_GUID_TimeSignature:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??IsParamSupported@CTimeSigTrack@@UAGJABU_GUID@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??IsParamSupported@CTimeSigTrack@@UAGJABU_GUID@@@Z@4QBDB DB 'C'
	DB	'TimeSigTrack::IsParamSupported', 00H	; `CTimeSigTrack::IsParamSupported'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
CONST	SEGMENT
??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@ DB '%'
	DB	's: Invalid pointer (void*)&rguid', 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?IsParamSupported@CTimeSigTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguid$ = 12
?IsParamSupported@CTimeSigTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CTimeSigTrack::IsParamSupported, COMDAT

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 388  : 	V_INAME(CTimeSigTrack::IsParamSupported);
; 389  : 	V_REFGUID(rguid);

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L69654
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??IsParamSupported@CTimeSigTrack@@UAGJABU_GUID@@@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L69654:

; 390  : 
; 391  :     if (m_fStateSetBySetParam)

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00032	74 3c		 je	 SHORT $L69656

; 392  :     {
; 393  : 	    if( m_fActive )

  00034	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00037	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  0003b	74 18		 je	 SHORT $L69657

; 394  : 	    {
; 395  : 		    if( rguid == GUID_TimeSignature ) return S_OK;

  0003d	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_TimeSignature
  00042	8b 45 0c	 mov	 eax, DWORD PTR _rguid$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _==@8
  0004b	85 c0		 test	 eax, eax
  0004d	74 04		 je	 SHORT $L69658
  0004f	33 c0		 xor	 eax, eax
  00051	eb 38		 jmp	 SHORT $L69649
$L69658:

; 396  : #ifdef DXAPI
; 397  : 		    if( rguid == GUID_DisableTimeSig ) return S_OK;
; 398  : 		    if( rguid == GUID_EnableTimeSig ) return DMUS_E_TYPE_DISABLED;
; 399  : #endif
; 400  : 	    }
; 401  : 	    else

  00053	eb 19		 jmp	 SHORT $L69660
$L69657:

; 402  : 	    {
; 403  : 		    if( rguid == GUID_TimeSignature ) return DMUS_E_TYPE_DISABLED;

  00055	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_TimeSignature
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _rguid$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 _==@8
  00063	85 c0		 test	 eax, eax
  00065	74 07		 je	 SHORT $L69660
  00067	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  0006c	eb 1d		 jmp	 SHORT $L69649
$L69660:

; 404  : #ifdef DXAPI
; 405  : 		    if( rguid == GUID_EnableTimeSig ) return S_OK;
; 406  : 		    if( rguid == GUID_DisableTimeSig ) return DMUS_E_TYPE_DISABLED;
; 407  : #endif
; 408  : 	    }
; 409  :     }
; 410  :     else

  0006e	eb 16		 jmp	 SHORT $L69663
$L69656:

; 411  :     {
; 412  : 		if (rguid == GUID_TimeSignature ) return S_OK;

  00070	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_TimeSignature
  00075	8b 55 0c	 mov	 edx, DWORD PTR _rguid$[ebp]
  00078	52		 push	 edx
  00079	e8 00 00 00 00	 call	 _==@8
  0007e	85 c0		 test	 eax, eax
  00080	74 04		 je	 SHORT $L69663
  00082	33 c0		 xor	 eax, eax
  00084	eb 05		 jmp	 SHORT $L69649
$L69663:

; 413  : #ifdef DXAPI
; 414  : 		if (rguid == GUID_DisableTimeSig ) return S_OK;
; 415  : 		if (rguid == GUID_EnableTimeSig ) return S_OK;
; 416  : #endif
; 417  :     }
; 418  : 	return DMUS_E_TYPE_UNSUPPORTED;

  00086	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
$L69649:

; 419  : }

  0008b	5d		 pop	 ebp
  0008c	c2 08 00	 ret	 8
?IsParamSupported@CTimeSigTrack@@UAGJABU_GUID@@@Z ENDP	; CTimeSigTrack::IsParamSupported
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Init@CTimeSigTrack@@UAGJPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT
_this$ = 8
_pSegment$ = 12
?Init@CTimeSigTrack@@UAGJPAUIDirectMusicSegment@@@Z PROC NEAR ; CTimeSigTrack::Init, COMDAT

; 425  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 426  : 	return S_OK;

  00003	33 c0		 xor	 eax, eax

; 427  : }

  00005	5d		 pop	 ebp
  00006	c2 08 00	 ret	 8
?Init@CTimeSigTrack@@UAGJPAUIDirectMusicSegment@@@Z ENDP ; CTimeSigTrack::Init
_TEXT	ENDS
PUBLIC	??0CTimeSigStateData@@QAE@XZ			; CTimeSigStateData::CTimeSigStateData
PUBLIC	??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@ ; `string'
PUBLIC	??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@ ; `string'
PUBLIC	??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::InitPlay', 00H		; `CTimeSigTrack::InitPlay'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
CONST	SEGMENT
??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@ DB '%s: Inva'
	DB	'lid pointer ppStateData', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
CONST	SEGMENT
??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@ DB '%s: Inval'
	DB	'id pointer pSegmentState', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
CONST	SEGMENT
??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@ DB '%s: Inval'
	DB	'id pointer pPerformance', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT
tv153 = -12
$T70406 = -8
_pStateData$ = -4
_this$ = 8
_pSegmentState$ = 12
_pPerformance$ = 16
_ppStateData$ = 20
_dwTrackID$ = 24
_dwFlags$ = 28
?InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z PROC NEAR ; CTimeSigTrack::InitPlay, COMDAT

; 435  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 436  : 	V_INAME(IDirectMusicTrack::InitPlay);
; 437  : 	V_PTRPTR_WRITE(ppStateData);

  00006	6a 04		 push	 4
  00008	8b 45 14	 mov	 eax, DWORD PTR _ppStateData$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69683
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69683:

; 438  : 	V_INTERFACE(pSegmentState);

  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegmentState$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00039	85 c0		 test	 eax, eax
  0003b	74 19		 je	 SHORT $L69685
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  00047	6a ff		 push	 -1
  00049	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 _DebugBreak@0
$L69685:
  00056	6a 04		 push	 4
  00058	8b 55 0c	 mov	 edx, DWORD PTR _pSegmentState$[ebp]
  0005b	8b 02		 mov	 eax, DWORD PTR [edx]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00063	85 c0		 test	 eax, eax
  00065	74 19		 je	 SHORT $L69688
  00067	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  00071	6a ff		 push	 -1
  00073	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	e8 00 00 00 00	 call	 _DebugBreak@0
$L69688:
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegmentState$[ebp]
  00083	8b 11		 mov	 edx, DWORD PTR [ecx]
  00085	8b 02		 mov	 eax, DWORD PTR [edx]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0008d	85 c0		 test	 eax, eax
  0008f	74 19		 je	 SHORT $L69690
  00091	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  0009b	6a ff		 push	 -1
  0009d	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a5	e8 00 00 00 00	 call	 _DebugBreak@0
$L69690:

; 439  : 	V_INTERFACE(pPerformance);

  000aa	6a 04		 push	 4
  000ac	8b 4d 10	 mov	 ecx, DWORD PTR _pPerformance$[ebp]
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b5	85 c0		 test	 eax, eax
  000b7	74 19		 je	 SHORT $L69692
  000b9	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  000be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
  000c3	6a ff		 push	 -1
  000c5	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cd	e8 00 00 00 00	 call	 _DebugBreak@0
$L69692:
  000d2	6a 04		 push	 4
  000d4	8b 55 10	 mov	 edx, DWORD PTR _pPerformance$[ebp]
  000d7	8b 02		 mov	 eax, DWORD PTR [edx]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000df	85 c0		 test	 eax, eax
  000e1	74 19		 je	 SHORT $L69695
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  000e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
  000ed	6a ff		 push	 -1
  000ef	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f7	e8 00 00 00 00	 call	 _DebugBreak@0
$L69695:
  000fc	8b 4d 10	 mov	 ecx, DWORD PTR _pPerformance$[ebp]
  000ff	8b 11		 mov	 edx, DWORD PTR [ecx]
  00101	8b 02		 mov	 eax, DWORD PTR [edx]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00109	85 c0		 test	 eax, eax
  0010b	74 19		 je	 SHORT $L69697
  0010d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00112	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
  00117	6a ff		 push	 -1
  00119	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00121	e8 00 00 00 00	 call	 _DebugBreak@0
$L69697:

; 440  : 
; 441  :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00126	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	83 c1 10	 add	 ecx, 16			; 00000010H
  0012c	51		 push	 ecx
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 442  : 	CTimeSigStateData* pStateData;
; 443  : 	pStateData = new CTimeSigStateData;

  00133	6a 24		 push	 36			; 00000024H
  00135	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0013a	83 c4 04	 add	 esp, 4
  0013d	89 45 f8	 mov	 DWORD PTR $T70406[ebp], eax
  00140	83 7d f8 00	 cmp	 DWORD PTR $T70406[ebp], 0
  00144	74 0d		 je	 SHORT $L70407
  00146	8b 4d f8	 mov	 ecx, DWORD PTR $T70406[ebp]
  00149	e8 00 00 00 00	 call	 ??0CTimeSigStateData@@QAE@XZ ; CTimeSigStateData::CTimeSigStateData
  0014e	89 45 f4	 mov	 DWORD PTR tv153[ebp], eax
  00151	eb 07		 jmp	 SHORT $L70408
$L70407:
  00153	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$L70408:
  0015a	8b 55 f4	 mov	 edx, DWORD PTR tv153[ebp]
  0015d	89 55 fc	 mov	 DWORD PTR _pStateData$[ebp], edx

; 444  : 	if( NULL == pStateData )

  00160	83 7d fc 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  00164	75 07		 jne	 SHORT $L69701

; 445  : 		return E_OUTOFMEMORY;

  00166	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  0016b	eb 78		 jmp	 SHORT $L69679
$L69701:

; 446  : 	*ppStateData = pStateData;

  0016d	8b 45 14	 mov	 eax, DWORD PTR _ppStateData$[ebp]
  00170	8b 4d fc	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  00173	89 08		 mov	 DWORD PTR [eax], ecx

; 447  :     if (m_fStateSetBySetParam)

  00175	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00178	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  0017c	74 0e		 je	 SHORT $L69703

; 448  :     {
; 449  :         pStateData->m_fActive = m_fActive;

  0017e	8b 45 fc	 mov	 eax, DWORD PTR _pStateData$[ebp]
  00181	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00184	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00187	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 450  :     }
; 451  :     else

  0018a	eb 13		 jmp	 SHORT $L69704
$L69703:

; 452  :     {
; 453  :         pStateData->m_fActive = !(dwFlags & (DMUS_SEGF_CONTROL | DMUS_SEGF_SECONDARY));

  0018c	8b 45 1c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0018f	25 80 02 00 00	 and	 eax, 640		; 00000280H
  00194	f7 d8		 neg	 eax
  00196	1b c0		 sbb	 eax, eax
  00198	40		 inc	 eax
  00199	8b 4d fc	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  0019c	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
$L69704:

; 454  :     }
; 455  : 	pStateData->m_dwVirtualTrackID = dwTrackID;

  0019f	8b 55 fc	 mov	 edx, DWORD PTR _pStateData$[ebp]
  001a2	8b 45 18	 mov	 eax, DWORD PTR _dwTrackID$[ebp]
  001a5	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 456  : 	pStateData->m_pPerformance = pPerformance; // weak reference, no addref.

  001a8	8b 4d fc	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  001ab	8b 55 10	 mov	 edx, DWORD PTR _pPerformance$[ebp]
  001ae	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 457  : 	pStateData->m_pSegState = pSegmentState; // weak reference, no addref.

  001b1	8b 45 fc	 mov	 eax, DWORD PTR _pStateData$[ebp]
  001b4	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegmentState$[ebp]
  001b7	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 458  : 	pStateData->m_pCurrentTSig = m_TSigEventList.GetHead();

  001ba	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001bd	83 c1 04	 add	 ecx, 4
  001c0	e8 00 00 00 00	 call	 ?GetHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ ; CTimeSigList::GetHead
  001c5	8b 55 fc	 mov	 edx, DWORD PTR _pStateData$[ebp]
  001c8	89 02		 mov	 DWORD PTR [edx], eax

; 459  : 	pStateData->m_dwValidate = m_dwValidate;

  001ca	8b 45 fc	 mov	 eax, DWORD PTR _pStateData$[ebp]
  001cd	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001d0	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001d3	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 460  :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  001d6	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001d9	83 c0 10	 add	 eax, 16			; 00000010H
  001dc	50		 push	 eax
  001dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 461  : 	return S_OK;

  001e3	33 c0		 xor	 eax, eax
$L69679:

; 462  : }

  001e5	8b e5		 mov	 esp, ebp
  001e7	5d		 pop	 ebp
  001e8	c2 18 00	 ret	 24			; 00000018H
?InitPlay@CTimeSigTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ENDP ; CTimeSigTrack::InitPlay
_TEXT	ENDS
PUBLIC	??_C@_0DJ@GKELFHD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0L@MIJOINAD@pStateData?$AA@		; `string'
PUBLIC	??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@ ; `string'
EXTRN	__imp__RtlAssert@16:NEAR
;	COMDAT ??_C@_0DJ@GKELFHD@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DJ@GKELFHD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pri'
	DB	'vate\windows\directx\dmusic\dmime\tsigtrk.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIJOINAD@pStateData?$AA@
CONST	SEGMENT
??_C@_0L@MIJOINAD@pStateData?$AA@ DB 'pStateData', 00H	; `string'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?6??EndPlay@CTimeSigTrack@@UAGJPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?6??EndPlay@CTimeSigTrack@@UAGJPAX@Z@4QBDB DB 'C'
	DB	'TimeSigTrack::EndPlay', 00H			; `CTimeSigTrack::EndPlay'::`7'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
CONST	SEGMENT
??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@ DB '%s: I'
	DB	'nvalid pointer pStateData', 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?EndPlay@CTimeSigTrack@@UAGJPAX@Z
_TEXT	SEGMENT
$T70412 = -8
_pSD$69718 = -4
_this$ = 8
_pStateData$ = 12
?EndPlay@CTimeSigTrack@@UAGJPAX@Z PROC NEAR		; CTimeSigTrack::EndPlay, COMDAT

; 466  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 467  : 	ASSERT( pStateData );

  00006	83 7d 0c 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  0000a	75 17		 jne	 SHORT $L69710
  0000c	6a 00		 push	 0
  0000e	68 d3 01 00 00	 push	 467			; 000001d3H
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GKELFHD@c?3?2xbox?2private?2windows?2directx?2@
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@MIJOINAD@pStateData?$AA@
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69710:

; 468  : 	if( pStateData )

  00023	83 7d 0c 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  00027	74 40		 je	 SHORT $L69713

; 469  : 	{
; 470  : 		V_INAME(CTimeSigTrack::EndPlay);
; 471  : 		V_BUFPTR_WRITE(pStateData, sizeof(CTimeSigStateData));

  00029	6a 24		 push	 36			; 00000024H
  0002b	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00034	85 c0		 test	 eax, eax
  00036	74 19		 je	 SHORT $L69717
  00038	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?6??EndPlay@CTimeSigTrack@@UAGJPAX@Z@4QBDB
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
  00042	6a ff		 push	 -1
  00044	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 _DebugBreak@0
$L69717:

; 472  : 		CTimeSigStateData* pSD = (CTimeSigStateData*)pStateData;

  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  00054	89 4d fc	 mov	 DWORD PTR _pSD$69718[ebp], ecx

; 473  : 		delete pSD;

  00057	8b 55 fc	 mov	 edx, DWORD PTR _pSD$69718[ebp]
  0005a	89 55 f8	 mov	 DWORD PTR $T70412[ebp], edx
  0005d	8b 45 f8	 mov	 eax, DWORD PTR $T70412[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00066	83 c4 04	 add	 esp, 4
$L69713:

; 474  : 	}
; 475  : 	return S_OK;

  00069	33 c0		 xor	 eax, eax

; 476  : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
?EndPlay@CTimeSigTrack@@UAGJPAX@Z ENDP			; CTimeSigTrack::EndPlay
_TEXT	ENDS
PUBLIC	?Seek@CTimeSigTrack@@IAGJPAXJH@Z		; CTimeSigTrack::Seek
PUBLIC	?NotificationMeasureBeat@CTimeSigTrack@@IAEJJJPAVCTimeSigStateData@@J@Z ; CTimeSigTrack::NotificationMeasureBeat
PUBLIC	??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@ ; `string'
EXTRN	_IID_IDirectMusicGraph:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::Play', 00H		; `CTimeSigTrack::Play'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
CONST	SEGMENT
??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@ DB '%s: Invali'
	DB	'd pointer pPerf', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
CONST	SEGMENT
??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@ DB '%s: Inval'
	DB	'id pointer pSegSt', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT
_pItem$69772 = -28
_pSD$ = -24
_pGraph$ = -20
_hr$ = -16
_mtNotification$ = -12
_pTimeSig$ = -8
_fSeek$ = -4
_this$ = 8
_pStateData$ = 12
_mtStart$ = 16
_mtEnd$ = 20
_mtOffset$ = 24
_dwFlags$ = 28
_pPerf$ = 32
_pSegSt$ = 36
_dwVirtualID$ = 40
?Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z PROC NEAR ; CTimeSigTrack::Play, COMDAT

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 489  : 	V_INAME(IDirectMusicTrack::Play);
; 490  : 	V_BUFPTR_WRITE( pStateData, sizeof(CTimeSigStateData));

  00006	6a 24		 push	 36			; 00000024H
  00008	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69736
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69736:

; 491  : 	V_INTERFACE(pPerf);

  0002e	6a 04		 push	 4
  00030	8b 4d 20	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00039	85 c0		 test	 eax, eax
  0003b	74 19		 je	 SHORT $L69738
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00047	6a ff		 push	 -1
  00049	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 _DebugBreak@0
$L69738:
  00056	6a 04		 push	 4
  00058	8b 55 20	 mov	 edx, DWORD PTR _pPerf$[ebp]
  0005b	8b 02		 mov	 eax, DWORD PTR [edx]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00063	85 c0		 test	 eax, eax
  00065	74 19		 je	 SHORT $L69741
  00067	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00071	6a ff		 push	 -1
  00073	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	e8 00 00 00 00	 call	 _DebugBreak@0
$L69741:
  00080	8b 4d 20	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00083	8b 11		 mov	 edx, DWORD PTR [ecx]
  00085	8b 02		 mov	 eax, DWORD PTR [edx]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0008d	85 c0		 test	 eax, eax
  0008f	74 19		 je	 SHORT $L69743
  00091	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  0009b	6a ff		 push	 -1
  0009d	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a5	e8 00 00 00 00	 call	 _DebugBreak@0
$L69743:

; 492  : 	V_INTERFACE(pSegSt);

  000aa	6a 04		 push	 4
  000ac	8b 4d 24	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b5	85 c0		 test	 eax, eax
  000b7	74 19		 je	 SHORT $L69745
  000b9	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000c3	6a ff		 push	 -1
  000c5	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cd	e8 00 00 00 00	 call	 _DebugBreak@0
$L69745:
  000d2	6a 04		 push	 4
  000d4	8b 55 24	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  000d7	8b 02		 mov	 eax, DWORD PTR [edx]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000df	85 c0		 test	 eax, eax
  000e1	74 19		 je	 SHORT $L69748
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000ed	6a ff		 push	 -1
  000ef	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f7	e8 00 00 00 00	 call	 _DebugBreak@0
$L69748:
  000fc	8b 4d 24	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  000ff	8b 11		 mov	 edx, DWORD PTR [ecx]
  00101	8b 02		 mov	 eax, DWORD PTR [edx]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00109	85 c0		 test	 eax, eax
  0010b	74 19		 je	 SHORT $L69750
  0010d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00112	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  00117	6a ff		 push	 -1
  00119	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00121	e8 00 00 00 00	 call	 _DebugBreak@0
$L69750:

; 493  : 
; 494  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  00126	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	83 c1 10	 add	 ecx, 16			; 00000010H
  0012c	51		 push	 ecx
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 495  : 	HRESULT hr = S_OK;

  00133	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 496  : 	IDirectMusicGraph* pGraph = NULL;

  0013a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pGraph$[ebp], 0

; 497  : 	DMUS_TIMESIG_PMSG* pTimeSig;
; 498  : 	CTimeSigStateData* pSD = (CTimeSigStateData*)pStateData;

  00141	8b 55 0c	 mov	 edx, DWORD PTR _pStateData$[ebp]
  00144	89 55 e8	 mov	 DWORD PTR _pSD$[ebp], edx

; 499  : 	MUSIC_TIME mtNotification = mtStart;

  00147	8b 45 10	 mov	 eax, DWORD PTR _mtStart$[ebp]
  0014a	89 45 f4	 mov	 DWORD PTR _mtNotification$[ebp], eax

; 500  : 	BOOL fSeek = (dwFlags & DMUS_TRACKF_SEEK) ? TRUE : FALSE;

  0014d	8b 4d 1c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00150	83 e1 01	 and	 ecx, 1
  00153	f7 d9		 neg	 ecx
  00155	1b c9		 sbb	 ecx, ecx
  00157	f7 d9		 neg	 ecx
  00159	89 4d fc	 mov	 DWORD PTR _fSeek$[ebp], ecx

; 501  : 
; 502  : 	// if mtStart is 0 and dwFlags contains DMUS_TRACKF_START, we want to be sure to
; 503  : 	// send out any negative time events. So, we'll set mtStart to -768.
; 504  : 	if( (mtStart == 0) && ( dwFlags & DMUS_TRACKF_START ))

  0015c	83 7d 10 00	 cmp	 DWORD PTR _mtStart$[ebp], 0
  00160	75 11		 jne	 SHORT $L69759
  00162	8b 55 1c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00165	83 e2 04	 and	 edx, 4
  00168	85 d2		 test	 edx, edx
  0016a	74 07		 je	 SHORT $L69759

; 505  : 	{
; 506  : 		mtStart = -768;

  0016c	c7 45 10 00 fd
	ff ff		 mov	 DWORD PTR _mtStart$[ebp], -768 ; fffffd00H
$L69759:

; 507  : 	}
; 508  : 
; 509  : 	if( pSD->m_dwValidate != m_dwValidate )

  00173	8b 45 e8	 mov	 eax, DWORD PTR _pSD$[ebp]
  00176	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00179	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0017c	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0017f	74 15		 je	 SHORT $L69760

; 510  : 	{
; 511  : 		pSD->m_dwValidate = m_dwValidate;

  00181	8b 45 e8	 mov	 eax, DWORD PTR _pSD$[ebp]
  00184	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00187	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0018a	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 512  : 		pSD->m_pCurrentTSig = NULL;

  0018d	8b 45 e8	 mov	 eax, DWORD PTR _pSD$[ebp]
  00190	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L69760:

; 513  : 	}
; 514  : 	// if the previous end time isn't the same as the current start time,
; 515  : 	// we need to seek to the right position.
; 516  : 	if( fSeek || ( pSD->m_mtPrevEnd != mtStart ))

  00196	83 7d fc 00	 cmp	 DWORD PTR _fSeek$[ebp], 0
  0019a	75 0b		 jne	 SHORT $L69762
  0019c	8b 4d e8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  0019f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001a2	3b 55 10	 cmp	 edx, DWORD PTR _mtStart$[ebp]
  001a5	74 38		 je	 SHORT $L69761
$L69762:

; 517  : 	{
; 518  : 		if( dwFlags & (DMUS_TRACKF_START | DMUS_TRACKF_LOOP) )

  001a7	8b 45 1c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  001aa	83 e0 06	 and	 eax, 6
  001ad	85 c0		 test	 eax, eax
  001af	74 18		 je	 SHORT $L69763

; 519  : 		{
; 520  : 			Seek( pStateData, mtStart, TRUE );

  001b1	6a 01		 push	 1
  001b3	8b 4d 10	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  001b6	51		 push	 ecx
  001b7	8b 55 0c	 mov	 edx, DWORD PTR _pStateData$[ebp]
  001ba	52		 push	 edx
  001bb	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001be	83 e8 04	 sub	 eax, 4
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 ?Seek@CTimeSigTrack@@IAGJPAXJH@Z ; CTimeSigTrack::Seek

; 521  : 		}
; 522  : 		else

  001c7	eb 16		 jmp	 SHORT $L69761
$L69763:

; 523  : 		{
; 524  : 			Seek( pStateData, mtStart, FALSE );

  001c9	6a 00		 push	 0
  001cb	8b 4d 10	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  001ce	51		 push	 ecx
  001cf	8b 55 0c	 mov	 edx, DWORD PTR _pStateData$[ebp]
  001d2	52		 push	 edx
  001d3	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001d6	83 e8 04	 sub	 eax, 4
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 ?Seek@CTimeSigTrack@@IAGJPAXJH@Z ; CTimeSigTrack::Seek
$L69761:

; 525  : 		}
; 526  : 	}
; 527  : 	pSD->m_mtPrevEnd = mtEnd;

  001df	8b 4d e8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  001e2	8b 55 14	 mov	 edx, DWORD PTR _mtEnd$[ebp]
  001e5	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 528  : 
; 529  : 	if( NULL == pSD->m_pCurrentTSig )

  001e8	8b 45 e8	 mov	 eax, DWORD PTR _pSD$[ebp]
  001eb	83 38 00	 cmp	 DWORD PTR [eax], 0
  001ee	75 10		 jne	 SHORT $L69765

; 530  : 	{
; 531  : 		pSD->m_pCurrentTSig = m_TSigEventList.GetHead();

  001f0	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001f3	83 c1 04	 add	 ecx, 4
  001f6	e8 00 00 00 00	 call	 ?GetHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ ; CTimeSigList::GetHead
  001fb	8b 4d e8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  001fe	89 01		 mov	 DWORD PTR [ecx], eax
$L69765:

; 532  : 	}
; 533  : 
; 534  : 	if( FAILED( pSD->m_pSegState->QueryInterface( IID_IDirectMusicGraph,
; 535  : 		(void**)&pGraph )))

  00200	8d 55 ec	 lea	 edx, DWORD PTR _pGraph$[ebp]
  00203	52		 push	 edx
  00204	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicGraph
  00209	8b 45 e8	 mov	 eax, DWORD PTR _pSD$[ebp]
  0020c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0020f	8b 55 e8	 mov	 edx, DWORD PTR _pSD$[ebp]
  00212	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00215	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00217	50		 push	 eax
  00218	ff 11		 call	 DWORD PTR [ecx]
  0021a	85 c0		 test	 eax, eax
  0021c	7d 07		 jge	 SHORT $L69768

; 536  : 	{
; 537  : 		pGraph = NULL;

  0021e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pGraph$[ebp], 0
$L69768:

; 538  : 	}
; 539  : 
; 540  : 	for( ; pSD->m_pCurrentTSig; pSD->m_pCurrentTSig = pSD->m_pCurrentTSig->GetNext() )

  00225	eb 0f		 jmp	 SHORT $L69769
$L69770:
  00227	8b 55 e8	 mov	 edx, DWORD PTR _pSD$[ebp]
  0022a	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0022c	e8 00 00 00 00	 call	 ?GetNext@CTimeSigItem@@QAEPAV1@XZ ; CTimeSigItem::GetNext
  00231	8b 4d e8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00234	89 01		 mov	 DWORD PTR [ecx], eax
$L69769:
  00236	8b 55 e8	 mov	 edx, DWORD PTR _pSD$[ebp]
  00239	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0023c	0f 84 99 01 00
	00		 je	 $L69771

; 541  : 	{
; 542  : 		DMUS_IO_TIMESIGNATURE_ITEM *pItem = &pSD->m_pCurrentTSig->m_TimeSig;

  00242	8b 45 e8	 mov	 eax, DWORD PTR _pSD$[ebp]
  00245	8b 08		 mov	 ecx, DWORD PTR [eax]
  00247	83 c1 04	 add	 ecx, 4
  0024a	89 4d e4	 mov	 DWORD PTR _pItem$69772[ebp], ecx

; 543  : 		if( pItem->lTime >= mtEnd )

  0024d	8b 55 e4	 mov	 edx, DWORD PTR _pItem$69772[ebp]
  00250	8b 02		 mov	 eax, DWORD PTR [edx]
  00252	3b 45 14	 cmp	 eax, DWORD PTR _mtEnd$[ebp]
  00255	7c 05		 jl	 SHORT $L69773

; 544  : 		{
; 545  : 			break;

  00257	e9 7f 01 00 00	 jmp	 $L69771
$L69773:

; 546  : 		}
; 547  : 		if( (pItem->lTime < mtStart) && !fSeek )

  0025c	8b 4d e4	 mov	 ecx, DWORD PTR _pItem$69772[ebp]
  0025f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00261	3b 55 10	 cmp	 edx, DWORD PTR _mtStart$[ebp]
  00264	7d 0b		 jge	 SHORT $L69774
  00266	83 7d fc 00	 cmp	 DWORD PTR _fSeek$[ebp], 0
  0026a	75 05		 jne	 SHORT $L69774

; 548  : 		{
; 549  : 			break;

  0026c	e9 6a 01 00 00	 jmp	 $L69771
$L69774:

; 550  : 		}
; 551  : 		if( pSD->m_fActive && !(dwFlags & DMUS_TRACKF_PLAY_OFF) && SUCCEEDED( pSD->m_pPerformance->AllocPMsg( sizeof(DMUS_TIMESIG_PMSG),
; 552  : 			(DMUS_PMSG**)&pTimeSig )))

  00271	8b 45 e8	 mov	 eax, DWORD PTR _pSD$[ebp]
  00274	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00278	0f 84 ef 00 00
	00		 je	 $L69778
  0027e	8b 4d 1c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00281	83 e1 40	 and	 ecx, 64			; 00000040H
  00284	85 c9		 test	 ecx, ecx
  00286	0f 85 e1 00 00
	00		 jne	 $L69778
  0028c	8d 55 f8	 lea	 edx, DWORD PTR _pTimeSig$[ebp]
  0028f	52		 push	 edx
  00290	6a 40		 push	 64			; 00000040H
  00292	8b 45 e8	 mov	 eax, DWORD PTR _pSD$[ebp]
  00295	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00298	8b 55 e8	 mov	 edx, DWORD PTR _pSD$[ebp]
  0029b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0029e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  002a0	50		 push	 eax
  002a1	ff 51 24	 call	 DWORD PTR [ecx+36]
  002a4	85 c0		 test	 eax, eax
  002a6	0f 8c c1 00 00
	00		 jl	 $L69778

; 553  : 		{
; 554  : 			if( pItem->lTime < mtStart )

  002ac	8b 55 e4	 mov	 edx, DWORD PTR _pItem$69772[ebp]
  002af	8b 02		 mov	 eax, DWORD PTR [edx]
  002b1	3b 45 10	 cmp	 eax, DWORD PTR _mtStart$[ebp]
  002b4	7d 0e		 jge	 SHORT $L69779

; 555  : 			{
; 556  : 				// this only happens in the case where we've puposefully seeked
; 557  : 				// and need to time stamp this event with the start time
; 558  : 				pTimeSig->mtTime = mtStart + mtOffset;

  002b6	8b 4d 10	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  002b9	03 4d 18	 add	 ecx, DWORD PTR _mtOffset$[ebp]
  002bc	8b 55 f8	 mov	 edx, DWORD PTR _pTimeSig$[ebp]
  002bf	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 559  : 			}
; 560  : 			else

  002c2	eb 0e		 jmp	 SHORT $L69780
$L69779:

; 561  : 			{
; 562  : 				pTimeSig->mtTime = pItem->lTime + mtOffset;

  002c4	8b 45 e4	 mov	 eax, DWORD PTR _pItem$69772[ebp]
  002c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c9	03 4d 18	 add	 ecx, DWORD PTR _mtOffset$[ebp]
  002cc	8b 55 f8	 mov	 edx, DWORD PTR _pTimeSig$[ebp]
  002cf	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$L69780:

; 563  : 			}
; 564  : 			pTimeSig->bBeatsPerMeasure = pItem->bBeatsPerMeasure;

  002d2	8b 45 f8	 mov	 eax, DWORD PTR _pTimeSig$[ebp]
  002d5	8b 4d e4	 mov	 ecx, DWORD PTR _pItem$69772[ebp]
  002d8	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  002db	88 50 38	 mov	 BYTE PTR [eax+56], dl

; 565  : 			pTimeSig->bBeat = pItem->bBeat;

  002de	8b 45 f8	 mov	 eax, DWORD PTR _pTimeSig$[ebp]
  002e1	8b 4d e4	 mov	 ecx, DWORD PTR _pItem$69772[ebp]
  002e4	8a 51 05	 mov	 dl, BYTE PTR [ecx+5]
  002e7	88 50 39	 mov	 BYTE PTR [eax+57], dl

; 566  : 			pTimeSig->wGridsPerBeat = pItem->wGridsPerBeat;

  002ea	8b 45 f8	 mov	 eax, DWORD PTR _pTimeSig$[ebp]
  002ed	8b 4d e4	 mov	 ecx, DWORD PTR _pItem$69772[ebp]
  002f0	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  002f4	66 89 50 3a	 mov	 WORD PTR [eax+58], dx

; 567  : 			pTimeSig->dwFlags |= DMUS_PMSGF_MUSICTIME;

  002f8	8b 45 f8	 mov	 eax, DWORD PTR _pTimeSig$[ebp]
  002fb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002fe	83 c9 02	 or	 ecx, 2
  00301	8b 55 f8	 mov	 edx, DWORD PTR _pTimeSig$[ebp]
  00304	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 568  : 			pTimeSig->dwVirtualTrackID = pSD->m_dwVirtualTrackID;

  00307	8b 45 f8	 mov	 eax, DWORD PTR _pTimeSig$[ebp]
  0030a	8b 4d e8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  0030d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00310	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 569  : 			pTimeSig->dwType = DMUS_PMSGT_TIMESIG;

  00313	8b 45 f8	 mov	 eax, DWORD PTR _pTimeSig$[ebp]
  00316	c7 40 28 06 00
	00 00		 mov	 DWORD PTR [eax+40], 6

; 570  : 			pTimeSig->dwGroupID = 0xffffffff;

  0031d	8b 4d f8	 mov	 ecx, DWORD PTR _pTimeSig$[ebp]
  00320	c7 41 30 ff ff
	ff ff		 mov	 DWORD PTR [ecx+48], -1

; 571  : 
; 572  : 			if( pGraph )

  00327	83 7d ec 00	 cmp	 DWORD PTR _pGraph$[ebp], 0
  0032b	74 10		 je	 SHORT $L69781

; 573  : 			{
; 574  : 				pGraph->StampPMsg( (DMUS_PMSG*)pTimeSig );

  0032d	8b 55 f8	 mov	 edx, DWORD PTR _pTimeSig$[ebp]
  00330	52		 push	 edx
  00331	8b 45 ec	 mov	 eax, DWORD PTR _pGraph$[ebp]
  00334	8b 08		 mov	 ecx, DWORD PTR [eax]
  00336	8b 55 ec	 mov	 edx, DWORD PTR _pGraph$[ebp]
  00339	52		 push	 edx
  0033a	ff 51 0c	 call	 DWORD PTR [ecx+12]
$L69781:

; 575  : 			}
; 576  : 			TraceI(3, "TimeSigtrk: TimeSig event\n");
; 577  : 			if(FAILED(pSD->m_pPerformance->SendPMsg( (DMUS_PMSG*)pTimeSig )))

  0033d	8b 45 f8	 mov	 eax, DWORD PTR _pTimeSig$[ebp]
  00340	50		 push	 eax
  00341	8b 4d e8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00344	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00347	8b 45 e8	 mov	 eax, DWORD PTR _pSD$[ebp]
  0034a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0034d	8b 12		 mov	 edx, DWORD PTR [edx]
  0034f	51		 push	 ecx
  00350	ff 52 10	 call	 DWORD PTR [edx+16]
  00353	85 c0		 test	 eax, eax
  00355	7d 16		 jge	 SHORT $L69778

; 578  : 			{
; 579  : 				pSD->m_pPerformance->FreePMsg( (DMUS_PMSG*)pTimeSig );

  00357	8b 45 f8	 mov	 eax, DWORD PTR _pTimeSig$[ebp]
  0035a	50		 push	 eax
  0035b	8b 4d e8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  0035e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00361	8b 45 e8	 mov	 eax, DWORD PTR _pSD$[ebp]
  00364	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00367	8b 12		 mov	 edx, DWORD PTR [edx]
  00369	51		 push	 ecx
  0036a	ff 52 28	 call	 DWORD PTR [edx+40]
$L69778:

; 580  : 			}
; 581  : 		}
; 582  : 		if( pSD->m_fActive && m_fNotificationMeasureBeat && !(dwFlags & DMUS_TRACKF_NOTIFY_OFF))

  0036d	8b 45 e8	 mov	 eax, DWORD PTR _pSD$[ebp]
  00370	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00374	74 3d		 je	 SHORT $L69788
  00376	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00379	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  0037d	74 34		 je	 SHORT $L69788
  0037f	8b 55 1c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00382	83 e2 20	 and	 edx, 32			; 00000020H
  00385	85 d2		 test	 edx, edx
  00387	75 2a		 jne	 SHORT $L69788

; 583  : 		{
; 584  : 			// create beat and measure notifications for up to this time
; 585  :             if (mtNotification < pItem->lTime)

  00389	8b 45 e4	 mov	 eax, DWORD PTR _pItem$69772[ebp]
  0038c	8b 4d f4	 mov	 ecx, DWORD PTR _mtNotification$[ebp]
  0038f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00391	7d 20		 jge	 SHORT $L69788

; 586  :             {
; 587  : 			    mtNotification = NotificationMeasureBeat( mtNotification, pItem->lTime, pSD, mtOffset );

  00393	8b 55 18	 mov	 edx, DWORD PTR _mtOffset$[ebp]
  00396	52		 push	 edx
  00397	8b 45 e8	 mov	 eax, DWORD PTR _pSD$[ebp]
  0039a	50		 push	 eax
  0039b	8b 4d e4	 mov	 ecx, DWORD PTR _pItem$69772[ebp]
  0039e	8b 11		 mov	 edx, DWORD PTR [ecx]
  003a0	52		 push	 edx
  003a1	8b 45 f4	 mov	 eax, DWORD PTR _mtNotification$[ebp]
  003a4	50		 push	 eax
  003a5	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  003a8	83 e9 04	 sub	 ecx, 4
  003ab	e8 00 00 00 00	 call	 ?NotificationMeasureBeat@CTimeSigTrack@@IAEJJJPAVCTimeSigStateData@@J@Z ; CTimeSigTrack::NotificationMeasureBeat
  003b0	89 45 f4	 mov	 DWORD PTR _mtNotification$[ebp], eax
$L69788:

; 588  :             }
; 589  :         }
; 590  : 		// set the state data to the new beat and beats per measure, and time
; 591  : 		pSD->m_bBeat = pItem->bBeat;

  003b3	8b 4d e8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  003b6	8b 55 e4	 mov	 edx, DWORD PTR _pItem$69772[ebp]
  003b9	8a 42 05	 mov	 al, BYTE PTR [edx+5]
  003bc	88 41 20	 mov	 BYTE PTR [ecx+32], al

; 592  : 		pSD->m_bBeatsPerMeasure = pItem->bBeatsPerMeasure;

  003bf	8b 4d e8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  003c2	8b 55 e4	 mov	 edx, DWORD PTR _pItem$69772[ebp]
  003c5	8a 42 04	 mov	 al, BYTE PTR [edx+4]
  003c8	88 41 21	 mov	 BYTE PTR [ecx+33], al

; 593  : 		pSD->m_mtTimeSig = pItem->lTime;

  003cb	8b 4d e8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  003ce	8b 55 e4	 mov	 edx, DWORD PTR _pItem$69772[ebp]
  003d1	8b 02		 mov	 eax, DWORD PTR [edx]
  003d3	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 594  : 	}

  003d6	e9 4c fe ff ff	 jmp	 $L69770
$L69771:

; 595  : 	if( pSD->m_fActive && m_fNotificationMeasureBeat && ( mtNotification < mtEnd ) 
; 596  :         && !(dwFlags & DMUS_TRACKF_NOTIFY_OFF))

  003db	8b 4d e8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  003de	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  003e2	74 36		 je	 SHORT $L69790
  003e4	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  003e7	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  003eb	74 2d		 je	 SHORT $L69790
  003ed	8b 45 f4	 mov	 eax, DWORD PTR _mtNotification$[ebp]
  003f0	3b 45 14	 cmp	 eax, DWORD PTR _mtEnd$[ebp]
  003f3	7d 25		 jge	 SHORT $L69790
  003f5	8b 4d 1c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  003f8	83 e1 20	 and	 ecx, 32			; 00000020H
  003fb	85 c9		 test	 ecx, ecx
  003fd	75 1b		 jne	 SHORT $L69790

; 597  : 	{
; 598  : 		NotificationMeasureBeat( mtNotification, mtEnd, pSD, mtOffset );

  003ff	8b 55 18	 mov	 edx, DWORD PTR _mtOffset$[ebp]
  00402	52		 push	 edx
  00403	8b 45 e8	 mov	 eax, DWORD PTR _pSD$[ebp]
  00406	50		 push	 eax
  00407	8b 4d 14	 mov	 ecx, DWORD PTR _mtEnd$[ebp]
  0040a	51		 push	 ecx
  0040b	8b 55 f4	 mov	 edx, DWORD PTR _mtNotification$[ebp]
  0040e	52		 push	 edx
  0040f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00412	83 e9 04	 sub	 ecx, 4
  00415	e8 00 00 00 00	 call	 ?NotificationMeasureBeat@CTimeSigTrack@@IAEJJJPAVCTimeSigStateData@@J@Z ; CTimeSigTrack::NotificationMeasureBeat
$L69790:

; 599  : 	}
; 600  : 	if( pGraph )

  0041a	83 7d ec 00	 cmp	 DWORD PTR _pGraph$[ebp], 0
  0041e	74 0c		 je	 SHORT $L69791

; 601  : 	{
; 602  : 		pGraph->Release();

  00420	8b 45 ec	 mov	 eax, DWORD PTR _pGraph$[ebp]
  00423	8b 08		 mov	 ecx, DWORD PTR [eax]
  00425	8b 55 ec	 mov	 edx, DWORD PTR _pGraph$[ebp]
  00428	52		 push	 edx
  00429	ff 51 08	 call	 DWORD PTR [ecx+8]
$L69791:

; 603  : 	}
; 604  : 
; 605  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  0042c	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0042f	83 c0 10	 add	 eax, 16			; 00000010H
  00432	50		 push	 eax
  00433	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 606  : 	return hr;

  00439	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]

; 607  : }

  0043c	8b e5		 mov	 esp, ebp
  0043e	5d		 pop	 ebp
  0043f	c2 24 00	 ret	 36			; 00000024H
?Play@CTimeSigTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ENDP ; CTimeSigTrack::Play
_TEXT	ENDS
PUBLIC	?IsEmpty@AList@@QBEHXZ				; AList::IsEmpty
; Function compile flags: /Odt
;	COMDAT ?Seek@CTimeSigTrack@@IAGJPAXJH@Z
_TEXT	SEGMENT
_pSD$ = -8
_pTSig$ = -4
_this$ = 8
_pStateData$ = 12
_mtTime$ = 16
_fGetPrevious$ = 20
?Seek@CTimeSigTrack@@IAGJPAXJH@Z PROC NEAR		; CTimeSigTrack::Seek, COMDAT

; 613  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 614  : 	CTimeSigStateData* pSD = (CTimeSigStateData*)pStateData;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _pSD$[ebp], eax

; 615  : 
; 616  : 	if( m_TSigEventList.IsEmpty() )

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 08	 add	 ecx, 8
  00012	e8 00 00 00 00	 call	 ?IsEmpty@AList@@QBEHXZ	; AList::IsEmpty
  00017	85 c0		 test	 eax, eax
  00019	74 0a		 je	 SHORT $L69800

; 617  : 	{
; 618  : 		return S_FALSE;

  0001b	b8 01 00 00 00	 mov	 eax, 1
  00020	e9 86 00 00 00	 jmp	 $L69797
$L69800:

; 619  : 	}
; 620  : 	if( NULL == pSD->m_pCurrentTSig )

  00025	8b 4d f8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00028	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0002b	75 10		 jne	 SHORT $L69802

; 621  : 	{
; 622  : 		pSD->m_pCurrentTSig = m_TSigEventList.GetHead();

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 08	 add	 ecx, 8
  00033	e8 00 00 00 00	 call	 ?GetHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ ; CTimeSigList::GetHead
  00038	8b 55 f8	 mov	 edx, DWORD PTR _pSD$[ebp]
  0003b	89 02		 mov	 DWORD PTR [edx], eax
$L69802:

; 623  : 	}
; 624  : 	// if the current event's time is on or past mtTime, we need to rewind to the beginning
; 625  : 	if( pSD->m_pCurrentTSig->m_TimeSig.lTime >= mtTime )

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _pSD$[ebp]
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00045	3b 55 10	 cmp	 edx, DWORD PTR _mtTime$[ebp]
  00048	7c 10		 jl	 SHORT $L69803

; 626  : 	{
; 627  : 		pSD->m_pCurrentTSig = m_TSigEventList.GetHead();

  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	83 c1 08	 add	 ecx, 8
  00050	e8 00 00 00 00	 call	 ?GetHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ ; CTimeSigList::GetHead
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00058	89 01		 mov	 DWORD PTR [ecx], eax
$L69803:

; 628  : 	}
; 629  : 	// now start seeking until we find an event with time on or past mtTime
; 630  : 	CTimeSigItem*	pTSig;
; 631  : 	for( pTSig = pSD->m_pCurrentTSig; pTSig ; pTSig = pTSig->GetNext() )

  0005a	8b 55 f8	 mov	 edx, DWORD PTR _pSD$[ebp]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	89 45 fc	 mov	 DWORD PTR _pTSig$[ebp], eax
  00062	eb 0b		 jmp	 SHORT $L69805
$L69806:
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _pTSig$[ebp]
  00067	e8 00 00 00 00	 call	 ?GetNext@CTimeSigItem@@QAEPAV1@XZ ; CTimeSigItem::GetNext
  0006c	89 45 fc	 mov	 DWORD PTR _pTSig$[ebp], eax
$L69805:
  0006f	83 7d fc 00	 cmp	 DWORD PTR _pTSig$[ebp], 0
  00073	74 17		 je	 SHORT $L69807

; 632  : 	{
; 633  : 		if( pTSig->m_TimeSig.lTime >= mtTime )

  00075	8b 4d fc	 mov	 ecx, DWORD PTR _pTSig$[ebp]
  00078	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007b	3b 55 10	 cmp	 edx, DWORD PTR _mtTime$[ebp]
  0007e	7c 02		 jl	 SHORT $L69808

; 634  : 		{
; 635  : 			break;

  00080	eb 0a		 jmp	 SHORT $L69807
$L69808:

; 636  : 		}
; 637  : 		pSD->m_pCurrentTSig = pTSig;

  00082	8b 45 f8	 mov	 eax, DWORD PTR _pSD$[ebp]
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _pTSig$[ebp]
  00088	89 08		 mov	 DWORD PTR [eax], ecx

; 638  : 	}

  0008a	eb d8		 jmp	 SHORT $L69806
$L69807:

; 639  : 	if( !fGetPrevious && pSD->m_pCurrentTSig )

  0008c	83 7d 14 00	 cmp	 DWORD PTR _fGetPrevious$[ebp], 0
  00090	75 17		 jne	 SHORT $L69809
  00092	8b 55 f8	 mov	 edx, DWORD PTR _pSD$[ebp]
  00095	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00098	74 0f		 je	 SHORT $L69809

; 640  : 	{
; 641  : 		pSD->m_pCurrentTSig = pSD->m_pCurrentTSig->GetNext();

  0009a	8b 45 f8	 mov	 eax, DWORD PTR _pSD$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	e8 00 00 00 00	 call	 ?GetNext@CTimeSigItem@@QAEPAV1@XZ ; CTimeSigItem::GetNext
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _pSD$[ebp]
  000a7	89 01		 mov	 DWORD PTR [ecx], eax
$L69809:

; 642  : 	}
; 643  : 	return S_OK;

  000a9	33 c0		 xor	 eax, eax
$L69797:

; 644  : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 10 00	 ret	 16			; 00000010H
?Seek@CTimeSigTrack@@IAGJPAXJH@Z ENDP			; CTimeSigTrack::Seek
_TEXT	ENDS
PUBLIC	??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??GetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB DB 'C'
	DB	'TimeSigTrack::GetParam', 00H		; `CTimeSigTrack::GetParam'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@
CONST	SEGMENT
??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@ DB '%s: Inval'
	DB	'id pointer pmtNext', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAJPAX@Z
_TEXT	SEGMENT
_pTSigData$69839 = -16
_pPrevious$69842 = -12
_pScan$69841 = -8
_hr$ = -4
_this$ = 8
_rguid$ = 12
_mtTime$ = 16
_pmtNext$ = 20
_pData$ = 24
?GetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAJPAX@Z PROC NEAR ; CTimeSigTrack::GetParam, COMDAT

; 651  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 652  : 	V_INAME(CTimeSigTrack::GetParam);
; 653  : 	V_PTR_WRITE_OPT(pmtNext,MUSIC_TIME);

  00006	83 7d 14 00	 cmp	 DWORD PTR _pmtNext$[ebp], 0
  0000a	74 28		 je	 SHORT $L69820
  0000c	6a 04		 push	 4
  0000e	8b 45 14	 mov	 eax, DWORD PTR _pmtNext$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00017	85 c0		 test	 eax, eax
  00019	74 19		 je	 SHORT $L69820
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@
  00025	6a ff		 push	 -1
  00027	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69820:

; 654  : 	V_REFGUID(rguid);

  00034	6a 10		 push	 16			; 00000010H
  00036	8b 4d 0c	 mov	 ecx, DWORD PTR _rguid$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003f	85 c0		 test	 eax, eax
  00041	74 19		 je	 SHORT $L69826
  00043	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB
  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
  0004d	6a ff		 push	 -1
  0004f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	e8 00 00 00 00	 call	 _DebugBreak@0
$L69826:

; 655  : 
; 656  : 	HRESULT hr = DMUS_E_GET_UNSUPPORTED;

  0005c	c7 45 fc 24 11
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005397212 ; 88781124H

; 657  :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00063	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00066	83 c2 10	 add	 edx, 16			; 00000010H
  00069	52		 push	 edx
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 658  : 	if( NULL == pData )

  00070	83 7d 18 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00074	75 0c		 jne	 SHORT $L69832

; 659  : 	{
; 660  : 		hr = E_POINTER;

  00076	c7 45 fc 03 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467261 ; 80004003H

; 661  : 	}
; 662  : 	else if( GUID_TimeSignature == rguid )

  0007d	e9 e4 00 00 00	 jmp	 $L69834
$L69832:
  00082	8b 45 0c	 mov	 eax, DWORD PTR _rguid$[ebp]
  00085	50		 push	 eax
  00086	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_TimeSignature
  0008b	e8 00 00 00 00	 call	 _==@8
  00090	85 c0		 test	 eax, eax
  00092	0f 84 ce 00 00
	00		 je	 $L69834

; 663  : 	{
; 664  : 		if( !m_fActive )

  00098	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0
  0009f	75 0c		 jne	 SHORT $L69836

; 665  : 		{
; 666  : 			hr = DMUS_E_TYPE_DISABLED;

  000a1	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 667  : 		}
; 668  :         else

  000a8	e9 b9 00 00 00	 jmp	 $L69834
$L69836:

; 669  :         {
; 670  :             DMUS_TIMESIGNATURE* pTSigData = (DMUS_TIMESIGNATURE*)pData;

  000ad	8b 55 18	 mov	 edx, DWORD PTR _pData$[ebp]
  000b0	89 55 f0	 mov	 DWORD PTR _pTSigData$69839[ebp], edx

; 671  : 		    CTimeSigItem* pScan = m_TSigEventList.GetHead();

  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	83 c1 04	 add	 ecx, 4
  000b9	e8 00 00 00 00	 call	 ?GetHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ ; CTimeSigList::GetHead
  000be	89 45 f8	 mov	 DWORD PTR _pScan$69841[ebp], eax

; 672  : 		    CTimeSigItem* pPrevious = pScan;

  000c1	8b 45 f8	 mov	 eax, DWORD PTR _pScan$69841[ebp]
  000c4	89 45 f4	 mov	 DWORD PTR _pPrevious$69842[ebp], eax

; 673  : 		    if (pScan)

  000c7	83 7d f8 00	 cmp	 DWORD PTR _pScan$69841[ebp], 0
  000cb	0f 84 8e 00 00
	00		 je	 $L69843

; 674  : 		    {
; 675  : 		        for (; pScan; pScan = pScan->GetNext())

  000d1	eb 0b		 jmp	 SHORT $L69844
$L69845:
  000d3	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$69841[ebp]
  000d6	e8 00 00 00 00	 call	 ?GetNext@CTimeSigItem@@QAEPAV1@XZ ; CTimeSigItem::GetNext
  000db	89 45 f8	 mov	 DWORD PTR _pScan$69841[ebp], eax
$L69844:
  000de	83 7d f8 00	 cmp	 DWORD PTR _pScan$69841[ebp], 0
  000e2	74 15		 je	 SHORT $L69846

; 676  : 		        {
; 677  : 			        if (pScan->m_TimeSig.lTime > mtTime)

  000e4	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$69841[ebp]
  000e7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ea	3b 55 10	 cmp	 edx, DWORD PTR _mtTime$[ebp]
  000ed	7e 02		 jle	 SHORT $L69847

; 678  : 			        {
; 679  : 				        break;

  000ef	eb 08		 jmp	 SHORT $L69846
$L69847:

; 680  : 			        }
; 681  : 			        pPrevious = pScan;

  000f1	8b 45 f8	 mov	 eax, DWORD PTR _pScan$69841[ebp]
  000f4	89 45 f4	 mov	 DWORD PTR _pPrevious$69842[ebp], eax

; 682  : 		        }

  000f7	eb da		 jmp	 SHORT $L69845
$L69846:

; 683  : 		        pTSigData->mtTime = pPrevious->m_TimeSig.lTime - mtTime;

  000f9	8b 4d f4	 mov	 ecx, DWORD PTR _pPrevious$69842[ebp]
  000fc	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ff	2b 55 10	 sub	 edx, DWORD PTR _mtTime$[ebp]
  00102	8b 45 f0	 mov	 eax, DWORD PTR _pTSigData$69839[ebp]
  00105	89 10		 mov	 DWORD PTR [eax], edx

; 684  : 		        pTSigData->bBeatsPerMeasure = pPrevious->m_TimeSig.bBeatsPerMeasure;

  00107	8b 4d f0	 mov	 ecx, DWORD PTR _pTSigData$69839[ebp]
  0010a	8b 55 f4	 mov	 edx, DWORD PTR _pPrevious$69842[ebp]
  0010d	8a 42 08	 mov	 al, BYTE PTR [edx+8]
  00110	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 685  : 		        pTSigData->bBeat = pPrevious->m_TimeSig.bBeat;

  00113	8b 4d f0	 mov	 ecx, DWORD PTR _pTSigData$69839[ebp]
  00116	8b 55 f4	 mov	 edx, DWORD PTR _pPrevious$69842[ebp]
  00119	8a 42 09	 mov	 al, BYTE PTR [edx+9]
  0011c	88 41 05	 mov	 BYTE PTR [ecx+5], al

; 686  : 		        pTSigData->wGridsPerBeat = pPrevious->m_TimeSig.wGridsPerBeat;

  0011f	8b 4d f0	 mov	 ecx, DWORD PTR _pTSigData$69839[ebp]
  00122	8b 55 f4	 mov	 edx, DWORD PTR _pPrevious$69842[ebp]
  00125	66 8b 42 0a	 mov	 ax, WORD PTR [edx+10]
  00129	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 687  : 		        if (pmtNext)

  0012d	83 7d 14 00	 cmp	 DWORD PTR _pmtNext$[ebp], 0
  00131	74 09		 je	 SHORT $L69848

; 688  : 		        {
; 689  : 			        *pmtNext = 0;

  00133	8b 4d 14	 mov	 ecx, DWORD PTR _pmtNext$[ebp]
  00136	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L69848:

; 690  : 		        }
; 691  : 		        if (pScan)

  0013c	83 7d f8 00	 cmp	 DWORD PTR _pScan$69841[ebp], 0
  00140	74 14		 je	 SHORT $L69849

; 692  : 		        {
; 693  : 			        if (pmtNext)

  00142	83 7d 14 00	 cmp	 DWORD PTR _pmtNext$[ebp], 0
  00146	74 0e		 je	 SHORT $L69849

; 694  : 			        {
; 695  : 				        *pmtNext = pScan->m_TimeSig.lTime - mtTime;

  00148	8b 55 f8	 mov	 edx, DWORD PTR _pScan$69841[ebp]
  0014b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0014e	2b 45 10	 sub	 eax, DWORD PTR _mtTime$[ebp]
  00151	8b 4d 14	 mov	 ecx, DWORD PTR _pmtNext$[ebp]
  00154	89 01		 mov	 DWORD PTR [ecx], eax
$L69849:

; 696  : 			        }
; 697  : 		        }
; 698  : 		        hr = S_OK;

  00156	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 699  :             }
; 700  :             else

  0015d	eb 07		 jmp	 SHORT $L69834
$L69843:

; 701  :             {
; 702  :                 hr = DMUS_E_NOT_FOUND;

  0015f	c7 45 fc 61 11
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005397151 ; 88781161H
$L69834:

; 703  : 		    }
; 704  :         }
; 705  : 	}
; 706  :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  00166	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00169	83 c2 10	 add	 edx, 16			; 00000010H
  0016c	52		 push	 edx
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 707  : 	return hr;

  00173	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 708  : }

  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 14 00	 ret	 20			; 00000014H
?GetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAJPAX@Z ENDP	; CTimeSigTrack::GetParam
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??SetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??SetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAX@Z@4QBDB DB 'C'
	DB	'TimeSigTrack::SetParam', 00H		; `CTimeSigTrack::SetParam'::`2'::__szValidateInterfaceName
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?SetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT
_this$ = 8
_rguid$ = 12
_mtTime$ = 16
_pData$ = 20
?SetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAX@Z PROC NEAR	; CTimeSigTrack::SetParam, COMDAT

; 714  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 715  : 	V_INAME(CTimeSigTrack::SetParam);
; 716  : 	V_REFGUID(rguid);

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L69867
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??SetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAX@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L69867:

; 717  : #ifdef DXAPI
; 718  : 	HRESULT hr = DMUS_E_SET_UNSUPPORTED;
; 719  : 
; 720  : 	if( rguid == GUID_EnableTimeSig )
; 721  : 	{
; 722  :         if (m_fStateSetBySetParam && m_fActive)
; 723  :         {       // Already been enabled.
; 724  :             hr = DMUS_E_TYPE_DISABLED;
; 725  :         }
; 726  : 		else
; 727  :         {
; 728  :             m_fStateSetBySetParam = TRUE;
; 729  :             m_fActive = TRUE;
; 730  : 		    hr = S_OK;
; 731  :         }
; 732  : 	}
; 733  : 	else if( rguid == GUID_DisableTimeSig )
; 734  : 	{
; 735  :         if (m_fStateSetBySetParam && !m_fActive)
; 736  :         {       // Already been disabled.
; 737  :             hr = DMUS_E_TYPE_DISABLED;
; 738  :         }
; 739  : 		else
; 740  :         {
; 741  :             m_fStateSetBySetParam = TRUE;
; 742  :             m_fActive = FALSE;
; 743  : 		    hr = S_OK;
; 744  :         }
; 745  : 	}
; 746  : 	return hr;
; 747  : #else
; 748  :     return DMUS_E_SET_UNSUPPORTED;

  0002b	b8 23 11 78 88	 mov	 eax, -2005397213	; 88781123H

; 749  : #endif
; 750  : }

  00030	5d		 pop	 ebp
  00031	c2 10 00	 ret	 16			; 00000010H
?SetParam@CTimeSigTrack@@UAGJABU_GUID@@JPAX@Z ENDP	; CTimeSigTrack::SetParam
_TEXT	ENDS
PUBLIC	??_C@_0CP@NOENDGNM@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@ ; `string'
EXTRN	_GUID_NOTIFICATION_MEASUREANDBEAT:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??AddNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??AddNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::AddNotificationType', 00H	; `CTimeSigTrack::AddNotificationType'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CP@NOENDGNM@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
CONST	SEGMENT
??_C@_0CP@NOENDGNM@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@ DB '%'
	DB	's: Invalid pointer (void*)&rguidNotification', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?AddNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_hr$ = -4
_this$ = 8
_rguidNotification$ = 12
?AddNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CTimeSigTrack::AddNotificationType, COMDAT

; 754  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 755  : 	V_INAME(IDirectMusicTrack::AddNotificationType);
; 756  : 	V_REFGUID(rguidNotification);

  00004	6a 10		 push	 16			; 00000010H
  00006	8b 45 0c	 mov	 eax, DWORD PTR _rguidNotification$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $L69880
  00013	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??AddNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z@4QBDB
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@NOENDGNM@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L69880:

; 757  : 
; 758  : 	HRESULT hr = S_FALSE;

  0002c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 1

; 759  : 
; 760  : 	if( rguidNotification == GUID_NOTIFICATION_MEASUREANDBEAT )

  00033	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_NOTIFICATION_MEASUREANDBEAT
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _rguidNotification$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 _==@8
  00041	85 c0		 test	 eax, eax
  00043	74 11		 je	 SHORT $L69884

; 761  : 	{
; 762  : 		m_fNotificationMeasureBeat = TRUE;

  00045	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00048	c7 42 30 01 00
	00 00		 mov	 DWORD PTR [edx+48], 1

; 763  : 		hr = S_OK;

  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$L69884:

; 764  : 	}
; 765  : 	return hr;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 766  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
?AddNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z ENDP ; CTimeSigTrack::AddNotificationType
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??RemoveNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??RemoveNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::RemoveNotificationType', 00H ; `CTimeSigTrack::RemoveNotificationType'::`2'::__szValidateInterfaceName
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?RemoveNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_hr$ = -4
_this$ = 8
_rguidNotification$ = 12
?RemoveNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CTimeSigTrack::RemoveNotificationType, COMDAT

; 770  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 771  : 	V_INAME(IDirectMusicTrack::RemoveNotificationType);
; 772  : 	V_REFGUID(rguidNotification);

  00004	6a 10		 push	 16			; 00000010H
  00006	8b 45 0c	 mov	 eax, DWORD PTR _rguidNotification$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $L69894
  00013	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??RemoveNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z@4QBDB
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@NOENDGNM@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L69894:

; 773  : 
; 774  : 	HRESULT hr = S_FALSE;

  0002c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 1

; 775  : 
; 776  : 	if( rguidNotification == GUID_NOTIFICATION_MEASUREANDBEAT )

  00033	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_NOTIFICATION_MEASUREANDBEAT
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _rguidNotification$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 _==@8
  00041	85 c0		 test	 eax, eax
  00043	74 11		 je	 SHORT $L69897

; 777  : 	{
; 778  : 		m_fNotificationMeasureBeat = FALSE;

  00045	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00048	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0

; 779  : 		hr = S_OK;

  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$L69897:

; 780  : 	}
; 781  : 	return hr;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 782  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
?RemoveNotificationType@CTimeSigTrack@@UAGJABU_GUID@@@Z ENDP ; CTimeSigTrack::RemoveNotificationType
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?NotificationMeasureBeat@CTimeSigTrack@@IAEJJJPAVCTimeSigStateData@@J@Z
_TEXT	SEGMENT
_this$ = -28
_pGraph$69923 = -24
_dwMeasure$ = -20
_bCurrentBeat$ = -13
_pEvent$ = -12
_mtTime$ = -8
_lQuantize$ = -4
_mtStart$ = 8
_mtEnd$ = 12
_pSD$ = 16
_mtOffset$ = 20
?NotificationMeasureBeat@CTimeSigTrack@@IAEJJJPAVCTimeSigStateData@@J@Z PROC NEAR ; CTimeSigTrack::NotificationMeasureBeat, COMDAT
; _this$ = ecx

; 787  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 788  : 	DMUS_NOTIFICATION_PMSG* pEvent = NULL;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pEvent$[ebp], 0

; 789  : 	MUSIC_TIME mtTime;
; 790  : 	DWORD dwMeasure;
; 791  : 	BYTE bCurrentBeat;
; 792  : 
; 793  : 	if( pSD->m_mtTimeSig >= mtEnd )

  00010	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  00013	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00016	3b 4d 0c	 cmp	 ecx, DWORD PTR _mtEnd$[ebp]
  00019	7c 08		 jl	 SHORT $L69910

; 794  : 		return mtStart;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _mtStart$[ebp]
  0001e	e9 fc 01 00 00	 jmp	 $L69905
$L69910:

; 795  : 
; 796  : 	if( pSD->m_mtTimeSig > mtStart )

  00023	8b 55 10	 mov	 edx, DWORD PTR _pSD$[ebp]
  00026	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00029	3b 45 08	 cmp	 eax, DWORD PTR _mtStart$[ebp]
  0002c	7e 09		 jle	 SHORT $L69911

; 797  : 	{
; 798  : 		mtStart = pSD->m_mtTimeSig;

  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00031	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00034	89 55 08	 mov	 DWORD PTR _mtStart$[ebp], edx
$L69911:

; 799  : 	}
; 800  : 
; 801  : 	// now actually generate the beat events.
; 802  : 	// Generate events that are on beat boundaries, from mtStart to mtEnd
; 803  : 	long lQuantize = ( DMUS_PPQ * 4 ) / pSD->m_bBeat;

  00037	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  0003a	0f b6 48 20	 movzx	 ecx, BYTE PTR [eax+32]
  0003e	b8 00 0c 00 00	 mov	 eax, 3072		; 00000c00H
  00043	99		 cdq
  00044	f7 f9		 idiv	 ecx
  00046	89 45 fc	 mov	 DWORD PTR _lQuantize$[ebp], eax

; 804  : 
; 805  : 	mtTime = mtStart - pSD->m_mtTimeSig;

  00049	8b 55 10	 mov	 edx, DWORD PTR _pSD$[ebp]
  0004c	8b 45 08	 mov	 eax, DWORD PTR _mtStart$[ebp]
  0004f	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  00052	89 45 f8	 mov	 DWORD PTR _mtTime$[ebp], eax

; 806  : 	if( mtTime ) // 0 stays 0

  00055	83 7d f8 00	 cmp	 DWORD PTR _mtTime$[ebp], 0
  00059	74 14		 je	 SHORT $L69913

; 807  : 	{
; 808  : 		// quantize to next boundary
; 809  : 		mtTime = ((( mtTime - 1 ) / lQuantize ) + 1 ) * lQuantize;

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _mtTime$[ebp]
  0005e	83 e8 01	 sub	 eax, 1
  00061	99		 cdq
  00062	f7 7d fc	 idiv	 DWORD PTR _lQuantize$[ebp]
  00065	83 c0 01	 add	 eax, 1
  00068	0f af 45 fc	 imul	 eax, DWORD PTR _lQuantize$[ebp]
  0006c	89 45 f8	 mov	 DWORD PTR _mtTime$[ebp], eax
$L69913:

; 810  : 	}
; 811  : 	mtStart += mtTime - ( mtStart - pSD->m_mtTimeSig );

  0006f	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00072	8b 55 08	 mov	 edx, DWORD PTR _mtStart$[ebp]
  00075	2b 51 18	 sub	 edx, DWORD PTR [ecx+24]
  00078	8b 45 f8	 mov	 eax, DWORD PTR _mtTime$[ebp]
  0007b	2b c2		 sub	 eax, edx
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  00080	03 c8		 add	 ecx, eax
  00082	89 4d 08	 mov	 DWORD PTR _mtStart$[ebp], ecx

; 812  : 	
; 813  : 	bCurrentBeat = (BYTE)(( ( mtStart - pSD->m_mtTimeSig ) / lQuantize ) % pSD->m_bBeatsPerMeasure);

  00085	8b 55 10	 mov	 edx, DWORD PTR _pSD$[ebp]
  00088	8b 45 08	 mov	 eax, DWORD PTR _mtStart$[ebp]
  0008b	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  0008e	99		 cdq
  0008f	f7 7d fc	 idiv	 DWORD PTR _lQuantize$[ebp]
  00092	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00095	0f b6 49 21	 movzx	 ecx, BYTE PTR [ecx+33]
  00099	99		 cdq
  0009a	f7 f9		 idiv	 ecx
  0009c	88 55 f3	 mov	 BYTE PTR _bCurrentBeat$[ebp], dl

; 814  : 	dwMeasure = mtStart / (pSD->m_bBeatsPerMeasure * lQuantize );

  0009f	8b 55 10	 mov	 edx, DWORD PTR _pSD$[ebp]
  000a2	0f b6 4a 21	 movzx	 ecx, BYTE PTR [edx+33]
  000a6	0f af 4d fc	 imul	 ecx, DWORD PTR _lQuantize$[ebp]
  000aa	8b 45 08	 mov	 eax, DWORD PTR _mtStart$[ebp]
  000ad	99		 cdq
  000ae	f7 f9		 idiv	 ecx
  000b0	89 45 ec	 mov	 DWORD PTR _dwMeasure$[ebp], eax
$L69916:

; 815  : 	while( mtStart < mtEnd )

  000b3	8b 55 08	 mov	 edx, DWORD PTR _mtStart$[ebp]
  000b6	3b 55 0c	 cmp	 edx, DWORD PTR _mtEnd$[ebp]
  000b9	0f 8d 5d 01 00
	00		 jge	 $L69917

; 816  : 	{
; 817  : 		if( SUCCEEDED( pSD->m_pPerformance->AllocPMsg( sizeof(DMUS_NOTIFICATION_PMSG), 
; 818  : 			(DMUS_PMSG**)&pEvent )))

  000bf	8d 45 f4	 lea	 eax, DWORD PTR _pEvent$[ebp]
  000c2	50		 push	 eax
  000c3	6a 58		 push	 88			; 00000058H
  000c5	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  000c8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000cb	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  000ce	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d1	8b 12		 mov	 edx, DWORD PTR [edx]
  000d3	51		 push	 ecx
  000d4	ff 52 24	 call	 DWORD PTR [edx+36]
  000d7	85 c0		 test	 eax, eax
  000d9	0f 8c 0b 01 00
	00		 jl	 $L69921

; 819  : 		{
; 820  : 			pEvent->dwType = DMUS_PMSGT_NOTIFICATION;

  000df	8b 45 f4	 mov	 eax, DWORD PTR _pEvent$[ebp]
  000e2	c7 40 28 03 00
	00 00		 mov	 DWORD PTR [eax+40], 3

; 821  : 			pEvent->mtTime = mtStart + mtOffset;

  000e9	8b 4d 08	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  000ec	03 4d 14	 add	 ecx, DWORD PTR _mtOffset$[ebp]
  000ef	8b 55 f4	 mov	 edx, DWORD PTR _pEvent$[ebp]
  000f2	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 822  : 			pEvent->dwFlags = DMUS_PMSGF_MUSICTIME | DMUS_PMSGF_TOOL_ATTIME;

  000f5	8b 45 f4	 mov	 eax, DWORD PTR _pEvent$[ebp]
  000f8	c7 40 14 12 00
	00 00		 mov	 DWORD PTR [eax+20], 18	; 00000012H

; 823  :             pEvent->dwPChannel = 0;

  000ff	8b 4d f4	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  00102	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 824  : 			pSD->m_pSegState->QueryInterface(IID_IUnknown, (void**)&pEvent->punkUser);

  00109	8b 55 f4	 mov	 edx, DWORD PTR _pEvent$[ebp]
  0010c	83 c2 34	 add	 edx, 52			; 00000034H
  0010f	52		 push	 edx
  00110	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IUnknown
  00115	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  00118	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0011b	8b 55 10	 mov	 edx, DWORD PTR _pSD$[ebp]
  0011e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00121	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00123	50		 push	 eax
  00124	ff 11		 call	 DWORD PTR [ecx]

; 825  : 
; 826  : 			pEvent->dwNotificationOption = DMUS_NOTIFICATION_MEASUREBEAT;

  00126	8b 55 f4	 mov	 edx, DWORD PTR _pEvent$[ebp]
  00129	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 827  : 			pEvent->dwField1 = bCurrentBeat;

  00130	0f b6 45 f3	 movzx	 eax, BYTE PTR _bCurrentBeat$[ebp]
  00134	8b 4d f4	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  00137	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 828  : 			pEvent->dwField2 = dwMeasure;

  0013a	8b 55 f4	 mov	 edx, DWORD PTR _pEvent$[ebp]
  0013d	8b 45 ec	 mov	 eax, DWORD PTR _dwMeasure$[ebp]
  00140	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 829  : 			pEvent->guidNotificationType = GUID_NOTIFICATION_MEASUREANDBEAT;

  00143	8b 4d f4	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  00146	83 c1 38	 add	 ecx, 56			; 00000038H
  00149	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _GUID_NOTIFICATION_MEASUREANDBEAT
  0014f	89 11		 mov	 DWORD PTR [ecx], edx
  00151	a1 04 00 00 00	 mov	 eax, DWORD PTR _GUID_NOTIFICATION_MEASUREANDBEAT+4
  00156	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00159	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _GUID_NOTIFICATION_MEASUREANDBEAT+8
  0015f	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00162	a1 0c 00 00 00	 mov	 eax, DWORD PTR _GUID_NOTIFICATION_MEASUREANDBEAT+12
  00167	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 830  : 			pEvent->dwGroupID = 0xffffffff;

  0016a	8b 4d f4	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  0016d	c7 41 30 ff ff
	ff ff		 mov	 DWORD PTR [ecx+48], -1

; 831  :             pEvent->dwVirtualTrackID = pSD->m_dwVirtualTrackID;

  00174	8b 55 f4	 mov	 edx, DWORD PTR _pEvent$[ebp]
  00177	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  0017a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0017d	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 832  : 
; 833  : 			IDirectMusicGraph* pGraph;
; 834  : 			if( SUCCEEDED( pSD->m_pSegState->QueryInterface( IID_IDirectMusicGraph,
; 835  : 				(void**)&pGraph )))

  00180	8d 55 e8	 lea	 edx, DWORD PTR _pGraph$69923[ebp]
  00183	52		 push	 edx
  00184	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicGraph
  00189	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  0018c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0018f	8b 55 10	 mov	 edx, DWORD PTR _pSD$[ebp]
  00192	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00195	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00197	50		 push	 eax
  00198	ff 11		 call	 DWORD PTR [ecx]
  0019a	85 c0		 test	 eax, eax
  0019c	7c 1c		 jl	 SHORT $L69926

; 836  : 			{
; 837  : 				pGraph->StampPMsg((DMUS_PMSG*) pEvent );

  0019e	8b 55 f4	 mov	 edx, DWORD PTR _pEvent$[ebp]
  001a1	52		 push	 edx
  001a2	8b 45 e8	 mov	 eax, DWORD PTR _pGraph$69923[ebp]
  001a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a7	8b 55 e8	 mov	 edx, DWORD PTR _pGraph$69923[ebp]
  001aa	52		 push	 edx
  001ab	ff 51 0c	 call	 DWORD PTR [ecx+12]

; 838  : 				pGraph->Release();

  001ae	8b 45 e8	 mov	 eax, DWORD PTR _pGraph$69923[ebp]
  001b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b3	8b 55 e8	 mov	 edx, DWORD PTR _pGraph$69923[ebp]
  001b6	52		 push	 edx
  001b7	ff 51 08	 call	 DWORD PTR [ecx+8]
$L69926:

; 839  : 			}
; 840  : 			if(FAILED(pSD->m_pPerformance->SendPMsg((DMUS_PMSG*) pEvent )))

  001ba	8b 45 f4	 mov	 eax, DWORD PTR _pEvent$[ebp]
  001bd	50		 push	 eax
  001be	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  001c1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001c4	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  001c7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001ca	8b 12		 mov	 edx, DWORD PTR [edx]
  001cc	51		 push	 ecx
  001cd	ff 52 10	 call	 DWORD PTR [edx+16]
  001d0	85 c0		 test	 eax, eax
  001d2	7d 16		 jge	 SHORT $L69921

; 841  : 			{
; 842  : 				pSD->m_pPerformance->FreePMsg( (DMUS_PMSG*)pEvent );

  001d4	8b 45 f4	 mov	 eax, DWORD PTR _pEvent$[ebp]
  001d7	50		 push	 eax
  001d8	8b 4d 10	 mov	 ecx, DWORD PTR _pSD$[ebp]
  001db	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001de	8b 45 10	 mov	 eax, DWORD PTR _pSD$[ebp]
  001e1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001e4	8b 12		 mov	 edx, DWORD PTR [edx]
  001e6	51		 push	 ecx
  001e7	ff 52 28	 call	 DWORD PTR [edx+40]
$L69921:

; 843  : 			}
; 844  : 		}
; 845  : 		bCurrentBeat++;

  001ea	8a 45 f3	 mov	 al, BYTE PTR _bCurrentBeat$[ebp]
  001ed	04 01		 add	 al, 1
  001ef	88 45 f3	 mov	 BYTE PTR _bCurrentBeat$[ebp], al

; 846  : 		if( bCurrentBeat >= pSD->m_bBeatsPerMeasure )

  001f2	0f b6 4d f3	 movzx	 ecx, BYTE PTR _bCurrentBeat$[ebp]
  001f6	8b 55 10	 mov	 edx, DWORD PTR _pSD$[ebp]
  001f9	0f b6 42 21	 movzx	 eax, BYTE PTR [edx+33]
  001fd	3b c8		 cmp	 ecx, eax
  001ff	7c 0d		 jl	 SHORT $L69932

; 847  : 		{
; 848  : 			bCurrentBeat = 0;

  00201	c6 45 f3 00	 mov	 BYTE PTR _bCurrentBeat$[ebp], 0

; 849  : 			dwMeasure += 1;

  00205	8b 4d ec	 mov	 ecx, DWORD PTR _dwMeasure$[ebp]
  00208	83 c1 01	 add	 ecx, 1
  0020b	89 4d ec	 mov	 DWORD PTR _dwMeasure$[ebp], ecx
$L69932:

; 850  : 		}
; 851  : 		mtStart += lQuantize;

  0020e	8b 55 08	 mov	 edx, DWORD PTR _mtStart$[ebp]
  00211	03 55 fc	 add	 edx, DWORD PTR _lQuantize$[ebp]
  00214	89 55 08	 mov	 DWORD PTR _mtStart$[ebp], edx

; 852  : 	}

  00217	e9 97 fe ff ff	 jmp	 $L69916
$L69917:

; 853  : 	return mtEnd;

  0021c	8b 45 0c	 mov	 eax, DWORD PTR _mtEnd$[ebp]
$L69905:

; 854  : }

  0021f	8b e5		 mov	 esp, ebp
  00221	5d		 pop	 ebp
  00222	c2 10 00	 ret	 16			; 00000010H
?NotificationMeasureBeat@CTimeSigTrack@@IAEJJJPAVCTimeSigStateData@@J@Z ENDP ; CTimeSigTrack::NotificationMeasureBeat
_TEXT	ENDS
PUBLIC	??_C@_0FD@CDLBOJHG@Error?3?5Clone?5failed?5on?5time?5sign@ ; `string'
PUBLIC	??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??Clone@CTimeSigTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Clone@CTimeSigTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::Clone', 00H		; `CTimeSigTrack::Clone'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
CONST	SEGMENT
??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@ DB '%s: Inva'
	DB	'lid pointer ppTrack', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@CDLBOJHG@Error?3?5Clone?5failed?5on?5time?5sign@
CONST	SEGMENT
??_C@_0FD@CDLBOJHG@Error?3?5Clone?5failed?5on?5time?5sign@ DB 'Error: Clo'
	DB	'ne failed on time signature track because of invalid start or'
	DB	' end time.', 0aH, 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Clone@CTimeSigTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT
tv87 = -12
$T70437 = -8
_pDM$ = -4
_this$ = 8
_mtStart$ = 12
_mtEnd$ = 16
_ppTrack$ = 20
?Clone@CTimeSigTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z PROC NEAR ; CTimeSigTrack::Clone, COMDAT

; 860  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 861  : 	V_INAME(IDirectMusicTrack::Clone);
; 862  : 	V_PTRPTR_WRITE(ppTrack);

  00006	6a 04		 push	 4
  00008	8b 45 14	 mov	 eax, DWORD PTR _ppTrack$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69942
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Clone@CTimeSigTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69942:

; 863  : 
; 864  : 	if((mtStart < 0 ) ||(mtStart > mtEnd))

  0002e	83 7d 0c 00	 cmp	 DWORD PTR _mtStart$[ebp], 0
  00032	7c 08		 jl	 SHORT $L69944
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  00037	3b 4d 10	 cmp	 ecx, DWORD PTR _mtEnd$[ebp]
  0003a	7e 16		 jle	 SHORT $L69943
$L69944:

; 865  : 	{
; 866  :         Trace(1,"Error: Clone failed on time signature track because of invalid start or end time.\n");

  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FD@CDLBOJHG@Error?3?5Clone?5failed?5on?5time?5sign@
  00041	6a 01		 push	 1
  00043	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00048	83 c4 08	 add	 esp, 8

; 867  : 		return E_INVALIDARG;

  0004b	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00050	eb 77		 jmp	 SHORT $L69938
$L69943:

; 868  : 	}
; 869  : 
; 870  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  00052	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00055	83 c2 10	 add	 edx, 16			; 00000010H
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 871  :     CTimeSigTrack *pDM;
; 872  :     NEWCATCH(pDM,CTimeSigTrack(this, mtStart, mtEnd))

  0005f	6a 48		 push	 72			; 00000048H
  00061	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00066	83 c4 04	 add	 esp, 4
  00069	89 45 f8	 mov	 DWORD PTR $T70437[ebp], eax
  0006c	83 7d f8 00	 cmp	 DWORD PTR $T70437[ebp], 0
  00070	74 1c		 je	 SHORT $L70438
  00072	8b 45 10	 mov	 eax, DWORD PTR _mtEnd$[ebp]
  00075	50		 push	 eax
  00076	8b 4d 0c	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  00079	51		 push	 ecx
  0007a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	83 ea 04	 sub	 edx, 4
  00080	52		 push	 edx
  00081	8b 4d f8	 mov	 ecx, DWORD PTR $T70437[ebp]
  00084	e8 00 00 00 00	 call	 ??0CTimeSigTrack@@QAE@PAV0@JJ@Z ; CTimeSigTrack::CTimeSigTrack
  00089	89 45 f4	 mov	 DWORD PTR tv87[ebp], eax
  0008c	eb 07		 jmp	 SHORT $L70439
$L70438:
  0008e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$L70439:
  00095	8b 45 f4	 mov	 eax, DWORD PTR tv87[ebp]
  00098	89 45 fc	 mov	 DWORD PTR _pDM$[ebp], eax

; 873  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	83 c1 10	 add	 ecx, 16			; 00000010H
  000a1	51		 push	 ecx
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 874  :     if (pDM)

  000a8	83 7d fc 00	 cmp	 DWORD PTR _pDM$[ebp], 0
  000ac	74 16		 je	 SHORT $L69950

; 875  :     {
; 876  :         return pDM->QueryInterface(IID_IDirectMusicTrack, (void**)ppTrack);

  000ae	8b 55 14	 mov	 edx, DWORD PTR _ppTrack$[ebp]
  000b1	52		 push	 edx
  000b2	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack
  000b7	8b 45 fc	 mov	 eax, DWORD PTR _pDM$[ebp]
  000ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bc	8b 55 fc	 mov	 edx, DWORD PTR _pDM$[ebp]
  000bf	52		 push	 edx
  000c0	ff 11		 call	 DWORD PTR [ecx]
  000c2	eb 05		 jmp	 SHORT $L69938
$L69950:

; 877  :     }
; 878  :     return E_OUTOFMEMORY;

  000c4	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
$L69938:

; 879  : }

  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 10 00	 ret	 16			; 00000010H
?Clone@CTimeSigTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z ENDP ; CTimeSigTrack::Clone
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@CTimeSigTrack@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CTimeSigTrack@@W3AGJABU_GUID@@PAPAX@Z PROC NEAR ; CTimeSigTrack::QueryInterface, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CTimeSigTrack@@UAGJABU_GUID@@PAPAX@Z ; CTimeSigTrack::QueryInterface
?QueryInterface@CTimeSigTrack@@W3AGJABU_GUID@@PAPAX@Z ENDP ; CTimeSigTrack::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CTimeSigTrack@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CTimeSigTrack@@W3AGKXZ PROC NEAR		; CTimeSigTrack::AddRef, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CTimeSigTrack@@UAGKXZ ; CTimeSigTrack::AddRef
?AddRef@CTimeSigTrack@@W3AGKXZ ENDP			; CTimeSigTrack::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CTimeSigTrack@@W3AGKXZ
_TEXT	SEGMENT
?Release@CTimeSigTrack@@W3AGKXZ PROC NEAR		; CTimeSigTrack::Release, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?Release@CTimeSigTrack@@UAGKXZ ; CTimeSigTrack::Release
?Release@CTimeSigTrack@@W3AGKXZ ENDP			; CTimeSigTrack::Release
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ??0AListItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0AListItem@@QAE@XZ PROC NEAR				; AListItem::AListItem, COMDAT
; _this$ = ecx

; 17   :     AListItem() { m_pNext=NULL; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0AListItem@@QAE@XZ ENDP				; AListItem::AListItem
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0AList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0AList@@QAE@XZ PROC NEAR				; AList::AList, COMDAT
; _this$ = ecx

; 34   :     AList() {m_pHead=NULL;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0AList@@QAE@XZ ENDP					; AList::AList
_TEXT	ENDS
PUBLIC	?SetNext@AListItem@@QAEXPAV1@@Z			; AListItem::SetNext
; Function compile flags: /Odt
;	COMDAT ?AddHead@AList@@QAEXPAVAListItem@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddHead@AList@@QAEXPAVAListItem@@@Z PROC NEAR		; AList::AddHead, COMDAT
; _this$ = ecx

; 51   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :             if (pItem!=NULL)

  00007	83 7d 08 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  0000b	74 16		 je	 SHORT $L32730

; 53   :             {
; 54   :                 pItem->SetNext(m_pHead);

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	51		 push	 ecx
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00016	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext

; 55   :                 m_pHead=pItem;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00021	89 02		 mov	 DWORD PTR [edx], eax
$L32730:

; 56   :             }
; 57   :         };

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?AddHead@AList@@QAEXPAVAListItem@@@Z ENDP		; AList::AddHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNext@AListItem@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@AListItem@@QAEXPAV1@@Z PROC NEAR		; AListItem::SetNext, COMDAT
; _this$ = ecx

; 19   :     void SetNext(AListItem *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetNext@AListItem@@QAEXPAV1@@Z ENDP			; AListItem::SetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsEmpty@AList@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsEmpty@AList@@QBEHXZ PROC NEAR			; AList::IsEmpty, COMDAT
; _this$ = ecx

; 68   :     BOOL IsEmpty(void) const {return (m_pHead==NULL);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	0f 94 c1	 sete	 cl
  00012	8b c1		 mov	 eax, ecx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?IsEmpty@AList@@QBEHXZ ENDP				; AList::IsEmpty
_TEXT	ENDS
EXTRN	?DirectMusicAllocI@@YGPAXI@Z:NEAR		; DirectMusicAllocI
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xalloc.h
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_cb$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 13   :     return DirectMusicAllocI(cb);

  00003	8b 45 08	 mov	 eax, DWORD PTR _cb$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicAllocI@@YGPAXI@Z ; DirectMusicAllocI

; 14   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
EXTRN	?DirectMusicFreeI@@YGXPAX@Z:NEAR		; DirectMusicFreeI
; Function compile flags: /Odt
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 19   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xboxutil.h
_TEXT	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT
___formal$ = 8
?DeleteCriticalSection@@YGXPAX@Z PROC NEAR		; DeleteCriticalSection, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : }

  00003	5d		 pop	 ebp
  00004	c2 04 00	 ret	 4
?DeleteCriticalSection@@YGXPAX@Z ENDP			; DeleteCriticalSection
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IUnknown@@QAE@XZ PROC NEAR				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	?GetNext@AListItem@@QBEPAV1@XZ			; AListItem::GetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\tsigtrk.h
;	COMDAT ?GetNext@CTimeSigItem@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@CTimeSigItem@@QAEPAV1@XZ PROC NEAR		; CTimeSigItem::GetNext, COMDAT
; _this$ = ecx

; 17   :     CTimeSigItem* GetNext(){ return (CTimeSigItem*)AListItem::GetNext(); };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetNext@CTimeSigItem@@QAEPAV1@XZ ENDP			; CTimeSigItem::GetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?GetNext@AListItem@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@AListItem@@QBEPAV1@XZ PROC NEAR		; AListItem::GetNext, COMDAT
; _this$ = ecx

; 18   :     AListItem *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetNext@AListItem@@QBEPAV1@XZ ENDP			; AListItem::GetNext
_TEXT	ENDS
PUBLIC	?GetHead@AList@@QBEPAVAListItem@@XZ		; AList::GetHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\tsigtrk.h
;	COMDAT ?GetHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ PROC NEAR	; CTimeSigList::GetHead, COMDAT
; _this$ = ecx

; 25   :     CTimeSigItem* GetHead() {return (CTimeSigItem*)AList::GetHead();};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?GetHead@AList@@QBEPAVAListItem@@XZ ; AList::GetHead
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ ENDP	; CTimeSigList::GetHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?GetHead@AList@@QBEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@AList@@QBEPAVAListItem@@XZ PROC NEAR		; AList::GetHead, COMDAT
; _this$ = ecx

; 35   :     AListItem *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@AList@@QBEPAVAListItem@@XZ ENDP		; AList::GetHead
_TEXT	ENDS
PUBLIC	?RemoveHead@AList@@QAEPAVAListItem@@XZ		; AList::RemoveHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\tsigtrk.h
;	COMDAT ?RemoveHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ
_TEXT	SEGMENT
_this$ = -4
?RemoveHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ PROC NEAR ; CTimeSigList::RemoveHead, COMDAT
; _this$ = ecx

; 26   :     CTimeSigItem* RemoveHead() {return (CTimeSigItem*)AList::RemoveHead();};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?RemoveHead@AList@@QAEPAVAListItem@@XZ ; AList::RemoveHead
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?RemoveHead@CTimeSigList@@QAEPAVCTimeSigItem@@XZ ENDP	; CTimeSigList::RemoveHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\alist.h
_TEXT	ENDS
;	COMDAT ?RemoveHead@AList@@QAEPAVAListItem@@XZ
_TEXT	SEGMENT
_this$ = -8
_li$ = -4
?RemoveHead@AList@@QAEPAVAListItem@@XZ PROC NEAR	; AList::RemoveHead, COMDAT
; _this$ = ecx

; 71   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 72   :             AListItem *li;
; 73   :             li = m_pHead;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR _li$[ebp], ecx

; 74   :             if(m_pHead)

  00011	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00014	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00017	74 19		 je	 SHORT $L32744

; 75   :             {
; 76   :                 m_pHead = m_pHead->GetNext();

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ?GetNext@AListItem@@QBEPAV1@XZ ; AListItem::GetNext
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	89 01		 mov	 DWORD PTR [ecx], eax

; 77   :                 li->SetNext(NULL);

  00028	6a 00		 push	 0
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  0002d	e8 00 00 00 00	 call	 ?SetNext@AListItem@@QAEXPAV1@@Z ; AListItem::SetNext
$L32744:

; 78   :             }
; 79   :             return li;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _li$[ebp]

; 80   :         }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?RemoveHead@AList@@QAEPAVAListItem@@XZ ENDP		; AList::RemoveHead
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\tsigtrk.h
_TEXT	ENDS
;	COMDAT ??0CTimeSigStateData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CTimeSigStateData@@QAE@XZ PROC NEAR			; CTimeSigStateData::CTimeSigStateData, COMDAT
; _this$ = ecx

; 33   :     CTimeSigStateData()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 34   : 	{
; 35   : 		m_mtPrevEnd = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 36   : 		m_bBeat = 4;

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c6 41 20 04	 mov	 BYTE PTR [ecx+32], 4

; 37   : 		m_bBeatsPerMeasure = 4;

  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	c6 42 21 04	 mov	 BYTE PTR [edx+33], 4

; 38   : 		m_mtTimeSig = 0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 39   :         m_fActive = TRUE;

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	c7 41 1c 01 00
	00 00		 mov	 DWORD PTR [ecx+28], 1

; 40   : 		/* don't need these since they are always initialized
; 41   : 		m_pPerformance = NULL;
; 42   : 		m_pSegState = NULL;
; 43   : 		m_dwVirtualTrackID = 0;
; 44   : 		*/
; 45   : 	}

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??0CTimeSigStateData@@QAE@XZ ENDP			; CTimeSigStateData::CTimeSigStateData
_TEXT	ENDS
END
