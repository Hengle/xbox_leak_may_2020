; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	..\segtrtrk.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DK@BMOFPECK@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@BAGNGEK@?$CKppStateData?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@BIHOAIKF@pSegmentState?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EF@PAFCHIAH@Error?3?5Unable?5to?5load?5segment?5tr@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CP@HOMJKDBN@Segment?5Trigger?5Track?5failed?5seg@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EG@GEIPGMOM@Error?3?5Unable?5to?5load?5segment?5tr@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EJ@LCMAMFIO@Error?3?5Segment?5trigger?5track?5fai@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EM@KFGKMIMM@Error?3?5Unable?5to?5load?5segment?5tr@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0GB@ECKJEHIB@Error?3?5The?5segment?5trigger?5track@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BGAOHDMM@?$CBp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01JBBJJEPG@p?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04EEOPDBPD@?$CBm_p?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT ?SetParam@CSegTriggerTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitPlay@CSegTriggerTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadHrFailOK@@YGJABVRiffIter@SmartRef@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadRiff@CSegTriggerTrack@@MAEJAAVRiffIter@SmartRef@@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PlayItem@CSegTriggerTrack@@MAEJABUTriggerInfo@@AAUCSegTriggerTrackState@@PAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KJ_J_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadTrigger@CSegTriggerTrack@@AAEJVRiffIter@SmartRef@@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@ULyricInfo@@@@QBEPAV?$TListItem@ULyricInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@ULyricInfo@@@@QAEXPAV?$TListItem@ULyricInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@ULyricInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@ULyricInfo@@@@QAEAAULyricInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@UTriggerInfo@@@@SGHAAUTriggerInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@ULyricInfo@@@@SGHAAULyricInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@PAUIDirectMusicStyle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAUIDirectMusicStyle@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAUIDirectMusicStyle@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAPAUIDirectMusicStyle@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$Buffer@G@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$Buffer@G@SmartRef@@QAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Buffer@G@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$Buffer@G@SmartRef@@QAEPAPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@ULyricInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEAAV01@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEAAV01@PAUIDirectMusicStyle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UTriggerInfo@@@@QAEXP6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@ULyricInfo@@@@QAEXP6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_SEQ_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_CURVE_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@_J@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UObjectInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RiffIterReadChunk@SmartRef@@YGJAAVRiffIter@1@PAU_DMUS_IO_SEGMENT_TRACK_HEADER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RiffIterReadChunk@SmartRef@@YGJAAVRiffIter@1@PAU_DMUS_IO_SEGMENT_ITEM_HEADER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ObjectInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UTriggerInfo@@@@QAEPAV1@P6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@ULyricInfo@@@@QAEPAV1@P6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UTriggerInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UTriggerInfo@@@@AAEPAV1@PAV1@P6GHAAUTriggerInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@ULyricInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@ULyricInfo@@@@AAEPAV1@PAV1@P6GHAAULyricInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UParamInfo@CParamControlTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UParamInfo@CParamControlTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ParamInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WaveItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WString@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WString@SmartRef@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@ULyricInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@ULyricInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UTriggerInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadReference@RiffIter@SmartRef@@QAEJPAUIDirectMusicLoader@@ABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?id@RiffIter@SmartRef@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?validate@RiffIter@SmartRef@@ABE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?type@RiffIter@SmartRef@@QBE?AW4RiffType@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Descend@RiffIter@SmartRef@@QAE?AV12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BRiffIter@SmartRef@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?hr@RiffIter@SmartRef@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CritSec@SmartRef@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CritSec@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSegTriggerTrackState@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ ; TListItem<TriggerInfo>::GetItemValue
PUBLIC	?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ ; TList<TriggerInfo>::GetHead
PUBLIC	?SetParam@CSegTriggerTrack@@UAGJABU_GUID@@JPAX@Z ; CSegTriggerTrack::SetParam
PUBLIC	?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ	; TListItem<TriggerInfo>::GetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\segtrtrk.cpp
;	COMDAT ?SetParam@CSegTriggerTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT
_rinfo$69429 = -12
_li$69425 = -8
_hr$ = -4
_this$ = 8
_rguid$ = 12
_mtTime$ = 16
_pData$ = 20
?SetParam@CSegTriggerTrack@@UAGJABU_GUID@@JPAX@Z PROC NEAR ; CSegTriggerTrack::SetParam, COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 20   : 	HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 21   :     // Allow a certain amount of recursion. If it gets to 10, something is obviously broken.
; 22   :     if (m_dwRecursionCount < 10)

  0000d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 78 3c 0a	 cmp	 DWORD PTR [eax+60], 10	; 0000000aH
  00014	7d 77		 jge	 SHORT $L69424

; 23   :     {
; 24   :         m_dwRecursionCount++;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0001c	83 c2 01	 add	 edx, 1
  0001f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00022	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 25   : 	    TListItem<TriggerInfo> *li = m_EventList.GetHead();

  00025	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	83 c1 30	 add	 ecx, 48			; 00000030H
  0002b	e8 00 00 00 00	 call	 ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ ; TList<TriggerInfo>::GetHead
  00030	89 45 f8	 mov	 DWORD PTR _li$69425[ebp], eax

; 26   : 	    for (; li; li = li->GetNext())

  00033	eb 0b		 jmp	 SHORT $L69426
$L69427:
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _li$69425[ebp]
  00038	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ ; TListItem<TriggerInfo>::GetNext
  0003d	89 45 f8	 mov	 DWORD PTR _li$69425[ebp], eax
$L69426:
  00040	83 7d f8 00	 cmp	 DWORD PTR _li$69425[ebp], 0
  00044	74 38		 je	 SHORT $L69428

; 27   : 	    {
; 28   : 		    TriggerInfo &rinfo = li->GetItemValue();

  00046	8b 4d f8	 mov	 ecx, DWORD PTR _li$69425[ebp]
  00049	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ ; TListItem<TriggerInfo>::GetItemValue
  0004e	89 45 f4	 mov	 DWORD PTR _rinfo$69429[ebp], eax

; 29   : 		    rinfo.pIDMSegment->SetParam(rguid, 0xFFFFFFFF, DMUS_SEG_ALLTRACKS, mtTime - rinfo.lTimePhysical, pData);

  00051	8b 4d 14	 mov	 ecx, DWORD PTR _pData$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 f4	 mov	 edx, DWORD PTR _rinfo$69429[ebp]
  00058	8b 45 10	 mov	 eax, DWORD PTR _mtTime$[ebp]
  0005b	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  0005e	50		 push	 eax
  0005f	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00064	6a ff		 push	 -1
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _rguid$[ebp]
  00069	51		 push	 ecx
  0006a	8b 55 f4	 mov	 edx, DWORD PTR _rinfo$69429[ebp]
  0006d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00070	8b 4d f4	 mov	 ecx, DWORD PTR _rinfo$69429[ebp]
  00073	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00076	8b 00		 mov	 eax, DWORD PTR [eax]
  00078	52		 push	 edx
  00079	ff 50 70	 call	 DWORD PTR [eax+112]

; 30   : 	    }

  0007c	eb b7		 jmp	 SHORT $L69427
$L69428:

; 31   :         m_dwRecursionCount--;

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00084	83 ea 01	 sub	 edx, 1
  00087	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	89 50 3c	 mov	 DWORD PTR [eax+60], edx
$L69424:

; 32   :     }
; 33   : 
; 34   : 	return hr;

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 35   : }

  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 10 00	 ret	 16			; 00000010H
?SetParam@CSegTriggerTrack@@UAGJABU_GUID@@JPAX@Z ENDP	; CSegTriggerTrack::SetParam
_TEXT	ENDS
PUBLIC	?InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ; CPlayingTrack<CSegTriggerTrack,TriggerInfo,CSegTriggerTrackState>::InitPlay
PUBLIC	?InitPlay@CSegTriggerTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ; CSegTriggerTrack::InitPlay
PUBLIC	??_C@_0DK@BMOFPECK@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0N@BAGNGEK@?$CKppStateData?$AA@		; `string'
PUBLIC	??_C@_0O@BIHOAIKF@pSegmentState?$AA@		; `string'
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
EXTRN	?DebugAssert@@YGXPAD0K@Z:NEAR			; DebugAssert
EXTRN	_IID_IDirectMusicSegmentState:BYTE
EXTRN	_IID_IDirectMusicAudioPath:BYTE
;	COMDAT ??_C@_0DK@BMOFPECK@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DK@BMOFPECK@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dmusic\dmime\segtrtrk.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BAGNGEK@?$CKppStateData?$AA@
CONST	SEGMENT
??_C@_0N@BAGNGEK@?$CKppStateData?$AA@ DB '*ppStateData', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BIHOAIKF@pSegmentState?$AA@
CONST	SEGMENT
??_C@_0O@BIHOAIKF@pSegmentState?$AA@ DB 'pSegmentState', 00H ; `string'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?InitPlay@CSegTriggerTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT
_pSegSt8$69448 = -12
_pState$69446 = -8
_hr$ = -4
_this$ = 8
_pSegmentState$ = 12
_pPerformance$ = 16
_ppStateData$ = 20
_dwTrackID$ = 24
_dwFlags$ = 28
?InitPlay@CSegTriggerTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z PROC NEAR ; CSegTriggerTrack::InitPlay, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 45   : 	// Call PlayingTrack base class, which sets up our state data.
; 46   : 	HRESULT hr = CSegTriggerTrackBase::InitPlay(pSegmentState, pPerformance, ppStateData, dwTrackID, dwFlags);

  00006	8b 45 1c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 18	 mov	 ecx, DWORD PTR _dwTrackID$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 14	 mov	 edx, DWORD PTR _ppStateData$[ebp]
  00011	52		 push	 edx
  00012	8b 45 10	 mov	 eax, DWORD PTR _pPerformance$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegmentState$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ?InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ; CPlayingTrack<CSegTriggerTrack,TriggerInfo,CSegTriggerTrackState>::InitPlay
  00023	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 47   : 	if (SUCCEEDED(hr))

  00026	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0002a	0f 8c a3 00 00
	00		 jl	 $L69440

; 48   : 	{
; 49   : 		// Get the audiopath being used by our segment state and save it in our state data.
; 50   : 		assert(*ppStateData); // base class should have created state data

  00030	8b 45 14	 mov	 eax, DWORD PTR _ppStateData$[ebp]
  00033	83 38 00	 cmp	 DWORD PTR [eax], 0
  00036	75 11		 jne	 SHORT $L70083
  00038	6a 32		 push	 50			; 00000032H
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@BMOFPECK@c?3?2xbox?2private?2windows?2directx?2@
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BAGNGEK@?$CKppStateData?$AA@
  00044	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L70083:

; 51   : 		assert(pSegmentState); // base class should have returned E_POINTER if it wasn't given a segment state

  00049	83 7d 0c 00	 cmp	 DWORD PTR _pSegmentState$[ebp], 0
  0004d	75 11		 jne	 SHORT $L70084
  0004f	6a 33		 push	 51			; 00000033H
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@BMOFPECK@c?3?2xbox?2private?2windows?2directx?2@
  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@BIHOAIKF@pSegmentState?$AA@
  0005b	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L70084:

; 52   : 
; 53   : 		CSegTriggerTrackState *pState = static_cast<CSegTriggerTrackState *>(*ppStateData);

  00060	8b 45 14	 mov	 eax, DWORD PTR _ppStateData$[ebp]
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	89 4d f8	 mov	 DWORD PTR _pState$69446[ebp], ecx

; 54   : 
; 55   : 		IDirectMusicSegmentState8 *pSegSt8 = NULL;

  00068	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pSegSt8$69448[ebp], 0

; 56   : 		hr = pSegmentState->QueryInterface(IID_IDirectMusicSegmentState8, reinterpret_cast<void**>(&pSegSt8));

  0006f	8d 55 f4	 lea	 edx, DWORD PTR _pSegSt8$69448[ebp]
  00072	52		 push	 edx
  00073	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicSegmentState
  00078	8b 45 0c	 mov	 eax, DWORD PTR _pSegmentState$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	8b 55 0c	 mov	 edx, DWORD PTR _pSegmentState$[ebp]
  00080	52		 push	 edx
  00081	ff 11		 call	 DWORD PTR [ecx]
  00083	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 57   : 		if (SUCCEEDED(hr))

  00086	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0008a	7c 47		 jl	 SHORT $L69440

; 58   : 		{
; 59   : 			hr = pSegSt8->GetObjectInPath(
; 60   : 							0,							// pchannel doesn't apply
; 61   : 							DMUS_PATH_AUDIOPATH,		// get the audiopath
; 62   : 							0,							// buffer index doesn't apply
; 63   : 							CLSID_NULL,					// clsid doesn't apply
; 64   : 							0,							// there should be only one audiopath
; 65   : 							IID_IDirectMusicAudioPath,
; 66   : 							reinterpret_cast<void**>(&pState->pAudioPath));

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _pState$69446[ebp]
  0008f	83 c0 08	 add	 eax, 8
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicAudioPath
  00098	6a 00		 push	 0
  0009a	68 00 00 00 00	 push	 OFFSET FLAT:__GUID_00000000_0000_0000_0000_000000000000
  0009f	6a 00		 push	 0
  000a1	68 00 20 00 00	 push	 8192			; 00002000H
  000a6	6a 00		 push	 0
  000a8	8b 4d f4	 mov	 ecx, DWORD PTR _pSegSt8$69448[ebp]
  000ab	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ad	8b 45 f4	 mov	 eax, DWORD PTR _pSegSt8$69448[ebp]
  000b0	50		 push	 eax
  000b1	ff 52 0c	 call	 DWORD PTR [edx+12]
  000b4	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 67   : 
; 68   : 			// If this doesn't find an audiopath that's OK.  If we're not playing on an audiopath then
; 69   : 			// pAudioPath stays NULL and we'll play our triggered segments on the general performance.
; 70   : 			if (hr == DMUS_E_NOT_FOUND)

  000b7	81 7d fc 61 11
	78 88		 cmp	 DWORD PTR _hr$[ebp], -2005397151 ; 88781161H
  000be	75 07		 jne	 SHORT $L69458

; 71   : 				hr = S_OK;

  000c0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$L69458:

; 72   :     		pSegSt8->Release();

  000c7	8b 4d f4	 mov	 ecx, DWORD PTR _pSegSt8$69448[ebp]
  000ca	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cc	8b 45 f4	 mov	 eax, DWORD PTR _pSegSt8$69448[ebp]
  000cf	50		 push	 eax
  000d0	ff 52 08	 call	 DWORD PTR [edx+8]
$L69440:

; 73   : 		}
; 74   : 	}
; 75   : 	return hr;

  000d3	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 76   : }

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 18 00	 ret	 24			; 00000018H
?InitPlay@CSegTriggerTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ENDP ; CSegTriggerTrack::InitPlay
_TEXT	ENDS
PUBLIC	?hr@RiffIter@SmartRef@@QBEJXZ			; SmartRef::RiffIter::hr
PUBLIC	?LoadHrFailOK@@YGJABVRiffIter@SmartRef@@@Z	; LoadHrFailOK
; Function compile flags: /Odt
;	COMDAT ?LoadHrFailOK@@YGJABVRiffIter@SmartRef@@@Z
_TEXT	SEGMENT
tv67 = -8
_hr$ = -4
_ri$ = 8
?LoadHrFailOK@@YGJABVRiffIter@SmartRef@@@Z PROC NEAR	; LoadHrFailOK, COMDAT

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 88   : 	HRESULT hr = ri.hr();

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _ri$[ebp]
  00009	e8 00 00 00 00	 call	 ?hr@RiffIter@SmartRef@@QBEJXZ ; SmartRef::RiffIter::hr
  0000e	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 89   : 	return SUCCEEDED(hr) ? DMUS_E_INVALID_SEGMENTTRIGGERTRACK : hr;

  00011	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00015	7c 09		 jl	 SHORT $L70088
  00017	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR tv67[ebp], -2147467259 ; 80004005H
  0001e	eb 06		 jmp	 SHORT $L70089
$L70088:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR tv67[ebp], eax
$L70089:
  00026	8b 45 f8	 mov	 eax, DWORD PTR tv67[ebp]

; 90   : };

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?LoadHrFailOK@@YGJABVRiffIter@SmartRef@@@Z ENDP		; LoadHrFailOK
_TEXT	ENDS
PUBLIC	?Descend@RiffIter@SmartRef@@QAE?AV12@XZ		; SmartRef::RiffIter::Descend
PUBLIC	??BRiffIter@SmartRef@@QBE_NXZ			; SmartRef::RiffIter::operator bool
PUBLIC	?type@RiffIter@SmartRef@@QBE?AW4RiffType@12@XZ	; SmartRef::RiffIter::type
PUBLIC	?id@RiffIter@SmartRef@@QBEKXZ			; SmartRef::RiffIter::id
PUBLIC	?LoadRiff@CSegTriggerTrack@@MAEJAAVRiffIter@SmartRef@@PAUIDirectMusicLoader@@@Z ; CSegTriggerTrack::LoadRiff
PUBLIC	?LoadTrigger@CSegTriggerTrack@@AAEJVRiffIter@SmartRef@@PAUIDirectMusicLoader@@@Z ; CSegTriggerTrack::LoadTrigger
PUBLIC	??_C@_0EF@PAFCHIAH@Error?3?5Unable?5to?5load?5segment?5tr@ ; `string'
PUBLIC	?RiffIterReadChunk@SmartRef@@YGJAAVRiffIter@1@PAU_DMUS_IO_SEGMENT_TRACK_HEADER@@@Z ; SmartRef::RiffIterReadChunk
EXTRN	??1RiffIter@SmartRef@@QAE@XZ:NEAR		; SmartRef::RiffIter::~RiffIter
EXTRN	??ERiffIter@SmartRef@@QAEAAV01@XZ:NEAR		; SmartRef::RiffIter::operator++
EXTRN	?Find@RiffIter@SmartRef@@QAEAAV12@W4RiffType@12@K@Z:NEAR ; SmartRef::RiffIter::Find
EXTRN	?DebugTrace@@YAXHPADZZ:NEAR			; DebugTrace
;	COMDAT ??_C@_0EF@PAFCHIAH@Error?3?5Unable?5to?5load?5segment?5tr@
CONST	SEGMENT
??_C@_0EF@PAFCHIAH@Error?3?5Unable?5to?5load?5segment?5tr@ DB 'Error: Una'
	DB	'ble to load segment trigger track: List ''segt'' not found.', 0aH
	DB	00H						; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?LoadRiff@CSegTriggerTrack@@MAEJAAVRiffIter@SmartRef@@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT
_this$ = -148
$T70098 = -144
$T70097 = -140
$T70096 = -136
$T70094 = -128
$T70093 = -124
_riSegList$69522 = -120
_ioItem$69502 = -64
_riTrackForm$ = -60
_hr$ = -4
_ri$ = 8
_pIDMLoader$ = 12
?LoadRiff@CSegTriggerTrack@@MAEJAAVRiffIter@SmartRef@@PAUIDirectMusicLoader@@@Z PROC NEAR ; CSegTriggerTrack::LoadRiff, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 95   : 	HRESULT hr = S_OK;

  0000f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 96   : 
; 97   : 	if (!ri.Find(SmartRef::RiffIter::List, DMUS_FOURCC_SEGTRACK_LIST))

  00016	68 73 65 67 74	 push	 1952933235		; 74676573H
  0001b	6a 01		 push	 1
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _ri$[ebp]
  00020	e8 00 00 00 00	 call	 ?Find@RiffIter@SmartRef@@QAEAAV12@W4RiffType@12@K@Z ; SmartRef::RiffIter::Find
  00025	8b c8		 mov	 ecx, eax
  00027	e8 00 00 00 00	 call	 ??BRiffIter@SmartRef@@QBE_NXZ ; SmartRef::RiffIter::operator bool
  0002c	0f b6 c0	 movzx	 eax, al
  0002f	85 c0		 test	 eax, eax
  00031	75 29		 jne	 SHORT $L69481

; 98   : 	{
; 99   : #ifdef DBG
; 100  : 		if (SUCCEEDED(ri.hr()))

  00033	8b 4d 08	 mov	 ecx, DWORD PTR _ri$[ebp]
  00036	e8 00 00 00 00	 call	 ?hr@RiffIter@SmartRef@@QBEJXZ ; SmartRef::RiffIter::hr
  0003b	85 c0		 test	 eax, eax
  0003d	7c 0f		 jl	 SHORT $L69483

; 101  : 		{
; 102  : 			Trace(1, "Error: Unable to load segment trigger track: List 'segt' not found.\n");

  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EF@PAFCHIAH@Error?3?5Unable?5to?5load?5segment?5tr@
  00044	6a 01		 push	 1
  00046	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004b	83 c4 08	 add	 esp, 8
$L69483:

; 103  : 		}
; 104  : #endif
; 105  : 		return LoadHrFailOK(ri);

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _ri$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ?LoadHrFailOK@@YGJABVRiffIter@SmartRef@@@Z ; LoadHrFailOK
  00057	e9 b2 01 00 00	 jmp	 $L69470
$L69481:

; 106  : 	}
; 107  : 
; 108  : 	SmartRef::RiffIter riTrackForm = ri.Descend();

  0005c	8d 55 c4	 lea	 edx, DWORD PTR _riTrackForm$[ebp]
  0005f	52		 push	 edx
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _ri$[ebp]
  00063	e8 00 00 00 00	 call	 ?Descend@RiffIter@SmartRef@@QAE?AV12@XZ ; SmartRef::RiffIter::Descend

; 109  : 	if (!riTrackForm)

  00068	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  0006b	e8 00 00 00 00	 call	 ??BRiffIter@SmartRef@@QBE_NXZ ; SmartRef::RiffIter::operator bool
  00070	0f b6 c0	 movzx	 eax, al
  00073	85 c0		 test	 eax, eax
  00075	75 1b		 jne	 SHORT $L69487

; 110  : 		return riTrackForm.hr();

  00077	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  0007a	e8 00 00 00 00	 call	 ?hr@RiffIter@SmartRef@@QBEJXZ ; SmartRef::RiffIter::hr
  0007f	89 45 84	 mov	 DWORD PTR $T70093[ebp], eax
  00082	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  00085	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  0008a	8b 45 84	 mov	 eax, DWORD PTR $T70093[ebp]
  0008d	e9 7c 01 00 00	 jmp	 $L69470
$L69487:

; 111  : 
; 112  : 	for ( ; riTrackForm; ++riTrackForm)

  00092	eb 08		 jmp	 SHORT $L69489
$L69490:
  00094	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  00097	e8 00 00 00 00	 call	 ??ERiffIter@SmartRef@@QAEAAV01@XZ ; SmartRef::RiffIter::operator++
$L69489:
  0009c	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  0009f	e8 00 00 00 00	 call	 ??BRiffIter@SmartRef@@QBE_NXZ ; SmartRef::RiffIter::operator bool
  000a4	0f b6 c8	 movzx	 ecx, al
  000a7	85 c9		 test	 ecx, ecx
  000a9	0f 84 43 01 00
	00		 je	 $L69491

; 113  : 	{
; 114  : 		if (riTrackForm.type() == SmartRef::RiffIter::Chunk)

  000af	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  000b2	e8 00 00 00 00	 call	 ?type@RiffIter@SmartRef@@QBE?AW4RiffType@12@XZ ; SmartRef::RiffIter::type
  000b7	83 f8 02	 cmp	 eax, 2
  000ba	75 4c		 jne	 SHORT $L69492

; 115  : 		{
; 116  : 			if (riTrackForm.id() == DMUS_FOURCC_SEGTRACK_CHUNK)

  000bc	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  000bf	e8 00 00 00 00	 call	 ?id@RiffIter@SmartRef@@QBEKXZ ; SmartRef::RiffIter::id
  000c4	3d 73 67 74 68	 cmp	 eax, 1752459123		; 68746773H
  000c9	75 38		 jne	 SHORT $L69501

; 117  : 			{
; 118  : 				DMUS_IO_SEGMENT_TRACK_HEADER ioItem;
; 119  : 				hr = SmartRef::RiffIterReadChunk(riTrackForm, &ioItem);

  000cb	8d 55 c0	 lea	 edx, DWORD PTR _ioItem$69502[ebp]
  000ce	52		 push	 edx
  000cf	8d 45 c4	 lea	 eax, DWORD PTR _riTrackForm$[ebp]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ?RiffIterReadChunk@SmartRef@@YGJAAVRiffIter@1@PAU_DMUS_IO_SEGMENT_TRACK_HEADER@@@Z ; SmartRef::RiffIterReadChunk
  000d8	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 120  : 				if (FAILED(hr))

  000db	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000df	7d 16		 jge	 SHORT $L69509

; 121  : 					return hr;

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  000e4	89 4d 80	 mov	 DWORD PTR $T70094[ebp], ecx
  000e7	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  000ea	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  000ef	8b 45 80	 mov	 eax, DWORD PTR $T70094[ebp]
  000f2	e9 17 01 00 00	 jmp	 $L69470
$L69509:

; 122  : 
; 123  : 				m_dwFlags = ioItem.dwFlags;

  000f7	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  000fd	8b 45 c0	 mov	 eax, DWORD PTR _ioItem$69502[ebp]
  00100	89 42 3c	 mov	 DWORD PTR [edx+60], eax
$L69501:

; 124  : 			}
; 125  : 		}
; 126  : 		else if (riTrackForm.type() == SmartRef::RiffIter::List)

  00103	e9 e5 00 00 00	 jmp	 $L69511
$L69492:
  00108	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  0010b	e8 00 00 00 00	 call	 ?type@RiffIter@SmartRef@@QBE?AW4RiffType@12@XZ ; SmartRef::RiffIter::type
  00110	83 f8 01	 cmp	 eax, 1
  00113	0f 85 d4 00 00
	00		 jne	 $L69511

; 127  : 		{
; 128  : 			if (riTrackForm.id() == DMUS_FOURCC_SEGMENTS_LIST)

  00119	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  0011c	e8 00 00 00 00	 call	 ?id@RiffIter@SmartRef@@QBEKXZ ; SmartRef::RiffIter::id
  00121	3d 6c 73 67 6c	 cmp	 eax, 1818719084		; 6c67736cH
  00126	0f 85 c1 00 00
	00		 jne	 $L69511

; 129  : 			{
; 130  : 				SmartRef::RiffIter riSegList = riTrackForm.Descend();

  0012c	8d 4d 88	 lea	 ecx, DWORD PTR _riSegList$69522[ebp]
  0012f	51		 push	 ecx
  00130	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  00133	e8 00 00 00 00	 call	 ?Descend@RiffIter@SmartRef@@QAE?AV12@XZ ; SmartRef::RiffIter::Descend
$L69525:

; 131  : 				while (riSegList && riSegList.Find(SmartRef::RiffIter::List, DMUS_FOURCC_SEGMENT_LIST))

  00138	8d 4d 88	 lea	 ecx, DWORD PTR _riSegList$69522[ebp]
  0013b	e8 00 00 00 00	 call	 ??BRiffIter@SmartRef@@QBE_NXZ ; SmartRef::RiffIter::operator bool
  00140	0f b6 d0	 movzx	 edx, al
  00143	85 d2		 test	 edx, edx
  00145	74 6c		 je	 SHORT $L69526
  00147	68 6c 73 65 67	 push	 1734701932		; 6765736cH
  0014c	6a 01		 push	 1
  0014e	8d 4d 88	 lea	 ecx, DWORD PTR _riSegList$69522[ebp]
  00151	e8 00 00 00 00	 call	 ?Find@RiffIter@SmartRef@@QAEAAV12@W4RiffType@12@K@Z ; SmartRef::RiffIter::Find
  00156	8b c8		 mov	 ecx, eax
  00158	e8 00 00 00 00	 call	 ??BRiffIter@SmartRef@@QBE_NXZ ; SmartRef::RiffIter::operator bool
  0015d	0f b6 c0	 movzx	 eax, al
  00160	85 c0		 test	 eax, eax
  00162	74 4f		 je	 SHORT $L69526

; 132  : 				{
; 133  : 					hr = LoadTrigger(riSegList.Descend(), pIDMLoader);

  00164	8b 4d 0c	 mov	 ecx, DWORD PTR _pIDMLoader$[ebp]
  00167	51		 push	 ecx
  00168	83 ec 38	 sub	 esp, 56			; 00000038H
  0016b	54		 push	 esp
  0016c	8d 4d 88	 lea	 ecx, DWORD PTR _riSegList$69522[ebp]
  0016f	e8 00 00 00 00	 call	 ?Descend@RiffIter@SmartRef@@QAE?AV12@XZ ; SmartRef::RiffIter::Descend
  00174	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0017a	e8 00 00 00 00	 call	 ?LoadTrigger@CSegTriggerTrack@@AAEJVRiffIter@SmartRef@@PAUIDirectMusicLoader@@@Z ; CSegTriggerTrack::LoadTrigger
  0017f	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 134  : 					if (FAILED(hr))

  00182	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00186	7d 21		 jge	 SHORT $L69538

; 135  : 						return hr;

  00188	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  0018b	89 95 78 ff ff
	ff		 mov	 DWORD PTR $T70096[ebp], edx
  00191	8d 4d 88	 lea	 ecx, DWORD PTR _riSegList$69522[ebp]
  00194	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  00199	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  0019c	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  001a1	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T70096[ebp]
  001a7	eb 65		 jmp	 SHORT $L69470
$L69538:

; 136  : 					++riSegList;

  001a9	8d 4d 88	 lea	 ecx, DWORD PTR _riSegList$69522[ebp]
  001ac	e8 00 00 00 00	 call	 ??ERiffIter@SmartRef@@QAEAAV01@XZ ; SmartRef::RiffIter::operator++

; 137  : 				}

  001b1	eb 85		 jmp	 SHORT $L69525
$L69526:

; 138  : 				hr = riSegList.hr();

  001b3	8d 4d 88	 lea	 ecx, DWORD PTR _riSegList$69522[ebp]
  001b6	e8 00 00 00 00	 call	 ?hr@RiffIter@SmartRef@@QBEJXZ ; SmartRef::RiffIter::hr
  001bb	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 139  : 				if (FAILED(hr))

  001be	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001c2	7d 21		 jge	 SHORT $L69541

; 140  : 					return hr;

  001c4	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  001c7	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T70097[ebp], eax
  001cd	8d 4d 88	 lea	 ecx, DWORD PTR _riSegList$69522[ebp]
  001d0	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  001d5	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  001d8	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  001dd	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T70097[ebp]
  001e3	eb 29		 jmp	 SHORT $L69470
$L69541:

; 141  : 			}

  001e5	8d 4d 88	 lea	 ecx, DWORD PTR _riSegList$69522[ebp]
  001e8	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
$L69511:

; 142  : 		}
; 143  : 	}

  001ed	e9 a2 fe ff ff	 jmp	 $L69490
$L69491:

; 144  : 	return riTrackForm.hr();

  001f2	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  001f5	e8 00 00 00 00	 call	 ?hr@RiffIter@SmartRef@@QBEJXZ ; SmartRef::RiffIter::hr
  001fa	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T70098[ebp], eax
  00200	8d 4d c4	 lea	 ecx, DWORD PTR _riTrackForm$[ebp]
  00203	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  00208	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T70098[ebp]
$L69470:

; 145  : }

  0020e	8b e5		 mov	 esp, ebp
  00210	5d		 pop	 ebp
  00211	c2 08 00	 ret	 8
?LoadRiff@CSegTriggerTrack@@MAEJAAVRiffIter@SmartRef@@PAUIDirectMusicLoader@@@Z ENDP ; CSegTriggerTrack::LoadRiff
_TEXT	ENDS
PUBLIC	?PlayItem@CSegTriggerTrack@@MAEJABUTriggerInfo@@AAUCSegTriggerTrackState@@PAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KJ_J_N@Z ; CSegTriggerTrack::PlayItem
PUBLIC	??_C@_0CP@HOMJKDBN@Segment?5Trigger?5Track?5failed?5seg@ ; `string'
EXTRN	_IID_IDirectMusicPerformance:BYTE
;	COMDAT ??_C@_0CP@HOMJKDBN@Segment?5Trigger?5Track?5failed?5seg@
CONST	SEGMENT
??_C@_0CP@HOMJKDBN@Segment?5Trigger?5Track?5failed?5seg@ DB 'Segment Trig'
	DB	'ger Track failed segment playback', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?PlayItem@CSegTriggerTrack@@MAEJABUTriggerInfo@@AAUCSegTriggerTrackState@@PAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KJ_J_N@Z
_TEXT	SEGMENT
tv88 = -20
_this$ = -12
_pPerf8$ = -8
_hr$ = -4
_item$ = 8
_state$ = 12
_pPerf$ = 16
_pSegSt$ = 20
_dwVirtualID$ = 24
_mtOffset$ = 28
_rtOffset$ = 32
_fClockTime$ = 40
?PlayItem@CSegTriggerTrack@@MAEJABUTriggerInfo@@AAUCSegTriggerTrackState@@PAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KJ_J_N@Z PROC NEAR ; CSegTriggerTrack::PlayItem, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 161  : 	IDirectMusicPerformance8 *pPerf8 = NULL;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pPerf8$[ebp], 0

; 162  : 	HRESULT hr = pPerf->QueryInterface(IID_IDirectMusicPerformance8, reinterpret_cast<void**>(&pPerf8));

  00010	8d 45 f8	 lea	 eax, DWORD PTR _pPerf8$[ebp]
  00013	50		 push	 eax
  00014	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicPerformance
  00019	8b 4d 10	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  0001c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001e	8b 45 10	 mov	 eax, DWORD PTR _pPerf$[ebp]
  00021	50		 push	 eax
  00022	ff 12		 call	 DWORD PTR [edx]
  00024	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 163  : 	if (FAILED(hr))

  00027	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0002b	7d 08		 jge	 SHORT $L69559

; 164  : 		return hr;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  00030	e9 9f 00 00 00	 jmp	 $L69554
$L69559:

; 165  : 
; 166  : 	hr = pPerf8->PlaySegmentEx(
; 167  : 					item.pIDMSegment,
; 168  : 					NULL,														// not a song
; 169  : 					NULL,														// no transition
; 170  : 					item.dwPlayFlags | (fClockTime ? DMUS_SEGF_REFTIME : 0),	// flags
; 171  : 					fClockTime
; 172  : 						? item.lTimePhysical * REF_PER_MIL + rtOffset
; 173  : 						: item.lTimePhysical + mtOffset,						// time
; 174  : 					NULL,														// ignore returned segment state
; 175  : 					NULL,														// no replacement
; 176  : 					state.pAudioPath											// audio path to use (may be NULL indicating defualt)
; 177  : 					);

  00035	0f b6 4d 28	 movzx	 ecx, BYTE PTR _fClockTime$[ebp]
  00039	85 c9		 test	 ecx, ecx
  0003b	74 1b		 je	 SHORT $L70102
  0003d	8b 55 08	 mov	 edx, DWORD PTR _item$[ebp]
  00040	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00043	69 c0 10 27 00
	00		 imul	 eax, 10000		; 00002710H
  00049	99		 cdq
  0004a	03 45 20	 add	 eax, DWORD PTR _rtOffset$[ebp]
  0004d	13 55 24	 adc	 edx, DWORD PTR _rtOffset$[ebp+4]
  00050	89 45 ec	 mov	 DWORD PTR tv88[ebp], eax
  00053	89 55 f0	 mov	 DWORD PTR tv88[ebp+4], edx
  00056	eb 10		 jmp	 SHORT $L70103
$L70102:
  00058	8b 45 08	 mov	 eax, DWORD PTR _item$[ebp]
  0005b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005e	03 45 1c	 add	 eax, DWORD PTR _mtOffset$[ebp]
  00061	99		 cdq
  00062	89 45 ec	 mov	 DWORD PTR tv88[ebp], eax
  00065	89 55 f0	 mov	 DWORD PTR tv88[ebp+4], edx
$L70103:
  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _state$[ebp]
  0006b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0006e	52		 push	 edx
  0006f	6a 00		 push	 0
  00071	6a 00		 push	 0
  00073	8b 45 f0	 mov	 eax, DWORD PTR tv88[ebp+4]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR tv88[ebp]
  0007a	51		 push	 ecx
  0007b	0f b6 55 28	 movzx	 edx, BYTE PTR _fClockTime$[ebp]
  0007f	f7 da		 neg	 edx
  00081	1b d2		 sbb	 edx, edx
  00083	83 e2 40	 and	 edx, 64			; 00000040H
  00086	8b 45 08	 mov	 eax, DWORD PTR _item$[ebp]
  00089	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008c	0b ca		 or	 ecx, edx
  0008e	51		 push	 ecx
  0008f	6a 00		 push	 0
  00091	6a 00		 push	 0
  00093	8b 55 08	 mov	 edx, DWORD PTR _item$[ebp]
  00096	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00099	50		 push	 eax
  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _pPerf8$[ebp]
  0009d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009f	8b 45 f8	 mov	 eax, DWORD PTR _pPerf8$[ebp]
  000a2	50		 push	 eax
  000a3	ff 52 40	 call	 DWORD PTR [edx+64]
  000a6	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 178  : 	pPerf8->Release();

  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _pPerf8$[ebp]
  000ac	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ae	8b 45 f8	 mov	 eax, DWORD PTR _pPerf8$[ebp]
  000b1	50		 push	 eax
  000b2	ff 52 08	 call	 DWORD PTR [edx+8]

; 179  :     if (FAILED(hr))

  000b5	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b9	7d 16		 jge	 SHORT $L69561

; 180  :     {
; 181  :         Trace(1,"Segment Trigger Track failed segment playback\n");

  000bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@HOMJKDBN@Segment?5Trigger?5Track?5failed?5seg@
  000c0	6a 01		 push	 1
  000c2	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000c7	83 c4 08	 add	 esp, 8

; 182  :         hr = S_OK; // Avoid an assert.

  000ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$L69561:

; 183  :     }
; 184  : 	return hr;

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
$L69554:

; 185  : }

  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 24 00	 ret	 36			; 00000024H
?PlayItem@CSegTriggerTrack@@MAEJABUTriggerInfo@@AAUCSegTriggerTrackState@@PAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KJ_J_N@Z ENDP ; CSegTriggerTrack::PlayItem
_TEXT	ENDS
PUBLIC	??0?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@PAUIDirectMusicStyle@@@Z ; SmartRef::ComPtr<IDirectMusicStyle>::ComPtr<IDirectMusicStyle>
PUBLIC	??1?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@XZ ; SmartRef::ComPtr<IDirectMusicStyle>::~ComPtr<IDirectMusicStyle>
PUBLIC	??B?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAUIDirectMusicStyle@@XZ ; SmartRef::ComPtr<IDirectMusicStyle>::operator IDirectMusicStyle *
PUBLIC	??C?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAUIDirectMusicStyle@@XZ ; SmartRef::ComPtr<IDirectMusicStyle>::operator->
PUBLIC	??I?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAPAUIDirectMusicStyle@@XZ ; SmartRef::ComPtr<IDirectMusicStyle>::operator&
PUBLIC	??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z	; TListItem<TriggerInfo>::`scalar deleting destructor'
PUBLIC	??1?$Buffer@G@SmartRef@@QAE@XZ			; SmartRef::Buffer<unsigned short>::~Buffer<unsigned short>
PUBLIC	??B?$Buffer@G@SmartRef@@QAEPAGXZ		; SmartRef::Buffer<unsigned short>::operator unsigned short *
PUBLIC	??0?$Buffer@G@SmartRef@@QAE@XZ			; SmartRef::Buffer<unsigned short>::Buffer<unsigned short>
PUBLIC	??I?$Buffer@G@SmartRef@@QAEPAPAGXZ		; SmartRef::Buffer<unsigned short>::operator&
PUBLIC	??_C@_0EM@KFGKMIMM@Error?3?5Unable?5to?5load?5segment?5tr@ ; `string'
PUBLIC	??_C@_0GB@ECKJEHIB@Error?3?5The?5segment?5trigger?5track@ ; `string'
PUBLIC	?LoadReference@RiffIter@SmartRef@@QAEJPAUIDirectMusicLoader@@ABU_GUID@@PAPAX@Z ; SmartRef::RiffIter::LoadReference
PUBLIC	?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z ; TList<TriggerInfo>::AddHead
PUBLIC	??_C@_0EG@GEIPGMOM@Error?3?5Unable?5to?5load?5segment?5tr@ ; `string'
PUBLIC	?RiffIterReadChunk@SmartRef@@YGJAAVRiffIter@1@PAU_DMUS_IO_SEGMENT_ITEM_HEADER@@@Z ; SmartRef::RiffIterReadChunk
PUBLIC	??0?$TListItem@UTriggerInfo@@@@QAE@XZ		; TListItem<TriggerInfo>::TListItem<TriggerInfo>
PUBLIC	??_C@_0EJ@LCMAMFIO@Error?3?5Segment?5trigger?5track?5fai@ ; `string'
EXTRN	?ReadText@RiffIter@SmartRef@@QAEJPAPAG@Z:NEAR	; SmartRef::RiffIter::ReadText
EXTRN	_IID_IDirectMusicSegment:BYTE
EXTRN	_IID_IDirectMusicStyle:BYTE
;	COMDAT ??_C@_0EG@GEIPGMOM@Error?3?5Unable?5to?5load?5segment?5tr@
CONST	SEGMENT
??_C@_0EG@GEIPGMOM@Error?3?5Unable?5to?5load?5segment?5tr@ DB 'Error: Una'
	DB	'ble to load segment trigger track: Chunk ''sgih'' not found.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@LCMAMFIO@Error?3?5Segment?5trigger?5track?5fai@
CONST	SEGMENT
??_C@_0EJ@LCMAMFIO@Error?3?5Segment?5trigger?5track?5fai@ DB 'Error: Segm'
	DB	'ent trigger track failed, unable to load referenced segment.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@KFGKMIMM@Error?3?5Unable?5to?5load?5segment?5tr@
CONST	SEGMENT
??_C@_0EM@KFGKMIMM@Error?3?5Unable?5to?5load?5segment?5tr@ DB 'Error: Una'
	DB	'ble to load segment trigger track: Problem reading ''snam'' c'
	DB	'hunk.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@ECKJEHIB@Error?3?5The?5segment?5trigger?5track@
CONST	SEGMENT
??_C@_0GB@ECKJEHIB@Error?3?5The?5segment?5trigger?5track@ DB 'Error: The '
	DB	'segment trigger track couldn''t load because the motif %S was'
	DB	' not found in the style.', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?LoadTrigger@CSegTriggerTrack@@AAEJVRiffIter@SmartRef@@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT
tv313 = -228
tv295 = -224
tv291 = -220
tv280 = -216
tv272 = -212
tv267 = -208
tv250 = -204
tv187 = -200
tv171 = -196
tv153 = -192
tv140 = -188
tv92 = -184
tv76 = -180
_this$ = -176
$T70164 = -172
$T70163 = -168
$T70160 = -164
$T70159 = -160
$T70158 = -156
$T70155 = -152
$T70154 = -148
$T70153 = -144
$T70150 = -140
$T70149 = -136
$T70146 = -132
$T70143 = -128
$T70142 = -124
$T70141 = -120
$T70138 = -116
$T70137 = -112
$T70136 = -108
$T70133 = -104
$T70132 = -100
$T70131 = -96
$T70128 = -92
$T70127 = -88
$T70126 = -84
$T70123 = -80
$T70122 = -76
$T70121 = -72
$T70118 = -68
$T70117 = -64
$T70116 = -60
$T70113 = -56
$T70112 = -52
$T70111 = -48
$T70108 = -44
$T70107 = -40
_scomStyle$69653 = -36
_wbufMotifName$69674 = -32
_hr$ = -28
_rinfo$ = -24
_pItem$ = -20
_ioItem$ = -16
_ri$ = 8
_pIDMLoader$ = 64
?LoadTrigger@CSegTriggerTrack@@AAEJVRiffIter@SmartRef@@PAUIDirectMusicLoader@@@Z PROC NEAR ; CSegTriggerTrack::LoadTrigger, COMDAT
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 192  : 	HRESULT hr = S_OK;

  0000f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 193  : 
; 194  : 	if (!ri)

  00016	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00019	e8 00 00 00 00	 call	 ??BRiffIter@SmartRef@@QBE_NXZ ; SmartRef::RiffIter::operator bool
  0001e	0f b6 c0	 movzx	 eax, al
  00021	85 c0		 test	 eax, eax
  00023	75 1b		 jne	 SHORT $L69571

; 195  : 		return ri.hr();

  00025	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00028	e8 00 00 00 00	 call	 ?hr@RiffIter@SmartRef@@QBEJXZ ; SmartRef::RiffIter::hr
  0002d	89 45 d8	 mov	 DWORD PTR $T70107[ebp], eax
  00030	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00033	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  00038	8b 45 d8	 mov	 eax, DWORD PTR $T70107[ebp]
  0003b	e9 46 06 00 00	 jmp	 $L69568
$L69571:

; 196  : 
; 197  : 	// Create an event
; 198  : 	TListItem<TriggerInfo> *pItem = new TListItem<TriggerInfo>;

  00040	6a 18		 push	 24			; 00000018H
  00042	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00047	83 c4 04	 add	 esp, 4
  0004a	89 45 d4	 mov	 DWORD PTR $T70108[ebp], eax
  0004d	83 7d d4 00	 cmp	 DWORD PTR $T70108[ebp], 0
  00051	74 10		 je	 SHORT $L70109
  00053	8b 4d d4	 mov	 ecx, DWORD PTR $T70108[ebp]
  00056	e8 00 00 00 00	 call	 ??0?$TListItem@UTriggerInfo@@@@QAE@XZ ; TListItem<TriggerInfo>::TListItem<TriggerInfo>
  0005b	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv76[ebp], eax
  00061	eb 0a		 jmp	 SHORT $L70110
$L70109:
  00063	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv76[ebp], 0
$L70110:
  0006d	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv76[ebp]
  00073	89 4d ec	 mov	 DWORD PTR _pItem$[ebp], ecx

; 199  : 	if (!pItem)

  00076	83 7d ec 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  0007a	75 17		 jne	 SHORT $L69576

; 200  : 		return E_OUTOFMEMORY;

  0007c	c7 45 d0 0e 00
	07 80		 mov	 DWORD PTR $T70111[ebp], -2147024882 ; 8007000eH
  00083	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00086	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  0008b	8b 45 d0	 mov	 eax, DWORD PTR $T70111[ebp]
  0008e	e9 f3 05 00 00	 jmp	 $L69568
$L69576:

; 201  : 	TriggerInfo &rinfo = pItem->GetItemValue();

  00093	8b 4d ec	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00096	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ ; TListItem<TriggerInfo>::GetItemValue
  0009b	89 45 e8	 mov	 DWORD PTR _rinfo$[ebp], eax

; 202  : 
; 203  : 	// find the item header (we can't interpret the other chunks until we've found it)
; 204  : 	if (!ri.Find(SmartRef::RiffIter::Chunk, DMUS_FOURCC_SEGMENTITEM_CHUNK))

  0009e	68 73 67 69 68	 push	 1751738227		; 68696773H
  000a3	6a 02		 push	 2
  000a5	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  000a8	e8 00 00 00 00	 call	 ?Find@RiffIter@SmartRef@@QAEAAV12@W4RiffType@12@K@Z ; SmartRef::RiffIter::Find
  000ad	8b c8		 mov	 ecx, eax
  000af	e8 00 00 00 00	 call	 ??BRiffIter@SmartRef@@QBE_NXZ ; SmartRef::RiffIter::operator bool
  000b4	0f b6 d0	 movzx	 edx, al
  000b7	85 d2		 test	 edx, edx
  000b9	75 65		 jne	 SHORT $L69588

; 205  :     {
; 206  :         delete pItem;

  000bb	8b 45 ec	 mov	 eax, DWORD PTR _pItem$[ebp]
  000be	89 45 c8	 mov	 DWORD PTR $T70113[ebp], eax
  000c1	8b 4d c8	 mov	 ecx, DWORD PTR $T70113[ebp]
  000c4	89 4d cc	 mov	 DWORD PTR $T70112[ebp], ecx
  000c7	83 7d cc 00	 cmp	 DWORD PTR $T70112[ebp], 0
  000cb	74 12		 je	 SHORT $L70114
  000cd	6a 01		 push	 1
  000cf	8b 4d cc	 mov	 ecx, DWORD PTR $T70112[ebp]
  000d2	e8 00 00 00 00	 call	 ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
  000d7	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  000dd	eb 0a		 jmp	 SHORT $L70115
$L70114:
  000df	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv92[ebp], 0
$L70115:

; 207  : #ifdef DBG
; 208  : 		if (SUCCEEDED(ri.hr()))

  000e9	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  000ec	e8 00 00 00 00	 call	 ?hr@RiffIter@SmartRef@@QBEJXZ ; SmartRef::RiffIter::hr
  000f1	85 c0		 test	 eax, eax
  000f3	7c 0f		 jl	 SHORT $L69592

; 209  : 		{
; 210  : 			Trace(1, "Error: Unable to load segment trigger track: Chunk 'sgih' not found.\n");

  000f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EG@GEIPGMOM@Error?3?5Unable?5to?5load?5segment?5tr@
  000fa	6a 01		 push	 1
  000fc	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00101	83 c4 08	 add	 esp, 8
$L69592:

; 211  : 		}
; 212  : #endif
; 213  : 		return LoadHrFailOK(ri);

  00104	8d 55 08	 lea	 edx, DWORD PTR _ri$[ebp]
  00107	52		 push	 edx
  00108	e8 00 00 00 00	 call	 ?LoadHrFailOK@@YGJABVRiffIter@SmartRef@@@Z ; LoadHrFailOK
  0010d	89 45 c4	 mov	 DWORD PTR $T70116[ebp], eax
  00110	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00113	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  00118	8b 45 c4	 mov	 eax, DWORD PTR $T70116[ebp]
  0011b	e9 66 05 00 00	 jmp	 $L69568
$L69588:

; 214  :     }
; 215  : 
; 216  : 	// read the header
; 217  : 	DMUS_IO_SEGMENT_ITEM_HEADER ioItem;
; 218  : 	hr = SmartRef::RiffIterReadChunk(ri, &ioItem);

  00120	8d 45 f0	 lea	 eax, DWORD PTR _ioItem$[ebp]
  00123	50		 push	 eax
  00124	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00127	51		 push	 ecx
  00128	e8 00 00 00 00	 call	 ?RiffIterReadChunk@SmartRef@@YGJAAVRiffIter@1@PAU_DMUS_IO_SEGMENT_ITEM_HEADER@@@Z ; SmartRef::RiffIterReadChunk
  0012d	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 219  : 	if (FAILED(hr))

  00130	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00134	7d 44		 jge	 SHORT $L69602

; 220  :     {
; 221  :         delete pItem;

  00136	8b 55 ec	 mov	 edx, DWORD PTR _pItem$[ebp]
  00139	89 55 bc	 mov	 DWORD PTR $T70118[ebp], edx
  0013c	8b 45 bc	 mov	 eax, DWORD PTR $T70118[ebp]
  0013f	89 45 c0	 mov	 DWORD PTR $T70117[ebp], eax
  00142	83 7d c0 00	 cmp	 DWORD PTR $T70117[ebp], 0
  00146	74 12		 je	 SHORT $L70119
  00148	6a 01		 push	 1
  0014a	8b 4d c0	 mov	 ecx, DWORD PTR $T70117[ebp]
  0014d	e8 00 00 00 00	 call	 ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
  00152	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv140[ebp], eax
  00158	eb 0a		 jmp	 SHORT $L70120
$L70119:
  0015a	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv140[ebp], 0
$L70120:

; 222  : 		return hr;

  00164	8b 4d e4	 mov	 ecx, DWORD PTR _hr$[ebp]
  00167	89 4d b8	 mov	 DWORD PTR $T70121[ebp], ecx
  0016a	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  0016d	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  00172	8b 45 b8	 mov	 eax, DWORD PTR $T70121[ebp]
  00175	e9 0c 05 00 00	 jmp	 $L69568
$L69602:

; 223  :     }
; 224  : 	rinfo.lTriggerTime = ioItem.lTimeLogical;

  0017a	8b 55 e8	 mov	 edx, DWORD PTR _rinfo$[ebp]
  0017d	8b 45 f0	 mov	 eax, DWORD PTR _ioItem$[ebp]
  00180	89 02		 mov	 DWORD PTR [edx], eax

; 225  : 	rinfo.lTimePhysical = ioItem.lTimePhysical;

  00182	8b 4d e8	 mov	 ecx, DWORD PTR _rinfo$[ebp]
  00185	8b 55 f4	 mov	 edx, DWORD PTR _ioItem$[ebp+4]
  00188	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 226  : 	rinfo.dwPlayFlags = ioItem.dwPlayFlags;

  0018b	8b 45 e8	 mov	 eax, DWORD PTR _rinfo$[ebp]
  0018e	8b 4d f8	 mov	 ecx, DWORD PTR _ioItem$[ebp+8]
  00191	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 227  : 	rinfo.dwFlags = ioItem.dwFlags;

  00194	8b 55 e8	 mov	 edx, DWORD PTR _rinfo$[ebp]
  00197	8b 45 fc	 mov	 eax, DWORD PTR _ioItem$[ebp+12]
  0019a	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 228  : 	++ri;

  0019d	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  001a0	e8 00 00 00 00	 call	 ??ERiffIter@SmartRef@@QAEAAV01@XZ ; SmartRef::RiffIter::operator++

; 229  : 	if (!ri)

  001a5	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  001a8	e8 00 00 00 00	 call	 ??BRiffIter@SmartRef@@QBE_NXZ ; SmartRef::RiffIter::operator bool
  001ad	0f b6 c8	 movzx	 ecx, al
  001b0	85 c9		 test	 ecx, ecx
  001b2	75 49		 jne	 SHORT $L69606

; 230  : 	{
; 231  : 		// If there's nothing more then this is an empty trigger we should ignore because the user hasn't specified
; 232  : 		// the style or segment to play from.
; 233  : 		delete pItem;

  001b4	8b 55 ec	 mov	 edx, DWORD PTR _pItem$[ebp]
  001b7	89 55 b0	 mov	 DWORD PTR $T70123[ebp], edx
  001ba	8b 45 b0	 mov	 eax, DWORD PTR $T70123[ebp]
  001bd	89 45 b4	 mov	 DWORD PTR $T70122[ebp], eax
  001c0	83 7d b4 00	 cmp	 DWORD PTR $T70122[ebp], 0
  001c4	74 12		 je	 SHORT $L70124
  001c6	6a 01		 push	 1
  001c8	8b 4d b4	 mov	 ecx, DWORD PTR $T70122[ebp]
  001cb	e8 00 00 00 00	 call	 ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
  001d0	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv153[ebp], eax
  001d6	eb 0a		 jmp	 SHORT $L70125
$L70124:
  001d8	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv153[ebp], 0
$L70125:

; 234  : 		return ri.hr();

  001e2	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  001e5	e8 00 00 00 00	 call	 ?hr@RiffIter@SmartRef@@QBEJXZ ; SmartRef::RiffIter::hr
  001ea	89 45 ac	 mov	 DWORD PTR $T70126[ebp], eax
  001ed	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  001f0	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  001f5	8b 45 ac	 mov	 eax, DWORD PTR $T70126[ebp]
  001f8	e9 89 04 00 00	 jmp	 $L69568
$L69606:

; 235  : 	}
; 236  : 
; 237  : 	if (!(rinfo.dwFlags & DMUS_SEGMENTTRACKF_MOTIF))

  001fd	8b 4d e8	 mov	 ecx, DWORD PTR _rinfo$[ebp]
  00200	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00203	83 e2 01	 and	 edx, 1
  00206	85 d2		 test	 edx, edx
  00208	0f 85 df 00 00
	00		 jne	 $L69610

; 238  : 	{
; 239  : 		// find the referenced segment
; 240  : 		if (!ri.Find(SmartRef::RiffIter::List, DMUS_FOURCC_REF_LIST))

  0020e	68 44 4d 52 46	 push	 1179798852		; 46524d44H
  00213	6a 01		 push	 1
  00215	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00218	e8 00 00 00 00	 call	 ?Find@RiffIter@SmartRef@@QAEAAV12@W4RiffType@12@K@Z ; SmartRef::RiffIter::Find
  0021d	8b c8		 mov	 ecx, eax
  0021f	e8 00 00 00 00	 call	 ??BRiffIter@SmartRef@@QBE_NXZ ; SmartRef::RiffIter::operator bool
  00224	0f b6 c0	 movzx	 eax, al
  00227	85 c0		 test	 eax, eax
  00229	75 49		 jne	 SHORT $L69619

; 241  : 		{
; 242  : 			// If there's no DMRF then we should ignore this trigger because the user hasn't specified a segment.
; 243  : 			delete pItem;

  0022b	8b 4d ec	 mov	 ecx, DWORD PTR _pItem$[ebp]
  0022e	89 4d a4	 mov	 DWORD PTR $T70128[ebp], ecx
  00231	8b 55 a4	 mov	 edx, DWORD PTR $T70128[ebp]
  00234	89 55 a8	 mov	 DWORD PTR $T70127[ebp], edx
  00237	83 7d a8 00	 cmp	 DWORD PTR $T70127[ebp], 0
  0023b	74 12		 je	 SHORT $L70129
  0023d	6a 01		 push	 1
  0023f	8b 4d a8	 mov	 ecx, DWORD PTR $T70127[ebp]
  00242	e8 00 00 00 00	 call	 ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
  00247	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv171[ebp], eax
  0024d	eb 0a		 jmp	 SHORT $L70130
$L70129:
  0024f	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv171[ebp], 0
$L70130:

; 244  : 			return ri.hr();

  00259	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  0025c	e8 00 00 00 00	 call	 ?hr@RiffIter@SmartRef@@QBEJXZ ; SmartRef::RiffIter::hr
  00261	89 45 a0	 mov	 DWORD PTR $T70131[ebp], eax
  00264	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00267	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  0026c	8b 45 a0	 mov	 eax, DWORD PTR $T70131[ebp]
  0026f	e9 12 04 00 00	 jmp	 $L69568
$L69619:

; 245  :         }
; 246  : 
; 247  : 		hr = ri.LoadReference(pIDMLoader, IID_IDirectMusicSegment, reinterpret_cast<void**>(&rinfo.pIDMSegment));

  00274	8b 45 e8	 mov	 eax, DWORD PTR _rinfo$[ebp]
  00277	83 c0 10	 add	 eax, 16			; 00000010H
  0027a	50		 push	 eax
  0027b	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicSegment
  00280	8b 4d 40	 mov	 ecx, DWORD PTR _pIDMLoader$[ebp]
  00283	51		 push	 ecx
  00284	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00287	e8 00 00 00 00	 call	 ?LoadReference@RiffIter@SmartRef@@QAEJPAUIDirectMusicLoader@@ABU_GUID@@PAPAX@Z ; SmartRef::RiffIter::LoadReference
  0028c	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 248  : 		if (FAILED(hr))

  0028f	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00293	7d 53		 jge	 SHORT $L69625

; 249  :         {
; 250  :             Trace(1,"Error: Segment trigger track failed, unable to load referenced segment.\n");

  00295	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EJ@LCMAMFIO@Error?3?5Segment?5trigger?5track?5fai@
  0029a	6a 01		 push	 1
  0029c	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  002a1	83 c4 08	 add	 esp, 8

; 251  :             delete pItem;

  002a4	8b 55 ec	 mov	 edx, DWORD PTR _pItem$[ebp]
  002a7	89 55 98	 mov	 DWORD PTR $T70133[ebp], edx
  002aa	8b 45 98	 mov	 eax, DWORD PTR $T70133[ebp]
  002ad	89 45 9c	 mov	 DWORD PTR $T70132[ebp], eax
  002b0	83 7d 9c 00	 cmp	 DWORD PTR $T70132[ebp], 0
  002b4	74 12		 je	 SHORT $L70134
  002b6	6a 01		 push	 1
  002b8	8b 4d 9c	 mov	 ecx, DWORD PTR $T70132[ebp]
  002bb	e8 00 00 00 00	 call	 ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
  002c0	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv187[ebp], eax
  002c6	eb 0a		 jmp	 SHORT $L70135
$L70134:
  002c8	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv187[ebp], 0
$L70135:

; 252  : 			return hr;

  002d2	8b 4d e4	 mov	 ecx, DWORD PTR _hr$[ebp]
  002d5	89 4d 94	 mov	 DWORD PTR $T70136[ebp], ecx
  002d8	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  002db	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  002e0	8b 45 94	 mov	 eax, DWORD PTR $T70136[ebp]
  002e3	e9 9e 03 00 00	 jmp	 $L69568
$L69625:

; 253  :         }
; 254  : 	}
; 255  : 	else

  002e8	e9 70 03 00 00	 jmp	 $L69630
$L69610:

; 256  : 	{
; 257  : 		// find the segment from the referenced style and motif name
; 258  : 		SmartRef::ComPtr<IDirectMusicStyle> scomStyle;

  002ed	6a 00		 push	 0
  002ef	8d 4d dc	 lea	 ecx, DWORD PTR _scomStyle$69653[ebp]
  002f2	e8 00 00 00 00	 call	 ??0?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@PAUIDirectMusicStyle@@@Z ; SmartRef::ComPtr<IDirectMusicStyle>::ComPtr<IDirectMusicStyle>

; 259  : 		SmartRef::Buffer<WCHAR> wbufMotifName;

  002f7	8d 4d e0	 lea	 ecx, DWORD PTR _wbufMotifName$69674[ebp]
  002fa	e8 00 00 00 00	 call	 ??0?$Buffer@G@SmartRef@@QAE@XZ ; SmartRef::Buffer<unsigned short>::Buffer<unsigned short>

; 260  : 		for ( ; ri; ++ri)

  002ff	eb 08		 jmp	 SHORT $L69675
$L69676:
  00301	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00304	e8 00 00 00 00	 call	 ??ERiffIter@SmartRef@@QAEAAV01@XZ ; SmartRef::RiffIter::operator++
$L69675:
  00309	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  0030c	e8 00 00 00 00	 call	 ??BRiffIter@SmartRef@@QBE_NXZ ; SmartRef::RiffIter::operator bool
  00311	0f b6 d0	 movzx	 edx, al
  00314	85 d2		 test	 edx, edx
  00316	0f 84 76 01 00
	00		 je	 $L69677

; 261  : 		{
; 262  : 			if (ri.type() == SmartRef::RiffIter::List)

  0031c	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  0031f	e8 00 00 00 00	 call	 ?type@RiffIter@SmartRef@@QBE?AW4RiffType@12@XZ ; SmartRef::RiffIter::type
  00324	83 f8 01	 cmp	 eax, 1
  00327	0f 85 8b 00 00
	00		 jne	 $L69678

; 263  : 			{
; 264  : 				if (ri.id() == DMUS_FOURCC_REF_LIST)

  0032d	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00330	e8 00 00 00 00	 call	 ?id@RiffIter@SmartRef@@QBEKXZ ; SmartRef::RiffIter::id
  00335	3d 44 4d 52 46	 cmp	 eax, 1179798852		; 46524d44H
  0033a	75 77		 jne	 SHORT $L69687

; 265  : 				{
; 266  : 					hr = ri.LoadReference(pIDMLoader, IID_IDirectMusicStyle, reinterpret_cast<void**>(&scomStyle));

  0033c	8d 4d dc	 lea	 ecx, DWORD PTR _scomStyle$69653[ebp]
  0033f	e8 00 00 00 00	 call	 ??I?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAPAUIDirectMusicStyle@@XZ ; SmartRef::ComPtr<IDirectMusicStyle>::operator&
  00344	50		 push	 eax
  00345	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicStyle
  0034a	8b 45 40	 mov	 eax, DWORD PTR _pIDMLoader$[ebp]
  0034d	50		 push	 eax
  0034e	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00351	e8 00 00 00 00	 call	 ?LoadReference@RiffIter@SmartRef@@QAEJPAUIDirectMusicLoader@@ABU_GUID@@PAPAX@Z ; SmartRef::RiffIter::LoadReference
  00356	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 267  : 					if (FAILED(hr))

  00359	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0035d	7d 54		 jge	 SHORT $L69687

; 268  :                     {
; 269  :                         delete pItem;

  0035f	8b 4d ec	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00362	89 4d 8c	 mov	 DWORD PTR $T70138[ebp], ecx
  00365	8b 55 8c	 mov	 edx, DWORD PTR $T70138[ebp]
  00368	89 55 90	 mov	 DWORD PTR $T70137[ebp], edx
  0036b	83 7d 90 00	 cmp	 DWORD PTR $T70137[ebp], 0
  0036f	74 12		 je	 SHORT $L70139
  00371	6a 01		 push	 1
  00373	8b 4d 90	 mov	 ecx, DWORD PTR $T70137[ebp]
  00376	e8 00 00 00 00	 call	 ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
  0037b	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv250[ebp], eax
  00381	eb 0a		 jmp	 SHORT $L70140
$L70139:
  00383	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv250[ebp], 0
$L70140:

; 270  : 						return hr;

  0038d	8b 45 e4	 mov	 eax, DWORD PTR _hr$[ebp]
  00390	89 45 88	 mov	 DWORD PTR $T70141[ebp], eax
  00393	8d 4d e0	 lea	 ecx, DWORD PTR _wbufMotifName$69674[ebp]
  00396	e8 00 00 00 00	 call	 ??1?$Buffer@G@SmartRef@@QAE@XZ ; SmartRef::Buffer<unsigned short>::~Buffer<unsigned short>
  0039b	8d 4d dc	 lea	 ecx, DWORD PTR _scomStyle$69653[ebp]
  0039e	e8 00 00 00 00	 call	 ??1?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@XZ ; SmartRef::ComPtr<IDirectMusicStyle>::~ComPtr<IDirectMusicStyle>
  003a3	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  003a6	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  003ab	8b 45 88	 mov	 eax, DWORD PTR $T70141[ebp]
  003ae	e9 d3 02 00 00	 jmp	 $L69568
$L69687:

; 271  :                     }
; 272  : 				}
; 273  : 			}
; 274  : 			else if (ri.type() == SmartRef::RiffIter::Chunk)

  003b3	e9 d5 00 00 00	 jmp	 $L69694
$L69678:
  003b8	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  003bb	e8 00 00 00 00	 call	 ?type@RiffIter@SmartRef@@QBE?AW4RiffType@12@XZ ; SmartRef::RiffIter::type
  003c0	83 f8 02	 cmp	 eax, 2
  003c3	0f 85 c4 00 00
	00		 jne	 $L69694

; 275  : 			{
; 276  : 				if (ri.id() == DMUS_FOURCC_SEGMENTITEMNAME_CHUNK)

  003c9	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  003cc	e8 00 00 00 00	 call	 ?id@RiffIter@SmartRef@@QBEKXZ ; SmartRef::RiffIter::id
  003d1	3d 73 6e 61 6d	 cmp	 eax, 1835101811		; 6d616e73H
  003d6	0f 85 b1 00 00
	00		 jne	 $L69694

; 277  : 				{
; 278  : 					hr = ri.ReadText(&wbufMotifName);

  003dc	8d 4d e0	 lea	 ecx, DWORD PTR _wbufMotifName$69674[ebp]
  003df	e8 00 00 00 00	 call	 ??I?$Buffer@G@SmartRef@@QAEPAPAGXZ ; SmartRef::Buffer<unsigned short>::operator&
  003e4	50		 push	 eax
  003e5	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  003e8	e8 00 00 00 00	 call	 ?ReadText@RiffIter@SmartRef@@QAEJPAPAG@Z ; SmartRef::RiffIter::ReadText
  003ed	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 279  : 					if (FAILED(hr))

  003f0	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  003f4	0f 8d 93 00 00
	00		 jge	 $L69694

; 280  :                     {
; 281  :                         delete pItem;

  003fa	8b 4d ec	 mov	 ecx, DWORD PTR _pItem$[ebp]
  003fd	89 4d 80	 mov	 DWORD PTR $T70143[ebp], ecx
  00400	8b 55 80	 mov	 edx, DWORD PTR $T70143[ebp]
  00403	89 55 84	 mov	 DWORD PTR $T70142[ebp], edx
  00406	83 7d 84 00	 cmp	 DWORD PTR $T70142[ebp], 0
  0040a	74 12		 je	 SHORT $L70144
  0040c	6a 01		 push	 1
  0040e	8b 4d 84	 mov	 ecx, DWORD PTR $T70142[ebp]
  00411	e8 00 00 00 00	 call	 ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
  00416	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv267[ebp], eax
  0041c	eb 0a		 jmp	 SHORT $L70145
$L70144:
  0041e	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv267[ebp], 0
$L70145:

; 282  : #ifdef DBG
; 283  : 						if (hr == E_FAIL)

  00428	81 7d e4 05 40
	00 80		 cmp	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
  0042f	75 0f		 jne	 SHORT $L69710

; 284  : 						{
; 285  : 							Trace(1, "Error: Unable to load segment trigger track: Problem reading 'snam' chunk.\n");

  00431	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EM@KFGKMIMM@Error?3?5Unable?5to?5load?5segment?5tr@
  00436	6a 01		 push	 1
  00438	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0043d	83 c4 08	 add	 esp, 8
$L69710:

; 286  : 						}
; 287  : #endif
; 288  : 						return hr == E_FAIL ? DMUS_E_INVALID_SEGMENTTRIGGERTRACK : hr;

  00440	81 7d e4 05 40
	00 80		 cmp	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
  00447	75 0c		 jne	 SHORT $L70147
  00449	c7 85 2c ff ff
	ff 05 40 00 80	 mov	 DWORD PTR tv272[ebp], -2147467259 ; 80004005H
  00453	eb 09		 jmp	 SHORT $L70148
$L70147:
  00455	8b 45 e4	 mov	 eax, DWORD PTR _hr$[ebp]
  00458	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv272[ebp], eax
$L70148:
  0045e	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv272[ebp]
  00464	89 8d 7c ff ff
	ff		 mov	 DWORD PTR $T70146[ebp], ecx
  0046a	8d 4d e0	 lea	 ecx, DWORD PTR _wbufMotifName$69674[ebp]
  0046d	e8 00 00 00 00	 call	 ??1?$Buffer@G@SmartRef@@QAE@XZ ; SmartRef::Buffer<unsigned short>::~Buffer<unsigned short>
  00472	8d 4d dc	 lea	 ecx, DWORD PTR _scomStyle$69653[ebp]
  00475	e8 00 00 00 00	 call	 ??1?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@XZ ; SmartRef::ComPtr<IDirectMusicStyle>::~ComPtr<IDirectMusicStyle>
  0047a	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  0047d	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  00482	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR $T70146[ebp]
  00488	e9 f9 01 00 00	 jmp	 $L69568
$L69694:

; 289  :                     }
; 290  : 				}
; 291  : 			}
; 292  : 		}

  0048d	e9 6f fe ff ff	 jmp	 $L69676
$L69677:

; 293  : 		hr = ri.hr();

  00492	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00495	e8 00 00 00 00	 call	 ?hr@RiffIter@SmartRef@@QBEJXZ ; SmartRef::RiffIter::hr
  0049a	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 294  : 		if (FAILED(hr))

  0049d	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  004a1	7d 69		 jge	 SHORT $L69716

; 295  :         {
; 296  :             delete pItem;

  004a3	8b 55 ec	 mov	 edx, DWORD PTR _pItem$[ebp]
  004a6	89 95 74 ff ff
	ff		 mov	 DWORD PTR $T70150[ebp], edx
  004ac	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T70150[ebp]
  004b2	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T70149[ebp], eax
  004b8	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR $T70149[ebp], 0
  004bf	74 15		 je	 SHORT $L70151
  004c1	6a 01		 push	 1
  004c3	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR $T70149[ebp]
  004c9	e8 00 00 00 00	 call	 ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
  004ce	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv280[ebp], eax
  004d4	eb 0a		 jmp	 SHORT $L70152
$L70151:
  004d6	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv280[ebp], 0
$L70152:

; 297  : 			return hr;

  004e0	8b 4d e4	 mov	 ecx, DWORD PTR _hr$[ebp]
  004e3	89 8d 70 ff ff
	ff		 mov	 DWORD PTR $T70153[ebp], ecx
  004e9	8d 4d e0	 lea	 ecx, DWORD PTR _wbufMotifName$69674[ebp]
  004ec	e8 00 00 00 00	 call	 ??1?$Buffer@G@SmartRef@@QAE@XZ ; SmartRef::Buffer<unsigned short>::~Buffer<unsigned short>
  004f1	8d 4d dc	 lea	 ecx, DWORD PTR _scomStyle$69653[ebp]
  004f4	e8 00 00 00 00	 call	 ??1?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@XZ ; SmartRef::ComPtr<IDirectMusicStyle>::~ComPtr<IDirectMusicStyle>
  004f9	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  004fc	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  00501	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T70153[ebp]
  00507	e9 7a 01 00 00	 jmp	 $L69568
$L69716:

; 298  :         }
; 299  : 
; 300  : 		if (!(scomStyle && wbufMotifName))

  0050c	8d 4d dc	 lea	 ecx, DWORD PTR _scomStyle$69653[ebp]
  0050f	e8 00 00 00 00	 call	 ??B?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAUIDirectMusicStyle@@XZ ; SmartRef::ComPtr<IDirectMusicStyle>::operator IDirectMusicStyle *
  00514	85 c0		 test	 eax, eax
  00516	74 0c		 je	 SHORT $L69721
  00518	8d 4d e0	 lea	 ecx, DWORD PTR _wbufMotifName$69674[ebp]
  0051b	e8 00 00 00 00	 call	 ??B?$Buffer@G@SmartRef@@QAEPAGXZ ; SmartRef::Buffer<unsigned short>::operator unsigned short *
  00520	85 c0		 test	 eax, eax
  00522	75 6a		 jne	 SHORT $L69720
$L69721:

; 301  : 		{
; 302  : 			// This happens if the track didn't contain a DMRF list or snam chunk.	We allow
; 303  : 			// this as a means of representing an empty trigger track item or where the
; 304  : 			// motif to play hasn't been specified.  When loading we'll simply ignore
; 305  : 			// this item and continue reading the track.
; 306  : 			delete pItem;

  00524	8b 55 ec	 mov	 edx, DWORD PTR _pItem$[ebp]
  00527	89 95 68 ff ff
	ff		 mov	 DWORD PTR $T70155[ebp], edx
  0052d	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR $T70155[ebp]
  00533	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T70154[ebp], eax
  00539	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR $T70154[ebp], 0
  00540	74 15		 je	 SHORT $L70156
  00542	6a 01		 push	 1
  00544	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR $T70154[ebp]
  0054a	e8 00 00 00 00	 call	 ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
  0054f	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
  00555	eb 0a		 jmp	 SHORT $L70157
$L70156:
  00557	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv291[ebp], 0
$L70157:

; 307  : 			return S_OK;

  00561	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T70158[ebp], 0
  0056b	8d 4d e0	 lea	 ecx, DWORD PTR _wbufMotifName$69674[ebp]
  0056e	e8 00 00 00 00	 call	 ??1?$Buffer@G@SmartRef@@QAE@XZ ; SmartRef::Buffer<unsigned short>::~Buffer<unsigned short>
  00573	8d 4d dc	 lea	 ecx, DWORD PTR _scomStyle$69653[ebp]
  00576	e8 00 00 00 00	 call	 ??1?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@XZ ; SmartRef::ComPtr<IDirectMusicStyle>::~ComPtr<IDirectMusicStyle>
  0057b	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  0057e	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  00583	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T70158[ebp]
  00589	e9 f8 00 00 00	 jmp	 $L69568
$L69720:

; 308  : 		}
; 309  : 
; 310  : 		hr = scomStyle->GetMotif(wbufMotifName, &rinfo.pIDMSegment);

  0058e	8d 4d dc	 lea	 ecx, DWORD PTR _scomStyle$69653[ebp]
  00591	e8 00 00 00 00	 call	 ??C?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAUIDirectMusicStyle@@XZ ; SmartRef::ComPtr<IDirectMusicStyle>::operator->
  00596	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv295[ebp], eax
  0059c	8b 4d e8	 mov	 ecx, DWORD PTR _rinfo$[ebp]
  0059f	83 c1 10	 add	 ecx, 16			; 00000010H
  005a2	51		 push	 ecx
  005a3	8d 4d e0	 lea	 ecx, DWORD PTR _wbufMotifName$69674[ebp]
  005a6	e8 00 00 00 00	 call	 ??B?$Buffer@G@SmartRef@@QAEPAGXZ ; SmartRef::Buffer<unsigned short>::operator unsigned short *
  005ab	50		 push	 eax
  005ac	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv295[ebp]
  005b2	52		 push	 edx
  005b3	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR tv295[ebp]
  005b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  005bb	ff 51 1c	 call	 DWORD PTR [ecx+28]
  005be	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 311  : 		if (hr == S_FALSE)

  005c1	83 7d e4 01	 cmp	 DWORD PTR _hr$[ebp], 1
  005c5	75 1a		 jne	 SHORT $L69727

; 312  : 		{
; 313  : 			Trace(1, "Error: The segment trigger track couldn't load because the motif %S was not found in the style.\n", wbufMotifName);

  005c7	8b 55 e0	 mov	 edx, DWORD PTR _wbufMotifName$69674[ebp]
  005ca	52		 push	 edx
  005cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GB@ECKJEHIB@Error?3?5The?5segment?5trigger?5track@
  005d0	6a 01		 push	 1
  005d2	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  005d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 314  : 			hr = DMUS_E_NOT_FOUND;

  005da	c7 45 e4 61 11
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005397151 ; 88781161H
$L69727:

; 315  : 		}
; 316  : 		if (FAILED(hr))

  005e1	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  005e5	7d 66		 jge	 SHORT $L69734

; 317  :         {
; 318  :             delete pItem;

  005e7	8b 45 ec	 mov	 eax, DWORD PTR _pItem$[ebp]
  005ea	89 85 5c ff ff
	ff		 mov	 DWORD PTR $T70160[ebp], eax
  005f0	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR $T70160[ebp]
  005f6	89 8d 60 ff ff
	ff		 mov	 DWORD PTR $T70159[ebp], ecx
  005fc	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR $T70159[ebp], 0
  00603	74 15		 je	 SHORT $L70161
  00605	6a 01		 push	 1
  00607	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR $T70159[ebp]
  0060d	e8 00 00 00 00	 call	 ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
  00612	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv313[ebp], eax
  00618	eb 0a		 jmp	 SHORT $L70162
$L70161:
  0061a	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv313[ebp], 0
$L70162:

; 319  : 			return hr;

  00624	8b 55 e4	 mov	 edx, DWORD PTR _hr$[ebp]
  00627	89 95 58 ff ff
	ff		 mov	 DWORD PTR $T70163[ebp], edx
  0062d	8d 4d e0	 lea	 ecx, DWORD PTR _wbufMotifName$69674[ebp]
  00630	e8 00 00 00 00	 call	 ??1?$Buffer@G@SmartRef@@QAE@XZ ; SmartRef::Buffer<unsigned short>::~Buffer<unsigned short>
  00635	8d 4d dc	 lea	 ecx, DWORD PTR _scomStyle$69653[ebp]
  00638	e8 00 00 00 00	 call	 ??1?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@XZ ; SmartRef::ComPtr<IDirectMusicStyle>::~ComPtr<IDirectMusicStyle>
  0063d	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  00640	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  00645	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR $T70163[ebp]
  0064b	eb 39		 jmp	 SHORT $L69568
$L69734:

; 320  :         }
; 321  : 	}

  0064d	8d 4d e0	 lea	 ecx, DWORD PTR _wbufMotifName$69674[ebp]
  00650	e8 00 00 00 00	 call	 ??1?$Buffer@G@SmartRef@@QAE@XZ ; SmartRef::Buffer<unsigned short>::~Buffer<unsigned short>
  00655	8d 4d dc	 lea	 ecx, DWORD PTR _scomStyle$69653[ebp]
  00658	e8 00 00 00 00	 call	 ??1?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@XZ ; SmartRef::ComPtr<IDirectMusicStyle>::~ComPtr<IDirectMusicStyle>
$L69630:

; 322  : 
; 323  : 	m_EventList.AddHead(pItem);

  0065d	8b 45 ec	 mov	 eax, DWORD PTR _pItem$[ebp]
  00660	50		 push	 eax
  00661	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00667	83 c1 34	 add	 ecx, 52			; 00000034H
  0066a	e8 00 00 00 00	 call	 ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z ; TList<TriggerInfo>::AddHead

; 324  : 	return hr;

  0066f	8b 4d e4	 mov	 ecx, DWORD PTR _hr$[ebp]
  00672	89 8d 54 ff ff
	ff		 mov	 DWORD PTR $T70164[ebp], ecx
  00678	8d 4d 08	 lea	 ecx, DWORD PTR _ri$[ebp]
  0067b	e8 00 00 00 00	 call	 ??1RiffIter@SmartRef@@QAE@XZ ; SmartRef::RiffIter::~RiffIter
  00680	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR $T70164[ebp]
$L69568:

; 325  : }

  00686	8b e5		 mov	 esp, ebp
  00688	5d		 pop	 ebp
  00689	c2 3c 00	 ret	 60			; 0000003cH
?LoadTrigger@CSegTriggerTrack@@AAEJVRiffIter@SmartRef@@PAUIDirectMusicLoader@@@Z ENDP ; CSegTriggerTrack::LoadTrigger
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\tlist.h
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ PROC NEAR ; TList<TriggerInfo>::GetHead, COMDAT
; _this$ = ecx

; 61   :     TListItem<T> *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ ENDP ; TList<TriggerInfo>::GetHead
_TEXT	ENDS
PUBLIC	?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z ; TListItem<TriggerInfo>::SetNext
; Function compile flags: /Odt
;	COMDAT ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z PROC NEAR ; TList<TriggerInfo>::AddHead, COMDAT
; _this$ = ecx

; 80   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : //            assert(pItem!=NULL);
; 82   :             pItem->SetNext(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00010	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z ; TListItem<TriggerInfo>::SetNext

; 83   :             m_pHead=pItem;

  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0001b	89 02		 mov	 DWORD PTR [edx], eax

; 84   :         }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z ENDP ; TList<TriggerInfo>::AddHead
_TEXT	ENDS
PUBLIC	??0TriggerInfo@@QAE@XZ				; TriggerInfo::TriggerInfo
; Function compile flags: /Odt
;	COMDAT ??0?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$TListItem@UTriggerInfo@@@@QAE@XZ PROC NEAR		; TListItem<TriggerInfo>::TListItem<TriggerInfo>, COMDAT
; _this$ = ecx

; 28   :     TListItem() { m_pNext=NULL; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0TriggerInfo@@QAE@XZ	; TriggerInfo::TriggerInfo
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??0?$TListItem@UTriggerInfo@@@@QAE@XZ ENDP		; TListItem<TriggerInfo>::TListItem<TriggerInfo>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ PROC NEAR ; TListItem<TriggerInfo>::GetNext, COMDAT
; _this$ = ecx

; 32   :     TListItem<T> *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ ENDP	; TListItem<TriggerInfo>::GetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ PROC NEAR ; TListItem<TriggerInfo>::GetItemValue, COMDAT
; _this$ = ecx

; 40   :     T& GetItemValue() { return m_Tinfo; }  // additional member function

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ ENDP ; TListItem<TriggerInfo>::GetItemValue
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\smartref.h
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@PAUIDirectMusicStyle@@@Z
_TEXT	SEGMENT
_this$ = -4
__p$ = 8
??0?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@PAUIDirectMusicStyle@@@Z PROC NEAR ; SmartRef::ComPtr<IDirectMusicStyle>::ComPtr<IDirectMusicStyle>, COMDAT
; _this$ = ecx

; 335  : 		ComPtr(T *_p = NULL) : p(_p) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __p$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@PAUIDirectMusicStyle@@@Z ENDP ; SmartRef::ComPtr<IDirectMusicStyle>::ComPtr<IDirectMusicStyle>
_TEXT	ENDS
PUBLIC	??4?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEAAV01@PAUIDirectMusicStyle@@@Z ; SmartRef::ComPtr<IDirectMusicStyle>::operator=
; Function compile flags: /Odt
;	COMDAT ??1?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@XZ PROC NEAR ; SmartRef::ComPtr<IDirectMusicStyle>::~ComPtr<IDirectMusicStyle>, COMDAT
; _this$ = ecx

; 336  : 		~ComPtr() { *this = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??4?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEAAV01@PAUIDirectMusicStyle@@@Z ; SmartRef::ComPtr<IDirectMusicStyle>::operator=
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??1?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAE@XZ ENDP	; SmartRef::ComPtr<IDirectMusicStyle>::~ComPtr<IDirectMusicStyle>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAUIDirectMusicStyle@@XZ
_TEXT	SEGMENT
_this$ = -4
??B?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAUIDirectMusicStyle@@XZ PROC NEAR ; SmartRef::ComPtr<IDirectMusicStyle>::operator IDirectMusicStyle *, COMDAT
; _this$ = ecx

; 337  : 		operator T*() { return p; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??B?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAUIDirectMusicStyle@@XZ ENDP ; SmartRef::ComPtr<IDirectMusicStyle>::operator IDirectMusicStyle *
_TEXT	ENDS
PUBLIC	??_C@_01JBBJJEPG@p?$AA@				; `string'
PUBLIC	??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dmusic\shared\smartref.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01JBBJJEPG@p?$AA@
CONST	SEGMENT
??_C@_01JBBJJEPG@p?$AA@ DB 'p', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??C?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAUIDirectMusicStyle@@XZ
_TEXT	SEGMENT
_this$ = -4
??C?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAUIDirectMusicStyle@@XZ PROC NEAR ; SmartRef::ComPtr<IDirectMusicStyle>::operator->, COMDAT
; _this$ = ecx

; 338  : 		T* operator-> () { assert(p); return p; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	75 14		 jne	 SHORT $L70192
  0000f	68 52 01 00 00	 push	 338			; 00000152H
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JBBJJEPG@p?$AA@
  0001e	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L70192:
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??C?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAUIDirectMusicStyle@@XZ ENDP ; SmartRef::ComPtr<IDirectMusicStyle>::operator->
_TEXT	ENDS
PUBLIC	??_C@_02BGAOHDMM@?$CBp?$AA@			; `string'
;	COMDAT ??_C@_02BGAOHDMM@?$CBp?$AA@
CONST	SEGMENT
??_C@_02BGAOHDMM@?$CBp?$AA@ DB '!p', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAPAUIDirectMusicStyle@@XZ
_TEXT	SEGMENT
_this$ = -4
??I?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAPAUIDirectMusicStyle@@XZ PROC NEAR ; SmartRef::ComPtr<IDirectMusicStyle>::operator&, COMDAT
; _this$ = ecx

; 340  : 		T** operator& () { assert(!p); return &p; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 14		 je	 SHORT $L70196
  0000f	68 54 01 00 00	 push	 340			; 00000154H
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02BGAOHDMM@?$CBp?$AA@
  0001e	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L70196:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??I?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEPAPAUIDirectMusicStyle@@XZ ENDP ; SmartRef::ComPtr<IDirectMusicStyle>::operator&
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1?$Buffer@G@SmartRef@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8
$T70200 = -4
??1?$Buffer@G@SmartRef@@QAE@XZ PROC NEAR		; SmartRef::Buffer<unsigned short>::~Buffer<unsigned short>, COMDAT
; _this$ = ecx

; 104  : 		~Buffer() { delete[] m_p; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR $T70200[ebp], ecx
  00011	8b 55 fc	 mov	 edx, DWORD PTR $T70200[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0001a	83 c4 04	 add	 esp, 4
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??1?$Buffer@G@SmartRef@@QAE@XZ ENDP			; SmartRef::Buffer<unsigned short>::~Buffer<unsigned short>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??B?$Buffer@G@SmartRef@@QAEPAGXZ
_TEXT	SEGMENT
_this$ = -4
??B?$Buffer@G@SmartRef@@QAEPAGXZ PROC NEAR		; SmartRef::Buffer<unsigned short>::operator unsigned short *, COMDAT
; _this$ = ecx

; 105  : 		operator T *() { return m_p; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??B?$Buffer@G@SmartRef@@QAEPAGXZ ENDP			; SmartRef::Buffer<unsigned short>::operator unsigned short *
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0?$Buffer@G@SmartRef@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$Buffer@G@SmartRef@@QAE@XZ PROC NEAR		; SmartRef::Buffer<unsigned short>::Buffer<unsigned short>, COMDAT
; _this$ = ecx

; 108  : 		Buffer() : m_p(NULL) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0?$Buffer@G@SmartRef@@QAE@XZ ENDP			; SmartRef::Buffer<unsigned short>::Buffer<unsigned short>
_TEXT	ENDS
PUBLIC	??_C@_04EEOPDBPD@?$CBm_p?$AA@			; `string'
;	COMDAT ??_C@_04EEOPDBPD@?$CBm_p?$AA@
CONST	SEGMENT
??_C@_04EEOPDBPD@?$CBm_p?$AA@ DB '!m_p', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??I?$Buffer@G@SmartRef@@QAEPAPAGXZ
_TEXT	SEGMENT
_this$ = -4
??I?$Buffer@G@SmartRef@@QAEPAPAGXZ PROC NEAR		; SmartRef::Buffer<unsigned short>::operator&, COMDAT
; _this$ = ecx

; 111  : 		T** operator& () { assert(!m_p); return &m_p; } // allows direct setting of m_p, adopting a string without copying it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 11		 je	 SHORT $L70210
  0000f	6a 6f		 push	 111			; 0000006fH
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04EEOPDBPD@?$CBm_p?$AA@
  0001b	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L70210:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??I?$Buffer@G@SmartRef@@QAEPAPAGXZ ENDP			; SmartRef::Buffer<unsigned short>::operator&
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\tlist.h
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z PROC NEAR ; TListItem<TriggerInfo>::SetNext, COMDAT
; _this$ = ecx

; 33   :     void SetNext(TListItem<T> *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z ENDP	; TListItem<TriggerInfo>::SetNext
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\smartref.h
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEAAV01@PAUIDirectMusicStyle@@@Z
_TEXT	SEGMENT
_this$ = -4
__p$ = 8
??4?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEAAV01@PAUIDirectMusicStyle@@@Z PROC NEAR ; SmartRef::ComPtr<IDirectMusicStyle>::operator=, COMDAT
; _this$ = ecx

; 339  : 		ComPtr &operator= (T *_p) { if (p) p->Release(); p = _p; return *this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 10		 je	 SHORT $L69818
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 12		 mov	 edx, DWORD PTR [edx]
  0001b	51		 push	 ecx
  0001c	ff 52 08	 call	 DWORD PTR [edx+8]
$L69818:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __p$[ebp]
  00025	89 08		 mov	 DWORD PTR [eax], ecx
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??4?$ComPtr@UIDirectMusicStyle@@@SmartRef@@QAEAAV01@PAUIDirectMusicStyle@@@Z ENDP ; SmartRef::ComPtr<IDirectMusicStyle>::operator=
_TEXT	ENDS
EXTRN	?ReadChunk@RiffIter@SmartRef@@QAEJPAXI@Z:NEAR	; SmartRef::RiffIter::ReadChunk
; Function compile flags: /Odt
;	COMDAT ?RiffIterReadChunk@SmartRef@@YGJAAVRiffIter@1@PAU_DMUS_IO_SEGMENT_TRACK_HEADER@@@Z
_TEXT	SEGMENT
_ri$ = 8
_pT$ = 12
?RiffIterReadChunk@SmartRef@@YGJAAVRiffIter@1@PAU_DMUS_IO_SEGMENT_TRACK_HEADER@@@Z PROC NEAR ; SmartRef::RiffIterReadChunk, COMDAT

; 489  : 	template <class T> HRESULT RiffIterReadChunk(RiffIter &ri, T *pT) { return ri.ReadChunk(pT, sizeof(*pT)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 04		 push	 4
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pT$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ri$[ebp]
  0000c	e8 00 00 00 00	 call	 ?ReadChunk@RiffIter@SmartRef@@QAEJPAXI@Z ; SmartRef::RiffIter::ReadChunk
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?RiffIterReadChunk@SmartRef@@YGJAAVRiffIter@1@PAU_DMUS_IO_SEGMENT_TRACK_HEADER@@@Z ENDP ; SmartRef::RiffIterReadChunk
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RiffIterReadChunk@SmartRef@@YGJAAVRiffIter@1@PAU_DMUS_IO_SEGMENT_ITEM_HEADER@@@Z
_TEXT	SEGMENT
_ri$ = 8
_pT$ = 12
?RiffIterReadChunk@SmartRef@@YGJAAVRiffIter@1@PAU_DMUS_IO_SEGMENT_ITEM_HEADER@@@Z PROC NEAR ; SmartRef::RiffIterReadChunk, COMDAT

; 489  : 	template <class T> HRESULT RiffIterReadChunk(RiffIter &ri, T *pT) { return ri.ReadChunk(pT, sizeof(*pT)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pT$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _ri$[ebp]
  0000c	e8 00 00 00 00	 call	 ?ReadChunk@RiffIter@SmartRef@@QAEJPAXI@Z ; SmartRef::RiffIter::ReadChunk
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?RiffIterReadChunk@SmartRef@@YGJAAVRiffIter@1@PAU_DMUS_IO_SEGMENT_ITEM_HEADER@@@Z ENDP ; SmartRef::RiffIterReadChunk
_TEXT	ENDS
EXTRN	?DirectMusicAllocI@@YGPAXI@Z:NEAR		; DirectMusicAllocI
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xalloc.h
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_cb$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 13   :     return DirectMusicAllocI(cb);

  00003	8b 45 08	 mov	 eax, DWORD PTR _cb$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicAllocI@@YGPAXI@Z ; DirectMusicAllocI

; 14   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
EXTRN	?DirectMusicFreeI@@YGXPAX@Z:NEAR		; DirectMusicFreeI
; Function compile flags: /Odt
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??_V@YAXPAX@Z PROC NEAR					; operator delete[], COMDAT

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 29   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??_V@YAXPAX@Z ENDP					; operator delete[]
_TEXT	ENDS
PUBLIC	?validate@RiffIter@SmartRef@@ABE_NXZ		; SmartRef::RiffIter::validate
EXTRN	??0RiffIter@SmartRef@@AAE@ABV01@U_MMCKINFO@@@Z:NEAR ; SmartRef::RiffIter::RiffIter
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\smartref.h
;	COMDAT ?Descend@RiffIter@SmartRef@@QAE?AV12@XZ
_TEXT	SEGMENT
_this$ = -4
___$ReturnUdt$ = 8
?Descend@RiffIter@SmartRef@@QAE?AV12@XZ PROC NEAR	; SmartRef::RiffIter::Descend, COMDAT
; _this$ = ecx

; 426  : 		RiffIter Descend() { validate(); return RiffIter(*this, m_ckChild); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?validate@RiffIter@SmartRef@@ABE_NXZ ; SmartRef::RiffIter::validate
  00011	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00014	83 c6 21	 add	 esi, 33			; 00000021H
  00017	83 ec 14	 sub	 esp, 20			; 00000014H
  0001a	b9 05 00 00 00	 mov	 ecx, 5
  0001f	8b fc		 mov	 edi, esp
  00021	f3 a5		 rep movsd
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	e8 00 00 00 00	 call	 ??0RiffIter@SmartRef@@AAE@ABV01@U_MMCKINFO@@@Z ; SmartRef::RiffIter::RiffIter
  0002f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?Descend@RiffIter@SmartRef@@QAE?AV12@XZ ENDP		; SmartRef::RiffIter::Descend
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??BRiffIter@SmartRef@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4
??BRiffIter@SmartRef@@QBE_NXZ PROC NEAR			; SmartRef::RiffIter::operator bool, COMDAT
; _this$ = ecx

; 428  : 		operator bool() const { return SUCCEEDED(m_hr); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	0f 9d c1	 setge	 cl
  00012	8a c1		 mov	 al, cl
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??BRiffIter@SmartRef@@QBE_NXZ ENDP			; SmartRef::RiffIter::operator bool
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?hr@RiffIter@SmartRef@@QBEJXZ
_TEXT	SEGMENT
tv65 = -8
_this$ = -4
?hr@RiffIter@SmartRef@@QBEJXZ PROC NEAR			; SmartRef::RiffIter::hr, COMDAT
; _this$ = ecx

; 429  : 		HRESULT hr() const { return (m_hr == DMUS_E_DESCEND_CHUNK_FAIL) ? S_OK : m_hr; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	81 38 05 40 00
	80		 cmp	 DWORD PTR [eax], -2147467259 ; 80004005H
  00012	75 09		 jne	 SHORT $L70238
  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
  0001b	eb 08		 jmp	 SHORT $L70239
$L70238:
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	89 55 f8	 mov	 DWORD PTR tv65[ebp], edx
$L70239:
  00025	8b 45 f8	 mov	 eax, DWORD PTR tv65[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?hr@RiffIter@SmartRef@@QBEJXZ ENDP			; SmartRef::RiffIter::hr
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?type@RiffIter@SmartRef@@QBE?AW4RiffType@12@XZ
_TEXT	SEGMENT
tv72 = -8
_this$ = -4
?type@RiffIter@SmartRef@@QBE?AW4RiffType@12@XZ PROC NEAR ; SmartRef::RiffIter::type, COMDAT
; _this$ = ecx

; 431  : 		RiffType type() const { validate(); return (m_ckChild.ckid == FOURCC_LIST) ? List : ((m_ckChild.ckid == FOURCC_RIFF) ? Riff : Chunk); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?validate@RiffIter@SmartRef@@ABE_NXZ ; SmartRef::RiffIter::validate
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	81 78 21 4c 49
	53 54		 cmp	 DWORD PTR [eax+33], 1414744396 ; 5453494cH
  0001b	75 09		 jne	 SHORT $L70243
  0001d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  00024	eb 16		 jmp	 SHORT $L70244
$L70243:
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	33 d2		 xor	 edx, edx
  0002b	81 79 21 52 49
	46 46		 cmp	 DWORD PTR [ecx+33], 1179011410 ; 46464952H
  00032	0f 94 c2	 sete	 dl
  00035	4a		 dec	 edx
  00036	83 e2 02	 and	 edx, 2
  00039	89 55 f8	 mov	 DWORD PTR tv72[ebp], edx
$L70244:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv72[ebp]
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?type@RiffIter@SmartRef@@QBE?AW4RiffType@12@XZ ENDP	; SmartRef::RiffIter::type
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?id@RiffIter@SmartRef@@QBEKXZ
_TEXT	SEGMENT
tv72 = -8
_this$ = -4
?id@RiffIter@SmartRef@@QBEKXZ PROC NEAR			; SmartRef::RiffIter::id, COMDAT
; _this$ = ecx

; 432  : 		FOURCC id() const { validate(); return (type() == Chunk) ? m_ckChild.ckid : m_ckChild.fccType; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?validate@RiffIter@SmartRef@@ABE_NXZ ; SmartRef::RiffIter::validate
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?type@RiffIter@SmartRef@@QBE?AW4RiffType@12@XZ ; SmartRef::RiffIter::type
  00019	83 f8 02	 cmp	 eax, 2
  0001c	75 0b		 jne	 SHORT $L70248
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 48 21	 mov	 ecx, DWORD PTR [eax+33]
  00024	89 4d f8	 mov	 DWORD PTR tv72[ebp], ecx
  00027	eb 09		 jmp	 SHORT $L70249
$L70248:
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	8b 42 29	 mov	 eax, DWORD PTR [edx+41]
  0002f	89 45 f8	 mov	 DWORD PTR tv72[ebp], eax
$L70249:
  00032	8b 45 f8	 mov	 eax, DWORD PTR tv72[ebp]
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?id@RiffIter@SmartRef@@QBEKXZ ENDP			; SmartRef::RiffIter::id
_TEXT	ENDS
EXTRN	?ReadReference@RiffIter@SmartRef@@QAEJPAU_DMUS_OBJECTDESC@@@Z:NEAR ; SmartRef::RiffIter::ReadReference
; Function compile flags: /Odt
;	COMDAT ?LoadReference@RiffIter@SmartRef@@QAEJPAUIDirectMusicLoader@@ABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = -856
_hr$ = -852
_desc$ = -848
_pIDMLoader$ = 8
_iid$ = 12
_ppvObject$ = 16
?LoadReference@RiffIter@SmartRef@@QAEJPAUIDirectMusicLoader@@ABU_GUID@@PAPAX@Z PROC NEAR ; SmartRef::RiffIter::LoadReference, COMDAT
; _this$ = ecx

; 444  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 58 03 00
	00		 sub	 esp, 856		; 00000358H
  00009	89 8d a8 fc ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 445  : 			DMUS_OBJECTDESC desc;
; 446  : 			HRESULT hr = ReadReference(&desc);

  0000f	8d 85 b0 fc ff
	ff		 lea	 eax, DWORD PTR _desc$[ebp]
  00015	50		 push	 eax
  00016	8b 8d a8 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?ReadReference@RiffIter@SmartRef@@QAEJPAU_DMUS_OBJECTDESC@@@Z ; SmartRef::RiffIter::ReadReference
  00021	89 85 ac fc ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 447  : 			if(SUCCEEDED(hr))

  00027	83 bd ac fc ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0002e	7c 21		 jl	 SHORT $L44281

; 448  : 				hr = pIDMLoader->GetObject(&desc, iid, ppvObject);

  00030	8b 4d 10	 mov	 ecx, DWORD PTR _ppvObject$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  00037	52		 push	 edx
  00038	8d 85 b0 fc ff
	ff		 lea	 eax, DWORD PTR _desc$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _pIDMLoader$[ebp]
  00042	8b 11		 mov	 edx, DWORD PTR [ecx]
  00044	8b 45 08	 mov	 eax, DWORD PTR _pIDMLoader$[ebp]
  00047	50		 push	 eax
  00048	ff 52 0c	 call	 DWORD PTR [edx+12]
  0004b	89 85 ac fc ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L44281:

; 449  : 			return hr;

  00051	8b 85 ac fc ff
	ff		 mov	 eax, DWORD PTR _hr$[ebp]

; 450  : 		}

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
?LoadReference@RiffIter@SmartRef@@QAEJPAUIDirectMusicLoader@@ABU_GUID@@PAPAX@Z ENDP ; SmartRef::RiffIter::LoadReference
_TEXT	ENDS
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?validate@RiffIter@SmartRef@@ABE_NXZ
_TEXT	SEGMENT
_this$ = -4
?validate@RiffIter@SmartRef@@ABE_NXZ PROC NEAR		; SmartRef::RiffIter::validate, COMDAT
; _this$ = ecx

; 478  : 		bool validate() const { if (FAILED(m_hr)) { assert(false); return true; } else return false; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	7d 1e		 jge	 SHORT $L44289
  0000f	33 c9		 xor	 ecx, ecx
  00011	85 c9		 test	 ecx, ecx
  00013	75 14		 jne	 SHORT $L70256
  00015	68 de 01 00 00	 push	 478			; 000001deH
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05LAPONLG@false?$AA@
  00024	e8 00 00 00 00	 call	 ?DebugAssert@@YGXPAD0K@Z ; DebugAssert
$L70256:
  00029	b0 01		 mov	 al, 1
  0002b	eb 02		 jmp	 SHORT $L44287
$L44289:
  0002d	32 c0		 xor	 al, al
$L44287:
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?validate@RiffIter@SmartRef@@ABE_NXZ ENDP		; SmartRef::RiffIter::validate
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\segtrtrk.h
_TEXT	ENDS
;	COMDAT ??0TriggerInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0TriggerInfo@@QAE@XZ PROC NEAR			; TriggerInfo::TriggerInfo, COMDAT
; _this$ = ecx

; 21   : 	TriggerInfo() : lTriggerTime(0), lTimePhysical(0), dwPlayFlags(0), dwFlags(0), pIDMSegment(NULL) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??0TriggerInfo@@QAE@XZ ENDP				; TriggerInfo::TriggerInfo
_TEXT	ENDS
PUBLIC	??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@ ; `string'
PUBLIC	??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@ ; `string'
PUBLIC	??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@ ; `string'
PUBLIC	??0CSegTriggerTrackState@@QAE@XZ		; CSegTriggerTrackState::CSegTriggerTrackState
PUBLIC	??0CritSec@SmartRef@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z ; SmartRef::CritSec::CritSec
PUBLIC	??1CritSec@SmartRef@@QAE@XZ			; SmartRef::CritSec::~CritSec
EXTRN	_DebugBreak@0:NEAR
EXTRN	_IsBadReadPtr@8:NEAR
EXTRN	_IsBadWritePtr@8:NEAR
EXTRN	_IsBadCodePtr@4:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
; File c:\xbox\private\windows\directx\dmusic\shared\trackhelp.inl
CONST	SEGMENT
?__szValidateInterfaceName@?1??InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB DB 'C'
	DB	'PlayingTrack::InitPlay', 00H		; `CPlayingTrack<CSegTriggerTrack,TriggerInfo,CSegTriggerTrackState>::InitPlay'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
CONST	SEGMENT
??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@ DB '%s: Inva'
	DB	'lid pointer ppStateData', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
CONST	SEGMENT
??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@ DB '%s: Inval'
	DB	'id pointer pSegmentState', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
CONST	SEGMENT
??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@ DB '%s: Inval'
	DB	'id pointer pPerformance', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT
tv156 = -24
$T70267 = -20
$T70266 = -16
$T70263 = -12
_pStateData$ = -8
_CS$ = -4
_this$ = 8
_pSegmentState$ = 12
_pPerformance$ = 16
_ppStateData$ = 20
_dwTrackID$ = 24
_dwFlags$ = 28
?InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z PROC NEAR ; CPlayingTrack<CSegTriggerTrack,TriggerInfo,CSegTriggerTrackState>::InitPlay, COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 91   : 	V_INAME(CPlayingTrack::InitPlay);
; 92   : 	V_PTRPTR_WRITE(ppStateData);

  00006	6a 04		 push	 4
  00008	8b 45 14	 mov	 eax, DWORD PTR _ppStateData$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L68901
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L68901:

; 93   : 	V_INTERFACE(pSegmentState);

  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegmentState$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00039	85 c0		 test	 eax, eax
  0003b	74 19		 je	 SHORT $L68904
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  00047	6a ff		 push	 -1
  00049	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 _DebugBreak@0
$L68904:
  00056	6a 04		 push	 4
  00058	8b 55 0c	 mov	 edx, DWORD PTR _pSegmentState$[ebp]
  0005b	8b 02		 mov	 eax, DWORD PTR [edx]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00063	85 c0		 test	 eax, eax
  00065	74 19		 je	 SHORT $L68908
  00067	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  00071	6a ff		 push	 -1
  00073	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	e8 00 00 00 00	 call	 _DebugBreak@0
$L68908:
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegmentState$[ebp]
  00083	8b 11		 mov	 edx, DWORD PTR [ecx]
  00085	8b 02		 mov	 eax, DWORD PTR [edx]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0008d	85 c0		 test	 eax, eax
  0008f	74 19		 je	 SHORT $L68910
  00091	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  0009b	6a ff		 push	 -1
  0009d	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a5	e8 00 00 00 00	 call	 _DebugBreak@0
$L68910:

; 94   : 	V_INTERFACE(pPerformance);

  000aa	6a 04		 push	 4
  000ac	8b 4d 10	 mov	 ecx, DWORD PTR _pPerformance$[ebp]
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b5	85 c0		 test	 eax, eax
  000b7	74 19		 je	 SHORT $L68912
  000b9	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  000be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
  000c3	6a ff		 push	 -1
  000c5	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cd	e8 00 00 00 00	 call	 _DebugBreak@0
$L68912:
  000d2	6a 04		 push	 4
  000d4	8b 55 10	 mov	 edx, DWORD PTR _pPerformance$[ebp]
  000d7	8b 02		 mov	 eax, DWORD PTR [edx]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000df	85 c0		 test	 eax, eax
  000e1	74 19		 je	 SHORT $L68916
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  000e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
  000ed	6a ff		 push	 -1
  000ef	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f7	e8 00 00 00 00	 call	 _DebugBreak@0
$L68916:
  000fc	8b 4d 10	 mov	 ecx, DWORD PTR _pPerformance$[ebp]
  000ff	8b 11		 mov	 edx, DWORD PTR [ecx]
  00101	8b 02		 mov	 eax, DWORD PTR [edx]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00109	85 c0		 test	 eax, eax
  0010b	74 19		 je	 SHORT $L68918
  0010d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00112	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
  00117	6a ff		 push	 -1
  00119	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00121	e8 00 00 00 00	 call	 _DebugBreak@0
$L68918:

; 95   : 
; 96   : 	SmartRef::CritSec CS(&m_CriticalSection);

  00126	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	83 c1 04	 add	 ecx, 4
  0012c	51		 push	 ecx
  0012d	8d 4d fc	 lea	 ecx, DWORD PTR _CS$[ebp]
  00130	e8 00 00 00 00	 call	 ??0CritSec@SmartRef@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z ; SmartRef::CritSec::CritSec

; 97   : 
; 98   : 	// Set up state data
; 99   : 	StateData *pStateData = new StateData;

  00135	6a 0c		 push	 12			; 0000000cH
  00137	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0013c	83 c4 04	 add	 esp, 4
  0013f	89 45 f4	 mov	 DWORD PTR $T70263[ebp], eax
  00142	83 7d f4 00	 cmp	 DWORD PTR $T70263[ebp], 0
  00146	74 0d		 je	 SHORT $L70264
  00148	8b 4d f4	 mov	 ecx, DWORD PTR $T70263[ebp]
  0014b	e8 00 00 00 00	 call	 ??0CSegTriggerTrackState@@QAE@XZ ; CSegTriggerTrackState::CSegTriggerTrackState
  00150	89 45 e8	 mov	 DWORD PTR tv156[ebp], eax
  00153	eb 07		 jmp	 SHORT $L70265
$L70264:
  00155	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv156[ebp], 0
$L70265:
  0015c	8b 55 e8	 mov	 edx, DWORD PTR tv156[ebp]
  0015f	89 55 f8	 mov	 DWORD PTR _pStateData$[ebp], edx

; 100  : 	if (!pStateData)

  00162	83 7d f8 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  00166	75 14		 jne	 SHORT $L68923

; 101  : 		return E_OUTOFMEMORY;

  00168	c7 45 f0 0e 00
	07 80		 mov	 DWORD PTR $T70266[ebp], -2147024882 ; 8007000eH
  0016f	8d 4d fc	 lea	 ecx, DWORD PTR _CS$[ebp]
  00172	e8 00 00 00 00	 call	 ??1CritSec@SmartRef@@QAE@XZ ; SmartRef::CritSec::~CritSec
  00177	8b 45 f0	 mov	 eax, DWORD PTR $T70266[ebp]
  0017a	eb 1a		 jmp	 SHORT $L68897
$L68923:

; 102  : 
; 103  : 	*ppStateData = pStateData;

  0017c	8b 45 14	 mov	 eax, DWORD PTR _ppStateData$[ebp]
  0017f	8b 4d f8	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  00182	89 08		 mov	 DWORD PTR [eax], ecx

; 104  : 
; 105  : 	return S_OK;

  00184	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T70267[ebp], 0
  0018b	8d 4d fc	 lea	 ecx, DWORD PTR _CS$[ebp]
  0018e	e8 00 00 00 00	 call	 ??1CritSec@SmartRef@@QAE@XZ ; SmartRef::CritSec::~CritSec
  00193	8b 45 ec	 mov	 eax, DWORD PTR $T70267[ebp]
$L68897:

; 106  : }

  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 18 00	 ret	 24			; 00000018H
?InitPlay@?$CPlayingTrack@VCSegTriggerTrack@@UTriggerInfo@@UCSegTriggerTrackState@@@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ENDP ; CPlayingTrack<CSegTriggerTrack,TriggerInfo,CSegTriggerTrackState>::InitPlay
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\smartref.h
_TEXT	ENDS
;	COMDAT ??0CritSec@SmartRef@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
_this$ = -4
_pCriticalSection$ = 8
??0CritSec@SmartRef@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z PROC NEAR ; SmartRef::CritSec::CritSec, COMDAT
; _this$ = ecx

; 39   : 		CritSec(CRITICAL_SECTION *pCriticalSection) : m_pCriticalSection() {  }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
??0CritSec@SmartRef@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z ENDP ; SmartRef::CritSec::CritSec
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1CritSec@SmartRef@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CritSec@SmartRef@@QAE@XZ PROC NEAR			; SmartRef::CritSec::~CritSec, COMDAT
; _this$ = ecx

; 40   : 		~CritSec() {  }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1CritSec@SmartRef@@QAE@XZ ENDP			; SmartRef::CritSec::~CritSec
_TEXT	ENDS
PUBLIC	??0?$CStandardStateData@UTriggerInfo@@@@QAE@XZ	; CStandardStateData<TriggerInfo>::CStandardStateData<TriggerInfo>
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\segtrtrk.h
;	COMDAT ??0CSegTriggerTrackState@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CSegTriggerTrackState@@QAE@XZ PROC NEAR		; CSegTriggerTrackState::CSegTriggerTrackState, COMDAT
; _this$ = ecx

; 50   : 	CSegTriggerTrackState() : pAudioPath(NULL) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$CStandardStateData@UTriggerInfo@@@@QAE@XZ ; CStandardStateData<TriggerInfo>::CStandardStateData<TriggerInfo>
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??0CSegTriggerTrackState@@QAE@XZ ENDP			; CSegTriggerTrackState::CSegTriggerTrackState
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\trackhelp.h
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$CStandardStateData@UTriggerInfo@@@@QAE@XZ PROC NEAR ; CStandardStateData<TriggerInfo>::CStandardStateData<TriggerInfo>, COMDAT
; _this$ = ecx

; 186  : 	CStandardStateData() : dwValidate(0), pCurrentEvent(NULL) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0?$CStandardStateData@UTriggerInfo@@@@QAE@XZ ENDP	; CStandardStateData<TriggerInfo>::CStandardStateData<TriggerInfo>
_TEXT	ENDS
PUBLIC	??1?$TListItem@UTriggerInfo@@@@QAE@XZ		; TListItem<TriggerInfo>::~TListItem<TriggerInfo>
; Function compile flags: /Odt
;	COMDAT ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z PROC NEAR	; TListItem<TriggerInfo>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$TListItem@UTriggerInfo@@@@QAE@XZ ; TListItem<TriggerInfo>::~TListItem<TriggerInfo>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69383
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69383:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z ENDP		; TListItem<TriggerInfo>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1TriggerInfo@@QAE@XZ				; TriggerInfo::~TriggerInfo
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\tlist.cpp
;	COMDAT ??1?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$TListItem@UTriggerInfo@@@@QAE@XZ PROC NEAR		; TListItem<TriggerInfo>::~TListItem<TriggerInfo>, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	//if (m_pNext != NULL) { delete m_pNext; }
; 22   : 	// IMPORTANT: user of the list is required to delete content first!
; 23   : 	//ZeroMemory(&m_Tinfo, sizeof(T));
; 24   : }

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1TriggerInfo@@QAE@XZ	; TriggerInfo::~TriggerInfo
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$TListItem@UTriggerInfo@@@@QAE@XZ ENDP		; TListItem<TriggerInfo>::~TListItem<TriggerInfo>
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xalloc.h
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 19   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\segtrtrk.h
_TEXT	ENDS
;	COMDAT ??1TriggerInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1TriggerInfo@@QAE@XZ PROC NEAR			; TriggerInfo::~TriggerInfo, COMDAT
; _this$ = ecx

; 22   : 	~TriggerInfo() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 		RELEASE(pIDMSegment);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0000e	74 12		 je	 SHORT $L51739
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001c	8b 12		 mov	 edx, DWORD PTR [edx]
  0001e	51		 push	 ecx
  0001f	ff 52 08	 call	 DWORD PTR [edx+8]
$L51739:

; 24   : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??1TriggerInfo@@QAE@XZ ENDP				; TriggerInfo::~TriggerInfo
_TEXT	ENDS
END
