; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	..\tempotrk.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DM@BJFJPLMP@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@NFDMFMJO@Error?3?5Invalid?5data?5in?5tempo?5tra@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CE@LMABKFPK@Error?3?5Unable?5to?5read?5tempo?5trac@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@IAIIAEEB@Error?3?5Failure?5reading?5tempo?5tra@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DK@NHFNKPKK@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MIJOINAD@pStateData?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@OBDKOLBG@?$CFs?3?5Invalid?5pointer?5pNewTrack?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@NLJNHMHF@?$CFs?3?5Invalid?5pointer?5pContext?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@JILJHMLB@?$CFs?3?5Invalid?5pointer?5ppResultTrac@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BGAOHDMM@?$CBp?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT ?Construct@CTempoTrack@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTempoTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack8@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTempoTrack@@QAE@ABV0@JJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTempoTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CTempoTrack@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CTempoTrack@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CTempoTrack@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTempoTrack@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClassID@CTempoTrack@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsDirty@CTempoTrack@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CTempoTrack@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Save@CTempoTrack@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CTempoTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsParamSupported@CTempoTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CTempoTrack@@UAGJPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndPlay@CTempoTrack@@UAGJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Play@CTempoTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Seek@CTempoTrack@@IAEJPAUTempoStateData@@JH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParamEx@CTempoTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetParamEx@CTempoTrack@@UAGJABU_GUID@@_JPAX2K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetParam@CTempoTrack@@UAGJABU_GUID@@JPAJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetParam@CTempoTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddNotificationType@CTempoTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveNotificationType@CTempoTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@CTempoTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compose@CTempoTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?JoinInternal@CTempoTrack@@IAEJPAUIDirectMusicTrack@@JK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@UTriggerInfo@@@@QBEPAV?$TListItem@UTriggerInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@UTriggerInfo@@@@QAEXPAV?$TListItem@UTriggerInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TList@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@ULyricInfo@@@@QBEPAV?$TListItem@ULyricInfo@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanUp@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@ULyricInfo@@@@QAEXPAV?$TListItem@ULyricInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@UTriggerInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@UTriggerInfo@@@@QAEAAUTriggerInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@ULyricInfo@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@ULyricInfo@@@@QAEAAULyricInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEPAPAUIDirectMusicLoader@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@UTriggerInfo@@@@SGHAAUTriggerInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EventCompare@?$CmpStruct@ULyricInfo@@@@SGHAAULyricInfo@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStandardStateData@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@ABU_DMUS_IO_TEMPO_ITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@UTriggerInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@ULyricInfo@@@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$ComPtr@UIDirectMusicLoader@@@SmartRef@@QAEAAV01@PAUIDirectMusicLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@UTriggerInfo@@@@QAEXP6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@UTriggerInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UTriggerInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TList@ULyricInfo@@@@QAEXP6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@ULyricInfo@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@ULyricInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UWaveItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_SEQ_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_CURVE_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@_J@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@UObjectInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddTail@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ObjectInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddTail@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV1@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@UTriggerInfo@@@@QAEPAV1@P6GHAAUTriggerInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MergeSort@?$TListItem@ULyricInfo@@@@QAEPAV1@P6GHAAULyricInfo@@0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Cat@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV1@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@UTriggerInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@UTriggerInfo@@@@AAEPAV1@PAV1@P6GHAAUTriggerInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Divide@?$TListItem@ULyricInfo@@@@AAEXAAPAV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Merge@?$TListItem@ULyricInfo@@@@AAEPAV1@PAV1@P6GHAAULyricInfo@@1@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueryInterface@CTempoTrack@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CTempoTrack@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CTempoTrack@@W3AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TList@UParamInfo@CParamControlTrack@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UParamInfo@CParamControlTrack@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UParamInfo@CParamControlTrack@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ParamInfo@CParamControlTrack@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WaveItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1WString@SmartRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DJ@BKGKOLMN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0LyricInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WString@SmartRef@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TriggerInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@ULyricInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@ULyricInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@UTriggerInfo@@@@SGXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$TListItem@UTriggerInfo@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU3@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Clone@CTempoTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??SetParam@CTempoTrack@@UAGJABU_GUID@@JPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetParam@CTempoTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?6??EndPlay@CTempoTrack@@UAGJPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0TempoStateData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??IsParamSupported@CTempoTrack@@UAGJABU_GUID@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Load@CTempoTrack@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CTempoTrack@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CTempoTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CTempoTrack@@6BIDirectMusicTrack8@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CTempoTrack@@6BIPersistStream@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?Construct@CTempoTrack@@IAEXXZ			; CTempoTrack::Construct
EXTRN	__imp__RtlInitializeCriticalSection@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\tempotrk.cpp
;	COMDAT ?Construct@CTempoTrack@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Construct@CTempoTrack@@IAEXXZ PROC NEAR		; CTempoTrack::Construct, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 37   :     IncrementDLLCount();
; 38   : 
; 39   : 	m_cRef = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 40   : 	m_dwValidate = 0;

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 41   :     m_fCSInitialized = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0

; 42   : 	INITIALIZE_CRITICAL_SECTION(&m_CrSec);

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	83 c0 14	 add	 eax, 20			; 00000014H
  0002b	50		 push	 eax
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 43   :     m_fCSInitialized = TRUE;

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	c7 41 30 01 00
	00 00		 mov	 DWORD PTR [ecx+48], 1

; 44   : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?Construct@CTempoTrack@@IAEXXZ ENDP			; CTempoTrack::Construct
_TEXT	ENDS
PUBLIC	??0CTempoTrack@@QAE@XZ				; CTempoTrack::CTempoTrack
PUBLIC	??0?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ	; TList<_DMUS_IO_TEMPO_ITEM>::TList<_DMUS_IO_TEMPO_ITEM>
PUBLIC	??0IDirectMusicTrack8@@QAE@XZ			; IDirectMusicTrack8::IDirectMusicTrack8
PUBLIC	?QueryInterface@CTempoTrack@@UAGJABU_GUID@@PAPAX@Z ; CTempoTrack::QueryInterface
PUBLIC	?AddRef@CTempoTrack@@UAGKXZ			; CTempoTrack::AddRef
PUBLIC	?Release@CTempoTrack@@UAGKXZ			; CTempoTrack::Release
PUBLIC	?IsParamSupported@CTempoTrack@@UAGJABU_GUID@@@Z	; CTempoTrack::IsParamSupported
PUBLIC	?Init@CTempoTrack@@UAGJPAUIDirectMusicSegment@@@Z ; CTempoTrack::Init
PUBLIC	?InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ; CTempoTrack::InitPlay
PUBLIC	?EndPlay@CTempoTrack@@UAGJPAX@Z			; CTempoTrack::EndPlay
PUBLIC	?Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ; CTempoTrack::Play
PUBLIC	?GetParam@CTempoTrack@@UAGJABU_GUID@@JPAJPAX@Z	; CTempoTrack::GetParam
PUBLIC	?SetParam@CTempoTrack@@UAGJABU_GUID@@JPAX@Z	; CTempoTrack::SetParam
PUBLIC	?AddNotificationType@CTempoTrack@@UAGJABU_GUID@@@Z ; CTempoTrack::AddNotificationType
PUBLIC	?RemoveNotificationType@CTempoTrack@@UAGJABU_GUID@@@Z ; CTempoTrack::RemoveNotificationType
PUBLIC	?Clone@CTempoTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z ; CTempoTrack::Clone
PUBLIC	?PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ; CTempoTrack::PlayEx
PUBLIC	?GetParamEx@CTempoTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z ; CTempoTrack::GetParamEx
PUBLIC	?SetParamEx@CTempoTrack@@UAGJABU_GUID@@_JPAX2K@Z ; CTempoTrack::SetParamEx
PUBLIC	?Compose@CTempoTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z ; CTempoTrack::Compose
PUBLIC	?Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z ; CTempoTrack::Join
PUBLIC	?GetClassID@CTempoTrack@@UAGJPAU_GUID@@@Z	; CTempoTrack::GetClassID
PUBLIC	?IsDirty@CTempoTrack@@UAGJXZ			; CTempoTrack::IsDirty
PUBLIC	?Load@CTempoTrack@@UAGJPAUIStream@@@Z		; CTempoTrack::Load
PUBLIC	?Save@CTempoTrack@@UAGJPAUIStream@@H@Z		; CTempoTrack::Save
PUBLIC	?GetSizeMax@CTempoTrack@@UAGJPAT_ULARGE_INTEGER@@@Z ; CTempoTrack::GetSizeMax
PUBLIC	??_7CTempoTrack@@6BIPersistStream@@@		; CTempoTrack::`vftable'
PUBLIC	??_7CTempoTrack@@6BIDirectMusicTrack8@@@	; CTempoTrack::`vftable'
PUBLIC	?QueryInterface@CTempoTrack@@W3AGJABU_GUID@@PAPAX@Z ; CTempoTrack::QueryInterface
PUBLIC	?AddRef@CTempoTrack@@W3AGKXZ			; CTempoTrack::AddRef
PUBLIC	?Release@CTempoTrack@@W3AGKXZ			; CTempoTrack::Release
PUBLIC	??0IPersistStream@@QAE@XZ			; IPersistStream::IPersistStream
EXTRN	??0CMemTrack@@QAE@K@Z:NEAR			; CMemTrack::CMemTrack
;	COMDAT ??_7CTempoTrack@@6BIPersistStream@@@
CONST	SEGMENT
??_7CTempoTrack@@6BIPersistStream@@@ DD FLAT:?QueryInterface@CTempoTrack@@UAGJABU_GUID@@PAPAX@Z ; CTempoTrack::`vftable'
	DD	FLAT:?AddRef@CTempoTrack@@UAGKXZ
	DD	FLAT:?Release@CTempoTrack@@UAGKXZ
	DD	FLAT:?GetClassID@CTempoTrack@@UAGJPAU_GUID@@@Z
	DD	FLAT:?IsDirty@CTempoTrack@@UAGJXZ
	DD	FLAT:?Load@CTempoTrack@@UAGJPAUIStream@@@Z
	DD	FLAT:?Save@CTempoTrack@@UAGJPAUIStream@@H@Z
	DD	FLAT:?GetSizeMax@CTempoTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
CONST	ENDS
;	COMDAT ??_7CTempoTrack@@6BIDirectMusicTrack8@@@
CONST	SEGMENT
??_7CTempoTrack@@6BIDirectMusicTrack8@@@ DD FLAT:?QueryInterface@CTempoTrack@@W3AGJABU_GUID@@PAPAX@Z ; CTempoTrack::`vftable'
	DD	FLAT:?AddRef@CTempoTrack@@W3AGKXZ
	DD	FLAT:?Release@CTempoTrack@@W3AGKXZ
	DD	FLAT:?Init@CTempoTrack@@UAGJPAUIDirectMusicSegment@@@Z
	DD	FLAT:?InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
	DD	FLAT:?EndPlay@CTempoTrack@@UAGJPAX@Z
	DD	FLAT:?Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
	DD	FLAT:?GetParam@CTempoTrack@@UAGJABU_GUID@@JPAJPAX@Z
	DD	FLAT:?SetParam@CTempoTrack@@UAGJABU_GUID@@JPAX@Z
	DD	FLAT:?IsParamSupported@CTempoTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?AddNotificationType@CTempoTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?RemoveNotificationType@CTempoTrack@@UAGJABU_GUID@@@Z
	DD	FLAT:?Clone@CTempoTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
	DD	FLAT:?PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
	DD	FLAT:?GetParamEx@CTempoTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z
	DD	FLAT:?SetParamEx@CTempoTrack@@UAGJABU_GUID@@_JPAX2K@Z
	DD	FLAT:?Compose@CTempoTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z
	DD	FLAT:?Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CTempoTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CTempoTrack@@QAE@XZ PROC NEAR			; CTempoTrack::CTempoTrack, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPersistStream@@QAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 04	 add	 ecx, 4
  00015	e8 00 00 00 00	 call	 ??0IDirectMusicTrack8@@QAE@XZ
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CTempoTrack@@6BIPersistStream@@@
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CTempoTrack@@6BIDirectMusicTrack8@@@
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 08	 add	 ecx, 8
  00033	e8 00 00 00 00	 call	 ??0?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::TList<_DMUS_IO_TEMPO_ITEM>
  00038	6a 1d		 push	 29			; 0000001dH
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00040	e8 00 00 00 00	 call	 ??0CMemTrack@@QAE@K@Z	; CMemTrack::CMemTrack

; 48   : 	Construct();

  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?Construct@CTempoTrack@@IAEXXZ ; CTempoTrack::Construct

; 49   : 	m_fActive = TRUE;

  0004d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00050	c7 42 34 01 00
	00 00		 mov	 DWORD PTR [edx+52], 1

; 50   :     m_fStateSetBySetParam = FALSE;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 51   : }

  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
??0CTempoTrack@@QAE@XZ ENDP				; CTempoTrack::CTempoTrack
_TEXT	ENDS
PUBLIC	??0IPersist@@QAE@XZ				; IPersist::IPersist
; Function compile flags: /Odt
;	COMDAT ??0IPersistStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersistStream@@QAE@XZ PROC NEAR			; IPersistStream::IPersistStream, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IPersist@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersistStream@@QAE@XZ ENDP				; IPersistStream::IPersistStream
_TEXT	ENDS
PUBLIC	??0IDirectMusicTrack@@QAE@XZ			; IDirectMusicTrack::IDirectMusicTrack
; Function compile flags: /Odt
;	COMDAT ??0IDirectMusicTrack8@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicTrack8@@QAE@XZ PROC NEAR			; IDirectMusicTrack8::IDirectMusicTrack8, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IDirectMusicTrack@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicTrack8@@QAE@XZ ENDP			; IDirectMusicTrack8::IDirectMusicTrack8
_TEXT	ENDS
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
; Function compile flags: /Odt
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IPersist@@QAE@XZ PROC NEAR				; IPersist::IPersist, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IPersist@@QAE@XZ ENDP				; IPersist::IPersist
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IDirectMusicTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IDirectMusicTrack@@QAE@XZ PROC NEAR			; IDirectMusicTrack::IDirectMusicTrack, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectMusicTrack@@QAE@XZ ENDP			; IDirectMusicTrack::IDirectMusicTrack
_TEXT	ENDS
PUBLIC	??0CTempoTrack@@QAE@ABV0@JJ@Z			; CTempoTrack::CTempoTrack
PUBLIC	?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::GetHead
PUBLIC	?AddHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z ; TList<_DMUS_IO_TEMPO_ITEM>::AddHead
PUBLIC	?Reverse@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXXZ	; TList<_DMUS_IO_TEMPO_ITEM>::Reverse
PUBLIC	??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ	; TListItem<_DMUS_IO_TEMPO_ITEM>::TListItem<_DMUS_IO_TEMPO_ITEM>
PUBLIC	?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetNext
PUBLIC	?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
EXTRN	_memcpy:NEAR
; Function compile flags: /Odt
;	COMDAT ??0CTempoTrack@@QAE@ABV0@JJ@Z
_TEXT	SEGMENT
tv157 = -52
tv136 = -48
_this$ = -44
$T70558 = -40
$T70555 = -36
_rNew$69503 = -32
_pNew$69499 = -28
_rPrevious$69498 = -24
_rNew$69494 = -20
_pNew$69490 = -16
_rScan$69485 = -12
_pPrevious$ = -8
_pScan$ = -4
_rTrack$ = 8
_mtStart$ = 12
_mtEnd$ = 16
??0CTempoTrack@@QAE@ABV0@JJ@Z PROC NEAR			; CTempoTrack::CTempoTrack, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0IPersistStream@@QAE@XZ
  00011	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	83 c1 04	 add	 ecx, 4
  00017	e8 00 00 00 00	 call	 ??0IDirectMusicTrack8@@QAE@XZ
  0001c	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CTempoTrack@@6BIPersistStream@@@
  00025	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CTempoTrack@@6BIDirectMusicTrack8@@@
  0002f	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 08	 add	 ecx, 8
  00035	e8 00 00 00 00	 call	 ??0?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::TList<_DMUS_IO_TEMPO_ITEM>
  0003a	6a 1d		 push	 29			; 0000001dH
  0003c	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00042	e8 00 00 00 00	 call	 ??0CMemTrack@@QAE@K@Z	; CMemTrack::CMemTrack

; 56   : 	Construct();

  00047	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?Construct@CTempoTrack@@IAEXXZ ; CTempoTrack::Construct

; 57   : 	m_fActive = rTrack.m_fActive;

  0004f	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 45 08	 mov	 eax, DWORD PTR _rTrack$[ebp]
  00055	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00058	89 4a 34	 mov	 DWORD PTR [edx+52], ecx

; 58   :     m_fStateSetBySetParam = rTrack.m_fStateSetBySetParam;

  0005b	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 45 08	 mov	 eax, DWORD PTR _rTrack$[ebp]
  00061	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00064	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 59   : 	TListItem<DMUS_IO_TEMPO_ITEM>* pScan = rTrack.m_TempoEventList.GetHead();

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _rTrack$[ebp]
  0006a	83 c1 08	 add	 ecx, 8
  0006d	e8 00 00 00 00	 call	 ?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::GetHead
  00072	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax

; 60   : 	//1////////////////////////////////////////
; 61   : 	TListItem<DMUS_IO_TEMPO_ITEM>* pPrevious = NULL;

  00075	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pPrevious$[ebp], 0

; 62   : 	//1////////////////////////////////////////
; 63   : 	for(; pScan; pScan = pScan->GetNext())

  0007c	eb 0b		 jmp	 SHORT $L69482
$L69483:
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00081	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetNext
  00086	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
$L69482:
  00089	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  0008d	0f 84 b0 00 00
	00		 je	 $L69484

; 64   : 	{
; 65   : 		DMUS_IO_TEMPO_ITEM& rScan = pScan->GetItemValue();

  00093	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00096	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  0009b	89 45 f4	 mov	 DWORD PTR _rScan$69485[ebp], eax

; 66   : 		//2////////////////////////////////////////
; 67   : 		if (rScan.lTime < mtStart)

  0009e	8b 55 f4	 mov	 edx, DWORD PTR _rScan$69485[ebp]
  000a1	8b 02		 mov	 eax, DWORD PTR [edx]
  000a3	3b 45 0c	 cmp	 eax, DWORD PTR _mtStart$[ebp]
  000a6	7d 0b		 jge	 SHORT $L69486

; 68   : 		{
; 69   : 			pPrevious = pScan;

  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  000ab	89 4d f8	 mov	 DWORD PTR _pPrevious$[ebp], ecx

; 70   : 		}
; 71   : 		//2////////////////////////////////////////
; 72   : 		else if (rScan.lTime < mtEnd)

  000ae	e9 8b 00 00 00	 jmp	 $L69487
$L69486:
  000b3	8b 55 f4	 mov	 edx, DWORD PTR _rScan$69485[ebp]
  000b6	8b 02		 mov	 eax, DWORD PTR [edx]
  000b8	3b 45 10	 cmp	 eax, DWORD PTR _mtEnd$[ebp]
  000bb	7d 7f		 jge	 SHORT $L69488

; 73   : 		{
; 74   : 			//3////////////////////////////////////////
; 75   : 			if (rScan.lTime == mtStart)

  000bd	8b 4d f4	 mov	 ecx, DWORD PTR _rScan$69485[ebp]
  000c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c2	3b 55 0c	 cmp	 edx, DWORD PTR _mtStart$[ebp]
  000c5	75 07		 jne	 SHORT $L69489

; 76   : 			{
; 77   : 				pPrevious = NULL;

  000c7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pPrevious$[ebp], 0
$L69489:

; 78   : 			}
; 79   : 			//3////////////////////////////////////////
; 80   : 			TListItem<DMUS_IO_TEMPO_ITEM>* pNew = new TListItem<DMUS_IO_TEMPO_ITEM>;

  000ce	6a 18		 push	 24			; 00000018H
  000d0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d5	83 c4 04	 add	 esp, 4
  000d8	89 45 dc	 mov	 DWORD PTR $T70555[ebp], eax
  000db	83 7d dc 00	 cmp	 DWORD PTR $T70555[ebp], 0
  000df	74 0d		 je	 SHORT $L70556
  000e1	8b 4d dc	 mov	 ecx, DWORD PTR $T70555[ebp]
  000e4	e8 00 00 00 00	 call	 ??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::TListItem<_DMUS_IO_TEMPO_ITEM>
  000e9	89 45 d0	 mov	 DWORD PTR tv136[ebp], eax
  000ec	eb 07		 jmp	 SHORT $L70557
$L70556:
  000ee	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv136[ebp], 0
$L70557:
  000f5	8b 45 d0	 mov	 eax, DWORD PTR tv136[ebp]
  000f8	89 45 f0	 mov	 DWORD PTR _pNew$69490[ebp], eax

; 81   : 			if (pNew)

  000fb	83 7d f0 00	 cmp	 DWORD PTR _pNew$69490[ebp], 0
  000ff	74 39		 je	 SHORT $L69493

; 82   : 			{
; 83   : 				DMUS_IO_TEMPO_ITEM& rNew = pNew->GetItemValue();

  00101	8b 4d f0	 mov	 ecx, DWORD PTR _pNew$69490[ebp]
  00104	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  00109	89 45 ec	 mov	 DWORD PTR _rNew$69494[ebp], eax

; 84   : 				memcpy( &rNew, &rScan, sizeof(DMUS_IO_TEMPO_ITEM) );

  0010c	6a 10		 push	 16			; 00000010H
  0010e	8b 4d f4	 mov	 ecx, DWORD PTR _rScan$69485[ebp]
  00111	51		 push	 ecx
  00112	8b 55 ec	 mov	 edx, DWORD PTR _rNew$69494[ebp]
  00115	52		 push	 edx
  00116	e8 00 00 00 00	 call	 _memcpy
  0011b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 85   : 				rNew.lTime = rScan.lTime - mtStart;

  0011e	8b 45 f4	 mov	 eax, DWORD PTR _rScan$69485[ebp]
  00121	8b 08		 mov	 ecx, DWORD PTR [eax]
  00123	2b 4d 0c	 sub	 ecx, DWORD PTR _mtStart$[ebp]
  00126	8b 55 ec	 mov	 edx, DWORD PTR _rNew$69494[ebp]
  00129	89 0a		 mov	 DWORD PTR [edx], ecx

; 86   : 				m_TempoEventList.AddHead(pNew); // instead of AddTail, which is n^2. We reverse below.

  0012b	8b 45 f0	 mov	 eax, DWORD PTR _pNew$69490[ebp]
  0012e	50		 push	 eax
  0012f	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	83 c1 08	 add	 ecx, 8
  00135	e8 00 00 00 00	 call	 ?AddHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z ; TList<_DMUS_IO_TEMPO_ITEM>::AddHead
$L69493:

; 87   : 			}
; 88   : 		}
; 89   : 		else break;

  0013a	eb 02		 jmp	 SHORT $L69487
$L69488:
  0013c	eb 05		 jmp	 SHORT $L69484
$L69487:

; 90   : 	}

  0013e	e9 3b ff ff ff	 jmp	 $L69483
$L69484:

; 91   : 	m_TempoEventList.Reverse(); // for above AddHead.

  00143	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	83 c1 08	 add	 ecx, 8
  00149	e8 00 00 00 00	 call	 ?Reverse@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXXZ ; TList<_DMUS_IO_TEMPO_ITEM>::Reverse

; 92   : 	//4////////////////////////////////////////
; 93   : 	if (pPrevious)

  0014e	83 7d f8 00	 cmp	 DWORD PTR _pPrevious$[ebp], 0
  00152	74 73		 je	 SHORT $L69435

; 94   : 	{
; 95   : 		DMUS_IO_TEMPO_ITEM& rPrevious = pPrevious->GetItemValue();

  00154	8b 4d f8	 mov	 ecx, DWORD PTR _pPrevious$[ebp]
  00157	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  0015c	89 45 e8	 mov	 DWORD PTR _rPrevious$69498[ebp], eax

; 96   : 		TListItem<DMUS_IO_TEMPO_ITEM>* pNew = new TListItem<DMUS_IO_TEMPO_ITEM>;

  0015f	6a 18		 push	 24			; 00000018H
  00161	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00166	83 c4 04	 add	 esp, 4
  00169	89 45 d8	 mov	 DWORD PTR $T70558[ebp], eax
  0016c	83 7d d8 00	 cmp	 DWORD PTR $T70558[ebp], 0
  00170	74 0d		 je	 SHORT $L70559
  00172	8b 4d d8	 mov	 ecx, DWORD PTR $T70558[ebp]
  00175	e8 00 00 00 00	 call	 ??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::TListItem<_DMUS_IO_TEMPO_ITEM>
  0017a	89 45 cc	 mov	 DWORD PTR tv157[ebp], eax
  0017d	eb 07		 jmp	 SHORT $L70560
$L70559:
  0017f	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
$L70560:
  00186	8b 4d cc	 mov	 ecx, DWORD PTR tv157[ebp]
  00189	89 4d e4	 mov	 DWORD PTR _pNew$69499[ebp], ecx

; 97   : 		if (pNew)

  0018c	83 7d e4 00	 cmp	 DWORD PTR _pNew$69499[ebp], 0
  00190	74 35		 je	 SHORT $L69435

; 98   : 		{
; 99   : 			DMUS_IO_TEMPO_ITEM& rNew = pNew->GetItemValue();

  00192	8b 4d e4	 mov	 ecx, DWORD PTR _pNew$69499[ebp]
  00195	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  0019a	89 45 e0	 mov	 DWORD PTR _rNew$69503[ebp], eax

; 100  : 			memcpy( &rNew, &rPrevious, sizeof(DMUS_IO_TEMPO_ITEM) );

  0019d	6a 10		 push	 16			; 00000010H
  0019f	8b 55 e8	 mov	 edx, DWORD PTR _rPrevious$69498[ebp]
  001a2	52		 push	 edx
  001a3	8b 45 e0	 mov	 eax, DWORD PTR _rNew$69503[ebp]
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 _memcpy
  001ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 101  : 			rNew.lTime = 0;

  001af	8b 4d e0	 mov	 ecx, DWORD PTR _rNew$69503[ebp]
  001b2	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 102  : 			m_TempoEventList.AddHead(pNew);

  001b8	8b 55 e4	 mov	 edx, DWORD PTR _pNew$69499[ebp]
  001bb	52		 push	 edx
  001bc	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  001bf	83 c1 08	 add	 ecx, 8
  001c2	e8 00 00 00 00	 call	 ?AddHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z ; TList<_DMUS_IO_TEMPO_ITEM>::AddHead
$L69435:

; 103  : 		}
; 104  : 	}
; 105  : 	//4////////////////////////////////////////
; 106  : }

  001c7	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  001ca	8b e5		 mov	 esp, ebp
  001cc	5d		 pop	 ebp
  001cd	c2 0c 00	 ret	 12			; 0000000cH
??0CTempoTrack@@QAE@ABV0@JJ@Z ENDP			; CTempoTrack::CTempoTrack
_TEXT	ENDS
PUBLIC	??1CTempoTrack@@QAE@XZ				; CTempoTrack::~CTempoTrack
PUBLIC	??1?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ	; TList<_DMUS_IO_TEMPO_ITEM>::~TList<_DMUS_IO_TEMPO_ITEM>
PUBLIC	?DeleteCriticalSection@@YGXPAX@Z		; DeleteCriticalSection
EXTRN	??1CMemTrack@@QAE@XZ:NEAR			; CMemTrack::~CMemTrack
; Function compile flags: /Odt
;	COMDAT ??1CTempoTrack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CTempoTrack@@QAE@XZ PROC NEAR			; CTempoTrack::~CTempoTrack, COMDAT
; _this$ = ecx

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CTempoTrack@@6BIPersistStream@@@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CTempoTrack@@6BIDirectMusicTrack8@@@

; 110  :     if (m_fCSInitialized)

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  00021	74 0c		 je	 SHORT $L69507

; 111  :     {
; 112  : 	    DELETE_CRITICAL_SECTION(&m_CrSec);

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 14	 add	 eax, 20			; 00000014H
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?DeleteCriticalSection@@YGXPAX@Z ; DeleteCriticalSection
$L69507:

; 113  :     }
; 114  :     DecrementDLLCount();
; 115  : }

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00035	e8 00 00 00 00	 call	 ??1CMemTrack@@QAE@XZ	; CMemTrack::~CMemTrack
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 c1 08	 add	 ecx, 8
  00040	e8 00 00 00 00	 call	 ??1?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::~TList<_DMUS_IO_TEMPO_ITEM>
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??1CTempoTrack@@QAE@XZ ENDP				; CTempoTrack::~CTempoTrack
_TEXT	ENDS
PUBLIC	??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ ; `string'
PUBLIC	??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ ; `string'
PUBLIC	??_C@_0DM@BJFJPLMP@Warning?3?5Request?5to?5query?5unknow@ ; `string'
PUBLIC	_==@8
EXTRN	_IID_IDirectMusicTrack:BYTE
EXTRN	_IID_IDirectMusicTrack8:BYTE
EXTRN	?DebugTrace@@YAXHPADZZ:NEAR			; DebugTrace
EXTRN	_DebugBreak@0:NEAR
EXTRN	_IID_IUnknown:BYTE
EXTRN	_IID_IPersistStream:BYTE
EXTRN	_IsBadReadPtr@8:NEAR
EXTRN	_IsBadWritePtr@8:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??QueryInterface@CTempoTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??QueryInterface@CTempoTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB DB 'C'
	DB	'TempoTrack::QueryInterface', 00H		; `CTempoTrack::QueryInterface'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
CONST	SEGMENT
??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@ DB '%s: Invalid '
	DB	'pointer ppv', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
CONST	SEGMENT
??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@ DB '%'
	DB	's: Invalid pointer (void*)&iid', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@BJFJPLMP@Warning?3?5Request?5to?5query?5unknow@
CONST	SEGMENT
??_C@_0DM@BJFJPLMP@Warning?3?5Request?5to?5query?5unknow@ DB 'Warning: Re'
	DB	'quest to query unknown interface on Tempo Track', 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?QueryInterface@CTempoTrack@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv92 = -4
_this$ = 8
_iid$ = 12
_ppv$ = 16
?QueryInterface@CTempoTrack@@UAGJABU_GUID@@PAPAX@Z PROC NEAR ; CTempoTrack::QueryInterface, COMDAT

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 134  : 	V_INAME(CTempoTrack::QueryInterface);
; 135  : 	V_PTRPTR_WRITE(ppv);

  00004	6a 04		 push	 4
  00006	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $L69517
  00013	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CTempoTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGMLCEHI@?$CFs?3?5Invalid?5pointer?5ppv?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L69517:

; 136  : 	V_REFGUID(iid);

  0002c	6a 10		 push	 16			; 00000010H
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $L69521
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??QueryInterface@CTempoTrack@@UAGJABU_GUID@@PAPAX@Z@4QBDB
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@NHMFCKLP@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGiid?6@
  00045	6a ff		 push	 -1
  00047	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69521:

; 137  : 
; 138  :     if (iid == IID_IUnknown || iid == IID_IDirectMusicTrack || iid == IID_IDirectMusicTrack8)

  00054	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IUnknown
  00059	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _==@8
  00062	85 c0		 test	 eax, eax
  00064	75 24		 jne	 SHORT $L69524
  00066	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack
  0006b	8b 45 0c	 mov	 eax, DWORD PTR _iid$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _==@8
  00074	85 c0		 test	 eax, eax
  00076	75 12		 jne	 SHORT $L69524
  00078	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack8
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _iid$[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 _==@8
  00086	85 c0		 test	 eax, eax
  00088	74 22		 je	 SHORT $L69523
$L69524:

; 139  :     {
; 140  :         *ppv = static_cast<IDirectMusicTrack8*>(this);

  0008a	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  0008e	74 0b		 je	 SHORT $L70567
  00090	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00093	83 c2 04	 add	 edx, 4
  00096	89 55 fc	 mov	 DWORD PTR tv92[ebp], edx
  00099	eb 07		 jmp	 SHORT $L70568
$L70567:
  0009b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$L70568:
  000a2	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR tv92[ebp]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx

; 141  :     } else

  000aa	eb 3b		 jmp	 SHORT $L69526
$L69523:

; 142  : 	if (iid == IID_IPersistStream)

  000ac	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IPersistStream
  000b1	8b 55 0c	 mov	 edx, DWORD PTR _iid$[ebp]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 _==@8
  000ba	85 c0		 test	 eax, eax
  000bc	74 0a		 je	 SHORT $L69527

; 143  : 	{
; 144  :         *ppv = static_cast<IPersistStream*>(this);

  000be	8b 45 10	 mov	 eax, DWORD PTR _ppv$[ebp]
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	89 08		 mov	 DWORD PTR [eax], ecx

; 145  : 	} else

  000c6	eb 1f		 jmp	 SHORT $L69526
$L69527:

; 146  :     {
; 147  :         *ppv = NULL;

  000c8	8b 55 10	 mov	 edx, DWORD PTR _ppv$[ebp]
  000cb	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 148  :         Trace(4,"Warning: Request to query unknown interface on Tempo Track\n");

  000d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@BJFJPLMP@Warning?3?5Request?5to?5query?5unknow@
  000d6	6a 04		 push	 4
  000d8	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000dd	83 c4 08	 add	 esp, 8

; 149  :         return E_NOINTERFACE;

  000e0	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
  000e5	eb 0e		 jmp	 SHORT $L69513
$L69526:

; 150  :     }
; 151  : 
; 152  :     reinterpret_cast<IUnknown*>(this)->AddRef();

  000e7	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ec	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	52		 push	 edx
  000f0	ff 51 04	 call	 DWORD PTR [ecx+4]

; 153  :     return S_OK;

  000f3	33 c0		 xor	 eax, eax
$L69513:

; 154  : }

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@CTempoTrack@@UAGJABU_GUID@@PAPAX@Z ENDP	; CTempoTrack::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\guiddef.h
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8
_guidOther$ = 12
_==@8	PROC NEAR					; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 189  :     return IsEqualGUID(guidOne,guidOther);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IsEqualGUID@8

; 190  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:NEAR
; Function compile flags: /Odt
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8
_rguid2$ = 12
_IsEqualGUID@8 PROC NEAR				; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _memcmp
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 157  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
EXTRN	__InterlockedIncrement@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\tempotrk.cpp
;	COMDAT ?AddRef@CTempoTrack@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@CTempoTrack@@UAGKXZ PROC NEAR			; CTempoTrack::AddRef, COMDAT

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 166  :     return InterlockedIncrement(&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 167  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@CTempoTrack@@UAGKXZ ENDP			; CTempoTrack::AddRef
_TEXT	ENDS
PUBLIC	??_GCTempoTrack@@QAEPAXI@Z			; CTempoTrack::`scalar deleting destructor'
EXTRN	__InterlockedDecrement@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Release@CTempoTrack@@UAGKXZ
_TEXT	SEGMENT
tv72 = -12
$T70582 = -8
$T70581 = -4
_this$ = 8
?Release@CTempoTrack@@UAGKXZ PROC NEAR			; CTempoTrack::Release, COMDAT

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 179  :     if (!InterlockedDecrement(&m_cRef))

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 0c	 add	 eax, 12			; 0000000cH
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	85 c0		 test	 eax, eax
  00014	75 2c		 jne	 SHORT $L69540

; 180  :     {
; 181  :         delete this;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	89 4d f8	 mov	 DWORD PTR $T70582[ebp], ecx
  0001c	8b 55 f8	 mov	 edx, DWORD PTR $T70582[ebp]
  0001f	89 55 fc	 mov	 DWORD PTR $T70581[ebp], edx
  00022	83 7d fc 00	 cmp	 DWORD PTR $T70581[ebp], 0
  00026	74 0f		 je	 SHORT $L70583
  00028	6a 01		 push	 1
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR $T70581[ebp]
  0002d	e8 00 00 00 00	 call	 ??_GCTempoTrack@@QAEPAXI@Z
  00032	89 45 f4	 mov	 DWORD PTR tv72[ebp], eax
  00035	eb 07		 jmp	 SHORT $L70584
$L70583:
  00037	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L70584:

; 182  :         return 0;

  0003e	33 c0		 xor	 eax, eax
  00040	eb 06		 jmp	 SHORT $L69539
$L69540:

; 183  :     }
; 184  : 
; 185  :     return m_cRef;

  00042	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
$L69539:

; 186  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?Release@CTempoTrack@@UAGKXZ ENDP			; CTempoTrack::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCTempoTrack@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCTempoTrack@@QAEPAXI@Z PROC NEAR			; CTempoTrack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CTempoTrack@@QAE@XZ	; CTempoTrack::~CTempoTrack
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69546
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69546:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCTempoTrack@@QAEPAXI@Z ENDP				; CTempoTrack::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ ; `string'
EXTRN	_CLSID_DirectMusicTempoTrack:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??GetClassID@CTempoTrack@@UAGJPAU_GUID@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetClassID@CTempoTrack@@UAGJPAU_GUID@@@Z@4QBDB DB 'C'
	DB	'TempoTrack::GetClassID', 00H		; `CTempoTrack::GetClassID'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
CONST	SEGMENT
??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pClassID', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetClassID@CTempoTrack@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_pClassID$ = 12
?GetClassID@CTempoTrack@@UAGJPAU_GUID@@@Z PROC NEAR	; CTempoTrack::GetClassID, COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 193  : 	V_INAME(CTempoTrack::GetClassID);
; 194  : 	V_PTR_WRITE(pClassID, CLSID); 

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pClassID$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L69554
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetClassID@CTempoTrack@@UAGJPAU_GUID@@@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@DNADCDLB@?$CFs?3?5Invalid?5pointer?5pClassID?6?$AA@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L69554:

; 195  : 	*pClassID = CLSID_DirectMusicTempoTrack;

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _pClassID$[ebp]
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicTempoTrack
  00034	89 11		 mov	 DWORD PTR [ecx], edx
  00036	a1 04 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicTempoTrack+4
  0003b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0003e	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _CLSID_DirectMusicTempoTrack+8
  00044	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00047	a1 0c 00 00 00	 mov	 eax, DWORD PTR _CLSID_DirectMusicTempoTrack+12
  0004c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 196  : 	return S_OK;

  0004f	33 c0		 xor	 eax, eax

; 197  : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?GetClassID@CTempoTrack@@UAGJPAU_GUID@@@Z ENDP		; CTempoTrack::GetClassID
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsDirty@CTempoTrack@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?IsDirty@CTempoTrack@@UAGJXZ PROC NEAR			; CTempoTrack::IsDirty, COMDAT

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 	return S_FALSE;

  00003	b8 01 00 00 00	 mov	 eax, 1

; 205  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?IsDirty@CTempoTrack@@UAGJXZ ENDP			; CTempoTrack::IsDirty
_TEXT	ENDS
PUBLIC	?RemoveHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::RemoveHead
PUBLIC	??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ ; `string'
PUBLIC	??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@ABU_DMUS_IO_TEMPO_ITEM@@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::TListItem<_DMUS_IO_TEMPO_ITEM>
PUBLIC	??_G?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAXI@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::`scalar deleting destructor'
PUBLIC	??_C@_0CF@NFDMFMJO@Error?3?5Invalid?5data?5in?5tempo?5tra@ ; `string'
PUBLIC	??_C@_0CE@LMABKFPK@Error?3?5Unable?5to?5read?5tempo?5trac@ ; `string'
PUBLIC	??_C@_0CF@IAIIAEEB@Error?3?5Failure?5reading?5tempo?5tra@ ; `string'
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
EXTRN	_IsBadCodePtr@4:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??Load@CTempoTrack@@UAGJPAUIStream@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Load@CTempoTrack@@UAGJPAUIStream@@@Z@4QBDB DB 'C'
	DB	'TempoTrack::Load', 00H			; `CTempoTrack::Load'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
CONST	SEGMENT
??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pIStream', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NFDMFMJO@Error?3?5Invalid?5data?5in?5tempo?5tra@
CONST	SEGMENT
??_C@_0CF@NFDMFMJO@Error?3?5Invalid?5data?5in?5tempo?5tra@ DB 'Error: Inv'
	DB	'alid data in tempo track.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LMABKFPK@Error?3?5Unable?5to?5read?5tempo?5trac@
CONST	SEGMENT
??_C@_0CE@LMABKFPK@Error?3?5Unable?5to?5read?5tempo?5trac@ DB 'Error: Una'
	DB	'ble to read tempo track.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IAIIAEEB@Error?3?5Failure?5reading?5tempo?5tra@
CONST	SEGMENT
??_C@_0CF@IAIIAEEB@Error?3?5Failure?5reading?5tempo?5tra@ DB 'Error: Fail'
	DB	'ure reading tempo track.', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Load@CTempoTrack@@UAGJPAUIStream@@@Z
_TEXT	SEGMENT
tv199 = -84
tv135 = -80
$T70601 = -76
$T70598 = -72
$T70597 = -68
_pNew$69625 = -64
_pItem$69577 = -60
_tempoEvent$ = -56
_hr$ = -36
_li$ = -32
_dwSubSize$ = -20
_dwRead$ = -16
_lSize$ = -12
_dwChunk$ = -8
_dwSeek$ = -4
_this$ = 8
_pIStream$ = 12
?Load@CTempoTrack@@UAGJPAUIStream@@@Z PROC NEAR		; CTempoTrack::Load, COMDAT

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H

; 222  : 	V_INAME(CTempoTrack::Load);
; 223  : 	V_INTERFACE(pIStream);

  00006	6a 04		 push	 4
  00008	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69568
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CTempoTrack@@UAGJPAUIStream@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69568:
  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003b	85 c0		 test	 eax, eax
  0003d	74 19		 je	 SHORT $L69571
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CTempoTrack@@UAGJPAUIStream@@@Z@4QBDB
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00049	6a ff		 push	 -1
  0004b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	e8 00 00 00 00	 call	 _DebugBreak@0
$L69571:
  00058	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00065	85 c0		 test	 eax, eax
  00067	74 19		 je	 SHORT $L69573
  00069	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Load@CTempoTrack@@UAGJPAUIStream@@@Z@4QBDB
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LHMABAKO@?$CFs?3?5Invalid?5pointer?5pIStream?6?$AA@
  00073	6a ff		 push	 -1
  00075	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	e8 00 00 00 00	 call	 _DebugBreak@0
$L69573:

; 224  : 	HRESULT hr = S_OK;

  00082	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 225  : 
; 226  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  00089	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	83 c0 14	 add	 eax, 20			; 00000014H
  0008f	50		 push	 eax
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 227  : 	m_dwValidate++; // used to validate state data that's out there

  00096	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0009c	83 c2 01	 add	 edx, 1
  0009f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 228  : 	if( m_TempoEventList.GetHead() )

  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	83 c1 08	 add	 ecx, 8
  000ab	e8 00 00 00 00	 call	 ?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::GetHead
  000b0	85 c0		 test	 eax, eax
  000b2	74 3e		 je	 SHORT $L69576
$L69579:

; 229  : 	{
; 230  : 		TListItem<DMUS_IO_TEMPO_ITEM>* pItem;
; 231  : 		while( pItem = m_TempoEventList.RemoveHead() )

  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	83 c1 08	 add	 ecx, 8
  000ba	e8 00 00 00 00	 call	 ?RemoveHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::RemoveHead
  000bf	89 45 c4	 mov	 DWORD PTR _pItem$69577[ebp], eax
  000c2	83 7d c4 00	 cmp	 DWORD PTR _pItem$69577[ebp], 0
  000c6	74 2a		 je	 SHORT $L69576

; 232  : 		{
; 233  : 			delete pItem;

  000c8	8b 4d c4	 mov	 ecx, DWORD PTR _pItem$69577[ebp]
  000cb	89 4d b8	 mov	 DWORD PTR $T70598[ebp], ecx
  000ce	8b 55 b8	 mov	 edx, DWORD PTR $T70598[ebp]
  000d1	89 55 bc	 mov	 DWORD PTR $T70597[ebp], edx
  000d4	83 7d bc 00	 cmp	 DWORD PTR $T70597[ebp], 0
  000d8	74 0f		 je	 SHORT $L70599
  000da	6a 01		 push	 1
  000dc	8b 4d bc	 mov	 ecx, DWORD PTR $T70597[ebp]
  000df	e8 00 00 00 00	 call	 ??_G?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAXI@Z
  000e4	89 45 b0	 mov	 DWORD PTR tv135[ebp], eax
  000e7	eb 07		 jmp	 SHORT $L70600
$L70599:
  000e9	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$L70600:

; 234  : 		}

  000f0	eb c2		 jmp	 SHORT $L69579
$L69576:

; 235  : 	}
; 236  : 
; 237  : 	// copy contents of the stream into the list.
; 238  : 	LARGE_INTEGER li;
; 239  : 	DMUS_IO_TEMPO_ITEM tempoEvent;
; 240  : 	// read in the chunk id
; 241  : 	DWORD dwChunk, dwSubSize;
; 242  : 	long lSize;
; 243  : 	pIStream->Read( &dwChunk, sizeof(DWORD), NULL );

  000f2	6a 00		 push	 0
  000f4	6a 04		 push	 4
  000f6	8d 45 f8	 lea	 eax, DWORD PTR _dwChunk$[ebp]
  000f9	50		 push	 eax
  000fa	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  000fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ff	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00102	50		 push	 eax
  00103	ff 52 0c	 call	 DWORD PTR [edx+12]

; 244  : 	if( dwChunk != DMUS_FOURCC_TEMPO_TRACK )

  00106	81 7d f8 74 65
	74 72		 cmp	 DWORD PTR _dwChunk$[ebp], 1920230772 ; 72746574H
  0010d	74 26		 je	 SHORT $L69597

; 245  : 	{
; 246  :         Trace(1,"Error: Invalid data in tempo track.\n");

  0010f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@NFDMFMJO@Error?3?5Invalid?5data?5in?5tempo?5tra@
  00114	6a 01		 push	 1
  00116	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011b	83 c4 08	 add	 esp, 8

; 247  : 		LEAVE_CRITICAL_SECTION(&m_CrSec);

  0011e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	83 c1 14	 add	 ecx, 20			; 00000014H
  00124	51		 push	 ecx
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 248  : 	    return DMUS_E_CHUNKNOTFOUND;

  0012b	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00130	e9 a0 01 00 00	 jmp	 $L69564
$L69597:

; 249  : 	}
; 250  : 	// read in the overall size
; 251  : 	pIStream->Read( &lSize, sizeof(long), NULL );

  00135	6a 00		 push	 0
  00137	6a 04		 push	 4
  00139	8d 55 f4	 lea	 edx, DWORD PTR _lSize$[ebp]
  0013c	52		 push	 edx
  0013d	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00140	8b 08		 mov	 ecx, DWORD PTR [eax]
  00142	8b 55 0c	 mov	 edx, DWORD PTR _pIStream$[ebp]
  00145	52		 push	 edx
  00146	ff 51 0c	 call	 DWORD PTR [ecx+12]

; 252  : 	// read in the size of the data structures
; 253  : 	if( FAILED( pIStream->Read( &dwSubSize, sizeof(DWORD), NULL )))

  00149	6a 00		 push	 0
  0014b	6a 04		 push	 4
  0014d	8d 45 ec	 lea	 eax, DWORD PTR _dwSubSize$[ebp]
  00150	50		 push	 eax
  00151	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  00154	8b 11		 mov	 edx, DWORD PTR [ecx]
  00156	8b 45 0c	 mov	 eax, DWORD PTR _pIStream$[ebp]
  00159	50		 push	 eax
  0015a	ff 52 0c	 call	 DWORD PTR [edx+12]
  0015d	85 c0		 test	 eax, eax
  0015f	7d 26		 jge	 SHORT $L69603

; 254  : 	{
; 255  :         // Check to make sure our reads are succeeding (we can safely
; 256  :         // assume the previous reads worked if we got this far.)
; 257  :         Trace(1,"Error: Unable to read tempo track.\n");

  00161	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@LMABKFPK@Error?3?5Unable?5to?5read?5tempo?5trac@
  00166	6a 01		 push	 1
  00168	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0016d	83 c4 08	 add	 esp, 8

; 258  : 		LEAVE_CRITICAL_SECTION(&m_CrSec);

  00170	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00173	83 c1 14	 add	 ecx, 20			; 00000014H
  00176	51		 push	 ecx
  00177	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 259  : 	    return DMUS_E_CANNOTREAD;

  0017d	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00182	e9 4e 01 00 00	 jmp	 $L69564
$L69603:

; 260  : 	}
; 261  : 	lSize -= sizeof(DWORD);

  00187	8b 55 f4	 mov	 edx, DWORD PTR _lSize$[ebp]
  0018a	83 ea 04	 sub	 edx, 4
  0018d	89 55 f4	 mov	 DWORD PTR _lSize$[ebp], edx

; 262  : 
; 263  : 	DWORD dwRead, dwSeek;
; 264  : 	if( dwSubSize > sizeof(DMUS_IO_TEMPO_ITEM) )

  00190	83 7d ec 10	 cmp	 DWORD PTR _dwSubSize$[ebp], 16 ; 00000010H
  00194	76 1f		 jbe	 SHORT $L69610

; 265  : 	{
; 266  : 		dwRead = sizeof(DMUS_IO_TEMPO_ITEM);

  00196	c7 45 f0 10 00
	00 00		 mov	 DWORD PTR _dwRead$[ebp], 16 ; 00000010H

; 267  : 		dwSeek = dwSubSize - dwRead;

  0019d	8b 45 ec	 mov	 eax, DWORD PTR _dwSubSize$[ebp]
  001a0	2b 45 f0	 sub	 eax, DWORD PTR _dwRead$[ebp]
  001a3	89 45 fc	 mov	 DWORD PTR _dwSeek$[ebp], eax

; 268  : 		li.HighPart = 0;

  001a6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _li$[ebp+4], 0

; 269  : 		li.LowPart = dwSeek;

  001ad	8b 4d fc	 mov	 ecx, DWORD PTR _dwSeek$[ebp]
  001b0	89 4d e0	 mov	 DWORD PTR _li$[ebp], ecx

; 270  : 	}
; 271  : 	else

  001b3	eb 0d		 jmp	 SHORT $L69612
$L69610:

; 272  : 	{
; 273  : 		dwRead = dwSubSize;

  001b5	8b 55 ec	 mov	 edx, DWORD PTR _dwSubSize$[ebp]
  001b8	89 55 f0	 mov	 DWORD PTR _dwRead$[ebp], edx

; 274  : 		dwSeek = 0;

  001bb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwSeek$[ebp], 0
$L69612:

; 275  : 	}
; 276  : 	if( dwRead )

  001c2	83 7d f0 00	 cmp	 DWORD PTR _dwRead$[ebp], 0
  001c6	0f 84 e3 00 00
	00		 je	 $L69613
$L69615:

; 277  : 	{
; 278  : 	    while( lSize > 0 )

  001cc	83 7d f4 00	 cmp	 DWORD PTR _lSize$[ebp], 0
  001d0	0f 8e cc 00 00
	00		 jle	 $L69616

; 279  : 	    {
; 280  : 		    if( FAILED( pIStream->Read( &tempoEvent, dwRead, NULL )))

  001d6	6a 00		 push	 0
  001d8	8b 45 f0	 mov	 eax, DWORD PTR _dwRead$[ebp]
  001db	50		 push	 eax
  001dc	8d 4d c8	 lea	 ecx, DWORD PTR _tempoEvent$[ebp]
  001df	51		 push	 ecx
  001e0	8b 55 0c	 mov	 edx, DWORD PTR _pIStream$[ebp]
  001e3	8b 02		 mov	 eax, DWORD PTR [edx]
  001e5	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  001e8	51		 push	 ecx
  001e9	ff 50 0c	 call	 DWORD PTR [eax+12]
  001ec	85 c0		 test	 eax, eax
  001ee	7d 1b		 jge	 SHORT $L69618

; 281  : 		    {
; 282  :                 Trace(1,"Error: Failure reading tempo track.\n");

  001f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@IAIIAEEB@Error?3?5Failure?5reading?5tempo?5tra@
  001f5	6a 01		 push	 1
  001f7	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  001fc	83 c4 08	 add	 esp, 8

; 283  : 			    hr = DMUS_E_CANNOTREAD;

  001ff	c7 45 dc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 284  : 			    break;

  00206	e9 97 00 00 00	 jmp	 $L69616
$L69618:

; 285  : 		    }
; 286  : 		    lSize -= dwRead;

  0020b	8b 55 f4	 mov	 edx, DWORD PTR _lSize$[ebp]
  0020e	2b 55 f0	 sub	 edx, DWORD PTR _dwRead$[ebp]
  00211	89 55 f4	 mov	 DWORD PTR _lSize$[ebp], edx

; 287  : 		    if( dwSeek )

  00214	83 7d fc 00	 cmp	 DWORD PTR _dwSeek$[ebp], 0
  00218	74 3d		 je	 SHORT $L69621

; 288  : 		    {
; 289  : 			    if( FAILED( pIStream->Seek( li, STREAM_SEEK_CUR, NULL )))

  0021a	6a 00		 push	 0
  0021c	6a 01		 push	 1
  0021e	8b 45 e4	 mov	 eax, DWORD PTR _li$[ebp+4]
  00221	50		 push	 eax
  00222	8b 4d e0	 mov	 ecx, DWORD PTR _li$[ebp]
  00225	51		 push	 ecx
  00226	8b 55 0c	 mov	 edx, DWORD PTR _pIStream$[ebp]
  00229	8b 02		 mov	 eax, DWORD PTR [edx]
  0022b	8b 4d 0c	 mov	 ecx, DWORD PTR _pIStream$[ebp]
  0022e	51		 push	 ecx
  0022f	ff 50 14	 call	 DWORD PTR [eax+20]
  00232	85 c0		 test	 eax, eax
  00234	7d 18		 jge	 SHORT $L69623

; 290  : 			    {
; 291  :                     Trace(1,"Error: Failure reading tempo track.\n");

  00236	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@IAIIAEEB@Error?3?5Failure?5reading?5tempo?5tra@
  0023b	6a 01		 push	 1
  0023d	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00242	83 c4 08	 add	 esp, 8

; 292  : 				    hr = DMUS_E_CANNOTSEEK;

  00245	c7 45 dc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 293  : 				    break;

  0024c	eb 54		 jmp	 SHORT $L69616
$L69623:

; 294  : 			    }                                             
; 295  : 			    lSize -= dwSeek;

  0024e	8b 55 f4	 mov	 edx, DWORD PTR _lSize$[ebp]
  00251	2b 55 fc	 sub	 edx, DWORD PTR _dwSeek$[ebp]
  00254	89 55 f4	 mov	 DWORD PTR _lSize$[ebp], edx
$L69621:

; 296  : 		    }
; 297  : 		    TListItem<DMUS_IO_TEMPO_ITEM>* pNew = 
; 298  : 			    new TListItem<DMUS_IO_TEMPO_ITEM>(tempoEvent);

  00257	6a 18		 push	 24			; 00000018H
  00259	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0025e	83 c4 04	 add	 esp, 4
  00261	89 45 b4	 mov	 DWORD PTR $T70601[ebp], eax
  00264	83 7d b4 00	 cmp	 DWORD PTR $T70601[ebp], 0
  00268	74 11		 je	 SHORT $L70602
  0026a	8d 45 c8	 lea	 eax, DWORD PTR _tempoEvent$[ebp]
  0026d	50		 push	 eax
  0026e	8b 4d b4	 mov	 ecx, DWORD PTR $T70601[ebp]
  00271	e8 00 00 00 00	 call	 ??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@ABU_DMUS_IO_TEMPO_ITEM@@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::TListItem<_DMUS_IO_TEMPO_ITEM>
  00276	89 45 ac	 mov	 DWORD PTR tv199[ebp], eax
  00279	eb 07		 jmp	 SHORT $L70603
$L70602:
  0027b	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv199[ebp], 0
$L70603:
  00282	8b 4d ac	 mov	 ecx, DWORD PTR tv199[ebp]
  00285	89 4d c0	 mov	 DWORD PTR _pNew$69625[ebp], ecx

; 299  : 		    if (pNew)

  00288	83 7d c0 00	 cmp	 DWORD PTR _pNew$69625[ebp], 0
  0028c	74 0f		 je	 SHORT $L69628

; 300  : 		    {
; 301  : 			    m_TempoEventList.AddHead(pNew); // instead of AddTail, which is n^2. We reverse below.

  0028e	8b 55 c0	 mov	 edx, DWORD PTR _pNew$69625[ebp]
  00291	52		 push	 edx
  00292	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00295	83 c1 08	 add	 ecx, 8
  00298	e8 00 00 00 00	 call	 ?AddHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z ; TList<_DMUS_IO_TEMPO_ITEM>::AddHead
$L69628:

; 302  : 		    }
; 303  :         }

  0029d	e9 2a ff ff ff	 jmp	 $L69615
$L69616:

; 304  : 	    m_TempoEventList.Reverse();

  002a2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  002a5	83 c1 08	 add	 ecx, 8
  002a8	e8 00 00 00 00	 call	 ?Reverse@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXXZ ; TList<_DMUS_IO_TEMPO_ITEM>::Reverse

; 305  :     }
; 306  :     else

  002ad	eb 16		 jmp	 SHORT $L69629
$L69613:

; 307  :     {
; 308  :         Trace(1,"Error: Failure reading tempo track.\n");

  002af	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@IAIIAEEB@Error?3?5Failure?5reading?5tempo?5tra@
  002b4	6a 01		 push	 1
  002b6	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  002bb	83 c4 08	 add	 esp, 8

; 309  :         hr = DMUS_E_CANNOTREAD;

  002be	c7 45 dc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L69629:

; 310  :     }
; 311  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  002c5	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  002c8	83 c0 14	 add	 eax, 20			; 00000014H
  002cb	50		 push	 eax
  002cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 312  : 	return hr;

  002d2	8b 45 dc	 mov	 eax, DWORD PTR _hr$[ebp]
$L69564:

; 313  : }

  002d5	8b e5		 mov	 esp, ebp
  002d7	5d		 pop	 ebp
  002d8	c2 08 00	 ret	 8
?Load@CTempoTrack@@UAGJPAUIStream@@@Z ENDP		; CTempoTrack::Load
_TEXT	ENDS
PUBLIC	??1?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ	; TListItem<_DMUS_IO_TEMPO_ITEM>::~TListItem<_DMUS_IO_TEMPO_ITEM>
; Function compile flags: /Odt
;	COMDAT ??_G?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_G?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAXI@Z PROC NEAR ; TListItem<_DMUS_IO_TEMPO_ITEM>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::~TListItem<_DMUS_IO_TEMPO_ITEM>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L69634
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L69634:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAXI@Z ENDP	; TListItem<_DMUS_IO_TEMPO_ITEM>::`scalar deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Save@CTempoTrack@@UAGJPAUIStream@@H@Z
_TEXT	SEGMENT
_this$ = 8
_pIStream$ = 12
_fClearDirty$ = 16
?Save@CTempoTrack@@UAGJPAUIStream@@H@Z PROC NEAR	; CTempoTrack::Save, COMDAT

; 316  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 318  : }

  00008	5d		 pop	 ebp
  00009	c2 0c 00	 ret	 12			; 0000000cH
?Save@CTempoTrack@@UAGJPAUIStream@@H@Z ENDP		; CTempoTrack::Save
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSizeMax@CTempoTrack@@UAGJPAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT
_this$ = 8
_pcbSize$ = 12
?GetSizeMax@CTempoTrack@@UAGJPAT_ULARGE_INTEGER@@@Z PROC NEAR ; CTempoTrack::GetSizeMax, COMDAT

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 322  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 323  : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?GetSizeMax@CTempoTrack@@UAGJPAT_ULARGE_INTEGER@@@Z ENDP ; CTempoTrack::GetSizeMax
_TEXT	ENDS
PUBLIC	??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@ ; `string'
EXTRN	_GUID_PrivateTempoParam:BYTE
EXTRN	_GUID_TempoParam:BYTE
;	COMDAT ?__szValidateInterfaceName@?1??IsParamSupported@CTempoTrack@@UAGJABU_GUID@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??IsParamSupported@CTempoTrack@@UAGJABU_GUID@@@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::IsParamSupported', 00H	; `CTempoTrack::IsParamSupported'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
CONST	SEGMENT
??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@ DB '%'
	DB	's: Invalid pointer (void*)&rguid', 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?IsParamSupported@CTempoTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguid$ = 12
?IsParamSupported@CTempoTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CTempoTrack::IsParamSupported, COMDAT

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 329  : 	V_INAME(IDirectMusicTrack::IsParamSupported);
; 330  : 	V_REFGUID(rguid);

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0000e	85 c0		 test	 eax, eax
  00010	74 19		 je	 SHORT $L69654
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??IsParamSupported@CTempoTrack@@UAGJABU_GUID@@@Z@4QBDB
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
  0001c	6a ff		 push	 -1
  0001e	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 _DebugBreak@0
$L69654:

; 331  : 
; 332  :     if (m_fStateSetBySetParam)

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0
  00032	74 6b		 je	 SHORT $L69656

; 333  :     {
; 334  : 	    if( m_fActive )

  00034	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00037	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  0003b	74 2e		 je	 SHORT $L69657

; 335  : 	    {
; 336  : 		    if( rguid == GUID_TempoParam ) return S_OK;

  0003d	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_TempoParam
  00042	8b 45 0c	 mov	 eax, DWORD PTR _rguid$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _==@8
  0004b	85 c0		 test	 eax, eax
  0004d	74 04		 je	 SHORT $L69658
  0004f	33 c0		 xor	 eax, eax
  00051	eb 7d		 jmp	 SHORT $L69649
$L69658:

; 337  :             if( rguid == GUID_PrivateTempoParam ) return S_OK;

  00053	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_PrivateTempoParam
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _rguid$[ebp]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 _==@8
  00061	85 c0		 test	 eax, eax
  00063	74 04		 je	 SHORT $L69660
  00065	33 c0		 xor	 eax, eax
  00067	eb 67		 jmp	 SHORT $L69649
$L69660:

; 338  : #ifdef DXAPI
; 339  : 		    if( rguid == GUID_DisableTempo ) return S_OK;
; 340  : 		    if( rguid == GUID_EnableTempo ) return DMUS_E_TYPE_DISABLED;
; 341  : #endif
; 342  : 	    }
; 343  : 	    else

  00069	eb 32		 jmp	 SHORT $L69662
$L69657:

; 344  : 	    {
; 345  : 		    if( rguid == GUID_TempoParam ) return DMUS_E_TYPE_DISABLED;

  0006b	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_TempoParam
  00070	8b 55 0c	 mov	 edx, DWORD PTR _rguid$[ebp]
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 _==@8
  00079	85 c0		 test	 eax, eax
  0007b	74 07		 je	 SHORT $L69663
  0007d	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00082	eb 4c		 jmp	 SHORT $L69649
$L69663:

; 346  :             if( rguid == GUID_PrivateTempoParam ) return DMUS_E_TYPE_DISABLED;

  00084	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_PrivateTempoParam
  00089	8b 45 0c	 mov	 eax, DWORD PTR _rguid$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _==@8
  00092	85 c0		 test	 eax, eax
  00094	74 07		 je	 SHORT $L69662
  00096	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  0009b	eb 33		 jmp	 SHORT $L69649
$L69662:

; 347  : #ifdef DXAPI
; 348  : 		    if( rguid == GUID_EnableTempo ) return S_OK;
; 349  : 		    if( rguid == GUID_DisableTempo ) return DMUS_E_TYPE_DISABLED;
; 350  : #endif
; 351  : 	    }
; 352  :     }
; 353  :     else

  0009d	eb 2c		 jmp	 SHORT $L69667
$L69656:

; 354  :     {
; 355  : 		if ( rguid == GUID_TempoParam ) return S_OK;

  0009f	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_TempoParam
  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _rguid$[ebp]
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 _==@8
  000ad	85 c0		 test	 eax, eax
  000af	74 04		 je	 SHORT $L69668
  000b1	33 c0		 xor	 eax, eax
  000b3	eb 1b		 jmp	 SHORT $L69649
$L69668:

; 356  :         if ( rguid == GUID_PrivateTempoParam ) return S_OK;

  000b5	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_PrivateTempoParam
  000ba	8b 55 0c	 mov	 edx, DWORD PTR _rguid$[ebp]
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 _==@8
  000c3	85 c0		 test	 eax, eax
  000c5	74 04		 je	 SHORT $L69667
  000c7	33 c0		 xor	 eax, eax
  000c9	eb 05		 jmp	 SHORT $L69649
$L69667:

; 357  : #ifdef DXAPI
; 358  :         if ( rguid == GUID_DisableTempo ) return S_OK;
; 359  :         if ( rguid == GUID_EnableTempo ) return S_OK;
; 360  : #endif
; 361  :     }
; 362  : 
; 363  : 	return DMUS_E_TYPE_UNSUPPORTED;

  000cb	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
$L69649:

; 364  : }

  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
?IsParamSupported@CTempoTrack@@UAGJABU_GUID@@@Z ENDP	; CTempoTrack::IsParamSupported
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Init@CTempoTrack@@UAGJPAUIDirectMusicSegment@@@Z
_TEXT	SEGMENT
_this$ = 8
_pSegment$ = 12
?Init@CTempoTrack@@UAGJPAUIDirectMusicSegment@@@Z PROC NEAR ; CTempoTrack::Init, COMDAT

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 371  : 	return S_OK;

  00003	33 c0		 xor	 eax, eax

; 372  : }

  00005	5d		 pop	 ebp
  00006	c2 08 00	 ret	 8
?Init@CTempoTrack@@UAGJPAUIDirectMusicSegment@@@Z ENDP	; CTempoTrack::Init
_TEXT	ENDS
PUBLIC	??0TempoStateData@@QAE@XZ			; TempoStateData::TempoStateData
PUBLIC	??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@ ; `string'
PUBLIC	??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@ ; `string'
PUBLIC	??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::InitPlay', 00H		; `CTempoTrack::InitPlay'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
CONST	SEGMENT
??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@ DB '%s: Inva'
	DB	'lid pointer ppStateData', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
CONST	SEGMENT
??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@ DB '%s: Inval'
	DB	'id pointer pSegmentState', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
CONST	SEGMENT
??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@ DB '%s: Inval'
	DB	'id pointer pPerformance', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z
_TEXT	SEGMENT
tv163 = -16
tv150 = -12
$T70622 = -8
_pStateData$ = -4
_this$ = 8
_pSegmentState$ = 12
_pPerformance$ = 16
_ppStateData$ = 20
_dwTrackID$ = 24
_dwFlags$ = 28
?InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z PROC NEAR ; CTempoTrack::InitPlay, COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 381  : 	V_INAME(IDirectMusicTrack::InitPlay);
; 382  : 	V_PTRPTR_WRITE(ppStateData);

  00006	6a 04		 push	 4
  00008	8b 45 14	 mov	 eax, DWORD PTR _ppStateData$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69689
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@MDDFKLEP@?$CFs?3?5Invalid?5pointer?5ppStateData?6@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69689:

; 383  : 	V_INTERFACE(pSegmentState);

  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegmentState$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00039	85 c0		 test	 eax, eax
  0003b	74 19		 je	 SHORT $L69691
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  00047	6a ff		 push	 -1
  00049	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	e8 00 00 00 00	 call	 _DebugBreak@0
$L69691:
  00056	6a 04		 push	 4
  00058	8b 55 0c	 mov	 edx, DWORD PTR _pSegmentState$[ebp]
  0005b	8b 02		 mov	 eax, DWORD PTR [edx]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00063	85 c0		 test	 eax, eax
  00065	74 19		 je	 SHORT $L69694
  00067	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  00071	6a ff		 push	 -1
  00073	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	e8 00 00 00 00	 call	 _DebugBreak@0
$L69694:
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _pSegmentState$[ebp]
  00083	8b 11		 mov	 edx, DWORD PTR [ecx]
  00085	8b 02		 mov	 eax, DWORD PTR [edx]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0008d	85 c0		 test	 eax, eax
  0008f	74 19		 je	 SHORT $L69696
  00091	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOPLINEG@?$CFs?3?5Invalid?5pointer?5pSegmentStat@
  0009b	6a ff		 push	 -1
  0009d	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a5	e8 00 00 00 00	 call	 _DebugBreak@0
$L69696:

; 384  : 	V_INTERFACE(pPerformance);

  000aa	6a 04		 push	 4
  000ac	8b 4d 10	 mov	 ecx, DWORD PTR _pPerformance$[ebp]
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b5	85 c0		 test	 eax, eax
  000b7	74 19		 je	 SHORT $L69698
  000b9	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  000be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
  000c3	6a ff		 push	 -1
  000c5	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cd	e8 00 00 00 00	 call	 _DebugBreak@0
$L69698:
  000d2	6a 04		 push	 4
  000d4	8b 55 10	 mov	 edx, DWORD PTR _pPerformance$[ebp]
  000d7	8b 02		 mov	 eax, DWORD PTR [edx]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000df	85 c0		 test	 eax, eax
  000e1	74 19		 je	 SHORT $L69701
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  000e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
  000ed	6a ff		 push	 -1
  000ef	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f7	e8 00 00 00 00	 call	 _DebugBreak@0
$L69701:
  000fc	8b 4d 10	 mov	 ecx, DWORD PTR _pPerformance$[ebp]
  000ff	8b 11		 mov	 edx, DWORD PTR [ecx]
  00101	8b 02		 mov	 eax, DWORD PTR [edx]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00109	85 c0		 test	 eax, eax
  0010b	74 19		 je	 SHORT $L69703
  0010d	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z@4QBDB
  00112	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JPFANLGP@?$CFs?3?5Invalid?5pointer?5pPerformance@
  00117	6a ff		 push	 -1
  00119	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00121	e8 00 00 00 00	 call	 _DebugBreak@0
$L69703:

; 385  : 
; 386  : 	TempoStateData* pStateData;
; 387  : 	pStateData = new TempoStateData;

  00126	6a 1c		 push	 28			; 0000001cH
  00128	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0012d	83 c4 04	 add	 esp, 4
  00130	89 45 f8	 mov	 DWORD PTR $T70622[ebp], eax
  00133	83 7d f8 00	 cmp	 DWORD PTR $T70622[ebp], 0
  00137	74 0d		 je	 SHORT $L70623
  00139	8b 4d f8	 mov	 ecx, DWORD PTR $T70622[ebp]
  0013c	e8 00 00 00 00	 call	 ??0TempoStateData@@QAE@XZ ; TempoStateData::TempoStateData
  00141	89 45 f4	 mov	 DWORD PTR tv150[ebp], eax
  00144	eb 07		 jmp	 SHORT $L70624
$L70623:
  00146	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv150[ebp], 0
$L70624:
  0014d	8b 4d f4	 mov	 ecx, DWORD PTR tv150[ebp]
  00150	89 4d fc	 mov	 DWORD PTR _pStateData$[ebp], ecx

; 388  : 	if( NULL == pStateData )

  00153	83 7d fc 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  00157	75 0a		 jne	 SHORT $L69707

; 389  : 		return E_OUTOFMEMORY;

  00159	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  0015e	e9 8a 00 00 00	 jmp	 $L69685
$L69707:

; 390  : 	*ppStateData = pStateData;

  00163	8b 55 14	 mov	 edx, DWORD PTR _ppStateData$[ebp]
  00166	8b 45 fc	 mov	 eax, DWORD PTR _pStateData$[ebp]
  00169	89 02		 mov	 DWORD PTR [edx], eax

; 391  :     if (m_fStateSetBySetParam)

  0016b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0016e	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0
  00172	74 0e		 je	 SHORT $L69709

; 392  :     {
; 393  :         pStateData->fActive = m_fActive;

  00174	8b 55 fc	 mov	 edx, DWORD PTR _pStateData$[ebp]
  00177	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0017a	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0017d	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 394  :     }
; 395  :     else

  00180	eb 32		 jmp	 SHORT $L69710
$L69709:

; 396  :     {
; 397  :         pStateData->fActive = ((dwFlags & DMUS_SEGF_CONTROL) ||
; 398  :             !(dwFlags & DMUS_SEGF_SECONDARY));

  00182	8b 55 1c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00185	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  0018b	85 d2		 test	 edx, edx
  0018d	75 15		 jne	 SHORT $L70625
  0018f	8b 45 1c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00192	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00197	85 c0		 test	 eax, eax
  00199	74 09		 je	 SHORT $L70625
  0019b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv163[ebp], 0
  001a2	eb 07		 jmp	 SHORT $L70626
$L70625:
  001a4	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv163[ebp], 1
$L70626:
  001ab	8b 4d fc	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  001ae	8b 55 f0	 mov	 edx, DWORD PTR tv163[ebp]
  001b1	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$L69710:

; 399  :     }
; 400  : 	pStateData->dwVirtualTrackID = dwTrackID;

  001b4	8b 45 fc	 mov	 eax, DWORD PTR _pStateData$[ebp]
  001b7	8b 4d 18	 mov	 ecx, DWORD PTR _dwTrackID$[ebp]
  001ba	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 401  : 	pStateData->pPerformance = pPerformance; // weak reference, no addref.

  001bd	8b 55 fc	 mov	 edx, DWORD PTR _pStateData$[ebp]
  001c0	8b 45 10	 mov	 eax, DWORD PTR _pPerformance$[ebp]
  001c3	89 02		 mov	 DWORD PTR [edx], eax

; 402  : 	pStateData->pSegState = pSegmentState; // weak reference, no addref.

  001c5	8b 4d fc	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  001c8	8b 55 0c	 mov	 edx, DWORD PTR _pSegmentState$[ebp]
  001cb	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 403  : 	pStateData->pCurrentTempo = m_TempoEventList.GetHead();

  001ce	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001d1	83 c1 04	 add	 ecx, 4
  001d4	e8 00 00 00 00	 call	 ?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::GetHead
  001d9	8b 4d fc	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  001dc	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 404  : 	pStateData->dwValidate = m_dwValidate;

  001df	8b 55 fc	 mov	 edx, DWORD PTR _pStateData$[ebp]
  001e2	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001e5	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001e8	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 405  : 	return S_OK;

  001eb	33 c0		 xor	 eax, eax
$L69685:

; 406  : }

  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	c2 18 00	 ret	 24			; 00000018H
?InitPlay@CTempoTrack@@UAGJPAUIDirectMusicSegmentState@@PAUIDirectMusicPerformance@@PAPAXKK@Z ENDP ; CTempoTrack::InitPlay
_TEXT	ENDS
PUBLIC	??_C@_0DK@NHFNKPKK@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0L@MIJOINAD@pStateData?$AA@		; `string'
PUBLIC	??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@ ; `string'
EXTRN	__imp__RtlAssert@16:NEAR
;	COMDAT ??_C@_0DK@NHFNKPKK@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DK@NHFNKPKK@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dmusic\dmime\tempotrk.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIJOINAD@pStateData?$AA@
CONST	SEGMENT
??_C@_0L@MIJOINAD@pStateData?$AA@ DB 'pStateData', 00H	; `string'
CONST	ENDS
;	COMDAT ?__szValidateInterfaceName@?6??EndPlay@CTempoTrack@@UAGJPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?6??EndPlay@CTempoTrack@@UAGJPAX@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::EndPlay', 00H		; `CTempoTrack::EndPlay'::`7'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
CONST	SEGMENT
??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@ DB '%s: I'
	DB	'nvalid pointer pStateData', 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?EndPlay@CTempoTrack@@UAGJPAX@Z
_TEXT	SEGMENT
$T70630 = -8
_pSD$69724 = -4
_this$ = 8
_pStateData$ = 12
?EndPlay@CTempoTrack@@UAGJPAX@Z PROC NEAR		; CTempoTrack::EndPlay, COMDAT

; 410  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 411  : 	ASSERT( pStateData );

  00006	83 7d 0c 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  0000a	75 17		 jne	 SHORT $L69716
  0000c	6a 00		 push	 0
  0000e	68 9b 01 00 00	 push	 411			; 0000019bH
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@NHFNKPKK@c?3?2xbox?2private?2windows?2directx?2@
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@MIJOINAD@pStateData?$AA@
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L69716:

; 412  : 	if( pStateData )

  00023	83 7d 0c 00	 cmp	 DWORD PTR _pStateData$[ebp], 0
  00027	74 40		 je	 SHORT $L69719

; 413  : 	{
; 414  : 		V_INAME(IDirectMusicTrack::EndPlay);
; 415  : 		V_BUFPTR_WRITE(pStateData, sizeof(TempoStateData));

  00029	6a 1c		 push	 28			; 0000001cH
  0002b	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00034	85 c0		 test	 eax, eax
  00036	74 19		 je	 SHORT $L69723
  00038	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?6??EndPlay@CTempoTrack@@UAGJPAX@Z@4QBDB
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
  00042	6a ff		 push	 -1
  00044	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004c	e8 00 00 00 00	 call	 _DebugBreak@0
$L69723:

; 416  : 		TempoStateData* pSD = (TempoStateData*)pStateData;

  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  00054	89 4d fc	 mov	 DWORD PTR _pSD$69724[ebp], ecx

; 417  : 		delete pSD;

  00057	8b 55 fc	 mov	 edx, DWORD PTR _pSD$69724[ebp]
  0005a	89 55 f8	 mov	 DWORD PTR $T70630[ebp], edx
  0005d	8b 45 f8	 mov	 eax, DWORD PTR $T70630[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00066	83 c4 04	 add	 esp, 4
$L69719:

; 418  : 	}
; 419  : 	return S_OK;

  00069	33 c0		 xor	 eax, eax

; 420  : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
?EndPlay@CTempoTrack@@UAGJPAX@Z ENDP			; CTempoTrack::EndPlay
_TEXT	ENDS
PUBLIC	?Play@CTempoTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ; CTempoTrack::Play
PUBLIC	??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@ ; `string'
EXTRN	__alldiv:NEAR
;	COMDAT ?__szValidateInterfaceName@?1??PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::PlayEx', 00H		; `CTempoTrack::PlayEx'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
CONST	SEGMENT
??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@ DB '%s: Invali'
	DB	'd pointer pPerf', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
CONST	SEGMENT
??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@ DB '%s: Inval'
	DB	'id pointer pSegSt', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT
_hr$ = -4
_this$ = 8
_pStateData$ = 12
_rtStart$ = 16
_rtEnd$ = 24
_rtOffset$ = 32
_dwFlags$ = 40
_pPerf$ = 44
_pSegSt$ = 48
_dwVirtualID$ = 52
?PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z PROC NEAR ; CTempoTrack::PlayEx, COMDAT

; 426  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 427  : 	V_INAME(IDirectMusicTrack::PlayEx);
; 428  : 	V_BUFPTR_WRITE( pStateData, sizeof(TempoStateData));

  00004	6a 1c		 push	 28			; 0000001cH
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $L69742
  00013	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L69742:

; 429  : 	V_INTERFACE(pPerf);

  0002c	6a 04		 push	 4
  0002e	8b 4d 2c	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $L69744
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00045	6a ff		 push	 -1
  00047	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69744:
  00054	6a 04		 push	 4
  00056	8b 55 2c	 mov	 edx, DWORD PTR _pPerf$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00061	85 c0		 test	 eax, eax
  00063	74 19		 je	 SHORT $L69747
  00065	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  0006f	6a ff		 push	 -1
  00071	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	e8 00 00 00 00	 call	 _DebugBreak@0
$L69747:
  0007e	8b 4d 2c	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00081	8b 11		 mov	 edx, DWORD PTR [ecx]
  00083	8b 02		 mov	 eax, DWORD PTR [edx]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0008b	85 c0		 test	 eax, eax
  0008d	74 19		 je	 SHORT $L69749
  0008f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00099	6a ff		 push	 -1
  0009b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a3	e8 00 00 00 00	 call	 _DebugBreak@0
$L69749:

; 430  : 	V_INTERFACE(pSegSt);

  000a8	6a 04		 push	 4
  000aa	8b 4d 30	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b3	85 c0		 test	 eax, eax
  000b5	74 19		 je	 SHORT $L69751
  000b7	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000c1	6a ff		 push	 -1
  000c3	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cb	e8 00 00 00 00	 call	 _DebugBreak@0
$L69751:
  000d0	6a 04		 push	 4
  000d2	8b 55 30	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  000d5	8b 02		 mov	 eax, DWORD PTR [edx]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000dd	85 c0		 test	 eax, eax
  000df	74 19		 je	 SHORT $L69754
  000e1	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000eb	6a ff		 push	 -1
  000ed	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	e8 00 00 00 00	 call	 _DebugBreak@0
$L69754:
  000fa	8b 4d 30	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  000fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ff	8b 02		 mov	 eax, DWORD PTR [edx]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00107	85 c0		 test	 eax, eax
  00109	74 19		 je	 SHORT $L69756
  0010b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00110	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  00115	6a ff		 push	 -1
  00117	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69756:

; 431  : 
; 432  :     HRESULT hr;
; 433  :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00124	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	83 c1 10	 add	 ecx, 16			; 00000010H
  0012a	51		 push	 ecx
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 434  :     if (dwFlags & DMUS_TRACKF_CLOCK)

  00131	8b 55 28	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00134	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  0013a	85 d2		 test	 edx, edx
  0013c	74 6d		 je	 SHORT $L69758

; 435  :     {
; 436  :         // Convert all reference times to millisecond times. Then, just use same MUSIC_TIME
; 437  :         // variables.
; 438  : 	    hr = Play(pStateData,(MUSIC_TIME)(rtStart / REF_PER_MIL),(MUSIC_TIME)(rtEnd / REF_PER_MIL),
; 439  :             (MUSIC_TIME)(rtOffset / REF_PER_MIL),rtOffset,dwFlags,pPerf,pSegSt,dwVirtualID,TRUE);

  0013e	6a 01		 push	 1
  00140	8b 45 34	 mov	 eax, DWORD PTR _dwVirtualID$[ebp]
  00143	50		 push	 eax
  00144	8b 4d 30	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  00147	51		 push	 ecx
  00148	8b 55 2c	 mov	 edx, DWORD PTR _pPerf$[ebp]
  0014b	52		 push	 edx
  0014c	8b 45 28	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0014f	50		 push	 eax
  00150	8b 4d 24	 mov	 ecx, DWORD PTR _rtOffset$[ebp+4]
  00153	51		 push	 ecx
  00154	8b 55 20	 mov	 edx, DWORD PTR _rtOffset$[ebp]
  00157	52		 push	 edx
  00158	6a 00		 push	 0
  0015a	68 10 27 00 00	 push	 10000			; 00002710H
  0015f	8b 45 24	 mov	 eax, DWORD PTR _rtOffset$[ebp+4]
  00162	50		 push	 eax
  00163	8b 4d 20	 mov	 ecx, DWORD PTR _rtOffset$[ebp]
  00166	51		 push	 ecx
  00167	e8 00 00 00 00	 call	 __alldiv
  0016c	50		 push	 eax
  0016d	6a 00		 push	 0
  0016f	68 10 27 00 00	 push	 10000			; 00002710H
  00174	8b 55 1c	 mov	 edx, DWORD PTR _rtEnd$[ebp+4]
  00177	52		 push	 edx
  00178	8b 45 18	 mov	 eax, DWORD PTR _rtEnd$[ebp]
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 __alldiv
  00181	50		 push	 eax
  00182	6a 00		 push	 0
  00184	68 10 27 00 00	 push	 10000			; 00002710H
  00189	8b 4d 14	 mov	 ecx, DWORD PTR _rtStart$[ebp+4]
  0018c	51		 push	 ecx
  0018d	8b 55 10	 mov	 edx, DWORD PTR _rtStart$[ebp]
  00190	52		 push	 edx
  00191	e8 00 00 00 00	 call	 __alldiv
  00196	50		 push	 eax
  00197	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  0019a	50		 push	 eax
  0019b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0019e	83 e9 04	 sub	 ecx, 4
  001a1	e8 00 00 00 00	 call	 ?Play@CTempoTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ; CTempoTrack::Play
  001a6	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 440  :     }
; 441  :     else

  001a9	eb 34		 jmp	 SHORT $L69762
$L69758:

; 442  :     {
; 443  : 	    hr = Play(pStateData,(MUSIC_TIME)rtStart,(MUSIC_TIME)rtEnd,
; 444  :             (MUSIC_TIME)rtOffset,0,dwFlags,pPerf,pSegSt,dwVirtualID,FALSE);

  001ab	6a 00		 push	 0
  001ad	8b 4d 34	 mov	 ecx, DWORD PTR _dwVirtualID$[ebp]
  001b0	51		 push	 ecx
  001b1	8b 55 30	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  001b4	52		 push	 edx
  001b5	8b 45 2c	 mov	 eax, DWORD PTR _pPerf$[ebp]
  001b8	50		 push	 eax
  001b9	8b 4d 28	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  001bc	51		 push	 ecx
  001bd	6a 00		 push	 0
  001bf	6a 00		 push	 0
  001c1	8b 55 20	 mov	 edx, DWORD PTR _rtOffset$[ebp]
  001c4	52		 push	 edx
  001c5	8b 45 18	 mov	 eax, DWORD PTR _rtEnd$[ebp]
  001c8	50		 push	 eax
  001c9	8b 4d 10	 mov	 ecx, DWORD PTR _rtStart$[ebp]
  001cc	51		 push	 ecx
  001cd	8b 55 0c	 mov	 edx, DWORD PTR _pStateData$[ebp]
  001d0	52		 push	 edx
  001d1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001d4	83 e9 04	 sub	 ecx, 4
  001d7	e8 00 00 00 00	 call	 ?Play@CTempoTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ; CTempoTrack::Play
  001dc	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L69762:

; 445  :     }
; 446  :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  001df	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001e2	83 c0 10	 add	 eax, 16			; 00000010H
  001e5	50		 push	 eax
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 447  :     return hr;

  001ec	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 448  : }

  001ef	8b e5		 mov	 esp, ebp
  001f1	5d		 pop	 ebp
  001f2	c2 30 00	 ret	 48			; 00000030H
?PlayEx@CTempoTrack@@UAGJPAX_J11KPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ENDP ; CTempoTrack::PlayEx
_TEXT	ENDS
;	COMDAT ?__szValidateInterfaceName@?1??Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::Play', 00H		; `CTempoTrack::Play'::`2'::__szValidateInterfaceName
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z
_TEXT	SEGMENT
_hr$ = -4
_this$ = 8
_pStateData$ = 12
_mtStart$ = 16
_mtEnd$ = 20
_mtOffset$ = 24
_dwFlags$ = 28
_pPerf$ = 32
_pSegSt$ = 36
_dwVirtualID$ = 40
?Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z PROC NEAR ; CTempoTrack::Play, COMDAT

; 459  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 460  : 	V_INAME(IDirectMusicTrack::Play);
; 461  : 	V_BUFPTR_WRITE( pStateData, sizeof(TempoStateData));

  00004	6a 1c		 push	 28			; 0000001cH
  00006	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  0000f	85 c0		 test	 eax, eax
  00011	74 19		 je	 SHORT $L69780
  00013	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EGFIFLCK@?$CFs?3?5Invalid?5pointer?5pStateData?6?$AA@
  0001d	6a ff		 push	 -1
  0001f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	e8 00 00 00 00	 call	 _DebugBreak@0
$L69780:

; 462  : 	V_INTERFACE(pPerf);

  0002c	6a 04		 push	 4
  0002e	8b 4d 20	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00037	85 c0		 test	 eax, eax
  00039	74 19		 je	 SHORT $L69782
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00045	6a ff		 push	 -1
  00047	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69782:
  00054	6a 04		 push	 4
  00056	8b 55 20	 mov	 edx, DWORD PTR _pPerf$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00061	85 c0		 test	 eax, eax
  00063	74 19		 je	 SHORT $L69785
  00065	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  0006f	6a ff		 push	 -1
  00071	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	e8 00 00 00 00	 call	 _DebugBreak@0
$L69785:
  0007e	8b 4d 20	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  00081	8b 11		 mov	 edx, DWORD PTR [ecx]
  00083	8b 02		 mov	 eax, DWORD PTR [edx]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  0008b	85 c0		 test	 eax, eax
  0008d	74 19		 je	 SHORT $L69787
  0008f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODDHKOOL@?$CFs?3?5Invalid?5pointer?5pPerf?6?$AA@
  00099	6a ff		 push	 -1
  0009b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a3	e8 00 00 00 00	 call	 _DebugBreak@0
$L69787:

; 463  : 	V_INTERFACE(pSegSt);

  000a8	6a 04		 push	 4
  000aa	8b 4d 24	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000b3	85 c0		 test	 eax, eax
  000b5	74 19		 je	 SHORT $L69789
  000b7	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000c1	6a ff		 push	 -1
  000c3	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cb	e8 00 00 00 00	 call	 _DebugBreak@0
$L69789:
  000d0	6a 04		 push	 4
  000d2	8b 55 24	 mov	 edx, DWORD PTR _pSegSt$[ebp]
  000d5	8b 02		 mov	 eax, DWORD PTR [edx]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000dd	85 c0		 test	 eax, eax
  000df	74 19		 je	 SHORT $L69792
  000e1	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  000e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  000eb	6a ff		 push	 -1
  000ed	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	e8 00 00 00 00	 call	 _DebugBreak@0
$L69792:
  000fa	8b 4d 24	 mov	 ecx, DWORD PTR _pSegSt$[ebp]
  000fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ff	8b 02		 mov	 eax, DWORD PTR [edx]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00107	85 c0		 test	 eax, eax
  00109	74 19		 je	 SHORT $L69794
  0010b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z@4QBDB
  00110	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKGKLHC@?$CFs?3?5Invalid?5pointer?5pSegSt?6?$AA@
  00115	6a ff		 push	 -1
  00117	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69794:

; 464  : 
; 465  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  00124	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	83 c1 10	 add	 ecx, 16			; 00000010H
  0012a	51		 push	 ecx
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 466  :     HRESULT	hr = Play(pStateData,mtStart,mtEnd,mtOffset,0,dwFlags,pPerf,pSegSt,dwVirtualID,FALSE);

  00131	6a 00		 push	 0
  00133	8b 55 28	 mov	 edx, DWORD PTR _dwVirtualID$[ebp]
  00136	52		 push	 edx
  00137	8b 45 24	 mov	 eax, DWORD PTR _pSegSt$[ebp]
  0013a	50		 push	 eax
  0013b	8b 4d 20	 mov	 ecx, DWORD PTR _pPerf$[ebp]
  0013e	51		 push	 ecx
  0013f	8b 55 1c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00142	52		 push	 edx
  00143	6a 00		 push	 0
  00145	6a 00		 push	 0
  00147	8b 45 18	 mov	 eax, DWORD PTR _mtOffset$[ebp]
  0014a	50		 push	 eax
  0014b	8b 4d 14	 mov	 ecx, DWORD PTR _mtEnd$[ebp]
  0014e	51		 push	 ecx
  0014f	8b 55 10	 mov	 edx, DWORD PTR _mtStart$[ebp]
  00152	52		 push	 edx
  00153	8b 45 0c	 mov	 eax, DWORD PTR _pStateData$[ebp]
  00156	50		 push	 eax
  00157	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0015a	83 e9 04	 sub	 ecx, 4
  0015d	e8 00 00 00 00	 call	 ?Play@CTempoTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ; CTempoTrack::Play
  00162	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 467  :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  00165	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00168	83 c1 10	 add	 ecx, 16			; 00000010H
  0016b	51		 push	 ecx
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 468  : 	return hr;

  00172	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 469  : }

  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 24 00	 ret	 36			; 00000024H
?Play@CTempoTrack@@UAGJPAXJJJKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@K@Z ENDP ; CTempoTrack::Play
_TEXT	ENDS
PUBLIC	?Seek@CTempoTrack@@IAEJPAUTempoStateData@@JH@Z	; CTempoTrack::Seek
EXTRN	_IID_IDirectMusicGraph:BYTE
EXTRN	__fltused:NEAR
; Function compile flags: /Odt
;	COMDAT ?Play@CTempoTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z
_TEXT	SEGMENT
_this$ = -60
_pTempo$69849 = -56
_rTempoEvent$69841 = -52
_fFlag$69833 = -48
_tempData$69832 = -44
_pSD$ = -16
_pGraph$ = -12
_hr$ = -8
_fSeek$ = -4
_pStateData$ = 8
_mtStart$ = 12
_mtEnd$ = 16
_mtOffset$ = 20
_rtOffset$ = 24
_dwFlags$ = 32
_pPerf$ = 36
_pSegSt$ = 40
_dwVirtualID$ = 44
_fClockTime$ = 48
?Play@CTempoTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z PROC NEAR ; CTempoTrack::Play, COMDAT
; _this$ = ecx

; 482  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx

; 483  :     if (dwFlags & DMUS_TRACKF_PLAY_OFF)

  0000b	8b 45 20	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0000e	83 e0 40	 and	 eax, 64			; 00000040H
  00011	85 c0		 test	 eax, eax
  00013	74 07		 je	 SHORT $L69809

; 484  :     {
; 485  : 	    return S_OK;

  00015	33 c0		 xor	 eax, eax
  00017	e9 f2 02 00 00	 jmp	 $L69808
$L69809:

; 486  :     }
; 487  : 	HRESULT	hr = DMUS_S_END;

  0001c	c7 45 f8 02 12
	78 08		 mov	 DWORD PTR _hr$[ebp], 142086658 ; 08781202H

; 488  : 	IDirectMusicGraph* pGraph = NULL;

  00023	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pGraph$[ebp], 0

; 489  : 	TempoStateData* pSD = (TempoStateData*)pStateData;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pStateData$[ebp]
  0002d	89 4d f0	 mov	 DWORD PTR _pSD$[ebp], ecx

; 490  : 	BOOL fSeek = (dwFlags & DMUS_TRACKF_SEEK) ? TRUE : FALSE;

  00030	8b 55 20	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00033	83 e2 01	 and	 edx, 1
  00036	f7 da		 neg	 edx
  00038	1b d2		 sbb	 edx, edx
  0003a	f7 da		 neg	 edx
  0003c	89 55 fc	 mov	 DWORD PTR _fSeek$[ebp], edx

; 491  : 
; 492  : 	// if mtStart is 0 and dwFlags contains DMUS_TRACKF_START, we want to be sure to
; 493  : 	// send out any negative time events. So, we'll set mtStart to -768.
; 494  : 	if( (mtStart == 0) && ( dwFlags & DMUS_TRACKF_START ))

  0003f	83 7d 0c 00	 cmp	 DWORD PTR _mtStart$[ebp], 0
  00043	75 11		 jne	 SHORT $L69820
  00045	8b 45 20	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00048	83 e0 04	 and	 eax, 4
  0004b	85 c0		 test	 eax, eax
  0004d	74 07		 je	 SHORT $L69820

; 495  : 	{
; 496  : 		mtStart = -768;

  0004f	c7 45 0c 00 fd
	ff ff		 mov	 DWORD PTR _mtStart$[ebp], -768 ; fffffd00H
$L69820:

; 497  : 	}
; 498  : 
; 499  : 	// if pSD->pCurrentTempo is NULL, and we're in a normal Play call (dwFlags is 0)
; 500  : 	// this means that we either have no events, or we got to the end of the event
; 501  : 	// list previously. So, it's safe to just return.
; 502  : 	if( (pSD->pCurrentTempo == NULL) && (dwFlags == 0) )

  00056	8b 4d f0	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00059	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  0005d	75 10		 jne	 SHORT $L69821
  0005f	83 7d 20 00	 cmp	 DWORD PTR _dwFlags$[ebp], 0
  00063	75 0a		 jne	 SHORT $L69821

; 503  : 	{
; 504  :         return S_FALSE;

  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	e9 9f 02 00 00	 jmp	 $L69808
$L69821:

; 505  : 	}
; 506  : 
; 507  : 	if( pSD->dwValidate != m_dwValidate )

  0006f	8b 55 f0	 mov	 edx, DWORD PTR _pSD$[ebp]
  00072	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00078	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0007b	74 16		 je	 SHORT $L69823

; 508  : 	{
; 509  : 		pSD->dwValidate = m_dwValidate;

  0007d	8b 55 f0	 mov	 edx, DWORD PTR _pSD$[ebp]
  00080	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00086	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 510  : 		pSD->pCurrentTempo = NULL;

  00089	8b 55 f0	 mov	 edx, DWORD PTR _pSD$[ebp]
  0008c	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
$L69823:

; 511  : 	}
; 512  : 	if (!pSD->pCurrentTempo)

  00093	8b 45 f0	 mov	 eax, DWORD PTR _pSD$[ebp]
  00096	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0009a	75 11		 jne	 SHORT $L69824

; 513  : 	{
; 514  : 		pSD->pCurrentTempo = m_TempoEventList.GetHead();

  0009c	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	83 c1 08	 add	 ecx, 8
  000a2	e8 00 00 00 00	 call	 ?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::GetHead
  000a7	8b 4d f0	 mov	 ecx, DWORD PTR _pSD$[ebp]
  000aa	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$L69824:

; 515  : 	}
; 516  : 	if (!pSD->pCurrentTempo)

  000ad	8b 55 f0	 mov	 edx, DWORD PTR _pSD$[ebp]
  000b0	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  000b4	75 0a		 jne	 SHORT $L69825

; 517  : 	{
; 518  :         return DMUS_S_END;

  000b6	b8 02 12 78 08	 mov	 eax, 142086658		; 08781202H
  000bb	e9 4e 02 00 00	 jmp	 $L69808
$L69825:

; 519  : 	}
; 520  : 	// if the previous end time isn't the same as the current start time,
; 521  : 	// we need to seek to the right position.
; 522  : 	if( fSeek || ( pSD->mtPrevEnd != mtStart ))

  000c0	83 7d fc 00	 cmp	 DWORD PTR _fSeek$[ebp], 0
  000c4	75 0b		 jne	 SHORT $L69831
  000c6	8b 45 f0	 mov	 eax, DWORD PTR _pSD$[ebp]
  000c9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000cc	3b 4d 0c	 cmp	 ecx, DWORD PTR _mtStart$[ebp]
  000cf	74 54		 je	 SHORT $L69830
$L69831:

; 523  : 	{
; 524  : 		TempoStateData tempData;

  000d1	8d 4d d4	 lea	 ecx, DWORD PTR _tempData$69832[ebp]
  000d4	e8 00 00 00 00	 call	 ??0TempoStateData@@QAE@XZ ; TempoStateData::TempoStateData

; 525  : 		BOOL fFlag = TRUE;

  000d9	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _fFlag$69833[ebp], 1

; 526  : 		tempData = *pSD; // put this in so we can use Seek in other functions such as GetParam

  000e0	8b 75 f0	 mov	 esi, DWORD PTR _pSD$[ebp]
  000e3	b9 07 00 00 00	 mov	 ecx, 7
  000e8	8d 7d d4	 lea	 edi, DWORD PTR _tempData$69832[ebp]
  000eb	f3 a5		 rep movsd

; 527  : 		if( !fSeek && (dwFlags & DMUS_TRACKF_DIRTY ))

  000ed	83 7d fc 00	 cmp	 DWORD PTR _fSeek$[ebp], 0
  000f1	75 11		 jne	 SHORT $L69834
  000f3	8b 55 20	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  000f6	83 e2 10	 and	 edx, 16			; 00000010H
  000f9	85 d2		 test	 edx, edx
  000fb	74 07		 je	 SHORT $L69834

; 528  : 		{
; 529  : 			fFlag = FALSE;

  000fd	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _fFlag$69833[ebp], 0
$L69834:

; 530  : 		}
; 531  : 		Seek( &tempData, mtStart, fFlag );

  00104	8b 45 d0	 mov	 eax, DWORD PTR _fFlag$69833[ebp]
  00107	50		 push	 eax
  00108	8b 4d 0c	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  0010b	51		 push	 ecx
  0010c	8d 55 d4	 lea	 edx, DWORD PTR _tempData$69832[ebp]
  0010f	52		 push	 edx
  00110	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	e8 00 00 00 00	 call	 ?Seek@CTempoTrack@@IAEJPAUTempoStateData@@JH@Z ; CTempoTrack::Seek

; 532  : 		*pSD = tempData;

  00118	b9 07 00 00 00	 mov	 ecx, 7
  0011d	8d 75 d4	 lea	 esi, DWORD PTR _tempData$69832[ebp]
  00120	8b 7d f0	 mov	 edi, DWORD PTR _pSD$[ebp]
  00123	f3 a5		 rep movsd
$L69830:

; 533  : 	}
; 534  : 	pSD->mtPrevEnd = mtEnd;

  00125	8b 45 f0	 mov	 eax, DWORD PTR _pSD$[ebp]
  00128	8b 4d 10	 mov	 ecx, DWORD PTR _mtEnd$[ebp]
  0012b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 535  : 
; 536  : 	if( FAILED( pSD->pSegState->QueryInterface( IID_IDirectMusicGraph,
; 537  : 		(void**)&pGraph )))

  0012e	8d 55 f4	 lea	 edx, DWORD PTR _pGraph$[ebp]
  00131	52		 push	 edx
  00132	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicGraph
  00137	8b 45 f0	 mov	 eax, DWORD PTR _pSD$[ebp]
  0013a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0013d	8b 55 f0	 mov	 edx, DWORD PTR _pSD$[ebp]
  00140	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00143	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00145	50		 push	 eax
  00146	ff 11		 call	 DWORD PTR [ecx]
  00148	85 c0		 test	 eax, eax
  0014a	7d 07		 jge	 SHORT $L69837

; 538  : 	{
; 539  : 		pGraph = NULL;

  0014c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pGraph$[ebp], 0
$L69837:

; 540  : 	}
; 541  : 
; 542  : 	for (; pSD->pCurrentTempo; pSD->pCurrentTempo = pSD->pCurrentTempo->GetNext())

  00153	eb 11		 jmp	 SHORT $L69838
$L69839:
  00155	8b 55 f0	 mov	 edx, DWORD PTR _pSD$[ebp]
  00158	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  0015b	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetNext
  00160	8b 4d f0	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00163	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$L69838:
  00166	8b 55 f0	 mov	 edx, DWORD PTR _pSD$[ebp]
  00169	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  0016d	0f 84 86 01 00
	00		 je	 $L69840

; 543  : 	{
; 544  : 		DMUS_IO_TEMPO_ITEM& rTempoEvent = pSD->pCurrentTempo->GetItemValue();

  00173	8b 45 f0	 mov	 eax, DWORD PTR _pSD$[ebp]
  00176	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00179	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  0017e	89 45 cc	 mov	 DWORD PTR _rTempoEvent$69841[ebp], eax

; 545  : 		if( rTempoEvent.lTime >= mtEnd )

  00181	8b 4d cc	 mov	 ecx, DWORD PTR _rTempoEvent$69841[ebp]
  00184	8b 11		 mov	 edx, DWORD PTR [ecx]
  00186	3b 55 10	 cmp	 edx, DWORD PTR _mtEnd$[ebp]
  00189	7c 0c		 jl	 SHORT $L69842

; 546  : 		{
; 547  : 			// this time is in the future. Return now to retain the same
; 548  : 			// seek pointers for next time.
; 549  : 			hr = S_OK;

  0018b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 550  : 			break;

  00192	e9 62 01 00 00	 jmp	 $L69840
$L69842:

; 551  : 		}
; 552  : 		if( rTempoEvent.lTime < mtStart )

  00197	8b 45 cc	 mov	 eax, DWORD PTR _rTempoEvent$69841[ebp]
  0019a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019c	3b 4d 0c	 cmp	 ecx, DWORD PTR _mtStart$[ebp]
  0019f	7d 22		 jge	 SHORT $L69844

; 553  : 		{
; 554  : 			if( dwFlags & DMUS_TRACKF_FLUSH )

  001a1	8b 55 20	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  001a4	83 e2 08	 and	 edx, 8
  001a7	85 d2		 test	 edx, edx
  001a9	74 02		 je	 SHORT $L69845

; 555  : 			{
; 556  : 				// this time is in the past, and this call to Play is in response to an
; 557  : 				// invalidate. We don't want to replay stuff before the start time.
; 558  : 				continue;

  001ab	eb a8		 jmp	 SHORT $L69839
$L69845:

; 559  : 			}
; 560  : 			else if( !( dwFlags & DMUS_TRACKF_START) && !(dwFlags & DMUS_TRACKF_SEEK) )

  001ad	8b 45 20	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  001b0	83 e0 04	 and	 eax, 4
  001b3	85 c0		 test	 eax, eax
  001b5	75 0c		 jne	 SHORT $L69844
  001b7	8b 4d 20	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  001ba	83 e1 01	 and	 ecx, 1
  001bd	85 c9		 test	 ecx, ecx
  001bf	75 02		 jne	 SHORT $L69844

; 561  : 			{
; 562  : 				// we really only want to play events earlier than mtStart on account
; 563  : 				// of a START or SEEK (that isn't a FLUSH.)
; 564  : 				continue;

  001c1	eb 92		 jmp	 SHORT $L69839
$L69844:

; 565  : 			}
; 566  : 		}
; 567  : 		if( pSD->fActive )

  001c3	8b 55 f0	 mov	 edx, DWORD PTR _pSD$[ebp]
  001c6	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  001ca	0f 84 24 01 00
	00		 je	 $L69848

; 568  : 		{
; 569  : 			DMUS_TEMPO_PMSG* pTempo;
; 570  : 			if( SUCCEEDED( pSD->pPerformance->AllocPMsg( sizeof(DMUS_TEMPO_PMSG),
; 571  : 				(DMUS_PMSG**)&pTempo )))

  001d0	8d 45 c8	 lea	 eax, DWORD PTR _pTempo$69849[ebp]
  001d3	50		 push	 eax
  001d4	6a 40		 push	 64			; 00000040H
  001d6	8b 4d f0	 mov	 ecx, DWORD PTR _pSD$[ebp]
  001d9	8b 11		 mov	 edx, DWORD PTR [ecx]
  001db	8b 45 f0	 mov	 eax, DWORD PTR _pSD$[ebp]
  001de	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e0	8b 12		 mov	 edx, DWORD PTR [edx]
  001e2	51		 push	 ecx
  001e3	ff 52 24	 call	 DWORD PTR [edx+36]
  001e6	85 c0		 test	 eax, eax
  001e8	0f 8c 06 01 00
	00		 jl	 $L69848

; 572  : 			{
; 573  : 				if( rTempoEvent.lTime < mtStart )

  001ee	8b 45 cc	 mov	 eax, DWORD PTR _rTempoEvent$69841[ebp]
  001f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f3	3b 4d 0c	 cmp	 ecx, DWORD PTR _mtStart$[ebp]
  001f6	7d 43		 jge	 SHORT $L69854

; 574  : 				{
; 575  : 					// this only happens in the case where we've puposefully seeked
; 576  : 					// and need to time stamp this event with the start time
; 577  :                     if (fClockTime)

  001f8	83 7d 30 00	 cmp	 DWORD PTR _fClockTime$[ebp], 0
  001fc	74 25		 je	 SHORT $L69855

; 578  :                     {
; 579  :                         pTempo->rtTime = (mtStart * REF_PER_MIL) + rtOffset;

  001fe	8b 45 0c	 mov	 eax, DWORD PTR _mtStart$[ebp]
  00201	69 c0 10 27 00
	00		 imul	 eax, 10000		; 00002710H
  00207	99		 cdq
  00208	03 45 18	 add	 eax, DWORD PTR _rtOffset$[ebp]
  0020b	13 55 1c	 adc	 edx, DWORD PTR _rtOffset$[ebp+4]
  0020e	8b 4d c8	 mov	 ecx, DWORD PTR _pTempo$69849[ebp]
  00211	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00214	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 580  :                         pTempo->dwFlags = DMUS_PMSGF_REFTIME | DMUS_PMSGF_LOCKTOREFTIME;

  00217	8b 55 c8	 mov	 edx, DWORD PTR _pTempo$69849[ebp]
  0021a	c7 42 14 41 00
	00 00		 mov	 DWORD PTR [edx+20], 65	; 00000041H

; 581  :                     }
; 582  :                     else

  00221	eb 16		 jmp	 SHORT $L69856
$L69855:

; 583  :                     {
; 584  : 					    pTempo->mtTime = mtStart + mtOffset;

  00223	8b 45 0c	 mov	 eax, DWORD PTR _mtStart$[ebp]
  00226	03 45 14	 add	 eax, DWORD PTR _mtOffset$[ebp]
  00229	8b 4d c8	 mov	 ecx, DWORD PTR _pTempo$69849[ebp]
  0022c	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 585  :                         pTempo->dwFlags = DMUS_PMSGF_MUSICTIME;

  0022f	8b 55 c8	 mov	 edx, DWORD PTR _pTempo$69849[ebp]
  00232	c7 42 14 02 00
	00 00		 mov	 DWORD PTR [edx+20], 2
$L69856:

; 586  :                     }
; 587  : 				}
; 588  : 				else

  00239	eb 45		 jmp	 SHORT $L69857
$L69854:

; 589  : 				{
; 590  :                     if (fClockTime)

  0023b	83 7d 30 00	 cmp	 DWORD PTR _fClockTime$[ebp], 0
  0023f	74 27		 je	 SHORT $L69858

; 591  :                     {
; 592  :                         pTempo->rtTime = (rTempoEvent.lTime  * REF_PER_MIL) + rtOffset;

  00241	8b 45 cc	 mov	 eax, DWORD PTR _rTempoEvent$69841[ebp]
  00244	8b 00		 mov	 eax, DWORD PTR [eax]
  00246	69 c0 10 27 00
	00		 imul	 eax, 10000		; 00002710H
  0024c	99		 cdq
  0024d	03 45 18	 add	 eax, DWORD PTR _rtOffset$[ebp]
  00250	13 55 1c	 adc	 edx, DWORD PTR _rtOffset$[ebp+4]
  00253	8b 4d c8	 mov	 ecx, DWORD PTR _pTempo$69849[ebp]
  00256	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00259	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 593  :                         pTempo->dwFlags = DMUS_PMSGF_REFTIME | DMUS_PMSGF_LOCKTOREFTIME;

  0025c	8b 55 c8	 mov	 edx, DWORD PTR _pTempo$69849[ebp]
  0025f	c7 42 14 41 00
	00 00		 mov	 DWORD PTR [edx+20], 65	; 00000041H

; 594  :                     }
; 595  :                     else

  00266	eb 18		 jmp	 SHORT $L69857
$L69858:

; 596  :                     {
; 597  : 					    pTempo->mtTime = rTempoEvent.lTime + mtOffset;

  00268	8b 45 cc	 mov	 eax, DWORD PTR _rTempoEvent$69841[ebp]
  0026b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026d	03 4d 14	 add	 ecx, DWORD PTR _mtOffset$[ebp]
  00270	8b 55 c8	 mov	 edx, DWORD PTR _pTempo$69849[ebp]
  00273	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 598  :                         pTempo->dwFlags = DMUS_PMSGF_MUSICTIME;

  00276	8b 45 c8	 mov	 eax, DWORD PTR _pTempo$69849[ebp]
  00279	c7 40 14 02 00
	00 00		 mov	 DWORD PTR [eax+20], 2
$L69857:

; 599  :                     }
; 600  : 				}
; 601  : 				pTempo->dblTempo = rTempoEvent.dblTempo;

  00280	8b 4d c8	 mov	 ecx, DWORD PTR _pTempo$69849[ebp]
  00283	8b 55 cc	 mov	 edx, DWORD PTR _rTempoEvent$69841[ebp]
  00286	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00289	89 41 38	 mov	 DWORD PTR [ecx+56], eax
  0028c	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  0028f	89 51 3c	 mov	 DWORD PTR [ecx+60], edx

; 602  : 				pTempo->dwVirtualTrackID = pSD->dwVirtualTrackID;

  00292	8b 45 c8	 mov	 eax, DWORD PTR _pTempo$69849[ebp]
  00295	8b 4d f0	 mov	 ecx, DWORD PTR _pSD$[ebp]
  00298	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0029b	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 603  : 				pTempo->dwType = DMUS_PMSGT_TEMPO;

  0029e	8b 45 c8	 mov	 eax, DWORD PTR _pTempo$69849[ebp]
  002a1	c7 40 28 04 00
	00 00		 mov	 DWORD PTR [eax+40], 4

; 604  : 				pTempo->dwGroupID = 0xffffffff;

  002a8	8b 4d c8	 mov	 ecx, DWORD PTR _pTempo$69849[ebp]
  002ab	c7 41 30 ff ff
	ff ff		 mov	 DWORD PTR [ecx+48], -1

; 605  : 				if( pGraph )

  002b2	83 7d f4 00	 cmp	 DWORD PTR _pGraph$[ebp], 0
  002b6	74 10		 je	 SHORT $L69860

; 606  : 				{
; 607  : 					pGraph->StampPMsg( (DMUS_PMSG*)pTempo );

  002b8	8b 55 c8	 mov	 edx, DWORD PTR _pTempo$69849[ebp]
  002bb	52		 push	 edx
  002bc	8b 45 f4	 mov	 eax, DWORD PTR _pGraph$[ebp]
  002bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c1	8b 55 f4	 mov	 edx, DWORD PTR _pGraph$[ebp]
  002c4	52		 push	 edx
  002c5	ff 51 0c	 call	 DWORD PTR [ecx+12]
$L69860:

; 608  : 				}
; 609  : 				if(FAILED(pSD->pPerformance->SendPMsg( (DMUS_PMSG*)pTempo )))

  002c8	8b 45 c8	 mov	 eax, DWORD PTR _pTempo$69849[ebp]
  002cb	50		 push	 eax
  002cc	8b 4d f0	 mov	 ecx, DWORD PTR _pSD$[ebp]
  002cf	8b 11		 mov	 edx, DWORD PTR [ecx]
  002d1	8b 45 f0	 mov	 eax, DWORD PTR _pSD$[ebp]
  002d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d6	8b 12		 mov	 edx, DWORD PTR [edx]
  002d8	51		 push	 ecx
  002d9	ff 52 10	 call	 DWORD PTR [edx+16]
  002dc	85 c0		 test	 eax, eax
  002de	7d 14		 jge	 SHORT $L69848

; 610  : 				{
; 611  : 					pSD->pPerformance->FreePMsg( (DMUS_PMSG*)pTempo );

  002e0	8b 45 c8	 mov	 eax, DWORD PTR _pTempo$69849[ebp]
  002e3	50		 push	 eax
  002e4	8b 4d f0	 mov	 ecx, DWORD PTR _pSD$[ebp]
  002e7	8b 11		 mov	 edx, DWORD PTR [ecx]
  002e9	8b 45 f0	 mov	 eax, DWORD PTR _pSD$[ebp]
  002ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ee	8b 12		 mov	 edx, DWORD PTR [edx]
  002f0	51		 push	 ecx
  002f1	ff 52 28	 call	 DWORD PTR [edx+40]
$L69848:

; 612  : 				}
; 613  : 			}
; 614  : 		}
; 615  : 	}

  002f4	e9 5c fe ff ff	 jmp	 $L69839
$L69840:

; 616  : 	if( pGraph )

  002f9	83 7d f4 00	 cmp	 DWORD PTR _pGraph$[ebp], 0
  002fd	74 0c		 je	 SHORT $L69866

; 617  : 	{
; 618  : 		pGraph->Release();

  002ff	8b 45 f4	 mov	 eax, DWORD PTR _pGraph$[ebp]
  00302	8b 08		 mov	 ecx, DWORD PTR [eax]
  00304	8b 55 f4	 mov	 edx, DWORD PTR _pGraph$[ebp]
  00307	52		 push	 edx
  00308	ff 51 08	 call	 DWORD PTR [ecx+8]
$L69866:

; 619  : 	}
; 620  : 	return hr;

  0030b	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L69808:

; 621  : }

  0030e	5f		 pop	 edi
  0030f	5e		 pop	 esi
  00310	8b e5		 mov	 esp, ebp
  00312	5d		 pop	 ebp
  00313	c2 2c 00	 ret	 44			; 0000002cH
?Play@CTempoTrack@@IAEJPAXJJJ_JKPAUIDirectMusicPerformance@@PAUIDirectMusicSegmentState@@KH@Z ENDP ; CTempoTrack::Play
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Seek@CTempoTrack@@IAEJPAUTempoStateData@@JH@Z
_TEXT	SEGMENT
_this$ = -8
_pScan$ = -4
_pSD$ = 8
_mtTime$ = 12
_fGetPrevious$ = 16
?Seek@CTempoTrack@@IAEJPAUTempoStateData@@JH@Z PROC NEAR ; CTempoTrack::Seek, COMDAT
; _this$ = ecx

; 628  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 629  : 	TListItem<DMUS_IO_TEMPO_ITEM>* pScan = pSD->pCurrentTempo;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pSD$[ebp]
  0000c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000f	89 4d fc	 mov	 DWORD PTR _pScan$[ebp], ecx

; 630  : 	if (!pScan)

  00012	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00016	75 0e		 jne	 SHORT $L69874

; 631  : 	{
; 632  : 		pScan = m_TempoEventList.GetHead();

  00018	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 08	 add	 ecx, 8
  0001e	e8 00 00 00 00	 call	 ?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::GetHead
  00023	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
$L69874:

; 633  : 	}
; 634  : 	if (!pScan)

  00026	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  0002a	75 07		 jne	 SHORT $L69875

; 635  : 	{
; 636  : 		return S_FALSE;

  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	eb 66		 jmp	 SHORT $L69872
$L69875:

; 637  : 	}
; 638  : 	// if the event's time is on or past mtTime, we need to go to the beginning
; 639  : 	if (pScan->GetItemValue().lTime >= mtTime)

  00033	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00036	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  0003b	8b 10		 mov	 edx, DWORD PTR [eax]
  0003d	3b 55 0c	 cmp	 edx, DWORD PTR _mtTime$[ebp]
  00040	7c 0e		 jl	 SHORT $L69877

; 640  : 	{
; 641  : 		pScan = m_TempoEventList.GetHead();

  00042	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 c1 08	 add	 ecx, 8
  00048	e8 00 00 00 00	 call	 ?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::GetHead
  0004d	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
$L69877:

; 642  : 	}
; 643  : 	pSD->pCurrentTempo = pScan;

  00050	8b 45 08	 mov	 eax, DWORD PTR _pSD$[ebp]
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00056	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 644  : 	for (; pScan; pScan = pScan->GetNext())

  00059	eb 0b		 jmp	 SHORT $L69878
$L69879:
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0005e	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetNext
  00063	89 45 fc	 mov	 DWORD PTR _pScan$[ebp], eax
$L69878:
  00066	83 7d fc 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  0006a	74 2b		 je	 SHORT $L69880

; 645  : 	{
; 646  : 		if (pScan->GetItemValue().lTime >= mtTime)

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0006f	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  00074	8b 10		 mov	 edx, DWORD PTR [eax]
  00076	3b 55 0c	 cmp	 edx, DWORD PTR _mtTime$[ebp]
  00079	7c 11		 jl	 SHORT $L69881

; 647  : 		{
; 648  : 			if (!fGetPrevious)

  0007b	83 7d 10 00	 cmp	 DWORD PTR _fGetPrevious$[ebp], 0
  0007f	75 09		 jne	 SHORT $L69882

; 649  : 			{
; 650  : 				pSD->pCurrentTempo = pScan;

  00081	8b 45 08	 mov	 eax, DWORD PTR _pSD$[ebp]
  00084	8b 4d fc	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00087	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$L69882:

; 651  : 			}
; 652  : 			break;

  0008a	eb 0b		 jmp	 SHORT $L69880
$L69881:

; 653  : 		}
; 654  : 		pSD->pCurrentTempo = pScan;

  0008c	8b 55 08	 mov	 edx, DWORD PTR _pSD$[ebp]
  0008f	8b 45 fc	 mov	 eax, DWORD PTR _pScan$[ebp]
  00092	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 655  : 	}

  00095	eb c4		 jmp	 SHORT $L69879
$L69880:

; 656  : 	return S_OK;

  00097	33 c0		 xor	 eax, eax
$L69872:

; 657  : }

  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 0c 00	 ret	 12			; 0000000cH
?Seek@CTempoTrack@@IAEJPAUTempoStateData@@JH@Z ENDP	; CTempoTrack::Seek
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetParamEx@CTempoTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z
_TEXT	SEGMENT
_hr$ = -8
_mtNext$ = -4
_this$ = 8
_rguidType$ = 12
_rtTime$ = 16
_prtNext$ = 24
_pParam$ = 28
_pStateData$ = 32
_dwFlags$ = 36
?GetParamEx@CTempoTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z PROC NEAR ; CTempoTrack::GetParamEx, COMDAT

; 661  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 662  :     HRESULT hr;
; 663  :     MUSIC_TIME mtNext;
; 664  :     if (dwFlags & DMUS_TRACK_PARAMF_CLOCK)

  00006	8b 45 24	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00009	83 e0 01	 and	 eax, 1
  0000c	85 c0		 test	 eax, eax
  0000e	74 4a		 je	 SHORT $L69895

; 665  :     {
; 666  :         hr = GetParam(rguidType,(MUSIC_TIME) (rtTime / REF_PER_MIL), &mtNext, pParam);

  00010	8b 4d 1c	 mov	 ecx, DWORD PTR _pParam$[ebp]
  00013	51		 push	 ecx
  00014	8d 55 fc	 lea	 edx, DWORD PTR _mtNext$[ebp]
  00017	52		 push	 edx
  00018	6a 00		 push	 0
  0001a	68 10 27 00 00	 push	 10000			; 00002710H
  0001f	8b 45 14	 mov	 eax, DWORD PTR _rtTime$[ebp+4]
  00022	50		 push	 eax
  00023	8b 4d 10	 mov	 ecx, DWORD PTR _rtTime$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 __alldiv
  0002c	50		 push	 eax
  0002d	8b 55 0c	 mov	 edx, DWORD PTR _rguidType$[ebp]
  00030	52		 push	 edx
  00031	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	50		 push	 eax
  0003a	ff 52 1c	 call	 DWORD PTR [edx+28]
  0003d	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 667  :         if (prtNext)

  00040	83 7d 18 00	 cmp	 DWORD PTR _prtNext$[ebp], 0
  00044	74 12		 je	 SHORT $L69897

; 668  :         {
; 669  :             *prtNext = mtNext * REF_PER_MIL;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _mtNext$[ebp]
  00049	69 c0 10 27 00
	00		 imul	 eax, 10000		; 00002710H
  0004f	99		 cdq
  00050	8b 4d 18	 mov	 ecx, DWORD PTR _prtNext$[ebp]
  00053	89 01		 mov	 DWORD PTR [ecx], eax
  00055	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$L69897:

; 670  :         }
; 671  :     }
; 672  :     else

  00058	eb 31		 jmp	 SHORT $L69898
$L69895:

; 673  :     {
; 674  :         hr = GetParam(rguidType,(MUSIC_TIME) rtTime, &mtNext, pParam);

  0005a	8b 55 1c	 mov	 edx, DWORD PTR _pParam$[ebp]
  0005d	52		 push	 edx
  0005e	8d 45 fc	 lea	 eax, DWORD PTR _mtNext$[ebp]
  00061	50		 push	 eax
  00062	8b 4d 10	 mov	 ecx, DWORD PTR _rtTime$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 0c	 mov	 edx, DWORD PTR _rguidType$[ebp]
  00069	52		 push	 edx
  0006a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	8b 11		 mov	 edx, DWORD PTR [ecx]
  00072	50		 push	 eax
  00073	ff 52 1c	 call	 DWORD PTR [edx+28]
  00076	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 675  :         if (prtNext)

  00079	83 7d 18 00	 cmp	 DWORD PTR _prtNext$[ebp], 0
  0007d	74 0c		 je	 SHORT $L69898

; 676  :         {
; 677  :             *prtNext = mtNext;

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _mtNext$[ebp]
  00082	99		 cdq
  00083	8b 4d 18	 mov	 ecx, DWORD PTR _prtNext$[ebp]
  00086	89 01		 mov	 DWORD PTR [ecx], eax
  00088	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$L69898:

; 678  :         }
; 679  :     }
; 680  :     return hr;

  0008b	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 681  : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 20 00	 ret	 32			; 00000020H
?GetParamEx@CTempoTrack@@UAGJABU_GUID@@_JPA_JPAX3K@Z ENDP ; CTempoTrack::GetParamEx
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetParamEx@CTempoTrack@@UAGJABU_GUID@@_JPAX2K@Z
_TEXT	SEGMENT
_this$ = 8
_rguidType$ = 12
_rtTime$ = 16
_pParam$ = 24
_pStateData$ = 28
_dwFlags$ = 32
?SetParamEx@CTempoTrack@@UAGJABU_GUID@@_JPAX2K@Z PROC NEAR ; CTempoTrack::SetParamEx, COMDAT

; 685  : {    

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 686  :     if (dwFlags & DMUS_TRACK_PARAMF_CLOCK)

  00003	8b 45 20	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	85 c0		 test	 eax, eax
  0000b	74 1a		 je	 SHORT $L69909

; 687  :     {
; 688  :         rtTime /= REF_PER_MIL;

  0000d	6a 00		 push	 0
  0000f	68 10 27 00 00	 push	 10000			; 00002710H
  00014	8b 4d 14	 mov	 ecx, DWORD PTR _rtTime$[ebp+4]
  00017	51		 push	 ecx
  00018	8b 55 10	 mov	 edx, DWORD PTR _rtTime$[ebp]
  0001b	52		 push	 edx
  0001c	e8 00 00 00 00	 call	 __alldiv
  00021	89 45 10	 mov	 DWORD PTR _rtTime$[ebp], eax
  00024	89 55 14	 mov	 DWORD PTR _rtTime$[ebp+4], edx
$L69909:

; 689  :     }
; 690  : 	return SetParam(rguidType, (MUSIC_TIME) rtTime , pParam);

  00027	8b 45 18	 mov	 eax, DWORD PTR _pParam$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 10	 mov	 ecx, DWORD PTR _rtTime$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 55 0c	 mov	 edx, DWORD PTR _rguidType$[ebp]
  00032	52		 push	 edx
  00033	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003b	50		 push	 eax
  0003c	ff 52 20	 call	 DWORD PTR [edx+32]

; 691  : }

  0003f	5d		 pop	 ebp
  00040	c2 1c 00	 ret	 28			; 0000001cH
?SetParamEx@CTempoTrack@@UAGJABU_GUID@@_JPAX2K@Z ENDP	; CTempoTrack::SetParamEx
_TEXT	ENDS
PUBLIC	??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??GetParam@CTempoTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??GetParam@CTempoTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::GetParam', 00H		; `CTempoTrack::GetParam'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@
CONST	SEGMENT
??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@ DB '%s: Inval'
	DB	'id pointer pmtNext', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetParam@CTempoTrack@@UAGJABU_GUID@@JPAJPAX@Z
_TEXT	SEGMENT
tv134 = -48
_rNextTempoEvent$69967 = -44
_pPrevious$69954 = -40
_pScan$69953 = -36
_pTempoData$69951 = -32
_rTempoEvent$69964 = -28
_TempoData$69935 = -24
_pPrivateTempoData$69936 = -8
_hr$ = -4
_this$ = 8
_rguid$ = 12
_mtTime$ = 16
_pmtNext$ = 20
_pData$ = 24
?GetParam@CTempoTrack@@UAGJABU_GUID@@JPAJPAX@Z PROC NEAR ; CTempoTrack::GetParam, COMDAT

; 699  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 700  :     V_INAME(IDirectMusicTrack::GetParam);
; 701  :     V_PTR_WRITE_OPT(pmtNext,MUSIC_TIME);

  00006	83 7d 14 00	 cmp	 DWORD PTR _pmtNext$[ebp], 0
  0000a	74 28		 je	 SHORT $L69920
  0000c	6a 04		 push	 4
  0000e	8b 45 14	 mov	 eax, DWORD PTR _pmtNext$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00017	85 c0		 test	 eax, eax
  00019	74 19		 je	 SHORT $L69920
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetParam@CTempoTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@PLMGLDO@?$CFs?3?5Invalid?5pointer?5pmtNext?6?$AA@
  00025	6a ff		 push	 -1
  00027	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	e8 00 00 00 00	 call	 _DebugBreak@0
$L69920:

; 702  :     V_REFGUID(rguid);

  00034	6a 10		 push	 16			; 00000010H
  00036	8b 4d 0c	 mov	 ecx, DWORD PTR _rguid$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003f	85 c0		 test	 eax, eax
  00041	74 19		 je	 SHORT $L69926
  00043	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??GetParam@CTempoTrack@@UAGJABU_GUID@@JPAJPAX@Z@4QBDB
  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
  0004d	6a ff		 push	 -1
  0004f	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	e8 00 00 00 00	 call	 _DebugBreak@0
$L69926:

; 703  : 
; 704  :     HRESULT hr = DMUS_E_GET_UNSUPPORTED;

  0005c	c7 45 fc 24 11
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005397212 ; 88781124H

; 705  :     if( NULL == pData )

  00063	83 7d 18 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00067	75 0a		 jne	 SHORT $L69932

; 706  :     {
; 707  :         return E_POINTER;

  00069	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  0006e	e9 87 01 00 00	 jmp	 $L69917
$L69932:

; 708  :     }
; 709  :     if( rguid == GUID_PrivateTempoParam )

  00073	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_PrivateTempoParam
  00078	8b 55 0c	 mov	 edx, DWORD PTR _rguid$[ebp]
  0007b	52		 push	 edx
  0007c	e8 00 00 00 00	 call	 _==@8
  00081	85 c0		 test	 eax, eax
  00083	0f 84 8b 00 00
	00		 je	 $L69934

; 710  :     {
; 711  :         DMUS_TEMPO_PARAM TempoData;
; 712  :         PrivateTempo* pPrivateTempoData = (PrivateTempo*)pData;

  00089	8b 45 18	 mov	 eax, DWORD PTR _pData$[ebp]
  0008c	89 45 f8	 mov	 DWORD PTR _pPrivateTempoData$69936[ebp], eax

; 713  :         hr = GetParam(GUID_TempoParam, mtTime, pmtNext, (void*)&TempoData);

  0008f	8d 4d e8	 lea	 ecx, DWORD PTR _TempoData$69935[ebp]
  00092	51		 push	 ecx
  00093	8b 55 14	 mov	 edx, DWORD PTR _pmtNext$[ebp]
  00096	52		 push	 edx
  00097	8b 45 10	 mov	 eax, DWORD PTR _mtTime$[ebp]
  0009a	50		 push	 eax
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_TempoParam
  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	8b 02		 mov	 eax, DWORD PTR [edx]
  000a8	51		 push	 ecx
  000a9	ff 50 1c	 call	 DWORD PTR [eax+28]
  000ac	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 714  :         if (hr == S_OK)

  000af	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b3	75 4a		 jne	 SHORT $L69940

; 715  :         {
; 716  :             pPrivateTempoData->dblTempo = TempoData.dblTempo;

  000b5	8b 4d f8	 mov	 ecx, DWORD PTR _pPrivateTempoData$69936[ebp]
  000b8	8b 55 f0	 mov	 edx, DWORD PTR _TempoData$69935[ebp+8]
  000bb	89 11		 mov	 DWORD PTR [ecx], edx
  000bd	8b 45 f4	 mov	 eax, DWORD PTR _TempoData$69935[ebp+12]
  000c0	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 717  :             pPrivateTempoData->mtTime = 0; // must be set by the caller

  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _pPrivateTempoData$69936[ebp]
  000c6	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 718  :             pPrivateTempoData->mtDelta = TempoData.mtTime;

  000cd	8b 55 f8	 mov	 edx, DWORD PTR _pPrivateTempoData$69936[ebp]
  000d0	8b 45 e8	 mov	 eax, DWORD PTR _TempoData$69935[ebp]
  000d3	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 719  :             pPrivateTempoData->fLast = (pmtNext && !*pmtNext);

  000d6	83 7d 14 00	 cmp	 DWORD PTR _pmtNext$[ebp], 0
  000da	74 11		 je	 SHORT $L70654
  000dc	8b 4d 14	 mov	 ecx, DWORD PTR _pmtNext$[ebp]
  000df	83 39 00	 cmp	 DWORD PTR [ecx], 0
  000e2	75 09		 jne	 SHORT $L70654
  000e4	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv134[ebp], 1
  000eb	eb 07		 jmp	 SHORT $L70655
$L70654:
  000ed	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv134[ebp], 0
$L70655:
  000f4	8b 55 f8	 mov	 edx, DWORD PTR _pPrivateTempoData$69936[ebp]
  000f7	8a 45 d0	 mov	 al, BYTE PTR tv134[ebp]
  000fa	88 42 10	 mov	 BYTE PTR [edx+16], al

; 720  :         }
; 721  :         else if (hr == DMUS_E_NOT_FOUND) // the tempo track was empty

  000fd	eb 10		 jmp	 SHORT $L69941
$L69940:
  000ff	81 7d fc 61 11
	78 88		 cmp	 DWORD PTR _hr$[ebp], -2005397151 ; 88781161H
  00106	75 07		 jne	 SHORT $L69941

; 722  :         {
; 723  :             pPrivateTempoData->fLast = true;

  00108	8b 4d f8	 mov	 ecx, DWORD PTR _pPrivateTempoData$69936[ebp]
  0010b	c6 41 10 01	 mov	 BYTE PTR [ecx+16], 1
$L69941:

; 724  :         }
; 725  :     }
; 726  :     else if( rguid == GUID_TempoParam )

  0010f	e9 e3 00 00 00	 jmp	 $L69947
$L69934:
  00114	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_TempoParam
  00119	8b 55 0c	 mov	 edx, DWORD PTR _rguid$[ebp]
  0011c	52		 push	 edx
  0011d	e8 00 00 00 00	 call	 _==@8
  00122	85 c0		 test	 eax, eax
  00124	0f 84 cd 00 00
	00		 je	 $L69947

; 727  :     {
; 728  :         if( !m_fActive )

  0012a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0012d	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  00131	75 0a		 jne	 SHORT $L69949

; 729  :         {
; 730  :             return DMUS_E_TYPE_DISABLED;

  00133	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00138	e9 bd 00 00 00	 jmp	 $L69917
$L69949:

; 731  :         }
; 732  :         DMUS_TEMPO_PARAM* pTempoData = (DMUS_TEMPO_PARAM*)pData;

  0013d	8b 4d 18	 mov	 ecx, DWORD PTR _pData$[ebp]
  00140	89 4d e0	 mov	 DWORD PTR _pTempoData$69951[ebp], ecx

; 733  :         TListItem<DMUS_IO_TEMPO_ITEM>* pScan = m_TempoEventList.GetHead();

  00143	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	83 c1 04	 add	 ecx, 4
  00149	e8 00 00 00 00	 call	 ?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::GetHead
  0014e	89 45 dc	 mov	 DWORD PTR _pScan$69953[ebp], eax

; 734  :         TListItem<DMUS_IO_TEMPO_ITEM>* pPrevious = pScan;

  00151	8b 55 dc	 mov	 edx, DWORD PTR _pScan$69953[ebp]
  00154	89 55 d8	 mov	 DWORD PTR _pPrevious$69954[ebp], edx

; 735  :         if (!pScan)

  00157	83 7d dc 00	 cmp	 DWORD PTR _pScan$69953[ebp], 0
  0015b	75 0a		 jne	 SHORT $L69955

; 736  :         {
; 737  :             return DMUS_E_NOT_FOUND;

  0015d	b8 61 11 78 88	 mov	 eax, -2005397151	; 88781161H
  00162	e9 93 00 00 00	 jmp	 $L69917
$L69955:

; 738  :         }
; 739  :         for (; pScan; pScan = pScan->GetNext())

  00167	eb 0b		 jmp	 SHORT $L69960
$L69961:
  00169	8b 4d dc	 mov	 ecx, DWORD PTR _pScan$69953[ebp]
  0016c	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetNext
  00171	89 45 dc	 mov	 DWORD PTR _pScan$69953[ebp], eax
$L69960:
  00174	83 7d dc 00	 cmp	 DWORD PTR _pScan$69953[ebp], 0
  00178	74 19		 je	 SHORT $L69962

; 740  :         {
; 741  :             if (pScan->GetItemValue().lTime > mtTime)

  0017a	8b 4d dc	 mov	 ecx, DWORD PTR _pScan$69953[ebp]
  0017d	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  00182	8b 00		 mov	 eax, DWORD PTR [eax]
  00184	3b 45 10	 cmp	 eax, DWORD PTR _mtTime$[ebp]
  00187	7e 02		 jle	 SHORT $L69963

; 742  :             {
; 743  :                 break;

  00189	eb 08		 jmp	 SHORT $L69962
$L69963:

; 744  :             }
; 745  :             pPrevious = pScan;

  0018b	8b 4d dc	 mov	 ecx, DWORD PTR _pScan$69953[ebp]
  0018e	89 4d d8	 mov	 DWORD PTR _pPrevious$69954[ebp], ecx

; 746  :         }

  00191	eb d6		 jmp	 SHORT $L69961
$L69962:

; 747  :         DMUS_IO_TEMPO_ITEM& rTempoEvent = pPrevious->GetItemValue();

  00193	8b 4d d8	 mov	 ecx, DWORD PTR _pPrevious$69954[ebp]
  00196	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  0019b	89 45 e4	 mov	 DWORD PTR _rTempoEvent$69964[ebp], eax

; 748  :         pTempoData->dblTempo = rTempoEvent.dblTempo;

  0019e	8b 55 e0	 mov	 edx, DWORD PTR _pTempoData$69951[ebp]
  001a1	8b 45 e4	 mov	 eax, DWORD PTR _rTempoEvent$69964[ebp]
  001a4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001a7	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  001aa	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  001ad	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 749  :         pTempoData->mtTime = rTempoEvent.lTime - mtTime;

  001b0	8b 4d e4	 mov	 ecx, DWORD PTR _rTempoEvent$69964[ebp]
  001b3	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b5	2b 55 10	 sub	 edx, DWORD PTR _mtTime$[ebp]
  001b8	8b 45 e0	 mov	 eax, DWORD PTR _pTempoData$69951[ebp]
  001bb	89 10		 mov	 DWORD PTR [eax], edx

; 750  :         if (pmtNext)

  001bd	83 7d 14 00	 cmp	 DWORD PTR _pmtNext$[ebp], 0
  001c1	74 09		 je	 SHORT $L69965

; 751  :         {
; 752  :             *pmtNext = 0;

  001c3	8b 4d 14	 mov	 ecx, DWORD PTR _pmtNext$[ebp]
  001c6	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L69965:

; 753  :         }
; 754  :         if (pScan)

  001cc	83 7d dc 00	 cmp	 DWORD PTR _pScan$69953[ebp], 0
  001d0	74 1e		 je	 SHORT $L69966

; 755  :         {
; 756  :             DMUS_IO_TEMPO_ITEM& rNextTempoEvent = pScan->GetItemValue();

  001d2	8b 4d dc	 mov	 ecx, DWORD PTR _pScan$69953[ebp]
  001d5	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  001da	89 45 d4	 mov	 DWORD PTR _rNextTempoEvent$69967[ebp], eax

; 757  :             if (pmtNext)

  001dd	83 7d 14 00	 cmp	 DWORD PTR _pmtNext$[ebp], 0
  001e1	74 0d		 je	 SHORT $L69966

; 758  :             {
; 759  :                 *pmtNext = rNextTempoEvent.lTime - mtTime;

  001e3	8b 55 d4	 mov	 edx, DWORD PTR _rNextTempoEvent$69967[ebp]
  001e6	8b 02		 mov	 eax, DWORD PTR [edx]
  001e8	2b 45 10	 sub	 eax, DWORD PTR _mtTime$[ebp]
  001eb	8b 4d 14	 mov	 ecx, DWORD PTR _pmtNext$[ebp]
  001ee	89 01		 mov	 DWORD PTR [ecx], eax
$L69966:

; 760  :             }
; 761  :         }
; 762  :         hr = S_OK;

  001f0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$L69947:

; 763  :     }
; 764  :     return hr;

  001f7	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
$L69917:

; 765  : }

  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c2 14 00	 ret	 20			; 00000014H
?GetParam@CTempoTrack@@UAGJABU_GUID@@JPAJPAX@Z ENDP	; CTempoTrack::GetParam
_TEXT	ENDS
PUBLIC	?SetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::SetNext
;	COMDAT ?__szValidateInterfaceName@?1??SetParam@CTempoTrack@@UAGJABU_GUID@@JPAX@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??SetParam@CTempoTrack@@UAGJABU_GUID@@JPAX@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::SetParam', 00H		; `CTempoTrack::SetParam'::`2'::__szValidateInterfaceName
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?SetParam@CTempoTrack@@UAGJABU_GUID@@JPAX@Z
_TEXT	SEGMENT
tv164 = -44
tv132 = -40
$T70663 = -36
$T70662 = -32
$T70659 = -28
_pPrevious$69995 = -24
_pNew$70000 = -20
_pScan$69994 = -16
_pTempoData$69992 = -12
_rTempoEvent$70005 = -8
_hr$ = -4
_this$ = 8
_rguid$ = 12
_mtTime$ = 16
_pData$ = 20
?SetParam@CTempoTrack@@UAGJABU_GUID@@JPAX@Z PROC NEAR	; CTempoTrack::SetParam, COMDAT

; 772  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 773  :     V_INAME(IDirectMusicTrack::SetParam);
; 774  :     V_REFGUID(rguid);

  00006	6a 10		 push	 16			; 00000010H
  00008	8b 45 0c	 mov	 eax, DWORD PTR _rguid$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L69980
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??SetParam@CTempoTrack@@UAGJABU_GUID@@JPAX@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@CGBHGIIJ@?$CFs?3?5Invalid?5pointer?5?$CIvoid?$CK?$CJ?$CGrgui@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L69980:

; 775  : 
; 776  :     ENTER_CRITICAL_SECTION(&m_CrSec);

  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 10	 add	 ecx, 16			; 00000010H
  00034	51		 push	 ecx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 777  : 
; 778  :     HRESULT hr = DMUS_E_SET_UNSUPPORTED;

  0003b	c7 45 fc 23 11
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005397213 ; 88781123H

; 779  : #ifdef DXAPI
; 780  :     if( rguid == GUID_DisableTempo )
; 781  :     {
; 782  :         if (m_fStateSetBySetParam && !m_fActive)
; 783  :         {       // Already been disabled.
; 784  :             hr = DMUS_E_TYPE_DISABLED;
; 785  :         }
; 786  :         else
; 787  :         {
; 788  :             m_fStateSetBySetParam = TRUE;
; 789  :             m_fActive = FALSE;
; 790  :             hr = S_OK;
; 791  :         }
; 792  :     }
; 793  :     else if( rguid == GUID_EnableTempo )
; 794  :     {
; 795  :         if (m_fStateSetBySetParam && m_fActive)
; 796  :         {       // Already been enabled.
; 797  :             hr = DMUS_E_TYPE_DISABLED;
; 798  :         }
; 799  :         else
; 800  :         {
; 801  :             m_fStateSetBySetParam = TRUE;
; 802  :             m_fActive = TRUE;
; 803  :             hr = S_OK;
; 804  :         }
; 805  :     }
; 806  :     else
; 807  : #endif
; 808  :     if( rguid == GUID_TempoParam )

  00042	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_TempoParam
  00047	8b 55 0c	 mov	 edx, DWORD PTR _rguid$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 _==@8
  00050	85 c0		 test	 eax, eax
  00052	0f 84 85 01 00
	00		 je	 $L69986

; 809  :     {
; 810  :         if (!m_fActive)

  00058	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0005f	75 0c		 jne	 SHORT $L69987

; 811  :         {   // Oops, app intentionally disabled tempo.
; 812  :             hr = DMUS_E_TYPE_DISABLED;

  00061	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 813  :         }
; 814  :         else

  00068	e9 70 01 00 00	 jmp	 $L69986
$L69987:

; 815  :         {
; 816  :             if( NULL == pData )

  0006d	83 7d 14 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00071	75 17		 jne	 SHORT $L69990

; 817  :             {
; 818  :                 LeaveCriticalSection(&m_CrSec);

  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	83 c1 10	 add	 ecx, 16			; 00000010H
  00079	51		 push	 ecx
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 819  :                 return E_POINTER;

  00080	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  00085	e9 63 01 00 00	 jmp	 $L69975
$L69990:

; 820  :             }
; 821  :             DMUS_TEMPO_PARAM* pTempoData = (DMUS_TEMPO_PARAM*)pData;

  0008a	8b 55 14	 mov	 edx, DWORD PTR _pData$[ebp]
  0008d	89 55 f4	 mov	 DWORD PTR _pTempoData$69992[ebp], edx

; 822  :             TListItem<DMUS_IO_TEMPO_ITEM>* pScan = m_TempoEventList.GetHead();

  00090	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	83 c1 04	 add	 ecx, 4
  00096	e8 00 00 00 00	 call	 ?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::GetHead
  0009b	89 45 f0	 mov	 DWORD PTR _pScan$69994[ebp], eax

; 823  :             TListItem<DMUS_IO_TEMPO_ITEM>* pPrevious = NULL;

  0009e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pPrevious$69995[ebp], 0

; 824  :             for (; pScan; pScan = pScan->GetNext())

  000a5	eb 0b		 jmp	 SHORT $L69996
$L69997:
  000a7	8b 4d f0	 mov	 ecx, DWORD PTR _pScan$69994[ebp]
  000aa	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetNext
  000af	89 45 f0	 mov	 DWORD PTR _pScan$69994[ebp], eax
$L69996:
  000b2	83 7d f0 00	 cmp	 DWORD PTR _pScan$69994[ebp], 0
  000b6	74 19		 je	 SHORT $L69998

; 825  :             {
; 826  :                 if (pScan->GetItemValue().lTime >= mtTime)

  000b8	8b 4d f0	 mov	 ecx, DWORD PTR _pScan$69994[ebp]
  000bb	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  000c0	8b 00		 mov	 eax, DWORD PTR [eax]
  000c2	3b 45 10	 cmp	 eax, DWORD PTR _mtTime$[ebp]
  000c5	7c 02		 jl	 SHORT $L69999

; 827  :                 {
; 828  :                     break;

  000c7	eb 08		 jmp	 SHORT $L69998
$L69999:

; 829  :                 }
; 830  :                 pPrevious = pScan;

  000c9	8b 4d f0	 mov	 ecx, DWORD PTR _pScan$69994[ebp]
  000cc	89 4d e8	 mov	 DWORD PTR _pPrevious$69995[ebp], ecx

; 831  :             }

  000cf	eb d6		 jmp	 SHORT $L69997
$L69998:

; 832  :             // Make a new DMUS_IO_TEMPO_ITEM and insert it after pPrevious
; 833  :             TListItem<DMUS_IO_TEMPO_ITEM>* pNew = new TListItem<DMUS_IO_TEMPO_ITEM>;

  000d1	6a 18		 push	 24			; 00000018H
  000d3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d8	83 c4 04	 add	 esp, 4
  000db	89 45 e4	 mov	 DWORD PTR $T70659[ebp], eax
  000de	83 7d e4 00	 cmp	 DWORD PTR $T70659[ebp], 0
  000e2	74 0d		 je	 SHORT $L70660
  000e4	8b 4d e4	 mov	 ecx, DWORD PTR $T70659[ebp]
  000e7	e8 00 00 00 00	 call	 ??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::TListItem<_DMUS_IO_TEMPO_ITEM>
  000ec	89 45 d8	 mov	 DWORD PTR tv132[ebp], eax
  000ef	eb 07		 jmp	 SHORT $L70661
$L70660:
  000f1	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$L70661:
  000f8	8b 55 d8	 mov	 edx, DWORD PTR tv132[ebp]
  000fb	89 55 ec	 mov	 DWORD PTR _pNew$70000[ebp], edx

; 834  :             if (!pNew)

  000fe	83 7d ec 00	 cmp	 DWORD PTR _pNew$70000[ebp], 0
  00102	75 17		 jne	 SHORT $L70003

; 835  :             {
; 836  :                 LEAVE_CRITICAL_SECTION(&m_CrSec);

  00104	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00107	83 c0 10	 add	 eax, 16			; 00000010H
  0010a	50		 push	 eax
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 837  :                 return E_OUTOFMEMORY;

  00111	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00116	e9 d2 00 00 00	 jmp	 $L69975
$L70003:

; 838  :             }
; 839  :             DMUS_IO_TEMPO_ITEM& rTempoEvent = pNew->GetItemValue();

  0011b	8b 4d ec	 mov	 ecx, DWORD PTR _pNew$70000[ebp]
  0011e	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  00123	89 45 f8	 mov	 DWORD PTR _rTempoEvent$70005[ebp], eax

; 840  :             rTempoEvent.dblTempo = pTempoData->dblTempo;

  00126	8b 4d f8	 mov	 ecx, DWORD PTR _rTempoEvent$70005[ebp]
  00129	8b 55 f4	 mov	 edx, DWORD PTR _pTempoData$69992[ebp]
  0012c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0012f	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00132	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00135	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 841  :             /*
; 842  :             // I believe the fix for 204160 was supposed to change this line to what 
; 843  :             // follows the comment.  RSW
; 844  :             rTempoEvent.lTime = pTempoData->mtTime;
; 845  :             */
; 846  :             rTempoEvent.lTime = mtTime;

  00138	8b 45 f8	 mov	 eax, DWORD PTR _rTempoEvent$70005[ebp]
  0013b	8b 4d 10	 mov	 ecx, DWORD PTR _mtTime$[ebp]
  0013e	89 08		 mov	 DWORD PTR [eax], ecx

; 847  :             if (pPrevious)

  00140	83 7d e8 00	 cmp	 DWORD PTR _pPrevious$69995[ebp], 0
  00144	74 1a		 je	 SHORT $L70006

; 848  :             {
; 849  :                 pNew->SetNext(pScan);

  00146	8b 55 f0	 mov	 edx, DWORD PTR _pScan$69994[ebp]
  00149	52		 push	 edx
  0014a	8b 4d ec	 mov	 ecx, DWORD PTR _pNew$70000[ebp]
  0014d	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::SetNext

; 850  :                 pPrevious->SetNext(pNew);

  00152	8b 45 ec	 mov	 eax, DWORD PTR _pNew$70000[ebp]
  00155	50		 push	 eax
  00156	8b 4d e8	 mov	 ecx, DWORD PTR _pPrevious$69995[ebp]
  00159	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::SetNext

; 851  :             }
; 852  :             else

  0015e	eb 0f		 jmp	 SHORT $L70007
$L70006:

; 853  :             {
; 854  :                 m_TempoEventList.AddHead(pNew);

  00160	8b 4d ec	 mov	 ecx, DWORD PTR _pNew$70000[ebp]
  00163	51		 push	 ecx
  00164	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00167	83 c1 04	 add	 ecx, 4
  0016a	e8 00 00 00 00	 call	 ?AddHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z ; TList<_DMUS_IO_TEMPO_ITEM>::AddHead
$L70007:

; 855  :             }
; 856  :             if (pScan && pScan->GetItemValue().lTime == mtTime)

  0016f	83 7d f0 00	 cmp	 DWORD PTR _pScan$69994[ebp], 0
  00173	74 52		 je	 SHORT $L70008
  00175	8b 4d f0	 mov	 ecx, DWORD PTR _pScan$69994[ebp]
  00178	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  0017d	8b 10		 mov	 edx, DWORD PTR [eax]
  0017f	3b 55 10	 cmp	 edx, DWORD PTR _mtTime$[ebp]
  00182	75 43		 jne	 SHORT $L70008

; 857  :             {
; 858  :                 // remove it
; 859  :                 pNew->SetNext(pScan->GetNext());

  00184	8b 4d f0	 mov	 ecx, DWORD PTR _pScan$69994[ebp]
  00187	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetNext
  0018c	50		 push	 eax
  0018d	8b 4d ec	 mov	 ecx, DWORD PTR _pNew$70000[ebp]
  00190	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::SetNext

; 860  :                 pScan->SetNext(NULL);

  00195	6a 00		 push	 0
  00197	8b 4d f0	 mov	 ecx, DWORD PTR _pScan$69994[ebp]
  0019a	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::SetNext

; 861  :                 delete pScan;

  0019f	8b 45 f0	 mov	 eax, DWORD PTR _pScan$69994[ebp]
  001a2	89 45 dc	 mov	 DWORD PTR $T70663[ebp], eax
  001a5	8b 4d dc	 mov	 ecx, DWORD PTR $T70663[ebp]
  001a8	89 4d e0	 mov	 DWORD PTR $T70662[ebp], ecx
  001ab	83 7d e0 00	 cmp	 DWORD PTR $T70662[ebp], 0
  001af	74 0f		 je	 SHORT $L70664
  001b1	6a 01		 push	 1
  001b3	8b 4d e0	 mov	 ecx, DWORD PTR $T70662[ebp]
  001b6	e8 00 00 00 00	 call	 ??_G?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAXI@Z
  001bb	89 45 d4	 mov	 DWORD PTR tv164[ebp], eax
  001be	eb 07		 jmp	 SHORT $L70008
$L70664:
  001c0	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv164[ebp], 0
$L70008:

; 862  :             }
; 863  :             m_dwValidate++;

  001c7	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001ca	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001cd	83 c0 01	 add	 eax, 1
  001d0	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001d3	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 864  :             hr = S_OK;

  001d6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$L69986:

; 865  :         }
; 866  :     }
; 867  :     LEAVE_CRITICAL_SECTION(&m_CrSec);

  001dd	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001e0	83 c2 10	 add	 edx, 16			; 00000010H
  001e3	52		 push	 edx
  001e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 868  :     return hr;

  001ea	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
$L69975:

; 869  : }

  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	c2 10 00	 ret	 16			; 00000010H
?SetParam@CTempoTrack@@UAGJABU_GUID@@JPAX@Z ENDP	; CTempoTrack::SetParam
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddNotificationType@CTempoTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguidNotification$ = 12
?AddNotificationType@CTempoTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CTempoTrack::AddNotificationType, COMDAT

; 873  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 874  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 875  : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?AddNotificationType@CTempoTrack@@UAGJABU_GUID@@@Z ENDP	; CTempoTrack::AddNotificationType
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RemoveNotificationType@CTempoTrack@@UAGJABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8
_rguidNotification$ = 12
?RemoveNotificationType@CTempoTrack@@UAGJABU_GUID@@@Z PROC NEAR ; CTempoTrack::RemoveNotificationType, COMDAT

; 879  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 880  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 881  : }

  00008	5d		 pop	 ebp
  00009	c2 08 00	 ret	 8
?RemoveNotificationType@CTempoTrack@@UAGJABU_GUID@@@Z ENDP ; CTempoTrack::RemoveNotificationType
_TEXT	ENDS
PUBLIC	??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??Clone@CTempoTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Clone@CTempoTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::Clone', 00H		; `CTempoTrack::Clone'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
CONST	SEGMENT
??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@ DB '%s: Inva'
	DB	'lid pointer ppTrack', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Clone@CTempoTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT
tv85 = -12
$T70675 = -8
_pDM$ = -4
_this$ = 8
_mtStart$ = 12
_mtEnd$ = 16
_ppTrack$ = 20
?Clone@CTempoTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z PROC NEAR ; CTempoTrack::Clone, COMDAT

; 887  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 888  : 	V_INAME(IDirectMusicTrack::Clone);
; 889  : 	V_PTRPTR_WRITE(ppTrack);

  00006	6a 04		 push	 4
  00008	8b 45 14	 mov	 eax, DWORD PTR _ppTrack$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L70031
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Clone@CTempoTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@DBOFCDJN@?$CFs?3?5Invalid?5pointer?5ppTrack?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L70031:

; 890  : 
; 891  : 	if(mtStart < 0 )

  0002e	83 7d 0c 00	 cmp	 DWORD PTR _mtStart$[ebp], 0
  00032	7d 0a		 jge	 SHORT $L70032

; 892  : 	{
; 893  : 		return E_INVALIDARG;

  00034	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00039	e9 86 00 00 00	 jmp	 $L70027
$L70032:

; 894  : 	}
; 895  : 	if(mtStart > mtEnd)

  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  00041	3b 4d 10	 cmp	 ecx, DWORD PTR _mtEnd$[ebp]
  00044	7e 07		 jle	 SHORT $L70034

; 896  : 	{
; 897  : 		return E_INVALIDARG;

  00046	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  0004b	eb 77		 jmp	 SHORT $L70027
$L70034:

; 898  : 	}
; 899  : 
; 900  : 	ENTER_CRITICAL_SECTION(&m_CrSec);

  0004d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00050	83 c2 10	 add	 edx, 16			; 00000010H
  00053	52		 push	 edx
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 901  : 
; 902  :     CTempoTrack *pDM;
; 903  :     NEWCATCH(pDM,CTempoTrack(*this, mtStart, mtEnd))

  0005a	6a 44		 push	 68			; 00000044H
  0005c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00061	83 c4 04	 add	 esp, 4
  00064	89 45 f8	 mov	 DWORD PTR $T70675[ebp], eax
  00067	83 7d f8 00	 cmp	 DWORD PTR $T70675[ebp], 0
  0006b	74 1c		 je	 SHORT $L70676
  0006d	8b 45 10	 mov	 eax, DWORD PTR _mtEnd$[ebp]
  00070	50		 push	 eax
  00071	8b 4d 0c	 mov	 ecx, DWORD PTR _mtStart$[ebp]
  00074	51		 push	 ecx
  00075	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00078	83 ea 04	 sub	 edx, 4
  0007b	52		 push	 edx
  0007c	8b 4d f8	 mov	 ecx, DWORD PTR $T70675[ebp]
  0007f	e8 00 00 00 00	 call	 ??0CTempoTrack@@QAE@ABV0@JJ@Z ; CTempoTrack::CTempoTrack
  00084	89 45 f4	 mov	 DWORD PTR tv85[ebp], eax
  00087	eb 07		 jmp	 SHORT $L70677
$L70676:
  00089	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$L70677:
  00090	8b 45 f4	 mov	 eax, DWORD PTR tv85[ebp]
  00093	89 45 fc	 mov	 DWORD PTR _pDM$[ebp], eax

; 904  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  00096	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 10	 add	 ecx, 16			; 00000010H
  0009c	51		 push	 ecx
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 905  :     if (pDM == NULL) 

  000a3	83 7d fc 00	 cmp	 DWORD PTR _pDM$[ebp], 0
  000a7	75 07		 jne	 SHORT $L70039

; 906  :     {
; 907  :         return E_OUTOFMEMORY;

  000a9	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  000ae	eb 14		 jmp	 SHORT $L70027
$L70039:

; 908  :     }
; 909  : 	return pDM->QueryInterface(IID_IDirectMusicTrack, (void**)ppTrack);

  000b0	8b 55 14	 mov	 edx, DWORD PTR _ppTrack$[ebp]
  000b3	52		 push	 edx
  000b4	68 00 00 00 00	 push	 OFFSET FLAT:_IID_IDirectMusicTrack
  000b9	8b 45 fc	 mov	 eax, DWORD PTR _pDM$[ebp]
  000bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000be	8b 55 fc	 mov	 edx, DWORD PTR _pDM$[ebp]
  000c1	52		 push	 edx
  000c2	ff 11		 call	 DWORD PTR [ecx]
$L70027:

; 910  : }

  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 10 00	 ret	 16			; 00000010H
?Clone@CTempoTrack@@UAGJJJPAPAUIDirectMusicTrack@@@Z ENDP ; CTempoTrack::Clone
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Compose@CTempoTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z
_TEXT	SEGMENT
_this$ = 8
_pContext$ = 12
_dwTrackGroup$ = 16
_ppResultTrack$ = 20
?Compose@CTempoTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z PROC NEAR ; CTempoTrack::Compose, COMDAT

; 916  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 917  : 	return E_NOTIMPL;

  00003	b8 01 40 00 80	 mov	 eax, -2147467263	; 80004001H

; 918  : }

  00008	5d		 pop	 ebp
  00009	c2 10 00	 ret	 16			; 00000010H
?Compose@CTempoTrack@@UAGJPAUIUnknown@@KPAPAUIDirectMusicTrack@@@Z ENDP ; CTempoTrack::Compose
_TEXT	ENDS
PUBLIC	?JoinInternal@CTempoTrack@@IAEJPAUIDirectMusicTrack@@JK@Z ; CTempoTrack::JoinInternal
PUBLIC	??_C@_0BP@OBDKOLBG@?$CFs?3?5Invalid?5pointer?5pNewTrack?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@NLJNHMHF@?$CFs?3?5Invalid?5pointer?5pContext?6?$AA@ ; `string'
PUBLIC	??_C@_0CD@JILJHMLB@?$CFs?3?5Invalid?5pointer?5ppResultTrac@ ; `string'
;	COMDAT ?__szValidateInterfaceName@?1??Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU3@@Z@4QBDB
CONST	SEGMENT
?__szValidateInterfaceName@?1??Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU3@@Z@4QBDB DB 'I'
	DB	'DirectMusicTrack::Join', 00H		; `CTempoTrack::Join'::`2'::__szValidateInterfaceName
CONST	ENDS
;	COMDAT ??_C@_0BP@OBDKOLBG@?$CFs?3?5Invalid?5pointer?5pNewTrack?6?$AA@
CONST	SEGMENT
??_C@_0BP@OBDKOLBG@?$CFs?3?5Invalid?5pointer?5pNewTrack?6?$AA@ DB '%s: In'
	DB	'valid pointer pNewTrack', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NLJNHMHF@?$CFs?3?5Invalid?5pointer?5pContext?6?$AA@
CONST	SEGMENT
??_C@_0BO@NLJNHMHF@?$CFs?3?5Invalid?5pointer?5pContext?6?$AA@ DB '%s: Inv'
	DB	'alid pointer pContext', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JILJHMLB@?$CFs?3?5Invalid?5pointer?5ppResultTrac@
CONST	SEGMENT
??_C@_0CD@JILJHMLB@?$CFs?3?5Invalid?5pointer?5ppResultTrac@ DB '%s: Inval'
	DB	'id pointer ppResultTrack', 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z
_TEXT	SEGMENT
tv165 = -8
_hr$ = -4
_this$ = 8
_pNewTrack$ = 12
_mtJoin$ = 16
_pContext$ = 20
_dwTrackGroup$ = 24
_ppResultTrack$ = 28
?Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z PROC NEAR ; CTempoTrack::Join, COMDAT

; 926  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 927  : 	V_INAME(IDirectMusicTrack::Join);
; 928  : 	V_INTERFACE(pNewTrack);

  00006	6a 04		 push	 4
  00008	8b 45 0c	 mov	 eax, DWORD PTR _pNewTrack$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00011	85 c0		 test	 eax, eax
  00013	74 19		 je	 SHORT $L70060
  00015	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU3@@Z@4QBDB
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@OBDKOLBG@?$CFs?3?5Invalid?5pointer?5pNewTrack?6?$AA@
  0001f	6a ff		 push	 -1
  00021	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	e8 00 00 00 00	 call	 _DebugBreak@0
$L70060:
  0002e	6a 04		 push	 4
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _pNewTrack$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  0003b	85 c0		 test	 eax, eax
  0003d	74 19		 je	 SHORT $L70064
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU3@@Z@4QBDB
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@OBDKOLBG@?$CFs?3?5Invalid?5pointer?5pNewTrack?6?$AA@
  00049	6a ff		 push	 -1
  0004b	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	e8 00 00 00 00	 call	 _DebugBreak@0
$L70064:
  00058	8b 45 0c	 mov	 eax, DWORD PTR _pNewTrack$[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  00065	85 c0		 test	 eax, eax
  00067	74 19		 je	 SHORT $L70066
  00069	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU3@@Z@4QBDB
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@OBDKOLBG@?$CFs?3?5Invalid?5pointer?5pNewTrack?6?$AA@
  00073	6a ff		 push	 -1
  00075	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	e8 00 00 00 00	 call	 _DebugBreak@0
$L70066:

; 929  : 	V_INTERFACE_OPT(pContext);

  00082	83 7d 14 00	 cmp	 DWORD PTR _pContext$[ebp], 0
  00086	74 7c		 je	 SHORT $L70067
  00088	6a 04		 push	 4
  0008a	8b 45 14	 mov	 eax, DWORD PTR _pContext$[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  00093	85 c0		 test	 eax, eax
  00095	74 19		 je	 SHORT $L70069
  00097	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU3@@Z@4QBDB
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@NLJNHMHF@?$CFs?3?5Invalid?5pointer?5pContext?6?$AA@
  000a1	6a ff		 push	 -1
  000a3	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ab	e8 00 00 00 00	 call	 _DebugBreak@0
$L70069:
  000b0	6a 04		 push	 4
  000b2	8b 4d 14	 mov	 ecx, DWORD PTR _pContext$[ebp]
  000b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b7	52		 push	 edx
  000b8	e8 00 00 00 00	 call	 _IsBadReadPtr@8
  000bd	85 c0		 test	 eax, eax
  000bf	74 19		 je	 SHORT $L70073
  000c1	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU3@@Z@4QBDB
  000c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@NLJNHMHF@?$CFs?3?5Invalid?5pointer?5pContext?6?$AA@
  000cb	6a ff		 push	 -1
  000cd	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d5	e8 00 00 00 00	 call	 _DebugBreak@0
$L70073:
  000da	8b 45 14	 mov	 eax, DWORD PTR _pContext$[ebp]
  000dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000df	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 _IsBadCodePtr@4
  000e7	85 c0		 test	 eax, eax
  000e9	74 19		 je	 SHORT $L70067
  000eb	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU3@@Z@4QBDB
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@NLJNHMHF@?$CFs?3?5Invalid?5pointer?5pContext?6?$AA@
  000f5	6a ff		 push	 -1
  000f7	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	e8 00 00 00 00	 call	 _DebugBreak@0
$L70067:

; 930  : 	V_PTRPTR_WRITE_OPT(ppResultTrack);

  00104	83 7d 1c 00	 cmp	 DWORD PTR _ppResultTrack$[ebp], 0
  00108	74 28		 je	 SHORT $L70076
  0010a	6a 04		 push	 4
  0010c	8b 45 1c	 mov	 eax, DWORD PTR _ppResultTrack$[ebp]
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _IsBadWritePtr@8
  00115	85 c0		 test	 eax, eax
  00117	74 19		 je	 SHORT $L70076
  00119	68 00 00 00 00	 push	 OFFSET FLAT:?__szValidateInterfaceName@?1??Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU3@@Z@4QBDB
  0011e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JILJHMLB@?$CFs?3?5Invalid?5pointer?5ppResultTrac@
  00123	6a ff		 push	 -1
  00125	e8 00 00 00 00	 call	 ?DebugTrace@@YAXHPADZZ	; DebugTrace
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012d	e8 00 00 00 00	 call	 _DebugBreak@0
$L70076:

; 931  : 
; 932  :     HRESULT hr = S_OK;

  00132	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 933  :     ENTER_CRITICAL_SECTION(&m_CrSec);

  00139	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0013c	83 c1 10	 add	 ecx, 16			; 00000010H
  0013f	51		 push	 ecx
  00140	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 934  : 
; 935  : 	if (ppResultTrack)

  00146	83 7d 1c 00	 cmp	 DWORD PTR _ppResultTrack$[ebp], 0
  0014a	74 54		 je	 SHORT $L70082

; 936  : 	{
; 937  : 		hr = Clone(0, mtJoin, ppResultTrack);

  0014c	8b 55 1c	 mov	 edx, DWORD PTR _ppResultTrack$[ebp]
  0014f	52		 push	 edx
  00150	8b 45 10	 mov	 eax, DWORD PTR _mtJoin$[ebp]
  00153	50		 push	 eax
  00154	6a 00		 push	 0
  00156	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00159	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0015c	8b 02		 mov	 eax, DWORD PTR [edx]
  0015e	51		 push	 ecx
  0015f	ff 50 30	 call	 DWORD PTR [eax+48]
  00162	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 938  : 		if (SUCCEEDED(hr))

  00165	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00169	7c 33		 jl	 SHORT $L70084

; 939  : 		{
; 940  : 			hr = ((CTempoTrack*)*ppResultTrack)->JoinInternal(pNewTrack, mtJoin, dwTrackGroup);

  0016b	8b 4d 1c	 mov	 ecx, DWORD PTR _ppResultTrack$[ebp]
  0016e	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00171	74 0d		 je	 SHORT $L70684
  00173	8b 55 1c	 mov	 edx, DWORD PTR _ppResultTrack$[ebp]
  00176	8b 02		 mov	 eax, DWORD PTR [edx]
  00178	83 e8 04	 sub	 eax, 4
  0017b	89 45 f8	 mov	 DWORD PTR tv165[ebp], eax
  0017e	eb 07		 jmp	 SHORT $L70685
$L70684:
  00180	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$L70685:
  00187	8b 4d 18	 mov	 ecx, DWORD PTR _dwTrackGroup$[ebp]
  0018a	51		 push	 ecx
  0018b	8b 55 10	 mov	 edx, DWORD PTR _mtJoin$[ebp]
  0018e	52		 push	 edx
  0018f	8b 45 0c	 mov	 eax, DWORD PTR _pNewTrack$[ebp]
  00192	50		 push	 eax
  00193	8b 4d f8	 mov	 ecx, DWORD PTR tv165[ebp]
  00196	e8 00 00 00 00	 call	 ?JoinInternal@CTempoTrack@@IAEJPAUIDirectMusicTrack@@JK@Z ; CTempoTrack::JoinInternal
  0019b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L70084:

; 941  : 		}
; 942  : 	}
; 943  : 	else

  0019e	eb 1a		 jmp	 SHORT $L70086
$L70082:

; 944  : 	{
; 945  : 		hr = JoinInternal(pNewTrack, mtJoin, dwTrackGroup);

  001a0	8b 4d 18	 mov	 ecx, DWORD PTR _dwTrackGroup$[ebp]
  001a3	51		 push	 ecx
  001a4	8b 55 10	 mov	 edx, DWORD PTR _mtJoin$[ebp]
  001a7	52		 push	 edx
  001a8	8b 45 0c	 mov	 eax, DWORD PTR _pNewTrack$[ebp]
  001ab	50		 push	 eax
  001ac	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001af	83 e9 04	 sub	 ecx, 4
  001b2	e8 00 00 00 00	 call	 ?JoinInternal@CTempoTrack@@IAEJPAUIDirectMusicTrack@@JK@Z ; CTempoTrack::JoinInternal
  001b7	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L70086:

; 946  : 	}
; 947  : 
; 948  : 	LEAVE_CRITICAL_SECTION(&m_CrSec);

  001ba	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001bd	83 c1 10	 add	 ecx, 16			; 00000010H
  001c0	51		 push	 ecx
  001c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 949  : 	return hr;

  001c7	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 950  : }

  001ca	8b e5		 mov	 esp, ebp
  001cc	5d		 pop	 ebp
  001cd	c2 18 00	 ret	 24			; 00000018H
?Join@CTempoTrack@@UAGJPAUIDirectMusicTrack@@JPAUIUnknown@@KPAPAU2@@Z ENDP ; CTempoTrack::Join
_TEXT	ENDS
PUBLIC	?AddTail@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z ; TList<_DMUS_IO_TEMPO_ITEM>::AddTail
; Function compile flags: /Odt
;	COMDAT ?JoinInternal@CTempoTrack@@IAEJPAUIDirectMusicTrack@@JK@Z
_TEXT	SEGMENT
tv80 = -40
tv66 = -36
_this$ = -32
$T70691 = -28
_rNew$70106 = -24
_pNew$70102 = -20
_rScan$70101 = -16
_hr$ = -12
_pScan$ = -8
_pOtherTrack$ = -4
_pNewTrack$ = 8
_mtJoin$ = 12
_dwTrackGroup$ = 16
?JoinInternal@CTempoTrack@@IAEJPAUIDirectMusicTrack@@JK@Z PROC NEAR ; CTempoTrack::JoinInternal, COMDAT
; _this$ = ecx

; 956  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 957  :     HRESULT hr = S_OK;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 958  : 	CTempoTrack* pOtherTrack = (CTempoTrack*)pNewTrack;

  00010	83 7d 08 00	 cmp	 DWORD PTR _pNewTrack$[ebp], 0
  00014	74 0b		 je	 SHORT $L70689
  00016	8b 45 08	 mov	 eax, DWORD PTR _pNewTrack$[ebp]
  00019	83 e8 04	 sub	 eax, 4
  0001c	89 45 dc	 mov	 DWORD PTR tv66[ebp], eax
  0001f	eb 07		 jmp	 SHORT $L70690
$L70689:
  00021	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L70690:
  00028	8b 4d dc	 mov	 ecx, DWORD PTR tv66[ebp]
  0002b	89 4d fc	 mov	 DWORD PTR _pOtherTrack$[ebp], ecx

; 959  : 	TListItem<DMUS_IO_TEMPO_ITEM>* pScan = pOtherTrack->m_TempoEventList.GetHead();

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _pOtherTrack$[ebp]
  00031	83 c1 08	 add	 ecx, 8
  00034	e8 00 00 00 00	 call	 ?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ; TList<_DMUS_IO_TEMPO_ITEM>::GetHead
  00039	89 45 f8	 mov	 DWORD PTR _pScan$[ebp], eax

; 960  : 	for (; pScan; pScan = pScan->GetNext())

  0003c	eb 0b		 jmp	 SHORT $L70098
$L70099:
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00041	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetNext
  00046	89 45 f8	 mov	 DWORD PTR _pScan$[ebp], eax
$L70098:
  00049	83 7d f8 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  0004d	0f 84 87 00 00
	00		 je	 $L70100

; 961  : 	{
; 962  : 		DMUS_IO_TEMPO_ITEM& rScan = pScan->GetItemValue();

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$[ebp]
  00056	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  0005b	89 45 f0	 mov	 DWORD PTR _rScan$70101[ebp], eax

; 963  : 		TListItem<DMUS_IO_TEMPO_ITEM>* pNew = new TListItem<DMUS_IO_TEMPO_ITEM>;

  0005e	6a 18		 push	 24			; 00000018H
  00060	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00065	83 c4 04	 add	 esp, 4
  00068	89 45 e4	 mov	 DWORD PTR $T70691[ebp], eax
  0006b	83 7d e4 00	 cmp	 DWORD PTR $T70691[ebp], 0
  0006f	74 0d		 je	 SHORT $L70692
  00071	8b 4d e4	 mov	 ecx, DWORD PTR $T70691[ebp]
  00074	e8 00 00 00 00	 call	 ??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::TListItem<_DMUS_IO_TEMPO_ITEM>
  00079	89 45 d8	 mov	 DWORD PTR tv80[ebp], eax
  0007c	eb 07		 jmp	 SHORT $L70693
$L70692:
  0007e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$L70693:
  00085	8b 55 d8	 mov	 edx, DWORD PTR tv80[ebp]
  00088	89 55 ec	 mov	 DWORD PTR _pNew$70102[ebp], edx

; 964  : 		if (pNew)

  0008b	83 7d ec 00	 cmp	 DWORD PTR _pNew$70102[ebp], 0
  0008f	74 3b		 je	 SHORT $L70105

; 965  : 		{
; 966  : 			DMUS_IO_TEMPO_ITEM& rNew = pNew->GetItemValue();

  00091	8b 4d ec	 mov	 ecx, DWORD PTR _pNew$70102[ebp]
  00094	e8 00 00 00 00	 call	 ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
  00099	89 45 e8	 mov	 DWORD PTR _rNew$70106[ebp], eax

; 967  : 			rNew.lTime = rScan.lTime + mtJoin;

  0009c	8b 45 f0	 mov	 eax, DWORD PTR _rScan$70101[ebp]
  0009f	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a1	03 4d 0c	 add	 ecx, DWORD PTR _mtJoin$[ebp]
  000a4	8b 55 e8	 mov	 edx, DWORD PTR _rNew$70106[ebp]
  000a7	89 0a		 mov	 DWORD PTR [edx], ecx

; 968  : 			rNew.dblTempo = rScan.dblTempo;

  000a9	8b 45 e8	 mov	 eax, DWORD PTR _rNew$70106[ebp]
  000ac	8b 4d f0	 mov	 ecx, DWORD PTR _rScan$70101[ebp]
  000af	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000b2	89 50 08	 mov	 DWORD PTR [eax+8], edx
  000b5	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  000b8	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 969  : 			m_TempoEventList.AddTail(pNew);

  000bb	8b 55 ec	 mov	 edx, DWORD PTR _pNew$70102[ebp]
  000be	52		 push	 edx
  000bf	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	83 c1 08	 add	 ecx, 8
  000c5	e8 00 00 00 00	 call	 ?AddTail@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z ; TList<_DMUS_IO_TEMPO_ITEM>::AddTail

; 970  : 		}
; 971  : 		else

  000ca	eb 09		 jmp	 SHORT $L70107
$L70105:

; 972  : 		{
; 973  : 			hr = E_OUTOFMEMORY;

  000cc	c7 45 f4 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH

; 974  : 			break;

  000d3	eb 05		 jmp	 SHORT $L70100
$L70107:

; 975  : 		}
; 976  : 	}

  000d5	e9 64 ff ff ff	 jmp	 $L70099
$L70100:

; 977  : 	return hr;

  000da	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 978  : }

  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 0c 00	 ret	 12			; 0000000cH
?JoinInternal@CTempoTrack@@IAEJPAUIDirectMusicTrack@@JK@Z ENDP ; CTempoTrack::JoinInternal
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\tlist.h
_TEXT	ENDS
;	COMDAT ??0?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ PROC NEAR	; TList<_DMUS_IO_TEMPO_ITEM>::TList<_DMUS_IO_TEMPO_ITEM>, COMDAT
; _this$ = ecx

; 55   :     TList() {m_pHead=NULL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ ENDP		; TList<_DMUS_IO_TEMPO_ITEM>::TList<_DMUS_IO_TEMPO_ITEM>
_TEXT	ENDS
PUBLIC	?Delete@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@SGXPAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::Delete
; Function compile flags: /Odt
;	COMDAT ??1?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ PROC NEAR	; TList<_DMUS_IO_TEMPO_ITEM>::~TList<_DMUS_IO_TEMPO_ITEM>, COMDAT
; _this$ = ecx

; 57   : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 58   : 		//if (m_pHead != NULL) delete m_pHead;
; 59   : 		TListItem<T>::Delete(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?Delete@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@SGXPAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::Delete

; 60   : 	} // new destructor

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??1?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ ENDP		; TList<_DMUS_IO_TEMPO_ITEM>::~TList<_DMUS_IO_TEMPO_ITEM>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ PROC NEAR ; TList<_DMUS_IO_TEMPO_ITEM>::GetHead, COMDAT
; _this$ = ecx

; 61   :     TListItem<T> *GetHead() const { return m_pHead;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ENDP ; TList<_DMUS_IO_TEMPO_ITEM>::GetHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z PROC NEAR ; TList<_DMUS_IO_TEMPO_ITEM>::AddHead, COMDAT
; _this$ = ecx

; 80   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : //            assert(pItem!=NULL);
; 82   :             pItem->SetNext(m_pHead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00010	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::SetNext

; 83   :             m_pHead=pItem;

  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0001b	89 02		 mov	 DWORD PTR [edx], eax

; 84   :         }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?AddHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z ENDP ; TList<_DMUS_IO_TEMPO_ITEM>::AddHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RemoveHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ
_TEXT	SEGMENT
_this$ = -8
_li$ = -4
?RemoveHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ PROC NEAR ; TList<_DMUS_IO_TEMPO_ITEM>::RemoveHead, COMDAT
; _this$ = ecx

; 91   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 92   :             TListItem<T> *li;
; 93   :             li=m_pHead;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR _li$[ebp], ecx

; 94   :             if(m_pHead)

  00011	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00014	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00017	74 19		 je	 SHORT $L70120

; 95   : 			{
; 96   :                 m_pHead=m_pHead->GetNext();

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetNext
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	89 01		 mov	 DWORD PTR [ecx], eax

; 97   : 				li->SetNext(NULL);

  00028	6a 00		 push	 0
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  0002d	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::SetNext
$L70120:

; 98   : 			}
; 99   :             return li;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _li$[ebp]

; 100  :         }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?RemoveHead@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@XZ ENDP ; TList<_DMUS_IO_TEMPO_ITEM>::RemoveHead
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ PROC NEAR	; TListItem<_DMUS_IO_TEMPO_ITEM>::TListItem<_DMUS_IO_TEMPO_ITEM>, COMDAT
; _this$ = ecx

; 28   :     TListItem() { m_pNext=NULL; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ ENDP	; TListItem<_DMUS_IO_TEMPO_ITEM>::TListItem<_DMUS_IO_TEMPO_ITEM>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@ABU_DMUS_IO_TEMPO_ITEM@@@Z
_TEXT	SEGMENT
_this$ = -4
_item$ = 8
??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@ABU_DMUS_IO_TEMPO_ITEM@@@Z PROC NEAR ; TListItem<_DMUS_IO_TEMPO_ITEM>::TListItem<_DMUS_IO_TEMPO_ITEM>, COMDAT
; _this$ = ecx

; 31   :     TListItem(const T& item) { m_Tinfo = item; m_pNext=NULL; };	// additional constructor.

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _item$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	89 11		 mov	 DWORD PTR [ecx], edx
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00017	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001a	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0001d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00020	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@ABU_DMUS_IO_TEMPO_ITEM@@@Z ENDP ; TListItem<_DMUS_IO_TEMPO_ITEM>::TListItem<_DMUS_IO_TEMPO_ITEM>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4
?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ PROC NEAR ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetNext, COMDAT
; _this$ = ecx

; 32   :     TListItem<T> *GetNext() const {return m_pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ ENDP ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pNext$ = 8
?SetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV1@@Z PROC NEAR ; TListItem<_DMUS_IO_TEMPO_ITEM>::SetNext, COMDAT
; _this$ = ecx

; 33   :     void SetNext(TListItem<T> *pNext) {m_pNext=pNext;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pNext$[ebp]
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV1@@Z ENDP ; TListItem<_DMUS_IO_TEMPO_ITEM>::SetNext
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ
_TEXT	SEGMENT
_this$ = -4
?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ PROC NEAR ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue, COMDAT
; _this$ = ecx

; 40   :     T& GetItemValue() { return m_Tinfo; }  // additional member function

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?GetItemValue@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEAAU_DMUS_IO_TEMPO_ITEM@@XZ ENDP ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetItemValue
_TEXT	ENDS
PUBLIC	?AddTail@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV1@PAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::AddTail
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\tlist.cpp
;	COMDAT ?AddTail@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddTail@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z PROC NEAR ; TList<_DMUS_IO_TEMPO_ITEM>::AddTail, COMDAT
; _this$ = ecx

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 185  : 	m_pHead = m_pHead->AddTail(pItem);

  00007	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00010	e8 00 00 00 00	 call	 ?AddTail@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV1@PAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::AddTail
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	89 02		 mov	 DWORD PTR [edx], eax

; 186  : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?AddTail@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@@Z ENDP ; TList<_DMUS_IO_TEMPO_ITEM>::AddTail
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Reverse@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12
_pNewHead$70251 = -8
_pNext$70252 = -4
?Reverse@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXXZ PROC NEAR ; TList<_DMUS_IO_TEMPO_ITEM>::Reverse, COMDAT
; _this$ = ecx

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 198  : 	if( m_pHead )

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 66		 je	 SHORT $L70249

; 199  : 	{
; 200  : 		TListItem<T>* pNewHead = m_pHead;

  00011	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 55 f8	 mov	 DWORD PTR _pNewHead$70251[ebp], edx

; 201  : 		TListItem<T>* pNext = m_pHead->GetNext();

  00019	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetNext
  00023	89 45 fc	 mov	 DWORD PTR _pNext$70252[ebp], eax

; 202  : 		pNewHead->SetNext(NULL);

  00026	6a 00		 push	 0
  00028	8b 4d f8	 mov	 ecx, DWORD PTR _pNewHead$70251[ebp]
  0002b	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::SetNext

; 203  : 		for( m_pHead = pNext; m_pHead; m_pHead = pNext )

  00030	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 55 fc	 mov	 edx, DWORD PTR _pNext$70252[ebp]
  00036	89 11		 mov	 DWORD PTR [ecx], edx
  00038	eb 08		 jmp	 SHORT $L70253
$L70254:
  0003a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _pNext$70252[ebp]
  00040	89 08		 mov	 DWORD PTR [eax], ecx
$L70253:
  00042	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00045	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00048	74 25		 je	 SHORT $L70255

; 204  : 		{
; 205  : 			pNext = m_pHead->GetNext();

  0004a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004f	e8 00 00 00 00	 call	 ?GetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QBEPAV1@XZ ; TListItem<_DMUS_IO_TEMPO_ITEM>::GetNext
  00054	89 45 fc	 mov	 DWORD PTR _pNext$70252[ebp], eax

; 206  : 			m_pHead->SetNext(pNewHead);

  00057	8b 4d f8	 mov	 ecx, DWORD PTR _pNewHead$70251[ebp]
  0005a	51		 push	 ecx
  0005b	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00060	e8 00 00 00 00	 call	 ?SetNext@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEXPAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::SetNext

; 207  : 			pNewHead = m_pHead;

  00065	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006a	89 4d f8	 mov	 DWORD PTR _pNewHead$70251[ebp], ecx

; 208  : 		}

  0006d	eb cb		 jmp	 SHORT $L70254
$L70255:

; 209  : 		m_pHead = pNewHead;

  0006f	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00072	8b 45 f8	 mov	 eax, DWORD PTR _pNewHead$70251[ebp]
  00075	89 02		 mov	 DWORD PTR [edx], eax
$L70249:

; 210  : 	}
; 211  : }

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?Reverse@?$TList@U_DMUS_IO_TEMPO_ITEM@@@@QAEXXZ ENDP	; TList<_DMUS_IO_TEMPO_ITEM>::Reverse
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??1?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ PROC NEAR	; TListItem<_DMUS_IO_TEMPO_ITEM>::~TListItem<_DMUS_IO_TEMPO_ITEM>, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	//if (m_pNext != NULL) { delete m_pNext; }
; 22   : 	// IMPORTANT: user of the list is required to delete content first!
; 23   : 	//ZeroMemory(&m_Tinfo, sizeof(T));
; 24   : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAE@XZ ENDP	; TListItem<_DMUS_IO_TEMPO_ITEM>::~TListItem<_DMUS_IO_TEMPO_ITEM>
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Delete@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@SGXPAV1@@Z
_TEXT	SEGMENT
tv70 = -20
$T70737 = -16
$T70736 = -12
_pScan$ = -8
_pNext$ = -4
_pFirst$ = 8
?Delete@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@SGXPAV1@@Z PROC NEAR ; TListItem<_DMUS_IO_TEMPO_ITEM>::Delete, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 29   : 	TListItem<T>* pScan = pFirst;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pFirst$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _pScan$[ebp], eax

; 30   : 	TListItem<T>* pNext = NULL;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pNext$[ebp], 0
$L70265:

; 31   : 	while (pScan)

  00013	83 7d f8 00	 cmp	 DWORD PTR _pScan$[ebp], 0
  00017	74 39		 je	 SHORT $L70261

; 32   : 	{
; 33   : 		pNext = pScan->m_pNext;

  00019	8b 4d f8	 mov	 ecx, DWORD PTR _pScan$[ebp]
  0001c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0001f	89 55 fc	 mov	 DWORD PTR _pNext$[ebp], edx

; 34   : 		delete pScan;

  00022	8b 45 f8	 mov	 eax, DWORD PTR _pScan$[ebp]
  00025	89 45 f0	 mov	 DWORD PTR $T70737[ebp], eax
  00028	8b 4d f0	 mov	 ecx, DWORD PTR $T70737[ebp]
  0002b	89 4d f4	 mov	 DWORD PTR $T70736[ebp], ecx
  0002e	83 7d f4 00	 cmp	 DWORD PTR $T70736[ebp], 0
  00032	74 0f		 je	 SHORT $L70738
  00034	6a 01		 push	 1
  00036	8b 4d f4	 mov	 ecx, DWORD PTR $T70736[ebp]
  00039	e8 00 00 00 00	 call	 ??_G?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAXI@Z
  0003e	89 45 ec	 mov	 DWORD PTR tv70[ebp], eax
  00041	eb 07		 jmp	 SHORT $L70739
$L70738:
  00043	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$L70739:

; 35   : 		pScan = pNext;

  0004a	8b 55 fc	 mov	 edx, DWORD PTR _pNext$[ebp]
  0004d	89 55 f8	 mov	 DWORD PTR _pScan$[ebp], edx

; 36   : 	}

  00050	eb c1		 jmp	 SHORT $L70265
$L70261:

; 37   : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?Delete@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@SGXPAV1@@Z ENDP ; TListItem<_DMUS_IO_TEMPO_ITEM>::Delete
_TEXT	ENDS
PUBLIC	?Cat@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV1@PAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::Cat
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\tlist.h
;	COMDAT ?AddTail@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV1@PAV1@@Z
_TEXT	SEGMENT
_this$ = -4
_pItem$ = 8
?AddTail@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV1@PAV1@@Z PROC NEAR ; TListItem<_DMUS_IO_TEMPO_ITEM>::AddTail, COMDAT
; _this$ = ecx

; 36   :     TListItem<T>* AddTail(TListItem<T>* pItem) {return Cat(pItem);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?Cat@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV1@PAV1@@Z ; TListItem<_DMUS_IO_TEMPO_ITEM>::Cat
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?AddTail@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV1@PAV1@@Z ENDP ; TListItem<_DMUS_IO_TEMPO_ITEM>::AddTail
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\tlist.cpp
_TEXT	ENDS
;	COMDAT ?Cat@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV1@PAV1@@Z
_TEXT	SEGMENT
_this$ = -8
_li$ = -4
_pItem$ = 8
?Cat@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV1@PAV1@@Z PROC NEAR ; TListItem<_DMUS_IO_TEMPO_ITEM>::Cat, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :     TListItem<T> *li;
; 53   : 
; 54   :     if(this==NULL)

  00009	83 7d f8 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 05		 jne	 SHORT $L70296

; 55   :         return pItem;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00012	eb 28		 jmp	 SHORT $L70294
$L70296:

; 56   :     for(li=this ; li->m_pNext!=NULL ; li=li->m_pNext);

  00014	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00017	89 45 fc	 mov	 DWORD PTR _li$[ebp], eax
  0001a	eb 09		 jmp	 SHORT $L70297
$L70298:
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  0001f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00022	89 55 fc	 mov	 DWORD PTR _li$[ebp], edx
$L70297:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _li$[ebp]
  00028	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0002c	74 02		 je	 SHORT $L70299
  0002e	eb ec		 jmp	 SHORT $L70298
$L70299:

; 57   :     li->m_pNext=pItem;

  00030	8b 4d fc	 mov	 ecx, DWORD PTR _li$[ebp]
  00033	8b 55 08	 mov	 edx, DWORD PTR _pItem$[ebp]
  00036	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 58   :     return this;

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$L70294:

; 59   : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?Cat@?$TListItem@U_DMUS_IO_TEMPO_ITEM@@@@QAEPAV1@PAV1@@Z ENDP ; TListItem<_DMUS_IO_TEMPO_ITEM>::Cat
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?QueryInterface@CTempoTrack@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CTempoTrack@@W3AGJABU_GUID@@PAPAX@Z PROC NEAR ; CTempoTrack::QueryInterface, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CTempoTrack@@UAGJABU_GUID@@PAPAX@Z ; CTempoTrack::QueryInterface
?QueryInterface@CTempoTrack@@W3AGJABU_GUID@@PAPAX@Z ENDP ; CTempoTrack::QueryInterface
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CTempoTrack@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CTempoTrack@@W3AGKXZ PROC NEAR			; CTempoTrack::AddRef, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CTempoTrack@@UAGKXZ ; CTempoTrack::AddRef
?AddRef@CTempoTrack@@W3AGKXZ ENDP			; CTempoTrack::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CTempoTrack@@W3AGKXZ
_TEXT	SEGMENT
?Release@CTempoTrack@@W3AGKXZ PROC NEAR			; CTempoTrack::Release, COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?Release@CTempoTrack@@UAGKXZ ; CTempoTrack::Release
?Release@CTempoTrack@@W3AGKXZ ENDP			; CTempoTrack::Release
_TEXT	ENDS
EXTRN	?DirectMusicAllocI@@YGPAXI@Z:NEAR		; DirectMusicAllocI
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xalloc.h
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_cb$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 13   :     return DirectMusicAllocI(cb);

  00003	8b 45 08	 mov	 eax, DWORD PTR _cb$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicAllocI@@YGPAXI@Z ; DirectMusicAllocI

; 14   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
EXTRN	?DirectMusicFreeI@@YGXPAX@Z:NEAR		; DirectMusicFreeI
; Function compile flags: /Odt
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pv$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   :     DirectMusicFreeI(pv);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?DirectMusicFreeI@@YGXPAX@Z ; DirectMusicFreeI

; 19   : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\shared\xboxutil.h
_TEXT	ENDS
;	COMDAT ?DeleteCriticalSection@@YGXPAX@Z
_TEXT	SEGMENT
___formal$ = 8
?DeleteCriticalSection@@YGXPAX@Z PROC NEAR		; DeleteCriticalSection, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : }

  00003	5d		 pop	 ebp
  00004	c2 04 00	 ret	 4
?DeleteCriticalSection@@YGXPAX@Z ENDP			; DeleteCriticalSection
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0IUnknown@@QAE@XZ PROC NEAR				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dmusic\dmime\tempotrk.h
_TEXT	ENDS
;	COMDAT ??0TempoStateData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0TempoStateData@@QAE@XZ PROC NEAR			; TempoStateData::TempoStateData, COMDAT
; _this$ = ecx

; 33   : 	TempoStateData()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 34   : 	{
; 35   : 		mtPrevEnd = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 36   : 	}

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0TempoStateData@@QAE@XZ ENDP				; TempoStateData::TempoStateData
_TEXT	ENDS
END
