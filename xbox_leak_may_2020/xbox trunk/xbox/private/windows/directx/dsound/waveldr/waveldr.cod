; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\waveldr.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@KOCFKEKK@?$CBIS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07EDFKGFBI@WAVELDR?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IINNEHHF@CStdFileStream?3?3Open?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@CEKMADFG@Error?5?$CFlu?5occurred?5trying?5to?5ope@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@BFEOIFMP@IS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IKIMPDLN@CStdFileStream?3?3Read?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EBECGKOP@Error?5?$CFlu?5occurred?5reading?5from?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@JEFGPKIM@Not?5enough?5data?5was?5read?5from?5th@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@PGEPINJO@CStdFileStream?3?3Write?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@HNBEJLKA@Error?5?$CFlu?5occurred?5writing?5to?5th@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CK@PPGKDJFB@Not?5enough?5data?5was?5written?5from@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@DHHNGOBO@CStdFileStream?3?3Seek?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CE@IKNCKFMB@Error?5?$CFlu?5occurred?5seeking?5the?5f@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@HKFPFMIN@CStdFileStream?3?3GetLength?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CK@HKLDFKFN@Error?5?$CFlu?5attempting?5to?5get?5the?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@JCIHLOCG@CRiffChunk?3?3Read?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CM@BMKKIDJB@Attempted?5to?5read?5past?5the?5end?5o@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DC@IFKBAFN@?$CIpszFileName?5?$HM?$HM?5hFile?$CJ?5?$CG?$CG?5?$CB?$CIpszF@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@CGAHBFNM@CWaveFile?3?3Open?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@OHEGKMMD@The?5file?5type?5is?5not?5WAVE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@CAIFKCHB@The?5file?5type?5is?5not?5AIFF?1AIFF?9C@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CL@IIKFACCB@The?5file?8s?5AIFF?9C?5version?5is?5not@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04ELFAHOMP@BYTE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@NLKBAEGB@m_pwfxFormat?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@JOBMGAMO@WAVELDR_FILETYPE_WAVE?5?$DN?$DN?5m_dwFil@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@EHNKEHDO@WAVELDR_FILETYPE_AIFF?5?$DN?$DN?5m_dwFil@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EIPMIGEK@CWaveFile?3?3GetAiffFormat?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CC@NCAIELLP@Unsupported?5AIFF?5compression?5typ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CC@IFLBNNFE@CStdFileStream?3?3GetWaveLoopRegio@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@GLLFAJJE@No?5FORWARD?5loop?5regions?5found?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LNLNMGAM@Only?5the?5first?5FORWARD?5loop?5will@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CC@BDOJPMPF@CStdFileStream?3?3GetAiffLoopRegio@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@FNJEOFIE@Neither?5loop?5is?5FORWARD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DF@NNLKMLKP@?$CIDWORD?$CJpStartMarker?5?$DM?5?$CIDWORD?$CJpMa@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@NNMJOLHM@Can?8t?5find?5loop?5start?5marker?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DD@LMHJPJKK@?$CIDWORD?$CJpEndMarker?5?$DM?5?$CIDWORD?$CJpMark@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@NJFKBAAP@Can?8t?5find?5loop?5end?5marker?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DB@NDLCCDDP@Loop?5end?5point?5less?9than?9or?9equa@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CM@HBKMMLMK@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pwfxFormat?9@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@NOEFBMFE@8?5?$DN?$DN?5dwBitDepth?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KeGetCurrentIrql@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KeIsExecutingDpc@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_AddRef@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_Release@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_BeginScene@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_EndScene@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DPalette_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndianSwapWord@@YIGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndianSwapDword@@YIKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CStdFileStream@WaveLoader@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CStdFileStream@WaveLoader@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CStdFileStream@WaveLoader@@QAEXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CStdFileStream@WaveLoader@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Read@CStdFileStream@WaveLoader@@QAEJPAXKPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Seek@CStdFileStream@WaveLoader@@QAEJJKPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@CStdFileStream@WaveLoader@@QAEJPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRiffChunk@WaveLoader@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRiffChunk@WaveLoader@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWaveFile@WaveLoader@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CWaveFile@WaveLoader@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CWaveFile@WaveLoader@@IAEJPBDPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAUtWAVEFORMATEX@@KPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWaveFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAiffFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLoopRegion@CWaveFile@WaveLoader@@QAEJPAK0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWaveLoopRegion@CWaveFile@WaveLoader@@IAEJPAK0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAiffLoopRegion@CWaveFile@WaveLoader@@IAEJPAK0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadSample@CWaveFile@WaveLoader@@QAEJKPAXKPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CWaveFile@WaveLoader@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertAiffPcm@CWaveFile@WaveLoader@@QAEXPAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertAiffPcm@CWaveFile@WaveLoader@@SGXPAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
CONST	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
CONST	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
CONST	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
CONST	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
CONST	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
CONST	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
CONST	ENDS
PUBLIC	??0CStdFileStream@WaveLoader@@QAE@XZ		; WaveLoader::CStdFileStream::CStdFileStream
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\waveldr.cpp
;	COMDAT ??0CStdFileStream@WaveLoader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CStdFileStream@WaveLoader@@QAE@XZ PROC NEAR		; WaveLoader::CStdFileStream::CStdFileStream, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 102  :     DPF_ENTER();
; 103  : 
; 104  :     //
; 105  :     // Initialize defaults
; 106  :     //
; 107  : 
; 108  :     m_hFile = NULL;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 109  :     m_dwFlags = 0;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 110  : 
; 111  :     DPF_LEAVE_VOID();
; 112  : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CStdFileStream@WaveLoader@@QAE@XZ ENDP		; WaveLoader::CStdFileStream::CStdFileStream
_TEXT	ENDS
PUBLIC	??1CStdFileStream@WaveLoader@@QAE@XZ		; WaveLoader::CStdFileStream::~CStdFileStream
PUBLIC	?Close@CStdFileStream@WaveLoader@@QAEXXZ	; WaveLoader::CStdFileStream::Close
; Function compile flags: /Odt
;	COMDAT ??1CStdFileStream@WaveLoader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CStdFileStream@WaveLoader@@QAE@XZ PROC NEAR		; WaveLoader::CStdFileStream::~CStdFileStream, COMDAT
; _this$ = ecx

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 138  :     DPF_ENTER();
; 139  : 
; 140  :     Close();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Close@CStdFileStream@WaveLoader@@QAEXXZ ; WaveLoader::CStdFileStream::Close

; 141  : 
; 142  :     DPF_LEAVE_VOID();
; 143  : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CStdFileStream@WaveLoader@@QAE@XZ ENDP		; WaveLoader::CStdFileStream::~CStdFileStream
_TEXT	ENDS
PUBLIC	??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CA@KOCFKEKK@?$CBIS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@ ; `string'
PUBLIC	??_C@_07EDFKGFBI@WAVELDR?$AA@			; `string'
PUBLIC	??_C@_0BF@IINNEHHF@CStdFileStream?3?3Open?$AA@	; `string'
PUBLIC	??_C@_0CF@CEKMADFG@Error?5?$CFlu?5occurred?5trying?5to?5ope@ ; `string'
PUBLIC	?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z	; WaveLoader::CStdFileStream::Open
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
EXTRN	_GetLastError@0:NEAR
EXTRN	_CreateFileA@28:NEAR
;	COMDAT ??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\common\waveldr.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KOCFKEKK@?$CBIS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@
CONST	SEGMENT
??_C@_0CA@KOCFKEKK@?$CBIS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@ DB '!IS_'
	DB	'VALID_HANDLE_VALUE(m_hFile)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDFKGFBI@WAVELDR?$AA@
CONST	SEGMENT
??_C@_07EDFKGFBI@WAVELDR?$AA@ DB 'WAVELDR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IINNEHHF@CStdFileStream?3?3Open?$AA@
CONST	SEGMENT
??_C@_0BF@IINNEHHF@CStdFileStream?3?3Open?$AA@ DB 'CStdFileStream::Open', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CEKMADFG@Error?5?$CFlu?5occurred?5trying?5to?5ope@
CONST	SEGMENT
??_C@_0CF@CEKMADFG@Error?5?$CFlu?5occurred?5trying?5to?5ope@ DB 'Error %l'
	DB	'u occurred trying to open %s', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z
_TEXT	SEGMENT
tv69 = -12
_this$ = -8
_hr$ = -4
_pszFileName$ = 8
_dwDesiredAccess$ = 12
_dwShareMode$ = 16
_dwCreationDisposition$ = 20
_dwFlagsAndAttributes$ = 24
?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z PROC NEAR ; WaveLoader::CStdFileStream::Open, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 178  :     HRESULT                 hr  = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 179  : 
; 180  :     DPF_ENTER();
; 181  : 
; 182  :     ASSERT(!IS_VALID_HANDLE_VALUE(m_hFile));

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 38 00	 cmp	 DWORD PTR [eax], 0
  00016	74 11		 je	 SHORT $L31528
  00018	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  0001e	74 09		 je	 SHORT $L31528
  00020	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00027	eb 07		 jmp	 SHORT $L31529
$L31528:
  00029	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$L31529:
  00030	68 b6 00 00 00	 push	 182			; 000000b6H
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@KOCFKEKK@?$CBIS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@
  0003f	8b 55 f4	 mov	 edx, DWORD PTR tv69[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00048	83 c4 10	 add	 esp, 16			; 00000010H

; 183  :     
; 184  :     m_hFile = CreateFile(pszFileName, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0004b	6a 00		 push	 0
  0004d	8b 45 18	 mov	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 14	 mov	 ecx, DWORD PTR _dwCreationDisposition$[ebp]
  00054	51		 push	 ecx
  00055	6a 00		 push	 0
  00057	8b 55 10	 mov	 edx, DWORD PTR _dwShareMode$[ebp]
  0005a	52		 push	 edx
  0005b	8b 45 0c	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 _CreateFileA@28
  00068	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006b	89 02		 mov	 DWORD PTR [edx], eax

; 185  : 
; 186  :     if(INVALID_HANDLE_VALUE == m_hFile)

  0006d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00070	83 38 ff	 cmp	 DWORD PTR [eax], -1
  00073	75 09		 jne	 SHORT $L30914

; 187  :     {
; 188  :         m_hFile = NULL;

  00075	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L30914:

; 189  :     }
; 190  : 
; 191  :     if(!m_hFile)

  0007e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00081	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00084	75 3e		 jne	 SHORT $L30915

; 192  :     {
; 193  :         DPF_ERROR("Error %lu occurred trying to open %s", GetLastError(), pszFileName);

  00086	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@IINNEHHF@CStdFileStream?3?3Open?$AA@
  00090	68 c1 00 00 00	 push	 193			; 000000c1H
  00095	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0009a	6a 04		 push	 4
  0009c	6a 09		 push	 9
  0009e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a3	83 c4 18	 add	 esp, 24			; 00000018H
  000a6	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _GetLastError@0
  000af	50		 push	 eax
  000b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@CEKMADFG@Error?5?$CFlu?5occurred?5trying?5to?5ope@
  000b5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH

; 194  :         hr = E_FAIL;

  000bd	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L30915:

; 195  :     }
; 196  : 
; 197  :     DPF_LEAVE_HRESULT(hr);
; 198  : 
; 199  :     return hr;

  000c4	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 200  : }

  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 14 00	 ret	 20			; 00000014H
?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z ENDP	; WaveLoader::CStdFileStream::Open
_TEXT	ENDS
PUBLIC	?Attach@CStdFileStream@WaveLoader@@QAEXPAX@Z	; WaveLoader::CStdFileStream::Attach
; Function compile flags: /Odt
;	COMDAT ?Attach@CStdFileStream@WaveLoader@@QAEXPAX@Z
_TEXT	SEGMENT
tv69 = -8
_this$ = -4
_hFile$ = 8
?Attach@CStdFileStream@WaveLoader@@QAEXPAX@Z PROC NEAR	; WaveLoader::CStdFileStream::Attach, COMDAT
; _this$ = ecx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 227  :     DPF_ENTER();
; 228  : 
; 229  :     ASSERT(!IS_VALID_HANDLE_VALUE(m_hFile));

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 11		 je	 SHORT $L31533
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  00017	74 09		 je	 SHORT $L31533
  00019	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00020	eb 07		 jmp	 SHORT $L31534
$L31533:
  00022	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$L31534:
  00029	68 e5 00 00 00	 push	 229			; 000000e5H
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@KOCFKEKK@?$CBIS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@
  00038	8b 55 f8	 mov	 edx, DWORD PTR tv69[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00041	83 c4 10	 add	 esp, 16			; 00000010H

; 230  :     
; 231  :     m_hFile = hFile;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _hFile$[ebp]
  0004a	89 08		 mov	 DWORD PTR [eax], ecx

; 232  :     m_dwFlags |= FILESTREAM_FLAGS_ATTACHED;

  0004c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00052	83 c8 01	 or	 eax, 1
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 233  : 
; 234  :     DPF_LEAVE_VOID();
; 235  : }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?Attach@CStdFileStream@WaveLoader@@QAEXPAX@Z ENDP	; WaveLoader::CStdFileStream::Attach
_TEXT	ENDS
EXTRN	_CloseHandle@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Close@CStdFileStream@WaveLoader@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Close@CStdFileStream@WaveLoader@@QAEXXZ PROC NEAR	; WaveLoader::CStdFileStream::Close, COMDAT
; _this$ = ecx

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 262  :     DPF_ENTER();
; 263  :     
; 264  :     if(m_dwFlags & FILESTREAM_FLAGS_ATTACHED)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	83 e1 01	 and	 ecx, 1
  00010	85 c9		 test	 ecx, ecx
  00012	74 1a		 je	 SHORT $L30929

; 265  :     {
; 266  :         m_hFile = NULL;

  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 267  :         m_dwFlags &= ~FILESTREAM_FLAGS_ATTACHED;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 268  :     }
; 269  :     else

  0002c	eb 24		 jmp	 SHORT $L30928
$L30929:

; 270  :     {
; 271  :         CLOSE_HANDLE(m_hFile);

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 38 00	 cmp	 DWORD PTR [eax], 0
  00034	74 1c		 je	 SHORT $L30928
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  0003c	74 14		 je	 SHORT $L30928
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	8b 02		 mov	 eax, DWORD PTR [edx]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _CloseHandle@4
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L30928:

; 272  :     }
; 273  : 
; 274  :     DPF_LEAVE_VOID();
; 275  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?Close@CStdFileStream@WaveLoader@@QAEXXZ ENDP		; WaveLoader::CStdFileStream::Close
_TEXT	ENDS
PUBLIC	??_C@_0BP@BFEOIFMP@IS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BF@IKIMPDLN@CStdFileStream?3?3Read?$AA@	; `string'
PUBLIC	??_C@_0CJ@EBECGKOP@Error?5?$CFlu?5occurred?5reading?5from?5@ ; `string'
PUBLIC	??_C@_0CH@JEFGPKIM@Not?5enough?5data?5was?5read?5from?5th@ ; `string'
PUBLIC	?Read@CStdFileStream@WaveLoader@@QAEJPAXKPAK@Z	; WaveLoader::CStdFileStream::Read
EXTRN	_ReadFile@20:NEAR
;	COMDAT ??_C@_0BP@BFEOIFMP@IS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@
CONST	SEGMENT
??_C@_0BP@BFEOIFMP@IS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@ DB 'IS_VALID'
	DB	'_HANDLE_VALUE(m_hFile)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IKIMPDLN@CStdFileStream?3?3Read?$AA@
CONST	SEGMENT
??_C@_0BF@IKIMPDLN@CStdFileStream?3?3Read?$AA@ DB 'CStdFileStream::Read', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EBECGKOP@Error?5?$CFlu?5occurred?5reading?5from?5@
CONST	SEGMENT
??_C@_0CJ@EBECGKOP@Error?5?$CFlu?5occurred?5reading?5from?5@ DB 'Error %l'
	DB	'u occurred reading from the file', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JEFGPKIM@Not?5enough?5data?5was?5read?5from?5th@
CONST	SEGMENT
??_C@_0CH@JEFGPKIM@Not?5enough?5data?5was?5read?5from?5th@ DB 'Not enough'
	DB	' data was read from the file', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Read@CStdFileStream@WaveLoader@@QAEJPAXKPAK@Z
_TEXT	SEGMENT
tv69 = -16
_this$ = -12
_hr$ = -8
_dwRead$ = -4
_pvBuffer$ = 8
_dwBufferSize$ = 12
_pdwRead$ = 16
?Read@CStdFileStream@WaveLoader@@QAEJPAXKPAK@Z PROC NEAR ; WaveLoader::CStdFileStream::Read, COMDAT
; _this$ = ecx

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 306  :     HRESULT                 hr      = S_OK;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 307  :     DWORD                   dwRead;
; 308  : 
; 309  :     DPF_ENTER();
; 310  :     
; 311  :     ASSERT(IS_VALID_HANDLE_VALUE(m_hFile));

  00010	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 38 00	 cmp	 DWORD PTR [eax], 0
  00016	74 11		 je	 SHORT $L31541
  00018	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  0001e	74 09		 je	 SHORT $L31541
  00020	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
  00027	eb 07		 jmp	 SHORT $L31542
$L31541:
  00029	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
$L31542:
  00030	68 37 01 00 00	 push	 311			; 00000137H
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BFEOIFMP@IS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@
  0003f	8b 55 f0	 mov	 edx, DWORD PTR tv69[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00048	83 c4 10	 add	 esp, 16			; 00000010H

; 312  :     
; 313  :     if(!ReadFile(m_hFile, pvBuffer, dwBufferSize, &dwRead, NULL))

  0004b	6a 00		 push	 0
  0004d	8d 45 fc	 lea	 eax, DWORD PTR _dwRead$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _dwBufferSize$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 08	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  00058	52		 push	 edx
  00059	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 _ReadFile@20
  00064	85 c0		 test	 eax, eax
  00066	75 3a		 jne	 SHORT $L30944

; 314  :     {
; 315  :         DPF_ERROR("Error %lu occurred reading from the file", GetLastError());

  00068	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@IKIMPDLN@CStdFileStream?3?3Read?$AA@
  00072	68 3b 01 00 00	 push	 315			; 0000013bH
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0007c	6a 04		 push	 4
  0007e	6a 09		 push	 9
  00080	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00085	83 c4 18	 add	 esp, 24			; 00000018H
  00088	e8 00 00 00 00	 call	 _GetLastError@0
  0008d	50		 push	 eax
  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@EBECGKOP@Error?5?$CFlu?5occurred?5reading?5from?5@
  00093	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00098	83 c4 08	 add	 esp, 8

; 316  :         hr = E_FAIL;

  0009b	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L30944:

; 317  :     }
; 318  : 
; 319  :     if(SUCCEEDED(hr))

  000a2	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a6	7c 4c		 jl	 SHORT $L30949

; 320  :     {
; 321  :         if(pdwRead)

  000a8	83 7d 10 00	 cmp	 DWORD PTR _pdwRead$[ebp], 0
  000ac	74 0a		 je	 SHORT $L30950

; 322  :         {
; 323  :             *pdwRead = dwRead;

  000ae	8b 55 10	 mov	 edx, DWORD PTR _pdwRead$[ebp]
  000b1	8b 45 fc	 mov	 eax, DWORD PTR _dwRead$[ebp]
  000b4	89 02		 mov	 DWORD PTR [edx], eax

; 324  :         }
; 325  :         else if(dwRead != dwBufferSize)

  000b6	eb 3c		 jmp	 SHORT $L30949
$L30950:
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _dwRead$[ebp]
  000bb	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwBufferSize$[ebp]
  000be	74 34		 je	 SHORT $L30949

; 326  :         {
; 327  :             DPF_ERROR("Not enough data was read from the file");

  000c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  000c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@IKIMPDLN@CStdFileStream?3?3Read?$AA@
  000ca	68 47 01 00 00	 push	 327			; 00000147H
  000cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  000d4	6a 04		 push	 4
  000d6	6a 09		 push	 9
  000d8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000dd	83 c4 18	 add	 esp, 24			; 00000018H
  000e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@JEFGPKIM@Not?5enough?5data?5was?5read?5from?5th@
  000e5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ea	83 c4 04	 add	 esp, 4

; 328  :             hr = E_FAIL;

  000ed	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L30949:

; 329  :         }
; 330  :     }
; 331  : 
; 332  :     DPF_LEAVE_HRESULT(hr);
; 333  : 
; 334  :     return hr;

  000f4	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 335  : }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 0c 00	 ret	 12			; 0000000cH
?Read@CStdFileStream@WaveLoader@@QAEJPAXKPAK@Z ENDP	; WaveLoader::CStdFileStream::Read
_TEXT	ENDS
PUBLIC	??_C@_0BG@PGEPINJO@CStdFileStream?3?3Write?$AA@	; `string'
PUBLIC	??_C@_0CH@HNBEJLKA@Error?5?$CFlu?5occurred?5writing?5to?5th@ ; `string'
PUBLIC	??_C@_0CK@PPGKDJFB@Not?5enough?5data?5was?5written?5from@ ; `string'
PUBLIC	?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z	; WaveLoader::CStdFileStream::Write
EXTRN	_WriteFile@20:NEAR
;	COMDAT ??_C@_0BG@PGEPINJO@CStdFileStream?3?3Write?$AA@
CONST	SEGMENT
??_C@_0BG@PGEPINJO@CStdFileStream?3?3Write?$AA@ DB 'CStdFileStream::Write'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HNBEJLKA@Error?5?$CFlu?5occurred?5writing?5to?5th@
CONST	SEGMENT
??_C@_0CH@HNBEJLKA@Error?5?$CFlu?5occurred?5writing?5to?5th@ DB 'Error %l'
	DB	'u occurred writing to the file', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PPGKDJFB@Not?5enough?5data?5was?5written?5from@
CONST	SEGMENT
??_C@_0CK@PPGKDJFB@Not?5enough?5data?5was?5written?5from@ DB 'Not enough '
	DB	'data was written from the file', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z
_TEXT	SEGMENT
tv69 = -16
_this$ = -12
_dwWritten$ = -8
_hr$ = -4
_pvBuffer$ = 8
_dwBufferSize$ = 12
_pdwWritten$ = 16
?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z PROC NEAR ; WaveLoader::CStdFileStream::Write, COMDAT
; _this$ = ecx

; 365  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 366  :     HRESULT                 hr          = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 367  :     DWORD                   dwWritten;
; 368  : 
; 369  :     DPF_ENTER();
; 370  :     
; 371  :     ASSERT(IS_VALID_HANDLE_VALUE(m_hFile));

  00010	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 38 00	 cmp	 DWORD PTR [eax], 0
  00016	74 11		 je	 SHORT $L31546
  00018	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  0001e	74 09		 je	 SHORT $L31546
  00020	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
  00027	eb 07		 jmp	 SHORT $L31547
$L31546:
  00029	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
$L31547:
  00030	68 73 01 00 00	 push	 371			; 00000173H
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BFEOIFMP@IS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@
  0003f	8b 55 f0	 mov	 edx, DWORD PTR tv69[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00048	83 c4 10	 add	 esp, 16			; 00000010H

; 372  :     
; 373  :     if(!WriteFile(m_hFile, pvBuffer, dwBufferSize, &dwWritten, NULL))

  0004b	6a 00		 push	 0
  0004d	8d 45 f8	 lea	 eax, DWORD PTR _dwWritten$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _dwBufferSize$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 08	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  00058	52		 push	 edx
  00059	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 _WriteFile@20
  00064	85 c0		 test	 eax, eax
  00066	75 3a		 jne	 SHORT $L30965

; 374  :     {
; 375  :         DPF_ERROR("Error %lu occurred writing to the file", GetLastError());

  00068	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@PGEPINJO@CStdFileStream?3?3Write?$AA@
  00072	68 77 01 00 00	 push	 375			; 00000177H
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0007c	6a 04		 push	 4
  0007e	6a 09		 push	 9
  00080	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00085	83 c4 18	 add	 esp, 24			; 00000018H
  00088	e8 00 00 00 00	 call	 _GetLastError@0
  0008d	50		 push	 eax
  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@HNBEJLKA@Error?5?$CFlu?5occurred?5writing?5to?5th@
  00093	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00098	83 c4 08	 add	 esp, 8

; 376  :         hr = E_FAIL;

  0009b	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L30965:

; 377  :     }
; 378  : 
; 379  :     if(SUCCEEDED(hr))

  000a2	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a6	7c 4c		 jl	 SHORT $L30970

; 380  :     {
; 381  :         if(pdwWritten)

  000a8	83 7d 10 00	 cmp	 DWORD PTR _pdwWritten$[ebp], 0
  000ac	74 0a		 je	 SHORT $L30971

; 382  :         {
; 383  :             *pdwWritten = dwWritten;

  000ae	8b 55 10	 mov	 edx, DWORD PTR _pdwWritten$[ebp]
  000b1	8b 45 f8	 mov	 eax, DWORD PTR _dwWritten$[ebp]
  000b4	89 02		 mov	 DWORD PTR [edx], eax

; 384  :         }
; 385  :         else if(dwWritten != dwBufferSize)

  000b6	eb 3c		 jmp	 SHORT $L30970
$L30971:
  000b8	8b 4d f8	 mov	 ecx, DWORD PTR _dwWritten$[ebp]
  000bb	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwBufferSize$[ebp]
  000be	74 34		 je	 SHORT $L30970

; 386  :         {
; 387  :             DPF_ERROR("Not enough data was written from the file");

  000c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  000c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@PGEPINJO@CStdFileStream?3?3Write?$AA@
  000ca	68 83 01 00 00	 push	 387			; 00000183H
  000cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  000d4	6a 04		 push	 4
  000d6	6a 09		 push	 9
  000d8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000dd	83 c4 18	 add	 esp, 24			; 00000018H
  000e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@PPGKDJFB@Not?5enough?5data?5was?5written?5from@
  000e5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ea	83 c4 04	 add	 esp, 4

; 388  :             hr = E_FAIL;

  000ed	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L30970:

; 389  :         }
; 390  :     }
; 391  : 
; 392  :     DPF_LEAVE_HRESULT(hr);
; 393  : 
; 394  :     return hr;

  000f4	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 395  : }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 0c 00	 ret	 12			; 0000000cH
?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z ENDP	; WaveLoader::CStdFileStream::Write
_TEXT	ENDS
PUBLIC	??_C@_0BF@DHHNGOBO@CStdFileStream?3?3Seek?$AA@	; `string'
PUBLIC	??_C@_0CE@IKNCKFMB@Error?5?$CFlu?5occurred?5seeking?5the?5f@ ; `string'
PUBLIC	?Seek@CStdFileStream@WaveLoader@@QAEJJKPAK@Z	; WaveLoader::CStdFileStream::Seek
EXTRN	_SetFilePointer@16:NEAR
;	COMDAT ??_C@_0BF@DHHNGOBO@CStdFileStream?3?3Seek?$AA@
CONST	SEGMENT
??_C@_0BF@DHHNGOBO@CStdFileStream?3?3Seek?$AA@ DB 'CStdFileStream::Seek', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IKNCKFMB@Error?5?$CFlu?5occurred?5seeking?5the?5f@
CONST	SEGMENT
??_C@_0CE@IKNCKFMB@Error?5?$CFlu?5occurred?5seeking?5the?5f@ DB 'Error %l'
	DB	'u occurred seeking the file', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Seek@CStdFileStream@WaveLoader@@QAEJJKPAK@Z
_TEXT	SEGMENT
tv69 = -16
_this$ = -12
_hr$ = -8
_dwAbsolute$ = -4
_lOffset$ = 8
_dwOrigin$ = 12
_pdwAbsolute$ = 16
?Seek@CStdFileStream@WaveLoader@@QAEJJKPAK@Z PROC NEAR	; WaveLoader::CStdFileStream::Seek, COMDAT
; _this$ = ecx

; 425  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 426  :     HRESULT                 hr          = S_OK;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 427  :     DWORD                   dwAbsolute;
; 428  :     
; 429  :     DPF_ENTER();
; 430  : 
; 431  :     ASSERT(IS_VALID_HANDLE_VALUE(m_hFile));

  00010	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 38 00	 cmp	 DWORD PTR [eax], 0
  00016	74 11		 je	 SHORT $L31551
  00018	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  0001e	74 09		 je	 SHORT $L31551
  00020	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
  00027	eb 07		 jmp	 SHORT $L31552
$L31551:
  00029	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
$L31552:
  00030	68 af 01 00 00	 push	 431			; 000001afH
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BFEOIFMP@IS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@
  0003f	8b 55 f0	 mov	 edx, DWORD PTR tv69[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00048	83 c4 10	 add	 esp, 16			; 00000010H

; 432  :     
; 433  :     if((dwAbsolute = SetFilePointer(m_hFile, lOffset, NULL, dwOrigin)) == INVALID_SET_FILE_POINTER)

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _dwOrigin$[ebp]
  0004e	50		 push	 eax
  0004f	6a 00		 push	 0
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _lOffset$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00058	8b 02		 mov	 eax, DWORD PTR [edx]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 _SetFilePointer@16
  00060	89 45 fc	 mov	 DWORD PTR _dwAbsolute$[ebp], eax
  00063	83 7d fc ff	 cmp	 DWORD PTR _dwAbsolute$[ebp], -1
  00067	75 3a		 jne	 SHORT $L30987

; 434  :     {
; 435  :         DPF_ERROR("Error %lu occurred seeking the file", GetLastError());

  00069	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@DHHNGOBO@CStdFileStream?3?3Seek?$AA@
  00073	68 b3 01 00 00	 push	 435			; 000001b3H
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0007d	6a 04		 push	 4
  0007f	6a 09		 push	 9
  00081	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00086	83 c4 18	 add	 esp, 24			; 00000018H
  00089	e8 00 00 00 00	 call	 _GetLastError@0
  0008e	50		 push	 eax
  0008f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@IKNCKFMB@Error?5?$CFlu?5occurred?5seeking?5the?5f@
  00094	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00099	83 c4 08	 add	 esp, 8

; 436  :         hr = E_FAIL;

  0009c	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L30987:

; 437  :     }
; 438  : 
; 439  :     if(SUCCEEDED(hr) && pdwAbsolute)

  000a3	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a7	7c 0e		 jl	 SHORT $L30992
  000a9	83 7d 10 00	 cmp	 DWORD PTR _pdwAbsolute$[ebp], 0
  000ad	74 08		 je	 SHORT $L30992

; 440  :     {
; 441  :         *pdwAbsolute = dwAbsolute;

  000af	8b 4d 10	 mov	 ecx, DWORD PTR _pdwAbsolute$[ebp]
  000b2	8b 55 fc	 mov	 edx, DWORD PTR _dwAbsolute$[ebp]
  000b5	89 11		 mov	 DWORD PTR [ecx], edx
$L30992:

; 442  :     }
; 443  : 
; 444  :     DPF_LEAVE_HRESULT(hr);
; 445  : 
; 446  :     return hr;

  000b7	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 447  : }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 0c 00	 ret	 12			; 0000000cH
?Seek@CStdFileStream@WaveLoader@@QAEJJKPAK@Z ENDP	; WaveLoader::CStdFileStream::Seek
_TEXT	ENDS
PUBLIC	??_C@_0BK@HKFPFMIN@CStdFileStream?3?3GetLength?$AA@ ; `string'
PUBLIC	??_C@_0CK@HKLDFKFN@Error?5?$CFlu?5attempting?5to?5get?5the?5@ ; `string'
PUBLIC	?GetLength@CStdFileStream@WaveLoader@@QAEJPAK@Z	; WaveLoader::CStdFileStream::GetLength
EXTRN	_GetFileSize@8:NEAR
;	COMDAT ??_C@_0BK@HKFPFMIN@CStdFileStream?3?3GetLength?$AA@
CONST	SEGMENT
??_C@_0BK@HKFPFMIN@CStdFileStream?3?3GetLength?$AA@ DB 'CStdFileStream::G'
	DB	'etLength', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HKLDFKFN@Error?5?$CFlu?5attempting?5to?5get?5the?5@
CONST	SEGMENT
??_C@_0CK@HKLDFKFN@Error?5?$CFlu?5attempting?5to?5get?5the?5@ DB 'Error %'
	DB	'lu attempting to get the file size', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetLength@CStdFileStream@WaveLoader@@QAEJPAK@Z
_TEXT	SEGMENT
tv69 = -12
_this$ = -8
_hr$ = -4
_pdwLength$ = 8
?GetLength@CStdFileStream@WaveLoader@@QAEJPAK@Z PROC NEAR ; WaveLoader::CStdFileStream::GetLength, COMDAT
; _this$ = ecx

; 473  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 474  :     HRESULT                 hr  = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 475  :     
; 476  :     DPF_ENTER();
; 477  : 
; 478  :     ASSERT(IS_VALID_HANDLE_VALUE(m_hFile));

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 38 00	 cmp	 DWORD PTR [eax], 0
  00016	74 11		 je	 SHORT $L31556
  00018	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  0001e	74 09		 je	 SHORT $L31556
  00020	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
  00027	eb 07		 jmp	 SHORT $L31557
$L31556:
  00029	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
$L31557:
  00030	68 de 01 00 00	 push	 478			; 000001deH
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BFEOIFMP@IS_VALID_HANDLE_VALUE?$CIm_hFile?$CJ?$AA@
  0003f	8b 55 f4	 mov	 edx, DWORD PTR tv69[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00048	83 c4 10	 add	 esp, 16			; 00000010H

; 479  :     
; 480  :     if((*pdwLength = GetFileSize(m_hFile, NULL)) == -1)

  0004b	6a 00		 push	 0
  0004d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 _GetFileSize@8
  00058	8b 55 08	 mov	 edx, DWORD PTR _pdwLength$[ebp]
  0005b	89 02		 mov	 DWORD PTR [edx], eax
  0005d	8b 45 08	 mov	 eax, DWORD PTR _pdwLength$[ebp]
  00060	83 38 ff	 cmp	 DWORD PTR [eax], -1
  00063	75 3a		 jne	 SHORT $L31000

; 481  :     {
; 482  :         DPF_ERROR("Error %lu attempting to get the file size", GetLastError());

  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@HKFPFMIN@CStdFileStream?3?3GetLength?$AA@
  0006f	68 e2 01 00 00	 push	 482			; 000001e2H
  00074	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  00079	6a 04		 push	 4
  0007b	6a 09		 push	 9
  0007d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00082	83 c4 18	 add	 esp, 24			; 00000018H
  00085	e8 00 00 00 00	 call	 _GetLastError@0
  0008a	50		 push	 eax
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@HKLDFKFN@Error?5?$CFlu?5attempting?5to?5get?5the?5@
  00090	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00095	83 c4 08	 add	 esp, 8

; 483  :         hr = E_FAIL;

  00098	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L31000:

; 484  :     }
; 485  : 
; 486  :     DPF_LEAVE_HRESULT(hr);
; 487  : 
; 488  :     return hr;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 489  : }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?GetLength@CStdFileStream@WaveLoader@@QAEJPAK@Z ENDP	; WaveLoader::CStdFileStream::GetLength
_TEXT	ENDS
PUBLIC	??0CRiffChunk@WaveLoader@@QAE@XZ		; WaveLoader::CRiffChunk::CRiffChunk
; Function compile flags: /Odt
;	COMDAT ??0CRiffChunk@WaveLoader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CRiffChunk@WaveLoader@@QAE@XZ PROC NEAR		; WaveLoader::CRiffChunk::CRiffChunk, COMDAT
; _this$ = ecx

; 514  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 515  :     DPF_ENTER();
; 516  : 
; 517  :     //
; 518  :     // Initialize defaults
; 519  :     //
; 520  : 
; 521  :     m_pParentChunk = NULL;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 522  :     m_pStream = NULL;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 523  :     m_dwChunkId = 0;

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 524  :     m_dwDataOffset = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 525  :     m_dwDataSize = 0;

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 526  :     m_dwFlags = 0;

  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 527  : 
; 528  :     DPF_LEAVE_VOID();
; 529  : }

  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??0CRiffChunk@WaveLoader@@QAE@XZ ENDP			; WaveLoader::CRiffChunk::CRiffChunk
_TEXT	ENDS
PUBLIC	??1CRiffChunk@WaveLoader@@QAE@XZ		; WaveLoader::CRiffChunk::~CRiffChunk
; Function compile flags: /Odt
;	COMDAT ??1CRiffChunk@WaveLoader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CRiffChunk@WaveLoader@@QAE@XZ PROC NEAR		; WaveLoader::CRiffChunk::~CRiffChunk, COMDAT
; _this$ = ecx

; 554  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 555  :     DPF_ENTER();
; 556  :     DPF_LEAVE_VOID();
; 557  : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1CRiffChunk@WaveLoader@@QAE@XZ ENDP			; WaveLoader::CRiffChunk::~CRiffChunk
_TEXT	ENDS
PUBLIC	?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z ; WaveLoader::CRiffChunk::Open
; Function compile flags: /Odt
;	COMDAT ?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z
_TEXT	SEGMENT
_this$ = -20
_rhRiffHeader$ = -16
_hr$ = -8
_lOffset$ = -4
_pParentChunk$ = 8
_pStream$ = 12
_dwChunkId$ = 16
?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z PROC NEAR ; WaveLoader::CRiffChunk::Open, COMDAT
; _this$ = ecx

; 587  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 588  :     LONG                    lOffset;
; 589  :     RIFFHEADER              rhRiffHeader;
; 590  :     HRESULT                 hr;
; 591  : 
; 592  :     DPF_ENTER();
; 593  :     
; 594  :     m_pParentChunk = pParentChunk;

  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pParentChunk$[ebp]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx

; 595  :     m_pStream = pStream;

  00011	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00014	8b 45 0c	 mov	 eax, DWORD PTR _pStream$[ebp]
  00017	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 596  : 
; 597  :     //
; 598  :     // Seek to the first byte of the parent chunk's data section
; 599  :     //
; 600  : 
; 601  :     if(m_pParentChunk)

  0001a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00020	74 32		 je	 SHORT $L31021

; 602  :     {
; 603  :         lOffset = m_pParentChunk->m_dwDataOffset;

  00022	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 02		 mov	 eax, DWORD PTR [edx]
  00027	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002a	89 4d fc	 mov	 DWORD PTR _lOffset$[ebp], ecx

; 604  : 
; 605  :         //
; 606  :         // Special case the RIFF chunk
; 607  :         //
; 608  : 
; 609  :         if((WAVELDR_FOURCC_RIFF == m_pParentChunk->m_dwChunkId) || (WAVELDR_FOURCC_FORM == m_pParentChunk->m_dwChunkId))

  0002d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	81 78 08 52 49
	46 46		 cmp	 DWORD PTR [eax+8], 1179011410 ; 46464952H
  00039	74 0e		 je	 SHORT $L31023
  0003b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	81 7a 08 46 4f
	52 4d		 cmp	 DWORD PTR [edx+8], 1297239878 ; 4d524f46H
  00047	75 09		 jne	 SHORT $L31022
$L31023:

; 610  :         {
; 611  :             lOffset += sizeof(DWORD);

  00049	8b 45 fc	 mov	 eax, DWORD PTR _lOffset$[ebp]
  0004c	83 c0 04	 add	 eax, 4
  0004f	89 45 fc	 mov	 DWORD PTR _lOffset$[ebp], eax
$L31022:

; 612  :         }
; 613  :     }
; 614  :     else

  00052	eb 07		 jmp	 SHORT $L31026
$L31021:

; 615  :     {
; 616  :         lOffset = 0;

  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _lOffset$[ebp], 0
$L31026:

; 617  :     }
; 618  : 
; 619  :     //
; 620  :     // If this is the top level chunk, just read the first 8 bytes.  If not,
; 621  :     // search the parent chunk until we find the one we're looking for.
; 622  :     //
; 623  : 
; 624  :     do
; 625  :     {
; 626  :         hr = m_pStream->Seek(lOffset, FILE_BEGIN, NULL);

  0005b	6a 00		 push	 0
  0005d	6a 00		 push	 0
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _lOffset$[ebp]
  00062	51		 push	 ecx
  00063	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00066	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00069	e8 00 00 00 00	 call	 ?Seek@CStdFileStream@WaveLoader@@QAEJJKPAK@Z ; WaveLoader::CStdFileStream::Seek
  0006e	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 627  : 
; 628  :         if(SUCCEEDED(hr))

  00071	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00075	7c 16		 jl	 SHORT $L31030

; 629  :         {
; 630  :             hr = m_pStream->Read(&rhRiffHeader, sizeof(rhRiffHeader), NULL);

  00077	6a 00		 push	 0
  00079	6a 08		 push	 8
  0007b	8d 45 f0	 lea	 eax, DWORD PTR _rhRiffHeader$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00085	e8 00 00 00 00	 call	 ?Read@CStdFileStream@WaveLoader@@QAEJPAXKPAK@Z ; WaveLoader::CStdFileStream::Read
  0008a	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L31030:

; 631  :         }
; 632  : 
; 633  :         if(SUCCEEDED(hr) && m_pParentChunk)

  0008d	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00091	7c 21		 jl	 SHORT $L31032
  00093	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00096	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00099	74 19		 je	 SHORT $L31032

; 634  :         {
; 635  :             if(WAVELDR_FOURCC_FORM == m_pParentChunk->m_dwChunkId)

  0009b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	81 79 08 46 4f
	52 4d		 cmp	 DWORD PTR [ecx+8], 1297239878 ; 4d524f46H
  000a7	75 0b		 jne	 SHORT $L31032

; 636  :             {
; 637  :                 rhRiffHeader.dwDataSize = EndianSwapDword(rhRiffHeader.dwDataSize);

  000a9	8b 4d f4	 mov	 ecx, DWORD PTR _rhRiffHeader$[ebp+4]
  000ac	e8 00 00 00 00	 call	 ?EndianSwapDword@@YIKK@Z ; EndianSwapDword
  000b1	89 45 f4	 mov	 DWORD PTR _rhRiffHeader$[ebp+4], eax
$L31032:

; 638  :             }
; 639  :         }
; 640  : 
; 641  :         if(SUCCEEDED(hr) && (dwChunkId == rhRiffHeader.dwChunkId))

  000b4	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b8	7c 0a		 jl	 SHORT $L31035
  000ba	8b 55 10	 mov	 edx, DWORD PTR _dwChunkId$[ebp]
  000bd	3b 55 f0	 cmp	 edx, DWORD PTR _rhRiffHeader$[ebp]
  000c0	75 02		 jne	 SHORT $L31035

; 642  :         {
; 643  :             break;

  000c2	eb 32		 jmp	 SHORT $L31028
$L31035:

; 644  :         }
; 645  : 
; 646  :         if(SUCCEEDED(hr) && !m_pParentChunk)

  000c4	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c8	7c 0f		 jl	 SHORT $L31037
  000ca	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	83 38 00	 cmp	 DWORD PTR [eax], 0
  000d0	75 07		 jne	 SHORT $L31037

; 647  :         {
; 648  :             hr = E_FAIL;

  000d2	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L31037:

; 649  :         }
; 650  : 
; 651  :         if(SUCCEEDED(hr))

  000d9	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000dd	7c 0d		 jl	 SHORT $L31027

; 652  :         {
; 653  :             lOffset += sizeof(rhRiffHeader) + rhRiffHeader.dwDataSize;

  000df	8b 4d f4	 mov	 ecx, DWORD PTR _rhRiffHeader$[ebp+4]
  000e2	8b 55 fc	 mov	 edx, DWORD PTR _lOffset$[ebp]
  000e5	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  000e9	89 45 fc	 mov	 DWORD PTR _lOffset$[ebp], eax
$L31027:

; 654  :         }
; 655  :     }
; 656  :     while(SUCCEEDED(hr));

  000ec	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000f0	0f 8d 65 ff ff
	ff		 jge	 $L31026
$L31028:

; 657  : 
; 658  :     //
; 659  :     // Success
; 660  :     //
; 661  : 
; 662  :     if(SUCCEEDED(hr))

  000f6	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000fa	7c 2d		 jl	 SHORT $L31043

; 663  :     {
; 664  :         m_dwChunkId = dwChunkId;

  000fc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	8b 55 10	 mov	 edx, DWORD PTR _dwChunkId$[ebp]
  00102	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 665  :         m_dwDataOffset = lOffset + sizeof(rhRiffHeader);

  00105	8b 45 fc	 mov	 eax, DWORD PTR _lOffset$[ebp]
  00108	83 c0 08	 add	 eax, 8
  0010b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 666  :         m_dwDataSize = rhRiffHeader.dwDataSize;

  00111	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00114	8b 45 f4	 mov	 eax, DWORD PTR _rhRiffHeader$[ebp+4]
  00117	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 667  :         m_dwFlags |= RIFFCHUNK_FLAGS_VALID;

  0011a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00120	83 ca 01	 or	 edx, 1
  00123	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00126	89 50 14	 mov	 DWORD PTR [eax+20], edx
$L31043:

; 668  :     }
; 669  : 
; 670  :     DPF_LEAVE_HRESULT(hr);
; 671  : 
; 672  :     return hr;

  00129	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 673  : }

  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 0c 00	 ret	 12			; 0000000cH
?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z ENDP ; WaveLoader::CRiffChunk::Open
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?EndianSwapDword@@YIKK@Z
_TEXT	SEGMENT
_n$ = -4
?EndianSwapDword@@YIKK@Z PROC NEAR			; EndianSwapDword, COMDAT
; _n$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx

; 55   :     __asm
; 56   :     {
; 57   :         mov     eax, ecx

  00008	8b c1		 mov	 eax, ecx

; 58   :         sar     eax, 24

  0000a	c1 f8 18	 sar	 eax, 24			; 00000018H

; 59   :         and     eax, 0ffh

  0000d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH

; 60   : 
; 61   :         mov     ebx, ecx

  00012	8b d9		 mov	 ebx, ecx

; 62   :         sar     ebx, 8

  00014	c1 fb 08	 sar	 ebx, 8

; 63   :         and     ebx, 0ff00h

  00017	81 e3 00 ff 00
	00		 and	 ebx, 65280		; 0000ff00H

; 64   :         or      eax, ebx

  0001d	0b c3		 or	 eax, ebx

; 65   : 
; 66   :         mov     ebx, ecx

  0001f	8b d9		 mov	 ebx, ecx

; 67   :         shl     ebx, 8

  00021	c1 e3 08	 shl	 ebx, 8

; 68   :         and     ebx, 0ff0000h

  00024	81 e3 00 00 ff
	00		 and	 ebx, 16711680		; 00ff0000H

; 69   :         or      eax, ebx

  0002a	0b c3		 or	 eax, ebx

; 70   : 
; 71   :         mov     ebx, ecx

  0002c	8b d9		 mov	 ebx, ecx

; 72   :         shl     ebx, 24

  0002e	c1 e3 18	 shl	 ebx, 24			; 00000018H

; 73   :         and     ebx, 0ff000000h

  00031	81 e3 00 00 00
	ff		 and	 ebx, -16777216		; ff000000H

; 74   :         or      eax, ebx

  00037	0b c3		 or	 eax, ebx

; 75   :     }
; 76   : }

  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?EndianSwapDword@@YIKK@Z ENDP				; EndianSwapDword
_TEXT	ENDS
PUBLIC	??_C@_0BB@JCIHLOCG@CRiffChunk?3?3Read?$AA@	; `string'
PUBLIC	??_C@_0CM@BMKKIDJB@Attempted?5to?5read?5past?5the?5end?5o@ ; `string'
PUBLIC	?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z	; WaveLoader::CRiffChunk::Read
;	COMDAT ??_C@_0BB@JCIHLOCG@CRiffChunk?3?3Read?$AA@
CONST	SEGMENT
??_C@_0BB@JCIHLOCG@CRiffChunk?3?3Read?$AA@ DB 'CRiffChunk::Read', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BMKKIDJB@Attempted?5to?5read?5past?5the?5end?5o@
CONST	SEGMENT
??_C@_0CM@BMKKIDJB@Attempted?5to?5read?5past?5the?5end?5o@ DB 'Attempted '
	DB	'to read past the end of the chunk', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z
_TEXT	SEGMENT
_this$ = -8
_hr$ = -4
_dwOffset$ = 8
_pvBuffer$ = 12
_dwBufferSize$ = 16
_pdwRead$ = 20
?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z PROC NEAR	; WaveLoader::CRiffChunk::Read, COMDAT
; _this$ = ecx

; 705  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 706  :     HRESULT                 hr  = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 707  : 
; 708  :     DPF_ENTER();
; 709  : 
; 710  :     if(dwOffset + dwBufferSize > m_dwDataSize)

  00010	8b 45 08	 mov	 eax, DWORD PTR _dwOffset$[ebp]
  00013	03 45 10	 add	 eax, DWORD PTR _dwBufferSize$[ebp]
  00016	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0001c	76 64		 jbe	 SHORT $L31053

; 711  :     {
; 712  :         if(dwOffset >= m_dwDataSize)

  0001e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 45 08	 mov	 eax, DWORD PTR _dwOffset$[ebp]
  00024	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  00027	72 09		 jb	 SHORT $L31054

; 713  :         {
; 714  :             dwBufferSize = 0;

  00029	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _dwBufferSize$[ebp], 0

; 715  :         }
; 716  :         else

  00030	eb 0c		 jmp	 SHORT $L31055
$L31054:

; 717  :         {
; 718  :             dwBufferSize = m_dwDataSize - dwOffset;

  00032	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00038	2b 55 08	 sub	 edx, DWORD PTR _dwOffset$[ebp]
  0003b	89 55 10	 mov	 DWORD PTR _dwBufferSize$[ebp], edx
$L31055:

; 719  :         }
; 720  : 
; 721  :         if(pdwRead)

  0003e	83 7d 14 00	 cmp	 DWORD PTR _pdwRead$[ebp], 0
  00042	74 0a		 je	 SHORT $L31056

; 722  :         {
; 723  :             *pdwRead = dwBufferSize;

  00044	8b 45 14	 mov	 eax, DWORD PTR _pdwRead$[ebp]
  00047	8b 4d 10	 mov	 ecx, DWORD PTR _dwBufferSize$[ebp]
  0004a	89 08		 mov	 DWORD PTR [eax], ecx

; 724  :         }
; 725  :         else

  0004c	eb 34		 jmp	 SHORT $L31053
$L31056:

; 726  :         {
; 727  :             DPF_ERROR("Attempted to read past the end of the chunk");

  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@JCIHLOCG@CRiffChunk?3?3Read?$AA@
  00058	68 d7 02 00 00	 push	 727			; 000002d7H
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  00062	6a 04		 push	 4
  00064	6a 09		 push	 9
  00066	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0006b	83 c4 18	 add	 esp, 24			; 00000018H
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@BMKKIDJB@Attempted?5to?5read?5past?5the?5end?5o@
  00073	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00078	83 c4 04	 add	 esp, 4

; 728  :             hr = E_FAIL;

  0007b	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L31053:

; 729  :         }
; 730  :     }
; 731  : 
; 732  :     if(SUCCEEDED(hr))

  00082	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00086	7c 1c		 jl	 SHORT $L31062

; 733  :     {
; 734  :         hr = m_pStream->Seek(m_dwDataOffset + dwOffset, FILE_BEGIN, NULL);

  00088	6a 00		 push	 0
  0008a	6a 00		 push	 0
  0008c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0008f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00092	03 45 08	 add	 eax, DWORD PTR _dwOffset$[ebp]
  00095	50		 push	 eax
  00096	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0009c	e8 00 00 00 00	 call	 ?Seek@CStdFileStream@WaveLoader@@QAEJJKPAK@Z ; WaveLoader::CStdFileStream::Seek
  000a1	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L31062:

; 735  :     }
; 736  : 
; 737  :     if(SUCCEEDED(hr))

  000a4	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a8	7c 18		 jl	 SHORT $L31064

; 738  :     {
; 739  :         hr = m_pStream->Read(pvBuffer, dwBufferSize, NULL);

  000aa	6a 00		 push	 0
  000ac	8b 55 10	 mov	 edx, DWORD PTR _dwBufferSize$[ebp]
  000af	52		 push	 edx
  000b0	8b 45 0c	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  000b3	50		 push	 eax
  000b4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000ba	e8 00 00 00 00	 call	 ?Read@CStdFileStream@WaveLoader@@QAEJPAXKPAK@Z ; WaveLoader::CStdFileStream::Read
  000bf	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L31064:

; 740  :     }
; 741  : 
; 742  :     DPF_LEAVE_HRESULT(hr);
; 743  : 
; 744  :     return hr;

  000c2	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 745  : }

  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 10 00	 ret	 16			; 00000010H
?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z ENDP	; WaveLoader::CRiffChunk::Read
_TEXT	ENDS
PUBLIC	??0CWaveFile@WaveLoader@@QAE@XZ			; WaveLoader::CWaveFile::CWaveFile
; Function compile flags: /Odt
;	COMDAT ??0CWaveFile@WaveLoader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CWaveFile@WaveLoader@@QAE@XZ PROC NEAR		; WaveLoader::CWaveFile::CWaveFile, COMDAT
; _this$ = ecx

; 770  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CStdFileStream@WaveLoader@@QAE@XZ ; WaveLoader::CStdFileStream::CStdFileStream
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 08	 add	 ecx, 8
  00015	e8 00 00 00 00	 call	 ??0CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::CRiffChunk
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 20	 add	 ecx, 32			; 00000020H
  00020	e8 00 00 00 00	 call	 ??0CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::CRiffChunk

; 771  :     DPF_ENTER();
; 772  : 
; 773  :     m_dwFileType = -1;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [eax+56], -1

; 774  :     m_pwfxFormat = NULL;

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0

; 775  : 
; 776  :     DPF_LEAVE_VOID();
; 777  : }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0CWaveFile@WaveLoader@@QAE@XZ ENDP			; WaveLoader::CWaveFile::CWaveFile
_TEXT	ENDS
PUBLIC	??1CWaveFile@WaveLoader@@QAE@XZ			; WaveLoader::CWaveFile::~CWaveFile
PUBLIC	?Close@CWaveFile@WaveLoader@@QAEXXZ		; WaveLoader::CWaveFile::Close
; Function compile flags: /Odt
;	COMDAT ??1CWaveFile@WaveLoader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CWaveFile@WaveLoader@@QAE@XZ PROC NEAR		; WaveLoader::CWaveFile::~CWaveFile, COMDAT
; _this$ = ecx

; 802  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 803  :     DPF_ENTER();
; 804  : 
; 805  :     Close();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Close@CWaveFile@WaveLoader@@QAEXXZ ; WaveLoader::CWaveFile::Close

; 806  : 
; 807  :     DPF_LEAVE_VOID();
; 808  : }

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 20	 add	 ecx, 32			; 00000020H
  00015	e8 00 00 00 00	 call	 ??1CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::~CRiffChunk
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 08	 add	 ecx, 8
  00020	e8 00 00 00 00	 call	 ??1CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::~CRiffChunk
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ??1CStdFileStream@WaveLoader@@QAE@XZ ; WaveLoader::CStdFileStream::~CStdFileStream
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??1CWaveFile@WaveLoader@@QAE@XZ ENDP			; WaveLoader::CWaveFile::~CWaveFile
_TEXT	ENDS
PUBLIC	??_C@_0DC@IFKBAFN@?$CIpszFileName?5?$HM?$HM?5hFile?$CJ?5?$CG?$CG?5?$CB?$CIpszF@ ; `string'
PUBLIC	??_C@_0BA@CGAHBFNM@CWaveFile?3?3Open?$AA@	; `string'
PUBLIC	??_C@_0BK@OHEGKMMD@The?5file?5type?5is?5not?5WAVE?$AA@ ; `string'
PUBLIC	??_C@_0CB@CAIFKCHB@The?5file?5type?5is?5not?5AIFF?1AIFF?9C@ ; `string'
PUBLIC	??_C@_0CL@IIKFACCB@The?5file?8s?5AIFF?9C?5version?5is?5not@ ; `string'
PUBLIC	??_C@_04ELFAHOMP@BYTE?$AA@			; `string'
PUBLIC	?Open@CWaveFile@WaveLoader@@IAEJPBDPAX@Z	; WaveLoader::CWaveFile::Open
PUBLIC	?GetWaveFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z ; WaveLoader::CWaveFile::GetWaveFormat
PUBLIC	?GetAiffFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z ; WaveLoader::CWaveFile::GetAiffFormat
EXTRN	?TrackingPoolAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolAlloc
;	COMDAT ??_C@_0DC@IFKBAFN@?$CIpszFileName?5?$HM?$HM?5hFile?$CJ?5?$CG?$CG?5?$CB?$CIpszF@
CONST	SEGMENT
??_C@_0DC@IFKBAFN@?$CIpszFileName?5?$HM?$HM?5hFile?$CJ?5?$CG?$CG?5?$CB?$CIpszF@ DB '('
	DB	'pszFileName || hFile) && !(pszFileName && hFile)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CGAHBFNM@CWaveFile?3?3Open?$AA@
CONST	SEGMENT
??_C@_0BA@CGAHBFNM@CWaveFile?3?3Open?$AA@ DB 'CWaveFile::Open', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OHEGKMMD@The?5file?5type?5is?5not?5WAVE?$AA@
CONST	SEGMENT
??_C@_0BK@OHEGKMMD@The?5file?5type?5is?5not?5WAVE?$AA@ DB 'The file type '
	DB	'is not WAVE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CAIFKCHB@The?5file?5type?5is?5not?5AIFF?1AIFF?9C@
CONST	SEGMENT
??_C@_0CB@CAIFKCHB@The?5file?5type?5is?5not?5AIFF?1AIFF?9C@ DB 'The file '
	DB	'type is not AIFF/AIFF-C', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IIKFACCB@The?5file?8s?5AIFF?9C?5version?5is?5not@
CONST	SEGMENT
??_C@_0CL@IIKFACCB@The?5file?8s?5AIFF?9C?5version?5is?5not@ DB 'The file'''
	DB	's AIFF-C version is not supported', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04ELFAHOMP@BYTE?$AA@
CONST	SEGMENT
??_C@_04ELFAHOMP@BYTE?$AA@ DB 'BYTE', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Open@CWaveFile@WaveLoader@@IAEJPBDPAX@Z
_TEXT	SEGMENT
tv74 = -60
_this$ = -56
$T31586 = -52
_hr$ = -48
_AiffSoundHeader$ = -44
_VersionChunk$ = -36
_dwFormatSize$ = -12
_dwType$ = -8
_dwVersion$ = -4
_pszFileName$ = 8
_hFile$ = 12
?Open@CWaveFile@WaveLoader@@IAEJPBDPAX@Z PROC NEAR	; WaveLoader::CWaveFile::Open, COMDAT
; _this$ = ecx

; 836  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 837  :     HRESULT                 hr              = S_OK;

  00009	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 838  :     DWORD                   dwType;
; 839  :     CRiffChunk              VersionChunk;

  00010	8d 4d dc	 lea	 ecx, DWORD PTR _VersionChunk$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::CRiffChunk

; 840  :     DWORD                   dwVersion;
; 841  :     DWORD                   dwFormatSize;
; 842  :     AIFFSOUNDHDR            AiffSoundHeader;
; 843  : 
; 844  :     DPF_ENTER();
; 845  : 
; 846  :     ASSERT((pszFileName || hFile) && !(pszFileName && hFile));

  00018	83 7d 08 00	 cmp	 DWORD PTR _pszFileName$[ebp], 0
  0001c	75 06		 jne	 SHORT $L31582
  0001e	83 7d 0c 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00022	74 15		 je	 SHORT $L31584
$L31582:
  00024	83 7d 08 00	 cmp	 DWORD PTR _pszFileName$[ebp], 0
  00028	74 06		 je	 SHORT $L31583
  0002a	83 7d 0c 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  0002e	75 09		 jne	 SHORT $L31584
$L31583:
  00030	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
  00037	eb 07		 jmp	 SHORT $L31585
$L31584:
  00039	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR tv74[ebp], 1
$L31585:
  00040	68 4e 03 00 00	 push	 846			; 0000034eH
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0004a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DC@IFKBAFN@?$CIpszFileName?5?$HM?$HM?5hFile?$CJ?5?$CG?$CG?5?$CB?$CIpszF@
  0004f	8b 45 c4	 mov	 eax, DWORD PTR tv74[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00058	83 c4 10	 add	 esp, 16			; 00000010H

; 847  :     
; 848  :     //
; 849  :     // If we're already open, close
; 850  :     //
; 851  : 
; 852  :     Close();

  0005b	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?Close@CWaveFile@WaveLoader@@QAEXXZ ; WaveLoader::CWaveFile::Close

; 853  : 
; 854  :     //
; 855  :     // Open the file
; 856  :     //
; 857  : 
; 858  :     if(pszFileName)

  00063	83 7d 08 00	 cmp	 DWORD PTR _pszFileName$[ebp], 0
  00067	74 1c		 je	 SHORT $L31086

; 859  :     {
; 860  :         hr = m_Stream.Open(pszFileName, GENERIC_READ, FILE_SHARE_READ, OPEN_EXISTING, 0);

  00069	6a 00		 push	 0
  0006b	6a 03		 push	 3
  0006d	6a 01		 push	 1
  0006f	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  00077	51		 push	 ecx
  00078	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z ; WaveLoader::CStdFileStream::Open
  00080	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax

; 861  :     }
; 862  :     else

  00083	eb 0c		 jmp	 SHORT $L31087
$L31086:

; 863  :     {
; 864  :         m_Stream.Attach(hFile);

  00085	8b 55 0c	 mov	 edx, DWORD PTR _hFile$[ebp]
  00088	52		 push	 edx
  00089	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	e8 00 00 00 00	 call	 ?Attach@CStdFileStream@WaveLoader@@QAEXPAX@Z ; WaveLoader::CStdFileStream::Attach
$L31087:

; 865  :     }
; 866  : 
; 867  :     //
; 868  :     // Determine the file type by opening the top-level chunk
; 869  :     //
; 870  : 
; 871  :     if(SUCCEEDED(hr))

  00091	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00095	7c 54		 jl	 SHORT $L31089

; 872  :     {
; 873  :         hr = m_ParentChunk.Open(NULL, &m_Stream, WAVELDR_FOURCC_RIFF);

  00097	68 52 49 46 46	 push	 1179011410		; 46464952H
  0009c	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	50		 push	 eax
  000a0	6a 00		 push	 0
  000a2	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	83 c1 08	 add	 ecx, 8
  000a8	e8 00 00 00 00	 call	 ?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z ; WaveLoader::CRiffChunk::Open
  000ad	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax

; 874  : 
; 875  :         if(SUCCEEDED(hr))

  000b0	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b4	7c 0c		 jl	 SHORT $L31091

; 876  :         {
; 877  :             m_dwFileType = WAVELDR_FILETYPE_WAVE;

  000b6	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 878  :         }
; 879  :         else

  000c0	eb 29		 jmp	 SHORT $L31089
$L31091:

; 880  :         {
; 881  :             hr = m_ParentChunk.Open(NULL, &m_Stream, WAVELDR_FOURCC_FORM);

  000c2	68 46 4f 52 4d	 push	 1297239878		; 4d524f46H
  000c7	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  000ca	52		 push	 edx
  000cb	6a 00		 push	 0
  000cd	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	83 c1 08	 add	 ecx, 8
  000d3	e8 00 00 00 00	 call	 ?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z ; WaveLoader::CRiffChunk::Open
  000d8	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax

; 882  : 
; 883  :             if(SUCCEEDED(hr))

  000db	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000df	7c 0a		 jl	 SHORT $L31089

; 884  :             {
; 885  :                 m_dwFileType = WAVELDR_FILETYPE_AIFF;

  000e1	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  000e4	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1
$L31089:

; 886  :             }
; 887  :         }
; 888  :     }
; 889  : 
; 890  :     if(SUCCEEDED(hr))

  000eb	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ef	0f 8c b0 00 00
	00		 jl	 $L31096

; 891  :     {
; 892  :         hr = m_ParentChunk.Read(0, &dwType, sizeof(dwType));

  000f5	6a 00		 push	 0
  000f7	6a 04		 push	 4
  000f9	8d 4d f8	 lea	 ecx, DWORD PTR _dwType$[ebp]
  000fc	51		 push	 ecx
  000fd	6a 00		 push	 0
  000ff	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	83 c1 08	 add	 ecx, 8
  00105	e8 00 00 00 00	 call	 ?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z ; WaveLoader::CRiffChunk::Read
  0010a	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax

; 893  : 
; 894  :         if(SUCCEEDED(hr))

  0010d	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00111	0f 8c 8e 00 00
	00		 jl	 $L31096

; 895  :         {
; 896  :             if(WAVELDR_FILETYPE_WAVE == m_dwFileType)

  00117	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0011a	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  0011e	75 3f		 jne	 SHORT $L31099

; 897  :             {
; 898  :                 if(WAVELDR_FOURCC_WAVE != dwType)

  00120	81 7d f8 57 41
	56 45		 cmp	 DWORD PTR _dwType$[ebp], 1163280727 ; 45564157H
  00127	74 34		 je	 SHORT $L31100

; 899  :                 {
; 900  :                     DPF_ERROR("The file type is not WAVE");

  00129	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  0012e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@CGAHBFNM@CWaveFile?3?3Open?$AA@
  00133	68 84 03 00 00	 push	 900			; 00000384H
  00138	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0013d	6a 04		 push	 4
  0013f	6a 09		 push	 9
  00141	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00146	83 c4 18	 add	 esp, 24			; 00000018H
  00149	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@OHEGKMMD@The?5file?5type?5is?5not?5WAVE?$AA@
  0014e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00153	83 c4 04	 add	 esp, 4

; 901  :                     hr = E_FAIL;

  00156	c7 45 d0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L31100:

; 902  :                 }
; 903  :             }
; 904  :             else

  0015d	eb 46		 jmp	 SHORT $L31096
$L31099:

; 905  :             {
; 906  :                 if((WAVELDR_FOURCC_AIFF != dwType) && (WAVELDR_FOURCC_AIFFC != dwType))

  0015f	81 7d f8 41 49
	46 46		 cmp	 DWORD PTR _dwType$[ebp], 1179011393 ; 46464941H
  00166	74 3d		 je	 SHORT $L31096
  00168	81 7d f8 41 49
	46 43		 cmp	 DWORD PTR _dwType$[ebp], 1128679745 ; 43464941H
  0016f	74 34		 je	 SHORT $L31096

; 907  :                 {
; 908  :                     DPF_ERROR("The file type is not AIFF/AIFF-C");

  00171	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  00176	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@CGAHBFNM@CWaveFile?3?3Open?$AA@
  0017b	68 8c 03 00 00	 push	 908			; 0000038cH
  00180	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  00185	6a 04		 push	 4
  00187	6a 09		 push	 9
  00189	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0018e	83 c4 18	 add	 esp, 24			; 00000018H
  00191	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@CAIFKCHB@The?5file?5type?5is?5not?5AIFF?1AIFF?9C@
  00196	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0019b	83 c4 04	 add	 esp, 4

; 909  :                     hr = E_FAIL;

  0019e	c7 45 d0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L31096:

; 910  :                 }
; 911  :             }
; 912  :         }
; 913  :     }
; 914  : 
; 915  :     if(SUCCEEDED(hr) && (WAVELDR_FILETYPE_AIFF == m_dwFileType) && (WAVELDR_FOURCC_AIFFC == dwType))

  001a5	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001a9	0f 8c 8f 00 00
	00		 jl	 $L31109
  001af	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  001b2	83 78 38 01	 cmp	 DWORD PTR [eax+56], 1
  001b6	0f 85 82 00 00
	00		 jne	 $L31109
  001bc	81 7d f8 41 49
	46 43		 cmp	 DWORD PTR _dwType$[ebp], 1128679745 ; 43464941H
  001c3	75 79		 jne	 SHORT $L31109

; 916  :     {
; 917  :         hr = VersionChunk.Open(&m_ParentChunk, &m_Stream, WAVELDR_FOURCC_AIFF_VERSION);

  001c5	68 52 56 45 52	 push	 1380275794		; 52455652H
  001ca	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  001cd	51		 push	 ecx
  001ce	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  001d1	83 c2 08	 add	 edx, 8
  001d4	52		 push	 edx
  001d5	8d 4d dc	 lea	 ecx, DWORD PTR _VersionChunk$[ebp]
  001d8	e8 00 00 00 00	 call	 ?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z ; WaveLoader::CRiffChunk::Open
  001dd	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax

; 918  : 
; 919  :         if(SUCCEEDED(hr))

  001e0	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001e4	7c 15		 jl	 SHORT $L31111

; 920  :         {
; 921  :             hr = VersionChunk.Read(0, &dwVersion, sizeof(dwVersion));

  001e6	6a 00		 push	 0
  001e8	6a 04		 push	 4
  001ea	8d 45 fc	 lea	 eax, DWORD PTR _dwVersion$[ebp]
  001ed	50		 push	 eax
  001ee	6a 00		 push	 0
  001f0	8d 4d dc	 lea	 ecx, DWORD PTR _VersionChunk$[ebp]
  001f3	e8 00 00 00 00	 call	 ?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z ; WaveLoader::CRiffChunk::Read
  001f8	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L31111:

; 922  :         }
; 923  : 
; 924  :         if(SUCCEEDED(hr) && (WAVELDR_AIFFC_VERSION != dwVersion))

  001fb	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001ff	7c 3d		 jl	 SHORT $L31109
  00201	81 7d fc 40 51
	80 a2		 cmp	 DWORD PTR _dwVersion$[ebp], -1568648896 ; a2805140H
  00208	74 34		 je	 SHORT $L31109

; 925  :         {
; 926  :             DPF_ERROR("The file's AIFF-C version is not supported");

  0020a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  0020f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@CGAHBFNM@CWaveFile?3?3Open?$AA@
  00214	68 9e 03 00 00	 push	 926			; 0000039eH
  00219	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0021e	6a 04		 push	 4
  00220	6a 09		 push	 9
  00222	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00227	83 c4 18	 add	 esp, 24			; 00000018H
  0022a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@IIKFACCB@The?5file?8s?5AIFF?9C?5version?5is?5not@
  0022f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00234	83 c4 04	 add	 esp, 4

; 927  :             hr = E_FAIL;

  00237	c7 45 d0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L31109:

; 928  :         }
; 929  :     }
; 930  : 
; 931  :     //
; 932  :     // Initialize the required chunk objects
; 933  :     //
; 934  : 
; 935  :     if(SUCCEEDED(hr))

  0023e	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00242	7c 30		 jl	 SHORT $L31117

; 936  :     {
; 937  :         hr = m_DataChunk.Open(&m_ParentChunk, &m_Stream, (WAVELDR_FILETYPE_WAVE == m_dwFileType) ? WAVELDR_FOURCC_DATA : WAVELDR_FOURCC_SOUND);

  00244	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00247	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0024a	f7 da		 neg	 edx
  0024c	1b d2		 sbb	 edx, edx
  0024e	81 e2 ef f1 d9
	e2		 and	 edx, -489033233		; e2d9f1efH
  00254	81 c2 64 61 74
	61		 add	 edx, 1635017060		; 61746164H
  0025a	52		 push	 edx
  0025b	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  0025e	50		 push	 eax
  0025f	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00262	83 c1 08	 add	 ecx, 8
  00265	51		 push	 ecx
  00266	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00269	83 c1 20	 add	 ecx, 32			; 00000020H
  0026c	e8 00 00 00 00	 call	 ?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z ; WaveLoader::CRiffChunk::Open
  00271	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L31117:

; 938  :     }
; 939  : 
; 940  :     //
; 941  :     // Load the file format
; 942  :     //
; 943  : 
; 944  :     if(SUCCEEDED(hr))

  00274	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00278	7c 31		 jl	 SHORT $L31119

; 945  :     {
; 946  :         if(WAVELDR_FILETYPE_WAVE == m_dwFileType)

  0027a	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0027d	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00281	75 15		 jne	 SHORT $L31120

; 947  :         {
; 948  :             hr = GetWaveFormat(NULL, 0, &dwFormatSize);

  00283	8d 45 f4	 lea	 eax, DWORD PTR _dwFormatSize$[ebp]
  00286	50		 push	 eax
  00287	6a 00		 push	 0
  00289	6a 00		 push	 0
  0028b	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0028e	e8 00 00 00 00	 call	 ?GetWaveFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z ; WaveLoader::CWaveFile::GetWaveFormat
  00293	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax

; 949  :         }
; 950  :         else

  00296	eb 13		 jmp	 SHORT $L31119
$L31120:

; 951  :         {
; 952  :             hr = GetAiffFormat(NULL, 0, &dwFormatSize);

  00298	8d 4d f4	 lea	 ecx, DWORD PTR _dwFormatSize$[ebp]
  0029b	51		 push	 ecx
  0029c	6a 00		 push	 0
  0029e	6a 00		 push	 0
  002a0	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  002a3	e8 00 00 00 00	 call	 ?GetAiffFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z ; WaveLoader::CWaveFile::GetAiffFormat
  002a8	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L31119:

; 953  :         }
; 954  :     }
; 955  : 
; 956  :     if(SUCCEEDED(hr))

  002ab	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002af	7c 3a		 jl	 SHORT $L31123

; 957  :     {
; 958  :         hr = HRFROMP(m_pwfxFormat = (LPWAVEFORMATEX)MEMALLOC(BYTE, dwFormatSize));

  002b1	6a 01		 push	 1
  002b3	8b 55 f4	 mov	 edx, DWORD PTR _dwFormatSize$[ebp]
  002b6	52		 push	 edx
  002b7	68 44 53 64 61	 push	 1633964868		; 61645344H
  002bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04ELFAHOMP@BYTE?$AA@
  002c1	68 be 03 00 00	 push	 958			; 000003beH
  002c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  002cb	e8 00 00 00 00	 call	 ?TrackingPoolAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingPoolAlloc
  002d0	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  002d3	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
  002d6	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  002d9	33 c0		 xor	 eax, eax
  002db	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  002df	0f 95 c0	 setne	 al
  002e2	48		 dec	 eax
  002e3	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH
  002e8	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L31123:

; 959  :     }
; 960  : 
; 961  :     if(SUCCEEDED(hr))

  002eb	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002ef	7c 3b		 jl	 SHORT $L31131

; 962  :     {
; 963  :         if(WAVELDR_FILETYPE_WAVE == m_dwFileType)

  002f1	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  002f4	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  002f8	75 1a		 jne	 SHORT $L31132

; 964  :         {
; 965  :             hr = GetWaveFormat(m_pwfxFormat, dwFormatSize, NULL);

  002fa	6a 00		 push	 0
  002fc	8b 55 f4	 mov	 edx, DWORD PTR _dwFormatSize$[ebp]
  002ff	52		 push	 edx
  00300	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00303	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00306	51		 push	 ecx
  00307	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0030a	e8 00 00 00 00	 call	 ?GetWaveFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z ; WaveLoader::CWaveFile::GetWaveFormat
  0030f	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax

; 966  :         }
; 967  :         else

  00312	eb 18		 jmp	 SHORT $L31131
$L31132:

; 968  :         {
; 969  :             hr = GetAiffFormat(m_pwfxFormat, dwFormatSize, NULL);

  00314	6a 00		 push	 0
  00316	8b 55 f4	 mov	 edx, DWORD PTR _dwFormatSize$[ebp]
  00319	52		 push	 edx
  0031a	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  0031d	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00320	51		 push	 ecx
  00321	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00324	e8 00 00 00 00	 call	 ?GetAiffFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z ; WaveLoader::CWaveFile::GetAiffFormat
  00329	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L31131:

; 970  :         }
; 971  :     }
; 972  : 
; 973  :     //
; 974  :     // If this is an AIFF file, offset the start of the wave data
; 975  :     //
; 976  : 
; 977  :     if(SUCCEEDED(hr) && (WAVELDR_FILETYPE_AIFF == m_dwFileType))

  0032c	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00330	7c 4e		 jl	 SHORT $L31135
  00332	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  00335	83 7a 38 01	 cmp	 DWORD PTR [edx+56], 1
  00339	75 45		 jne	 SHORT $L31135

; 978  :     {
; 979  :         hr = m_DataChunk.Read(0, &AiffSoundHeader, sizeof(AiffSoundHeader));

  0033b	6a 00		 push	 0
  0033d	6a 08		 push	 8
  0033f	8d 45 d4	 lea	 eax, DWORD PTR _AiffSoundHeader$[ebp]
  00342	50		 push	 eax
  00343	6a 00		 push	 0
  00345	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00348	83 c1 20	 add	 ecx, 32			; 00000020H
  0034b	e8 00 00 00 00	 call	 ?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z ; WaveLoader::CRiffChunk::Read
  00350	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax

; 980  : 
; 981  :         if(SUCCEEDED(hr))

  00353	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00357	7c 27		 jl	 SHORT $L31135

; 982  :         {
; 983  :             m_DataChunk.m_dwDataOffset += sizeof(AiffSoundHeader) + AiffSoundHeader.dwOffset;

  00359	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0035c	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0035f	8b 45 d4	 mov	 eax, DWORD PTR _AiffSoundHeader$[ebp]
  00362	8d 4c 10 08	 lea	 ecx, DWORD PTR [eax+edx+8]
  00366	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  00369	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 984  :             m_DataChunk.m_dwDataSize -= sizeof(AiffSoundHeader) + AiffSoundHeader.dwOffset;

  0036c	8b 45 d4	 mov	 eax, DWORD PTR _AiffSoundHeader$[ebp]
  0036f	83 c0 08	 add	 eax, 8
  00372	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00375	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00378	2b d0		 sub	 edx, eax
  0037a	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  0037d	89 50 30	 mov	 DWORD PTR [eax+48], edx
$L31135:

; 985  :         }
; 986  :     }
; 987  : 
; 988  :     DPF_LEAVE_HRESULT(hr);
; 989  : 
; 990  :     return hr;

  00380	8b 4d d0	 mov	 ecx, DWORD PTR _hr$[ebp]
  00383	89 4d cc	 mov	 DWORD PTR $T31586[ebp], ecx
  00386	8d 4d dc	 lea	 ecx, DWORD PTR _VersionChunk$[ebp]
  00389	e8 00 00 00 00	 call	 ??1CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::~CRiffChunk
  0038e	8b 45 cc	 mov	 eax, DWORD PTR $T31586[ebp]

; 991  : }

  00391	8b e5		 mov	 esp, ebp
  00393	5d		 pop	 ebp
  00394	c2 08 00	 ret	 8
?Open@CWaveFile@WaveLoader@@IAEJPBDPAX@Z ENDP		; WaveLoader::CWaveFile::Open
_TEXT	ENDS
PUBLIC	??_C@_0N@NLKBAEGB@m_pwfxFormat?$AA@		; `string'
PUBLIC	?GetFormat@CWaveFile@WaveLoader@@QAEJPAUtWAVEFORMATEX@@KPAK@Z ; WaveLoader::CWaveFile::GetFormat
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
;	COMDAT ??_C@_0N@NLKBAEGB@m_pwfxFormat?$AA@
CONST	SEGMENT
??_C@_0N@NLKBAEGB@m_pwfxFormat?$AA@ DB 'm_pwfxFormat', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAUtWAVEFORMATEX@@KPAK@Z
_TEXT	SEGMENT
tv79 = -16
_this$ = -12
_dwValidSize$ = -4
_pwfxFormat$ = 8
_dwFormatSize$ = 12
_pdwRequiredSize$ = 16
?GetFormat@CWaveFile@WaveLoader@@QAEJPAUtWAVEFORMATEX@@KPAK@Z PROC NEAR ; WaveLoader::CWaveFile::GetFormat, COMDAT
; _this$ = ecx

; 1021 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1022 :     DWORD                   dwValidSize;
; 1023 :     HRESULT                 hr;
; 1024 : 
; 1025 :     DPF_ENTER();
; 1026 : 
; 1027 :     ASSERT(m_pwfxFormat);

  00009	68 03 04 00 00	 push	 1027			; 00000403H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@NLKBAEGB@m_pwfxFormat?$AA@
  00018	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00021	0f 94 c1	 sete	 cl
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 1028 :     
; 1029 :     dwValidSize = sizeof(*m_pwfxFormat) + m_pwfxFormat->cbSize;

  0002d	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00030	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00033	0f b7 48 10	 movzx	 ecx, WORD PTR [eax+16]
  00037	83 c1 12	 add	 ecx, 18			; 00000012H
  0003a	89 4d fc	 mov	 DWORD PTR _dwValidSize$[ebp], ecx

; 1030 : 
; 1031 :     if(pwfxFormat && dwFormatSize)

  0003d	83 7d 08 00	 cmp	 DWORD PTR _pwfxFormat$[ebp], 0
  00041	74 53		 je	 SHORT $L31148
  00043	83 7d 0c 00	 cmp	 DWORD PTR _dwFormatSize$[ebp], 0
  00047	74 4d		 je	 SHORT $L31148

; 1032 :     {
; 1033 :         CopyMemory(pwfxFormat, m_pwfxFormat, min(dwFormatSize, dwValidSize));

  00049	8b 55 0c	 mov	 edx, DWORD PTR _dwFormatSize$[ebp]
  0004c	3b 55 fc	 cmp	 edx, DWORD PTR _dwValidSize$[ebp]
  0004f	73 08		 jae	 SHORT $L31590
  00051	8b 45 0c	 mov	 eax, DWORD PTR _dwFormatSize$[ebp]
  00054	89 45 f0	 mov	 DWORD PTR tv79[ebp], eax
  00057	eb 06		 jmp	 SHORT $L31591
$L31590:
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _dwValidSize$[ebp]
  0005c	89 4d f0	 mov	 DWORD PTR tv79[ebp], ecx
$L31591:
  0005f	8b 55 f0	 mov	 edx, DWORD PTR tv79[ebp]
  00062	52		 push	 edx
  00063	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00069	51		 push	 ecx
  0006a	8b 55 08	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _memcpy
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1034 : 
; 1035 :         if(dwFormatSize > dwValidSize)

  00076	8b 45 0c	 mov	 eax, DWORD PTR _dwFormatSize$[ebp]
  00079	3b 45 fc	 cmp	 eax, DWORD PTR _dwValidSize$[ebp]
  0007c	76 18		 jbe	 SHORT $L31148

; 1036 :         {
; 1037 :             ZeroMemory((LPBYTE)pwfxFormat + dwValidSize, dwFormatSize - dwValidSize);

  0007e	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFormatSize$[ebp]
  00081	2b 4d fc	 sub	 ecx, DWORD PTR _dwValidSize$[ebp]
  00084	51		 push	 ecx
  00085	6a 00		 push	 0
  00087	8b 55 08	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  0008a	03 55 fc	 add	 edx, DWORD PTR _dwValidSize$[ebp]
  0008d	52		 push	 edx
  0008e	e8 00 00 00 00	 call	 _memset
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH
$L31148:

; 1038 :         }
; 1039 :     }
; 1040 : 
; 1041 :     if(pdwRequiredSize)

  00096	83 7d 10 00	 cmp	 DWORD PTR _pdwRequiredSize$[ebp], 0
  0009a	74 08		 je	 SHORT $L31151

; 1042 :     {
; 1043 :         *pdwRequiredSize = dwValidSize;

  0009c	8b 45 10	 mov	 eax, DWORD PTR _pdwRequiredSize$[ebp]
  0009f	8b 4d fc	 mov	 ecx, DWORD PTR _dwValidSize$[ebp]
  000a2	89 08		 mov	 DWORD PTR [eax], ecx
$L31151:

; 1044 :     }
; 1045 : 
; 1046 :     DPF_LEAVE_HRESULT(S_OK);
; 1047 : 
; 1048 :     return S_OK;

  000a4	33 c0		 xor	 eax, eax

; 1049 : }

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 0c 00	 ret	 12			; 0000000cH
?GetFormat@CWaveFile@WaveLoader@@QAEJPAUtWAVEFORMATEX@@KPAK@Z ENDP ; WaveLoader::CWaveFile::GetFormat
_TEXT	ENDS
PUBLIC	??_C@_0CG@JOBMGAMO@WAVELDR_FILETYPE_WAVE?5?$DN?$DN?5m_dwFil@ ; `string'
PUBLIC	?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ	; WaveLoader::CRiffChunk::GetDataSize
;	COMDAT ??_C@_0CG@JOBMGAMO@WAVELDR_FILETYPE_WAVE?5?$DN?$DN?5m_dwFil@
CONST	SEGMENT
??_C@_0CG@JOBMGAMO@WAVELDR_FILETYPE_WAVE?5?$DN?$DN?5m_dwFil@ DB 'WAVELDR_'
	DB	'FILETYPE_WAVE == m_dwFileType', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetWaveFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z
_TEXT	SEGMENT
tv133 = -48
tv87 = -44
_this$ = -40
$T31599 = -36
_hr$ = -32
_FormatChunk$ = -28
_dwValidSize$ = -4
_pwfxFormat$ = 8
_dwFormatSize$ = 12
_pdwRequiredSize$ = 16
?GetWaveFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z PROC NEAR ; WaveLoader::CWaveFile::GetWaveFormat, COMDAT
; _this$ = ecx

; 1079 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 1080 :     CRiffChunk              FormatChunk;

  00009	8d 4d e4	 lea	 ecx, DWORD PTR _FormatChunk$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::CRiffChunk

; 1081 :     DWORD                   dwValidSize;
; 1082 :     HRESULT                 hr;
; 1083 : 
; 1084 :     DPF_ENTER();
; 1085 : 
; 1086 :     ASSERT(WAVELDR_FILETYPE_WAVE == m_dwFileType);

  00011	68 3e 04 00 00	 push	 1086			; 0000043eH
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@JOBMGAMO@WAVELDR_FILETYPE_WAVE?5?$DN?$DN?5m_dwFil@
  00020	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00023	33 c9		 xor	 ecx, ecx
  00025	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00029	0f 95 c1	 setne	 cl
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 1087 : 
; 1088 :     //
; 1089 :     // Read the format chunk into the buffer.  Make sure to fill in the full
; 1090 :     // WAVEFORMATEX structure, even if the data in the file isn't enough.
; 1091 :     //
; 1092 : 
; 1093 :     hr = FormatChunk.Open(&m_ParentChunk, &m_Stream, WAVELDR_FOURCC_FORMAT);

  00035	68 66 6d 74 20	 push	 544501094		; 20746d66H
  0003a	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	52		 push	 edx
  0003e	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	83 c0 08	 add	 eax, 8
  00044	50		 push	 eax
  00045	8d 4d e4	 lea	 ecx, DWORD PTR _FormatChunk$[ebp]
  00048	e8 00 00 00 00	 call	 ?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z ; WaveLoader::CRiffChunk::Open
  0004d	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax

; 1094 : 
; 1095 :     if(SUCCEEDED(hr))

  00050	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00054	7c 38		 jl	 SHORT $L31164

; 1096 :     {
; 1097 :         dwValidSize = FormatChunk.GetDataSize();

  00056	8d 4d e4	 lea	 ecx, DWORD PTR _FormatChunk$[ebp]
  00059	e8 00 00 00 00	 call	 ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ ; WaveLoader::CRiffChunk::GetDataSize
  0005e	89 45 fc	 mov	 DWORD PTR _dwValidSize$[ebp], eax

; 1098 : 
; 1099 :         hr = FormatChunk.Read(0, pwfxFormat, min(dwValidSize, dwFormatSize));

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _dwValidSize$[ebp]
  00064	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwFormatSize$[ebp]
  00067	73 08		 jae	 SHORT $L31595
  00069	8b 55 fc	 mov	 edx, DWORD PTR _dwValidSize$[ebp]
  0006c	89 55 d4	 mov	 DWORD PTR tv87[ebp], edx
  0006f	eb 06		 jmp	 SHORT $L31596
$L31595:
  00071	8b 45 0c	 mov	 eax, DWORD PTR _dwFormatSize$[ebp]
  00074	89 45 d4	 mov	 DWORD PTR tv87[ebp], eax
$L31596:
  00077	6a 00		 push	 0
  00079	8b 4d d4	 mov	 ecx, DWORD PTR tv87[ebp]
  0007c	51		 push	 ecx
  0007d	8b 55 08	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  00080	52		 push	 edx
  00081	6a 00		 push	 0
  00083	8d 4d e4	 lea	 ecx, DWORD PTR _FormatChunk$[ebp]
  00086	e8 00 00 00 00	 call	 ?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z ; WaveLoader::CRiffChunk::Read
  0008b	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax
$L31164:

; 1100 :     }
; 1101 : 
; 1102 :     if(SUCCEEDED(hr) && (dwFormatSize > dwValidSize))

  0008e	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00092	7c 20		 jl	 SHORT $L31166
  00094	8b 45 0c	 mov	 eax, DWORD PTR _dwFormatSize$[ebp]
  00097	3b 45 fc	 cmp	 eax, DWORD PTR _dwValidSize$[ebp]
  0009a	76 18		 jbe	 SHORT $L31166

; 1103 :     {
; 1104 :         ZeroMemory((LPBYTE)pwfxFormat + dwValidSize, dwFormatSize - dwValidSize);

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFormatSize$[ebp]
  0009f	2b 4d fc	 sub	 ecx, DWORD PTR _dwValidSize$[ebp]
  000a2	51		 push	 ecx
  000a3	6a 00		 push	 0
  000a5	8b 55 08	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  000a8	03 55 fc	 add	 edx, DWORD PTR _dwValidSize$[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 _memset
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L31166:

; 1105 :     }
; 1106 : 
; 1107 :     if(SUCCEEDED(hr) && pdwRequiredSize)

  000b4	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b8	7c 23		 jl	 SHORT $L31169
  000ba	83 7d 10 00	 cmp	 DWORD PTR _pdwRequiredSize$[ebp], 0
  000be	74 1d		 je	 SHORT $L31169

; 1108 :     {
; 1109 :         *pdwRequiredSize = max(dwValidSize, sizeof(*pwfxFormat));

  000c0	83 7d fc 12	 cmp	 DWORD PTR _dwValidSize$[ebp], 18 ; 00000012H
  000c4	76 08		 jbe	 SHORT $L31597
  000c6	8b 45 fc	 mov	 eax, DWORD PTR _dwValidSize$[ebp]
  000c9	89 45 d0	 mov	 DWORD PTR tv133[ebp], eax
  000cc	eb 07		 jmp	 SHORT $L31598
$L31597:
  000ce	c7 45 d0 12 00
	00 00		 mov	 DWORD PTR tv133[ebp], 18 ; 00000012H
$L31598:
  000d5	8b 4d 10	 mov	 ecx, DWORD PTR _pdwRequiredSize$[ebp]
  000d8	8b 55 d0	 mov	 edx, DWORD PTR tv133[ebp]
  000db	89 11		 mov	 DWORD PTR [ecx], edx
$L31169:

; 1110 :     }
; 1111 : 
; 1112 :     DPF_LEAVE_HRESULT(hr);
; 1113 : 
; 1114 :     return hr;

  000dd	8b 45 e0	 mov	 eax, DWORD PTR _hr$[ebp]
  000e0	89 45 dc	 mov	 DWORD PTR $T31599[ebp], eax
  000e3	8d 4d e4	 lea	 ecx, DWORD PTR _FormatChunk$[ebp]
  000e6	e8 00 00 00 00	 call	 ??1CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::~CRiffChunk
  000eb	8b 45 dc	 mov	 eax, DWORD PTR $T31599[ebp]

; 1115 : }

  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 0c 00	 ret	 12			; 0000000cH
?GetWaveFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z ENDP ; WaveLoader::CWaveFile::GetWaveFormat
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\waveldr.h
_TEXT	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4
?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ PROC NEAR	; WaveLoader::CRiffChunk::GetDataSize, COMDAT
; _this$ = ecx

; 276  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 277  :         return m_dwDataSize;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 278  :     }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ ENDP		; WaveLoader::CRiffChunk::GetDataSize
_TEXT	ENDS
PUBLIC	??_C@_0CG@EHNKEHDO@WAVELDR_FILETYPE_AIFF?5?$DN?$DN?5m_dwFil@ ; `string'
PUBLIC	??_C@_0BJ@EIPMIGEK@CWaveFile?3?3GetAiffFormat?$AA@ ; `string'
PUBLIC	??_C@_0CC@NCAIELLP@Unsupported?5AIFF?5compression?5typ@ ; `string'
EXTRN	_XAudioCreatePcmFormat@16:NEAR
;	COMDAT ??_C@_0CG@EHNKEHDO@WAVELDR_FILETYPE_AIFF?5?$DN?$DN?5m_dwFil@
; File c:\xbox\private\windows\directx\dsound\common\waveldr.cpp
CONST	SEGMENT
??_C@_0CG@EHNKEHDO@WAVELDR_FILETYPE_AIFF?5?$DN?$DN?5m_dwFil@ DB 'WAVELDR_'
	DB	'FILETYPE_AIFF == m_dwFileType', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EIPMIGEK@CWaveFile?3?3GetAiffFormat?$AA@
CONST	SEGMENT
??_C@_0BJ@EIPMIGEK@CWaveFile?3?3GetAiffFormat?$AA@ DB 'CWaveFile::GetAiff'
	DB	'Format', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NCAIELLP@Unsupported?5AIFF?5compression?5typ@
CONST	SEGMENT
??_C@_0CC@NCAIELLP@Unsupported?5AIFF?5compression?5typ@ DB 'Unsupported A'
	DB	'IFF compression type', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetAiffFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z
_TEXT	SEGMENT
tv163 = -88
tv89 = -84
_this$ = -80
$T31610 = -76
_WaveFormat$ = -72
_hr$ = -52
_FormatChunk$ = -48
_dwValidSize$ = -24
_AiffFormat$ = -20
_pwfxFormat$ = 8
_dwFormatSize$ = 12
_pdwRequiredSize$ = 16
?GetAiffFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z PROC NEAR ; WaveLoader::CWaveFile::GetAiffFormat, COMDAT
; _this$ = ecx

; 1145 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	89 4d b0	 mov	 DWORD PTR _this$[ebp], ecx

; 1146 :     HRESULT                 hr          = S_OK;

  00009	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1147 :     CRiffChunk              FormatChunk;

  00010	8d 4d d0	 lea	 ecx, DWORD PTR _FormatChunk$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::CRiffChunk

; 1148 :     DWORD                   dwValidSize;
; 1149 :     AIFFFORMAT              AiffFormat;
; 1150 :     WAVEFORMATEX            WaveFormat;
; 1151 : 
; 1152 :     DPF_ENTER();
; 1153 : 
; 1154 :     ASSERT(WAVELDR_FILETYPE_AIFF == m_dwFileType);

  00018	68 82 04 00 00	 push	 1154			; 00000482H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@EHNKEHDO@WAVELDR_FILETYPE_AIFF?5?$DN?$DN?5m_dwFil@
  00027	8b 45 b0	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	33 c9		 xor	 ecx, ecx
  0002c	83 78 38 01	 cmp	 DWORD PTR [eax+56], 1
  00030	0f 95 c1	 setne	 cl
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00039	83 c4 10	 add	 esp, 16			; 00000010H

; 1155 : 
; 1156 :     if(pwfxFormat && dwFormatSize)

  0003c	83 7d 08 00	 cmp	 DWORD PTR _pwfxFormat$[ebp], 0
  00040	0f 84 90 01 00
	00		 je	 $L31184
  00046	83 7d 0c 00	 cmp	 DWORD PTR _dwFormatSize$[ebp], 0
  0004a	0f 84 86 01 00
	00		 je	 $L31184

; 1157 :     {
; 1158 :         //
; 1159 :         // Open the format chunk
; 1160 :         //
; 1161 : 
; 1162 :         hr = FormatChunk.Open(&m_ParentChunk, &m_Stream, WAVELDR_FOURCC_COMM);

  00050	68 43 4f 4d 4d	 push	 1296912195		; 4d4d4f43H
  00055	8b 55 b0	 mov	 edx, DWORD PTR _this$[ebp]
  00058	52		 push	 edx
  00059	8b 45 b0	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	83 c0 08	 add	 eax, 8
  0005f	50		 push	 eax
  00060	8d 4d d0	 lea	 ecx, DWORD PTR _FormatChunk$[ebp]
  00063	e8 00 00 00 00	 call	 ?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z ; WaveLoader::CRiffChunk::Open
  00068	89 45 cc	 mov	 DWORD PTR _hr$[ebp], eax

; 1163 :         
; 1164 :         //
; 1165 :         // Read the base format data
; 1166 :         //
; 1167 : 
; 1168 :         if(SUCCEEDED(hr))

  0006b	83 7d cc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0006f	7c 37		 jl	 SHORT $L31186

; 1169 :         {
; 1170 :             dwValidSize = FormatChunk.GetDataSize();

  00071	8d 4d d0	 lea	 ecx, DWORD PTR _FormatChunk$[ebp]
  00074	e8 00 00 00 00	 call	 ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ ; WaveLoader::CRiffChunk::GetDataSize
  00079	89 45 e8	 mov	 DWORD PTR _dwValidSize$[ebp], eax

; 1171 : 
; 1172 :             hr = FormatChunk.Read(0, &AiffFormat, min(sizeof(AiffFormat), dwValidSize));

  0007c	83 7d e8 14	 cmp	 DWORD PTR _dwValidSize$[ebp], 20 ; 00000014H
  00080	76 09		 jbe	 SHORT $L31606
  00082	c7 45 ac 14 00
	00 00		 mov	 DWORD PTR tv89[ebp], 20	; 00000014H
  00089	eb 06		 jmp	 SHORT $L31607
$L31606:
  0008b	8b 4d e8	 mov	 ecx, DWORD PTR _dwValidSize$[ebp]
  0008e	89 4d ac	 mov	 DWORD PTR tv89[ebp], ecx
$L31607:
  00091	6a 00		 push	 0
  00093	8b 55 ac	 mov	 edx, DWORD PTR tv89[ebp]
  00096	52		 push	 edx
  00097	8d 45 ec	 lea	 eax, DWORD PTR _AiffFormat$[ebp]
  0009a	50		 push	 eax
  0009b	6a 00		 push	 0
  0009d	8d 4d d0	 lea	 ecx, DWORD PTR _FormatChunk$[ebp]
  000a0	e8 00 00 00 00	 call	 ?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z ; WaveLoader::CRiffChunk::Read
  000a5	89 45 cc	 mov	 DWORD PTR _hr$[ebp], eax
$L31186:

; 1173 :         }
; 1174 : 
; 1175 :         if(SUCCEEDED(hr) && (sizeof(AiffFormat) > dwValidSize))

  000a8	83 7d cc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ac	7c 21		 jl	 SHORT $L31188
  000ae	83 7d e8 14	 cmp	 DWORD PTR _dwValidSize$[ebp], 20 ; 00000014H
  000b2	73 1b		 jae	 SHORT $L31188

; 1176 :         {
; 1177 :             ZeroMemory((LPBYTE)&AiffFormat + dwValidSize, sizeof(AiffFormat) - dwValidSize);

  000b4	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  000b9	2b 4d e8	 sub	 ecx, DWORD PTR _dwValidSize$[ebp]
  000bc	51		 push	 ecx
  000bd	6a 00		 push	 0
  000bf	8b 55 e8	 mov	 edx, DWORD PTR _dwValidSize$[ebp]
  000c2	8d 44 15 ec	 lea	 eax, DWORD PTR _AiffFormat$[ebp+edx]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 _memset
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
$L31188:

; 1178 :         }
; 1179 : 
; 1180 :         //
; 1181 :         // If no compression type is specified, assume PCM
; 1182 :         //
; 1183 : 
; 1184 :         if(SUCCEEDED(hr) && !AiffFormat.dwCompression)

  000cf	83 7d cc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000d3	7c 0d		 jl	 SHORT $L31191
  000d5	83 7d fc 00	 cmp	 DWORD PTR _AiffFormat$[ebp+16], 0
  000d9	75 07		 jne	 SHORT $L31191

; 1185 :         {
; 1186 :             AiffFormat.dwCompression = WAVELDR_FOURCC_NONE;

  000db	c7 45 fc 4e 4f
	4e 45		 mov	 DWORD PTR _AiffFormat$[ebp+16], 1162760014 ; 454e4f4eH
$L31191:

; 1187 :         }
; 1188 : 
; 1189 :         //
; 1190 :         // Currently, only PCM is supported
; 1191 :         //
; 1192 : 
; 1193 :         if(SUCCEEDED(hr) && (WAVELDR_FOURCC_NONE != AiffFormat.dwCompression))

  000e2	83 7d cc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000e6	7c 3d		 jl	 SHORT $L31193
  000e8	81 7d fc 4e 4f
	4e 45		 cmp	 DWORD PTR _AiffFormat$[ebp+16], 1162760014 ; 454e4f4eH
  000ef	74 34		 je	 SHORT $L31193

; 1194 :         {
; 1195 :             DPF_ERROR("Unsupported AIFF compression type");

  000f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  000f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EIPMIGEK@CWaveFile?3?3GetAiffFormat?$AA@
  000fb	68 ab 04 00 00	 push	 1195			; 000004abH
  00100	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  00105	6a 04		 push	 4
  00107	6a 09		 push	 9
  00109	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0010e	83 c4 18	 add	 esp, 24			; 00000018H
  00111	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@NCAIELLP@Unsupported?5AIFF?5compression?5typ@
  00116	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0011b	83 c4 04	 add	 esp, 4

; 1196 :             hr = E_FAIL;

  0011e	c7 45 cc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L31193:

; 1197 :         }
; 1198 : 
; 1199 :         //
; 1200 :         // Convert AIFF format to WAVE format
; 1201 :         //
; 1202 : 
; 1203 :         if(SUCCEEDED(hr))

  00125	83 7d cc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00129	7c 58		 jl	 SHORT $L31198

; 1204 :         {
; 1205 :             AiffFormat.nChannels = EndianSwapWord(AiffFormat.nChannels);

  0012b	8b 4d ec	 mov	 ecx, DWORD PTR _AiffFormat$[ebp]
  0012e	e8 00 00 00 00	 call	 ?EndianSwapWord@@YIGG@Z	; EndianSwapWord
  00133	66 89 45 ec	 mov	 WORD PTR _AiffFormat$[ebp], ax

; 1206 :             AiffFormat.wBitsPerSample = EndianSwapWord(AiffFormat.wBitsPerSample);

  00137	8b 4d f2	 mov	 ecx, DWORD PTR _AiffFormat$[ebp+6]
  0013a	e8 00 00 00 00	 call	 ?EndianSwapWord@@YIGG@Z	; EndianSwapWord
  0013f	66 89 45 f2	 mov	 WORD PTR _AiffFormat$[ebp+6], ax

; 1207 :             AiffFormat.wFrequencyExponent = EndianSwapWord(AiffFormat.wFrequencyExponent);

  00143	8b 4d f4	 mov	 ecx, DWORD PTR _AiffFormat$[ebp+8]
  00146	e8 00 00 00 00	 call	 ?EndianSwapWord@@YIGG@Z	; EndianSwapWord
  0014b	66 89 45 f4	 mov	 WORD PTR _AiffFormat$[ebp+8], ax

; 1208 :             AiffFormat.dwFrequencyMantissa = EndianSwapDword(AiffFormat.dwFrequencyMantissa);

  0014f	8b 4d f6	 mov	 ecx, DWORD PTR _AiffFormat$[ebp+10]
  00152	e8 00 00 00 00	 call	 ?EndianSwapDword@@YIKK@Z ; EndianSwapDword
  00157	89 45 f6	 mov	 DWORD PTR _AiffFormat$[ebp+10], eax

; 1209 : 
; 1210 :             XAudioCreatePcmFormat(AiffFormat.nChannels, AiffFormat.dwFrequencyMantissa >> (16414 - (AiffFormat.wFrequencyExponent & 0x7FFF)), AiffFormat.wBitsPerSample, &WaveFormat);

  0015a	8d 4d b8	 lea	 ecx, DWORD PTR _WaveFormat$[ebp]
  0015d	51		 push	 ecx
  0015e	66 8b 55 f2	 mov	 dx, WORD PTR _AiffFormat$[ebp+6]
  00162	52		 push	 edx
  00163	0f b7 45 f4	 movzx	 eax, WORD PTR _AiffFormat$[ebp+8]
  00167	25 ff 7f 00 00	 and	 eax, 32767		; 00007fffH
  0016c	b9 1e 40 00 00	 mov	 ecx, 16414		; 0000401eH
  00171	2b c8		 sub	 ecx, eax
  00173	8b 55 f6	 mov	 edx, DWORD PTR _AiffFormat$[ebp+10]
  00176	d3 ea		 shr	 edx, cl
  00178	52		 push	 edx
  00179	66 8b 45 ec	 mov	 ax, WORD PTR _AiffFormat$[ebp]
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 _XAudioCreatePcmFormat@16
$L31198:

; 1211 :         }
; 1212 : 
; 1213 :         if(SUCCEEDED(hr))

  00183	83 7d cc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00187	7c 29		 jl	 SHORT $L31200

; 1214 :         {
; 1215 :             CopyMemory(pwfxFormat, &WaveFormat, min(sizeof(WaveFormat), dwFormatSize));

  00189	83 7d 0c 12	 cmp	 DWORD PTR _dwFormatSize$[ebp], 18 ; 00000012H
  0018d	76 09		 jbe	 SHORT $L31608
  0018f	c7 45 a8 12 00
	00 00		 mov	 DWORD PTR tv163[ebp], 18 ; 00000012H
  00196	eb 06		 jmp	 SHORT $L31609
$L31608:
  00198	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFormatSize$[ebp]
  0019b	89 4d a8	 mov	 DWORD PTR tv163[ebp], ecx
$L31609:
  0019e	8b 55 a8	 mov	 edx, DWORD PTR tv163[ebp]
  001a1	52		 push	 edx
  001a2	8d 45 b8	 lea	 eax, DWORD PTR _WaveFormat$[ebp]
  001a5	50		 push	 eax
  001a6	8b 4d 08	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  001a9	51		 push	 ecx
  001aa	e8 00 00 00 00	 call	 _memcpy
  001af	83 c4 0c	 add	 esp, 12			; 0000000cH
$L31200:

; 1216 :         }
; 1217 : 
; 1218 :         if(SUCCEEDED(hr) && (dwFormatSize > sizeof(WaveFormat)))

  001b2	83 7d cc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001b6	7c 1e		 jl	 SHORT $L31184
  001b8	83 7d 0c 12	 cmp	 DWORD PTR _dwFormatSize$[ebp], 18 ; 00000012H
  001bc	76 18		 jbe	 SHORT $L31184

; 1219 :         {
; 1220 :             ZeroMemory((LPBYTE)pwfxFormat + sizeof(WaveFormat), dwFormatSize - sizeof(WaveFormat));

  001be	8b 55 0c	 mov	 edx, DWORD PTR _dwFormatSize$[ebp]
  001c1	83 ea 12	 sub	 edx, 18			; 00000012H
  001c4	52		 push	 edx
  001c5	6a 00		 push	 0
  001c7	8b 45 08	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  001ca	83 c0 12	 add	 eax, 18			; 00000012H
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 _memset
  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH
$L31184:

; 1221 :         }
; 1222 :     }
; 1223 :     
; 1224 :     if(SUCCEEDED(hr) && pdwRequiredSize)

  001d6	83 7d cc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001da	7c 0f		 jl	 SHORT $L31205
  001dc	83 7d 10 00	 cmp	 DWORD PTR _pdwRequiredSize$[ebp], 0
  001e0	74 09		 je	 SHORT $L31205

; 1225 :     {
; 1226 :         *pdwRequiredSize = sizeof(WaveFormat);

  001e2	8b 4d 10	 mov	 ecx, DWORD PTR _pdwRequiredSize$[ebp]
  001e5	c7 01 12 00 00
	00		 mov	 DWORD PTR [ecx], 18	; 00000012H
$L31205:

; 1227 :     }
; 1228 : 
; 1229 :     DPF_LEAVE_HRESULT(hr);
; 1230 : 
; 1231 :     return hr;

  001eb	8b 55 cc	 mov	 edx, DWORD PTR _hr$[ebp]
  001ee	89 55 b4	 mov	 DWORD PTR $T31610[ebp], edx
  001f1	8d 4d d0	 lea	 ecx, DWORD PTR _FormatChunk$[ebp]
  001f4	e8 00 00 00 00	 call	 ??1CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::~CRiffChunk
  001f9	8b 45 b4	 mov	 eax, DWORD PTR $T31610[ebp]

; 1232 : }

  001fc	8b e5		 mov	 esp, ebp
  001fe	5d		 pop	 ebp
  001ff	c2 0c 00	 ret	 12			; 0000000cH
?GetAiffFormat@CWaveFile@WaveLoader@@IAEJPAUtWAVEFORMATEX@@KPAK@Z ENDP ; WaveLoader::CWaveFile::GetAiffFormat
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?EndianSwapWord@@YIGG@Z
_TEXT	SEGMENT
_n$ = -4
?EndianSwapWord@@YIGG@Z PROC NEAR			; EndianSwapWord, COMDAT
; _n$ = cx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	66 89 4d fc	 mov	 WORD PTR _n$[ebp], cx

; 40   :     __asm
; 41   :     {
; 42   :         mov     eax, ecx

  00009	8b c1		 mov	 eax, ecx

; 43   :         sar     eax, 8

  0000b	c1 f8 08	 sar	 eax, 8

; 44   :         and     eax, 0ffh

  0000e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH

; 45   : 
; 46   :         mov     ebx, ecx

  00013	8b d9		 mov	 ebx, ecx

; 47   :         shl     ebx, 8

  00015	c1 e3 08	 shl	 ebx, 8

; 48   :         and     ebx, 0ff00h

  00018	81 e3 00 ff 00
	00		 and	 ebx, 65280		; 0000ff00H

; 49   :         or      eax, ebx

  0001e	0b c3		 or	 eax, ebx

; 50   :     }
; 51   : }

  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?EndianSwapWord@@YIGG@Z ENDP				; EndianSwapWord
_TEXT	ENDS
PUBLIC	?GetLoopRegion@CWaveFile@WaveLoader@@QAEJPAK0@Z	; WaveLoader::CWaveFile::GetLoopRegion
PUBLIC	?GetWaveLoopRegion@CWaveFile@WaveLoader@@IAEJPAK0@Z ; WaveLoader::CWaveFile::GetWaveLoopRegion
PUBLIC	?GetAiffLoopRegion@CWaveFile@WaveLoader@@IAEJPAK0@Z ; WaveLoader::CWaveFile::GetAiffLoopRegion
; Function compile flags: /Odt
;	COMDAT ?GetLoopRegion@CWaveFile@WaveLoader@@QAEJPAK0@Z
_TEXT	SEGMENT
_this$ = -8
_hr$ = -4
_pdwLoopStart$ = 8
_pdwLoopLength$ = 12
?GetLoopRegion@CWaveFile@WaveLoader@@QAEJPAK0@Z PROC NEAR ; WaveLoader::CWaveFile::GetLoopRegion, COMDAT
; _this$ = ecx

; 1260 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1261 :     HRESULT                 hr;
; 1262 : 
; 1263 :     DPF_ENTER();
; 1264 : 
; 1265 :     ASSERT(m_pwfxFormat);

  00009	68 f1 04 00 00	 push	 1265			; 000004f1H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@NLKBAEGB@m_pwfxFormat?$AA@
  00018	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00021	0f 94 c1	 sete	 cl
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 1266 : 
; 1267 :     //
; 1268 :     // Read loop region data in samples
; 1269 :     //
; 1270 : 
; 1271 :     if(WAVELDR_FILETYPE_WAVE == m_dwFileType)

  0002d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00030	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00034	75 15		 jne	 SHORT $L31213

; 1272 :     {
; 1273 :         hr = GetWaveLoopRegion(pdwLoopStart, pdwLoopLength);

  00036	8b 45 0c	 mov	 eax, DWORD PTR _pdwLoopLength$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _pdwLoopStart$[ebp]
  0003d	51		 push	 ecx
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?GetWaveLoopRegion@CWaveFile@WaveLoader@@IAEJPAK0@Z ; WaveLoader::CWaveFile::GetWaveLoopRegion
  00046	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 1274 :     }
; 1275 :     else

  00049	eb 13		 jmp	 SHORT $L31214
$L31213:

; 1276 :     {
; 1277 :         hr = GetAiffLoopRegion(pdwLoopStart, pdwLoopLength);

  0004b	8b 55 0c	 mov	 edx, DWORD PTR _pdwLoopLength$[ebp]
  0004e	52		 push	 edx
  0004f	8b 45 08	 mov	 eax, DWORD PTR _pdwLoopStart$[ebp]
  00052	50		 push	 eax
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?GetAiffLoopRegion@CWaveFile@WaveLoader@@IAEJPAK0@Z ; WaveLoader::CWaveFile::GetAiffLoopRegion
  0005b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L31214:

; 1278 :     }
; 1279 : 
; 1280 :     //
; 1281 :     // Convert to bytes
; 1282 :     //
; 1283 : 
; 1284 :     if(SUCCEEDED(hr))

  0005e	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00062	0f 8c a8 00 00
	00		 jl	 $L31216

; 1285 :     {
; 1286 :         if(WAVE_FORMAT_XBOX_ADPCM == m_pwfxFormat->wFormatTag)

  00068	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0006e	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00071	83 f8 69	 cmp	 eax, 105		; 00000069H
  00074	75 6c		 jne	 SHORT $L31217

; 1287 :         {
; 1288 :             *pdwLoopStart /= m_pwfxFormat->nChannels * XBOX_ADPCM_SAMPLES_PER_BLOCK;

  00076	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0007c	0f b7 4a 02	 movzx	 ecx, WORD PTR [edx+2]
  00080	c1 e1 06	 shl	 ecx, 6
  00083	8b 55 08	 mov	 edx, DWORD PTR _pdwLoopStart$[ebp]
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	33 d2		 xor	 edx, edx
  0008a	f7 f1		 div	 ecx
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _pdwLoopStart$[ebp]
  0008f	89 01		 mov	 DWORD PTR [ecx], eax

; 1289 :             *pdwLoopStart *= m_pwfxFormat->nChannels * XBOX_ADPCM_ENCODED_BLOCK_SIZE;

  00091	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00094	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00097	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  0009b	6b c9 24	 imul	 ecx, 36			; 00000024H
  0009e	8b 55 08	 mov	 edx, DWORD PTR _pdwLoopStart$[ebp]
  000a1	8b 02		 mov	 eax, DWORD PTR [edx]
  000a3	0f af c1	 imul	 eax, ecx
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR _pdwLoopStart$[ebp]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax

; 1290 : 
; 1291 :             *pdwLoopLength /= m_pwfxFormat->nChannels * XBOX_ADPCM_SAMPLES_PER_BLOCK;

  000ab	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000ae	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  000b1	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  000b5	c1 e1 06	 shl	 ecx, 6
  000b8	8b 55 0c	 mov	 edx, DWORD PTR _pdwLoopLength$[ebp]
  000bb	8b 02		 mov	 eax, DWORD PTR [edx]
  000bd	33 d2		 xor	 edx, edx
  000bf	f7 f1		 div	 ecx
  000c1	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwLoopLength$[ebp]
  000c4	89 01		 mov	 DWORD PTR [ecx], eax

; 1292 :             *pdwLoopLength *= m_pwfxFormat->nChannels * XBOX_ADPCM_ENCODED_BLOCK_SIZE;

  000c6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000c9	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  000cc	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  000d0	6b c9 24	 imul	 ecx, 36			; 00000024H
  000d3	8b 55 0c	 mov	 edx, DWORD PTR _pdwLoopLength$[ebp]
  000d6	8b 02		 mov	 eax, DWORD PTR [edx]
  000d8	0f af c1	 imul	 eax, ecx
  000db	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwLoopLength$[ebp]
  000de	89 01		 mov	 DWORD PTR [ecx], eax

; 1293 :         }
; 1294 :         else

  000e0	eb 2e		 jmp	 SHORT $L31216
$L31217:

; 1295 :         {
; 1296 :             *pdwLoopStart *= m_pwfxFormat->nBlockAlign;

  000e2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000e5	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  000e8	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  000ec	8b 55 08	 mov	 edx, DWORD PTR _pdwLoopStart$[ebp]
  000ef	8b 02		 mov	 eax, DWORD PTR [edx]
  000f1	0f af c1	 imul	 eax, ecx
  000f4	8b 4d 08	 mov	 ecx, DWORD PTR _pdwLoopStart$[ebp]
  000f7	89 01		 mov	 DWORD PTR [ecx], eax

; 1297 :             *pdwLoopLength *= m_pwfxFormat->nBlockAlign;

  000f9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000fc	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  000ff	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  00103	8b 55 0c	 mov	 edx, DWORD PTR _pdwLoopLength$[ebp]
  00106	8b 02		 mov	 eax, DWORD PTR [edx]
  00108	0f af c1	 imul	 eax, ecx
  0010b	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwLoopLength$[ebp]
  0010e	89 01		 mov	 DWORD PTR [ecx], eax
$L31216:

; 1298 :         }
; 1299 :     }
; 1300 : 
; 1301 :     DPF_LEAVE_HRESULT(hr);
; 1302 : 
; 1303 :     return hr;

  00110	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 1304 : }

  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
?GetLoopRegion@CWaveFile@WaveLoader@@QAEJPAK0@Z ENDP	; WaveLoader::CWaveFile::GetLoopRegion
_TEXT	ENDS
PUBLIC	??_C@_0CC@IFLBNNFE@CStdFileStream?3?3GetWaveLoopRegio@ ; `string'
PUBLIC	??_C@_0BO@GLLFAJJE@No?5FORWARD?5loop?5regions?5found?$AA@ ; `string'
PUBLIC	??_C@_0CJ@LNLNMGAM@Only?5the?5first?5FORWARD?5loop?5will@ ; `string'
;	COMDAT ??_C@_0CC@IFLBNNFE@CStdFileStream?3?3GetWaveLoopRegio@
CONST	SEGMENT
??_C@_0CC@IFLBNNFE@CStdFileStream?3?3GetWaveLoopRegio@ DB 'CStdFileStream'
	DB	'::GetWaveLoopRegion', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GLLFAJJE@No?5FORWARD?5loop?5regions?5found?$AA@
CONST	SEGMENT
??_C@_0BO@GLLFAJJE@No?5FORWARD?5loop?5regions?5found?$AA@ DB 'No FORWARD '
	DB	'loop regions found', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LNLNMGAM@Only?5the?5first?5FORWARD?5loop?5will@
CONST	SEGMENT
??_C@_0CJ@LNLNMGAM@Only?5the?5first?5FORWARD?5loop?5will@ DB 'Only the fi'
	DB	'rst FORWARD loop will be used', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetWaveLoopRegion@CWaveFile@WaveLoader@@IAEJPAK0@Z
_TEXT	SEGMENT
_this$ = -76
$T31620 = -72
_InstrumentChunk$ = -68
_hr$ = -44
_dwOffset$ = -40
_loop$ = -36
_wsamp$ = -20
_pdwLoopStart$ = 8
_pdwLoopLength$ = 12
?GetWaveLoopRegion@CWaveFile@WaveLoader@@IAEJPAK0@Z PROC NEAR ; WaveLoader::CWaveFile::GetWaveLoopRegion, COMDAT
; _this$ = ecx

; 1332 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	89 4d b4	 mov	 DWORD PTR _this$[ebp], ecx

; 1333 :     CRiffChunk              InstrumentChunk;

  00009	8d 4d bc	 lea	 ecx, DWORD PTR _InstrumentChunk$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::CRiffChunk

; 1334 :     WAVESAMPLE              wsamp;
; 1335 :     WAVESAMPLE_LOOP         loop;
; 1336 :     DWORD                   dwOffset;
; 1337 :     HRESULT                 hr;
; 1338 : 
; 1339 :     DPF_ENTER();
; 1340 : 
; 1341 :     ASSERT(m_pwfxFormat);

  00011	68 3d 05 00 00	 push	 1341			; 0000053dH
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@NLKBAEGB@m_pwfxFormat?$AA@
  00020	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  00023	33 c9		 xor	 ecx, ecx
  00025	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00029	0f 94 c1	 sete	 cl
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 1342 : 
; 1343 :     //
; 1344 :     // Open the instrument chunk
; 1345 :     //
; 1346 : 
; 1347 :     hr = InstrumentChunk.Open(&m_ParentChunk, &m_Stream, WAVELDR_FOURCC_WAVE_SAMPLE);

  00035	68 77 73 6d 70	 push	 1886221175		; 706d7377H
  0003a	8b 55 b4	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	52		 push	 edx
  0003e	8b 45 b4	 mov	 eax, DWORD PTR _this$[ebp]
  00041	83 c0 08	 add	 eax, 8
  00044	50		 push	 eax
  00045	8d 4d bc	 lea	 ecx, DWORD PTR _InstrumentChunk$[ebp]
  00048	e8 00 00 00 00	 call	 ?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z ; WaveLoader::CRiffChunk::Open
  0004d	89 45 d4	 mov	 DWORD PTR _hr$[ebp], eax

; 1348 : 
; 1349 :     //
; 1350 :     // Read the WAVESAMPLE header and first loop region
; 1351 :     //
; 1352 : 
; 1353 :     if(SUCCEEDED(hr))

  00050	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00054	7c 15		 jl	 SHORT $L31230

; 1354 :     {
; 1355 :         hr = InstrumentChunk.Read(0, &wsamp, sizeof(wsamp));

  00056	6a 00		 push	 0
  00058	6a 14		 push	 20			; 00000014H
  0005a	8d 4d ec	 lea	 ecx, DWORD PTR _wsamp$[ebp]
  0005d	51		 push	 ecx
  0005e	6a 00		 push	 0
  00060	8d 4d bc	 lea	 ecx, DWORD PTR _InstrumentChunk$[ebp]
  00063	e8 00 00 00 00	 call	 ?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z ; WaveLoader::CRiffChunk::Read
  00068	89 45 d4	 mov	 DWORD PTR _hr$[ebp], eax
$L31230:

; 1356 :     }
; 1357 : 
; 1358 :     //
; 1359 :     // Scan loop regions until we find one that's FORWARD or RELEASE
; 1360 :     //
; 1361 : 
; 1362 :     if(SUCCEEDED(hr))

  0006b	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0006f	7c 52		 jl	 SHORT $L31232

; 1363 :     {
; 1364 :         dwOffset = sizeof(wsamp);

  00071	c7 45 d8 14 00
	00 00		 mov	 DWORD PTR _dwOffset$[ebp], 20 ; 00000014H
$L31234:

; 1365 :     
; 1366 :         while(SUCCEEDED(hr) && wsamp.dwSampleLoops)

  00078	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0007c	7c 45		 jl	 SHORT $L31232
  0007e	83 7d fc 00	 cmp	 DWORD PTR _wsamp$[ebp+16], 0
  00082	74 3f		 je	 SHORT $L31232

; 1367 :         {
; 1368 :             hr = InstrumentChunk.Read(dwOffset, &loop, sizeof(loop));

  00084	6a 00		 push	 0
  00086	6a 10		 push	 16			; 00000010H
  00088	8d 55 dc	 lea	 edx, DWORD PTR _loop$[ebp]
  0008b	52		 push	 edx
  0008c	8b 45 d8	 mov	 eax, DWORD PTR _dwOffset$[ebp]
  0008f	50		 push	 eax
  00090	8d 4d bc	 lea	 ecx, DWORD PTR _InstrumentChunk$[ebp]
  00093	e8 00 00 00 00	 call	 ?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z ; WaveLoader::CRiffChunk::Read
  00098	89 45 d4	 mov	 DWORD PTR _hr$[ebp], eax

; 1369 : 
; 1370 :             if(SUCCEEDED(hr))

  0009b	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0009f	7c 0e		 jl	 SHORT $L31238

; 1371 :             {
; 1372 :                 if((WAVESAMPLE_LOOPTYPE_FORWARD == loop.dwLoopType) || (WAVESAMPLE_LOOPTYPE_RELEASE == loop.dwLoopType))

  000a1	83 7d e0 00	 cmp	 DWORD PTR _loop$[ebp+4], 0
  000a5	74 06		 je	 SHORT $L31240
  000a7	83 7d e0 01	 cmp	 DWORD PTR _loop$[ebp+4], 1
  000ab	75 02		 jne	 SHORT $L31238
$L31240:

; 1373 :                 {
; 1374 :                     break;

  000ad	eb 14		 jmp	 SHORT $L31232
$L31238:

; 1375 :                 }
; 1376 :             }
; 1377 :         
; 1378 :             dwOffset += sizeof(loop);

  000af	8b 4d d8	 mov	 ecx, DWORD PTR _dwOffset$[ebp]
  000b2	83 c1 10	 add	 ecx, 16			; 00000010H
  000b5	89 4d d8	 mov	 DWORD PTR _dwOffset$[ebp], ecx

; 1379 : 
; 1380 :             wsamp.dwSampleLoops--;

  000b8	8b 55 fc	 mov	 edx, DWORD PTR _wsamp$[ebp+16]
  000bb	83 ea 01	 sub	 edx, 1
  000be	89 55 fc	 mov	 DWORD PTR _wsamp$[ebp+16], edx

; 1381 :         }

  000c1	eb b5		 jmp	 SHORT $L31234
$L31232:

; 1382 :     }
; 1383 : 
; 1384 :     if(SUCCEEDED(hr))

  000c3	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c7	7c 6f		 jl	 SHORT $L31242

; 1385 :     {
; 1386 :         if(!wsamp.dwSampleLoops)

  000c9	83 7d fc 00	 cmp	 DWORD PTR _wsamp$[ebp+16], 0
  000cd	75 36		 jne	 SHORT $L31243

; 1387 :         {
; 1388 :             DPF_ERROR("No FORWARD loop regions found");

  000cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  000d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@IFLBNNFE@CStdFileStream?3?3GetWaveLoopRegio@
  000d9	68 6c 05 00 00	 push	 1388			; 0000056cH
  000de	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  000e3	6a 04		 push	 4
  000e5	6a 09		 push	 9
  000e7	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ec	83 c4 18	 add	 esp, 24			; 00000018H
  000ef	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@GLLFAJJE@No?5FORWARD?5loop?5regions?5found?$AA@
  000f4	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f9	83 c4 04	 add	 esp, 4

; 1389 :             hr = E_FAIL;

  000fc	c7 45 d4 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 1390 :         }
; 1391 :         else if(wsamp.dwSampleLoops > 1)

  00103	eb 33		 jmp	 SHORT $L31242
$L31243:
  00105	83 7d fc 01	 cmp	 DWORD PTR _wsamp$[ebp+16], 1
  00109	76 2d		 jbe	 SHORT $L31242

; 1392 :         {
; 1393 :             DPF_WARNING("Only the first FORWARD loop will be used");

  0010b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  00110	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@IFLBNNFE@CStdFileStream?3?3GetWaveLoopRegio@
  00115	68 71 05 00 00	 push	 1393			; 00000571H
  0011a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0011f	6a 04		 push	 4
  00121	6a 09		 push	 9
  00123	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00128	83 c4 18	 add	 esp, 24			; 00000018H
  0012b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@LNLNMGAM@Only?5the?5first?5FORWARD?5loop?5will@
  00130	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00135	83 c4 04	 add	 esp, 4
$L31242:

; 1394 :         }
; 1395 :     }
; 1396 : 
; 1397 :     //
; 1398 :     // Success
; 1399 :     //
; 1400 : 
; 1401 :     if(SUCCEEDED(hr))

  00138	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0013c	7c 10		 jl	 SHORT $L31251

; 1402 :     {
; 1403 :         *pdwLoopStart = loop.dwLoopStart;

  0013e	8b 45 08	 mov	 eax, DWORD PTR _pdwLoopStart$[ebp]
  00141	8b 4d e4	 mov	 ecx, DWORD PTR _loop$[ebp+8]
  00144	89 08		 mov	 DWORD PTR [eax], ecx

; 1404 :         *pdwLoopLength = loop.dwLoopLength;

  00146	8b 55 0c	 mov	 edx, DWORD PTR _pdwLoopLength$[ebp]
  00149	8b 45 e8	 mov	 eax, DWORD PTR _loop$[ebp+12]
  0014c	89 02		 mov	 DWORD PTR [edx], eax
$L31251:

; 1405 :     }
; 1406 : 
; 1407 :     DPF_LEAVE_HRESULT(hr);
; 1408 : 
; 1409 :     return hr;

  0014e	8b 4d d4	 mov	 ecx, DWORD PTR _hr$[ebp]
  00151	89 4d b8	 mov	 DWORD PTR $T31620[ebp], ecx
  00154	8d 4d bc	 lea	 ecx, DWORD PTR _InstrumentChunk$[ebp]
  00157	e8 00 00 00 00	 call	 ??1CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::~CRiffChunk
  0015c	8b 45 b8	 mov	 eax, DWORD PTR $T31620[ebp]

; 1410 : }

  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c2 08 00	 ret	 8
?GetWaveLoopRegion@CWaveFile@WaveLoader@@IAEJPAK0@Z ENDP ; WaveLoader::CWaveFile::GetWaveLoopRegion
_TEXT	ENDS
PUBLIC	??_C@_0CC@BDOJPMPF@CStdFileStream?3?3GetAiffLoopRegio@ ; `string'
PUBLIC	??_C@_0BI@FNJEOFIE@Neither?5loop?5is?5FORWARD?$AA@ ; `string'
PUBLIC	??_C@_0DF@NNLKMLKP@?$CIDWORD?$CJpStartMarker?5?$DM?5?$CIDWORD?$CJpMa@ ; `string'
PUBLIC	??_C@_0BN@NNMJOLHM@Can?8t?5find?5loop?5start?5marker?$AA@ ; `string'
PUBLIC	??_C@_0DD@LMHJPJKK@?$CIDWORD?$CJpEndMarker?5?$DM?5?$CIDWORD?$CJpMark@ ; `string'
PUBLIC	??_C@_0BL@NJFKBAAP@Can?8t?5find?5loop?5end?5marker?$AA@ ; `string'
PUBLIC	??_C@_0DB@NDLCCDDP@Loop?5end?5point?5less?9than?9or?9equa@ ; `string'
EXTRN	?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolFree
;	COMDAT ??_C@_0CC@BDOJPMPF@CStdFileStream?3?3GetAiffLoopRegio@
CONST	SEGMENT
??_C@_0CC@BDOJPMPF@CStdFileStream?3?3GetAiffLoopRegio@ DB 'CStdFileStream'
	DB	'::GetAiffLoopRegion', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FNJEOFIE@Neither?5loop?5is?5FORWARD?$AA@
CONST	SEGMENT
??_C@_0BI@FNJEOFIE@Neither?5loop?5is?5FORWARD?$AA@ DB 'Neither loop is FO'
	DB	'RWARD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@NNLKMLKP@?$CIDWORD?$CJpStartMarker?5?$DM?5?$CIDWORD?$CJpMa@
CONST	SEGMENT
??_C@_0DF@NNLKMLKP@?$CIDWORD?$CJpStartMarker?5?$DM?5?$CIDWORD?$CJpMa@ DB '('
	DB	'DWORD)pStartMarker < (DWORD)pMarkers + dwMarkerSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NNMJOLHM@Can?8t?5find?5loop?5start?5marker?$AA@
CONST	SEGMENT
??_C@_0BN@NNMJOLHM@Can?8t?5find?5loop?5start?5marker?$AA@ DB 'Can''t find'
	DB	' loop start marker', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LMHJPJKK@?$CIDWORD?$CJpEndMarker?5?$DM?5?$CIDWORD?$CJpMark@
CONST	SEGMENT
??_C@_0DD@LMHJPJKK@?$CIDWORD?$CJpEndMarker?5?$DM?5?$CIDWORD?$CJpMark@ DB '('
	DB	'DWORD)pEndMarker < (DWORD)pMarkers + dwMarkerSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NJFKBAAP@Can?8t?5find?5loop?5end?5marker?$AA@
CONST	SEGMENT
??_C@_0BL@NJFKBAAP@Can?8t?5find?5loop?5end?5marker?$AA@ DB 'Can''t find l'
	DB	'oop end marker', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NDLCCDDP@Loop?5end?5point?5less?9than?9or?9equa@
CONST	SEGMENT
??_C@_0DB@NDLCCDDP@Loop?5end?5point?5less?9than?9or?9equa@ DB 'Loop end p'
	DB	'oint less-than-or-equal-to start point', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetAiffLoopRegion@CWaveFile@WaveLoader@@IAEJPAK0@Z
_TEXT	SEGMENT
_this$ = -108
$T31624 = -104
_InstrumentChunk$ = -100
_pEndMarker$ = -76
_hr$ = -72
_inst$ = -64
_pLoop$ = -44
_pMarkers$ = -40
_MarkerChunk$ = -36
_i$ = -12
_dwMarkerSize$ = -8
_pStartMarker$ = -4
_pdwLoopStart$ = 8
_pdwLoopLength$ = 12
?GetAiffLoopRegion@CWaveFile@WaveLoader@@IAEJPAK0@Z PROC NEAR ; WaveLoader::CWaveFile::GetAiffLoopRegion, COMDAT
; _this$ = ecx

; 1438 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	89 4d 94	 mov	 DWORD PTR _this$[ebp], ecx

; 1439 :     LPAIFFMARKERHDR         pMarkers            = NULL;

  00009	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _pMarkers$[ebp], 0

; 1440 :     CRiffChunk              InstrumentChunk;

  00010	8d 4d 9c	 lea	 ecx, DWORD PTR _InstrumentChunk$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::CRiffChunk

; 1441 :     AIFFINSTRUMENT          inst;
; 1442 :     LPAIFFLOOP              pLoop;
; 1443 :     CRiffChunk              MarkerChunk;

  00018	8d 4d dc	 lea	 ecx, DWORD PTR _MarkerChunk$[ebp]
  0001b	e8 00 00 00 00	 call	 ??0CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::CRiffChunk

; 1444 :     DWORD                   dwMarkerSize;
; 1445 :     AIFFMARKERHDR           MarkerHeader;
; 1446 :     LPAIFFMARKER            pStartMarker;
; 1447 :     LPAIFFMARKER            pEndMarker;
; 1448 :     HRESULT                 hr;
; 1449 :     WORD                    i;
; 1450 : 
; 1451 :     DPF_ENTER();
; 1452 : 
; 1453 :     //
; 1454 :     // Open the instrument chunk
; 1455 :     //
; 1456 : 
; 1457 :     hr = InstrumentChunk.Open(&m_ParentChunk, &m_Stream, WAVELDR_FOURCC_INSTRUMENT);

  00020	68 49 4e 53 54	 push	 1414745673		; 54534e49H
  00025	8b 45 94	 mov	 eax, DWORD PTR _this$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 08	 add	 ecx, 8
  0002f	51		 push	 ecx
  00030	8d 4d 9c	 lea	 ecx, DWORD PTR _InstrumentChunk$[ebp]
  00033	e8 00 00 00 00	 call	 ?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z ; WaveLoader::CRiffChunk::Open
  00038	89 45 b8	 mov	 DWORD PTR _hr$[ebp], eax

; 1458 : 
; 1459 :     //
; 1460 :     // Read the instrument data
; 1461 :     //
; 1462 : 
; 1463 :     if(SUCCEEDED(hr))

  0003b	83 7d b8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003f	7c 15		 jl	 SHORT $L31270

; 1464 :     {
; 1465 :         hr = InstrumentChunk.Read(0, &inst, sizeof(inst));

  00041	6a 00		 push	 0
  00043	6a 14		 push	 20			; 00000014H
  00045	8d 55 c0	 lea	 edx, DWORD PTR _inst$[ebp]
  00048	52		 push	 edx
  00049	6a 00		 push	 0
  0004b	8d 4d 9c	 lea	 ecx, DWORD PTR _InstrumentChunk$[ebp]
  0004e	e8 00 00 00 00	 call	 ?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z ; WaveLoader::CRiffChunk::Read
  00053	89 45 b8	 mov	 DWORD PTR _hr$[ebp], eax
$L31270:

; 1466 :     }
; 1467 : 
; 1468 :     //
; 1469 :     // Use the first loop that's FORWARD
; 1470 :     //
; 1471 : 
; 1472 :     if(SUCCEEDED(hr))

  00056	83 7d b8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005a	7c 64		 jl	 SHORT $L31272

; 1473 :     {
; 1474 :         if(AIFFLOOP_MODE_FORWARD == EndianSwapWord(inst.SustainLoop.wPlayMode))

  0005c	8b 4d c8	 mov	 ecx, DWORD PTR _inst$[ebp+8]
  0005f	e8 00 00 00 00	 call	 ?EndianSwapWord@@YIGG@Z	; EndianSwapWord
  00064	0f b7 c0	 movzx	 eax, ax
  00067	83 f8 01	 cmp	 eax, 1
  0006a	75 08		 jne	 SHORT $L31273

; 1475 :         {
; 1476 :             pLoop = &inst.SustainLoop;

  0006c	8d 4d c8	 lea	 ecx, DWORD PTR _inst$[ebp+8]
  0006f	89 4d d4	 mov	 DWORD PTR _pLoop$[ebp], ecx

; 1477 :         }
; 1478 :         else if(AIFFLOOP_MODE_FORWARD == EndianSwapWord(inst.ReleaseLoop.wPlayMode))

  00072	eb 4c		 jmp	 SHORT $L31272
$L31273:
  00074	8b 4d ce	 mov	 ecx, DWORD PTR _inst$[ebp+14]
  00077	e8 00 00 00 00	 call	 ?EndianSwapWord@@YIGG@Z	; EndianSwapWord
  0007c	0f b7 d0	 movzx	 edx, ax
  0007f	83 fa 01	 cmp	 edx, 1
  00082	75 08		 jne	 SHORT $L31275

; 1479 :         {
; 1480 :             pLoop = &inst.ReleaseLoop;

  00084	8d 45 ce	 lea	 eax, DWORD PTR _inst$[ebp+14]
  00087	89 45 d4	 mov	 DWORD PTR _pLoop$[ebp], eax

; 1481 :         }
; 1482 :         else

  0008a	eb 34		 jmp	 SHORT $L31272
$L31275:

; 1483 :         {
; 1484 :             DPF_ERROR("Neither loop is FORWARD");

  0008c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BDOJPMPF@CStdFileStream?3?3GetAiffLoopRegio@
  00096	68 cc 05 00 00	 push	 1484			; 000005ccH
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  000a0	6a 04		 push	 4
  000a2	6a 09		 push	 9
  000a4	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a9	83 c4 18	 add	 esp, 24			; 00000018H
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@FNJEOFIE@Neither?5loop?5is?5FORWARD?$AA@
  000b1	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b6	83 c4 04	 add	 esp, 4

; 1485 :             hr = E_FAIL;

  000b9	c7 45 b8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L31272:

; 1486 :         }
; 1487 :     }
; 1488 : 
; 1489 :     //
; 1490 :     // Open the marker chunk
; 1491 :     //
; 1492 : 
; 1493 :     if(SUCCEEDED(hr))

  000c0	83 7d b8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c4	7c 1b		 jl	 SHORT $L31281

; 1494 :     {
; 1495 :         hr = MarkerChunk.Open(&m_ParentChunk, &m_Stream, WAVELDR_FOURCC_MARKER);

  000c6	68 4d 41 52 4b	 push	 1263681869		; 4b52414dH
  000cb	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	51		 push	 ecx
  000cf	8b 55 94	 mov	 edx, DWORD PTR _this$[ebp]
  000d2	83 c2 08	 add	 edx, 8
  000d5	52		 push	 edx
  000d6	8d 4d dc	 lea	 ecx, DWORD PTR _MarkerChunk$[ebp]
  000d9	e8 00 00 00 00	 call	 ?Open@CRiffChunk@WaveLoader@@QAEJPAV12@PAVCStdFileStream@2@K@Z ; WaveLoader::CRiffChunk::Open
  000de	89 45 b8	 mov	 DWORD PTR _hr$[ebp], eax
$L31281:

; 1496 :     }
; 1497 : 
; 1498 :     // 
; 1499 :     // Read marker data
; 1500 :     //
; 1501 : 
; 1502 :     if(SUCCEEDED(hr))

  000e1	83 7d b8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000e5	7c 40		 jl	 SHORT $L31283

; 1503 :     {
; 1504 :         dwMarkerSize = MarkerChunk.GetDataSize();

  000e7	8d 4d dc	 lea	 ecx, DWORD PTR _MarkerChunk$[ebp]
  000ea	e8 00 00 00 00	 call	 ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ ; WaveLoader::CRiffChunk::GetDataSize
  000ef	89 45 f8	 mov	 DWORD PTR _dwMarkerSize$[ebp], eax

; 1505 :         
; 1506 :         hr = HRFROMP(pMarkers = (LPAIFFMARKERHDR)MEMALLOC(BYTE, dwMarkerSize));

  000f2	6a 01		 push	 1
  000f4	8b 45 f8	 mov	 eax, DWORD PTR _dwMarkerSize$[ebp]
  000f7	50		 push	 eax
  000f8	68 44 53 64 61	 push	 1633964868		; 61645344H
  000fd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04ELFAHOMP@BYTE?$AA@
  00102	68 e2 05 00 00	 push	 1506			; 000005e2H
  00107	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0010c	e8 00 00 00 00	 call	 ?TrackingPoolAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingPoolAlloc
  00111	89 45 d8	 mov	 DWORD PTR _pMarkers$[ebp], eax
  00114	33 c9		 xor	 ecx, ecx
  00116	83 7d d8 00	 cmp	 DWORD PTR _pMarkers$[ebp], 0
  0011a	0f 95 c1	 setne	 cl
  0011d	49		 dec	 ecx
  0011e	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  00124	89 4d b8	 mov	 DWORD PTR _hr$[ebp], ecx
$L31283:

; 1507 :     }
; 1508 : 
; 1509 :     if(SUCCEEDED(hr))

  00127	83 7d b8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0012b	7c 17		 jl	 SHORT $L31290

; 1510 :     {
; 1511 :         hr = MarkerChunk.Read(0, pMarkers, dwMarkerSize);

  0012d	6a 00		 push	 0
  0012f	8b 55 f8	 mov	 edx, DWORD PTR _dwMarkerSize$[ebp]
  00132	52		 push	 edx
  00133	8b 45 d8	 mov	 eax, DWORD PTR _pMarkers$[ebp]
  00136	50		 push	 eax
  00137	6a 00		 push	 0
  00139	8d 4d dc	 lea	 ecx, DWORD PTR _MarkerChunk$[ebp]
  0013c	e8 00 00 00 00	 call	 ?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z ; WaveLoader::CRiffChunk::Read
  00141	89 45 b8	 mov	 DWORD PTR _hr$[ebp], eax
$L31290:

; 1512 :     }
; 1513 : 
; 1514 :     if(SUCCEEDED(hr))

  00144	83 7d b8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00148	7c 11		 jl	 SHORT $L31292

; 1515 :     {
; 1516 :         pMarkers->wMarkerCount = EndianSwapWord(pMarkers->wMarkerCount);

  0014a	8b 4d d8	 mov	 ecx, DWORD PTR _pMarkers$[ebp]
  0014d	66 8b 09	 mov	 cx, WORD PTR [ecx]
  00150	e8 00 00 00 00	 call	 ?EndianSwapWord@@YIGG@Z	; EndianSwapWord
  00155	8b 55 d8	 mov	 edx, DWORD PTR _pMarkers$[ebp]
  00158	66 89 02	 mov	 WORD PTR [edx], ax
$L31292:

; 1517 :     }
; 1518 : 
; 1519 :     //
; 1520 :     // Find the loop markers
; 1521 :     //
; 1522 : 
; 1523 :     if(SUCCEEDED(hr))

  0015b	83 7d b8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0015f	0f 8c b7 00 00
	00		 jl	 $L31294

; 1524 :     {
; 1525 :         pStartMarker = (LPAIFFMARKER)(pMarkers + 1);

  00165	8b 45 d8	 mov	 eax, DWORD PTR _pMarkers$[ebp]
  00168	83 c0 02	 add	 eax, 2
  0016b	89 45 fc	 mov	 DWORD PTR _pStartMarker$[ebp], eax

; 1526 :         
; 1527 :         for(i = 0; i < pMarkers->wMarkerCount; i++)

  0016e	66 c7 45 f4 00
	00		 mov	 WORD PTR _i$[ebp], 0
  00174	eb 0c		 jmp	 SHORT $L31296
$L31297:
  00176	66 8b 4d f4	 mov	 cx, WORD PTR _i$[ebp]
  0017a	66 83 c1 01	 add	 cx, 1
  0017e	66 89 4d f4	 mov	 WORD PTR _i$[ebp], cx
$L31296:
  00182	0f b7 55 f4	 movzx	 edx, WORD PTR _i$[ebp]
  00186	8b 45 d8	 mov	 eax, DWORD PTR _pMarkers$[ebp]
  00189	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0018c	3b d1		 cmp	 edx, ecx
  0018e	7d 4a		 jge	 SHORT $L31298

; 1528 :         {
; 1529 :             ASSERT((DWORD)pStartMarker < (DWORD)pMarkers + dwMarkerSize);

  00190	68 f9 05 00 00	 push	 1529			; 000005f9H
  00195	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0019a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@NNLKMLKP@?$CIDWORD?$CJpStartMarker?5?$DM?5?$CIDWORD?$CJpMa@
  0019f	8b 55 d8	 mov	 edx, DWORD PTR _pMarkers$[ebp]
  001a2	03 55 f8	 add	 edx, DWORD PTR _dwMarkerSize$[ebp]
  001a5	39 55 fc	 cmp	 DWORD PTR _pStartMarker$[ebp], edx
  001a8	1b c0		 sbb	 eax, eax
  001aa	40		 inc	 eax
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001b1	83 c4 10	 add	 esp, 16			; 00000010H

; 1530 :             
; 1531 :             if(pStartMarker->wMarkerId == pLoop->wStartMarker)

  001b4	8b 4d fc	 mov	 ecx, DWORD PTR _pStartMarker$[ebp]
  001b7	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  001ba	8b 45 d4	 mov	 eax, DWORD PTR _pLoop$[ebp]
  001bd	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  001c1	3b d1		 cmp	 edx, ecx
  001c3	75 02		 jne	 SHORT $L31302

; 1532 :             {
; 1533 :                 break;

  001c5	eb 13		 jmp	 SHORT $L31298
$L31302:

; 1534 :             }
; 1535 : 
; 1536 :             pStartMarker = (LPAIFFMARKER)((LPBYTE)pStartMarker + sizeof(*pStartMarker) + pStartMarker->bNameLength);

  001c7	8b 55 fc	 mov	 edx, DWORD PTR _pStartMarker$[ebp]
  001ca	0f b6 42 06	 movzx	 eax, BYTE PTR [edx+6]
  001ce	8b 4d fc	 mov	 ecx, DWORD PTR _pStartMarker$[ebp]
  001d1	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  001d5	89 55 fc	 mov	 DWORD PTR _pStartMarker$[ebp], edx

; 1537 :         }

  001d8	eb 9c		 jmp	 SHORT $L31297
$L31298:

; 1538 : 
; 1539 :         if(i >= pMarkers->wMarkerCount)

  001da	0f b7 45 f4	 movzx	 eax, WORD PTR _i$[ebp]
  001de	8b 4d d8	 mov	 ecx, DWORD PTR _pMarkers$[ebp]
  001e1	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  001e4	3b c2		 cmp	 eax, edx
  001e6	7c 34		 jl	 SHORT $L31294

; 1540 :         {
; 1541 :             DPF_ERROR("Can't find loop start marker");

  001e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  001ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BDOJPMPF@CStdFileStream?3?3GetAiffLoopRegio@
  001f2	68 05 06 00 00	 push	 1541			; 00000605H
  001f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  001fc	6a 04		 push	 4
  001fe	6a 09		 push	 9
  00200	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00205	83 c4 18	 add	 esp, 24			; 00000018H
  00208	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@NNMJOLHM@Can?8t?5find?5loop?5start?5marker?$AA@
  0020d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00212	83 c4 04	 add	 esp, 4

; 1542 :             hr = E_FAIL;

  00215	c7 45 b8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L31294:

; 1543 :         }
; 1544 :     }
; 1545 : 
; 1546 :     if(SUCCEEDED(hr))

  0021c	83 7d b8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00220	0f 8c b7 00 00
	00		 jl	 $L31309

; 1547 :     {
; 1548 :         pEndMarker = (LPAIFFMARKER)(pMarkers + 1);

  00226	8b 45 d8	 mov	 eax, DWORD PTR _pMarkers$[ebp]
  00229	83 c0 02	 add	 eax, 2
  0022c	89 45 b4	 mov	 DWORD PTR _pEndMarker$[ebp], eax

; 1549 :         
; 1550 :         for(i = 0; i < pMarkers->wMarkerCount; i++)

  0022f	66 c7 45 f4 00
	00		 mov	 WORD PTR _i$[ebp], 0
  00235	eb 0c		 jmp	 SHORT $L31311
$L31312:
  00237	66 8b 4d f4	 mov	 cx, WORD PTR _i$[ebp]
  0023b	66 83 c1 01	 add	 cx, 1
  0023f	66 89 4d f4	 mov	 WORD PTR _i$[ebp], cx
$L31311:
  00243	0f b7 55 f4	 movzx	 edx, WORD PTR _i$[ebp]
  00247	8b 45 d8	 mov	 eax, DWORD PTR _pMarkers$[ebp]
  0024a	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0024d	3b d1		 cmp	 edx, ecx
  0024f	7d 4a		 jge	 SHORT $L31313

; 1551 :         {
; 1552 :             ASSERT((DWORD)pEndMarker < (DWORD)pMarkers + dwMarkerSize);

  00251	68 10 06 00 00	 push	 1552			; 00000610H
  00256	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  0025b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@LMHJPJKK@?$CIDWORD?$CJpEndMarker?5?$DM?5?$CIDWORD?$CJpMark@
  00260	8b 55 d8	 mov	 edx, DWORD PTR _pMarkers$[ebp]
  00263	03 55 f8	 add	 edx, DWORD PTR _dwMarkerSize$[ebp]
  00266	39 55 b4	 cmp	 DWORD PTR _pEndMarker$[ebp], edx
  00269	1b c0		 sbb	 eax, eax
  0026b	40		 inc	 eax
  0026c	50		 push	 eax
  0026d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00272	83 c4 10	 add	 esp, 16			; 00000010H

; 1553 :             
; 1554 :             if(pEndMarker->wMarkerId == pLoop->wEndMarker)

  00275	8b 4d b4	 mov	 ecx, DWORD PTR _pEndMarker$[ebp]
  00278	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0027b	8b 45 d4	 mov	 eax, DWORD PTR _pLoop$[ebp]
  0027e	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00282	3b d1		 cmp	 edx, ecx
  00284	75 02		 jne	 SHORT $L31317

; 1555 :             {
; 1556 :                 break;

  00286	eb 13		 jmp	 SHORT $L31313
$L31317:

; 1557 :             }
; 1558 : 
; 1559 :             pEndMarker = (LPAIFFMARKER)((LPBYTE)pEndMarker + sizeof(*pEndMarker) + pEndMarker->bNameLength);

  00288	8b 55 b4	 mov	 edx, DWORD PTR _pEndMarker$[ebp]
  0028b	0f b6 42 06	 movzx	 eax, BYTE PTR [edx+6]
  0028f	8b 4d b4	 mov	 ecx, DWORD PTR _pEndMarker$[ebp]
  00292	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00296	89 55 b4	 mov	 DWORD PTR _pEndMarker$[ebp], edx

; 1560 :         }

  00299	eb 9c		 jmp	 SHORT $L31312
$L31313:

; 1561 : 
; 1562 :         if(i >= pMarkers->wMarkerCount)

  0029b	0f b7 45 f4	 movzx	 eax, WORD PTR _i$[ebp]
  0029f	8b 4d d8	 mov	 ecx, DWORD PTR _pMarkers$[ebp]
  002a2	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  002a5	3b c2		 cmp	 eax, edx
  002a7	7c 34		 jl	 SHORT $L31309

; 1563 :         {
; 1564 :             DPF_ERROR("Can't find loop end marker");

  002a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  002ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BDOJPMPF@CStdFileStream?3?3GetAiffLoopRegio@
  002b3	68 1c 06 00 00	 push	 1564			; 0000061cH
  002b8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  002bd	6a 04		 push	 4
  002bf	6a 09		 push	 9
  002c1	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002c6	83 c4 18	 add	 esp, 24			; 00000018H
  002c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@NJFKBAAP@Can?8t?5find?5loop?5end?5marker?$AA@
  002ce	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002d3	83 c4 04	 add	 esp, 4

; 1565 :             hr = E_FAIL;

  002d6	c7 45 b8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L31309:

; 1566 :         }
; 1567 :     }
; 1568 : 
; 1569 :     //
; 1570 :     // Double-check the marker validity
; 1571 :     //
; 1572 : 
; 1573 :     if(SUCCEEDED(hr))

  002dd	83 7d b8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002e1	7c 64		 jl	 SHORT $L31324

; 1574 :     {
; 1575 :         pStartMarker->dwPosition = EndianSwapDword(pStartMarker->dwPosition);

  002e3	8b 45 fc	 mov	 eax, DWORD PTR _pStartMarker$[ebp]
  002e6	8b 48 02	 mov	 ecx, DWORD PTR [eax+2]
  002e9	e8 00 00 00 00	 call	 ?EndianSwapDword@@YIKK@Z ; EndianSwapDword
  002ee	8b 4d fc	 mov	 ecx, DWORD PTR _pStartMarker$[ebp]
  002f1	89 41 02	 mov	 DWORD PTR [ecx+2], eax

; 1576 :         pEndMarker->dwPosition = EndianSwapDword(pEndMarker->dwPosition);

  002f4	8b 55 b4	 mov	 edx, DWORD PTR _pEndMarker$[ebp]
  002f7	8b 4a 02	 mov	 ecx, DWORD PTR [edx+2]
  002fa	e8 00 00 00 00	 call	 ?EndianSwapDword@@YIKK@Z ; EndianSwapDword
  002ff	8b 4d b4	 mov	 ecx, DWORD PTR _pEndMarker$[ebp]
  00302	89 41 02	 mov	 DWORD PTR [ecx+2], eax

; 1577 : 
; 1578 :         if(pStartMarker->dwPosition >= pEndMarker->dwPosition)

  00305	8b 55 fc	 mov	 edx, DWORD PTR _pStartMarker$[ebp]
  00308	8b 45 b4	 mov	 eax, DWORD PTR _pEndMarker$[ebp]
  0030b	8b 4a 02	 mov	 ecx, DWORD PTR [edx+2]
  0030e	3b 48 02	 cmp	 ecx, DWORD PTR [eax+2]
  00311	72 34		 jb	 SHORT $L31324

; 1579 :         {
; 1580 :             DPF_ERROR("Loop end point less-than-or-equal-to start point");

  00313	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07EDFKGFBI@WAVELDR?$AA@
  00318	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BDOJPMPF@CStdFileStream?3?3GetAiffLoopRegio@
  0031d	68 2c 06 00 00	 push	 1580			; 0000062cH
  00322	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  00327	6a 04		 push	 4
  00329	6a 09		 push	 9
  0032b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00330	83 c4 18	 add	 esp, 24			; 00000018H
  00333	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@NDLCCDDP@Loop?5end?5point?5less?9than?9or?9equa@
  00338	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0033d	83 c4 04	 add	 esp, 4

; 1581 :             hr = E_FAIL;

  00340	c7 45 b8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L31324:

; 1582 :         }
; 1583 :     }
; 1584 : 
; 1585 :     //
; 1586 :     // Success
; 1587 :     //
; 1588 : 
; 1589 :     if(SUCCEEDED(hr))

  00347	83 7d b8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0034b	7c 1c		 jl	 SHORT $L31329

; 1590 :     {
; 1591 :         *pdwLoopStart = pStartMarker->dwPosition;

  0034d	8b 55 08	 mov	 edx, DWORD PTR _pdwLoopStart$[ebp]
  00350	8b 45 fc	 mov	 eax, DWORD PTR _pStartMarker$[ebp]
  00353	8b 48 02	 mov	 ecx, DWORD PTR [eax+2]
  00356	89 0a		 mov	 DWORD PTR [edx], ecx

; 1592 :         *pdwLoopLength = pEndMarker->dwPosition - pStartMarker->dwPosition;

  00358	8b 55 b4	 mov	 edx, DWORD PTR _pEndMarker$[ebp]
  0035b	8b 45 fc	 mov	 eax, DWORD PTR _pStartMarker$[ebp]
  0035e	8b 4a 02	 mov	 ecx, DWORD PTR [edx+2]
  00361	2b 48 02	 sub	 ecx, DWORD PTR [eax+2]
  00364	8b 55 0c	 mov	 edx, DWORD PTR _pdwLoopLength$[ebp]
  00367	89 0a		 mov	 DWORD PTR [edx], ecx
$L31329:

; 1593 :     }
; 1594 : 
; 1595 :     //
; 1596 :     // Clean up
; 1597 :     //
; 1598 :     
; 1599 :     MEMFREE(pMarkers);

  00369	83 7d d8 00	 cmp	 DWORD PTR _pMarkers$[ebp], 0
  0036d	74 10		 je	 SHORT $L31330
  0036f	8b 45 d8	 mov	 eax, DWORD PTR _pMarkers$[ebp]
  00372	50		 push	 eax
  00373	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree
  00378	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _pMarkers$[ebp], 0
$L31330:

; 1600 : 
; 1601 :     DPF_LEAVE_HRESULT(hr);
; 1602 : 
; 1603 :     return hr;

  0037f	8b 4d b8	 mov	 ecx, DWORD PTR _hr$[ebp]
  00382	89 4d 98	 mov	 DWORD PTR $T31624[ebp], ecx
  00385	8d 4d dc	 lea	 ecx, DWORD PTR _MarkerChunk$[ebp]
  00388	e8 00 00 00 00	 call	 ??1CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::~CRiffChunk
  0038d	8d 4d 9c	 lea	 ecx, DWORD PTR _InstrumentChunk$[ebp]
  00390	e8 00 00 00 00	 call	 ??1CRiffChunk@WaveLoader@@QAE@XZ ; WaveLoader::CRiffChunk::~CRiffChunk
  00395	8b 45 98	 mov	 eax, DWORD PTR $T31624[ebp]

; 1604 : }

  00398	8b e5		 mov	 esp, ebp
  0039a	5d		 pop	 ebp
  0039b	c2 08 00	 ret	 8
?GetAiffLoopRegion@CWaveFile@WaveLoader@@IAEJPAK0@Z ENDP ; WaveLoader::CWaveFile::GetAiffLoopRegion
_TEXT	ENDS
PUBLIC	?ReadSample@CWaveFile@WaveLoader@@QAEJKPAXKPAK@Z ; WaveLoader::CWaveFile::ReadSample
PUBLIC	?ConvertAiffPcm@CWaveFile@WaveLoader@@QAEXPAXK@Z ; WaveLoader::CWaveFile::ConvertAiffPcm
; Function compile flags: /Odt
;	COMDAT ?ReadSample@CWaveFile@WaveLoader@@QAEJKPAXKPAK@Z
_TEXT	SEGMENT
_this$ = -8
_hr$ = -4
_dwPosition$ = 8
_pvBuffer$ = 12
_dwBufferSize$ = 16
_pdwRead$ = 20
?ReadSample@CWaveFile@WaveLoader@@QAEJKPAXKPAK@Z PROC NEAR ; WaveLoader::CWaveFile::ReadSample, COMDAT
; _this$ = ecx

; 1636 : {                                   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1637 :     HRESULT                 hr;
; 1638 : 
; 1639 :     DPF_ENTER();
; 1640 : 
; 1641 :     hr = m_DataChunk.Read(dwPosition, pvBuffer, dwBufferSize, &dwBufferSize);

  00009	8d 45 10	 lea	 eax, DWORD PTR _dwBufferSize$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _dwBufferSize$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR _dwPosition$[ebp]
  00018	50		 push	 eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	83 c1 20	 add	 ecx, 32			; 00000020H
  0001f	e8 00 00 00 00	 call	 ?Read@CRiffChunk@WaveLoader@@QAEJKPAXKPAK@Z ; WaveLoader::CRiffChunk::Read
  00024	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 1642 : 
; 1643 :     if(SUCCEEDED(hr) && (WAVELDR_FILETYPE_AIFF == m_dwFileType))

  00027	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0002b	7c 19		 jl	 SHORT $L31341
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 79 38 01	 cmp	 DWORD PTR [ecx+56], 1
  00034	75 10		 jne	 SHORT $L31341

; 1644 :     {
; 1645 :         ConvertAiffPcm(pvBuffer, dwBufferSize);

  00036	8b 55 10	 mov	 edx, DWORD PTR _dwBufferSize$[ebp]
  00039	52		 push	 edx
  0003a	8b 45 0c	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?ConvertAiffPcm@CWaveFile@WaveLoader@@QAEXPAXK@Z ; WaveLoader::CWaveFile::ConvertAiffPcm
$L31341:

; 1646 :     }
; 1647 : 
; 1648 :     if(SUCCEEDED(hr) && pdwRead)

  00046	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004a	7c 0e		 jl	 SHORT $L31343
  0004c	83 7d 14 00	 cmp	 DWORD PTR _pdwRead$[ebp], 0
  00050	74 08		 je	 SHORT $L31343

; 1649 :     {
; 1650 :         *pdwRead = dwBufferSize;

  00052	8b 4d 14	 mov	 ecx, DWORD PTR _pdwRead$[ebp]
  00055	8b 55 10	 mov	 edx, DWORD PTR _dwBufferSize$[ebp]
  00058	89 11		 mov	 DWORD PTR [ecx], edx
$L31343:

; 1651 :     }
; 1652 : 
; 1653 :     DPF_LEAVE_HRESULT(hr);
; 1654 : 
; 1655 :     return hr;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 1656 : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 10 00	 ret	 16			; 00000010H
?ReadSample@CWaveFile@WaveLoader@@QAEJKPAXKPAK@Z ENDP	; WaveLoader::CWaveFile::ReadSample
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Close@CWaveFile@WaveLoader@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Close@CWaveFile@WaveLoader@@QAEXXZ PROC NEAR		; WaveLoader::CWaveFile::Close, COMDAT
; _this$ = ecx

; 1682 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1683 :     DPF_ENTER();
; 1684 : 
; 1685 :     m_Stream.Close();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Close@CStdFileStream@WaveLoader@@QAEXXZ ; WaveLoader::CStdFileStream::Close

; 1686 : 
; 1687 :     MEMFREE(m_pwfxFormat);

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00016	74 16		 je	 SHORT $L31347
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0
$L31347:

; 1688 : 
; 1689 :     DPF_LEAVE_VOID();
; 1690 : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?Close@CWaveFile@WaveLoader@@QAEXXZ ENDP		; WaveLoader::CWaveFile::Close
_TEXT	ENDS
PUBLIC	??_C@_0CM@HBKMMLMK@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pwfxFormat?9@ ; `string'
PUBLIC	?ConvertAiffPcm@CWaveFile@WaveLoader@@SGXPAXKK@Z ; WaveLoader::CWaveFile::ConvertAiffPcm
;	COMDAT ??_C@_0CM@HBKMMLMK@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pwfxFormat?9@
CONST	SEGMENT
??_C@_0CM@HBKMMLMK@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pwfxFormat?9@ DB 'WAVE_FO'
	DB	'RMAT_PCM == m_pwfxFormat->wFormatTag', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?ConvertAiffPcm@CWaveFile@WaveLoader@@QAEXPAXK@Z
_TEXT	SEGMENT
_this$ = -12
_pvSource$ = 8
_cbSource$ = 12
?ConvertAiffPcm@CWaveFile@WaveLoader@@QAEXPAXK@Z PROC NEAR ; WaveLoader::CWaveFile::ConvertAiffPcm, COMDAT
; _this$ = ecx

; 1718 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1719 :     BYTE *                  pbSource;
; 1720 :     BYTE                    bTemp;
; 1721 : 
; 1722 :     DPF_ENTER();
; 1723 : 
; 1724 :     ASSERT(m_pwfxFormat);

  00009	68 bc 06 00 00	 push	 1724			; 000006bcH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@NLKBAEGB@m_pwfxFormat?$AA@
  00018	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00021	0f 94 c1	 sete	 cl
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 1725 :     ASSERT(WAVE_FORMAT_PCM == m_pwfxFormat->wFormatTag);

  0002d	68 bd 06 00 00	 push	 1725			; 000006bdH
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@HBKMMLMK@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pwfxFormat?9@
  0003c	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00042	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00045	83 e9 01	 sub	 ecx, 1
  00048	f7 d9		 neg	 ecx
  0004a	1b c9		 sbb	 ecx, ecx
  0004c	f7 d9		 neg	 ecx
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00054	83 c4 10	 add	 esp, 16			; 00000010H

; 1726 : 
; 1727 :     ConvertAiffPcm(pvSource, cbSource, m_pwfxFormat->wBitsPerSample);

  00057	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0005a	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  0005d	0f b7 48 0e	 movzx	 ecx, WORD PTR [eax+14]
  00061	51		 push	 ecx
  00062	8b 55 0c	 mov	 edx, DWORD PTR _cbSource$[ebp]
  00065	52		 push	 edx
  00066	8b 45 08	 mov	 eax, DWORD PTR _pvSource$[ebp]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?ConvertAiffPcm@CWaveFile@WaveLoader@@SGXPAXKK@Z ; WaveLoader::CWaveFile::ConvertAiffPcm

; 1728 : 
; 1729 :     DPF_LEAVE_VOID();
; 1730 : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?ConvertAiffPcm@CWaveFile@WaveLoader@@QAEXPAXK@Z ENDP	; WaveLoader::CWaveFile::ConvertAiffPcm
_TEXT	ENDS
PUBLIC	??_C@_0BA@NOEFBMFE@8?5?$DN?$DN?5dwBitDepth?$AA@	; `string'
;	COMDAT ??_C@_0BA@NOEFBMFE@8?5?$DN?$DN?5dwBitDepth?$AA@
CONST	SEGMENT
??_C@_0BA@NOEFBMFE@8?5?$DN?$DN?5dwBitDepth?$AA@ DB '8 == dwBitDepth', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?ConvertAiffPcm@CWaveFile@WaveLoader@@SGXPAXKK@Z
_TEXT	SEGMENT
_pwSource$ = -12
_pbSource$ = -4
_pvSource$ = 8
_cbSource$ = 12
_dwBitDepth$ = 16
?ConvertAiffPcm@CWaveFile@WaveLoader@@SGXPAXKK@Z PROC NEAR ; WaveLoader::CWaveFile::ConvertAiffPcm, COMDAT

; 1760 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1761 :     BYTE *                  pbSource;
; 1762 :     WORD *                  pwSource;
; 1763 :     BYTE                    bTemp;
; 1764 : 
; 1765 :     DPF_ENTER();
; 1766 : 
; 1767 :     if(16 == dwBitDepth)

  00006	83 7d 10 10	 cmp	 DWORD PTR _dwBitDepth$[ebp], 16 ; 00000010H
  0000a	75 3d		 jne	 SHORT $L31365

; 1768 :     {
; 1769 :         cbSource /= 2;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _cbSource$[ebp]
  0000f	d1 e8		 shr	 eax, 1
  00011	89 45 0c	 mov	 DWORD PTR _cbSource$[ebp], eax

; 1770 :         
; 1771 :         for(pwSource = (WORD *)pvSource; cbSource; cbSource--, pwSource++)

  00014	8b 4d 08	 mov	 ecx, DWORD PTR _pvSource$[ebp]
  00017	89 4d f4	 mov	 DWORD PTR _pwSource$[ebp], ecx
  0001a	eb 12		 jmp	 SHORT $L31367
$L31368:
  0001c	8b 55 0c	 mov	 edx, DWORD PTR _cbSource$[ebp]
  0001f	83 ea 01	 sub	 edx, 1
  00022	89 55 0c	 mov	 DWORD PTR _cbSource$[ebp], edx
  00025	8b 45 f4	 mov	 eax, DWORD PTR _pwSource$[ebp]
  00028	83 c0 02	 add	 eax, 2
  0002b	89 45 f4	 mov	 DWORD PTR _pwSource$[ebp], eax
$L31367:
  0002e	83 7d 0c 00	 cmp	 DWORD PTR _cbSource$[ebp], 0
  00032	74 13		 je	 SHORT $L31369

; 1772 :         {
; 1773 :             *pwSource = EndianSwapWord(*pwSource);

  00034	8b 4d f4	 mov	 ecx, DWORD PTR _pwSource$[ebp]
  00037	66 8b 09	 mov	 cx, WORD PTR [ecx]
  0003a	e8 00 00 00 00	 call	 ?EndianSwapWord@@YIGG@Z	; EndianSwapWord
  0003f	8b 55 f4	 mov	 edx, DWORD PTR _pwSource$[ebp]
  00042	66 89 02	 mov	 WORD PTR [edx], ax

; 1774 :         }

  00045	eb d5		 jmp	 SHORT $L31368
$L31369:

; 1775 :     }
; 1776 :     else

  00047	eb 54		 jmp	 SHORT $L31361
$L31365:

; 1777 :     {
; 1778 :         ASSERT(8 == dwBitDepth);

  00049	68 f2 06 00 00	 push	 1778			; 000006f2H
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FIJLFLOP@c?3?2xbox?2private?2windows?2directx?2@
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@NOEFBMFE@8?5?$DN?$DN?5dwBitDepth?$AA@
  00058	33 c0		 xor	 eax, eax
  0005a	83 7d 10 08	 cmp	 DWORD PTR _dwBitDepth$[ebp], 8
  0005e	0f 95 c0	 setne	 al
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 1779 :         
; 1780 :         for(pbSource = (BYTE *)pvSource; cbSource; cbSource--, pbSource++)

  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _pvSource$[ebp]
  0006d	89 4d fc	 mov	 DWORD PTR _pbSource$[ebp], ecx
  00070	eb 12		 jmp	 SHORT $L31373
$L31374:
  00072	8b 55 0c	 mov	 edx, DWORD PTR _cbSource$[ebp]
  00075	83 ea 01	 sub	 edx, 1
  00078	89 55 0c	 mov	 DWORD PTR _cbSource$[ebp], edx
  0007b	8b 45 fc	 mov	 eax, DWORD PTR _pbSource$[ebp]
  0007e	83 c0 01	 add	 eax, 1
  00081	89 45 fc	 mov	 DWORD PTR _pbSource$[ebp], eax
$L31373:
  00084	83 7d 0c 00	 cmp	 DWORD PTR _cbSource$[ebp], 0
  00088	74 13		 je	 SHORT $L31361

; 1781 :         {
; 1782 :             *pbSource = *pbSource + 0x80;

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _pbSource$[ebp]
  0008d	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00090	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  00096	8b 45 fc	 mov	 eax, DWORD PTR _pbSource$[ebp]
  00099	88 10		 mov	 BYTE PTR [eax], dl

; 1783 :         }

  0009b	eb d5		 jmp	 SHORT $L31374
$L31361:

; 1784 :     }
; 1785 : 
; 1786 :     DPF_LEAVE_VOID();
; 1787 : }

  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 0c 00	 ret	 12			; 0000000cH
?ConvertAiffPcm@CWaveFile@WaveLoader@@SGXPAXKK@Z ENDP	; WaveLoader::CWaveFile::ConvertAiffPcm
_TEXT	ENDS
END
