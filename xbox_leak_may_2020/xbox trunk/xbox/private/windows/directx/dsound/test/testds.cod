; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\testds.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@PGACJKHL@?$CB?$CIx?5?$CG?5?$CIx?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06DHEFHAJP@TESTDS?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MBLALCOP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@FINCCBCF@?$CFlu?4?$CFlu?4?$CFlu?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_08BKKEJEEI@TESTDS?3?5?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@JKNHBGID@t?3?2media?2audio?2pcm?2heli?4wav?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@HNFEHF@?$CFd?5?$CFd?5?$CFd?5?$CI?$CFd?5?$CFd?5?$CFd?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@ONMGLFJH@Event?5?$CFlu?5signaled?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FC@MJAKMLCB@Setting?5buffer?5play?5region?5to?5?$CFl@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JMCBCLDI@Creating?5?$CFlu?5buffers?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HOHCCBG@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07IGMMEEAG@?$CBdwFree?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@GIGCGFOP@Releasing?5all?5buffers?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@FLLACMNL@?$CBapBuffers?$FLi?$FN?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@HKENBMJN@Creating?5big?5buffer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07DINEPDAJ@?$CBdwPlay?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_08GONHFBFC@?$CBdwWrite?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IOBKCIGN@initial?5play?3?5?5play?5?$CFlu?5write?5?$CFl@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@FHAGGANE@manual?5setposition?3?5?5play?5?$CFlu?5wr@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@LCCAOLKB@forced?5stop?3?5?5play?5?$CFlu?5write?5?$CFlu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DN@IGFKGOHL@play?5from?5current?5position?3?5?5pla@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@ICCFDMKE@natural?5stop?3?5?5play?5?$CFlu?5write?5?$CFl@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EM@PAIBEKMM@play?5after?5natural?5stop?5?$CI2000?5ms@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DC@HKPBDPLI@play?5from?5start?3?5?5play?5?$CFlu?5write@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@NCOEJIKL@Frequency?5?$CFlu?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@CPLOLKPJ@Converting?5from?5?$CFlu?5channel?5to?5?$CF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@FCOBFJMB@Packet?5?$CFlu?5status?5?$CFx?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_08ECACBGB@Pitch?5?$CFd?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@IFMJDGIG@Creating?5?$CFlu?5interference?5stream@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FE@EJJBOEIM@?$CFlu?5plays?5?$CI?$CFlu?5submixing?0?5?$CFlu?5lo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@ILLMDCNA@Lower?5?$CFlu?5?$CIpitch?5?$CFld?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@GKJFABAA@Upper?5?$CFlu?5?$CIpitch?5?$CFld?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@LMEEMLAP@Feeding?5the?5stream?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@PJALNDG@Starving?5the?5stream?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@FDILLCGP@Opening?5wave?5bank?5?$CFs?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DC@FELFBPC@dwEntryCount?5?$DN?$DN?5SectionData?4pHea@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@CFAPPEMP@Entire?5bank?5mapped?4?5?5Using?5SetPl@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DL@KCCIBAPP@Bank?5too?5big?5to?5map?4?5?5Using?5SetB@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_05NLEMHEGP@ADPCM?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_03CCLNCNJA@PCM?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@LIKEALJ@Loading?5entry?5?$CFlu?5?$CI?$CFs?0?5?$CFlu?4?$CF3?43l@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@FCOEPNOM@Setting?5Pause?5command?5for?5?$CFlu?5ms@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07INOAFJDJ@dsstdfx?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@FACBPIAE@?$CK?$CK?$CK?5Starting?5TestTimedStreamResu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _log10f@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@IDirectSound@@QAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPosition@IDirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CommitDeferredSettings@IDirectSound@@QAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@IDirectSoundBuffer@@QAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFormat@IDirectSoundBuffer@@QAGJPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFrequency@IDirectSoundBuffer@@QAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPitch@IDirectSoundBuffer@@QAGJJ@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPosition@IDirectSoundBuffer@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetVelocity@IDirectSoundBuffer@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Play@IDirectSoundBuffer@@QAGJKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Stop@IDirectSoundBuffer@@QAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?StopEx@IDirectSoundBuffer@@QAGJ_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPlayRegion@IDirectSoundBuffer@@QAGJKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetLoopRegion@IDirectSoundBuffer@@QAGJKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetCurrentPosition@IDirectSoundBuffer@@QAGJPAK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetCurrentPosition@IDirectSoundBuffer@@QAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetNotificationPositions@IDirectSoundBuffer@@QAGJKPBU_DSBPOSITIONNOTIFY@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetEG@IDirectSoundStream@@QAGJPBU_DSENVELOPEDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Pause@IDirectSoundStream@@QAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PauseEx@IDirectSoundStream@@QAGJ_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _wmemchr@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FloatToLong@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@DirectSound@@QAEXPAVCAc97Channel@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ValidateResult@@YGJJ@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ValidatePtr@@YGJPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DPF_TEST@@YAXPBDZZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RotateVectorAzimuth@@YGXMMPAU_D3DVECTOR@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Test3d@@YGJMMMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PlayOneShotBuffer@@YGJPBDKPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PlayOneShotBuffer@@YGJKKKKKPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestSequentialBuffers@@YGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestMultipleBuffers@@YGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestMultipleStreams@@YGJKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestNotifies@@YGJKKKKKH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PlayOneShotStream@@YGJPBDKKPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PlayOneShotStream@@YGJKKKKKKPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestBufferOffsets@@YGJKKKKMMMMH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestSubMix@@YGJHK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestDLS@@YGJKKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestStreamStop@@YGJKKKKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestSgeSharing@@YGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestSgeHeap@@YGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Test256Voices@@YGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestStop@@YGJKKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestFrequency@@YGJKKKKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestDiscontinuity@@YGJKKKKKKH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestDeferredCommandRelease@@YGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestMultiChannel@@YGJKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestMultiChannel2@@YGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestMultiChannel3@@YGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestReleaseEnvelope@@YGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PlayToneBuffer@@YGJKKKKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestNaturalStop@@YGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestFlush@@YGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestPitch@@YGJKKKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?StressPlayStop@@YGJKKKKKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FindFrequencyRange@@YGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestTimeStampedPackets@@YGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestSetFormat@@YGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestStarvation@@YGJKKKKKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestWaveBundler@@YGJPBDK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestReleasePausedStream@@YGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TestTimedStreamResume@@YGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _TestDirectSound@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?dwMajor@?1??GetWaveBundlerVersion@@YGXPAD@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?adwBitResolutions@?1??TestMultipleStreams@@YGJKK@Z@4QBKB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?alPitch@?1??TestPitch@@YGJKKKKK@Z@4QBJB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?adwChannelCounts@?1??TestSubMix@@YGJHK@Z@4QBKB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwBufferCount@?1??TestMultipleBuffers@@YGJK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwBufferCount@?1??TestSequentialBuffers@@YGJK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwPacketCount@?1??TestTimeStampedPackets@@YGJK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwDelay@?1??TestStreamStop@@YGJKKKKKK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?adwSampleRates@?1??TestMultipleBuffers@@YGJK@Z@4QBKB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwSegmentLength@?1??TestStreamStop@@YGJKKKKKK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwSegmentLength@?1??TestMultiChannel3@@YGJK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?DSBSTATUS_PENDINGSTOP@?1??StressPlayStop@@YGJKKKKKKK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwBufferSize@?1??Test256Voices@@YGJXZ@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwBuild@?1??GetWaveBundlerVersion@@YGXPAD@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?awSilence@?1??StressPlayStop@@YGJKKKKKKK@Z@4QBGB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?wfxFormat2@?1??TestSetFormat@@YGJXZ@4Uxbox_adpcmwaveformat_tag@@B
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?adwSampleRates@?1??TestSubMix@@YGJHK@Z@4QBKB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?adwBitResolutions@?1??TestMultipleBuffers@@YGJK@Z@4QBKB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?adwChannelCounts@?1??TestSequentialBuffers@@YGJK@Z@4QBKB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?adwBitResolutions@?1??TestSequentialBuffers@@YGJK@Z@4QBKB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwBufferCount@?1??TestSubMix@@YGJHK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?adwSampleRates@?1??TestMultipleStreams@@YGJKK@Z@4QBKB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwSegmentLength@?1??TestMultiChannel2@@YGJK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?adwBitResolutions@?1??TestSubMix@@YGJHK@Z@4QBKB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?adwFrequencies@?1??TestFrequency@@YGJKKKKKK@Z@4QBKB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?pszFile@?1??Test3d@@YGJMMMMMK@Z@4QBDB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?adwChannelCounts@?1??TestMultipleStreams@@YGJKK@Z@4QBKB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?dwDelay@?1??TestSetFormat@@YGJXZ@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwStreamCount@?1??TestMultipleStreams@@YGJKK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwMinor@?1??GetWaveBundlerVersion@@YGXPAD@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwSegmentLength@?1??TestDLS@@YGJKKKK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?adwSampleRates@?1??TestSequentialBuffers@@YGJK@Z@4QBKB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?adwChannelCounts@?1??TestMultipleBuffers@@YGJK@Z@4QBKB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?wfxFormat1@?1??TestSetFormat@@YGJXZ@4UtWAVEFORMATEX@@B
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	?g_pDirectSound@@3PAUIDirectSound@@A		; g_pDirectSound
PUBLIC	_DSoundBuildNumberD
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
DSOUND_RW	SEGMENT
?g_pDirectSound@@3PAUIDirectSound@@A DD 00H		; g_pDirectSound
DSOUND_RW	ENDS
PUBLIC	?ValidateResult@@YGJJ@Z				; ValidateResult
PUBLIC	__real@40490fdb
PUBLIC	__real@43340000
PUBLIC	__real@447a0000
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	?RotateVectorAzimuth@@YGXMMPAU_D3DVECTOR@@@Z	; RotateVectorAzimuth
PUBLIC	?Test3d@@YGJMMMMMK@Z				; Test3d
PUBLIC	??_C@_0BM@JKNHBGID@t?3?2media?2audio?2pcm?2heli?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BE@HNFEHF@?$CFd?5?$CFd?5?$CFd?5?$CI?$CFd?5?$CFd?5?$CFd?$CJ?$AA@ ; `string'
PUBLIC	?SetPosition@IDirectSound@@QAGJMMMK@Z		; IDirectSound::SetPosition
PUBLIC	?CommitDeferredSettings@IDirectSound@@QAGJXZ	; IDirectSound::CommitDeferredSettings
PUBLIC	?Release@IDirectSoundBuffer@@QAGKXZ		; IDirectSoundBuffer::Release
PUBLIC	?SetPosition@IDirectSoundBuffer@@QAGJMMMK@Z	; IDirectSoundBuffer::SetPosition
PUBLIC	?SetVelocity@IDirectSoundBuffer@@QAGJMMMK@Z	; IDirectSoundBuffer::SetVelocity
EXTRN	?CreateBufferFromFile@@YGJPBDKPBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU2@PAK@Z:NEAR ; CreateBufferFromFile
EXTRN	?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z:NEAR ; PlayBuffer
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
EXTRN	_fBreakTest:DWORD
EXTRN	_GetTickCount@0:NEAR
;	COMDAT __real@40490fdb
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT ?pszFile@?1??Test3d@@YGJMMMMMK@Z@4QBDB
DSOUND_RD	SEGMENT
?pszFile@?1??Test3d@@YGJMMMMMK@Z@4QBDB DD FLAT:??_C@_0BM@JKNHBGID@t?3?2media?2audio?2pcm?2heli?4wav?$AA@ ; `Test3d'::`2'::pszFile
DSOUND_RD	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT ??_C@_0BE@HNFEHF@?$CFd?5?$CFd?5?$CFd?5?$CI?$CFd?5?$CFd?5?$CFd?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@HNFEHF@?$CFd?5?$CFd?5?$CFd?5?$CI?$CFd?5?$CFd?5?$CFd?$CJ?$AA@ DB '%'
	DB	'd %d %d (%d %d %d)', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@JKNHBGID@t?3?2media?2audio?2pcm?2heli?4wav?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@JKNHBGID@t?3?2media?2audio?2pcm?2heli?4wav?$AA@ DB 't:\media\au'
	DB	'dio\pcm\heli.wav', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Test3d@@YGJMMMMMK@Z
DSOUND	SEGMENT
tv311 = -128
_dwStartTime$ = -120
_MixBins$ = -116
_hr$ = -108
_aMixBinVolumePairs$ = -104
_vrPreviousPosition$ = -64
_nLastX$ = -52
_flTheta$ = -48
_dwCurrentTime$ = -44
_flTimeDelta$ = -40
_nLastY$ = -36
_vrVelocity$ = -32
_vrCurrentPosition$ = -20
_pBuffer$ = -8
_nLastZ$ = -4
_flListenerPositionX$ = 8
_flListenerPositionY$ = 12
_flListenerPositionZ$ = 16
_flDistance$ = 20
_flAngularVelocity$ = 24
_dwTime$ = 28
?Test3d@@YGJMMMMMK@Z PROC NEAR				; Test3d, COMDAT

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H

; 99   :     static const LPCSTR     pszFile                 = "t:\\media\\audio\\pcm\\heli.wav";
; 100  :     LPDIRECTSOUNDBUFFER     pBuffer                 = NULL;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 101  :     INT                     nLastX                  = -1;

  00010	c7 45 cc ff ff
	ff ff		 mov	 DWORD PTR _nLastX$[ebp], -1

; 102  :     INT                     nLastY                  = -1;

  00017	c7 45 dc ff ff
	ff ff		 mov	 DWORD PTR _nLastY$[ebp], -1

; 103  :     INT                     nLastZ                  = -1;

  0001e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _nLastZ$[ebp], -1

; 104  :     DSMIXBINVOLUMEPAIR      aMixBinVolumePairs[]    = { DSMIXBINVOLUMEPAIRS_REQUIRED_3D, { DSMIXBIN_FRONT_CENTER, 0 } };

  00025	c7 45 98 06 00
	00 00		 mov	 DWORD PTR _aMixBinVolumePairs$[ebp], 6
  0002c	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _aMixBinVolumePairs$[ebp+4], 0
  00033	c7 45 a0 08 00
	00 00		 mov	 DWORD PTR _aMixBinVolumePairs$[ebp+8], 8
  0003a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _aMixBinVolumePairs$[ebp+12], 0
  00041	c7 45 a8 07 00
	00 00		 mov	 DWORD PTR _aMixBinVolumePairs$[ebp+16], 7
  00048	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _aMixBinVolumePairs$[ebp+20], 0
  0004f	c7 45 b0 09 00
	00 00		 mov	 DWORD PTR _aMixBinVolumePairs$[ebp+24], 9
  00056	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _aMixBinVolumePairs$[ebp+28], 0
  0005d	c7 45 b8 02 00
	00 00		 mov	 DWORD PTR _aMixBinVolumePairs$[ebp+32], 2
  00064	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _aMixBinVolumePairs$[ebp+36], 0

; 105  :     DSMIXBINS               MixBins;
; 106  :     FLOAT                   flTheta;
; 107  :     D3DXVECTOR3             vrPreviousPosition;

  0006b	8d 4d c0	 lea	 ecx, DWORD PTR _vrPreviousPosition$[ebp]
  0006e	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3

; 108  :     D3DXVECTOR3             vrCurrentPosition;

  00073	8d 4d ec	 lea	 ecx, DWORD PTR _vrCurrentPosition$[ebp]
  00076	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3

; 109  :     D3DXVECTOR3             vrVelocity;

  0007b	8d 4d e0	 lea	 ecx, DWORD PTR _vrVelocity$[ebp]
  0007e	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3

; 110  :     DWORD                   dwStartTime;
; 111  :     DWORD                   dwCurrentTime;
; 112  :     FLOAT                   flTimeDelta;
; 113  :     HRESULT                 hr;
; 114  : 
; 115  :     MixBins.dwMixBinCount = NUMELMS(aMixBinVolumePairs);

  00083	c7 45 8c 05 00
	00 00		 mov	 DWORD PTR _MixBins$[ebp], 5

; 116  :     MixBins.lpMixBinVolumePairs = aMixBinVolumePairs;

  0008a	8d 45 98	 lea	 eax, DWORD PTR _aMixBinVolumePairs$[ebp]
  0008d	89 45 90	 mov	 DWORD PTR _MixBins$[ebp+4], eax

; 117  : 
; 118  :     //
; 119  :     // Convert angular velocity to radians
; 120  :     //
; 121  : 
; 122  :     flAngularVelocity = (flAngularVelocity * D3DX_PI) / 180.0f;

  00090	d9 45 18	 fld	 DWORD PTR _flAngularVelocity$[ebp]
  00093	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@40490fdb
  00099	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@43340000
  0009f	d9 5d 18	 fstp	 DWORD PTR _flAngularVelocity$[ebp]

; 123  :     flTheta = (90.0f * D3DX_PI) / 180.0f;

  000a2	c7 45 d0 db 0f
	c9 3f		 mov	 DWORD PTR _flTheta$[ebp], 1070141403 ; 3fc90fdbH

; 124  : 
; 125  :     //
; 126  :     // Calculate the buffer's initial position
; 127  :     //
; 128  : 
; 129  :     vrPreviousPosition.x = 0;

  000a9	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _vrPreviousPosition$[ebp], 0

; 130  :     vrPreviousPosition.y = 0;

  000b0	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vrPreviousPosition$[ebp+4], 0

; 131  :     vrPreviousPosition.z = flDistance;

  000b7	8b 4d 14	 mov	 ecx, DWORD PTR _flDistance$[ebp]
  000ba	89 4d c8	 mov	 DWORD PTR _vrPreviousPosition$[ebp+8], ecx

; 132  : 
; 133  :     vrCurrentPosition = vrPreviousPosition;

  000bd	8b 55 c0	 mov	 edx, DWORD PTR _vrPreviousPosition$[ebp]
  000c0	89 55 ec	 mov	 DWORD PTR _vrCurrentPosition$[ebp], edx
  000c3	8b 45 c4	 mov	 eax, DWORD PTR _vrPreviousPosition$[ebp+4]
  000c6	89 45 f0	 mov	 DWORD PTR _vrCurrentPosition$[ebp+4], eax
  000c9	8b 4d c8	 mov	 ecx, DWORD PTR _vrPreviousPosition$[ebp+8]
  000cc	89 4d f4	 mov	 DWORD PTR _vrCurrentPosition$[ebp+8], ecx

; 134  : 
; 135  :     //
; 136  :     // Set the listener position
; 137  :     //
; 138  :     
; 139  :     hr = ValidateResult(g_pDirectSound->SetPosition(flListenerPositionX, flListenerPositionY, flListenerPositionZ, DS3D_IMMEDIATE));

  000cf	6a 00		 push	 0
  000d1	8b 55 10	 mov	 edx, DWORD PTR _flListenerPositionZ$[ebp]
  000d4	52		 push	 edx
  000d5	8b 45 0c	 mov	 eax, DWORD PTR _flListenerPositionY$[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d 08	 mov	 ecx, DWORD PTR _flListenerPositionX$[ebp]
  000dc	51		 push	 ecx
  000dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pDirectSound@@3PAUIDirectSound@@A ; g_pDirectSound
  000e3	52		 push	 edx
  000e4	e8 00 00 00 00	 call	 ?SetPosition@IDirectSound@@QAGJMMMK@Z ; IDirectSound::SetPosition
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000ef	89 45 94	 mov	 DWORD PTR _hr$[ebp], eax

; 140  : 
; 141  :     //
; 142  :     // Create the buffer
; 143  :     //
; 144  : 
; 145  :     if(SUCCEEDED(hr))

  000f2	83 7d 94 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000f6	7c 23		 jl	 SHORT $L36289

; 146  :     {
; 147  :         hr = ValidateResult(CreateBufferFromFile(pszFile, DSBCAPS_CTRL3D, &MixBins, NULL, &pBuffer));

  000f8	6a 00		 push	 0
  000fa	8d 45 f8	 lea	 eax, DWORD PTR _pBuffer$[ebp]
  000fd	50		 push	 eax
  000fe	6a 00		 push	 0
  00100	8d 4d 8c	 lea	 ecx, DWORD PTR _MixBins$[ebp]
  00103	51		 push	 ecx
  00104	6a 10		 push	 16			; 00000010H
  00106	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pszFile@?1??Test3d@@YGJMMMMMK@Z@4QBDB
  0010c	52		 push	 edx
  0010d	e8 00 00 00 00	 call	 ?CreateBufferFromFile@@YGJPBDKPBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU2@PAK@Z ; CreateBufferFromFile
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00118	89 45 94	 mov	 DWORD PTR _hr$[ebp], eax
$L36289:

; 148  :     }
; 149  : 
; 150  :     //
; 151  :     // Set the buffer's initial position
; 152  :     //
; 153  : 
; 154  :     if(SUCCEEDED(hr))

  0011b	83 7d 94 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0011f	7c 20		 jl	 SHORT $L36291

; 155  :     {
; 156  :         hr = ValidateResult(pBuffer->SetPosition(vrPreviousPosition.x, vrPreviousPosition.y, vrPreviousPosition.z, DS3D_IMMEDIATE));

  00121	6a 00		 push	 0
  00123	8b 45 c8	 mov	 eax, DWORD PTR _vrPreviousPosition$[ebp+8]
  00126	50		 push	 eax
  00127	8b 4d c4	 mov	 ecx, DWORD PTR _vrPreviousPosition$[ebp+4]
  0012a	51		 push	 ecx
  0012b	8b 55 c0	 mov	 edx, DWORD PTR _vrPreviousPosition$[ebp]
  0012e	52		 push	 edx
  0012f	8b 45 f8	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ?SetPosition@IDirectSoundBuffer@@QAGJMMMK@Z ; IDirectSoundBuffer::SetPosition
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0013e	89 45 94	 mov	 DWORD PTR _hr$[ebp], eax
$L36291:

; 157  :     }
; 158  : 
; 159  :     //
; 160  :     // Start the buffer playing
; 161  :     //
; 162  : 
; 163  :     if(SUCCEEDED(hr))

  00141	83 7d 94 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00145	7c 18		 jl	 SHORT $L36293

; 164  :     {
; 165  :         hr = ValidateResult(PlayBuffer(pBuffer, DSBPLAY_LOOPING));

  00147	6a 00		 push	 0
  00149	6a 00		 push	 0
  0014b	6a 01		 push	 1
  0014d	8b 4d f8	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00150	51		 push	 ecx
  00151	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0015c	89 45 94	 mov	 DWORD PTR _hr$[ebp], eax
$L36293:

; 166  :     }
; 167  : 
; 168  :     //
; 169  :     // Get the current system time
; 170  :     //
; 171  : 
; 172  :     if(SUCCEEDED(hr))

  0015f	83 7d 94 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00163	7c 08		 jl	 SHORT $L36297

; 173  :     {
; 174  :         dwStartTime = GetTickCount();

  00165	e8 00 00 00 00	 call	 _GetTickCount@0
  0016a	89 45 88	 mov	 DWORD PTR _dwStartTime$[ebp], eax
$L36297:

; 175  :     }
; 176  : 
; 177  :     //
; 178  :     // Enter the main loop
; 179  :     // 
; 180  : 
; 181  :     while(SUCCEEDED(hr) && !fBreakTest)

  0016d	83 7d 94 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00171	0f 8c 92 01 00
	00		 jl	 $L36298
  00177	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _fBreakTest, 0
  0017e	0f 85 85 01 00
	00		 jne	 $L36298
$L36301:

; 182  :     {
; 183  :         //
; 184  :         // Get the current system time
; 185  :         //
; 186  : 
; 187  :         while(dwStartTime == (dwCurrentTime = GetTickCount()));

  00184	e8 00 00 00 00	 call	 _GetTickCount@0
  00189	89 45 d4	 mov	 DWORD PTR _dwCurrentTime$[ebp], eax
  0018c	8b 55 88	 mov	 edx, DWORD PTR _dwStartTime$[ebp]
  0018f	3b 55 d4	 cmp	 edx, DWORD PTR _dwCurrentTime$[ebp]
  00192	75 02		 jne	 SHORT $L36302
  00194	eb ee		 jmp	 SHORT $L36301
$L36302:

; 188  : 
; 189  :         if(INFINITE != dwTime)

  00196	83 7d 1c ff	 cmp	 DWORD PTR _dwTime$[ebp], -1
  0019a	74 10		 je	 SHORT $L36303

; 190  :         {
; 191  :             if(dwCurrentTime >= dwStartTime + dwTime)

  0019c	8b 45 88	 mov	 eax, DWORD PTR _dwStartTime$[ebp]
  0019f	03 45 1c	 add	 eax, DWORD PTR _dwTime$[ebp]
  001a2	39 45 d4	 cmp	 DWORD PTR _dwCurrentTime$[ebp], eax
  001a5	72 05		 jb	 SHORT $L36303

; 192  :             {
; 193  :                 break;

  001a7	e9 5d 01 00 00	 jmp	 $L36298
$L36303:

; 194  :             }
; 195  :         }
; 196  : 
; 197  :         //
; 198  :         // Calculate the distance the sound should travel
; 199  :         //
; 200  : 
; 201  :         flTimeDelta = (FLOAT)(dwCurrentTime - dwStartTime) / 1000.0f;

  001ac	8b 4d d4	 mov	 ecx, DWORD PTR _dwCurrentTime$[ebp]
  001af	2b 4d 88	 sub	 ecx, DWORD PTR _dwStartTime$[ebp]
  001b2	89 4d 80	 mov	 DWORD PTR tv311[ebp], ecx
  001b5	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv311[ebp+4], 0
  001bc	df 6d 80	 fild	 QWORD PTR tv311[ebp]
  001bf	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@447a0000
  001c5	d9 5d d8	 fstp	 DWORD PTR _flTimeDelta$[ebp]

; 202  :         flTheta += flAngularVelocity * flTimeDelta;

  001c8	d9 45 18	 fld	 DWORD PTR _flAngularVelocity$[ebp]
  001cb	d8 4d d8	 fmul	 DWORD PTR _flTimeDelta$[ebp]
  001ce	d8 45 d0	 fadd	 DWORD PTR _flTheta$[ebp]
  001d1	d9 5d d0	 fstp	 DWORD PTR _flTheta$[ebp]

; 203  : 
; 204  :         //
; 205  :         // Set the object's new position and velocity
; 206  :         //
; 207  : 
; 208  :         RotateVectorAzimuth(flDistance, flTheta, &vrCurrentPosition);

  001d4	8d 55 ec	 lea	 edx, DWORD PTR _vrCurrentPosition$[ebp]
  001d7	52		 push	 edx
  001d8	8b 45 d0	 mov	 eax, DWORD PTR _flTheta$[ebp]
  001db	50		 push	 eax
  001dc	8b 4d 14	 mov	 ecx, DWORD PTR _flDistance$[ebp]
  001df	51		 push	 ecx
  001e0	e8 00 00 00 00	 call	 ?RotateVectorAzimuth@@YGXMMPAU_D3DVECTOR@@@Z ; RotateVectorAzimuth

; 209  : 
; 210  :         vrVelocity.x = (vrCurrentPosition.x - vrPreviousPosition.x) / flTimeDelta;

  001e5	d9 45 ec	 fld	 DWORD PTR _vrCurrentPosition$[ebp]
  001e8	d8 65 c0	 fsub	 DWORD PTR _vrPreviousPosition$[ebp]
  001eb	d8 75 d8	 fdiv	 DWORD PTR _flTimeDelta$[ebp]
  001ee	d9 5d e0	 fstp	 DWORD PTR _vrVelocity$[ebp]

; 211  :         vrVelocity.y = (vrCurrentPosition.y - vrPreviousPosition.y) / flTimeDelta;

  001f1	d9 45 f0	 fld	 DWORD PTR _vrCurrentPosition$[ebp+4]
  001f4	d8 65 c4	 fsub	 DWORD PTR _vrPreviousPosition$[ebp+4]
  001f7	d8 75 d8	 fdiv	 DWORD PTR _flTimeDelta$[ebp]
  001fa	d9 5d e4	 fstp	 DWORD PTR _vrVelocity$[ebp+4]

; 212  :         vrVelocity.z = (vrCurrentPosition.z - vrPreviousPosition.z) / flTimeDelta;

  001fd	d9 45 f4	 fld	 DWORD PTR _vrCurrentPosition$[ebp+8]
  00200	d8 65 c8	 fsub	 DWORD PTR _vrPreviousPosition$[ebp+8]
  00203	d8 75 d8	 fdiv	 DWORD PTR _flTimeDelta$[ebp]
  00206	d9 5d e8	 fstp	 DWORD PTR _vrVelocity$[ebp+8]

; 213  : 
; 214  :         hr = ValidateResult(pBuffer->SetVelocity(vrVelocity.x, vrVelocity.y, vrVelocity.z, DS3D_DEFERRED));

  00209	6a 01		 push	 1
  0020b	8b 55 e8	 mov	 edx, DWORD PTR _vrVelocity$[ebp+8]
  0020e	52		 push	 edx
  0020f	8b 45 e4	 mov	 eax, DWORD PTR _vrVelocity$[ebp+4]
  00212	50		 push	 eax
  00213	8b 4d e0	 mov	 ecx, DWORD PTR _vrVelocity$[ebp]
  00216	51		 push	 ecx
  00217	8b 55 f8	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  0021a	52		 push	 edx
  0021b	e8 00 00 00 00	 call	 ?SetVelocity@IDirectSoundBuffer@@QAGJMMMK@Z ; IDirectSoundBuffer::SetVelocity
  00220	50		 push	 eax
  00221	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00226	89 45 94	 mov	 DWORD PTR _hr$[ebp], eax

; 215  : 
; 216  :         if(SUCCEEDED(hr))

  00229	83 7d 94 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0022d	7c 20		 jl	 SHORT $L36307

; 217  :         {
; 218  :             hr = ValidateResult(pBuffer->SetPosition(vrCurrentPosition.x, vrCurrentPosition.y, vrCurrentPosition.z, DS3D_DEFERRED));

  0022f	6a 01		 push	 1
  00231	8b 45 f4	 mov	 eax, DWORD PTR _vrCurrentPosition$[ebp+8]
  00234	50		 push	 eax
  00235	8b 4d f0	 mov	 ecx, DWORD PTR _vrCurrentPosition$[ebp+4]
  00238	51		 push	 ecx
  00239	8b 55 ec	 mov	 edx, DWORD PTR _vrCurrentPosition$[ebp]
  0023c	52		 push	 edx
  0023d	8b 45 f8	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00240	50		 push	 eax
  00241	e8 00 00 00 00	 call	 ?SetPosition@IDirectSoundBuffer@@QAGJMMMK@Z ; IDirectSoundBuffer::SetPosition
  00246	50		 push	 eax
  00247	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0024c	89 45 94	 mov	 DWORD PTR _hr$[ebp], eax
$L36307:

; 219  :         }
; 220  : 
; 221  :         if(SUCCEEDED(hr))

  0024f	83 7d 94 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00253	7c 15		 jl	 SHORT $L36309

; 222  :         {
; 223  :             hr = ValidateResult(g_pDirectSound->CommitDeferredSettings());

  00255	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pDirectSound@@3PAUIDirectSound@@A ; g_pDirectSound
  0025b	51		 push	 ecx
  0025c	e8 00 00 00 00	 call	 ?CommitDeferredSettings@IDirectSound@@QAGJXZ ; IDirectSound::CommitDeferredSettings
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00267	89 45 94	 mov	 DWORD PTR _hr$[ebp], eax
$L36309:

; 224  :         }
; 225  : 
; 226  :         if(SUCCEEDED(hr))

  0026a	83 7d 94 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0026e	7c 7c		 jl	 SHORT $L36311

; 227  :         {
; 228  :             if(((INT)vrCurrentPosition.x != nLastX) || ((INT)vrCurrentPosition.y != nLastY) || ((INT)vrCurrentPosition.z != nLastZ))

  00270	d9 45 ec	 fld	 DWORD PTR _vrCurrentPosition$[ebp]
  00273	e8 00 00 00 00	 call	 __ftol2
  00278	3b 45 cc	 cmp	 eax, DWORD PTR _nLastX$[ebp]
  0027b	75 1a		 jne	 SHORT $L36316
  0027d	d9 45 f0	 fld	 DWORD PTR _vrCurrentPosition$[ebp+4]
  00280	e8 00 00 00 00	 call	 __ftol2
  00285	3b 45 dc	 cmp	 eax, DWORD PTR _nLastY$[ebp]
  00288	75 0d		 jne	 SHORT $L36316
  0028a	d9 45 f4	 fld	 DWORD PTR _vrCurrentPosition$[ebp+8]
  0028d	e8 00 00 00 00	 call	 __ftol2
  00292	3b 45 fc	 cmp	 eax, DWORD PTR _nLastZ$[ebp]
  00295	74 55		 je	 SHORT $L36311
$L36316:

; 229  :             {
; 230  :                 nLastX = (INT)vrCurrentPosition.x;

  00297	d9 45 ec	 fld	 DWORD PTR _vrCurrentPosition$[ebp]
  0029a	e8 00 00 00 00	 call	 __ftol2
  0029f	89 45 cc	 mov	 DWORD PTR _nLastX$[ebp], eax

; 231  :                 nLastY = (INT)vrCurrentPosition.y;

  002a2	d9 45 f0	 fld	 DWORD PTR _vrCurrentPosition$[ebp+4]
  002a5	e8 00 00 00 00	 call	 __ftol2
  002aa	89 45 dc	 mov	 DWORD PTR _nLastY$[ebp], eax

; 232  :                 nLastZ = (INT)vrCurrentPosition.z;

  002ad	d9 45 f4	 fld	 DWORD PTR _vrCurrentPosition$[ebp+8]
  002b0	e8 00 00 00 00	 call	 __ftol2
  002b5	89 45 fc	 mov	 DWORD PTR _nLastZ$[ebp], eax

; 233  : 
; 234  :                 DPF_TEST("%d %d %d (%d %d %d)", nLastX, nLastY, nLastZ, (int)vrVelocity.x, (int)vrVelocity.y, (int)vrVelocity.z);

  002b8	d9 45 e8	 fld	 DWORD PTR _vrVelocity$[ebp+8]
  002bb	e8 00 00 00 00	 call	 __ftol2
  002c0	50		 push	 eax
  002c1	d9 45 e4	 fld	 DWORD PTR _vrVelocity$[ebp+4]
  002c4	e8 00 00 00 00	 call	 __ftol2
  002c9	50		 push	 eax
  002ca	d9 45 e0	 fld	 DWORD PTR _vrVelocity$[ebp]
  002cd	e8 00 00 00 00	 call	 __ftol2
  002d2	50		 push	 eax
  002d3	8b 55 fc	 mov	 edx, DWORD PTR _nLastZ$[ebp]
  002d6	52		 push	 edx
  002d7	8b 45 dc	 mov	 eax, DWORD PTR _nLastY$[ebp]
  002da	50		 push	 eax
  002db	8b 4d cc	 mov	 ecx, DWORD PTR _nLastX$[ebp]
  002de	51		 push	 ecx
  002df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@HNFEHF@?$CFd?5?$CFd?5?$CFd?5?$CI?$CFd?5?$CFd?5?$CFd?$CJ?$AA@
  002e4	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  002e9	83 c4 1c	 add	 esp, 28			; 0000001cH
$L36311:

; 235  :             }
; 236  :         }
; 237  : 
; 238  :         //
; 239  :         // Save settings for the next time around
; 240  :         //
; 241  : 
; 242  :         vrPreviousPosition = vrCurrentPosition;

  002ec	8b 55 ec	 mov	 edx, DWORD PTR _vrCurrentPosition$[ebp]
  002ef	89 55 c0	 mov	 DWORD PTR _vrPreviousPosition$[ebp], edx
  002f2	8b 45 f0	 mov	 eax, DWORD PTR _vrCurrentPosition$[ebp+4]
  002f5	89 45 c4	 mov	 DWORD PTR _vrPreviousPosition$[ebp+4], eax
  002f8	8b 4d f4	 mov	 ecx, DWORD PTR _vrCurrentPosition$[ebp+8]
  002fb	89 4d c8	 mov	 DWORD PTR _vrPreviousPosition$[ebp+8], ecx

; 243  :         dwStartTime = dwCurrentTime;

  002fe	8b 55 d4	 mov	 edx, DWORD PTR _dwCurrentTime$[ebp]
  00301	89 55 88	 mov	 DWORD PTR _dwStartTime$[ebp], edx

; 244  :     }

  00304	e9 64 fe ff ff	 jmp	 $L36297
$L36298:

; 245  : 
; 246  :     //
; 247  :     // Clean up
; 248  :     //
; 249  : 
; 250  :     RELEASE(pBuffer);

  00309	83 7d f8 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  0030d	74 10		 je	 SHORT $L36324
  0030f	8b 45 f8	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00312	50		 push	 eax
  00313	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  00318	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L36324:

; 251  : 
; 252  :     return hr;

  0031f	8b 45 94	 mov	 eax, DWORD PTR _hr$[ebp]

; 253  : }

  00322	8b e5		 mov	 esp, ebp
  00324	5d		 pop	 ebp
  00325	c2 18 00	 ret	 24			; 00000018H
?Test3d@@YGJMMMMMK@Z ENDP				; Test3d
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\d3dx8math.h
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0D3DXVECTOR3@@QAE@XZ PROC NEAR			; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 103  :     D3DXVECTOR3() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
DSOUND	ENDS
EXTRN	_IDirectSound_SetPosition@20:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetPosition@IDirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwApply$ = 24
?SetPosition@IDirectSound@@QAGJMMMK@Z PROC NEAR		; IDirectSound::SetPosition, COMDAT

; 1796 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1797 :         return IDirectSound_SetPosition(this, x, y, z, dwApply);

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _IDirectSound_SetPosition@20

; 1798 :     }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
?SetPosition@IDirectSound@@QAGJMMMK@Z ENDP		; IDirectSound::SetPosition
DSOUND	ENDS
EXTRN	_IDirectSound_CommitDeferredSettings@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?CommitDeferredSettings@IDirectSound@@QAGJXZ
DSOUND	SEGMENT
_this$ = 8
?CommitDeferredSettings@IDirectSound@@QAGJXZ PROC NEAR	; IDirectSound::CommitDeferredSettings, COMDAT

; 1816 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1817 :         return IDirectSound_CommitDeferredSettings(this);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _IDirectSound_CommitDeferredSettings@4

; 1818 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?CommitDeferredSettings@IDirectSound@@QAGJXZ ENDP	; IDirectSound::CommitDeferredSettings
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_Release@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Release@IDirectSoundBuffer@@QAGKXZ
DSOUND	SEGMENT
_this$ = 8
?Release@IDirectSoundBuffer@@QAGKXZ PROC NEAR		; IDirectSoundBuffer::Release, COMDAT

; 1932 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1933 :         return IDirectSoundBuffer_Release(this);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _IDirectSoundBuffer_Release@4

; 1934 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?Release@IDirectSoundBuffer@@QAGKXZ ENDP		; IDirectSoundBuffer::Release
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetPosition@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetPosition@IDirectSoundBuffer@@QAGJMMMK@Z
DSOUND	SEGMENT
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwApply$ = 24
?SetPosition@IDirectSoundBuffer@@QAGJMMMK@Z PROC NEAR	; IDirectSoundBuffer::SetPosition, COMDAT

; 2027 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2028 :         return IDirectSoundBuffer_SetPosition(this, x, y, z, dwApply);

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetPosition@20

; 2029 :     }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
?SetPosition@IDirectSoundBuffer@@QAGJMMMK@Z ENDP	; IDirectSoundBuffer::SetPosition
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetVelocity@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetVelocity@IDirectSoundBuffer@@QAGJMMMK@Z
DSOUND	SEGMENT
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwApply$ = 24
?SetVelocity@IDirectSoundBuffer@@QAGJMMMK@Z PROC NEAR	; IDirectSoundBuffer::SetVelocity, COMDAT

; 2032 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2033 :         return IDirectSoundBuffer_SetVelocity(this, x, y, z, dwApply);

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetVelocity@20

; 2034 :     }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
?SetVelocity@IDirectSoundBuffer@@QAGJMMMK@Z ENDP	; IDirectSoundBuffer::SetVelocity
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\util.h
DSOUND	ENDS
;	COMDAT ?ValidateResult@@YGJJ@Z
DSOUND	SEGMENT
_hr$ = 8
?ValidateResult@@YGJJ@Z PROC NEAR			; ValidateResult, COMDAT

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 32   :     if(FAILED(hr))

  00003	83 7d 08 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00007	7d 01		 jge	 SHORT $L35860

; 33   :     {
; 34   :         __asm int 3;

  00009	cc		 int	 3
$L35860:

; 35   :     }
; 36   : 
; 37   :     return hr;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]

; 38   : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?ValidateResult@@YGJJ@Z ENDP				; ValidateResult
DSOUND	ENDS
PUBLIC	??_C@_08BKKEJEEI@TESTDS?3?5?$AA@		; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	_vsprintf:NEAR
EXTRN	_OutputDebugStringA@4:NEAR
;	COMDAT ??_C@_08BKKEJEEI@TESTDS?3?5?$AA@
; File c:\xbox\private\windows\directx\dsound\test\testds.h
DSOUND_RD	SEGMENT
??_C@_08BKKEJEEI@TESTDS?3?5?$AA@ DB 'TESTDS: ', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
DSOUND_RD	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?DPF_TEST@@YAXPBDZZ
DSOUND	SEGMENT
_va$ = -260
_szString$ = -256
_pszFormat$ = 8
?DPF_TEST@@YAXPBDZZ PROC NEAR				; DPF_TEST, COMDAT

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H

; 34   :     CHAR                    szString[0x100];
; 35   :     va_list                 va;
; 36   : 
; 37   :     va_start(va, pszFormat);

  00009	8d 45 0c	 lea	 eax, DWORD PTR _pszFormat$[ebp+4]
  0000c	89 85 fc fe ff
	ff		 mov	 DWORD PTR _va$[ebp], eax

; 38   :     vsprintf(szString, pszFormat, va);

  00012	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _va$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR _pszFormat$[ebp]
  0001c	52		 push	 edx
  0001d	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szString$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _vsprintf
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 39   :     va_end(va);

  0002c	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _va$[ebp], 0

; 40   : 
; 41   :     OutputDebugStringA("TESTDS: ");

  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08BKKEJEEI@TESTDS?3?5?$AA@
  0003b	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 42   :     OutputDebugStringA(szString);

  00040	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _szString$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 43   :     OutputDebugStringA("\n");

  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00051	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 44   : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?DPF_TEST@@YAXPBDZZ ENDP				; DPF_TEST
DSOUND	ENDS
EXTRN	_cos:NEAR
EXTRN	_sin:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
;	COMDAT ?RotateVectorAzimuth@@YGXMMPAU_D3DVECTOR@@@Z
DSOUND	SEGMENT
tv79 = -8
tv76 = -4
_flDistance$ = 8
_flTheta$ = 12
_pvrPosition$ = 16
?RotateVectorAzimuth@@YGXMMPAU_D3DVECTOR@@@Z PROC NEAR	; RotateVectorAzimuth, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 60   :     pvrPosition->x = (float)cos(flTheta) * flDistance;

  00006	d9 45 0c	 fld	 DWORD PTR _flTheta$[ebp]
  00009	83 ec 08	 sub	 esp, 8
  0000c	dd 1c 24	 fstp	 QWORD PTR [esp]
  0000f	e8 00 00 00 00	 call	 _cos
  00014	83 c4 08	 add	 esp, 8
  00017	d9 55 fc	 fst	 DWORD PTR tv76[ebp]
  0001a	d8 4d 08	 fmul	 DWORD PTR _flDistance$[ebp]
  0001d	8b 45 10	 mov	 eax, DWORD PTR _pvrPosition$[ebp]
  00020	d9 18		 fstp	 DWORD PTR [eax]

; 61   :     pvrPosition->z = (float)sin(flTheta) * flDistance;

  00022	d9 45 0c	 fld	 DWORD PTR _flTheta$[ebp]
  00025	83 ec 08	 sub	 esp, 8
  00028	dd 1c 24	 fstp	 QWORD PTR [esp]
  0002b	e8 00 00 00 00	 call	 _sin
  00030	83 c4 08	 add	 esp, 8
  00033	d9 55 f8	 fst	 DWORD PTR tv79[ebp]
  00036	d8 4d 08	 fmul	 DWORD PTR _flDistance$[ebp]
  00039	8b 4d 10	 mov	 ecx, DWORD PTR _pvrPosition$[ebp]
  0003c	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 62   : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?RotateVectorAzimuth@@YGXMMPAU_D3DVECTOR@@@Z ENDP	; RotateVectorAzimuth
DSOUND	ENDS
PUBLIC	?PlayOneShotBuffer@@YGJPBDKPBU_DSMIXBINS@@@Z	; PlayOneShotBuffer
EXTRN	?PlayBufferToCompletion@@YGJPAUIDirectSoundBuffer@@KK@Z:NEAR ; PlayBufferToCompletion
; Function compile flags: /Odt
;	COMDAT ?PlayOneShotBuffer@@YGJPBDKPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT
_hr$ = -8
_pBuffer$ = -4
_pszFile$ = 8
_dwFlags$ = 12
_pMixBins$ = 16
?PlayOneShotBuffer@@YGJPBDKPBU_DSMIXBINS@@@Z PROC NEAR	; PlayOneShotBuffer, COMDAT

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 283  :     LPDIRECTSOUNDBUFFER     pBuffer     = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 284  :     HRESULT                 hr;
; 285  : 
; 286  :     hr = ValidateResult(CreateBufferFromFile(pszFile, dwFlags, pMixBins, NULL, &pBuffer));

  0000d	6a 00		 push	 0
  0000f	8d 45 fc	 lea	 eax, DWORD PTR _pBuffer$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 08	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?CreateBufferFromFile@@YGJPBDKPBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU2@PAK@Z ; CreateBufferFromFile
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0002c	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 287  : 
; 288  :     if(SUCCEEDED(hr))

  0002f	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00033	7c 16		 jl	 SHORT $L36333

; 289  :     {
; 290  :         hr = ValidateResult(PlayBufferToCompletion(pBuffer));

  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?PlayBufferToCompletion@@YGJPAUIDirectSoundBuffer@@KK@Z ; PlayBufferToCompletion
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00048	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36333:

; 291  :     }
; 292  : 
; 293  :     RELEASE(pBuffer);

  0004b	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  0004f	74 10		 je	 SHORT $L36334
  00051	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L36334:

; 294  : 
; 295  :     return hr;

  00061	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 296  : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 0c 00	 ret	 12			; 0000000cH
?PlayOneShotBuffer@@YGJPBDKPBU_DSMIXBINS@@@Z ENDP	; PlayOneShotBuffer
DSOUND	ENDS
PUBLIC	?PlayOneShotBuffer@@YGJKKKKKPBU_DSMIXBINS@@@Z	; PlayOneShotBuffer
EXTRN	?GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z:NEAR	; GetStdWaveFile
; Function compile flags: /Odt
;	COMDAT ?PlayOneShotBuffer@@YGJKKKKKPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT
_pszFileName$ = -24
_wfxFormat$ = -20
_dwFlags$ = 8
_dwFormatTag$ = 12
_dwSamplesPerSec$ = 16
_dwBitsPerSample$ = 20
_dwChannelCount$ = 24
_pMixBins$ = 28
?PlayOneShotBuffer@@YGJKKKKKPBU_DSMIXBINS@@@Z PROC NEAR	; PlayOneShotBuffer, COMDAT

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 332  :     WAVEFORMATEX            wfxFormat           = INIT_PCM_WAVEFORMAT(dwChannelCount, dwSamplesPerSec, dwBitsPerSample);

  00006	66 c7 45 ec 01
	00		 mov	 WORD PTR _wfxFormat$[ebp], 1
  0000c	66 8b 45 18	 mov	 ax, WORD PTR _dwChannelCount$[ebp]
  00010	66 89 45 ee	 mov	 WORD PTR _wfxFormat$[ebp+2], ax
  00014	8b 4d 10	 mov	 ecx, DWORD PTR _dwSamplesPerSec$[ebp]
  00017	89 4d f0	 mov	 DWORD PTR _wfxFormat$[ebp+4], ecx
  0001a	8b 55 10	 mov	 edx, DWORD PTR _dwSamplesPerSec$[ebp]
  0001d	0f af 55 18	 imul	 edx, DWORD PTR _dwChannelCount$[ebp]
  00021	0f af 55 14	 imul	 edx, DWORD PTR _dwBitsPerSample$[ebp]
  00025	c1 ea 03	 shr	 edx, 3
  00028	89 55 f4	 mov	 DWORD PTR _wfxFormat$[ebp+8], edx
  0002b	0f b7 45 18	 movzx	 eax, WORD PTR _dwChannelCount$[ebp]
  0002f	0f b7 4d 14	 movzx	 ecx, WORD PTR _dwBitsPerSample$[ebp]
  00033	0f af c1	 imul	 eax, ecx
  00036	99		 cdq
  00037	83 e2 07	 and	 edx, 7
  0003a	03 c2		 add	 eax, edx
  0003c	c1 f8 03	 sar	 eax, 3
  0003f	66 89 45 f8	 mov	 WORD PTR _wfxFormat$[ebp+12], ax
  00043	66 8b 55 14	 mov	 dx, WORD PTR _dwBitsPerSample$[ebp]
  00047	66 89 55 fa	 mov	 WORD PTR _wfxFormat$[ebp+14], dx
  0004b	66 c7 45 fc 00
	00		 mov	 WORD PTR _wfxFormat$[ebp+16], 0

; 333  :     LPCSTR                  pszFileName         = GetStdWaveFile(&wfxFormat);

  00051	8d 45 ec	 lea	 eax, DWORD PTR _wfxFormat$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z ; GetStdWaveFile
  0005a	89 45 e8	 mov	 DWORD PTR _pszFileName$[ebp], eax

; 334  :     
; 335  :     return PlayOneShotBuffer(pszFileName, dwFlags, pMixBins);

  0005d	8b 4d 1c	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00064	52		 push	 edx
  00065	8b 45 e8	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?PlayOneShotBuffer@@YGJPBDKPBU_DSMIXBINS@@@Z ; PlayOneShotBuffer

; 336  : }

  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 18 00	 ret	 24			; 00000018H
?PlayOneShotBuffer@@YGJKKKKKPBU_DSMIXBINS@@@Z ENDP	; PlayOneShotBuffer
DSOUND	ENDS
PUBLIC	?TestSequentialBuffers@@YGJK@Z			; TestSequentialBuffers
;	COMDAT ?adwChannelCounts@?1??TestSequentialBuffers@@YGJK@Z@4QBKB
DSOUND_RD	SEGMENT
?adwChannelCounts@?1??TestSequentialBuffers@@YGJK@Z@4QBKB DD 01H ; `TestSequentialBuffers'::`2'::adwChannelCounts
	DD	02H
DSOUND_RD	ENDS
;	COMDAT ?adwBitResolutions@?1??TestSequentialBuffers@@YGJK@Z@4QBKB
DSOUND_RD	SEGMENT
?adwBitResolutions@?1??TestSequentialBuffers@@YGJK@Z@4QBKB DD 08H ; `TestSequentialBuffers'::`2'::adwBitResolutions
	DD	010H
DSOUND_RD	ENDS
;	COMDAT ?adwSampleRates@?1??TestSequentialBuffers@@YGJK@Z@4QBKB
DSOUND_RD	SEGMENT
?adwSampleRates@?1??TestSequentialBuffers@@YGJK@Z@4QBKB DD 01f40H ; `TestSequentialBuffers'::`2'::adwSampleRates
	DD	02b11H
	DD	03e80H
	DD	05622H
	DD	07d00H
	DD	0ac44H
	DD	0bb80H
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestSequentialBuffers@@YGJK@Z
DSOUND	SEGMENT
_hr$ = -12
_i$ = -8
_pBuffer$ = -4
_dwFormatTag$ = 8
?TestSequentialBuffers@@YGJK@Z PROC NEAR		; TestSequentialBuffers, COMDAT

; 362  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 363  :     static const DWORD      adwSampleRates[]    = { 8000, 11025, 16000, 22050, 32000, 44100, 48000 };
; 364  :     static const DWORD      adwChannelCounts[]  = { 1, 2 };
; 365  :     static const DWORD      adwBitResolutions[] = { 8, 16 };
; 366  :     static const DWORD      dwBufferCount       = NUMELMS(adwSampleRates) * NUMELMS(adwChannelCounts) * NUMELMS(adwBitResolutions);
; 367  :     LPDIRECTSOUNDBUFFER     pBuffer             = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 368  :     HRESULT                 hr                  = DS_OK;

  0000d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 369  :     DWORD                   i;
; 370  : 
; 371  :     for(i = 0; (i < dwBufferCount) && SUCCEEDED(hr); i++)

  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001b	eb 09		 jmp	 SHORT $L36370
$L36371:
  0001d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00020	83 c0 01	 add	 eax, 1
  00023	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L36370:
  00026	83 7d f8 1c	 cmp	 DWORD PTR _i$[ebp], 28	; 0000001cH
  0002a	73 54		 jae	 SHORT $L36372
  0002c	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00030	7c 4e		 jl	 SHORT $L36372

; 372  :     {
; 373  :         hr = PlayOneShotBuffer(0, dwFormatTag, adwSampleRates[i % NUMELMS(adwSampleRates)], adwBitResolutions[i % NUMELMS(adwBitResolutions)], adwChannelCounts[i % NUMELMS(adwChannelCounts)]);

  00032	6a 00		 push	 0
  00034	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00037	33 d2		 xor	 edx, edx
  00039	b9 02 00 00 00	 mov	 ecx, 2
  0003e	f7 f1		 div	 ecx
  00040	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR ?adwChannelCounts@?1??TestSequentialBuffers@@YGJK@Z@4QBKB[edx*4]
  00047	52		 push	 edx
  00048	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0004b	33 d2		 xor	 edx, edx
  0004d	b9 02 00 00 00	 mov	 ecx, 2
  00052	f7 f1		 div	 ecx
  00054	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR ?adwBitResolutions@?1??TestSequentialBuffers@@YGJK@Z@4QBKB[edx*4]
  0005b	52		 push	 edx
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0005f	33 d2		 xor	 edx, edx
  00061	b9 07 00 00 00	 mov	 ecx, 7
  00066	f7 f1		 div	 ecx
  00068	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR ?adwSampleRates@?1??TestSequentialBuffers@@YGJK@Z@4QBKB[edx*4]
  0006f	52		 push	 edx
  00070	8b 45 08	 mov	 eax, DWORD PTR _dwFormatTag$[ebp]
  00073	50		 push	 eax
  00074	6a 00		 push	 0
  00076	e8 00 00 00 00	 call	 ?PlayOneShotBuffer@@YGJKKKKKPBU_DSMIXBINS@@@Z ; PlayOneShotBuffer
  0007b	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 374  :     }

  0007e	eb 9d		 jmp	 SHORT $L36371
$L36372:

; 375  : 
; 376  :     return hr;

  00080	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 377  : }

  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
?TestSequentialBuffers@@YGJK@Z ENDP			; TestSequentialBuffers
DSOUND	ENDS
PUBLIC	?TestMultipleBuffers@@YGJK@Z			; TestMultipleBuffers
PUBLIC	?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z	; IDirectSoundBuffer::GetStatus
EXTRN	?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z:NEAR ; CreateStdBuffer
EXTRN	?GetFreeSGEs@@YGJPAK@Z:NEAR			; GetFreeSGEs
EXTRN	_DirectSoundDoWork@0:NEAR
EXTRN	?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z:NEAR	; CreateFormat
;	COMDAT ?adwChannelCounts@?1??TestMultipleBuffers@@YGJK@Z@4QBKB
DSOUND_RD	SEGMENT
?adwChannelCounts@?1??TestMultipleBuffers@@YGJK@Z@4QBKB DD 01H ; `TestMultipleBuffers'::`2'::adwChannelCounts
	DD	02H
DSOUND_RD	ENDS
;	COMDAT ?adwBitResolutions@?1??TestMultipleBuffers@@YGJK@Z@4QBKB
DSOUND_RD	SEGMENT
?adwBitResolutions@?1??TestMultipleBuffers@@YGJK@Z@4QBKB DD 08H ; `TestMultipleBuffers'::`2'::adwBitResolutions
	DD	010H
DSOUND_RD	ENDS
;	COMDAT ?adwSampleRates@?1??TestMultipleBuffers@@YGJK@Z@4QBKB
DSOUND_RD	SEGMENT
?adwSampleRates@?1??TestMultipleBuffers@@YGJK@Z@4QBKB DD 01f40H ; `TestMultipleBuffers'::`2'::adwSampleRates
	DD	02b11H
	DD	03e80H
	DD	05622H
	DD	07d00H
	DD	0ac44H
	DD	0bb80H
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestMultipleBuffers@@YGJK@Z
DSOUND	SEGMENT
_hr$ = -160
_dwFreeSGEs$ = -156
_dwBufferSize$ = -152
_dwStatus$ = -148
_dwActiveBuffers$ = -144
_dwSampleRateIndex$ = -140
_dwChannelCountIndex$ = -136
_pwfx$ = -132
_apBuffers$ = -128
_dwBitResolutionIndex$ = -12
_dwMaxBufferSize$ = -8
_i$ = -4
_dwFormatTag$ = 8
?TestMultipleBuffers@@YGJK@Z PROC NEAR			; TestMultipleBuffers, COMDAT

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	57		 push	 edi

; 404  :     static const DWORD      adwSampleRates[]            = { 8000, 11025, 16000, 22050, 32000, 44100, 48000 };
; 405  :     static const DWORD      adwChannelCounts[]          = { 1, 2 };
; 406  :     static const DWORD      adwBitResolutions[]         = { 8, 16 };
; 407  :     static const DWORD      dwBufferCount               = NUMELMS(adwSampleRates) * NUMELMS(adwChannelCounts) * NUMELMS(adwBitResolutions);
; 408  :     LPDIRECTSOUNDBUFFER     apBuffers[dwBufferCount]    = { NULL };

  0000a	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _apBuffers$[ebp], 0
  00011	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00016	33 c0		 xor	 eax, eax
  00018	8d 7d 84	 lea	 edi, DWORD PTR _apBuffers$[ebp+4]
  0001b	f3 ab		 rep stosd

; 409  :     DWORD                   dwSampleRateIndex           = 0;

  0001d	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwSampleRateIndex$[ebp], 0

; 410  :     DWORD                   dwChannelCountIndex         = 0;

  00027	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwChannelCountIndex$[ebp], 0

; 411  :     DWORD                   dwBitResolutionIndex        = 0;

  00031	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwBitResolutionIndex$[ebp], 0

; 412  :     DWORD                   dwActiveBuffers             = 0;

  00038	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwActiveBuffers$[ebp], 0

; 413  :     HRESULT                 hr                          = DS_OK;

  00042	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _hr$[ebp], 0

; 414  :     DWORD                   dwFreeSGEs;
; 415  :     DWORD                   dwMaxBufferSize;
; 416  :     DWORD                   dwBufferSize;
; 417  :     LPCWAVEFORMATEX         pwfx;
; 418  :     DWORD                   dwStatus;
; 419  :     DWORD                   i;
; 420  : 
; 421  :     //
; 422  :     // Get the count of free SGEs
; 423  :     //
; 424  : 
; 425  :     hr = GetFreeSGEs(&dwFreeSGEs);

  0004c	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _dwFreeSGEs$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?GetFreeSGEs@@YGJPAK@Z	; GetFreeSGEs
  00058	89 85 60 ff ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 426  : 
; 427  :     //
; 428  :     // Calculate the maximum buffer size
; 429  :     //
; 430  : 
; 431  :     if(SUCCEEDED(hr))

  0005e	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00065	7c 07		 jl	 SHORT $L36400

; 432  :     {
; 433  :         dwMaxBufferSize = PAGE_SIZE;

  00067	c7 45 f8 00 10
	00 00		 mov	 DWORD PTR _dwMaxBufferSize$[ebp], 4096 ; 00001000H
$L36400:

; 434  :     }
; 435  : 
; 436  :     //
; 437  :     // Enter the creation loop
; 438  :     //
; 439  :     
; 440  :     while(SUCCEEDED(hr) && (dwActiveBuffers < dwBufferCount))

  0006e	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00075	0f 8c fa 00 00
	00		 jl	 $L36408
  0007b	83 bd 70 ff ff
	ff 1c		 cmp	 DWORD PTR _dwActiveBuffers$[ebp], 28 ; 0000001cH
  00082	0f 83 ed 00 00
	00		 jae	 $L36408

; 441  :     {
; 442  :         //
; 443  :         // Create the buffer
; 444  :         //
; 445  :         
; 446  :         pwfx = CreateFormat(dwFormatTag, adwSampleRates[dwSampleRateIndex], adwBitResolutions[dwBitResolutionIndex], adwChannelCounts[dwChannelCountIndex]);

  00088	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _dwChannelCountIndex$[ebp]
  0008e	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?adwChannelCounts@?1??TestMultipleBuffers@@YGJK@Z@4QBKB[ecx*4]
  00095	52		 push	 edx
  00096	8b 45 f4	 mov	 eax, DWORD PTR _dwBitResolutionIndex$[ebp]
  00099	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?adwBitResolutions@?1??TestMultipleBuffers@@YGJK@Z@4QBKB[eax*4]
  000a0	51		 push	 ecx
  000a1	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _dwSampleRateIndex$[ebp]
  000a7	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?adwSampleRates@?1??TestMultipleBuffers@@YGJK@Z@4QBKB[edx*4]
  000ae	50		 push	 eax
  000af	8b 4d 08	 mov	 ecx, DWORD PTR _dwFormatTag$[ebp]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  000b8	89 85 7c ff ff
	ff		 mov	 DWORD PTR _pwfx$[ebp], eax

; 447  :         dwBufferSize = dwMaxBufferSize;

  000be	8b 55 f8	 mov	 edx, DWORD PTR _dwMaxBufferSize$[ebp]
  000c1	89 95 68 ff ff
	ff		 mov	 DWORD PTR _dwBufferSize$[ebp], edx

; 448  :         
; 449  :         hr = CreateStdBuffer(0, pwfx, 0, NULL, &apBuffers[dwActiveBuffers], &dwBufferSize);

  000c7	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _dwBufferSize$[ebp]
  000cd	50		 push	 eax
  000ce	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _dwActiveBuffers$[ebp]
  000d4	8d 54 8d 80	 lea	 edx, DWORD PTR _apBuffers$[ebp+ecx*4]
  000d8	52		 push	 edx
  000d9	6a 00		 push	 0
  000db	6a 00		 push	 0
  000dd	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _pwfx$[ebp]
  000e3	50		 push	 eax
  000e4	6a 00		 push	 0
  000e6	e8 00 00 00 00	 call	 ?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z ; CreateStdBuffer
  000eb	89 85 60 ff ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 450  : 
; 451  :         if(SUCCEEDED(hr))

  000f1	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  000f8	7c 1c		 jl	 SHORT $L36404

; 452  :         {
; 453  :             hr = PlayBuffer(apBuffers[dwActiveBuffers]);

  000fa	6a 00		 push	 0
  000fc	6a 00		 push	 0
  000fe	6a 00		 push	 0
  00100	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _dwActiveBuffers$[ebp]
  00106	8b 54 8d 80	 mov	 edx, DWORD PTR _apBuffers$[ebp+ecx*4]
  0010a	52		 push	 edx
  0010b	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  00110	89 85 60 ff ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L36404:

; 454  :         }
; 455  : 
; 456  :         if(SUCCEEDED(hr))

  00116	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0011d	7c 51		 jl	 SHORT $L36406

; 457  :         {
; 458  :             dwSampleRateIndex = (dwSampleRateIndex + 1) % NUMELMS(adwSampleRates);

  0011f	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _dwSampleRateIndex$[ebp]
  00125	83 c0 01	 add	 eax, 1
  00128	33 d2		 xor	 edx, edx
  0012a	b9 07 00 00 00	 mov	 ecx, 7
  0012f	f7 f1		 div	 ecx
  00131	89 95 74 ff ff
	ff		 mov	 DWORD PTR _dwSampleRateIndex$[ebp], edx

; 459  :             dwChannelCountIndex = (dwChannelCountIndex + 1) % NUMELMS(adwChannelCounts);

  00137	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _dwChannelCountIndex$[ebp]
  0013d	83 c0 01	 add	 eax, 1
  00140	33 d2		 xor	 edx, edx
  00142	b9 02 00 00 00	 mov	 ecx, 2
  00147	f7 f1		 div	 ecx
  00149	89 95 78 ff ff
	ff		 mov	 DWORD PTR _dwChannelCountIndex$[ebp], edx

; 460  :             dwBitResolutionIndex = (dwBitResolutionIndex + 1) % NUMELMS(adwBitResolutions);

  0014f	8b 45 f4	 mov	 eax, DWORD PTR _dwBitResolutionIndex$[ebp]
  00152	83 c0 01	 add	 eax, 1
  00155	33 d2		 xor	 edx, edx
  00157	b9 02 00 00 00	 mov	 ecx, 2
  0015c	f7 f1		 div	 ecx
  0015e	89 55 f4	 mov	 DWORD PTR _dwBitResolutionIndex$[ebp], edx

; 461  : 
; 462  :             dwActiveBuffers++;

  00161	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _dwActiveBuffers$[ebp]
  00167	83 c2 01	 add	 edx, 1
  0016a	89 95 70 ff ff
	ff		 mov	 DWORD PTR _dwActiveBuffers$[ebp], edx
$L36406:

; 463  :         }
; 464  :     }

  00170	e9 f9 fe ff ff	 jmp	 $L36400
$L36408:

; 465  : 
; 466  :     //
; 467  :     // Wait for all buffers to finish playing
; 468  :     //
; 469  : 
; 470  :     while(SUCCEEDED(hr) && dwActiveBuffers)

  00175	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0017c	0f 8c ae 00 00
	00		 jl	 $L36409
  00182	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _dwActiveBuffers$[ebp], 0
  00189	0f 84 a1 00 00
	00		 je	 $L36409

; 471  :     {
; 472  :         DirectSoundDoWork();

  0018f	e8 00 00 00 00	 call	 _DirectSoundDoWork@0

; 473  :         
; 474  :         for(i = 0; (i < dwBufferCount) && SUCCEEDED(hr); i++)

  00194	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0019b	eb 09		 jmp	 SHORT $L36412
$L36413:
  0019d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001a0	83 c0 01	 add	 eax, 1
  001a3	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L36412:
  001a6	83 7d fc 1c	 cmp	 DWORD PTR _i$[ebp], 28	; 0000001cH
  001aa	73 7f		 jae	 SHORT $L36414
  001ac	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  001b3	7c 76		 jl	 SHORT $L36414

; 475  :         {
; 476  :             if(apBuffers[i])

  001b5	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001b8	83 7c 8d 80 00	 cmp	 DWORD PTR _apBuffers$[ebp+ecx*4], 0
  001bd	74 67		 je	 SHORT $L36415

; 477  :             {
; 478  :                 hr = ValidateResult(apBuffers[i]->GetStatus(&dwStatus));

  001bf	8d 95 6c ff ff
	ff		 lea	 edx, DWORD PTR _dwStatus$[ebp]
  001c5	52		 push	 edx
  001c6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001c9	8b 4c 85 80	 mov	 ecx, DWORD PTR _apBuffers$[ebp+eax*4]
  001cd	51		 push	 ecx
  001ce	e8 00 00 00 00	 call	 ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z ; IDirectSoundBuffer::GetStatus
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  001d9	89 85 60 ff ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 479  : 
; 480  :                 if(SUCCEEDED(hr) && !(dwStatus & DSBSTATUS_PLAYING))

  001df	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  001e6	7c 3e		 jl	 SHORT $L36415
  001e8	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _dwStatus$[ebp]
  001ee	83 e2 01	 and	 edx, 1
  001f1	85 d2		 test	 edx, edx
  001f3	75 31		 jne	 SHORT $L36415

; 481  :                 {
; 482  :                     RELEASE(apBuffers[i]);

  001f5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001f8	83 7c 85 80 00	 cmp	 DWORD PTR _apBuffers$[ebp+eax*4], 0
  001fd	74 18		 je	 SHORT $L36418
  001ff	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00202	8b 54 8d 80	 mov	 edx, DWORD PTR _apBuffers$[ebp+ecx*4]
  00206	52		 push	 edx
  00207	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  0020c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0020f	c7 44 85 80 00
	00 00 00	 mov	 DWORD PTR _apBuffers$[ebp+eax*4], 0
$L36418:

; 483  : 
; 484  :                     dwActiveBuffers--;

  00217	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _dwActiveBuffers$[ebp]
  0021d	83 e9 01	 sub	 ecx, 1
  00220	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _dwActiveBuffers$[ebp], ecx
$L36415:

; 485  :                 }
; 486  :             }
; 487  :         }

  00226	e9 72 ff ff ff	 jmp	 $L36413
$L36414:

; 488  :     }

  0022b	e9 45 ff ff ff	 jmp	 $L36408
$L36409:

; 489  : 
; 490  :     return hr;

  00230	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _hr$[ebp]

; 491  : }

  00236	5f		 pop	 edi
  00237	8b e5		 mov	 esp, ebp
  00239	5d		 pop	 ebp
  0023a	c2 04 00	 ret	 4
?TestMultipleBuffers@@YGJK@Z ENDP			; TestMultipleBuffers
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_GetStatus@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
DSOUND	SEGMENT
_this$ = 8
_pdwStatus$ = 12
?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z PROC NEAR	; IDirectSoundBuffer::GetStatus, COMDAT

; 2092 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2093 :         return IDirectSoundBuffer_GetStatus(this, pdwStatus);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_GetStatus@8

; 2094 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z ENDP		; IDirectSoundBuffer::GetStatus
DSOUND	ENDS
PUBLIC	?ValidatePtr@@YGJPAX@Z				; ValidatePtr
PUBLIC	?TestMultipleStreams@@YGJKK@Z			; TestMultipleStreams
EXTRN	?__FREE@@YGXPAPAX@Z:NEAR			; __FREE
EXTRN	?CreateStdQueuedStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z:NEAR ; CreateStdQueuedStream
EXTRN	?PauseStream@@YGJPAUIDirectSoundStream@@H@Z:NEAR ; PauseStream
EXTRN	_WaitForMultipleObjects@16:NEAR
EXTRN	_CloseHandle@4:NEAR
EXTRN	_CreateEventA@16:NEAR
;	COMDAT ?adwChannelCounts@?1??TestMultipleStreams@@YGJKK@Z@4QBKB
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
DSOUND_RD	SEGMENT
?adwChannelCounts@?1??TestMultipleStreams@@YGJKK@Z@4QBKB DD 01H ; `TestMultipleStreams'::`2'::adwChannelCounts
	DD	02H
DSOUND_RD	ENDS
;	COMDAT ?adwBitResolutions@?1??TestMultipleStreams@@YGJKK@Z@4QBKB
DSOUND_RD	SEGMENT
?adwBitResolutions@?1??TestMultipleStreams@@YGJKK@Z@4QBKB DD 08H ; `TestMultipleStreams'::`2'::adwBitResolutions
	DD	010H
DSOUND_RD	ENDS
;	COMDAT ?adwSampleRates@?1??TestMultipleStreams@@YGJKK@Z@4QBKB
DSOUND_RD	SEGMENT
?adwSampleRates@?1??TestMultipleStreams@@YGJKK@Z@4QBKB DD 01f40H ; `TestMultipleStreams'::`2'::adwSampleRates
	DD	02b11H
	DD	03e80H
	DD	05622H
	DD	07d00H
	DD	0ac44H
	DD	0bb80H
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestMultipleStreams@@YGJKK@Z
DSOUND	SEGMENT
_apvStreamData$ = -368
_ahCompletionEvents$ = -256
_hr$ = -140
_dwSampleRateIndex$ = -136
_dwChannelCountIndex$ = -132
_dwActiveStreams$ = -128
_pwfx$ = -124
_dwBitResolutionIndex$ = -120
_i$ = -116
_apStreams$ = -112
_dwFormatTag$ = 8
_dwPacketSize$ = 12
?TestMultipleStreams@@YGJKK@Z PROC NEAR			; TestMultipleStreams, COMDAT

; 519  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  00009	57		 push	 edi

; 520  :     static const DWORD      adwSampleRates[]                    = { 8000, 11025, 16000, 22050, 32000, 44100, 48000 };
; 521  :     static const DWORD      adwChannelCounts[]                  = { 1, 2 };
; 522  :     static const DWORD      adwBitResolutions[]                 = { 8, 16 };
; 523  :     static const DWORD      dwStreamCount                       = NUMELMS(adwSampleRates) * NUMELMS(adwChannelCounts) * NUMELMS(adwBitResolutions);
; 524  :     LPDIRECTSOUNDSTREAM     apStreams[dwStreamCount]            = { NULL };

  0000a	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _apStreams$[ebp], 0
  00011	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00016	33 c0		 xor	 eax, eax
  00018	8d 7d 94	 lea	 edi, DWORD PTR _apStreams$[ebp+4]
  0001b	f3 ab		 rep stosd

; 525  :     LPVOID                  apvStreamData[dwStreamCount]        = { NULL };

  0001d	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _apvStreamData$[ebp], 0
  00027	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  0002c	33 c0		 xor	 eax, eax
  0002e	8d bd 94 fe ff
	ff		 lea	 edi, DWORD PTR _apvStreamData$[ebp+4]
  00034	f3 ab		 rep stosd

; 526  :     HANDLE                  ahCompletionEvents[dwStreamCount]   = { NULL };

  00036	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ahCompletionEvents$[ebp], 0
  00040	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00045	33 c0		 xor	 eax, eax
  00047	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR _ahCompletionEvents$[ebp+4]
  0004d	f3 ab		 rep stosd

; 527  :     DWORD                   dwSampleRateIndex                   = 0;

  0004f	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwSampleRateIndex$[ebp], 0

; 528  :     DWORD                   dwChannelCountIndex                 = 0;

  00059	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwChannelCountIndex$[ebp], 0

; 529  :     DWORD                   dwBitResolutionIndex                = 0;

  00063	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _dwBitResolutionIndex$[ebp], 0

; 530  :     DWORD                   dwActiveStreams                     = 0;

  0006a	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _dwActiveStreams$[ebp], 0

; 531  :     HRESULT                 hr                                  = DS_OK;

  00071	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _hr$[ebp], 0
$L36443:

; 532  :     LPCWAVEFORMATEX         pwfx;
; 533  :     DWORD                   i;
; 534  : 
; 535  :     //
; 536  :     // Enter the creation loop
; 537  :     //
; 538  :     
; 539  :     while(SUCCEEDED(hr) && (dwActiveStreams < dwStreamCount))

  0007b	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00082	0f 8c 46 01 00
	00		 jl	 $L36453
  00088	83 7d 80 1c	 cmp	 DWORD PTR _dwActiveStreams$[ebp], 28 ; 0000001cH
  0008c	0f 83 3c 01 00
	00		 jae	 $L36453

; 540  :     {
; 541  :         hr = ValidatePtr(ahCompletionEvents[dwActiveStreams] = CreateEvent(NULL, FALSE, FALSE, NULL));

  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	6a 00		 push	 0
  00098	6a 00		 push	 0
  0009a	e8 00 00 00 00	 call	 _CreateEventA@16
  0009f	8b 4d 80	 mov	 ecx, DWORD PTR _dwActiveStreams$[ebp]
  000a2	89 84 8d 00 ff
	ff ff		 mov	 DWORD PTR _ahCompletionEvents$[ebp+ecx*4], eax
  000a9	8b 55 80	 mov	 edx, DWORD PTR _dwActiveStreams$[ebp]
  000ac	8b 84 95 00 ff
	ff ff		 mov	 eax, DWORD PTR _ahCompletionEvents$[ebp+edx*4]
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  000b9	89 85 74 ff ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 542  : 
; 543  :         if(SUCCEEDED(hr))

  000bf	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  000c6	0f 8c 8b 00 00
	00		 jl	 $L36447

; 544  :         {
; 545  :             pwfx = CreateFormat(dwFormatTag, adwSampleRates[dwSampleRateIndex], adwBitResolutions[dwBitResolutionIndex], adwChannelCounts[dwChannelCountIndex]);

  000cc	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _dwChannelCountIndex$[ebp]
  000d2	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?adwChannelCounts@?1??TestMultipleStreams@@YGJKK@Z@4QBKB[ecx*4]
  000d9	52		 push	 edx
  000da	8b 45 88	 mov	 eax, DWORD PTR _dwBitResolutionIndex$[ebp]
  000dd	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?adwBitResolutions@?1??TestMultipleStreams@@YGJKK@Z@4QBKB[eax*4]
  000e4	51		 push	 ecx
  000e5	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _dwSampleRateIndex$[ebp]
  000eb	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?adwSampleRates@?1??TestMultipleStreams@@YGJKK@Z@4QBKB[edx*4]
  000f2	50		 push	 eax
  000f3	8b 4d 08	 mov	 ecx, DWORD PTR _dwFormatTag$[ebp]
  000f6	51		 push	 ecx
  000f7	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  000fc	89 45 84	 mov	 DWORD PTR _pwfx$[ebp], eax

; 546  : 
; 547  :             dwPacketSize /= pwfx->nBlockAlign;

  000ff	8b 55 84	 mov	 edx, DWORD PTR _pwfx$[ebp]
  00102	0f b7 4a 0c	 movzx	 ecx, WORD PTR [edx+12]
  00106	8b 45 0c	 mov	 eax, DWORD PTR _dwPacketSize$[ebp]
  00109	33 d2		 xor	 edx, edx
  0010b	f7 f1		 div	 ecx
  0010d	89 45 0c	 mov	 DWORD PTR _dwPacketSize$[ebp], eax

; 548  :             dwPacketSize *= pwfx->nBlockAlign;

  00110	8b 55 84	 mov	 edx, DWORD PTR _pwfx$[ebp]
  00113	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  00117	8b 4d 0c	 mov	 ecx, DWORD PTR _dwPacketSize$[ebp]
  0011a	0f af c8	 imul	 ecx, eax
  0011d	89 4d 0c	 mov	 DWORD PTR _dwPacketSize$[ebp], ecx

; 549  :             
; 550  :             hr = CreateStdQueuedStream(0, pwfx, 0, &dwPacketSize, ahCompletionEvents[dwActiveStreams], NULL, &apStreams[dwActiveStreams], &apvStreamData[dwActiveStreams]);

  00120	8b 55 80	 mov	 edx, DWORD PTR _dwActiveStreams$[ebp]
  00123	8d 84 95 90 fe
	ff ff		 lea	 eax, DWORD PTR _apvStreamData$[ebp+edx*4]
  0012a	50		 push	 eax
  0012b	8b 4d 80	 mov	 ecx, DWORD PTR _dwActiveStreams$[ebp]
  0012e	8d 54 8d 90	 lea	 edx, DWORD PTR _apStreams$[ebp+ecx*4]
  00132	52		 push	 edx
  00133	6a 00		 push	 0
  00135	8b 45 80	 mov	 eax, DWORD PTR _dwActiveStreams$[ebp]
  00138	8b 8c 85 00 ff
	ff ff		 mov	 ecx, DWORD PTR _ahCompletionEvents$[ebp+eax*4]
  0013f	51		 push	 ecx
  00140	8d 55 0c	 lea	 edx, DWORD PTR _dwPacketSize$[ebp]
  00143	52		 push	 edx
  00144	6a 00		 push	 0
  00146	8b 45 84	 mov	 eax, DWORD PTR _pwfx$[ebp]
  00149	50		 push	 eax
  0014a	6a 00		 push	 0
  0014c	e8 00 00 00 00	 call	 ?CreateStdQueuedStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z ; CreateStdQueuedStream
  00151	89 85 74 ff ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L36447:

; 551  :         }
; 552  : 
; 553  :         if(SUCCEEDED(hr))

  00157	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0015e	7c 15		 jl	 SHORT $L36449

; 554  :         {
; 555  :             hr = PauseStream(apStreams[dwActiveStreams], FALSE);

  00160	6a 00		 push	 0
  00162	8b 4d 80	 mov	 ecx, DWORD PTR _dwActiveStreams$[ebp]
  00165	8b 54 8d 90	 mov	 edx, DWORD PTR _apStreams$[ebp+ecx*4]
  00169	52		 push	 edx
  0016a	e8 00 00 00 00	 call	 ?PauseStream@@YGJPAUIDirectSoundStream@@H@Z ; PauseStream
  0016f	89 85 74 ff ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L36449:

; 556  :         }
; 557  : 
; 558  :         if(SUCCEEDED(hr))

  00175	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0017c	7c 4b		 jl	 SHORT $L36451

; 559  :         {
; 560  :             dwSampleRateIndex = (dwSampleRateIndex + 1) % NUMELMS(adwSampleRates);

  0017e	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _dwSampleRateIndex$[ebp]
  00184	83 c0 01	 add	 eax, 1
  00187	33 d2		 xor	 edx, edx
  00189	b9 07 00 00 00	 mov	 ecx, 7
  0018e	f7 f1		 div	 ecx
  00190	89 95 78 ff ff
	ff		 mov	 DWORD PTR _dwSampleRateIndex$[ebp], edx

; 561  :             dwChannelCountIndex = (dwChannelCountIndex + 1) % NUMELMS(adwChannelCounts);

  00196	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _dwChannelCountIndex$[ebp]
  0019c	83 c0 01	 add	 eax, 1
  0019f	33 d2		 xor	 edx, edx
  001a1	b9 02 00 00 00	 mov	 ecx, 2
  001a6	f7 f1		 div	 ecx
  001a8	89 95 7c ff ff
	ff		 mov	 DWORD PTR _dwChannelCountIndex$[ebp], edx

; 562  :             dwBitResolutionIndex = (dwBitResolutionIndex + 1) % NUMELMS(adwBitResolutions);

  001ae	8b 45 88	 mov	 eax, DWORD PTR _dwBitResolutionIndex$[ebp]
  001b1	83 c0 01	 add	 eax, 1
  001b4	33 d2		 xor	 edx, edx
  001b6	b9 02 00 00 00	 mov	 ecx, 2
  001bb	f7 f1		 div	 ecx
  001bd	89 55 88	 mov	 DWORD PTR _dwBitResolutionIndex$[ebp], edx

; 563  : 
; 564  :             dwActiveStreams++;

  001c0	8b 55 80	 mov	 edx, DWORD PTR _dwActiveStreams$[ebp]
  001c3	83 c2 01	 add	 edx, 1
  001c6	89 55 80	 mov	 DWORD PTR _dwActiveStreams$[ebp], edx
$L36451:

; 565  :         }
; 566  :     }

  001c9	e9 ad fe ff ff	 jmp	 $L36443
$L36453:

; 567  : 
; 568  :     //
; 569  :     // Wait for each stream to complete
; 570  :     //
; 571  : 
; 572  :     while(SUCCEEDED(hr) && dwActiveStreams)

  001ce	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  001d5	7c 6a		 jl	 SHORT $L36454
  001d7	83 7d 80 00	 cmp	 DWORD PTR _dwActiveStreams$[ebp], 0
  001db	74 64		 je	 SHORT $L36454

; 573  :     {
; 574  :         DirectSoundDoWork();

  001dd	e8 00 00 00 00	 call	 _DirectSoundDoWork@0

; 575  :         
; 576  :         if((i = WaitForMultipleObjects(dwStreamCount, ahCompletionEvents, FALSE, 0)) < dwStreamCount)

  001e2	6a 00		 push	 0
  001e4	6a 00		 push	 0
  001e6	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _ahCompletionEvents$[ebp]
  001ec	50		 push	 eax
  001ed	6a 1c		 push	 28			; 0000001cH
  001ef	e8 00 00 00 00	 call	 _WaitForMultipleObjects@16
  001f4	89 45 8c	 mov	 DWORD PTR _i$[ebp], eax
  001f7	83 7d 8c 1c	 cmp	 DWORD PTR _i$[ebp], 28	; 0000001cH
  001fb	73 42		 jae	 SHORT $L36456

; 577  :         {
; 578  :             RELEASE(apStreams[i]);

  001fd	8b 4d 8c	 mov	 ecx, DWORD PTR _i$[ebp]
  00200	83 7c 8d 90 00	 cmp	 DWORD PTR _apStreams$[ebp+ecx*4], 0
  00205	74 1f		 je	 SHORT $L36457
  00207	8b 55 8c	 mov	 edx, DWORD PTR _i$[ebp]
  0020a	8b 44 95 90	 mov	 eax, DWORD PTR _apStreams$[ebp+edx*4]
  0020e	8b 4d 8c	 mov	 ecx, DWORD PTR _i$[ebp]
  00211	8b 54 8d 90	 mov	 edx, DWORD PTR _apStreams$[ebp+ecx*4]
  00215	8b 00		 mov	 eax, DWORD PTR [eax]
  00217	52		 push	 edx
  00218	ff 50 04	 call	 DWORD PTR [eax+4]
  0021b	8b 4d 8c	 mov	 ecx, DWORD PTR _i$[ebp]
  0021e	c7 44 8d 90 00
	00 00 00	 mov	 DWORD PTR _apStreams$[ebp+ecx*4], 0
$L36457:

; 579  :             FREE(apvStreamData[i]);

  00226	8b 55 8c	 mov	 edx, DWORD PTR _i$[ebp]
  00229	8d 84 95 90 fe
	ff ff		 lea	 eax, DWORD PTR _apvStreamData$[ebp+edx*4]
  00230	50		 push	 eax
  00231	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 580  : 
; 581  :             dwActiveStreams--;

  00236	8b 4d 80	 mov	 ecx, DWORD PTR _dwActiveStreams$[ebp]
  00239	83 e9 01	 sub	 ecx, 1
  0023c	89 4d 80	 mov	 DWORD PTR _dwActiveStreams$[ebp], ecx
$L36456:

; 582  :         }
; 583  :     }

  0023f	eb 8d		 jmp	 SHORT $L36453
$L36454:

; 584  : 
; 585  :     //
; 586  :     // Clean up
; 587  :     //
; 588  : 
; 589  :     for(i = 0; i < dwStreamCount; i++)

  00241	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00248	eb 09		 jmp	 SHORT $L36459
$L36460:
  0024a	8b 55 8c	 mov	 edx, DWORD PTR _i$[ebp]
  0024d	83 c2 01	 add	 edx, 1
  00250	89 55 8c	 mov	 DWORD PTR _i$[ebp], edx
$L36459:
  00253	83 7d 8c 1c	 cmp	 DWORD PTR _i$[ebp], 28	; 0000001cH
  00257	73 3a		 jae	 SHORT $L36461

; 590  :     {
; 591  :         CLOSE_HANDLE(ahCompletionEvents[i]);

  00259	8b 45 8c	 mov	 eax, DWORD PTR _i$[ebp]
  0025c	83 bc 85 00 ff
	ff ff 00	 cmp	 DWORD PTR _ahCompletionEvents$[ebp+eax*4], 0
  00264	74 2b		 je	 SHORT $L36463
  00266	8b 4d 8c	 mov	 ecx, DWORD PTR _i$[ebp]
  00269	83 bc 8d 00 ff
	ff ff ff	 cmp	 DWORD PTR _ahCompletionEvents$[ebp+ecx*4], -1
  00271	74 1e		 je	 SHORT $L36463
  00273	8b 55 8c	 mov	 edx, DWORD PTR _i$[ebp]
  00276	8b 84 95 00 ff
	ff ff		 mov	 eax, DWORD PTR _ahCompletionEvents$[ebp+edx*4]
  0027d	50		 push	 eax
  0027e	e8 00 00 00 00	 call	 _CloseHandle@4
  00283	8b 4d 8c	 mov	 ecx, DWORD PTR _i$[ebp]
  00286	c7 84 8d 00 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _ahCompletionEvents$[ebp+ecx*4], 0
$L36463:

; 592  :     }

  00291	eb b7		 jmp	 SHORT $L36460
$L36461:

; 593  : 
; 594  :     return hr;

  00293	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _hr$[ebp]

; 595  : }

  00299	5f		 pop	 edi
  0029a	8b e5		 mov	 esp, ebp
  0029c	5d		 pop	 ebp
  0029d	c2 08 00	 ret	 8
?TestMultipleStreams@@YGJKK@Z ENDP			; TestMultipleStreams
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\util.h
DSOUND	ENDS
;	COMDAT ?ValidatePtr@@YGJPAX@Z
DSOUND	SEGMENT
_pv$ = 8
?ValidatePtr@@YGJPAX@Z PROC NEAR			; ValidatePtr, COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   :     if(!pv)

  00003	83 7d 08 00	 cmp	 DWORD PTR _pv$[ebp], 0
  00007	75 01		 jne	 SHORT $L35864

; 43   :     {
; 44   :         __asm int 3;

  00009	cc		 int	 3
$L35864:

; 45   :     }
; 46   : 
; 47   :     return pv ? DS_OK : DSERR_OUTOFMEMORY;

  0000a	33 c0		 xor	 eax, eax
  0000c	83 7d 08 00	 cmp	 DWORD PTR _pv$[ebp], 0
  00010	0f 95 c0	 setne	 al
  00013	48		 dec	 eax
  00014	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH

; 48   : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?ValidatePtr@@YGJPAX@Z ENDP				; ValidatePtr
DSOUND	ENDS
PUBLIC	?TestNotifies@@YGJKKKKKH@Z			; TestNotifies
PUBLIC	??_C@_0BD@ONMGLFJH@Event?5?$CFlu?5signaled?$AA@	; `string'
PUBLIC	?SetNotificationPositions@IDirectSoundBuffer@@QAGJKPBU_DSBPOSITIONNOTIFY@@@Z ; IDirectSoundBuffer::SetNotificationPositions
EXTRN	?__MALLOC@@YGPAXK@Z:NEAR			; __MALLOC
;	COMDAT ??_C@_0BD@ONMGLFJH@Event?5?$CFlu?5signaled?$AA@
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
DSOUND_RD	SEGMENT
??_C@_0BD@ONMGLFJH@Event?5?$CFlu?5signaled?$AA@ DB 'Event %lu signaled', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestNotifies@@YGJKKKKKH@Z
DSOUND	SEGMENT
_dwDuration$ = -80
_hr$ = -76
_dwVolumeIndex$ = -72
_pahEvents$ = -68
_pWaveFile$ = -64
_dwPeriod$ = -60
_i$ = -16
_pwfxFormat$ = -12
_padsbpn$ = -8
_pBuffer$ = -4
_dwFormatTag$ = 8
_dwSampleRate$ = 12
_dwBitsPerSample$ = 16
_dwChannelCount$ = 20
_dwNotifyCount$ = 24
_fLoop$ = 28
?TestNotifies@@YGJKKKKKH@Z PROC NEAR			; TestNotifies, COMDAT

; 626  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	56		 push	 esi

; 627  :     LPCWAVEFORMATEX         pwfxFormat      = CreateFormat(dwFormatTag, dwSampleRate, dwBitsPerSample, dwChannelCount);

  00007	8b 45 14	 mov	 eax, DWORD PTR _dwChannelCount$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _dwBitsPerSample$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _dwSampleRate$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _dwFormatTag$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  0001c	89 45 f4	 mov	 DWORD PTR _pwfxFormat$[ebp], eax

; 628  :     LPXFILEMEDIAOBJECT      pWaveFile       = NULL;

  0001f	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _pWaveFile$[ebp], 0

; 629  :     LPDIRECTSOUNDBUFFER     pBuffer         = NULL;

  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 630  :     DWORD                   dwVolumeIndex   = 0;

  0002d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _dwVolumeIndex$[ebp], 0

; 631  :     DWORD                   dwDuration      = 0;

  00034	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _dwDuration$[ebp], 0

; 632  :     DWORD                   dwPeriod;
; 633  :     LPHANDLE                pahEvents;
; 634  :     LPDSBPOSITIONNOTIFY     padsbpn;
; 635  :     DSENVELOPEDESC          dseg;
; 636  :     HRESULT                 hr;
; 637  :     DWORD                   i;
; 638  : 
; 639  :     //
; 640  :     // Create the buffer
; 641  :     //
; 642  : 
; 643  :     hr = CreateStdBuffer(DSBCAPS_CTRLPOSITIONNOTIFY, pwfxFormat, 0, NULL, &pBuffer, &dwDuration);

  0003b	8d 4d b0	 lea	 ecx, DWORD PTR _dwDuration$[ebp]
  0003e	51		 push	 ecx
  0003f	8d 55 fc	 lea	 edx, DWORD PTR _pBuffer$[ebp]
  00042	52		 push	 edx
  00043	6a 00		 push	 0
  00045	6a 00		 push	 0
  00047	8b 45 f4	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  0004a	50		 push	 eax
  0004b	68 00 01 00 00	 push	 256			; 00000100H
  00050	e8 00 00 00 00	 call	 ?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z ; CreateStdBuffer
  00055	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax

; 644  : 
; 645  :     //
; 646  :     // Calculate the notification period
; 647  :     //
; 648  :     
; 649  :     if(SUCCEEDED(hr))

  00058	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005c	7c 25		 jl	 SHORT $L36484

; 650  :     {
; 651  :         dwPeriod = dwDuration / (dwNotifyCount - 1) / pwfxFormat->nBlockAlign * pwfxFormat->nBlockAlign;

  0005e	8b 4d 18	 mov	 ecx, DWORD PTR _dwNotifyCount$[ebp]
  00061	83 e9 01	 sub	 ecx, 1
  00064	8b 45 b0	 mov	 eax, DWORD PTR _dwDuration$[ebp]
  00067	33 d2		 xor	 edx, edx
  00069	f7 f1		 div	 ecx
  0006b	8b 55 f4	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  0006e	0f b7 4a 0c	 movzx	 ecx, WORD PTR [edx+12]
  00072	33 d2		 xor	 edx, edx
  00074	f7 f1		 div	 ecx
  00076	8b 55 f4	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  00079	0f b7 4a 0c	 movzx	 ecx, WORD PTR [edx+12]
  0007d	0f af c1	 imul	 eax, ecx
  00080	89 45 c4	 mov	 DWORD PTR _dwPeriod$[ebp], eax
$L36484:

; 652  :     }
; 653  : 
; 654  :     //
; 655  :     // Create notification events
; 656  :     //
; 657  :     
; 658  :     if(SUCCEEDED(hr))

  00083	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00087	7c 1b		 jl	 SHORT $L36486

; 659  :     {
; 660  :         hr = MALLOC(pahEvents, HANDLE, dwNotifyCount);

  00089	8b 55 18	 mov	 edx, DWORD PTR _dwNotifyCount$[ebp]
  0008c	c1 e2 02	 shl	 edx, 2
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  00095	89 45 bc	 mov	 DWORD PTR _pahEvents$[ebp], eax
  00098	8b 45 bc	 mov	 eax, DWORD PTR _pahEvents$[ebp]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  000a1	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax
$L36486:

; 661  :     }
; 662  : 
; 663  :     if(SUCCEEDED(hr))

  000a4	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a8	7c 4c		 jl	 SHORT $L36490

; 664  :     {
; 665  :         for(i = 0; i < dwNotifyCount; i++)

  000aa	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000b1	eb 09		 jmp	 SHORT $L36491
$L36492:
  000b3	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  000b6	83 c1 01	 add	 ecx, 1
  000b9	89 4d f0	 mov	 DWORD PTR _i$[ebp], ecx
$L36491:
  000bc	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  000bf	3b 55 18	 cmp	 edx, DWORD PTR _dwNotifyCount$[ebp]
  000c2	73 32		 jae	 SHORT $L36490

; 666  :         {
; 667  :             if(FAILED(hr = ValidatePtr(pahEvents[i] = CreateEvent(NULL, FALSE, FALSE, NULL))))

  000c4	6a 00		 push	 0
  000c6	6a 00		 push	 0
  000c8	6a 00		 push	 0
  000ca	6a 00		 push	 0
  000cc	e8 00 00 00 00	 call	 _CreateEventA@16
  000d1	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  000d4	8b 55 bc	 mov	 edx, DWORD PTR _pahEvents$[ebp]
  000d7	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  000da	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000dd	8b 4d bc	 mov	 ecx, DWORD PTR _pahEvents$[ebp]
  000e0	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000e3	52		 push	 edx
  000e4	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  000e9	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax
  000ec	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000f0	7d 02		 jge	 SHORT $L36495

; 668  :             {
; 669  :                 break;

  000f2	eb 02		 jmp	 SHORT $L36490
$L36495:

; 670  :             }
; 671  :         }

  000f4	eb bd		 jmp	 SHORT $L36492
$L36490:

; 672  :     }
; 673  : 
; 674  :     //
; 675  :     // Set notifications
; 676  :     //
; 677  : 
; 678  :     if(SUCCEEDED(hr))

  000f6	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000fa	7c 1b		 jl	 SHORT $L36497

; 679  :     {
; 680  :         hr = MALLOC(padsbpn, DSBPOSITIONNOTIFY, dwNotifyCount);

  000fc	8b 45 18	 mov	 eax, DWORD PTR _dwNotifyCount$[ebp]
  000ff	c1 e0 03	 shl	 eax, 3
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  00108	89 45 f8	 mov	 DWORD PTR _padsbpn$[ebp], eax
  0010b	8b 4d f8	 mov	 ecx, DWORD PTR _padsbpn$[ebp]
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  00114	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax
$L36497:

; 681  :     }
; 682  : 
; 683  :     if(SUCCEEDED(hr))

  00117	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0011b	0f 8c ad 00 00
	00		 jl	 $L36501

; 684  :     {
; 685  :         for(i = 0; i < dwNotifyCount - 2; i++)

  00121	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00128	eb 09		 jmp	 SHORT $L36502
$L36503:
  0012a	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  0012d	83 c2 01	 add	 edx, 1
  00130	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx
$L36502:
  00133	8b 45 18	 mov	 eax, DWORD PTR _dwNotifyCount$[ebp]
  00136	83 e8 02	 sub	 eax, 2
  00139	39 45 f0	 cmp	 DWORD PTR _i$[ebp], eax
  0013c	73 25		 jae	 SHORT $L36504

; 686  :         {
; 687  :             padsbpn[i].dwOffset = i * dwPeriod;

  0013e	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00141	0f af 4d c4	 imul	 ecx, DWORD PTR _dwPeriod$[ebp]
  00145	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00148	8b 45 f8	 mov	 eax, DWORD PTR _padsbpn$[ebp]
  0014b	89 0c d0	 mov	 DWORD PTR [eax+edx*8], ecx

; 688  :             padsbpn[i].hEventNotify = pahEvents[i];

  0014e	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00151	8b 55 f8	 mov	 edx, DWORD PTR _padsbpn$[ebp]
  00154	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00157	8b 75 bc	 mov	 esi, DWORD PTR _pahEvents$[ebp]
  0015a	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]
  0015d	89 44 ca 04	 mov	 DWORD PTR [edx+ecx*8+4], eax

; 689  :         }

  00161	eb c7		 jmp	 SHORT $L36503
$L36504:

; 690  : 
; 691  :         padsbpn[i].dwOffset = dwDuration - pwfxFormat->nBlockAlign;

  00163	8b 4d f4	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00166	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  0016a	8b 45 b0	 mov	 eax, DWORD PTR _dwDuration$[ebp]
  0016d	2b c2		 sub	 eax, edx
  0016f	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00172	8b 55 f8	 mov	 edx, DWORD PTR _padsbpn$[ebp]
  00175	89 04 ca	 mov	 DWORD PTR [edx+ecx*8], eax

; 692  :         padsbpn[i].hEventNotify = pahEvents[i];

  00178	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0017b	8b 4d f8	 mov	 ecx, DWORD PTR _padsbpn$[ebp]
  0017e	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00181	8b 75 bc	 mov	 esi, DWORD PTR _pahEvents$[ebp]
  00184	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  00187	89 54 c1 04	 mov	 DWORD PTR [ecx+eax*8+4], edx

; 693  : 
; 694  :         i++;

  0018b	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0018e	83 c0 01	 add	 eax, 1
  00191	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax

; 695  :         
; 696  :         padsbpn[i].dwOffset = DSBPN_OFFSETSTOP;

  00194	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00197	8b 55 f8	 mov	 edx, DWORD PTR _padsbpn$[ebp]
  0019a	c7 04 ca ff ff
	ff ff		 mov	 DWORD PTR [edx+ecx*8], -1

; 697  :         padsbpn[i].hEventNotify = pahEvents[i];

  001a1	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  001a4	8b 4d f8	 mov	 ecx, DWORD PTR _padsbpn$[ebp]
  001a7	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  001aa	8b 75 bc	 mov	 esi, DWORD PTR _pahEvents$[ebp]
  001ad	8b 14 96	 mov	 edx, DWORD PTR [esi+edx*4]
  001b0	89 54 c1 04	 mov	 DWORD PTR [ecx+eax*8+4], edx

; 698  : 
; 699  :         hr = ValidateResult(pBuffer->SetNotificationPositions(dwNotifyCount, padsbpn));

  001b4	8b 45 f8	 mov	 eax, DWORD PTR _padsbpn$[ebp]
  001b7	50		 push	 eax
  001b8	8b 4d 18	 mov	 ecx, DWORD PTR _dwNotifyCount$[ebp]
  001bb	51		 push	 ecx
  001bc	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  001bf	52		 push	 edx
  001c0	e8 00 00 00 00	 call	 ?SetNotificationPositions@IDirectSoundBuffer@@QAGJKPBU_DSBPOSITIONNOTIFY@@@Z ; IDirectSoundBuffer::SetNotificationPositions
  001c5	50		 push	 eax
  001c6	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  001cb	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax
$L36501:

; 700  :     }
; 701  : 
; 702  :     //
; 703  :     // Start playback
; 704  :     //
; 705  : 
; 706  :     if(SUCCEEDED(hr))

  001ce	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001d2	7c 1a		 jl	 SHORT $L36506

; 707  :     {
; 708  :         hr = PlayBuffer(pBuffer, fLoop ? DSBPLAY_LOOPING : 0);

  001d4	6a 00		 push	 0
  001d6	6a 00		 push	 0
  001d8	33 c0		 xor	 eax, eax
  001da	83 7d 1c 00	 cmp	 DWORD PTR _fLoop$[ebp], 0
  001de	0f 95 c0	 setne	 al
  001e1	50		 push	 eax
  001e2	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  001e5	51		 push	 ecx
  001e6	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  001eb	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax
$L36506:

; 709  :     }
; 710  : 
; 711  :     //
; 712  :     // Wait for playback to complete
; 713  :     //
; 714  : 
; 715  :     if(SUCCEEDED(hr))

  001ee	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001f2	7c 4a		 jl	 SHORT $L36508
$L36510:

; 716  :     {
; 717  :         while(!fBreakTest)

  001f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _fBreakTest, 0
  001fb	75 41		 jne	 SHORT $L36508

; 718  :         {
; 719  :             DirectSoundDoWork();

  001fd	e8 00 00 00 00	 call	 _DirectSoundDoWork@0

; 720  :             
; 721  :             if((i = WaitForMultipleObjects(dwNotifyCount, pahEvents, FALSE, 100)) < dwNotifyCount)

  00202	6a 64		 push	 100			; 00000064H
  00204	6a 00		 push	 0
  00206	8b 55 bc	 mov	 edx, DWORD PTR _pahEvents$[ebp]
  00209	52		 push	 edx
  0020a	8b 45 18	 mov	 eax, DWORD PTR _dwNotifyCount$[ebp]
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 _WaitForMultipleObjects@16
  00213	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
  00216	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00219	3b 4d 18	 cmp	 ecx, DWORD PTR _dwNotifyCount$[ebp]
  0021c	73 1e		 jae	 SHORT $L36512

; 722  :             {
; 723  :                 DPF_TEST("Event %lu signaled", i);

  0021e	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00221	52		 push	 edx
  00222	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@ONMGLFJH@Event?5?$CFlu?5signaled?$AA@
  00227	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  0022c	83 c4 08	 add	 esp, 8

; 724  : 
; 725  :                 if(WAIT_OBJECT_0 + dwNotifyCount - 1 == i)

  0022f	8b 45 18	 mov	 eax, DWORD PTR _dwNotifyCount$[ebp]
  00232	83 e8 01	 sub	 eax, 1
  00235	3b 45 f0	 cmp	 eax, DWORD PTR _i$[ebp]
  00238	75 02		 jne	 SHORT $L36512

; 726  :                 {
; 727  :                     break;

  0023a	eb 02		 jmp	 SHORT $L36508
$L36512:

; 728  :                 }
; 729  :             }
; 730  :         }

  0023c	eb b6		 jmp	 SHORT $L36510
$L36508:

; 731  :     }
; 732  : 
; 733  :     //
; 734  :     // Clean up
; 735  :     //
; 736  : 
; 737  :     if(pahEvents)

  0023e	83 7d bc 00	 cmp	 DWORD PTR _pahEvents$[ebp], 0
  00242	74 50		 je	 SHORT $L36516

; 738  :     {
; 739  :         for(i = 0; i < dwNotifyCount; i++)

  00244	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0024b	eb 09		 jmp	 SHORT $L36517
$L36518:
  0024d	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00250	83 c1 01	 add	 ecx, 1
  00253	89 4d f0	 mov	 DWORD PTR _i$[ebp], ecx
$L36517:
  00256	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00259	3b 55 18	 cmp	 edx, DWORD PTR _dwNotifyCount$[ebp]
  0025c	73 36		 jae	 SHORT $L36516

; 740  :         {
; 741  :             CLOSE_HANDLE(pahEvents[i]);

  0025e	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00261	8b 4d bc	 mov	 ecx, DWORD PTR _pahEvents$[ebp]
  00264	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00268	74 28		 je	 SHORT $L36521
  0026a	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  0026d	8b 45 bc	 mov	 eax, DWORD PTR _pahEvents$[ebp]
  00270	83 3c 90 ff	 cmp	 DWORD PTR [eax+edx*4], -1
  00274	74 1c		 je	 SHORT $L36521
  00276	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00279	8b 55 bc	 mov	 edx, DWORD PTR _pahEvents$[ebp]
  0027c	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 _CloseHandle@4
  00285	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00288	8b 55 bc	 mov	 edx, DWORD PTR _pahEvents$[ebp]
  0028b	c7 04 8a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx*4], 0
$L36521:

; 742  :         }

  00292	eb b9		 jmp	 SHORT $L36518
$L36516:

; 743  :     }
; 744  : 
; 745  :     FREE(pahEvents);

  00294	8d 45 bc	 lea	 eax, DWORD PTR _pahEvents$[ebp]
  00297	50		 push	 eax
  00298	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 746  :     FREE(padsbpn);

  0029d	8d 4d f8	 lea	 ecx, DWORD PTR _padsbpn$[ebp]
  002a0	51		 push	 ecx
  002a1	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 747  : 
; 748  :     RELEASE(pBuffer);

  002a6	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  002aa	74 10		 je	 SHORT $L36524
  002ac	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  002af	52		 push	 edx
  002b0	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  002b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L36524:

; 749  :     RELEASE(pWaveFile);

  002bc	83 7d c0 00	 cmp	 DWORD PTR _pWaveFile$[ebp], 0
  002c0	74 13		 je	 SHORT $L36525
  002c2	8b 45 c0	 mov	 eax, DWORD PTR _pWaveFile$[ebp]
  002c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c7	8b 55 c0	 mov	 edx, DWORD PTR _pWaveFile$[ebp]
  002ca	52		 push	 edx
  002cb	ff 51 04	 call	 DWORD PTR [ecx+4]
  002ce	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _pWaveFile$[ebp], 0
$L36525:

; 750  : 
; 751  :     return hr;

  002d5	8b 45 b4	 mov	 eax, DWORD PTR _hr$[ebp]

; 752  : }

  002d8	5e		 pop	 esi
  002d9	8b e5		 mov	 esp, ebp
  002db	5d		 pop	 ebp
  002dc	c2 18 00	 ret	 24			; 00000018H
?TestNotifies@@YGJKKKKKH@Z ENDP				; TestNotifies
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetNotificationPositions@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetNotificationPositions@IDirectSoundBuffer@@QAGJKPBU_DSBPOSITIONNOTIFY@@@Z
DSOUND	SEGMENT
_this$ = 8
_dwNotifyCount$ = 12
_paNotifies$ = 16
?SetNotificationPositions@IDirectSoundBuffer@@QAGJKPBU_DSBPOSITIONNOTIFY@@@Z PROC NEAR ; IDirectSoundBuffer::SetNotificationPositions, COMDAT

; 2127 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2128 :         return IDirectSoundBuffer_SetNotificationPositions(this, dwNotifyCount, paNotifies);

  00003	8b 45 10	 mov	 eax, DWORD PTR _paNotifies$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _dwNotifyCount$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetNotificationPositions@12

; 2129 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetNotificationPositions@IDirectSoundBuffer@@QAGJKPBU_DSBPOSITIONNOTIFY@@@Z ENDP ; IDirectSoundBuffer::SetNotificationPositions
DSOUND	ENDS
PUBLIC	?PlayOneShotStream@@YGJPBDKKPBU_DSMIXBINS@@@Z	; PlayOneShotStream
EXTRN	?CreateQueuedStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z:NEAR ; CreateQueuedStreamFromFile
EXTRN	_WaitForSingleObject@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
;	COMDAT ?PlayOneShotStream@@YGJPBDKKPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT
_hr$ = -16
_hCompletionEvent$ = -12
_pStream$ = -8
_pvDataBuffer$ = -4
_pszFile$ = 8
_dwFlags$ = 12
_dwPacketSize$ = 16
_pMixBins$ = 20
?PlayOneShotStream@@YGJPBDKKPBU_DSMIXBINS@@@Z PROC NEAR	; PlayOneShotStream, COMDAT

; 784  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 785  :     LPDIRECTSOUNDSTREAM     pStream             = NULL;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0

; 786  :     LPVOID                  pvDataBuffer        = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pvDataBuffer$[ebp], 0

; 787  :     HANDLE                  hCompletionEvent;
; 788  :     HRESULT                 hr;
; 789  :     
; 790  :     //
; 791  :     // Create the completion event
; 792  :     //
; 793  :     
; 794  :     hr = ValidatePtr(hCompletionEvent = CreateEvent(NULL, FALSE, FALSE, NULL));

  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	6a 00		 push	 0
  0001a	6a 00		 push	 0
  0001c	e8 00 00 00 00	 call	 _CreateEventA@16
  00021	89 45 f4	 mov	 DWORD PTR _hCompletionEvent$[ebp], eax
  00024	8b 45 f4	 mov	 eax, DWORD PTR _hCompletionEvent$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  0002d	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 795  : 
; 796  :     //
; 797  :     // Create the stream 
; 798  :     //
; 799  : 
; 800  :     if(SUCCEEDED(hr))

  00030	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00034	7c 26		 jl	 SHORT $L36537

; 801  :     {
; 802  :         hr = CreateQueuedStreamFromFile(pszFile, dwFlags, pMixBins, &dwPacketSize, hCompletionEvent, NULL, &pStream, &pvDataBuffer);

  00036	8d 4d fc	 lea	 ecx, DWORD PTR _pvDataBuffer$[ebp]
  00039	51		 push	 ecx
  0003a	8d 55 f8	 lea	 edx, DWORD PTR _pStream$[ebp]
  0003d	52		 push	 edx
  0003e	6a 00		 push	 0
  00040	8b 45 f4	 mov	 eax, DWORD PTR _hCompletionEvent$[ebp]
  00043	50		 push	 eax
  00044	8d 4d 10	 lea	 ecx, DWORD PTR _dwPacketSize$[ebp]
  00047	51		 push	 ecx
  00048	8b 55 14	 mov	 edx, DWORD PTR _pMixBins$[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ?CreateQueuedStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z ; CreateQueuedStreamFromFile
  00059	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L36537:

; 803  :     }
; 804  : 
; 805  :     //
; 806  :     // Start playback
; 807  :     //
; 808  : 
; 809  :     if(SUCCEEDED(hr))

  0005c	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00060	7c 0e		 jl	 SHORT $L36539

; 810  :     {
; 811  :         hr = PauseStream(pStream, FALSE);

  00062	6a 00		 push	 0
  00064	8b 55 f8	 mov	 edx, DWORD PTR _pStream$[ebp]
  00067	52		 push	 edx
  00068	e8 00 00 00 00	 call	 ?PauseStream@@YGJPAUIDirectSoundStream@@H@Z ; PauseStream
  0006d	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L36539:

; 812  :     }
; 813  : 
; 814  :     //
; 815  :     // Wait for the completion event to be signaled
; 816  :     //
; 817  : 
; 818  :     if(SUCCEEDED(hr))

  00070	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00074	7c 24		 jl	 SHORT $L36541
$L36543:

; 819  :     {
; 820  :         while(TRUE)

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	85 c0		 test	 eax, eax
  0007d	74 1b		 je	 SHORT $L36541

; 821  :         {
; 822  :             DirectSoundDoWork();

  0007f	e8 00 00 00 00	 call	 _DirectSoundDoWork@0

; 823  : 
; 824  :             if(WAIT_TIMEOUT != WaitForSingleObject(hCompletionEvent, 0))

  00084	6a 00		 push	 0
  00086	8b 4d f4	 mov	 ecx, DWORD PTR _hCompletionEvent$[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 _WaitForSingleObject@8
  0008f	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  00094	74 02		 je	 SHORT $L36545

; 825  :             {
; 826  :                 break;

  00096	eb 02		 jmp	 SHORT $L36541
$L36545:

; 827  :             }
; 828  :         }

  00098	eb dc		 jmp	 SHORT $L36543
$L36541:

; 829  :     }
; 830  : 
; 831  :     //
; 832  :     // Clean up
; 833  :     //
; 834  : 
; 835  :     RELEASE(pStream);

  0009a	83 7d f8 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  0009e	74 13		 je	 SHORT $L36546
  000a0	8b 55 f8	 mov	 edx, DWORD PTR _pStream$[ebp]
  000a3	8b 02		 mov	 eax, DWORD PTR [edx]
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _pStream$[ebp]
  000a8	51		 push	 ecx
  000a9	ff 50 04	 call	 DWORD PTR [eax+4]
  000ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0
$L36546:

; 836  :     FREE(pvDataBuffer);

  000b3	8d 55 fc	 lea	 edx, DWORD PTR _pvDataBuffer$[ebp]
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 837  :     CLOSE_HANDLE(hCompletionEvent);

  000bc	83 7d f4 00	 cmp	 DWORD PTR _hCompletionEvent$[ebp], 0
  000c0	74 16		 je	 SHORT $L36549
  000c2	83 7d f4 ff	 cmp	 DWORD PTR _hCompletionEvent$[ebp], -1
  000c6	74 10		 je	 SHORT $L36549
  000c8	8b 45 f4	 mov	 eax, DWORD PTR _hCompletionEvent$[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _CloseHandle@4
  000d1	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hCompletionEvent$[ebp], 0
$L36549:

; 838  : 
; 839  :     return hr;

  000d8	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]

; 840  : }

  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 10 00	 ret	 16			; 00000010H
?PlayOneShotStream@@YGJPBDKKPBU_DSMIXBINS@@@Z ENDP	; PlayOneShotStream
DSOUND	ENDS
PUBLIC	?PlayOneShotStream@@YGJKKKKKKPBU_DSMIXBINS@@@Z	; PlayOneShotStream
; Function compile flags: /Odt
;	COMDAT ?PlayOneShotStream@@YGJKKKKKKPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT
_pszFileName$ = -8
_pwfxFormat$ = -4
_dwFlags$ = 8
_dwFormatTag$ = 12
_dwSamplesPerSec$ = 16
_dwBitsPerSample$ = 20
_dwChannelCount$ = 24
_dwPacketSize$ = 28
_pMixBins$ = 32
?PlayOneShotStream@@YGJKKKKKKPBU_DSMIXBINS@@@Z PROC NEAR ; PlayOneShotStream, COMDAT

; 877  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 878  :     LPCWAVEFORMATEX         pwfxFormat      = CreateFormat(dwFormatTag, dwSamplesPerSec, dwBitsPerSample, dwChannelCount);

  00006	8b 45 18	 mov	 eax, DWORD PTR _dwChannelCount$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 14	 mov	 ecx, DWORD PTR _dwBitsPerSample$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 10	 mov	 edx, DWORD PTR _dwSamplesPerSec$[ebp]
  00011	52		 push	 edx
  00012	8b 45 0c	 mov	 eax, DWORD PTR _dwFormatTag$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  0001b	89 45 fc	 mov	 DWORD PTR _pwfxFormat$[ebp], eax

; 879  :     LPCSTR                  pszFileName     = GetStdWaveFile(pwfxFormat);

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z ; GetStdWaveFile
  00027	89 45 f8	 mov	 DWORD PTR _pszFileName$[ebp], eax

; 880  :     
; 881  :     return PlayOneShotStream(pszFileName, dwFlags, dwPacketSize, pMixBins);

  0002a	8b 55 20	 mov	 edx, DWORD PTR _pMixBins$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 1c	 mov	 eax, DWORD PTR _dwPacketSize$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 08	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 f8	 mov	 edx, DWORD PTR _pszFileName$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ?PlayOneShotStream@@YGJPBDKKPBU_DSMIXBINS@@@Z ; PlayOneShotStream

; 882  : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 1c 00	 ret	 28			; 0000001cH
?PlayOneShotStream@@YGJKKKKKKPBU_DSMIXBINS@@@Z ENDP	; PlayOneShotStream
DSOUND	ENDS
PUBLIC	?TestBufferOffsets@@YGJKKKKMMMMH@Z		; TestBufferOffsets
PUBLIC	??_C@_0FC@MJAKMLCB@Setting?5buffer?5play?5region?5to?5?$CFl@ ; `string'
PUBLIC	?SetPlayRegion@IDirectSoundBuffer@@QAGJKK@Z	; IDirectSoundBuffer::SetPlayRegion
PUBLIC	?SetLoopRegion@IDirectSoundBuffer@@QAGJKK@Z	; IDirectSoundBuffer::SetLoopRegion
EXTRN	?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z:NEAR	; WaitBuffer
EXTRN	_Sleep@4:NEAR
;	COMDAT ??_C@_0FC@MJAKMLCB@Setting?5buffer?5play?5region?5to?5?$CFl@
DSOUND_RD	SEGMENT
??_C@_0FC@MJAKMLCB@Setting?5buffer?5play?5region?5to?5?$CFl@ DB 'Setting '
	DB	'buffer play region to %lu, %lu and loop region to %lu, %lu (d'
	DB	'uration %lu)', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestBufferOffsets@@YGJKKKKMMMMH@Z
DSOUND	SEGMENT
tv236 = -64
tv225 = -56
tv214 = -48
tv203 = -40
_dwLoopLength$ = -32
_dwPlayStart$ = -28
_dwLoopStart$ = -24
_dwDuration$ = -20
_hr$ = -16
_dwPlayLength$ = -12
_pwfxFormat$ = -8
_pBuffer$ = -4
_dwFormatTag$ = 8
_dwSampleRate$ = 12
_dwBitsPerSample$ = 16
_dwChannelCount$ = 20
_flPlayStart$ = 24
_flPlayEnd$ = 28
_flLoopStart$ = 32
_flLoopEnd$ = 36
_fLoop$ = 40
?TestBufferOffsets@@YGJKKKKMMMMH@Z PROC NEAR		; TestBufferOffsets, COMDAT

; 924  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H

; 925  :     LPCWAVEFORMATEX         pwfxFormat  = CreateFormat(dwFormatTag, dwSampleRate, dwBitsPerSample, dwChannelCount);

  00006	8b 45 14	 mov	 eax, DWORD PTR _dwChannelCount$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _dwBitsPerSample$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR _dwSampleRate$[ebp]
  00011	52		 push	 edx
  00012	8b 45 08	 mov	 eax, DWORD PTR _dwFormatTag$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  0001b	89 45 f8	 mov	 DWORD PTR _pwfxFormat$[ebp], eax

; 926  :     LPDIRECTSOUNDBUFFER     pBuffer     = NULL;

  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 927  :     DWORD                   dwDuration  = 0;

  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwDuration$[ebp], 0

; 928  :     DWORD                   dwPlayStart;
; 929  :     DWORD                   dwPlayLength;
; 930  :     DWORD                   dwLoopStart;
; 931  :     DWORD                   dwLoopLength;
; 932  :     HRESULT                 hr;
; 933  : 
; 934  :     hr = CreateStdBuffer(0, pwfxFormat, 0, NULL, &pBuffer, &dwDuration);

  0002c	8d 4d ec	 lea	 ecx, DWORD PTR _dwDuration$[ebp]
  0002f	51		 push	 ecx
  00030	8d 55 fc	 lea	 edx, DWORD PTR _pBuffer$[ebp]
  00033	52		 push	 edx
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	8b 45 f8	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  0003b	50		 push	 eax
  0003c	6a 00		 push	 0
  0003e	e8 00 00 00 00	 call	 ?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z ; CreateStdBuffer
  00043	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 935  : 
; 936  :     if(SUCCEEDED(hr))

  00046	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004a	0f 8c 27 01 00
	00		 jl	 $L36582

; 937  :     {
; 938  :         dwPlayStart = (DWORD)((FLOAT)dwDuration * flPlayStart) / pwfxFormat->nBlockAlign * pwfxFormat->nBlockAlign;

  00050	8b 4d ec	 mov	 ecx, DWORD PTR _dwDuration$[ebp]
  00053	89 4d d8	 mov	 DWORD PTR tv203[ebp], ecx
  00056	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv203[ebp+4], 0
  0005d	df 6d d8	 fild	 QWORD PTR tv203[ebp]
  00060	d8 4d 18	 fmul	 DWORD PTR _flPlayStart$[ebp]
  00063	e8 00 00 00 00	 call	 __ftol2
  00068	8b 55 f8	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  0006b	0f b7 4a 0c	 movzx	 ecx, WORD PTR [edx+12]
  0006f	33 d2		 xor	 edx, edx
  00071	f7 f1		 div	 ecx
  00073	8b 55 f8	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  00076	0f b7 4a 0c	 movzx	 ecx, WORD PTR [edx+12]
  0007a	0f af c1	 imul	 eax, ecx
  0007d	89 45 e4	 mov	 DWORD PTR _dwPlayStart$[ebp], eax

; 939  :         dwPlayLength = ((DWORD)((FLOAT)dwDuration * flPlayEnd) / pwfxFormat->nBlockAlign * pwfxFormat->nBlockAlign) - dwPlayStart;

  00080	8b 55 ec	 mov	 edx, DWORD PTR _dwDuration$[ebp]
  00083	89 55 d0	 mov	 DWORD PTR tv214[ebp], edx
  00086	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv214[ebp+4], 0
  0008d	df 6d d0	 fild	 QWORD PTR tv214[ebp]
  00090	d8 4d 1c	 fmul	 DWORD PTR _flPlayEnd$[ebp]
  00093	e8 00 00 00 00	 call	 __ftol2
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  0009b	0f b7 49 0c	 movzx	 ecx, WORD PTR [ecx+12]
  0009f	33 d2		 xor	 edx, edx
  000a1	f7 f1		 div	 ecx
  000a3	8b 55 f8	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  000a6	0f b7 4a 0c	 movzx	 ecx, WORD PTR [edx+12]
  000aa	0f af c1	 imul	 eax, ecx
  000ad	2b 45 e4	 sub	 eax, DWORD PTR _dwPlayStart$[ebp]
  000b0	89 45 f4	 mov	 DWORD PTR _dwPlayLength$[ebp], eax

; 940  :         
; 941  :         dwLoopStart = (DWORD)((FLOAT)dwDuration * flLoopStart) / pwfxFormat->nBlockAlign * pwfxFormat->nBlockAlign - dwPlayStart;

  000b3	8b 55 ec	 mov	 edx, DWORD PTR _dwDuration$[ebp]
  000b6	89 55 c8	 mov	 DWORD PTR tv225[ebp], edx
  000b9	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv225[ebp+4], 0
  000c0	df 6d c8	 fild	 QWORD PTR tv225[ebp]
  000c3	d8 4d 20	 fmul	 DWORD PTR _flLoopStart$[ebp]
  000c6	e8 00 00 00 00	 call	 __ftol2
  000cb	8b 4d f8	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  000ce	0f b7 49 0c	 movzx	 ecx, WORD PTR [ecx+12]
  000d2	33 d2		 xor	 edx, edx
  000d4	f7 f1		 div	 ecx
  000d6	8b 55 f8	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  000d9	0f b7 4a 0c	 movzx	 ecx, WORD PTR [edx+12]
  000dd	0f af c1	 imul	 eax, ecx
  000e0	2b 45 e4	 sub	 eax, DWORD PTR _dwPlayStart$[ebp]
  000e3	89 45 e8	 mov	 DWORD PTR _dwLoopStart$[ebp], eax

; 942  :         dwLoopLength = ((DWORD)((FLOAT)dwDuration * flLoopEnd) / pwfxFormat->nBlockAlign * pwfxFormat->nBlockAlign) - dwLoopStart - dwPlayStart;

  000e6	8b 55 ec	 mov	 edx, DWORD PTR _dwDuration$[ebp]
  000e9	89 55 c0	 mov	 DWORD PTR tv236[ebp], edx
  000ec	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv236[ebp+4], 0
  000f3	df 6d c0	 fild	 QWORD PTR tv236[ebp]
  000f6	d8 4d 24	 fmul	 DWORD PTR _flLoopEnd$[ebp]
  000f9	e8 00 00 00 00	 call	 __ftol2
  000fe	8b 4d f8	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00101	0f b7 49 0c	 movzx	 ecx, WORD PTR [ecx+12]
  00105	33 d2		 xor	 edx, edx
  00107	f7 f1		 div	 ecx
  00109	8b 55 f8	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  0010c	0f b7 4a 0c	 movzx	 ecx, WORD PTR [edx+12]
  00110	0f af c1	 imul	 eax, ecx
  00113	2b 45 e8	 sub	 eax, DWORD PTR _dwLoopStart$[ebp]
  00116	2b 45 e4	 sub	 eax, DWORD PTR _dwPlayStart$[ebp]
  00119	89 45 e0	 mov	 DWORD PTR _dwLoopLength$[ebp], eax

; 943  : 
; 944  :         DPF_TEST("Setting buffer play region to %lu, %lu and loop region to %lu, %lu (duration %lu)", dwPlayStart, dwPlayLength, dwLoopStart, dwLoopLength, dwDuration);

  0011c	8b 55 ec	 mov	 edx, DWORD PTR _dwDuration$[ebp]
  0011f	52		 push	 edx
  00120	8b 45 e0	 mov	 eax, DWORD PTR _dwLoopLength$[ebp]
  00123	50		 push	 eax
  00124	8b 4d e8	 mov	 ecx, DWORD PTR _dwLoopStart$[ebp]
  00127	51		 push	 ecx
  00128	8b 55 f4	 mov	 edx, DWORD PTR _dwPlayLength$[ebp]
  0012b	52		 push	 edx
  0012c	8b 45 e4	 mov	 eax, DWORD PTR _dwPlayStart$[ebp]
  0012f	50		 push	 eax
  00130	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FC@MJAKMLCB@Setting?5buffer?5play?5region?5to?5?$CFl@
  00135	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  0013a	83 c4 18	 add	 esp, 24			; 00000018H

; 945  :         
; 946  :         hr = ValidateResult(pBuffer->SetPlayRegion(dwPlayStart, dwPlayLength));

  0013d	8b 4d f4	 mov	 ecx, DWORD PTR _dwPlayLength$[ebp]
  00140	51		 push	 ecx
  00141	8b 55 e4	 mov	 edx, DWORD PTR _dwPlayStart$[ebp]
  00144	52		 push	 edx
  00145	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 ?SetPlayRegion@IDirectSoundBuffer@@QAGJKK@Z ; IDirectSoundBuffer::SetPlayRegion
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00154	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 947  : 
; 948  :         if(SUCCEEDED(hr))

  00157	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0015b	7c 1a		 jl	 SHORT $L36582

; 949  :         {
; 950  :             hr = ValidateResult(pBuffer->SetLoopRegion(dwLoopStart, dwLoopLength));

  0015d	8b 4d e0	 mov	 ecx, DWORD PTR _dwLoopLength$[ebp]
  00160	51		 push	 ecx
  00161	8b 55 e8	 mov	 edx, DWORD PTR _dwLoopStart$[ebp]
  00164	52		 push	 edx
  00165	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 ?SetLoopRegion@IDirectSoundBuffer@@QAGJKK@Z ; IDirectSoundBuffer::SetLoopRegion
  0016e	50		 push	 eax
  0016f	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00174	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L36582:

; 951  :         }
; 952  :     }
; 953  : 
; 954  :     if(SUCCEEDED(hr))

  00177	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0017b	7c 1a		 jl	 SHORT $L36595

; 955  :     {
; 956  :         hr = PlayBuffer(pBuffer, fLoop ? DSBPLAY_LOOPING : 0);

  0017d	6a 00		 push	 0
  0017f	6a 00		 push	 0
  00181	33 c9		 xor	 ecx, ecx
  00183	83 7d 28 00	 cmp	 DWORD PTR _fLoop$[ebp], 0
  00187	0f 95 c1	 setne	 cl
  0018a	51		 push	 ecx
  0018b	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  0018e	52		 push	 edx
  0018f	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  00194	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L36595:

; 957  :     }
; 958  : 
; 959  :     if(SUCCEEDED(hr))

  00197	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0019b	7c 1c		 jl	 SHORT $L36597

; 960  :     {
; 961  :         Sleep(30000);

  0019d	68 30 75 00 00	 push	 30000			; 00007530H
  001a2	e8 00 00 00 00	 call	 _Sleep@4

; 962  : 
; 963  :         hr = PlayBuffer(pBuffer);

  001a7	6a 00		 push	 0
  001a9	6a 00		 push	 0
  001ab	6a 00		 push	 0
  001ad	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  001b6	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L36597:

; 964  :     }
; 965  : 
; 966  :     if(SUCCEEDED(hr))

  001b9	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001bd	7c 0e		 jl	 SHORT $L36599

; 967  :     {
; 968  :         hr = WaitBuffer(pBuffer, FALSE);

  001bf	6a 00		 push	 0
  001c1	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  001c4	51		 push	 ecx
  001c5	e8 00 00 00 00	 call	 ?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z ; WaitBuffer
  001ca	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L36599:

; 969  :     }
; 970  : 
; 971  :     RELEASE(pBuffer);

  001cd	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  001d1	74 10		 je	 SHORT $L36600
  001d3	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  001d6	52		 push	 edx
  001d7	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  001dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L36600:

; 972  : 
; 973  :     return hr;

  001e3	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]

; 974  : }

  001e6	8b e5		 mov	 esp, ebp
  001e8	5d		 pop	 ebp
  001e9	c2 24 00	 ret	 36			; 00000024H
?TestBufferOffsets@@YGJKKKKMMMMH@Z ENDP			; TestBufferOffsets
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetPlayRegion@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetPlayRegion@IDirectSoundBuffer@@QAGJKK@Z
DSOUND	SEGMENT
_this$ = 8
_dwPlayStart$ = 12
_dwPlayLength$ = 16
?SetPlayRegion@IDirectSoundBuffer@@QAGJKK@Z PROC NEAR	; IDirectSoundBuffer::SetPlayRegion, COMDAT

; 2082 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2083 :         return IDirectSoundBuffer_SetPlayRegion(this, dwPlayStart, dwPlayLength);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwPlayLength$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _dwPlayStart$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetPlayRegion@12

; 2084 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetPlayRegion@IDirectSoundBuffer@@QAGJKK@Z ENDP	; IDirectSoundBuffer::SetPlayRegion
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetLoopRegion@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetLoopRegion@IDirectSoundBuffer@@QAGJKK@Z
DSOUND	SEGMENT
_this$ = 8
_dwLoopStart$ = 12
_dwLoopLength$ = 16
?SetLoopRegion@IDirectSoundBuffer@@QAGJKK@Z PROC NEAR	; IDirectSoundBuffer::SetLoopRegion, COMDAT

; 2087 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2088 :         return IDirectSoundBuffer_SetLoopRegion(this, dwLoopStart, dwLoopLength);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwLoopLength$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _dwLoopStart$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetLoopRegion@12

; 2089 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetLoopRegion@IDirectSoundBuffer@@QAGJKK@Z ENDP	; IDirectSoundBuffer::SetLoopRegion
DSOUND	ENDS
PUBLIC	?TestSubMix@@YGJHK@Z				; TestSubMix
EXTRN	_DirectSoundCreateBuffer@8:NEAR
EXTRN	_memset:NEAR
;	COMDAT ?adwChannelCounts@?1??TestSubMix@@YGJHK@Z@4QBKB
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
DSOUND_RD	SEGMENT
?adwChannelCounts@?1??TestSubMix@@YGJHK@Z@4QBKB DD 01H	; `TestSubMix'::`2'::adwChannelCounts
DSOUND_RD	ENDS
;	COMDAT ?adwBitResolutions@?1??TestSubMix@@YGJHK@Z@4QBKB
DSOUND_RD	SEGMENT
?adwBitResolutions@?1??TestSubMix@@YGJHK@Z@4QBKB DD 010H ; `TestSubMix'::`2'::adwBitResolutions
DSOUND_RD	ENDS
;	COMDAT ?adwSampleRates@?1??TestSubMix@@YGJHK@Z@4QBKB
DSOUND_RD	SEGMENT
?adwSampleRates@?1??TestSubMix@@YGJHK@Z@4QBKB DD 0ac44H	; `TestSubMix'::`2'::adwSampleRates
	DD	0bb80H
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestSubMix@@YGJHK@Z
DSOUND	SEGMENT
_hr$ = -96
_MixBins$ = -92
_dwFreeSGEs$ = -84
_dsbd$ = -76
_dwBufferSize$ = -52
_dwStatus$ = -48
_apOutputBuffers$ = -44
_dwActiveBuffers$ = -36
_dwSampleRateIndex$ = -32
_dwChannelCountIndex$ = -28
_pwfx$ = -24
_apBuffers$ = -20
_dwBitResolutionIndex$ = -12
_dwMaxBufferSize$ = -8
_i$ = -4
_fMixIn$ = 8
_dwFormatTag$ = 12
?TestSubMix@@YGJHK@Z PROC NEAR				; TestSubMix, COMDAT

; 1001 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H

; 1002 :     static const DWORD      adwSampleRates[]            = { /*22050, 32000, */44100, 48000};
; 1003 :     static const DWORD      adwChannelCounts[]          = { 1 };
; 1004 :     static const DWORD      adwBitResolutions[]         = { 16 };
; 1005 :     static const DWORD      dwBufferCount               = NUMELMS(adwSampleRates) * NUMELMS(adwChannelCounts) * NUMELMS(adwBitResolutions);
; 1006 :     LPDIRECTSOUNDBUFFER     apBuffers[dwBufferCount]    = { NULL };

  00006	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _apBuffers$[ebp], 0
  0000d	33 c0		 xor	 eax, eax
  0000f	89 45 f0	 mov	 DWORD PTR _apBuffers$[ebp+4], eax

; 1007 :     LPDIRECTSOUNDBUFFER     apOutputBuffers[2]          = { NULL };

  00012	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _apOutputBuffers$[ebp], 0
  00019	33 c9		 xor	 ecx, ecx
  0001b	89 4d d8	 mov	 DWORD PTR _apOutputBuffers$[ebp+4], ecx

; 1008 :     DWORD                   dwActiveBuffers             = 0;

  0001e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _dwActiveBuffers$[ebp], 0

; 1009 :     DWORD                   dwSampleRateIndex           = 0;

  00025	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _dwSampleRateIndex$[ebp], 0

; 1010 :     DWORD                   dwChannelCountIndex         = 0;

  0002c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dwChannelCountIndex$[ebp], 0

; 1011 :     DWORD                   dwBitResolutionIndex        = 0;

  00033	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwBitResolutionIndex$[ebp], 0

; 1012 :     HRESULT                 hr                          = DS_OK;

  0003a	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1013 :     DSBUFFERDESC            dsbd;
; 1014 :     DWORD                   dwFreeSGEs;
; 1015 :     DWORD                   dwMaxBufferSize;
; 1016 :     DWORD                   dwBufferSize;
; 1017 :     DWORD                   dwStatus;
; 1018 :     LPCWAVEFORMATEX         pwfx;
; 1019 :     DSMIXBINS               MixBins;
; 1020 :     DWORD                   i, z;
; 1021 : 
; 1022 :     //
; 1023 :     // Create output buffers
; 1024 :     //
; 1025 : 
; 1026 :     ZeroMemory(&dsbd, sizeof(dsbd));

  00041	6a 18		 push	 24			; 00000018H
  00043	6a 00		 push	 0
  00045	8d 55 b4	 lea	 edx, DWORD PTR _dsbd$[ebp]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 _memset
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1027 : 
; 1028 :     dsbd.dwSize = sizeof(dsbd);

  00051	c7 45 b4 18 00
	00 00		 mov	 DWORD PTR _dsbd$[ebp], 24 ; 00000018H

; 1029 :     dsbd.dwFlags = fMixIn ? DSBCAPS_MIXIN : DSBCAPS_FXIN;

  00058	8b 45 08	 mov	 eax, DWORD PTR _fMixIn$[ebp]
  0005b	f7 d8		 neg	 eax
  0005d	1b c0		 sbb	 eax, eax
  0005f	25 00 20 f8 ff	 and	 eax, -516096		; fff82000H
  00064	05 00 00 08 00	 add	 eax, 524288		; 00080000H
  00069	89 45 b8	 mov	 DWORD PTR _dsbd$[ebp+4], eax

; 1030 : 
; 1031 :     for(i = 0; (i < NUMELMS(apOutputBuffers)) && SUCCEEDED(hr); i++)

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00073	eb 09		 jmp	 SHORT $L36631
$L36632:
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00078	83 c1 01	 add	 ecx, 1
  0007b	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L36631:
  0007e	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  00082	73 31		 jae	 SHORT $L36633
  00084	83 7d a0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00088	7c 2b		 jl	 SHORT $L36633

; 1032 :     {
; 1033 :         if(!fMixIn)

  0008a	83 7d 08 00	 cmp	 DWORD PTR _fMixIn$[ebp], 0
  0008e	75 09		 jne	 SHORT $L36634

; 1034 :         {
; 1035 :             dsbd.dwInputMixBin = DSMIXBIN_FXSEND_10 + i;

  00090	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00093	83 c2 15	 add	 edx, 21			; 00000015H
  00096	89 55 c8	 mov	 DWORD PTR _dsbd$[ebp+20], edx
$L36634:

; 1036 :         }
; 1037 :         
; 1038 :         hr = ValidateResult(DirectSoundCreateBuffer(&dsbd, &apOutputBuffers[i]));

  00099	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0009c	8d 4c 85 d4	 lea	 ecx, DWORD PTR _apOutputBuffers$[ebp+eax*4]
  000a0	51		 push	 ecx
  000a1	8d 55 b4	 lea	 edx, DWORD PTR _dsbd$[ebp]
  000a4	52		 push	 edx
  000a5	e8 00 00 00 00	 call	 _DirectSoundCreateBuffer@8
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000b0	89 45 a0	 mov	 DWORD PTR _hr$[ebp], eax

; 1039 :     }

  000b3	eb c0		 jmp	 SHORT $L36632
$L36633:

; 1040 : 
; 1041 :     //
; 1042 :     // Get the count of free SGEs
; 1043 :     //
; 1044 : 
; 1045 :     if(SUCCEEDED(hr))

  000b5	83 7d a0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b9	7c 0c		 jl	 SHORT $L36636

; 1046 :     {
; 1047 :         hr = GetFreeSGEs(&dwFreeSGEs);

  000bb	8d 45 ac	 lea	 eax, DWORD PTR _dwFreeSGEs$[ebp]
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ?GetFreeSGEs@@YGJPAK@Z	; GetFreeSGEs
  000c4	89 45 a0	 mov	 DWORD PTR _hr$[ebp], eax
$L36636:

; 1048 :     }
; 1049 : 
; 1050 :     //
; 1051 :     // Calculate the maximum buffer size
; 1052 :     //
; 1053 : 
; 1054 :     if(SUCCEEDED(hr))

  000c7	83 7d a0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000cb	7c 14		 jl	 SHORT $L36640

; 1055 :     {
; 1056 :         dwMaxBufferSize = ((dwFreeSGEs - dwBufferCount) * PAGE_SIZE) / dwBufferCount / 4 * 4;

  000cd	8b 4d ac	 mov	 ecx, DWORD PTR _dwFreeSGEs$[ebp]
  000d0	83 e9 02	 sub	 ecx, 2
  000d3	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  000d6	d1 e9		 shr	 ecx, 1
  000d8	c1 e9 02	 shr	 ecx, 2
  000db	c1 e1 02	 shl	 ecx, 2
  000de	89 4d f8	 mov	 DWORD PTR _dwMaxBufferSize$[ebp], ecx
$L36640:

; 1057 :     }
; 1058 : 
; 1059 :     //
; 1060 :     // Enter the creation loop
; 1061 :     //
; 1062 :     
; 1063 :     while(SUCCEEDED(hr) && (dwActiveBuffers < dwBufferCount))

  000e1	83 7d a0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000e5	0f 8c d9 00 00
	00		 jl	 $L36648
  000eb	83 7d dc 02	 cmp	 DWORD PTR _dwActiveBuffers$[ebp], 2
  000ef	0f 83 cf 00 00
	00		 jae	 $L36648

; 1064 :     {
; 1065 :         //
; 1066 :         // Create the buffer
; 1067 :         //
; 1068 :         
; 1069 :         pwfx = CreateFormat(dwFormatTag, adwSampleRates[dwSampleRateIndex], adwBitResolutions[dwBitResolutionIndex], adwChannelCounts[dwChannelCountIndex]);

  000f5	8b 55 e4	 mov	 edx, DWORD PTR _dwChannelCountIndex$[ebp]
  000f8	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?adwChannelCounts@?1??TestSubMix@@YGJHK@Z@4QBKB[edx*4]
  000ff	50		 push	 eax
  00100	8b 4d f4	 mov	 ecx, DWORD PTR _dwBitResolutionIndex$[ebp]
  00103	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?adwBitResolutions@?1??TestSubMix@@YGJHK@Z@4QBKB[ecx*4]
  0010a	52		 push	 edx
  0010b	8b 45 e0	 mov	 eax, DWORD PTR _dwSampleRateIndex$[ebp]
  0010e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?adwSampleRates@?1??TestSubMix@@YGJHK@Z@4QBKB[eax*4]
  00115	51		 push	 ecx
  00116	8b 55 0c	 mov	 edx, DWORD PTR _dwFormatTag$[ebp]
  00119	52		 push	 edx
  0011a	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  0011f	89 45 e8	 mov	 DWORD PTR _pwfx$[ebp], eax

; 1070 :         dwBufferSize = dwMaxBufferSize;

  00122	8b 45 f8	 mov	 eax, DWORD PTR _dwMaxBufferSize$[ebp]
  00125	89 45 cc	 mov	 DWORD PTR _dwBufferSize$[ebp], eax

; 1071 : 
; 1072 :         MixBins.dwMixBinCount = 0;

  00128	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _MixBins$[ebp], 0

; 1073 :         
; 1074 :         hr = CreateStdBuffer(0, pwfx, &MixBins, apOutputBuffers[dwActiveBuffers % NUMELMS(apOutputBuffers)], &apBuffers[dwActiveBuffers], &dwBufferSize);

  0012f	8d 4d cc	 lea	 ecx, DWORD PTR _dwBufferSize$[ebp]
  00132	51		 push	 ecx
  00133	8b 55 dc	 mov	 edx, DWORD PTR _dwActiveBuffers$[ebp]
  00136	8d 44 95 ec	 lea	 eax, DWORD PTR _apBuffers$[ebp+edx*4]
  0013a	50		 push	 eax
  0013b	8b 45 dc	 mov	 eax, DWORD PTR _dwActiveBuffers$[ebp]
  0013e	33 d2		 xor	 edx, edx
  00140	b9 02 00 00 00	 mov	 ecx, 2
  00145	f7 f1		 div	 ecx
  00147	8b 54 95 d4	 mov	 edx, DWORD PTR _apOutputBuffers$[ebp+edx*4]
  0014b	52		 push	 edx
  0014c	8d 45 a4	 lea	 eax, DWORD PTR _MixBins$[ebp]
  0014f	50		 push	 eax
  00150	8b 4d e8	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  00153	51		 push	 ecx
  00154	6a 00		 push	 0
  00156	e8 00 00 00 00	 call	 ?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z ; CreateStdBuffer
  0015b	89 45 a0	 mov	 DWORD PTR _hr$[ebp], eax

; 1075 : 
; 1076 :         if(SUCCEEDED(hr))

  0015e	83 7d a0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00162	7c 16		 jl	 SHORT $L36644

; 1077 :         {
; 1078 :             hr = PlayBuffer(apBuffers[dwActiveBuffers]);

  00164	6a 00		 push	 0
  00166	6a 00		 push	 0
  00168	6a 00		 push	 0
  0016a	8b 55 dc	 mov	 edx, DWORD PTR _dwActiveBuffers$[ebp]
  0016d	8b 44 95 ec	 mov	 eax, DWORD PTR _apBuffers$[ebp+edx*4]
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  00177	89 45 a0	 mov	 DWORD PTR _hr$[ebp], eax
$L36644:

; 1079 :         }
; 1080 : 
; 1081 :         if(SUCCEEDED(hr))

  0017a	83 7d a0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0017e	7c 3f		 jl	 SHORT $L36646

; 1082 :         {
; 1083 :             dwSampleRateIndex = (dwSampleRateIndex + 1) % NUMELMS(adwSampleRates);

  00180	8b 45 e0	 mov	 eax, DWORD PTR _dwSampleRateIndex$[ebp]
  00183	83 c0 01	 add	 eax, 1
  00186	33 d2		 xor	 edx, edx
  00188	b9 02 00 00 00	 mov	 ecx, 2
  0018d	f7 f1		 div	 ecx
  0018f	89 55 e0	 mov	 DWORD PTR _dwSampleRateIndex$[ebp], edx

; 1084 :             dwChannelCountIndex = (dwChannelCountIndex + 1) % NUMELMS(adwChannelCounts);

  00192	8b 45 e4	 mov	 eax, DWORD PTR _dwChannelCountIndex$[ebp]
  00195	83 c0 01	 add	 eax, 1
  00198	33 d2		 xor	 edx, edx
  0019a	b9 01 00 00 00	 mov	 ecx, 1
  0019f	f7 f1		 div	 ecx
  001a1	89 55 e4	 mov	 DWORD PTR _dwChannelCountIndex$[ebp], edx

; 1085 :             dwBitResolutionIndex = (dwBitResolutionIndex + 1) % NUMELMS(adwBitResolutions);

  001a4	8b 45 f4	 mov	 eax, DWORD PTR _dwBitResolutionIndex$[ebp]
  001a7	83 c0 01	 add	 eax, 1
  001aa	33 d2		 xor	 edx, edx
  001ac	b9 01 00 00 00	 mov	 ecx, 1
  001b1	f7 f1		 div	 ecx
  001b3	89 55 f4	 mov	 DWORD PTR _dwBitResolutionIndex$[ebp], edx

; 1086 : 
; 1087 :             dwActiveBuffers++;

  001b6	8b 55 dc	 mov	 edx, DWORD PTR _dwActiveBuffers$[ebp]
  001b9	83 c2 01	 add	 edx, 1
  001bc	89 55 dc	 mov	 DWORD PTR _dwActiveBuffers$[ebp], edx
$L36646:

; 1088 :         }
; 1089 :     }

  001bf	e9 1d ff ff ff	 jmp	 $L36640
$L36648:

; 1090 : 
; 1091 :     //
; 1092 :     // Wait for all buffers to finish playing
; 1093 :     //
; 1094 : 
; 1095 :     while(SUCCEEDED(hr) && dwActiveBuffers)

  001c4	83 7d a0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001c8	0f 8c 8e 00 00
	00		 jl	 $L36649
  001ce	83 7d dc 00	 cmp	 DWORD PTR _dwActiveBuffers$[ebp], 0
  001d2	0f 84 84 00 00
	00		 je	 $L36649

; 1096 :     {
; 1097 :         for(i = 0; (i < dwBufferCount) && SUCCEEDED(hr); i++)

  001d8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001df	eb 09		 jmp	 SHORT $L36652
$L36653:
  001e1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001e4	83 c0 01	 add	 eax, 1
  001e7	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L36652:
  001ea	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  001ee	73 67		 jae	 SHORT $L36654
  001f0	83 7d a0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001f4	7c 61		 jl	 SHORT $L36654

; 1098 :         {
; 1099 :             if(apBuffers[i])

  001f6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001f9	83 7c 8d ec 00	 cmp	 DWORD PTR _apBuffers$[ebp+ecx*4], 0
  001fe	74 55		 je	 SHORT $L36655

; 1100 :             {
; 1101 :                 hr = ValidateResult(apBuffers[i]->GetStatus(&dwStatus));

  00200	8d 55 d0	 lea	 edx, DWORD PTR _dwStatus$[ebp]
  00203	52		 push	 edx
  00204	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00207	8b 4c 85 ec	 mov	 ecx, DWORD PTR _apBuffers$[ebp+eax*4]
  0020b	51		 push	 ecx
  0020c	e8 00 00 00 00	 call	 ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z ; IDirectSoundBuffer::GetStatus
  00211	50		 push	 eax
  00212	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00217	89 45 a0	 mov	 DWORD PTR _hr$[ebp], eax

; 1102 : 
; 1103 :                 if(SUCCEEDED(hr) && !(dwStatus & DSBSTATUS_PLAYING))

  0021a	83 7d a0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0021e	7c 35		 jl	 SHORT $L36655
  00220	8b 55 d0	 mov	 edx, DWORD PTR _dwStatus$[ebp]
  00223	83 e2 01	 and	 edx, 1
  00226	85 d2		 test	 edx, edx
  00228	75 2b		 jne	 SHORT $L36655

; 1104 :                 {
; 1105 :                     RELEASE(apBuffers[i]);

  0022a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0022d	83 7c 85 ec 00	 cmp	 DWORD PTR _apBuffers$[ebp+eax*4], 0
  00232	74 18		 je	 SHORT $L36658
  00234	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00237	8b 54 8d ec	 mov	 edx, DWORD PTR _apBuffers$[ebp+ecx*4]
  0023b	52		 push	 edx
  0023c	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  00241	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00244	c7 44 85 ec 00
	00 00 00	 mov	 DWORD PTR _apBuffers$[ebp+eax*4], 0
$L36658:

; 1106 : 
; 1107 :                     dwActiveBuffers--;

  0024c	8b 4d dc	 mov	 ecx, DWORD PTR _dwActiveBuffers$[ebp]
  0024f	83 e9 01	 sub	 ecx, 1
  00252	89 4d dc	 mov	 DWORD PTR _dwActiveBuffers$[ebp], ecx
$L36655:

; 1108 :                 }
; 1109 :             }
; 1110 :         }

  00255	eb 8a		 jmp	 SHORT $L36653
$L36654:

; 1111 :     }

  00257	e9 68 ff ff ff	 jmp	 $L36648
$L36649:

; 1112 : 
; 1113 :     //
; 1114 :     // Release output buffers
; 1115 :     //
; 1116 : 
; 1117 :     for(i = 0; i < NUMELMS(apOutputBuffers); i++)

  0025c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00263	eb 09		 jmp	 SHORT $L36659
$L36660:
  00265	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00268	83 c2 01	 add	 edx, 1
  0026b	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L36659:
  0026e	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  00272	73 24		 jae	 SHORT $L36661

; 1118 :     {
; 1119 :         RELEASE(apOutputBuffers[i]);

  00274	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00277	83 7c 85 d4 00	 cmp	 DWORD PTR _apOutputBuffers$[ebp+eax*4], 0
  0027c	74 18		 je	 SHORT $L36662
  0027e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00281	8b 54 8d d4	 mov	 edx, DWORD PTR _apOutputBuffers$[ebp+ecx*4]
  00285	52		 push	 edx
  00286	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  0028b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0028e	c7 44 85 d4 00
	00 00 00	 mov	 DWORD PTR _apOutputBuffers$[ebp+eax*4], 0
$L36662:

; 1120 :     }

  00296	eb cd		 jmp	 SHORT $L36660
$L36661:

; 1121 : 
; 1122 :     return hr;

  00298	8b 45 a0	 mov	 eax, DWORD PTR _hr$[ebp]

; 1123 : }

  0029b	8b e5		 mov	 esp, ebp
  0029d	5d		 pop	 ebp
  0029e	c2 08 00	 ret	 8
?TestSubMix@@YGJHK@Z ENDP				; TestSubMix
DSOUND	ENDS
PUBLIC	?TestDLS@@YGJKKKK@Z				; TestDLS
PUBLIC	?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z ; IDirectSoundBuffer::SetEG
EXTRN	?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z:NEAR ; StopBuffer
; Function compile flags: /Odt
;	COMDAT ?TestDLS@@YGJKKKK@Z
DSOUND	SEGMENT
_hr$ = -48
_env$ = -44
_pBuffer$ = -4
_dwFormatTag$ = 8
_dwSamplesPerSec$ = 12
_dwBitsPerSample$ = 16
_dwChannelCount$ = 20
?TestDLS@@YGJKKKK@Z PROC NEAR				; TestDLS, COMDAT

; 1155 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 1156 :     static const DWORD      dwSegmentLength = 200;
; 1157 :     LPDIRECTSOUNDBUFFER     pBuffer         = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 1158 :     DSENVELOPEDESC          env;
; 1159 :     HRESULT                 hr;
; 1160 : 
; 1161 :     hr = CreateStdBuffer(0, CreateFormat(dwFormatTag, dwSamplesPerSec, dwBitsPerSample, dwChannelCount), 0, NULL, &pBuffer);

  0000d	6a 00		 push	 0
  0000f	8d 45 fc	 lea	 eax, DWORD PTR _pBuffer$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	8b 4d 14	 mov	 ecx, DWORD PTR _dwChannelCount$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 10	 mov	 edx, DWORD PTR _dwBitsPerSample$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _dwSamplesPerSec$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _dwFormatTag$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	e8 00 00 00 00	 call	 ?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z ; CreateStdBuffer
  00034	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax

; 1162 : 
; 1163 :     if(SUCCEEDED(hr))

  00037	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003b	7c 5c		 jl	 SHORT $L36675

; 1164 :     {
; 1165 :         env.dwEG = DSEG_AMPLITUDE;

  0003d	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _env$[ebp], 1

; 1166 :         env.dwMode = DSEG_MODE_DELAY;

  00044	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _env$[ebp+4], 1

; 1167 :         env.dwDelay = dwSegmentLength;

  0004b	c7 45 dc c8 00
	00 00		 mov	 DWORD PTR _env$[ebp+8], 200 ; 000000c8H

; 1168 :         env.dwAttack = dwSegmentLength;

  00052	c7 45 e0 c8 00
	00 00		 mov	 DWORD PTR _env$[ebp+12], 200 ; 000000c8H

; 1169 :         env.dwHold = dwSegmentLength;

  00059	c7 45 e4 c8 00
	00 00		 mov	 DWORD PTR _env$[ebp+16], 200 ; 000000c8H

; 1170 :         env.dwDecay = dwSegmentLength;

  00060	c7 45 e8 c8 00
	00 00		 mov	 DWORD PTR _env$[ebp+20], 200 ; 000000c8H

; 1171 :         env.dwRelease = dwSegmentLength;

  00067	c7 45 ec c8 00
	00 00		 mov	 DWORD PTR _env$[ebp+24], 200 ; 000000c8H

; 1172 :         env.dwSustain = 0xFF;

  0006e	c7 45 f0 ff 00
	00 00		 mov	 DWORD PTR _env$[ebp+28], 255 ; 000000ffH

; 1173 :         env.lPitchScale = 0;

  00075	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _env$[ebp+32], 0

; 1174 :         env.lFilterCutOff = 0;

  0007c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _env$[ebp+36], 0

; 1175 : 
; 1176 :         hr = ValidateResult(pBuffer->SetEG(&env));

  00083	8d 55 d4	 lea	 edx, DWORD PTR _env$[ebp]
  00086	52		 push	 edx
  00087	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z ; IDirectSoundBuffer::SetEG
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00096	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L36675:

; 1177 :     }
; 1178 : 
; 1179 :     if(SUCCEEDED(hr))

  00099	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0009d	7c 12		 jl	 SHORT $L36677

; 1180 :     {
; 1181 :         hr = PlayBuffer(pBuffer, DSBPLAY_LOOPING);

  0009f	6a 00		 push	 0
  000a1	6a 00		 push	 0
  000a3	6a 01		 push	 1
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  000a8	51		 push	 ecx
  000a9	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  000ae	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L36677:

; 1182 :     }
; 1183 : 
; 1184 :     if(SUCCEEDED(hr))

  000b1	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b5	7c 17		 jl	 SHORT $L36679

; 1185 :     {
; 1186 :         hr = StopBuffer(pBuffer, DSBSTOPEX_ENVELOPE, 10000, FALSE, TRUE);

  000b7	6a 01		 push	 1
  000b9	6a 00		 push	 0
  000bb	68 10 27 00 00	 push	 10000			; 00002710H
  000c0	6a 01		 push	 1
  000c2	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z ; StopBuffer
  000cb	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L36679:

; 1187 :     }
; 1188 : 
; 1189 :     RELEASE(pBuffer);

  000ce	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  000d2	74 10		 je	 SHORT $L36680
  000d4	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  000dd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L36680:

; 1190 : 
; 1191 :     return hr;

  000e4	8b 45 d0	 mov	 eax, DWORD PTR _hr$[ebp]

; 1192 : }

  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c2 10 00	 ret	 16			; 00000010H
?TestDLS@@YGJKKKK@Z ENDP				; TestDLS
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetEG@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z
DSOUND	SEGMENT
_this$ = 8
_pEnvelopeDesc$ = 12
?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z PROC NEAR ; IDirectSoundBuffer::SetEG, COMDAT

; 1962 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1963 :         return IDirectSoundBuffer_SetEG(this, pEnvelopeDesc);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pEnvelopeDesc$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetEG@8

; 1964 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z ENDP ; IDirectSoundBuffer::SetEG
DSOUND	ENDS
PUBLIC	?SetEG@IDirectSoundStream@@QAGJPBU_DSENVELOPEDESC@@@Z ; IDirectSoundStream::SetEG
PUBLIC	?TestStreamStop@@YGJKKKKKK@Z			; TestStreamStop
EXTRN	?FlushStream@@YGJPAUIDirectSoundStream@@KKH@Z:NEAR ; FlushStream
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
;	COMDAT ?TestStreamStop@@YGJKKKKKK@Z
DSOUND	SEGMENT
_hr$ = -56
_pvAudioData$ = -52
_env$ = -48
_pwfxFormat$ = -8
_pStream$ = -4
_dwFlags$ = 8
_dwFormatTag$ = 12
_dwSamplesPerSec$ = 16
_dwBitsPerSample$ = 20
_dwChannelCount$ = 24
_dwPacketSize$ = 28
?TestStreamStop@@YGJKKKKKK@Z PROC NEAR			; TestStreamStop, COMDAT

; 1228 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H

; 1229 :     static const DWORD      dwSegmentLength     = 200;
; 1230 :     static const DWORD      dwDelay             = 5000;
; 1231 :     const LPCWAVEFORMATEX   pwfxFormat          = CreateFormat(dwFormatTag, dwSamplesPerSec, dwBitsPerSample, dwChannelCount);

  00006	8b 45 18	 mov	 eax, DWORD PTR _dwChannelCount$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 14	 mov	 ecx, DWORD PTR _dwBitsPerSample$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 10	 mov	 edx, DWORD PTR _dwSamplesPerSec$[ebp]
  00011	52		 push	 edx
  00012	8b 45 0c	 mov	 eax, DWORD PTR _dwFormatTag$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  0001b	89 45 f8	 mov	 DWORD PTR _pwfxFormat$[ebp], eax

; 1232 :     LPDIRECTSOUNDSTREAM     pStream             = NULL;

  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0

; 1233 :     LPVOID                  pvAudioData         = NULL;

  00025	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _pvAudioData$[ebp], 0

; 1234 :     DSENVELOPEDESC          env;
; 1235 :     HRESULT                 hr;
; 1236 : 
; 1237 :     hr = CreateStdQueuedStream(0, pwfxFormat, NULL, &dwPacketSize, NULL, NULL, &pStream, &pvAudioData);

  0002c	8d 4d cc	 lea	 ecx, DWORD PTR _pvAudioData$[ebp]
  0002f	51		 push	 ecx
  00030	8d 55 fc	 lea	 edx, DWORD PTR _pStream$[ebp]
  00033	52		 push	 edx
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	8d 45 1c	 lea	 eax, DWORD PTR _dwPacketSize$[ebp]
  0003b	50		 push	 eax
  0003c	6a 00		 push	 0
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00041	51		 push	 ecx
  00042	6a 00		 push	 0
  00044	e8 00 00 00 00	 call	 ?CreateStdQueuedStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z ; CreateStdQueuedStream
  00049	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax

; 1238 : 
; 1239 :     if(SUCCEEDED(hr))

  0004c	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00050	7c 42		 jl	 SHORT $L36699

; 1240 :     {
; 1241 :         ZeroMemory(&env, sizeof(env));

  00052	6a 28		 push	 40			; 00000028H
  00054	6a 00		 push	 0
  00056	8d 55 d0	 lea	 edx, DWORD PTR _env$[ebp]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 _memset
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1242 :         
; 1243 :         env.dwEG = DSEG_AMPLITUDE;

  00062	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _env$[ebp], 1

; 1244 :         env.dwMode = DSEG_MODE_HOLD;

  00069	c7 45 d4 03 00
	00 00		 mov	 DWORD PTR _env$[ebp+4], 3

; 1245 :         env.dwRelease = dwSegmentLength;

  00070	c7 45 e8 c8 00
	00 00		 mov	 DWORD PTR _env$[ebp+24], 200 ; 000000c8H

; 1246 :         env.dwSustain = 0xFF;

  00077	c7 45 ec ff 00
	00 00		 mov	 DWORD PTR _env$[ebp+28], 255 ; 000000ffH

; 1247 : 
; 1248 :         hr = ValidateResult(pStream->SetEG(&env));

  0007e	8d 45 d0	 lea	 eax, DWORD PTR _env$[ebp]
  00081	50		 push	 eax
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _pStream$[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ?SetEG@IDirectSoundStream@@QAGJPBU_DSENVELOPEDESC@@@Z ; IDirectSoundStream::SetEG
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00091	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax
$L36699:

; 1249 :     }
; 1250 : 
; 1251 :     if(SUCCEEDED(hr))

  00094	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00098	7c 0e		 jl	 SHORT $L36701

; 1252 :     {
; 1253 :         hr = PauseStream(pStream, FALSE);

  0009a	6a 00		 push	 0
  0009c	8b 55 fc	 mov	 edx, DWORD PTR _pStream$[ebp]
  0009f	52		 push	 edx
  000a0	e8 00 00 00 00	 call	 ?PauseStream@@YGJPAUIDirectSoundStream@@H@Z ; PauseStream
  000a5	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax
$L36701:

; 1254 :     }
; 1255 : 
; 1256 :     if(SUCCEEDED(hr))

  000a8	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ac	7c 22		 jl	 SHORT $L36703

; 1257 :     {
; 1258 :         hr = FlushStream(pStream, dwFlags, (dwFlags & DSSTREAMFLUSHEX_ASYNC) ? dwDelay : 0, TRUE);

  000ae	6a 01		 push	 1
  000b0	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000b3	83 e0 01	 and	 eax, 1
  000b6	f7 d8		 neg	 eax
  000b8	1b c0		 sbb	 eax, eax
  000ba	25 88 13 00 00	 and	 eax, 5000		; 00001388H
  000bf	50		 push	 eax
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000c3	51		 push	 ecx
  000c4	8b 55 fc	 mov	 edx, DWORD PTR _pStream$[ebp]
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 ?FlushStream@@YGJPAUIDirectSoundStream@@KKH@Z ; FlushStream
  000cd	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax
$L36703:

; 1259 :     }
; 1260 : 
; 1261 :     RELEASE(pStream);

  000d0	83 7d fc 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  000d4	74 13		 je	 SHORT $L36704
  000d6	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  000d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000db	8b 55 fc	 mov	 edx, DWORD PTR _pStream$[ebp]
  000de	52		 push	 edx
  000df	ff 51 04	 call	 DWORD PTR [ecx+4]
  000e2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0
$L36704:

; 1262 : 
; 1263 :     FREE(pvAudioData);

  000e9	8d 45 cc	 lea	 eax, DWORD PTR _pvAudioData$[ebp]
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 1264 : 
; 1265 :     return hr;

  000f2	8b 45 c8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1266 : }

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 18 00	 ret	 24			; 00000018H
?TestStreamStop@@YGJKKKKKK@Z ENDP			; TestStreamStop
DSOUND	ENDS
EXTRN	_IDirectSoundStream_SetEG@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetEG@IDirectSoundStream@@QAGJPBU_DSENVELOPEDESC@@@Z
DSOUND	SEGMENT
_this$ = 8
_pEnvelopeDesc$ = 12
?SetEG@IDirectSoundStream@@QAGJPBU_DSENVELOPEDESC@@@Z PROC NEAR ; IDirectSoundStream::SetEG, COMDAT

; 2267 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2268 :         return IDirectSoundStream_SetEG(this, pEnvelopeDesc);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pEnvelopeDesc$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_SetEG@8

; 2269 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetEG@IDirectSoundStream@@QAGJPBU_DSENVELOPEDESC@@@Z ENDP ; IDirectSoundStream::SetEG
DSOUND	ENDS
PUBLIC	?TestSgeSharing@@YGJXZ				; TestSgeSharing
PUBLIC	?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z	; IDirectSoundBuffer::SetBufferData
EXTRN	?ClampBufferSize@@YGJPAK@Z:NEAR			; ClampBufferSize
EXTRN	?GenerateTone16@@YGXPAXKKKK@Z:NEAR		; GenerateTone16
EXTRN	_XAudioCreatePcmFormat@16:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
;	COMDAT ?TestSgeSharing@@YGJXZ
DSOUND	SEGMENT
_pvBufferData$ = -68
_hr$ = -64
_dwBufferSize$ = -60
_dsbd$ = -56
_apBuffers$ = -32
_i$ = -24
_wfx$ = -20
?TestSgeSharing@@YGJXZ PROC NEAR			; TestSgeSharing, COMDAT

; 1383 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H

; 1384 :     LPVOID                      pvBufferData    = NULL;

  00006	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _pvBufferData$[ebp], 0

; 1385 :     LPDIRECTSOUNDBUFFER         apBuffers[2]    = { NULL };

  0000d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _apBuffers$[ebp], 0
  00014	33 c0		 xor	 eax, eax
  00016	89 45 e4	 mov	 DWORD PTR _apBuffers$[ebp+4], eax

; 1386 :     DWORD                       dwBufferSize;
; 1387 :     DSBUFFERDESC                dsbd;
; 1388 :     WAVEFORMATEX                wfx;
; 1389 :     HRESULT                     hr;
; 1390 :     DWORD                       i;
; 1391 : 
; 1392 :     XAudioCreatePcmFormat(2, 48000, 16, &wfx);

  00019	8d 4d ec	 lea	 ecx, DWORD PTR _wfx$[ebp]
  0001c	51		 push	 ecx
  0001d	6a 10		 push	 16			; 00000010H
  0001f	68 80 bb 00 00	 push	 48000			; 0000bb80H
  00024	6a 02		 push	 2
  00026	e8 00 00 00 00	 call	 _XAudioCreatePcmFormat@16

; 1393 : 
; 1394 :     ZeroMemory(&dsbd, sizeof(dsbd));

  0002b	6a 18		 push	 24			; 00000018H
  0002d	6a 00		 push	 0
  0002f	8d 55 c8	 lea	 edx, DWORD PTR _dsbd$[ebp]
  00032	52		 push	 edx
  00033	e8 00 00 00 00	 call	 _memset
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1395 : 
; 1396 :     dsbd.dwSize = sizeof(dsbd);

  0003b	c7 45 c8 18 00
	00 00		 mov	 DWORD PTR _dsbd$[ebp], 24 ; 00000018H

; 1397 :     dsbd.lpwfxFormat = &wfx;

  00042	8d 45 ec	 lea	 eax, DWORD PTR _wfx$[ebp]
  00045	89 45 d4	 mov	 DWORD PTR _dsbd$[ebp+12], eax

; 1398 : 
; 1399 :     dwBufferSize = -1;

  00048	c7 45 c4 ff ff
	ff ff		 mov	 DWORD PTR _dwBufferSize$[ebp], -1

; 1400 :     
; 1401 :     hr = ClampBufferSize(&dwBufferSize);

  0004f	8d 4d c4	 lea	 ecx, DWORD PTR _dwBufferSize$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ?ClampBufferSize@@YGJPAK@Z ; ClampBufferSize
  00058	89 45 c0	 mov	 DWORD PTR _hr$[ebp], eax

; 1402 : 
; 1403 :     if(SUCCEEDED(hr))

  0005b	83 7d c0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005f	7c 18		 jl	 SHORT $L36717

; 1404 :     {
; 1405 :         hr = MALLOC(pvBufferData, BYTE, dwBufferSize);

  00061	8b 55 c4	 mov	 edx, DWORD PTR _dwBufferSize$[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  0006a	89 45 bc	 mov	 DWORD PTR _pvBufferData$[ebp], eax
  0006d	8b 45 bc	 mov	 eax, DWORD PTR _pvBufferData$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  00076	89 45 c0	 mov	 DWORD PTR _hr$[ebp], eax
$L36717:

; 1406 :     }
; 1407 : 
; 1408 :     if(SUCCEEDED(hr))

  00079	83 7d c0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0007d	7c 1b		 jl	 SHORT $L36721

; 1409 :     {
; 1410 :         GenerateTone16(pvBufferData, dwBufferSize, wfx.nSamplesPerSec, wfx.nChannels, 500);

  0007f	68 f4 01 00 00	 push	 500			; 000001f4H
  00084	0f b7 4d ee	 movzx	 ecx, WORD PTR _wfx$[ebp+2]
  00088	51		 push	 ecx
  00089	8b 55 f0	 mov	 edx, DWORD PTR _wfx$[ebp+4]
  0008c	52		 push	 edx
  0008d	8b 45 c4	 mov	 eax, DWORD PTR _dwBufferSize$[ebp]
  00090	50		 push	 eax
  00091	8b 4d bc	 mov	 ecx, DWORD PTR _pvBufferData$[ebp]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ?GenerateTone16@@YGXPAXKKKK@Z ; GenerateTone16
$L36721:

; 1411 :     }
; 1412 : 
; 1413 :     for(i = 0; (i < NUMELMS(apBuffers)) && SUCCEEDED(hr); i++)

  0009a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000a1	eb 09		 jmp	 SHORT $L36723
$L36724:
  000a3	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  000a6	83 c2 01	 add	 edx, 1
  000a9	89 55 e8	 mov	 DWORD PTR _i$[ebp], edx
$L36723:
  000ac	83 7d e8 02	 cmp	 DWORD PTR _i$[ebp], 2
  000b0	0f 83 94 00 00
	00		 jae	 $L36725
  000b6	83 7d c0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ba	0f 8c 8a 00 00
	00		 jl	 $L36725

; 1414 :     {
; 1415 :         hr = ValidateResult(DirectSoundCreateBuffer(&dsbd, &apBuffers[i]));

  000c0	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  000c3	8d 4c 85 e0	 lea	 ecx, DWORD PTR _apBuffers$[ebp+eax*4]
  000c7	51		 push	 ecx
  000c8	8d 55 c8	 lea	 edx, DWORD PTR _dsbd$[ebp]
  000cb	52		 push	 edx
  000cc	e8 00 00 00 00	 call	 _DirectSoundCreateBuffer@8
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000d7	89 45 c0	 mov	 DWORD PTR _hr$[ebp], eax

; 1416 : 
; 1417 :         if(SUCCEEDED(hr))

  000da	83 7d c0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000de	7c 1e		 jl	 SHORT $L36727

; 1418 :         {
; 1419 :             hr = ValidateResult(apBuffers[i]->SetBufferData(pvBufferData, dwBufferSize));

  000e0	8b 45 c4	 mov	 eax, DWORD PTR _dwBufferSize$[ebp]
  000e3	50		 push	 eax
  000e4	8b 4d bc	 mov	 ecx, DWORD PTR _pvBufferData$[ebp]
  000e7	51		 push	 ecx
  000e8	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  000eb	8b 44 95 e0	 mov	 eax, DWORD PTR _apBuffers$[ebp+edx*4]
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000fb	89 45 c0	 mov	 DWORD PTR _hr$[ebp], eax
$L36727:

; 1420 :         }
; 1421 : 
; 1422 :         if(SUCCEEDED(hr))

  000fe	83 7d c0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00102	7c 16		 jl	 SHORT $L36729

; 1423 :         {
; 1424 :             hr = PlayBuffer(apBuffers[i], DSBPLAY_LOOPING);

  00104	6a 00		 push	 0
  00106	6a 00		 push	 0
  00108	6a 01		 push	 1
  0010a	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0010d	8b 54 8d e0	 mov	 edx, DWORD PTR _apBuffers$[ebp+ecx*4]
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  00117	89 45 c0	 mov	 DWORD PTR _hr$[ebp], eax
$L36729:

; 1425 :         }
; 1426 : 
; 1427 :         if(SUCCEEDED(hr))

  0011a	83 7d c0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0011e	7c 25		 jl	 SHORT $L36731

; 1428 :         {
; 1429 :             hr = StopBuffer(apBuffers[i], 0, (5000 * i) + 10000);

  00120	6a 00		 push	 0
  00122	6a 00		 push	 0
  00124	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  00127	69 c0 88 13 00
	00		 imul	 eax, 5000		; 00001388H
  0012d	05 10 27 00 00	 add	 eax, 10000		; 00002710H
  00132	50		 push	 eax
  00133	6a 00		 push	 0
  00135	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  00138	8b 54 8d e0	 mov	 edx, DWORD PTR _apBuffers$[ebp+ecx*4]
  0013c	52		 push	 edx
  0013d	e8 00 00 00 00	 call	 ?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z ; StopBuffer
  00142	89 45 c0	 mov	 DWORD PTR _hr$[ebp], eax
$L36731:

; 1430 :         }
; 1431 :     }

  00145	e9 59 ff ff ff	 jmp	 $L36724
$L36725:

; 1432 : 
; 1433 :     for(i = 0; (i < NUMELMS(apBuffers)) && SUCCEEDED(hr); i++)

  0014a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00151	eb 09		 jmp	 SHORT $L36733
$L36734:
  00153	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  00156	83 c0 01	 add	 eax, 1
  00159	89 45 e8	 mov	 DWORD PTR _i$[ebp], eax
$L36733:
  0015c	83 7d e8 02	 cmp	 DWORD PTR _i$[ebp], 2
  00160	73 46		 jae	 SHORT $L36735
  00162	83 7d c0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00166	7c 40		 jl	 SHORT $L36735

; 1434 :     {
; 1435 :         if(apBuffers[i])

  00168	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0016b	83 7c 8d e0 00	 cmp	 DWORD PTR _apBuffers$[ebp+ecx*4], 0
  00170	74 34		 je	 SHORT $L36736

; 1436 :         {
; 1437 :             hr = WaitBuffer(apBuffers[i], FALSE);

  00172	6a 00		 push	 0
  00174	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  00177	8b 44 95 e0	 mov	 eax, DWORD PTR _apBuffers$[ebp+edx*4]
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 ?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z ; WaitBuffer
  00181	89 45 c0	 mov	 DWORD PTR _hr$[ebp], eax

; 1438 : 
; 1439 :             RELEASE(apBuffers[i]);

  00184	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  00187	83 7c 8d e0 00	 cmp	 DWORD PTR _apBuffers$[ebp+ecx*4], 0
  0018c	74 18		 je	 SHORT $L36736
  0018e	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  00191	8b 44 95 e0	 mov	 eax, DWORD PTR _apBuffers$[ebp+edx*4]
  00195	50		 push	 eax
  00196	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  0019b	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0019e	c7 44 8d e0 00
	00 00 00	 mov	 DWORD PTR _apBuffers$[ebp+ecx*4], 0
$L36736:

; 1440 :         }
; 1441 :     }

  001a6	eb ab		 jmp	 SHORT $L36734
$L36735:

; 1442 : 
; 1443 :     return hr;

  001a8	8b 45 c0	 mov	 eax, DWORD PTR _hr$[ebp]

; 1444 : }

  001ab	8b e5		 mov	 esp, ebp
  001ad	5d		 pop	 ebp
  001ae	c3		 ret	 0
?TestSgeSharing@@YGJXZ ENDP				; TestSgeSharing
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetBufferData@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
DSOUND	SEGMENT
_this$ = 8
_pvBufferData$ = 12
_dwBufferBytes$ = 16
?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z PROC NEAR	; IDirectSoundBuffer::SetBufferData, COMDAT

; 2107 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2108 :         return IDirectSoundBuffer_SetBufferData(this, pvBufferData, dwBufferBytes);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwBufferBytes$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pvBufferData$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetBufferData@12

; 2109 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ENDP	; IDirectSoundBuffer::SetBufferData
DSOUND	ENDS
PUBLIC	?TestSgeHeap@@YGJXZ				; TestSgeHeap
PUBLIC	??_C@_0BF@JMCBCLDI@Creating?5?$CFlu?5buffers?$AA@ ; `string'
PUBLIC	??_C@_0DH@HOHCCBG@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_07IGMMEEAG@?$CBdwFree?$AA@		; `string'
PUBLIC	??_C@_0BG@GIGCGFOP@Releasing?5all?5buffers?$AA@	; `string'
PUBLIC	??_C@_0O@FLLACMNL@?$CBapBuffers?$FLi?$FN?$AA@	; `string'
PUBLIC	??_C@_0BE@HKENBMJN@Creating?5big?5buffer?$AA@	; `string'
EXTRN	?GetDirectSoundCaps@@YGJPAU_DSCAPS@@@Z:NEAR	; GetDirectSoundCaps
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
EXTRN	_rand:NEAR
EXTRN	__imp__MmAllocateContiguousMemoryEx@20:NEAR
EXTRN	__imp__MmFreeContiguousMemory@4:NEAR
;	COMDAT ??_C@_0BF@JMCBCLDI@Creating?5?$CFlu?5buffers?$AA@
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
DSOUND_RD	SEGMENT
??_C@_0BF@JMCBCLDI@Creating?5?$CFlu?5buffers?$AA@ DB 'Creating %lu buffer'
	DB	's', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HOHCCBG@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DH@HOHCCBG@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pri'
	DB	'vate\windows\directx\dsound\test\testds.cpp', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_07IGMMEEAG@?$CBdwFree?$AA@
DSOUND_RD	SEGMENT
??_C@_07IGMMEEAG@?$CBdwFree?$AA@ DB '!dwFree', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@GIGCGFOP@Releasing?5all?5buffers?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@GIGCGFOP@Releasing?5all?5buffers?$AA@ DB 'Releasing all buffers'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@FLLACMNL@?$CBapBuffers?$FLi?$FN?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@FLLACMNL@?$CBapBuffers?$FLi?$FN?$AA@ DB '!apBuffers[i]', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@HKENBMJN@Creating?5big?5buffer?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@HKENBMJN@Creating?5big?5buffer?$AA@ DB 'Creating big buffer', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestSgeHeap@@YGJXZ
DSOUND	SEGMENT
_pvBufferData$ = -1092
_hr$ = -1088
_dwBufferSize$ = -1084
_dsbd$ = -1080
_dwRemaining$ = -1056
_dsc$ = -1052
_dwFree$ = -1036
_apBuffers$ = -1032
_dwBufferCount$ = -8
_i$ = -4
?TestSgeHeap@@YGJXZ PROC NEAR				; TestSgeHeap, COMDAT

; 1471 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 04 00
	00		 sub	 esp, 1092		; 00000444H
  00009	57		 push	 edi

; 1472 :     LPDIRECTSOUNDBUFFER     apBuffers[256]  = { NULL };

  0000a	c7 85 f8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _apBuffers$[ebp], 0
  00014	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00019	33 c0		 xor	 eax, eax
  0001b	8d bd fc fb ff
	ff		 lea	 edi, DWORD PTR _apBuffers$[ebp+4]
  00021	f3 ab		 rep stosd

; 1473 :     LPVOID                  pvBufferData    = NULL;

  00023	c7 85 bc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pvBufferData$[ebp], 0

; 1474 :     DWORD                   dwBufferCount;
; 1475 :     DWORD                   dwBufferSize;
; 1476 :     DWORD                   dwRemaining;
; 1477 :     DWORD                   dwFree;
; 1478 :     DSBUFFERDESC            dsbd;
; 1479 :     DSCAPS                  dsc;
; 1480 :     HRESULT                 hr;
; 1481 :     DWORD                   i;
; 1482 : 
; 1483 :     ZeroMemory(&dsbd, sizeof(dsbd));

  0002d	6a 18		 push	 24			; 00000018H
  0002f	6a 00		 push	 0
  00031	8d 85 c8 fb ff
	ff		 lea	 eax, DWORD PTR _dsbd$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _memset
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1484 : 
; 1485 :     dsbd.dwSize = sizeof(dsbd);

  00040	c7 85 c8 fb ff
	ff 18 00 00 00	 mov	 DWORD PTR _dsbd$[ebp], 24 ; 00000018H

; 1486 :     dsbd.lpwfxFormat = (LPWAVEFORMATEX)CreateFormat(WAVE_FORMAT_PCM, 44100, 16, 2);

  0004a	6a 02		 push	 2
  0004c	6a 10		 push	 16			; 00000010H
  0004e	68 44 ac 00 00	 push	 44100			; 0000ac44H
  00053	6a 01		 push	 1
  00055	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  0005a	89 85 d4 fb ff
	ff		 mov	 DWORD PTR _dsbd$[ebp+12], eax

; 1487 : 
; 1488 :     hr = GetDirectSoundCaps(&dsc);

  00060	8d 8d e4 fb ff
	ff		 lea	 ecx, DWORD PTR _dsc$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?GetDirectSoundCaps@@YGJPAU_DSCAPS@@@Z ; GetDirectSoundCaps
  0006c	89 85 c0 fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 1489 : 
; 1490 :     if(SUCCEEDED(hr))

  00072	83 bd c0 fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00079	7c 20		 jl	 SHORT $L36753

; 1491 :     {
; 1492 :         dwBufferCount = dsc.dwFree2DBuffers + dsc.dwFree3DBuffers;

  0007b	8b 95 e4 fb ff
	ff		 mov	 edx, DWORD PTR _dsc$[ebp]
  00081	03 95 e8 fb ff
	ff		 add	 edx, DWORD PTR _dsc$[ebp+4]
  00087	89 55 f8	 mov	 DWORD PTR _dwBufferCount$[ebp], edx

; 1493 :         dwBufferSize = dsc.dwFreeBufferSGEs / dwBufferCount;

  0008a	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _dsc$[ebp+8]
  00090	33 d2		 xor	 edx, edx
  00092	f7 75 f8	 div	 DWORD PTR _dwBufferCount$[ebp]
  00095	89 85 c4 fb ff
	ff		 mov	 DWORD PTR _dwBufferSize$[ebp], eax
$L36753:

; 1494 :     }
; 1495 : 
; 1496 :     if(SUCCEEDED(hr))

  0009b	83 bd c0 fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  000a2	7c 33		 jl	 SHORT $L36755

; 1497 :     {
; 1498 :         hr = ValidatePtr(pvBufferData = MmAllocateContiguousMemoryEx(dsc.dwFreeBufferSGEs * PAGE_SIZE, 0, 0xFFFFFFFF, PAGE_SIZE, PAGE_READWRITE));

  000a4	6a 04		 push	 4
  000a6	68 00 10 00 00	 push	 4096			; 00001000H
  000ab	6a ff		 push	 -1
  000ad	6a 00		 push	 0
  000af	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _dsc$[ebp+8]
  000b5	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  000b8	50		 push	 eax
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmAllocateContiguousMemoryEx@20
  000bf	89 85 bc fb ff
	ff		 mov	 DWORD PTR _pvBufferData$[ebp], eax
  000c5	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR _pvBufferData$[ebp]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  000d1	89 85 c0 fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L36755:

; 1499 :     }
; 1500 : 
; 1501 :     if(SUCCEEDED(hr))

  000d7	83 bd c0 fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  000de	0f 8c b3 00 00
	00		 jl	 $L36757

; 1502 :     {
; 1503 :         DPF_TEST("Creating %lu buffers", dwBufferCount);

  000e4	8b 55 f8	 mov	 edx, DWORD PTR _dwBufferCount$[ebp]
  000e7	52		 push	 edx
  000e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@JMCBCLDI@Creating?5?$CFlu?5buffers?$AA@
  000ed	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  000f2	83 c4 08	 add	 esp, 8

; 1504 :         
; 1505 :         for(i = 0; (i < dwBufferCount) && SUCCEEDED(hr); i++)

  000f5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000fc	eb 09		 jmp	 SHORT $L36760
$L36761:
  000fe	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00101	83 c0 01	 add	 eax, 1
  00104	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L36760:
  00107	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0010a	3b 4d f8	 cmp	 ecx, DWORD PTR _dwBufferCount$[ebp]
  0010d	0f 83 84 00 00
	00		 jae	 $L36757
  00113	83 bd c0 fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0011a	7c 7b		 jl	 SHORT $L36757

; 1506 :         {
; 1507 :             hr = ValidateResult(DirectSoundCreateBuffer(&dsbd, &apBuffers[i]));

  0011c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0011f	8d 84 95 f8 fb
	ff ff		 lea	 eax, DWORD PTR _apBuffers$[ebp+edx*4]
  00126	50		 push	 eax
  00127	8d 8d c8 fb ff
	ff		 lea	 ecx, DWORD PTR _dsbd$[ebp]
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 _DirectSoundCreateBuffer@8
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00139	89 85 c0 fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 1508 : 
; 1509 :             if(SUCCEEDED(hr))

  0013f	83 bd c0 fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00146	7c 4a		 jl	 SHORT $L36764

; 1510 :             {
; 1511 :                 if(dwBufferCount - 1 == i)

  00148	8b 55 f8	 mov	 edx, DWORD PTR _dwBufferCount$[ebp]
  0014b	83 ea 01	 sub	 edx, 1
  0014e	3b 55 fc	 cmp	 edx, DWORD PTR _i$[ebp]
  00151	75 12		 jne	 SHORT $L36765

; 1512 :                 {
; 1513 :                     dwBufferSize = dsc.dwFreeBufferSGEs - dwBufferSize;

  00153	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _dsc$[ebp+8]
  00159	2b 85 c4 fb ff
	ff		 sub	 eax, DWORD PTR _dwBufferSize$[ebp]
  0015f	89 85 c4 fb ff
	ff		 mov	 DWORD PTR _dwBufferSize$[ebp], eax
$L36765:

; 1514 :                 }
; 1515 :                 
; 1516 :                 hr = ValidateResult(apBuffers[i]->SetBufferData(pvBufferData, dwBufferSize * PAGE_SIZE));

  00165	8b 8d c4 fb ff
	ff		 mov	 ecx, DWORD PTR _dwBufferSize$[ebp]
  0016b	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  0016e	51		 push	 ecx
  0016f	8b 95 bc fb ff
	ff		 mov	 edx, DWORD PTR _pvBufferData$[ebp]
  00175	52		 push	 edx
  00176	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00179	8b 8c 85 f8 fb
	ff ff		 mov	 ecx, DWORD PTR _apBuffers$[ebp+eax*4]
  00180	51		 push	 ecx
  00181	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0018c	89 85 c0 fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L36764:

; 1517 :             }
; 1518 :         }

  00192	e9 67 ff ff ff	 jmp	 $L36761
$L36757:

; 1519 :     }
; 1520 : 
; 1521 :     if(SUCCEEDED(hr))

  00197	83 bd c0 fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0019e	7c 12		 jl	 SHORT $L36767

; 1522 :     {
; 1523 :         hr = GetFreeSGEs(&dwFree);

  001a0	8d 95 f4 fb ff
	ff		 lea	 edx, DWORD PTR _dwFree$[ebp]
  001a6	52		 push	 edx
  001a7	e8 00 00 00 00	 call	 ?GetFreeSGEs@@YGJPAK@Z	; GetFreeSGEs
  001ac	89 85 c0 fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L36767:

; 1524 :     }
; 1525 : 
; 1526 :     if(SUCCEEDED(hr))

  001b2	83 bd c0 fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  001b9	7c 24		 jl	 SHORT $L36769

; 1527 :     {
; 1528 :         ASSERT(!dwFree);

  001bb	68 f8 05 00 00	 push	 1528			; 000005f8H
  001c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HOHCCBG@c?3?2xbox?2private?2windows?2directx?2@
  001c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07IGMMEEAG@?$CBdwFree?$AA@
  001ca	33 c0		 xor	 eax, eax
  001cc	83 bd f4 fb ff
	ff 00		 cmp	 DWORD PTR _dwFree$[ebp], 0
  001d3	0f 95 c0	 setne	 al
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001dc	83 c4 10	 add	 esp, 16			; 00000010H
$L36769:

; 1529 :     }
; 1530 : 
; 1531 :     if(SUCCEEDED(hr))

  001df	83 bd c0 fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  001e6	0f 8c 22 01 00
	00		 jl	 $L36773

; 1532 :     {
; 1533 :         DPF_TEST("Releasing all buffers");

  001ec	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@GIGCGFOP@Releasing?5all?5buffers?$AA@
  001f1	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  001f6	83 c4 04	 add	 esp, 4

; 1534 : 
; 1535 :         for(dwRemaining = dwBufferCount; dwRemaining; dwRemaining--)

  001f9	8b 4d f8	 mov	 ecx, DWORD PTR _dwBufferCount$[ebp]
  001fc	89 8d e0 fb ff
	ff		 mov	 DWORD PTR _dwRemaining$[ebp], ecx
  00202	eb 0f		 jmp	 SHORT $L36775
$L36776:
  00204	8b 95 e0 fb ff
	ff		 mov	 edx, DWORD PTR _dwRemaining$[ebp]
  0020a	83 ea 01	 sub	 edx, 1
  0020d	89 95 e0 fb ff
	ff		 mov	 DWORD PTR _dwRemaining$[ebp], edx
$L36775:
  00213	83 bd e0 fb ff
	ff 00		 cmp	 DWORD PTR _dwRemaining$[ebp], 0
  0021a	0f 84 aa 00 00
	00		 je	 $L36777

; 1536 :         {
; 1537 :             dwFree = rand() % dwRemaining;

  00220	e8 00 00 00 00	 call	 _rand
  00225	33 d2		 xor	 edx, edx
  00227	f7 b5 e0 fb ff
	ff		 div	 DWORD PTR _dwRemaining$[ebp]
  0022d	89 95 f4 fb ff
	ff		 mov	 DWORD PTR _dwFree$[ebp], edx

; 1538 : 
; 1539 :             for(i = 0; i < dwBufferCount; i++)

  00233	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0023a	eb 09		 jmp	 SHORT $L36778
$L36779:
  0023c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0023f	83 c0 01	 add	 eax, 1
  00242	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L36778:
  00245	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00248	3b 4d f8	 cmp	 ecx, DWORD PTR _dwBufferCount$[ebp]
  0024b	73 54		 jae	 SHORT $L36780

; 1540 :             {
; 1541 :                 if(apBuffers[i])

  0024d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00250	83 bc 95 f8 fb
	ff ff 00	 cmp	 DWORD PTR _apBuffers$[ebp+edx*4], 0
  00258	74 45		 je	 SHORT $L36781

; 1542 :                 {
; 1543 :                     if(!dwFree)

  0025a	83 bd f4 fb ff
	ff 00		 cmp	 DWORD PTR _dwFree$[ebp], 0
  00261	75 2d		 jne	 SHORT $L36782

; 1544 :                     {
; 1545 :                         RELEASE(apBuffers[i]);

  00263	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00266	83 bc 85 f8 fb
	ff ff 00	 cmp	 DWORD PTR _apBuffers$[ebp+eax*4], 0
  0026e	74 1e		 je	 SHORT $L36783
  00270	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00273	8b 94 8d f8 fb
	ff ff		 mov	 edx, DWORD PTR _apBuffers$[ebp+ecx*4]
  0027a	52		 push	 edx
  0027b	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  00280	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00283	c7 84 85 f8 fb
	ff ff 00 00 00
	00		 mov	 DWORD PTR _apBuffers$[ebp+eax*4], 0
$L36783:

; 1546 :                         break;

  0028e	eb 11		 jmp	 SHORT $L36780
$L36782:

; 1547 :                     }
; 1548 : 
; 1549 :                     dwFree--;

  00290	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _dwFree$[ebp]
  00296	83 e9 01	 sub	 ecx, 1
  00299	89 8d f4 fb ff
	ff		 mov	 DWORD PTR _dwFree$[ebp], ecx
$L36781:

; 1550 :                 }
; 1551 :             }

  0029f	eb 9b		 jmp	 SHORT $L36779
$L36780:

; 1552 : 
; 1553 :             ASSERT(!dwFree);

  002a1	68 11 06 00 00	 push	 1553			; 00000611H
  002a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HOHCCBG@c?3?2xbox?2private?2windows?2directx?2@
  002ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07IGMMEEAG@?$CBdwFree?$AA@
  002b0	33 d2		 xor	 edx, edx
  002b2	83 bd f4 fb ff
	ff 00		 cmp	 DWORD PTR _dwFree$[ebp], 0
  002b9	0f 95 c2	 setne	 dl
  002bc	52		 push	 edx
  002bd	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  002c2	83 c4 10	 add	 esp, 16			; 00000010H

; 1554 :         }

  002c5	e9 3a ff ff ff	 jmp	 $L36776
$L36777:

; 1555 : 
; 1556 :         for(i = 0; i < dwBufferCount; i++)

  002ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002d1	eb 09		 jmp	 SHORT $L36784
$L36785:
  002d3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  002d6	83 c0 01	 add	 eax, 1
  002d9	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L36784:
  002dc	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  002df	3b 4d f8	 cmp	 ecx, DWORD PTR _dwBufferCount$[ebp]
  002e2	73 2a		 jae	 SHORT $L36773

; 1557 :         {
; 1558 :             ASSERT(!apBuffers[i]);

  002e4	68 16 06 00 00	 push	 1558			; 00000616H
  002e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HOHCCBG@c?3?2xbox?2private?2windows?2directx?2@
  002ee	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@FLLACMNL@?$CBapBuffers?$FLi?$FN?$AA@
  002f3	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  002f6	33 c0		 xor	 eax, eax
  002f8	83 bc 95 f8 fb
	ff ff 00	 cmp	 DWORD PTR _apBuffers$[ebp+edx*4], 0
  00300	0f 95 c0	 setne	 al
  00303	50		 push	 eax
  00304	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00309	83 c4 10	 add	 esp, 16			; 00000010H

; 1559 :         }

  0030c	eb c5		 jmp	 SHORT $L36785
$L36773:

; 1560 :     }
; 1561 : 
; 1562 :     if(SUCCEEDED(hr))

  0030e	83 bd c0 fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00315	7c 2c		 jl	 SHORT $L36789

; 1563 :     {
; 1564 :         DPF_TEST("Creating big buffer");

  00317	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@HKENBMJN@Creating?5big?5buffer?$AA@
  0031c	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00321	83 c4 04	 add	 esp, 4

; 1565 : 
; 1566 :         hr = ValidateResult(DirectSoundCreateBuffer(&dsbd, &apBuffers[0]));

  00324	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _apBuffers$[ebp]
  0032a	51		 push	 ecx
  0032b	8d 95 c8 fb ff
	ff		 lea	 edx, DWORD PTR _dsbd$[ebp]
  00331	52		 push	 edx
  00332	e8 00 00 00 00	 call	 _DirectSoundCreateBuffer@8
  00337	50		 push	 eax
  00338	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0033d	89 85 c0 fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L36789:

; 1567 :     }
; 1568 : 
; 1569 :     if(SUCCEEDED(hr))

  00343	83 bd c0 fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0034a	7c 29		 jl	 SHORT $L36792

; 1570 :     {
; 1571 :         hr = ValidateResult(apBuffers[0]->SetBufferData(pvBufferData, dsc.dwFreeBufferSGEs * PAGE_SIZE));

  0034c	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _dsc$[ebp+8]
  00352	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  00355	50		 push	 eax
  00356	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR _pvBufferData$[ebp]
  0035c	51		 push	 ecx
  0035d	8b 95 f8 fb ff
	ff		 mov	 edx, DWORD PTR _apBuffers$[ebp]
  00363	52		 push	 edx
  00364	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData
  00369	50		 push	 eax
  0036a	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0036f	89 85 c0 fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L36792:

; 1572 :     }
; 1573 : 
; 1574 :     RELEASE(apBuffers[0]);

  00375	83 bd f8 fb ff
	ff 00		 cmp	 DWORD PTR _apBuffers$[ebp], 0
  0037c	74 16		 je	 SHORT $L36793
  0037e	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _apBuffers$[ebp]
  00384	50		 push	 eax
  00385	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  0038a	c7 85 f8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _apBuffers$[ebp], 0
$L36793:

; 1575 : 
; 1576 :     if(pvBufferData)

  00394	83 bd bc fb ff
	ff 00		 cmp	 DWORD PTR _pvBufferData$[ebp], 0
  0039b	74 0d		 je	 SHORT $L36794

; 1577 :     {
; 1578 :         MmFreeContiguousMemory(pvBufferData);

  0039d	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR _pvBufferData$[ebp]
  003a3	51		 push	 ecx
  003a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmFreeContiguousMemory@4
$L36794:

; 1579 :     }
; 1580 : 
; 1581 :     return hr;

  003aa	8b 85 c0 fb ff
	ff		 mov	 eax, DWORD PTR _hr$[ebp]

; 1582 : }

  003b0	5f		 pop	 edi
  003b1	8b e5		 mov	 esp, ebp
  003b3	5d		 pop	 ebp
  003b4	c3		 ret	 0
?TestSgeHeap@@YGJXZ ENDP				; TestSgeHeap
DSOUND	ENDS
PUBLIC	?Test256Voices@@YGJXZ				; Test256Voices
; Function compile flags: /Odt
;	COMDAT ?Test256Voices@@YGJXZ
DSOUND	SEGMENT
_pvBufferData$ = -1096
_hr$ = -1092
_dsbd$ = -1088
_dsc$ = -1064
_apBuffers$ = -1048
_i$ = -24
_wfx$ = -20
?Test256Voices@@YGJXZ PROC NEAR				; Test256Voices, COMDAT

; 1608 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 04 00
	00		 sub	 esp, 1096		; 00000448H
  00009	57		 push	 edi

; 1609 :     static const DWORD          dwBufferSize    = PAGE_SIZE;
; 1610 :     LPVOID                      pvBufferData    = NULL;

  0000a	c7 85 b8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pvBufferData$[ebp], 0

; 1611 :     LPDIRECTSOUNDBUFFER         apBuffers[256]  = { NULL };

  00014	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _apBuffers$[ebp], 0
  0001e	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00023	33 c0		 xor	 eax, eax
  00025	8d bd ec fb ff
	ff		 lea	 edi, DWORD PTR _apBuffers$[ebp+4]
  0002b	f3 ab		 rep stosd

; 1612 :     DSCAPS                      dsc;
; 1613 :     DSBUFFERDESC                dsbd;
; 1614 :     WAVEFORMATEX                wfx;
; 1615 :     HRESULT                     hr;
; 1616 :     DWORD                       i;
; 1617 : 
; 1618 :     ZeroMemory(&dsbd, sizeof(dsbd));

  0002d	6a 18		 push	 24			; 00000018H
  0002f	6a 00		 push	 0
  00031	8d 85 c0 fb ff
	ff		 lea	 eax, DWORD PTR _dsbd$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _memset
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1619 : 
; 1620 :     dsbd.dwSize = sizeof(dsbd);

  00040	c7 85 c0 fb ff
	ff 18 00 00 00	 mov	 DWORD PTR _dsbd$[ebp], 24 ; 00000018H

; 1621 :     dsbd.lpwfxFormat = &wfx;

  0004a	8d 4d ec	 lea	 ecx, DWORD PTR _wfx$[ebp]
  0004d	89 8d cc fb ff
	ff		 mov	 DWORD PTR _dsbd$[ebp+12], ecx

; 1622 : 
; 1623 :     XAudioCreatePcmFormat(1, dwBufferSize / 2, 16, &wfx);

  00053	8d 55 ec	 lea	 edx, DWORD PTR _wfx$[ebp]
  00056	52		 push	 edx
  00057	6a 10		 push	 16			; 00000010H
  00059	68 00 08 00 00	 push	 2048			; 00000800H
  0005e	6a 01		 push	 1
  00060	e8 00 00 00 00	 call	 _XAudioCreatePcmFormat@16

; 1624 : 
; 1625 :     hr = MALLOC(pvBufferData, BYTE, dwBufferSize);

  00065	68 00 10 00 00	 push	 4096			; 00001000H
  0006a	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  0006f	89 85 b8 fb ff
	ff		 mov	 DWORD PTR _pvBufferData$[ebp], eax
  00075	8b 85 b8 fb ff
	ff		 mov	 eax, DWORD PTR _pvBufferData$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  00081	89 85 bc fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 1626 : 
; 1627 :     if(SUCCEEDED(hr))

  00087	83 bd bc fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0008e	7c 1f		 jl	 SHORT $L36810

; 1628 :     {
; 1629 :         GenerateTone16(pvBufferData, dwBufferSize, wfx.nSamplesPerSec, wfx.nChannels, 500);

  00090	68 f4 01 00 00	 push	 500			; 000001f4H
  00095	0f b7 4d ee	 movzx	 ecx, WORD PTR _wfx$[ebp+2]
  00099	51		 push	 ecx
  0009a	8b 55 f0	 mov	 edx, DWORD PTR _wfx$[ebp+4]
  0009d	52		 push	 edx
  0009e	68 00 10 00 00	 push	 4096			; 00001000H
  000a3	8b 85 b8 fb ff
	ff		 mov	 eax, DWORD PTR _pvBufferData$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?GenerateTone16@@YGXPAXKKKK@Z ; GenerateTone16
$L36810:

; 1630 :     }
; 1631 : 
; 1632 :     if(SUCCEEDED(hr))

  000af	83 bd bc fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  000b6	7c 12		 jl	 SHORT $L36812

; 1633 :     {
; 1634 :         hr = GetDirectSoundCaps(&dsc);

  000b8	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _dsc$[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 ?GetDirectSoundCaps@@YGJPAU_DSCAPS@@@Z ; GetDirectSoundCaps
  000c4	89 85 bc fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L36812:

; 1635 :     }
; 1636 : 
; 1637 :     for(i = 0; (i < dsc.dwFree2DBuffers) && SUCCEEDED(hr); i++)

  000ca	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d1	eb 09		 jmp	 SHORT $L36814
$L36815:
  000d3	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  000d6	83 c2 01	 add	 edx, 1
  000d9	89 55 e8	 mov	 DWORD PTR _i$[ebp], edx
$L36814:
  000dc	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  000df	3b 85 d8 fb ff
	ff		 cmp	 eax, DWORD PTR _dsc$[ebp]
  000e5	73 2e		 jae	 SHORT $L36816
  000e7	83 bd bc fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  000ee	7c 25		 jl	 SHORT $L36816

; 1638 :     {
; 1639 :         hr = ValidateResult(DirectSoundCreateBuffer(&dsbd, &apBuffers[i]));

  000f0	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  000f3	8d 94 8d e8 fb
	ff ff		 lea	 edx, DWORD PTR _apBuffers$[ebp+ecx*4]
  000fa	52		 push	 edx
  000fb	8d 85 c0 fb ff
	ff		 lea	 eax, DWORD PTR _dsbd$[ebp]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 _DirectSoundCreateBuffer@8
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0010d	89 85 bc fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 1640 :     }

  00113	eb be		 jmp	 SHORT $L36815
$L36816:

; 1641 : 
; 1642 :     if(SUCCEEDED(hr))

  00115	83 bd bc fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0011c	7c 0f		 jl	 SHORT $L36818

; 1643 :     {
; 1644 :         dsbd.dwFlags |= DSBCAPS_CTRL3D;

  0011e	8b 8d c4 fb ff
	ff		 mov	 ecx, DWORD PTR _dsbd$[ebp+4]
  00124	83 c9 10	 or	 ecx, 16			; 00000010H
  00127	89 8d c4 fb ff
	ff		 mov	 DWORD PTR _dsbd$[ebp+4], ecx
$L36818:

; 1645 :     }
; 1646 :     
; 1647 :     for(i = 0; (i < dsc.dwFree3DBuffers) && SUCCEEDED(hr); i++)

  0012d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00134	eb 09		 jmp	 SHORT $L36820
$L36821:
  00136	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  00139	83 c2 01	 add	 edx, 1
  0013c	89 55 e8	 mov	 DWORD PTR _i$[ebp], edx
$L36820:
  0013f	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  00142	3b 85 dc fb ff
	ff		 cmp	 eax, DWORD PTR _dsc$[ebp+4]
  00148	73 34		 jae	 SHORT $L36822
  0014a	83 bd bc fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00151	7c 2b		 jl	 SHORT $L36822

; 1648 :     {
; 1649 :         hr = ValidateResult(DirectSoundCreateBuffer(&dsbd, &apBuffers[dsc.dwFree2DBuffers + i]));

  00153	8b 8d d8 fb ff
	ff		 mov	 ecx, DWORD PTR _dsc$[ebp]
  00159	03 4d e8	 add	 ecx, DWORD PTR _i$[ebp]
  0015c	8d 94 8d e8 fb
	ff ff		 lea	 edx, DWORD PTR _apBuffers$[ebp+ecx*4]
  00163	52		 push	 edx
  00164	8d 85 c0 fb ff
	ff		 lea	 eax, DWORD PTR _dsbd$[ebp]
  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 _DirectSoundCreateBuffer@8
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00176	89 85 bc fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 1650 :     }

  0017c	eb b8		 jmp	 SHORT $L36821
$L36822:

; 1651 : 
; 1652 :     for(i = 0; (i < dsc.dwFree2DBuffers + dsc.dwFree3DBuffers) && SUCCEEDED(hr); i++)

  0017e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00185	eb 09		 jmp	 SHORT $L36824
$L36825:
  00187	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0018a	83 c1 01	 add	 ecx, 1
  0018d	89 4d e8	 mov	 DWORD PTR _i$[ebp], ecx
$L36824:
  00190	8b 95 d8 fb ff
	ff		 mov	 edx, DWORD PTR _dsc$[ebp]
  00196	03 95 dc fb ff
	ff		 add	 edx, DWORD PTR _dsc$[ebp+4]
  0019c	39 55 e8	 cmp	 DWORD PTR _i$[ebp], edx
  0019f	73 58		 jae	 SHORT $L36826
  001a1	83 bd bc fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  001a8	7c 4f		 jl	 SHORT $L36826

; 1653 :     {
; 1654 :         hr = ValidateResult(apBuffers[i]->SetBufferData(pvBufferData, dwBufferSize));

  001aa	68 00 10 00 00	 push	 4096			; 00001000H
  001af	8b 85 b8 fb ff
	ff		 mov	 eax, DWORD PTR _pvBufferData$[ebp]
  001b5	50		 push	 eax
  001b6	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  001b9	8b 94 8d e8 fb
	ff ff		 mov	 edx, DWORD PTR _apBuffers$[ebp+ecx*4]
  001c0	52		 push	 edx
  001c1	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  001cc	89 85 bc fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 1655 : 
; 1656 :         if(SUCCEEDED(hr))

  001d2	83 bd bc fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  001d9	7c 1c		 jl	 SHORT $L36828

; 1657 :         {
; 1658 :             hr = PlayBuffer(apBuffers[i], DSBPLAY_LOOPING);

  001db	6a 00		 push	 0
  001dd	6a 00		 push	 0
  001df	6a 01		 push	 1
  001e1	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  001e4	8b 8c 85 e8 fb
	ff ff		 mov	 ecx, DWORD PTR _apBuffers$[ebp+eax*4]
  001eb	51		 push	 ecx
  001ec	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  001f1	89 85 bc fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L36828:

; 1659 :         }
; 1660 :     }

  001f7	eb 8e		 jmp	 SHORT $L36825
$L36826:

; 1661 : 
; 1662 :     if(SUCCEEDED(hr))

  001f9	83 bd bc fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00200	7c 0a		 jl	 SHORT $L36830

; 1663 :     {
; 1664 :         Sleep(5000);

  00202	68 88 13 00 00	 push	 5000			; 00001388H
  00207	e8 00 00 00 00	 call	 _Sleep@4
$L36830:

; 1665 :     }
; 1666 : 
; 1667 :     for(i = 0; i < NUMELMS(apBuffers); i++)

  0020c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00213	eb 09		 jmp	 SHORT $L36831
$L36832:
  00215	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  00218	83 c2 01	 add	 edx, 1
  0021b	89 55 e8	 mov	 DWORD PTR _i$[ebp], edx
$L36831:
  0021e	81 7d e8 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00225	73 52		 jae	 SHORT $L36833

; 1668 :     {
; 1669 :         if(apBuffers[i])

  00227	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  0022a	83 bc 85 e8 fb
	ff ff 00	 cmp	 DWORD PTR _apBuffers$[ebp+eax*4], 0
  00232	74 18		 je	 SHORT $L36834

; 1670 :         {
; 1671 :             StopBuffer(apBuffers[i], 0, 0, FALSE, TRUE);

  00234	6a 01		 push	 1
  00236	6a 00		 push	 0
  00238	6a 00		 push	 0
  0023a	6a 00		 push	 0
  0023c	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0023f	8b 94 8d e8 fb
	ff ff		 mov	 edx, DWORD PTR _apBuffers$[ebp+ecx*4]
  00246	52		 push	 edx
  00247	e8 00 00 00 00	 call	 ?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z ; StopBuffer
$L36834:

; 1672 :         }
; 1673 :         
; 1674 :         RELEASE(apBuffers[i]);

  0024c	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  0024f	83 bc 85 e8 fb
	ff ff 00	 cmp	 DWORD PTR _apBuffers$[ebp+eax*4], 0
  00257	74 1e		 je	 SHORT $L36835
  00259	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0025c	8b 94 8d e8 fb
	ff ff		 mov	 edx, DWORD PTR _apBuffers$[ebp+ecx*4]
  00263	52		 push	 edx
  00264	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  00269	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  0026c	c7 84 85 e8 fb
	ff ff 00 00 00
	00		 mov	 DWORD PTR _apBuffers$[ebp+eax*4], 0
$L36835:

; 1675 :     }

  00277	eb 9c		 jmp	 SHORT $L36832
$L36833:

; 1676 : 
; 1677 :     FREE(pvBufferData);

  00279	8d 8d b8 fb ff
	ff		 lea	 ecx, DWORD PTR _pvBufferData$[ebp]
  0027f	51		 push	 ecx
  00280	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 1678 : 
; 1679 :     return hr;

  00285	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR _hr$[ebp]

; 1680 : }

  0028b	5f		 pop	 edi
  0028c	8b e5		 mov	 esp, ebp
  0028e	5d		 pop	 ebp
  0028f	c3		 ret	 0
?Test256Voices@@YGJXZ ENDP				; Test256Voices
DSOUND	ENDS
PUBLIC	??_C@_0DF@FHAGGANE@manual?5setposition?3?5?5play?5?$CFlu?5wr@ ; `string'
PUBLIC	??_C@_0CO@LCCAOLKB@forced?5stop?3?5?5play?5?$CFlu?5write?5?$CFlu@ ; `string'
PUBLIC	??_C@_0DN@IGFKGOHL@play?5from?5current?5position?3?5?5pla@ ; `string'
PUBLIC	??_C@_0CP@ICCFDMKE@natural?5stop?3?5?5play?5?$CFlu?5write?5?$CFl@ ; `string'
PUBLIC	??_C@_0EM@PAIBEKMM@play?5after?5natural?5stop?5?$CI2000?5ms@ ; `string'
PUBLIC	??_C@_0DC@HKPBDPLI@play?5from?5start?3?5?5play?5?$CFlu?5write@ ; `string'
PUBLIC	?GetCurrentPosition@IDirectSoundBuffer@@QAGJPAK0@Z ; IDirectSoundBuffer::GetCurrentPosition
PUBLIC	?SetCurrentPosition@IDirectSoundBuffer@@QAGJK@Z	; IDirectSoundBuffer::SetCurrentPosition
PUBLIC	?TestStop@@YGJKKKK@Z				; TestStop
PUBLIC	??_C@_07DINEPDAJ@?$CBdwPlay?$AA@		; `string'
PUBLIC	??_C@_08GONHFBFC@?$CBdwWrite?$AA@		; `string'
PUBLIC	??_C@_0CP@IOBKCIGN@initial?5play?3?5?5play?5?$CFlu?5write?5?$CFl@ ; `string'
;	COMDAT ??_C@_07DINEPDAJ@?$CBdwPlay?$AA@
DSOUND_RD	SEGMENT
??_C@_07DINEPDAJ@?$CBdwPlay?$AA@ DB '!dwPlay', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_08GONHFBFC@?$CBdwWrite?$AA@
DSOUND_RD	SEGMENT
??_C@_08GONHFBFC@?$CBdwWrite?$AA@ DB '!dwWrite', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IOBKCIGN@initial?5play?3?5?5play?5?$CFlu?5write?5?$CFl@
DSOUND_RD	SEGMENT
??_C@_0CP@IOBKCIGN@initial?5play?3?5?5play?5?$CFlu?5write?5?$CFl@ DB 'ini'
	DB	'tial play:  play %lu write %lu duration %lu', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@FHAGGANE@manual?5setposition?3?5?5play?5?$CFlu?5wr@
DSOUND_RD	SEGMENT
??_C@_0DF@FHAGGANE@manual?5setposition?3?5?5play?5?$CFlu?5wr@ DB 'manual '
	DB	'setposition:  play %lu write %lu duration %lu', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@LCCAOLKB@forced?5stop?3?5?5play?5?$CFlu?5write?5?$CFlu@
DSOUND_RD	SEGMENT
??_C@_0CO@LCCAOLKB@forced?5stop?3?5?5play?5?$CFlu?5write?5?$CFlu@ DB 'for'
	DB	'ced stop:  play %lu write %lu duration %lu', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DN@IGFKGOHL@play?5from?5current?5position?3?5?5pla@
DSOUND_RD	SEGMENT
??_C@_0DN@IGFKGOHL@play?5from?5current?5position?3?5?5pla@ DB 'play from '
	DB	'current position:  play %lu write %lu duration %lu', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@ICCFDMKE@natural?5stop?3?5?5play?5?$CFlu?5write?5?$CFl@
DSOUND_RD	SEGMENT
??_C@_0CP@ICCFDMKE@natural?5stop?3?5?5play?5?$CFlu?5write?5?$CFl@ DB 'nat'
	DB	'ural stop:  play %lu write %lu duration %lu', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EM@PAIBEKMM@play?5after?5natural?5stop?5?$CI2000?5ms@
DSOUND_RD	SEGMENT
??_C@_0EM@PAIBEKMM@play?5after?5natural?5stop?5?$CI2000?5ms@ DB 'play aft'
	DB	'er natural stop (2000 ms delayed):  play %lu write %lu durati'
	DB	'on %lu', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DC@HKPBDPLI@play?5from?5start?3?5?5play?5?$CFlu?5write@
DSOUND_RD	SEGMENT
??_C@_0DC@HKPBDPLI@play?5from?5start?3?5?5play?5?$CFlu?5write@ DB 'play f'
	DB	'rom start:  play %lu write %lu duration %lu', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestStop@@YGJKKKK@Z
DSOUND	SEGMENT
_dwDuration$ = -24
_hr$ = -20
_dwWrite$ = -16
_dwPlay$ = -12
_pwfxFormat$ = -8
_pBuffer$ = -4
_dwFormatTag$ = 8
_dwSampleRate$ = 12
_dwBitsPerSample$ = 16
_dwChannelCount$ = 20
?TestStop@@YGJKKKK@Z PROC NEAR				; TestStop, COMDAT

; 1712 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1713 :     LPCWAVEFORMATEX         pwfxFormat  = CreateFormat(dwFormatTag, dwSampleRate, dwBitsPerSample, dwChannelCount);

  00006	8b 45 14	 mov	 eax, DWORD PTR _dwChannelCount$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _dwBitsPerSample$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR _dwSampleRate$[ebp]
  00011	52		 push	 edx
  00012	8b 45 08	 mov	 eax, DWORD PTR _dwFormatTag$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  0001b	89 45 f8	 mov	 DWORD PTR _pwfxFormat$[ebp], eax

; 1714 :     LPDIRECTSOUNDBUFFER     pBuffer     = NULL;

  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 1715 :     DWORD                   dwDuration  = 0;

  00025	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dwDuration$[ebp], 0

; 1716 :     DWORD                   dwPlay;
; 1717 :     DWORD                   dwWrite;
; 1718 :     HRESULT                 hr;
; 1719 : 
; 1720 :     hr = CreateStdBuffer(0, pwfxFormat, 0, NULL, &pBuffer, &dwDuration);

  0002c	8d 4d e8	 lea	 ecx, DWORD PTR _dwDuration$[ebp]
  0002f	51		 push	 ecx
  00030	8d 55 fc	 lea	 edx, DWORD PTR _pBuffer$[ebp]
  00033	52		 push	 edx
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	8b 45 f8	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  0003b	50		 push	 eax
  0003c	6a 00		 push	 0
  0003e	e8 00 00 00 00	 call	 ?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z ; CreateStdBuffer
  00043	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 1721 : 
; 1722 :     if(SUCCEEDED(hr))

  00046	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004a	7c 1a		 jl	 SHORT $L36850

; 1723 :     {
; 1724 :         hr = ValidateResult(pBuffer->GetCurrentPosition(&dwPlay, &dwWrite));

  0004c	8d 4d f0	 lea	 ecx, DWORD PTR _dwWrite$[ebp]
  0004f	51		 push	 ecx
  00050	8d 55 f4	 lea	 edx, DWORD PTR _dwPlay$[ebp]
  00053	52		 push	 edx
  00054	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?GetCurrentPosition@IDirectSoundBuffer@@QAGJPAK0@Z ; IDirectSoundBuffer::GetCurrentPosition
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00063	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36850:

; 1725 :     }
; 1726 : 
; 1727 :     if(SUCCEEDED(hr))

  00066	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0006a	7c 42		 jl	 SHORT $L36852

; 1728 :     {
; 1729 :         ASSERT(!dwPlay);

  0006c	68 c1 06 00 00	 push	 1729			; 000006c1H
  00071	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HOHCCBG@c?3?2xbox?2private?2windows?2directx?2@
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07DINEPDAJ@?$CBdwPlay?$AA@
  0007b	33 c9		 xor	 ecx, ecx
  0007d	83 7d f4 00	 cmp	 DWORD PTR _dwPlay$[ebp], 0
  00081	0f 95 c1	 setne	 cl
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0008a	83 c4 10	 add	 esp, 16			; 00000010H

; 1730 :         ASSERT(!dwWrite);

  0008d	68 c2 06 00 00	 push	 1730			; 000006c2H
  00092	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HOHCCBG@c?3?2xbox?2private?2windows?2directx?2@
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08GONHFBFC@?$CBdwWrite?$AA@
  0009c	33 d2		 xor	 edx, edx
  0009e	83 7d f0 00	 cmp	 DWORD PTR _dwWrite$[ebp], 0
  000a2	0f 95 c2	 setne	 dl
  000a5	52		 push	 edx
  000a6	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000ab	83 c4 10	 add	 esp, 16			; 00000010H
$L36852:

; 1731 :     }
; 1732 : 
; 1733 :     if(SUCCEEDED(hr))

  000ae	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b2	7c 12		 jl	 SHORT $L36856

; 1734 :     {
; 1735 :         hr = PlayBuffer(pBuffer, DSBPLAY_LOOPING);

  000b4	6a 00		 push	 0
  000b6	6a 00		 push	 0
  000b8	6a 01		 push	 1
  000ba	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  000c3	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36856:

; 1736 :     }
; 1737 : 
; 1738 :     if(SUCCEEDED(hr))

  000c6	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ca	7c 21		 jl	 SHORT $L36858

; 1739 :     {
; 1740 :         Sleep(1);

  000cc	6a 01		 push	 1
  000ce	e8 00 00 00 00	 call	 _Sleep@4

; 1741 :         
; 1742 :         hr = ValidateResult(pBuffer->GetCurrentPosition(&dwPlay, &dwWrite));

  000d3	8d 4d f0	 lea	 ecx, DWORD PTR _dwWrite$[ebp]
  000d6	51		 push	 ecx
  000d7	8d 55 f4	 lea	 edx, DWORD PTR _dwPlay$[ebp]
  000da	52		 push	 edx
  000db	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?GetCurrentPosition@IDirectSoundBuffer@@QAGJPAK0@Z ; IDirectSoundBuffer::GetCurrentPosition
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000ea	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36858:

; 1743 :     }
; 1744 : 
; 1745 :     if(SUCCEEDED(hr))

  000ed	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000f1	7c 19		 jl	 SHORT $L36860

; 1746 :     {
; 1747 :         DPF_TEST("initial play:  play %lu write %lu duration %lu", dwPlay, dwWrite, dwDuration);

  000f3	8b 4d e8	 mov	 ecx, DWORD PTR _dwDuration$[ebp]
  000f6	51		 push	 ecx
  000f7	8b 55 f0	 mov	 edx, DWORD PTR _dwWrite$[ebp]
  000fa	52		 push	 edx
  000fb	8b 45 f4	 mov	 eax, DWORD PTR _dwPlay$[ebp]
  000fe	50		 push	 eax
  000ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@IOBKCIGN@initial?5play?3?5?5play?5?$CFlu?5write?5?$CFl@
  00104	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00109	83 c4 10	 add	 esp, 16			; 00000010H
$L36860:

; 1748 :     }
; 1749 : 
; 1750 :     if(SUCCEEDED(hr))

  0010c	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00110	7c 37		 jl	 SHORT $L36863

; 1751 :     {
; 1752 :         Sleep(2000);

  00112	68 d0 07 00 00	 push	 2000			; 000007d0H
  00117	e8 00 00 00 00	 call	 _Sleep@4

; 1753 : 
; 1754 :         hr = ValidateResult(pBuffer->SetCurrentPosition(dwDuration / 2 / pwfxFormat->nBlockAlign * pwfxFormat->nBlockAlign));

  0011c	8b 45 e8	 mov	 eax, DWORD PTR _dwDuration$[ebp]
  0011f	d1 e8		 shr	 eax, 1
  00121	8b 4d f8	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00124	0f b7 49 0c	 movzx	 ecx, WORD PTR [ecx+12]
  00128	33 d2		 xor	 edx, edx
  0012a	f7 f1		 div	 ecx
  0012c	8b 55 f8	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  0012f	0f b7 4a 0c	 movzx	 ecx, WORD PTR [edx+12]
  00133	0f af c1	 imul	 eax, ecx
  00136	50		 push	 eax
  00137	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 ?SetCurrentPosition@IDirectSoundBuffer@@QAGJK@Z ; IDirectSoundBuffer::SetCurrentPosition
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00146	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36863:

; 1755 :     }
; 1756 : 
; 1757 :     if(SUCCEEDED(hr))

  00149	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0014d	7c 21		 jl	 SHORT $L36865

; 1758 :     {
; 1759 :         Sleep(1);

  0014f	6a 01		 push	 1
  00151	e8 00 00 00 00	 call	 _Sleep@4

; 1760 :         
; 1761 :         hr = ValidateResult(pBuffer->GetCurrentPosition(&dwPlay, &dwWrite));

  00156	8d 45 f0	 lea	 eax, DWORD PTR _dwWrite$[ebp]
  00159	50		 push	 eax
  0015a	8d 4d f4	 lea	 ecx, DWORD PTR _dwPlay$[ebp]
  0015d	51		 push	 ecx
  0015e	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00161	52		 push	 edx
  00162	e8 00 00 00 00	 call	 ?GetCurrentPosition@IDirectSoundBuffer@@QAGJPAK0@Z ; IDirectSoundBuffer::GetCurrentPosition
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0016d	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36865:

; 1762 :     }
; 1763 : 
; 1764 :     if(SUCCEEDED(hr))

  00170	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00174	7c 19		 jl	 SHORT $L36867

; 1765 :     {
; 1766 :         DPF_TEST("manual setposition:  play %lu write %lu duration %lu", dwPlay, dwWrite, dwDuration);

  00176	8b 45 e8	 mov	 eax, DWORD PTR _dwDuration$[ebp]
  00179	50		 push	 eax
  0017a	8b 4d f0	 mov	 ecx, DWORD PTR _dwWrite$[ebp]
  0017d	51		 push	 ecx
  0017e	8b 55 f4	 mov	 edx, DWORD PTR _dwPlay$[ebp]
  00181	52		 push	 edx
  00182	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@FHAGGANE@manual?5setposition?3?5?5play?5?$CFlu?5wr@
  00187	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  0018c	83 c4 10	 add	 esp, 16			; 00000010H
$L36867:

; 1767 :     }
; 1768 : 
; 1769 :     if(SUCCEEDED(hr))

  0018f	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00193	7c 17		 jl	 SHORT $L36870

; 1770 :     {
; 1771 :         hr = StopBuffer(pBuffer, 0, 10000, FALSE, TRUE);

  00195	6a 01		 push	 1
  00197	6a 00		 push	 0
  00199	68 10 27 00 00	 push	 10000			; 00002710H
  0019e	6a 00		 push	 0
  001a0	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z ; StopBuffer
  001a9	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36870:

; 1772 :     }
; 1773 : 
; 1774 :     if(SUCCEEDED(hr))

  001ac	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001b0	7c 24		 jl	 SHORT $L36872

; 1775 :     {
; 1776 :         Sleep(2500);

  001b2	68 c4 09 00 00	 push	 2500			; 000009c4H
  001b7	e8 00 00 00 00	 call	 _Sleep@4

; 1777 :         
; 1778 :         hr = ValidateResult(pBuffer->GetCurrentPosition(&dwPlay, &dwWrite));

  001bc	8d 4d f0	 lea	 ecx, DWORD PTR _dwWrite$[ebp]
  001bf	51		 push	 ecx
  001c0	8d 55 f4	 lea	 edx, DWORD PTR _dwPlay$[ebp]
  001c3	52		 push	 edx
  001c4	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 ?GetCurrentPosition@IDirectSoundBuffer@@QAGJPAK0@Z ; IDirectSoundBuffer::GetCurrentPosition
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  001d3	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36872:

; 1779 :     }
; 1780 : 
; 1781 :     if(SUCCEEDED(hr))

  001d6	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001da	7c 19		 jl	 SHORT $L36874

; 1782 :     {
; 1783 :         DPF_TEST("forced stop:  play %lu write %lu duration %lu", dwPlay, dwWrite, dwDuration);

  001dc	8b 4d e8	 mov	 ecx, DWORD PTR _dwDuration$[ebp]
  001df	51		 push	 ecx
  001e0	8b 55 f0	 mov	 edx, DWORD PTR _dwWrite$[ebp]
  001e3	52		 push	 edx
  001e4	8b 45 f4	 mov	 eax, DWORD PTR _dwPlay$[ebp]
  001e7	50		 push	 eax
  001e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@LCCAOLKB@forced?5stop?3?5?5play?5?$CFlu?5write?5?$CFlu@
  001ed	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  001f2	83 c4 10	 add	 esp, 16			; 00000010H
$L36874:

; 1784 :     }
; 1785 : 
; 1786 :     if(SUCCEEDED(hr))

  001f5	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001f9	7c 12		 jl	 SHORT $L36877

; 1787 :     {
; 1788 :         hr = PlayBuffer(pBuffer);

  001fb	6a 00		 push	 0
  001fd	6a 00		 push	 0
  001ff	6a 00		 push	 0
  00201	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00204	51		 push	 ecx
  00205	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  0020a	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36877:

; 1789 :     }
; 1790 : 
; 1791 :     if(SUCCEEDED(hr))

  0020d	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00211	7c 21		 jl	 SHORT $L36879

; 1792 :     {
; 1793 :         Sleep(1);

  00213	6a 01		 push	 1
  00215	e8 00 00 00 00	 call	 _Sleep@4

; 1794 :         
; 1795 :         hr = ValidateResult(pBuffer->GetCurrentPosition(&dwPlay, &dwWrite));

  0021a	8d 55 f0	 lea	 edx, DWORD PTR _dwWrite$[ebp]
  0021d	52		 push	 edx
  0021e	8d 45 f4	 lea	 eax, DWORD PTR _dwPlay$[ebp]
  00221	50		 push	 eax
  00222	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00225	51		 push	 ecx
  00226	e8 00 00 00 00	 call	 ?GetCurrentPosition@IDirectSoundBuffer@@QAGJPAK0@Z ; IDirectSoundBuffer::GetCurrentPosition
  0022b	50		 push	 eax
  0022c	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00231	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36879:

; 1796 :     }
; 1797 : 
; 1798 :     if(SUCCEEDED(hr))

  00234	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00238	7c 19		 jl	 SHORT $L36881

; 1799 :     {
; 1800 :         DPF_TEST("play from current position:  play %lu write %lu duration %lu", dwPlay, dwWrite, dwDuration);

  0023a	8b 55 e8	 mov	 edx, DWORD PTR _dwDuration$[ebp]
  0023d	52		 push	 edx
  0023e	8b 45 f0	 mov	 eax, DWORD PTR _dwWrite$[ebp]
  00241	50		 push	 eax
  00242	8b 4d f4	 mov	 ecx, DWORD PTR _dwPlay$[ebp]
  00245	51		 push	 ecx
  00246	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@IGFKGOHL@play?5from?5current?5position?3?5?5pla@
  0024b	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00250	83 c4 10	 add	 esp, 16			; 00000010H
$L36881:

; 1801 :     }
; 1802 : 
; 1803 :     if(SUCCEEDED(hr))

  00253	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00257	7c 0e		 jl	 SHORT $L36884

; 1804 :     {
; 1805 :         hr = WaitBuffer(pBuffer, FALSE);

  00259	6a 00		 push	 0
  0025b	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  0025e	52		 push	 edx
  0025f	e8 00 00 00 00	 call	 ?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z ; WaitBuffer
  00264	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36884:

; 1806 :     }
; 1807 : 
; 1808 :     if(SUCCEEDED(hr))

  00267	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0026b	7c 1a		 jl	 SHORT $L36886

; 1809 :     {
; 1810 :         hr = ValidateResult(pBuffer->GetCurrentPosition(&dwPlay, &dwWrite));

  0026d	8d 45 f0	 lea	 eax, DWORD PTR _dwWrite$[ebp]
  00270	50		 push	 eax
  00271	8d 4d f4	 lea	 ecx, DWORD PTR _dwPlay$[ebp]
  00274	51		 push	 ecx
  00275	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00278	52		 push	 edx
  00279	e8 00 00 00 00	 call	 ?GetCurrentPosition@IDirectSoundBuffer@@QAGJPAK0@Z ; IDirectSoundBuffer::GetCurrentPosition
  0027e	50		 push	 eax
  0027f	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00284	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36886:

; 1811 :     }
; 1812 : 
; 1813 :     if(SUCCEEDED(hr))

  00287	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0028b	7c 19		 jl	 SHORT $L36888

; 1814 :     {
; 1815 :         DPF_TEST("natural stop:  play %lu write %lu duration %lu", dwPlay, dwWrite, dwDuration);

  0028d	8b 45 e8	 mov	 eax, DWORD PTR _dwDuration$[ebp]
  00290	50		 push	 eax
  00291	8b 4d f0	 mov	 ecx, DWORD PTR _dwWrite$[ebp]
  00294	51		 push	 ecx
  00295	8b 55 f4	 mov	 edx, DWORD PTR _dwPlay$[ebp]
  00298	52		 push	 edx
  00299	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@ICCFDMKE@natural?5stop?3?5?5play?5?$CFlu?5write?5?$CFl@
  0029e	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  002a3	83 c4 10	 add	 esp, 16			; 00000010H
$L36888:

; 1816 :     }
; 1817 : 
; 1818 :     if(SUCCEEDED(hr))

  002a6	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002aa	7c 12		 jl	 SHORT $L36891

; 1819 :     {
; 1820 :         hr = PlayBuffer(pBuffer, DSBPLAY_LOOPING);

  002ac	6a 00		 push	 0
  002ae	6a 00		 push	 0
  002b0	6a 01		 push	 1
  002b2	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  002b5	50		 push	 eax
  002b6	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  002bb	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36891:

; 1821 :     }
; 1822 : 
; 1823 :     if(SUCCEEDED(hr))

  002be	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002c2	7c 24		 jl	 SHORT $L36893

; 1824 :     {
; 1825 :         Sleep(2000);

  002c4	68 d0 07 00 00	 push	 2000			; 000007d0H
  002c9	e8 00 00 00 00	 call	 _Sleep@4

; 1826 :         
; 1827 :         hr = ValidateResult(pBuffer->GetCurrentPosition(&dwPlay, &dwWrite));

  002ce	8d 4d f0	 lea	 ecx, DWORD PTR _dwWrite$[ebp]
  002d1	51		 push	 ecx
  002d2	8d 55 f4	 lea	 edx, DWORD PTR _dwPlay$[ebp]
  002d5	52		 push	 edx
  002d6	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 ?GetCurrentPosition@IDirectSoundBuffer@@QAGJPAK0@Z ; IDirectSoundBuffer::GetCurrentPosition
  002df	50		 push	 eax
  002e0	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  002e5	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36893:

; 1828 :     }
; 1829 : 
; 1830 :     if(SUCCEEDED(hr))

  002e8	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002ec	7c 19		 jl	 SHORT $L36895

; 1831 :     {
; 1832 :         DPF_TEST("play after natural stop (2000 ms delayed):  play %lu write %lu duration %lu", dwPlay, dwWrite, dwDuration);

  002ee	8b 4d e8	 mov	 ecx, DWORD PTR _dwDuration$[ebp]
  002f1	51		 push	 ecx
  002f2	8b 55 f0	 mov	 edx, DWORD PTR _dwWrite$[ebp]
  002f5	52		 push	 edx
  002f6	8b 45 f4	 mov	 eax, DWORD PTR _dwPlay$[ebp]
  002f9	50		 push	 eax
  002fa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EM@PAIBEKMM@play?5after?5natural?5stop?5?$CI2000?5ms@
  002ff	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00304	83 c4 10	 add	 esp, 16			; 00000010H
$L36895:

; 1833 :     }
; 1834 : 
; 1835 :     if(SUCCEEDED(hr))

  00307	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0030b	7c 12		 jl	 SHORT $L36898

; 1836 :     {
; 1837 :         hr = PlayBuffer(pBuffer, DSBPLAY_FROMSTART);

  0030d	6a 00		 push	 0
  0030f	6a 00		 push	 0
  00311	6a 02		 push	 2
  00313	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00316	51		 push	 ecx
  00317	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  0031c	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36898:

; 1838 :     }
; 1839 : 
; 1840 :     if(SUCCEEDED(hr))

  0031f	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00323	7c 21		 jl	 SHORT $L36900

; 1841 :     {
; 1842 :         Sleep(1);

  00325	6a 01		 push	 1
  00327	e8 00 00 00 00	 call	 _Sleep@4

; 1843 :         
; 1844 :         hr = ValidateResult(pBuffer->GetCurrentPosition(&dwPlay, &dwWrite));

  0032c	8d 55 f0	 lea	 edx, DWORD PTR _dwWrite$[ebp]
  0032f	52		 push	 edx
  00330	8d 45 f4	 lea	 eax, DWORD PTR _dwPlay$[ebp]
  00333	50		 push	 eax
  00334	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00337	51		 push	 ecx
  00338	e8 00 00 00 00	 call	 ?GetCurrentPosition@IDirectSoundBuffer@@QAGJPAK0@Z ; IDirectSoundBuffer::GetCurrentPosition
  0033d	50		 push	 eax
  0033e	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00343	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36900:

; 1845 :     }
; 1846 : 
; 1847 :     if(SUCCEEDED(hr))

  00346	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0034a	7c 19		 jl	 SHORT $L36902

; 1848 :     {
; 1849 :         DPF_TEST("play from start:  play %lu write %lu duration %lu", dwPlay, dwWrite, dwDuration);

  0034c	8b 55 e8	 mov	 edx, DWORD PTR _dwDuration$[ebp]
  0034f	52		 push	 edx
  00350	8b 45 f0	 mov	 eax, DWORD PTR _dwWrite$[ebp]
  00353	50		 push	 eax
  00354	8b 4d f4	 mov	 ecx, DWORD PTR _dwPlay$[ebp]
  00357	51		 push	 ecx
  00358	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DC@HKPBDPLI@play?5from?5start?3?5?5play?5?$CFlu?5write@
  0035d	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00362	83 c4 10	 add	 esp, 16			; 00000010H
$L36902:

; 1850 :     }
; 1851 : 
; 1852 :     if(SUCCEEDED(hr))

  00365	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00369	7c 0e		 jl	 SHORT $L36905

; 1853 :     {
; 1854 :         hr = WaitBuffer(pBuffer, FALSE);

  0036b	6a 00		 push	 0
  0036d	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00370	52		 push	 edx
  00371	e8 00 00 00 00	 call	 ?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z ; WaitBuffer
  00376	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L36905:

; 1855 :     }
; 1856 : 
; 1857 :     RELEASE(pBuffer);

  00379	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  0037d	74 10		 je	 SHORT $L36906
  0037f	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00382	50		 push	 eax
  00383	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  00388	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L36906:

; 1858 : 
; 1859 :     return hr;

  0038f	8b 45 ec	 mov	 eax, DWORD PTR _hr$[ebp]

; 1860 : }

  00392	8b e5		 mov	 esp, ebp
  00394	5d		 pop	 ebp
  00395	c2 10 00	 ret	 16			; 00000010H
?TestStop@@YGJKKKK@Z ENDP				; TestStop
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_GetCurrentPosition@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?GetCurrentPosition@IDirectSoundBuffer@@QAGJPAK0@Z
DSOUND	SEGMENT
_this$ = 8
_pdwPlayCursor$ = 12
_pdwWriteCursor$ = 16
?GetCurrentPosition@IDirectSoundBuffer@@QAGJPAK0@Z PROC NEAR ; IDirectSoundBuffer::GetCurrentPosition, COMDAT

; 2097 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2098 :         return IDirectSoundBuffer_GetCurrentPosition(this, pdwPlayCursor, pdwWriteCursor);

  00003	8b 45 10	 mov	 eax, DWORD PTR _pdwWriteCursor$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwPlayCursor$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_GetCurrentPosition@12

; 2099 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?GetCurrentPosition@IDirectSoundBuffer@@QAGJPAK0@Z ENDP	; IDirectSoundBuffer::GetCurrentPosition
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetCurrentPosition@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetCurrentPosition@IDirectSoundBuffer@@QAGJK@Z
DSOUND	SEGMENT
_this$ = 8
_dwPlayCursor$ = 12
?SetCurrentPosition@IDirectSoundBuffer@@QAGJK@Z PROC NEAR ; IDirectSoundBuffer::SetCurrentPosition, COMDAT

; 2102 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2103 :         return IDirectSoundBuffer_SetCurrentPosition(this, dwPlayCursor);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwPlayCursor$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetCurrentPosition@8

; 2104 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetCurrentPosition@IDirectSoundBuffer@@QAGJK@Z ENDP	; IDirectSoundBuffer::SetCurrentPosition
DSOUND	ENDS
PUBLIC	?TestFrequency@@YGJKKKKKK@Z			; TestFrequency
PUBLIC	??_C@_0O@NCOEJIKL@Frequency?5?$CFlu?$AA@	; `string'
PUBLIC	?SetFrequency@IDirectSoundBuffer@@QAGJK@Z	; IDirectSoundBuffer::SetFrequency
;	COMDAT ?adwFrequencies@?1??TestFrequency@@YGJKKKKKK@Z@4QBKB
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
DSOUND_RD	SEGMENT
?adwFrequencies@?1??TestFrequency@@YGJKKKKKK@Z@4QBKB DD 00H ; `TestFrequency'::`2'::adwFrequencies
	DD	01f40H
	DD	02b11H
	DD	03e80H
	DD	05622H
	DD	07d00H
	DD	0ac44H
	DD	0bb80H
	DD	0fa00H
	DD	017700H
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@NCOEJIKL@Frequency?5?$CFlu?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@NCOEJIKL@Frequency?5?$CFlu?$AA@ DB 'Frequency %lu', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestFrequency@@YGJKKKKKK@Z
DSOUND	SEGMENT
_hr$ = -12
_dwFrequency$ = -8
_pBuffer$ = -4
_dwFlags$ = 8
_dwFormatTag$ = 12
_dwSampleRate$ = 16
_dwBitsPerSample$ = 20
_dwChannelCount$ = 24
_dwDelay$ = 28
?TestFrequency@@YGJKKKKKK@Z PROC NEAR			; TestFrequency, COMDAT

; 1895 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1896 :     static const DWORD      adwFrequencies[]    = { 0, 8000, 11025, 16000, 22050, 32000, 44100, 48000, 64000, 96000 };
; 1897 :     LPDIRECTSOUNDBUFFER     pBuffer             = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 1898 :     DWORD                   dwFrequency;
; 1899 :     HRESULT                 hr;
; 1900 : 
; 1901 :     hr = CreateStdBuffer(dwFlags, CreateFormat(dwFormatTag, dwSampleRate, dwBitsPerSample, dwChannelCount), 0, NULL, &pBuffer);

  0000d	6a 00		 push	 0
  0000f	8d 45 fc	 lea	 eax, DWORD PTR _pBuffer$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	8b 4d 18	 mov	 ecx, DWORD PTR _dwChannelCount$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 14	 mov	 edx, DWORD PTR _dwBitsPerSample$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 10	 mov	 eax, DWORD PTR _dwSampleRate$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFormatTag$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  0002c	50		 push	 eax
  0002d	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 ?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z ; CreateStdBuffer
  00036	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 1902 : 
; 1903 :     if(SUCCEEDED(hr))

  00039	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003d	7c 0f		 jl	 SHORT $L36921

; 1904 :     {
; 1905 :         PlayBuffer(pBuffer, DSBPLAY_LOOPING);

  0003f	6a 00		 push	 0
  00041	6a 00		 push	 0
  00043	6a 01		 push	 1
  00045	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
$L36921:

; 1906 :     }
; 1907 : 
; 1908 :     if(SUCCEEDED(hr))

  0004e	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00052	7c 64		 jl	 SHORT $L36923

; 1909 :     {
; 1910 :         for(dwFrequency = 0; (dwFrequency < NUMELMS(adwFrequencies)) && SUCCEEDED(hr); dwFrequency++)

  00054	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwFrequency$[ebp], 0
  0005b	eb 09		 jmp	 SHORT $L36925
$L36926:
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _dwFrequency$[ebp]
  00060	83 c1 01	 add	 ecx, 1
  00063	89 4d f8	 mov	 DWORD PTR _dwFrequency$[ebp], ecx
$L36925:
  00066	83 7d f8 0a	 cmp	 DWORD PTR _dwFrequency$[ebp], 10 ; 0000000aH
  0006a	73 4c		 jae	 SHORT $L36923
  0006c	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00070	7c 46		 jl	 SHORT $L36923

; 1911 :         {
; 1912 :             DPF_TEST("Frequency %lu", adwFrequencies[dwFrequency]);

  00072	8b 55 f8	 mov	 edx, DWORD PTR _dwFrequency$[ebp]
  00075	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?adwFrequencies@?1??TestFrequency@@YGJKKKKKK@Z@4QBKB[edx*4]
  0007c	50		 push	 eax
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@NCOEJIKL@Frequency?5?$CFlu?$AA@
  00082	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00087	83 c4 08	 add	 esp, 8

; 1913 : 
; 1914 :             hr = ValidateResult(pBuffer->SetFrequency(adwFrequencies[dwFrequency]));

  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _dwFrequency$[ebp]
  0008d	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?adwFrequencies@?1??TestFrequency@@YGJKKKKKK@Z@4QBKB[ecx*4]
  00094	52		 push	 edx
  00095	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?SetFrequency@IDirectSoundBuffer@@QAGJK@Z ; IDirectSoundBuffer::SetFrequency
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000a4	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 1915 : 
; 1916 :             if(SUCCEEDED(hr))

  000a7	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ab	7c 09		 jl	 SHORT $L36930

; 1917 :             {
; 1918 :                 Sleep(dwDelay);

  000ad	8b 4d 1c	 mov	 ecx, DWORD PTR _dwDelay$[ebp]
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 _Sleep@4
$L36930:

; 1919 :             }
; 1920 :         }

  000b6	eb a5		 jmp	 SHORT $L36926
$L36923:

; 1921 :     }
; 1922 : 
; 1923 :     RELEASE(pBuffer);

  000b8	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  000bc	74 10		 je	 SHORT $L36931
  000be	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  000c7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L36931:

; 1924 : 
; 1925 :     return hr;

  000ce	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 1926 : }

  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 18 00	 ret	 24			; 00000018H
?TestFrequency@@YGJKKKKKK@Z ENDP			; TestFrequency
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetFrequency@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetFrequency@IDirectSoundBuffer@@QAGJK@Z
DSOUND	SEGMENT
_this$ = 8
_dwFrequency$ = 12
?SetFrequency@IDirectSoundBuffer@@QAGJK@Z PROC NEAR	; IDirectSoundBuffer::SetFrequency, COMDAT

; 1942 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1943 :         return IDirectSoundBuffer_SetFrequency(this, dwFrequency);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwFrequency$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetFrequency@8

; 1944 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetFrequency@IDirectSoundBuffer@@QAGJK@Z ENDP		; IDirectSoundBuffer::SetFrequency
DSOUND	ENDS
PUBLIC	?TestDiscontinuity@@YGJKKKKKKH@Z		; TestDiscontinuity
EXTRN	?CreateStdStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z:NEAR ; CreateStdStream
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
;	COMDAT ?TestDiscontinuity@@YGJKKKKKKH@Z
DSOUND	SEGMENT
_dwDuration$ = -60
_hr$ = -56
_z$ = -52
_dwPacketCount$ = -48
_xmb$ = -44
_dwPacketsThisTime$ = -20
_pwfxFormat$ = -12
_pStream$ = -8
_pvDataBuffer$ = -4
_dwFlags$ = 8
_dwFormatTag$ = 12
_dwSampleRate$ = 16
_dwBitsPerSample$ = 20
_dwChannelCount$ = 24
_dwPacketSize$ = 28
_fStarve$ = 32
?TestDiscontinuity@@YGJKKKKKKH@Z PROC NEAR		; TestDiscontinuity, COMDAT

; 1958 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	56		 push	 esi

; 1959 :     LPCWAVEFORMATEX         pwfxFormat          = CreateFormat(dwFormatTag, dwSampleRate, dwBitsPerSample, dwChannelCount);

  00007	8b 45 18	 mov	 eax, DWORD PTR _dwChannelCount$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _dwBitsPerSample$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 10	 mov	 edx, DWORD PTR _dwSampleRate$[ebp]
  00012	52		 push	 edx
  00013	8b 45 0c	 mov	 eax, DWORD PTR _dwFormatTag$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  0001c	89 45 f4	 mov	 DWORD PTR _pwfxFormat$[ebp], eax

; 1960 :     LPDIRECTSOUNDSTREAM     pStream             = NULL;

  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0

; 1961 :     LPVOID                  pvDataBuffer        = NULL;

  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pvDataBuffer$[ebp], 0

; 1962 :     DWORD                   dwPacketsThisTime   = 0;

  0002d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwPacketsThisTime$[ebp], 0

; 1963 :     DWORD                   dwDuration;
; 1964 :     DWORD                   dwPacketCount;
; 1965 :     XMEDIAPACKET            xmb;
; 1966 :     HRESULT                 hr;
; 1967 :     DWORD                   i, z;
; 1968 : 
; 1969 :     //
; 1970 :     // Create the stream
; 1971 : 
; 1972 :     hr = CreateStdStream(dwFlags, pwfxFormat, 0, &dwPacketSize, NULL, NULL, NULL, &pStream, &pvDataBuffer, &dwDuration, &dwPacketCount);

  00034	8d 4d d0	 lea	 ecx, DWORD PTR _dwPacketCount$[ebp]
  00037	51		 push	 ecx
  00038	8d 55 c4	 lea	 edx, DWORD PTR _dwDuration$[ebp]
  0003b	52		 push	 edx
  0003c	8d 45 fc	 lea	 eax, DWORD PTR _pvDataBuffer$[ebp]
  0003f	50		 push	 eax
  00040	8d 4d f8	 lea	 ecx, DWORD PTR _pStream$[ebp]
  00043	51		 push	 ecx
  00044	6a 00		 push	 0
  00046	6a 00		 push	 0
  00048	6a 00		 push	 0
  0004a	8d 55 1c	 lea	 edx, DWORD PTR _dwPacketSize$[ebp]
  0004d	52		 push	 edx
  0004e	6a 00		 push	 0
  00050	8b 45 f4	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00053	50		 push	 eax
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 ?CreateStdStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z ; CreateStdStream
  0005d	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax

; 1973 : 
; 1974 :     //
; 1975 :     // Enter the stream loop
; 1976 :     //
; 1977 : 
; 1978 :     if(SUCCEEDED(hr))

  00060	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00064	0f 8c fc 00 00
	00		 jl	 $L36952

; 1979 :     {
; 1980 :         ZeroMemory(&xmb, sizeof(xmb));

  0006a	6a 18		 push	 24			; 00000018H
  0006c	6a 00		 push	 0
  0006e	8d 55 d4	 lea	 edx, DWORD PTR _xmb$[ebp]
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 _memset
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1981 :         
; 1982 :         xmb.pvBuffer = pvDataBuffer;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _pvDataBuffer$[ebp]
  0007d	89 45 d4	 mov	 DWORD PTR _xmb$[ebp], eax

; 1983 :         xmb.dwMaxSize = dwPacketSize;

  00080	8b 4d 1c	 mov	 ecx, DWORD PTR _dwPacketSize$[ebp]
  00083	89 4d d8	 mov	 DWORD PTR _xmb$[ebp+4], ecx
$L36954:

; 1984 : 
; 1985 :         while(dwPacketCount)

  00086	83 7d d0 00	 cmp	 DWORD PTR _dwPacketCount$[ebp], 0
  0008a	0f 84 d6 00 00
	00		 je	 $L36952

; 1986 :         {
; 1987 :             dwPacketsThisTime = ((dwPacketsThisTime + 1) % 2) + 1;

  00090	8b 45 ec	 mov	 eax, DWORD PTR _dwPacketsThisTime$[ebp]
  00093	83 c0 01	 add	 eax, 1
  00096	33 d2		 xor	 edx, edx
  00098	b9 02 00 00 00	 mov	 ecx, 2
  0009d	f7 f1		 div	 ecx
  0009f	83 c2 01	 add	 edx, 1
  000a2	89 55 ec	 mov	 DWORD PTR _dwPacketsThisTime$[ebp], edx

; 1988 : 
; 1989 :             for(z = 0; (z < dwPacketsThisTime) && dwPacketCount && SUCCEEDED(hr); z++)

  000a5	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  000ac	eb 09		 jmp	 SHORT $L36957
$L36958:
  000ae	8b 55 cc	 mov	 edx, DWORD PTR _z$[ebp]
  000b1	83 c2 01	 add	 edx, 1
  000b4	89 55 cc	 mov	 DWORD PTR _z$[ebp], edx
$L36957:
  000b7	8b 45 cc	 mov	 eax, DWORD PTR _z$[ebp]
  000ba	3b 45 ec	 cmp	 eax, DWORD PTR _dwPacketsThisTime$[ebp]
  000bd	73 55		 jae	 SHORT $L36959
  000bf	83 7d d0 00	 cmp	 DWORD PTR _dwPacketCount$[ebp], 0
  000c3	74 4f		 je	 SHORT $L36959
  000c5	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c9	7c 49		 jl	 SHORT $L36959

; 1990 :             {
; 1991 :                 DirectSoundDoWork();

  000cb	e8 00 00 00 00	 call	 _DirectSoundDoWork@0

; 1992 :             
; 1993 :                 if(!--dwPacketCount)

  000d0	8b 4d d0	 mov	 ecx, DWORD PTR _dwPacketCount$[ebp]
  000d3	83 e9 01	 sub	 ecx, 1
  000d6	89 4d d0	 mov	 DWORD PTR _dwPacketCount$[ebp], ecx
  000d9	83 7d d0 00	 cmp	 DWORD PTR _dwPacketCount$[ebp], 0
  000dd	75 06		 jne	 SHORT $L36960

; 1994 :                 {
; 1995 :                     xmb.dwMaxSize = dwDuration;

  000df	8b 55 c4	 mov	 edx, DWORD PTR _dwDuration$[ebp]
  000e2	89 55 d8	 mov	 DWORD PTR _xmb$[ebp+4], edx
$L36960:

; 1996 :                 }                
; 1997 :             
; 1998 :                 hr = ValidateResult(pStream->Process(&xmb, NULL));

  000e5	6a 00		 push	 0
  000e7	8d 45 d4	 lea	 eax, DWORD PTR _xmb$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d f8	 mov	 ecx, DWORD PTR _pStream$[ebp]
  000ee	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f0	8b 45 f8	 mov	 eax, DWORD PTR _pStream$[ebp]
  000f3	50		 push	 eax
  000f4	ff 52 10	 call	 DWORD PTR [edx+16]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000fd	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax

; 1999 : 
; 2000 :                 xmb.pvBuffer = (LPBYTE)xmb.pvBuffer + xmb.dwMaxSize;

  00100	8b 4d d4	 mov	 ecx, DWORD PTR _xmb$[ebp]
  00103	03 4d d8	 add	 ecx, DWORD PTR _xmb$[ebp+4]
  00106	89 4d d4	 mov	 DWORD PTR _xmb$[ebp], ecx

; 2001 :             
; 2002 :                 dwDuration -= xmb.dwMaxSize;

  00109	8b 55 c4	 mov	 edx, DWORD PTR _dwDuration$[ebp]
  0010c	2b 55 d8	 sub	 edx, DWORD PTR _xmb$[ebp+4]
  0010f	89 55 c4	 mov	 DWORD PTR _dwDuration$[ebp], edx

; 2003 :             }

  00112	eb 9a		 jmp	 SHORT $L36958
$L36959:

; 2004 : 
; 2005 :             if(SUCCEEDED(hr) && !fStarve)

  00114	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00118	7c 1b		 jl	 SHORT $L36963
  0011a	83 7d 20 00	 cmp	 DWORD PTR _fStarve$[ebp], 0
  0011e	75 15		 jne	 SHORT $L36963

; 2006 :             {
; 2007 :                 hr = ValidateResult(pStream->Discontinuity());

  00120	8b 45 f8	 mov	 eax, DWORD PTR _pStream$[ebp]
  00123	8b 08		 mov	 ecx, DWORD PTR [eax]
  00125	8b 55 f8	 mov	 edx, DWORD PTR _pStream$[ebp]
  00128	52		 push	 edx
  00129	ff 51 14	 call	 DWORD PTR [ecx+20]
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00132	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax
$L36963:

; 2008 :             }
; 2009 : 
; 2010 :             if(SUCCEEDED(hr))

  00135	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00139	7c 26		 jl	 SHORT $L36965

; 2011 :             {
; 2012 :                 Sleep((dwPacketSize * dwPacketsThisTime * 2) / (pwfxFormat->nAvgBytesPerSec / 1000));

  0013b	8b 4d 1c	 mov	 ecx, DWORD PTR _dwPacketSize$[ebp]
  0013e	0f af 4d ec	 imul	 ecx, DWORD PTR _dwPacketsThisTime$[ebp]
  00142	d1 e1		 shl	 ecx, 1
  00144	8b 55 f4	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  00147	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0014a	33 d2		 xor	 edx, edx
  0014c	be e8 03 00 00	 mov	 esi, 1000		; 000003e8H
  00151	f7 f6		 div	 esi
  00153	8b f0		 mov	 esi, eax
  00155	8b c1		 mov	 eax, ecx
  00157	33 d2		 xor	 edx, edx
  00159	f7 f6		 div	 esi
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _Sleep@4
$L36965:

; 2013 :             }
; 2014 :         }

  00161	e9 20 ff ff ff	 jmp	 $L36954
$L36952:

; 2015 :     }
; 2016 : 
; 2017 :     //
; 2018 :     // Clean up
; 2019 :     //
; 2020 : 
; 2021 :     RELEASE(pStream);

  00166	83 7d f8 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  0016a	74 13		 je	 SHORT $L36966
  0016c	8b 45 f8	 mov	 eax, DWORD PTR _pStream$[ebp]
  0016f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00171	8b 55 f8	 mov	 edx, DWORD PTR _pStream$[ebp]
  00174	52		 push	 edx
  00175	ff 51 04	 call	 DWORD PTR [ecx+4]
  00178	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0
$L36966:

; 2022 :     FREE(pvDataBuffer);

  0017f	8d 45 fc	 lea	 eax, DWORD PTR _pvDataBuffer$[ebp]
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 2023 : 
; 2024 :     return hr;

  00188	8b 45 c8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2025 : }

  0018b	5e		 pop	 esi
  0018c	8b e5		 mov	 esp, ebp
  0018e	5d		 pop	 ebp
  0018f	c2 1c 00	 ret	 28			; 0000001cH
?TestDiscontinuity@@YGJKKKKKKH@Z ENDP			; TestDiscontinuity
DSOUND	ENDS
PUBLIC	?TestDeferredCommandRelease@@YGJXZ		; TestDeferredCommandRelease
; Function compile flags: /Odt
;	COMDAT ?TestDeferredCommandRelease@@YGJXZ
DSOUND	SEGMENT
_hr$ = -8
_pBuffer$ = -4
?TestDeferredCommandRelease@@YGJXZ PROC NEAR		; TestDeferredCommandRelease, COMDAT

; 2052 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2053 :     LPDIRECTSOUNDBUFFER     pBuffer = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 2054 :     HRESULT                 hr;
; 2055 : 
; 2056 :     hr = CreateStdBuffer(0, CreateFormat(WAVE_FORMAT_PCM, 32000, 16, 2), 0, NULL, &pBuffer);

  0000d	6a 00		 push	 0
  0000f	8d 45 fc	 lea	 eax, DWORD PTR _pBuffer$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	6a 02		 push	 2
  00019	6a 10		 push	 16			; 00000010H
  0001b	68 00 7d 00 00	 push	 32000			; 00007d00H
  00020	6a 01		 push	 1
  00022	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  00027	50		 push	 eax
  00028	6a 00		 push	 0
  0002a	e8 00 00 00 00	 call	 ?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z ; CreateStdBuffer
  0002f	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 2057 : 
; 2058 :     if(SUCCEEDED(hr))

  00032	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00036	7c 12		 jl	 SHORT $L36974

; 2059 :     {
; 2060 :         hr = PlayBuffer(pBuffer, DSBPLAY_LOOPING);

  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	6a 01		 push	 1
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  00047	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36974:

; 2061 :     }
; 2062 : 
; 2063 :     if(SUCCEEDED(hr))

  0004a	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004e	7c 17		 jl	 SHORT $L36976

; 2064 :     {
; 2065 :         hr = StopBuffer(pBuffer, DSBSTOPEX_ENVELOPE, 10000);

  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	68 10 27 00 00	 push	 10000			; 00002710H
  00059	6a 01		 push	 1
  0005b	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  0005e	52		 push	 edx
  0005f	e8 00 00 00 00	 call	 ?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z ; StopBuffer
  00064	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36976:

; 2066 :     }
; 2067 : 
; 2068 :     RELEASE(pBuffer);

  00067	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  0006b	74 10		 je	 SHORT $L36977
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  00076	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L36977:

; 2069 : 
; 2070 :     return hr;

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2071 : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?TestDeferredCommandRelease@@YGJXZ ENDP			; TestDeferredCommandRelease
DSOUND	ENDS
PUBLIC	?TestMultiChannel@@YGJKKK@Z			; TestMultiChannel
PUBLIC	??_C@_0CL@CPLOLKPJ@Converting?5from?5?$CFlu?5channel?5to?5?$CF@ ; `string'
EXTRN	?LoadStdWaveFile@@YGJPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z:NEAR ; LoadStdWaveFile
EXTRN	?MakeMultiChannel@@YGJPBUtWAVEFORMATEX@@PAU1@PBXKPAPAXPAK@Z:NEAR ; MakeMultiChannel
;	COMDAT ??_C@_0CL@CPLOLKPJ@Converting?5from?5?$CFlu?5channel?5to?5?$CF@
DSOUND_RD	SEGMENT
??_C@_0CL@CPLOLKPJ@Converting?5from?5?$CFlu?5channel?5to?5?$CF@ DB 'Conve'
	DB	'rting from %lu channel to %lu channel', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestMultiChannel@@YGJKKK@Z
DSOUND	SEGMENT
_pwfxSrc$ = -76
_dwSrcDataSize$ = -72
_hr$ = -68
_dsbd$ = -64
_pvDstData$ = -40
_dwDstDataSize$ = -36
_wfxDst$ = -32
_pWaveFile$ = -12
_pvSrcData$ = -8
_pBuffer$ = -4
_dwSampleRate$ = 8
_dwBitsPerSample$ = 12
_dwChannelCount$ = 16
?TestMultiChannel@@YGJKKK@Z PROC NEAR			; TestMultiChannel, COMDAT

; 2262 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH

; 2263 :     LPCWAVEFORMATEX         pwfxSrc             = CreateFormat(WAVE_FORMAT_PCM, dwSampleRate, dwBitsPerSample, dwChannelCount);

  00006	8b 45 10	 mov	 eax, DWORD PTR _dwChannelCount$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwBitsPerSample$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _dwSampleRate$[ebp]
  00011	52		 push	 edx
  00012	6a 01		 push	 1
  00014	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  00019	89 45 b4	 mov	 DWORD PTR _pwfxSrc$[ebp], eax

; 2264 :     XFileMediaObject *      pWaveFile           = NULL;

  0001c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pWaveFile$[ebp], 0

; 2265 :     LPVOID                  pvSrcData           = NULL;

  00023	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pvSrcData$[ebp], 0

; 2266 :     LPVOID                  pvDstData           = NULL;

  0002a	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _pvDstData$[ebp], 0

; 2267 :     LPDIRECTSOUNDBUFFER     pBuffer             = NULL;

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 2268 :     WAVEFORMATEX            wfxDst;
; 2269 :     DWORD                   dwSrcDataSize;
; 2270 :     DWORD                   dwDstDataSize;
; 2271 :     DSBUFFERDESC            dsbd;
; 2272 :     HRESULT                 hr;
; 2273 : 
; 2274 :     ZeroMemory(&dsbd, sizeof(dsbd));

  00038	6a 18		 push	 24			; 00000018H
  0003a	6a 00		 push	 0
  0003c	8d 45 c0	 lea	 eax, DWORD PTR _dsbd$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _memset
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2275 : 
; 2276 :     dsbd.dwSize = sizeof(dsbd);

  00048	c7 45 c0 18 00
	00 00		 mov	 DWORD PTR _dsbd$[ebp], 24 ; 00000018H

; 2277 :     dsbd.dwFlags = 0;

  0004f	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _dsbd$[ebp+4], 0

; 2278 :     dsbd.lpwfxFormat = &wfxDst;

  00056	8d 4d e0	 lea	 ecx, DWORD PTR _wfxDst$[ebp]
  00059	89 4d cc	 mov	 DWORD PTR _dsbd$[ebp+12], ecx

; 2279 :     
; 2280 :     //
; 2281 :     // Load the source wave file
; 2282 :     //
; 2283 : 
; 2284 :     hr = LoadStdWaveFile(pwfxSrc, &pvSrcData, &dwSrcDataSize, &pWaveFile);

  0005c	8d 55 f4	 lea	 edx, DWORD PTR _pWaveFile$[ebp]
  0005f	52		 push	 edx
  00060	8d 45 b8	 lea	 eax, DWORD PTR _dwSrcDataSize$[ebp]
  00063	50		 push	 eax
  00064	8d 4d f8	 lea	 ecx, DWORD PTR _pvSrcData$[ebp]
  00067	51		 push	 ecx
  00068	8b 55 b4	 mov	 edx, DWORD PTR _pwfxSrc$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ?LoadStdWaveFile@@YGJPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z ; LoadStdWaveFile
  00071	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 2285 : 
; 2286 :     //
; 2287 :     // Enter the multichannel test loop
; 2288 :     //
; 2289 : 
; 2290 :     if(SUCCEEDED(hr))

  00074	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00078	0f 8c 16 01 00
	00		 jl	 $L36994

; 2291 :     {
; 2292 :         for(wfxDst.nChannels = pwfxSrc->nChannels + 1; wfxDst.nChannels <= 6; wfxDst.nChannels++)

  0007e	8b 45 b4	 mov	 eax, DWORD PTR _pwfxSrc$[ebp]
  00081	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00085	83 c1 01	 add	 ecx, 1
  00088	66 89 4d e2	 mov	 WORD PTR _wfxDst$[ebp+2], cx
  0008c	eb 0c		 jmp	 SHORT $L36995
$L36996:
  0008e	66 8b 55 e2	 mov	 dx, WORD PTR _wfxDst$[ebp+2]
  00092	66 83 c2 01	 add	 dx, 1
  00096	66 89 55 e2	 mov	 WORD PTR _wfxDst$[ebp+2], dx
$L36995:
  0009a	0f b7 45 e2	 movzx	 eax, WORD PTR _wfxDst$[ebp+2]
  0009e	83 f8 06	 cmp	 eax, 6
  000a1	0f 8f ed 00 00
	00		 jg	 $L36994

; 2293 :         {
; 2294 :             if(wfxDst.nChannels % pwfxSrc->nChannels)

  000a7	0f b7 45 e2	 movzx	 eax, WORD PTR _wfxDst$[ebp+2]
  000ab	8b 4d b4	 mov	 ecx, DWORD PTR _pwfxSrc$[ebp]
  000ae	0f b7 49 02	 movzx	 ecx, WORD PTR [ecx+2]
  000b2	99		 cdq
  000b3	f7 f9		 idiv	 ecx
  000b5	85 d2		 test	 edx, edx
  000b7	74 02		 je	 SHORT $L36998

; 2295 :             {
; 2296 :                 continue;

  000b9	eb d3		 jmp	 SHORT $L36996
$L36998:

; 2297 :             }
; 2298 : 
; 2299 :             if(wfxDst.nChannels % 2)

  000bb	0f b7 55 e2	 movzx	 edx, WORD PTR _wfxDst$[ebp+2]
  000bf	81 e2 01 00 00
	80		 and	 edx, -2147483647	; 80000001H
  000c5	79 05		 jns	 SHORT $L38146
  000c7	4a		 dec	 edx
  000c8	83 ca fe	 or	 edx, -2			; fffffffeH
  000cb	42		 inc	 edx
$L38146:
  000cc	85 d2		 test	 edx, edx
  000ce	74 02		 je	 SHORT $L36999

; 2300 :             {
; 2301 :                 continue;

  000d0	eb bc		 jmp	 SHORT $L36996
$L36999:

; 2302 :             }
; 2303 : 
; 2304 :             //
; 2305 :             // Convert to multichannel
; 2306 :             //
; 2307 : 
; 2308 :             DPF_TEST("Converting from %lu channel to %lu channel", pwfxSrc->nChannels, wfxDst.nChannels);

  000d2	0f b7 45 e2	 movzx	 eax, WORD PTR _wfxDst$[ebp+2]
  000d6	50		 push	 eax
  000d7	8b 4d b4	 mov	 ecx, DWORD PTR _pwfxSrc$[ebp]
  000da	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  000de	52		 push	 edx
  000df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@CPLOLKPJ@Converting?5from?5?$CFlu?5channel?5to?5?$CF@
  000e4	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2309 :             
; 2310 :             hr = MakeMultiChannel(pwfxSrc, &wfxDst, pvSrcData, dwSrcDataSize, &pvDstData, &dwDstDataSize);

  000ec	8d 45 dc	 lea	 eax, DWORD PTR _dwDstDataSize$[ebp]
  000ef	50		 push	 eax
  000f0	8d 4d d8	 lea	 ecx, DWORD PTR _pvDstData$[ebp]
  000f3	51		 push	 ecx
  000f4	8b 55 b8	 mov	 edx, DWORD PTR _dwSrcDataSize$[ebp]
  000f7	52		 push	 edx
  000f8	8b 45 f8	 mov	 eax, DWORD PTR _pvSrcData$[ebp]
  000fb	50		 push	 eax
  000fc	8d 4d e0	 lea	 ecx, DWORD PTR _wfxDst$[ebp]
  000ff	51		 push	 ecx
  00100	8b 55 b4	 mov	 edx, DWORD PTR _pwfxSrc$[ebp]
  00103	52		 push	 edx
  00104	e8 00 00 00 00	 call	 ?MakeMultiChannel@@YGJPBUtWAVEFORMATEX@@PAU1@PBXKPAPAXPAK@Z ; MakeMultiChannel
  00109	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax

; 2311 : 
; 2312 :             //
; 2313 :             // Create the buffer, making sure to keep it to 2047 SGEs
; 2314 :             //
; 2315 :             
; 2316 :             if(SUCCEEDED(hr))

  0010c	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00110	7c 16		 jl	 SHORT $L37002

; 2317 :             {
; 2318 :                 hr = ValidateResult(DirectSoundCreateBuffer(&dsbd, &pBuffer));

  00112	8d 45 fc	 lea	 eax, DWORD PTR _pBuffer$[ebp]
  00115	50		 push	 eax
  00116	8d 4d c0	 lea	 ecx, DWORD PTR _dsbd$[ebp]
  00119	51		 push	 ecx
  0011a	e8 00 00 00 00	 call	 _DirectSoundCreateBuffer@8
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00125	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax
$L37002:

; 2319 :             }
; 2320 : 
; 2321 :             if(SUCCEEDED(hr))

  00128	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0012c	7c 0c		 jl	 SHORT $L37004

; 2322 :             {
; 2323 :                 hr = ClampBufferSize(&dwDstDataSize);

  0012e	8d 55 dc	 lea	 edx, DWORD PTR _dwDstDataSize$[ebp]
  00131	52		 push	 edx
  00132	e8 00 00 00 00	 call	 ?ClampBufferSize@@YGJPAK@Z ; ClampBufferSize
  00137	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax
$L37004:

; 2324 :             }
; 2325 : 
; 2326 :             if(SUCCEEDED(hr))

  0013a	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0013e	7c 1a		 jl	 SHORT $L37006

; 2327 :             {
; 2328 :                 hr = ValidateResult(pBuffer->SetBufferData(pvDstData, dwDstDataSize));

  00140	8b 45 dc	 mov	 eax, DWORD PTR _dwDstDataSize$[ebp]
  00143	50		 push	 eax
  00144	8b 4d d8	 mov	 ecx, DWORD PTR _pvDstData$[ebp]
  00147	51		 push	 ecx
  00148	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  0014b	52		 push	 edx
  0014c	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00157	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax
$L37006:

; 2329 :             }
; 2330 : 
; 2331 :             //
; 2332 :             // Start playback
; 2333 :             //
; 2334 : 
; 2335 :             if(SUCCEEDED(hr))

  0015a	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0015e	7c 10		 jl	 SHORT $L37008

; 2336 :             {
; 2337 :                 hr = PlayBufferToCompletion(pBuffer);

  00160	6a 00		 push	 0
  00162	6a 00		 push	 0
  00164	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?PlayBufferToCompletion@@YGJPAUIDirectSoundBuffer@@KK@Z ; PlayBufferToCompletion
  0016d	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax
$L37008:

; 2338 :             }
; 2339 : 
; 2340 :             //
; 2341 :             // Clean up
; 2342 :             //
; 2343 : 
; 2344 :             FREE(pvDstData);

  00170	8d 4d d8	 lea	 ecx, DWORD PTR _pvDstData$[ebp]
  00173	51		 push	 ecx
  00174	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 2345 :             RELEASE(pBuffer);

  00179	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  0017d	74 10		 je	 SHORT $L37010
  0017f	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00182	52		 push	 edx
  00183	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  00188	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L37010:

; 2346 :         }

  0018f	e9 fa fe ff ff	 jmp	 $L36996
$L36994:

; 2347 :     }
; 2348 : 
; 2349 :     //
; 2350 :     // Clean up
; 2351 :     //
; 2352 : 
; 2353 :     RELEASE(pWaveFile);

  00194	83 7d f4 00	 cmp	 DWORD PTR _pWaveFile$[ebp], 0
  00198	74 13		 je	 SHORT $L37011
  0019a	8b 45 f4	 mov	 eax, DWORD PTR _pWaveFile$[ebp]
  0019d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019f	8b 55 f4	 mov	 edx, DWORD PTR _pWaveFile$[ebp]
  001a2	52		 push	 edx
  001a3	ff 51 04	 call	 DWORD PTR [ecx+4]
  001a6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pWaveFile$[ebp], 0
$L37011:

; 2354 :     FREE(pvSrcData);

  001ad	8d 45 f8	 lea	 eax, DWORD PTR _pvSrcData$[ebp]
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 2355 : 
; 2356 :     return hr;

  001b6	8b 45 bc	 mov	 eax, DWORD PTR _hr$[ebp]

; 2357 : }

  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c2 0c 00	 ret	 12			; 0000000cH
?TestMultiChannel@@YGJKKK@Z ENDP			; TestMultiChannel
DSOUND	ENDS
PUBLIC	?TestMultiChannel2@@YGJK@Z			; TestMultiChannel2
EXTRN	?GenerateTone@@YGXPAXKKKKK@Z:NEAR		; GenerateTone
; Function compile flags: /Odt
;	COMDAT ?TestMultiChannel2@@YGJK@Z
DSOUND	SEGMENT
_wfxMulti$ = -100
_c$ = -80
_hr$ = -76
_pvMultiData$ = -72
_dsbd$ = -68
_b$ = -44
_pnMultiData$ = -40
_pvMonoData$ = -36
_wfxMono$ = -32
_a$ = -12
_pnMonoData$ = -8
_pBuffer$ = -4
_dwChannelCount$ = 8
?TestMultiChannel2@@YGJK@Z PROC NEAR			; TestMultiChannel2, COMDAT

; 2385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H

; 2386 :     static const DWORD      dwSegmentLength = 2;
; 2387 :     LPVOID                  pvMonoData      = NULL;

  00006	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pvMonoData$[ebp], 0

; 2388 :     LPVOID                  pvMultiData     = NULL;

  0000d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _pvMultiData$[ebp], 0

; 2389 :     LPDIRECTSOUNDBUFFER     pBuffer         = NULL;

  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 2390 :     WAVEFORMATEX            wfxMono;
; 2391 :     WAVEFORMATEX            wfxMulti;
; 2392 :     short *                 pnMonoData;
; 2393 :     short *                 pnMultiData;
; 2394 :     DSBUFFERDESC            dsbd;
; 2395 :     HRESULT                 hr;
; 2396 :     DWORD                   a, b, c;
; 2397 : 
; 2398 :     XAudioCreatePcmFormat(1, 48000, 16, &wfxMono);

  0001b	8d 45 e0	 lea	 eax, DWORD PTR _wfxMono$[ebp]
  0001e	50		 push	 eax
  0001f	6a 10		 push	 16			; 00000010H
  00021	68 80 bb 00 00	 push	 48000			; 0000bb80H
  00026	6a 01		 push	 1
  00028	e8 00 00 00 00	 call	 _XAudioCreatePcmFormat@16

; 2399 :     XAudioCreatePcmFormat(6, wfxMono.nSamplesPerSec, wfxMono.wBitsPerSample, &wfxMulti);

  0002d	8d 4d 9c	 lea	 ecx, DWORD PTR _wfxMulti$[ebp]
  00030	51		 push	 ecx
  00031	66 8b 55 ee	 mov	 dx, WORD PTR _wfxMono$[ebp+14]
  00035	52		 push	 edx
  00036	8b 45 e4	 mov	 eax, DWORD PTR _wfxMono$[ebp+4]
  00039	50		 push	 eax
  0003a	6a 06		 push	 6
  0003c	e8 00 00 00 00	 call	 _XAudioCreatePcmFormat@16

; 2400 : 
; 2401 :     hr = MALLOC(pvMonoData, BYTE, wfxMono.nAvgBytesPerSec * dwSegmentLength);

  00041	8b 4d e8	 mov	 ecx, DWORD PTR _wfxMono$[ebp+8]
  00044	d1 e1		 shl	 ecx, 1
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  0004c	89 45 dc	 mov	 DWORD PTR _pvMonoData$[ebp], eax
  0004f	8b 55 dc	 mov	 edx, DWORD PTR _pvMonoData$[ebp]
  00052	52		 push	 edx
  00053	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  00058	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax

; 2402 : 
; 2403 :     if(SUCCEEDED(hr))

  0005b	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005f	7c 21		 jl	 SHORT $L37033

; 2404 :     {
; 2405 :         hr = MALLOC(pvMultiData, BYTE, wfxMulti.nAvgBytesPerSec * wfxMulti.nChannels * dwSegmentLength);

  00061	0f b7 45 9e	 movzx	 eax, WORD PTR _wfxMulti$[ebp+2]
  00065	8b 4d a4	 mov	 ecx, DWORD PTR _wfxMulti$[ebp+8]
  00068	0f af c8	 imul	 ecx, eax
  0006b	d1 e1		 shl	 ecx, 1
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  00073	89 45 b8	 mov	 DWORD PTR _pvMultiData$[ebp], eax
  00076	8b 55 b8	 mov	 edx, DWORD PTR _pvMultiData$[ebp]
  00079	52		 push	 edx
  0007a	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  0007f	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax
$L37033:

; 2406 :     }
; 2407 : 
; 2408 :     if(SUCCEEDED(hr))

  00082	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00086	7c 22		 jl	 SHORT $L37037

; 2409 :     {
; 2410 :         GenerateTone(pvMonoData, wfxMono.nAvgBytesPerSec * dwSegmentLength, wfxMono.nSamplesPerSec, wfxMono.wBitsPerSample, wfxMono.nChannels, 500);

  00088	68 f4 01 00 00	 push	 500			; 000001f4H
  0008d	0f b7 45 e2	 movzx	 eax, WORD PTR _wfxMono$[ebp+2]
  00091	50		 push	 eax
  00092	0f b7 4d ee	 movzx	 ecx, WORD PTR _wfxMono$[ebp+14]
  00096	51		 push	 ecx
  00097	8b 55 e4	 mov	 edx, DWORD PTR _wfxMono$[ebp+4]
  0009a	52		 push	 edx
  0009b	8b 45 e8	 mov	 eax, DWORD PTR _wfxMono$[ebp+8]
  0009e	d1 e0		 shl	 eax, 1
  000a0	50		 push	 eax
  000a1	8b 4d dc	 mov	 ecx, DWORD PTR _pvMonoData$[ebp]
  000a4	51		 push	 ecx
  000a5	e8 00 00 00 00	 call	 ?GenerateTone@@YGXPAXKKKKK@Z ; GenerateTone
$L37037:

; 2411 :     }
; 2412 : 
; 2413 :     if(SUCCEEDED(hr))

  000aa	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ae	0f 8c d0 00 00
	00		 jl	 $L37039

; 2414 :     {
; 2415 :         pnMultiData = (short *)pvMultiData;

  000b4	8b 55 b8	 mov	 edx, DWORD PTR _pvMultiData$[ebp]
  000b7	89 55 d8	 mov	 DWORD PTR _pnMultiData$[ebp], edx

; 2416 :         
; 2417 :         for(a = 0; a < wfxMulti.nChannels; a++)

  000ba	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _a$[ebp], 0
  000c1	eb 09		 jmp	 SHORT $L37041
$L37042:
  000c3	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  000c6	83 c0 01	 add	 eax, 1
  000c9	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
$L37041:
  000cc	0f b7 4d 9e	 movzx	 ecx, WORD PTR _wfxMulti$[ebp+2]
  000d0	39 4d f4	 cmp	 DWORD PTR _a$[ebp], ecx
  000d3	0f 83 ab 00 00
	00		 jae	 $L37039

; 2418 :         {
; 2419 :             pnMonoData = (short *)pvMonoData;

  000d9	8b 55 dc	 mov	 edx, DWORD PTR _pvMonoData$[ebp]
  000dc	89 55 f8	 mov	 DWORD PTR _pnMonoData$[ebp], edx

; 2420 :             
; 2421 :             for(b = 0; b < wfxMulti.nSamplesPerSec * dwSegmentLength; b++)

  000df	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _b$[ebp], 0
  000e6	eb 09		 jmp	 SHORT $L37045
$L37046:
  000e8	8b 45 d4	 mov	 eax, DWORD PTR _b$[ebp]
  000eb	83 c0 01	 add	 eax, 1
  000ee	89 45 d4	 mov	 DWORD PTR _b$[ebp], eax
$L37045:
  000f1	8b 4d a0	 mov	 ecx, DWORD PTR _wfxMulti$[ebp+4]
  000f4	d1 e1		 shl	 ecx, 1
  000f6	39 4d d4	 cmp	 DWORD PTR _b$[ebp], ecx
  000f9	0f 83 80 00 00
	00		 jae	 $L37047

; 2422 :             {
; 2423 :                 for(c = 0; c < a; c++)

  000ff	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _c$[ebp], 0
  00106	eb 09		 jmp	 SHORT $L37048
$L37049:
  00108	8b 55 b0	 mov	 edx, DWORD PTR _c$[ebp]
  0010b	83 c2 01	 add	 edx, 1
  0010e	89 55 b0	 mov	 DWORD PTR _c$[ebp], edx
$L37048:
  00111	8b 45 b0	 mov	 eax, DWORD PTR _c$[ebp]
  00114	3b 45 f4	 cmp	 eax, DWORD PTR _a$[ebp]
  00117	73 13		 jae	 SHORT $L37050

; 2424 :                 {
; 2425 :                     *pnMultiData++ = 0;

  00119	8b 4d d8	 mov	 ecx, DWORD PTR _pnMultiData$[ebp]
  0011c	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0
  00121	8b 55 d8	 mov	 edx, DWORD PTR _pnMultiData$[ebp]
  00124	83 c2 02	 add	 edx, 2
  00127	89 55 d8	 mov	 DWORD PTR _pnMultiData$[ebp], edx

; 2426 :                 }

  0012a	eb dc		 jmp	 SHORT $L37049
$L37050:

; 2427 : 
; 2428 :                 *pnMultiData++ = *pnMonoData++;

  0012c	8b 45 d8	 mov	 eax, DWORD PTR _pnMultiData$[ebp]
  0012f	8b 4d f8	 mov	 ecx, DWORD PTR _pnMonoData$[ebp]
  00132	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00135	66 89 10	 mov	 WORD PTR [eax], dx
  00138	8b 45 d8	 mov	 eax, DWORD PTR _pnMultiData$[ebp]
  0013b	83 c0 02	 add	 eax, 2
  0013e	89 45 d8	 mov	 DWORD PTR _pnMultiData$[ebp], eax
  00141	8b 4d f8	 mov	 ecx, DWORD PTR _pnMonoData$[ebp]
  00144	83 c1 02	 add	 ecx, 2
  00147	89 4d f8	 mov	 DWORD PTR _pnMonoData$[ebp], ecx

; 2429 : 
; 2430 :                 for(c = a + 1; c < wfxMulti.nChannels; c++)

  0014a	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  0014d	83 c2 01	 add	 edx, 1
  00150	89 55 b0	 mov	 DWORD PTR _c$[ebp], edx
  00153	eb 09		 jmp	 SHORT $L37051
$L37052:
  00155	8b 45 b0	 mov	 eax, DWORD PTR _c$[ebp]
  00158	83 c0 01	 add	 eax, 1
  0015b	89 45 b0	 mov	 DWORD PTR _c$[ebp], eax
$L37051:
  0015e	0f b7 4d 9e	 movzx	 ecx, WORD PTR _wfxMulti$[ebp+2]
  00162	39 4d b0	 cmp	 DWORD PTR _c$[ebp], ecx
  00165	73 13		 jae	 SHORT $L37053

; 2431 :                 {
; 2432 :                     *pnMultiData++ = 0;

  00167	8b 55 d8	 mov	 edx, DWORD PTR _pnMultiData$[ebp]
  0016a	66 c7 02 00 00	 mov	 WORD PTR [edx], 0
  0016f	8b 45 d8	 mov	 eax, DWORD PTR _pnMultiData$[ebp]
  00172	83 c0 02	 add	 eax, 2
  00175	89 45 d8	 mov	 DWORD PTR _pnMultiData$[ebp], eax

; 2433 :                 }

  00178	eb db		 jmp	 SHORT $L37052
$L37053:

; 2434 :             }

  0017a	e9 69 ff ff ff	 jmp	 $L37046
$L37047:

; 2435 :         }

  0017f	e9 3f ff ff ff	 jmp	 $L37042
$L37039:

; 2436 :     }
; 2437 : 
; 2438 :     if(SUCCEEDED(hr))

  00184	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00188	7c 33		 jl	 SHORT $L37055

; 2439 :     {
; 2440 :         ZeroMemory(&dsbd, sizeof(dsbd));

  0018a	6a 18		 push	 24			; 00000018H
  0018c	6a 00		 push	 0
  0018e	8d 4d bc	 lea	 ecx, DWORD PTR _dsbd$[ebp]
  00191	51		 push	 ecx
  00192	e8 00 00 00 00	 call	 _memset
  00197	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2441 : 
; 2442 :         dsbd.dwSize = sizeof(dsbd);

  0019a	c7 45 bc 18 00
	00 00		 mov	 DWORD PTR _dsbd$[ebp], 24 ; 00000018H

; 2443 :         dsbd.lpwfxFormat = &wfxMulti;

  001a1	8d 55 9c	 lea	 edx, DWORD PTR _wfxMulti$[ebp]
  001a4	89 55 c8	 mov	 DWORD PTR _dsbd$[ebp+12], edx

; 2444 : 
; 2445 :         hr = ValidateResult(DirectSoundCreateBuffer(&dsbd, &pBuffer));

  001a7	8d 45 fc	 lea	 eax, DWORD PTR _pBuffer$[ebp]
  001aa	50		 push	 eax
  001ab	8d 4d bc	 lea	 ecx, DWORD PTR _dsbd$[ebp]
  001ae	51		 push	 ecx
  001af	e8 00 00 00 00	 call	 _DirectSoundCreateBuffer@8
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  001ba	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax
$L37055:

; 2446 :     }
; 2447 : 
; 2448 :     if(SUCCEEDED(hr))

  001bd	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001c1	7c 23		 jl	 SHORT $L37057

; 2449 :     {
; 2450 :         hr = ValidateResult(pBuffer->SetBufferData(pvMultiData, wfxMulti.nAvgBytesPerSec * wfxMulti.nChannels * dwSegmentLength));

  001c3	0f b7 55 9e	 movzx	 edx, WORD PTR _wfxMulti$[ebp+2]
  001c7	8b 45 a4	 mov	 eax, DWORD PTR _wfxMulti$[ebp+8]
  001ca	0f af c2	 imul	 eax, edx
  001cd	d1 e0		 shl	 eax, 1
  001cf	50		 push	 eax
  001d0	8b 4d b8	 mov	 ecx, DWORD PTR _pvMultiData$[ebp]
  001d3	51		 push	 ecx
  001d4	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  001d7	52		 push	 edx
  001d8	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  001e3	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax
$L37057:

; 2451 :     }
; 2452 : 
; 2453 :     if(SUCCEEDED(hr))

  001e6	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001ea	7c 12		 jl	 SHORT $L37059

; 2454 :     {
; 2455 :         hr = PlayBuffer(pBuffer);

  001ec	6a 00		 push	 0
  001ee	6a 00		 push	 0
  001f0	6a 00		 push	 0
  001f2	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  001fb	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax
$L37059:

; 2456 :     }
; 2457 : 
; 2458 :     if(SUCCEEDED(hr))

  001fe	83 7d b4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00202	7c 0e		 jl	 SHORT $L37061

; 2459 :     {
; 2460 :         hr = WaitBuffer(pBuffer, FALSE);

  00204	6a 00		 push	 0
  00206	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00209	51		 push	 ecx
  0020a	e8 00 00 00 00	 call	 ?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z ; WaitBuffer
  0020f	89 45 b4	 mov	 DWORD PTR _hr$[ebp], eax
$L37061:

; 2461 :     }
; 2462 : 
; 2463 :     RELEASE(pBuffer);

  00212	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00216	74 10		 je	 SHORT $L37062
  00218	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  0021b	52		 push	 edx
  0021c	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  00221	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L37062:

; 2464 : 
; 2465 :     FREE(pvMultiData);

  00228	8d 45 b8	 lea	 eax, DWORD PTR _pvMultiData$[ebp]
  0022b	50		 push	 eax
  0022c	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 2466 :     FREE(pvMonoData);

  00231	8d 4d dc	 lea	 ecx, DWORD PTR _pvMonoData$[ebp]
  00234	51		 push	 ecx
  00235	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 2467 : 
; 2468 :     return hr;

  0023a	8b 45 b4	 mov	 eax, DWORD PTR _hr$[ebp]

; 2469 : }

  0023d	8b e5		 mov	 esp, ebp
  0023f	5d		 pop	 ebp
  00240	c2 04 00	 ret	 4
?TestMultiChannel2@@YGJK@Z ENDP				; TestMultiChannel2
DSOUND	ENDS
PUBLIC	?TestMultiChannel3@@YGJK@Z			; TestMultiChannel3
EXTRN	_DirectSoundCreateStream@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?TestMultiChannel3@@YGJK@Z
DSOUND	SEGMENT
_dssd$ = -128
_wfxMulti$ = -104
_c$ = -84
_xmp$ = -80
_hr$ = -56
_pvMultiData$ = -52
_dwStatus$ = -48
_b$ = -44
_pnMultiData$ = -40
_pvMonoData$ = -36
_wfxMono$ = -32
_a$ = -12
_pStream$ = -8
_pnMonoData$ = -4
_dwChannelCount$ = 8
?TestMultiChannel3@@YGJK@Z PROC NEAR			; TestMultiChannel3, COMDAT

; 2497 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H

; 2498 :     static const DWORD      dwSegmentLength = 2;
; 2499 :     LPVOID                  pvMonoData      = NULL;

  00009	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pvMonoData$[ebp], 0

; 2500 :     LPVOID                  pvMultiData     = NULL;

  00010	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _pvMultiData$[ebp], 0

; 2501 :     LPDIRECTSOUNDSTREAM     pStream         = NULL;

  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0

; 2502 :     WAVEFORMATEX            wfxMono;
; 2503 :     WAVEFORMATEX            wfxMulti;
; 2504 :     short *                 pnMonoData;
; 2505 :     short *                 pnMultiData;
; 2506 :     DSSTREAMDESC            dssd;
; 2507 :     XMEDIAPACKET            xmp;
; 2508 :     DWORD                   dwStatus;
; 2509 :     HRESULT                 hr;
; 2510 :     DWORD                   a, b, c;
; 2511 : 
; 2512 :     XAudioCreatePcmFormat(1, 48000, 16, &wfxMono);

  0001e	8d 45 e0	 lea	 eax, DWORD PTR _wfxMono$[ebp]
  00021	50		 push	 eax
  00022	6a 10		 push	 16			; 00000010H
  00024	68 80 bb 00 00	 push	 48000			; 0000bb80H
  00029	6a 01		 push	 1
  0002b	e8 00 00 00 00	 call	 _XAudioCreatePcmFormat@16

; 2513 :     XAudioCreatePcmFormat(6, wfxMono.nSamplesPerSec, wfxMono.wBitsPerSample, &wfxMulti);

  00030	8d 4d 98	 lea	 ecx, DWORD PTR _wfxMulti$[ebp]
  00033	51		 push	 ecx
  00034	66 8b 55 ee	 mov	 dx, WORD PTR _wfxMono$[ebp+14]
  00038	52		 push	 edx
  00039	8b 45 e4	 mov	 eax, DWORD PTR _wfxMono$[ebp+4]
  0003c	50		 push	 eax
  0003d	6a 06		 push	 6
  0003f	e8 00 00 00 00	 call	 _XAudioCreatePcmFormat@16

; 2514 : 
; 2515 :     hr = MALLOC(pvMonoData, BYTE, wfxMono.nAvgBytesPerSec * dwSegmentLength);

  00044	8b 4d e8	 mov	 ecx, DWORD PTR _wfxMono$[ebp+8]
  00047	d1 e1		 shl	 ecx, 1
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  0004f	89 45 dc	 mov	 DWORD PTR _pvMonoData$[ebp], eax
  00052	8b 55 dc	 mov	 edx, DWORD PTR _pvMonoData$[ebp]
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  0005b	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax

; 2516 : 
; 2517 :     if(SUCCEEDED(hr))

  0005e	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00062	7c 21		 jl	 SHORT $L37087

; 2518 :     {
; 2519 :         hr = MALLOC(pvMultiData, BYTE, wfxMulti.nAvgBytesPerSec * wfxMulti.nChannels * dwSegmentLength);

  00064	0f b7 45 9a	 movzx	 eax, WORD PTR _wfxMulti$[ebp+2]
  00068	8b 4d a0	 mov	 ecx, DWORD PTR _wfxMulti$[ebp+8]
  0006b	0f af c8	 imul	 ecx, eax
  0006e	d1 e1		 shl	 ecx, 1
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  00076	89 45 cc	 mov	 DWORD PTR _pvMultiData$[ebp], eax
  00079	8b 55 cc	 mov	 edx, DWORD PTR _pvMultiData$[ebp]
  0007c	52		 push	 edx
  0007d	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  00082	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax
$L37087:

; 2520 :     }
; 2521 : 
; 2522 :     if(SUCCEEDED(hr))

  00085	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00089	7c 22		 jl	 SHORT $L37091

; 2523 :     {
; 2524 :         GenerateTone(pvMonoData, wfxMono.nAvgBytesPerSec * dwSegmentLength, wfxMono.nSamplesPerSec, wfxMono.wBitsPerSample, wfxMono.nChannels, 500);

  0008b	68 f4 01 00 00	 push	 500			; 000001f4H
  00090	0f b7 45 e2	 movzx	 eax, WORD PTR _wfxMono$[ebp+2]
  00094	50		 push	 eax
  00095	0f b7 4d ee	 movzx	 ecx, WORD PTR _wfxMono$[ebp+14]
  00099	51		 push	 ecx
  0009a	8b 55 e4	 mov	 edx, DWORD PTR _wfxMono$[ebp+4]
  0009d	52		 push	 edx
  0009e	8b 45 e8	 mov	 eax, DWORD PTR _wfxMono$[ebp+8]
  000a1	d1 e0		 shl	 eax, 1
  000a3	50		 push	 eax
  000a4	8b 4d dc	 mov	 ecx, DWORD PTR _pvMonoData$[ebp]
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ?GenerateTone@@YGXPAXKKKKK@Z ; GenerateTone
$L37091:

; 2525 :     }
; 2526 : 
; 2527 :     if(SUCCEEDED(hr))

  000ad	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b1	0f 8c d0 00 00
	00		 jl	 $L37093

; 2528 :     {
; 2529 :         pnMultiData = (short *)pvMultiData;

  000b7	8b 55 cc	 mov	 edx, DWORD PTR _pvMultiData$[ebp]
  000ba	89 55 d8	 mov	 DWORD PTR _pnMultiData$[ebp], edx

; 2530 :         
; 2531 :         for(a = 0; a < wfxMulti.nChannels; a++)

  000bd	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _a$[ebp], 0
  000c4	eb 09		 jmp	 SHORT $L37095
$L37096:
  000c6	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  000c9	83 c0 01	 add	 eax, 1
  000cc	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
$L37095:
  000cf	0f b7 4d 9a	 movzx	 ecx, WORD PTR _wfxMulti$[ebp+2]
  000d3	39 4d f4	 cmp	 DWORD PTR _a$[ebp], ecx
  000d6	0f 83 ab 00 00
	00		 jae	 $L37093

; 2532 :         {
; 2533 :             pnMonoData = (short *)pvMonoData;

  000dc	8b 55 dc	 mov	 edx, DWORD PTR _pvMonoData$[ebp]
  000df	89 55 fc	 mov	 DWORD PTR _pnMonoData$[ebp], edx

; 2534 :             
; 2535 :             for(b = 0; b < wfxMulti.nSamplesPerSec * dwSegmentLength; b++)

  000e2	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _b$[ebp], 0
  000e9	eb 09		 jmp	 SHORT $L37099
$L37100:
  000eb	8b 45 d4	 mov	 eax, DWORD PTR _b$[ebp]
  000ee	83 c0 01	 add	 eax, 1
  000f1	89 45 d4	 mov	 DWORD PTR _b$[ebp], eax
$L37099:
  000f4	8b 4d 9c	 mov	 ecx, DWORD PTR _wfxMulti$[ebp+4]
  000f7	d1 e1		 shl	 ecx, 1
  000f9	39 4d d4	 cmp	 DWORD PTR _b$[ebp], ecx
  000fc	0f 83 80 00 00
	00		 jae	 $L37101

; 2536 :             {
; 2537 :                 for(c = 0; c < a; c++)

  00102	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _c$[ebp], 0
  00109	eb 09		 jmp	 SHORT $L37102
$L37103:
  0010b	8b 55 ac	 mov	 edx, DWORD PTR _c$[ebp]
  0010e	83 c2 01	 add	 edx, 1
  00111	89 55 ac	 mov	 DWORD PTR _c$[ebp], edx
$L37102:
  00114	8b 45 ac	 mov	 eax, DWORD PTR _c$[ebp]
  00117	3b 45 f4	 cmp	 eax, DWORD PTR _a$[ebp]
  0011a	73 13		 jae	 SHORT $L37104

; 2538 :                 {
; 2539 :                     *pnMultiData++ = 0;

  0011c	8b 4d d8	 mov	 ecx, DWORD PTR _pnMultiData$[ebp]
  0011f	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0
  00124	8b 55 d8	 mov	 edx, DWORD PTR _pnMultiData$[ebp]
  00127	83 c2 02	 add	 edx, 2
  0012a	89 55 d8	 mov	 DWORD PTR _pnMultiData$[ebp], edx

; 2540 :                 }

  0012d	eb dc		 jmp	 SHORT $L37103
$L37104:

; 2541 : 
; 2542 :                 *pnMultiData++ = *pnMonoData++;

  0012f	8b 45 d8	 mov	 eax, DWORD PTR _pnMultiData$[ebp]
  00132	8b 4d fc	 mov	 ecx, DWORD PTR _pnMonoData$[ebp]
  00135	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00138	66 89 10	 mov	 WORD PTR [eax], dx
  0013b	8b 45 d8	 mov	 eax, DWORD PTR _pnMultiData$[ebp]
  0013e	83 c0 02	 add	 eax, 2
  00141	89 45 d8	 mov	 DWORD PTR _pnMultiData$[ebp], eax
  00144	8b 4d fc	 mov	 ecx, DWORD PTR _pnMonoData$[ebp]
  00147	83 c1 02	 add	 ecx, 2
  0014a	89 4d fc	 mov	 DWORD PTR _pnMonoData$[ebp], ecx

; 2543 : 
; 2544 :                 for(c = a + 1; c < wfxMulti.nChannels; c++)

  0014d	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  00150	83 c2 01	 add	 edx, 1
  00153	89 55 ac	 mov	 DWORD PTR _c$[ebp], edx
  00156	eb 09		 jmp	 SHORT $L37105
$L37106:
  00158	8b 45 ac	 mov	 eax, DWORD PTR _c$[ebp]
  0015b	83 c0 01	 add	 eax, 1
  0015e	89 45 ac	 mov	 DWORD PTR _c$[ebp], eax
$L37105:
  00161	0f b7 4d 9a	 movzx	 ecx, WORD PTR _wfxMulti$[ebp+2]
  00165	39 4d ac	 cmp	 DWORD PTR _c$[ebp], ecx
  00168	73 13		 jae	 SHORT $L37107

; 2545 :                 {
; 2546 :                     *pnMultiData++ = 0;

  0016a	8b 55 d8	 mov	 edx, DWORD PTR _pnMultiData$[ebp]
  0016d	66 c7 02 00 00	 mov	 WORD PTR [edx], 0
  00172	8b 45 d8	 mov	 eax, DWORD PTR _pnMultiData$[ebp]
  00175	83 c0 02	 add	 eax, 2
  00178	89 45 d8	 mov	 DWORD PTR _pnMultiData$[ebp], eax

; 2547 :                 }

  0017b	eb db		 jmp	 SHORT $L37106
$L37107:

; 2548 :             }

  0017d	e9 69 ff ff ff	 jmp	 $L37100
$L37101:

; 2549 :         }

  00182	e9 3f ff ff ff	 jmp	 $L37096
$L37093:

; 2550 :     }
; 2551 : 
; 2552 :     if(SUCCEEDED(hr))

  00187	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0018b	7c 33		 jl	 SHORT $L37109

; 2553 :     {
; 2554 :         ZeroMemory(&dssd, sizeof(dssd));

  0018d	6a 18		 push	 24			; 00000018H
  0018f	6a 00		 push	 0
  00191	8d 4d 80	 lea	 ecx, DWORD PTR _dssd$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 _memset
  0019a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2555 : 
; 2556 :         dssd.lpwfxFormat = &wfxMulti;

  0019d	8d 55 98	 lea	 edx, DWORD PTR _wfxMulti$[ebp]
  001a0	89 55 88	 mov	 DWORD PTR _dssd$[ebp+8], edx

; 2557 :         dssd.dwMaxAttachedPackets = 1;

  001a3	c7 45 84 01 00
	00 00		 mov	 DWORD PTR _dssd$[ebp+4], 1

; 2558 : 
; 2559 :         hr = ValidateResult(DirectSoundCreateStream(&dssd, &pStream));

  001aa	8d 45 f8	 lea	 eax, DWORD PTR _pStream$[ebp]
  001ad	50		 push	 eax
  001ae	8d 4d 80	 lea	 ecx, DWORD PTR _dssd$[ebp]
  001b1	51		 push	 ecx
  001b2	e8 00 00 00 00	 call	 _DirectSoundCreateStream@8
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  001bd	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax
$L37109:

; 2560 :     }
; 2561 : 
; 2562 :     if(SUCCEEDED(hr))

  001c0	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001c4	7c 46		 jl	 SHORT $L37111

; 2563 :     {
; 2564 :         ZeroMemory(&xmp, sizeof(xmp));

  001c6	6a 18		 push	 24			; 00000018H
  001c8	6a 00		 push	 0
  001ca	8d 55 b0	 lea	 edx, DWORD PTR _xmp$[ebp]
  001cd	52		 push	 edx
  001ce	e8 00 00 00 00	 call	 _memset
  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2565 : 
; 2566 :         xmp.pvBuffer = pvMultiData;

  001d6	8b 45 cc	 mov	 eax, DWORD PTR _pvMultiData$[ebp]
  001d9	89 45 b0	 mov	 DWORD PTR _xmp$[ebp], eax

; 2567 :         xmp.dwMaxSize = wfxMulti.nAvgBytesPerSec * wfxMulti.nChannels * dwSegmentLength;

  001dc	0f b7 4d 9a	 movzx	 ecx, WORD PTR _wfxMulti$[ebp+2]
  001e0	8b 55 a0	 mov	 edx, DWORD PTR _wfxMulti$[ebp+8]
  001e3	0f af d1	 imul	 edx, ecx
  001e6	d1 e2		 shl	 edx, 1
  001e8	89 55 b4	 mov	 DWORD PTR _xmp$[ebp+4], edx

; 2568 :         xmp.pdwStatus = &dwStatus;

  001eb	8d 45 d0	 lea	 eax, DWORD PTR _dwStatus$[ebp]
  001ee	89 45 bc	 mov	 DWORD PTR _xmp$[ebp+12], eax

; 2569 : 
; 2570 :         hr = ValidateResult(pStream->Process(&xmp, NULL));

  001f1	6a 00		 push	 0
  001f3	8d 4d b0	 lea	 ecx, DWORD PTR _xmp$[ebp]
  001f6	51		 push	 ecx
  001f7	8b 55 f8	 mov	 edx, DWORD PTR _pStream$[ebp]
  001fa	8b 02		 mov	 eax, DWORD PTR [edx]
  001fc	8b 4d f8	 mov	 ecx, DWORD PTR _pStream$[ebp]
  001ff	51		 push	 ecx
  00200	ff 50 10	 call	 DWORD PTR [eax+16]
  00203	50		 push	 eax
  00204	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00209	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax
$L37111:

; 2571 :     }
; 2572 : 
; 2573 :     if(SUCCEEDED(hr))

  0020c	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00210	7c 15		 jl	 SHORT $L37113

; 2574 :     {
; 2575 :         hr = ValidateResult(pStream->Discontinuity());

  00212	8b 55 f8	 mov	 edx, DWORD PTR _pStream$[ebp]
  00215	8b 02		 mov	 eax, DWORD PTR [edx]
  00217	8b 4d f8	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0021a	51		 push	 ecx
  0021b	ff 50 14	 call	 DWORD PTR [eax+20]
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00224	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax
$L37113:

; 2576 :     }
; 2577 : 
; 2578 :     if(SUCCEEDED(hr))

  00227	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0022b	7c 10		 jl	 SHORT $L37115
$L37117:

; 2579 :     {
; 2580 :         while(XMEDIAPACKET_STATUS_PENDING == *((volatile DWORD *)&dwStatus))

  0022d	81 7d d0 0a 00
	00 80		 cmp	 DWORD PTR _dwStatus$[ebp], -2147483638 ; 8000000aH
  00234	75 07		 jne	 SHORT $L37115

; 2581 :         {
; 2582 :             DirectSoundDoWork();

  00236	e8 00 00 00 00	 call	 _DirectSoundDoWork@0

; 2583 :         }

  0023b	eb f0		 jmp	 SHORT $L37117
$L37115:

; 2584 :     }
; 2585 : 
; 2586 :     RELEASE(pStream);

  0023d	83 7d f8 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  00241	74 13		 je	 SHORT $L37121
  00243	8b 55 f8	 mov	 edx, DWORD PTR _pStream$[ebp]
  00246	8b 02		 mov	 eax, DWORD PTR [edx]
  00248	8b 4d f8	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0024b	51		 push	 ecx
  0024c	ff 50 04	 call	 DWORD PTR [eax+4]
  0024f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0
$L37121:

; 2587 : 
; 2588 :     FREE(pvMultiData);

  00256	8d 55 cc	 lea	 edx, DWORD PTR _pvMultiData$[ebp]
  00259	52		 push	 edx
  0025a	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 2589 :     FREE(pvMonoData);

  0025f	8d 45 dc	 lea	 eax, DWORD PTR _pvMonoData$[ebp]
  00262	50		 push	 eax
  00263	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 2590 : 
; 2591 :     return hr;

  00268	8b 45 c8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2592 : }

  0026b	8b e5		 mov	 esp, ebp
  0026d	5d		 pop	 ebp
  0026e	c2 04 00	 ret	 4
?TestMultiChannel3@@YGJK@Z ENDP				; TestMultiChannel3
DSOUND	ENDS
PUBLIC	?TestReleaseEnvelope@@YGJXZ			; TestReleaseEnvelope
EXTRN	?CreateToneBuffer@@YGJKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z:NEAR ; CreateToneBuffer
; Function compile flags: /Odt
;	COMDAT ?TestReleaseEnvelope@@YGJXZ
DSOUND	SEGMENT
_hr$ = -48
_dsed$ = -44
_pBuffer$ = -4
?TestReleaseEnvelope@@YGJXZ PROC NEAR			; TestReleaseEnvelope, COMDAT

; 2618 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 2619 :     LPDIRECTSOUNDBUFFER     pBuffer = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 2620 :     DSENVELOPEDESC          dsed;
; 2621 :     HRESULT                 hr;
; 2622 : 
; 2623 :     hr = ValidateResult(CreateToneBuffer(0, 8000, 16, 1, 500, 0, 0, &pBuffer));

  0000d	8d 45 fc	 lea	 eax, DWORD PTR _pBuffer$[ebp]
  00010	50		 push	 eax
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	68 f4 01 00 00	 push	 500			; 000001f4H
  0001a	6a 01		 push	 1
  0001c	6a 10		 push	 16			; 00000010H
  0001e	68 40 1f 00 00	 push	 8000			; 00001f40H
  00023	6a 00		 push	 0
  00025	e8 00 00 00 00	 call	 ?CreateToneBuffer@@YGJKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z ; CreateToneBuffer
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00030	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax

; 2624 : 
; 2625 :     if(SUCCEEDED(hr))

  00033	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00037	7c 3b		 jl	 SHORT $L37131

; 2626 :     {
; 2627 :         ZeroMemory(&dsed, sizeof(dsed));

  00039	6a 28		 push	 40			; 00000028H
  0003b	6a 00		 push	 0
  0003d	8d 4d d4	 lea	 ecx, DWORD PTR _dsed$[ebp]
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _memset
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2628 : 
; 2629 :         dsed.dwEG = DSEG_MULTI;

  00049	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _dsed$[ebp], 0

; 2630 :         dsed.dwMode = DSEG_MODE_DISABLE;

  00050	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _dsed$[ebp+4], 0

; 2631 :         dsed.dwRelease = 1000;

  00057	c7 45 ec e8 03
	00 00		 mov	 DWORD PTR _dsed$[ebp+24], 1000 ; 000003e8H

; 2632 :         
; 2633 :         hr = ValidateResult(pBuffer->SetEG(&dsed));

  0005e	8d 55 d4	 lea	 edx, DWORD PTR _dsed$[ebp]
  00061	52		 push	 edx
  00062	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z ; IDirectSoundBuffer::SetEG
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00071	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L37131:

; 2634 :     }
; 2635 : 
; 2636 :     if(SUCCEEDED(hr))

  00074	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00078	7c 18		 jl	 SHORT $L37133

; 2637 :     {
; 2638 :         hr = ValidateResult(PlayBuffer(pBuffer, DSBPLAY_LOOPING));

  0007a	6a 00		 push	 0
  0007c	6a 00		 push	 0
  0007e	6a 01		 push	 1
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0008f	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L37133:

; 2639 :     }
; 2640 : 
; 2641 :     if(SUCCEEDED(hr))

  00092	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00096	7c 1a		 jl	 SHORT $L37135

; 2642 :     {
; 2643 :         hr = ValidateResult(StopBuffer(pBuffer, DSBSTOPEX_ENVELOPE, 0, FALSE, TRUE));

  00098	6a 01		 push	 1
  0009a	6a 00		 push	 0
  0009c	6a 00		 push	 0
  0009e	6a 01		 push	 1
  000a0	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  000a3	52		 push	 edx
  000a4	e8 00 00 00 00	 call	 ?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z ; StopBuffer
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000af	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L37135:

; 2644 :     }
; 2645 : 
; 2646 :     RELEASE(pBuffer);

  000b2	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  000b6	74 10		 je	 SHORT $L37136
  000b8	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  000c1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L37136:

; 2647 : 
; 2648 :     return hr;

  000c8	8b 45 d0	 mov	 eax, DWORD PTR _hr$[ebp]

; 2649 : }

  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
?TestReleaseEnvelope@@YGJXZ ENDP			; TestReleaseEnvelope
DSOUND	ENDS
PUBLIC	?PlayToneBuffer@@YGJKKKKKK@Z			; PlayToneBuffer
; Function compile flags: /Odt
;	COMDAT ?PlayToneBuffer@@YGJKKKKKK@Z
DSOUND	SEGMENT
_hr$ = -8
_pBuffer$ = -4
_dwFlags$ = 8
_dwSamplesPerSec$ = 12
_dwBitsPerSample$ = 16
_dwChannels$ = 20
_dwToneFrequency$ = 24
_dwTime$ = 28
?PlayToneBuffer@@YGJKKKKKK@Z PROC NEAR			; PlayToneBuffer, COMDAT

; 2763 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2764 :     LPDIRECTSOUNDBUFFER     pBuffer = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 2765 :     HRESULT                 hr;
; 2766 : 
; 2767 :     hr = ValidateResult(CreateToneBuffer(dwFlags, dwSamplesPerSec, dwBitsPerSample, dwChannels, dwToneFrequency, 0, 0, &pBuffer));

  0000d	8d 45 fc	 lea	 eax, DWORD PTR _pBuffer$[ebp]
  00010	50		 push	 eax
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	8b 4d 18	 mov	 ecx, DWORD PTR _dwToneFrequency$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 14	 mov	 edx, DWORD PTR _dwChannels$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 10	 mov	 eax, DWORD PTR _dwBitsPerSample$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _dwSamplesPerSec$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?CreateToneBuffer@@YGJKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z ; CreateToneBuffer
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00034	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 2768 : 
; 2769 :     if(SUCCEEDED(hr))

  00037	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003b	7c 18		 jl	 SHORT $L37148

; 2770 :     {
; 2771 :         hr = ValidateResult(PlayBuffer(pBuffer, DSBPLAY_LOOPING));

  0003d	6a 00		 push	 0
  0003f	6a 00		 push	 0
  00041	6a 01		 push	 1
  00043	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00052	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L37148:

; 2772 :     }
; 2773 : 
; 2774 :     if(SUCCEEDED(hr) && (INFINITE != dwTime))

  00055	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00059	7c 22		 jl	 SHORT $L37150
  0005b	83 7d 1c ff	 cmp	 DWORD PTR _dwTime$[ebp], -1
  0005f	74 1c		 je	 SHORT $L37150

; 2775 :     {
; 2776 :         hr = ValidateResult(StopBuffer(pBuffer, 0, dwTime));

  00061	6a 00		 push	 0
  00063	6a 00		 push	 0
  00065	8b 4d 1c	 mov	 ecx, DWORD PTR _dwTime$[ebp]
  00068	51		 push	 ecx
  00069	6a 00		 push	 0
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z ; StopBuffer
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0007a	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L37150:

; 2777 :     }
; 2778 : 
; 2779 :     if(SUCCEEDED(hr))

  0007d	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00081	7c 14		 jl	 SHORT $L37152

; 2780 :     {
; 2781 :         hr = ValidateResult(WaitBuffer(pBuffer, FALSE));

  00083	6a 00		 push	 0
  00085	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z ; WaitBuffer
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00094	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L37152:

; 2782 :     }
; 2783 : 
; 2784 :     RELEASE(pBuffer);

  00097	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  0009b	74 10		 je	 SHORT $L37153
  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  000a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L37153:

; 2785 : 
; 2786 :     return hr;

  000ad	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2787 : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 18 00	 ret	 24			; 00000018H
?PlayToneBuffer@@YGJKKKKKK@Z ENDP			; PlayToneBuffer
DSOUND	ENDS
PUBLIC	?TestNaturalStop@@YGJK@Z			; TestNaturalStop
; Function compile flags: /Odt
;	COMDAT ?TestNaturalStop@@YGJK@Z
DSOUND	SEGMENT
_hr$ = -8
_pBuffer$ = -4
_dwIterations$ = 8
?TestNaturalStop@@YGJK@Z PROC NEAR			; TestNaturalStop, COMDAT

; 2813 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2814 :     LPDIRECTSOUNDBUFFER     pBuffer = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 2815 :     HRESULT                 hr;
; 2816 : 
; 2817 :     hr = ValidateResult(CreateToneBuffer(0, 8000, 16, 1, 400, 400, 0, &pBuffer));

  0000d	8d 45 fc	 lea	 eax, DWORD PTR _pBuffer$[ebp]
  00010	50		 push	 eax
  00011	6a 00		 push	 0
  00013	68 90 01 00 00	 push	 400			; 00000190H
  00018	68 90 01 00 00	 push	 400			; 00000190H
  0001d	6a 01		 push	 1
  0001f	6a 10		 push	 16			; 00000010H
  00021	68 40 1f 00 00	 push	 8000			; 00001f40H
  00026	6a 00		 push	 0
  00028	e8 00 00 00 00	 call	 ?CreateToneBuffer@@YGJKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z ; CreateToneBuffer
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00033	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L37160:

; 2818 : 
; 2819 :     while(SUCCEEDED(hr))

  00036	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003a	7c 4c		 jl	 SHORT $L37161

; 2820 :     {
; 2821 :         if(INFINITE != dwIterations)

  0003c	83 7d 08 ff	 cmp	 DWORD PTR _dwIterations$[ebp], -1
  00040	74 12		 je	 SHORT $L37163

; 2822 :         {
; 2823 :             if(!dwIterations--)

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _dwIterations$[ebp]
  00045	8b 55 08	 mov	 edx, DWORD PTR _dwIterations$[ebp]
  00048	83 ea 01	 sub	 edx, 1
  0004b	89 55 08	 mov	 DWORD PTR _dwIterations$[ebp], edx
  0004e	85 c9		 test	 ecx, ecx
  00050	75 02		 jne	 SHORT $L37163

; 2824 :             {
; 2825 :                 break;

  00052	eb 34		 jmp	 SHORT $L37161
$L37163:

; 2826 :             }
; 2827 :         }
; 2828 :     
; 2829 :         hr = ValidateResult(PlayBuffer(pBuffer));

  00054	6a 00		 push	 0
  00056	6a 00		 push	 0
  00058	6a 00		 push	 0
  0005a	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00069	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 2830 : 
; 2831 :         if(SUCCEEDED(hr))

  0006c	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00070	7c 14		 jl	 SHORT $L37166

; 2832 :         {
; 2833 :             hr = ValidateResult(WaitBuffer(pBuffer, FALSE));

  00072	6a 00		 push	 0
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z ; WaitBuffer
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00083	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L37166:

; 2834 :         }
; 2835 :     }

  00086	eb ae		 jmp	 SHORT $L37160
$L37161:

; 2836 : 
; 2837 :     RELEASE(pBuffer);

  00088	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  0008c	74 10		 je	 SHORT $L37167
  0008e	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00091	52		 push	 edx
  00092	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  00097	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L37167:

; 2838 : 
; 2839 :     return hr;

  0009e	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2840 : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 04 00	 ret	 4
?TestNaturalStop@@YGJK@Z ENDP				; TestNaturalStop
DSOUND	ENDS
PUBLIC	?TestFlush@@YGJXZ				; TestFlush
PUBLIC	??_C@_0BF@FCOBFJMB@Packet?5?$CFlu?5status?5?$CFx?$AA@ ; `string'
;	COMDAT ??_C@_0BF@FCOBFJMB@Packet?5?$CFlu?5status?5?$CFx?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@FCOBFJMB@Packet?5?$CFlu?5status?5?$CFx?$AA@ DB 'Packet %lu stat'
	DB	'us %x', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestFlush@@YGJXZ
DSOUND	SEGMENT
_dwPacketSize$ = -60
_xmp$ = -56
_hr$ = -32
_pvAudioData$ = -28
_dwPacketCount$ = -24
_padwStatus$ = -20
_i$ = -16
_dwAudioDataSize$ = -12
_pwfxFormat$ = -8
_pStream$ = -4
?TestFlush@@YGJXZ PROC NEAR				; TestFlush, COMDAT

; 2866 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH

; 2867 :     const LPCWAVEFORMATEX   pwfxFormat          = CreateFormat(WAVE_FORMAT_PCM, 44100, 16, 2);

  00006	6a 02		 push	 2
  00008	6a 10		 push	 16			; 00000010H
  0000a	68 44 ac 00 00	 push	 44100			; 0000ac44H
  0000f	6a 01		 push	 1
  00011	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  00016	89 45 f8	 mov	 DWORD PTR _pwfxFormat$[ebp], eax

; 2868 :     LPDIRECTSOUNDSTREAM     pStream             = NULL;

  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0

; 2869 :     DWORD                   dwPacketSize        = 0x1000;

  00020	c7 45 c4 00 10
	00 00		 mov	 DWORD PTR _dwPacketSize$[ebp], 4096 ; 00001000H

; 2870 :     LPVOID                  pvAudioData         = NULL;

  00027	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _pvAudioData$[ebp], 0

; 2871 :     DWORD                   dwAudioDataSize     = NULL;

  0002e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwAudioDataSize$[ebp], 0

; 2872 :     DWORD                   dwPacketCount       = 0;

  00035	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dwPacketCount$[ebp], 0

; 2873 :     LPDWORD                 padwStatus          = NULL;

  0003c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _padwStatus$[ebp], 0

; 2874 :     XMEDIAPACKET            xmp;
; 2875 :     HRESULT                 hr;
; 2876 :     DWORD                   i;
; 2877 : 
; 2878 :     hr = ValidateResult(CreateStdStream(0, pwfxFormat, 0, &dwPacketSize, NULL, NULL, NULL, &pStream, &pvAudioData, &dwAudioDataSize, &dwPacketCount));

  00043	8d 45 e8	 lea	 eax, DWORD PTR _dwPacketCount$[ebp]
  00046	50		 push	 eax
  00047	8d 4d f4	 lea	 ecx, DWORD PTR _dwAudioDataSize$[ebp]
  0004a	51		 push	 ecx
  0004b	8d 55 e4	 lea	 edx, DWORD PTR _pvAudioData$[ebp]
  0004e	52		 push	 edx
  0004f	8d 45 fc	 lea	 eax, DWORD PTR _pStream$[ebp]
  00052	50		 push	 eax
  00053	6a 00		 push	 0
  00055	6a 00		 push	 0
  00057	6a 00		 push	 0
  00059	8d 4d c4	 lea	 ecx, DWORD PTR _dwPacketSize$[ebp]
  0005c	51		 push	 ecx
  0005d	6a 00		 push	 0
  0005f	8b 55 f8	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  00062	52		 push	 edx
  00063	6a 00		 push	 0
  00065	e8 00 00 00 00	 call	 ?CreateStdStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z ; CreateStdStream
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00070	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax

; 2879 : 
; 2880 :     if(SUCCEEDED(hr))

  00073	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00077	7c 1b		 jl	 SHORT $L37182

; 2881 :     {
; 2882 :         hr = MALLOC(padwStatus, DWORD, dwPacketCount);

  00079	8b 45 e8	 mov	 eax, DWORD PTR _dwPacketCount$[ebp]
  0007c	c1 e0 02	 shl	 eax, 2
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  00085	89 45 ec	 mov	 DWORD PTR _padwStatus$[ebp], eax
  00088	8b 4d ec	 mov	 ecx, DWORD PTR _padwStatus$[ebp]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  00091	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax
$L37182:

; 2883 :     }
; 2884 : 
; 2885 :     if(SUCCEEDED(hr))

  00094	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00098	0f 8c 96 00 00
	00		 jl	 $L37186

; 2886 :     {
; 2887 :         ZeroMemory(&xmp, sizeof(xmp));

  0009e	6a 18		 push	 24			; 00000018H
  000a0	6a 00		 push	 0
  000a2	8d 55 c8	 lea	 edx, DWORD PTR _xmp$[ebp]
  000a5	52		 push	 edx
  000a6	e8 00 00 00 00	 call	 _memset
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2888 : 
; 2889 :         xmp.pvBuffer = pvAudioData;

  000ae	8b 45 e4	 mov	 eax, DWORD PTR _pvAudioData$[ebp]
  000b1	89 45 c8	 mov	 DWORD PTR _xmp$[ebp], eax

; 2890 :         xmp.dwMaxSize = dwPacketSize;

  000b4	8b 4d c4	 mov	 ecx, DWORD PTR _dwPacketSize$[ebp]
  000b7	89 4d cc	 mov	 DWORD PTR _xmp$[ebp+4], ecx

; 2891 :         xmp.pdwStatus = padwStatus;

  000ba	8b 55 ec	 mov	 edx, DWORD PTR _padwStatus$[ebp]
  000bd	89 55 d4	 mov	 DWORD PTR _xmp$[ebp+12], edx

; 2892 :         
; 2893 :         for(i = 0; SUCCEEDED(hr) && (i < dwPacketCount); i++)

  000c0	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000c7	eb 09		 jmp	 SHORT $L37188
$L37189:
  000c9	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000cc	83 c0 01	 add	 eax, 1
  000cf	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L37188:
  000d2	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000d6	7c 5c		 jl	 SHORT $L37186
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  000db	3b 4d e8	 cmp	 ecx, DWORD PTR _dwPacketCount$[ebp]
  000de	73 54		 jae	 SHORT $L37186

; 2894 :         {
; 2895 :             if(i + 1 == dwPacketCount)

  000e0	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  000e3	83 c2 01	 add	 edx, 1
  000e6	3b 55 e8	 cmp	 edx, DWORD PTR _dwPacketCount$[ebp]
  000e9	75 14		 jne	 SHORT $L37191

; 2896 :             {
; 2897 :                 xmp.dwMaxSize = dwAudioDataSize - (dwPacketSize * (dwPacketCount - 1));

  000eb	8b 45 e8	 mov	 eax, DWORD PTR _dwPacketCount$[ebp]
  000ee	83 e8 01	 sub	 eax, 1
  000f1	8b 4d c4	 mov	 ecx, DWORD PTR _dwPacketSize$[ebp]
  000f4	0f af c8	 imul	 ecx, eax
  000f7	8b 55 f4	 mov	 edx, DWORD PTR _dwAudioDataSize$[ebp]
  000fa	2b d1		 sub	 edx, ecx
  000fc	89 55 cc	 mov	 DWORD PTR _xmp$[ebp+4], edx
$L37191:

; 2898 :             }
; 2899 :             
; 2900 :             hr = ValidateResult(pStream->Process(&xmp, NULL));

  000ff	6a 00		 push	 0
  00101	8d 45 c8	 lea	 eax, DWORD PTR _xmp$[ebp]
  00104	50		 push	 eax
  00105	8b 4d fc	 mov	 ecx, DWORD PTR _pStream$[ebp]
  00108	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010a	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  0010d	50		 push	 eax
  0010e	ff 52 10	 call	 DWORD PTR [edx+16]
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00117	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax

; 2901 : 
; 2902 :             if(SUCCEEDED(hr))

  0011a	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0011e	7c 12		 jl	 SHORT $L37193

; 2903 :             {
; 2904 :                 xmp.pvBuffer = (LPBYTE)xmp.pvBuffer + xmp.dwMaxSize;

  00120	8b 4d c8	 mov	 ecx, DWORD PTR _xmp$[ebp]
  00123	03 4d cc	 add	 ecx, DWORD PTR _xmp$[ebp+4]
  00126	89 4d c8	 mov	 DWORD PTR _xmp$[ebp], ecx

; 2905 :                 xmp.pdwStatus++;

  00129	8b 55 d4	 mov	 edx, DWORD PTR _xmp$[ebp+12]
  0012c	83 c2 04	 add	 edx, 4
  0012f	89 55 d4	 mov	 DWORD PTR _xmp$[ebp+12], edx
$L37193:

; 2906 :             }
; 2907 :         }

  00132	eb 95		 jmp	 SHORT $L37189
$L37186:

; 2908 :     }
; 2909 : 
; 2910 :     if(SUCCEEDED(hr))

  00134	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00138	7c 1f		 jl	 SHORT $L37196

; 2911 :     {
; 2912 :         Sleep(5000);

  0013a	68 88 13 00 00	 push	 5000			; 00001388H
  0013f	e8 00 00 00 00	 call	 _Sleep@4

; 2913 : 
; 2914 :         hr = ValidateResult(pStream->Flush());

  00144	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  00147	8b 08		 mov	 ecx, DWORD PTR [eax]
  00149	8b 55 fc	 mov	 edx, DWORD PTR _pStream$[ebp]
  0014c	52		 push	 edx
  0014d	ff 51 18	 call	 DWORD PTR [ecx+24]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00156	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax
$L37196:

; 2915 :     }
; 2916 : 
; 2917 :     if(SUCCEEDED(hr))

  00159	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0015d	7c 59		 jl	 SHORT $L37198

; 2918 :     {
; 2919 :         for(i = 0; i < dwPacketCount; i++)

  0015f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00166	eb 09		 jmp	 SHORT $L37199
$L37200:
  00168	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0016b	83 c0 01	 add	 eax, 1
  0016e	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L37199:
  00171	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00174	3b 4d e8	 cmp	 ecx, DWORD PTR _dwPacketCount$[ebp]
  00177	73 3f		 jae	 SHORT $L37198

; 2920 :         {
; 2921 :             if((XMEDIAPACKET_STATUS_SUCCESS != padwStatus[i]) && (XMEDIAPACKET_STATUS_FLUSHED != padwStatus[i]))

  00179	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  0017c	8b 45 ec	 mov	 eax, DWORD PTR _padwStatus$[ebp]
  0017f	83 3c 90 00	 cmp	 DWORD PTR [eax+edx*4], 0
  00183	74 31		 je	 SHORT $L37204
  00185	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00188	8b 55 ec	 mov	 edx, DWORD PTR _padwStatus$[ebp]
  0018b	81 3c 8a 04 40
	00 80		 cmp	 DWORD PTR [edx+ecx*4], -2147467260 ; 80004004H
  00192	74 22		 je	 SHORT $L37204

; 2922 :             {
; 2923 :                 DPF_TEST("Packet %lu status %x", i, padwStatus[i]);

  00194	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00197	8b 4d ec	 mov	 ecx, DWORD PTR _padwStatus$[ebp]
  0019a	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0019d	52		 push	 edx
  0019e	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  001a1	50		 push	 eax
  001a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@FCOBFJMB@Packet?5?$CFlu?5status?5?$CFx?$AA@
  001a7	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  001ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2924 :                 hr = E_FAIL;

  001af	c7 45 e0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L37204:

; 2925 :             }
; 2926 :         }

  001b6	eb b0		 jmp	 SHORT $L37200
$L37198:

; 2927 :     }
; 2928 : 
; 2929 :     RELEASE(pStream);

  001b8	83 7d fc 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  001bc	74 13		 je	 SHORT $L37207
  001be	8b 4d fc	 mov	 ecx, DWORD PTR _pStream$[ebp]
  001c1	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c3	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  001c6	50		 push	 eax
  001c7	ff 52 04	 call	 DWORD PTR [edx+4]
  001ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0
$L37207:

; 2930 :     FREE(padwStatus);

  001d1	8d 4d ec	 lea	 ecx, DWORD PTR _padwStatus$[ebp]
  001d4	51		 push	 ecx
  001d5	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 2931 :     FREE(pvAudioData);

  001da	8d 55 e4	 lea	 edx, DWORD PTR _pvAudioData$[ebp]
  001dd	52		 push	 edx
  001de	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 2932 : 
; 2933 :     return hr;

  001e3	8b 45 e0	 mov	 eax, DWORD PTR _hr$[ebp]

; 2934 : }

  001e6	8b e5		 mov	 esp, ebp
  001e8	5d		 pop	 ebp
  001e9	c3		 ret	 0
?TestFlush@@YGJXZ ENDP					; TestFlush
DSOUND	ENDS
PUBLIC	?TestPitch@@YGJKKKKK@Z				; TestPitch
PUBLIC	??_C@_08ECACBGB@Pitch?5?$CFd?$AA@		; `string'
PUBLIC	?SetPitch@IDirectSoundBuffer@@QAGJJ@Z		; IDirectSoundBuffer::SetPitch
;	COMDAT ?alPitch@?1??TestPitch@@YGJKKKKK@Z@4QBJB
DSOUND_RD	SEGMENT
?alPitch@?1??TestPitch@@YGJKKKKK@Z@4QBJB DD 0ffff8001H	; `TestPitch'::`2'::alPitch
	DD	00H
	DD	01fffH
DSOUND_RD	ENDS
;	COMDAT ??_C@_08ECACBGB@Pitch?5?$CFd?$AA@
DSOUND_RD	SEGMENT
??_C@_08ECACBGB@Pitch?5?$CFd?$AA@ DB 'Pitch %d', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestPitch@@YGJKKKKK@Z
DSOUND	SEGMENT
_hr$ = -16
_i$ = -12
_pwfxFormat$ = -8
_pBuffer$ = -4
_dwFlags$ = 8
_dwFormatTag$ = 12
_dwSamplesPerSec$ = 16
_dwBitsPerSample$ = 20
_dwChannels$ = 24
?TestPitch@@YGJKKKKK@Z PROC NEAR			; TestPitch, COMDAT

; 2968 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 2969 :     static const LONG       alPitch[]   = { DSBPITCH_MIN, 0, DSBPITCH_MAX };
; 2970 :     const LPCWAVEFORMATEX   pwfxFormat  = CreateFormat(dwFormatTag, dwSamplesPerSec, dwBitsPerSample, dwChannels);

  00006	8b 45 18	 mov	 eax, DWORD PTR _dwChannels$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 14	 mov	 ecx, DWORD PTR _dwBitsPerSample$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 10	 mov	 edx, DWORD PTR _dwSamplesPerSec$[ebp]
  00011	52		 push	 edx
  00012	8b 45 0c	 mov	 eax, DWORD PTR _dwFormatTag$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  0001b	89 45 f8	 mov	 DWORD PTR _pwfxFormat$[ebp], eax

; 2971 :     LPDIRECTSOUNDBUFFER     pBuffer     = NULL;

  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 2972 :     HRESULT                 hr;
; 2973 :     DWORD                   i;
; 2974 : 
; 2975 :     hr = ValidateResult(CreateStdBuffer(dwFlags, pwfxFormat, 0, NULL, &pBuffer, NULL));

  00025	6a 00		 push	 0
  00027	8d 4d fc	 lea	 ecx, DWORD PTR _pBuffer$[ebp]
  0002a	51		 push	 ecx
  0002b	6a 00		 push	 0
  0002d	6a 00		 push	 0
  0002f	8b 55 f8	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  00032	52		 push	 edx
  00033	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z ; CreateStdBuffer
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00042	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 2976 : 
; 2977 :     if(SUCCEEDED(hr))

  00045	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00049	0f 8c 83 00 00
	00		 jl	 $L37224

; 2978 :     {
; 2979 :         for(i = 0; (i < NUMELMS(alPitch)) && SUCCEEDED(hr); i++)

  0004f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00056	eb 09		 jmp	 SHORT $L37226
$L37227:
  00058	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0005b	83 c1 01	 add	 ecx, 1
  0005e	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$L37226:
  00061	83 7d f4 03	 cmp	 DWORD PTR _i$[ebp], 3
  00065	73 6b		 jae	 SHORT $L37224
  00067	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0006b	7c 65		 jl	 SHORT $L37224

; 2980 :         {
; 2981 :             DPF_TEST("Pitch %d", alPitch[i]);

  0006d	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00070	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?alPitch@?1??TestPitch@@YGJKKKKK@Z@4QBJB[edx*4]
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08ECACBGB@Pitch?5?$CFd?$AA@
  0007d	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00082	83 c4 08	 add	 esp, 8

; 2982 :             
; 2983 :             hr = ValidateResult(pBuffer->SetPitch(alPitch[i]));

  00085	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00088	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?alPitch@?1??TestPitch@@YGJKKKKK@Z@4QBJB[ecx*4]
  0008f	52		 push	 edx
  00090	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?SetPitch@IDirectSoundBuffer@@QAGJJ@Z ; IDirectSoundBuffer::SetPitch
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0009f	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 2984 : 
; 2985 :             if(SUCCEEDED(hr))

  000a2	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a6	7c 18		 jl	 SHORT $L37231

; 2986 :             {
; 2987 :                 hr = ValidateResult(PlayBuffer(pBuffer, DSBPLAY_LOOPING));

  000a8	6a 00		 push	 0
  000aa	6a 00		 push	 0
  000ac	6a 01		 push	 1
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000bd	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L37231:

; 2988 :             }
; 2989 : 
; 2990 :             if(SUCCEEDED(hr))

  000c0	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c4	7c 0a		 jl	 SHORT $L37233

; 2991 :             {
; 2992 :                 Sleep(2000);

  000c6	68 d0 07 00 00	 push	 2000			; 000007d0H
  000cb	e8 00 00 00 00	 call	 _Sleep@4
$L37233:

; 2993 :             }
; 2994 :         }

  000d0	eb 86		 jmp	 SHORT $L37227
$L37224:

; 2995 :     }
; 2996 : 
; 2997 :     RELEASE(pBuffer);

  000d2	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  000d6	74 10		 je	 SHORT $L37234
  000d8	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  000db	52		 push	 edx
  000dc	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  000e1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L37234:

; 2998 : 
; 2999 :     return hr;

  000e8	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]

; 3000 : }

  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 14 00	 ret	 20			; 00000014H
?TestPitch@@YGJKKKKK@Z ENDP				; TestPitch
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetPitch@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetPitch@IDirectSoundBuffer@@QAGJJ@Z
DSOUND	SEGMENT
_this$ = 8
_lPitch$ = 12
?SetPitch@IDirectSoundBuffer@@QAGJJ@Z PROC NEAR		; IDirectSoundBuffer::SetPitch, COMDAT

; 1952 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1953 :         return IDirectSoundBuffer_SetPitch(this, lPitch);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _lPitch$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetPitch@8

; 1954 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetPitch@IDirectSoundBuffer@@QAGJJ@Z ENDP		; IDirectSoundBuffer::SetPitch
DSOUND	ENDS
PUBLIC	?StressPlayStop@@YGJKKKKKKK@Z			; StressPlayStop
PUBLIC	??_C@_0CC@IFMJDGIG@Creating?5?$CFlu?5interference?5stream@ ; `string'
PUBLIC	??_C@_0FE@EJJBOEIM@?$CFlu?5plays?5?$CI?$CFlu?5submixing?0?5?$CFlu?5lo@ ; `string'
PUBLIC	?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z ; IDirectSoundBuffer::SetOutputBuffer
PUBLIC	?Play@IDirectSoundBuffer@@QAGJKKK@Z		; IDirectSoundBuffer::Play
PUBLIC	?Stop@IDirectSoundBuffer@@QAGJXZ		; IDirectSoundBuffer::Stop
PUBLIC	?StopEx@IDirectSoundBuffer@@QAGJ_JK@Z		; IDirectSoundBuffer::StopEx
EXTRN	?ResubmitPacketCallback@@YGXPAX0K@Z:NEAR	; ResubmitPacketCallback
;	COMDAT ??_C@_0CC@IFMJDGIG@Creating?5?$CFlu?5interference?5stream@
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
DSOUND_RD	SEGMENT
??_C@_0CC@IFMJDGIG@Creating?5?$CFlu?5interference?5stream@ DB 'Creating %'
	DB	'lu interference streams', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ?awSilence@?1??StressPlayStop@@YGJKKKKKKK@Z@4QBGB
DSOUND_RD	SEGMENT
?awSilence@?1??StressPlayStop@@YGJKKKKKKK@Z@4QBGB DW 00H ; `StressPlayStop'::`2'::awSilence
	ORG $+62
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FE@EJJBOEIM@?$CFlu?5plays?5?$CI?$CFlu?5submixing?0?5?$CFlu?5lo@
DSOUND_RD	SEGMENT
??_C@_0FE@EJJBOEIM@?$CFlu?5plays?5?$CI?$CFlu?5submixing?0?5?$CFlu?5lo@ DB '%'
	DB	'lu plays (%lu submixing, %lu looping), %lu natural stops, %lu'
	DB	' forced, %lu note-off', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?StressPlayStop@@YGJKKKKKKK@Z
DSOUND	SEGMENT
tv237 = -3288
_dwStartTime$ = -3284
_dssd$ = -3280
_apSourceBuffers$ = -3256
_dwStopCount$ = -2228
_dwNaturalStopCount$ = -2224
_dwPlayCount$ = -2220
_adwStatus$ = -2216
_hr$ = -1188
_xmp$ = -1184
_dwSubmixCount$ = -1160
_z$ = -1156
_dwStatus$ = -1152
_dsbd$ = -1148
_dwNoteOffCount$ = -1124
_wfxSilence$ = -1120
_dsc$ = -1100
_dwCurrentTime$ = -1084
_dwLoopCount$ = -1080
_dseg$ = -1076
_i$ = -1036
_apStreams$ = -1032
_pDestBuffer$ = -4
_dwFlags$ = 8
_dwSourceCount$ = 12
_dwNoteOffMin$ = 16
_dwNoteOffMax$ = 20
_dwTestLength$ = 24
_dwStreamCount$ = 28
_dwStreamFrequency$ = 32
?StressPlayStop@@YGJKKKKKKK@Z PROC NEAR			; StressPlayStop, COMDAT

; 3032 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 0c 00
	00		 sub	 esp, 3288		; 00000cd8H
  00009	57		 push	 edi

; 3033 :     static const DWORD          DSBSTATUS_PENDINGSTOP   = 0x80000000;
; 3034 :     static const WORD           awSilence[32]           = { 0 };
; 3035 :     const WAVEFORMATEX          wfxSilence              = INIT_PCM_WAVEFORMAT(1, dwStreamFrequency, 16);

  0000a	66 c7 85 a0 fb
	ff ff 01 00	 mov	 WORD PTR _wfxSilence$[ebp], 1
  00013	66 c7 85 a2 fb
	ff ff 01 00	 mov	 WORD PTR _wfxSilence$[ebp+2], 1
  0001c	8b 45 20	 mov	 eax, DWORD PTR _dwStreamFrequency$[ebp]
  0001f	89 85 a4 fb ff
	ff		 mov	 DWORD PTR _wfxSilence$[ebp+4], eax
  00025	8b 4d 20	 mov	 ecx, DWORD PTR _dwStreamFrequency$[ebp]
  00028	c1 e1 04	 shl	 ecx, 4
  0002b	c1 e9 03	 shr	 ecx, 3
  0002e	89 8d a8 fb ff
	ff		 mov	 DWORD PTR _wfxSilence$[ebp+8], ecx
  00034	66 c7 85 ac fb
	ff ff 02 00	 mov	 WORD PTR _wfxSilence$[ebp+12], 2
  0003d	66 c7 85 ae fb
	ff ff 10 00	 mov	 WORD PTR _wfxSilence$[ebp+14], 16 ; 00000010H
  00046	66 c7 85 b0 fb
	ff ff 00 00	 mov	 WORD PTR _wfxSilence$[ebp+16], 0

; 3036 :     LPDIRECTSOUNDBUFFER         apSourceBuffers[256]    = { NULL };

  0004f	c7 85 48 f3 ff
	ff 00 00 00 00	 mov	 DWORD PTR _apSourceBuffers$[ebp], 0
  00059	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  0005e	33 c0		 xor	 eax, eax
  00060	8d bd 4c f3 ff
	ff		 lea	 edi, DWORD PTR _apSourceBuffers$[ebp+4]
  00066	f3 ab		 rep stosd

; 3037 :     DWORD                       adwStatus[256]          = { 0 };

  00068	c7 85 58 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _adwStatus$[ebp], 0
  00072	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00077	33 c0		 xor	 eax, eax
  00079	8d bd 5c f7 ff
	ff		 lea	 edi, DWORD PTR _adwStatus$[ebp+4]
  0007f	f3 ab		 rep stosd

; 3038 :     LPDIRECTSOUNDSTREAM         apStreams[256]          = { NULL };

  00081	c7 85 f8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _apStreams$[ebp], 0
  0008b	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00090	33 c0		 xor	 eax, eax
  00092	8d bd fc fb ff
	ff		 lea	 edi, DWORD PTR _apStreams$[ebp+4]
  00098	f3 ab		 rep stosd

; 3039 :     LPDIRECTSOUNDBUFFER         pDestBuffer             = NULL;

  0009a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pDestBuffer$[ebp], 0

; 3040 :     DWORD                       dwPlayCount             = 0;

  000a1	c7 85 54 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwPlayCount$[ebp], 0

; 3041 :     DWORD                       dwStopCount             = 0;

  000ab	c7 85 4c f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwStopCount$[ebp], 0

; 3042 :     DWORD                       dwNoteOffCount          = 0;

  000b5	c7 85 9c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwNoteOffCount$[ebp], 0

; 3043 :     DWORD                       dwNaturalStopCount      = 0;

  000bf	c7 85 50 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwNaturalStopCount$[ebp], 0

; 3044 :     DWORD                       dwSubmixCount           = 0;

  000c9	c7 85 78 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwSubmixCount$[ebp], 0

; 3045 :     DWORD                       dwLoopCount             = 0;

  000d3	c7 85 c8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwLoopCount$[ebp], 0

; 3046 :     HRESULT                     hr                      = S_OK;

  000dd	c7 85 5c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _hr$[ebp], 0

; 3047 :     DWORD                       dwStartTime;
; 3048 :     DWORD                       dwCurrentTime;
; 3049 :     DWORD                       dwStatus;
; 3050 :     DSCAPS                      dsc;
; 3051 :     DSBUFFERDESC                dsbd;
; 3052 :     DSSTREAMDESC                dssd;
; 3053 :     DSENVELOPEDESC              dseg;
; 3054 :     XMEDIAPACKET                xmp;
; 3055 :     DWORD                       i, z;
; 3056 : 
; 3057 :     //
; 3058 :     // Set up the envelope description for NoteOff
; 3059 :     //
; 3060 :     
; 3061 :     dseg.dwEG = DSEG_AMPLITUDE;

  000e7	c7 85 cc fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _dseg$[ebp], 1

; 3062 :     dseg.dwMode = DSEG_MODE_HOLD;

  000f1	c7 85 d0 fb ff
	ff 03 00 00 00	 mov	 DWORD PTR _dseg$[ebp+4], 3

; 3063 :     dseg.dwDelay = DSEG_DELAY_DEFAULT;

  000fb	c7 85 d4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _dseg$[ebp+8], 0

; 3064 :     dseg.dwAttack = DSEG_ATTACK_DEFAULT;

  00105	c7 85 d8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _dseg$[ebp+12], 0

; 3065 :     dseg.dwHold = DSEG_HOLD_DEFAULT;

  0010f	c7 85 dc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _dseg$[ebp+16], 0

; 3066 :     dseg.dwDecay = DSEG_DECAY_DEFAULT;

  00119	c7 85 e0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _dseg$[ebp+20], 0

; 3067 :     dseg.dwRelease = DSEG_RELEASE_DEFAULT;

  00123	c7 85 e4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _dseg$[ebp+24], 0

; 3068 :     dseg.dwSustain = DSEG_SUSTAIN_DEFAULT;

  0012d	c7 85 e8 fb ff
	ff ff 00 00 00	 mov	 DWORD PTR _dseg$[ebp+28], 255 ; 000000ffH

; 3069 :     dseg.lPitchScale = DSEG_PITCHSCALE_DEFAULT;

  00137	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _dseg$[ebp+32], 0

; 3070 :     dseg.lFilterCutOff = DSEG_FILTERCUTOFF_DEFAULT;

  00141	c7 85 f0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _dseg$[ebp+36], 0

; 3071 : 
; 3072 :     //
; 3073 :     // Create the submix buffer
; 3074 :     //
; 3075 : 
; 3076 :     ZeroMemory(&dsbd, sizeof(dsbd));

  0014b	6a 18		 push	 24			; 00000018H
  0014d	6a 00		 push	 0
  0014f	8d 95 84 fb ff
	ff		 lea	 edx, DWORD PTR _dsbd$[ebp]
  00155	52		 push	 edx
  00156	e8 00 00 00 00	 call	 _memset
  0015b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3077 : 
; 3078 :     dsbd.dwSize = sizeof(dsbd);

  0015e	c7 85 84 fb ff
	ff 18 00 00 00	 mov	 DWORD PTR _dsbd$[ebp], 24 ; 00000018H

; 3079 :     dsbd.dwFlags = DSBCAPS_MIXIN;

  00168	c7 85 88 fb ff
	ff 00 20 00 00	 mov	 DWORD PTR _dsbd$[ebp+4], 8192 ; 00002000H

; 3080 : 
; 3081 :     hr = ValidateResult(DirectSoundCreateBuffer(&dsbd, &pDestBuffer));

  00172	8d 45 fc	 lea	 eax, DWORD PTR _pDestBuffer$[ebp]
  00175	50		 push	 eax
  00176	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR _dsbd$[ebp]
  0017c	51		 push	 ecx
  0017d	e8 00 00 00 00	 call	 _DirectSoundCreateBuffer@8
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00188	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 3082 : 
; 3083 :     //
; 3084 :     // Create interference streams
; 3085 :     //
; 3086 : 
; 3087 :     if(SUCCEEDED(hr) && dwStreamCount)

  0018e	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00195	0f 8c a7 01 00
	00		 jl	 $L37280
  0019b	83 7d 1c 00	 cmp	 DWORD PTR _dwStreamCount$[ebp], 0
  0019f	0f 84 9d 01 00
	00		 je	 $L37280

; 3088 :     {
; 3089 :         DPF_TEST("Creating %lu interference streams", dwStreamCount);

  001a5	8b 55 1c	 mov	 edx, DWORD PTR _dwStreamCount$[ebp]
  001a8	52		 push	 edx
  001a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@IFMJDGIG@Creating?5?$CFlu?5interference?5stream@
  001ae	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  001b3	83 c4 08	 add	 esp, 8

; 3090 : 
; 3091 :         ZeroMemory(&dssd, sizeof(dssd));

  001b6	6a 18		 push	 24			; 00000018H
  001b8	6a 00		 push	 0
  001ba	8d 85 30 f3 ff
	ff		 lea	 eax, DWORD PTR _dssd$[ebp]
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 _memset
  001c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3092 : 
; 3093 :         dssd.lpwfxFormat = (LPWAVEFORMATEX)&wfxSilence;

  001c9	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR _wfxSilence$[ebp]
  001cf	89 8d 38 f3 ff
	ff		 mov	 DWORD PTR _dssd$[ebp+8], ecx

; 3094 :         dssd.dwMaxAttachedPackets = 2;

  001d5	c7 85 34 f3 ff
	ff 02 00 00 00	 mov	 DWORD PTR _dssd$[ebp+4], 2

; 3095 :         dssd.lpfnCallback = ResubmitPacketCallback;

  001df	c7 85 3c f3 ff
	ff 00 00 00 00	 mov	 DWORD PTR _dssd$[ebp+12], OFFSET FLAT:?ResubmitPacketCallback@@YGXPAX0K@Z ; ResubmitPacketCallback

; 3096 :         
; 3097 :         ZeroMemory(&xmp, sizeof(xmp));

  001e9	6a 18		 push	 24			; 00000018H
  001eb	6a 00		 push	 0
  001ed	8d 95 60 fb ff
	ff		 lea	 edx, DWORD PTR _xmp$[ebp]
  001f3	52		 push	 edx
  001f4	e8 00 00 00 00	 call	 _memset
  001f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3098 : 
; 3099 :         xmp.pvBuffer = (LPVOID)awSilence;

  001fc	c7 85 60 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _xmp$[ebp], OFFSET FLAT:?awSilence@?1??StressPlayStop@@YGJKKKKKKK@Z@4QBGB

; 3100 :         xmp.dwMaxSize = sizeof(awSilence);

  00206	c7 85 64 fb ff
	ff 40 00 00 00	 mov	 DWORD PTR _xmp$[ebp+4], 64 ; 00000040H

; 3101 :         xmp.pContext = &xmp;

  00210	8d 85 60 fb ff
	ff		 lea	 eax, DWORD PTR _xmp$[ebp]
  00216	89 85 70 fb ff
	ff		 mov	 DWORD PTR _xmp$[ebp+16], eax

; 3102 : 
; 3103 :         for(i = 0; (i < dwStreamCount) && SUCCEEDED(hr); i++)

  0021c	c7 85 f4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00226	eb 0f		 jmp	 SHORT $L37285
$L37286:
  00228	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0022e	83 c1 01	 add	 ecx, 1
  00231	89 8d f4 fb ff
	ff		 mov	 DWORD PTR _i$[ebp], ecx
$L37285:
  00237	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  0023d	3b 55 1c	 cmp	 edx, DWORD PTR _dwStreamCount$[ebp]
  00240	0f 83 fc 00 00
	00		 jae	 $L37280
  00246	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0024d	0f 8c ef 00 00
	00		 jl	 $L37280

; 3104 :         {
; 3105 :             dssd.lpvContext = &apStreams[i];

  00253	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00259	8d 8c 85 f8 fb
	ff ff		 lea	 ecx, DWORD PTR _apStreams$[ebp+eax*4]
  00260	89 8d 40 f3 ff
	ff		 mov	 DWORD PTR _dssd$[ebp+16], ecx

; 3106 : 
; 3107 :             hr = ValidateResult(DirectSoundCreateStream(&dssd, &apStreams[i]));

  00266	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  0026c	8d 84 95 f8 fb
	ff ff		 lea	 eax, DWORD PTR _apStreams$[ebp+edx*4]
  00273	50		 push	 eax
  00274	8d 8d 30 f3 ff
	ff		 lea	 ecx, DWORD PTR _dssd$[ebp]
  0027a	51		 push	 ecx
  0027b	e8 00 00 00 00	 call	 _DirectSoundCreateStream@8
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00286	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 3108 : 
; 3109 :             if(SUCCEEDED(hr))

  0028c	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00293	7c 1b		 jl	 SHORT $L37289

; 3110 :             {
; 3111 :                 hr = PauseStream(apStreams[i], TRUE);

  00295	6a 01		 push	 1
  00297	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  0029d	8b 84 95 f8 fb
	ff ff		 mov	 eax, DWORD PTR _apStreams$[ebp+edx*4]
  002a4	50		 push	 eax
  002a5	e8 00 00 00 00	 call	 ?PauseStream@@YGJPAUIDirectSoundStream@@H@Z ; PauseStream
  002aa	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L37289:

; 3112 :             }
; 3113 : 
; 3114 :             for(z = 0; (z < dssd.dwMaxAttachedPackets) && SUCCEEDED(hr); z++)

  002b0	c7 85 7c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _z$[ebp], 0
  002ba	eb 0f		 jmp	 SHORT $L37291
$L37292:
  002bc	8b 8d 7c fb ff
	ff		 mov	 ecx, DWORD PTR _z$[ebp]
  002c2	83 c1 01	 add	 ecx, 1
  002c5	89 8d 7c fb ff
	ff		 mov	 DWORD PTR _z$[ebp], ecx
$L37291:
  002cb	8b 95 7c fb ff
	ff		 mov	 edx, DWORD PTR _z$[ebp]
  002d1	3b 95 34 f3 ff
	ff		 cmp	 edx, DWORD PTR _dssd$[ebp+4]
  002d7	73 40		 jae	 SHORT $L37293
  002d9	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  002e0	7c 37		 jl	 SHORT $L37293

; 3115 :             {
; 3116 :                 hr = ValidateResult(apStreams[i]->Process(&xmp, NULL));

  002e2	6a 00		 push	 0
  002e4	8d 85 60 fb ff
	ff		 lea	 eax, DWORD PTR _xmp$[ebp]
  002ea	50		 push	 eax
  002eb	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  002f1	8b 94 8d f8 fb
	ff ff		 mov	 edx, DWORD PTR _apStreams$[ebp+ecx*4]
  002f8	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  002fe	8b 8c 85 f8 fb
	ff ff		 mov	 ecx, DWORD PTR _apStreams$[ebp+eax*4]
  00305	8b 12		 mov	 edx, DWORD PTR [edx]
  00307	51		 push	 ecx
  00308	ff 52 10	 call	 DWORD PTR [edx+16]
  0030b	50		 push	 eax
  0030c	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00311	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 3117 :             }

  00317	eb a3		 jmp	 SHORT $L37292
$L37293:

; 3118 : 
; 3119 :             if(SUCCEEDED(hr))

  00319	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00320	7c 1b		 jl	 SHORT $L37295

; 3120 :             {
; 3121 :                 hr = PauseStream(apStreams[i], FALSE);

  00322	6a 00		 push	 0
  00324	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0032a	8b 8c 85 f8 fb
	ff ff		 mov	 ecx, DWORD PTR _apStreams$[ebp+eax*4]
  00331	51		 push	 ecx
  00332	e8 00 00 00 00	 call	 ?PauseStream@@YGJPAUIDirectSoundStream@@H@Z ; PauseStream
  00337	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L37295:

; 3122 :             }
; 3123 :         }

  0033d	e9 e6 fe ff ff	 jmp	 $L37286
$L37280:

; 3124 :     }
; 3125 : 
; 3126 :     //
; 3127 :     // Create source buffers
; 3128 :     //
; 3129 :     
; 3130 :     if(SUCCEEDED(hr))

  00342	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00349	7c 12		 jl	 SHORT $L37297

; 3131 :     {
; 3132 :         hr = GetDirectSoundCaps(&dsc);

  0034b	8d 95 b4 fb ff
	ff		 lea	 edx, DWORD PTR _dsc$[ebp]
  00351	52		 push	 edx
  00352	e8 00 00 00 00	 call	 ?GetDirectSoundCaps@@YGJPAU_DSCAPS@@@Z ; GetDirectSoundCaps
  00357	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L37297:

; 3133 :     }
; 3134 : 
; 3135 :     if(SUCCEEDED(hr))

  0035d	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00364	0f 8c ae 00 00
	00		 jl	 $L37299

; 3136 :     {
; 3137 :         dwSourceCount = min(dwSourceCount, dsc.dwFree2DBuffers + dsc.dwFree3DBuffers);

  0036a	8b 85 b4 fb ff
	ff		 mov	 eax, DWORD PTR _dsc$[ebp]
  00370	03 85 b8 fb ff
	ff		 add	 eax, DWORD PTR _dsc$[ebp+4]
  00376	39 45 0c	 cmp	 DWORD PTR _dwSourceCount$[ebp], eax
  00379	73 0b		 jae	 SHORT $L38174
  0037b	8b 4d 0c	 mov	 ecx, DWORD PTR _dwSourceCount$[ebp]
  0037e	89 8d 28 f3 ff
	ff		 mov	 DWORD PTR tv237[ebp], ecx
  00384	eb 12		 jmp	 SHORT $L38175
$L38174:
  00386	8b 95 b4 fb ff
	ff		 mov	 edx, DWORD PTR _dsc$[ebp]
  0038c	03 95 b8 fb ff
	ff		 add	 edx, DWORD PTR _dsc$[ebp+4]
  00392	89 95 28 f3 ff
	ff		 mov	 DWORD PTR tv237[ebp], edx
$L38175:
  00398	8b 85 28 f3 ff
	ff		 mov	 eax, DWORD PTR tv237[ebp]
  0039e	89 45 0c	 mov	 DWORD PTR _dwSourceCount$[ebp], eax

; 3138 : 
; 3139 :         DPF_TEST("Creating %lu buffers", dwSourceCount);

  003a1	8b 4d 0c	 mov	 ecx, DWORD PTR _dwSourceCount$[ebp]
  003a4	51		 push	 ecx
  003a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@JMCBCLDI@Creating?5?$CFlu?5buffers?$AA@
  003aa	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  003af	83 c4 08	 add	 esp, 8

; 3140 : 
; 3141 :         for(i = 0; (i < dwSourceCount) && SUCCEEDED(hr); i++)

  003b2	c7 85 f4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  003bc	eb 0f		 jmp	 SHORT $L37301
$L37302:
  003be	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  003c4	83 c2 01	 add	 edx, 1
  003c7	89 95 f4 fb ff
	ff		 mov	 DWORD PTR _i$[ebp], edx
$L37301:
  003cd	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  003d3	3b 45 0c	 cmp	 eax, DWORD PTR _dwSourceCount$[ebp]
  003d6	73 40		 jae	 SHORT $L37299
  003d8	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  003df	7c 37		 jl	 SHORT $L37299

; 3142 :         {
; 3143 :             hr = ValidateResult(CreateToneBuffer(dwFlags, 32000, 16, 1, 500, 0, 0, &apSourceBuffers[i]));

  003e1	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  003e7	8d 94 8d 48 f3
	ff ff		 lea	 edx, DWORD PTR _apSourceBuffers$[ebp+ecx*4]
  003ee	52		 push	 edx
  003ef	6a 00		 push	 0
  003f1	6a 00		 push	 0
  003f3	68 f4 01 00 00	 push	 500			; 000001f4H
  003f8	6a 01		 push	 1
  003fa	6a 10		 push	 16			; 00000010H
  003fc	68 00 7d 00 00	 push	 32000			; 00007d00H
  00401	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00404	50		 push	 eax
  00405	e8 00 00 00 00	 call	 ?CreateToneBuffer@@YGJKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z ; CreateToneBuffer
  0040a	50		 push	 eax
  0040b	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00410	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 3144 :         }

  00416	eb a6		 jmp	 SHORT $L37302
$L37299:

; 3145 :     }
; 3146 : 
; 3147 :     //
; 3148 :     // Save the current time
; 3149 :     //
; 3150 : 
; 3151 :     if(SUCCEEDED(hr))

  00418	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0041f	7c 0b		 jl	 SHORT $L37307

; 3152 :     {
; 3153 :         dwStartTime = GetTickCount();

  00421	e8 00 00 00 00	 call	 _GetTickCount@0
  00426	89 85 2c f3 ff
	ff		 mov	 DWORD PTR _dwStartTime$[ebp], eax
$L37307:

; 3154 :     }
; 3155 : 
; 3156 :     //
; 3157 :     // Enter the main loop
; 3158 :     //
; 3159 : 
; 3160 :     while(SUCCEEDED(hr))

  0042c	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00433	0f 8c ab 03 00
	00		 jl	 $L37308

; 3161 :     {
; 3162 :         DirectSoundDoWork();

  00439	e8 00 00 00 00	 call	 _DirectSoundDoWork@0

; 3163 : 
; 3164 :         //
; 3165 :         // Check the current time
; 3166 :         //
; 3167 :         
; 3168 :         if(!((dwCurrentTime = GetTickCount()) % 2000))

  0043e	e8 00 00 00 00	 call	 _GetTickCount@0
  00443	89 85 c4 fb ff
	ff		 mov	 DWORD PTR _dwCurrentTime$[ebp], eax
  00449	8b 85 c4 fb ff
	ff		 mov	 eax, DWORD PTR _dwCurrentTime$[ebp]
  0044f	33 d2		 xor	 edx, edx
  00451	b9 d0 07 00 00	 mov	 ecx, 2000		; 000007d0H
  00456	f7 f1		 div	 ecx
  00458	85 d2		 test	 edx, edx
  0045a	0f 85 8f 00 00
	00		 jne	 $L37310

; 3169 :         {
; 3170 :             DPF_TEST("%lu plays (%lu submixing, %lu looping), %lu natural stops, %lu forced, %lu note-off", dwPlayCount, dwSubmixCount, dwLoopCount, dwNaturalStopCount, dwStopCount, dwNoteOffCount);

  00460	8b 95 9c fb ff
	ff		 mov	 edx, DWORD PTR _dwNoteOffCount$[ebp]
  00466	52		 push	 edx
  00467	8b 85 4c f7 ff
	ff		 mov	 eax, DWORD PTR _dwStopCount$[ebp]
  0046d	50		 push	 eax
  0046e	8b 8d 50 f7 ff
	ff		 mov	 ecx, DWORD PTR _dwNaturalStopCount$[ebp]
  00474	51		 push	 ecx
  00475	8b 95 c8 fb ff
	ff		 mov	 edx, DWORD PTR _dwLoopCount$[ebp]
  0047b	52		 push	 edx
  0047c	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR _dwSubmixCount$[ebp]
  00482	50		 push	 eax
  00483	8b 8d 54 f7 ff
	ff		 mov	 ecx, DWORD PTR _dwPlayCount$[ebp]
  00489	51		 push	 ecx
  0048a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FE@EJJBOEIM@?$CFlu?5plays?5?$CI?$CFlu?5submixing?0?5?$CFlu?5lo@
  0048f	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00494	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3171 : 
; 3172 :             dwPlayCount = 0;

  00497	c7 85 54 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwPlayCount$[ebp], 0

; 3173 :             dwStopCount = 0;

  004a1	c7 85 4c f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwStopCount$[ebp], 0

; 3174 :             dwNoteOffCount = 0;

  004ab	c7 85 9c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwNoteOffCount$[ebp], 0

; 3175 :             dwNaturalStopCount = 0;

  004b5	c7 85 50 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwNaturalStopCount$[ebp], 0

; 3176 :             dwSubmixCount = 0;

  004bf	c7 85 78 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwSubmixCount$[ebp], 0

; 3177 :             dwLoopCount = 0;

  004c9	c7 85 c8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwLoopCount$[ebp], 0

; 3178 : 
; 3179 :             if(INFINITE != dwTestLength)

  004d3	83 7d 18 ff	 cmp	 DWORD PTR _dwTestLength$[ebp], -1
  004d7	74 16		 je	 SHORT $L37310

; 3180 :             {
; 3181 :                 if(dwCurrentTime >= dwStartTime + dwTestLength)

  004d9	8b 95 2c f3 ff
	ff		 mov	 edx, DWORD PTR _dwStartTime$[ebp]
  004df	03 55 18	 add	 edx, DWORD PTR _dwTestLength$[ebp]
  004e2	39 95 c4 fb ff
	ff		 cmp	 DWORD PTR _dwCurrentTime$[ebp], edx
  004e8	72 05		 jb	 SHORT $L37310

; 3182 :                 {
; 3183 :                     break;

  004ea	e9 f5 02 00 00	 jmp	 $L37308
$L37310:

; 3184 :                 }
; 3185 :             }
; 3186 :         }
; 3187 : 
; 3188 :         //
; 3189 :         // Pick a random buffer and get it's status
; 3190 :         //
; 3191 : 
; 3192 :         i = rand() % dwSourceCount;

  004ef	e8 00 00 00 00	 call	 _rand
  004f4	33 d2		 xor	 edx, edx
  004f6	f7 75 0c	 div	 DWORD PTR _dwSourceCount$[ebp]
  004f9	89 95 f4 fb ff
	ff		 mov	 DWORD PTR _i$[ebp], edx

; 3193 : 
; 3194 :         hr = ValidateResult(apSourceBuffers[i]->GetStatus(&dwStatus));

  004ff	8d 85 80 fb ff
	ff		 lea	 eax, DWORD PTR _dwStatus$[ebp]
  00505	50		 push	 eax
  00506	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0050c	8b 94 8d 48 f3
	ff ff		 mov	 edx, DWORD PTR _apSourceBuffers$[ebp+ecx*4]
  00513	52		 push	 edx
  00514	e8 00 00 00 00	 call	 ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z ; IDirectSoundBuffer::GetStatus
  00519	50		 push	 eax
  0051a	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0051f	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 3195 : 
; 3196 :         if(SUCCEEDED(hr))

  00525	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0052c	7c 4a		 jl	 SHORT $L37315

; 3197 :         {
; 3198 :             if(adwStatus[i] & DSBSTATUS_PENDINGSTOP)

  0052e	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00534	8b 8c 85 58 f7
	ff ff		 mov	 ecx, DWORD PTR _adwStatus$[ebp+eax*4]
  0053b	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  00541	85 c9		 test	 ecx, ecx
  00543	74 20		 je	 SHORT $L37316

; 3199 :             {
; 3200 :                 if(!(dwStatus & DSBSTATUS_PLAYING))

  00545	8b 95 80 fb ff
	ff		 mov	 edx, DWORD PTR _dwStatus$[ebp]
  0054b	83 e2 01	 and	 edx, 1
  0054e	85 d2		 test	 edx, edx
  00550	75 11		 jne	 SHORT $L37317

; 3201 :                 {
; 3202 :                     adwStatus[i] = 0;

  00552	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00558	c7 84 85 58 f7
	ff ff 00 00 00
	00		 mov	 DWORD PTR _adwStatus$[ebp+eax*4], 0
$L37317:

; 3203 :                 }
; 3204 :             }
; 3205 :             else

  00563	eb 13		 jmp	 SHORT $L37315
$L37316:

; 3206 :             {
; 3207 :                 adwStatus[i] = dwStatus;

  00565	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0056b	8b 95 80 fb ff
	ff		 mov	 edx, DWORD PTR _dwStatus$[ebp]
  00571	89 94 8d 58 f7
	ff ff		 mov	 DWORD PTR _adwStatus$[ebp+ecx*4], edx
$L37315:

; 3208 :             }
; 3209 :         }
; 3210 : 
; 3211 :         //
; 3212 :         // Should we play or stop?
; 3213 :         //
; 3214 : 
; 3215 :         if(SUCCEEDED(hr) && !(adwStatus[i] & DSBSTATUS_PENDINGSTOP))

  00578	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0057f	0f 8c 5a 02 00
	00		 jl	 $L37320
  00585	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0058b	8b 8c 85 58 f7
	ff ff		 mov	 ecx, DWORD PTR _adwStatus$[ebp+eax*4]
  00592	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  00598	85 c9		 test	 ecx, ecx
  0059a	0f 85 3f 02 00
	00		 jne	 $L37320

; 3216 :         {
; 3217 :             if(rand() % 2)

  005a0	e8 00 00 00 00	 call	 _rand
  005a5	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  005aa	79 05		 jns	 SHORT $L38176
  005ac	48		 dec	 eax
  005ad	83 c8 fe	 or	 eax, -2			; fffffffeH
  005b0	40		 inc	 eax
$L38176:
  005b1	85 c0		 test	 eax, eax
  005b3	0f 84 0b 01 00
	00		 je	 $L37321

; 3218 :             {
; 3219 :                 dwPlayCount++;

  005b9	8b 95 54 f7 ff
	ff		 mov	 edx, DWORD PTR _dwPlayCount$[ebp]
  005bf	83 c2 01	 add	 edx, 1
  005c2	89 95 54 f7 ff
	ff		 mov	 DWORD PTR _dwPlayCount$[ebp], edx

; 3220 :             
; 3221 :                 //
; 3222 :                 // Submix or not?
; 3223 :                 //
; 3224 :             
; 3225 :                 if(!(adwStatus[i] & DSBSTATUS_PLAYING))

  005c8	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  005ce	8b 8c 85 58 f7
	ff ff		 mov	 ecx, DWORD PTR _adwStatus$[ebp+eax*4]
  005d5	83 e1 01	 and	 ecx, 1
  005d8	85 c9		 test	 ecx, ecx
  005da	75 6a		 jne	 SHORT $L37322

; 3226 :                 {
; 3227 :                     if(rand() % 2)

  005dc	e8 00 00 00 00	 call	 _rand
  005e1	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  005e6	79 05		 jns	 SHORT $L38177
  005e8	48		 dec	 eax
  005e9	83 c8 fe	 or	 eax, -2			; fffffffeH
  005ec	40		 inc	 eax
$L38177:
  005ed	85 c0		 test	 eax, eax
  005ef	74 34		 je	 SHORT $L37323

; 3228 :                     {
; 3229 :                         dwSubmixCount++;

  005f1	8b 95 78 fb ff
	ff		 mov	 edx, DWORD PTR _dwSubmixCount$[ebp]
  005f7	83 c2 01	 add	 edx, 1
  005fa	89 95 78 fb ff
	ff		 mov	 DWORD PTR _dwSubmixCount$[ebp], edx

; 3230 :                 
; 3231 :                         hr = ValidateResult(apSourceBuffers[i]->SetOutputBuffer(pDestBuffer));

  00600	8b 45 fc	 mov	 eax, DWORD PTR _pDestBuffer$[ebp]
  00603	50		 push	 eax
  00604	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0060a	8b 94 8d 48 f3
	ff ff		 mov	 edx, DWORD PTR _apSourceBuffers$[ebp+ecx*4]
  00611	52		 push	 edx
  00612	e8 00 00 00 00	 call	 ?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z ; IDirectSoundBuffer::SetOutputBuffer
  00617	50		 push	 eax
  00618	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0061d	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 3232 :                     }
; 3233 :                     else

  00623	eb 21		 jmp	 SHORT $L37322
$L37323:

; 3234 :                     {
; 3235 :                         hr = ValidateResult(apSourceBuffers[i]->SetOutputBuffer(NULL));

  00625	6a 00		 push	 0
  00627	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0062d	8b 8c 85 48 f3
	ff ff		 mov	 ecx, DWORD PTR _apSourceBuffers$[ebp+eax*4]
  00634	51		 push	 ecx
  00635	e8 00 00 00 00	 call	 ?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z ; IDirectSoundBuffer::SetOutputBuffer
  0063a	50		 push	 eax
  0063b	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00640	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L37322:

; 3236 :                     }
; 3237 :                 }
; 3238 : 
; 3239 :                 //
; 3240 :                 // Loop or not?
; 3241 :                 //
; 3242 : 
; 3243 :                 if(SUCCEEDED(hr)) 

  00646	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0064d	7c 70		 jl	 SHORT $L37326

; 3244 :                 {
; 3245 :                     if(rand() % 2)

  0064f	e8 00 00 00 00	 call	 _rand
  00654	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00659	79 05		 jns	 SHORT $L38178
  0065b	48		 dec	 eax
  0065c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0065f	40		 inc	 eax
$L38178:
  00660	85 c0		 test	 eax, eax
  00662	74 36		 je	 SHORT $L37327

; 3246 :                     {
; 3247 :                         dwLoopCount++;

  00664	8b 95 c8 fb ff
	ff		 mov	 edx, DWORD PTR _dwLoopCount$[ebp]
  0066a	83 c2 01	 add	 edx, 1
  0066d	89 95 c8 fb ff
	ff		 mov	 DWORD PTR _dwLoopCount$[ebp], edx

; 3248 :                 
; 3249 :                         hr = ValidateResult(apSourceBuffers[i]->Play(0, 0, DSBPLAY_LOOPING));

  00673	6a 01		 push	 1
  00675	6a 00		 push	 0
  00677	6a 00		 push	 0
  00679	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0067f	8b 8c 85 48 f3
	ff ff		 mov	 ecx, DWORD PTR _apSourceBuffers$[ebp+eax*4]
  00686	51		 push	 ecx
  00687	e8 00 00 00 00	 call	 ?Play@IDirectSoundBuffer@@QAGJKKK@Z ; IDirectSoundBuffer::Play
  0068c	50		 push	 eax
  0068d	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00692	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 3250 :                     }
; 3251 :                     else

  00698	eb 25		 jmp	 SHORT $L37326
$L37327:

; 3252 :                     {
; 3253 :                         hr = ValidateResult(apSourceBuffers[i]->Play(0, 0, 0));

  0069a	6a 00		 push	 0
  0069c	6a 00		 push	 0
  0069e	6a 00		 push	 0
  006a0	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  006a6	8b 84 95 48 f3
	ff ff		 mov	 eax, DWORD PTR _apSourceBuffers$[ebp+edx*4]
  006ad	50		 push	 eax
  006ae	e8 00 00 00 00	 call	 ?Play@IDirectSoundBuffer@@QAGJKKK@Z ; IDirectSoundBuffer::Play
  006b3	50		 push	 eax
  006b4	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  006b9	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L37326:

; 3254 :                     }
; 3255 :                 }
; 3256 :             }
; 3257 :             else

  006bf	e9 1b 01 00 00	 jmp	 $L37320
$L37321:

; 3258 :             {
; 3259 :                 //
; 3260 :                 // Still playing?
; 3261 :                 //
; 3262 :             
; 3263 :                 if(adwStatus[i] & DSBSTATUS_PLAYING)

  006c4	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  006ca	8b 94 8d 58 f7
	ff ff		 mov	 edx, DWORD PTR _adwStatus$[ebp+ecx*4]
  006d1	83 e2 01	 and	 edx, 1
  006d4	85 d2		 test	 edx, edx
  006d6	0f 84 f4 00 00
	00		 je	 $L37330

; 3264 :                 {
; 3265 :                     //
; 3266 :                     // Envelope or not?
; 3267 :                     //
; 3268 : 
; 3269 :                     if(rand() % 2)

  006dc	e8 00 00 00 00	 call	 _rand
  006e1	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  006e6	79 05		 jns	 SHORT $L38179
  006e8	48		 dec	 eax
  006e9	83 c8 fe	 or	 eax, -2			; fffffffeH
  006ec	40		 inc	 eax
$L38179:
  006ed	85 c0		 test	 eax, eax
  006ef	0f 84 82 00 00
	00		 je	 $L37331

; 3270 :                     {
; 3271 :                         dwNoteOffCount++;

  006f5	8b 85 9c fb ff
	ff		 mov	 eax, DWORD PTR _dwNoteOffCount$[ebp]
  006fb	83 c0 01	 add	 eax, 1
  006fe	89 85 9c fb ff
	ff		 mov	 DWORD PTR _dwNoteOffCount$[ebp], eax

; 3272 :                         
; 3273 :                         dseg.dwRelease = dwNoteOffMin + (rand() % (dwNoteOffMax + 1 - dwNoteOffMin));

  00704	e8 00 00 00 00	 call	 _rand
  00709	8b 4d 14	 mov	 ecx, DWORD PTR _dwNoteOffMax$[ebp]
  0070c	83 c1 01	 add	 ecx, 1
  0070f	2b 4d 10	 sub	 ecx, DWORD PTR _dwNoteOffMin$[ebp]
  00712	33 d2		 xor	 edx, edx
  00714	f7 f1		 div	 ecx
  00716	8b 45 10	 mov	 eax, DWORD PTR _dwNoteOffMin$[ebp]
  00719	03 c2		 add	 eax, edx
  0071b	89 85 e4 fb ff
	ff		 mov	 DWORD PTR _dseg$[ebp+24], eax

; 3274 : 
; 3275 :                         hr = ValidateResult(apSourceBuffers[i]->SetEG(&dseg));

  00721	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _dseg$[ebp]
  00727	51		 push	 ecx
  00728	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  0072e	8b 84 95 48 f3
	ff ff		 mov	 eax, DWORD PTR _apSourceBuffers$[ebp+edx*4]
  00735	50		 push	 eax
  00736	e8 00 00 00 00	 call	 ?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z ; IDirectSoundBuffer::SetEG
  0073b	50		 push	 eax
  0073c	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00741	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 3276 : 
; 3277 :                         if(SUCCEEDED(hr))

  00747	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0074e	7c 25		 jl	 SHORT $L37333

; 3278 :                         {
; 3279 :                             hr = ValidateResult(apSourceBuffers[i]->StopEx(0, DSBSTOPEX_ENVELOPE));

  00750	6a 01		 push	 1
  00752	6a 00		 push	 0
  00754	6a 00		 push	 0
  00756	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0075c	8b 94 8d 48 f3
	ff ff		 mov	 edx, DWORD PTR _apSourceBuffers$[ebp+ecx*4]
  00763	52		 push	 edx
  00764	e8 00 00 00 00	 call	 ?StopEx@IDirectSoundBuffer@@QAGJ_JK@Z ; IDirectSoundBuffer::StopEx
  00769	50		 push	 eax
  0076a	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0076f	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L37333:

; 3280 :                         }
; 3281 :                     }
; 3282 :                     else

  00775	eb 2e		 jmp	 SHORT $L37334
$L37331:

; 3283 :                     {
; 3284 :                         dwStopCount++;

  00777	8b 85 4c f7 ff
	ff		 mov	 eax, DWORD PTR _dwStopCount$[ebp]
  0077d	83 c0 01	 add	 eax, 1
  00780	89 85 4c f7 ff
	ff		 mov	 DWORD PTR _dwStopCount$[ebp], eax

; 3285 : 
; 3286 :                         hr = ValidateResult(apSourceBuffers[i]->Stop());

  00786	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0078c	8b 94 8d 48 f3
	ff ff		 mov	 edx, DWORD PTR _apSourceBuffers$[ebp+ecx*4]
  00793	52		 push	 edx
  00794	e8 00 00 00 00	 call	 ?Stop@IDirectSoundBuffer@@QAGJXZ ; IDirectSoundBuffer::Stop
  00799	50		 push	 eax
  0079a	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0079f	89 85 5c fb ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
$L37334:

; 3287 :                     }
; 3288 : 
; 3289 :                     if(SUCCEEDED(hr))

  007a5	83 bd 5c fb ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  007ac	7c 20		 jl	 SHORT $L37336

; 3290 :                     {
; 3291 :                         adwStatus[i] |= DSBSTATUS_PENDINGSTOP;

  007ae	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  007b4	8b 8c 85 58 f7
	ff ff		 mov	 ecx, DWORD PTR _adwStatus$[ebp+eax*4]
  007bb	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  007c1	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  007c7	89 8c 95 58 f7
	ff ff		 mov	 DWORD PTR _adwStatus$[ebp+edx*4], ecx
$L37336:

; 3292 :                     }
; 3293 :                 }
; 3294 :                 else

  007ce	eb 0f		 jmp	 SHORT $L37320
$L37330:

; 3295 :                 {
; 3296 :                     dwNaturalStopCount++;

  007d0	8b 85 50 f7 ff
	ff		 mov	 eax, DWORD PTR _dwNaturalStopCount$[ebp]
  007d6	83 c0 01	 add	 eax, 1
  007d9	89 85 50 f7 ff
	ff		 mov	 DWORD PTR _dwNaturalStopCount$[ebp], eax
$L37320:

; 3297 :                 }
; 3298 :             }
; 3299 :         }
; 3300 :     }

  007df	e9 48 fc ff ff	 jmp	 $L37307
$L37308:

; 3301 : 
; 3302 :     for(i = 0; i < dwSourceCount; i++)

  007e4	c7 85 f4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  007ee	eb 0f		 jmp	 SHORT $L37338
$L37339:
  007f0	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  007f6	83 c1 01	 add	 ecx, 1
  007f9	89 8d f4 fb ff
	ff		 mov	 DWORD PTR _i$[ebp], ecx
$L37338:
  007ff	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  00805	3b 55 0c	 cmp	 edx, DWORD PTR _dwSourceCount$[ebp]
  00808	73 36		 jae	 SHORT $L37340

; 3303 :     {
; 3304 :         RELEASE(apSourceBuffers[i]);

  0080a	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00810	83 bc 85 48 f3
	ff ff 00	 cmp	 DWORD PTR _apSourceBuffers$[ebp+eax*4], 0
  00818	74 24		 je	 SHORT $L37341
  0081a	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00820	8b 94 8d 48 f3
	ff ff		 mov	 edx, DWORD PTR _apSourceBuffers$[ebp+ecx*4]
  00827	52		 push	 edx
  00828	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  0082d	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00833	c7 84 85 48 f3
	ff ff 00 00 00
	00		 mov	 DWORD PTR _apSourceBuffers$[ebp+eax*4], 0
$L37341:

; 3305 :     }

  0083e	eb b0		 jmp	 SHORT $L37339
$L37340:

; 3306 : 
; 3307 :     for(i = 0; i < dwStreamCount; i++)

  00840	c7 85 f4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  0084a	eb 0f		 jmp	 SHORT $L37342
$L37343:
  0084c	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00852	83 c1 01	 add	 ecx, 1
  00855	89 8d f4 fb ff
	ff		 mov	 DWORD PTR _i$[ebp], ecx
$L37342:
  0085b	8b 95 f4 fb ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  00861	3b 55 1c	 cmp	 edx, DWORD PTR _dwStreamCount$[ebp]
  00864	73 43		 jae	 SHORT $L37344

; 3308 :     {
; 3309 :         RELEASE(apStreams[i]);

  00866	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0086c	83 bc 85 f8 fb
	ff ff 00	 cmp	 DWORD PTR _apStreams$[ebp+eax*4], 0
  00874	74 31		 je	 SHORT $L37345
  00876	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0087c	8b 94 8d f8 fb
	ff ff		 mov	 edx, DWORD PTR _apStreams$[ebp+ecx*4]
  00883	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00889	8b 8c 85 f8 fb
	ff ff		 mov	 ecx, DWORD PTR _apStreams$[ebp+eax*4]
  00890	8b 12		 mov	 edx, DWORD PTR [edx]
  00892	51		 push	 ecx
  00893	ff 52 04	 call	 DWORD PTR [edx+4]
  00896	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0089c	c7 84 85 f8 fb
	ff ff 00 00 00
	00		 mov	 DWORD PTR _apStreams$[ebp+eax*4], 0
$L37345:

; 3310 :     }

  008a7	eb a3		 jmp	 SHORT $L37343
$L37344:

; 3311 : 
; 3312 :     RELEASE(pDestBuffer);

  008a9	83 7d fc 00	 cmp	 DWORD PTR _pDestBuffer$[ebp], 0
  008ad	74 10		 je	 SHORT $L37346
  008af	8b 4d fc	 mov	 ecx, DWORD PTR _pDestBuffer$[ebp]
  008b2	51		 push	 ecx
  008b3	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  008b8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pDestBuffer$[ebp], 0
$L37346:

; 3313 : 
; 3314 :     return hr;

  008bf	8b 85 5c fb ff
	ff		 mov	 eax, DWORD PTR _hr$[ebp]

; 3315 : }    

  008c5	5f		 pop	 edi
  008c6	8b e5		 mov	 esp, ebp
  008c8	5d		 pop	 ebp
  008c9	c2 1c 00	 ret	 28			; 0000001cH
?StressPlayStop@@YGJKKKKKKK@Z ENDP			; StressPlayStop
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetOutputBuffer@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z
DSOUND	SEGMENT
_this$ = 8
_pOutputBuffer$ = 12
?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z PROC NEAR ; IDirectSoundBuffer::SetOutputBuffer, COMDAT

; 1977 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1978 :         return IDirectSoundBuffer_SetOutputBuffer(this, pOutputBuffer);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pOutputBuffer$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetOutputBuffer@8

; 1979 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z ENDP	; IDirectSoundBuffer::SetOutputBuffer
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_Play@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?Play@IDirectSoundBuffer@@QAGJKKK@Z
DSOUND	SEGMENT
_this$ = 8
_dwReserved1$ = 12
_dwReserved2$ = 16
_dwFlags$ = 20
?Play@IDirectSoundBuffer@@QAGJKKK@Z PROC NEAR		; IDirectSoundBuffer::Play, COMDAT

; 2062 :     {   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2063 :         return IDirectSoundBuffer_Play(this, dwReserved1, dwReserved2, dwFlags);

  00003	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _dwReserved2$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _dwReserved1$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _IDirectSoundBuffer_Play@16

; 2064 :     }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
?Play@IDirectSoundBuffer@@QAGJKKK@Z ENDP		; IDirectSoundBuffer::Play
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_Stop@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Stop@IDirectSoundBuffer@@QAGJXZ
DSOUND	SEGMENT
_this$ = 8
?Stop@IDirectSoundBuffer@@QAGJXZ PROC NEAR		; IDirectSoundBuffer::Stop, COMDAT

; 2072 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2073 :         return IDirectSoundBuffer_Stop(this);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _IDirectSoundBuffer_Stop@4

; 2074 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?Stop@IDirectSoundBuffer@@QAGJXZ ENDP			; IDirectSoundBuffer::Stop
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_StopEx@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?StopEx@IDirectSoundBuffer@@QAGJ_JK@Z
DSOUND	SEGMENT
_this$ = 8
_rtTimeStamp$ = 12
_dwFlags$ = 20
?StopEx@IDirectSoundBuffer@@QAGJ_JK@Z PROC NEAR		; IDirectSoundBuffer::StopEx, COMDAT

; 2077 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2078 :         return IDirectSoundBuffer_StopEx(this, rtTimeStamp, dwFlags);

  00003	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _rtTimeStamp$[ebp+4]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _IDirectSoundBuffer_StopEx@16

; 2079 :     }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
?StopEx@IDirectSoundBuffer@@QAGJ_JK@Z ENDP		; IDirectSoundBuffer::StopEx
DSOUND	ENDS
PUBLIC	?FindFrequencyRange@@YGJXZ			; FindFrequencyRange
PUBLIC	??_C@_0BG@ILLMDCNA@Lower?5?$CFlu?5?$CIpitch?5?$CFld?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BG@GKJFABAA@Upper?5?$CFlu?5?$CIpitch?5?$CFld?$CJ?$AA@ ; `string'
EXTRN	_XAudioCalculatePitch@4:NEAR
;	COMDAT ??_C@_0BG@ILLMDCNA@Lower?5?$CFlu?5?$CIpitch?5?$CFld?$CJ?$AA@
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
DSOUND_RD	SEGMENT
??_C@_0BG@ILLMDCNA@Lower?5?$CFlu?5?$CIpitch?5?$CFld?$CJ?$AA@ DB 'Lower %l'
	DB	'u (pitch %ld)', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@GKJFABAA@Upper?5?$CFlu?5?$CIpitch?5?$CFld?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@GKJFABAA@Upper?5?$CFlu?5?$CIpitch?5?$CFld?$CJ?$AA@ DB 'Upper %l'
	DB	'u (pitch %ld)', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?FindFrequencyRange@@YGJXZ
DSOUND	SEGMENT
_i$ = -8
_lPitch$ = -4
?FindFrequencyRange@@YGJXZ PROC NEAR			; FindFrequencyRange, COMDAT

; 3341 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3342 :     LONG                    lPitch;
; 3343 :     DWORD                   i;
; 3344 :     
; 3345 :     for(i = 48000; i > 0; i--)

  00006	c7 45 f8 80 bb
	00 00		 mov	 DWORD PTR _i$[ebp], 48000 ; 0000bb80H
  0000d	eb 09		 jmp	 SHORT $L37352
$L37353:
  0000f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00012	83 e8 01	 sub	 eax, 1
  00015	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L37352:
  00018	83 7d f8 00	 cmp	 DWORD PTR _i$[ebp], 0
  0001c	76 31		 jbe	 SHORT $L37354

; 3346 :     {
; 3347 :         if((lPitch = XAudioCalculatePitch(i)) < DSBPITCH_MIN)

  0001e	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 _XAudioCalculatePitch@4
  00027	89 45 fc	 mov	 DWORD PTR _lPitch$[ebp], eax
  0002a	81 7d fc 01 80
	ff ff		 cmp	 DWORD PTR _lPitch$[ebp], -32767 ; ffff8001H
  00031	7d 1a		 jge	 SHORT $L37355

; 3348 :         {
; 3349 :             DPF_TEST("Lower %lu (pitch %ld)", i + 1, lPitch);

  00033	8b 55 fc	 mov	 edx, DWORD PTR _lPitch$[ebp]
  00036	52		 push	 edx
  00037	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0003a	83 c0 01	 add	 eax, 1
  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@ILLMDCNA@Lower?5?$CFlu?5?$CIpitch?5?$CFld?$CJ?$AA@
  00043	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3350 :             break;

  0004b	eb 02		 jmp	 SHORT $L37354
$L37355:

; 3351 :         }
; 3352 :     }

  0004d	eb c0		 jmp	 SHORT $L37353
$L37354:

; 3353 : 
; 3354 :     for(i = 48000; ; i++)

  0004f	c7 45 f8 80 bb
	00 00		 mov	 DWORD PTR _i$[ebp], 48000 ; 0000bb80H
  00056	eb 09		 jmp	 SHORT $L37357
$L37358:
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0005b	83 c1 01	 add	 ecx, 1
  0005e	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L37357:

; 3355 :     {
; 3356 :         if((lPitch = XAudioCalculatePitch(i)) > DSBPITCH_MAX)

  00061	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 _XAudioCalculatePitch@4
  0006a	89 45 fc	 mov	 DWORD PTR _lPitch$[ebp], eax
  0006d	81 7d fc ff 1f
	00 00		 cmp	 DWORD PTR _lPitch$[ebp], 8191 ; 00001fffH
  00074	7e 1a		 jle	 SHORT $L37360

; 3357 :         {
; 3358 :             DPF_TEST("Upper %lu (pitch %ld)", i - 1, lPitch);

  00076	8b 45 fc	 mov	 eax, DWORD PTR _lPitch$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0007d	83 e9 01	 sub	 ecx, 1
  00080	51		 push	 ecx
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@GKJFABAA@Upper?5?$CFlu?5?$CIpitch?5?$CFld?$CJ?$AA@
  00086	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3359 :             break;

  0008e	eb 02		 jmp	 SHORT $L37359
$L37360:

; 3360 :         }
; 3361 :     }

  00090	eb c6		 jmp	 SHORT $L37358
$L37359:

; 3362 : 
; 3363 :     return DS_OK;

  00092	33 c0		 xor	 eax, eax

; 3364 : }

  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?FindFrequencyRange@@YGJXZ ENDP				; FindFrequencyRange
DSOUND	ENDS
PUBLIC	?TestTimeStampedPackets@@YGJK@Z			; TestTimeStampedPackets
EXTRN	__alldiv:NEAR
EXTRN	__allmul:NEAR
; Function compile flags: /Odt
;	COMDAT ?TestTimeStampedPackets@@YGJK@Z
DSOUND	SEGMENT
_dssd$ = -104
_artTimeStamps$ = -80
_adwStatus$ = -64
_xmp$ = -56
_hr$ = -32
_dwBufferSize$ = -28
_rtPacketLength$ = -24
_i$ = -16
_pwfxFormat$ = -12
_pStream$ = -8
_pvPacketData$ = -4
_dwDelay$ = 8
?TestTimeStampedPackets@@YGJK@Z PROC NEAR		; TestTimeStampedPackets, COMDAT

; 3451 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	56		 push	 esi

; 3452 :     static const DWORD      dwPacketCount                   = 2;
; 3453 :     const LPCWAVEFORMATEX   pwfxFormat                      = CreateFormat(WAVE_FORMAT_PCM, 8000, 16, 1);

  00007	6a 01		 push	 1
  00009	6a 10		 push	 16			; 00000010H
  0000b	68 40 1f 00 00	 push	 8000			; 00001f40H
  00010	6a 01		 push	 1
  00012	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  00017	89 45 f4	 mov	 DWORD PTR _pwfxFormat$[ebp], eax

; 3454 :     const DWORD             dwBufferSize                    = pwfxFormat->nAvgBytesPerSec * 4;

  0001a	8b 45 f4	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  0001d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00020	c1 e1 02	 shl	 ecx, 2
  00023	89 4d e4	 mov	 DWORD PTR _dwBufferSize$[ebp], ecx

; 3455 :     LPVOID                  pvPacketData                    = NULL;

  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pvPacketData$[ebp], 0

; 3456 :     LPDIRECTSOUNDSTREAM     pStream                         = NULL;

  0002d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0

; 3457 :     DWORD                   adwStatus[dwPacketCount];
; 3458 :     REFERENCE_TIME          rtPacketLength;
; 3459 :     REFERENCE_TIME          artTimeStamps[dwPacketCount];
; 3460 :     DSSTREAMDESC            dssd;
; 3461 :     XMEDIAPACKET            xmp;
; 3462 :     HRESULT                 hr;
; 3463 :     DWORD                   i;
; 3464 : 
; 3465 :     ZeroMemory(&dssd, sizeof(dssd));

  00034	6a 18		 push	 24			; 00000018H
  00036	6a 00		 push	 0
  00038	8d 55 98	 lea	 edx, DWORD PTR _dssd$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 _memset
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3466 : 
; 3467 :     dssd.lpwfxFormat = (LPWAVEFORMATEX)pwfxFormat;

  00044	8b 45 f4	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00047	89 45 a0	 mov	 DWORD PTR _dssd$[ebp+8], eax

; 3468 :     dssd.dwMaxAttachedPackets = dwPacketCount;

  0004a	c7 45 9c 02 00
	00 00		 mov	 DWORD PTR _dssd$[ebp+4], 2

; 3469 : 
; 3470 :     hr = ValidateResult(DirectSoundCreateStream(&dssd, &pStream));

  00051	8d 4d f8	 lea	 ecx, DWORD PTR _pStream$[ebp]
  00054	51		 push	 ecx
  00055	8d 55 98	 lea	 edx, DWORD PTR _dssd$[ebp]
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 _DirectSoundCreateStream@8
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00064	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax

; 3471 : 
; 3472 :     if(SUCCEEDED(hr))

  00067	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0006b	7c 18		 jl	 SHORT $L37381

; 3473 :     {
; 3474 :         hr = MALLOC(pvPacketData, BYTE, dwBufferSize);

  0006d	8b 45 e4	 mov	 eax, DWORD PTR _dwBufferSize$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  00076	89 45 fc	 mov	 DWORD PTR _pvPacketData$[ebp], eax
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _pvPacketData$[ebp]
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  00082	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax
$L37381:

; 3475 :     }
; 3476 : 
; 3477 :     if(SUCCEEDED(hr))

  00085	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00089	0f 8c f5 00 00
	00		 jl	 $L37385

; 3478 :     {
; 3479 :         GenerateTone(pvPacketData, dwBufferSize, pwfxFormat->nSamplesPerSec, pwfxFormat->wBitsPerSample, pwfxFormat->nChannels, 500);

  0008f	68 f4 01 00 00	 push	 500			; 000001f4H
  00094	8b 55 f4	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  00097	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  0009b	50		 push	 eax
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  0009f	0f b7 51 0e	 movzx	 edx, WORD PTR [ecx+14]
  000a3	52		 push	 edx
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  000a7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000aa	51		 push	 ecx
  000ab	8b 55 e4	 mov	 edx, DWORD PTR _dwBufferSize$[ebp]
  000ae	52		 push	 edx
  000af	8b 45 fc	 mov	 eax, DWORD PTR _pvPacketData$[ebp]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?GenerateTone@@YGXPAXKKKKK@Z ; GenerateTone

; 3480 : 
; 3481 :         ZeroMemory(&xmp, sizeof(xmp));

  000b8	6a 18		 push	 24			; 00000018H
  000ba	6a 00		 push	 0
  000bc	8d 4d c8	 lea	 ecx, DWORD PTR _xmp$[ebp]
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 _memset
  000c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3482 : 
; 3483 :         xmp.pvBuffer = pvPacketData;

  000c8	8b 55 fc	 mov	 edx, DWORD PTR _pvPacketData$[ebp]
  000cb	89 55 c8	 mov	 DWORD PTR _xmp$[ebp], edx

; 3484 :         xmp.dwMaxSize = dwBufferSize;

  000ce	8b 45 e4	 mov	 eax, DWORD PTR _dwBufferSize$[ebp]
  000d1	89 45 cc	 mov	 DWORD PTR _xmp$[ebp+4], eax

; 3485 : 
; 3486 :         rtPacketLength = ((REFERENCE_TIME)dwBufferSize * 10000000i64) / (REFERENCE_TIME)pwfxFormat->nAvgBytesPerSec;

  000d4	8b 45 e4	 mov	 eax, DWORD PTR _dwBufferSize$[ebp]
  000d7	b9 80 96 98 00	 mov	 ecx, 10000000		; 00989680H
  000dc	f7 e1		 mul	 ecx
  000de	8b 4d f4	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  000e1	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  000e4	33 f6		 xor	 esi, esi
  000e6	56		 push	 esi
  000e7	51		 push	 ecx
  000e8	52		 push	 edx
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 __alldiv
  000ef	89 45 e8	 mov	 DWORD PTR _rtPacketLength$[ebp], eax
  000f2	89 55 ec	 mov	 DWORD PTR _rtPacketLength$[ebp+4], edx

; 3487 :         rtPacketLength += (REFERENCE_TIME)dwDelay * 10000i64;

  000f5	8b 45 08	 mov	 eax, DWORD PTR _dwDelay$[ebp]
  000f8	ba 10 27 00 00	 mov	 edx, 10000		; 00002710H
  000fd	f7 e2		 mul	 edx
  000ff	8b 4d e8	 mov	 ecx, DWORD PTR _rtPacketLength$[ebp]
  00102	03 c8		 add	 ecx, eax
  00104	8b 45 ec	 mov	 eax, DWORD PTR _rtPacketLength$[ebp+4]
  00107	13 c2		 adc	 eax, edx
  00109	89 4d e8	 mov	 DWORD PTR _rtPacketLength$[ebp], ecx
  0010c	89 45 ec	 mov	 DWORD PTR _rtPacketLength$[ebp+4], eax

; 3488 :         
; 3489 :         for(i = 0; (i < dwPacketCount) && SUCCEEDED(hr); i++)

  0010f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00116	eb 09		 jmp	 SHORT $L37390
$L37391:
  00118	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  0011b	83 c1 01	 add	 ecx, 1
  0011e	89 4d f0	 mov	 DWORD PTR _i$[ebp], ecx
$L37390:
  00121	83 7d f0 02	 cmp	 DWORD PTR _i$[ebp], 2
  00125	73 5d		 jae	 SHORT $L37385
  00127	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0012b	7c 57		 jl	 SHORT $L37385

; 3490 :         {
; 3491 :             artTimeStamps[i] = -(rtPacketLength * i);

  0012d	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00130	33 c0		 xor	 eax, eax
  00132	50		 push	 eax
  00133	52		 push	 edx
  00134	8b 4d ec	 mov	 ecx, DWORD PTR _rtPacketLength$[ebp+4]
  00137	51		 push	 ecx
  00138	8b 55 e8	 mov	 edx, DWORD PTR _rtPacketLength$[ebp]
  0013b	52		 push	 edx
  0013c	e8 00 00 00 00	 call	 __allmul
  00141	f7 d8		 neg	 eax
  00143	83 d2 00	 adc	 edx, 0
  00146	f7 da		 neg	 edx
  00148	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  0014b	89 44 cd b0	 mov	 DWORD PTR _artTimeStamps$[ebp+ecx*8], eax
  0014f	89 54 cd b4	 mov	 DWORD PTR _artTimeStamps$[ebp+ecx*8+4], edx

; 3492 : 
; 3493 :             xmp.pdwStatus = &adwStatus[i];

  00153	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00156	8d 44 95 c0	 lea	 eax, DWORD PTR _adwStatus$[ebp+edx*4]
  0015a	89 45 d4	 mov	 DWORD PTR _xmp$[ebp+12], eax

; 3494 :             xmp.prtTimestamp = &artTimeStamps[i];

  0015d	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00160	8d 54 cd b0	 lea	 edx, DWORD PTR _artTimeStamps$[ebp+ecx*8]
  00164	89 55 dc	 mov	 DWORD PTR _xmp$[ebp+20], edx

; 3495 : 
; 3496 :             hr = ValidateResult(pStream->Process(&xmp, NULL));

  00167	6a 00		 push	 0
  00169	8d 45 c8	 lea	 eax, DWORD PTR _xmp$[ebp]
  0016c	50		 push	 eax
  0016d	8b 4d f8	 mov	 ecx, DWORD PTR _pStream$[ebp]
  00170	8b 11		 mov	 edx, DWORD PTR [ecx]
  00172	8b 45 f8	 mov	 eax, DWORD PTR _pStream$[ebp]
  00175	50		 push	 eax
  00176	ff 52 10	 call	 DWORD PTR [edx+16]
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0017f	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax

; 3497 :         }

  00182	eb 94		 jmp	 SHORT $L37391
$L37385:

; 3498 :     }
; 3499 : 
; 3500 :     if(SUCCEEDED(hr))

  00184	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00188	7c 2e		 jl	 SHORT $L37394

; 3501 :     {
; 3502 :         for(i = 0; i < dwPacketCount; i++)

  0018a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00191	eb 09		 jmp	 SHORT $L37395
$L37396:
  00193	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00196	83 c1 01	 add	 ecx, 1
  00199	89 4d f0	 mov	 DWORD PTR _i$[ebp], ecx
$L37395:
  0019c	83 7d f0 02	 cmp	 DWORD PTR _i$[ebp], 2
  001a0	73 16		 jae	 SHORT $L37394
$L37399:

; 3503 :         {
; 3504 :             while(XMEDIAPACKET_STATUS_PENDING == adwStatus[i])

  001a2	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  001a5	81 7c 95 c0 0a
	00 00 80	 cmp	 DWORD PTR _adwStatus$[ebp+edx*4], -2147483638 ; 8000000aH
  001ad	75 07		 jne	 SHORT $L37400

; 3505 :             {
; 3506 :                 DirectSoundDoWork();

  001af	e8 00 00 00 00	 call	 _DirectSoundDoWork@0

; 3507 :             }

  001b4	eb ec		 jmp	 SHORT $L37399
$L37400:

; 3508 :         }

  001b6	eb db		 jmp	 SHORT $L37396
$L37394:

; 3509 :     }
; 3510 : 
; 3511 :     RELEASE(pStream);

  001b8	83 7d f8 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  001bc	74 13		 je	 SHORT $L37402
  001be	8b 45 f8	 mov	 eax, DWORD PTR _pStream$[ebp]
  001c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c3	8b 55 f8	 mov	 edx, DWORD PTR _pStream$[ebp]
  001c6	52		 push	 edx
  001c7	ff 51 04	 call	 DWORD PTR [ecx+4]
  001ca	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0
$L37402:

; 3512 :     FREE(pvPacketData);

  001d1	8d 45 fc	 lea	 eax, DWORD PTR _pvPacketData$[ebp]
  001d4	50		 push	 eax
  001d5	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 3513 : 
; 3514 :     return hr;

  001da	8b 45 e0	 mov	 eax, DWORD PTR _hr$[ebp]

; 3515 : }

  001dd	5e		 pop	 esi
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 04 00	 ret	 4
?TestTimeStampedPackets@@YGJK@Z ENDP			; TestTimeStampedPackets
DSOUND	ENDS
PUBLIC	?TestSetFormat@@YGJXZ				; TestSetFormat
PUBLIC	?SetFormat@IDirectSoundBuffer@@QAGJPBUtWAVEFORMATEX@@@Z ; IDirectSoundBuffer::SetFormat
;	COMDAT ?wfxFormat1@?1??TestSetFormat@@YGJXZ@4UtWAVEFORMATEX@@B
DSOUND_RD	SEGMENT
?wfxFormat1@?1??TestSetFormat@@YGJXZ@4UtWAVEFORMATEX@@B DW 01H ; `TestSetFormat'::`2'::wfxFormat1
	DW	02H
	DD	0ac44H
	DD	02b110H
	DW	04H
	DW	010H
	DW	00H
DSOUND_RD	ENDS
;	COMDAT ?wfxFormat2@?1??TestSetFormat@@YGJXZ@4Uxbox_adpcmwaveformat_tag@@B
DSOUND_RD	SEGMENT
?wfxFormat2@?1??TestSetFormat@@YGJXZ@4Uxbox_adpcmwaveformat_tag@@B DW 069H ; `TestSetFormat'::`2'::wfxFormat2
	DW	01H
	DD	05622H
	DD	03060H
	DW	024H
	DW	04H
	DW	02H
	DW	040H
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestSetFormat@@YGJXZ
DSOUND	SEGMENT
_pSrcXmo2$ = -20
_hr$ = -16
_pvDataBuffer2$ = -12
_dwLength2$ = -8
_pBuffer$ = -4
?TestSetFormat@@YGJXZ PROC NEAR				; TestSetFormat, COMDAT

; 3541 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 3542 :     static const WAVEFORMATEX           wfxFormat1      = INIT_PCM_WAVEFORMAT(2, 44100, 16);
; 3543 :     static const XBOXADPCMWAVEFORMAT    wfxFormat2      = INIT_XBOX_ADPCM_WAVEFORMAT(1, 22050);
; 3544 :     static const DWORD                  dwDelay         = 2500;
; 3545 :     XFileMediaObject *                  pSrcXmo2        = NULL;

  00006	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pSrcXmo2$[ebp], 0

; 3546 :     LPVOID                              pvDataBuffer2   = NULL;

  0000d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pvDataBuffer2$[ebp], 0

; 3547 :     IDirectSoundBuffer *                pBuffer         = NULL;

  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 3548 :     DWORD                               dwLength2;
; 3549 :     HRESULT                             hr;
; 3550 :     
; 3551 :     hr = CreateStdBuffer(0, &wfxFormat1, NULL, NULL, &pBuffer);

  0001b	6a 00		 push	 0
  0001d	8d 45 fc	 lea	 eax, DWORD PTR _pBuffer$[ebp]
  00020	50		 push	 eax
  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	68 00 00 00 00	 push	 OFFSET FLAT:?wfxFormat1@?1??TestSetFormat@@YGJXZ@4UtWAVEFORMATEX@@B
  0002a	6a 00		 push	 0
  0002c	e8 00 00 00 00	 call	 ?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z ; CreateStdBuffer
  00031	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 3552 :     
; 3553 :     if(SUCCEEDED(hr))

  00034	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00038	7c 12		 jl	 SHORT $L37431

; 3554 :     {
; 3555 :         hr = PlayBuffer(pBuffer, DSBPLAY_LOOPING);

  0003a	6a 00		 push	 0
  0003c	6a 00		 push	 0
  0003e	6a 01		 push	 1
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  00049	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L37431:

; 3556 :     }
; 3557 : 
; 3558 :     if(SUCCEEDED(hr))

  0004c	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00050	7c 17		 jl	 SHORT $L37433

; 3559 :     {
; 3560 :         hr = StopBuffer(pBuffer, 0, dwDelay, TRUE, TRUE);

  00052	6a 01		 push	 1
  00054	6a 01		 push	 1
  00056	68 c4 09 00 00	 push	 2500			; 000009c4H
  0005b	6a 00		 push	 0
  0005d	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z ; StopBuffer
  00066	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L37433:

; 3561 :     }
; 3562 : 
; 3563 :     if(SUCCEEDED(hr))

  00069	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0006d	7c 16		 jl	 SHORT $L37435

; 3564 :     {
; 3565 :         hr = ValidateResult(pBuffer->SetBufferData(NULL, 0));

  0006f	6a 00		 push	 0
  00071	6a 00		 push	 0
  00073	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00082	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L37435:

; 3566 :     }
; 3567 :     
; 3568 :     if(SUCCEEDED(hr))

  00085	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00089	7c 19		 jl	 SHORT $L37437

; 3569 :     {
; 3570 :         hr = LoadStdWaveFile(&wfxFormat2.wfx, &pvDataBuffer2, &dwLength2, &pSrcXmo2);

  0008b	8d 4d ec	 lea	 ecx, DWORD PTR _pSrcXmo2$[ebp]
  0008e	51		 push	 ecx
  0008f	8d 55 f8	 lea	 edx, DWORD PTR _dwLength2$[ebp]
  00092	52		 push	 edx
  00093	8d 45 f4	 lea	 eax, DWORD PTR _pvDataBuffer2$[ebp]
  00096	50		 push	 eax
  00097	68 00 00 00 00	 push	 OFFSET FLAT:?wfxFormat2@?1??TestSetFormat@@YGJXZ@4Uxbox_adpcmwaveformat_tag@@B
  0009c	e8 00 00 00 00	 call	 ?LoadStdWaveFile@@YGJPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z ; LoadStdWaveFile
  000a1	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L37437:

; 3571 :     }
; 3572 : 
; 3573 :     if(SUCCEEDED(hr))

  000a4	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a8	7c 17		 jl	 SHORT $L37439

; 3574 :     {
; 3575 :         hr = ValidateResult(pBuffer->SetFormat(&wfxFormat2.wfx));

  000aa	68 00 00 00 00	 push	 OFFSET FLAT:?wfxFormat2@?1??TestSetFormat@@YGJXZ@4Uxbox_adpcmwaveformat_tag@@B
  000af	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 ?SetFormat@IDirectSoundBuffer@@QAGJPBUtWAVEFORMATEX@@@Z ; IDirectSoundBuffer::SetFormat
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000be	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L37439:

; 3576 :     }
; 3577 : 
; 3578 :     if(SUCCEEDED(hr))

  000c1	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c5	7c 1a		 jl	 SHORT $L37441

; 3579 :     {
; 3580 :         hr = ValidateResult(pBuffer->SetBufferData(pvDataBuffer2, dwLength2));

  000c7	8b 55 f8	 mov	 edx, DWORD PTR _dwLength2$[ebp]
  000ca	52		 push	 edx
  000cb	8b 45 f4	 mov	 eax, DWORD PTR _pvDataBuffer2$[ebp]
  000ce	50		 push	 eax
  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  000d2	51		 push	 ecx
  000d3	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000de	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L37441:

; 3581 :     }
; 3582 : 
; 3583 :     if(SUCCEEDED(hr))

  000e1	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000e5	7c 12		 jl	 SHORT $L37443

; 3584 :     {
; 3585 :         hr = PlayBuffer(pBuffer, DSBPLAY_LOOPING);

  000e7	6a 00		 push	 0
  000e9	6a 00		 push	 0
  000eb	6a 01		 push	 1
  000ed	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  000f0	52		 push	 edx
  000f1	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  000f6	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L37443:

; 3586 :     }
; 3587 : 
; 3588 :     if(SUCCEEDED(hr))

  000f9	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000fd	7c 17		 jl	 SHORT $L37445

; 3589 :     {
; 3590 :         hr = StopBuffer(pBuffer, 0, dwDelay, TRUE, TRUE);

  000ff	6a 01		 push	 1
  00101	6a 01		 push	 1
  00103	68 c4 09 00 00	 push	 2500			; 000009c4H
  00108	6a 00		 push	 0
  0010a	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z ; StopBuffer
  00113	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L37445:

; 3591 :     }
; 3592 : 
; 3593 :     RELEASE(pBuffer);        

  00116	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  0011a	74 10		 je	 SHORT $L37446
  0011c	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  0011f	51		 push	 ecx
  00120	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  00125	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L37446:

; 3594 :     RELEASE(pSrcXmo2);

  0012c	83 7d ec 00	 cmp	 DWORD PTR _pSrcXmo2$[ebp], 0
  00130	74 13		 je	 SHORT $L37447
  00132	8b 55 ec	 mov	 edx, DWORD PTR _pSrcXmo2$[ebp]
  00135	8b 02		 mov	 eax, DWORD PTR [edx]
  00137	8b 4d ec	 mov	 ecx, DWORD PTR _pSrcXmo2$[ebp]
  0013a	51		 push	 ecx
  0013b	ff 50 04	 call	 DWORD PTR [eax+4]
  0013e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pSrcXmo2$[ebp], 0
$L37447:

; 3595 :     FREE(pvDataBuffer2);

  00145	8d 55 f4	 lea	 edx, DWORD PTR _pvDataBuffer2$[ebp]
  00148	52		 push	 edx
  00149	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 3596 : 
; 3597 :     return hr;

  0014e	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]

; 3598 : }

  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
?TestSetFormat@@YGJXZ ENDP				; TestSetFormat
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetFormat@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetFormat@IDirectSoundBuffer@@QAGJPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT
_this$ = 8
_pwfxFormat$ = 12
?SetFormat@IDirectSoundBuffer@@QAGJPBUtWAVEFORMATEX@@@Z PROC NEAR ; IDirectSoundBuffer::SetFormat, COMDAT

; 1937 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1938 :         return IDirectSoundBuffer_SetFormat(this, pwfxFormat);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetFormat@8

; 1939 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetFormat@IDirectSoundBuffer@@QAGJPBUtWAVEFORMATEX@@@Z ENDP ; IDirectSoundBuffer::SetFormat
DSOUND	ENDS
PUBLIC	?TestStarvation@@YGJKKKKKKK@Z			; TestStarvation
PUBLIC	??_C@_0BD@LMEEMLAP@Feeding?5the?5stream?$AA@	; `string'
PUBLIC	??_C@_0BE@PJALNDG@Starving?5the?5stream?$AA@	; `string'
;	COMDAT ??_C@_0BD@LMEEMLAP@Feeding?5the?5stream?$AA@
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
DSOUND_RD	SEGMENT
??_C@_0BD@LMEEMLAP@Feeding?5the?5stream?$AA@ DB 'Feeding the stream', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@PJALNDG@Starving?5the?5stream?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@PJALNDG@Starving?5the?5stream?$AA@ DB 'Starving the stream', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestStarvation@@YGJKKKKKKK@Z
DSOUND	SEGMENT
_fStarve$ = -56
_xmp$ = -52
_hr$ = -28
_pvAudioData$ = -24
_dwPacketCount$ = -20
_padwStatus$ = -16
_dwAudioDataSize$ = -12
_pwfxFormat$ = -8
_pStream$ = -4
_dwFlags$ = 8
_dwFormatTag$ = 12
_dwSamplesPerSec$ = 16
_dwBitsPerSample$ = 20
_dwChannelCount$ = 24
_dwPacketSize$ = 28
_dwStarvationChance$ = 32
?TestStarvation@@YGJKKKKKKK@Z PROC NEAR			; TestStarvation, COMDAT

; 3636 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H

; 3637 :     const LPCWAVEFORMATEX   pwfxFormat      = CreateFormat(dwFormatTag, dwSamplesPerSec, dwBitsPerSample, dwChannelCount);

  00006	8b 45 18	 mov	 eax, DWORD PTR _dwChannelCount$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 14	 mov	 ecx, DWORD PTR _dwBitsPerSample$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 10	 mov	 edx, DWORD PTR _dwSamplesPerSec$[ebp]
  00011	52		 push	 edx
  00012	8b 45 0c	 mov	 eax, DWORD PTR _dwFormatTag$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  0001b	89 45 f8	 mov	 DWORD PTR _pwfxFormat$[ebp], eax

; 3638 :     LPDIRECTSOUNDSTREAM     pStream         = NULL;

  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0

; 3639 :     LPVOID                  pvAudioData     = NULL;

  00025	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pvAudioData$[ebp], 0

; 3640 :     DWORD                   dwAudioDataSize = 0;

  0002c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwAudioDataSize$[ebp], 0

; 3641 :     DWORD                   dwPacketCount   = 0;

  00033	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwPacketCount$[ebp], 0

; 3642 :     LPDWORD                 padwStatus      = NULL;

  0003a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _padwStatus$[ebp], 0

; 3643 :     BOOL                    fStarve;
; 3644 :     XMEDIAPACKET            xmp;
; 3645 :     HRESULT                 hr;
; 3646 : 
; 3647 :     hr = CreateStdStream(dwFlags, pwfxFormat, NULL, &dwPacketSize, NULL, NULL, NULL, &pStream, &pvAudioData, &dwAudioDataSize, &dwPacketCount);

  00041	8d 4d ec	 lea	 ecx, DWORD PTR _dwPacketCount$[ebp]
  00044	51		 push	 ecx
  00045	8d 55 f4	 lea	 edx, DWORD PTR _dwAudioDataSize$[ebp]
  00048	52		 push	 edx
  00049	8d 45 e8	 lea	 eax, DWORD PTR _pvAudioData$[ebp]
  0004c	50		 push	 eax
  0004d	8d 4d fc	 lea	 ecx, DWORD PTR _pStream$[ebp]
  00050	51		 push	 ecx
  00051	6a 00		 push	 0
  00053	6a 00		 push	 0
  00055	6a 00		 push	 0
  00057	8d 55 1c	 lea	 edx, DWORD PTR _dwPacketSize$[ebp]
  0005a	52		 push	 edx
  0005b	6a 00		 push	 0
  0005d	8b 45 f8	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00060	50		 push	 eax
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ?CreateStdStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z ; CreateStdStream
  0006a	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 3648 : 
; 3649 :     if(SUCCEEDED(hr))

  0006d	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00071	7c 1b		 jl	 SHORT $L37468

; 3650 :     {
; 3651 :         hr = MALLOC(padwStatus, DWORD, dwPacketCount);

  00073	8b 55 ec	 mov	 edx, DWORD PTR _dwPacketCount$[ebp]
  00076	c1 e2 02	 shl	 edx, 2
  00079	52		 push	 edx
  0007a	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  0007f	89 45 f0	 mov	 DWORD PTR _padwStatus$[ebp], eax
  00082	8b 45 f0	 mov	 eax, DWORD PTR _padwStatus$[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  0008b	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax
$L37468:

; 3652 :     }
; 3653 : 
; 3654 :     if(SUCCEEDED(hr))

  0008e	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00092	7c 22		 jl	 SHORT $L37474

; 3655 :     {
; 3656 :         ZeroMemory(&xmp, sizeof(xmp));

  00094	6a 18		 push	 24			; 00000018H
  00096	6a 00		 push	 0
  00098	8d 4d cc	 lea	 ecx, DWORD PTR _xmp$[ebp]
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 _memset
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3657 : 
; 3658 :         xmp.pvBuffer = pvAudioData;

  000a4	8b 55 e8	 mov	 edx, DWORD PTR _pvAudioData$[ebp]
  000a7	89 55 cc	 mov	 DWORD PTR _xmp$[ebp], edx

; 3659 :         xmp.dwMaxSize = dwPacketSize;

  000aa	8b 45 1c	 mov	 eax, DWORD PTR _dwPacketSize$[ebp]
  000ad	89 45 d0	 mov	 DWORD PTR _xmp$[ebp+4], eax

; 3660 :         xmp.pdwStatus = padwStatus;

  000b0	8b 4d f0	 mov	 ecx, DWORD PTR _padwStatus$[ebp]
  000b3	89 4d d8	 mov	 DWORD PTR _xmp$[ebp+12], ecx
$L37474:

; 3661 :     }
; 3662 : 
; 3663 :     while(SUCCEEDED(hr) && dwPacketCount--)

  000b6	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ba	0f 8c b1 00 00
	00		 jl	 $L37475
  000c0	8b 55 ec	 mov	 edx, DWORD PTR _dwPacketCount$[ebp]
  000c3	8b 45 ec	 mov	 eax, DWORD PTR _dwPacketCount$[ebp]
  000c6	83 e8 01	 sub	 eax, 1
  000c9	89 45 ec	 mov	 DWORD PTR _dwPacketCount$[ebp], eax
  000cc	85 d2		 test	 edx, edx
  000ce	0f 84 9d 00 00
	00		 je	 $L37475

; 3664 :     {
; 3665 :         if(!dwPacketCount)

  000d4	83 7d ec 00	 cmp	 DWORD PTR _dwPacketCount$[ebp], 0
  000d8	75 06		 jne	 SHORT $L37477

; 3666 :         {
; 3667 :             xmp.dwMaxSize = dwAudioDataSize;

  000da	8b 4d f4	 mov	 ecx, DWORD PTR _dwAudioDataSize$[ebp]
  000dd	89 4d d0	 mov	 DWORD PTR _xmp$[ebp+4], ecx
$L37477:

; 3668 :         }
; 3669 : 
; 3670 :         DPF_TEST("Feeding the stream");

  000e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@LMEEMLAP@Feeding?5the?5stream?$AA@
  000e5	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  000ea	83 c4 04	 add	 esp, 4

; 3671 : 
; 3672 :         hr = ValidateResult(pStream->Process(&xmp, NULL));

  000ed	6a 00		 push	 0
  000ef	8d 55 cc	 lea	 edx, DWORD PTR _xmp$[ebp]
  000f2	52		 push	 edx
  000f3	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  000f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f8	8b 55 fc	 mov	 edx, DWORD PTR _pStream$[ebp]
  000fb	52		 push	 edx
  000fc	ff 51 10	 call	 DWORD PTR [ecx+16]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00105	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 3673 : 
; 3674 :         if(SUCCEEDED(hr))

  00108	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0010c	7c 43		 jl	 SHORT $L37480

; 3675 :         {
; 3676 :             fStarve = !(rand() % dwStarvationChance);

  0010e	e8 00 00 00 00	 call	 _rand
  00113	33 d2		 xor	 edx, edx
  00115	f7 75 20	 div	 DWORD PTR _dwStarvationChance$[ebp]
  00118	f7 da		 neg	 edx
  0011a	1b d2		 sbb	 edx, edx
  0011c	42		 inc	 edx
  0011d	89 55 c8	 mov	 DWORD PTR _fStarve$[ebp], edx

; 3677 :             
; 3678 :             if(!dwPacketCount || fStarve)

  00120	83 7d ec 00	 cmp	 DWORD PTR _dwPacketCount$[ebp], 0
  00124	74 06		 je	 SHORT $L37482
  00126	83 7d c8 00	 cmp	 DWORD PTR _fStarve$[ebp], 0
  0012a	74 25		 je	 SHORT $L37480
$L37482:

; 3679 :             {
; 3680 :                 if(fStarve)

  0012c	83 7d c8 00	 cmp	 DWORD PTR _fStarve$[ebp], 0
  00130	74 0d		 je	 SHORT $L37486

; 3681 :                 {
; 3682 :                     DPF_TEST("Starving the stream");

  00132	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@PJALNDG@Starving?5the?5stream?$AA@
  00137	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  0013c	83 c4 04	 add	 esp, 4
$L37486:

; 3683 :                 }
; 3684 : 
; 3685 :                 while(XMEDIAPACKET_STATUS_PENDING == *xmp.pdwStatus)

  0013f	8b 45 d8	 mov	 eax, DWORD PTR _xmp$[ebp+12]
  00142	81 38 0a 00 00
	80		 cmp	 DWORD PTR [eax], -2147483638 ; 8000000aH
  00148	75 07		 jne	 SHORT $L37480

; 3686 :                 {
; 3687 :                     DirectSoundDoWork();

  0014a	e8 00 00 00 00	 call	 _DirectSoundDoWork@0

; 3688 :                 }

  0014f	eb ee		 jmp	 SHORT $L37486
$L37480:

; 3689 :             }
; 3690 :         }
; 3691 : 
; 3692 :         xmp.pvBuffer = (LPBYTE)xmp.pvBuffer + xmp.dwMaxSize;

  00151	8b 4d cc	 mov	 ecx, DWORD PTR _xmp$[ebp]
  00154	03 4d d0	 add	 ecx, DWORD PTR _xmp$[ebp+4]
  00157	89 4d cc	 mov	 DWORD PTR _xmp$[ebp], ecx

; 3693 :         
; 3694 :         xmp.pdwStatus++;

  0015a	8b 55 d8	 mov	 edx, DWORD PTR _xmp$[ebp+12]
  0015d	83 c2 04	 add	 edx, 4
  00160	89 55 d8	 mov	 DWORD PTR _xmp$[ebp+12], edx

; 3695 : 
; 3696 :         dwAudioDataSize -= xmp.dwMaxSize;

  00163	8b 45 f4	 mov	 eax, DWORD PTR _dwAudioDataSize$[ebp]
  00166	2b 45 d0	 sub	 eax, DWORD PTR _xmp$[ebp+4]
  00169	89 45 f4	 mov	 DWORD PTR _dwAudioDataSize$[ebp], eax

; 3697 :     }

  0016c	e9 45 ff ff ff	 jmp	 $L37474
$L37475:

; 3698 : 
; 3699 :     RELEASE(pStream);

  00171	83 7d fc 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  00175	74 13		 je	 SHORT $L37490
  00177	8b 4d fc	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0017a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0017c	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  0017f	50		 push	 eax
  00180	ff 52 04	 call	 DWORD PTR [edx+4]
  00183	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0
$L37490:

; 3700 : 
; 3701 :     FREE(pvAudioData);

  0018a	8d 4d e8	 lea	 ecx, DWORD PTR _pvAudioData$[ebp]
  0018d	51		 push	 ecx
  0018e	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 3702 :     FREE(padwStatus);

  00193	8d 55 f0	 lea	 edx, DWORD PTR _padwStatus$[ebp]
  00196	52		 push	 edx
  00197	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 3703 : 
; 3704 :     return hr;

  0019c	8b 45 e4	 mov	 eax, DWORD PTR _hr$[ebp]

; 3705 : }

  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c2 1c 00	 ret	 28			; 0000001cH
?TestStarvation@@YGJKKKKKKK@Z ENDP			; TestStarvation
DSOUND	ENDS
PUBLIC	?TestWaveBundler@@YGJPBDK@Z			; TestWaveBundler
PUBLIC	??_C@_0BF@FDILLCGP@Opening?5wave?5bank?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0DC@FELFBPC@dwEntryCount?5?$DN?$DN?5SectionData?4pHea@ ; `string'
PUBLIC	??_C@_0CJ@CFAPPEMP@Entire?5bank?5mapped?4?5?5Using?5SetPl@ ; `string'
PUBLIC	??_C@_0DL@KCCIBAPP@Bank?5too?5big?5to?5map?4?5?5Using?5SetB@ ; `string'
PUBLIC	??_C@_05NLEMHEGP@ADPCM?$AA@			; `string'
PUBLIC	??_C@_03CCLNCNJA@PCM?$AA@			; `string'
PUBLIC	??_C@_0FF@LIKEALJ@Loading?5entry?5?$CFlu?5?$CI?$CFs?0?5?$CFlu?4?$CF3?43l@ ; `string'
EXTRN	_WaveBankExpandFormat@8:NEAR
EXTRN	??0CWaveBankReader@@QAE@XZ:NEAR			; CWaveBankReader::CWaveBankReader
EXTRN	??1CWaveBankReader@@UAE@XZ:NEAR			; CWaveBankReader::~CWaveBankReader
EXTRN	?Open@CWaveBankReader@@QAEJPBD@Z:NEAR		; CWaveBankReader::Open
EXTRN	?GetSectionData@CWaveBankReader@@QAEXPAU_WAVEBANKSECTIONDATA@@@Z:NEAR ; CWaveBankReader::GetSectionData
;	COMDAT ??_C@_0BF@FDILLCGP@Opening?5wave?5bank?5?$CFs?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@FDILLCGP@Opening?5wave?5bank?5?$CFs?$AA@ DB 'Opening wave bank '
	DB	'%s', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DC@FELFBPC@dwEntryCount?5?$DN?$DN?5SectionData?4pHea@
DSOUND_RD	SEGMENT
??_C@_0DC@FELFBPC@dwEntryCount?5?$DN?$DN?5SectionData?4pHea@ DB 'dwEntryC'
	DB	'ount == SectionData.pHeader->dwEntryCount', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@CFAPPEMP@Entire?5bank?5mapped?4?5?5Using?5SetPl@
DSOUND_RD	SEGMENT
??_C@_0CJ@CFAPPEMP@Entire?5bank?5mapped?4?5?5Using?5SetPl@ DB 'Entire ban'
	DB	'k mapped.  Using SetPlayRegion', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DL@KCCIBAPP@Bank?5too?5big?5to?5map?4?5?5Using?5SetB@
DSOUND_RD	SEGMENT
??_C@_0DL@KCCIBAPP@Bank?5too?5big?5to?5map?4?5?5Using?5SetB@ DB 'Bank too'
	DB	' big to map.  Using SetBufferData for each element', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_05NLEMHEGP@ADPCM?$AA@
DSOUND_RD	SEGMENT
??_C@_05NLEMHEGP@ADPCM?$AA@ DB 'ADPCM', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_03CCLNCNJA@PCM?$AA@
DSOUND_RD	SEGMENT
??_C@_03CCLNCNJA@PCM?$AA@ DB 'PCM', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@LIKEALJ@Loading?5entry?5?$CFlu?5?$CI?$CFs?0?5?$CFlu?4?$CF3?43l@
DSOUND_RD	SEGMENT
??_C@_0FF@LIKEALJ@Loading?5entry?5?$CFlu?5?$CI?$CFs?0?5?$CFlu?4?$CF3?43l@ DB 'L'
	DB	'oading entry %lu (%s, %lu.%3.3lu kHz, %lu-bit, %lu-channel, o'
	DB	'ffset %lu, length %lu)', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestWaveBundler@@YGJPBDK@Z
DSOUND	SEGMENT
tv174 = -116
$T38214 = -112
_PlayRegion$ = -108
_hr$ = -100
_dsbd$ = -96
_LoopRegion$ = -72
_SectionData$ = -64
_fMapped$ = -48
_i$ = -44
_wfx$ = -40
_dwSize$ = -20
_pBuffer$ = -16
_WaveBank$ = -12
_pszBank$ = 8
_dwEntryCount$ = 12
?TestWaveBundler@@YGJPBDK@Z PROC NEAR			; TestWaveBundler, COMDAT

; 3732 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H

; 3733 :     LPDIRECTSOUNDBUFFER     pBuffer     = NULL;

  00006	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 3734 :     CWaveBankReader         WaveBank;

  0000d	8d 4d f4	 lea	 ecx, DWORD PTR _WaveBank$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CWaveBankReader@@QAE@XZ ; CWaveBankReader::CWaveBankReader

; 3735 :     DSBUFFERDESC            dsbd;
; 3736 :     WAVEBANKSECTIONDATA     SectionData;
; 3737 :     WAVEBANKUNIWAVEFORMAT   wfx;
; 3738 :     WAVEBANKENTRYREGION     PlayRegion;
; 3739 :     WAVEBANKENTRYREGION     LoopRegion;
; 3740 :     DWORD                   dwSize;
; 3741 :     BOOL                    fMapped;
; 3742 :     HRESULT                 hr;
; 3743 :     DWORD                   i;
; 3744 : 
; 3745 :     DPF_ENTER();
; 3746 : 
; 3747 :     DPF_TEST("Opening wave bank %s", pszBank);

  00015	8b 45 08	 mov	 eax, DWORD PTR _pszBank$[ebp]
  00018	50		 push	 eax
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@FDILLCGP@Opening?5wave?5bank?5?$CFs?$AA@
  0001e	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00023	83 c4 08	 add	 esp, 8

; 3748 :     
; 3749 :     hr = ValidateResult(WaveBank.Open(pszBank));

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _pszBank$[ebp]
  00029	51		 push	 ecx
  0002a	8d 4d f4	 lea	 ecx, DWORD PTR _WaveBank$[ebp]
  0002d	e8 00 00 00 00	 call	 ?Open@CWaveBankReader@@QAEJPBD@Z ; CWaveBankReader::Open
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00038	89 45 9c	 mov	 DWORD PTR _hr$[ebp], eax

; 3750 : 
; 3751 :     if(SUCCEEDED(hr))

  0003b	83 7d 9c 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003f	7c 0c		 jl	 SHORT $L37510

; 3752 :     {
; 3753 :         WaveBank.GetSectionData(&SectionData);

  00041	8d 55 c0	 lea	 edx, DWORD PTR _SectionData$[ebp]
  00044	52		 push	 edx
  00045	8d 4d f4	 lea	 ecx, DWORD PTR _WaveBank$[ebp]
  00048	e8 00 00 00 00	 call	 ?GetSectionData@CWaveBankReader@@QAEXPAU_WAVEBANKSECTIONDATA@@@Z ; CWaveBankReader::GetSectionData
$L37510:

; 3754 :     }
; 3755 : 
; 3756 :     if(SUCCEEDED(hr))

  0004d	83 7d 9c 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00051	7c 26		 jl	 SHORT $L37512

; 3757 :     {  
; 3758 :         ASSERT(dwEntryCount == SectionData.pHeader->dwEntryCount);

  00053	68 ae 0e 00 00	 push	 3758			; 00000eaeH
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HOHCCBG@c?3?2xbox?2private?2windows?2directx?2@
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DC@FELFBPC@dwEntryCount?5?$DN?$DN?5SectionData?4pHea@
  00062	8b 45 c0	 mov	 eax, DWORD PTR _SectionData$[ebp]
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _dwEntryCount$[ebp]
  00068	33 d2		 xor	 edx, edx
  0006a	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  0006d	0f 95 c2	 setne	 dl
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00076	83 c4 10	 add	 esp, 16			; 00000010H
$L37512:

; 3759 :     }
; 3760 : 
; 3761 :     if(SUCCEEDED(hr))

  00079	83 7d 9c 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0007d	7c 40		 jl	 SHORT $L37515

; 3762 :     {
; 3763 :         ZeroMemory(&dsbd, sizeof(dsbd));

  0007f	6a 18		 push	 24			; 00000018H
  00081	6a 00		 push	 0
  00083	8d 45 a0	 lea	 eax, DWORD PTR _dsbd$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _memset
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3764 : 
; 3765 :         dsbd.dwSize = sizeof(dsbd);

  0008f	c7 45 a0 18 00
	00 00		 mov	 DWORD PTR _dsbd$[ebp], 24 ; 00000018H

; 3766 :         dsbd.lpwfxFormat = (LPWAVEFORMATEX)CreateFormat(WAVE_FORMAT_PCM, 44100, 16, 2);

  00096	6a 02		 push	 2
  00098	6a 10		 push	 16			; 00000010H
  0009a	68 44 ac 00 00	 push	 44100			; 0000ac44H
  0009f	6a 01		 push	 1
  000a1	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  000a6	89 45 ac	 mov	 DWORD PTR _dsbd$[ebp+12], eax

; 3767 : 
; 3768 :         hr = ValidateResult(DirectSoundCreateBuffer(&dsbd, &pBuffer));

  000a9	8d 4d f0	 lea	 ecx, DWORD PTR _pBuffer$[ebp]
  000ac	51		 push	 ecx
  000ad	8d 55 a0	 lea	 edx, DWORD PTR _dsbd$[ebp]
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 _DirectSoundCreateBuffer@8
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000bc	89 45 9c	 mov	 DWORD PTR _hr$[ebp], eax
$L37515:

; 3769 :     }
; 3770 : 
; 3771 :     if(SUCCEEDED(hr))

  000bf	83 7d 9c 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c3	7c 12		 jl	 SHORT $L37518

; 3772 :     {
; 3773 :         dwSize = SectionData.dwDataSize;

  000c5	8b 45 cc	 mov	 eax, DWORD PTR _SectionData$[ebp+12]
  000c8	89 45 ec	 mov	 DWORD PTR _dwSize$[ebp], eax

; 3774 : 
; 3775 :         hr = ClampBufferSize(&dwSize);

  000cb	8d 4d ec	 lea	 ecx, DWORD PTR _dwSize$[ebp]
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 ?ClampBufferSize@@YGJPAK@Z ; ClampBufferSize
  000d4	89 45 9c	 mov	 DWORD PTR _hr$[ebp], eax
$L37518:

; 3776 :     }
; 3777 : 
; 3778 :     if(SUCCEEDED(hr))

  000d7	83 7d 9c 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000db	7c 50		 jl	 SHORT $L37520

; 3779 :     {
; 3780 :         if(fMapped = (dwSize == SectionData.dwDataSize))

  000dd	8b 55 ec	 mov	 edx, DWORD PTR _dwSize$[ebp]
  000e0	2b 55 cc	 sub	 edx, DWORD PTR _SectionData$[ebp+12]
  000e3	f7 da		 neg	 edx
  000e5	1b d2		 sbb	 edx, edx
  000e7	42		 inc	 edx
  000e8	89 55 d0	 mov	 DWORD PTR _fMapped$[ebp], edx
  000eb	83 7d d0 00	 cmp	 DWORD PTR _fMapped$[ebp], 0
  000ef	74 2f		 je	 SHORT $L37521

; 3781 :         {
; 3782 :             hr = ValidateResult(pBuffer->SetBufferData(SectionData.pvData, SectionData.dwDataSize));

  000f1	8b 45 cc	 mov	 eax, DWORD PTR _SectionData$[ebp+12]
  000f4	50		 push	 eax
  000f5	8b 4d c8	 mov	 ecx, DWORD PTR _SectionData$[ebp+8]
  000f8	51		 push	 ecx
  000f9	8b 55 f0	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  000fc	52		 push	 edx
  000fd	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00108	89 45 9c	 mov	 DWORD PTR _hr$[ebp], eax

; 3783 : 
; 3784 :             if(SUCCEEDED(hr))

  0010b	83 7d 9c 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0010f	7c 0d		 jl	 SHORT $L37523

; 3785 :             {
; 3786 :                 DPF_TEST("Entire bank mapped.  Using SetPlayRegion");

  00111	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@CFAPPEMP@Entire?5bank?5mapped?4?5?5Using?5SetPl@
  00116	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  0011b	83 c4 04	 add	 esp, 4
$L37523:

; 3787 :             }
; 3788 :         }
; 3789 :         else

  0011e	eb 0d		 jmp	 SHORT $L37520
$L37521:

; 3790 :         {
; 3791 :             DPF_TEST("Bank too big to map.  Using SetBufferData for each element");

  00120	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@KCCIBAPP@Bank?5too?5big?5to?5map?4?5?5Using?5SetB@
  00125	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  0012a	83 c4 04	 add	 esp, 4
$L37520:

; 3792 :         }
; 3793 :     }
; 3794 : 
; 3795 :     for(i = 0; (i < dwEntryCount) && SUCCEEDED(hr); i++)

  0012d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00134	eb 09		 jmp	 SHORT $L37528
$L37529:
  00136	8b 45 d4	 mov	 eax, DWORD PTR _i$[ebp]
  00139	83 c0 01	 add	 eax, 1
  0013c	89 45 d4	 mov	 DWORD PTR _i$[ebp], eax
$L37528:
  0013f	8b 4d d4	 mov	 ecx, DWORD PTR _i$[ebp]
  00142	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwEntryCount$[ebp]
  00145	0f 83 98 01 00
	00		 jae	 $L37530
  0014b	83 7d 9c 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0014f	0f 8c 8e 01 00
	00		 jl	 $L37530

; 3796 :     {
; 3797 :         WaveBankExpandFormat(&SectionData.paMetaData[i].Format, &wfx);

  00155	8d 55 d8	 lea	 edx, DWORD PTR _wfx$[ebp]
  00158	52		 push	 edx
  00159	8b 45 d4	 mov	 eax, DWORD PTR _i$[ebp]
  0015c	6b c0 14	 imul	 eax, 20			; 00000014H
  0015f	8b 4d c4	 mov	 ecx, DWORD PTR _SectionData$[ebp+4]
  00162	03 c8		 add	 ecx, eax
  00164	51		 push	 ecx
  00165	e8 00 00 00 00	 call	 _WaveBankExpandFormat@8

; 3798 :         
; 3799 :         PlayRegion = SectionData.paMetaData[i].PlayRegion;

  0016a	8b 55 d4	 mov	 edx, DWORD PTR _i$[ebp]
  0016d	6b d2 14	 imul	 edx, 20			; 00000014H
  00170	8b 45 c4	 mov	 eax, DWORD PTR _SectionData$[ebp+4]
  00173	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  00177	8b 54 10 08	 mov	 edx, DWORD PTR [eax+edx+8]
  0017b	89 4d 94	 mov	 DWORD PTR _PlayRegion$[ebp], ecx
  0017e	89 55 98	 mov	 DWORD PTR _PlayRegion$[ebp+4], edx

; 3800 :         LoopRegion = SectionData.paMetaData[i].LoopRegion;

  00181	8b 45 d4	 mov	 eax, DWORD PTR _i$[ebp]
  00184	6b c0 14	 imul	 eax, 20			; 00000014H
  00187	8b 4d c4	 mov	 ecx, DWORD PTR _SectionData$[ebp+4]
  0018a	8b 54 01 0c	 mov	 edx, DWORD PTR [ecx+eax+12]
  0018e	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00192	89 55 b8	 mov	 DWORD PTR _LoopRegion$[ebp], edx
  00195	89 45 bc	 mov	 DWORD PTR _LoopRegion$[ebp+4], eax

; 3801 :         
; 3802 :         DPF_TEST("Loading entry %lu (%s, %lu.%3.3lu kHz, %lu-bit, %lu-channel, offset %lu, length %lu)", i, (WAVE_FORMAT_XBOX_ADPCM == wfx.WaveFormatEx.wFormatTag) ? "ADPCM" : "PCM", wfx.WaveFormatEx.nSamplesPerSec / 1000, wfx.WaveFormatEx.nSamplesPerSec % 1000, wfx.WaveFormatEx.wBitsPerSample, wfx.WaveFormatEx.nChannels, PlayRegion.dwStart, PlayRegion.dwLength);

  00198	0f b7 4d d8	 movzx	 ecx, WORD PTR _wfx$[ebp]
  0019c	83 f9 69	 cmp	 ecx, 105		; 00000069H
  0019f	75 09		 jne	 SHORT $L38212
  001a1	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv174[ebp], OFFSET FLAT:??_C@_05NLEMHEGP@ADPCM?$AA@
  001a8	eb 07		 jmp	 SHORT $L38213
$L38212:
  001aa	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv174[ebp], OFFSET FLAT:??_C@_03CCLNCNJA@PCM?$AA@
$L38213:
  001b1	8b 55 98	 mov	 edx, DWORD PTR _PlayRegion$[ebp+4]
  001b4	52		 push	 edx
  001b5	8b 45 94	 mov	 eax, DWORD PTR _PlayRegion$[ebp]
  001b8	50		 push	 eax
  001b9	0f b7 4d da	 movzx	 ecx, WORD PTR _wfx$[ebp+2]
  001bd	51		 push	 ecx
  001be	0f b7 55 e6	 movzx	 edx, WORD PTR _wfx$[ebp+14]
  001c2	52		 push	 edx
  001c3	8b 45 dc	 mov	 eax, DWORD PTR _wfx$[ebp+4]
  001c6	33 d2		 xor	 edx, edx
  001c8	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  001cd	f7 f1		 div	 ecx
  001cf	52		 push	 edx
  001d0	8b 45 dc	 mov	 eax, DWORD PTR _wfx$[ebp+4]
  001d3	33 d2		 xor	 edx, edx
  001d5	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  001da	f7 f1		 div	 ecx
  001dc	50		 push	 eax
  001dd	8b 55 8c	 mov	 edx, DWORD PTR tv174[ebp]
  001e0	52		 push	 edx
  001e1	8b 45 d4	 mov	 eax, DWORD PTR _i$[ebp]
  001e4	50		 push	 eax
  001e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@LIKEALJ@Loading?5entry?5?$CFlu?5?$CI?$CFs?0?5?$CFlu?4?$CF3?43l@
  001ea	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  001ef	83 c4 24	 add	 esp, 36			; 00000024H

; 3803 :         
; 3804 :         hr = ValidateResult(pBuffer->SetFormat(&wfx.WaveFormatEx));

  001f2	8d 4d d8	 lea	 ecx, DWORD PTR _wfx$[ebp]
  001f5	51		 push	 ecx
  001f6	8b 55 f0	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  001f9	52		 push	 edx
  001fa	e8 00 00 00 00	 call	 ?SetFormat@IDirectSoundBuffer@@QAGJPBUtWAVEFORMATEX@@@Z ; IDirectSoundBuffer::SetFormat
  001ff	50		 push	 eax
  00200	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00205	89 45 9c	 mov	 DWORD PTR _hr$[ebp], eax

; 3805 : 
; 3806 :         if(SUCCEEDED(hr))

  00208	83 7d 9c 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0020c	7c 48		 jl	 SHORT $L37535

; 3807 :         {
; 3808 :             if(fMapped)

  0020e	83 7d d0 00	 cmp	 DWORD PTR _fMapped$[ebp], 0
  00212	74 1c		 je	 SHORT $L37536

; 3809 :             {
; 3810 :                 hr = ValidateResult(pBuffer->SetPlayRegion(PlayRegion.dwStart, PlayRegion.dwLength));

  00214	8b 45 98	 mov	 eax, DWORD PTR _PlayRegion$[ebp+4]
  00217	50		 push	 eax
  00218	8b 4d 94	 mov	 ecx, DWORD PTR _PlayRegion$[ebp]
  0021b	51		 push	 ecx
  0021c	8b 55 f0	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  0021f	52		 push	 edx
  00220	e8 00 00 00 00	 call	 ?SetPlayRegion@IDirectSoundBuffer@@QAGJKK@Z ; IDirectSoundBuffer::SetPlayRegion
  00225	50		 push	 eax
  00226	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0022b	89 45 9c	 mov	 DWORD PTR _hr$[ebp], eax

; 3811 :             }
; 3812 :             else

  0022e	eb 26		 jmp	 SHORT $L37535
$L37536:

; 3813 :             {
; 3814 :                 ClampBufferSize(&PlayRegion.dwLength);

  00230	8d 45 98	 lea	 eax, DWORD PTR _PlayRegion$[ebp+4]
  00233	50		 push	 eax
  00234	e8 00 00 00 00	 call	 ?ClampBufferSize@@YGJPAK@Z ; ClampBufferSize

; 3815 :             
; 3816 :                 hr = ValidateResult(pBuffer->SetBufferData((LPBYTE)SectionData.pvData + PlayRegion.dwStart, PlayRegion.dwLength));

  00239	8b 4d 98	 mov	 ecx, DWORD PTR _PlayRegion$[ebp+4]
  0023c	51		 push	 ecx
  0023d	8b 55 c8	 mov	 edx, DWORD PTR _SectionData$[ebp+8]
  00240	03 55 94	 add	 edx, DWORD PTR _PlayRegion$[ebp]
  00243	52		 push	 edx
  00244	8b 45 f0	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00247	50		 push	 eax
  00248	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData
  0024d	50		 push	 eax
  0024e	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00253	89 45 9c	 mov	 DWORD PTR _hr$[ebp], eax
$L37535:

; 3817 :             }
; 3818 :         }
; 3819 : 
; 3820 :         if(SUCCEEDED(hr))

  00256	83 7d 9c 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0025a	7c 1a		 jl	 SHORT $L37540

; 3821 :         {
; 3822 :             hr = ValidateResult(pBuffer->SetLoopRegion(LoopRegion.dwStart, LoopRegion.dwLength));

  0025c	8b 4d bc	 mov	 ecx, DWORD PTR _LoopRegion$[ebp+4]
  0025f	51		 push	 ecx
  00260	8b 55 b8	 mov	 edx, DWORD PTR _LoopRegion$[ebp]
  00263	52		 push	 edx
  00264	8b 45 f0	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00267	50		 push	 eax
  00268	e8 00 00 00 00	 call	 ?SetLoopRegion@IDirectSoundBuffer@@QAGJKK@Z ; IDirectSoundBuffer::SetLoopRegion
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00273	89 45 9c	 mov	 DWORD PTR _hr$[ebp], eax
$L37540:

; 3823 :         }
; 3824 : 
; 3825 :         if(SUCCEEDED(hr))

  00276	83 7d 9c 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0027a	7c 1a		 jl	 SHORT $L37542

; 3826 :         {
; 3827 :             hr = PlayBuffer(pBuffer, LoopRegion.dwLength ? DSBPLAY_LOOPING : 0);

  0027c	6a 00		 push	 0
  0027e	6a 00		 push	 0
  00280	33 c9		 xor	 ecx, ecx
  00282	83 7d bc 00	 cmp	 DWORD PTR _LoopRegion$[ebp+4], 0
  00286	0f 95 c1	 setne	 cl
  00289	51		 push	 ecx
  0028a	8b 55 f0	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  0028d	52		 push	 edx
  0028e	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  00293	89 45 9c	 mov	 DWORD PTR _hr$[ebp], eax
$L37542:

; 3828 :         }
; 3829 : 
; 3830 :         if(SUCCEEDED(hr) && LoopRegion.dwLength)

  00296	83 7d 9c 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0029a	7c 2e		 jl	 SHORT $L37544
  0029c	83 7d bc 00	 cmp	 DWORD PTR _LoopRegion$[ebp+4], 0
  002a0	74 28		 je	 SHORT $L37544

; 3831 :         {
; 3832 :             Sleep(PlayRegion.dwLength * 2 * 1000 / wfx.WaveFormatEx.nAvgBytesPerSec);

  002a2	8b 45 98	 mov	 eax, DWORD PTR _PlayRegion$[ebp+4]
  002a5	d1 e0		 shl	 eax, 1
  002a7	69 c0 e8 03 00
	00		 imul	 eax, 1000		; 000003e8H
  002ad	33 d2		 xor	 edx, edx
  002af	f7 75 e0	 div	 DWORD PTR _wfx$[ebp+8]
  002b2	50		 push	 eax
  002b3	e8 00 00 00 00	 call	 _Sleep@4

; 3833 : 
; 3834 :             hr = PlayBuffer(pBuffer);

  002b8	6a 00		 push	 0
  002ba	6a 00		 push	 0
  002bc	6a 00		 push	 0
  002be	8b 45 f0	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  002c1	50		 push	 eax
  002c2	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  002c7	89 45 9c	 mov	 DWORD PTR _hr$[ebp], eax
$L37544:

; 3835 :         }
; 3836 : 
; 3837 :         if(SUCCEEDED(hr))

  002ca	83 7d 9c 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002ce	7c 0e		 jl	 SHORT $L37546

; 3838 :         {
; 3839 :             hr = WaitBuffer(pBuffer, FALSE);

  002d0	6a 00		 push	 0
  002d2	8b 4d f0	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  002d5	51		 push	 ecx
  002d6	e8 00 00 00 00	 call	 ?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z ; WaitBuffer
  002db	89 45 9c	 mov	 DWORD PTR _hr$[ebp], eax
$L37546:

; 3840 :         }
; 3841 :     }

  002de	e9 53 fe ff ff	 jmp	 $L37529
$L37530:

; 3842 : 
; 3843 :     RELEASE(pBuffer);

  002e3	83 7d f0 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  002e7	74 10		 je	 SHORT $L37547
  002e9	8b 55 f0	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  002ec	52		 push	 edx
  002ed	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  002f2	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L37547:

; 3844 : 
; 3845 :     DPF_LEAVE_HRESULT(hr);
; 3846 :     
; 3847 :     return hr;

  002f9	8b 45 9c	 mov	 eax, DWORD PTR _hr$[ebp]
  002fc	89 45 90	 mov	 DWORD PTR $T38214[ebp], eax
  002ff	8d 4d f4	 lea	 ecx, DWORD PTR _WaveBank$[ebp]
  00302	e8 00 00 00 00	 call	 ??1CWaveBankReader@@UAE@XZ ; CWaveBankReader::~CWaveBankReader
  00307	8b 45 90	 mov	 eax, DWORD PTR $T38214[ebp]

; 3848 : }

  0030a	8b e5		 mov	 esp, ebp
  0030c	5d		 pop	 ebp
  0030d	c2 08 00	 ret	 8
?TestWaveBundler@@YGJPBDK@Z ENDP			; TestWaveBundler
DSOUND	ENDS
PUBLIC	?Pause@IDirectSoundStream@@QAGJK@Z		; IDirectSoundStream::Pause
PUBLIC	?TestReleasePausedStream@@YGJXZ			; TestReleasePausedStream
; Function compile flags: /Odt
;	COMDAT ?TestReleasePausedStream@@YGJXZ
DSOUND	SEGMENT
_dssd$ = -32
_hr$ = -8
_pStream$ = -4
?TestReleasePausedStream@@YGJXZ PROC NEAR		; TestReleasePausedStream, COMDAT

; 3874 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 3875 :     LPDIRECTSOUNDSTREAM     pStream = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0

; 3876 :     DSSTREAMDESC            dssd;
; 3877 :     HRESULT                 hr;
; 3878 :     
; 3879 :     DPF_ENTER();
; 3880 : 
; 3881 :     ZeroMemory(&dssd, sizeof(dssd));

  0000d	6a 18		 push	 24			; 00000018H
  0000f	6a 00		 push	 0
  00011	8d 45 e0	 lea	 eax, DWORD PTR _dssd$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _memset
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3882 : 
; 3883 :     dssd.lpwfxFormat = (LPWAVEFORMATEX)CreateFormat(WAVE_FORMAT_PCM, 44100, 16, 2);

  0001d	6a 02		 push	 2
  0001f	6a 10		 push	 16			; 00000010H
  00021	68 44 ac 00 00	 push	 44100			; 0000ac44H
  00026	6a 01		 push	 1
  00028	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  0002d	89 45 e8	 mov	 DWORD PTR _dssd$[ebp+8], eax

; 3884 :     dssd.dwMaxAttachedPackets = 1;

  00030	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _dssd$[ebp+4], 1

; 3885 : 
; 3886 :     hr = DirectSoundCreateStream(&dssd, &pStream);

  00037	8d 4d fc	 lea	 ecx, DWORD PTR _pStream$[ebp]
  0003a	51		 push	 ecx
  0003b	8d 55 e0	 lea	 edx, DWORD PTR _dssd$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _DirectSoundCreateStream@8
  00044	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 3887 : 
; 3888 :     if(SUCCEEDED(hr))

  00047	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004b	7c 14		 jl	 SHORT $L37557

; 3889 :     {
; 3890 :         hr = ValidateResult(pStream->Pause(DSSTREAMPAUSE_PAUSE));

  0004d	6a 01		 push	 1
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?Pause@IDirectSoundStream@@QAGJK@Z ; IDirectSoundStream::Pause
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0005e	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L37557:

; 3891 :     }
; 3892 : 
; 3893 :     RELEASE(pStream);

  00061	83 7d fc 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  00065	74 13		 je	 SHORT $L37558
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0006a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006c	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  0006f	50		 push	 eax
  00070	ff 52 04	 call	 DWORD PTR [edx+4]
  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0
$L37558:

; 3894 : 
; 3895 :     DPF_LEAVE_HRESULT(hr);
; 3896 : 
; 3897 :     return hr;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 3898 : }

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?TestReleasePausedStream@@YGJXZ ENDP			; TestReleasePausedStream
DSOUND	ENDS
EXTRN	_IDirectSoundStream_Pause@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?Pause@IDirectSoundStream@@QAGJK@Z
DSOUND	SEGMENT
_this$ = 8
_dwPause$ = 12
?Pause@IDirectSoundStream@@QAGJK@Z PROC NEAR		; IDirectSoundStream::Pause, COMDAT

; 2367 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2368 :         return IDirectSoundStream_Pause(this, dwPause);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwPause$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_Pause@8

; 2369 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?Pause@IDirectSoundStream@@QAGJK@Z ENDP			; IDirectSoundStream::Pause
DSOUND	ENDS
PUBLIC	?PauseEx@IDirectSoundStream@@QAGJ_JK@Z		; IDirectSoundStream::PauseEx
PUBLIC	?TestTimedStreamResume@@YGJK@Z			; TestTimedStreamResume
PUBLIC	??_C@_0CP@FCOEPNOM@Setting?5Pause?5command?5for?5?$CFlu?5ms@ ; `string'
EXTRN	?WaitStream@@YGJPAUIDirectSoundStream@@H@Z:NEAR	; WaitStream
;	COMDAT ??_C@_0CP@FCOEPNOM@Setting?5Pause?5command?5for?5?$CFlu?5ms@
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
DSOUND_RD	SEGMENT
??_C@_0CP@FCOEPNOM@Setting?5Pause?5command?5for?5?$CFlu?5ms@ DB 'Setting '
	DB	'Pause command for %lu ms in the future', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TestTimedStreamResume@@YGJK@Z
DSOUND	SEGMENT
_dwPacketSize$ = -32
_hr$ = -28
_rtTimestamp$ = -24
_pvAudioData$ = -12
_pwfxFormat$ = -8
_pStream$ = -4
_dwDelay$ = 8
?TestTimedStreamResume@@YGJK@Z PROC NEAR		; TestTimedStreamResume, COMDAT

; 3924 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 3925 :     const LPCWAVEFORMATEX   pwfxFormat          = CreateFormat(WAVE_FORMAT_PCM, 48000, 16, 2);

  00006	6a 02		 push	 2
  00008	6a 10		 push	 16			; 00000010H
  0000a	68 80 bb 00 00	 push	 48000			; 0000bb80H
  0000f	6a 01		 push	 1
  00011	e8 00 00 00 00	 call	 ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ; CreateFormat
  00016	89 45 f8	 mov	 DWORD PTR _pwfxFormat$[ebp], eax

; 3926 :     const REFERENCE_TIME    rtTimestamp         = (REFERENCE_TIME)dwDelay * -10000i64;

  00019	8b 45 08	 mov	 eax, DWORD PTR _dwDelay$[ebp]
  0001c	33 c9		 xor	 ecx, ecx
  0001e	6a ff		 push	 -1
  00020	68 f0 d8 ff ff	 push	 -10000			; ffffd8f0H
  00025	51		 push	 ecx
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 __allmul
  0002c	89 45 e8	 mov	 DWORD PTR _rtTimestamp$[ebp], eax
  0002f	89 55 ec	 mov	 DWORD PTR _rtTimestamp$[ebp+4], edx

; 3927 :     LPDIRECTSOUNDSTREAM     pStream             = NULL;

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0

; 3928 :     LPVOID                  pvAudioData         = NULL;

  00039	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pvAudioData$[ebp], 0

; 3929 :     DWORD                   dwPacketSize        = 0x4000;

  00040	c7 45 e0 00 40
	00 00		 mov	 DWORD PTR _dwPacketSize$[ebp], 16384 ; 00004000H

; 3930 :     HRESULT                 hr;
; 3931 : 
; 3932 :     hr = CreateStdQueuedStream(0, pwfxFormat, NULL, &dwPacketSize, NULL, NULL, &pStream, &pvAudioData);

  00047	8d 55 f4	 lea	 edx, DWORD PTR _pvAudioData$[ebp]
  0004a	52		 push	 edx
  0004b	8d 45 fc	 lea	 eax, DWORD PTR _pStream$[ebp]
  0004e	50		 push	 eax
  0004f	6a 00		 push	 0
  00051	6a 00		 push	 0
  00053	8d 4d e0	 lea	 ecx, DWORD PTR _dwPacketSize$[ebp]
  00056	51		 push	 ecx
  00057	6a 00		 push	 0
  00059	8b 55 f8	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  0005c	52		 push	 edx
  0005d	6a 00		 push	 0
  0005f	e8 00 00 00 00	 call	 ?CreateStdQueuedStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z ; CreateStdQueuedStream
  00064	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 3933 : 
; 3934 :     if(SUCCEEDED(hr))

  00067	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0006b	7c 2d		 jl	 SHORT $L37570

; 3935 :     {
; 3936 :         DPF_TEST("Setting Pause command for %lu ms in the future", dwDelay);

  0006d	8b 45 08	 mov	 eax, DWORD PTR _dwDelay$[ebp]
  00070	50		 push	 eax
  00071	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@FCOEPNOM@Setting?5Pause?5command?5for?5?$CFlu?5ms@
  00076	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  0007b	83 c4 08	 add	 esp, 8

; 3937 :         
; 3938 :         hr = ValidateResult(pStream->PauseEx(rtTimestamp, DSSTREAMPAUSE_RESUME));

  0007e	6a 00		 push	 0
  00080	8b 4d ec	 mov	 ecx, DWORD PTR _rtTimestamp$[ebp+4]
  00083	51		 push	 ecx
  00084	8b 55 e8	 mov	 edx, DWORD PTR _rtTimestamp$[ebp]
  00087	52		 push	 edx
  00088	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?PauseEx@IDirectSoundStream@@QAGJ_JK@Z ; IDirectSoundStream::PauseEx
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00097	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax
$L37570:

; 3939 :     }
; 3940 : 
; 3941 :     if(SUCCEEDED(hr))

  0009a	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0009e	7c 0e		 jl	 SHORT $L37573

; 3942 :     {
; 3943 :         hr = WaitStream(pStream, TRUE);

  000a0	6a 01		 push	 1
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _pStream$[ebp]
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 ?WaitStream@@YGJPAUIDirectSoundStream@@H@Z ; WaitStream
  000ab	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax
$L37573:

; 3944 :     }
; 3945 : 
; 3946 :     if(SUCCEEDED(hr))

  000ae	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b2	7c 0e		 jl	 SHORT $L37575

; 3947 :     {
; 3948 :         hr = WaitStream(pStream, FALSE);

  000b4	6a 00		 push	 0
  000b6	8b 55 fc	 mov	 edx, DWORD PTR _pStream$[ebp]
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 ?WaitStream@@YGJPAUIDirectSoundStream@@H@Z ; WaitStream
  000bf	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax
$L37575:

; 3949 :     }
; 3950 : 
; 3951 :     RELEASE(pStream);

  000c2	83 7d fc 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  000c6	74 13		 je	 SHORT $L37576
  000c8	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  000cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cd	8b 55 fc	 mov	 edx, DWORD PTR _pStream$[ebp]
  000d0	52		 push	 edx
  000d1	ff 51 04	 call	 DWORD PTR [ecx+4]
  000d4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0
$L37576:

; 3952 :     FREE(pvAudioData);

  000db	8d 45 f4	 lea	 eax, DWORD PTR _pvAudioData$[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 3953 : 
; 3954 :     DPF_LEAVE_HRESULT(hr);
; 3955 : 
; 3956 :     return hr;

  000e4	8b 45 e4	 mov	 eax, DWORD PTR _hr$[ebp]

; 3957 : }

  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c2 04 00	 ret	 4
?TestTimedStreamResume@@YGJK@Z ENDP			; TestTimedStreamResume
DSOUND	ENDS
EXTRN	_IDirectSoundStream_PauseEx@16:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?PauseEx@IDirectSoundStream@@QAGJ_JK@Z
DSOUND	SEGMENT
_this$ = 8
_rtTimestamp$ = 12
_dwPause$ = 20
?PauseEx@IDirectSoundStream@@QAGJ_JK@Z PROC NEAR	; IDirectSoundStream::PauseEx, COMDAT

; 2372 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2373 :         return IDirectSoundStream_PauseEx(this, rtTimestamp, dwPause);

  00003	8b 45 14	 mov	 eax, DWORD PTR _dwPause$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _rtTimestamp$[ebp+4]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _rtTimestamp$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _IDirectSoundStream_PauseEx@16

; 2374 :     }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
?PauseEx@IDirectSoundStream@@QAGJ_JK@Z ENDP		; IDirectSoundStream::PauseEx
DSOUND	ENDS
PUBLIC	_TestDirectSound@0
PUBLIC	?Release@IDirectSound@@QAGKXZ			; IDirectSound::Release
PUBLIC	??_C@_07INOAFJDJ@dsstdfx?$AA@			; `string'
PUBLIC	??_C@_0CH@FACBPIAE@?$CK?$CK?$CK?5Starting?5TestTimedStreamResu@ ; `string'
EXTRN	_DirectSoundCreate@12:NEAR
EXTRN	_DirectSoundUsePan3D@0:NEAR
EXTRN	?LoadEffectsImage@@YGJPBDK@Z:NEAR		; LoadEffectsImage
;	COMDAT ??_C@_07INOAFJDJ@dsstdfx?$AA@
; File c:\xbox\private\windows\directx\dsound\test\testds.cpp
DSOUND_RD	SEGMENT
??_C@_07INOAFJDJ@dsstdfx?$AA@ DB 'dsstdfx', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@FACBPIAE@?$CK?$CK?$CK?5Starting?5TestTimedStreamResu@
DSOUND_RD	SEGMENT
??_C@_0CH@FACBPIAE@?$CK?$CK?$CK?5Starting?5TestTimedStreamResu@ DB '*** S'
	DB	'tarting TestTimedStreamResume ***', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _TestDirectSound@0
DSOUND	SEGMENT
_hr$ = -4
_TestDirectSound@0 PROC NEAR				; COMDAT

; 3983 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3984 :     HRESULT                 hr  = DS_OK;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 3985 : 
; 3986 :     DirectSoundUsePan3D();

  0000b	e8 00 00 00 00	 call	 _DirectSoundUsePan3D@0

; 3987 : 
; 3988 :     //
; 3989 :     // Create the DirectSound object
; 3990 :     //
; 3991 : 
; 3992 :     hr = ValidateResult(DirectSoundCreate(NULL, &g_pDirectSound, NULL));

  00010	6a 00		 push	 0
  00012	68 00 00 00 00	 push	 OFFSET FLAT:?g_pDirectSound@@3PAUIDirectSound@@A ; g_pDirectSound
  00017	6a 00		 push	 0
  00019	e8 00 00 00 00	 call	 _DirectSoundCreate@12
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00024	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 3993 : 
; 3994 :     //
; 3995 :     // Load the default effects image
; 3996 :     //
; 3997 : 
; 3998 :     if(SUCCEEDED(hr))

  00027	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0002b	7c 0f		 jl	 SHORT $L37584

; 3999 :     {
; 4000 :         hr = LoadEffectsImage("dsstdfx", XAUDIO_DOWNLOADFX_XBESECTION);

  0002d	6a 01		 push	 1
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07INOAFJDJ@dsstdfx?$AA@
  00034	e8 00 00 00 00	 call	 ?LoadEffectsImage@@YGJPBDK@Z ; LoadEffectsImage
  00039	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L37584:

; 4001 :     }
; 4002 :     
; 4003 :     //
; 4004 :     // Test away...
; 4005 :     //
; 4006 : 
; 4007 :     // BEGIN_TEST(PlayOneShotBuffer)(0, WAVE_FORMAT_PCM, 48000, 16, 1);
; 4008 :     // BEGIN_TEST(PlayOneShotBuffer)("t:\\media\\audio\\pcm\\48k16bs.aif");
; 4009 :     // BEGIN_TEST(PlayOneShotStream)(0, WAVE_FORMAT_XBOX_ADPCM, 48000, 16, 1, 0x4000);
; 4010 :     // BEGIN_TEST(PlayToneBuffer)(0, 8000, 8, 1, 400, INFINITE);
; 4011 :     // BEGIN_TEST(Test3d)(0.0f, 0.0f, 0.0f, 5.0f, -72.0f, INFINITE);
; 4012 :     // BEGIN_TEST(TestMultipleBuffers)(WAVE_FORMAT_PCM);
; 4013 :     // BEGIN_TEST(TestMultipleStreams)(WAVE_FORMAT_PCM, 0x4000);
; 4014 :     // BEGIN_TEST(TestSequentialBuffers)(WAVE_FORMAT_PCM);
; 4015 :     // BEGIN_TEST(TestNotifies)(WAVE_FORMAT_PCM, 22050, 16, 1, 20, FALSE);
; 4016 :     // BEGIN_TEST(TestBufferOffsets)(WAVE_FORMAT_PCM, 48000, 16, 2, 0.0f, 1.0f, 0.5f, 1.0f, TRUE);
; 4017 :     // BEGIN_TEST(TestSubMix)(TRUE, WAVE_FORMAT_PCM);
; 4018 :     // BEGIN_TEST(TestDLS)(WAVE_FORMAT_PCM, 44100, 16, 1);
; 4019 :     // BEGIN_TEST(TestSurroundEncoder)(WAVE_FORMAT_PCM, 44100, 16);
; 4020 :     // BEGIN_TEST(TestSgeSharing)();
; 4021 :     // BEGIN_TEST(TestSgeHeap)();
; 4022 :     // BEGIN_TEST(Test256Voices)();
; 4023 :     // BEGIN_TEST(TestStop)(WAVE_FORMAT_PCM, 44100, 16, 1);
; 4024 :     // BEGIN_TEST(TestFrequency)(DSBCAPS_CTRL3D, WAVE_FORMAT_PCM, 22050, 16, 1, 5000);
; 4025 :     // BEGIN_TEST(TestDiscontinuity)(0, WAVE_FORMAT_PCM, 22050, 16, 1, 0x4000, TRUE);
; 4026 :     // BEGIN_TEST(TestDeferredCommandRelease)();
; 4027 :     // BEGIN_TEST(TestHeadroom)();
; 4028 :     // BEGIN_TEST(TestI3DL2Listener)();
; 4029 :     // BEGIN_TEST(TestMultiChannel)(44100, 8, 1);
; 4030 :     // BEGIN_TEST(TestMultiChannel2)(6);
; 4031 :     // BEGIN_TEST(TestMultiChannel3)(6);
; 4032 :     // BEGIN_TEST(TestReverb)();
; 4033 :     // BEGIN_TEST(StressPlayStop)(0, -1, 1, 50, INFINITE, 0, 8000);
; 4034 :     // BEGIN_TEST(TestReleaseEnvelope)();
; 4035 :     // BEGIN_TEST(TestNaturalStop)(1);
; 4036 :     // BEGIN_TEST(TestFlush)();
; 4037 :     // BEGIN_TEST(TestPitch)(0, WAVE_FORMAT_PCM, 44100, 16, 1);
; 4038 :     // BEGIN_TEST(FindFrequencyRange)();
; 4039 :     // BEGIN_TEST(TestTimeStampedPackets)(5000);
; 4040 :     // BEGIN_TEST(TestDeltaPanic)();
; 4041 :     // BEGIN_TEST(TestSetFormat)();
; 4042 :     // BEGIN_TEST(TestStarvation)(0, WAVE_FORMAT_XBOX_ADPCM, 48000, 16, 1, 0x4000, 3);
; 4043 :     // BEGIN_TEST(TestStreamStop)(DSSTREAMFLUSHEX_IMMEDIATE, WAVE_FORMAT_PCM, 44100, 16, 2, 0x4000);
; 4044 :     // BEGIN_TEST(TestStreamStop)(DSSTREAMFLUSHEX_ASYNC, WAVE_FORMAT_PCM, 44100, 16, 2, 0x4000);
; 4045 :     // BEGIN_TEST(TestStreamStop)(DSSTREAMFLUSHEX_ASYNC | DSSTREAMFLUSHEX_ENVELOPE, WAVE_FORMAT_PCM, 44100, 16, 2, 0x4000);
; 4046 :     // BEGIN_TEST(TestReleasePausedStream)();
; 4047 :     BEGIN_TEST(TestTimedStreamResume)(10000);

  0003c	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00040	7c 1a		 jl	 SHORT $L37587
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@FACBPIAE@?$CK?$CK?$CK?5Starting?5TestTimedStreamResu@
  00047	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  0004c	83 c4 04	 add	 esp, 4
  0004f	68 10 27 00 00	 push	 10000			; 00002710H
  00054	e8 00 00 00 00	 call	 ?TestTimedStreamResume@@YGJK@Z ; TestTimedStreamResume
  00059	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L37587:

; 4048 :     // BEGIN_TEST(TestWaveBundler)("t:\\media\\audio\\pcm.xwb", WAVEBANK_PCM_ENTRY_COUNT);
; 4049 :     // BEGIN_TEST(TestWaveBundler)("t:\\media\\audio\\pcmaiff.xwb", WAVEBANK_PCMAIFF_ENTRY_COUNT);
; 4050 :     // BEGIN_TEST(TestWaveBundler)("t:\\media\\audio\\adpcm.xwb", WAVEBANK_ADPCM_ENTRY_COUNT);
; 4051 :     // BEGIN_TEST(TestWaveBundler)("t:\\media\\audio\\compress.xwb", WAVEBANK_COMPRESS_ENTRY_COUNT);
; 4052 :     // BEGIN_TEST(TestWaveBundler)("t:\\media\\audio\\8bit.xwb", WAVEBANK_8BIT_ENTRY_COUNT);
; 4053 :     // BEGIN_TEST(TestWaveBundler)("t:\\media\\audio\\loop.xwb", WAVEBANK_LOOP_ENTRY_COUNT);
; 4054 :     // BEGIN_TEST(TestWaveBundler)("t:\\media\\audio\\mixed.xwb", WAVEBANK_MIXED_ENTRY_COUNT);
; 4055 : 
; 4056 :     //
; 4057 :     // Release the DirectSound object
; 4058 :     //
; 4059 : 
; 4060 :     RELEASE(g_pDirectSound);

  0005c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pDirectSound@@3PAUIDirectSound@@A, 0 ; g_pDirectSound
  00063	74 15		 je	 SHORT $L37589
  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pDirectSound@@3PAUIDirectSound@@A ; g_pDirectSound
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?Release@IDirectSound@@QAGKXZ ; IDirectSound::Release
  00070	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_pDirectSound@@3PAUIDirectSound@@A, 0 ; g_pDirectSound
$L37589:

; 4061 : 
; 4062 :     return hr;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 4063 : }

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
_TestDirectSound@0 ENDP
DSOUND	ENDS
EXTRN	_IDirectSound_Release@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?Release@IDirectSound@@QAGKXZ
DSOUND	SEGMENT
_this$ = 8
?Release@IDirectSound@@QAGKXZ PROC NEAR			; IDirectSound::Release, COMDAT

; 1711 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1712 :         return IDirectSound_Release(this);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _IDirectSound_Release@4

; 1713 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?Release@IDirectSound@@QAGKXZ ENDP			; IDirectSound::Release
DSOUND	ENDS
END
