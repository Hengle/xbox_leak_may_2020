; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\util.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@PGACJKHL@?$CB?$CIx?5?$CG?5?$CIx?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06DHEFHAJP@TESTDS?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MBLALCOP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@FINCCBCF@?$CFlu?4?$CFlu?4?$CFlu?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_08BKKEJEEI@TESTDS?3?5?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EG@JJJELFB@?$CB?$CIxmi?4dwFlags?5?$CG?5?$CIXMO_STREAMF_INP@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0L@OKBLGMCB@Loading?5?$CFs?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@GMBEFBHN@pszFileName?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09KDPBIJHM@ppvBuffer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@BKBPOCFA@pdwBufferSize?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@OMNKPMNK@ppMediaObject?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@MKDCPJHH@t?3?2media?2audio?2?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_04LPJNPKOL@pcm?2?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06FKHHNIJF@adpcm?2?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@MEPJBAJM@?$CFuk?$CFub?$CFls?4wav?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01GOHFPIOK@m?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@PMBBCNLP@Unsupported?5format?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_08JGFEHJLL@ppBuffer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07GDCKGKBF@playing?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07IEOHBIGJ@stopped?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09IDGBDKCL@Buffer?5?$CFs?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@MDBDMONE@Playing?5buffer?5?$CIdelayed?5?$CFlu?5ms?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@FDDEFFOG@Playing?5buffer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@CKDACMBO@Stopping?5buffer?5?$CIdelayed?5?$CFlu?5ms?$CJ@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@DCNFKCK@Stopping?5buffer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@PDAFDCJF@Resetting?5cursor?5position?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@JHJCEBHO@Unexpected?5bit?5resolution?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EEDJOHLO@WAVE_FORMAT_PCM?5?$DN?$DN?5pwfxSrc?9?$DOwFor@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@DBFGFOMM@?$CB?$CIpwfxDst?9?$DOnChannels?5?$CF?5pwfxSrc?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@DNDEHNKB@Pausing?5stream?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JBOKBGOB@Resuming?5paused?5stream?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@NJMJDGJO@Out?5of?5SGEs?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GICEMCH@Clamping?5buffer?5size?5from?5?$CFlu?5to@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FHNGAPBB@?$CB?$CIdwSamplesPerSec?5?$CF?5dwToneFreque@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@MDCJEPOI@?$CB?$CI?$CIdwSamplesPerSec?5?1?5dwToneFrequ@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PNPADMFK@Flushing?5stream?5?$CIdelayed?5?$CFlu?5ms?$CJ@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@FAJAIHGA@Flushing?5stream?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09OMEOKDLH@Stream?5?$CFs?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _log10f@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@IDirectSound@@QAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetCaps@IDirectSound@@QAGJPAU_DSCAPS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@IDirectSoundBuffer@@QAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PlayEx@IDirectSoundBuffer@@QAGJ_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?StopEx@IDirectSoundBuffer@@QAGJ_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetCurrentPosition@IDirectSoundBuffer@@QAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lock@IDirectSoundBuffer@@QAGJKKPAPAXPAK01K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Unlock@IDirectSoundBuffer@@QAGJPAXK0K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetOutputBuffer@IDirectSoundStream@@QAGJPAUIDirectSoundBuffer@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Pause@IDirectSoundStream@@QAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FlushEx@IDirectSoundStream@@QAGJ_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _wmemchr@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FloatToLong@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@DirectSound@@QAEXPAVCAc97Channel@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ValidateResult@@YGJJ@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ValidatePtr@@YGJPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DPF_TEST@@YAXPBDZZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__MALLOC@@YGPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__FREE@@YGXPAPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReadXMO@@YGJPAUXMediaObject@@PAXKPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?WriteXMO@@YGJPAUXMediaObject@@PAXKPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?TransformXMO@@YGJPAUXMediaObject@@PBXKPAKPAXK2@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?OpenWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAUXFileMediaObject@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?LoadWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?OpenStdWaveFile@@YGJPBUtWAVEFORMATEX@@PAPAUXFileMediaObject@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?LoadStdWaveFile@@YGJPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CreateBufferFromFile@@YGJPBDKPBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU2@PAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PlayBufferToCompletion@@YGJPAUIDirectSoundBuffer@@KK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CreateStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CreateStdStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CreateQueuedStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CreateStdQueuedStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ResubmitPacketCallback@@YGXPAX0K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GenerateTone@@YGXPAXKKKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GenerateTone8@@YGXPAXKKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GenerateTone16@@YGXPAXKKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GenerateNoise@@YGXPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MakeMultiChannel@@YGJPBUtWAVEFORMATEX@@PAU1@PBXKPAPAXPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PauseStream@@YGJPAUIDirectSoundStream@@H@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFreeSGEs@@YGJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ClampBufferSize@@YGJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?LoadEffectsImage@@YGJPBDK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDirectSoundCaps@@YGJPAU_DSCAPS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CreateToneBuffer@@YGJKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CreateImpulseBuffer@@YGJKKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FlushStream@@YGJPAUIDirectSoundStream@@KKH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?WaitStream@@YGJPAUIDirectSoundStream@@H@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?dwMajor@?1??GetWaveBundlerVersion@@YGXPAD@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwAlignment@?1??__MALLOC@@YGPAXK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?wfx@?1??CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z@4TUNIWAVEFORMAT@@A
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
;	COMDAT ?pszFileTemplate@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dbScale@?1??GenerateTone8@@YGXPAXKKKK@Z@4NB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?pszParent@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?pszAdpcm@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?szFileName@?1??GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z@4PADA
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
;	COMDAT ?bHalfScale@?1??GenerateTone8@@YGXPAXKKKK@Z@4EB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwBuild@?1??GetWaveBundlerVersion@@YGXPAD@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?pszPcm@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?pszMono@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?pszStereo@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?dwSGESlop@?1??ClampBufferSize@@YGJPAK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwMinor@?1??GetWaveBundlerVersion@@YGXPAD@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dbScale@?1??GenerateTone16@@YGXPAXKKKK@Z@4NB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwFlags@?1??__MALLOC@@YGPAXK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	_DSoundBuildNumberD
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	?__MALLOC@@YGPAXK@Z				; __MALLOC
EXTRN	__imp__MmAllocateContiguousMemoryEx@20:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\util.cpp
;	COMDAT ?__MALLOC@@YGPAXK@Z
DSOUND	SEGMENT
_dwSize$ = 8
?__MALLOC@@YGPAXK@Z PROC NEAR				; __MALLOC, COMDAT

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   : 
; 42   : #ifdef ALLOC_ALIGNED
; 43   : 
; 44   :     static const DWORD      dwAlignment     = PAGE_SIZE;
; 45   : 
; 46   : #else // ALLOC_ALIGNED
; 47   : 
; 48   :     static const DWORD      dwAlignment     = 4;
; 49   : 
; 50   : #endif // ALLOC_ALIGNED
; 51   : 
; 52   : #ifdef ALLOC_NOCACHE
; 53   : 
; 54   :     static const DWORD      dwFlags         = PAGE_READWRITE | PAGE_NOCACHE;
; 55   : 
; 56   : #else // ALLOC_NOCACHE
; 57   : 
; 58   :     static const DWORD      dwFlags         = PAGE_READWRITE;
; 59   : 
; 60   : #endif // ALLOC_NOCACHE
; 61   : 
; 62   : #ifdef ALLOC_CONTIGUOUS
; 63   : 
; 64   :     return MmAllocateContiguousMemoryEx(dwSize, 0, 0xFFFFFFFF, dwAlignment, dwFlags);

  00003	6a 04		 push	 4
  00005	6a 04		 push	 4
  00007	6a ff		 push	 -1
  00009	6a 00		 push	 0
  0000b	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmAllocateContiguousMemoryEx@20

; 65   : 
; 66   : #else // ALLOC_CONTIGUOUS
; 67   : 
; 68   :     DWORD                   dwAllocSize     = dwSize;
; 69   :     DWORD                   dwOffset;
; 70   :     LPVOID                  pvBuffer;
; 71   :     DWORD                   dwOldProtect;
; 72   :     BOOL                    fProtect;
; 73   : 
; 74   : #ifdef ALLOC_GUARD_PAGE
; 75   : 
; 76   :     dwAllocSize += (PAGE_SIZE * 2) - 1;
; 77   : 
; 78   : #ifndef ALLOC_ALIGNED
; 79   : 
; 80   :     dwAllocSize += sizeof(DWORD);
; 81   : 
; 82   : #endif // ALLOC_ALIGNED
; 83   : 
; 84   :     dwAllocSize /= PAGE_SIZE;
; 85   :     dwAllocSize *= PAGE_SIZE;
; 86   : 
; 87   : #endif // ALLOC_GUARD_PAGE
; 88   : 
; 89   :     if(pvBuffer = VirtualAlloc(NULL, dwAllocSize, MEM_COMMIT, dwFlags))
; 90   :     {
; 91   : 
; 92   : #ifdef ALLOC_GUARD_PAGE
; 93   : 
; 94   :         fProtect = VirtualProtect((LPBYTE)pvBuffer + dwAllocSize - PAGE_SIZE, PAGE_SIZE, PAGE_NOACCESS, &dwOldProtect);
; 95   :         ASSERT(fProtect);
; 96   : 
; 97   : #ifndef ALLOC_ALIGNED
; 98   : 
; 99   :         dwOffset = dwAllocSize - dwSize - PAGE_SIZE;
; 100  : 
; 101  :         pvBuffer = (LPBYTE)pvBuffer + dwOffset;
; 102  : 
; 103  :         *((LPDWORD)pvBuffer - 1) = dwOffset;
; 104  : 
; 105  : #endif // ALLOC_ALIGNED
; 106  : 
; 107  : #endif // ALLOC_GUARD_PAGE
; 108  : 
; 109  :     }
; 110  : 
; 111  :     return pvBuffer;
; 112  : 
; 113  : #endif // ALLOC_CONTIGUOUS
; 114  : 
; 115  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?__MALLOC@@YGPAXK@Z ENDP				; __MALLOC
DSOUND	ENDS
PUBLIC	?__FREE@@YGXPAPAX@Z				; __FREE
EXTRN	__imp__MmFreeContiguousMemory@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?__FREE@@YGXPAPAX@Z
DSOUND	SEGMENT
_pvBuffer$ = -8
_ppvBuffer$ = 8
?__FREE@@YGXPAPAX@Z PROC NEAR				; __FREE, COMDAT

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 142  : 
; 143  :     LPVOID                  pvBuffer    = *ppvBuffer;

  00006	8b 45 08	 mov	 eax, DWORD PTR _ppvBuffer$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 4d f8	 mov	 DWORD PTR _pvBuffer$[ebp], ecx

; 144  :     DWORD                   dwOffset;
; 145  : 
; 146  :     *ppvBuffer = NULL;

  0000e	8b 55 08	 mov	 edx, DWORD PTR _ppvBuffer$[ebp]
  00011	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 147  : 
; 148  :     if(pvBuffer)

  00017	83 7d f8 00	 cmp	 DWORD PTR _pvBuffer$[ebp], 0
  0001b	74 0a		 je	 SHORT $L36096

; 149  :     {
; 150  : 
; 151  : #ifdef ALLOC_CONTIGUOUS
; 152  : 
; 153  :         MmFreeContiguousMemory(pvBuffer);

  0001d	8b 45 f8	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00020	50		 push	 eax
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmFreeContiguousMemory@4
$L36096:

; 154  : 
; 155  : #else // ALLOC_CONTIGUOUS
; 156  : 
; 157  : #if defined(ALLOC_ALIGNED) || !defined(ALLOC_GUARD_PAGE)
; 158  : 
; 159  :         dwOffset = 0;
; 160  : 
; 161  : #else // defined(ALLOC_ALIGNED) || !defined(ALLOC_GUARD_PAGE)
; 162  : 
; 163  :         dwOffset = *((LPDWORD)pvBuffer - 1);
; 164  : 
; 165  : #endif // defined(ALLOC_ALIGNED) || !defined(ALLOC_GUARD_PAGE)
; 166  :     
; 167  :         VirtualFree((LPBYTE)pvBuffer - dwOffset, 0, MEM_RELEASE);
; 168  : 
; 169  : #endif // ALLOC_CONTIGUOUS
; 170  : 
; 171  :     }
; 172  : }

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?__FREE@@YGXPAPAX@Z ENDP				; __FREE
DSOUND	ENDS
PUBLIC	?ValidateResult@@YGJJ@Z				; ValidateResult
PUBLIC	?ReadXMO@@YGJPAUXMediaObject@@PAXKPAK@Z		; ReadXMO
EXTRN	_WaitForSingleObject@8:NEAR
EXTRN	_CloseHandle@4:NEAR
EXTRN	_CreateEventA@16:NEAR
EXTRN	_memset:NEAR
; Function compile flags: /Odt
;	COMDAT ?ReadXMO@@YGJPAUXMediaObject@@PAXKPAK@Z
DSOUND	SEGMENT
_xmi$ = -48
_xmp$ = -32
_hr$ = -8
_hCompletionEvent$ = -4
_pMediaObject$ = 8
_pvBuffer$ = 12
_dwBufferSize$ = 16
_pdwRead$ = 20
?ReadXMO@@YGJPAUXMediaObject@@PAXKPAK@Z PROC NEAR	; ReadXMO, COMDAT

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 205  :     HANDLE                  hCompletionEvent    = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hCompletionEvent$[ebp], 0

; 206  :     XMEDIAINFO              xmi;
; 207  :     XMEDIAPACKET            xmp;
; 208  :     HRESULT                 hr;
; 209  : 
; 210  :     //
; 211  :     // Check to see if the XMO is ASYNC.  It's massive overhead to do this
; 212  :     // every time we want to read, but hey, it's test code.
; 213  :     //
; 214  : 
; 215  :     ZeroMemory(&xmi, sizeof(xmi));

  0000d	6a 10		 push	 16			; 00000010H
  0000f	6a 00		 push	 0
  00011	8d 45 d0	 lea	 eax, DWORD PTR _xmi$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _memset
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 216  : 
; 217  :     hr = ValidateResult(pMediaObject->GetInfo(&xmi));

  0001d	8d 4d d0	 lea	 ecx, DWORD PTR _xmi$[ebp]
  00020	51		 push	 ecx
  00021	8b 55 08	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  00024	8b 02		 mov	 eax, DWORD PTR [edx]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  00029	51		 push	 ecx
  0002a	ff 50 08	 call	 DWORD PTR [eax+8]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00033	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 218  : 
; 219  :     //
; 220  :     // If we are ASYNC, create an event so we can simulate SYNC.
; 221  :     //
; 222  :     
; 223  :     if(SUCCEEDED(hr) && (xmi.dwFlags & XMO_STREAMF_OUTPUT_ASYNC))

  00036	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003a	7c 1a		 jl	 SHORT $L36111
  0003c	8b 55 d0	 mov	 edx, DWORD PTR _xmi$[ebp]
  0003f	83 e2 08	 and	 edx, 8
  00042	85 d2		 test	 edx, edx
  00044	74 10		 je	 SHORT $L36111

; 224  :     {
; 225  :         hCompletionEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00046	6a 00		 push	 0
  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	6a 00		 push	 0
  0004e	e8 00 00 00 00	 call	 _CreateEventA@16
  00053	89 45 fc	 mov	 DWORD PTR _hCompletionEvent$[ebp], eax
$L36111:

; 226  :     }
; 227  : 
; 228  :     //
; 229  :     // Read from the XMO
; 230  :     //
; 231  : 
; 232  :     if(SUCCEEDED(hr))

  00056	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005a	7c 43		 jl	 SHORT $L36113

; 233  :     {
; 234  :         ZeroMemory(&xmp, sizeof(xmp));

  0005c	6a 18		 push	 24			; 00000018H
  0005e	6a 00		 push	 0
  00060	8d 45 e0	 lea	 eax, DWORD PTR _xmp$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _memset
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH

; 235  : 
; 236  :         xmp.pvBuffer = pvBuffer;

  0006c	8b 4d 0c	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  0006f	89 4d e0	 mov	 DWORD PTR _xmp$[ebp], ecx

; 237  :         xmp.dwMaxSize = dwBufferSize,
; 238  :         xmp.pdwCompletedSize = pdwRead;

  00072	8b 55 10	 mov	 edx, DWORD PTR _dwBufferSize$[ebp]
  00075	89 55 e4	 mov	 DWORD PTR _xmp$[ebp+4], edx
  00078	8b 45 14	 mov	 eax, DWORD PTR _pdwRead$[ebp]
  0007b	89 45 e8	 mov	 DWORD PTR _xmp$[ebp+8], eax

; 239  :         xmp.hCompletionEvent = hCompletionEvent;

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _hCompletionEvent$[ebp]
  00081	89 4d f0	 mov	 DWORD PTR _xmp$[ebp+16], ecx

; 240  : 
; 241  :         hr = ValidateResult(pMediaObject->Process(NULL, &xmp));

  00084	8d 55 e0	 lea	 edx, DWORD PTR _xmp$[ebp]
  00087	52		 push	 edx
  00088	6a 00		 push	 0
  0008a	8b 45 08	 mov	 eax, DWORD PTR _pMediaObject$[ebp]
  0008d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008f	8b 55 08	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  00092	52		 push	 edx
  00093	ff 51 10	 call	 DWORD PTR [ecx+16]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0009c	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36113:

; 242  :     }
; 243  : 
; 244  :     //
; 245  :     // Wait for processing to complete
; 246  :     //
; 247  : 
; 248  :     if(SUCCEEDED(hr) && hCompletionEvent)

  0009f	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a3	7c 11		 jl	 SHORT $L36115
  000a5	83 7d fc 00	 cmp	 DWORD PTR _hCompletionEvent$[ebp], 0
  000a9	74 0b		 je	 SHORT $L36115

; 249  :     {
; 250  :         WaitForSingleObject(hCompletionEvent, INFINITE);

  000ab	6a ff		 push	 -1
  000ad	8b 45 fc	 mov	 eax, DWORD PTR _hCompletionEvent$[ebp]
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 _WaitForSingleObject@8
$L36115:

; 251  :     }
; 252  : 
; 253  :     //
; 254  :     // Clean up
; 255  :     //
; 256  : 
; 257  :     CLOSE_HANDLE(hCompletionEvent);

  000b6	83 7d fc 00	 cmp	 DWORD PTR _hCompletionEvent$[ebp], 0
  000ba	74 16		 je	 SHORT $L36117
  000bc	83 7d fc ff	 cmp	 DWORD PTR _hCompletionEvent$[ebp], -1
  000c0	74 10		 je	 SHORT $L36117
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _hCompletionEvent$[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 _CloseHandle@4
  000cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hCompletionEvent$[ebp], 0
$L36117:

; 258  : 
; 259  :     return hr;

  000d2	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 260  : }

  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 10 00	 ret	 16			; 00000010H
?ReadXMO@@YGJPAUXMediaObject@@PAXKPAK@Z ENDP		; ReadXMO
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\util.h
DSOUND	ENDS
;	COMDAT ?ValidateResult@@YGJJ@Z
DSOUND	SEGMENT
_hr$ = 8
?ValidateResult@@YGJJ@Z PROC NEAR			; ValidateResult, COMDAT

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 32   :     if(FAILED(hr))

  00003	83 7d 08 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00007	7d 01		 jge	 SHORT $L35860

; 33   :     {
; 34   :         __asm int 3;

  00009	cc		 int	 3
$L35860:

; 35   :     }
; 36   : 
; 37   :     return hr;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]

; 38   : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?ValidateResult@@YGJJ@Z ENDP				; ValidateResult
DSOUND	ENDS
PUBLIC	?WriteXMO@@YGJPAUXMediaObject@@PAXKPAK@Z	; WriteXMO
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\util.cpp
;	COMDAT ?WriteXMO@@YGJPAUXMediaObject@@PAXKPAK@Z
DSOUND	SEGMENT
_xmi$ = -48
_xmp$ = -32
_hr$ = -8
_hCompletionEvent$ = -4
_pMediaObject$ = 8
_pvBuffer$ = 12
_dwBufferSize$ = 16
_pdwWritten$ = 20
?WriteXMO@@YGJPAUXMediaObject@@PAXKPAK@Z PROC NEAR	; WriteXMO, COMDAT

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 293  :     HANDLE                  hCompletionEvent    = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hCompletionEvent$[ebp], 0

; 294  :     XMEDIAINFO              xmi;
; 295  :     XMEDIAPACKET            xmp;
; 296  :     HRESULT                 hr;
; 297  : 
; 298  :     //
; 299  :     // Check to see if the XMO is ASYNC.  It's massive overhead to do this
; 300  :     // every time we want to read, but hey, it's test code.
; 301  :     //
; 302  : 
; 303  :     ZeroMemory(&xmi, sizeof(xmi));

  0000d	6a 10		 push	 16			; 00000010H
  0000f	6a 00		 push	 0
  00011	8d 45 d0	 lea	 eax, DWORD PTR _xmi$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _memset
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 304  : 
; 305  :     hr = ValidateResult(pMediaObject->GetInfo(&xmi));

  0001d	8d 4d d0	 lea	 ecx, DWORD PTR _xmi$[ebp]
  00020	51		 push	 ecx
  00021	8b 55 08	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  00024	8b 02		 mov	 eax, DWORD PTR [edx]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  00029	51		 push	 ecx
  0002a	ff 50 08	 call	 DWORD PTR [eax+8]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00033	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 306  : 
; 307  :     //
; 308  :     // If we are ASYNC, create an event so we can simulate SYNC.
; 309  :     //
; 310  :     
; 311  :     if(SUCCEEDED(hr) && (xmi.dwFlags & XMO_STREAMF_OUTPUT_ASYNC))

  00036	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003a	7c 1a		 jl	 SHORT $L36129
  0003c	8b 55 d0	 mov	 edx, DWORD PTR _xmi$[ebp]
  0003f	83 e2 08	 and	 edx, 8
  00042	85 d2		 test	 edx, edx
  00044	74 10		 je	 SHORT $L36129

; 312  :     {
; 313  :         hCompletionEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00046	6a 00		 push	 0
  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	6a 00		 push	 0
  0004e	e8 00 00 00 00	 call	 _CreateEventA@16
  00053	89 45 fc	 mov	 DWORD PTR _hCompletionEvent$[ebp], eax
$L36129:

; 314  :     }
; 315  : 
; 316  :     //
; 317  :     // Write to the XMO
; 318  :     //
; 319  : 
; 320  :     if(SUCCEEDED(hr))

  00056	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005a	7c 43		 jl	 SHORT $L36131

; 321  :     {
; 322  :         ZeroMemory(&xmp, sizeof(xmp));

  0005c	6a 18		 push	 24			; 00000018H
  0005e	6a 00		 push	 0
  00060	8d 45 e0	 lea	 eax, DWORD PTR _xmp$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _memset
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH

; 323  : 
; 324  :         xmp.pvBuffer = pvBuffer;

  0006c	8b 4d 0c	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  0006f	89 4d e0	 mov	 DWORD PTR _xmp$[ebp], ecx

; 325  :         xmp.dwMaxSize = dwBufferSize,
; 326  :         xmp.pdwCompletedSize = pdwWritten;

  00072	8b 55 10	 mov	 edx, DWORD PTR _dwBufferSize$[ebp]
  00075	89 55 e4	 mov	 DWORD PTR _xmp$[ebp+4], edx
  00078	8b 45 14	 mov	 eax, DWORD PTR _pdwWritten$[ebp]
  0007b	89 45 e8	 mov	 DWORD PTR _xmp$[ebp+8], eax

; 327  :         xmp.hCompletionEvent = hCompletionEvent;

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _hCompletionEvent$[ebp]
  00081	89 4d f0	 mov	 DWORD PTR _xmp$[ebp+16], ecx

; 328  : 
; 329  :         hr = ValidateResult(pMediaObject->Process(&xmp, NULL));

  00084	6a 00		 push	 0
  00086	8d 55 e0	 lea	 edx, DWORD PTR _xmp$[ebp]
  00089	52		 push	 edx
  0008a	8b 45 08	 mov	 eax, DWORD PTR _pMediaObject$[ebp]
  0008d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008f	8b 55 08	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  00092	52		 push	 edx
  00093	ff 51 10	 call	 DWORD PTR [ecx+16]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0009c	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36131:

; 330  :     }
; 331  : 
; 332  :     //
; 333  :     // Wait for processing to complete
; 334  :     //
; 335  : 
; 336  :     if(SUCCEEDED(hr) && hCompletionEvent)

  0009f	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a3	7c 11		 jl	 SHORT $L36133
  000a5	83 7d fc 00	 cmp	 DWORD PTR _hCompletionEvent$[ebp], 0
  000a9	74 0b		 je	 SHORT $L36133

; 337  :     {
; 338  :         WaitForSingleObject(hCompletionEvent, INFINITE);

  000ab	6a ff		 push	 -1
  000ad	8b 45 fc	 mov	 eax, DWORD PTR _hCompletionEvent$[ebp]
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 _WaitForSingleObject@8
$L36133:

; 339  :     }
; 340  : 
; 341  :     //
; 342  :     // Clean up
; 343  :     //
; 344  : 
; 345  :     CLOSE_HANDLE(hCompletionEvent);

  000b6	83 7d fc 00	 cmp	 DWORD PTR _hCompletionEvent$[ebp], 0
  000ba	74 16		 je	 SHORT $L36135
  000bc	83 7d fc ff	 cmp	 DWORD PTR _hCompletionEvent$[ebp], -1
  000c0	74 10		 je	 SHORT $L36135
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _hCompletionEvent$[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 _CloseHandle@4
  000cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hCompletionEvent$[ebp], 0
$L36135:

; 346  : 
; 347  :     return hr;

  000d2	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 348  : }

  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 10 00	 ret	 16			; 00000010H
?WriteXMO@@YGJPAUXMediaObject@@PAXKPAK@Z ENDP		; WriteXMO
DSOUND	ENDS
PUBLIC	?TransformXMO@@YGJPAUXMediaObject@@PBXKPAKPAXK2@Z ; TransformXMO
PUBLIC	??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0EG@JJJELFB@?$CB?$CIxmi?4dwFlags?5?$CG?5?$CIXMO_STREAMF_INP@ ; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\test\util.cpp', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EG@JJJELFB@?$CB?$CIxmi?4dwFlags?5?$CG?5?$CIXMO_STREAMF_INP@
DSOUND_RD	SEGMENT
??_C@_0EG@JJJELFB@?$CB?$CIxmi?4dwFlags?5?$CG?5?$CIXMO_STREAMF_INP@ DB '!('
	DB	'xmi.dwFlags & (XMO_STREAMF_INPUT_ASYNC | XMO_STREAMF_OUTPUT_A'
	DB	'SYNC))', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?TransformXMO@@YGJPAUXMediaObject@@PBXKPAKPAXK2@Z
DSOUND	SEGMENT
_xmi$ = -68
_xmpInput$ = -52
_hr$ = -28
_xmpOutput$ = -24
_pMediaObject$ = 8
_pvSource$ = 12
_dwSourceSize$ = 16
_pdwRead$ = 20
_pvDest$ = 24
_dwDestSize$ = 28
_pdwWritten$ = 32
?TransformXMO@@YGJPAUXMediaObject@@PBXKPAKPAXK2@Z PROC NEAR ; TransformXMO, COMDAT

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H

; 387  :     XMEDIAINFO              xmi;
; 388  :     XMEDIAPACKET            xmpInput;
; 389  :     XMEDIAPACKET            xmpOutput;
; 390  :     HRESULT                 hr;
; 391  : 
; 392  : #ifdef TRANSFORMXMO_SINGLEBLOCK
; 393  : 
; 394  :     DWORD                   dwTotalRead     = 0;
; 395  :     DWORD                   dwTotalWritten  = 0;
; 396  :     DWORD                   dwRead;
; 397  :     DWORD                   dwWritten;
; 398  : 
; 399  : #endif // TRANSFORMXMO_SINGLEBLOCK
; 400  : 
; 401  :     //
; 402  :     // Verify that the XMO is synchronous
; 403  :     //
; 404  : 
; 405  :     ZeroMemory(&xmi, sizeof(xmi));

  00006	6a 10		 push	 16			; 00000010H
  00008	6a 00		 push	 0
  0000a	8d 45 bc	 lea	 eax, DWORD PTR _xmi$[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 406  : 
; 407  :     hr = ValidateResult(pMediaObject->GetInfo(&xmi));

  00016	8d 4d bc	 lea	 ecx, DWORD PTR _xmi$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 08	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  0001d	8b 02		 mov	 eax, DWORD PTR [edx]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  00022	51		 push	 ecx
  00023	ff 50 08	 call	 DWORD PTR [eax+8]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0002c	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 408  : 
; 409  :     if(SUCCEEDED(hr))

  0002f	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00033	7c 24		 jl	 SHORT $L36150

; 410  :     {
; 411  :         ASSERT(!(xmi.dwFlags & (XMO_STREAMF_INPUT_ASYNC | XMO_STREAMF_OUTPUT_ASYNC)));

  00035	68 9b 01 00 00	 push	 411			; 0000019bH
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EG@JJJELFB@?$CB?$CIxmi?4dwFlags?5?$CG?5?$CIXMO_STREAMF_INP@
  00044	8b 55 bc	 mov	 edx, DWORD PTR _xmi$[ebp]
  00047	83 e2 0c	 and	 edx, 12			; 0000000cH
  0004a	f7 da		 neg	 edx
  0004c	1b d2		 sbb	 edx, edx
  0004e	f7 da		 neg	 edx
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00056	83 c4 10	 add	 esp, 16			; 00000010H
$L36150:

; 412  :     }
; 413  : 
; 414  :     //
; 415  :     // Call the XMO
; 416  :     //
; 417  : 
; 418  :     if(SUCCEEDED(hr))

  00059	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005d	7c 61		 jl	 SHORT $L36154

; 419  :     {
; 420  :         ZeroMemory(&xmpInput, sizeof(xmpInput));

  0005f	6a 18		 push	 24			; 00000018H
  00061	6a 00		 push	 0
  00063	8d 45 cc	 lea	 eax, DWORD PTR _xmpInput$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _memset
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 421  :         ZeroMemory(&xmpOutput, sizeof(xmpOutput));

  0006f	6a 18		 push	 24			; 00000018H
  00071	6a 00		 push	 0
  00073	8d 4d e8	 lea	 ecx, DWORD PTR _xmpOutput$[ebp]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 _memset
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 422  : 
; 423  : #ifdef TRANSFORMXMO_SINGLEBLOCK
; 424  : 
; 425  :         while(SUCCEEDED(hr) && (dwTotalRead < dwSourceSize) && (dwTotalWritten < dwDestSize))
; 426  :         {
; 427  :             xmpInput.pvBuffer = (LPBYTE)pvSource + dwTotalRead;
; 428  :             xmpInput.dwMaxSize = min(xmi.dwInputSize, dwSourceSize - dwTotalRead);
; 429  :             xmpInput.pdwCompletedSize = &dwRead;
; 430  : 
; 431  :             xmpOutput.pvBuffer = (LPBYTE)pvDest + dwTotalWritten;
; 432  :             xmpOutput.dwMaxSize = min(xmi.dwOutputSize, dwDestSize - dwTotalWritten);
; 433  :             xmpOutput.pdwCompletedSize = &dwWritten;
; 434  : 
; 435  : #else // TRANSFORMXMO_SINGLEBLOCK
; 436  : 
; 437  :             xmpInput.pvBuffer = (LPVOID)pvSource;

  0007f	8b 55 0c	 mov	 edx, DWORD PTR _pvSource$[ebp]
  00082	89 55 cc	 mov	 DWORD PTR _xmpInput$[ebp], edx

; 438  :             xmpInput.dwMaxSize = dwSourceSize,
; 439  :             xmpInput.pdwCompletedSize = pdwRead;

  00085	8b 45 10	 mov	 eax, DWORD PTR _dwSourceSize$[ebp]
  00088	89 45 d0	 mov	 DWORD PTR _xmpInput$[ebp+4], eax
  0008b	8b 4d 14	 mov	 ecx, DWORD PTR _pdwRead$[ebp]
  0008e	89 4d d4	 mov	 DWORD PTR _xmpInput$[ebp+8], ecx

; 440  : 
; 441  :             xmpOutput.pvBuffer = pvDest;

  00091	8b 55 18	 mov	 edx, DWORD PTR _pvDest$[ebp]
  00094	89 55 e8	 mov	 DWORD PTR _xmpOutput$[ebp], edx

; 442  :             xmpOutput.dwMaxSize = dwDestSize,
; 443  :             xmpOutput.pdwCompletedSize = pdwWritten;

  00097	8b 45 1c	 mov	 eax, DWORD PTR _dwDestSize$[ebp]
  0009a	89 45 ec	 mov	 DWORD PTR _xmpOutput$[ebp+4], eax
  0009d	8b 4d 20	 mov	 ecx, DWORD PTR _pdwWritten$[ebp]
  000a0	89 4d f0	 mov	 DWORD PTR _xmpOutput$[ebp+8], ecx

; 444  : 
; 445  : #endif // TRANSFORMXMO_SINGLEBLOCK
; 446  : 
; 447  :             hr = ValidateResult(pMediaObject->Process(&xmpInput, &xmpOutput));

  000a3	8d 55 e8	 lea	 edx, DWORD PTR _xmpOutput$[ebp]
  000a6	52		 push	 edx
  000a7	8d 45 cc	 lea	 eax, DWORD PTR _xmpInput$[ebp]
  000aa	50		 push	 eax
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  000ae	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b0	8b 45 08	 mov	 eax, DWORD PTR _pMediaObject$[ebp]
  000b3	50		 push	 eax
  000b4	ff 52 10	 call	 DWORD PTR [edx+16]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000bd	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax
$L36154:

; 448  : 
; 449  : #ifdef TRANSFORMXMO_SINGLEBLOCK
; 450  : 
; 451  :             dwTotalRead += dwRead;
; 452  :             dwTotalWritten += dwWritten;
; 453  :         }
; 454  : 
; 455  : #endif // TRANSFORMXMO_SINGLEBLOCK
; 456  : 
; 457  :     }
; 458  : 
; 459  : #ifdef TRANSFORMXMO_SINGLEBLOCK
; 460  : 
; 461  :     if(SUCCEEDED(hr) && pdwRead)
; 462  :     {
; 463  :         *pdwRead = dwTotalRead;
; 464  :     }
; 465  : 
; 466  :     if(SUCCEEDED(hr) && pdwWritten)
; 467  :     {
; 468  :         *pdwWritten = dwTotalWritten;
; 469  :     }
; 470  : 
; 471  : #endif // TRANSFORMXMO_SINGLEBLOCK
; 472  : 
; 473  :     return hr;

  000c0	8b 45 e4	 mov	 eax, DWORD PTR _hr$[ebp]

; 474  : }

  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c2 1c 00	 ret	 28			; 0000001cH
?TransformXMO@@YGJPAUXMediaObject@@PBXKPAKPAXK2@Z ENDP	; TransformXMO
DSOUND	ENDS
PUBLIC	?OpenWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAUXFileMediaObject@@@Z ; OpenWaveFile
PUBLIC	??_C@_0L@OKBLGMCB@Loading?5?$CFs?$AA@		; `string'
EXTRN	_XWaveFileCreateMediaObject@12:NEAR
;	COMDAT ??_C@_0L@OKBLGMCB@Loading?5?$CFs?$AA@
DSOUND_RD	SEGMENT
??_C@_0L@OKBLGMCB@Loading?5?$CFs?$AA@ DB 'Loading %s', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?OpenWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAUXFileMediaObject@@@Z
DSOUND	SEGMENT
_pszFileName$ = 8
_ppwfxFormat$ = 12
_ppMediaObject$ = 16
?OpenWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAUXFileMediaObject@@@Z PROC NEAR ; OpenWaveFile, COMDAT

; 504  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 505  :     DPF_TEST("Loading %s", pszFileName);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  00006	50		 push	 eax
  00007	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@OKBLGMCB@Loading?5?$CFs?$AA@
  0000c	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00011	83 c4 08	 add	 esp, 8

; 506  : 
; 507  :     return ValidateResult(XWaveFileCreateMediaObject(pszFileName, ppwfxFormat, ppMediaObject));

  00014	8b 4d 10	 mov	 ecx, DWORD PTR _ppMediaObject$[ebp]
  00017	51		 push	 ecx
  00018	8b 55 0c	 mov	 edx, DWORD PTR _ppwfxFormat$[ebp]
  0001b	52		 push	 edx
  0001c	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _XWaveFileCreateMediaObject@12
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult

; 508  : }

  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
?OpenWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAUXFileMediaObject@@@Z ENDP ; OpenWaveFile
DSOUND	ENDS
PUBLIC	??_C@_08BKKEJEEI@TESTDS?3?5?$AA@		; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	_vsprintf:NEAR
EXTRN	_OutputDebugStringA@4:NEAR
;	COMDAT ??_C@_08BKKEJEEI@TESTDS?3?5?$AA@
; File c:\xbox\private\windows\directx\dsound\test\testds.h
DSOUND_RD	SEGMENT
??_C@_08BKKEJEEI@TESTDS?3?5?$AA@ DB 'TESTDS: ', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
DSOUND_RD	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?DPF_TEST@@YAXPBDZZ
DSOUND	SEGMENT
_va$ = -260
_szString$ = -256
_pszFormat$ = 8
?DPF_TEST@@YAXPBDZZ PROC NEAR				; DPF_TEST, COMDAT

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H

; 34   :     CHAR                    szString[0x100];
; 35   :     va_list                 va;
; 36   : 
; 37   :     va_start(va, pszFormat);

  00009	8d 45 0c	 lea	 eax, DWORD PTR _pszFormat$[ebp+4]
  0000c	89 85 fc fe ff
	ff		 mov	 DWORD PTR _va$[ebp], eax

; 38   :     vsprintf(szString, pszFormat, va);

  00012	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _va$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR _pszFormat$[ebp]
  0001c	52		 push	 edx
  0001d	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szString$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _vsprintf
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 39   :     va_end(va);

  0002c	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _va$[ebp], 0

; 40   : 
; 41   :     OutputDebugStringA("TESTDS: ");

  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08BKKEJEEI@TESTDS?3?5?$AA@
  0003b	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 42   :     OutputDebugStringA(szString);

  00040	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _szString$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 43   :     OutputDebugStringA("\n");

  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00051	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 44   : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?DPF_TEST@@YAXPBDZZ ENDP				; DPF_TEST
DSOUND	ENDS
PUBLIC	?ValidatePtr@@YGJPAX@Z				; ValidatePtr
PUBLIC	?LoadWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z ; LoadWaveFile
PUBLIC	?ClampBufferSize@@YGJPAK@Z			; ClampBufferSize
PUBLIC	??_C@_0M@GMBEFBHN@pszFileName?$AA@		; `string'
PUBLIC	??_C@_09KDPBIJHM@ppvBuffer?$AA@			; `string'
PUBLIC	??_C@_0O@BKBPOCFA@pdwBufferSize?$AA@		; `string'
PUBLIC	??_C@_0O@OMNKPMNK@ppMediaObject?$AA@		; `string'
;	COMDAT ??_C@_0M@GMBEFBHN@pszFileName?$AA@
; File c:\xbox\private\windows\directx\dsound\test\util.cpp
DSOUND_RD	SEGMENT
??_C@_0M@GMBEFBHN@pszFileName?$AA@ DB 'pszFileName', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_09KDPBIJHM@ppvBuffer?$AA@
DSOUND_RD	SEGMENT
??_C@_09KDPBIJHM@ppvBuffer?$AA@ DB 'ppvBuffer', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@BKBPOCFA@pdwBufferSize?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@BKBPOCFA@pdwBufferSize?$AA@ DB 'pdwBufferSize', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@OMNKPMNK@ppMediaObject?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@OMNKPMNK@ppMediaObject?$AA@ DB 'ppMediaObject', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?LoadWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z
DSOUND	SEGMENT
_pvBuffer$ = -40
_xmp$ = -36
_hr$ = -12
_dwBufferSize$ = -8
_pMediaObject$ = -4
_pszFileName$ = 8
_ppwfxFormat$ = 12
_ppvBuffer$ = 16
_pdwBufferSize$ = 20
_ppMediaObject$ = 24
?LoadWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z PROC NEAR ; LoadWaveFile, COMDAT

; 544  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H

; 545  :     XFileMediaObject *      pMediaObject    = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pMediaObject$[ebp], 0

; 546  :     LPVOID                  pvBuffer        = NULL;

  0000d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _pvBuffer$[ebp], 0

; 547  :     DWORD                   dwBufferSize;
; 548  :     XMEDIAPACKET            xmp;
; 549  :     HRESULT                 hr;
; 550  :     
; 551  :     ASSERT(pszFileName);

  00014	68 27 02 00 00	 push	 551			; 00000227H
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@GMBEFBHN@pszFileName?$AA@
  00023	33 c0		 xor	 eax, eax
  00025	83 7d 08 00	 cmp	 DWORD PTR _pszFileName$[ebp], 0
  00029	0f 94 c0	 sete	 al
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 552  :     ASSERT(ppvBuffer);

  00035	68 28 02 00 00	 push	 552			; 00000228H
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09KDPBIJHM@ppvBuffer?$AA@
  00044	33 c9		 xor	 ecx, ecx
  00046	83 7d 10 00	 cmp	 DWORD PTR _ppvBuffer$[ebp], 0
  0004a	0f 94 c1	 sete	 cl
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00053	83 c4 10	 add	 esp, 16			; 00000010H

; 553  :     ASSERT(pdwBufferSize);

  00056	68 29 02 00 00	 push	 553			; 00000229H
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@BKBPOCFA@pdwBufferSize?$AA@
  00065	33 d2		 xor	 edx, edx
  00067	83 7d 14 00	 cmp	 DWORD PTR _pdwBufferSize$[ebp], 0
  0006b	0f 94 c2	 sete	 dl
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00074	83 c4 10	 add	 esp, 16			; 00000010H

; 554  :     ASSERT(ppMediaObject);

  00077	68 2a 02 00 00	 push	 554			; 0000022aH
  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@OMNKPMNK@ppMediaObject?$AA@
  00086	33 c0		 xor	 eax, eax
  00088	83 7d 18 00	 cmp	 DWORD PTR _ppMediaObject$[ebp], 0
  0008c	0f 94 c0	 sete	 al
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00095	83 c4 10	 add	 esp, 16			; 00000010H

; 555  : 
; 556  :     hr = ValidateResult(XWaveFileCreateMediaObject(pszFileName, ppwfxFormat, &pMediaObject));

  00098	8d 4d fc	 lea	 ecx, DWORD PTR _pMediaObject$[ebp]
  0009b	51		 push	 ecx
  0009c	8b 55 0c	 mov	 edx, DWORD PTR _ppwfxFormat$[ebp]
  0009f	52		 push	 edx
  000a0	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 _XWaveFileCreateMediaObject@12
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000af	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 557  : 
; 558  :     if(SUCCEEDED(hr))

  000b2	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b6	7c 19		 jl	 SHORT $L36179

; 559  :     {
; 560  :         hr = ValidateResult(pMediaObject->GetLength(&dwBufferSize));

  000b8	8d 4d f8	 lea	 ecx, DWORD PTR _dwBufferSize$[ebp]
  000bb	51		 push	 ecx
  000bc	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  000bf	8b 02		 mov	 eax, DWORD PTR [edx]
  000c1	8b 4d fc	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  000c4	51		 push	 ecx
  000c5	ff 50 20	 call	 DWORD PTR [eax+32]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000ce	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L36179:

; 561  :     }
; 562  : 
; 563  :     if(SUCCEEDED(hr))

  000d1	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000d5	7c 0c		 jl	 SHORT $L36181

; 564  :     {
; 565  :         hr = ClampBufferSize(&dwBufferSize);

  000d7	8d 55 f8	 lea	 edx, DWORD PTR _dwBufferSize$[ebp]
  000da	52		 push	 edx
  000db	e8 00 00 00 00	 call	 ?ClampBufferSize@@YGJPAK@Z ; ClampBufferSize
  000e0	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L36181:

; 566  :     }
; 567  : 
; 568  :     if(SUCCEEDED(hr))

  000e3	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000e7	7c 18		 jl	 SHORT $L36183

; 569  :     {
; 570  :         hr = MALLOC(pvBuffer, BYTE, dwBufferSize);

  000e9	8b 45 f8	 mov	 eax, DWORD PTR _dwBufferSize$[ebp]
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  000f2	89 45 d8	 mov	 DWORD PTR _pvBuffer$[ebp], eax
  000f5	8b 4d d8	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  000fe	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L36183:

; 571  :     }
; 572  : 
; 573  :     if(SUCCEEDED(hr))

  00101	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00105	7c 37		 jl	 SHORT $L36187

; 574  :     {
; 575  :         ZeroMemory(&xmp, sizeof(xmp));

  00107	6a 18		 push	 24			; 00000018H
  00109	6a 00		 push	 0
  0010b	8d 55 dc	 lea	 edx, DWORD PTR _xmp$[ebp]
  0010e	52		 push	 edx
  0010f	e8 00 00 00 00	 call	 _memset
  00114	83 c4 0c	 add	 esp, 12			; 0000000cH

; 576  : 
; 577  :         xmp.pvBuffer = pvBuffer;

  00117	8b 45 d8	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  0011a	89 45 dc	 mov	 DWORD PTR _xmp$[ebp], eax

; 578  :         xmp.dwMaxSize = dwBufferSize;

  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _dwBufferSize$[ebp]
  00120	89 4d e0	 mov	 DWORD PTR _xmp$[ebp+4], ecx

; 579  :         
; 580  :         hr = ValidateResult(pMediaObject->Process(NULL, &xmp));

  00123	8d 55 dc	 lea	 edx, DWORD PTR _xmp$[ebp]
  00126	52		 push	 edx
  00127	6a 00		 push	 0
  00129	8b 45 fc	 mov	 eax, DWORD PTR _pMediaObject$[ebp]
  0012c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012e	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  00131	52		 push	 edx
  00132	ff 51 10	 call	 DWORD PTR [ecx+16]
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0013b	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L36187:

; 581  :     }
; 582  : 
; 583  :     if(SUCCEEDED(hr))

  0013e	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00142	7c 1a		 jl	 SHORT $L36189

; 584  :     {
; 585  :         *ppvBuffer = pvBuffer;

  00144	8b 45 10	 mov	 eax, DWORD PTR _ppvBuffer$[ebp]
  00147	8b 4d d8	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  0014a	89 08		 mov	 DWORD PTR [eax], ecx

; 586  :         *pdwBufferSize = dwBufferSize;

  0014c	8b 55 14	 mov	 edx, DWORD PTR _pdwBufferSize$[ebp]
  0014f	8b 45 f8	 mov	 eax, DWORD PTR _dwBufferSize$[ebp]
  00152	89 02		 mov	 DWORD PTR [edx], eax

; 587  :         *ppMediaObject = pMediaObject;

  00154	8b 4d 18	 mov	 ecx, DWORD PTR _ppMediaObject$[ebp]
  00157	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  0015a	89 11		 mov	 DWORD PTR [ecx], edx

; 588  :     }
; 589  :     else

  0015c	eb 22		 jmp	 SHORT $L36190
$L36189:

; 590  :     {
; 591  :         FREE(pvBuffer);

  0015e	8d 45 d8	 lea	 eax, DWORD PTR _pvBuffer$[ebp]
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE

; 592  :         RELEASE(pMediaObject);

  00167	83 7d fc 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  0016b	74 13		 je	 SHORT $L36190
  0016d	8b 4d fc	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  00170	8b 11		 mov	 edx, DWORD PTR [ecx]
  00172	8b 45 fc	 mov	 eax, DWORD PTR _pMediaObject$[ebp]
  00175	50		 push	 eax
  00176	ff 52 04	 call	 DWORD PTR [edx+4]
  00179	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pMediaObject$[ebp], 0
$L36190:

; 593  :     }
; 594  : 
; 595  :     return hr;

  00180	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 596  : }

  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c2 14 00	 ret	 20			; 00000014H
?LoadWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z ENDP ; LoadWaveFile
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\util.h
DSOUND	ENDS
;	COMDAT ?ValidatePtr@@YGJPAX@Z
DSOUND	SEGMENT
_pv$ = 8
?ValidatePtr@@YGJPAX@Z PROC NEAR			; ValidatePtr, COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   :     if(!pv)

  00003	83 7d 08 00	 cmp	 DWORD PTR _pv$[ebp], 0
  00007	75 01		 jne	 SHORT $L35864

; 43   :     {
; 44   :         __asm int 3;

  00009	cc		 int	 3
$L35864:

; 45   :     }
; 46   : 
; 47   :     return pv ? DS_OK : DSERR_OUTOFMEMORY;

  0000a	33 c0		 xor	 eax, eax
  0000c	83 7d 08 00	 cmp	 DWORD PTR _pv$[ebp], 0
  00010	0f 95 c0	 setne	 al
  00013	48		 dec	 eax
  00014	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH

; 48   : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?ValidatePtr@@YGJPAX@Z ENDP				; ValidatePtr
DSOUND	ENDS
PUBLIC	?GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z	; GetStdWaveFile
PUBLIC	??_C@_0BA@MKDCPJHH@t?3?2media?2audio?2?$AA@	; `string'
PUBLIC	??_C@_04LPJNPKOL@pcm?2?$AA@			; `string'
PUBLIC	??_C@_06FKHHNIJF@adpcm?2?$AA@			; `string'
PUBLIC	??_C@_0O@MEPJBAJM@?$CFuk?$CFub?$CFls?4wav?$AA@	; `string'
PUBLIC	??_C@_01GOHFPIOK@m?$AA@				; `string'
PUBLIC	??_C@_01LKDEMHDF@s?$AA@				; `string'
PUBLIC	??_C@_0BD@PMBBCNLP@Unsupported?5format?$AA@	; `string'
EXTRN	_sprintf:NEAR
EXTRN	_strcpy:NEAR
EXTRN	_strcat:NEAR
EXTRN	_strlen:NEAR
;	COMDAT ?pszParent@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
; File c:\xbox\private\windows\directx\dsound\test\util.cpp
DSOUND_RD	SEGMENT
?pszParent@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB DD FLAT:??_C@_0BA@MKDCPJHH@t?3?2media?2audio?2?$AA@ ; `GetStdWaveFile'::`2'::pszParent
DSOUND_RD	ENDS
;	COMDAT ?pszPcm@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
DSOUND_RD	SEGMENT
?pszPcm@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB DD FLAT:??_C@_04LPJNPKOL@pcm?2?$AA@ ; `GetStdWaveFile'::`2'::pszPcm
DSOUND_RD	ENDS
;	COMDAT ?pszAdpcm@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
DSOUND_RD	SEGMENT
?pszAdpcm@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB DD FLAT:??_C@_06FKHHNIJF@adpcm?2?$AA@ ; `GetStdWaveFile'::`2'::pszAdpcm
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@PMBBCNLP@Unsupported?5format?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@PMBBCNLP@Unsupported?5format?$AA@ DB 'Unsupported format', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ?pszMono@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
DSOUND_RD	SEGMENT
?pszMono@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB DD FLAT:??_C@_01GOHFPIOK@m?$AA@ ; `GetStdWaveFile'::`2'::pszMono
DSOUND_RD	ENDS
;	COMDAT ?pszStereo@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
DSOUND_RD	SEGMENT
?pszStereo@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB DD FLAT:??_C@_01LKDEMHDF@s?$AA@ ; `GetStdWaveFile'::`2'::pszStereo
DSOUND_RD	ENDS
;	COMDAT ?pszFileTemplate@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
DSOUND_RD	SEGMENT
?pszFileTemplate@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB DD FLAT:??_C@_0O@MEPJBAJM@?$CFuk?$CFub?$CFls?4wav?$AA@ ; `GetStdWaveFile'::`2'::pszFileTemplate
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@MKDCPJHH@t?3?2media?2audio?2?$AA@
DSOUND_RD	SEGMENT
??_C@_0BA@MKDCPJHH@t?3?2media?2audio?2?$AA@ DB 't:\media\audio\', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_04LPJNPKOL@pcm?2?$AA@
DSOUND_RD	SEGMENT
??_C@_04LPJNPKOL@pcm?2?$AA@ DB 'pcm\', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_06FKHHNIJF@adpcm?2?$AA@
DSOUND_RD	SEGMENT
??_C@_06FKHHNIJF@adpcm?2?$AA@ DB 'adpcm\', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_01GOHFPIOK@m?$AA@
DSOUND_RD	SEGMENT
??_C@_01GOHFPIOK@m?$AA@ DB 'm', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s?$AA@
DSOUND_RD	SEGMENT
??_C@_01LKDEMHDF@s?$AA@ DB 's', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@MEPJBAJM@?$CFuk?$CFub?$CFls?4wav?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@MEPJBAJM@?$CFuk?$CFub?$CFls?4wav?$AA@ DB '%uk%ub%ls.wav', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z
DSOUND	SEGMENT
tv82 = -8
tv67 = -4
_pwfxFormat$ = 8
_pszFileName$ = 12
?GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z PROC NEAR	; GetStdWaveFile, COMDAT

; 624  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 625  :     static const LPCSTR     pszParent       = "t:\\media\\audio\\";
; 626  :     static const LPCSTR     pszPcm          = "pcm\\";
; 627  :     static const LPCSTR     pszAdpcm        = "adpcm\\";
; 628  :     static const LPCSTR     pszFileTemplate = "%uk%ub%ls.wav";
; 629  :     static const LPCSTR     pszMono         = "m";
; 630  :     static const LPCSTR     pszStereo       = "s";
; 631  : 
; 632  :     strcpy(pszFileName, pszParent);

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pszParent@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
  0000b	50		 push	 eax
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 _strcpy
  00015	83 c4 08	 add	 esp, 8

; 633  : 
; 634  :     switch(pwfxFormat->wFormatTag)
; 635  :     {

  00018	8b 55 08	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  0001b	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0001e	89 45 fc	 mov	 DWORD PTR tv67[ebp], eax
  00021	83 7d fc 01	 cmp	 DWORD PTR tv67[ebp], 1
  00025	74 08		 je	 SHORT $L36219
  00027	83 7d fc 69	 cmp	 DWORD PTR tv67[ebp], 105 ; 00000069H
  0002b	74 17		 je	 SHORT $L36220
  0002d	eb 29		 jmp	 SHORT $L36221
$L36219:

; 636  :         case WAVE_FORMAT_PCM:
; 637  :             strcat(pszFileName, pszPcm);

  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pszPcm@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
  00035	51		 push	 ecx
  00036	8b 55 0c	 mov	 edx, DWORD PTR _pszFileName$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 _strcat
  0003f	83 c4 08	 add	 esp, 8

; 638  :             break;

  00042	eb 2d		 jmp	 SHORT $L36216
$L36220:

; 639  : 
; 640  :         case WAVE_FORMAT_XBOX_ADPCM:
; 641  :             strcat(pszFileName, pszAdpcm);

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pszAdpcm@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
  00049	50		 push	 eax
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _strcat
  00053	83 c4 08	 add	 esp, 8

; 642  :             break;

  00056	eb 19		 jmp	 SHORT $L36216
$L36221:

; 643  : 
; 644  :         default:
; 645  :             ASSERTMSG("Unsupported format");

  00058	68 85 02 00 00	 push	 645			; 00000285H
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@PMBBCNLP@Unsupported?5format?$AA@
  00067	6a 01		 push	 1
  00069	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
$L36216:

; 646  :             break;
; 647  :     }
; 648  : 
; 649  :     sprintf(pszFileName + strlen(pszFileName), pszFileTemplate, pwfxFormat->nSamplesPerSec / 1000, pwfxFormat->wBitsPerSample, (1 == pwfxFormat->nChannels) ? pszMono : pszStereo);

  00071	8b 55 08	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  00074	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  00078	83 f8 01	 cmp	 eax, 1
  0007b	75 0b		 jne	 SHORT $L37174
  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pszMono@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
  00083	89 4d f8	 mov	 DWORD PTR tv82[ebp], ecx
  00086	eb 09		 jmp	 SHORT $L37175
$L37174:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pszStereo@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
  0008e	89 55 f8	 mov	 DWORD PTR tv82[ebp], edx
$L37175:
  00091	8b 45 f8	 mov	 eax, DWORD PTR tv82[ebp]
  00094	50		 push	 eax
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00098	0f b7 51 0e	 movzx	 edx, WORD PTR [ecx+14]
  0009c	52		 push	 edx
  0009d	8b 45 08	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  000a0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a3	33 d2		 xor	 edx, edx
  000a5	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  000aa	f7 f1		 div	 ecx
  000ac	50		 push	 eax
  000ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pszFileTemplate@?1??GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z@4QBDB
  000b3	52		 push	 edx
  000b4	8b 45 0c	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _strlen
  000bd	83 c4 04	 add	 esp, 4
  000c0	8b 4d 0c	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  000c3	03 c8		 add	 ecx, eax
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 _sprintf
  000cb	83 c4 14	 add	 esp, 20			; 00000014H

; 650  : }

  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
?GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z ENDP	; GetStdWaveFile
DSOUND	ENDS
PUBLIC	?GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z	; GetStdWaveFile
;	COMDAT ?szFileName@?1??GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z@4PADA
DSOUND_URW	SEGMENT
?szFileName@?1??GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z@4PADA DB 0104H DUP (?) ; `GetStdWaveFile'::`2'::szFileName
; Function compile flags: /Odt
DSOUND_URW	ENDS
;	COMDAT ?GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT
_pwfxFormat$ = 8
?GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z PROC NEAR	; GetStdWaveFile, COMDAT

; 676  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 677  :     static CHAR             szFileName[MAX_PATH];
; 678  : 
; 679  :     GetStdWaveFile(pwfxFormat, szFileName);

  00003	68 00 00 00 00	 push	 OFFSET FLAT:?szFileName@?1??GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z@4PADA
  00008	8b 45 08	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ?GetStdWaveFile@@YGXPBUtWAVEFORMATEX@@PAD@Z ; GetStdWaveFile

; 680  : 
; 681  :     return szFileName;

  00011	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?szFileName@?1??GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z@4PADA

; 682  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z ENDP		; GetStdWaveFile
DSOUND	ENDS
PUBLIC	?OpenStdWaveFile@@YGJPBUtWAVEFORMATEX@@PAPAUXFileMediaObject@@@Z ; OpenStdWaveFile
; Function compile flags: /Odt
;	COMDAT ?OpenStdWaveFile@@YGJPBUtWAVEFORMATEX@@PAPAUXFileMediaObject@@@Z
DSOUND	SEGMENT
_pwfxFormat$ = 8
_ppMediaObject$ = 12
?OpenStdWaveFile@@YGJPBUtWAVEFORMATEX@@PAPAUXFileMediaObject@@@Z PROC NEAR ; OpenStdWaveFile, COMDAT

; 710  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 711  :     return OpenWaveFile(GetStdWaveFile(pwfxFormat), NULL, ppMediaObject);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _ppMediaObject$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z ; GetStdWaveFile
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?OpenWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAUXFileMediaObject@@@Z ; OpenWaveFile

; 712  : }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?OpenStdWaveFile@@YGJPBUtWAVEFORMATEX@@PAPAUXFileMediaObject@@@Z ENDP ; OpenStdWaveFile
DSOUND	ENDS
PUBLIC	?LoadStdWaveFile@@YGJPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z ; LoadStdWaveFile
; Function compile flags: /Odt
;	COMDAT ?LoadStdWaveFile@@YGJPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z
DSOUND	SEGMENT
_pwfxFormat$ = 8
_ppvBuffer$ = 12
_pdwBufferSize$ = 16
_ppMediaObject$ = 20
?LoadStdWaveFile@@YGJPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z PROC NEAR ; LoadStdWaveFile, COMDAT

; 746  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  :     return LoadWaveFile(GetStdWaveFile(pwfxFormat), NULL, ppvBuffer, pdwBufferSize, ppMediaObject);

  00003	8b 45 14	 mov	 eax, DWORD PTR _ppMediaObject$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _pdwBufferSize$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _ppvBuffer$[ebp]
  0000e	52		 push	 edx
  0000f	6a 00		 push	 0
  00011	8b 45 08	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z ; GetStdWaveFile
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?LoadWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z ; LoadWaveFile

; 748  : }

  00020	5d		 pop	 ebp
  00021	c2 10 00	 ret	 16			; 00000010H
?LoadStdWaveFile@@YGJPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z ENDP ; LoadStdWaveFile
DSOUND	ENDS
PUBLIC	?CreateBufferFromFile@@YGJPBDKPBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU2@PAK@Z ; CreateBufferFromFile
PUBLIC	??_C@_08JGFEHJLL@ppBuffer?$AA@			; `string'
PUBLIC	?Release@IDirectSoundBuffer@@QAGKXZ		; IDirectSoundBuffer::Release
PUBLIC	?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z ; IDirectSoundBuffer::SetOutputBuffer
PUBLIC	?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z	; IDirectSoundBuffer::SetBufferData
EXTRN	_DirectSoundCreateBuffer@8:NEAR
;	COMDAT ??_C@_08JGFEHJLL@ppBuffer?$AA@
DSOUND_RD	SEGMENT
??_C@_08JGFEHJLL@ppBuffer?$AA@ DB 'ppBuffer', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CreateBufferFromFile@@YGJPBDKPBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU2@PAK@Z
DSOUND	SEGMENT
_pvBufferData$ = -52
_hr$ = -48
_dsbd$ = -44
_pWaveFile$ = -16
_dwBufferBytes$ = -12
_pwfxFormat$ = -8
_pBuffer$ = -4
_pszFile$ = 8
_dwFlags$ = 12
_pMixBins$ = 16
_pOutputBuffer$ = 20
_ppBuffer$ = 24
_pdwBufferBytes$ = 28
?CreateBufferFromFile@@YGJPBDKPBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU2@PAK@Z PROC NEAR ; CreateBufferFromFile, COMDAT

; 784  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 785  :     LPXFILEMEDIAOBJECT      pWaveFile       = NULL;

  00006	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pWaveFile$[ebp], 0

; 786  :     LPDIRECTSOUNDBUFFER     pBuffer         = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 787  :     LPCWAVEFORMATEX         pwfxFormat;
; 788  :     LPVOID                  pvBufferData;
; 789  :     DWORD                   dwBufferBytes;
; 790  :     DSBUFFERDESC            dsbd;
; 791  :     LPVOID                  pvLock;
; 792  :     HRESULT                 hr;
; 793  : 
; 794  :     //
; 795  :     // Open the wave file.  If it's longer than allowed, trim down the size
; 796  :     //
; 797  : 
; 798  :     hr = LoadWaveFile(pszFile, &pwfxFormat, &pvBufferData, &dwBufferBytes, &pWaveFile);

  00014	8d 45 f0	 lea	 eax, DWORD PTR _pWaveFile$[ebp]
  00017	50		 push	 eax
  00018	8d 4d f4	 lea	 ecx, DWORD PTR _dwBufferBytes$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 cc	 lea	 edx, DWORD PTR _pvBufferData$[ebp]
  0001f	52		 push	 edx
  00020	8d 45 f8	 lea	 eax, DWORD PTR _pwfxFormat$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?LoadWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAXPAKPAPAUXFileMediaObject@@@Z ; LoadWaveFile
  0002d	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax

; 799  : 
; 800  :     //
; 801  :     // Create the buffer
; 802  :     //
; 803  : 
; 804  :     if(SUCCEEDED(hr))

  00030	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00034	7c 3f		 jl	 SHORT $L36255

; 805  :     {
; 806  :         ZeroMemory(&dsbd, sizeof(dsbd));

  00036	6a 18		 push	 24			; 00000018H
  00038	6a 00		 push	 0
  0003a	8d 55 d4	 lea	 edx, DWORD PTR _dsbd$[ebp]
  0003d	52		 push	 edx
  0003e	e8 00 00 00 00	 call	 _memset
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 807  : 
; 808  :         dsbd.dwSize = sizeof(dsbd);

  00046	c7 45 d4 18 00
	00 00		 mov	 DWORD PTR _dsbd$[ebp], 24 ; 00000018H

; 809  :         dsbd.dwFlags = dwFlags;

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00050	89 45 d8	 mov	 DWORD PTR _dsbd$[ebp+4], eax

; 810  :         dsbd.lpwfxFormat = (LPWAVEFORMATEX)pwfxFormat;

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00056	89 4d e0	 mov	 DWORD PTR _dsbd$[ebp+12], ecx

; 811  :         dsbd.lpMixBins = pMixBins;

  00059	8b 55 10	 mov	 edx, DWORD PTR _pMixBins$[ebp]
  0005c	89 55 e4	 mov	 DWORD PTR _dsbd$[ebp+16], edx

; 812  :         
; 813  :         hr = ValidateResult(DirectSoundCreateBuffer(&dsbd, &pBuffer));

  0005f	8d 45 fc	 lea	 eax, DWORD PTR _pBuffer$[ebp]
  00062	50		 push	 eax
  00063	8d 4d d4	 lea	 ecx, DWORD PTR _dsbd$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 _DirectSoundCreateBuffer@8
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00072	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L36255:

; 814  :     }
; 815  : 
; 816  :     if(SUCCEEDED(hr))

  00075	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00079	7c 1a		 jl	 SHORT $L36258

; 817  :     {
; 818  :         hr = ValidateResult(pBuffer->SetBufferData(pvBufferData, dwBufferBytes));

  0007b	8b 55 f4	 mov	 edx, DWORD PTR _dwBufferBytes$[ebp]
  0007e	52		 push	 edx
  0007f	8b 45 cc	 mov	 eax, DWORD PTR _pvBufferData$[ebp]
  00082	50		 push	 eax
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00092	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L36258:

; 819  :     }
; 820  : 
; 821  :     //
; 822  :     // Set the output buffer
; 823  :     //
; 824  : 
; 825  :     if(SUCCEEDED(hr) && pOutputBuffer)

  00095	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00099	7c 1c		 jl	 SHORT $L36260
  0009b	83 7d 14 00	 cmp	 DWORD PTR _pOutputBuffer$[ebp], 0
  0009f	74 16		 je	 SHORT $L36260

; 826  :     {
; 827  :         hr = ValidateResult(pBuffer->SetOutputBuffer(pOutputBuffer));

  000a1	8b 55 14	 mov	 edx, DWORD PTR _pOutputBuffer$[ebp]
  000a4	52		 push	 edx
  000a5	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z ; IDirectSoundBuffer::SetOutputBuffer
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000b4	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax
$L36260:

; 828  :     }
; 829  : 
; 830  :     //
; 831  :     // Success
; 832  :     //
; 833  : 
; 834  :     if(SUCCEEDED(hr))

  000b7	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000bb	7c 55		 jl	 SHORT $L36262

; 835  :     {
; 836  :         ASSERT(ppBuffer);

  000bd	68 44 03 00 00	 push	 836			; 00000344H
  000c2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  000c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08JGFEHJLL@ppBuffer?$AA@
  000cc	33 c9		 xor	 ecx, ecx
  000ce	83 7d 18 00	 cmp	 DWORD PTR _ppBuffer$[ebp], 0
  000d2	0f 94 c1	 sete	 cl
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000db	83 c4 10	 add	 esp, 16			; 00000010H

; 837  : 
; 838  :         *ppBuffer = pBuffer;

  000de	8b 55 18	 mov	 edx, DWORD PTR _ppBuffer$[ebp]
  000e1	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  000e4	89 02		 mov	 DWORD PTR [edx], eax

; 839  : 
; 840  :         if(pdwBufferBytes)

  000e6	83 7d 1c 00	 cmp	 DWORD PTR _pdwBufferBytes$[ebp], 0
  000ea	74 24		 je	 SHORT $L36264

; 841  :         {
; 842  :             if(!*pdwBufferBytes || (*pdwBufferBytes > dwBufferBytes))

  000ec	8b 4d 1c	 mov	 ecx, DWORD PTR _pdwBufferBytes$[ebp]
  000ef	83 39 00	 cmp	 DWORD PTR [ecx], 0
  000f2	74 0a		 je	 SHORT $L36266
  000f4	8b 55 1c	 mov	 edx, DWORD PTR _pdwBufferBytes$[ebp]
  000f7	8b 02		 mov	 eax, DWORD PTR [edx]
  000f9	3b 45 f4	 cmp	 eax, DWORD PTR _dwBufferBytes$[ebp]
  000fc	76 0a		 jbe	 SHORT $L36265
$L36266:

; 843  :             {
; 844  :                 *pdwBufferBytes = dwBufferBytes;

  000fe	8b 4d 1c	 mov	 ecx, DWORD PTR _pdwBufferBytes$[ebp]
  00101	8b 55 f4	 mov	 edx, DWORD PTR _dwBufferBytes$[ebp]
  00104	89 11		 mov	 DWORD PTR [ecx], edx

; 845  :             }
; 846  :             else

  00106	eb 08		 jmp	 SHORT $L36264
$L36265:

; 847  :             {
; 848  :                 dwBufferBytes = *pdwBufferBytes;

  00108	8b 45 1c	 mov	 eax, DWORD PTR _pdwBufferBytes$[ebp]
  0010b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010d	89 4d f4	 mov	 DWORD PTR _dwBufferBytes$[ebp], ecx
$L36264:

; 849  :             }
; 850  :         }
; 851  :     }
; 852  :     else

  00110	eb 16		 jmp	 SHORT $L36268
$L36262:

; 853  :     {
; 854  :         RELEASE(pBuffer);

  00112	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00116	74 10		 je	 SHORT $L36268
  00118	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  0011b	52		 push	 edx
  0011c	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  00121	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L36268:

; 855  :     }
; 856  : 
; 857  :     RELEASE(pWaveFile);

  00128	83 7d f0 00	 cmp	 DWORD PTR _pWaveFile$[ebp], 0
  0012c	74 13		 je	 SHORT $L36270
  0012e	8b 45 f0	 mov	 eax, DWORD PTR _pWaveFile$[ebp]
  00131	8b 08		 mov	 ecx, DWORD PTR [eax]
  00133	8b 55 f0	 mov	 edx, DWORD PTR _pWaveFile$[ebp]
  00136	52		 push	 edx
  00137	ff 51 04	 call	 DWORD PTR [ecx+4]
  0013a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pWaveFile$[ebp], 0
$L36270:

; 858  : 
; 859  :     return hr;

  00141	8b 45 d0	 mov	 eax, DWORD PTR _hr$[ebp]

; 860  : }

  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c2 18 00	 ret	 24			; 00000018H
?CreateBufferFromFile@@YGJPBDKPBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU2@PAK@Z ENDP ; CreateBufferFromFile
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_Release@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?Release@IDirectSoundBuffer@@QAGKXZ
DSOUND	SEGMENT
_this$ = 8
?Release@IDirectSoundBuffer@@QAGKXZ PROC NEAR		; IDirectSoundBuffer::Release, COMDAT

; 1932 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1933 :         return IDirectSoundBuffer_Release(this);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _IDirectSoundBuffer_Release@4

; 1934 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?Release@IDirectSoundBuffer@@QAGKXZ ENDP		; IDirectSoundBuffer::Release
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetOutputBuffer@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z
DSOUND	SEGMENT
_this$ = 8
_pOutputBuffer$ = 12
?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z PROC NEAR ; IDirectSoundBuffer::SetOutputBuffer, COMDAT

; 1977 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1978 :         return IDirectSoundBuffer_SetOutputBuffer(this, pOutputBuffer);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pOutputBuffer$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetOutputBuffer@8

; 1979 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z ENDP	; IDirectSoundBuffer::SetOutputBuffer
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetBufferData@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
DSOUND	SEGMENT
_this$ = 8
_pvBufferData$ = 12
_dwBufferBytes$ = 16
?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z PROC NEAR	; IDirectSoundBuffer::SetBufferData, COMDAT

; 2107 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2108 :         return IDirectSoundBuffer_SetBufferData(this, pvBufferData, dwBufferBytes);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwBufferBytes$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pvBufferData$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetBufferData@12

; 2109 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ENDP	; IDirectSoundBuffer::SetBufferData
DSOUND	ENDS
PUBLIC	?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z ; CreateStdBuffer
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\util.cpp
;	COMDAT ?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z
DSOUND	SEGMENT
_dwFlags$ = 8
_pwfxFormat$ = 12
_pMixBins$ = 16
_pOutputBuffer$ = 20
_ppBuffer$ = 24
_pdwBufferBytes$ = 28
?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z PROC NEAR ; CreateStdBuffer, COMDAT

; 896  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 897  :     return ValidateResult(CreateBufferFromFile(GetStdWaveFile(pwfxFormat), dwFlags, pMixBins, pOutputBuffer, ppBuffer, pdwBufferBytes));

  00003	8b 45 1c	 mov	 eax, DWORD PTR _pdwBufferBytes$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 18	 mov	 ecx, DWORD PTR _ppBuffer$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 14	 mov	 edx, DWORD PTR _pOutputBuffer$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 10	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z ; GetStdWaveFile
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?CreateBufferFromFile@@YGJPBDKPBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU2@PAK@Z ; CreateBufferFromFile
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult

; 898  : }

  0002c	5d		 pop	 ebp
  0002d	c2 18 00	 ret	 24			; 00000018H
?CreateStdBuffer@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAUIDirectSoundBuffer@@PAPAU3@PAK@Z ENDP ; CreateStdBuffer
DSOUND	ENDS
PUBLIC	?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z	; WaitBuffer
PUBLIC	??_C@_07GDCKGKBF@playing?$AA@			; `string'
PUBLIC	??_C@_07IEOHBIGJ@stopped?$AA@			; `string'
PUBLIC	??_C@_09IDGBDKCL@Buffer?5?$CFs?$AA@		; `string'
PUBLIC	?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z	; IDirectSoundBuffer::GetStatus
EXTRN	_DirectSoundDoWork@0:NEAR
;	COMDAT ??_C@_07GDCKGKBF@playing?$AA@
DSOUND_RD	SEGMENT
??_C@_07GDCKGKBF@playing?$AA@ DB 'playing', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_07IEOHBIGJ@stopped?$AA@
DSOUND_RD	SEGMENT
??_C@_07IEOHBIGJ@stopped?$AA@ DB 'stopped', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_09IDGBDKCL@Buffer?5?$CFs?$AA@
DSOUND_RD	SEGMENT
??_C@_09IDGBDKCL@Buffer?5?$CFs?$AA@ DB 'Buffer %s', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z
DSOUND	SEGMENT
tv76 = -20
_hr$ = -16
_dwStatus$ = -12
_dwWaitStatus$ = -8
_dwStatusMask$ = -4
_pBuffer$ = 8
_fPlaying$ = 12
?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z PROC NEAR	; WaitBuffer, COMDAT

; 927  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 928  :     const DWORD             dwStatusMask    = DSBSTATUS_PLAYING;

  00006	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _dwStatusMask$[ebp], 1

; 929  :     const DWORD             dwWaitStatus    = fPlaying ? DSBSTATUS_PLAYING : 0;

  0000d	33 c0		 xor	 eax, eax
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _fPlaying$[ebp], 0
  00013	0f 95 c0	 setne	 al
  00016	89 45 f8	 mov	 DWORD PTR _dwWaitStatus$[ebp], eax
$L36288:

; 930  :     DWORD                   dwStatus;
; 931  :     HRESULT                 hr;
; 932  : 
; 933  :     while(TRUE)

  00019	b9 01 00 00 00	 mov	 ecx, 1
  0001e	85 c9		 test	 ecx, ecx
  00020	74 59		 je	 SHORT $L36289

; 934  :     {
; 935  :         DirectSoundDoWork();

  00022	e8 00 00 00 00	 call	 _DirectSoundDoWork@0

; 936  :         
; 937  :         hr = ValidateResult(pBuffer->GetStatus(&dwStatus));

  00027	8d 55 f4	 lea	 edx, DWORD PTR _dwStatus$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z ; IDirectSoundBuffer::GetStatus
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0003a	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 938  : 
; 939  :         if(FAILED(hr))

  0003d	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00041	7d 02		 jge	 SHORT $L36291

; 940  :         {
; 941  :             break;

  00043	eb 36		 jmp	 SHORT $L36289
$L36291:

; 942  :         }
; 943  : 
; 944  :         if((dwStatus & dwStatusMask) == dwWaitStatus)

  00045	8b 4d f4	 mov	 ecx, DWORD PTR _dwStatus$[ebp]
  00048	83 e1 01	 and	 ecx, 1
  0004b	3b 4d f8	 cmp	 ecx, DWORD PTR _dwWaitStatus$[ebp]
  0004e	75 29		 jne	 SHORT $L36292

; 945  :         {
; 946  :             DPF_TEST("Buffer %s", fPlaying ? "playing" : "stopped");

  00050	83 7d 0c 00	 cmp	 DWORD PTR _fPlaying$[ebp], 0
  00054	74 09		 je	 SHORT $L37203
  00056	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], OFFSET FLAT:??_C@_07GDCKGKBF@playing?$AA@
  0005d	eb 07		 jmp	 SHORT $L37204
$L37203:
  0005f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], OFFSET FLAT:??_C@_07IEOHBIGJ@stopped?$AA@
$L37204:
  00066	8b 55 ec	 mov	 edx, DWORD PTR tv76[ebp]
  00069	52		 push	 edx
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09IDGBDKCL@Buffer?5?$CFs?$AA@
  0006f	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00074	83 c4 08	 add	 esp, 8

; 947  :             break;

  00077	eb 02		 jmp	 SHORT $L36289
$L36292:

; 948  :         }
; 949  :     }

  00079	eb 9e		 jmp	 SHORT $L36288
$L36289:

; 950  : 
; 951  :     return hr;

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]

; 952  : }

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 08 00	 ret	 8
?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z ENDP		; WaitBuffer
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_GetStatus@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
DSOUND	SEGMENT
_this$ = 8
_pdwStatus$ = 12
?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z PROC NEAR	; IDirectSoundBuffer::GetStatus, COMDAT

; 2092 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2093 :         return IDirectSoundBuffer_GetStatus(this, pdwStatus);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_GetStatus@8

; 2094 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z ENDP		; IDirectSoundBuffer::GetStatus
DSOUND	ENDS
PUBLIC	?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z	; PlayBuffer
PUBLIC	??_C@_0CA@MDBDMONE@Playing?5buffer?5?$CIdelayed?5?$CFlu?5ms?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0P@FDDEFFOG@Playing?5buffer?$AA@		; `string'
PUBLIC	?PlayEx@IDirectSoundBuffer@@QAGJ_JK@Z		; IDirectSoundBuffer::PlayEx
EXTRN	__allmul:NEAR
;	COMDAT ??_C@_0CA@MDBDMONE@Playing?5buffer?5?$CIdelayed?5?$CFlu?5ms?$CJ?$AA@
; File c:\xbox\private\windows\directx\dsound\test\util.cpp
DSOUND_RD	SEGMENT
??_C@_0CA@MDBDMONE@Playing?5buffer?5?$CIdelayed?5?$CFlu?5ms?$CJ?$AA@ DB 'P'
	DB	'laying buffer (delayed %lu ms)', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@FDDEFFOG@Playing?5buffer?$AA@
DSOUND_RD	SEGMENT
??_C@_0P@FDDEFFOG@Playing?5buffer?$AA@ DB 'Playing buffer', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z
DSOUND	SEGMENT
_hr$ = -12
_rtTimeStamp$ = -8
_pBuffer$ = 8
_dwFlags$ = 12
_dwDelay$ = 16
_fWait$ = 20
?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z PROC NEAR	; PlayBuffer, COMDAT

; 984  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 985  :     REFERENCE_TIME          rtTimeStamp = -(LONGLONG)dwDelay * 10000;

  00006	8b 45 10	 mov	 eax, DWORD PTR _dwDelay$[ebp]
  00009	33 c9		 xor	 ecx, ecx
  0000b	f7 d8		 neg	 eax
  0000d	83 d1 00	 adc	 ecx, 0
  00010	f7 d9		 neg	 ecx
  00012	6a 00		 push	 0
  00014	68 10 27 00 00	 push	 10000			; 00002710H
  00019	51		 push	 ecx
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __allmul
  00020	89 45 f8	 mov	 DWORD PTR _rtTimeStamp$[ebp], eax
  00023	89 55 fc	 mov	 DWORD PTR _rtTimeStamp$[ebp+4], edx

; 986  :     HRESULT                 hr;
; 987  : 
; 988  :     if(dwDelay)

  00026	83 7d 10 00	 cmp	 DWORD PTR _dwDelay$[ebp], 0
  0002a	74 13		 je	 SHORT $L36305

; 989  :     {
; 990  :         DPF_TEST("Playing buffer (delayed %lu ms)", dwDelay);

  0002c	8b 55 10	 mov	 edx, DWORD PTR _dwDelay$[ebp]
  0002f	52		 push	 edx
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@MDBDMONE@Playing?5buffer?5?$CIdelayed?5?$CFlu?5ms?$CJ?$AA@
  00035	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  0003a	83 c4 08	 add	 esp, 8

; 991  :     }
; 992  :     else

  0003d	eb 14		 jmp	 SHORT $L36307
$L36305:

; 993  :     {
; 994  :         DPF_TEST("Playing buffer");

  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@FDDEFFOG@Playing?5buffer?$AA@
  00044	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00049	83 c4 04	 add	 esp, 4

; 995  :         fWait = FALSE;

  0004c	c7 45 14 00 00
	00 00		 mov	 DWORD PTR _fWait$[ebp], 0
$L36307:

; 996  :     }
; 997  : 
; 998  :     hr = ValidateResult(pBuffer->PlayEx(rtTimeStamp, dwFlags));

  00053	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00056	50		 push	 eax
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _rtTimeStamp$[ebp+4]
  0005a	51		 push	 ecx
  0005b	8b 55 f8	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?PlayEx@IDirectSoundBuffer@@QAGJ_JK@Z ; IDirectSoundBuffer::PlayEx
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0006e	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 999  : 
; 1000 :     if(SUCCEEDED(hr) && fWait)

  00071	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00075	7c 14		 jl	 SHORT $L36310
  00077	83 7d 14 00	 cmp	 DWORD PTR _fWait$[ebp], 0
  0007b	74 0e		 je	 SHORT $L36310

; 1001 :     {
; 1002 :         hr = WaitBuffer(pBuffer, TRUE);

  0007d	6a 01		 push	 1
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z ; WaitBuffer
  00088	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L36310:

; 1003 :     }
; 1004 : 
; 1005 :     return hr;

  0008b	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 1006 : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 10 00	 ret	 16			; 00000010H
?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ENDP	; PlayBuffer
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_PlayEx@16:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?PlayEx@IDirectSoundBuffer@@QAGJ_JK@Z
DSOUND	SEGMENT
_this$ = 8
_rtTimeStamp$ = 12
_dwFlags$ = 20
?PlayEx@IDirectSoundBuffer@@QAGJ_JK@Z PROC NEAR		; IDirectSoundBuffer::PlayEx, COMDAT

; 2067 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2068 :         return IDirectSoundBuffer_PlayEx(this, rtTimeStamp, dwFlags);

  00003	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _rtTimeStamp$[ebp+4]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _IDirectSoundBuffer_PlayEx@16

; 2069 :     }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
?PlayEx@IDirectSoundBuffer@@QAGJ_JK@Z ENDP		; IDirectSoundBuffer::PlayEx
DSOUND	ENDS
PUBLIC	?PlayBufferToCompletion@@YGJPAUIDirectSoundBuffer@@KK@Z ; PlayBufferToCompletion
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\util.cpp
;	COMDAT ?PlayBufferToCompletion@@YGJPAUIDirectSoundBuffer@@KK@Z
DSOUND	SEGMENT
_hr$ = -4
_pBuffer$ = 8
_dwFlags$ = 12
_dwDelay$ = 16
?PlayBufferToCompletion@@YGJPAUIDirectSoundBuffer@@KK@Z PROC NEAR ; PlayBufferToCompletion, COMDAT

; 1035 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1036 :     HRESULT                 hr;
; 1037 : 
; 1038 :     hr = PlayBuffer(pBuffer, dwFlags, dwDelay, TRUE);

  00004	6a 01		 push	 1
  00006	8b 45 10	 mov	 eax, DWORD PTR _dwDelay$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00011	52		 push	 edx
  00012	e8 00 00 00 00	 call	 ?PlayBuffer@@YGJPAUIDirectSoundBuffer@@KKH@Z ; PlayBuffer
  00017	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 1039 : 
; 1040 :     if(SUCCEEDED(hr))

  0001a	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0001e	7c 0e		 jl	 SHORT $L36318

; 1041 :     {
; 1042 :         hr = WaitBuffer(pBuffer, FALSE);

  00020	6a 00		 push	 0
  00022	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z ; WaitBuffer
  0002b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L36318:

; 1043 :     }
; 1044 : 
; 1045 :     return hr;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 1046 : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
?PlayBufferToCompletion@@YGJPAUIDirectSoundBuffer@@KK@Z ENDP ; PlayBufferToCompletion
DSOUND	ENDS
PUBLIC	?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z	; StopBuffer
PUBLIC	??_C@_0CB@CKDACMBO@Stopping?5buffer?5?$CIdelayed?5?$CFlu?5ms?$CJ@ ; `string'
PUBLIC	??_C@_0BA@DCNFKCK@Stopping?5buffer?$AA@		; `string'
PUBLIC	??_C@_0BK@PDAFDCJF@Resetting?5cursor?5position?$AA@ ; `string'
PUBLIC	?StopEx@IDirectSoundBuffer@@QAGJ_JK@Z		; IDirectSoundBuffer::StopEx
PUBLIC	?SetCurrentPosition@IDirectSoundBuffer@@QAGJK@Z	; IDirectSoundBuffer::SetCurrentPosition
;	COMDAT ??_C@_0CB@CKDACMBO@Stopping?5buffer?5?$CIdelayed?5?$CFlu?5ms?$CJ@
DSOUND_RD	SEGMENT
??_C@_0CB@CKDACMBO@Stopping?5buffer?5?$CIdelayed?5?$CFlu?5ms?$CJ@ DB 'Sto'
	DB	'pping buffer (delayed %lu ms)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@DCNFKCK@Stopping?5buffer?$AA@
DSOUND_RD	SEGMENT
??_C@_0BA@DCNFKCK@Stopping?5buffer?$AA@ DB 'Stopping buffer', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@PDAFDCJF@Resetting?5cursor?5position?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@PDAFDCJF@Resetting?5cursor?5position?$AA@ DB 'Resetting cursor '
	DB	'position', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z
DSOUND	SEGMENT
_hr$ = -12
_rtTimeStamp$ = -8
_pBuffer$ = 8
_dwFlags$ = 12
_dwDelay$ = 16
_fReset$ = 20
_fWait$ = 24
?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z PROC NEAR	; StopBuffer, COMDAT

; 1079 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1080 :     REFERENCE_TIME          rtTimeStamp = -(LONGLONG)dwDelay * 10000;

  00006	8b 45 10	 mov	 eax, DWORD PTR _dwDelay$[ebp]
  00009	33 c9		 xor	 ecx, ecx
  0000b	f7 d8		 neg	 eax
  0000d	83 d1 00	 adc	 ecx, 0
  00010	f7 d9		 neg	 ecx
  00012	6a 00		 push	 0
  00014	68 10 27 00 00	 push	 10000			; 00002710H
  00019	51		 push	 ecx
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __allmul
  00020	89 45 f8	 mov	 DWORD PTR _rtTimeStamp$[ebp], eax
  00023	89 55 fc	 mov	 DWORD PTR _rtTimeStamp$[ebp+4], edx

; 1081 :     HRESULT                 hr;
; 1082 : 
; 1083 :     if(fReset)

  00026	83 7d 14 00	 cmp	 DWORD PTR _fReset$[ebp], 0
  0002a	74 07		 je	 SHORT $L36329

; 1084 :     {
; 1085 :         fWait = TRUE;

  0002c	c7 45 18 01 00
	00 00		 mov	 DWORD PTR _fWait$[ebp], 1
$L36329:

; 1086 :     }
; 1087 : 
; 1088 :     if(dwDelay)

  00033	83 7d 10 00	 cmp	 DWORD PTR _dwDelay$[ebp], 0
  00037	74 13		 je	 SHORT $L36330

; 1089 :     {
; 1090 :         DPF_TEST("Stopping buffer (delayed %lu ms)", dwDelay);

  00039	8b 55 10	 mov	 edx, DWORD PTR _dwDelay$[ebp]
  0003c	52		 push	 edx
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@CKDACMBO@Stopping?5buffer?5?$CIdelayed?5?$CFlu?5ms?$CJ@
  00042	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00047	83 c4 08	 add	 esp, 8

; 1091 :     }
; 1092 :     else

  0004a	eb 0d		 jmp	 SHORT $L36332
$L36330:

; 1093 :     {
; 1094 :         DPF_TEST("Stopping buffer");

  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@DCNFKCK@Stopping?5buffer?$AA@
  00051	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00056	83 c4 04	 add	 esp, 4
$L36332:

; 1095 :     }
; 1096 : 
; 1097 :     hr = ValidateResult(pBuffer->StopEx(rtTimeStamp, dwFlags));

  00059	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _rtTimeStamp$[ebp+4]
  00060	51		 push	 ecx
  00061	8b 55 f8	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp]
  00064	52		 push	 edx
  00065	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?StopEx@IDirectSoundBuffer@@QAGJ_JK@Z ; IDirectSoundBuffer::StopEx
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00074	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 1098 : 
; 1099 :     if(SUCCEEDED(hr) && fWait)

  00077	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0007b	7c 14		 jl	 SHORT $L36335
  0007d	83 7d 18 00	 cmp	 DWORD PTR _fWait$[ebp], 0
  00081	74 0e		 je	 SHORT $L36335

; 1100 :     {
; 1101 :         hr = WaitBuffer(pBuffer, FALSE);

  00083	6a 00		 push	 0
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 ?WaitBuffer@@YGJPAUIDirectSoundBuffer@@H@Z ; WaitBuffer
  0008e	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L36335:

; 1102 :     }
; 1103 : 
; 1104 :     if(SUCCEEDED(hr) && fReset)

  00091	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00095	7c 27		 jl	 SHORT $L36337
  00097	83 7d 14 00	 cmp	 DWORD PTR _fReset$[ebp], 0
  0009b	74 21		 je	 SHORT $L36337

; 1105 :     {
; 1106 :         DPF_TEST("Resetting cursor position");

  0009d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@PDAFDCJF@Resetting?5cursor?5position?$AA@
  000a2	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  000a7	83 c4 04	 add	 esp, 4

; 1107 :         
; 1108 :         hr = ValidateResult(pBuffer->SetCurrentPosition(0));

  000aa	6a 00		 push	 0
  000ac	8b 55 08	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  000af	52		 push	 edx
  000b0	e8 00 00 00 00	 call	 ?SetCurrentPosition@IDirectSoundBuffer@@QAGJK@Z ; IDirectSoundBuffer::SetCurrentPosition
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000bb	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L36337:

; 1109 :     }
; 1110 : 
; 1111 :     return hr;

  000be	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 1112 : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 14 00	 ret	 20			; 00000014H
?StopBuffer@@YGJPAUIDirectSoundBuffer@@KKHH@Z ENDP	; StopBuffer
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_StopEx@16:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?StopEx@IDirectSoundBuffer@@QAGJ_JK@Z
DSOUND	SEGMENT
_this$ = 8
_rtTimeStamp$ = 12
_dwFlags$ = 20
?StopEx@IDirectSoundBuffer@@QAGJ_JK@Z PROC NEAR		; IDirectSoundBuffer::StopEx, COMDAT

; 2077 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2078 :         return IDirectSoundBuffer_StopEx(this, rtTimeStamp, dwFlags);

  00003	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _rtTimeStamp$[ebp+4]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _IDirectSoundBuffer_StopEx@16

; 2079 :     }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
?StopEx@IDirectSoundBuffer@@QAGJ_JK@Z ENDP		; IDirectSoundBuffer::StopEx
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_SetCurrentPosition@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetCurrentPosition@IDirectSoundBuffer@@QAGJK@Z
DSOUND	SEGMENT
_this$ = 8
_dwPlayCursor$ = 12
?SetCurrentPosition@IDirectSoundBuffer@@QAGJK@Z PROC NEAR ; IDirectSoundBuffer::SetCurrentPosition, COMDAT

; 2102 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2103 :         return IDirectSoundBuffer_SetCurrentPosition(this, dwPlayCursor);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwPlayCursor$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetCurrentPosition@8

; 2104 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetCurrentPosition@IDirectSoundBuffer@@QAGJK@Z ENDP	; IDirectSoundBuffer::SetCurrentPosition
DSOUND	ENDS
PUBLIC	?CreateStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z ; CreateStreamFromFile
PUBLIC	?SetOutputBuffer@IDirectSoundStream@@QAGJPAUIDirectSoundBuffer@@@Z ; IDirectSoundStream::SetOutputBuffer
EXTRN	_DirectSoundCreateStream@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\util.cpp
;	COMDAT ?CreateStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z
DSOUND	SEGMENT
_dssd$ = -52
_dwDuration$ = -28
_hr$ = -24
_pWaveFile$ = -20
_pvAudioData$ = -16
_dwPacketCount$ = -12
_pStream$ = -8
_pwfxFormat$ = -4
_pszFile$ = 8
_dwFlags$ = 12
_pMixBins$ = 16
_pdwPacketSize$ = 20
_pfnCallback$ = 24
_pvContext$ = 28
_pOutputBuffer$ = 32
_ppStream$ = 36
_ppvAudioData$ = 40
_pdwAudioDataSize$ = 44
_pdwPacketCount$ = 48
?CreateStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z PROC NEAR ; CreateStreamFromFile, COMDAT

; 1158 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 1159 :     LPXFILEMEDIAOBJECT          pWaveFile       = NULL;

  00006	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pWaveFile$[ebp], 0

; 1160 :     LPDIRECTSOUNDSTREAM         pStream         = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0

; 1161 :     LPVOID                      pvAudioData     = NULL;

  00014	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pvAudioData$[ebp], 0

; 1162 :     LPCWAVEFORMATEX             pwfxFormat;
; 1163 :     DWORD                       dwDuration;
; 1164 :     DWORD                       dwPacketCount;
; 1165 :     DSSTREAMDESC                dssd;
; 1166 :     HRESULT                     hr;
; 1167 : 
; 1168 :     //
; 1169 :     // Open the wave file
; 1170 :     //
; 1171 : 
; 1172 :     hr = ValidateResult(OpenWaveFile(pszFile, &pwfxFormat, &pWaveFile));

  0001b	8d 45 ec	 lea	 eax, DWORD PTR _pWaveFile$[ebp]
  0001e	50		 push	 eax
  0001f	8d 4d fc	 lea	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 08	 mov	 edx, DWORD PTR _pszFile$[ebp]
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 ?OpenWaveFile@@YGJPBDPAPBUtWAVEFORMATEX@@PAPAUXFileMediaObject@@@Z ; OpenWaveFile
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00032	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax

; 1173 : 
; 1174 :     //
; 1175 :     // Block-align the packet size
; 1176 :     //
; 1177 : 
; 1178 :     if(SUCCEEDED(hr))

  00035	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00039	7c 29		 jl	 SHORT $L36361

; 1179 :     {
; 1180 :         *pdwPacketSize /= pwfxFormat->nBlockAlign;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  0003e	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  00042	8b 55 14	 mov	 edx, DWORD PTR _pdwPacketSize$[ebp]
  00045	8b 02		 mov	 eax, DWORD PTR [edx]
  00047	33 d2		 xor	 edx, edx
  00049	f7 f1		 div	 ecx
  0004b	8b 4d 14	 mov	 ecx, DWORD PTR _pdwPacketSize$[ebp]
  0004e	89 01		 mov	 DWORD PTR [ecx], eax

; 1181 :         *pdwPacketSize *= pwfxFormat->nBlockAlign;

  00050	8b 55 fc	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  00053	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  00057	8b 4d 14	 mov	 ecx, DWORD PTR _pdwPacketSize$[ebp]
  0005a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005c	0f af d0	 imul	 edx, eax
  0005f	8b 45 14	 mov	 eax, DWORD PTR _pdwPacketSize$[ebp]
  00062	89 10		 mov	 DWORD PTR [eax], edx
$L36361:

; 1182 :     }
; 1183 : 
; 1184 :     //
; 1185 :     // Get the file size
; 1186 :     //
; 1187 : 
; 1188 :     if(SUCCEEDED(hr))

  00064	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00068	7c 19		 jl	 SHORT $L36363

; 1189 :     {
; 1190 :         hr = ValidateResult(pWaveFile->GetLength(&dwDuration));

  0006a	8d 4d e4	 lea	 ecx, DWORD PTR _dwDuration$[ebp]
  0006d	51		 push	 ecx
  0006e	8b 55 ec	 mov	 edx, DWORD PTR _pWaveFile$[ebp]
  00071	8b 02		 mov	 eax, DWORD PTR [edx]
  00073	8b 4d ec	 mov	 ecx, DWORD PTR _pWaveFile$[ebp]
  00076	51		 push	 ecx
  00077	ff 50 20	 call	 DWORD PTR [eax+32]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00080	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax
$L36363:

; 1191 :     }
; 1192 : 
; 1193 :     //
; 1194 :     // Allocate a buffer for the wave data
; 1195 :     //
; 1196 : 
; 1197 :     if(SUCCEEDED(hr))

  00083	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00087	7c 18		 jl	 SHORT $L36365

; 1198 :     {
; 1199 :         hr = MALLOC(pvAudioData, BYTE, dwDuration);

  00089	8b 55 e4	 mov	 edx, DWORD PTR _dwDuration$[ebp]
  0008c	52		 push	 edx
  0008d	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  00092	89 45 f0	 mov	 DWORD PTR _pvAudioData$[ebp], eax
  00095	8b 45 f0	 mov	 eax, DWORD PTR _pvAudioData$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  0009e	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax
$L36365:

; 1200 :     }
; 1201 : 
; 1202 :     //
; 1203 :     // Read wave data
; 1204 :     //
; 1205 : 
; 1206 :     if(SUCCEEDED(hr))

  000a1	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a5	7c 1e		 jl	 SHORT $L36369

; 1207 :     {
; 1208 :         hr = ValidateResult(ReadXMO(pWaveFile, pvAudioData, dwDuration, &dwDuration));

  000a7	8d 4d e4	 lea	 ecx, DWORD PTR _dwDuration$[ebp]
  000aa	51		 push	 ecx
  000ab	8b 55 e4	 mov	 edx, DWORD PTR _dwDuration$[ebp]
  000ae	52		 push	 edx
  000af	8b 45 f0	 mov	 eax, DWORD PTR _pvAudioData$[ebp]
  000b2	50		 push	 eax
  000b3	8b 4d ec	 mov	 ecx, DWORD PTR _pWaveFile$[ebp]
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 ?ReadXMO@@YGJPAUXMediaObject@@PAXKPAK@Z ; ReadXMO
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000c2	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax
$L36369:

; 1209 :     }
; 1210 : 
; 1211 :     //
; 1212 :     // Calculate the number of packets required
; 1213 :     //
; 1214 : 
; 1215 :     if(SUCCEEDED(hr))

  000c5	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c9	7c 0d		 jl	 SHORT $L36371

; 1216 :     {
; 1217 :         dwPacketCount = dwDuration / *pdwPacketSize;

  000cb	8b 4d 14	 mov	 ecx, DWORD PTR _pdwPacketSize$[ebp]
  000ce	8b 45 e4	 mov	 eax, DWORD PTR _dwDuration$[ebp]
  000d1	33 d2		 xor	 edx, edx
  000d3	f7 31		 div	 DWORD PTR [ecx]
  000d5	89 45 f4	 mov	 DWORD PTR _dwPacketCount$[ebp], eax
$L36371:

; 1218 :     }
; 1219 : 
; 1220 :     if(SUCCEEDED(hr) && pdwPacketCount)

  000d8	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000dc	7c 2a		 jl	 SHORT $L36373
  000de	83 7d 30 00	 cmp	 DWORD PTR _pdwPacketCount$[ebp], 0
  000e2	74 24		 je	 SHORT $L36373

; 1221 :     {
; 1222 :         if(!*pdwPacketCount || (*pdwPacketCount > dwPacketCount))

  000e4	8b 55 30	 mov	 edx, DWORD PTR _pdwPacketCount$[ebp]
  000e7	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000ea	74 0a		 je	 SHORT $L36375
  000ec	8b 45 30	 mov	 eax, DWORD PTR _pdwPacketCount$[ebp]
  000ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f1	3b 4d f4	 cmp	 ecx, DWORD PTR _dwPacketCount$[ebp]
  000f4	76 0a		 jbe	 SHORT $L36374
$L36375:

; 1223 :         {
; 1224 :             *pdwPacketCount = dwPacketCount;

  000f6	8b 55 30	 mov	 edx, DWORD PTR _pdwPacketCount$[ebp]
  000f9	8b 45 f4	 mov	 eax, DWORD PTR _dwPacketCount$[ebp]
  000fc	89 02		 mov	 DWORD PTR [edx], eax

; 1225 :         }
; 1226 :         else

  000fe	eb 08		 jmp	 SHORT $L36373
$L36374:

; 1227 :         {
; 1228 :             dwPacketCount = *pdwPacketCount;

  00100	8b 4d 30	 mov	 ecx, DWORD PTR _pdwPacketCount$[ebp]
  00103	8b 11		 mov	 edx, DWORD PTR [ecx]
  00105	89 55 f4	 mov	 DWORD PTR _dwPacketCount$[ebp], edx
$L36373:

; 1229 :         }
; 1230 :     }
; 1231 : 
; 1232 :     //
; 1233 :     // Create the stream
; 1234 :     //
; 1235 : 
; 1236 :     if(SUCCEEDED(hr))

  00108	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0010c	7c 4a		 jl	 SHORT $L36378

; 1237 :     {
; 1238 :         ZeroMemory(&dssd, sizeof(dssd));

  0010e	6a 18		 push	 24			; 00000018H
  00110	6a 00		 push	 0
  00112	8d 45 cc	 lea	 eax, DWORD PTR _dssd$[ebp]
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _memset
  0011b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1239 : 
; 1240 :         dssd.dwFlags = dwFlags;

  0011e	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00121	89 4d cc	 mov	 DWORD PTR _dssd$[ebp], ecx

; 1241 :         dssd.dwMaxAttachedPackets = dwPacketCount;

  00124	8b 55 f4	 mov	 edx, DWORD PTR _dwPacketCount$[ebp]
  00127	89 55 d0	 mov	 DWORD PTR _dssd$[ebp+4], edx

; 1242 :         dssd.lpwfxFormat = (LPWAVEFORMATEX)pwfxFormat;

  0012a	8b 45 fc	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  0012d	89 45 d4	 mov	 DWORD PTR _dssd$[ebp+8], eax

; 1243 :         dssd.lpfnCallback = pfnCallback;

  00130	8b 4d 18	 mov	 ecx, DWORD PTR _pfnCallback$[ebp]
  00133	89 4d d8	 mov	 DWORD PTR _dssd$[ebp+12], ecx

; 1244 :         dssd.lpvContext = pvContext;

  00136	8b 55 1c	 mov	 edx, DWORD PTR _pvContext$[ebp]
  00139	89 55 dc	 mov	 DWORD PTR _dssd$[ebp+16], edx

; 1245 :         dssd.lpMixBins = pMixBins;

  0013c	8b 45 10	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  0013f	89 45 e0	 mov	 DWORD PTR _dssd$[ebp+20], eax

; 1246 : 
; 1247 :         hr = ValidateResult(DirectSoundCreateStream(&dssd, &pStream));

  00142	8d 4d f8	 lea	 ecx, DWORD PTR _pStream$[ebp]
  00145	51		 push	 ecx
  00146	8d 55 cc	 lea	 edx, DWORD PTR _dssd$[ebp]
  00149	52		 push	 edx
  0014a	e8 00 00 00 00	 call	 _DirectSoundCreateStream@8
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00155	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax
$L36378:

; 1248 :     }
; 1249 : 
; 1250 :     //
; 1251 :     // Set the output buffer
; 1252 :     //
; 1253 : 
; 1254 :     if(SUCCEEDED(hr) && pOutputBuffer)

  00158	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0015c	7c 1c		 jl	 SHORT $L36381
  0015e	83 7d 20 00	 cmp	 DWORD PTR _pOutputBuffer$[ebp], 0
  00162	74 16		 je	 SHORT $L36381

; 1255 :     {
; 1256 :         hr = ValidateResult(pStream->SetOutputBuffer(pOutputBuffer));

  00164	8b 45 20	 mov	 eax, DWORD PTR _pOutputBuffer$[ebp]
  00167	50		 push	 eax
  00168	8b 4d f8	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0016b	51		 push	 ecx
  0016c	e8 00 00 00 00	 call	 ?SetOutputBuffer@IDirectSoundStream@@QAGJPAUIDirectSoundBuffer@@@Z ; IDirectSoundStream::SetOutputBuffer
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00177	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax
$L36381:

; 1257 :     }
; 1258 : 
; 1259 :     //
; 1260 :     // Success
; 1261 :     //
; 1262 : 
; 1263 :     if(SUCCEEDED(hr))

  0017a	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0017e	7c 1a		 jl	 SHORT $L36383

; 1264 :     {
; 1265 :         *ppStream = pStream;

  00180	8b 55 24	 mov	 edx, DWORD PTR _ppStream$[ebp]
  00183	8b 45 f8	 mov	 eax, DWORD PTR _pStream$[ebp]
  00186	89 02		 mov	 DWORD PTR [edx], eax

; 1266 :         *ppvAudioData = pvAudioData;

  00188	8b 4d 28	 mov	 ecx, DWORD PTR _ppvAudioData$[ebp]
  0018b	8b 55 f0	 mov	 edx, DWORD PTR _pvAudioData$[ebp]
  0018e	89 11		 mov	 DWORD PTR [ecx], edx

; 1267 :         *pdwAudioDataSize = dwDuration;

  00190	8b 45 2c	 mov	 eax, DWORD PTR _pdwAudioDataSize$[ebp]
  00193	8b 4d e4	 mov	 ecx, DWORD PTR _dwDuration$[ebp]
  00196	89 08		 mov	 DWORD PTR [eax], ecx

; 1268 :     }
; 1269 :     else

  00198	eb 22		 jmp	 SHORT $L36384
$L36383:

; 1270 :     {
; 1271 :         RELEASE(pStream);

  0019a	83 7d f8 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  0019e	74 13		 je	 SHORT $L36385
  001a0	8b 55 f8	 mov	 edx, DWORD PTR _pStream$[ebp]
  001a3	8b 02		 mov	 eax, DWORD PTR [edx]
  001a5	8b 4d f8	 mov	 ecx, DWORD PTR _pStream$[ebp]
  001a8	51		 push	 ecx
  001a9	ff 50 04	 call	 DWORD PTR [eax+4]
  001ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0
$L36385:

; 1272 :         FREE(pvAudioData);

  001b3	8d 55 f0	 lea	 edx, DWORD PTR _pvAudioData$[ebp]
  001b6	52		 push	 edx
  001b7	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE
$L36384:

; 1273 :     }
; 1274 : 
; 1275 :     RELEASE(pWaveFile);

  001bc	83 7d ec 00	 cmp	 DWORD PTR _pWaveFile$[ebp], 0
  001c0	74 13		 je	 SHORT $L36387
  001c2	8b 45 ec	 mov	 eax, DWORD PTR _pWaveFile$[ebp]
  001c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c7	8b 55 ec	 mov	 edx, DWORD PTR _pWaveFile$[ebp]
  001ca	52		 push	 edx
  001cb	ff 51 04	 call	 DWORD PTR [ecx+4]
  001ce	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pWaveFile$[ebp], 0
$L36387:

; 1276 : 
; 1277 :     return hr;

  001d5	8b 45 e8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1278 : }

  001d8	8b e5		 mov	 esp, ebp
  001da	5d		 pop	 ebp
  001db	c2 2c 00	 ret	 44			; 0000002cH
?CreateStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z ENDP ; CreateStreamFromFile
DSOUND	ENDS
EXTRN	_IDirectSoundStream_SetOutputBuffer@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetOutputBuffer@IDirectSoundStream@@QAGJPAUIDirectSoundBuffer@@@Z
DSOUND	SEGMENT
_this$ = 8
_pOutputBuffer$ = 12
?SetOutputBuffer@IDirectSoundStream@@QAGJPAUIDirectSoundBuffer@@@Z PROC NEAR ; IDirectSoundStream::SetOutputBuffer, COMDAT

; 2282 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2283 :         return IDirectSoundStream_SetOutputBuffer(this, pOutputBuffer);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pOutputBuffer$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_SetOutputBuffer@8

; 2284 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetOutputBuffer@IDirectSoundStream@@QAGJPAUIDirectSoundBuffer@@@Z ENDP ; IDirectSoundStream::SetOutputBuffer
DSOUND	ENDS
PUBLIC	?CreateStdStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z ; CreateStdStream
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\test\util.cpp
;	COMDAT ?CreateStdStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z
DSOUND	SEGMENT
_dwFlags$ = 8
_pwfxFormat$ = 12
_pMixBins$ = 16
_pdwPacketSize$ = 20
_pfnCallback$ = 24
_pvContext$ = 28
_pOutputBuffer$ = 32
_ppStream$ = 36
_ppvAudioData$ = 40
_pdwAudioDataSize$ = 44
_pdwPacketCount$ = 48
?CreateStdStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z PROC NEAR ; CreateStdStream, COMDAT

; 1324 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1325 :     return ValidateResult(CreateStreamFromFile(GetStdWaveFile(pwfxFormat), dwFlags, pMixBins, pdwPacketSize, pfnCallback, pvContext, pOutputBuffer, ppStream, ppvAudioData, pdwAudioDataSize, pdwPacketCount));

  00003	8b 45 30	 mov	 eax, DWORD PTR _pdwPacketCount$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _pdwAudioDataSize$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _ppvAudioData$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _ppStream$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _pOutputBuffer$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _pvContext$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _pfnCallback$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _pdwPacketSize$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _pMixBins$[ebp]
  00026	52		 push	 edx
  00027	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z ; GetStdWaveFile
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?CreateStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z ; CreateStreamFromFile
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult

; 1326 : }

  00040	5d		 pop	 ebp
  00041	c2 2c 00	 ret	 44			; 0000002cH
?CreateStdStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z ENDP ; CreateStdStream
DSOUND	ENDS
PUBLIC	?CreateQueuedStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z ; CreateQueuedStreamFromFile
PUBLIC	?PauseStream@@YGJPAUIDirectSoundStream@@H@Z	; PauseStream
; Function compile flags: /Odt
;	COMDAT ?CreateQueuedStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z
DSOUND	SEGMENT
_xmp$ = -48
_hr$ = -24
_pvAudioData$ = -20
_dwPacketCount$ = -16
_i$ = -12
_dwAudioDataSize$ = -8
_pStream$ = -4
_pszFile$ = 8
_dwFlags$ = 12
_pMixBins$ = 16
_pdwPacketSize$ = 20
_hCompletionEvent$ = 24
_pOutputBuffer$ = 28
_ppStream$ = 32
_ppvAudioData$ = 36
?CreateQueuedStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z PROC NEAR ; CreateQueuedStreamFromFile, COMDAT

; 1368 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 1369 :     LPDIRECTSOUNDSTREAM     pStream         = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0

; 1370 :     LPVOID                  pvAudioData     = NULL;

  0000d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pvAudioData$[ebp], 0

; 1371 :     DWORD                   dwAudioDataSize = 0;

  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwAudioDataSize$[ebp], 0

; 1372 :     DWORD                   dwPacketCount   = 0;

  0001b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwPacketCount$[ebp], 0

; 1373 :     XMEDIAPACKET            xmp;
; 1374 :     HRESULT                 hr;
; 1375 :     DWORD                   i;
; 1376 : 
; 1377 :     //
; 1378 :     // Create the stream
; 1379 :     //
; 1380 : 
; 1381 :     hr = ValidateResult(CreateStreamFromFile(pszFile, dwFlags, pMixBins, pdwPacketSize, NULL, NULL, pOutputBuffer, &pStream, &pvAudioData, &dwAudioDataSize, &dwPacketCount));

  00022	8d 45 f0	 lea	 eax, DWORD PTR _dwPacketCount$[ebp]
  00025	50		 push	 eax
  00026	8d 4d f8	 lea	 ecx, DWORD PTR _dwAudioDataSize$[ebp]
  00029	51		 push	 ecx
  0002a	8d 55 ec	 lea	 edx, DWORD PTR _pvAudioData$[ebp]
  0002d	52		 push	 edx
  0002e	8d 45 fc	 lea	 eax, DWORD PTR _pStream$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 1c	 mov	 ecx, DWORD PTR _pOutputBuffer$[ebp]
  00035	51		 push	 ecx
  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	8b 55 14	 mov	 edx, DWORD PTR _pdwPacketSize$[ebp]
  0003d	52		 push	 edx
  0003e	8b 45 10	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00041	50		 push	 eax
  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00045	51		 push	 ecx
  00046	8b 55 08	 mov	 edx, DWORD PTR _pszFile$[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ?CreateStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKP6GXPAX3K@Z3PAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX22@Z ; CreateStreamFromFile
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00055	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax

; 1382 : 
; 1383 :     //
; 1384 :     // Pause the stream
; 1385 :     //
; 1386 : 
; 1387 :     if(SUCCEEDED(hr))

  00058	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005c	7c 14		 jl	 SHORT $L36419

; 1388 :     {
; 1389 :         hr = ValidateResult(PauseStream(pStream));

  0005e	6a 01		 push	 1
  00060	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?PauseStream@@YGJPAUIDirectSoundStream@@H@Z ; PauseStream
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0006f	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax
$L36419:

; 1390 :     }
; 1391 : 
; 1392 :     //
; 1393 :     // Submit all packets
; 1394 :     //
; 1395 : 
; 1396 :     if(SUCCEEDED(hr))

  00072	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00076	7c 6d		 jl	 SHORT $L36421

; 1397 :     {
; 1398 :         ZeroMemory(&xmp, sizeof(xmp));

  00078	6a 18		 push	 24			; 00000018H
  0007a	6a 00		 push	 0
  0007c	8d 4d d0	 lea	 ecx, DWORD PTR _xmp$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 _memset
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1399 : 
; 1400 :         xmp.pvBuffer = pvAudioData;

  00088	8b 55 ec	 mov	 edx, DWORD PTR _pvAudioData$[ebp]
  0008b	89 55 d0	 mov	 DWORD PTR _xmp$[ebp], edx

; 1401 :         xmp.dwMaxSize = *pdwPacketSize;

  0008e	8b 45 14	 mov	 eax, DWORD PTR _pdwPacketSize$[ebp]
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	89 4d d4	 mov	 DWORD PTR _xmp$[ebp+4], ecx

; 1402 :         
; 1403 :         for(i = 0; SUCCEEDED(hr) && (i < dwPacketCount - 1); i++)

  00096	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0009d	eb 09		 jmp	 SHORT $L36423
$L36424:
  0009f	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  000a2	83 c2 01	 add	 edx, 1
  000a5	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$L36423:
  000a8	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ac	7c 37		 jl	 SHORT $L36421
  000ae	8b 45 f0	 mov	 eax, DWORD PTR _dwPacketCount$[ebp]
  000b1	83 e8 01	 sub	 eax, 1
  000b4	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  000b7	73 2c		 jae	 SHORT $L36421

; 1404 :         {
; 1405 :             hr = ValidateResult(pStream->Process(&xmp, NULL));

  000b9	6a 00		 push	 0
  000bb	8d 4d d0	 lea	 ecx, DWORD PTR _xmp$[ebp]
  000be	51		 push	 ecx
  000bf	8b 55 fc	 mov	 edx, DWORD PTR _pStream$[ebp]
  000c2	8b 02		 mov	 eax, DWORD PTR [edx]
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _pStream$[ebp]
  000c7	51		 push	 ecx
  000c8	ff 50 10	 call	 DWORD PTR [eax+16]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000d1	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax

; 1406 : 
; 1407 :             if(SUCCEEDED(hr))

  000d4	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000d8	7c 09		 jl	 SHORT $L36427

; 1408 :             {
; 1409 :                 xmp.pvBuffer = (LPBYTE)xmp.pvBuffer + xmp.dwMaxSize;

  000da	8b 55 d0	 mov	 edx, DWORD PTR _xmp$[ebp]
  000dd	03 55 d4	 add	 edx, DWORD PTR _xmp$[ebp+4]
  000e0	89 55 d0	 mov	 DWORD PTR _xmp$[ebp], edx
$L36427:

; 1410 :             }
; 1411 :         }

  000e3	eb ba		 jmp	 SHORT $L36424
$L36421:

; 1412 :     }
; 1413 : 
; 1414 :     if(SUCCEEDED(hr))

  000e5	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000e9	7c 37		 jl	 SHORT $L36430

; 1415 :     {
; 1416 :         xmp.dwMaxSize = dwAudioDataSize - (*pdwPacketSize * (dwPacketCount - 1));

  000eb	8b 45 f0	 mov	 eax, DWORD PTR _dwPacketCount$[ebp]
  000ee	83 e8 01	 sub	 eax, 1
  000f1	8b 4d 14	 mov	 ecx, DWORD PTR _pdwPacketSize$[ebp]
  000f4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f6	0f af d0	 imul	 edx, eax
  000f9	8b 45 f8	 mov	 eax, DWORD PTR _dwAudioDataSize$[ebp]
  000fc	2b c2		 sub	 eax, edx
  000fe	89 45 d4	 mov	 DWORD PTR _xmp$[ebp+4], eax

; 1417 :         xmp.hCompletionEvent = hCompletionEvent;

  00101	8b 4d 18	 mov	 ecx, DWORD PTR _hCompletionEvent$[ebp]
  00104	89 4d e0	 mov	 DWORD PTR _xmp$[ebp+16], ecx

; 1418 : 
; 1419 :         hr = ValidateResult(pStream->Process(&xmp, NULL));

  00107	6a 00		 push	 0
  00109	8d 55 d0	 lea	 edx, DWORD PTR _xmp$[ebp]
  0010c	52		 push	 edx
  0010d	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  00110	8b 08		 mov	 ecx, DWORD PTR [eax]
  00112	8b 55 fc	 mov	 edx, DWORD PTR _pStream$[ebp]
  00115	52		 push	 edx
  00116	ff 51 10	 call	 DWORD PTR [ecx+16]
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0011f	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax
$L36430:

; 1420 :     }
; 1421 : 
; 1422 :     if(SUCCEEDED(hr))

  00122	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00126	7c 15		 jl	 SHORT $L36432

; 1423 :     {
; 1424 :         hr = ValidateResult(pStream->Discontinuity());

  00128	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  0012b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012d	8b 55 fc	 mov	 edx, DWORD PTR _pStream$[ebp]
  00130	52		 push	 edx
  00131	ff 51 14	 call	 DWORD PTR [ecx+20]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0013a	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax
$L36432:

; 1425 :     }
; 1426 : 
; 1427 :     //
; 1428 :     // Success
; 1429 :     //
; 1430 : 
; 1431 :     if(SUCCEEDED(hr))

  0013d	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00141	7c 12		 jl	 SHORT $L36434

; 1432 :     {
; 1433 :         *ppStream = pStream;

  00143	8b 45 20	 mov	 eax, DWORD PTR _ppStream$[ebp]
  00146	8b 4d fc	 mov	 ecx, DWORD PTR _pStream$[ebp]
  00149	89 08		 mov	 DWORD PTR [eax], ecx

; 1434 :         *ppvAudioData = pvAudioData;

  0014b	8b 55 24	 mov	 edx, DWORD PTR _ppvAudioData$[ebp]
  0014e	8b 45 ec	 mov	 eax, DWORD PTR _pvAudioData$[ebp]
  00151	89 02		 mov	 DWORD PTR [edx], eax

; 1435 :     }
; 1436 :     else

  00153	eb 22		 jmp	 SHORT $L36435
$L36434:

; 1437 :     {
; 1438 :         RELEASE(pStream);

  00155	83 7d fc 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  00159	74 13		 je	 SHORT $L36436
  0015b	8b 4d fc	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0015e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00160	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  00163	50		 push	 eax
  00164	ff 52 04	 call	 DWORD PTR [edx+4]
  00167	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0
$L36436:

; 1439 :         FREE(pvAudioData);

  0016e	8d 4d ec	 lea	 ecx, DWORD PTR _pvAudioData$[ebp]
  00171	51		 push	 ecx
  00172	e8 00 00 00 00	 call	 ?__FREE@@YGXPAPAX@Z	; __FREE
$L36435:

; 1440 :     }
; 1441 : 
; 1442 :     return hr;

  00177	8b 45 e8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1443 : }

  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 20 00	 ret	 32			; 00000020H
?CreateQueuedStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z ENDP ; CreateQueuedStreamFromFile
DSOUND	ENDS
PUBLIC	?CreateStdQueuedStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z ; CreateStdQueuedStream
; Function compile flags: /Odt
;	COMDAT ?CreateStdQueuedStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z
DSOUND	SEGMENT
_dwFlags$ = 8
_pwfxFormat$ = 12
_pMixBins$ = 16
_pdwPacketSize$ = 20
_hCompletionEvent$ = 24
_pOutputBuffer$ = 28
_ppStream$ = 32
_ppvAudioData$ = 36
?CreateStdQueuedStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z PROC NEAR ; CreateStdQueuedStream, COMDAT

; 1484 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1485 :     return CreateQueuedStreamFromFile(GetStdWaveFile(pwfxFormat), dwFlags, pMixBins, pdwPacketSize, hCompletionEvent, pOutputBuffer, ppStream, ppvAudioData);

  00003	8b 45 24	 mov	 eax, DWORD PTR _ppvAudioData$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 20	 mov	 ecx, DWORD PTR _ppStream$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 1c	 mov	 edx, DWORD PTR _pOutputBuffer$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 18	 mov	 eax, DWORD PTR _hCompletionEvent$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 14	 mov	 ecx, DWORD PTR _pdwPacketSize$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 10	 mov	 edx, DWORD PTR _pMixBins$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ?GetStdWaveFile@@YGPBDPBUtWAVEFORMATEX@@@Z ; GetStdWaveFile
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?CreateQueuedStreamFromFile@@YGJPBDKPBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z ; CreateQueuedStreamFromFile

; 1486 : }

  0002e	5d		 pop	 ebp
  0002f	c2 20 00	 ret	 32			; 00000020H
?CreateStdQueuedStream@@YGJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@PAKPAXPAUIDirectSoundBuffer@@PAPAUIDirectSoundStream@@PAPAX@Z ENDP ; CreateStdQueuedStream
DSOUND	ENDS
PUBLIC	?ResubmitPacketCallback@@YGXPAX0K@Z		; ResubmitPacketCallback
; Function compile flags: /Odt
;	COMDAT ?ResubmitPacketCallback@@YGXPAX0K@Z
DSOUND	SEGMENT
_pPacket$ = -8
_ppStream$ = -4
_pvStreamContext$ = 8
_pvPacketContext$ = 12
_dwStatus$ = 16
?ResubmitPacketCallback@@YGXPAX0K@Z PROC NEAR		; ResubmitPacketCallback, COMDAT

; 1517 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1518 :     LPXMEDIAOBJECT *        ppStream    = (LPXMEDIAOBJECT *)pvStreamContext;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pvStreamContext$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _ppStream$[ebp], eax

; 1519 :     LPXMEDIAPACKET          pPacket     = (LPXMEDIAPACKET)pvPacketContext;

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pvPacketContext$[ebp]
  0000f	89 4d f8	 mov	 DWORD PTR _pPacket$[ebp], ecx

; 1520 :     
; 1521 :     if(XMEDIAPACKET_STATUS_SUCCESS == dwStatus)

  00012	83 7d 10 00	 cmp	 DWORD PTR _dwStatus$[ebp], 0
  00016	75 16		 jne	 SHORT $L36452

; 1522 :     {
; 1523 :         (*ppStream)->Process(pPacket, NULL);

  00018	6a 00		 push	 0
  0001a	8b 55 f8	 mov	 edx, DWORD PTR _pPacket$[ebp]
  0001d	52		 push	 edx
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _ppStream$[ebp]
  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	8b 55 fc	 mov	 edx, DWORD PTR _ppStream$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0002a	50		 push	 eax
  0002b	ff 51 10	 call	 DWORD PTR [ecx+16]
$L36452:

; 1524 :     }
; 1525 : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
?ResubmitPacketCallback@@YGXPAX0K@Z ENDP		; ResubmitPacketCallback
DSOUND	ENDS
PUBLIC	?GenerateTone@@YGXPAXKKKKK@Z			; GenerateTone
PUBLIC	?GenerateTone8@@YGXPAXKKKK@Z			; GenerateTone8
PUBLIC	?GenerateTone16@@YGXPAXKKKK@Z			; GenerateTone16
PUBLIC	??_C@_0BK@JHJCEBHO@Unexpected?5bit?5resolution?$AA@ ; `string'
;	COMDAT ??_C@_0BK@JHJCEBHO@Unexpected?5bit?5resolution?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@JHJCEBHO@Unexpected?5bit?5resolution?$AA@ DB 'Unexpected bit re'
	DB	'solution', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GenerateTone@@YGXPAXKKKKK@Z
DSOUND	SEGMENT
tv64 = -4
_pvBuffer$ = 8
_dwBufferBytes$ = 12
_dwPlaybackFrequency$ = 16
_dwBitsPerSample$ = 20
_dwChannelCount$ = 24
_dwToneFrequency$ = 28
?GenerateTone@@YGXPAXKKKKK@Z PROC NEAR			; GenerateTone, COMDAT

; 1561 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1562 :     switch(dwBitsPerSample)
; 1563 :     {

  00004	8b 45 14	 mov	 eax, DWORD PTR _dwBitsPerSample$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000a	83 7d fc 08	 cmp	 DWORD PTR tv64[ebp], 8
  0000e	74 08		 je	 SHORT $L36471
  00010	83 7d fc 10	 cmp	 DWORD PTR tv64[ebp], 16	; 00000010H
  00014	74 1d		 je	 SHORT $L36472
  00016	eb 36		 jmp	 SHORT $L36473
$L36471:

; 1564 :         case 8:
; 1565 :             GenerateTone8(pvBuffer, dwBufferBytes, dwPlaybackFrequency, dwChannelCount, dwToneFrequency);

  00018	8b 4d 1c	 mov	 ecx, DWORD PTR _dwToneFrequency$[ebp]
  0001b	51		 push	 ecx
  0001c	8b 55 18	 mov	 edx, DWORD PTR _dwChannelCount$[ebp]
  0001f	52		 push	 edx
  00020	8b 45 10	 mov	 eax, DWORD PTR _dwPlaybackFrequency$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _dwBufferBytes$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 08	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ?GenerateTone8@@YGXPAXKKKK@Z ; GenerateTone8

; 1566 :             break;

  00031	eb 34		 jmp	 SHORT $L36466
$L36472:

; 1567 : 
; 1568 :         case 16:
; 1569 :             GenerateTone16(pvBuffer, dwBufferBytes, dwPlaybackFrequency, dwChannelCount, dwToneFrequency);

  00033	8b 45 1c	 mov	 eax, DWORD PTR _dwToneFrequency$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 18	 mov	 ecx, DWORD PTR _dwChannelCount$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 10	 mov	 edx, DWORD PTR _dwPlaybackFrequency$[ebp]
  0003e	52		 push	 edx
  0003f	8b 45 0c	 mov	 eax, DWORD PTR _dwBufferBytes$[ebp]
  00042	50		 push	 eax
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ?GenerateTone16@@YGXPAXKKKK@Z ; GenerateTone16

; 1570 :             break;

  0004c	eb 19		 jmp	 SHORT $L36466
$L36473:

; 1571 : 
; 1572 :         default:
; 1573 :             ASSERTMSG("Unexpected bit resolution");

  0004e	68 25 06 00 00	 push	 1573			; 00000625H
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JHJCEBHO@Unexpected?5bit?5resolution?$AA@
  0005d	6a 01		 push	 1
  0005f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00064	83 c4 10	 add	 esp, 16			; 00000010H
$L36466:

; 1574 :             break;
; 1575 :     }            
; 1576 : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 18 00	 ret	 24			; 00000018H
?GenerateTone@@YGXPAXKKKKK@Z ENDP			; GenerateTone
DSOUND	ENDS
PUBLIC	__real@401921fb60000000
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
EXTRN	_sin:NEAR
;	COMDAT __real@401921fb60000000
CONST	SEGMENT
__real@401921fb60000000 DQ 0401921fb60000000r	; 6.28319
CONST	ENDS
;	COMDAT ?dbScale@?1??GenerateTone8@@YGXPAXKKKK@Z@4NB
DSOUND_RD	SEGMENT
?dbScale@?1??GenerateTone8@@YGXPAXKKKK@Z@4NB DQ 0406fe00000000000r ; 255 ; `GenerateTone8'::`2'::dbScale
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GenerateTone8@@YGXPAXKKKK@Z
DSOUND	SEGMENT
tv130 = -60
tv89 = -52
tv85 = -44
_bSample$ = -33
_z$ = -32
_pbBuffer$ = -28
_dbFactor$ = -24
_i$ = -12
_dbPhase$ = -8
_pvBuffer$ = 8
_dwBufferBytes$ = 12
_dwPlaybackFrequency$ = 16
_dwChannelCount$ = 20
_dwToneFrequency$ = 24
?GenerateTone8@@YGXPAXKKKK@Z PROC NEAR			; GenerateTone8, COMDAT

; 1610 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH

; 1611 :     static const double         dbScale     = 255.0;
; 1612 :     static const unsigned char  bHalfScale  = 128;
; 1613 :     const double                dbPhase     = 2.0 * D3DX_PI / (double)dwPlaybackFrequency;

  00006	8b 45 10	 mov	 eax, DWORD PTR _dwPlaybackFrequency$[ebp]
  00009	89 45 d4	 mov	 DWORD PTR tv85[ebp], eax
  0000c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv85[ebp+4], 0
  00013	df 6d d4	 fild	 QWORD PTR tv85[ebp]
  00016	dc 3d 00 00 00
	00		 fdivr	 QWORD PTR __real@401921fb60000000
  0001c	dd 5d f8	 fstp	 QWORD PTR _dbPhase$[ebp]

; 1614 :     const double                dbFactor    = dbPhase * (double)dwToneFrequency;

  0001f	8b 4d 18	 mov	 ecx, DWORD PTR _dwToneFrequency$[ebp]
  00022	89 4d cc	 mov	 DWORD PTR tv89[ebp], ecx
  00025	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv89[ebp+4], 0
  0002c	df 6d cc	 fild	 QWORD PTR tv89[ebp]
  0002f	dc 4d f8	 fmul	 QWORD PTR _dbPhase$[ebp]
  00032	dd 5d e8	 fstp	 QWORD PTR _dbFactor$[ebp]

; 1615 :     unsigned char *             pbBuffer    = (unsigned char *)pvBuffer;

  00035	8b 55 08	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  00038	89 55 e4	 mov	 DWORD PTR _pbBuffer$[ebp], edx

; 1616 :     unsigned char               bSample;
; 1617 :     DWORD                       i, z;
; 1618 : 
; 1619 :     for(i = 0; i < dwBufferBytes / dwChannelCount; i++)

  0003b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00042	eb 09		 jmp	 SHORT $L36496
$L36497:
  00044	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$L36496:
  0004d	8b 45 0c	 mov	 eax, DWORD PTR _dwBufferBytes$[ebp]
  00050	33 d2		 xor	 edx, edx
  00052	f7 75 14	 div	 DWORD PTR _dwChannelCount$[ebp]
  00055	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  00058	73 67		 jae	 SHORT $L36481

; 1620 :     {
; 1621 :         bSample = (unsigned char)(sin((double)i * dbFactor) * dbScale) + bHalfScale;

  0005a	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0005d	89 4d c4	 mov	 DWORD PTR tv130[ebp], ecx
  00060	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv130[ebp+4], 0
  00067	df 6d c4	 fild	 QWORD PTR tv130[ebp]
  0006a	dc 4d e8	 fmul	 QWORD PTR _dbFactor$[ebp]
  0006d	83 ec 08	 sub	 esp, 8
  00070	dd 1c 24	 fstp	 QWORD PTR [esp]
  00073	e8 00 00 00 00	 call	 _sin
  00078	83 c4 08	 add	 esp, 8
  0007b	dc 0d 00 00 00
	00		 fmul	 QWORD PTR ?dbScale@?1??GenerateTone8@@YGXPAXKKKK@Z@4NB
  00081	e8 00 00 00 00	 call	 __ftol2
  00086	0f b6 d0	 movzx	 edx, al
  00089	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  0008f	88 55 df	 mov	 BYTE PTR _bSample$[ebp], dl

; 1622 : 
; 1623 :         for(z = 0; z < dwChannelCount; z++)

  00092	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  00099	eb 09		 jmp	 SHORT $L36501
$L36502:
  0009b	8b 45 e0	 mov	 eax, DWORD PTR _z$[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 e0	 mov	 DWORD PTR _z$[ebp], eax
$L36501:
  000a4	8b 4d e0	 mov	 ecx, DWORD PTR _z$[ebp]
  000a7	3b 4d 14	 cmp	 ecx, DWORD PTR _dwChannelCount$[ebp]
  000aa	73 13		 jae	 SHORT $L36503

; 1624 :         {
; 1625 :             *pbBuffer++ = bSample;

  000ac	8b 55 e4	 mov	 edx, DWORD PTR _pbBuffer$[ebp]
  000af	8a 45 df	 mov	 al, BYTE PTR _bSample$[ebp]
  000b2	88 02		 mov	 BYTE PTR [edx], al
  000b4	8b 4d e4	 mov	 ecx, DWORD PTR _pbBuffer$[ebp]
  000b7	83 c1 01	 add	 ecx, 1
  000ba	89 4d e4	 mov	 DWORD PTR _pbBuffer$[ebp], ecx

; 1626 :         }

  000bd	eb dc		 jmp	 SHORT $L36502
$L36503:

; 1627 :     }

  000bf	eb 83		 jmp	 SHORT $L36497
$L36481:

; 1628 : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 14 00	 ret	 20			; 00000014H
?GenerateTone8@@YGXPAXKKKK@Z ENDP			; GenerateTone8
DSOUND	ENDS
;	COMDAT ?dbScale@?1??GenerateTone16@@YGXPAXKKKK@Z@4NB
DSOUND_RD	SEGMENT
?dbScale@?1??GenerateTone16@@YGXPAXKKKK@Z@4NB DQ 040dfffc000000000r ; 32767 ; `GenerateTone16'::`2'::dbScale
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GenerateTone16@@YGXPAXKKKK@Z
DSOUND	SEGMENT
tv129 = -56
tv87 = -48
tv83 = -40
_pnBuffer$ = -32
_z$ = -28
_dbFactor$ = -24
_nSample$ = -16
_i$ = -12
_dbPhase$ = -8
_pvBuffer$ = 8
_dwBufferBytes$ = 12
_dwPlaybackFrequency$ = 16
_dwChannelCount$ = 20
_dwToneFrequency$ = 24
?GenerateTone16@@YGXPAXKKKK@Z PROC NEAR			; GenerateTone16, COMDAT

; 1662 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H

; 1663 :     static const double     dbScale     = 32767.0;
; 1664 :     const double            dbPhase     = 2.0 * D3DX_PI / (double)dwPlaybackFrequency;

  00006	8b 45 10	 mov	 eax, DWORD PTR _dwPlaybackFrequency$[ebp]
  00009	89 45 d8	 mov	 DWORD PTR tv83[ebp], eax
  0000c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv83[ebp+4], 0
  00013	df 6d d8	 fild	 QWORD PTR tv83[ebp]
  00016	dc 3d 00 00 00
	00		 fdivr	 QWORD PTR __real@401921fb60000000
  0001c	dd 5d f8	 fstp	 QWORD PTR _dbPhase$[ebp]

; 1665 :     const double            dbFactor    = dbPhase * (double)dwToneFrequency;

  0001f	8b 4d 18	 mov	 ecx, DWORD PTR _dwToneFrequency$[ebp]
  00022	89 4d d0	 mov	 DWORD PTR tv87[ebp], ecx
  00025	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv87[ebp+4], 0
  0002c	df 6d d0	 fild	 QWORD PTR tv87[ebp]
  0002f	dc 4d f8	 fmul	 QWORD PTR _dbPhase$[ebp]
  00032	dd 5d e8	 fstp	 QWORD PTR _dbFactor$[ebp]

; 1666 :     short *                 pnBuffer    = (short *)pvBuffer;

  00035	8b 55 08	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  00038	89 55 e0	 mov	 DWORD PTR _pnBuffer$[ebp], edx

; 1667 :     short                   nSample;
; 1668 :     DWORD                   i, z;
; 1669 : 
; 1670 :     for(i = 0; i < dwBufferBytes / (2 * dwChannelCount); i++)

  0003b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00042	eb 09		 jmp	 SHORT $L36523
$L36524:
  00044	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$L36523:
  0004d	8b 4d 14	 mov	 ecx, DWORD PTR _dwChannelCount$[ebp]
  00050	d1 e1		 shl	 ecx, 1
  00052	8b 45 0c	 mov	 eax, DWORD PTR _dwBufferBytes$[ebp]
  00055	33 d2		 xor	 edx, edx
  00057	f7 f1		 div	 ecx
  00059	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  0005c	73 61		 jae	 SHORT $L36510

; 1671 :     {
; 1672 :         nSample = (short)(sin((double)i * dbFactor) * dbScale);

  0005e	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00061	89 55 c8	 mov	 DWORD PTR tv129[ebp], edx
  00064	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv129[ebp+4], 0
  0006b	df 6d c8	 fild	 QWORD PTR tv129[ebp]
  0006e	dc 4d e8	 fmul	 QWORD PTR _dbFactor$[ebp]
  00071	83 ec 08	 sub	 esp, 8
  00074	dd 1c 24	 fstp	 QWORD PTR [esp]
  00077	e8 00 00 00 00	 call	 _sin
  0007c	83 c4 08	 add	 esp, 8
  0007f	dc 0d 00 00 00
	00		 fmul	 QWORD PTR ?dbScale@?1??GenerateTone16@@YGXPAXKKKK@Z@4NB
  00085	e8 00 00 00 00	 call	 __ftol2
  0008a	66 89 45 f0	 mov	 WORD PTR _nSample$[ebp], ax

; 1673 : 
; 1674 :         for(z = 0; z < dwChannelCount; z++)

  0008e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  00095	eb 09		 jmp	 SHORT $L36528
$L36529:
  00097	8b 45 e4	 mov	 eax, DWORD PTR _z$[ebp]
  0009a	83 c0 01	 add	 eax, 1
  0009d	89 45 e4	 mov	 DWORD PTR _z$[ebp], eax
$L36528:
  000a0	8b 4d e4	 mov	 ecx, DWORD PTR _z$[ebp]
  000a3	3b 4d 14	 cmp	 ecx, DWORD PTR _dwChannelCount$[ebp]
  000a6	73 15		 jae	 SHORT $L36530

; 1675 :         {
; 1676 :             *pnBuffer++ = nSample;

  000a8	8b 55 e0	 mov	 edx, DWORD PTR _pnBuffer$[ebp]
  000ab	66 8b 45 f0	 mov	 ax, WORD PTR _nSample$[ebp]
  000af	66 89 02	 mov	 WORD PTR [edx], ax
  000b2	8b 4d e0	 mov	 ecx, DWORD PTR _pnBuffer$[ebp]
  000b5	83 c1 02	 add	 ecx, 2
  000b8	89 4d e0	 mov	 DWORD PTR _pnBuffer$[ebp], ecx

; 1677 :         }

  000bb	eb da		 jmp	 SHORT $L36529
$L36530:

; 1678 :     }

  000bd	eb 85		 jmp	 SHORT $L36524
$L36510:

; 1679 : }

  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 14 00	 ret	 20			; 00000014H
?GenerateTone16@@YGXPAXKKKK@Z ENDP			; GenerateTone16
DSOUND	ENDS
PUBLIC	?GenerateNoise@@YGXPAXK@Z			; GenerateNoise
EXTRN	_rand:NEAR
; Function compile flags: /Odt
;	COMDAT ?GenerateNoise@@YGXPAXK@Z
DSOUND	SEGMENT
_i$ = -4
_pvBuffer$ = 8
_dwBufferSize$ = 12
?GenerateNoise@@YGXPAXK@Z PROC NEAR			; GenerateNoise, COMDAT

; 1707 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1708 :     DWORD                   i;
; 1709 : 
; 1710 :     for(i = 0; i < dwBufferSize; i++)

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0000b	eb 09		 jmp	 SHORT $L36536
$L36537:
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00010	83 c0 01	 add	 eax, 1
  00013	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L36536:
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00019	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwBufferSize$[ebp]
  0001c	73 17		 jae	 SHORT $L36534

; 1711 :     {
; 1712 :         *(((LPBYTE)pvBuffer) + i) = (BYTE)(rand() % 0xFF);

  0001e	e8 00 00 00 00	 call	 _rand
  00023	99		 cdq
  00024	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00029	f7 f9		 idiv	 ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  0002e	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  00031	88 10		 mov	 BYTE PTR [eax], dl

; 1713 :     }

  00033	eb d8		 jmp	 SHORT $L36537
$L36534:

; 1714 : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?GenerateNoise@@YGXPAXK@Z ENDP				; GenerateNoise
DSOUND	ENDS
PUBLIC	?MakeMultiChannel@@YGJPBUtWAVEFORMATEX@@PAU1@PBXKPAPAXPAK@Z ; MakeMultiChannel
PUBLIC	??_C@_0CH@EEDJOHLO@WAVE_FORMAT_PCM?5?$DN?$DN?5pwfxSrc?9?$DOwFor@ ; `string'
PUBLIC	??_C@_0CL@DBFGFOMM@?$CB?$CIpwfxDst?9?$DOnChannels?5?$CF?5pwfxSrc?9?$DO@ ; `string'
EXTRN	_XAudioCreatePcmFormat@16:NEAR
;	COMDAT ??_C@_0CH@EEDJOHLO@WAVE_FORMAT_PCM?5?$DN?$DN?5pwfxSrc?9?$DOwFor@
DSOUND_RD	SEGMENT
??_C@_0CH@EEDJOHLO@WAVE_FORMAT_PCM?5?$DN?$DN?5pwfxSrc?9?$DOwFor@ DB 'WAVE'
	DB	'_FORMAT_PCM == pwfxSrc->wFormatTag', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@DBFGFOMM@?$CB?$CIpwfxDst?9?$DOnChannels?5?$CF?5pwfxSrc?9?$DO@
DSOUND_RD	SEGMENT
??_C@_0CL@DBFGFOMM@?$CB?$CIpwfxDst?9?$DOnChannels?5?$CF?5pwfxSrc?9?$DO@ DB '!'
	DB	'(pwfxDst->nChannels % pwfxSrc->nChannels)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?MakeMultiChannel@@YGJPBUtWAVEFORMATEX@@PAU1@PBXKPAPAXPAK@Z
DSOUND	SEGMENT
_hr$ = -28
_pvDstData$ = -24
_dwDstDataSize$ = -20
_b$ = -16
_dwMultiplier$ = -12
_dwSampleCount$ = -8
_a$ = -4
_pwfxSrc$ = 8
_pwfxDst$ = 12
_pvSrcData$ = 16
_dwSrcDataSize$ = 20
_ppvDstData$ = 24
_pdwDstDataSize$ = 28
?MakeMultiChannel@@YGJPBUtWAVEFORMATEX@@PAU1@PBXKPAPAXPAK@Z PROC NEAR ; MakeMultiChannel, COMDAT

; 1751 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 1752 :     LPVOID                  pvDstData;
; 1753 :     DWORD                   dwDstDataSize;
; 1754 :     DWORD                   dwMultiplier;
; 1755 :     DWORD                   dwSampleCount;
; 1756 :     HRESULT                 hr;
; 1757 :     DWORD                   a, b;
; 1758 : 
; 1759 :     ASSERT(WAVE_FORMAT_PCM == pwfxSrc->wFormatTag);

  00006	68 df 06 00 00	 push	 1759			; 000006dfH
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@EEDJOHLO@WAVE_FORMAT_PCM?5?$DN?$DN?5pwfxSrc?9?$DOwFor@
  00015	8b 45 08	 mov	 eax, DWORD PTR _pwfxSrc$[ebp]
  00018	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0001b	83 e9 01	 sub	 ecx, 1
  0001e	f7 d9		 neg	 ecx
  00020	1b c9		 sbb	 ecx, ecx
  00022	f7 d9		 neg	 ecx
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 1760 :     ASSERT(!(pwfxDst->nChannels % pwfxSrc->nChannels));

  0002d	68 e0 06 00 00	 push	 1760			; 000006e0H
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@DBFGFOMM@?$CB?$CIpwfxDst?9?$DOnChannels?5?$CF?5pwfxSrc?9?$DO@
  0003c	8b 55 0c	 mov	 edx, DWORD PTR _pwfxDst$[ebp]
  0003f	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _pwfxSrc$[ebp]
  00046	0f b7 49 02	 movzx	 ecx, WORD PTR [ecx+2]
  0004a	99		 cdq
  0004b	f7 f9		 idiv	 ecx
  0004d	f7 da		 neg	 edx
  0004f	1b d2		 sbb	 edx, edx
  00051	f7 da		 neg	 edx
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00059	83 c4 10	 add	 esp, 16			; 00000010H

; 1761 :     
; 1762 :     XAudioCreatePcmFormat(pwfxDst->nChannels, pwfxSrc->nSamplesPerSec, pwfxSrc->wBitsPerSample, pwfxDst);

  0005c	8b 55 0c	 mov	 edx, DWORD PTR _pwfxDst$[ebp]
  0005f	52		 push	 edx
  00060	8b 45 08	 mov	 eax, DWORD PTR _pwfxSrc$[ebp]
  00063	66 8b 48 0e	 mov	 cx, WORD PTR [eax+14]
  00067	51		 push	 ecx
  00068	8b 55 08	 mov	 edx, DWORD PTR _pwfxSrc$[ebp]
  0006b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0006e	50		 push	 eax
  0006f	8b 4d 0c	 mov	 ecx, DWORD PTR _pwfxDst$[ebp]
  00072	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 _XAudioCreatePcmFormat@16

; 1763 : 
; 1764 :     dwMultiplier = pwfxDst->nChannels / pwfxSrc->nChannels;

  0007c	8b 45 0c	 mov	 eax, DWORD PTR _pwfxDst$[ebp]
  0007f	0f b7 40 02	 movzx	 eax, WORD PTR [eax+2]
  00083	8b 4d 08	 mov	 ecx, DWORD PTR _pwfxSrc$[ebp]
  00086	0f b7 49 02	 movzx	 ecx, WORD PTR [ecx+2]
  0008a	99		 cdq
  0008b	f7 f9		 idiv	 ecx
  0008d	89 45 f4	 mov	 DWORD PTR _dwMultiplier$[ebp], eax

; 1765 :     dwSampleCount = dwSrcDataSize / pwfxSrc->nBlockAlign;

  00090	8b 55 08	 mov	 edx, DWORD PTR _pwfxSrc$[ebp]
  00093	0f b7 4a 0c	 movzx	 ecx, WORD PTR [edx+12]
  00097	8b 45 14	 mov	 eax, DWORD PTR _dwSrcDataSize$[ebp]
  0009a	33 d2		 xor	 edx, edx
  0009c	f7 f1		 div	 ecx
  0009e	89 45 f8	 mov	 DWORD PTR _dwSampleCount$[ebp], eax

; 1766 :     dwDstDataSize = dwSampleCount * pwfxDst->nBlockAlign;

  000a1	8b 55 0c	 mov	 edx, DWORD PTR _pwfxDst$[ebp]
  000a4	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  000a8	8b 4d f8	 mov	 ecx, DWORD PTR _dwSampleCount$[ebp]
  000ab	0f af c8	 imul	 ecx, eax
  000ae	89 4d ec	 mov	 DWORD PTR _dwDstDataSize$[ebp], ecx

; 1767 : 
; 1768 :     hr = MALLOC(pvDstData, BYTE, dwDstDataSize);

  000b1	8b 55 ec	 mov	 edx, DWORD PTR _dwDstDataSize$[ebp]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 ?__MALLOC@@YGPAXK@Z	; __MALLOC
  000ba	89 45 e8	 mov	 DWORD PTR _pvDstData$[ebp], eax
  000bd	8b 45 e8	 mov	 eax, DWORD PTR _pvDstData$[ebp]
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ?ValidatePtr@@YGJPAX@Z	; ValidatePtr
  000c6	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 1769 : 
; 1770 :     if(SUCCEEDED(hr))

  000c9	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000cd	0f 8c aa 00 00
	00		 jl	 $L36561

; 1771 :     {
; 1772 :         *ppvDstData = pvDstData;

  000d3	8b 4d 18	 mov	 ecx, DWORD PTR _ppvDstData$[ebp]
  000d6	8b 55 e8	 mov	 edx, DWORD PTR _pvDstData$[ebp]
  000d9	89 11		 mov	 DWORD PTR [ecx], edx

; 1773 :         *pdwDstDataSize = dwDstDataSize;

  000db	8b 45 1c	 mov	 eax, DWORD PTR _pdwDstDataSize$[ebp]
  000de	8b 4d ec	 mov	 ecx, DWORD PTR _dwDstDataSize$[ebp]
  000e1	89 08		 mov	 DWORD PTR [eax], ecx
$L36563:

; 1774 : 
; 1775 :         while(dwSampleCount--)

  000e3	8b 55 f8	 mov	 edx, DWORD PTR _dwSampleCount$[ebp]
  000e6	8b 45 f8	 mov	 eax, DWORD PTR _dwSampleCount$[ebp]
  000e9	83 e8 01	 sub	 eax, 1
  000ec	89 45 f8	 mov	 DWORD PTR _dwSampleCount$[ebp], eax
  000ef	85 d2		 test	 edx, edx
  000f1	0f 84 86 00 00
	00		 je	 $L36561

; 1776 :         {
; 1777 :             for(a = 0; a < dwMultiplier; a++)

  000f7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _a$[ebp], 0
  000fe	eb 09		 jmp	 SHORT $L36565
$L36566:
  00100	8b 4d fc	 mov	 ecx, DWORD PTR _a$[ebp]
  00103	83 c1 01	 add	 ecx, 1
  00106	89 4d fc	 mov	 DWORD PTR _a$[ebp], ecx
$L36565:
  00109	8b 55 fc	 mov	 edx, DWORD PTR _a$[ebp]
  0010c	3b 55 f4	 cmp	 edx, DWORD PTR _dwMultiplier$[ebp]
  0010f	73 58		 jae	 SHORT $L36567

; 1778 :             {
; 1779 :                 for(b = 0; b < pwfxSrc->nChannels; b++)

  00111	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _b$[ebp], 0
  00118	eb 09		 jmp	 SHORT $L36568
$L36569:
  0011a	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  0011d	83 c0 01	 add	 eax, 1
  00120	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
$L36568:
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _pwfxSrc$[ebp]
  00126	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  0012a	39 55 f0	 cmp	 DWORD PTR _b$[ebp], edx
  0012d	73 38		 jae	 SHORT $L36570

; 1780 :                 {
; 1781 :                     if(8 == pwfxSrc->wBitsPerSample)

  0012f	8b 45 08	 mov	 eax, DWORD PTR _pwfxSrc$[ebp]
  00132	0f b7 48 0e	 movzx	 ecx, WORD PTR [eax+14]
  00136	83 f9 08	 cmp	 ecx, 8
  00139	75 15		 jne	 SHORT $L36571

; 1782 :                     {
; 1783 :                         *(unsigned char *)pvDstData = *(const unsigned char *)pvSrcData;

  0013b	8b 55 e8	 mov	 edx, DWORD PTR _pvDstData$[ebp]
  0013e	8b 45 10	 mov	 eax, DWORD PTR _pvSrcData$[ebp]
  00141	8a 08		 mov	 cl, BYTE PTR [eax]
  00143	88 0a		 mov	 BYTE PTR [edx], cl

; 1784 :                         pvDstData = (unsigned char *)pvDstData + 1;

  00145	8b 55 e8	 mov	 edx, DWORD PTR _pvDstData$[ebp]
  00148	83 c2 01	 add	 edx, 1
  0014b	89 55 e8	 mov	 DWORD PTR _pvDstData$[ebp], edx

; 1785 :                     }
; 1786 :                     else

  0014e	eb 15		 jmp	 SHORT $L36575
$L36571:

; 1787 :                     {
; 1788 :                         *(short *)pvDstData = *(const short *)pvSrcData;

  00150	8b 45 e8	 mov	 eax, DWORD PTR _pvDstData$[ebp]
  00153	8b 4d 10	 mov	 ecx, DWORD PTR _pvSrcData$[ebp]
  00156	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00159	66 89 10	 mov	 WORD PTR [eax], dx

; 1789 :                         pvDstData = (short *)pvDstData + 1;

  0015c	8b 45 e8	 mov	 eax, DWORD PTR _pvDstData$[ebp]
  0015f	83 c0 02	 add	 eax, 2
  00162	89 45 e8	 mov	 DWORD PTR _pvDstData$[ebp], eax
$L36575:

; 1790 :                     }
; 1791 :                 }

  00165	eb b3		 jmp	 SHORT $L36569
$L36570:

; 1792 :             }

  00167	eb 97		 jmp	 SHORT $L36566
$L36567:

; 1793 : 
; 1794 :             pvSrcData = (LPBYTE)pvSrcData + pwfxSrc->nBlockAlign;

  00169	8b 4d 08	 mov	 ecx, DWORD PTR _pwfxSrc$[ebp]
  0016c	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00170	8b 45 10	 mov	 eax, DWORD PTR _pvSrcData$[ebp]
  00173	03 c2		 add	 eax, edx
  00175	89 45 10	 mov	 DWORD PTR _pvSrcData$[ebp], eax

; 1795 :         }

  00178	e9 66 ff ff ff	 jmp	 $L36563
$L36561:

; 1796 :     }
; 1797 : 
; 1798 :     return hr;

  0017d	8b 45 e4	 mov	 eax, DWORD PTR _hr$[ebp]

; 1799 : }

  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c2 18 00	 ret	 24			; 00000018H
?MakeMultiChannel@@YGJPBUtWAVEFORMATEX@@PAU1@PBXKPAPAXPAK@Z ENDP ; MakeMultiChannel
DSOUND	ENDS
PUBLIC	?Pause@IDirectSoundStream@@QAGJK@Z		; IDirectSoundStream::Pause
PUBLIC	??_C@_0P@DNDEHNKB@Pausing?5stream?$AA@		; `string'
PUBLIC	??_C@_0BH@JBOKBGOB@Resuming?5paused?5stream?$AA@ ; `string'
;	COMDAT ??_C@_0P@DNDEHNKB@Pausing?5stream?$AA@
DSOUND_RD	SEGMENT
??_C@_0P@DNDEHNKB@Pausing?5stream?$AA@ DB 'Pausing stream', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JBOKBGOB@Resuming?5paused?5stream?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@JBOKBGOB@Resuming?5paused?5stream?$AA@ DB 'Resuming paused stre'
	DB	'am', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?PauseStream@@YGJPAUIDirectSoundStream@@H@Z
DSOUND	SEGMENT
_hr$ = -4
_pStream$ = 8
_fPause$ = 12
?PauseStream@@YGJPAUIDirectSoundStream@@H@Z PROC NEAR	; PauseStream, COMDAT

; 1827 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1828 :     HRESULT                 hr;
; 1829 : 
; 1830 :     if(fPause)

  00004	83 7d 0c 00	 cmp	 DWORD PTR _fPause$[ebp], 0
  00008	74 0f		 je	 SHORT $L36585

; 1831 :     {
; 1832 :         DPF_TEST("Pausing stream");

  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@DNDEHNKB@Pausing?5stream?$AA@
  0000f	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00014	83 c4 04	 add	 esp, 4

; 1833 :     }
; 1834 :     else

  00017	eb 0d		 jmp	 SHORT $L36587
$L36585:

; 1835 :     {
; 1836 :         DPF_TEST("Resuming paused stream");

  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JBOKBGOB@Resuming?5paused?5stream?$AA@
  0001e	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00023	83 c4 04	 add	 esp, 4
$L36587:

; 1837 :     }
; 1838 : 
; 1839 :     hr = ValidateResult(pStream->Pause(fPause));

  00026	8b 45 0c	 mov	 eax, DWORD PTR _fPause$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 ?Pause@IDirectSoundStream@@QAGJK@Z ; IDirectSoundStream::Pause
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00039	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 1840 : 
; 1841 :     return hr;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 1842 : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?PauseStream@@YGJPAUIDirectSoundStream@@H@Z ENDP	; PauseStream
DSOUND	ENDS
EXTRN	_IDirectSoundStream_Pause@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?Pause@IDirectSoundStream@@QAGJK@Z
DSOUND	SEGMENT
_this$ = 8
_dwPause$ = 12
?Pause@IDirectSoundStream@@QAGJK@Z PROC NEAR		; IDirectSoundStream::Pause, COMDAT

; 2367 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2368 :         return IDirectSoundStream_Pause(this, dwPause);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwPause$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_Pause@8

; 2369 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?Pause@IDirectSoundStream@@QAGJK@Z ENDP			; IDirectSoundStream::Pause
DSOUND	ENDS
PUBLIC	?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z	; CreateFormat
PUBLIC	??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@	; `string'
EXTRN	_XAudioCreateAdpcmFormat@12:NEAR
;	COMDAT ?wfx@?1??CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z@4TUNIWAVEFORMAT@@A
; File c:\xbox\private\windows\directx\dsound\test\util.cpp
DSOUND_URW	SEGMENT
?wfx@?1??CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z@4TUNIWAVEFORMAT@@A DB 014H DUP (?) ; `CreateFormat'::`2'::wfx
DSOUND_URW	ENDS
;	COMDAT ??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@ DB 'Unexpected format tag'
	DB	00H						; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z
DSOUND	SEGMENT
tv64 = -4
_dwFormatTag$ = 8
_dwSamplesPerSec$ = 12
_dwBitsPerSample$ = 16
_dwChannels$ = 20
?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z PROC NEAR	; CreateFormat, COMDAT

; 1874 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1875 :     static UNIWAVEFORMAT    wfx;
; 1876 :     
; 1877 :     switch(dwFormatTag)
; 1878 :     {

  00004	8b 45 08	 mov	 eax, DWORD PTR _dwFormatTag$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000a	83 7d fc 01	 cmp	 DWORD PTR tv64[ebp], 1
  0000e	74 08		 je	 SHORT $L36601
  00010	83 7d fc 69	 cmp	 DWORD PTR tv64[ebp], 105 ; 00000069H
  00014	74 1c		 je	 SHORT $L36604
  00016	eb 2f		 jmp	 SHORT $L36606
$L36601:

; 1879 :         case WAVE_FORMAT_PCM:
; 1880 :             XAudioCreatePcmFormat((WORD)dwChannels, dwSamplesPerSec, (WORD)dwBitsPerSample, &wfx.wfx);

  00018	68 00 00 00 00	 push	 OFFSET FLAT:?wfx@?1??CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z@4TUNIWAVEFORMAT@@A
  0001d	66 8b 4d 10	 mov	 cx, WORD PTR _dwBitsPerSample$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 0c	 mov	 edx, DWORD PTR _dwSamplesPerSec$[ebp]
  00025	52		 push	 edx
  00026	66 8b 45 14	 mov	 ax, WORD PTR _dwChannels$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _XAudioCreatePcmFormat@16

; 1881 :             break;

  00030	eb 2e		 jmp	 SHORT $L36598
$L36604:

; 1882 : 
; 1883 :         case WAVE_FORMAT_XBOX_ADPCM:
; 1884 :             XAudioCreateAdpcmFormat((WORD)dwChannels, dwSamplesPerSec, &wfx.wfAdpcm);

  00032	68 00 00 00 00	 push	 OFFSET FLAT:?wfx@?1??CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z@4TUNIWAVEFORMAT@@A
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _dwSamplesPerSec$[ebp]
  0003a	51		 push	 ecx
  0003b	66 8b 55 14	 mov	 dx, WORD PTR _dwChannels$[ebp]
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 _XAudioCreateAdpcmFormat@12

; 1885 :             break;

  00045	eb 19		 jmp	 SHORT $L36598
$L36606:

; 1886 : 
; 1887 :         default:
; 1888 :             ASSERTMSG("Unexpected format tag");

  00047	68 60 07 00 00	 push	 1888			; 00000760H
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@
  00056	6a 01		 push	 1
  00058	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
$L36598:

; 1889 :             break;
; 1890 :     }
; 1891 : 
; 1892 :     return &wfx.wfx;

  00060	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?wfx@?1??CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z@4TUNIWAVEFORMAT@@A

; 1893 : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 10 00	 ret	 16			; 00000010H
?CreateFormat@@YGPBUtWAVEFORMATEX@@KKKK@Z ENDP		; CreateFormat
DSOUND	ENDS
PUBLIC	?GetFreeSGEs@@YGJPAK@Z				; GetFreeSGEs
PUBLIC	?GetDirectSoundCaps@@YGJPAU_DSCAPS@@@Z		; GetDirectSoundCaps
; Function compile flags: /Odt
;	COMDAT ?GetFreeSGEs@@YGJPAK@Z
DSOUND	SEGMENT
_hr$ = -20
_dsc$ = -16
_pdwFreeSGEs$ = 8
?GetFreeSGEs@@YGJPAK@Z PROC NEAR			; GetFreeSGEs, COMDAT

; 1919 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 1920 :     DSCAPS                  dsc;
; 1921 :     HRESULT                 hr;
; 1922 :     
; 1923 :     hr = ValidateResult(GetDirectSoundCaps(&dsc));

  00006	8d 45 f0	 lea	 eax, DWORD PTR _dsc$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?GetDirectSoundCaps@@YGJPAU_DSCAPS@@@Z ; GetDirectSoundCaps
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00015	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 1924 : 
; 1925 :     if(SUCCEEDED(hr))

  00018	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0001c	7c 08		 jl	 SHORT $L36614

; 1926 :     {
; 1927 :         *pdwFreeSGEs = dsc.dwFreeBufferSGEs;

  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _pdwFreeSGEs$[ebp]
  00021	8b 55 f8	 mov	 edx, DWORD PTR _dsc$[ebp+8]
  00024	89 11		 mov	 DWORD PTR [ecx], edx
$L36614:

; 1928 :     }
; 1929 : 
; 1930 :     return hr;

  00026	8b 45 ec	 mov	 eax, DWORD PTR _hr$[ebp]

; 1931 : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?GetFreeSGEs@@YGJPAK@Z ENDP				; GetFreeSGEs
DSOUND	ENDS
PUBLIC	??_C@_0M@NJMJDGJO@Out?5of?5SGEs?$AA@		; `string'
PUBLIC	??_C@_0CF@GICEMCH@Clamping?5buffer?5size?5from?5?$CFlu?5to@ ; `string'
;	COMDAT ??_C@_0M@NJMJDGJO@Out?5of?5SGEs?$AA@
DSOUND_RD	SEGMENT
??_C@_0M@NJMJDGJO@Out?5of?5SGEs?$AA@ DB 'Out of SGEs', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GICEMCH@Clamping?5buffer?5size?5from?5?$CFlu?5to@
DSOUND_RD	SEGMENT
??_C@_0CF@GICEMCH@Clamping?5buffer?5size?5from?5?$CFlu?5to@ DB 'Clamping '
	DB	'buffer size from %lu to %lu', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ClampBufferSize@@YGJPAK@Z
DSOUND	SEGMENT
_hr$ = -12
_dwFreeSGEs$ = -8
_dwMaxBufferBytes$ = -4
_pdwBufferBytes$ = 8
?ClampBufferSize@@YGJPAK@Z PROC NEAR			; ClampBufferSize, COMDAT

; 1957 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1958 :     static const DWORD      dwSGESlop           = 1;
; 1959 :     DWORD                   dwFreeSGEs;
; 1960 :     DWORD                   dwMaxBufferBytes;
; 1961 :     HRESULT                 hr;
; 1962 :     
; 1963 :     hr = ValidateResult(GetFreeSGEs(&dwFreeSGEs));

  00006	8d 45 f8	 lea	 eax, DWORD PTR _dwFreeSGEs$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?GetFreeSGEs@@YGJPAK@Z	; GetFreeSGEs
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00015	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 1964 : 
; 1965 :     if(SUCCEEDED(hr) && (dwFreeSGEs <= dwSGESlop))

  00018	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0001c	7c 1a		 jl	 SHORT $L36624
  0001e	83 7d f8 01	 cmp	 DWORD PTR _dwFreeSGEs$[ebp], 1
  00022	77 14		 ja	 SHORT $L36624

; 1966 :     {
; 1967 :         DPF_TEST("Out of SGEs");

  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@NJMJDGJO@Out?5of?5SGEs?$AA@
  00029	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  0002e	83 c4 04	 add	 esp, 4

; 1968 :         hr = DSERR_OUTOFMEMORY;

  00031	c7 45 f4 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$L36624:

; 1969 :     }
; 1970 :         
; 1971 :     if(SUCCEEDED(hr))

  00038	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003c	7c 35		 jl	 SHORT $L36628

; 1972 :     {
; 1973 :         dwMaxBufferBytes = (dwFreeSGEs - dwSGESlop) * PAGE_SIZE;

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _dwFreeSGEs$[ebp]
  00041	83 e9 01	 sub	 ecx, 1
  00044	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  00047	89 4d fc	 mov	 DWORD PTR _dwMaxBufferBytes$[ebp], ecx

; 1974 : 
; 1975 :         if(*pdwBufferBytes > dwMaxBufferBytes)

  0004a	8b 55 08	 mov	 edx, DWORD PTR _pdwBufferBytes$[ebp]
  0004d	8b 02		 mov	 eax, DWORD PTR [edx]
  0004f	3b 45 fc	 cmp	 eax, DWORD PTR _dwMaxBufferBytes$[ebp]
  00052	76 1f		 jbe	 SHORT $L36628

; 1976 :         {
; 1977 :             DPF_TEST("Clamping buffer size from %lu to %lu", *pdwBufferBytes, dwMaxBufferBytes);

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _dwMaxBufferBytes$[ebp]
  00057	51		 push	 ecx
  00058	8b 55 08	 mov	 edx, DWORD PTR _pdwBufferBytes$[ebp]
  0005b	8b 02		 mov	 eax, DWORD PTR [edx]
  0005d	50		 push	 eax
  0005e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@GICEMCH@Clamping?5buffer?5size?5from?5?$CFlu?5to@
  00063	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1978 :             *pdwBufferBytes = dwMaxBufferBytes;

  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _pdwBufferBytes$[ebp]
  0006e	8b 55 fc	 mov	 edx, DWORD PTR _dwMaxBufferBytes$[ebp]
  00071	89 11		 mov	 DWORD PTR [ecx], edx
$L36628:

; 1979 :         }
; 1980 :     }
; 1981 : 
; 1982 :     return hr;

  00073	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 1983 : }

  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
?ClampBufferSize@@YGJPAK@Z ENDP				; ClampBufferSize
DSOUND	ENDS
PUBLIC	?LoadEffectsImage@@YGJPBDK@Z			; LoadEffectsImage
EXTRN	_XAudioDownloadEffectsImage@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?LoadEffectsImage@@YGJPBDK@Z
DSOUND	SEGMENT
_EffectLoc$ = -8
_pszImageName$ = 8
_dwFlags$ = 12
?LoadEffectsImage@@YGJPBDK@Z PROC NEAR			; LoadEffectsImage, COMDAT

; 2011 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2012 :     DSEFFECTIMAGELOC        EffectLoc;
; 2013 : 
; 2014 :     EffectLoc.dwI3DL2ReverbIndex = I3DL2_CHAIN_I3DL2_REVERB;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _EffectLoc$[ebp], 0

; 2015 :     EffectLoc.dwCrosstalkIndex = I3DL2_CHAIN_XTALK;

  0000d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _EffectLoc$[ebp+4], 1

; 2016 :     
; 2017 :     return ValidateResult(XAudioDownloadEffectsImage(pszImageName, &EffectLoc, dwFlags, NULL));

  00014	6a 00		 push	 0
  00016	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00019	50		 push	 eax
  0001a	8d 4d f8	 lea	 ecx, DWORD PTR _EffectLoc$[ebp]
  0001d	51		 push	 ecx
  0001e	8b 55 08	 mov	 edx, DWORD PTR _pszImageName$[ebp]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 _XAudioDownloadEffectsImage@16
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult

; 2018 : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?LoadEffectsImage@@YGJPBDK@Z ENDP			; LoadEffectsImage
DSOUND	ENDS
PUBLIC	?Release@IDirectSound@@QAGKXZ			; IDirectSound::Release
PUBLIC	?GetCaps@IDirectSound@@QAGJPAU_DSCAPS@@@Z	; IDirectSound::GetCaps
EXTRN	_DirectSoundCreate@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDirectSoundCaps@@YGJPAU_DSCAPS@@@Z
DSOUND	SEGMENT
_hr$ = -8
_pDirectSound$ = -4
_pdsc$ = 8
?GetDirectSoundCaps@@YGJPAU_DSCAPS@@@Z PROC NEAR	; GetDirectSoundCaps, COMDAT

; 2044 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2045 :     LPDIRECTSOUND           pDirectSound    = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pDirectSound$[ebp], 0

; 2046 :     HRESULT                 hr;
; 2047 : 
; 2048 :     hr = ValidateResult(DirectSoundCreate(NULL, &pDirectSound, NULL));

  0000d	6a 00		 push	 0
  0000f	8d 45 fc	 lea	 eax, DWORD PTR _pDirectSound$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	e8 00 00 00 00	 call	 _DirectSoundCreate@12
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00020	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 2049 : 
; 2050 :     if(SUCCEEDED(hr))

  00023	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00027	7c 16		 jl	 SHORT $L36642

; 2051 :     {
; 2052 :         hr = ValidateResult(pDirectSound->GetCaps(pdsc));

  00029	8b 4d 08	 mov	 ecx, DWORD PTR _pdsc$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 fc	 mov	 edx, DWORD PTR _pDirectSound$[ebp]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 ?GetCaps@IDirectSound@@QAGJPAU_DSCAPS@@@Z ; IDirectSound::GetCaps
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0003c	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36642:

; 2053 :     }
; 2054 : 
; 2055 :     RELEASE(pDirectSound);

  0003f	83 7d fc 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00043	74 10		 je	 SHORT $L36643
  00045	8b 45 fc	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?Release@IDirectSound@@QAGKXZ ; IDirectSound::Release
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pDirectSound$[ebp], 0
$L36643:

; 2056 : 
; 2057 :     return hr;

  00055	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2058 : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?GetDirectSoundCaps@@YGJPAU_DSCAPS@@@Z ENDP		; GetDirectSoundCaps
DSOUND	ENDS
EXTRN	_IDirectSound_Release@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?Release@IDirectSound@@QAGKXZ
DSOUND	SEGMENT
_this$ = 8
?Release@IDirectSound@@QAGKXZ PROC NEAR			; IDirectSound::Release, COMDAT

; 1711 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1712 :         return IDirectSound_Release(this);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _IDirectSound_Release@4

; 1713 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?Release@IDirectSound@@QAGKXZ ENDP			; IDirectSound::Release
DSOUND	ENDS
EXTRN	_IDirectSound_GetCaps@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetCaps@IDirectSound@@QAGJPAU_DSCAPS@@@Z
DSOUND	SEGMENT
_this$ = 8
_pdsc$ = 12
?GetCaps@IDirectSound@@QAGJPAU_DSCAPS@@@Z PROC NEAR	; IDirectSound::GetCaps, COMDAT

; 1716 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1717 :         return IDirectSound_GetCaps(this, pdsc);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pdsc$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSound_GetCaps@8

; 1718 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?GetCaps@IDirectSound@@QAGJPAU_DSCAPS@@@Z ENDP		; IDirectSound::GetCaps
DSOUND	ENDS
PUBLIC	?CreateToneBuffer@@YGJKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z ; CreateToneBuffer
PUBLIC	??_C@_0CF@FHNGAPBB@?$CB?$CIdwSamplesPerSec?5?$CF?5dwToneFreque@ ; `string'
PUBLIC	?Lock@IDirectSoundBuffer@@QAGJKKPAPAXPAK01K@Z	; IDirectSoundBuffer::Lock
PUBLIC	?Unlock@IDirectSoundBuffer@@QAGJPAXK0K@Z	; IDirectSoundBuffer::Unlock
;	COMDAT ??_C@_0CF@FHNGAPBB@?$CB?$CIdwSamplesPerSec?5?$CF?5dwToneFreque@
; File c:\xbox\private\windows\directx\dsound\test\util.cpp
DSOUND_RD	SEGMENT
??_C@_0CF@FHNGAPBB@?$CB?$CIdwSamplesPerSec?5?$CF?5dwToneFreque@ DB '!(dwS'
	DB	'amplesPerSec % dwToneFrequency)', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CreateToneBuffer@@YGJKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z
DSOUND	SEGMENT
_hr$ = -60
_dsbd$ = -56
_pvLock$ = -32
_wfxFormat$ = -28
_pBuffer$ = -8
_dwLock$ = -4
_dwFlags$ = 8
_dwSamplesPerSec$ = 12
_dwBitsPerSample$ = 16
_dwChannelCount$ = 20
_dwToneFrequency$ = 24
_dwBufferBytes$ = 28
_pMixBins$ = 32
_ppBuffer$ = 36
?CreateToneBuffer@@YGJKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z PROC NEAR ; CreateToneBuffer, COMDAT

; 2098 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH

; 2099 :     WAVEFORMATEX            wfxFormat       = INIT_PCM_WAVEFORMAT(dwChannelCount, dwSamplesPerSec, dwBitsPerSample);

  00006	66 c7 45 e4 01
	00		 mov	 WORD PTR _wfxFormat$[ebp], 1
  0000c	66 8b 45 14	 mov	 ax, WORD PTR _dwChannelCount$[ebp]
  00010	66 89 45 e6	 mov	 WORD PTR _wfxFormat$[ebp+2], ax
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR _dwSamplesPerSec$[ebp]
  00017	89 4d e8	 mov	 DWORD PTR _wfxFormat$[ebp+4], ecx
  0001a	8b 55 0c	 mov	 edx, DWORD PTR _dwSamplesPerSec$[ebp]
  0001d	0f af 55 14	 imul	 edx, DWORD PTR _dwChannelCount$[ebp]
  00021	0f af 55 10	 imul	 edx, DWORD PTR _dwBitsPerSample$[ebp]
  00025	c1 ea 03	 shr	 edx, 3
  00028	89 55 ec	 mov	 DWORD PTR _wfxFormat$[ebp+8], edx
  0002b	0f b7 45 14	 movzx	 eax, WORD PTR _dwChannelCount$[ebp]
  0002f	0f b7 4d 10	 movzx	 ecx, WORD PTR _dwBitsPerSample$[ebp]
  00033	0f af c1	 imul	 eax, ecx
  00036	99		 cdq
  00037	83 e2 07	 and	 edx, 7
  0003a	03 c2		 add	 eax, edx
  0003c	c1 f8 03	 sar	 eax, 3
  0003f	66 89 45 f0	 mov	 WORD PTR _wfxFormat$[ebp+12], ax
  00043	66 8b 55 10	 mov	 dx, WORD PTR _dwBitsPerSample$[ebp]
  00047	66 89 55 f2	 mov	 WORD PTR _wfxFormat$[ebp+14], dx
  0004b	66 c7 45 f4 00
	00		 mov	 WORD PTR _wfxFormat$[ebp+16], 0

; 2100 :     LPDIRECTSOUNDBUFFER     pBuffer         = NULL;

  00051	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 2101 :     DSBUFFERDESC            dsbd;
; 2102 :     LPVOID                  pvLock;
; 2103 :     DWORD                   dwLock;
; 2104 :     HRESULT                 hr;
; 2105 : 
; 2106 :     ASSERT(!(dwSamplesPerSec % dwToneFrequency));

  00058	68 3a 08 00 00	 push	 2106			; 0000083aH
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@FHNGAPBB@?$CB?$CIdwSamplesPerSec?5?$CF?5dwToneFreque@
  00067	8b 45 0c	 mov	 eax, DWORD PTR _dwSamplesPerSec$[ebp]
  0006a	33 d2		 xor	 edx, edx
  0006c	f7 75 18	 div	 DWORD PTR _dwToneFrequency$[ebp]
  0006f	f7 da		 neg	 edx
  00071	1b d2		 sbb	 edx, edx
  00073	f7 da		 neg	 edx
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0007b	83 c4 10	 add	 esp, 16			; 00000010H

; 2107 : 
; 2108 :     //
; 2109 :     // Create the buffer
; 2110 :     //
; 2111 : 
; 2112 :     if(!dwBufferBytes)

  0007e	83 7d 1c 00	 cmp	 DWORD PTR _dwBufferBytes$[ebp], 0
  00082	75 12		 jne	 SHORT $L36669

; 2113 :     {
; 2114 :         dwBufferBytes = (dwSamplesPerSec / dwToneFrequency) * wfxFormat.nBlockAlign;

  00084	8b 45 0c	 mov	 eax, DWORD PTR _dwSamplesPerSec$[ebp]
  00087	33 d2		 xor	 edx, edx
  00089	f7 75 18	 div	 DWORD PTR _dwToneFrequency$[ebp]
  0008c	0f b7 4d f0	 movzx	 ecx, WORD PTR _wfxFormat$[ebp+12]
  00090	0f af c1	 imul	 eax, ecx
  00093	89 45 1c	 mov	 DWORD PTR _dwBufferBytes$[ebp], eax
$L36669:

; 2115 :     }
; 2116 : 
; 2117 :     ZeroMemory(&dsbd, sizeof(dsbd));

  00096	6a 18		 push	 24			; 00000018H
  00098	6a 00		 push	 0
  0009a	8d 55 c8	 lea	 edx, DWORD PTR _dsbd$[ebp]
  0009d	52		 push	 edx
  0009e	e8 00 00 00 00	 call	 _memset
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2118 : 
; 2119 :     dsbd.dwSize = sizeof(dsbd);

  000a6	c7 45 c8 18 00
	00 00		 mov	 DWORD PTR _dsbd$[ebp], 24 ; 00000018H

; 2120 :     dsbd.dwFlags = dwFlags;

  000ad	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000b0	89 45 cc	 mov	 DWORD PTR _dsbd$[ebp+4], eax

; 2121 :     dsbd.lpwfxFormat = &wfxFormat;

  000b3	8d 4d e4	 lea	 ecx, DWORD PTR _wfxFormat$[ebp]
  000b6	89 4d d4	 mov	 DWORD PTR _dsbd$[ebp+12], ecx

; 2122 :     dsbd.dwBufferBytes = dwBufferBytes;

  000b9	8b 55 1c	 mov	 edx, DWORD PTR _dwBufferBytes$[ebp]
  000bc	89 55 d0	 mov	 DWORD PTR _dsbd$[ebp+8], edx

; 2123 :     dsbd.lpMixBins = pMixBins;

  000bf	8b 45 20	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  000c2	89 45 d8	 mov	 DWORD PTR _dsbd$[ebp+16], eax

; 2124 : 
; 2125 :     hr = ValidateResult(DirectSoundCreateBuffer(&dsbd, &pBuffer));

  000c5	8d 4d f8	 lea	 ecx, DWORD PTR _pBuffer$[ebp]
  000c8	51		 push	 ecx
  000c9	8d 55 c8	 lea	 edx, DWORD PTR _dsbd$[ebp]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 _DirectSoundCreateBuffer@8
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  000d8	89 45 c4	 mov	 DWORD PTR _hr$[ebp], eax

; 2126 : 
; 2127 :     //
; 2128 :     // Write the audio data
; 2129 :     //
; 2130 : 
; 2131 :     if(SUCCEEDED(hr))

  000db	83 7d c4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000df	7c 26		 jl	 SHORT $L36671

; 2132 :     {
; 2133 :         hr = ValidateResult(pBuffer->Lock(0, dwBufferBytes, &pvLock, &dwLock, NULL, NULL, 0));

  000e1	6a 00		 push	 0
  000e3	6a 00		 push	 0
  000e5	6a 00		 push	 0
  000e7	8d 45 fc	 lea	 eax, DWORD PTR _dwLock$[ebp]
  000ea	50		 push	 eax
  000eb	8d 4d e0	 lea	 ecx, DWORD PTR _pvLock$[ebp]
  000ee	51		 push	 ecx
  000ef	8b 55 1c	 mov	 edx, DWORD PTR _dwBufferBytes$[ebp]
  000f2	52		 push	 edx
  000f3	6a 00		 push	 0
  000f5	8b 45 f8	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ?Lock@IDirectSoundBuffer@@QAGJKKPAPAXPAK01K@Z ; IDirectSoundBuffer::Lock
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00104	89 45 c4	 mov	 DWORD PTR _hr$[ebp], eax
$L36671:

; 2134 :     }
; 2135 : 
; 2136 :     if(SUCCEEDED(hr))

  00107	83 7d c4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0010b	7c 1d		 jl	 SHORT $L36673

; 2137 :     {
; 2138 :         GenerateTone(pvLock, dwLock, dwSamplesPerSec, dwBitsPerSample, dwChannelCount, dwToneFrequency);

  0010d	8b 4d 18	 mov	 ecx, DWORD PTR _dwToneFrequency$[ebp]
  00110	51		 push	 ecx
  00111	8b 55 14	 mov	 edx, DWORD PTR _dwChannelCount$[ebp]
  00114	52		 push	 edx
  00115	8b 45 10	 mov	 eax, DWORD PTR _dwBitsPerSample$[ebp]
  00118	50		 push	 eax
  00119	8b 4d 0c	 mov	 ecx, DWORD PTR _dwSamplesPerSec$[ebp]
  0011c	51		 push	 ecx
  0011d	8b 55 fc	 mov	 edx, DWORD PTR _dwLock$[ebp]
  00120	52		 push	 edx
  00121	8b 45 e0	 mov	 eax, DWORD PTR _pvLock$[ebp]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ?GenerateTone@@YGXPAXKKKKK@Z ; GenerateTone
$L36673:

; 2139 :     }
; 2140 : 
; 2141 :     if(SUCCEEDED(hr))

  0012a	83 7d c4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0012e	7c 1e		 jl	 SHORT $L36675

; 2142 :     {
; 2143 :         hr = ValidateResult(pBuffer->Unlock(pvLock, dwLock, NULL, 0));

  00130	6a 00		 push	 0
  00132	6a 00		 push	 0
  00134	8b 4d fc	 mov	 ecx, DWORD PTR _dwLock$[ebp]
  00137	51		 push	 ecx
  00138	8b 55 e0	 mov	 edx, DWORD PTR _pvLock$[ebp]
  0013b	52		 push	 edx
  0013c	8b 45 f8	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 ?Unlock@IDirectSoundBuffer@@QAGJPAXK0K@Z ; IDirectSoundBuffer::Unlock
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0014b	89 45 c4	 mov	 DWORD PTR _hr$[ebp], eax
$L36675:

; 2144 :     }
; 2145 : 
; 2146 :     //
; 2147 :     // Success
; 2148 :     //
; 2149 : 
; 2150 :     if(SUCCEEDED(hr))

  0014e	83 7d c4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00152	7c 0a		 jl	 SHORT $L36677

; 2151 :     {
; 2152 :         *ppBuffer = pBuffer;

  00154	8b 4d 24	 mov	 ecx, DWORD PTR _ppBuffer$[ebp]
  00157	8b 55 f8	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  0015a	89 11		 mov	 DWORD PTR [ecx], edx

; 2153 :     }
; 2154 :     else

  0015c	eb 16		 jmp	 SHORT $L36678
$L36677:

; 2155 :     {
; 2156 :         RELEASE(pBuffer);

  0015e	83 7d f8 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00162	74 10		 je	 SHORT $L36678
  00164	8b 45 f8	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  0016d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L36678:

; 2157 :     }
; 2158 : 
; 2159 :     return hr;

  00174	8b 45 c4	 mov	 eax, DWORD PTR _hr$[ebp]

; 2160 : }

  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c2 20 00	 ret	 32			; 00000020H
?CreateToneBuffer@@YGJKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z ENDP ; CreateToneBuffer
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_Lock@32:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?Lock@IDirectSoundBuffer@@QAGJKKPAPAXPAK01K@Z
DSOUND	SEGMENT
_this$ = 8
_dwOffset$ = 12
_dwBytes$ = 16
_ppvAudioPtr1$ = 20
_pdwAudioBytes1$ = 24
_ppvAudioPtr2$ = 28
_pdwAudioBytes2$ = 32
_dwFlags$ = 36
?Lock@IDirectSoundBuffer@@QAGJKKPAPAXPAK01K@Z PROC NEAR	; IDirectSoundBuffer::Lock, COMDAT

; 2112 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2113 :         return IDirectSoundBuffer_Lock(this, dwOffset, dwBytes, ppvAudioPtr1, pdwAudioBytes1, ppvAudioPtr2, pdwAudioBytes2, dwFlags);

  00003	8b 45 24	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 20	 mov	 ecx, DWORD PTR _pdwAudioBytes2$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 1c	 mov	 edx, DWORD PTR _ppvAudioPtr2$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 18	 mov	 eax, DWORD PTR _pdwAudioBytes1$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 14	 mov	 ecx, DWORD PTR _ppvAudioPtr1$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 10	 mov	 edx, DWORD PTR _dwBytes$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 0c	 mov	 eax, DWORD PTR _dwOffset$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 _IDirectSoundBuffer_Lock@32

; 2114 :     }

  00028	5d		 pop	 ebp
  00029	c2 20 00	 ret	 32			; 00000020H
?Lock@IDirectSoundBuffer@@QAGJKKPAPAXPAK01K@Z ENDP	; IDirectSoundBuffer::Lock
DSOUND	ENDS
EXTRN	_IDirectSoundBuffer_Unlock@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?Unlock@IDirectSoundBuffer@@QAGJPAXK0K@Z
DSOUND	SEGMENT
_this$ = 8
_pvLock1$ = 12
_dwLockSize1$ = 16
_pvLock2$ = 20
_dwLockSize2$ = 24
?Unlock@IDirectSoundBuffer@@QAGJPAXK0K@Z PROC NEAR	; IDirectSoundBuffer::Unlock, COMDAT

; 2117 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2118 :         return IDirectSoundBuffer_Unlock(this, pvLock1, dwLockSize1, pvLock2, dwLockSize2);

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwLockSize2$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _pvLock2$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _dwLockSize1$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _pvLock1$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _IDirectSoundBuffer_Unlock@20

; 2119 :     }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
?Unlock@IDirectSoundBuffer@@QAGJPAXK0K@Z ENDP		; IDirectSoundBuffer::Unlock
DSOUND	ENDS
PUBLIC	?CreateImpulseBuffer@@YGJKKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z ; CreateImpulseBuffer
PUBLIC	??_C@_0CL@MDCJEPOI@?$CB?$CI?$CIdwSamplesPerSec?5?1?5dwToneFrequ@ ; `string'
;	COMDAT ??_C@_0CL@MDCJEPOI@?$CB?$CI?$CIdwSamplesPerSec?5?1?5dwToneFrequ@
; File c:\xbox\private\windows\directx\dsound\test\util.cpp
DSOUND_RD	SEGMENT
??_C@_0CL@MDCJEPOI@?$CB?$CI?$CIdwSamplesPerSec?5?1?5dwToneFrequ@ DB '!((d'
	DB	'wSamplesPerSec / dwToneFrequency) % 2)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CreateImpulseBuffer@@YGJKKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z
DSOUND	SEGMENT
_hr$ = -64
_dwImpulseLength$ = -60
_dsbd$ = -56
_pvLock$ = -32
_wfxFormat$ = -28
_pBuffer$ = -8
_dwLock$ = -4
_dwFlags$ = 8
_dwSamplesPerSec$ = 12
_dwBitsPerSample$ = 16
_dwChannelCount$ = 20
_dwToneFrequency$ = 24
_dwLeadIn$ = 28
_dwRollOff$ = 32
_pMixBins$ = 36
_ppBuffer$ = 40
?CreateImpulseBuffer@@YGJKKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z PROC NEAR ; CreateImpulseBuffer, COMDAT

; 2202 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H

; 2203 :     WAVEFORMATEX            wfxFormat       = INIT_PCM_WAVEFORMAT(dwChannelCount, dwSamplesPerSec, dwBitsPerSample);

  00006	66 c7 45 e4 01
	00		 mov	 WORD PTR _wfxFormat$[ebp], 1
  0000c	66 8b 45 14	 mov	 ax, WORD PTR _dwChannelCount$[ebp]
  00010	66 89 45 e6	 mov	 WORD PTR _wfxFormat$[ebp+2], ax
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR _dwSamplesPerSec$[ebp]
  00017	89 4d e8	 mov	 DWORD PTR _wfxFormat$[ebp+4], ecx
  0001a	8b 55 0c	 mov	 edx, DWORD PTR _dwSamplesPerSec$[ebp]
  0001d	0f af 55 14	 imul	 edx, DWORD PTR _dwChannelCount$[ebp]
  00021	0f af 55 10	 imul	 edx, DWORD PTR _dwBitsPerSample$[ebp]
  00025	c1 ea 03	 shr	 edx, 3
  00028	89 55 ec	 mov	 DWORD PTR _wfxFormat$[ebp+8], edx
  0002b	0f b7 45 14	 movzx	 eax, WORD PTR _dwChannelCount$[ebp]
  0002f	0f b7 4d 10	 movzx	 ecx, WORD PTR _dwBitsPerSample$[ebp]
  00033	0f af c1	 imul	 eax, ecx
  00036	99		 cdq
  00037	83 e2 07	 and	 edx, 7
  0003a	03 c2		 add	 eax, edx
  0003c	c1 f8 03	 sar	 eax, 3
  0003f	66 89 45 f0	 mov	 WORD PTR _wfxFormat$[ebp+12], ax
  00043	66 8b 55 10	 mov	 dx, WORD PTR _dwBitsPerSample$[ebp]
  00047	66 89 55 f2	 mov	 WORD PTR _wfxFormat$[ebp+14], dx
  0004b	66 c7 45 f4 00
	00		 mov	 WORD PTR _wfxFormat$[ebp+16], 0

; 2204 :     LPDIRECTSOUNDBUFFER     pBuffer         = NULL;

  00051	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 2205 :     DWORD                   dwImpulseLength;
; 2206 :     DSBUFFERDESC            dsbd;
; 2207 :     LPVOID                  pvLock;
; 2208 :     DWORD                   dwLock;
; 2209 :     HRESULT                 hr;
; 2210 : 
; 2211 :     ASSERT(!(dwSamplesPerSec % dwToneFrequency));

  00058	68 a3 08 00 00	 push	 2211			; 000008a3H
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@FHNGAPBB@?$CB?$CIdwSamplesPerSec?5?$CF?5dwToneFreque@
  00067	8b 45 0c	 mov	 eax, DWORD PTR _dwSamplesPerSec$[ebp]
  0006a	33 d2		 xor	 edx, edx
  0006c	f7 75 18	 div	 DWORD PTR _dwToneFrequency$[ebp]
  0006f	f7 da		 neg	 edx
  00071	1b d2		 sbb	 edx, edx
  00073	f7 da		 neg	 edx
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0007b	83 c4 10	 add	 esp, 16			; 00000010H

; 2212 :     ASSERT(!((dwSamplesPerSec / dwToneFrequency) % 2));

  0007e	68 a4 08 00 00	 push	 2212			; 000008a4H
  00083	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BNBFKKII@c?3?2xbox?2private?2windows?2directx?2@
  00088	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@MDCJEPOI@?$CB?$CI?$CIdwSamplesPerSec?5?1?5dwToneFrequ@
  0008d	8b 45 0c	 mov	 eax, DWORD PTR _dwSamplesPerSec$[ebp]
  00090	33 d2		 xor	 edx, edx
  00092	f7 75 18	 div	 DWORD PTR _dwToneFrequency$[ebp]
  00095	33 d2		 xor	 edx, edx
  00097	b9 02 00 00 00	 mov	 ecx, 2
  0009c	f7 f1		 div	 ecx
  0009e	f7 da		 neg	 edx
  000a0	1b d2		 sbb	 edx, edx
  000a2	f7 da		 neg	 edx
  000a4	52		 push	 edx
  000a5	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000aa	83 c4 10	 add	 esp, 16			; 00000010H

; 2213 : 
; 2214 :     //
; 2215 :     // Convert the lead-in, rolloff and impulse length to bytes
; 2216 :     //
; 2217 : 
; 2218 :     dwLeadIn *= wfxFormat.nAvgBytesPerSec;

  000ad	8b 55 1c	 mov	 edx, DWORD PTR _dwLeadIn$[ebp]
  000b0	0f af 55 ec	 imul	 edx, DWORD PTR _wfxFormat$[ebp+8]
  000b4	89 55 1c	 mov	 DWORD PTR _dwLeadIn$[ebp], edx

; 2219 :     dwRollOff *= wfxFormat.nAvgBytesPerSec;

  000b7	8b 45 20	 mov	 eax, DWORD PTR _dwRollOff$[ebp]
  000ba	0f af 45 ec	 imul	 eax, DWORD PTR _wfxFormat$[ebp+8]
  000be	89 45 20	 mov	 DWORD PTR _dwRollOff$[ebp], eax

; 2220 :     dwImpulseLength = (dwSamplesPerSec / dwToneFrequency / 2) * wfxFormat.nBlockAlign;

  000c1	8b 45 0c	 mov	 eax, DWORD PTR _dwSamplesPerSec$[ebp]
  000c4	33 d2		 xor	 edx, edx
  000c6	f7 75 18	 div	 DWORD PTR _dwToneFrequency$[ebp]
  000c9	d1 e8		 shr	 eax, 1
  000cb	0f b7 4d f0	 movzx	 ecx, WORD PTR _wfxFormat$[ebp+12]
  000cf	0f af c1	 imul	 eax, ecx
  000d2	89 45 c4	 mov	 DWORD PTR _dwImpulseLength$[ebp], eax

; 2221 : 
; 2222 :     //
; 2223 :     // Create the buffer
; 2224 :     //
; 2225 : 
; 2226 :     ZeroMemory(&dsbd, sizeof(dsbd));

  000d5	6a 18		 push	 24			; 00000018H
  000d7	6a 00		 push	 0
  000d9	8d 55 c8	 lea	 edx, DWORD PTR _dsbd$[ebp]
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 _memset
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2227 : 
; 2228 :     dsbd.dwSize = sizeof(dsbd);

  000e5	c7 45 c8 18 00
	00 00		 mov	 DWORD PTR _dsbd$[ebp], 24 ; 00000018H

; 2229 :     dsbd.dwFlags = dwFlags;

  000ec	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000ef	89 45 cc	 mov	 DWORD PTR _dsbd$[ebp+4], eax

; 2230 :     dsbd.lpwfxFormat = &wfxFormat;

  000f2	8d 4d e4	 lea	 ecx, DWORD PTR _wfxFormat$[ebp]
  000f5	89 4d d4	 mov	 DWORD PTR _dsbd$[ebp+12], ecx

; 2231 :     dsbd.dwBufferBytes = dwLeadIn + dwImpulseLength + dwRollOff;

  000f8	8b 55 1c	 mov	 edx, DWORD PTR _dwLeadIn$[ebp]
  000fb	03 55 c4	 add	 edx, DWORD PTR _dwImpulseLength$[ebp]
  000fe	03 55 20	 add	 edx, DWORD PTR _dwRollOff$[ebp]
  00101	89 55 d0	 mov	 DWORD PTR _dsbd$[ebp+8], edx

; 2232 :     dsbd.lpMixBins = pMixBins;

  00104	8b 45 24	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00107	89 45 d8	 mov	 DWORD PTR _dsbd$[ebp+16], eax

; 2233 : 
; 2234 :     hr = ValidateResult(DirectSoundCreateBuffer(&dsbd, &pBuffer));

  0010a	8d 4d f8	 lea	 ecx, DWORD PTR _pBuffer$[ebp]
  0010d	51		 push	 ecx
  0010e	8d 55 c8	 lea	 edx, DWORD PTR _dsbd$[ebp]
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 _DirectSoundCreateBuffer@8
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0011d	89 45 c0	 mov	 DWORD PTR _hr$[ebp], eax

; 2235 : 
; 2236 :     //
; 2237 :     // Write the audio data
; 2238 :     //
; 2239 : 
; 2240 :     if(SUCCEEDED(hr))

  00120	83 7d c0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00124	7c 28		 jl	 SHORT $L36708

; 2241 :     {
; 2242 :         hr = ValidateResult(pBuffer->Lock(dwLeadIn, dwImpulseLength, &pvLock, &dwLock, NULL, NULL, 0));

  00126	6a 00		 push	 0
  00128	6a 00		 push	 0
  0012a	6a 00		 push	 0
  0012c	8d 45 fc	 lea	 eax, DWORD PTR _dwLock$[ebp]
  0012f	50		 push	 eax
  00130	8d 4d e0	 lea	 ecx, DWORD PTR _pvLock$[ebp]
  00133	51		 push	 ecx
  00134	8b 55 c4	 mov	 edx, DWORD PTR _dwImpulseLength$[ebp]
  00137	52		 push	 edx
  00138	8b 45 1c	 mov	 eax, DWORD PTR _dwLeadIn$[ebp]
  0013b	50		 push	 eax
  0013c	8b 4d f8	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  0013f	51		 push	 ecx
  00140	e8 00 00 00 00	 call	 ?Lock@IDirectSoundBuffer@@QAGJKKPAPAXPAK01K@Z ; IDirectSoundBuffer::Lock
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  0014b	89 45 c0	 mov	 DWORD PTR _hr$[ebp], eax
$L36708:

; 2243 :         // hr = ValidateResult(pBuffer->Lock(0, dsbd.dwBufferBytes, &pvLock, &dwLock, NULL, NULL, 0));
; 2244 :     }
; 2245 : 
; 2246 :     if(SUCCEEDED(hr))

  0014e	83 7d c0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00152	7c 1d		 jl	 SHORT $L36710

; 2247 :     {
; 2248 :         GenerateTone(pvLock, dwLock, dwSamplesPerSec, dwBitsPerSample, dwChannelCount, dwToneFrequency);

  00154	8b 55 18	 mov	 edx, DWORD PTR _dwToneFrequency$[ebp]
  00157	52		 push	 edx
  00158	8b 45 14	 mov	 eax, DWORD PTR _dwChannelCount$[ebp]
  0015b	50		 push	 eax
  0015c	8b 4d 10	 mov	 ecx, DWORD PTR _dwBitsPerSample$[ebp]
  0015f	51		 push	 ecx
  00160	8b 55 0c	 mov	 edx, DWORD PTR _dwSamplesPerSec$[ebp]
  00163	52		 push	 edx
  00164	8b 45 fc	 mov	 eax, DWORD PTR _dwLock$[ebp]
  00167	50		 push	 eax
  00168	8b 4d e0	 mov	 ecx, DWORD PTR _pvLock$[ebp]
  0016b	51		 push	 ecx
  0016c	e8 00 00 00 00	 call	 ?GenerateTone@@YGXPAXKKKKK@Z ; GenerateTone
$L36710:

; 2249 :     }
; 2250 : 
; 2251 :     if(SUCCEEDED(hr))

  00171	83 7d c0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00175	7c 1e		 jl	 SHORT $L36712

; 2252 :     {
; 2253 :         hr = ValidateResult(pBuffer->Unlock(pvLock, dwLock, NULL, 0));

  00177	6a 00		 push	 0
  00179	6a 00		 push	 0
  0017b	8b 55 fc	 mov	 edx, DWORD PTR _dwLock$[ebp]
  0017e	52		 push	 edx
  0017f	8b 45 e0	 mov	 eax, DWORD PTR _pvLock$[ebp]
  00182	50		 push	 eax
  00183	8b 4d f8	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00186	51		 push	 ecx
  00187	e8 00 00 00 00	 call	 ?Unlock@IDirectSoundBuffer@@QAGJPAXK0K@Z ; IDirectSoundBuffer::Unlock
  0018c	50		 push	 eax
  0018d	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00192	89 45 c0	 mov	 DWORD PTR _hr$[ebp], eax
$L36712:

; 2254 :     }
; 2255 : 
; 2256 :     //
; 2257 :     // Success
; 2258 :     //
; 2259 : 
; 2260 :     if(SUCCEEDED(hr))

  00195	83 7d c0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00199	7c 0a		 jl	 SHORT $L36714

; 2261 :     {
; 2262 :         *ppBuffer = pBuffer;

  0019b	8b 55 28	 mov	 edx, DWORD PTR _ppBuffer$[ebp]
  0019e	8b 45 f8	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  001a1	89 02		 mov	 DWORD PTR [edx], eax

; 2263 :     }
; 2264 :     else

  001a3	eb 16		 jmp	 SHORT $L36715
$L36714:

; 2265 :     {
; 2266 :         RELEASE(pBuffer);

  001a5	83 7d f8 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  001a9	74 10		 je	 SHORT $L36715
  001ab	8b 4d f8	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  001ae	51		 push	 ecx
  001af	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  001b4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L36715:

; 2267 :     }
; 2268 : 
; 2269 :     return hr;

  001bb	8b 45 c0	 mov	 eax, DWORD PTR _hr$[ebp]

; 2270 : }

  001be	8b e5		 mov	 esp, ebp
  001c0	5d		 pop	 ebp
  001c1	c2 24 00	 ret	 36			; 00000024H
?CreateImpulseBuffer@@YGJKKKKKKKPBU_DSMIXBINS@@PAPAUIDirectSoundBuffer@@@Z ENDP ; CreateImpulseBuffer
DSOUND	ENDS
PUBLIC	?FlushStream@@YGJPAUIDirectSoundStream@@KKH@Z	; FlushStream
PUBLIC	?WaitStream@@YGJPAUIDirectSoundStream@@H@Z	; WaitStream
PUBLIC	?FlushEx@IDirectSoundStream@@QAGJ_JK@Z		; IDirectSoundStream::FlushEx
PUBLIC	??_C@_0CB@PNPADMFK@Flushing?5stream?5?$CIdelayed?5?$CFlu?5ms?$CJ@ ; `string'
PUBLIC	??_C@_0BA@FAJAIHGA@Flushing?5stream?$AA@	; `string'
;	COMDAT ??_C@_0CB@PNPADMFK@Flushing?5stream?5?$CIdelayed?5?$CFlu?5ms?$CJ@
DSOUND_RD	SEGMENT
??_C@_0CB@PNPADMFK@Flushing?5stream?5?$CIdelayed?5?$CFlu?5ms?$CJ@ DB 'Flu'
	DB	'shing stream (delayed %lu ms)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@FAJAIHGA@Flushing?5stream?$AA@
DSOUND_RD	SEGMENT
??_C@_0BA@FAJAIHGA@Flushing?5stream?$AA@ DB 'Flushing stream', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?FlushStream@@YGJPAUIDirectSoundStream@@KKH@Z
DSOUND	SEGMENT
_hr$ = -12
_rtTimeStamp$ = -8
_pStream$ = 8
_dwFlags$ = 12
_dwDelay$ = 16
_fWait$ = 20
?FlushStream@@YGJPAUIDirectSoundStream@@KKH@Z PROC NEAR	; FlushStream, COMDAT

; 2302 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 2303 :     REFERENCE_TIME          rtTimeStamp = -(LONGLONG)dwDelay * 10000;

  00006	8b 45 10	 mov	 eax, DWORD PTR _dwDelay$[ebp]
  00009	33 c9		 xor	 ecx, ecx
  0000b	f7 d8		 neg	 eax
  0000d	83 d1 00	 adc	 ecx, 0
  00010	f7 d9		 neg	 ecx
  00012	6a 00		 push	 0
  00014	68 10 27 00 00	 push	 10000			; 00002710H
  00019	51		 push	 ecx
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __allmul
  00020	89 45 f8	 mov	 DWORD PTR _rtTimeStamp$[ebp], eax
  00023	89 55 fc	 mov	 DWORD PTR _rtTimeStamp$[ebp+4], edx

; 2304 :     HRESULT                 hr;
; 2305 : 
; 2306 :     if(dwDelay)

  00026	83 7d 10 00	 cmp	 DWORD PTR _dwDelay$[ebp], 0
  0002a	74 13		 je	 SHORT $L36726

; 2307 :     {
; 2308 :         DPF_TEST("Flushing stream (delayed %lu ms)", dwDelay);

  0002c	8b 55 10	 mov	 edx, DWORD PTR _dwDelay$[ebp]
  0002f	52		 push	 edx
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@PNPADMFK@Flushing?5stream?5?$CIdelayed?5?$CFlu?5ms?$CJ@
  00035	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  0003a	83 c4 08	 add	 esp, 8

; 2309 :     }
; 2310 :     else

  0003d	eb 0d		 jmp	 SHORT $L36728
$L36726:

; 2311 :     {
; 2312 :         DPF_TEST("Flushing stream");

  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@FAJAIHGA@Flushing?5stream?$AA@
  00044	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  00049	83 c4 04	 add	 esp, 4
$L36728:

; 2313 :     }
; 2314 : 
; 2315 :     hr = ValidateResult(pStream->FlushEx(rtTimeStamp, dwFlags));

  0004c	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _rtTimeStamp$[ebp+4]
  00053	51		 push	 ecx
  00054	8b 55 f8	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp]
  00057	52		 push	 edx
  00058	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?FlushEx@IDirectSoundStream@@QAGJ_JK@Z ; IDirectSoundStream::FlushEx
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00067	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 2316 : 
; 2317 :     if(SUCCEEDED(hr) && fWait)

  0006a	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0006e	7c 14		 jl	 SHORT $L36731
  00070	83 7d 14 00	 cmp	 DWORD PTR _fWait$[ebp], 0
  00074	74 0e		 je	 SHORT $L36731

; 2318 :     {
; 2319 :         hr = WaitStream(pStream, FALSE);

  00076	6a 00		 push	 0
  00078	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ?WaitStream@@YGJPAUIDirectSoundStream@@H@Z ; WaitStream
  00081	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L36731:

; 2320 :     }
; 2321 : 
; 2322 :     return hr;

  00084	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 2323 : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 10 00	 ret	 16			; 00000010H
?FlushStream@@YGJPAUIDirectSoundStream@@KKH@Z ENDP	; FlushStream
DSOUND	ENDS
EXTRN	_IDirectSoundStream_FlushEx@16:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?FlushEx@IDirectSoundStream@@QAGJ_JK@Z
DSOUND	SEGMENT
_this$ = 8
_rtTimeStamp$ = 12
_dwFlags$ = 20
?FlushEx@IDirectSoundStream@@QAGJ_JK@Z PROC NEAR	; IDirectSoundStream::FlushEx, COMDAT

; 2377 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2378 :         return IDirectSoundStream_FlushEx(this, rtTimeStamp, dwFlags);

  00003	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _rtTimeStamp$[ebp+4]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _IDirectSoundStream_FlushEx@16

; 2379 :     }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
?FlushEx@IDirectSoundStream@@QAGJ_JK@Z ENDP		; IDirectSoundStream::FlushEx
DSOUND	ENDS
PUBLIC	??_C@_09OMEOKDLH@Stream?5?$CFs?$AA@		; `string'
;	COMDAT ??_C@_09OMEOKDLH@Stream?5?$CFs?$AA@
; File c:\xbox\private\windows\directx\dsound\test\util.cpp
DSOUND_RD	SEGMENT
??_C@_09OMEOKDLH@Stream?5?$CFs?$AA@ DB 'Stream %s', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?WaitStream@@YGJPAUIDirectSoundStream@@H@Z
DSOUND	SEGMENT
tv78 = -20
_hr$ = -16
_dwStatus$ = -12
_dwWaitStatus$ = -8
_dwStatusMask$ = -4
_pStream$ = 8
_fPlaying$ = 12
?WaitStream@@YGJPAUIDirectSoundStream@@H@Z PROC NEAR	; WaitStream, COMDAT

; 2352 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 2353 :     const DWORD             dwStatusMask    = DSSTREAMSTATUS_PLAYING;

  00006	c7 45 fc 00 00
	01 00		 mov	 DWORD PTR _dwStatusMask$[ebp], 65536 ; 00010000H

; 2354 :     const DWORD             dwWaitStatus    = fPlaying ? DSSTREAMSTATUS_PLAYING : 0;

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _fPlaying$[ebp]
  00010	f7 d8		 neg	 eax
  00012	1b c0		 sbb	 eax, eax
  00014	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  00019	89 45 f8	 mov	 DWORD PTR _dwWaitStatus$[ebp], eax
$L36741:

; 2355 :     DWORD                   dwStatus;
; 2356 :     HRESULT                 hr;
; 2357 : 
; 2358 :     while(TRUE)

  0001c	b9 01 00 00 00	 mov	 ecx, 1
  00021	85 c9		 test	 ecx, ecx
  00023	74 5e		 je	 SHORT $L36742

; 2359 :     {
; 2360 :         DirectSoundDoWork();

  00025	e8 00 00 00 00	 call	 _DirectSoundDoWork@0

; 2361 :         
; 2362 :         hr = ValidateResult(pStream->GetStatus(&dwStatus));

  0002a	8d 55 f4	 lea	 edx, DWORD PTR _dwStatus$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  00036	52		 push	 edx
  00037	ff 51 0c	 call	 DWORD PTR [ecx+12]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?ValidateResult@@YGJJ@Z	; ValidateResult
  00040	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 2363 : 
; 2364 :         if(FAILED(hr))

  00043	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00047	7d 02		 jge	 SHORT $L36744

; 2365 :         {
; 2366 :             break;

  00049	eb 38		 jmp	 SHORT $L36742
$L36744:

; 2367 :         }
; 2368 : 
; 2369 :         if((dwStatus & dwStatusMask) == dwWaitStatus)

  0004b	8b 45 f4	 mov	 eax, DWORD PTR _dwStatus$[ebp]
  0004e	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  00053	3b 45 f8	 cmp	 eax, DWORD PTR _dwWaitStatus$[ebp]
  00056	75 29		 jne	 SHORT $L36745

; 2370 :         {
; 2371 :             DPF_TEST("Stream %s", fPlaying ? "playing" : "stopped");

  00058	83 7d 0c 00	 cmp	 DWORD PTR _fPlaying$[ebp], 0
  0005c	74 09		 je	 SHORT $L37312
  0005e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], OFFSET FLAT:??_C@_07GDCKGKBF@playing?$AA@
  00065	eb 07		 jmp	 SHORT $L37313
$L37312:
  00067	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], OFFSET FLAT:??_C@_07IEOHBIGJ@stopped?$AA@
$L37313:
  0006e	8b 4d ec	 mov	 ecx, DWORD PTR tv78[ebp]
  00071	51		 push	 ecx
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09OMEOKDLH@Stream?5?$CFs?$AA@
  00077	e8 00 00 00 00	 call	 ?DPF_TEST@@YAXPBDZZ	; DPF_TEST
  0007c	83 c4 08	 add	 esp, 8

; 2372 :             break;

  0007f	eb 02		 jmp	 SHORT $L36742
$L36745:

; 2373 :         }
; 2374 :     }

  00081	eb 99		 jmp	 SHORT $L36741
$L36742:

; 2375 : 
; 2376 :     return hr;

  00083	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]

; 2377 : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
?WaitStream@@YGJPAUIDirectSoundStream@@H@Z ENDP		; WaitStream
DSOUND	ENDS
END
