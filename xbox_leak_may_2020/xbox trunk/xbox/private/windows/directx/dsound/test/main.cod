; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\main.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@FINCCBCF@?$CFlu?4?$CFlu?4?$CFlu?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_08BKKEJEEI@TESTDS?3?5?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@KJLIFALP@Test?5successful?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@FCACPDEC@Test?5failed?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DPF_TEST
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _main
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_DSoundBuildNumberD
PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	_fTestMe
PUBLIC	_fBreakTest
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
DSOUND_RD	SEGMENT
?dwMajor@?1??GetWaveBundlerVersion@@9@9 DD 01H		; `GetWaveBundlerVersion'::`2'::dwMajor
?dwMinor@?1??GetWaveBundlerVersion@@9@9 DD 00H		; `GetWaveBundlerVersion'::`2'::dwMinor
?dwBuild@?1??GetWaveBundlerVersion@@9@9 DD 01130H	; `GetWaveBundlerVersion'::`2'::dwBuild
DSOUND_RD	ENDS
DSOUND_RW	SEGMENT
_fTestMe DD	00H
_fBreakTest DD	00H
DSOUND_RW	ENDS
PUBLIC	_main
PUBLIC	??_C@_0BA@KJLIFALP@Test?5successful?$AA@	; `string'
PUBLIC	??_C@_0M@FCACPDEC@Test?5failed?$AA@		; `string'
EXTRN	_TestDirectSound@0:NEAR
EXTRN	_DirectSoundDumpMemoryUsage@4:NEAR
;	COMDAT ??_C@_0BA@KJLIFALP@Test?5successful?$AA@
; File c:\xbox\private\windows\directx\dsound\test\main.c
DSOUND_RD	SEGMENT
??_C@_0BA@KJLIFALP@Test?5successful?$AA@ DB 'Test successful', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@FCACPDEC@Test?5failed?$AA@
DSOUND_RD	SEGMENT
??_C@_0M@FCACPDEC@Test?5failed?$AA@ DB 'Test failed', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _main
DSOUND	SEGMENT
_hr$ = -4
_main	PROC NEAR					; COMDAT

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$L29554:

; 44   :     HRESULT                 hr;
; 45   :     
; 46   :     while(TRUE)

  00004	b8 01 00 00 00	 mov	 eax, 1
  00009	85 c0		 test	 eax, eax
  0000b	74 4b		 je	 SHORT $L29551

; 47   :     {
; 48   :         hr = DS_OK;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 49   : 
; 50   : #ifdef STALL_ON_START
; 51   : 
; 52   :         fTestMe = FALSE;
; 53   : 
; 54   :         DPF_TEST("");
; 55   :         DPF_TEST("******************************************************************************");
; 56   :         DPF_TEST("");
; 57   :         DPF_TEST("Enter the following into the debugger in order to start testing:");
; 58   :         DPF_TEST("ed testds!fTestMe 1;g");
; 59   :         DPF_TEST("");
; 60   :         DPF_TEST("******************************************************************************");
; 61   :         DPF_TEST("");
; 62   : 
; 63   :         while(!fTestMe);
; 64   : 
; 65   : #elif defined(BREAK_ON_START)
; 66   : 
; 67   :         __asm int 3

  00014	cc		 int	 3

; 68   : 
; 69   : #endif // STALL_ON_START
; 70   : 
; 71   :         fBreakTest = FALSE;

  00015	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _fBreakTest, 0

; 72   : 
; 73   :         if(SUCCEEDED(hr)) hr = TestDirectSound();

  0001f	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00023	7c 08		 jl	 SHORT $L29558
  00025	e8 00 00 00 00	 call	 _TestDirectSound@0
  0002a	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L29558:

; 74   :         // if(SUCCEEDED(hr)) hr = TestAc97Xmo(DSAC97_CHANNEL_ANALOG, DSAC97_MODE_PCM);
; 75   :         // if(SUCCEEDED(hr)) hr = TestAc97Xmo(DSAC97_CHANNEL_DIGITAL, DSAC97_MODE_PCM);
; 76   :         // if(SUCCEEDED(hr)) hr = TestAc97Xmo(DSAC97_CHANNEL_DIGITAL, DSAC97_MODE_ENCODED);
; 77   :         // if(SUCCEEDED(hr)) hr = TestMemoryUsage();
; 78   : 
; 79   :         if(SUCCEEDED(hr))

  0002d	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00031	7c 0f		 jl	 SHORT $L29560

; 80   :         {
; 81   :             DPF_TEST("Test successful");

  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@KJLIFALP@Test?5successful?$AA@
  00038	e8 00 00 00 00	 call	 _DPF_TEST
  0003d	83 c4 04	 add	 esp, 4

; 82   :         }
; 83   :         else

  00040	eb 0d		 jmp	 SHORT $L29562
$L29560:

; 84   :         {
; 85   :             DPF_TEST("Test failed");

  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@FCACPDEC@Test?5failed?$AA@
  00047	e8 00 00 00 00	 call	 _DPF_TEST
  0004c	83 c4 04	 add	 esp, 4
$L29562:

; 86   :         }
; 87   : 
; 88   :         DirectSoundDumpMemoryUsage(TRUE);

  0004f	6a 01		 push	 1
  00051	e8 00 00 00 00	 call	 _DirectSoundDumpMemoryUsage@4

; 89   :     }

  00056	eb ac		 jmp	 SHORT $L29554
$L29551:

; 90   : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_main	ENDP
DSOUND	ENDS
PUBLIC	??_C@_08BKKEJEEI@TESTDS?3?5?$AA@		; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	_vsprintf:NEAR
EXTRN	_OutputDebugStringA@4:NEAR
;	COMDAT ??_C@_08BKKEJEEI@TESTDS?3?5?$AA@
; File c:\xbox\private\windows\directx\dsound\test\testds.h
DSOUND_RD	SEGMENT
??_C@_08BKKEJEEI@TESTDS?3?5?$AA@ DB 'TESTDS: ', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
DSOUND_RD	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _DPF_TEST
DSOUND	SEGMENT
_va$ = -260
_szString$ = -256
_pszFormat$ = 8
_DPF_TEST PROC NEAR					; COMDAT

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H

; 34   :     CHAR                    szString[0x100];
; 35   :     va_list                 va;
; 36   : 
; 37   :     va_start(va, pszFormat);

  00009	8d 45 0c	 lea	 eax, DWORD PTR _pszFormat$[ebp+4]
  0000c	89 85 fc fe ff
	ff		 mov	 DWORD PTR _va$[ebp], eax

; 38   :     vsprintf(szString, pszFormat, va);

  00012	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _va$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR _pszFormat$[ebp]
  0001c	52		 push	 edx
  0001d	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szString$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _vsprintf
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 39   :     va_end(va);

  0002c	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _va$[ebp], 0

; 40   : 
; 41   :     OutputDebugStringA("TESTDS: ");

  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08BKKEJEEI@TESTDS?3?5?$AA@
  0003b	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 42   :     OutputDebugStringA(szString);

  00040	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _szString$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 43   :     OutputDebugStringA("\n");

  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00051	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 44   : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_DPF_TEST ENDP
DSOUND	ENDS
END
