; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\dotprod.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _DotProd@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_DotProd@12
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\dotprod.c
;	COMDAT _DotProd@12
_TEXT	SEGMENT
_pfVecA$ = 8
_pfVecB$ = 12
_iLength$ = 16
_DotProd@12 PROC NEAR					; COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 85   :    _asm{
; 86   :      
; 87   :       mov ebx, pfVecA;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pfVecA$[ebp]

; 88   :       mov eax, iLength;

  00007	8b 45 10	 mov	 eax, DWORD PTR _iLength$[ebp]

; 89   : 
; 90   :       mov edx, pfVecB;

  0000a	8b 55 0c	 mov	 edx, DWORD PTR _pfVecB$[ebp]

; 91   :       cmp eax, 6; 

  0000d	83 f8 06	 cmp	 eax, 6

; 92   : 
; 93   :       fldz;

  00010	d9 ee		 fldz

; 94   :       fld st(0);

  00012	d9 c0		 fld	 ST(0)

; 95   : 
; 96   :       jnge loop12;

  00014	7c 3e		 jl	 SHORT $loop12$897
$loop1$898:

; 97   : 
; 98   : loop1:
; 99   :       faddp st(1), st(0);         

  00016	de c1		 faddp	 ST(1), ST(0)

; 100  : 
; 101  :       fld DWORD PTR[ebx];

  00018	d9 03		 fld	 DWORD PTR [ebx]

; 102  : 
; 103  :       fmul DWORD PTR[edx];

  0001a	d8 0a		 fmul	 DWORD PTR [edx]

; 104  : 
; 105  :       fld DWORD PTR[ebx+4];

  0001c	d9 43 04	 fld	 DWORD PTR [ebx+4]

; 106  : 
; 107  :       fmul DWORD PTR[edx+4];

  0001f	d8 4a 04	 fmul	 DWORD PTR [edx+4]

; 108  : 
; 109  :       fld DWORD PTR[ebx+8];

  00022	d9 43 08	 fld	 DWORD PTR [ebx+8]

; 110  : 
; 111  :       fmul DWORD PTR[edx+8];

  00025	d8 4a 08	 fmul	 DWORD PTR [edx+8]

; 112  : 
; 113  :       fld DWORD PTR[ebx+12];

  00028	d9 43 0c	 fld	 DWORD PTR [ebx+12]

; 114  : 
; 115  :       fmul DWORD PTR[edx+12];

  0002b	d8 4a 0c	 fmul	 DWORD PTR [edx+12]

; 116  : 
; 117  :       fld DWORD PTR[ebx+16];

  0002e	d9 43 10	 fld	 DWORD PTR [ebx+16]

; 118  : 
; 119  :       fmul DWORD PTR[edx+16];

  00031	d8 4a 10	 fmul	 DWORD PTR [edx+16]

; 120  : 
; 121  :       fld DWORD PTR[ebx+20];

  00034	d9 43 14	 fld	 DWORD PTR [ebx+20]

; 122  : 
; 123  :       fmul DWORD PTR[edx+20];

  00037	d8 4a 14	 fmul	 DWORD PTR [edx+20]

; 124  :       fxch st(5);

  0003a	d9 cd		 fxch	 ST(5)

; 125  : 
; 126  :       faddp st(3),st(0);

  0003c	de c3		 faddp	 ST(3), ST(0)

; 127  : 
; 128  :       faddp st(3),st(0);

  0003e	de c3		 faddp	 ST(3), ST(0)

; 129  : 
; 130  :       faddp st(3),st(0);

  00040	de c3		 faddp	 ST(3), ST(0)

; 131  : 
; 132  :       faddp st(3),st(0);

  00042	de c3		 faddp	 ST(3), ST(0)

; 133  : 
; 134  :       sub eax, 6;

  00044	83 e8 06	 sub	 eax, 6

; 135  :       add edx ,24;

  00047	83 c2 18	 add	 edx, 24			; 00000018H

; 136  : 
; 137  :       faddp st(1),st(0);

  0004a	de c1		 faddp	 ST(1), ST(0)

; 138  : 
; 139  :       add ebx, 24;

  0004c	83 c3 18	 add	 ebx, 24			; 00000018H

; 140  :       cmp eax, 6;

  0004f	83 f8 06	 cmp	 eax, 6

; 141  :       
; 142  :       jge loop1;

  00052	7d c2		 jge	 SHORT $loop1$898
$loop12$897:

; 143  : loop12:
; 144  :       test eax, eax;

  00054	85 c0		 test	 eax, eax

; 145  : 
; 146  :       jz  exitdot;

  00056	74 0f		 je	 SHORT $exitdot$899
$loop2$900:

; 147  :       
; 148  : 
; 149  : loop2:         
; 150  :       faddp st(1),st(0);

  00058	de c1		 faddp	 ST(1), ST(0)

; 151  : 
; 152  :       fld DWORD PTR[ebx];

  0005a	d9 03		 fld	 DWORD PTR [ebx]

; 153  :       fmul DWORD PTR[edx];

  0005c	d8 0a		 fmul	 DWORD PTR [edx]

; 154  : 
; 155  :       add ebx, 4;

  0005e	83 c3 04	 add	 ebx, 4

; 156  :       add edx, 4;

  00061	83 c2 04	 add	 edx, 4

; 157  : 
; 158  :       dec eax;

  00064	48		 dec	 eax

; 159  :       jnz loop2;

  00065	75 f1		 jne	 SHORT $loop2$900
$exitdot$899:

; 160  : exitdot:
; 161  :       faddp st(1), st(0);

  00067	de c1		 faddp	 ST(1), ST(0)

; 162  : 
; 163  : 
; 164  :    }
; 165  : }

  00069	5b		 pop	 ebx
  0006a	5d		 pop	 ebp
  0006b	c2 0c 00	 ret	 12			; 0000000cH
_DotProd@12 ENDP
_TEXT	ENDS
END
