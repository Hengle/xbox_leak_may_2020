; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\wmaxmo.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0DL@IHPFEIKJ@c?3?2xbox?2private?2windows?2directx?2@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0M@PNONBBPM@pFileHeader?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0O@OMNKPMNK@ppMediaObject?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_07OEDNFCCJ@WMA?5XMO?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0P@OAMDHPDD@pCallback?5?$CB?$DN?50?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BC@DOEPKDPP@m_dwThreadId?5?$DN?$DN?50?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0M@GMBEFBHN@pszFileName?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0DE@JJOMFKMB@File?5Handle?5passed?5was?5opened?5as@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0FA@CDGIKHLH@?$CB?$CIdwMode?5?$CG?50x00000008?$CJ?5?$CG?$CG?5?$CCFile?5@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BL@INHPPMCG@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?5Called?6?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0EA@PHEDFEDD@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5SrcBufferOff@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0FE@BAEIOKE@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BC@BAJMHMG@m_state?5?$DN?50x?$CF08x?6?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0FA@ICEMBOCE@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0FC@KEFLEJPD@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BK@OANGKNJG@DRM?5FILES?5NOT?5SUPPORTED?$CB?6?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BM@BDJJPGNF@ThreadProc?3?5Leaving?5thread?6?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_07ENKCPKMK@m_state?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0M@ELFGPNAF@m_pCallback?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BD@PJHLJDDL@m_pCallbackContext?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_09EOJPIGFJ@pSrc?5?$DN?$DN?50?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0FI@FMNFLBLG@FALSE?5?$CG?$CG?5?$CC?5Run?5out?5of?5available?5@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0DJ@LFPKHOCD@Process?3?5Dequeued?5available?5cont@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0DG@CLMAKJCN@Process?3?5queuing?5pending?5context@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0M@NKNCPJJD@?$CBFAILED?$CIhr?$CJ?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0DA@FPHHMLEG@?$CIpDst?9?$DOdwMaxSize?5?$CF?5?$CI2?$CKm_hdr?4num_@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BE@JFMPINFA@Yielding?5execution?6?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BB@JKDIEABH@?5?5done?5playing?$CB?6?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BP@OAPJPPHK@?5?5stopping?5due?5to?5error?$CB?5?$CI?$CFd?$CJ?6?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0CF@CMOIEEND@WMAFileGetPCM?5?$CIthis?5?$CFx?$CJ?$CI0x?$CF08x?0?5@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BF@BEBGJNGB@?5?4?4?4got?5?$CFd?5samples?4?6?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0CL@MFMEJIE@Process?3?5Completing?5context?0?5pdw@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0EI@HDIJBGKF@Wmaxmo?5?$CI?$CFx?$CJ?3?5Process?3?5Completing@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_03LKCHMNCG@pMO?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BH@GCNGBKFP@m_dwLookaheadSize?5?$DN?$DN?50?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0CP@PGKCMHOO@?5CBGetData?$CI?$CFx?$CJ?5offset?3?50x?$CF08x?90x@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_06IECOAJOO@ppData?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0FM@DDKDMLPF@Wma?5decoder?5requested?5data?5at?5an@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0DM@LDCFGOP@WMAXMO?$CI?$CFx?$CJ?3?5GetData?3?5Wma?5ask?5for@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BM@CNDAKADA@ReadFile?3?5no?5file?5I?1o?5done?6?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BE@JIGALKCG@m_dwSrcBufferOffset?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0DE@BDADEBAI@?5CBGetData?5Reading?5ahead?0?5offset@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0EP@NOIIJNPM@ReadFile?$CI?$CFx?$CJ?3?5calling?5readfile?5w@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0CH@NJHIGFAA@Wmaxmo?3?3readfile?3?5Read?5failed?5wi@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0EM@FFECJCLO@WmaXMO?3?3ReadFile?$CI?$CFx?$CJ?3?5completing@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_05GFDKCJGP@pInfo?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0CF@DLIAHMHB@WMAFileContentDesc?5failed?5with?50@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BE@NEMALPHB@m_pCallback?5?$DN?$DN?5NULL?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0CP@HCGMDPBD@WmaXmo?5only?5supports?5querying?5cu@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0GB@GGKMBCPH@?$CIlOffset?5?$DN?$DN?50?$CJ?5?$CG?$CG?5?$CIdwOrigin?5?$DN?$DN?5F@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BJ@BCKKGIMM@Unknown?5sample?5rate?3?5?$CFd?6?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
WMADECXMO_RW	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RW	ENDS
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _IsEqualGUID@8
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _==@8
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT @InterlockedIncrement@4
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT @InterlockedDecrement@4
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _Direct3D_AddRef@0
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _Direct3D_Release@0
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DDevice_BeginScene@0
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DDevice_EndScene@0
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DPalette_Unlock@4
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _sqrtf@4
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?AddRef@CWMAXMediaObject@@UAGKXZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?Release@CWMAXMediaObject@@UAGKXZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?GetFileHeader@CWMAXMediaObject@@UAGJPAU_WMAXMOFileHeader@@@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??_GCWMAXMediaObject@@QAEPAXI@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _WmaCreateInMemoryDecoderEx@20
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _WmaCreateInMemoryDecoder@20
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _WmaCreateDecoderEx@32
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _WmaCreateDecoder@32
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0CWMAXMediaObject@@QAE@XZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0XWmaFileMediaObject@@QAE@XZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0XFileMediaObject@@QAE@XZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??0XMediaObject@@QAE@XZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ??1CWMAXMediaObject@@QAE@XZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?Reset@CWMAXMediaObject@@AAEXXZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?InitializeIntermediate@CWMAXMediaObject@@QAEJP6GKPAXKKPAPAX@Z0KPAUtWAVEFORMATEX@@@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?Initialize@CWMAXMediaObject@@QAGJPBDPAXHKKKPAUtWAVEFORMATEX@@@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?Flush@CWMAXMediaObject@@UAGJXZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?WmaXmoThreadProc@@YGKPAX@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?ThreadProc@CWMAXMediaObject@@IAEXXZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?Process@CWMAXMediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?Decode@CWMAXMediaObject@@QAGJPBU_XMEDIAPACKET@@@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _WMAFileCBGetData@20
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?GetData@CWMAXMediaObject@@QAEKKKPAPAX@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?ReadWmaDataFromFile@CWMAXMediaObject@@AAEJPAXKPAU_WMAXMO_ASYNC_CONTEXT@@@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?GetInfo@CWMAXMediaObject@@UAGJPAU_XMEDIAINFO@@@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?Discontinuity@CWMAXMediaObject@@UAGJXZ
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?GetStatus@CWMAXMediaObject@@UAGJPAK@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?GetFileContentDescription@CWMAXMediaObject@@UAGJPAU_WMAXMOFileContDesc@@@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?GetFormat@CWMAXMediaObject@@AAGJPAUtWAVEFORMATEX@@@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?Seek@CWMAXMediaObject@@UAGJJKPAK@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?GetLength@CWMAXMediaObject@@UAGJPAK@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT ?WMASampleRateToHz@CWMAXMediaObject@@AAEKW4tagWMAFileSampleRate@@@Z
WMADECXMO	SEGMENT PARA USE32 PUBLIC ''
WMADECXMO	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_7XWmaFileMediaObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7XFileMediaObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT ??_7XMediaObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CWMAXMediaObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
WMADECXMO_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADECXMO_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, WMADECXMO_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_DSoundBuildNumberD
PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	?g_WmaXmoDebugLevel@@3KA			; g_WmaXmoDebugLevel
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
WMADECXMO_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
WMADECXMO_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
WMADECXMO_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
WMADECXMO_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
WMADECXMO_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
WMADECXMO_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
WMADECXMO_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
WMADECXMO_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
WMADECXMO_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
WMADECXMO_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
WMADECXMO_RW	SEGMENT
?g_WmaXmoDebugLevel@@3KA DD 01H				; g_WmaXmoDebugLevel
WMADECXMO_RW	ENDS
PUBLIC	_WmaCreateInMemoryDecoder@20
PUBLIC	_WmaCreateInMemoryDecoderEx@20
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\wmaxmo\wmaxmo.cpp
;	COMDAT _WmaCreateInMemoryDecoderEx@20
WMADECXMO	SEGMENT
_hr$ = -4
_pCallback$ = 8
_pCallbackContext$ = 12
_dwYieldRate$ = 16
_pwfxCompressed$ = 20
_ppMediaObject$ = 24
_WmaCreateInMemoryDecoderEx@20 PROC NEAR		; COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 63   : 
; 64   :     HRESULT hr = S_OK;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 65   : 
; 66   :     hr = WmaCreateInMemoryDecoder(
; 67   :         pCallback,
; 68   :         pCallbackContext,
; 69   :         dwYieldRate,
; 70   :         pwfxCompressed,
; 71   :         (XMediaObject **)ppMediaObject);

  0000b	8b 45 18	 mov	 eax, DWORD PTR _ppMediaObject$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 14	 mov	 ecx, DWORD PTR _pwfxCompressed$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 10	 mov	 edx, DWORD PTR _dwYieldRate$[ebp]
  00016	52		 push	 edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR _pCallbackContext$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 _WmaCreateInMemoryDecoder@20
  00024	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 72   : 
; 73   :     return hr;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 74   : 
; 75   : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 14 00	 ret	 20			; 00000014H
_WmaCreateInMemoryDecoderEx@20 ENDP
WMADECXMO	ENDS
PUBLIC	??_C@_0O@OMNKPMNK@ppMediaObject?$AA@		; `string'
PUBLIC	??_C@_07OEDNFCCJ@WMA?5XMO?$AA@			; `string'
PUBLIC	??_C@_0P@OAMDHPDD@pCallback?5?$CB?$DN?50?$AA@	; `string'
PUBLIC	??0CWMAXMediaObject@@QAE@XZ			; CWMAXMediaObject::CWMAXMediaObject
PUBLIC	?InitializeIntermediate@CWMAXMediaObject@@QAEJP6GKPAXKKPAPAX@Z0KPAUtWAVEFORMATEX@@@Z ; CWMAXMediaObject::InitializeIntermediate
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	_RtlRip@12:NEAR
;	COMDAT ??_C@_0O@OMNKPMNK@ppMediaObject?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0O@OMNKPMNK@ppMediaObject?$AA@ DB 'ppMediaObject', 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_07OEDNFCCJ@WMA?5XMO?$AA@
WMADECXMO_RD	SEGMENT
??_C@_07OEDNFCCJ@WMA?5XMO?$AA@ DB 'WMA XMO', 00H	; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0P@OAMDHPDD@pCallback?5?$CB?$DN?50?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0P@OAMDHPDD@pCallback?5?$CB?$DN?50?$AA@ DB 'pCallback != 0', 00H ; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT _WmaCreateInMemoryDecoder@20
WMADECXMO	SEGMENT
tv81 = -16
$T29330 = -12
_hr$ = -8
_pXMO$ = -4
_pCallback$ = 8
_pCallbackContext$ = 12
_dwYieldRate$ = 16
_pwfxCompressed$ = 20
_ppMediaObject$ = 24
_WmaCreateInMemoryDecoder@20 PROC NEAR			; COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
$L28668:

; 85   : 
; 86   : 
; 87   :     HRESULT                 hr;
; 88   :     MYCHECK(ppMediaObject);

  00006	83 7d 18 00	 cmp	 DWORD PTR _ppMediaObject$[ebp], 0
  0000a	75 11		 jne	 SHORT $L28669
  0000c	6a 00		 push	 0
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@OMNKPMNK@ppMediaObject?$AA@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OEDNFCCJ@WMA?5XMO?$AA@
  00018	e8 00 00 00 00	 call	 _RtlRip@12
$L28669:
  0001d	33 c0		 xor	 eax, eax
  0001f	85 c0		 test	 eax, eax
  00021	75 e3		 jne	 SHORT $L28668

; 89   :     
; 90   :     CWMAXMediaObject* pXMO;
; 91   :         
; 92   :     if (dwYieldRate == 0) {

  00023	83 7d 10 00	 cmp	 DWORD PTR _dwYieldRate$[ebp], 0
  00027	75 07		 jne	 SHORT $L28675

; 93   : 
; 94   :         //
; 95   :         // never yield
; 96   :         //
; 97   : 
; 98   :         dwYieldRate = 1000;

  00029	c7 45 10 e8 03
	00 00		 mov	 DWORD PTR _dwYieldRate$[ebp], 1000 ; 000003e8H
$L28675:

; 99   : 
; 100  :     }
; 101  : 
; 102  :     //
; 103  :     // pcallbackBack
; 104  :     //
; 105  : 
; 106  :     if (pCallback == NULL) {

  00030	83 7d 08 00	 cmp	 DWORD PTR _pCallback$[ebp], 0
  00034	75 30		 jne	 SHORT $L28676
$L28677:

; 107  : 
; 108  :         MYCHECK(pCallback != NULL);

  00036	83 7d 08 00	 cmp	 DWORD PTR _pCallback$[ebp], 0
  0003a	75 11		 jne	 SHORT $L28678
  0003c	6a 00		 push	 0
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@OAMDHPDD@pCallback?5?$CB?$DN?50?$AA@
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OEDNFCCJ@WMA?5XMO?$AA@
  00048	e8 00 00 00 00	 call	 _RtlRip@12
$L28678:
  0004d	33 c9		 xor	 ecx, ecx
  0004f	85 c9		 test	 ecx, ecx
  00051	75 e3		 jne	 SHORT $L28677

; 109  :         *ppMediaObject = NULL;

  00053	8b 55 18	 mov	 edx, DWORD PTR _ppMediaObject$[ebp]
  00056	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 110  :         return E_FAIL;

  0005c	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00061	e9 80 00 00 00	 jmp	 $L28666
$L28676:

; 111  : 
; 112  :     }
; 113  : 
; 114  :     pXMO = new CWMAXMediaObject();

  00066	68 b8 00 00 00	 push	 184			; 000000b8H
  0006b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00070	83 c4 04	 add	 esp, 4
  00073	89 45 f4	 mov	 DWORD PTR $T29330[ebp], eax
  00076	83 7d f4 00	 cmp	 DWORD PTR $T29330[ebp], 0
  0007a	74 0d		 je	 SHORT $L29331
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR $T29330[ebp]
  0007f	e8 00 00 00 00	 call	 ??0CWMAXMediaObject@@QAE@XZ ; CWMAXMediaObject::CWMAXMediaObject
  00084	89 45 f0	 mov	 DWORD PTR tv81[ebp], eax
  00087	eb 07		 jmp	 SHORT $L29332
$L29331:
  00089	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$L29332:
  00090	8b 45 f0	 mov	 eax, DWORD PTR tv81[ebp]
  00093	89 45 fc	 mov	 DWORD PTR _pXMO$[ebp], eax

; 115  :     if (pXMO == NULL) {

  00096	83 7d fc 00	 cmp	 DWORD PTR _pXMO$[ebp], 0
  0009a	75 07		 jne	 SHORT $L28685

; 116  :         return E_OUTOFMEMORY;

  0009c	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  000a1	eb 43		 jmp	 SHORT $L28666
$L28685:

; 117  :     }    
; 118  : 
; 119  :     //
; 120  :     // initialize wma xmo
; 121  :     //
; 122  : 
; 123  :     hr = pXMO->InitializeIntermediate(
; 124  :         pCallback,
; 125  :         pCallbackContext,
; 126  :         dwYieldRate,
; 127  :         pwfxCompressed);

  000a3	8b 4d 14	 mov	 ecx, DWORD PTR _pwfxCompressed$[ebp]
  000a6	51		 push	 ecx
  000a7	8b 55 10	 mov	 edx, DWORD PTR _dwYieldRate$[ebp]
  000aa	52		 push	 edx
  000ab	8b 45 0c	 mov	 eax, DWORD PTR _pCallbackContext$[ebp]
  000ae	50		 push	 eax
  000af	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  000b2	51		 push	 ecx
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR _pXMO$[ebp]
  000b6	e8 00 00 00 00	 call	 ?InitializeIntermediate@CWMAXMediaObject@@QAEJP6GKPAXKKPAPAX@Z0KPAUtWAVEFORMATEX@@@Z ; CWMAXMediaObject::InitializeIntermediate
  000bb	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 128  : 
; 129  : 
; 130  :     if (SUCCEEDED(hr)) {

  000be	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c2	7c 0a		 jl	 SHORT $L28688

; 131  : 
; 132  :         *ppMediaObject = (XMediaObject *) pXMO;

  000c4	8b 55 18	 mov	 edx, DWORD PTR _ppMediaObject$[ebp]
  000c7	8b 45 fc	 mov	 eax, DWORD PTR _pXMO$[ebp]
  000ca	89 02		 mov	 DWORD PTR [edx], eax

; 133  : 
; 134  :     } else {

  000cc	eb 15		 jmp	 SHORT $L28690
$L28688:

; 135  : 
; 136  :         *ppMediaObject = NULL;

  000ce	8b 4d 18	 mov	 ecx, DWORD PTR _ppMediaObject$[ebp]
  000d1	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 137  :         pXMO->Release();

  000d7	8b 55 fc	 mov	 edx, DWORD PTR _pXMO$[ebp]
  000da	8b 02		 mov	 eax, DWORD PTR [edx]
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _pXMO$[ebp]
  000df	51		 push	 ecx
  000e0	ff 50 04	 call	 DWORD PTR [eax+4]
$L28690:

; 138  : 
; 139  :     }
; 140  : 
; 141  :     return hr;

  000e3	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L28666:

; 142  : 
; 143  : }

  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 14 00	 ret	 20			; 00000014H
_WmaCreateInMemoryDecoder@20 ENDP
WMADECXMO	ENDS
PUBLIC	_WmaCreateDecoder@32
PUBLIC	_WmaCreateDecoderEx@32
; Function compile flags: /Odt
;	COMDAT _WmaCreateDecoderEx@32
WMADECXMO	SEGMENT
_hr$ = -4
_pszFileName$ = 8
_hFile$ = 12
_fAsyncMode$ = 16
_dwLookaheadBufferSize$ = 20
_dwMaxPackets$ = 24
_dwYieldRate$ = 28
_pwfxCompressed$ = 32
_ppMediaObject$ = 36
_WmaCreateDecoderEx@32 PROC NEAR			; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 156  :     HRESULT hr = S_OK;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 157  : 
; 158  :     hr = WmaCreateDecoder(
; 159  :         pszFileName, 
; 160  :         hFile,
; 161  :         fAsyncMode,
; 162  :         dwLookaheadBufferSize,
; 163  :         dwMaxPackets,
; 164  :         dwYieldRate,
; 165  :         pwfxCompressed,
; 166  :         (XFileMediaObject **)ppMediaObject);

  0000b	8b 45 24	 mov	 eax, DWORD PTR _ppMediaObject$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 20	 mov	 ecx, DWORD PTR _pwfxCompressed$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 1c	 mov	 edx, DWORD PTR _dwYieldRate$[ebp]
  00016	52		 push	 edx
  00017	8b 45 18	 mov	 eax, DWORD PTR _dwMaxPackets$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 14	 mov	 ecx, DWORD PTR _dwLookaheadBufferSize$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR _fAsyncMode$[ebp]
  00022	52		 push	 edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR _hFile$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 _WmaCreateDecoder@32
  00030	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 167  : 
; 168  :     return hr;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 169  : 
; 170  : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 20 00	 ret	 32			; 00000020H
_WmaCreateDecoderEx@32 ENDP
WMADECXMO	ENDS
PUBLIC	?Initialize@CWMAXMediaObject@@QAGJPBDPAXHKKKPAUtWAVEFORMATEX@@@Z ; CWMAXMediaObject::Initialize
; Function compile flags: /Odt
;	COMDAT _WmaCreateDecoder@32
WMADECXMO	SEGMENT
tv75 = -16
$T29339 = -12
_hr$ = -8
_pXMO$ = -4
_pszFileName$ = 8
_hFile$ = 12
_fAsyncMode$ = 16
_dwLookaheadBufferSize$ = 20
_dwMaxPackets$ = 24
_dwYieldRate$ = 28
_pwfxCompressed$ = 32
_ppMediaObject$ = 36
_WmaCreateDecoder@32 PROC NEAR				; COMDAT

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
$L28715:

; 184  :     HRESULT                 hr;
; 185  :     MYCHECK(ppMediaObject);

  00006	83 7d 24 00	 cmp	 DWORD PTR _ppMediaObject$[ebp], 0
  0000a	75 11		 jne	 SHORT $L28716
  0000c	6a 00		 push	 0
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@OMNKPMNK@ppMediaObject?$AA@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OEDNFCCJ@WMA?5XMO?$AA@
  00018	e8 00 00 00 00	 call	 _RtlRip@12
$L28716:
  0001d	33 c0		 xor	 eax, eax
  0001f	85 c0		 test	 eax, eax
  00021	75 e3		 jne	 SHORT $L28715

; 186  :     
; 187  :     CWMAXMediaObject* pXMO;
; 188  :         
; 189  :     if (dwYieldRate == 0) {

  00023	83 7d 1c 00	 cmp	 DWORD PTR _dwYieldRate$[ebp], 0
  00027	75 07		 jne	 SHORT $L28720

; 190  : 
; 191  :         //
; 192  :         // never yield
; 193  :         //
; 194  : 
; 195  :         dwYieldRate = 1000;

  00029	c7 45 1c e8 03
	00 00		 mov	 DWORD PTR _dwYieldRate$[ebp], 1000 ; 000003e8H
$L28720:

; 196  : 
; 197  :     }
; 198  : 
; 199  :     pXMO = new CWMAXMediaObject();

  00030	68 b8 00 00 00	 push	 184			; 000000b8H
  00035	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 45 f4	 mov	 DWORD PTR $T29339[ebp], eax
  00040	83 7d f4 00	 cmp	 DWORD PTR $T29339[ebp], 0
  00044	74 0d		 je	 SHORT $L29340
  00046	8b 4d f4	 mov	 ecx, DWORD PTR $T29339[ebp]
  00049	e8 00 00 00 00	 call	 ??0CWMAXMediaObject@@QAE@XZ ; CWMAXMediaObject::CWMAXMediaObject
  0004e	89 45 f0	 mov	 DWORD PTR tv75[ebp], eax
  00051	eb 07		 jmp	 SHORT $L29341
$L29340:
  00053	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$L29341:
  0005a	8b 4d f0	 mov	 ecx, DWORD PTR tv75[ebp]
  0005d	89 4d fc	 mov	 DWORD PTR _pXMO$[ebp], ecx

; 200  :     if (pXMO == NULL) {

  00060	83 7d fc 00	 cmp	 DWORD PTR _pXMO$[ebp], 0
  00064	75 07		 jne	 SHORT $L28723

; 201  :         return E_OUTOFMEMORY;

  00066	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  0006b	eb 50		 jmp	 SHORT $L28713
$L28723:

; 202  :     }    
; 203  : 
; 204  :     //
; 205  :     // initialize wma xmo
; 206  :     //
; 207  : 
; 208  :     hr = pXMO->Initialize(pszFileName,
; 209  :                           hFile,
; 210  :                           fAsyncMode,
; 211  :                           dwLookaheadBufferSize,
; 212  :                           dwMaxPackets,
; 213  :                           dwYieldRate,
; 214  :                           pwfxCompressed);

  0006d	8b 55 20	 mov	 edx, DWORD PTR _pwfxCompressed$[ebp]
  00070	52		 push	 edx
  00071	8b 45 1c	 mov	 eax, DWORD PTR _dwYieldRate$[ebp]
  00074	50		 push	 eax
  00075	8b 4d 18	 mov	 ecx, DWORD PTR _dwMaxPackets$[ebp]
  00078	51		 push	 ecx
  00079	8b 55 14	 mov	 edx, DWORD PTR _dwLookaheadBufferSize$[ebp]
  0007c	52		 push	 edx
  0007d	8b 45 10	 mov	 eax, DWORD PTR _fAsyncMode$[ebp]
  00080	50		 push	 eax
  00081	8b 4d 0c	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00084	51		 push	 ecx
  00085	8b 55 08	 mov	 edx, DWORD PTR _pszFileName$[ebp]
  00088	52		 push	 edx
  00089	8b 45 fc	 mov	 eax, DWORD PTR _pXMO$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?Initialize@CWMAXMediaObject@@QAGJPBDPAXHKKKPAUtWAVEFORMATEX@@@Z ; CWMAXMediaObject::Initialize
  00092	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 215  :     
; 216  :     if (SUCCEEDED(hr)) {

  00095	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00099	7c 0a		 jl	 SHORT $L28726

; 217  : 
; 218  :         *ppMediaObject = pXMO;

  0009b	8b 4d 24	 mov	 ecx, DWORD PTR _ppMediaObject$[ebp]
  0009e	8b 55 fc	 mov	 edx, DWORD PTR _pXMO$[ebp]
  000a1	89 11		 mov	 DWORD PTR [ecx], edx

; 219  : 
; 220  :     } else {

  000a3	eb 15		 jmp	 SHORT $L28727
$L28726:

; 221  : 
; 222  :         *ppMediaObject = NULL;

  000a5	8b 45 24	 mov	 eax, DWORD PTR _ppMediaObject$[ebp]
  000a8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 223  :         pXMO->Release();

  000ae	8b 4d fc	 mov	 ecx, DWORD PTR _pXMO$[ebp]
  000b1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b3	8b 45 fc	 mov	 eax, DWORD PTR _pXMO$[ebp]
  000b6	50		 push	 eax
  000b7	ff 52 04	 call	 DWORD PTR [edx+4]
$L28727:

; 224  : 
; 225  :     }
; 226  : 
; 227  :     return hr;

  000ba	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L28713:

; 228  : }

  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 20 00	 ret	 32			; 00000020H
_WmaCreateDecoder@32 ENDP
WMADECXMO	ENDS
PUBLIC	??0XWmaFileMediaObject@@QAE@XZ			; XWmaFileMediaObject::XWmaFileMediaObject
PUBLIC	?AddRef@CWMAXMediaObject@@UAGKXZ		; CWMAXMediaObject::AddRef
PUBLIC	?Release@CWMAXMediaObject@@UAGKXZ		; CWMAXMediaObject::Release
PUBLIC	?Process@CWMAXMediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z ; CWMAXMediaObject::Process
PUBLIC	?GetInfo@CWMAXMediaObject@@UAGJPAU_XMEDIAINFO@@@Z ; CWMAXMediaObject::GetInfo
PUBLIC	?Flush@CWMAXMediaObject@@UAGJXZ			; CWMAXMediaObject::Flush
PUBLIC	?Discontinuity@CWMAXMediaObject@@UAGJXZ		; CWMAXMediaObject::Discontinuity
PUBLIC	?GetStatus@CWMAXMediaObject@@UAGJPAK@Z		; CWMAXMediaObject::GetStatus
PUBLIC	?Seek@CWMAXMediaObject@@UAGJJKPAK@Z		; CWMAXMediaObject::Seek
PUBLIC	?GetLength@CWMAXMediaObject@@UAGJPAK@Z		; CWMAXMediaObject::GetLength
PUBLIC	?GetFileContentDescription@CWMAXMediaObject@@UAGJPAU_WMAXMOFileContDesc@@@Z ; CWMAXMediaObject::GetFileContentDescription
PUBLIC	?GetFileHeader@CWMAXMediaObject@@UAGJPAU_WMAXMOFileHeader@@@Z ; CWMAXMediaObject::GetFileHeader
PUBLIC	??_7CWMAXMediaObject@@6B@			; CWMAXMediaObject::`vftable'
EXTRN	__imp__RtlInitializeCriticalSection@4:NEAR
EXTRN	_memset:NEAR
;	COMDAT ??_7CWMAXMediaObject@@6B@
CONST	SEGMENT
??_7CWMAXMediaObject@@6B@ DD FLAT:?AddRef@CWMAXMediaObject@@UAGKXZ ; CWMAXMediaObject::`vftable'
	DD	FLAT:?Release@CWMAXMediaObject@@UAGKXZ
	DD	FLAT:?GetInfo@CWMAXMediaObject@@UAGJPAU_XMEDIAINFO@@@Z
	DD	FLAT:?GetStatus@CWMAXMediaObject@@UAGJPAK@Z
	DD	FLAT:?Process@CWMAXMediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z
	DD	FLAT:?Discontinuity@CWMAXMediaObject@@UAGJXZ
	DD	FLAT:?Flush@CWMAXMediaObject@@UAGJXZ
	DD	FLAT:?Seek@CWMAXMediaObject@@UAGJJKPAK@Z
	DD	FLAT:?GetLength@CWMAXMediaObject@@UAGJPAK@Z
	DD	FLAT:?GetFileHeader@CWMAXMediaObject@@UAGJPAU_WMAXMOFileHeader@@@Z
	DD	FLAT:?GetFileContentDescription@CWMAXMediaObject@@UAGJPAU_WMAXMOFileContDesc@@@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CWMAXMediaObject@@QAE@XZ
WMADECXMO	SEGMENT
_this$ = -4
??0CWMAXMediaObject@@QAE@XZ PROC NEAR			; CWMAXMediaObject::CWMAXMediaObject, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0XWmaFileMediaObject@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWMAXMediaObject@@6B@

; 233  :     ZeroMemory(&m_state, sizeof (m_state));

  00018	6a 04		 push	 4
  0001a	6a 00		 push	 0
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 _memset
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :     ZeroMemory(&m_hdr, sizeof (m_hdr));

  0002b	6a 28		 push	 40			; 00000028H
  0002d	6a 00		 push	 0
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	83 c2 04	 add	 edx, 4
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _memset
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 235  :     m_dwYieldRate = 1000;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	c7 80 b4 00 00
	00 e8 03 00 00	 mov	 DWORD PTR [eax+180], 1000 ; 000003e8H

; 236  :     m_pSrcBuffer = NULL;

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 237  :     m_dwMaxContexts = 0;

  00055	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00058	c7 82 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+148], 0

; 238  :     m_pContextPool = NULL;

  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 239  :     m_bDecodeMore = TRUE;

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	c7 81 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+172], 1

; 240  :     m_bAsyncMode = FALSE;

  00079	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	c7 82 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+176], 0

; 241  :     m_bExternalHandle = FALSE;

  00086	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00089	c7 80 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+168], 0

; 242  :     m_cRef = 0;

  00093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	c7 81 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+136], 0

; 243  :     m_dwPendingPackets = 0;

  000a0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	c7 82 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+140], 0

; 244  :     m_dwSrcBufferOffset = 0;

  000ad	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 245  :     m_dwCurrentWmaFileOffset = 0;

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0

; 246  :     m_pCallback = NULL;

  000c1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0

; 247  :     m_pCallbackContext = NULL;

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ce	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 248  :     m_hThread = NULL;

  000d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	c7 81 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+132], 0

; 249  :     m_hDeleteThreadEvent = NULL;

  000e2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e5	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 250  :     m_hFile = INVALID_HANDLE_VALUE;

  000ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	c7 40 4c ff ff
	ff ff		 mov	 DWORD PTR [eax+76], -1

; 251  :     m_dwThreadId = 0;

  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	c7 41 64 00 00
	00 00		 mov	 DWORD PTR [ecx+100], 0

; 252  : 
; 253  :     memset(&m_overlapped,0,sizeof(OVERLAPPED));

  00100	6a 14		 push	 20			; 00000014H
  00102	6a 00		 push	 0
  00104	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00107	83 c2 50	 add	 edx, 80			; 00000050H
  0010a	52		 push	 edx
  0010b	e8 00 00 00 00	 call	 _memset
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH

; 254  :     InitializeCriticalSection(&m_CS);

  00113	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00116	83 c0 68	 add	 eax, 104		; 00000068H
  00119	50		 push	 eax
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlInitializeCriticalSection@4

; 255  : 
; 256  : }

  00120	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
??0CWMAXMediaObject@@QAE@XZ ENDP			; CWMAXMediaObject::CWMAXMediaObject
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\inc\wmaxmo.h
WMADECXMO	ENDS
;	COMDAT ?AddRef@CWMAXMediaObject@@UAGKXZ
WMADECXMO	SEGMENT
_this$ = 8
?AddRef@CWMAXMediaObject@@UAGKXZ PROC NEAR		; CWMAXMediaObject::AddRef, COMDAT

; 74   :     STDMETHODIMP_(ULONG) AddRef() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 75   :        return InterlockedIncrement((long*)&m_cRef);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0000c	e8 00 00 00 00	 call	 @InterlockedIncrement@4

; 76   :     }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?AddRef@CWMAXMediaObject@@UAGKXZ ENDP			; CWMAXMediaObject::AddRef
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
WMADECXMO	ENDS
;	COMDAT @InterlockedIncrement@4
WMADECXMO	SEGMENT
_Addend$ = -4
@InterlockedIncrement@4 PROC NEAR			; COMDAT
; _Addend$ = ecx

; 1268 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _Addend$[ebp], ecx

; 1269 :     __asm {
; 1270 :         mov     eax, 1

  00007	b8 01 00 00 00	 mov	 eax, 1

; 1271 :         mov     ecx, Addend

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _Addend$[ebp]

; 1272 :         xadd    [ecx], eax

  0000f	0f c1 01	 xadd	 DWORD PTR [ecx], eax

; 1273 :         inc     eax

  00012	40		 inc	 eax

; 1274 :     }
; 1275 : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
@InterlockedIncrement@4 ENDP
WMADECXMO	ENDS
PUBLIC	??_GCWMAXMediaObject@@QAEPAXI@Z			; CWMAXMediaObject::`scalar deleting destructor'
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\inc\wmaxmo.h
;	COMDAT ?Release@CWMAXMediaObject@@UAGKXZ
WMADECXMO	SEGMENT
tv72 = -16
$T29355 = -12
$T29354 = -8
_l$ = -4
_this$ = 8
?Release@CWMAXMediaObject@@UAGKXZ PROC NEAR		; CWMAXMediaObject::Release, COMDAT

; 78   :     STDMETHODIMP_(ULONG) Release() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 79   :        long l = InterlockedDecrement((long*)&m_cRef);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00009	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0000f	e8 00 00 00 00	 call	 @InterlockedDecrement@4
  00014	89 45 fc	 mov	 DWORD PTR _l$[ebp], eax

; 80   :        if (l == 0)

  00017	83 7d fc 00	 cmp	 DWORD PTR _l$[ebp], 0
  0001b	75 28		 jne	 SHORT $L28630

; 81   :           delete this;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00020	89 45 f4	 mov	 DWORD PTR $T29355[ebp], eax
  00023	8b 4d f4	 mov	 ecx, DWORD PTR $T29355[ebp]
  00026	89 4d f8	 mov	 DWORD PTR $T29354[ebp], ecx
  00029	83 7d f8 00	 cmp	 DWORD PTR $T29354[ebp], 0
  0002d	74 0f		 je	 SHORT $L29356
  0002f	6a 01		 push	 1
  00031	8b 4d f8	 mov	 ecx, DWORD PTR $T29354[ebp]
  00034	e8 00 00 00 00	 call	 ??_GCWMAXMediaObject@@QAEPAXI@Z
  00039	89 45 f0	 mov	 DWORD PTR tv72[ebp], eax
  0003c	eb 07		 jmp	 SHORT $L28630
$L29356:
  0003e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L28630:

; 82   :        return l;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _l$[ebp]

; 83   :     }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?Release@CWMAXMediaObject@@UAGKXZ ENDP			; CWMAXMediaObject::Release
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
WMADECXMO	ENDS
;	COMDAT @InterlockedDecrement@4
WMADECXMO	SEGMENT
_Addend$ = -4
@InterlockedDecrement@4 PROC NEAR			; COMDAT
; _Addend$ = ecx

; 1283 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _Addend$[ebp], ecx

; 1284 :     __asm {
; 1285 :         mov     eax, -1

  00007	b8 ff ff ff ff	 mov	 eax, -1

; 1286 :         mov     ecx, Addend

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _Addend$[ebp]

; 1287 :         xadd    [ecx], eax

  0000f	0f c1 01	 xadd	 DWORD PTR [ecx], eax

; 1288 :         dec     eax

  00012	48		 dec	 eax

; 1289 :     }
; 1290 : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
@InterlockedDecrement@4 ENDP
WMADECXMO	ENDS
PUBLIC	??_C@_0DL@IHPFEIKJ@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0M@PNONBBPM@pFileHeader?$AA@		; `string'
EXTRN	__imp__RtlAssert@16:NEAR
;	COMDAT ??_C@_0DL@IHPFEIKJ@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\inc\wmaxmo.h
WMADECXMO_RD	SEGMENT
??_C@_0DL@IHPFEIKJ@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\inc\wmaxmo.h', 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0M@PNONBBPM@pFileHeader?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0M@PNONBBPM@pFileHeader?$AA@ DB 'pFileHeader', 00H ; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT ?GetFileHeader@CWMAXMediaObject@@UAGJPAU_WMAXMOFileHeader@@@Z
WMADECXMO	SEGMENT
_this$ = 8
_pFileHeader$ = 12
?GetFileHeader@CWMAXMediaObject@@UAGJPAU_WMAXMOFileHeader@@@Z PROC NEAR ; CWMAXMediaObject::GetFileHeader, COMDAT

; 115  :     HRESULT STDMETHODCALLTYPE GetFileHeader(WMAXMOFileHeader *pFileHeader) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 116  : 
; 117  :         ASSERT(pFileHeader);

  00003	83 7d 0c 00	 cmp	 DWORD PTR _pFileHeader$[ebp], 0
  00007	75 14		 jne	 SHORT $L28635
  00009	6a 00		 push	 0
  0000b	6a 75		 push	 117			; 00000075H
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@IHPFEIKJ@c?3?2xbox?2private?2windows?2directx?2@
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@PNONBBPM@pFileHeader?$AA@
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L28635:

; 118  :         memset(pFileHeader,0,sizeof(WMAXMOFileHeader));

  0001d	6a 14		 push	 20			; 00000014H
  0001f	6a 00		 push	 0
  00021	8b 45 0c	 mov	 eax, DWORD PTR _pFileHeader$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memset
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 119  : 
; 120  :         pFileHeader->dwVersion = m_hdr.version;

  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _pFileHeader$[ebp]
  00030	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00033	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00036	89 01		 mov	 DWORD PTR [ecx], eax

; 121  :         pFileHeader->dwSampleRate = m_hdr.sample_rate;

  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _pFileHeader$[ebp]
  0003b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00041	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 122  :         pFileHeader->dwNumChannels = m_hdr.num_channels;

  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _pFileHeader$[ebp]
  00047	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0004d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 123  :         pFileHeader->dwDuration = m_hdr.duration;

  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _pFileHeader$[ebp]
  00053	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00056	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00059	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 124  :         pFileHeader->dwBitrate = m_hdr.bitrate;

  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR _pFileHeader$[ebp]
  0005f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00062	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00065	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 125  : 
; 126  :         return S_OK;

  00068	33 c0		 xor	 eax, eax

; 127  :     }

  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
?GetFileHeader@CWMAXMediaObject@@UAGJPAU_WMAXMOFileHeader@@@Z ENDP ; CWMAXMediaObject::GetFileHeader
WMADECXMO	ENDS
PUBLIC	??1CWMAXMediaObject@@QAE@XZ			; CWMAXMediaObject::~CWMAXMediaObject
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt
;	COMDAT ??_GCWMAXMediaObject@@QAEPAXI@Z
WMADECXMO	SEGMENT
_this$ = -4
___flags$ = 8
??_GCWMAXMediaObject@@QAEPAXI@Z PROC NEAR		; CWMAXMediaObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CWMAXMediaObject@@QAE@XZ ; CWMAXMediaObject::~CWMAXMediaObject
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L28643
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L28643:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCWMAXMediaObject@@QAEPAXI@Z ENDP			; CWMAXMediaObject::`scalar deleting destructor'
WMADECXMO	ENDS
PUBLIC	??0XFileMediaObject@@QAE@XZ			; XFileMediaObject::XFileMediaObject
; Function compile flags: /Odt
;	COMDAT ??0XWmaFileMediaObject@@QAE@XZ
WMADECXMO	SEGMENT
_this$ = -4
??0XWmaFileMediaObject@@QAE@XZ PROC NEAR		; XWmaFileMediaObject::XWmaFileMediaObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0XFileMediaObject@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0XWmaFileMediaObject@@QAE@XZ ENDP			; XWmaFileMediaObject::XWmaFileMediaObject
WMADECXMO	ENDS
PUBLIC	??0XMediaObject@@QAE@XZ				; XMediaObject::XMediaObject
; Function compile flags: /Odt
;	COMDAT ??0XFileMediaObject@@QAE@XZ
WMADECXMO	SEGMENT
_this$ = -4
??0XFileMediaObject@@QAE@XZ PROC NEAR			; XFileMediaObject::XFileMediaObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0XMediaObject@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0XFileMediaObject@@QAE@XZ ENDP			; XFileMediaObject::XFileMediaObject
; Function compile flags: /Odt
WMADECXMO	ENDS
;	COMDAT ??0XMediaObject@@QAE@XZ
WMADECXMO	SEGMENT
_this$ = -4
??0XMediaObject@@QAE@XZ PROC NEAR			; XMediaObject::XMediaObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0XMediaObject@@QAE@XZ ENDP				; XMediaObject::XMediaObject
WMADECXMO	ENDS
PUBLIC	??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BC@DOEPKDPP@m_dwThreadId?5?$DN?$DN?50?$AA@ ; `string'
PUBLIC	?Reset@CWMAXMediaObject@@AAEXXZ			; CWMAXMediaObject::Reset
EXTRN	_CloseHandle@4:NEAR
EXTRN	_WMAFileDecodeClose@4:NEAR
EXTRN	_SetEvent@4:NEAR
EXTRN	_WaitForSingleObject@8:NEAR
;	COMDAT ??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\wmaxmo\wmaxmo.cpp
WMADECXMO_RD	SEGMENT
??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\wmaxmo\wmaxmo.cpp', 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BC@DOEPKDPP@m_dwThreadId?5?$DN?$DN?50?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BC@DOEPKDPP@m_dwThreadId?5?$DN?$DN?50?$AA@ DB 'm_dwThreadId == 0', 00H ; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT ??1CWMAXMediaObject@@QAE@XZ
WMADECXMO	SEGMENT
_this$ = -12
$T29380 = -8
$T29379 = -4
??1CWMAXMediaObject@@QAE@XZ PROC NEAR			; CWMAXMediaObject::~CWMAXMediaObject, COMDAT
; _this$ = ecx

; 259  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWMAXMediaObject@@6B@

; 260  : 
; 261  :     Reset();

  00012	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Reset@CWMAXMediaObject@@AAEXXZ ; CWMAXMediaObject::Reset

; 262  : 
; 263  :     //
; 264  :     // set the delete event
; 265  :     //
; 266  : 
; 267  :     if (m_hDeleteThreadEvent) {

  0001a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  00021	74 0c		 je	 SHORT $L28742

; 268  : 
; 269  :         SetEvent(m_hDeleteThreadEvent);

  00023	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _SetEvent@4
$L28742:

; 270  : 
; 271  :     }
; 272  : 
; 273  :     //
; 274  :     // wait on thread exiting..
; 275  :     //
; 276  : 
; 277  :     if (m_hThread) {

  0002f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 b9 84 00 00
	00 00		 cmp	 DWORD PTR [ecx+132], 0
  00039	74 11		 je	 SHORT $L28743

; 278  :         WaitForSingleObject(m_hThread,INFINITE);

  0003b	6a ff		 push	 -1
  0003d	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00040	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _WaitForSingleObject@8
$L28743:

; 279  :     }
; 280  : 
; 281  :     ASSERT(m_dwThreadId == 0);

  0004c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	83 79 64 00	 cmp	 DWORD PTR [ecx+100], 0
  00053	74 17		 je	 SHORT $L28744
  00055	6a 00		 push	 0
  00057	68 19 01 00 00	 push	 281			; 00000119H
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@DOEPKDPP@m_dwThreadId?5?$DN?$DN?50?$AA@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L28744:

; 282  : 
; 283  : 
; 284  :     if ( m_state ) {

  0006c	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  00073	74 0c		 je	 SHORT $L28747

; 285  :         WMAFileDecodeClose(&m_state);

  00075	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00078	83 c0 2c	 add	 eax, 44			; 0000002cH
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _WMAFileDecodeClose@4
$L28747:

; 286  :     }
; 287  : 
; 288  :     if (m_pSrcBuffer) {

  00081	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  00088	74 15		 je	 SHORT $L28748

; 289  :         delete [] m_pSrcBuffer;

  0008a	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0008d	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00090	89 45 fc	 mov	 DWORD PTR $T29379[ebp], eax
  00093	8b 4d fc	 mov	 ecx, DWORD PTR $T29379[ebp]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009c	83 c4 04	 add	 esp, 4
$L28748:

; 290  :     }
; 291  : 
; 292  :     if (m_pContextPool) {

  0009f	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000a2	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  000a6	74 15		 je	 SHORT $L28750

; 293  :         delete [] m_pContextPool;

  000a8	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000ae	89 4d f8	 mov	 DWORD PTR $T29380[ebp], ecx
  000b1	8b 55 f8	 mov	 edx, DWORD PTR $T29380[ebp]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ba	83 c4 04	 add	 esp, 4
$L28750:

; 294  :     }
; 295  : 
; 296  : 
; 297  :     if ((m_hFile != INVALID_HANDLE_VALUE) && (m_bExternalHandle == FALSE)) {

  000bd	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	83 78 4c ff	 cmp	 DWORD PTR [eax+76], -1
  000c4	74 18		 je	 SHORT $L28753
  000c6	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	83 b9 a8 00 00
	00 00		 cmp	 DWORD PTR [ecx+168], 0
  000d0	75 0c		 jne	 SHORT $L28753

; 298  :         CloseHandle(m_hFile);

  000d2	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000d5	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 _CloseHandle@4
$L28753:

; 299  :     }
; 300  : 
; 301  :     if (m_hDeleteThreadEvent) {

  000de	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	83 79 48 00	 cmp	 DWORD PTR [ecx+72], 0
  000e5	74 0c		 je	 SHORT $L28754

; 302  : 
; 303  :         CloseHandle(m_hDeleteThreadEvent);

  000e7	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000ea	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 _CloseHandle@4
$L28754:

; 304  : 
; 305  :     }
; 306  : 
; 307  :     if (m_overlapped.hEvent) {

  000f3	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	83 79 60 00	 cmp	 DWORD PTR [ecx+96], 0
  000fa	74 0c		 je	 SHORT $L28741

; 308  :         CloseHandle(m_overlapped.hEvent);

  000fc	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000ff	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 _CloseHandle@4
$L28741:

; 309  :     }
; 310  : }

  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
??1CWMAXMediaObject@@QAE@XZ ENDP			; CWMAXMediaObject::~CWMAXMediaObject
WMADECXMO	ENDS
EXTRN	_Sleep@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Reset@CWMAXMediaObject@@AAEXXZ
WMADECXMO	SEGMENT
_this$ = -4
?Reset@CWMAXMediaObject@@AAEXXZ PROC NEAR		; CWMAXMediaObject::Reset, COMDAT
; _this$ = ecx

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$L28760:

; 315  : 
; 316  :     //
; 317  :     // wait until out pending list is  empty
; 318  :     //
; 319  : 
; 320  :     while (TRUE) {

  00007	b8 01 00 00 00	 mov	 eax, 1
  0000c	85 c0		 test	 eax, eax
  0000e	74 1f		 je	 SHORT $L28758

; 321  : 
; 322  :         if (IsListEmpty(&m_PendingList)) {

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	39 8a a0 00 00
	00		 cmp	 DWORD PTR [edx+160], ecx
  00022	75 02		 jne	 SHORT $L28762

; 323  : 
; 324  :             break;

  00024	eb 09		 jmp	 SHORT $L28758
$L28762:

; 325  : 
; 326  :         }
; 327  : 
; 328  :         Sleep(5);

  00026	6a 05		 push	 5
  00028	e8 00 00 00 00	 call	 _Sleep@4

; 329  : 
; 330  :     }

  0002d	eb d8		 jmp	 SHORT $L28760
$L28758:

; 331  : 
; 332  : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?Reset@CWMAXMediaObject@@AAEXXZ ENDP			; CWMAXMediaObject::Reset
WMADECXMO	ENDS
PUBLIC	?GetFormat@CWMAXMediaObject@@AAGJPAUtWAVEFORMATEX@@@Z ; CWMAXMediaObject::GetFormat
; Function compile flags: /Odt
;	COMDAT ?InitializeIntermediate@CWMAXMediaObject@@QAEJP6GKPAXKKPAPAX@Z0KPAUtWAVEFORMATEX@@@Z
WMADECXMO	SEGMENT
_this$ = -8
_hr$ = -4
_pCallback$ = 8
_pCallbackContext$ = 12
_dwYieldRate$ = 16
_pwfxCompressed$ = 20
?InitializeIntermediate@CWMAXMediaObject@@QAEJP6GKPAXKKPAPAX@Z0KPAUtWAVEFORMATEX@@@Z PROC NEAR ; CWMAXMediaObject::InitializeIntermediate, COMDAT
; _this$ = ecx

; 341  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 342  :     HRESULT hr;
; 343  :     m_bAsyncMode = FALSE;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 80 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+176], 0

; 344  : 
; 345  :     m_dwYieldRate = dwYieldRate;

  00016	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 55 10	 mov	 edx, DWORD PTR _dwYieldRate$[ebp]
  0001c	89 91 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], edx

; 346  :     m_dwLookaheadSize = 0;

  00022	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00025	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+144], 0

; 347  : 
; 348  :     m_pCallback = pCallback;

  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _pCallback$[ebp]
  00035	89 51 40	 mov	 DWORD PTR [ecx+64], edx

; 349  :     m_pCallbackContext = pCallbackContext;

  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _pCallbackContext$[ebp]
  0003e	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 350  : 
; 351  :     InitializeListHead(&m_AvailableList);

  00041	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00044	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00059	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  0005f	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax

; 352  :     InitializeListHead(&m_PendingList);

  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  0006e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00071	89 8a a4 00 00
	00		 mov	 DWORD PTR [edx+164], ecx
  00077	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00083	89 90 a0 00 00
	00		 mov	 DWORD PTR [eax+160], edx

; 353  : 
; 354  :     AddRef();

  00089	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00091	52		 push	 edx
  00092	ff 11		 call	 DWORD PTR [ecx]

; 355  : 
; 356  :     hr = Flush();

  00094	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0009c	52		 push	 edx
  0009d	ff 51 18	 call	 DWORD PTR [ecx+24]
  000a0	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 357  :     
; 358  :     if (FAILED(hr)) {

  000a3	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a7	7d 05		 jge	 SHORT $L28772

; 359  :         return hr;

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  000ac	eb 16		 jmp	 SHORT $L28769
$L28772:

; 360  :     }
; 361  : 
; 362  :     if (pwfxCompressed) {

  000ae	83 7d 14 00	 cmp	 DWORD PTR _pwfxCompressed$[ebp], 0
  000b2	74 0d		 je	 SHORT $L28773

; 363  :         GetFormat(pwfxCompressed);

  000b4	8b 45 14	 mov	 eax, DWORD PTR _pwfxCompressed$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 ?GetFormat@CWMAXMediaObject@@AAGJPAUtWAVEFORMATEX@@@Z ; CWMAXMediaObject::GetFormat
$L28773:

; 364  :     }
; 365  : 
; 366  :     return hr;

  000c1	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
$L28769:

; 367  : 
; 368  : }

  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 10 00	 ret	 16			; 00000010H
?InitializeIntermediate@CWMAXMediaObject@@QAEJP6GKPAXKKPAPAX@Z0KPAUtWAVEFORMATEX@@@Z ENDP ; CWMAXMediaObject::InitializeIntermediate
WMADECXMO	ENDS
PUBLIC	??_C@_0M@GMBEFBHN@pszFileName?$AA@		; `string'
PUBLIC	??_C@_0DE@JJOMFKMB@File?5Handle?5passed?5was?5opened?5as@ ; `string'
PUBLIC	??_C@_0FA@CDGIKHLH@?$CB?$CIdwMode?5?$CG?50x00000008?$CJ?5?$CG?$CG?5?$CCFile?5@ ; `string'
PUBLIC	?WmaXmoThreadProc@@YGKPAX@Z			; WmaXmoThreadProc
EXTRN	_CreateEventA@16:NEAR
EXTRN	__imp__NtQueryInformationFile@20:NEAR
EXTRN	_CreateFileA@28:NEAR
EXTRN	_CreateThread@24:NEAR
EXTRN	_GetLastError@0:NEAR
;	COMDAT ??_C@_0M@GMBEFBHN@pszFileName?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0M@GMBEFBHN@pszFileName?$AA@ DB 'pszFileName', 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0DE@JJOMFKMB@File?5Handle?5passed?5was?5opened?5as@
WMADECXMO_RD	SEGMENT
??_C@_0DE@JJOMFKMB@File?5Handle?5passed?5was?5opened?5as@ DB 'File Handle'
	DB	' passed was opened async. Not supported.', 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0FA@CDGIKHLH@?$CB?$CIdwMode?5?$CG?50x00000008?$CJ?5?$CG?$CG?5?$CCFile?5@
WMADECXMO_RD	SEGMENT
??_C@_0FA@CDGIKHLH@?$CB?$CIdwMode?5?$CG?50x00000008?$CJ?5?$CG?$CG?5?$CCFile?5@ DB '!'
	DB	'(dwMode & 0x00000008) && "File Handle passed was opened async'
	DB	'. Not supported."', 00H			; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT ?Initialize@CWMAXMediaObject@@QAGJPBDPAXHKKKPAUtWAVEFORMATEX@@@Z
WMADECXMO	SEGMENT
tv156 = -56
tv145 = -52
tv142 = -48
$T29397 = -44
$T29394 = -40
__EX_ListHead$28825 = -36
__EX_Flink$28824 = -32
_i$28818 = -28
_status$28793 = -24
_IoStatusBlock$28794 = -20
_dwMode$28795 = -12
_pContext$ = -8
_hr$ = -4
_this$ = 8
_pszFileName$ = 12
_hFile$ = 16
_fAsyncMode$ = 20
_dwLookaheadSize$ = 24
_dwMaxPackets$ = 28
_dwYieldRate$ = 32
_pwfxCompressed$ = 36
?Initialize@CWMAXMediaObject@@QAGJPBDPAXHKKKPAUtWAVEFORMATEX@@@Z PROC NEAR ; CWMAXMediaObject::Initialize, COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H

; 381  :     HRESULT hr;
; 382  :     PWMAXMO_ASYNC_CONTEXT pContext;
; 383  : 
; 384  :     AddRef();

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	ff 11		 call	 DWORD PTR [ecx]

; 385  : 
; 386  :     m_dwYieldRate = dwYieldRate;

  00011	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 20	 mov	 ecx, DWORD PTR _dwYieldRate$[ebp]
  00017	89 88 b4 00 00
	00		 mov	 DWORD PTR [eax+180], ecx

; 387  : 
; 388  :     //
; 389  :     // create a file media object to read the raw wma data from
; 390  :     //
; 391  : 
; 392  :     if (hFile == NULL) {

  0001d	83 7d 10 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00021	75 56		 jne	 SHORT $L28786
$L28787:

; 393  : 
; 394  :         MYCHECK(pszFileName);

  00023	83 7d 0c 00	 cmp	 DWORD PTR _pszFileName$[ebp], 0
  00027	75 11		 jne	 SHORT $L28788
  00029	6a 00		 push	 0
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@GMBEFBHN@pszFileName?$AA@
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OEDNFCCJ@WMA?5XMO?$AA@
  00035	e8 00 00 00 00	 call	 _RtlRip@12
$L28788:
  0003a	33 d2		 xor	 edx, edx
  0003c	85 d2		 test	 edx, edx
  0003e	75 e3		 jne	 SHORT $L28787

; 395  :         m_bExternalHandle = FALSE;

  00040	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00043	c7 80 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+168], 0

; 396  : 
; 397  :         m_hFile = CreateFile(pszFileName,
; 398  :                              GENERIC_READ,
; 399  :                              FILE_SHARE_READ,
; 400  :                              NULL,
; 401  :                              OPEN_EXISTING,
; 402  :                              (fAsyncMode ? (FILE_FLAG_OVERLAPPED) : 0),
; 403  :                              NULL);

  0004d	6a 00		 push	 0
  0004f	8b 4d 14	 mov	 ecx, DWORD PTR _fAsyncMode$[ebp]
  00052	f7 d9		 neg	 ecx
  00054	1b c9		 sbb	 ecx, ecx
  00056	81 e1 00 00 00
	40		 and	 ecx, 1073741824		; 40000000H
  0005c	51		 push	 ecx
  0005d	6a 03		 push	 3
  0005f	6a 00		 push	 0
  00061	6a 01		 push	 1
  00063	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00068	8b 55 0c	 mov	 edx, DWORD PTR _pszFileName$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 _CreateFileA@28
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 404  : 
; 405  :     } else {

  00077	eb 59		 jmp	 SHORT $L28792
$L28786:

; 406  : 
; 407  :         m_bExternalHandle = TRUE;

  00079	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	c7 82 a8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+168], 1

; 408  :         m_hFile = hFile;

  00086	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00089	8b 4d 10	 mov	 ecx, DWORD PTR _hFile$[ebp]
  0008c	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 409  : 
; 410  :         NTSTATUS status;
; 411  :         IO_STATUS_BLOCK IoStatusBlock;
; 412  :         DWORD dwMode;
; 413  : 
; 414  :         status = NtQueryInformationFile(
; 415  :                 hFile,
; 416  :                 &IoStatusBlock,
; 417  :                 &dwMode,
; 418  :                 sizeof(dwMode),
; 419  :                 FileModeInformation
; 420  :                 );

  0008f	6a 10		 push	 16			; 00000010H
  00091	6a 04		 push	 4
  00093	8d 55 f4	 lea	 edx, DWORD PTR _dwMode$28795[ebp]
  00096	52		 push	 edx
  00097	8d 45 ec	 lea	 eax, DWORD PTR _IoStatusBlock$28794[ebp]
  0009a	50		 push	 eax
  0009b	8b 4d 10	 mov	 ecx, DWORD PTR _hFile$[ebp]
  0009e	51		 push	 ecx
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__NtQueryInformationFile@20
  000a5	89 45 e8	 mov	 DWORD PTR _status$28793[ebp], eax
$L28796:

; 421  : 
; 422  :         MYCHECK(!(dwMode &  FILE_NO_INTERMEDIATE_BUFFERING) && "File Handle passed was opened async. Not supported.");

  000a8	8b 55 f4	 mov	 edx, DWORD PTR _dwMode$28795[ebp]
  000ab	83 e2 08	 and	 edx, 8
  000ae	85 d2		 test	 edx, edx
  000b0	75 09		 jne	 SHORT $L28800
  000b2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_0DE@JJOMFKMB@File?5Handle?5passed?5was?5opened?5as@
  000b7	85 c0		 test	 eax, eax
  000b9	75 11		 jne	 SHORT $L28797
$L28800:
  000bb	6a 00		 push	 0
  000bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FA@CDGIKHLH@?$CB?$CIdwMode?5?$CG?50x00000008?$CJ?5?$CG?$CG?5?$CCFile?5@
  000c2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OEDNFCCJ@WMA?5XMO?$AA@
  000c7	e8 00 00 00 00	 call	 _RtlRip@12
$L28797:
  000cc	33 c9		 xor	 ecx, ecx
  000ce	85 c9		 test	 ecx, ecx
  000d0	75 d6		 jne	 SHORT $L28796
$L28792:

; 423  : 
; 424  :     }
; 425  : 
; 426  : 
; 427  :     if (m_hFile == INVALID_HANDLE_VALUE) {

  000d2	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000d5	83 7a 4c ff	 cmp	 DWORD PTR [edx+76], -1
  000d9	75 38		 jne	 SHORT $L28804

; 428  :         hr = HRESULT_FROM_WIN32(GetLastError());

  000db	e8 00 00 00 00	 call	 _GetLastError@0
  000e0	85 c0		 test	 eax, eax
  000e2	7f 0a		 jg	 SHORT $L29390
  000e4	e8 00 00 00 00	 call	 _GetLastError@0
  000e9	89 45 d0	 mov	 DWORD PTR tv142[ebp], eax
  000ec	eb 17		 jmp	 SHORT $L29391
$L29390:
  000ee	e8 00 00 00 00	 call	 _GetLastError@0
  000f3	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000f8	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  000fd	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  00102	89 45 d0	 mov	 DWORD PTR tv142[ebp], eax
$L29391:
  00105	8b 45 d0	 mov	 eax, DWORD PTR tv142[ebp]
  00108	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 429  :         return hr;

  0010b	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  0010e	e9 32 02 00 00	 jmp	 $L28783
$L28804:

; 430  :     }
; 431  : 
; 432  :     //
; 433  :     // allocate packet buffer.assume 16 bit resolution for all wma files
; 434  :     //
; 435  : 
; 436  :     m_dwLookaheadSize = max(WMA_SRC_BUFFER_SIZE,dwLookaheadSize)*2;

  00113	81 7d 18 00 20
	00 00		 cmp	 DWORD PTR _dwLookaheadSize$[ebp], 8192 ; 00002000H
  0011a	73 09		 jae	 SHORT $L29392
  0011c	c7 45 cc 00 20
	00 00		 mov	 DWORD PTR tv145[ebp], 8192 ; 00002000H
  00123	eb 06		 jmp	 SHORT $L29393
$L29392:
  00125	8b 4d 18	 mov	 ecx, DWORD PTR _dwLookaheadSize$[ebp]
  00128	89 4d cc	 mov	 DWORD PTR tv145[ebp], ecx
$L29393:
  0012b	8b 55 cc	 mov	 edx, DWORD PTR tv145[ebp]
  0012e	d1 e2		 shl	 edx, 1
  00130	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00133	89 90 90 00 00
	00		 mov	 DWORD PTR [eax+144], edx

; 437  :     
; 438  :     m_pSrcBuffer = new BYTE[m_dwLookaheadSize];

  00139	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0013c	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00142	52		 push	 edx
  00143	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00148	83 c4 04	 add	 esp, 4
  0014b	89 45 d8	 mov	 DWORD PTR $T29394[ebp], eax
  0014e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00151	8b 4d d8	 mov	 ecx, DWORD PTR $T29394[ebp]
  00154	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 439  : 
; 440  :     if (m_pSrcBuffer == NULL) {

  00157	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0015a	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  0015e	75 0a		 jne	 SHORT $L28810

; 441  :         return E_OUTOFMEMORY;

  00160	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00165	e9 db 01 00 00	 jmp	 $L28783
$L28810:

; 442  :     }
; 443  : 
; 444  :     m_bAsyncMode = fAsyncMode;

  0016a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0016d	8b 4d 14	 mov	 ecx, DWORD PTR _fAsyncMode$[ebp]
  00170	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx

; 445  :     m_dwMaxContexts = max(2,dwMaxPackets);

  00176	83 7d 1c 02	 cmp	 DWORD PTR _dwMaxPackets$[ebp], 2
  0017a	73 09		 jae	 SHORT $L29395
  0017c	c7 45 c8 02 00
	00 00		 mov	 DWORD PTR tv156[ebp], 2
  00183	eb 06		 jmp	 SHORT $L29396
$L29395:
  00185	8b 55 1c	 mov	 edx, DWORD PTR _dwMaxPackets$[ebp]
  00188	89 55 c8	 mov	 DWORD PTR tv156[ebp], edx
$L29396:
  0018b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0018e	8b 4d c8	 mov	 ecx, DWORD PTR tv156[ebp]
  00191	89 88 94 00 00
	00		 mov	 DWORD PTR [eax+148], ecx

; 446  : 
; 447  :     //
; 448  :     // init state
; 449  :     //
; 450  : 
; 451  :     InitializeListHead(&m_AvailableList);

  00197	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0019a	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  001a0	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001a3	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx
  001a9	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001ac	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001af	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  001b5	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax

; 452  :     InitializeListHead(&m_PendingList);

  001bb	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001be	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  001c4	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001c7	89 8a a4 00 00
	00		 mov	 DWORD PTR [edx+164], ecx
  001cd	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001d0	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001d3	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  001d9	89 90 a0 00 00
	00		 mov	 DWORD PTR [eax+160], edx

; 453  : 
; 454  :     //
; 455  :     // we are initialized ok. Now create a thread that will gives us
; 456  :     // some context to run and check if packets have been submitted
; 457  :     //
; 458  : 
; 459  :     if (fAsyncMode == TRUE) {

  001df	83 7d 14 01	 cmp	 DWORD PTR _fAsyncMode$[ebp], 1
  001e3	0f 85 2c 01 00
	00		 jne	 $L28812

; 460  : 
; 461  :         //
; 462  :         // alloc a buffer for contexts
; 463  :         //
; 464  :     
; 465  :         m_pContextPool = (PUCHAR) new WMAXMO_ASYNC_CONTEXT[m_dwMaxContexts];

  001e9	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001ec	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  001f2	6b c9 24	 imul	 ecx, 36			; 00000024H
  001f5	51		 push	 ecx
  001f6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001fb	83 c4 04	 add	 esp, 4
  001fe	89 45 d4	 mov	 DWORD PTR $T29397[ebp], eax
  00201	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00204	8b 45 d4	 mov	 eax, DWORD PTR $T29397[ebp]
  00207	89 42 34	 mov	 DWORD PTR [edx+52], eax

; 466  :     
; 467  :         if (m_pContextPool == NULL) {

  0020a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0020d	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0
  00211	75 0a		 jne	 SHORT $L28816

; 468  :             return E_OUTOFMEMORY;

  00213	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00218	e9 28 01 00 00	 jmp	 $L28783
$L28816:

; 469  :         }
; 470  :     
; 471  :         //
; 472  :         // insert contexts in list..
; 473  :         //
; 474  :     
; 475  :         for (ULONG i=0;i<m_dwMaxContexts;i++) {

  0021d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$28818[ebp], 0
  00224	eb 09		 jmp	 SHORT $L28819
$L28820:
  00226	8b 55 e4	 mov	 edx, DWORD PTR _i$28818[ebp]
  00229	83 c2 01	 add	 edx, 1
  0022c	89 55 e4	 mov	 DWORD PTR _i$28818[ebp], edx
$L28819:
  0022f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00232	8b 4d e4	 mov	 ecx, DWORD PTR _i$28818[ebp]
  00235	3b 88 94 00 00
	00		 cmp	 ecx, DWORD PTR [eax+148]
  0023b	73 58		 jae	 SHORT $L28821

; 476  :     
; 477  :             pContext = (PWMAXMO_ASYNC_CONTEXT) (m_pContextPool + sizeof(WMAXMO_ASYNC_CONTEXT)*i);

  0023d	8b 55 e4	 mov	 edx, DWORD PTR _i$28818[ebp]
  00240	6b d2 24	 imul	 edx, 36			; 00000024H
  00243	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00246	03 50 34	 add	 edx, DWORD PTR [eax+52]
  00249	89 55 f8	 mov	 DWORD PTR _pContext$[ebp], edx

; 478  :             InitializeListHead(&pContext->ListEntry);

  0024c	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$[ebp]
  0024f	8b 55 f8	 mov	 edx, DWORD PTR _pContext$[ebp]
  00252	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00255	8b 45 f8	 mov	 eax, DWORD PTR _pContext$[ebp]
  00258	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$[ebp]
  0025b	89 08		 mov	 DWORD PTR [eax], ecx

; 479  :             InsertHeadList(&m_AvailableList,
; 480  :                            &pContext->ListEntry);

  0025d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00260	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  00266	89 55 dc	 mov	 DWORD PTR __EX_ListHead$28825[ebp], edx
  00269	8b 45 dc	 mov	 eax, DWORD PTR __EX_ListHead$28825[ebp]
  0026c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026e	89 4d e0	 mov	 DWORD PTR __EX_Flink$28824[ebp], ecx
  00271	8b 55 f8	 mov	 edx, DWORD PTR _pContext$[ebp]
  00274	8b 45 e0	 mov	 eax, DWORD PTR __EX_Flink$28824[ebp]
  00277	89 02		 mov	 DWORD PTR [edx], eax
  00279	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$[ebp]
  0027c	8b 55 dc	 mov	 edx, DWORD PTR __EX_ListHead$28825[ebp]
  0027f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00282	8b 45 e0	 mov	 eax, DWORD PTR __EX_Flink$28824[ebp]
  00285	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00288	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0028b	8b 55 dc	 mov	 edx, DWORD PTR __EX_ListHead$28825[ebp]
  0028e	8b 45 f8	 mov	 eax, DWORD PTR _pContext$[ebp]
  00291	89 02		 mov	 DWORD PTR [edx], eax

; 481  :     
; 482  :         }

  00293	eb 91		 jmp	 SHORT $L28820
$L28821:

; 483  : 
; 484  :         m_hThread = CreateThread(NULL,
; 485  :                                  8192,
; 486  :                                  WmaXmoThreadProc,
; 487  :                                  this,
; 488  :                                  0,
; 489  :                                  &m_dwThreadId);

  00295	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00298	83 c1 64	 add	 ecx, 100		; 00000064H
  0029b	51		 push	 ecx
  0029c	6a 00		 push	 0
  0029e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  002a1	52		 push	 edx
  002a2	68 00 00 00 00	 push	 OFFSET FLAT:?WmaXmoThreadProc@@YGKPAX@Z ; WmaXmoThreadProc
  002a7	68 00 20 00 00	 push	 8192			; 00002000H
  002ac	6a 00		 push	 0
  002ae	e8 00 00 00 00	 call	 _CreateThread@24
  002b3	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  002b6	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 490  : 
; 491  :         if (m_hThread == NULL) {

  002bc	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  002bf	83 ba 84 00 00
	00 00		 cmp	 DWORD PTR [edx+132], 0
  002c6	75 07		 jne	 SHORT $L28826

; 492  :             return E_OUTOFMEMORY;

  002c8	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  002cd	eb 76		 jmp	 SHORT $L28783
$L28826:

; 493  :         }
; 494  : 
; 495  :         //
; 496  :         // create event that will signal thread to terminate
; 497  :         //
; 498  : 
; 499  :         m_hDeleteThreadEvent = CreateEvent(NULL,FALSE,FALSE,NULL);

  002cf	6a 00		 push	 0
  002d1	6a 00		 push	 0
  002d3	6a 00		 push	 0
  002d5	6a 00		 push	 0
  002d7	e8 00 00 00 00	 call	 _CreateEventA@16
  002dc	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  002df	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 500  : 
; 501  :         if (m_hDeleteThreadEvent == NULL) {

  002e2	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  002e5	83 7a 48 00	 cmp	 DWORD PTR [edx+72], 0
  002e9	75 07		 jne	 SHORT $L28828

; 502  :             return E_OUTOFMEMORY;

  002eb	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  002f0	eb 53		 jmp	 SHORT $L28783
$L28828:

; 503  :         }
; 504  : 
; 505  :         m_overlapped.hEvent = CreateEvent(NULL,FALSE,FALSE,NULL);;

  002f2	6a 00		 push	 0
  002f4	6a 00		 push	 0
  002f6	6a 00		 push	 0
  002f8	6a 00		 push	 0
  002fa	e8 00 00 00 00	 call	 _CreateEventA@16
  002ff	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00302	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 506  : 
; 507  :         if (m_overlapped.hEvent == NULL) {

  00305	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00308	83 7a 60 00	 cmp	 DWORD PTR [edx+96], 0
  0030c	75 07		 jne	 SHORT $L28812

; 508  :             return E_OUTOFMEMORY;

  0030e	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00313	eb 30		 jmp	 SHORT $L28783
$L28812:

; 509  :         }
; 510  : 
; 511  :     }
; 512  : 
; 513  :     hr = Flush();

  00315	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00318	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0031d	52		 push	 edx
  0031e	ff 51 18	 call	 DWORD PTR [ecx+24]
  00321	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 514  :     
; 515  :     if (FAILED(hr)) {

  00324	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00328	7d 05		 jge	 SHORT $L28833

; 516  :         return hr;

  0032a	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  0032d	eb 16		 jmp	 SHORT $L28783
$L28833:

; 517  :     }
; 518  : 
; 519  :     if (pwfxCompressed) {

  0032f	83 7d 24 00	 cmp	 DWORD PTR _pwfxCompressed$[ebp], 0
  00333	74 0d		 je	 SHORT $L28834

; 520  :         GetFormat(pwfxCompressed);

  00335	8b 45 24	 mov	 eax, DWORD PTR _pwfxCompressed$[ebp]
  00338	50		 push	 eax
  00339	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0033c	51		 push	 ecx
  0033d	e8 00 00 00 00	 call	 ?GetFormat@CWMAXMediaObject@@AAGJPAUtWAVEFORMATEX@@@Z ; CWMAXMediaObject::GetFormat
$L28834:

; 521  :     }
; 522  :     
; 523  :     return hr;

  00342	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
$L28783:

; 524  : 
; 525  : }

  00345	8b e5		 mov	 esp, ebp
  00347	5d		 pop	 ebp
  00348	c2 20 00	 ret	 32			; 00000020H
?Initialize@CWMAXMediaObject@@QAGJPBDPAXHKKKPAUtWAVEFORMATEX@@@Z ENDP ; CWMAXMediaObject::Initialize
WMADECXMO	ENDS
PUBLIC	??_C@_0BL@INHPPMCG@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?5Called?6?$AA@ ; `string'
PUBLIC	??_C@_0EA@PHEDFEDD@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5SrcBufferOff@ ; `string'
PUBLIC	??_C@_0FE@BAEIOKE@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@ ; `string'
PUBLIC	??_C@_0BC@BAJMHMG@m_state?5?$DN?50x?$CF08x?6?$AA@ ; `string'
PUBLIC	??_C@_0FA@ICEMBOCE@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@ ; `string'
PUBLIC	??_C@_0FC@KEFLEJPD@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@ ; `string'
PUBLIC	??_C@_0BK@OANGKNJG@DRM?5FILES?5NOT?5SUPPORTED?$CB?6?$AA@ ; `string'
EXTRN	_ReadFile@20:NEAR
EXTRN	_SetFilePointer@16:NEAR
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
EXTRN	_DbgPrint:NEAR
EXTRN	_WMAFileDecodeCreate@8:NEAR
EXTRN	_WMAFileDecodeInit@4:NEAR
EXTRN	_WMAFileDecodeInfo@8:NEAR
EXTRN	_GetOverlappedResult@16:NEAR
;	COMDAT ??_C@_0BL@INHPPMCG@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?5Called?6?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BL@INHPPMCG@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?5Called?6?$AA@ DB 'WmaX'
	DB	'mo (%x): Flush Called', 0aH, 00H		; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0EA@PHEDFEDD@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5SrcBufferOff@
WMADECXMO_RD	SEGMENT
??_C@_0EA@PHEDFEDD@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5SrcBufferOff@ DB 'Wm'
	DB	'aXmo (%x): Flush: SrcBufferOffset = 0x%x, WmaFileOffset 0x%x', 0aH
	DB	00H						; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0FE@BAEIOKE@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@
WMADECXMO_RD	SEGMENT
??_C@_0FE@BAEIOKE@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@ DB 'W'
	DB	'maXmo (%x): Flush: WMA decoder failed creation. Most likely d'
	DB	'ue to out-of-memory.', 0aH, 00H		; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BC@BAJMHMG@m_state?5?$DN?50x?$CF08x?6?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BC@BAJMHMG@m_state?5?$DN?50x?$CF08x?6?$AA@ DB 'm_state = 0x%08x', 0aH
	DB	00H						; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0FA@ICEMBOCE@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@
WMADECXMO_RD	SEGMENT
??_C@_0FA@ICEMBOCE@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@ DB 'W'
	DB	'maXmo (%x): Flush: WMA decoder failed init. Most likely due t'
	DB	'o out-of-memory.', 0aH, 00H			; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0FC@KEFLEJPD@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@
WMADECXMO_RD	SEGMENT
??_C@_0FC@KEFLEJPD@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@ DB 'W'
	DB	'maXmo (%x): Flush: WMA decoder failed init 2. Most likely due'
	DB	' to out-of-memory.', 0aH, 00H		; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BK@OANGKNJG@DRM?5FILES?5NOT?5SUPPORTED?$CB?6?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BK@OANGKNJG@DRM?5FILES?5NOT?5SUPPORTED?$CB?6?$AA@ DB 'DRM FILES NO'
	DB	'T SUPPORTED!', 0aH, 00H			; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT ?Flush@CWMAXMediaObject@@UAGJXZ
WMADECXMO	SEGMENT
tv167 = -28
tv147 = -24
tv94 = -20
_dwBytesRead$ = -16
_bResult$ = -8
_rc$ = -4
_this$ = 8
?Flush@CWMAXMediaObject@@UAGJXZ PROC NEAR		; CWMAXMediaObject::Flush, COMDAT

; 528  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 529  :     tWMAFileStatus rc;
; 530  :     HRESULT hr;
; 531  :     DWORD dwBytesRead;
; 532  :     BOOL bResult;
; 533  : 
; 534  :     DBG_INFO(("WmaXmo (%x): Flush Called\n",this));

  00006	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 2 ; g_WmaXmoDebugLevel
  0000d	72 11		 jb	 SHORT $L28842
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	50		 push	 eax
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@INHPPMCG@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?5Called?6?$AA@
  00018	e8 00 00 00 00	 call	 _DbgPrint
  0001d	83 c4 08	 add	 esp, 8
$L28842:

; 535  : 
; 536  :     Reset();

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?Reset@CWMAXMediaObject@@AAEXXZ ; CWMAXMediaObject::Reset

; 537  : 
; 538  :     ENTER_CS(&m_CS);

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 c1 68	 add	 ecx, 104		; 00000068H
  0002e	51		 push	 ecx
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 539  : 
; 540  :     m_dwSrcBufferOffset = 0;

  00035	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00038	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0

; 541  :     m_dwCurrentWmaFileOffset = 0;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0

; 542  : 
; 543  :     DBG_INFO(("WmaXmo (%x): Flush: SrcBufferOffset = 0x%x, WmaFileOffset 0x%x\n",
; 544  :              this,
; 545  :              m_dwSrcBufferOffset,
; 546  :              m_dwCurrentWmaFileOffset));

  00049	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 2 ; g_WmaXmoDebugLevel
  00050	72 1f		 jb	 SHORT $L28844
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00058	52		 push	 edx
  00059	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0005f	51		 push	 ecx
  00060	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00063	52		 push	 edx
  00064	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@PHEDFEDD@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5SrcBufferOff@
  00069	e8 00 00 00 00	 call	 _DbgPrint
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
$L28844:

; 547  : 
; 548  :     //
; 549  :     // for the in-memory wma, we dont read any data from file
; 550  :     //
; 551  : 
; 552  :     if (m_pCallback == NULL) {

  00071	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00074	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00078	0f 85 2a 01 00
	00		 jne	 $L28846

; 553  : 
; 554  :         //
; 555  :         // prime the src buffer with file data (wma header etc)
; 556  :         //
; 557  :     
; 558  :         SetFilePointer(m_hFile, 0, NULL, FILE_BEGIN);

  0007e	6a 00		 push	 0
  00080	6a 00		 push	 0
  00082	6a 00		 push	 0
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0008a	52		 push	 edx
  0008b	e8 00 00 00 00	 call	 _SetFilePointer@16

; 559  : 
; 560  :         m_overlapped.Offset = 0;

  00090	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00093	c7 40 58 00 00
	00 00		 mov	 DWORD PTR [eax+88], 0

; 561  :         m_overlapped.OffsetHigh = 0;

  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0

; 562  : 
; 563  :         bResult = ReadFile(m_hFile,
; 564  :                      m_pSrcBuffer,
; 565  :                      m_dwLookaheadSize,
; 566  :                      &dwBytesRead,
; 567  :                      (m_bAsyncMode ? &m_overlapped : 0)) ;

  000a4	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000a7	83 ba b0 00 00
	00 00		 cmp	 DWORD PTR [edx+176], 0
  000ae	74 0b		 je	 SHORT $L29401
  000b0	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	83 c0 50	 add	 eax, 80			; 00000050H
  000b6	89 45 ec	 mov	 DWORD PTR tv94[ebp], eax
  000b9	eb 07		 jmp	 SHORT $L29402
$L29401:
  000bb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
$L29402:
  000c2	8b 4d ec	 mov	 ecx, DWORD PTR tv94[ebp]
  000c5	51		 push	 ecx
  000c6	8d 55 f0	 lea	 edx, DWORD PTR _dwBytesRead$[ebp]
  000c9	52		 push	 edx
  000ca	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000d3	51		 push	 ecx
  000d4	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000d7	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000da	50		 push	 eax
  000db	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 _ReadFile@20
  000e7	89 45 f8	 mov	 DWORD PTR _bResult$[ebp], eax

; 568  : 
; 569  :         if (!bResult && !m_bAsyncMode) {

  000ea	83 7d f8 00	 cmp	 DWORD PTR _bResult$[ebp], 0
  000ee	75 4b		 jne	 SHORT $L28847
  000f0	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000f3	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  000fa	75 3f		 jne	 SHORT $L28847

; 570  : 
; 571  :             LEAVE_CS(&m_CS);

  000fc	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	83 c1 68	 add	 ecx, 104		; 00000068H
  00102	51		 push	 ecx
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 572  :             return HRESULT_FROM_WIN32(GetLastError());

  00109	e8 00 00 00 00	 call	 _GetLastError@0
  0010e	85 c0		 test	 eax, eax
  00110	7f 0a		 jg	 SHORT $L29403
  00112	e8 00 00 00 00	 call	 _GetLastError@0
  00117	89 45 e8	 mov	 DWORD PTR tv147[ebp], eax
  0011a	eb 17		 jmp	 SHORT $L29404
$L29403:
  0011c	e8 00 00 00 00	 call	 _GetLastError@0
  00121	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00126	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  0012b	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  00130	89 45 e8	 mov	 DWORD PTR tv147[ebp], eax
$L29404:
  00133	8b 45 e8	 mov	 eax, DWORD PTR tv147[ebp]
  00136	e9 b3 01 00 00	 jmp	 $L28837
$L28847:

; 573  : 
; 574  :         }
; 575  :      
; 576  :         if (m_bAsyncMode) {

  0013b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0013e	83 ba b0 00 00
	00 00		 cmp	 DWORD PTR [edx+176], 0
  00145	74 61		 je	 SHORT $L28846

; 577  :     
; 578  :             bResult = GetOverlappedResult(m_hFile,&m_overlapped,&dwBytesRead,TRUE);

  00147	6a 01		 push	 1
  00149	8d 45 f0	 lea	 eax, DWORD PTR _dwBytesRead$[ebp]
  0014c	50		 push	 eax
  0014d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00150	83 c1 50	 add	 ecx, 80			; 00000050H
  00153	51		 push	 ecx
  00154	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00157	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 _GetOverlappedResult@16
  00160	89 45 f8	 mov	 DWORD PTR _bResult$[ebp], eax

; 579  :             if (!bResult) {

  00163	83 7d f8 00	 cmp	 DWORD PTR _bResult$[ebp], 0
  00167	75 3f		 jne	 SHORT $L28846

; 580  :     
; 581  :                 LEAVE_CS(&m_CS);

  00169	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0016c	83 c1 68	 add	 ecx, 104		; 00000068H
  0016f	51		 push	 ecx
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 582  :                 return HRESULT_FROM_WIN32(GetLastError());

  00176	e8 00 00 00 00	 call	 _GetLastError@0
  0017b	85 c0		 test	 eax, eax
  0017d	7f 0a		 jg	 SHORT $L29405
  0017f	e8 00 00 00 00	 call	 _GetLastError@0
  00184	89 45 e4	 mov	 DWORD PTR tv167[ebp], eax
  00187	eb 17		 jmp	 SHORT $L29406
$L29405:
  00189	e8 00 00 00 00	 call	 _GetLastError@0
  0018e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00193	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  00198	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  0019d	89 45 e4	 mov	 DWORD PTR tv167[ebp], eax
$L29406:
  001a0	8b 45 e4	 mov	 eax, DWORD PTR tv167[ebp]
  001a3	e9 46 01 00 00	 jmp	 $L28837
$L28846:

; 583  :     
; 584  :             }
; 585  :     
; 586  :         }
; 587  : 
; 588  :     }
; 589  : 
; 590  :         
; 591  :     rc = WMAFileDecodeCreate(&m_state, this);

  001a8	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001ab	52		 push	 edx
  001ac	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001af	83 c0 2c	 add	 eax, 44			; 0000002cH
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 _WMAFileDecodeCreate@8
  001b8	89 45 fc	 mov	 DWORD PTR _rc$[ebp], eax

; 592  : 
; 593  :     if (rc != cWMA_NoErr) {

  001bb	83 7d fc 00	 cmp	 DWORD PTR _rc$[ebp], 0
  001bf	74 31		 je	 SHORT $L28856

; 594  : 
; 595  :         DBG_WARN(("WmaXmo (%x): Flush: WMA decoder failed creation. Most likely due to out-of-memory.\n",this));

  001c1	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 1 ; g_WmaXmoDebugLevel
  001c8	72 11		 jb	 SHORT $L28857
  001ca	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001cd	51		 push	 ecx
  001ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FE@BAEIOKE@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@
  001d3	e8 00 00 00 00	 call	 _DbgPrint
  001d8	83 c4 08	 add	 esp, 8
$L28857:

; 596  : 
; 597  :         LEAVE_CS(&m_CS);

  001db	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001de	83 c2 68	 add	 edx, 104		; 00000068H
  001e1	52		 push	 edx
  001e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 598  :         return E_FAIL;

  001e8	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  001ed	e9 fc 00 00 00	 jmp	 $L28837
$L28856:

; 599  : 
; 600  :     }
; 601  : 
; 602  :     rc = WMAFileDecodeInit( m_state);

  001f2	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001f5	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001f8	51		 push	 ecx
  001f9	e8 00 00 00 00	 call	 _WMAFileDecodeInit@4
  001fe	89 45 fc	 mov	 DWORD PTR _rc$[ebp], eax

; 603  :     
; 604  :     DBG_INFO(("m_state = 0x%08x\n", m_state));

  00201	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 2 ; g_WmaXmoDebugLevel
  00208	72 14		 jb	 SHORT $L28860
  0020a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0020d	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00210	50		 push	 eax
  00211	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@BAJMHMG@m_state?5?$DN?50x?$CF08x?6?$AA@
  00216	e8 00 00 00 00	 call	 _DbgPrint
  0021b	83 c4 08	 add	 esp, 8
$L28860:

; 605  :     
; 606  :     if (rc != cWMA_NoErr) {

  0021e	83 7d fc 00	 cmp	 DWORD PTR _rc$[ebp], 0
  00222	74 31		 je	 SHORT $L28862

; 607  : 
; 608  :         DBG_WARN(("WmaXmo (%x): Flush: WMA decoder failed init. Most likely due to out-of-memory.\n",this));

  00224	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 1 ; g_WmaXmoDebugLevel
  0022b	72 11		 jb	 SHORT $L28863
  0022d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00230	51		 push	 ecx
  00231	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FA@ICEMBOCE@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@
  00236	e8 00 00 00 00	 call	 _DbgPrint
  0023b	83 c4 08	 add	 esp, 8
$L28863:

; 609  : 
; 610  :         LEAVE_CS(&m_CS);

  0023e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00241	83 c2 68	 add	 edx, 104		; 00000068H
  00244	52		 push	 edx
  00245	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 611  :         return E_FAIL;

  0024b	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00250	e9 99 00 00 00	 jmp	 $L28837
$L28862:

; 612  : 
; 613  :     }
; 614  : 
; 615  :     rc = WMAFileDecodeInfo( m_state, &m_hdr);

  00255	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00258	83 c0 04	 add	 eax, 4
  0025b	50		 push	 eax
  0025c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0025f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00262	52		 push	 edx
  00263	e8 00 00 00 00	 call	 _WMAFileDecodeInfo@8
  00268	89 45 fc	 mov	 DWORD PTR _rc$[ebp], eax

; 616  :     
; 617  :     if (rc != cWMA_NoErr) {

  0026b	83 7d fc 00	 cmp	 DWORD PTR _rc$[ebp], 0
  0026f	74 2e		 je	 SHORT $L28866

; 618  : 
; 619  :         DBG_WARN(("WmaXmo (%x): Flush: WMA decoder failed init 2. Most likely due to out-of-memory.\n",this));

  00271	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 1 ; g_WmaXmoDebugLevel
  00278	72 11		 jb	 SHORT $L28867
  0027a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0027d	50		 push	 eax
  0027e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FC@KEFLEJPD@WmaXmo?5?$CI?$CFx?$CJ?3?5Flush?3?5WMA?5decoder?5@
  00283	e8 00 00 00 00	 call	 _DbgPrint
  00288	83 c4 08	 add	 esp, 8
$L28867:

; 620  : 
; 621  :         LEAVE_CS(&m_CS);

  0028b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0028e	83 c1 68	 add	 ecx, 104		; 00000068H
  00291	51		 push	 ecx
  00292	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 622  :         return E_FAIL;

  00298	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  0029d	eb 4f		 jmp	 SHORT $L28837
$L28866:

; 623  : 
; 624  :     }
; 625  : 
; 626  :     if (m_hdr.has_DRM) {

  0029f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  002a2	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  002a6	74 2a		 je	 SHORT $L28870

; 627  :         
; 628  :         DBG_ERROR(( "DRM FILES NOT SUPPORTED!\n")); // Cannot open DRM licensed files.

  002a8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 0 ; g_WmaXmoDebugLevel
  002af	72 0d		 jb	 SHORT $L28871
  002b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@OANGKNJG@DRM?5FILES?5NOT?5SUPPORTED?$CB?6?$AA@
  002b6	e8 00 00 00 00	 call	 _DbgPrint
  002bb	83 c4 04	 add	 esp, 4
$L28871:

; 629  : 
; 630  :         LEAVE_CS(&m_CS);

  002be	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  002c1	83 c0 68	 add	 eax, 104		; 00000068H
  002c4	50		 push	 eax
  002c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 631  :         return E_FAIL;

  002cb	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  002d0	eb 1c		 jmp	 SHORT $L28837
$L28870:

; 632  : 
; 633  :     }
; 634  : 
; 635  :     m_bDecodeMore = TRUE;

  002d2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  002d5	c7 81 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+172], 1

; 636  : 
; 637  :     LEAVE_CS(&m_CS);

  002df	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  002e2	83 c2 68	 add	 edx, 104		; 00000068H
  002e5	52		 push	 edx
  002e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 638  :     return S_OK;

  002ec	33 c0		 xor	 eax, eax
$L28837:

; 639  : }

  002ee	8b e5		 mov	 esp, ebp
  002f0	5d		 pop	 ebp
  002f1	c2 04 00	 ret	 4
?Flush@CWMAXMediaObject@@UAGJXZ ENDP			; CWMAXMediaObject::Flush
WMADECXMO	ENDS
PUBLIC	?ThreadProc@CWMAXMediaObject@@IAEXXZ		; CWMAXMediaObject::ThreadProc
; Function compile flags: /Odt
;	COMDAT ?WmaXmoThreadProc@@YGKPAX@Z
WMADECXMO	SEGMENT
_pThis$ = -4
_pParameter$ = 8
?WmaXmoThreadProc@@YGKPAX@Z PROC NEAR			; WmaXmoThreadProc, COMDAT

; 644  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 645  :     CWMAXMediaObject *pThis = (CWMAXMediaObject *) pParameter;

  00004	8b 45 08	 mov	 eax, DWORD PTR _pParameter$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR _pThis$[ebp], eax

; 646  :     pThis->ThreadProc();

  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _pThis$[ebp]
  0000d	e8 00 00 00 00	 call	 ?ThreadProc@CWMAXMediaObject@@IAEXXZ ; CWMAXMediaObject::ThreadProc

; 647  : 
; 648  :     return 0;

  00012	33 c0		 xor	 eax, eax

; 649  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?WmaXmoThreadProc@@YGKPAX@Z ENDP			; WmaXmoThreadProc
WMADECXMO	ENDS
PUBLIC	??_C@_0BM@BDJJPGNF@ThreadProc?3?5Leaving?5thread?6?$AA@ ; `string'
PUBLIC	?ReadWmaDataFromFile@CWMAXMediaObject@@AAEJPAXKPAU_WMAXMO_ASYNC_CONTEXT@@@Z ; CWMAXMediaObject::ReadWmaDataFromFile
EXTRN	_ExitThread@4:NEAR
;	COMDAT ??_C@_0BM@BDJJPGNF@ThreadProc?3?5Leaving?5thread?6?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BM@BDJJPGNF@ThreadProc?3?5Leaving?5thread?6?$AA@ DB 'ThreadProc: L'
	DB	'eaving thread', 0aH, 00H			; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT ?ThreadProc@CWMAXMediaObject@@IAEXXZ
WMADECXMO	SEGMENT
_this$ = -12
_pCtx$28895 = -8
_hr$ = -4
?ThreadProc@CWMAXMediaObject@@IAEXXZ PROC NEAR		; CWMAXMediaObject::ThreadProc, COMDAT
; _this$ = ecx

; 652  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 653  :     HRESULT hr = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$L28886:

; 654  : 
; 655  :     while (m_cRef > 0) {

  00010	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [eax+136], 0
  0001a	0f 86 a3 00 00
	00		 jbe	 $exit$28892

; 656  : 
; 657  :         //
; 658  :         // this function should have been called in response to an event being signalled
; 659  :         //
; 660  :     
; 661  :         if (WaitForSingleObject(m_hDeleteThreadEvent,0) == WAIT_OBJECT_0) {

  00020	6a 00		 push	 0
  00022	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 _WaitForSingleObject@8
  0002e	85 c0		 test	 eax, eax
  00030	75 18		 jne	 SHORT $L28889

; 662  : 
; 663  :             //
; 664  :             // thread needs to be deleted, bail...
; 665  :             //
; 666  : 
; 667  :             DBG_INFO(("ThreadProc: Leaving thread\n"));

  00032	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 2 ; g_WmaXmoDebugLevel
  00039	72 0d		 jb	 SHORT $L28890
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@BDJJPGNF@ThreadProc?3?5Leaving?5thread?6?$AA@
  00040	e8 00 00 00 00	 call	 _DbgPrint
  00045	83 c4 04	 add	 esp, 4
$L28890:

; 668  :             goto exit;

  00048	eb 79		 jmp	 SHORT $exit$28892
$L28889:

; 669  : 
; 670  :         }
; 671  : 
; 672  :         ENTER_CS(&m_CS);

  0004a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 c0 68	 add	 eax, 104		; 00000068H
  00050	50		 push	 eax
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 673  : 
; 674  :         if (!IsListEmpty(&m_PendingList)) {

  00057	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00060	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00063	39 8a a0 00 00
	00		 cmp	 DWORD PTR [edx+160], ecx
  00069	74 46		 je	 SHORT $L28894

; 675  :     
; 676  :             PWMAXMO_ASYNC_CONTEXT pCtx;
; 677  : 
; 678  :             pCtx = (PWMAXMO_ASYNC_CONTEXT) m_PendingList.Flink;

  0006b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00074	89 4d f8	 mov	 DWORD PTR _pCtx$28895[ebp], ecx

; 679  :             hr =  ReadWmaDataFromFile((PUCHAR)m_pSrcBuffer,
; 680  :                                       m_dwLookaheadSize,
; 681  :                                       pCtx);

  00077	8b 55 f8	 mov	 edx, DWORD PTR _pCtx$28895[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00084	51		 push	 ecx
  00085	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00088	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0008b	50		 push	 eax
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	e8 00 00 00 00	 call	 ?ReadWmaDataFromFile@CWMAXMediaObject@@AAEJPAXKPAU_WMAXMO_ASYNC_CONTEXT@@@Z ; CWMAXMediaObject::ReadWmaDataFromFile
  00094	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 682  : 
; 683  :             LEAVE_CS(&m_CS);

  00097	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	83 c1 68	 add	 ecx, 104		; 00000068H
  0009d	51		 push	 ecx
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 684  : 
; 685  :             if (hr == E_ABORT) {

  000a4	81 7d fc 04 40
	00 80		 cmp	 DWORD PTR _hr$[ebp], -2147467260 ; 80004004H
  000ab	75 02		 jne	 SHORT $L28899

; 686  : 
; 687  :                 goto exit;

  000ad	eb 14		 jmp	 SHORT $exit$28892
$L28899:

; 688  : 
; 689  :             }
; 690  : 
; 691  :         } else {

  000af	eb 0d		 jmp	 SHORT $L28901
$L28894:

; 692  : 
; 693  :             LEAVE_CS(&m_CS);

  000b1	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000b4	83 c2 68	 add	 edx, 104		; 00000068H
  000b7	52		 push	 edx
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4
$L28901:

; 694  : 
; 695  :         }
; 696  : 
; 697  :         
; 698  : 
; 699  :     }

  000be	e9 4d ff ff ff	 jmp	 $L28886
$exit$28892:

; 700  : 
; 701  : exit:
; 702  : 
; 703  :     m_dwThreadId = 0;

  000c3	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], 0

; 704  :     ExitThread(0);

  000cd	6a 00		 push	 0
  000cf	e8 00 00 00 00	 call	 _ExitThread@4
$L29412:

; 705  : 
; 706  : }

  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
?ThreadProc@CWMAXMediaObject@@IAEXXZ ENDP		; CWMAXMediaObject::ThreadProc
WMADECXMO	ENDS
PUBLIC	??_C@_07ENKCPKMK@m_state?$AA@			; `string'
PUBLIC	??_C@_0M@ELFGPNAF@m_pCallback?$AA@		; `string'
PUBLIC	??_C@_0BD@PJHLJDDL@m_pCallbackContext?$AA@	; `string'
PUBLIC	??_C@_09EOJPIGFJ@pSrc?5?$DN?$DN?50?$AA@		; `string'
PUBLIC	??_C@_0FI@FMNFLBLG@FALSE?5?$CG?$CG?5?$CC?5Run?5out?5of?5available?5@ ; `string'
PUBLIC	??_C@_0DJ@LFPKHOCD@Process?3?5Dequeued?5available?5cont@ ; `string'
PUBLIC	??_C@_0DG@CLMAKJCN@Process?3?5queuing?5pending?5context@ ; `string'
PUBLIC	??_C@_0M@NKNCPJJD@?$CBFAILED?$CIhr?$CJ?$AA@	; `string'
PUBLIC	?Decode@CWMAXMediaObject@@QAGJPBU_XMEDIAPACKET@@@Z ; CWMAXMediaObject::Decode
EXTRN	_memcpy:NEAR
;	COMDAT ??_C@_07ENKCPKMK@m_state?$AA@
WMADECXMO_RD	SEGMENT
??_C@_07ENKCPKMK@m_state?$AA@ DB 'm_state', 00H		; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0M@ELFGPNAF@m_pCallback?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0M@ELFGPNAF@m_pCallback?$AA@ DB 'm_pCallback', 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BD@PJHLJDDL@m_pCallbackContext?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BD@PJHLJDDL@m_pCallbackContext?$AA@ DB 'm_pCallbackContext', 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_09EOJPIGFJ@pSrc?5?$DN?$DN?50?$AA@
WMADECXMO_RD	SEGMENT
??_C@_09EOJPIGFJ@pSrc?5?$DN?$DN?50?$AA@ DB 'pSrc == 0', 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0FI@FMNFLBLG@FALSE?5?$CG?$CG?5?$CC?5Run?5out?5of?5available?5@
WMADECXMO_RD	SEGMENT
??_C@_0FI@FMNFLBLG@FALSE?5?$CG?$CG?5?$CC?5Run?5out?5of?5available?5@ DB 'F'
	DB	'ALSE && " Run out of available packets. Caller called Process'
	DB	' too many times in a row"', 00H		; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0DJ@LFPKHOCD@Process?3?5Dequeued?5available?5cont@
WMADECXMO_RD	SEGMENT
??_C@_0DJ@LFPKHOCD@Process?3?5Dequeued?5available?5cont@ DB 'Process: Deq'
	DB	'ueued available context %x, pendingCount %x', 0aH, 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0DG@CLMAKJCN@Process?3?5queuing?5pending?5context@
WMADECXMO_RD	SEGMENT
??_C@_0DG@CLMAKJCN@Process?3?5queuing?5pending?5context@ DB 'Process: que'
	DB	'uing pending context %x, pendingCount %x', 0aH, 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0M@NKNCPJJD@?$CBFAILED?$CIhr?$CJ?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0M@NKNCPJJD@?$CBFAILED?$CIhr?$CJ?$AA@ DB '!FAILED(hr)', 00H ; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT ?Process@CWMAXMediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z
WMADECXMO	SEGMENT
__EX_ListHead$28947 = -32
__EX_Blink$28946 = -28
__EX_ListHead$28940 = -24
__EX_Blink$28939 = -20
__EX_Flink$28934 = -16
__EX_Blink$28933 = -12
_pContext$28927 = -8
_hr$ = -4
_this$ = 8
_pSrc$ = 12
_pDst$ = 16
?Process@CWMAXMediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z PROC NEAR ; CWMAXMediaObject::Process, COMDAT

; 713  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 714  :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$L28909:

; 715  :     
; 716  :     MYCHECK(m_state);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00014	75 11		 jne	 SHORT $L28910
  00016	6a 00		 push	 0
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07ENKCPKMK@m_state?$AA@
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OEDNFCCJ@WMA?5XMO?$AA@
  00022	e8 00 00 00 00	 call	 _RtlRip@12
$L28910:
  00027	33 c9		 xor	 ecx, ecx
  00029	85 c9		 test	 ecx, ecx
  0002b	75 e0		 jne	 SHORT $L28909

; 717  : 
; 718  :     if ((m_bAsyncMode == FALSE) && (m_hFile == INVALID_HANDLE_VALUE)) {

  0002d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00030	83 ba b0 00 00
	00 00		 cmp	 DWORD PTR [edx+176], 0
  00037	75 5b		 jne	 SHORT $L28921
  00039	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	83 78 4c ff	 cmp	 DWORD PTR [eax+76], -1
  00040	75 52		 jne	 SHORT $L28921

; 719  : 
; 720  :         ASSERT(m_pCallback);

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 79 40 00	 cmp	 DWORD PTR [ecx+64], 0
  00049	75 17		 jne	 SHORT $L28916
  0004b	6a 00		 push	 0
  0004d	68 d0 02 00 00	 push	 720			; 000002d0H
  00052	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@ELFGPNAF@m_pCallback?$AA@
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L28916:

; 721  :         ASSERT(m_pCallbackContext);

  00062	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00065	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  00069	75 17		 jne	 SHORT $L28918
  0006b	6a 00		 push	 0
  0006d	68 d1 02 00 00	 push	 721			; 000002d1H
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@PJHLJDDL@m_pCallbackContext?$AA@
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L28918:

; 722  : 
; 723  :         //
; 724  :         // we are in intermediate XMO mode. Dont read from file
; 725  :         // since the wma codec will call the caller for data
; 726  :         //
; 727  : 
; 728  :         return Decode(pDst);

  00082	8b 45 10	 mov	 eax, DWORD PTR _pDst$[ebp]
  00085	50		 push	 eax
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ?Decode@CWMAXMediaObject@@QAGJPBU_XMEDIAPACKET@@@Z ; CWMAXMediaObject::Decode
  0008f	e9 4c 02 00 00	 jmp	 $L28906
$L28921:

; 729  : 
; 730  :     } else {
; 731  : 
; 732  :         MYCHECK(pSrc == NULL);

  00094	83 7d 0c 00	 cmp	 DWORD PTR _pSrc$[ebp], 0
  00098	74 11		 je	 SHORT $L28922
  0009a	6a 00		 push	 0
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09EOJPIGFJ@pSrc?5?$DN?$DN?50?$AA@
  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OEDNFCCJ@WMA?5XMO?$AA@
  000a6	e8 00 00 00 00	 call	 _RtlRip@12
$L28922:
  000ab	33 d2		 xor	 edx, edx
  000ad	85 d2		 test	 edx, edx
  000af	75 e3		 jne	 SHORT $L28921

; 733  : 
; 734  :     }
; 735  : 
; 736  :     if (m_bAsyncMode) {

  000b1	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  000bb	0f 84 cc 01 00
	00		 je	 $L28926

; 737  : 
; 738  :         PWMAXMO_ASYNC_CONTEXT   pContext;
; 739  : 
; 740  :         ENTER_CS(&m_CS);

  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	83 c1 68	 add	 ecx, 104		; 00000068H
  000c7	51		 push	 ecx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 741  : 
; 742  :         //
; 743  :         // retrieve a context packet
; 744  :         //
; 745  : 
; 746  :         if (IsListEmpty(&m_AvailableList)) {

  000ce	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000d1	81 c2 98 00 00
	00		 add	 edx, 152		; 00000098H
  000d7	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000da	39 90 98 00 00
	00		 cmp	 DWORD PTR [eax+152], edx
  000e0	75 37		 jne	 SHORT $L28928

; 747  : 
; 748  :             LEAVE_CS(&m_CS);

  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	83 c1 68	 add	 ecx, 104		; 00000068H
  000e8	51		 push	 ecx
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 749  :             ASSERT(FALSE && " Run out of available packets. Caller called Process too many times in a row");

  000ef	ba 01 00 00 00	 mov	 edx, 1
  000f4	85 d2		 test	 edx, edx
  000f6	74 17		 je	 SHORT $L28929
  000f8	6a 00		 push	 0
  000fa	68 ed 02 00 00	 push	 749			; 000002edH
  000ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
  00104	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FI@FMNFLBLG@FALSE?5?$CG?$CG?5?$CC?5Run?5out?5of?5available?5@
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L28929:

; 750  :             return E_OUTOFMEMORY;

  0010f	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00114	e9 c7 01 00 00	 jmp	 $L28906
$L28928:

; 751  : 
; 752  :         }
; 753  : 
; 754  :         pContext = (PWMAXMO_ASYNC_CONTEXT) RemoveTailList(&m_AvailableList);

  00119	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0011c	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  00122	89 4d f8	 mov	 DWORD PTR _pContext$28927[ebp], ecx
  00125	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00128	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  0012e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00130	89 4d f0	 mov	 DWORD PTR __EX_Flink$28934[ebp], ecx
  00133	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00136	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  0013c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0013f	89 4d f4	 mov	 DWORD PTR __EX_Blink$28933[ebp], ecx
  00142	8b 55 f4	 mov	 edx, DWORD PTR __EX_Blink$28933[ebp]
  00145	8b 45 f0	 mov	 eax, DWORD PTR __EX_Flink$28934[ebp]
  00148	89 02		 mov	 DWORD PTR [edx], eax
  0014a	8b 4d f0	 mov	 ecx, DWORD PTR __EX_Flink$28934[ebp]
  0014d	8b 55 f4	 mov	 edx, DWORD PTR __EX_Blink$28933[ebp]
  00150	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 755  : 
; 756  :         m_dwPendingPackets++;

  00153	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00156	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0015c	83 c1 01	 add	 ecx, 1
  0015f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00162	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 757  : 
; 758  :         DBG_SPAM(("Process: Dequeued available context %x, pendingCount %x\n",
; 759  :                  pContext, m_dwPendingPackets));

  00168	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 5 ; g_WmaXmoDebugLevel
  0016f	72 1b		 jb	 SHORT $L28935
  00171	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00174	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0017a	51		 push	 ecx
  0017b	8b 55 f8	 mov	 edx, DWORD PTR _pContext$28927[ebp]
  0017e	52		 push	 edx
  0017f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LFPKHOCD@Process?3?5Dequeued?5available?5cont@
  00184	e8 00 00 00 00	 call	 _DbgPrint
  00189	83 c4 0c	 add	 esp, 12			; 0000000cH
$L28935:

; 760  : 
; 761  : 
; 762  :         pContext->pThis = this;

  0018c	8b 45 f8	 mov	 eax, DWORD PTR _pContext$28927[ebp]
  0018f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00192	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 763  : 
; 764  :         //
; 765  :         // save relevant variables into our context since media packets are off the stack
; 766  :         //
; 767  : 
; 768  :         memcpy(&pContext->Xmp, pDst, sizeof(XMEDIAPACKET));

  00195	6a 18		 push	 24			; 00000018H
  00197	8b 55 10	 mov	 edx, DWORD PTR _pDst$[ebp]
  0019a	52		 push	 edx
  0019b	8b 45 f8	 mov	 eax, DWORD PTR _pContext$28927[ebp]
  0019e	83 c0 0c	 add	 eax, 12			; 0000000cH
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 _memcpy
  001a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 769  : 
; 770  :         if (!IsListEmpty(&m_PendingList)) {

  001aa	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001ad	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  001b3	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001b6	39 8a a0 00 00
	00		 cmp	 DWORD PTR [edx+160], ecx
  001bc	0f 84 83 00 00
	00		 je	 $L28938

; 771  : 
; 772  :             //
; 773  :             // queue this packet since one is already being processed..
; 774  :             //
; 775  : 
; 776  :             InsertTailList(&m_PendingList,
; 777  :                            &pContext->ListEntry);

  001c2	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001c5	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  001ca	89 45 e8	 mov	 DWORD PTR __EX_ListHead$28940[ebp], eax
  001cd	8b 4d e8	 mov	 ecx, DWORD PTR __EX_ListHead$28940[ebp]
  001d0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001d3	89 55 ec	 mov	 DWORD PTR __EX_Blink$28939[ebp], edx
  001d6	8b 45 f8	 mov	 eax, DWORD PTR _pContext$28927[ebp]
  001d9	8b 4d e8	 mov	 ecx, DWORD PTR __EX_ListHead$28940[ebp]
  001dc	89 08		 mov	 DWORD PTR [eax], ecx
  001de	8b 55 f8	 mov	 edx, DWORD PTR _pContext$28927[ebp]
  001e1	8b 45 ec	 mov	 eax, DWORD PTR __EX_Blink$28939[ebp]
  001e4	89 42 04	 mov	 DWORD PTR [edx+4], eax
  001e7	8b 4d ec	 mov	 ecx, DWORD PTR __EX_Blink$28939[ebp]
  001ea	8b 55 f8	 mov	 edx, DWORD PTR _pContext$28927[ebp]
  001ed	89 11		 mov	 DWORD PTR [ecx], edx
  001ef	8b 45 e8	 mov	 eax, DWORD PTR __EX_ListHead$28940[ebp]
  001f2	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$28927[ebp]
  001f5	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 778  : 
; 779  : 
; 780  :             DBG_SPAM(("Process: queuing pending context %x, pendingCount %x\n",
; 781  :                      pContext, m_dwPendingPackets));

  001f8	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 5 ; g_WmaXmoDebugLevel
  001ff	72 1b		 jb	 SHORT $L28941
  00201	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00204	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0020a	50		 push	 eax
  0020b	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$28927[ebp]
  0020e	51		 push	 ecx
  0020f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@CLMAKJCN@Process?3?5queuing?5pending?5context@
  00214	e8 00 00 00 00	 call	 _DbgPrint
  00219	83 c4 0c	 add	 esp, 12			; 0000000cH
$L28941:

; 782  : 
; 783  : 
; 784  :             LEAVE_CS(&m_CS);

  0021c	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0021f	83 c2 68	 add	 edx, 104		; 00000068H
  00222	52		 push	 edx
  00223	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 785  : 
; 786  :             if (pDst->pdwStatus) {

  00229	8b 45 10	 mov	 eax, DWORD PTR _pDst$[ebp]
  0022c	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00230	74 0c		 je	 SHORT $L28943

; 787  :                 *pDst->pdwStatus = XMEDIAPACKET_STATUS_PENDING;

  00232	8b 4d 10	 mov	 ecx, DWORD PTR _pDst$[ebp]
  00235	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00238	c7 02 0a 00 00
	80		 mov	 DWORD PTR [edx], -2147483638 ; 8000000aH
$L28943:

; 788  :             }
; 789  : 
; 790  :             //
; 791  :             // return pending.
; 792  :             //
; 793  : 
; 794  :             return S_OK;

  0023e	33 c0		 xor	 eax, eax
  00240	e9 9b 00 00 00	 jmp	 $L28906
$L28938:

; 795  : 
; 796  :         }
; 797  : 
; 798  :         //
; 799  :         // insert in pending list
; 800  :         //
; 801  : 
; 802  :         InsertTailList(&m_PendingList,
; 803  :                        &pContext->ListEntry);

  00245	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00248	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  0024d	89 45 e0	 mov	 DWORD PTR __EX_ListHead$28947[ebp], eax
  00250	8b 4d e0	 mov	 ecx, DWORD PTR __EX_ListHead$28947[ebp]
  00253	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00256	89 55 e4	 mov	 DWORD PTR __EX_Blink$28946[ebp], edx
  00259	8b 45 f8	 mov	 eax, DWORD PTR _pContext$28927[ebp]
  0025c	8b 4d e0	 mov	 ecx, DWORD PTR __EX_ListHead$28947[ebp]
  0025f	89 08		 mov	 DWORD PTR [eax], ecx
  00261	8b 55 f8	 mov	 edx, DWORD PTR _pContext$28927[ebp]
  00264	8b 45 e4	 mov	 eax, DWORD PTR __EX_Blink$28946[ebp]
  00267	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0026a	8b 4d e4	 mov	 ecx, DWORD PTR __EX_Blink$28946[ebp]
  0026d	8b 55 f8	 mov	 edx, DWORD PTR _pContext$28927[ebp]
  00270	89 11		 mov	 DWORD PTR [ecx], edx
  00272	8b 45 e0	 mov	 eax, DWORD PTR __EX_ListHead$28947[ebp]
  00275	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$28927[ebp]
  00278	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 804  : 
; 805  :         LEAVE_CS(&m_CS);

  0027b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0027e	83 c2 68	 add	 edx, 104		; 00000068H
  00281	52		 push	 edx
  00282	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 806  : 
; 807  : 
; 808  :         return hr;

  00288	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  0028b	eb 53		 jmp	 SHORT $L28906
$L28926:

; 809  : 
; 810  :     } else {
; 811  : 
; 812  :         hr = ReadWmaDataFromFile((PUCHAR)m_pSrcBuffer,
; 813  :                                  m_dwLookaheadSize,
; 814  :                                  NULL);

  0028d	6a 00		 push	 0
  0028f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00292	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00298	51		 push	 ecx
  00299	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0029c	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0029f	50		 push	 eax
  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  002a3	e8 00 00 00 00	 call	 ?ReadWmaDataFromFile@CWMAXMediaObject@@AAEJPAXKPAU_WMAXMO_ASYNC_CONTEXT@@@Z ; CWMAXMediaObject::ReadWmaDataFromFile
  002a8	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 815  :      
; 816  :         if (FAILED(hr)) {

  002ab	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002af	7d 22		 jge	 SHORT $L28951

; 817  :      
; 818  :             ASSERT(!FAILED(hr));

  002b1	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002b5	7d 17		 jge	 SHORT $L28953
  002b7	6a 00		 push	 0
  002b9	68 32 03 00 00	 push	 818			; 00000332H
  002be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
  002c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@NKNCPJJD@?$CBFAILED?$CIhr?$CJ?$AA@
  002c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L28953:

; 819  :             return hr;

  002ce	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  002d1	eb 0d		 jmp	 SHORT $L28906
$L28951:

; 820  :      
; 821  :         }
; 822  : 
; 823  :         return Decode(pDst);

  002d3	8b 4d 10	 mov	 ecx, DWORD PTR _pDst$[ebp]
  002d6	51		 push	 ecx
  002d7	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  002da	52		 push	 edx
  002db	e8 00 00 00 00	 call	 ?Decode@CWMAXMediaObject@@QAGJPBU_XMEDIAPACKET@@@Z ; CWMAXMediaObject::Decode
$L28906:

; 824  :     }
; 825  : 
; 826  : }

  002e0	8b e5		 mov	 esp, ebp
  002e2	5d		 pop	 ebp
  002e3	c2 0c 00	 ret	 12			; 0000000cH
?Process@CWMAXMediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z ENDP ; CWMAXMediaObject::Process
WMADECXMO	ENDS
PUBLIC	??_C@_0DA@FPHHMLEG@?$CIpDst?9?$DOdwMaxSize?5?$CF?5?$CI2?$CKm_hdr?4num_@ ; `string'
PUBLIC	??_C@_0BE@JFMPINFA@Yielding?5execution?6?$AA@	; `string'
PUBLIC	??_C@_0BB@JKDIEABH@?5?5done?5playing?$CB?6?$AA@	; `string'
PUBLIC	??_C@_0BP@OAPJPPHK@?5?5stopping?5due?5to?5error?$CB?5?$CI?$CFd?$CJ?6?$AA@ ; `string'
PUBLIC	??_C@_0CF@CMOIEEND@WMAFileGetPCM?5?$CIthis?5?$CFx?$CJ?$CI0x?$CF08x?0?5@ ; `string'
PUBLIC	??_C@_0BF@BEBGJNGB@?5?4?4?4got?5?$CFd?5samples?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CL@MFMEJIE@Process?3?5Completing?5context?0?5pdw@ ; `string'
PUBLIC	??_C@_0EI@HDIJBGKF@Wmaxmo?5?$CI?$CFx?$CJ?3?5Process?3?5Completing@ ; `string'
EXTRN	_WMAFileDecodeData@4:NEAR
EXTRN	_WMAFileGetPCM@16:NEAR
EXTRN	_SwitchToThread@0:NEAR
;	COMDAT ??_C@_0DA@FPHHMLEG@?$CIpDst?9?$DOdwMaxSize?5?$CF?5?$CI2?$CKm_hdr?4num_@
WMADECXMO_RD	SEGMENT
??_C@_0DA@FPHHMLEG@?$CIpDst?9?$DOdwMaxSize?5?$CF?5?$CI2?$CKm_hdr?4num_@ DB '('
	DB	'pDst->dwMaxSize % (2*m_hdr.num_channels)) == 0', 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BE@JFMPINFA@Yielding?5execution?6?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BE@JFMPINFA@Yielding?5execution?6?$AA@ DB 'Yielding execution', 0aH
	DB	00H						; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BB@JKDIEABH@?5?5done?5playing?$CB?6?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BB@JKDIEABH@?5?5done?5playing?$CB?6?$AA@ DB '  done playing!', 0aH
	DB	00H						; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BP@OAPJPPHK@?5?5stopping?5due?5to?5error?$CB?5?$CI?$CFd?$CJ?6?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BP@OAPJPPHK@?5?5stopping?5due?5to?5error?$CB?5?$CI?$CFd?$CJ?6?$AA@ DB ' '
	DB	' stopping due to error! (%d)', 0aH, 00H	; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0CF@CMOIEEND@WMAFileGetPCM?5?$CIthis?5?$CFx?$CJ?$CI0x?$CF08x?0?5@
WMADECXMO_RD	SEGMENT
??_C@_0CF@CMOIEEND@WMAFileGetPCM?5?$CIthis?5?$CFx?$CJ?$CI0x?$CF08x?0?5@ DB 'W'
	DB	'MAFileGetPCM (this %x)(0x%08x, %d)', 0aH, 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BF@BEBGJNGB@?5?4?4?4got?5?$CFd?5samples?4?6?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BF@BEBGJNGB@?5?4?4?4got?5?$CFd?5samples?4?6?$AA@ DB ' ...got %d sa'
	DB	'mples.', 0aH, 00H				; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0CL@MFMEJIE@Process?3?5Completing?5context?0?5pdw@
WMADECXMO_RD	SEGMENT
??_C@_0CL@MFMEJIE@Process?3?5Completing?5context?0?5pdw@ DB 'Process: Com'
	DB	'pleting context, pdwStatus %x', 0aH, 00H	; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0EI@HDIJBGKF@Wmaxmo?5?$CI?$CFx?$CJ?3?5Process?3?5Completing@
WMADECXMO_RD	SEGMENT
??_C@_0EI@HDIJBGKF@Wmaxmo?5?$CI?$CFx?$CJ?3?5Process?3?5Completing@ DB 'Wm'
	DB	'axmo (%x): Process: Completing packet %x with %x bytes, asked'
	DB	' for %x', 0aH, 00H				; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT ?Decode@CWMAXMediaObject@@QAGJPBU_XMEDIAPACKET@@@Z
WMADECXMO	SEGMENT
_rc$28977 = -44
_numSamples$28988 = -40
_samples_decoded_this_round$28992 = -36
_pSamples$28986 = -32
_pDstBuffer$ = -28
_dwXmpStatus$ = -20
_num_bytes_requested$ = -16
_count$ = -12
_num_samples_requested$ = -8
_num_samples_decoded$ = -4
_this$ = 8
_pDst$ = 12
?Decode@CWMAXMediaObject@@QAGJPBU_XMEDIAPACKET@@@Z PROC NEAR ; CWMAXMediaObject::Decode, COMDAT

; 832  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 833  :     PVOID pDstBuffer;
; 834  :     HRESULT hr;
; 835  :     DWORD count = 0;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 836  :     DWORD dwXmpStatus = XMEDIAPACKET_STATUS_SUCCESS;

  0000d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwXmpStatus$[ebp], 0

; 837  : 
; 838  :     ASSERT((pDst->dwMaxSize % (2*m_hdr.num_channels)) == 0);

  00014	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0001a	d1 e1		 shl	 ecx, 1
  0001c	8b 55 0c	 mov	 edx, DWORD PTR _pDst$[ebp]
  0001f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00022	33 d2		 xor	 edx, edx
  00024	f7 f1		 div	 ecx
  00026	85 d2		 test	 edx, edx
  00028	74 17		 je	 SHORT $L28964
  0002a	6a 00		 push	 0
  0002c	68 46 03 00 00	 push	 838			; 00000346H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@FPHHMLEG@?$CIpDst?9?$DOdwMaxSize?5?$CF?5?$CI2?$CKm_hdr?4num_@
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L28964:

; 839  :     DWORD num_bytes_requested = pDst->dwMaxSize;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _pDst$[ebp]
  00044	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00047	89 4d f0	 mov	 DWORD PTR _num_bytes_requested$[ebp], ecx

; 840  :     DWORD num_samples_requested = (num_bytes_requested) / (sizeof(short)* m_hdr.num_channels);

  0004a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00050	d1 e1		 shl	 ecx, 1
  00052	8b 45 f0	 mov	 eax, DWORD PTR _num_bytes_requested$[ebp]
  00055	33 d2		 xor	 edx, edx
  00057	f7 f1		 div	 ecx
  00059	89 45 f8	 mov	 DWORD PTR _num_samples_requested$[ebp], eax

; 841  :     DWORD num_samples_decoded = 0;

  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _num_samples_decoded$[ebp], 0

; 842  :     
; 843  :     pDstBuffer = pDst->pvBuffer;

  00063	8b 55 0c	 mov	 edx, DWORD PTR _pDst$[ebp]
  00066	8b 02		 mov	 eax, DWORD PTR [edx]
  00068	89 45 e4	 mov	 DWORD PTR _pDstBuffer$[ebp], eax
$L28971:

; 844  : 
; 845  :     {
; 846  :         while ( num_samples_decoded < num_samples_requested ) {

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _num_samples_decoded$[ebp]
  0006e	3b 4d f8	 cmp	 ecx, DWORD PTR _num_samples_requested$[ebp]
  00071	0f 83 50 01 00
	00		 jae	 $L28972

; 847  : 
; 848  : 
; 849  :             if ( m_bDecodeMore ) {

  00077	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	83 ba ac 00 00
	00 00		 cmp	 DWORD PTR [edx+172], 0
  00081	0f 84 9c 00 00
	00		 je	 $L28973

; 850  : 
; 851  :                 m_bDecodeMore = false;

  00087	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	c7 80 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+172], 0

; 852  :                 count++;

  00094	8b 4d f4	 mov	 ecx, DWORD PTR _count$[ebp]
  00097	83 c1 01	 add	 ecx, 1
  0009a	89 4d f4	 mov	 DWORD PTR _count$[ebp], ecx

; 853  : 
; 854  :                 //
; 855  :                 // yield execution so we dont hog the CPU
; 856  :                 //
; 857  : 
; 858  :                 if (count%m_dwYieldRate == 0) {

  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  000a3	33 d2		 xor	 edx, edx
  000a5	f7 b1 b4 00 00
	00		 div	 DWORD PTR [ecx+180]
  000ab	85 d2		 test	 edx, edx
  000ad	75 1b		 jne	 SHORT $L28974

; 859  : 
; 860  :                     DBG_SPAM(("Yielding execution\n"));

  000af	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 5 ; g_WmaXmoDebugLevel
  000b6	72 0d		 jb	 SHORT $L28975
  000b8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@JFMPINFA@Yielding?5execution?6?$AA@
  000bd	e8 00 00 00 00	 call	 _DbgPrint
  000c2	83 c4 04	 add	 esp, 4
$L28975:

; 861  :                     SwitchToThread();

  000c5	e8 00 00 00 00	 call	 _SwitchToThread@0
$L28974:

; 862  : 
; 863  :                 }
; 864  : 
; 865  :                 tWMAFileStatus rc = WMAFileDecodeData(m_state);

  000ca	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000cd	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 _WMAFileDecodeData@4
  000d6	89 45 d4	 mov	 DWORD PTR _rc$28977[ebp], eax

; 866  : 
; 867  :                 if (rc != cWMA_NoErr) {

  000d9	83 7d d4 00	 cmp	 DWORD PTR _rc$28977[ebp], 0
  000dd	74 44		 je	 SHORT $L28973

; 868  : 
; 869  :                     if (rc == cWMA_NoMoreFrames)

  000df	83 7d d4 06	 cmp	 DWORD PTR _rc$28977[ebp], 6
  000e3	75 18		 jne	 SHORT $L28979

; 870  :                     {
; 871  :                         DBG_ERROR(("  done playing!\n"));

  000e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 0 ; g_WmaXmoDebugLevel
  000ec	72 0d		 jb	 SHORT $L28980
  000ee	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@JKDIEABH@?5?5done?5playing?$CB?6?$AA@
  000f3	e8 00 00 00 00	 call	 _DbgPrint
  000f8	83 c4 04	 add	 esp, 4
$L28980:

; 872  :                     }
; 873  :                     else

  000fb	eb 21		 jmp	 SHORT $L28982
$L28979:

; 874  :                     {
; 875  :                         DBG_ERROR(("  stopping due to error! (%d)\n", rc));

  000fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 0 ; g_WmaXmoDebugLevel
  00104	72 11		 jb	 SHORT $L28983
  00106	8b 4d d4	 mov	 ecx, DWORD PTR _rc$28977[ebp]
  00109	51		 push	 ecx
  0010a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@OAPJPPHK@?5?5stopping?5due?5to?5error?$CB?5?$CI?$CFd?$CJ?6?$AA@
  0010f	e8 00 00 00 00	 call	 _DbgPrint
  00114	83 c4 08	 add	 esp, 8
$L28983:

; 876  :                         dwXmpStatus = XMEDIAPACKET_STATUS_FAILURE;

  00117	c7 45 ec 05 40
	00 80		 mov	 DWORD PTR _dwXmpStatus$[ebp], -2147467259 ; 80004005H
$L28982:

; 877  :                     }
; 878  :                     break; // End of WMA file, or some error.

  0011e	e9 a4 00 00 00	 jmp	 $L28972
$L28973:

; 879  :                 }
; 880  : 
; 881  : 
; 882  :             }
; 883  : 
; 884  :             short* pSamples = ((short*) pDstBuffer) + num_samples_decoded * m_hdr.num_channels;

  00123	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00126	8b 45 fc	 mov	 eax, DWORD PTR _num_samples_decoded$[ebp]
  00129	0f af 42 0c	 imul	 eax, DWORD PTR [edx+12]
  0012d	8b 4d e4	 mov	 ecx, DWORD PTR _pDstBuffer$[ebp]
  00130	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00133	89 55 e0	 mov	 DWORD PTR _pSamples$28986[ebp], edx

; 885  :             DWORD numSamples = num_samples_requested - num_samples_decoded;

  00136	8b 45 f8	 mov	 eax, DWORD PTR _num_samples_requested$[ebp]
  00139	2b 45 fc	 sub	 eax, DWORD PTR _num_samples_decoded$[ebp]
  0013c	89 45 d8	 mov	 DWORD PTR _numSamples$28988[ebp], eax

; 886  :             
; 887  :             if ( numSamples > MAX_SAMPLES_PER_REQUEST) {

  0013f	81 7d d8 00 08
	00 00		 cmp	 DWORD PTR _numSamples$28988[ebp], 2048 ; 00000800H
  00146	76 07		 jbe	 SHORT $L28989

; 888  :                 numSamples = MAX_SAMPLES_PER_REQUEST;

  00148	c7 45 d8 00 08
	00 00		 mov	 DWORD PTR _numSamples$28988[ebp], 2048 ; 00000800H
$L28989:

; 889  :             }
; 890  : 
; 891  :             DBG_SPAM(("WMAFileGetPCM (this %x)(0x%08x, %d)\n", this, pSamples, numSamples));

  0014f	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 5 ; g_WmaXmoDebugLevel
  00156	72 19		 jb	 SHORT $L28990
  00158	8b 4d d8	 mov	 ecx, DWORD PTR _numSamples$28988[ebp]
  0015b	51		 push	 ecx
  0015c	8b 55 e0	 mov	 edx, DWORD PTR _pSamples$28986[ebp]
  0015f	52		 push	 edx
  00160	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00163	50		 push	 eax
  00164	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@CMOIEEND@WMAFileGetPCM?5?$CIthis?5?$CFx?$CJ?$CI0x?$CF08x?0?5@
  00169	e8 00 00 00 00	 call	 _DbgPrint
  0016e	83 c4 10	 add	 esp, 16			; 00000010H
$L28990:

; 892  :             DWORD samples_decoded_this_round = WMAFileGetPCM( m_state,
; 893  :                 pSamples,
; 894  :                 NULL, numSamples);

  00171	8b 4d d8	 mov	 ecx, DWORD PTR _numSamples$28988[ebp]
  00174	51		 push	 ecx
  00175	6a 00		 push	 0
  00177	8b 55 e0	 mov	 edx, DWORD PTR _pSamples$28986[ebp]
  0017a	52		 push	 edx
  0017b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0017e	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00181	51		 push	 ecx
  00182	e8 00 00 00 00	 call	 _WMAFileGetPCM@16
  00187	89 45 dc	 mov	 DWORD PTR _samples_decoded_this_round$28992[ebp], eax

; 895  : 
; 896  :             DBG_INFO((" ...got %d samples.\n", samples_decoded_this_round));

  0018a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 2 ; g_WmaXmoDebugLevel
  00191	72 11		 jb	 SHORT $L28993
  00193	8b 55 dc	 mov	 edx, DWORD PTR _samples_decoded_this_round$28992[ebp]
  00196	52		 push	 edx
  00197	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@BEBGJNGB@?5?4?4?4got?5?$CFd?5samples?4?6?$AA@
  0019c	e8 00 00 00 00	 call	 _DbgPrint
  001a1	83 c4 08	 add	 esp, 8
$L28993:

; 897  : 
; 898  :             if ( samples_decoded_this_round < numSamples ){

  001a4	8b 45 dc	 mov	 eax, DWORD PTR _samples_decoded_this_round$28992[ebp]
  001a7	3b 45 d8	 cmp	 eax, DWORD PTR _numSamples$28988[ebp]
  001aa	73 0d		 jae	 SHORT $L28995

; 899  :                 m_bDecodeMore = true;

  001ac	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001af	c7 81 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+172], 1
$L28995:

; 900  :             }
; 901  : 
; 902  :             num_samples_decoded += samples_decoded_this_round;

  001b9	8b 55 fc	 mov	 edx, DWORD PTR _num_samples_decoded$[ebp]
  001bc	03 55 dc	 add	 edx, DWORD PTR _samples_decoded_this_round$28992[ebp]
  001bf	89 55 fc	 mov	 DWORD PTR _num_samples_decoded$[ebp], edx

; 903  :         }

  001c2	e9 a4 fe ff ff	 jmp	 $L28971
$L28972:

; 904  : 
; 905  :     }
; 906  :     
; 907  :     DBG_SPAM(("Process: Completing context, pdwStatus %x\n",
; 908  :              pDst->pdwStatus));

  001c7	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 5 ; g_WmaXmoDebugLevel
  001ce	72 14		 jb	 SHORT $L28996
  001d0	8b 45 0c	 mov	 eax, DWORD PTR _pDst$[ebp]
  001d3	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001d6	51		 push	 ecx
  001d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@MFMEJIE@Process?3?5Completing?5context?0?5pdw@
  001dc	e8 00 00 00 00	 call	 _DbgPrint
  001e1	83 c4 08	 add	 esp, 8
$L28996:

; 909  : 
; 910  :     if (pDst->pdwCompletedSize ) {

  001e4	8b 55 0c	 mov	 edx, DWORD PTR _pDst$[ebp]
  001e7	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  001eb	74 52		 je	 SHORT $L28998

; 911  :         *pDst->pdwCompletedSize = num_samples_decoded * m_hdr.num_channels * sizeof(short);

  001ed	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001f0	8b 4d fc	 mov	 ecx, DWORD PTR _num_samples_decoded$[ebp]
  001f3	0f af 48 0c	 imul	 ecx, DWORD PTR [eax+12]
  001f7	d1 e1		 shl	 ecx, 1
  001f9	8b 55 0c	 mov	 edx, DWORD PTR _pDst$[ebp]
  001fc	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001ff	89 08		 mov	 DWORD PTR [eax], ecx

; 912  : 
; 913  :         if (pDst->dwMaxSize > *pDst->pdwCompletedSize) {

  00201	8b 4d 0c	 mov	 ecx, DWORD PTR _pDst$[ebp]
  00204	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00207	8b 45 0c	 mov	 eax, DWORD PTR _pDst$[ebp]
  0020a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0020d	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0020f	76 2e		 jbe	 SHORT $L28998

; 914  :     
; 915  :             DBG_ERROR(("Wmaxmo (%x): Process: Completing packet %x with %x bytes, asked for %x\n",
; 916  :                         this,
; 917  :                         pDst,
; 918  :                         *pDst->pdwCompletedSize,
; 919  :                         pDst->dwMaxSize));

  00211	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 0 ; g_WmaXmoDebugLevel
  00218	72 25		 jb	 SHORT $L28998
  0021a	8b 55 0c	 mov	 edx, DWORD PTR _pDst$[ebp]
  0021d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00220	50		 push	 eax
  00221	8b 4d 0c	 mov	 ecx, DWORD PTR _pDst$[ebp]
  00224	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00227	8b 02		 mov	 eax, DWORD PTR [edx]
  00229	50		 push	 eax
  0022a	8b 4d 0c	 mov	 ecx, DWORD PTR _pDst$[ebp]
  0022d	51		 push	 ecx
  0022e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00231	52		 push	 edx
  00232	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EI@HDIJBGKF@Wmaxmo?5?$CI?$CFx?$CJ?3?5Process?3?5Completing@
  00237	e8 00 00 00 00	 call	 _DbgPrint
  0023c	83 c4 14	 add	 esp, 20			; 00000014H
$L28998:

; 920  :     
; 921  :     
; 922  :         }
; 923  : 
; 924  :     }
; 925  :     
; 926  :     if (pDst->hCompletionEvent) {

  0023f	8b 45 0c	 mov	 eax, DWORD PTR _pDst$[ebp]
  00242	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00246	74 0c		 je	 SHORT $L29003

; 927  :         SetEvent(pDst->hCompletionEvent);

  00248	8b 4d 0c	 mov	 ecx, DWORD PTR _pDst$[ebp]
  0024b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0024e	52		 push	 edx
  0024f	e8 00 00 00 00	 call	 _SetEvent@4
$L29003:

; 928  :     }
; 929  : 
; 930  :     if (pDst->pdwStatus) {

  00254	8b 45 0c	 mov	 eax, DWORD PTR _pDst$[ebp]
  00257	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0025b	74 0b		 je	 SHORT $L29004

; 931  :         *pDst->pdwStatus = dwXmpStatus;

  0025d	8b 4d 0c	 mov	 ecx, DWORD PTR _pDst$[ebp]
  00260	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00263	8b 45 ec	 mov	 eax, DWORD PTR _dwXmpStatus$[ebp]
  00266	89 02		 mov	 DWORD PTR [edx], eax
$L29004:

; 932  :     }
; 933  :     
; 934  :     return S_OK;

  00268	33 c0		 xor	 eax, eax

; 935  : }

  0026a	8b e5		 mov	 esp, ebp
  0026c	5d		 pop	 ebp
  0026d	c2 08 00	 ret	 8
?Decode@CWMAXMediaObject@@QAGJPBU_XMEDIAPACKET@@@Z ENDP	; CWMAXMediaObject::Decode
WMADECXMO	ENDS
PUBLIC	??_C@_03LKCHMNCG@pMO?$AA@			; `string'
PUBLIC	_WMAFileCBGetData@20
PUBLIC	?GetData@CWMAXMediaObject@@QAEKKKPAPAX@Z	; CWMAXMediaObject::GetData
;	COMDAT ??_C@_03LKCHMNCG@pMO?$AA@
WMADECXMO_RD	SEGMENT
??_C@_03LKCHMNCG@pMO?$AA@ DB 'pMO', 00H			; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT _WMAFileCBGetData@20
WMADECXMO	SEGMENT
_pMO$ = -4
_state$ = 8
_pContext$ = 12
_offset$ = 16
_num_bytes$ = 20
_ppData$ = 24
_WMAFileCBGetData@20 PROC NEAR				; COMDAT

; 950  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 951  :    CWMAXMediaObject* pMO = (CWMAXMediaObject*) pContext;

  00004	8b 45 0c	 mov	 eax, DWORD PTR _pContext$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR _pMO$[ebp], eax
$L29021:

; 952  :    MYCHECK(pMO);

  0000a	83 7d fc 00	 cmp	 DWORD PTR _pMO$[ebp], 0
  0000e	75 11		 jne	 SHORT $L29022
  00010	6a 00		 push	 0
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03LKCHMNCG@pMO?$AA@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OEDNFCCJ@WMA?5XMO?$AA@
  0001c	e8 00 00 00 00	 call	 _RtlRip@12
$L29022:
  00021	33 c9		 xor	 ecx, ecx
  00023	85 c9		 test	 ecx, ecx
  00025	75 e3		 jne	 SHORT $L29021

; 953  : 
; 954  :    return pMO->GetData(offset, num_bytes, (void**) ppData);

  00027	8b 55 18	 mov	 edx, DWORD PTR _ppData$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 14	 mov	 eax, DWORD PTR _num_bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 10	 mov	 ecx, DWORD PTR _offset$[ebp]
  00032	51		 push	 ecx
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _pMO$[ebp]
  00036	e8 00 00 00 00	 call	 ?GetData@CWMAXMediaObject@@QAEKKKPAPAX@Z ; CWMAXMediaObject::GetData

; 955  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 14 00	 ret	 20			; 00000014H
_WMAFileCBGetData@20 ENDP
WMADECXMO	ENDS
PUBLIC	??_C@_0BH@GCNGBKFP@m_dwLookaheadSize?5?$DN?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_0CP@PGKCMHOO@?5CBGetData?$CI?$CFx?$CJ?5offset?3?50x?$CF08x?90x@ ; `string'
PUBLIC	??_C@_06IECOAJOO@ppData?$AA@			; `string'
PUBLIC	??_C@_0FM@DDKDMLPF@Wma?5decoder?5requested?5data?5at?5an@ ; `string'
PUBLIC	??_C@_0DM@LDCFGOP@WMAXMO?$CI?$CFx?$CJ?3?5GetData?3?5Wma?5ask?5for@ ; `string'
;	COMDAT ??_C@_0BH@GCNGBKFP@m_dwLookaheadSize?5?$DN?$DN?50?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BH@GCNGBKFP@m_dwLookaheadSize?5?$DN?$DN?50?$AA@ DB 'm_dwLookaheadS'
	DB	'ize == 0', 00H				; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0CP@PGKCMHOO@?5CBGetData?$CI?$CFx?$CJ?5offset?3?50x?$CF08x?90x@
WMADECXMO_RD	SEGMENT
??_C@_0CP@PGKCMHOO@?5CBGetData?$CI?$CFx?$CJ?5offset?3?50x?$CF08x?90x@ DB ' '
	DB	'CBGetData(%x) offset: 0x%08x-0x%08x size: %d', 0aH, 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_06IECOAJOO@ppData?$AA@
WMADECXMO_RD	SEGMENT
??_C@_06IECOAJOO@ppData?$AA@ DB 'ppData', 00H		; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0FM@DDKDMLPF@Wma?5decoder?5requested?5data?5at?5an@
WMADECXMO_RD	SEGMENT
??_C@_0FM@DDKDMLPF@Wma?5decoder?5requested?5data?5at?5an@ DB 'Wma decoder'
	DB	' requested data at an offset further than dwLookaheadSize.Off'
	DB	'set %x, current %x ', 00H			; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0DM@LDCFGOP@WMAXMO?$CI?$CFx?$CJ?3?5GetData?3?5Wma?5ask?5for@
WMADECXMO_RD	SEGMENT
??_C@_0DM@LDCFGOP@WMAXMO?$CI?$CFx?$CJ?3?5GetData?3?5Wma?5ask?5for@ DB 'WM'
	DB	'AXMO(%x): GetData: Wma ask for Offset %x, last offset %x', 0aH
	DB	00H						; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT ?GetData@CWMAXMediaObject@@QAEKKKPAPAX@Z
WMADECXMO	SEGMENT
_this$ = -40
_hr$ = -12
_max_bytes$ = -4
_offset$ = 8
_num_bytes$ = 12
_ppData$ = 16
?GetData@CWMAXMediaObject@@QAEKKKPAPAX@Z PROC NEAR	; CWMAXMediaObject::GetData, COMDAT
; _this$ = ecx

; 961  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 962  :    XMEDIAPACKET xmp;
; 963  :    HRESULT                 hr      = DS_OK;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 964  :    DWORD                   dwRead;
; 965  : 
; 966  :    //
; 967  :    // if the XMO is instanttiated as a in-memory decoder
; 968  :    // dialup the caller supplied callback
; 969  :    //
; 970  : 
; 971  :    if (m_pCallback) {

  00010	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00017	74 41		 je	 SHORT $L29037

; 972  : 
; 973  :        ASSERT(m_dwLookaheadSize == 0);

  00019	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	83 b9 90 00 00
	00 00		 cmp	 DWORD PTR [ecx+144], 0
  00023	74 17		 je	 SHORT $L29038
  00025	6a 00		 push	 0
  00027	68 cd 03 00 00	 push	 973			; 000003cdH
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@GCNGBKFP@m_dwLookaheadSize?5?$DN?$DN?50?$AA@
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L29038:

; 974  :        return (*m_pCallback)(m_pCallbackContext,
; 975  :                              offset,
; 976  :                              num_bytes,
; 977  :                              ppData);

  0003c	8b 55 10	 mov	 edx, DWORD PTR _ppData$[ebp]
  0003f	52		 push	 edx
  00040	8b 45 0c	 mov	 eax, DWORD PTR _num_bytes$[ebp]
  00043	50		 push	 eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _offset$[ebp]
  00047	51		 push	 ecx
  00048	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0004e	50		 push	 eax
  0004f	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	ff 51 40	 call	 DWORD PTR [ecx+64]
  00055	e9 0a 01 00 00	 jmp	 $L29032
$L29037:

; 978  : 
; 979  :    }
; 980  : 
; 981  :    ENTER_CS(&m_CS);

  0005a	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0005d	83 c2 68	 add	 edx, 104		; 00000068H
  00060	52		 push	 edx
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 982  : 
; 983  :    ULONG max_bytes = m_dwSrcBufferOffset+m_dwLookaheadSize - offset;

  00067	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0006d	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00070	03 8a 90 00 00
	00		 add	 ecx, DWORD PTR [edx+144]
  00076	2b 4d 08	 sub	 ecx, DWORD PTR _offset$[ebp]
  00079	89 4d fc	 mov	 DWORD PTR _max_bytes$[ebp], ecx

; 984  : 
; 985  :    DBG_SPAM((" CBGetData(%x) offset: 0x%08x-0x%08x size: %d\n", this, offset, offset + num_bytes - 1, num_bytes));

  0007c	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 5 ; g_WmaXmoDebugLevel
  00083	72 24		 jb	 SHORT $L29043
  00085	8b 45 0c	 mov	 eax, DWORD PTR _num_bytes$[ebp]
  00088	50		 push	 eax
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR _num_bytes$[ebp]
  0008c	8b 55 08	 mov	 edx, DWORD PTR _offset$[ebp]
  0008f	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  00093	50		 push	 eax
  00094	8b 4d 08	 mov	 ecx, DWORD PTR _offset$[ebp]
  00097	51		 push	 ecx
  00098	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	52		 push	 edx
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@PGKCMHOO@?5CBGetData?$CI?$CFx?$CJ?5offset?3?50x?$CF08x?90x@
  000a1	e8 00 00 00 00	 call	 _DbgPrint
  000a6	83 c4 14	 add	 esp, 20			; 00000014H
$L29043:

; 986  :    MYCHECK(ppData);

  000a9	83 7d 10 00	 cmp	 DWORD PTR _ppData$[ebp], 0
  000ad	75 11		 jne	 SHORT $L29044
  000af	6a 00		 push	 0
  000b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06IECOAJOO@ppData?$AA@
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OEDNFCCJ@WMA?5XMO?$AA@
  000bb	e8 00 00 00 00	 call	 _RtlRip@12
$L29044:
  000c0	33 c0		 xor	 eax, eax
  000c2	85 c0		 test	 eax, eax
  000c4	75 e3		 jne	 SHORT $L29043

; 987  :    
; 988  :    if (((m_dwSrcBufferOffset+m_dwLookaheadSize) <= offset) ||
; 989  :        (num_bytes > max_bytes)){

  000c6	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000cc	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	03 90 90 00 00
	00		 add	 edx, DWORD PTR [eax+144]
  000d5	3b 55 08	 cmp	 edx, DWORD PTR _offset$[ebp]
  000d8	76 08		 jbe	 SHORT $L29049
  000da	8b 4d 0c	 mov	 ecx, DWORD PTR _num_bytes$[ebp]
  000dd	3b 4d fc	 cmp	 ecx, DWORD PTR _max_bytes$[ebp]
  000e0	76 25		 jbe	 SHORT $L29048
$L29049:

; 990  : 
; 991  :        DBG_WARN(("Wma decoder requested data at an offset further than dwLookaheadSize.Offset %x, current %x ",offset,m_dwSrcBufferOffset));

  000e2	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 1 ; g_WmaXmoDebugLevel
  000e9	72 18		 jb	 SHORT $L29050
  000eb	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  000ee	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000f1	50		 push	 eax
  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _offset$[ebp]
  000f5	51		 push	 ecx
  000f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FM@DDKDMLPF@Wma?5decoder?5requested?5data?5at?5an@
  000fb	e8 00 00 00 00	 call	 _DbgPrint
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
$L29050:

; 992  :        return 0;

  00103	33 c0		 xor	 eax, eax
  00105	eb 5d		 jmp	 SHORT $L29032
$L29048:

; 993  : 
; 994  :    }
; 995  : 
; 996  :    *ppData = m_pSrcBuffer + offset - m_dwSrcBufferOffset;

  00107	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0010a	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0010d	03 45 08	 add	 eax, DWORD PTR _offset$[ebp]
  00110	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	2b 41 38	 sub	 eax, DWORD PTR [ecx+56]
  00116	8b 55 10	 mov	 edx, DWORD PTR _ppData$[ebp]
  00119	89 02		 mov	 DWORD PTR [edx], eax

; 997  : 
; 998  : #if DBG
; 999  :    if (offset < m_dwCurrentWmaFileOffset) {

  0011b	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0011e	8b 4d 08	 mov	 ecx, DWORD PTR _offset$[ebp]
  00121	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  00124	73 25		 jae	 SHORT $L29052

; 1000 : 
; 1001 :        DBG_WARN(("WMAXMO(%x): GetData: Wma ask for Offset %x, last offset %x\n",
; 1002 :                 this,
; 1003 :                 offset,
; 1004 :                 m_dwCurrentWmaFileOffset));

  00126	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 1 ; g_WmaXmoDebugLevel
  0012d	72 1c		 jb	 SHORT $L29052
  0012f	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00132	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00135	50		 push	 eax
  00136	8b 4d 08	 mov	 ecx, DWORD PTR _offset$[ebp]
  00139	51		 push	 ecx
  0013a	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0013d	52		 push	 edx
  0013e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@LDCFGOP@WMAXMO?$CI?$CFx?$CJ?3?5GetData?3?5Wma?5ask?5for@
  00143	e8 00 00 00 00	 call	 _DbgPrint
  00148	83 c4 10	 add	 esp, 16			; 00000010H
$L29052:

; 1005 : 
; 1006 : 
; 1007 :    }
; 1008 : #endif
; 1009 : 
; 1010 :    m_dwCurrentWmaFileOffset = offset;

  0014b	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0014e	8b 4d 08	 mov	 ecx, DWORD PTR _offset$[ebp]
  00151	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 1011 : 
; 1012 :    LEAVE_CS(&m_CS);

  00154	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00157	83 c2 68	 add	 edx, 104		; 00000068H
  0015a	52		 push	 edx
  0015b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 1013 : 
; 1014 :    return num_bytes;

  00161	8b 45 0c	 mov	 eax, DWORD PTR _num_bytes$[ebp]
$L29032:

; 1015 : }

  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c2 0c 00	 ret	 12			; 0000000cH
?GetData@CWMAXMediaObject@@QAEKKKPAPAX@Z ENDP		; CWMAXMediaObject::GetData
WMADECXMO	ENDS
PUBLIC	??_C@_0BM@CNDAKADA@ReadFile?3?5no?5file?5I?1o?5done?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@JIGALKCG@m_dwSrcBufferOffset?$AA@	; `string'
PUBLIC	??_C@_0DE@BDADEBAI@?5CBGetData?5Reading?5ahead?0?5offset@ ; `string'
PUBLIC	??_C@_0EP@NOIIJNPM@ReadFile?$CI?$CFx?$CJ?3?5calling?5readfile?5w@ ; `string'
PUBLIC	??_C@_0CH@NJHIGFAA@Wmaxmo?3?3readfile?3?5Read?5failed?5wi@ ; `string'
PUBLIC	??_C@_0EM@FFECJCLO@WmaXMO?3?3ReadFile?$CI?$CFx?$CJ?3?5completing@ ; `string'
;	COMDAT ??_C@_0BM@CNDAKADA@ReadFile?3?5no?5file?5I?1o?5done?6?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BM@CNDAKADA@ReadFile?3?5no?5file?5I?1o?5done?6?$AA@ DB 'ReadFile: '
	DB	'no file I/o done', 0aH, 00H			; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0BE@JIGALKCG@m_dwSrcBufferOffset?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BE@JIGALKCG@m_dwSrcBufferOffset?$AA@ DB 'm_dwSrcBufferOffset', 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0DE@BDADEBAI@?5CBGetData?5Reading?5ahead?0?5offset@
WMADECXMO_RD	SEGMENT
??_C@_0DE@BDADEBAI@?5CBGetData?5Reading?5ahead?0?5offset@ DB ' CBGetData '
	DB	'Reading ahead, offset %x, wma offset %x', 0aH, 00H ; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0EP@NOIIJNPM@ReadFile?$CI?$CFx?$CJ?3?5calling?5readfile?5w@
WMADECXMO_RD	SEGMENT
??_C@_0EP@NOIIJNPM@ReadFile?$CI?$CFx?$CJ?3?5calling?5readfile?5w@ DB 'Rea'
	DB	'dFile(%x): calling readfile with context %x, pendingCount %x,'
	DB	' listempty %d', 0aH, 00H			; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0CH@NJHIGFAA@Wmaxmo?3?3readfile?3?5Read?5failed?5wi@
WMADECXMO_RD	SEGMENT
??_C@_0CH@NJHIGFAA@Wmaxmo?3?3readfile?3?5Read?5failed?5wi@ DB 'Wmaxmo::re'
	DB	'adfile: Read failed with %x', 0aH, 00H	; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0EM@FFECJCLO@WmaXMO?3?3ReadFile?$CI?$CFx?$CJ?3?5completing@
WMADECXMO_RD	SEGMENT
??_C@_0EM@FFECJCLO@WmaXMO?3?3ReadFile?$CI?$CFx?$CJ?3?5completing@ DB 'Wma'
	DB	'XMO::ReadFile(%x): completing context %x, pendingCount %x, li'
	DB	'stempty %d', 0aH, 00H			; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT ?ReadWmaDataFromFile@CWMAXMediaObject@@AAEJPAXKPAU_WMAXMO_ASYNC_CONTEXT@@@Z
WMADECXMO	SEGMENT
tv182 = -52
tv162 = -48
tv146 = -44
_this$ = -40
__EX_ListHead$29095 = -36
__EX_Flink$29094 = -32
__EX_Flink$29093 = -28
__EX_Blink$29092 = -24
_dwBytesRead$ = -20
_status$ = -16
_hr$ = -12
_bResult$ = -8
_Offset$ = -4
_pvBuffer$ = 8
_dwSize$ = 12
_pContext$ = 16
?ReadWmaDataFromFile@CWMAXMediaObject@@AAEJPAXKPAU_WMAXMO_ASYNC_CONTEXT@@@Z PROC NEAR ; CWMAXMediaObject::ReadWmaDataFromFile, COMDAT
; _this$ = ecx

; 1022 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 1023 :     NTSTATUS                status = STATUS_SUCCESS;

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0

; 1024 :     HRESULT hr = S_OK;

  00010	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1025 :     ULONG Offset;
; 1026 :     BOOL bResult;
; 1027 :     DWORD dwBytesRead;
; 1028 : 
; 1029 :     Offset = m_dwSrcBufferOffset;

  00017	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0001d	89 4d fc	 mov	 DWORD PTR _Offset$[ebp], ecx

; 1030 : 
; 1031 :     if ((m_dwCurrentWmaFileOffset-m_dwSrcBufferOffset) < m_dwLookaheadSize/2) {

  00020	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  00029	2b 48 38	 sub	 ecx, DWORD PTR [eax+56]
  0002c	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00035	d1 e8		 shr	 eax, 1
  00037	3b c8		 cmp	 ecx, eax
  00039	73 18		 jae	 SHORT $L29068

; 1032 : 
; 1033 :         //
; 1034 :         // no need to do any file i/o
; 1035 :         //
; 1036 : 
; 1037 :         DBG_INFO(("ReadFile: no file I/o done\n"));

  0003b	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 2 ; g_WmaXmoDebugLevel
  00042	72 0d		 jb	 SHORT $L29069
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@CNDAKADA@ReadFile?3?5no?5file?5I?1o?5done?6?$AA@
  00049	e8 00 00 00 00	 call	 _DbgPrint
  0004e	83 c4 04	 add	 esp, 4
$L29069:

; 1038 : 
; 1039 :     } else {

  00051	eb 32		 jmp	 SHORT $L29071
$L29068:

; 1040 : 
; 1041 :         m_dwSrcBufferOffset = m_dwCurrentWmaFileOffset;        

  00053	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00059	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  0005c	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 1042 :         if (Offset) {

  0005f	83 7d fc 00	 cmp	 DWORD PTR _Offset$[ebp], 0
  00063	74 20		 je	 SHORT $L29071

; 1043 :             ASSERT(m_dwSrcBufferOffset);

  00065	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0006c	75 17		 jne	 SHORT $L29071
  0006e	6a 00		 push	 0
  00070	68 13 04 00 00	 push	 1043			; 00000413H
  00075	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@JIGALKCG@m_dwSrcBufferOffset?$AA@
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L29071:

; 1044 :         }
; 1045 : 
; 1046 :     }
; 1047 : 
; 1048 :     if (Offset == m_dwSrcBufferOffset) {

  00085	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00088	8b 45 fc	 mov	 eax, DWORD PTR _Offset$[ebp]
  0008b	3b 42 38	 cmp	 eax, DWORD PTR [edx+56]
  0008e	75 05		 jne	 SHORT $L29075

; 1049 : 
; 1050 :         //
; 1051 :         // if offset did not change dont bother reading
; 1052 :         //
; 1053 : 
; 1054 : 
; 1055 :     } else {

  00090	e9 1b 01 00 00	 jmp	 $L29076
$L29075:

; 1056 : 
; 1057 :         DBG_INFO((" CBGetData Reading ahead, offset %x, wma offset %x\n",
; 1058 :                   m_dwSrcBufferOffset,
; 1059 :                   m_dwCurrentWmaFileOffset));

  00095	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 2 ; g_WmaXmoDebugLevel
  0009c	72 1b		 jb	 SHORT $L29077
  0009e	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000a4	52		 push	 edx
  000a5	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000ab	51		 push	 ecx
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@BDADEBAI@?5CBGetData?5Reading?5ahead?0?5offset@
  000b1	e8 00 00 00 00	 call	 _DbgPrint
  000b6	83 c4 0c	 add	 esp, 12			; 0000000cH
$L29077:

; 1060 :     
; 1061 :         SetFilePointer(m_hFile, m_dwSrcBufferOffset, NULL, FILE_BEGIN);

  000b9	6a 00		 push	 0
  000bb	6a 00		 push	 0
  000bd	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  000c0	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000c3	50		 push	 eax
  000c4	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000ca	52		 push	 edx
  000cb	e8 00 00 00 00	 call	 _SetFilePointer@16

; 1062 : 
; 1063 :         DBG_SPAM(("ReadFile(%x): calling readfile with context %x, pendingCount %x, listempty %d\n",
; 1064 :                  this, pContext, m_dwPendingPackets, IsListEmpty(&m_PendingList) ));

  000d0	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 5 ; g_WmaXmoDebugLevel
  000d7	72 36		 jb	 SHORT $L29079
  000d9	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  000e1	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	33 d2		 xor	 edx, edx
  000e6	39 81 a0 00 00
	00		 cmp	 DWORD PTR [ecx+160], eax
  000ec	0f 94 c2	 sete	 dl
  000ef	52		 push	 edx
  000f0	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000f3	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  000f9	51		 push	 ecx
  000fa	8b 55 10	 mov	 edx, DWORD PTR _pContext$[ebp]
  000fd	52		 push	 edx
  000fe	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00101	50		 push	 eax
  00102	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EP@NOIIJNPM@ReadFile?$CI?$CFx?$CJ?3?5calling?5readfile?5w@
  00107	e8 00 00 00 00	 call	 _DbgPrint
  0010c	83 c4 14	 add	 esp, 20			; 00000014H
$L29079:

; 1065 :     
; 1066 :         m_overlapped.Offset = m_dwSrcBufferOffset;

  0010f	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00115	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00118	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 1067 : 
; 1068 :         bResult = ReadFile(m_hFile,
; 1069 :                      pvBuffer,
; 1070 :                      dwSize,
; 1071 :                      &dwBytesRead,
; 1072 :                      (pContext ? &m_overlapped : NULL));

  0011b	83 7d 10 00	 cmp	 DWORD PTR _pContext$[ebp], 0
  0011f	74 0b		 je	 SHORT $L29428
  00121	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00124	83 c1 50	 add	 ecx, 80			; 00000050H
  00127	89 4d d4	 mov	 DWORD PTR tv146[ebp], ecx
  0012a	eb 07		 jmp	 SHORT $L29429
$L29428:
  0012c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$L29429:
  00133	8b 55 d4	 mov	 edx, DWORD PTR tv146[ebp]
  00136	52		 push	 edx
  00137	8d 45 ec	 lea	 eax, DWORD PTR _dwBytesRead$[ebp]
  0013a	50		 push	 eax
  0013b	8b 4d 0c	 mov	 ecx, DWORD PTR _dwSize$[ebp]
  0013e	51		 push	 ecx
  0013f	8b 55 08	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  00142	52		 push	 edx
  00143	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00146	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00149	51		 push	 ecx
  0014a	e8 00 00 00 00	 call	 _ReadFile@20
  0014f	89 45 f8	 mov	 DWORD PTR _bResult$[ebp], eax

; 1073 : 
; 1074 :         if (!pContext && !bResult) {

  00152	83 7d 10 00	 cmp	 DWORD PTR _pContext$[ebp], 0
  00156	75 58		 jne	 SHORT $L29076
  00158	83 7d f8 00	 cmp	 DWORD PTR _bResult$[ebp], 0
  0015c	75 52		 jne	 SHORT $L29076

; 1075 : 
; 1076 :             hr = HRESULT_FROM_WIN32(GetLastError());

  0015e	e8 00 00 00 00	 call	 _GetLastError@0
  00163	85 c0		 test	 eax, eax
  00165	7f 0a		 jg	 SHORT $L29430
  00167	e8 00 00 00 00	 call	 _GetLastError@0
  0016c	89 45 d0	 mov	 DWORD PTR tv162[ebp], eax
  0016f	eb 17		 jmp	 SHORT $L29431
$L29430:
  00171	e8 00 00 00 00	 call	 _GetLastError@0
  00176	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0017b	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  00180	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  00185	89 45 d0	 mov	 DWORD PTR tv162[ebp], eax
$L29431:
  00188	8b 55 d0	 mov	 edx, DWORD PTR tv162[ebp]
  0018b	89 55 f4	 mov	 DWORD PTR _hr$[ebp], edx

; 1077 : 
; 1078 :             DBG_ERROR(("Wmaxmo::readfile: Read failed with %x\n",
; 1079 :                       hr));

  0018e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 0 ; g_WmaXmoDebugLevel
  00195	72 11		 jb	 SHORT $L29085
  00197	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]
  0019a	50		 push	 eax
  0019b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@NJHIGFAA@Wmaxmo?3?3readfile?3?5Read?5failed?5wi@
  001a0	e8 00 00 00 00	 call	 _DbgPrint
  001a5	83 c4 08	 add	 esp, 8
$L29085:

; 1080 :                       
; 1081 :             return hr;

  001a8	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]
  001ab	e9 25 01 00 00	 jmp	 $L29060
$L29076:

; 1082 : 
; 1083 :         }
; 1084 :      
; 1085 :     }
; 1086 : 
; 1087 :     if (pContext) {

  001b0	83 7d 10 00	 cmp	 DWORD PTR _pContext$[ebp], 0
  001b4	0f 84 13 01 00
	00		 je	 $L29087

; 1088 : 
; 1089 :         //
; 1090 :         // wait for overlapped operation
; 1091 :         //
; 1092 : 
; 1093 :         bResult = GetOverlappedResult(m_hFile,&m_overlapped,&dwBytesRead,TRUE);

  001ba	6a 01		 push	 1
  001bc	8d 4d ec	 lea	 ecx, DWORD PTR _dwBytesRead$[ebp]
  001bf	51		 push	 ecx
  001c0	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  001c3	83 c2 50	 add	 edx, 80			; 00000050H
  001c6	52		 push	 edx
  001c7	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  001ca	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  001cd	51		 push	 ecx
  001ce	e8 00 00 00 00	 call	 _GetOverlappedResult@16
  001d3	89 45 f8	 mov	 DWORD PTR _bResult$[ebp], eax

; 1094 :         if (!bResult) {

  001d6	83 7d f8 00	 cmp	 DWORD PTR _bResult$[ebp], 0
  001da	75 32		 jne	 SHORT $L29088

; 1095 : 
; 1096 :             return HRESULT_FROM_WIN32(GetLastError());

  001dc	e8 00 00 00 00	 call	 _GetLastError@0
  001e1	85 c0		 test	 eax, eax
  001e3	7f 0a		 jg	 SHORT $L29432
  001e5	e8 00 00 00 00	 call	 _GetLastError@0
  001ea	89 45 cc	 mov	 DWORD PTR tv182[ebp], eax
  001ed	eb 17		 jmp	 SHORT $L29433
$L29432:
  001ef	e8 00 00 00 00	 call	 _GetLastError@0
  001f4	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  001f9	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  001fe	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  00203	89 45 cc	 mov	 DWORD PTR tv182[ebp], eax
$L29433:
  00206	8b 45 cc	 mov	 eax, DWORD PTR tv182[ebp]
  00209	e9 c7 00 00 00	 jmp	 $L29060
$L29088:

; 1097 : 
; 1098 :         }
; 1099 : 
; 1100 :         //
; 1101 :         // decode wma data
; 1102 :         //
; 1103 :     
; 1104 :         hr = Decode(&pContext->Xmp);

  0020e	8b 55 10	 mov	 edx, DWORD PTR _pContext$[ebp]
  00211	83 c2 0c	 add	 edx, 12			; 0000000cH
  00214	52		 push	 edx
  00215	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 ?Decode@CWMAXMediaObject@@QAGJPBU_XMEDIAPACKET@@@Z ; CWMAXMediaObject::Decode
  0021e	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 1105 :     
; 1106 :         //
; 1107 :         // remove from pending list
; 1108 :         //
; 1109 :     
; 1110 :         RemoveEntryList(&pContext->ListEntry);

  00221	8b 4d 10	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00224	8b 11		 mov	 edx, DWORD PTR [ecx]
  00226	89 55 e4	 mov	 DWORD PTR __EX_Flink$29093[ebp], edx
  00229	8b 45 10	 mov	 eax, DWORD PTR _pContext$[ebp]
  0022c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0022f	89 4d e8	 mov	 DWORD PTR __EX_Blink$29092[ebp], ecx
  00232	8b 55 e8	 mov	 edx, DWORD PTR __EX_Blink$29092[ebp]
  00235	8b 45 e4	 mov	 eax, DWORD PTR __EX_Flink$29093[ebp]
  00238	89 02		 mov	 DWORD PTR [edx], eax
  0023a	8b 4d e4	 mov	 ecx, DWORD PTR __EX_Flink$29093[ebp]
  0023d	8b 55 e8	 mov	 edx, DWORD PTR __EX_Blink$29092[ebp]
  00240	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1111 :     
; 1112 :         //
; 1113 :         // return to available list
; 1114 :         //
; 1115 :     
; 1116 :         InsertHeadList(&m_AvailableList,
; 1117 :                        &pContext->ListEntry);

  00243	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00246	05 98 00 00 00	 add	 eax, 152		; 00000098H
  0024b	89 45 dc	 mov	 DWORD PTR __EX_ListHead$29095[ebp], eax
  0024e	8b 4d dc	 mov	 ecx, DWORD PTR __EX_ListHead$29095[ebp]
  00251	8b 11		 mov	 edx, DWORD PTR [ecx]
  00253	89 55 e0	 mov	 DWORD PTR __EX_Flink$29094[ebp], edx
  00256	8b 45 10	 mov	 eax, DWORD PTR _pContext$[ebp]
  00259	8b 4d e0	 mov	 ecx, DWORD PTR __EX_Flink$29094[ebp]
  0025c	89 08		 mov	 DWORD PTR [eax], ecx
  0025e	8b 55 10	 mov	 edx, DWORD PTR _pContext$[ebp]
  00261	8b 45 dc	 mov	 eax, DWORD PTR __EX_ListHead$29095[ebp]
  00264	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00267	8b 4d e0	 mov	 ecx, DWORD PTR __EX_Flink$29094[ebp]
  0026a	8b 55 10	 mov	 edx, DWORD PTR _pContext$[ebp]
  0026d	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00270	8b 45 dc	 mov	 eax, DWORD PTR __EX_ListHead$29095[ebp]
  00273	8b 4d 10	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00276	89 08		 mov	 DWORD PTR [eax], ecx

; 1118 :     
; 1119 :         m_dwPendingPackets--;

  00278	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0027b	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00281	83 e8 01	 sub	 eax, 1
  00284	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00287	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 1120 :     
; 1121 :         DBG_SPAM(("WmaXMO::ReadFile(%x): completing context %x, pendingCount %x, listempty %d\n",
; 1122 :                  this, pContext, m_dwPendingPackets, IsListEmpty(&m_PendingList) ));

  0028d	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 5 ; g_WmaXmoDebugLevel
  00294	72 37		 jb	 SHORT $L29087
  00296	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00299	81 c2 a0 00 00
	00		 add	 edx, 160		; 000000a0H
  0029f	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  002a2	33 c9		 xor	 ecx, ecx
  002a4	39 90 a0 00 00
	00		 cmp	 DWORD PTR [eax+160], edx
  002aa	0f 94 c1	 sete	 cl
  002ad	51		 push	 ecx
  002ae	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  002b1	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  002b7	50		 push	 eax
  002b8	8b 4d 10	 mov	 ecx, DWORD PTR _pContext$[ebp]
  002bb	51		 push	 ecx
  002bc	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  002bf	52		 push	 edx
  002c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EM@FFECJCLO@WmaXMO?3?3ReadFile?$CI?$CFx?$CJ?3?5completing@
  002c5	e8 00 00 00 00	 call	 _DbgPrint
  002ca	83 c4 14	 add	 esp, 20			; 00000014H
$L29087:

; 1123 :     
; 1124 :     
; 1125 :     }
; 1126 : 
; 1127 :     return HRESULT_FROM_NT(status);

  002cd	8b 45 f0	 mov	 eax, DWORD PTR _status$[ebp]
  002d0	0d 00 00 00 10	 or	 eax, 268435456		; 10000000H
$L29060:

; 1128 : 
; 1129 : }

  002d5	8b e5		 mov	 esp, ebp
  002d7	5d		 pop	 ebp
  002d8	c2 0c 00	 ret	 12			; 0000000cH
?ReadWmaDataFromFile@CWMAXMediaObject@@AAEJPAXKPAU_WMAXMO_ASYNC_CONTEXT@@@Z ENDP ; CWMAXMediaObject::ReadWmaDataFromFile
WMADECXMO	ENDS
PUBLIC	??_C@_05GFDKCJGP@pInfo?$AA@			; `string'
;	COMDAT ??_C@_05GFDKCJGP@pInfo?$AA@
WMADECXMO_RD	SEGMENT
??_C@_05GFDKCJGP@pInfo?$AA@ DB 'pInfo', 00H		; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT ?GetInfo@CWMAXMediaObject@@UAGJPAU_XMEDIAINFO@@@Z
WMADECXMO	SEGMENT
_this$ = 8
_pInfo$ = 12
?GetInfo@CWMAXMediaObject@@UAGJPAU_XMEDIAINFO@@@Z PROC NEAR ; CWMAXMediaObject::GetInfo, COMDAT

; 1132 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1133 : 
; 1134 :     ASSERT(pInfo);

  00003	83 7d 0c 00	 cmp	 DWORD PTR _pInfo$[ebp], 0
  00007	75 17		 jne	 SHORT $L29103
  00009	6a 00		 push	 0
  0000b	68 6e 04 00 00	 push	 1134			; 0000046eH
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05GFDKCJGP@pInfo?$AA@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L29103:

; 1135 : 
; 1136 :     pInfo->dwMaxLookahead = 0;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _pInfo$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1137 :     pInfo->dwFlags = XMO_STREAMF_FIXED_SAMPLE_SIZE | 
; 1138 :         XMO_STREAMF_FIXED_PACKET_ALIGNMENT;

  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  0002d	c7 01 03 00 00
	00		 mov	 DWORD PTR [ecx], 3

; 1139 : 
; 1140 :     //
; 1141 :     // we are decoder: GetOutput gives the minimum buffer we need to decode a 
; 1142 :     // block of wma data.
; 1143 :     //
; 1144 :     
; 1145 :     // No real minimum, the codec has its own internal buffer. But it likes to
; 1146 :     // decode in MAX_SAMPLES_PER_REQUEST sample chunks
; 1147 : 
; 1148 :     pInfo->dwOutputSize = m_hdr.num_channels * sizeof(short) * MAX_SAMPLES_PER_REQUEST; 

  00033	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00039	d1 e0		 shl	 eax, 1
  0003b	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  00041	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1149 :     return S_OK;

  00044	33 c0		 xor	 eax, eax

; 1150 : }

  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
?GetInfo@CWMAXMediaObject@@UAGJPAU_XMEDIAINFO@@@Z ENDP	; CWMAXMediaObject::GetInfo
; Function compile flags: /Odt
WMADECXMO	ENDS
;	COMDAT ?Discontinuity@CWMAXMediaObject@@UAGJXZ
WMADECXMO	SEGMENT
_this$ = 8
?Discontinuity@CWMAXMediaObject@@UAGJXZ PROC NEAR	; CWMAXMediaObject::Discontinuity, COMDAT

; 1152 : HRESULT STDMETHODCALLTYPE CWMAXMediaObject::Discontinuity(void){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1153 :    return S_OK;

  00003	33 c0		 xor	 eax, eax

; 1154 : }

  00005	5d		 pop	 ebp
  00006	c2 04 00	 ret	 4
?Discontinuity@CWMAXMediaObject@@UAGJXZ ENDP		; CWMAXMediaObject::Discontinuity
; Function compile flags: /Odt
WMADECXMO	ENDS
;	COMDAT ?GetStatus@CWMAXMediaObject@@UAGJPAK@Z
WMADECXMO	SEGMENT
_this$ = 8
_pdwStatus$ = 12
?GetStatus@CWMAXMediaObject@@UAGJPAK@Z PROC NEAR	; CWMAXMediaObject::GetStatus, COMDAT

; 1159 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1160 : 
; 1161 :     if (pdwStatus) {

  00003	83 7d 0c 00	 cmp	 DWORD PTR _pdwStatus$[ebp], 0
  00007	74 4b		 je	 SHORT $L29116

; 1162 : 
; 1163 :         *pdwStatus = XMO_STATUSF_ACCEPT_OUTPUT_DATA;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  0000c	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2

; 1164 : 
; 1165 :         if (m_bAsyncMode) {

  00012	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  0001c	74 36		 je	 SHORT $L29116

; 1166 :     
; 1167 :             //
; 1168 :             // if we have no available contexts to queue packets,
; 1169 :             // tell caller to not submit anymore...
; 1170 :             //
; 1171 : 
; 1172 :             ENTER_CS(&m_CS);

  0001e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00021	83 c2 68	 add	 edx, 104		; 00000068H
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 1173 :             if (IsListEmpty(&m_AvailableList)) {

  0002b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	05 98 00 00 00	 add	 eax, 152		; 00000098H
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	39 81 98 00 00
	00		 cmp	 DWORD PTR [ecx+152], eax
  0003c	75 09		 jne	 SHORT $L29118

; 1174 :     
; 1175 :                 *pdwStatus = 0;

  0003e	8b 55 0c	 mov	 edx, DWORD PTR _pdwStatus$[ebp]
  00041	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L29118:

; 1176 : 
; 1177 :             }
; 1178 :             LEAVE_CS(&m_CS);

  00047	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	83 c0 68	 add	 eax, 104		; 00000068H
  0004d	50		 push	 eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4
$L29116:

; 1179 : 
; 1180 :         }
; 1181 : 
; 1182 :     }
; 1183 : 
; 1184 :     return S_OK;

  00054	33 c0		 xor	 eax, eax

; 1185 : }

  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
?GetStatus@CWMAXMediaObject@@UAGJPAK@Z ENDP		; CWMAXMediaObject::GetStatus
WMADECXMO	ENDS
PUBLIC	??_C@_0CF@DLIAHMHB@WMAFileContentDesc?5failed?5with?50@ ; `string'
EXTRN	_WMAFileContentDesc@8:NEAR
;	COMDAT ??_C@_0CF@DLIAHMHB@WMAFileContentDesc?5failed?5with?50@
WMADECXMO_RD	SEGMENT
??_C@_0CF@DLIAHMHB@WMAFileContentDesc?5failed?5with?50@ DB 'WMAFileConten'
	DB	'tDesc failed with 0x%x', 0aH, 00H		; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT ?GetFileContentDescription@CWMAXMediaObject@@UAGJPAU_WMAXMOFileContDesc@@@Z
WMADECXMO	SEGMENT
_hr$ = -8
_WmaErr$ = -4
_this$ = 8
_pContentDesc$ = 12
?GetFileContentDescription@CWMAXMediaObject@@UAGJPAU_WMAXMOFileContDesc@@@Z PROC NEAR ; CWMAXMediaObject::GetFileContentDescription, COMDAT

; 1188 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1189 :    HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1190 :    tWMA_U32 WmaErr = cWMA_NoErr;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _WmaErr$[ebp], 0

; 1191 : 
; 1192 :    WmaErr = WMAFileContentDesc(m_state, (tWMAFileContDesc *) pContentDesc);

  00014	8b 45 0c	 mov	 eax, DWORD PTR _pContentDesc$[ebp]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 _WMAFileContentDesc@8
  00024	89 45 fc	 mov	 DWORD PTR _WmaErr$[ebp], eax

; 1193 :    if (WmaErr != cWMA_NoErr) {

  00027	83 7d fc 00	 cmp	 DWORD PTR _WmaErr$[ebp], 0
  0002b	74 21		 je	 SHORT $L29128

; 1194 : 
; 1195 :        DBG_ERROR(("WMAFileContentDesc failed with 0x%x\n",WmaErr));

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 0 ; g_WmaXmoDebugLevel
  00034	72 11		 jb	 SHORT $L29129
  00036	8b 45 fc	 mov	 eax, DWORD PTR _WmaErr$[ebp]
  00039	50		 push	 eax
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@DLIAHMHB@WMAFileContentDesc?5failed?5with?50@
  0003f	e8 00 00 00 00	 call	 _DbgPrint
  00044	83 c4 08	 add	 esp, 8
$L29129:

; 1196 :        return E_FAIL;

  00047	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  0004c	eb 03		 jmp	 SHORT $L29123
$L29128:

; 1197 :    }
; 1198 : 
; 1199 :    return hr;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L29123:

; 1200 : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
?GetFileContentDescription@CWMAXMediaObject@@UAGJPAU_WMAXMOFileContDesc@@@Z ENDP ; CWMAXMediaObject::GetFileContentDescription
WMADECXMO	ENDS
PUBLIC	?WMASampleRateToHz@CWMAXMediaObject@@AAEKW4tagWMAFileSampleRate@@@Z ; CWMAXMediaObject::WMASampleRateToHz
; Function compile flags: /Odt
;	COMDAT ?GetFormat@CWMAXMediaObject@@AAGJPAUtWAVEFORMATEX@@@Z
WMADECXMO	SEGMENT
_this$ = 8
_pWave$ = 12
?GetFormat@CWMAXMediaObject@@AAGJPAUtWAVEFORMATEX@@@Z PROC NEAR ; CWMAXMediaObject::GetFormat, COMDAT

; 1203 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1204 :    pWave->wFormatTag = WAVE_FORMAT_PCM;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pWave$[ebp]
  00006	66 c7 00 01 00	 mov	 WORD PTR [eax], 1

; 1205 :    pWave->nSamplesPerSec = WMASampleRateToHz(m_hdr.sample_rate);

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00011	52		 push	 edx
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?WMASampleRateToHz@CWMAXMediaObject@@AAEKW4tagWMAFileSampleRate@@@Z ; CWMAXMediaObject::WMASampleRateToHz
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _pWave$[ebp]
  0001d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1206 :    pWave->nChannels = m_hdr.num_channels;

  00020	8b 55 0c	 mov	 edx, DWORD PTR _pWave$[ebp]
  00023	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00026	66 8b 48 0c	 mov	 cx, WORD PTR [eax+12]
  0002a	66 89 4a 02	 mov	 WORD PTR [edx+2], cx

; 1207 :    pWave->wBitsPerSample = 16;

  0002e	8b 55 0c	 mov	 edx, DWORD PTR _pWave$[ebp]
  00031	66 c7 42 0e 10
	00		 mov	 WORD PTR [edx+14], 16	; 00000010H

; 1208 :    pWave->nBlockAlign = ((pWave->wBitsPerSample + 7) / 8) * pWave->nChannels;

  00037	8b 45 0c	 mov	 eax, DWORD PTR _pWave$[ebp]
  0003a	0f b7 40 0e	 movzx	 eax, WORD PTR [eax+14]
  0003e	83 c0 07	 add	 eax, 7
  00041	99		 cdq
  00042	83 e2 07	 and	 edx, 7
  00045	03 c2		 add	 eax, edx
  00047	c1 f8 03	 sar	 eax, 3
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _pWave$[ebp]
  0004d	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  00051	0f af c2	 imul	 eax, edx
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR _pWave$[ebp]
  00057	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 1209 :    pWave->nAvgBytesPerSec = pWave->nBlockAlign * pWave->nSamplesPerSec;

  0005b	8b 55 0c	 mov	 edx, DWORD PTR _pWave$[ebp]
  0005e	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _pWave$[ebp]
  00065	0f af 41 04	 imul	 eax, DWORD PTR [ecx+4]
  00069	8b 55 0c	 mov	 edx, DWORD PTR _pWave$[ebp]
  0006c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1210 :    pWave->cbSize = 0;

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _pWave$[ebp]
  00072	66 c7 40 10 00
	00		 mov	 WORD PTR [eax+16], 0

; 1211 :    
; 1212 :    return S_OK;

  00078	33 c0		 xor	 eax, eax

; 1213 : }

  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
?GetFormat@CWMAXMediaObject@@AAGJPAUtWAVEFORMATEX@@@Z ENDP ; CWMAXMediaObject::GetFormat
WMADECXMO	ENDS
PUBLIC	??_C@_0BE@NEMALPHB@m_pCallback?5?$DN?$DN?5NULL?$AA@ ; `string'
PUBLIC	??_C@_0CP@HCGMDPBD@WmaXmo?5only?5supports?5querying?5cu@ ; `string'
PUBLIC	??_C@_0GB@GGKMBCPH@?$CIlOffset?5?$DN?$DN?50?$CJ?5?$CG?$CG?5?$CIdwOrigin?5?$DN?$DN?5F@ ; `string'
;	COMDAT ??_C@_0BE@NEMALPHB@m_pCallback?5?$DN?$DN?5NULL?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BE@NEMALPHB@m_pCallback?5?$DN?$DN?5NULL?$AA@ DB 'm_pCallback == NU'
	DB	'LL', 00H					; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0CP@HCGMDPBD@WmaXmo?5only?5supports?5querying?5cu@
WMADECXMO_RD	SEGMENT
??_C@_0CP@HCGMDPBD@WmaXmo?5only?5supports?5querying?5cu@ DB 'WmaXmo only '
	DB	'supports querying current position', 00H	; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_0GB@GGKMBCPH@?$CIlOffset?5?$DN?$DN?50?$CJ?5?$CG?$CG?5?$CIdwOrigin?5?$DN?$DN?5F@
WMADECXMO_RD	SEGMENT
??_C@_0GB@GGKMBCPH@?$CIlOffset?5?$DN?$DN?50?$CJ?5?$CG?$CG?5?$CIdwOrigin?5?$DN?$DN?5F@ DB '('
	DB	'lOffset == 0) && (dwOrigin == FILE_CURRENT) && "WmaXmo only s'
	DB	'upports querying current position"', 00H	; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT ?Seek@CWMAXMediaObject@@UAGJJKPAK@Z
WMADECXMO	SEGMENT
_hr$ = -8
_this$ = 8
_lOffset$ = 12
_dwOrigin$ = 16
_pdwAbsolute$ = 20
?Seek@CWMAXMediaObject@@UAGJJKPAK@Z PROC NEAR		; CWMAXMediaObject::Seek, COMDAT

; 1216 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1217 :     HRESULT                 hr          = DS_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1218 :     NTSTATUS                status;
; 1219 : 
; 1220 :     ASSERT(m_pCallback == NULL);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00014	74 17		 je	 SHORT $L29146
  00016	6a 00		 push	 0
  00018	68 c4 04 00 00	 push	 1220			; 000004c4H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@NEMALPHB@m_pCallback?5?$DN?$DN?5NULL?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L29146:

; 1221 : 
; 1222 :     ASSERT((lOffset == 0) && (dwOrigin == FILE_CURRENT) && "WmaXmo only supports querying current position");

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _lOffset$[ebp], 0
  00031	75 0f		 jne	 SHORT $L29149
  00033	83 7d 10 01	 cmp	 DWORD PTR _dwOrigin$[ebp], 1
  00037	75 09		 jne	 SHORT $L29149
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:??_C@_0CP@HCGMDPBD@WmaXmo?5only?5supports?5querying?5cu@
  0003e	85 c9		 test	 ecx, ecx
  00040	75 17		 jne	 SHORT $L29148
$L29149:
  00042	6a 00		 push	 0
  00044	68 c6 04 00 00	 push	 1222			; 000004c6H
  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GB@GGKMBCPH@?$CIlOffset?5?$DN?$DN?50?$CJ?5?$CG?$CG?5?$CIdwOrigin?5?$DN?$DN?5F@
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L29148:

; 1223 :     
; 1224 :     if(pdwAbsolute)

  00059	83 7d 14 00	 cmp	 DWORD PTR _pdwAbsolute$[ebp], 0
  0005d	74 0b		 je	 SHORT $L29152

; 1225 :     {
; 1226 :         *pdwAbsolute = m_dwCurrentWmaFileOffset;

  0005f	8b 55 14	 mov	 edx, DWORD PTR _pdwAbsolute$[ebp]
  00062	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00068	89 0a		 mov	 DWORD PTR [edx], ecx
$L29152:

; 1227 :     }
; 1228 : 
; 1229 :     return hr;

  0006a	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1230 : }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 10 00	 ret	 16			; 00000010H
?Seek@CWMAXMediaObject@@UAGJJKPAK@Z ENDP		; CWMAXMediaObject::Seek
WMADECXMO	ENDS
EXTRN	_GetFileSize@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetLength@CWMAXMediaObject@@UAGJPAK@Z
WMADECXMO	SEGMENT
tv82 = -8
_hr$ = -4
_this$ = 8
_pdwLength$ = 12
?GetLength@CWMAXMediaObject@@UAGJPAK@Z PROC NEAR	; CWMAXMediaObject::GetLength, COMDAT

; 1233 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1234 :     HRESULT                 hr  = DS_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1235 :     
; 1236 :     //
; 1237 :     // you can not query file pointer if we are in-memory decoder
; 1238 :     //
; 1239 : 
; 1240 : 
; 1241 :     ASSERT(m_pCallback == NULL);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00014	74 17		 je	 SHORT $L29159
  00016	6a 00		 push	 0
  00018	68 d9 04 00 00	 push	 1241			; 000004d9H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@BEENKCEM@c?3?2xbox?2private?2windows?2directx?2@
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@NEMALPHB@m_pCallback?5?$DN?$DN?5NULL?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
$L29159:

; 1242 : 
; 1243 :     if((*pdwLength = GetFileSize(m_hFile, NULL)) == -1)

  0002d	6a 00		 push	 0
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _GetFileSize@8
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwLength$[ebp]
  0003e	89 01		 mov	 DWORD PTR [ecx], eax
  00040	8b 55 0c	 mov	 edx, DWORD PTR _pdwLength$[ebp]
  00043	83 3a ff	 cmp	 DWORD PTR [edx], -1
  00046	75 30		 jne	 SHORT $L29160

; 1244 :     {
; 1245 :         hr = HRESULT_FROM_WIN32(GetLastError());

  00048	e8 00 00 00 00	 call	 _GetLastError@0
  0004d	85 c0		 test	 eax, eax
  0004f	7f 0a		 jg	 SHORT $L29455
  00051	e8 00 00 00 00	 call	 _GetLastError@0
  00056	89 45 f8	 mov	 DWORD PTR tv82[ebp], eax
  00059	eb 17		 jmp	 SHORT $L29456
$L29455:
  0005b	e8 00 00 00 00	 call	 _GetLastError@0
  00060	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00065	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  0006a	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  0006f	89 45 f8	 mov	 DWORD PTR tv82[ebp], eax
$L29456:
  00072	8b 45 f8	 mov	 eax, DWORD PTR tv82[ebp]
  00075	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L29160:

; 1246 :     }
; 1247 : 
; 1248 :     return hr;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 1249 : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
?GetLength@CWMAXMediaObject@@UAGJPAK@Z ENDP		; CWMAXMediaObject::GetLength
WMADECXMO	ENDS
PUBLIC	??_C@_0BJ@BCKKGIMM@Unknown?5sample?5rate?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
;	COMDAT ??_C@_0BJ@BCKKGIMM@Unknown?5sample?5rate?3?5?$CFd?6?$AA@
WMADECXMO_RD	SEGMENT
??_C@_0BJ@BCKKGIMM@Unknown?5sample?5rate?3?5?$CFd?6?$AA@ DB 'Unknown samp'
	DB	'le rate: %d', 0aH, 00H			; `string'
WMADECXMO_RD	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
WMADECXMO_RD	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
; Function compile flags: /Odt
WMADECXMO_RD	ENDS
;	COMDAT ?WMASampleRateToHz@CWMAXMediaObject@@AAEKW4tagWMAFileSampleRate@@@Z
WMADECXMO	SEGMENT
tv64 = -12
_this$ = -8
_nSampleRate$ = -4
_sampleRate$ = 8
?WMASampleRateToHz@CWMAXMediaObject@@AAEKW4tagWMAFileSampleRate@@@Z PROC NEAR ; CWMAXMediaObject::WMASampleRateToHz, COMDAT
; _this$ = ecx

; 1252 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1253 : 
; 1254 :    UINT nSampleRate;
; 1255 :    switch (sampleRate)
; 1256 :    {

  00009	8b 45 08	 mov	 eax, DWORD PTR _sampleRate$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d f4 06	 cmp	 DWORD PTR tv64[ebp], 6
  00013	77 49		 ja	 SHORT $L29180
  00015	8b 4d f4	 mov	 ecx, DWORD PTR tv64[ebp]
  00018	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L29460[ecx*4]
$L29173:

; 1257 :    case cWMA_SR_08kHz:
; 1258 :        nSampleRate = 8000;

  0001f	c7 45 fc 40 1f
	00 00		 mov	 DWORD PTR _nSampleRate$[ebp], 8000 ; 00001f40H

; 1259 :        break;

  00026	eb 7a		 jmp	 SHORT $L29170
$L29174:

; 1260 :        
; 1261 :    case cWMA_SR_11_025kHz:
; 1262 :        nSampleRate = 11025;

  00028	c7 45 fc 11 2b
	00 00		 mov	 DWORD PTR _nSampleRate$[ebp], 11025 ; 00002b11H

; 1263 :        break;

  0002f	eb 71		 jmp	 SHORT $L29170
$L29175:

; 1264 :        
; 1265 :    case cWMA_SR_16kHz:
; 1266 :        nSampleRate = 16000;

  00031	c7 45 fc 80 3e
	00 00		 mov	 DWORD PTR _nSampleRate$[ebp], 16000 ; 00003e80H

; 1267 :        break;

  00038	eb 68		 jmp	 SHORT $L29170
$L29176:

; 1268 :        
; 1269 :    case cWMA_SR_22_05kHz:
; 1270 :        nSampleRate = 22050;

  0003a	c7 45 fc 22 56
	00 00		 mov	 DWORD PTR _nSampleRate$[ebp], 22050 ; 00005622H

; 1271 :        break;

  00041	eb 5f		 jmp	 SHORT $L29170
$L29177:

; 1272 :        
; 1273 :    case cWMA_SR_32kHz:
; 1274 :        nSampleRate = 32000;

  00043	c7 45 fc 00 7d
	00 00		 mov	 DWORD PTR _nSampleRate$[ebp], 32000 ; 00007d00H

; 1275 :        break;

  0004a	eb 56		 jmp	 SHORT $L29170
$L29178:

; 1276 :        
; 1277 :    case cWMA_SR_44_1kHz:
; 1278 :        nSampleRate = 44100;

  0004c	c7 45 fc 44 ac
	00 00		 mov	 DWORD PTR _nSampleRate$[ebp], 44100 ; 0000ac44H

; 1279 :        break;

  00053	eb 4d		 jmp	 SHORT $L29170
$L29179:

; 1280 :        
; 1281 :    case cWMA_SR_48kHz:
; 1282 :        nSampleRate = 48000;

  00055	c7 45 fc 80 bb
	00 00		 mov	 DWORD PTR _nSampleRate$[ebp], 48000 ; 0000bb80H

; 1283 :        break;

  0005c	eb 44		 jmp	 SHORT $L29170
$L29180:

; 1284 :        
; 1285 :    default:
; 1286 :        DBG_ERROR(("Unknown sample rate: %d\n", m_hdr.sample_rate));

  0005e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_WmaXmoDebugLevel@@3KA, 0 ; g_WmaXmoDebugLevel
  00065	72 14		 jb	 SHORT $L29183
  00067	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0006d	50		 push	 eax
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@BCKKGIMM@Unknown?5sample?5rate?3?5?$CFd?6?$AA@
  00073	e8 00 00 00 00	 call	 _DbgPrint
  00078	83 c4 08	 add	 esp, 8
$L29183:

; 1287 : 
; 1288 :        MYCHECK(0);

  0007b	b9 01 00 00 00	 mov	 ecx, 1
  00080	85 c9		 test	 ecx, ecx
  00082	74 11		 je	 SHORT $L29184
  00084	6a 00		 push	 0
  00086	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OEDNFCCJ@WMA?5XMO?$AA@
  00090	e8 00 00 00 00	 call	 _RtlRip@12
$L29184:
  00095	33 d2		 xor	 edx, edx
  00097	85 d2		 test	 edx, edx
  00099	75 e0		 jne	 SHORT $L29183

; 1289 :        nSampleRate = 0;

  0009b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nSampleRate$[ebp], 0
$L29170:

; 1290 :        break;
; 1291 :    }
; 1292 :    return nSampleRate;

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _nSampleRate$[ebp]

; 1293 : }

  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 04 00	 ret	 4
$L29460:
  000ab	00 00 00 00	 DD	 $L29179
  000af	00 00 00 00	 DD	 $L29178
  000b3	00 00 00 00	 DD	 $L29177
  000b7	00 00 00 00	 DD	 $L29176
  000bb	00 00 00 00	 DD	 $L29175
  000bf	00 00 00 00	 DD	 $L29174
  000c3	00 00 00 00	 DD	 $L29173
?WMASampleRateToHz@CWMAXMediaObject@@AAEKW4tagWMAFileSampleRate@@@Z ENDP ; CWMAXMediaObject::WMASampleRateToHz
WMADECXMO	ENDS
END
