; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\scalevec.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@LNLIIECF@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@KIFCFDGC@pfIn?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@BPHEIPPG@pfOut?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@PGJPLPDI@iLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _ScaleVector@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_ScaleVector@16
PUBLIC	??_C@_0EB@LNLIIECF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0N@KIFCFDGC@pfIn?5?$CB?$DN?5NULL?$AA@	; `string'
PUBLIC	??_C@_0O@BPHEIPPG@pfOut?5?$CB?$DN?5NULL?$AA@	; `string'
PUBLIC	??_C@_0N@PGJPLPDI@iLength?5?$DO?$DN?50?$AA@	; `string'
EXTRN	__assert:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0EB@LNLIIECF@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\scalevec.c
CONST	SEGMENT
??_C@_0EB@LNLIIECF@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\scalevec.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KIFCFDGC@pfIn?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0N@KIFCFDGC@pfIn?5?$CB?$DN?5NULL?$AA@ DB 'pfIn != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BPHEIPPG@pfOut?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0O@BPHEIPPG@pfOut?5?$CB?$DN?5NULL?$AA@ DB 'pfOut != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PGJPLPDI@iLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0N@PGJPLPDI@iLength?5?$DO?$DN?50?$AA@ DB 'iLength >= 0', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _ScaleVector@16
_TEXT	SEGMENT
_pfIn$ = 8
_iLength$ = 12
_fScalar$ = 16
_pfOut$ = 20
_ScaleVector@16 PROC NEAR				; COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   :   /*------------------------------------------------------
; 58   :     Test for bad input.
; 59   :   ------------------------------------------------------*/
; 60   :   assert( pfIn != NULL );

  00003	83 7d 08 00	 cmp	 DWORD PTR _pfIn$[ebp], 0
  00007	75 14		 jne	 SHORT $L922
  00009	6a 3c		 push	 60			; 0000003cH
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@LNLIIECF@c?3?2xbox?2private?2windows?2directx?2@
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@KIFCFDGC@pfIn?5?$CB?$DN?5NULL?$AA@
  00015	e8 00 00 00 00	 call	 __assert
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L922:

; 61   :   assert( pfOut != NULL );

  0001d	83 7d 14 00	 cmp	 DWORD PTR _pfOut$[ebp], 0
  00021	75 14		 jne	 SHORT $L923
  00023	6a 3d		 push	 61			; 0000003dH
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@LNLIIECF@c?3?2xbox?2private?2windows?2directx?2@
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@BPHEIPPG@pfOut?5?$CB?$DN?5NULL?$AA@
  0002f	e8 00 00 00 00	 call	 __assert
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
$L923:

; 62   :   assert( iLength >= 0 );

  00037	83 7d 0c 00	 cmp	 DWORD PTR _iLength$[ebp], 0
  0003b	7d 14		 jge	 SHORT $L909
  0003d	6a 3e		 push	 62			; 0000003eH
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@LNLIIECF@c?3?2xbox?2private?2windows?2directx?2@
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@PGJPLPDI@iLength?5?$DO?$DN?50?$AA@
  00049	e8 00 00 00 00	 call	 __assert
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L909:

; 63   : 
; 64   :   /*------------------------------------------------------
; 65   :     Scale the vector.
; 66   :   ------------------------------------------------------*/
; 67   :   while ((iLength--)>0)

  00051	8b 45 0c	 mov	 eax, DWORD PTR _iLength$[ebp]
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR _iLength$[ebp]
  00057	83 e9 01	 sub	 ecx, 1
  0005a	89 4d 0c	 mov	 DWORD PTR _iLength$[ebp], ecx
  0005d	85 c0		 test	 eax, eax
  0005f	7e 21		 jle	 SHORT $L898

; 68   :     *pfOut++ = *pfIn++ * fScalar;

  00061	8b 55 08	 mov	 edx, DWORD PTR _pfIn$[ebp]
  00064	d9 45 10	 fld	 DWORD PTR _fScalar$[ebp]
  00067	d8 0a		 fmul	 DWORD PTR [edx]
  00069	8b 45 14	 mov	 eax, DWORD PTR _pfOut$[ebp]
  0006c	d9 18		 fstp	 DWORD PTR [eax]
  0006e	8b 4d 14	 mov	 ecx, DWORD PTR _pfOut$[ebp]
  00071	83 c1 04	 add	 ecx, 4
  00074	89 4d 14	 mov	 DWORD PTR _pfOut$[ebp], ecx
  00077	8b 55 08	 mov	 edx, DWORD PTR _pfIn$[ebp]
  0007a	83 c2 04	 add	 edx, 4
  0007d	89 55 08	 mov	 DWORD PTR _pfIn$[ebp], edx
  00080	eb cf		 jmp	 SHORT $L909
$L898:

; 69   : }

  00082	5d		 pop	 ebp
  00083	c2 10 00	 ret	 16			; 00000010H
_ScaleVector@16 ENDP
_TEXT	ENDS
END
