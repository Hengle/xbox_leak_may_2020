; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\comppow.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@BOOIEOAP@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@ODANFLHI@union_x?4l?5?$DM?$DN?5uiBoundary?$FL0?$FN?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _powerpoly_125@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_cpfBoundary DD	03f800000r			; 1
	DD	03dcccccdr			; 0.1
	DD	03c23d70ar			; 0.01
	DD	03a83126fr			; 0.001
	DD	038d1b717r			; 0.0001
	DD	03727c5acr			; 1e-005
	DD	0358637bdr			; 1e-006
_cpfScaleFactor DD 03f800000r			; 1
	DD	041200000r			; 10
	DD	042c80000r			; 100
	DD	0447a0000r			; 1000
	DD	0461c4000r			; 10000
	DD	047c35000r			; 100000
	ORG $+4
_cpfPowTab_125 DD 03f4089eer			; 0.752105
	DD	0c02bc3b3r			; -2.68382
	DD	040731c1cr			; 3.79859
	DD	0c031eebdr			; -2.7802
	DD	03fa1ba71r			; 1.2635
	DD	03f263d85r			; 0.649376
	DD	03f10623br			; 0.563999
	DD	0c000ce1fr			; -2.01258
	DD	040364e7fr			; 2.84854
	DD	0c0056e3cr			; -2.08485
	DD	03f728ee8r			; 0.947493
	DD	03ef95346r			; 0.486963
	DD	03ed88b87r			; 0.42294
	DD	0bfc12e35r			; -1.50922
	DD	04008b5f0r			; 2.1361
	DD	0bfc81e20r			; -1.56342
	DD	03f35e49cr			; 0.71052
	DD	03ebaf7b4r			; 0.365171
	DD	03ea262c8r			; 0.31716
	DD	0bf90dd6cr			; -1.13176
	DD	03fcd0980r			; 1.60185
	DD	0bf96112cr			; -1.1724
	DD	03f086688r			; 0.532815
	DD	03e8c34b7r			; 0.27384
	DD	03e738b60r			; 0.237836
	DD	0bf59444ar			; -0.848698
	DD	03f99c192r			; 1.20122
	DD	0bf6111a1r			; -0.879175
	DD	03ecc9269r			; 0.399555
	DD	03e52477ar			; 0.205351
	DD	03e36a1f0r			; 0.178352
	DD	0bf22ed55r			; -0.636434
	DD	03f669a07r			; 0.900788
	DD	0bf28c721r			; -0.659288
	DD	03e996844r			; 0.299624
	DD	03e1dafear			; 0.153991
CONST	ENDS
PUBLIC	_powerpoly_125@4
PUBLIC	??_C@_0EA@BOOIEOAP@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BL@ODANFLHI@union_x?4l?5?$DM?$DN?5uiBoundary?$FL0?$FN?$AA@ ; `string'
EXTRN	__assert:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0EA@BOOIEOAP@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\comppow.c
CONST	SEGMENT
??_C@_0EA@BOOIEOAP@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\comppow.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ODANFLHI@union_x?4l?5?$DM?$DN?5uiBoundary?$FL0?$FN?$AA@
CONST	SEGMENT
??_C@_0BL@ODANFLHI@union_x?4l?5?$DM?$DN?5uiBoundary?$FL0?$FN?$AA@ DB 'uni'
	DB	'on_x.l <= uiBoundary[0]', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _powerpoly_125@4
_TEXT	SEGMENT
_fRes$ = -20
_uiBoundary$ = -16
_union_x$ = -12
_pfTab$ = -8
_i$ = -4
_fX$ = 8
_powerpoly_125@4 PROC NEAR				; COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 89   :    float fRes;
; 90   :    float *pfTab;
; 91   :    int i;
; 92   :    Uint32 *uiBoundary = (Uint32 *)cpfBoundary;

  00006	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _uiBoundary$[ebp], OFFSET FLAT:_cpfBoundary

; 93   :    UnionFltLng   union_x;
; 94   : 
; 95   :    union_x.f = fX;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _fX$[ebp]
  00010	89 45 f4	 mov	 DWORD PTR _union_x$[ebp], eax

; 96   : 
; 97   :  
; 98   :    /***** we can only afford 0 =< x <= 1 *****/
; 99   :    if (union_x.l <= uiBoundary[6])   /* truncate the limite */

  00013	8b 4d f0	 mov	 ecx, DWORD PTR _uiBoundary$[ebp]
  00016	8b 55 f4	 mov	 edx, DWORD PTR _union_x$[ebp]
  00019	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  0001c	7f 09		 jg	 SHORT $L493

; 100  :      union_x.l = uiBoundary[6];

  0001e	8b 45 f0	 mov	 eax, DWORD PTR _uiBoundary$[ebp]
  00021	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00024	89 4d f4	 mov	 DWORD PTR _union_x$[ebp], ecx
$L493:

; 101  : 
; 102  :    assert(union_x.l <= uiBoundary[0]);  /* make sure number between 0 to 1. */

  00027	8b 55 f0	 mov	 edx, DWORD PTR _uiBoundary$[ebp]
  0002a	8b 45 f4	 mov	 eax, DWORD PTR _union_x$[ebp]
  0002d	3b 02		 cmp	 eax, DWORD PTR [edx]
  0002f	7e 14		 jle	 SHORT $L517
  00031	6a 66		 push	 102			; 00000066H
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@BOOIEOAP@c?3?2xbox?2private?2windows?2directx?2@
  00038	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODANFLHI@union_x?4l?5?$DM?$DN?5uiBoundary?$FL0?$FN?$AA@
  0003d	e8 00 00 00 00	 call	 __assert
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
$L517:

; 103  : 
; 104  : 
; 105  :    /***** find out which region fX falls in *****/
; 106  :    if (union_x.l > uiBoundary[3]) {

  00045	8b 55 f0	 mov	 edx, DWORD PTR _uiBoundary$[ebp]
  00048	8b 45 f4	 mov	 eax, DWORD PTR _union_x$[ebp]
  0004b	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  0004e	7e 31		 jle	 SHORT $L497

; 107  :      if (union_x.l > uiBoundary[2]) {

  00050	8b 4d f0	 mov	 ecx, DWORD PTR _uiBoundary$[ebp]
  00053	8b 55 f4	 mov	 edx, DWORD PTR _union_x$[ebp]
  00056	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00059	7e 1d		 jle	 SHORT $L498

; 108  :        if (union_x.l > uiBoundary[1]) 

  0005b	8b 45 f0	 mov	 eax, DWORD PTR _uiBoundary$[ebp]
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _union_x$[ebp]
  00061	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00064	7e 09		 jle	 SHORT $L499

; 109  :          i = 0;

  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 110  :        else

  0006d	eb 07		 jmp	 SHORT $L500
$L499:

; 111  :          i = 1;

  0006f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
$L500:

; 112  :      }
; 113  :      else

  00076	eb 07		 jmp	 SHORT $L501
$L498:

; 114  :        i = 2;

  00078	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _i$[ebp], 2
$L501:

; 115  :    }
; 116  :    else {

  0007f	eb 2f		 jmp	 SHORT $L502
$L497:

; 117  :      if (union_x.l <= uiBoundary[4]) {

  00081	8b 55 f0	 mov	 edx, DWORD PTR _uiBoundary$[ebp]
  00084	8b 45 f4	 mov	 eax, DWORD PTR _union_x$[ebp]
  00087	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  0008a	7f 1d		 jg	 SHORT $L503

; 118  :        if (union_x.l <= uiBoundary[5]) 

  0008c	8b 4d f0	 mov	 ecx, DWORD PTR _uiBoundary$[ebp]
  0008f	8b 55 f4	 mov	 edx, DWORD PTR _union_x$[ebp]
  00092	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  00095	7f 09		 jg	 SHORT $L504

; 119  :          i = 5;

  00097	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _i$[ebp], 5

; 120  :        else

  0009e	eb 07		 jmp	 SHORT $L505
$L504:

; 121  :          i = 4;

  000a0	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _i$[ebp], 4
$L505:

; 122  :      }
; 123  :      else

  000a7	eb 07		 jmp	 SHORT $L502
$L503:

; 124  :        i = 3;

  000a9	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _i$[ebp], 3
$L502:

; 125  :    }
; 126  : 
; 127  :    /***** find out the table *****/
; 128  :    pfTab = (float *) &(cpfPowTab_125[i*POLY_ORDER_p1]);

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000b3	6b c0 06	 imul	 eax, 6
  000b6	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR _cpfPowTab_125[eax*4]
  000bd	89 4d f8	 mov	 DWORD PTR _pfTab$[ebp], ecx

; 129  : 
; 130  :    /***** scale-up the input *****/
; 131  :    union_x.f *= cpfScaleFactor[i];

  000c0	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000c3	d9 45 f4	 fld	 DWORD PTR _union_x$[ebp]
  000c6	d8 0c 95 00 00
	00 00		 fmul	 DWORD PTR _cpfScaleFactor[edx*4]
  000cd	d9 5d f4	 fstp	 DWORD PTR _union_x$[ebp]

; 132  : 
; 133  :    /***** evaluate the polynomial in fast way ******/
; 134  :    fRes  = union_x.f* *pfTab++;

  000d0	8b 45 f8	 mov	 eax, DWORD PTR _pfTab$[ebp]
  000d3	d9 45 f4	 fld	 DWORD PTR _union_x$[ebp]
  000d6	d8 08		 fmul	 DWORD PTR [eax]
  000d8	d9 5d ec	 fstp	 DWORD PTR _fRes$[ebp]
  000db	8b 4d f8	 mov	 ecx, DWORD PTR _pfTab$[ebp]
  000de	83 c1 04	 add	 ecx, 4
  000e1	89 4d f8	 mov	 DWORD PTR _pfTab$[ebp], ecx

; 135  :    fRes += *pfTab++;

  000e4	8b 55 f8	 mov	 edx, DWORD PTR _pfTab$[ebp]
  000e7	d9 45 ec	 fld	 DWORD PTR _fRes$[ebp]
  000ea	d8 02		 fadd	 DWORD PTR [edx]
  000ec	d9 5d ec	 fstp	 DWORD PTR _fRes$[ebp]
  000ef	8b 45 f8	 mov	 eax, DWORD PTR _pfTab$[ebp]
  000f2	83 c0 04	 add	 eax, 4
  000f5	89 45 f8	 mov	 DWORD PTR _pfTab$[ebp], eax

; 136  :    fRes *= union_x.f;

  000f8	d9 45 ec	 fld	 DWORD PTR _fRes$[ebp]
  000fb	d8 4d f4	 fmul	 DWORD PTR _union_x$[ebp]
  000fe	d9 5d ec	 fstp	 DWORD PTR _fRes$[ebp]

; 137  :    fRes += *pfTab++;

  00101	8b 4d f8	 mov	 ecx, DWORD PTR _pfTab$[ebp]
  00104	d9 45 ec	 fld	 DWORD PTR _fRes$[ebp]
  00107	d8 01		 fadd	 DWORD PTR [ecx]
  00109	d9 5d ec	 fstp	 DWORD PTR _fRes$[ebp]
  0010c	8b 55 f8	 mov	 edx, DWORD PTR _pfTab$[ebp]
  0010f	83 c2 04	 add	 edx, 4
  00112	89 55 f8	 mov	 DWORD PTR _pfTab$[ebp], edx

; 138  :    fRes *= union_x.f;

  00115	d9 45 ec	 fld	 DWORD PTR _fRes$[ebp]
  00118	d8 4d f4	 fmul	 DWORD PTR _union_x$[ebp]
  0011b	d9 5d ec	 fstp	 DWORD PTR _fRes$[ebp]

; 139  :    fRes += *pfTab++;

  0011e	8b 45 f8	 mov	 eax, DWORD PTR _pfTab$[ebp]
  00121	d9 45 ec	 fld	 DWORD PTR _fRes$[ebp]
  00124	d8 00		 fadd	 DWORD PTR [eax]
  00126	d9 5d ec	 fstp	 DWORD PTR _fRes$[ebp]
  00129	8b 4d f8	 mov	 ecx, DWORD PTR _pfTab$[ebp]
  0012c	83 c1 04	 add	 ecx, 4
  0012f	89 4d f8	 mov	 DWORD PTR _pfTab$[ebp], ecx

; 140  :    fRes *= union_x.f;

  00132	d9 45 ec	 fld	 DWORD PTR _fRes$[ebp]
  00135	d8 4d f4	 fmul	 DWORD PTR _union_x$[ebp]
  00138	d9 5d ec	 fstp	 DWORD PTR _fRes$[ebp]

; 141  :    fRes += *pfTab++;

  0013b	8b 55 f8	 mov	 edx, DWORD PTR _pfTab$[ebp]
  0013e	d9 45 ec	 fld	 DWORD PTR _fRes$[ebp]
  00141	d8 02		 fadd	 DWORD PTR [edx]
  00143	d9 5d ec	 fstp	 DWORD PTR _fRes$[ebp]
  00146	8b 45 f8	 mov	 eax, DWORD PTR _pfTab$[ebp]
  00149	83 c0 04	 add	 eax, 4
  0014c	89 45 f8	 mov	 DWORD PTR _pfTab$[ebp], eax

; 142  :    fRes *= union_x.f;

  0014f	d9 45 ec	 fld	 DWORD PTR _fRes$[ebp]
  00152	d8 4d f4	 fmul	 DWORD PTR _union_x$[ebp]
  00155	d9 5d ec	 fstp	 DWORD PTR _fRes$[ebp]

; 143  :    fRes += *pfTab;

  00158	8b 4d f8	 mov	 ecx, DWORD PTR _pfTab$[ebp]
  0015b	d9 45 ec	 fld	 DWORD PTR _fRes$[ebp]
  0015e	d8 01		 fadd	 DWORD PTR [ecx]
  00160	d9 55 ec	 fst	 DWORD PTR _fRes$[ebp]

; 144  :    
; 145  :    return(fRes);
; 146  : }

  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 04 00	 ret	 4
_powerpoly_125@4 ENDP
_TEXT	ENDS
END
