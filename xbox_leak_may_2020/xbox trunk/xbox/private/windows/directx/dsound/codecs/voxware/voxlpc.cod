; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\voxlpc.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxCalcLPC@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxCalcLPC@24
PUBLIC	__real@3f800000
EXTRN	_BandExpand@16:NEAR
EXTRN	_VoxDurbin@20:NEAR
EXTRN	_AutoCor@16:NEAR
EXTRN	_ScaleVector@16:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@3f800000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\voxlpc.c
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxCalcLPC@24
_TEXT	SEGMENT
_fPARCOR$ = -44
_invLength$ = -4
_pIn$ = 8
_length$ = 12
_pLPCoef$ = 16
_pResidueEng$ = 20
_expandCoef$ = 24
_autocorr_buf$ = 28
_VoxCalcLPC@24 PROC NEAR				; COMDAT

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 52   :   STACK_INIT
; 53   :   float fPARCOR[LPC_ORDER];
; 54   :   STACK_INIT_END
; 55   :   STACK_ATTACH(float *, fPARCOR)
; 56   : 
; 57   :   float invLength = 1.0F/(float)length;

  00006	db 45 0c	 fild	 DWORD PTR _length$[ebp]
  00009	d8 3d 00 00 00
	00		 fdivr	 DWORD PTR __real@3f800000
  0000f	d9 5d fc	 fstp	 DWORD PTR _invLength$[ebp]

; 58   : 
; 59   :   STACK_START
; 60   : 
; 61   :   /*--------------------------------------------------
; 62   :     calcualte auto-correlation.
; 63   :   --------------------------------------------------*/
; 64   :   AutoCor(LPC_ORDER+1, pIn, length, autocorr_buf);

  00012	8b 45 1c	 mov	 eax, DWORD PTR _autocorr_buf$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _length$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 08	 mov	 edx, DWORD PTR _pIn$[ebp]
  0001d	52		 push	 edx
  0001e	6a 0b		 push	 11			; 0000000bH
  00020	e8 00 00 00 00	 call	 _AutoCor@16

; 65   : 
; 66   :   
; 67   :   /*--------------------------------------------------
; 68   :     calculate LPC coefficients by using Levinson-Durbin
; 69   :     algorithm.
; 70   :   --------------------------------------------------*/
; 71   :   VoxDurbin(autocorr_buf, LPC_ORDER, pLPCoef, fPARCOR, pResidueEng);

  00025	8b 45 14	 mov	 eax, DWORD PTR _pResidueEng$[ebp]
  00028	50		 push	 eax
  00029	8d 4d d4	 lea	 ecx, DWORD PTR _fPARCOR$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 10	 mov	 edx, DWORD PTR _pLPCoef$[ebp]
  00030	52		 push	 edx
  00031	6a 0a		 push	 10			; 0000000aH
  00033	8b 45 1c	 mov	 eax, DWORD PTR _autocorr_buf$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _VoxDurbin@20

; 72   : 
; 73   :   *pResidueEng *= invLength;

  0003c	8b 4d 14	 mov	 ecx, DWORD PTR _pResidueEng$[ebp]
  0003f	d9 45 fc	 fld	 DWORD PTR _invLength$[ebp]
  00042	d8 09		 fmul	 DWORD PTR [ecx]
  00044	8b 55 14	 mov	 edx, DWORD PTR _pResidueEng$[ebp]
  00047	d9 1a		 fstp	 DWORD PTR [edx]

; 74   :   ScaleVector( autocorr_buf, LPC_ORDER+1, invLength, autocorr_buf );

  00049	8b 45 1c	 mov	 eax, DWORD PTR _autocorr_buf$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _invLength$[ebp]
  00050	51		 push	 ecx
  00051	6a 0b		 push	 11			; 0000000bH
  00053	8b 55 1c	 mov	 edx, DWORD PTR _autocorr_buf$[ebp]
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 _ScaleVector@16

; 75   : 
; 76   : 
; 77   :   /*--------------------------------------------------
; 78   :     expand the LPC pole. pLPCoef is overwritten.
; 79   :   --------------------------------------------------*/
; 80   :   BandExpand(pLPCoef, pLPCoef, LPC_ORDER, expandCoef);

  0005c	8b 45 18	 mov	 eax, DWORD PTR _expandCoef$[ebp]
  0005f	50		 push	 eax
  00060	6a 0a		 push	 10			; 0000000aH
  00062	8b 4d 10	 mov	 ecx, DWORD PTR _pLPCoef$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 10	 mov	 edx, DWORD PTR _pLPCoef$[ebp]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 _BandExpand@16

; 81   : 
; 82   :   STACK_END
; 83   : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 18 00	 ret	 24			; 00000018H
_VoxCalcLPC@24 ENDP
_TEXT	ENDS
END
