; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\setup.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DO@GIBACIEO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09FDEMNCNM@Warp?$DO0?40F?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxSetup@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxUpdateSubframe@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InterpolateLsfs@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxSetup@20
PUBLIC	??_C@_0DO@GIBACIEO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_09FDEMNCNM@Warp?$DO0?40F?$AA@		; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@00000000
PUBLIC	__real@43340000
PUBLIC	__real@42700000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
EXTRN	_memcpy:NEAR
EXTRN	_ceil:NEAR
EXTRN	_floor:NEAR
EXTRN	__assert:NEAR
EXTRN	_SpecIntLn@24:NEAR
EXTRN	_getnHarm@4:NEAR
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@3ff0000000000000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\setup.c
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0DO@GIBACIEO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DO@GIBACIEO@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\setup.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FDEMNCNM@Warp?$DO0?40F?$AA@
CONST	SEGMENT
??_C@_09FDEMNCNM@Warp?$DO0?40F?$AA@ DB 'Warp>0.0F', 00H	; `string'
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxSetup@20
_TEXT	SEGMENT
tv335 = -784
tv333 = -780
tv305 = -776
tv303 = -772
tv308 = -768
tv301 = -760
tv294 = -756
tv289 = -752
_SubFrameParam_mblk$ = -748
_Spec_sub_1$ = -744
_interpFactor$ = -380
_Spec_sub$ = -376
_Param_mblk$ = -16
_i$ = -12
_PrevFrameParam_mblk$ = -8
_nHarm$ = -4
_pvParam_mblk$ = 8
_pvSubFrameParam_mblk$ = 12
_pvPrevFrameParam_mblk$ = 16
_Warp$ = 20
_unpackFLAG$ = 24
_VoxSetup@20 PROC NEAR					; COMDAT

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 03 00
	00		 sub	 esp, 784		; 00000310H

; 107  :    PARAM         *Param_mblk=(PARAM *)pvParam_mblk;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pvParam_mblk$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR _Param_mblk$[ebp], eax

; 108  :    SubFrameParam *SubFrameParam_mblk=(SubFrameParam *)pvSubFrameParam_mblk;

  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _pvSubFrameParam_mblk$[ebp]
  00012	89 8d 14 fd ff
	ff		 mov	 DWORD PTR _SubFrameParam_mblk$[ebp], ecx

; 109  :    PrevFrameParam *PrevFrameParam_mblk=(PrevFrameParam *)pvPrevFrameParam_mblk;

  00018	8b 55 10	 mov	 edx, DWORD PTR _pvPrevFrameParam_mblk$[ebp]
  0001b	89 55 f8	 mov	 DWORD PTR _PrevFrameParam_mblk$[ebp], edx

; 110  : 
; 111  :    short          nHarm;
; 112  : 
; 113  : STACK_INIT
; 114  :    float          Spec_sub_1[MAXHARM];
; 115  :    float          Spec_sub[MAXHARM];
; 116  : STACK_INIT_END
; 117  : 
; 118  :    int            i;
; 119  :    float          interpFactor;
; 120  : 
; 121  : STACK_ATTACH (float *, Spec_sub_1)
; 122  : STACK_ATTACH (float *, Spec_sub)
; 123  : 
; 124  : STACK_START
; 125  : 
; 126  :  /*---------------------------------------------
; 127  :    Check if the codec is at a new frame ...
; 128  :    ---------------------------------------------*/
; 129  :    if (SubFrameParam_mblk->WarpFrame == 0)

  0001e	8b 85 14 fd ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00024	0f bf 48 28	 movsx	 ecx, WORD PTR [eax+40]
  00028	85 c9		 test	 ecx, ecx
  0002a	0f 85 4d 01 00
	00		 jne	 $L1711

; 130  :    {
; 131  :     /*----------------------------------------------
; 132  :       Set the total number of Warp frames for this
; 133  :       frame of encoded data ...
; 134  :       ----------------------------------------------*/
; 135  :       if (Warp < 1.0)

  00030	d9 45 14	 fld	 DWORD PTR _Warp$[ebp]
  00033	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3ff0000000000000
  00039	df e0		 fnstsw	 ax
  0003b	f6 c4 05	 test	 ah, 5
  0003e	7a 0e		 jp	 SHORT $L1712

; 136  :          SubFrameParam_mblk->totalWarpFrame = 1;

  00040	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00046	66 c7 42 2a 01
	00		 mov	 WORD PTR [edx+42], 1

; 137  :       else

  0004c	eb 20		 jmp	 SHORT $L1713
$L1712:

; 138  :          SubFrameParam_mblk->totalWarpFrame = (short) ceil(Warp);

  0004e	d9 45 14	 fld	 DWORD PTR _Warp$[ebp]
  00051	83 ec 08	 sub	 esp, 8
  00054	dd 1c 24	 fstp	 QWORD PTR [esp]
  00057	e8 00 00 00 00	 call	 _ceil
  0005c	83 c4 08	 add	 esp, 8
  0005f	e8 00 00 00 00	 call	 __ftol2
  00064	8b 8d 14 fd ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0006a	66 89 41 2a	 mov	 WORD PTR [ecx+42], ax
$L1713:

; 139  :       SubFrameParam_mblk->WarpFrame = SubFrameParam_mblk->totalWarpFrame;

  0006e	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00074	8b 85 14 fd ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  0007a	66 8b 48 2a	 mov	 cx, WORD PTR [eax+42]
  0007e	66 89 4a 28	 mov	 WORD PTR [edx+40], cx

; 140  : 
; 141  :     /*-----------------------------------------------
; 142  :       - Set the synthesis frame length and number of
; 143  :       subframes for this set of warp frames.
; 144  :       - Make the number of subframes per time no more
; 145  :       than during normal operation to prevent the
; 146  :       complexity from increasing.
; 147  :       - Make the frame length a multiple of the 
; 148  :       eventual subframe length so that things work 
; 149  :       out nicely in the decoder.
; 150  :       -----------------------------------------------*/
; 151  : 
; 152  :       assert(Warp>0.0F);

  00082	d9 45 14	 fld	 DWORD PTR _Warp$[ebp]
  00085	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0008b	df e0		 fnstsw	 ax
  0008d	f6 c4 41	 test	 ah, 65			; 00000041H
  00090	74 17		 je	 SHORT $L1786
  00092	68 98 00 00 00	 push	 152			; 00000098H
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@GIBACIEO@c?3?2xbox?2private?2windows?2directx?2@
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09FDEMNCNM@Warp?$DO0?40F?$AA@
  000a1	e8 00 00 00 00	 call	 __assert
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1786:

; 153  :       SubFrameParam_mblk->frameLEN = (short)(FRAME_LEN*Warp/SubFrameParam_mblk->totalWarpFrame);

  000a9	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@43340000
  000af	d8 4d 14	 fmul	 DWORD PTR _Warp$[ebp]
  000b2	8b 85 14 fd ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  000b8	0f bf 48 2a	 movsx	 ecx, WORD PTR [eax+42]
  000bc	89 8d 10 fd ff
	ff		 mov	 DWORD PTR tv289[ebp], ecx
  000c2	da b5 10 fd ff
	ff		 fidiv	 DWORD PTR tv289[ebp]
  000c8	e8 00 00 00 00	 call	 __ftol2
  000cd	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000d3	66 89 42 2c	 mov	 WORD PTR [edx+44], ax

; 154  :       SubFrameParam_mblk->nSubs = (short) floor((SubFrameParam_mblk->frameLEN/ ((float)MAXSUBFRAMELEN)));

  000d7	8b 85 14 fd ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  000dd	0f bf 48 2c	 movsx	 ecx, WORD PTR [eax+44]
  000e1	89 8d 0c fd ff
	ff		 mov	 DWORD PTR tv294[ebp], ecx
  000e7	db 85 0c fd ff
	ff		 fild	 DWORD PTR tv294[ebp]
  000ed	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@42700000
  000f3	83 ec 08	 sub	 esp, 8
  000f6	dd 1c 24	 fstp	 QWORD PTR [esp]
  000f9	e8 00 00 00 00	 call	 _floor
  000fe	83 c4 08	 add	 esp, 8
  00101	e8 00 00 00 00	 call	 __ftol2
  00106	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0010c	66 89 42 2e	 mov	 WORD PTR [edx+46], ax

; 155  :       SubFrameParam_mblk->frameLEN = (short) (SubFrameParam_mblk->nSubs*
; 156  :                                      floor(SubFrameParam_mblk->frameLEN/((float)SubFrameParam_mblk->nSubs)));

  00110	8b 85 14 fd ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00116	0f bf 48 2e	 movsx	 ecx, WORD PTR [eax+46]
  0011a	89 8d 08 fd ff
	ff		 mov	 DWORD PTR tv301[ebp], ecx
  00120	db 85 08 fd ff
	ff		 fild	 DWORD PTR tv301[ebp]
  00126	dd 9d 00 fd ff
	ff		 fstp	 QWORD PTR tv308[ebp]
  0012c	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00132	0f bf 42 2c	 movsx	 eax, WORD PTR [edx+44]
  00136	89 85 fc fc ff
	ff		 mov	 DWORD PTR tv303[ebp], eax
  0013c	db 85 fc fc ff
	ff		 fild	 DWORD PTR tv303[ebp]
  00142	8b 8d 14 fd ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00148	0f bf 51 2e	 movsx	 edx, WORD PTR [ecx+46]
  0014c	89 95 f8 fc ff
	ff		 mov	 DWORD PTR tv305[ebp], edx
  00152	db 85 f8 fc ff
	ff		 fild	 DWORD PTR tv305[ebp]
  00158	de f9		 fdivp	 ST(1), ST(0)
  0015a	83 ec 08	 sub	 esp, 8
  0015d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00160	e8 00 00 00 00	 call	 _floor
  00165	83 c4 08	 add	 esp, 8
  00168	dc 8d 00 fd ff
	ff		 fmul	 QWORD PTR tv308[ebp]
  0016e	e8 00 00 00 00	 call	 __ftol2
  00173	8b 8d 14 fd ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00179	66 89 41 2c	 mov	 WORD PTR [ecx+44], ax
$L1711:

; 157  :    }
; 158  : 
; 159  :  /*------------------------------------------------
; 160  :    Set the interpolation factor for this warp based
; 161  :    on the Pv of the previous and current codec
; 162  :    frames ...
; 163  : 
; 164  :    - if Pv is in transition from 0 to nonzero or
; 165  :      visa-versa, don't interpolate the parameters.
; 166  :    ------------------------------------------------*/
; 167  :    if (((PrevFrameParam_mblk->Pv==0.0)&&(Param_mblk->Pv>0.0))||
; 168  :        ((PrevFrameParam_mblk->Pv>0.0)&&(Param_mblk->Pv==0.0)))

  0017d	8b 55 f8	 mov	 edx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00180	d9 42 04	 fld	 DWORD PTR [edx+4]
  00183	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00189	df e0		 fnstsw	 ax
  0018b	f6 c4 44	 test	 ah, 68			; 00000044H
  0018e	7a 12		 jp	 SHORT $L1726
  00190	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  00193	d9 00		 fld	 DWORD PTR [eax]
  00195	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0019b	df e0		 fnstsw	 ax
  0019d	f6 c4 41	 test	 ah, 65			; 00000041H
  001a0	74 25		 je	 SHORT $L1725
$L1726:
  001a2	8b 4d f8	 mov	 ecx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  001a5	d9 41 04	 fld	 DWORD PTR [ecx+4]
  001a8	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  001ae	df e0		 fnstsw	 ax
  001b0	f6 c4 41	 test	 ah, 65			; 00000041H
  001b3	75 50		 jne	 SHORT $L1724
  001b5	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  001b8	d9 02		 fld	 DWORD PTR [edx]
  001ba	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  001c0	df e0		 fnstsw	 ax
  001c2	f6 c4 44	 test	 ah, 68			; 00000044H
  001c5	7a 3e		 jp	 SHORT $L1724
$L1725:

; 169  :    {
; 170  :       if ((SubFrameParam_mblk->totalWarpFrame-SubFrameParam_mblk->WarpFrame)< (SubFrameParam_mblk->totalWarpFrame>>1))

  001c7	8b 85 14 fd ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  001cd	0f bf 48 2a	 movsx	 ecx, WORD PTR [eax+42]
  001d1	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  001d7	0f bf 42 28	 movsx	 eax, WORD PTR [edx+40]
  001db	2b c8		 sub	 ecx, eax
  001dd	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  001e3	0f bf 42 2a	 movsx	 eax, WORD PTR [edx+42]
  001e7	d1 f8		 sar	 eax, 1
  001e9	3b c8		 cmp	 ecx, eax
  001eb	7d 0c		 jge	 SHORT $L1727

; 171  :       {
; 172  :          interpFactor = 0.0F;

  001ed	c7 85 84 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _interpFactor$[ebp], 0

; 173  :       }
; 174  :       else

  001f7	eb 0a		 jmp	 SHORT $L1728
$L1727:

; 175  :       {
; 176  :          interpFactor = 1.0F;

  001f9	c7 85 84 fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _interpFactor$[ebp], 1065353216 ; 3f800000H
$L1728:

; 177  :       }
; 178  :    }
; 179  :    else

  00203	eb 43		 jmp	 SHORT $L1729
$L1724:

; 180  :    {
; 181  :       interpFactor = (SubFrameParam_mblk->totalWarpFrame-SubFrameParam_mblk->WarpFrame+1)
; 182  :                      /((float)SubFrameParam_mblk->totalWarpFrame);

  00205	8b 8d 14 fd ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0020b	0f bf 51 2a	 movsx	 edx, WORD PTR [ecx+42]
  0020f	8b 85 14 fd ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00215	0f bf 48 28	 movsx	 ecx, WORD PTR [eax+40]
  00219	2b d1		 sub	 edx, ecx
  0021b	83 c2 01	 add	 edx, 1
  0021e	89 95 f4 fc ff
	ff		 mov	 DWORD PTR tv333[ebp], edx
  00224	db 85 f4 fc ff
	ff		 fild	 DWORD PTR tv333[ebp]
  0022a	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00230	0f bf 42 2a	 movsx	 eax, WORD PTR [edx+42]
  00234	89 85 f0 fc ff
	ff		 mov	 DWORD PTR tv335[ebp], eax
  0023a	db 85 f0 fc ff
	ff		 fild	 DWORD PTR tv335[ebp]
  00240	de f9		 fdivp	 ST(1), ST(0)
  00242	d9 9d 84 fe ff
	ff		 fstp	 DWORD PTR _interpFactor$[ebp]
$L1729:

; 183  :    } 
; 184  : 
; 185  : 
; 186  :  /*-----------------------------------------------------
; 187  :    Set the subframe memory structure to correct values.
; 188  :    Interpolate from the original (param) values ...
; 189  :    Do not interpolate Pv.
; 190  :    -----------------------------------------------------*/
; 191  :    SubFrameParam_mblk->Pitch = PrevFrameParam_mblk->Pitch + interpFactor*(Param_mblk->Pitch-PrevFrameParam_mblk->Pitch);

  00248	8b 4d f0	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  0024b	8b 55 f8	 mov	 edx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  0024e	d9 41 04	 fld	 DWORD PTR [ecx+4]
  00251	d8 22		 fsub	 DWORD PTR [edx]
  00253	d8 8d 84 fe ff
	ff		 fmul	 DWORD PTR _interpFactor$[ebp]
  00259	8b 45 f8	 mov	 eax, DWORD PTR _PrevFrameParam_mblk$[ebp]
  0025c	d8 00		 fadd	 DWORD PTR [eax]
  0025e	8b 8d 14 fd ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00264	d9 19		 fstp	 DWORD PTR [ecx]

; 192  : 
; 193  :    nHarm = getnHarm(SubFrameParam_mblk->Pitch);

  00266	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0026c	8b 02		 mov	 eax, DWORD PTR [edx]
  0026e	50		 push	 eax
  0026f	e8 00 00 00 00	 call	 _getnHarm@4
  00274	66 89 45 fc	 mov	 WORD PTR _nHarm$[ebp], ax

; 194  :    if (nHarm > MAXHARM)

  00278	0f bf 4d fc	 movsx	 ecx, WORD PTR _nHarm$[ebp]
  0027c	83 f9 5a	 cmp	 ecx, 90			; 0000005aH
  0027f	7e 06		 jle	 SHORT $L1731

; 195  :       nHarm = MAXHARM;

  00281	66 c7 45 fc 5a
	00		 mov	 WORD PTR _nHarm$[ebp], 90 ; 0000005aH
$L1731:

; 196  : 
; 197  :    SpecIntLn(PrevFrameParam_mblk->Pitch, SubFrameParam_mblk->Pitch, 
; 198  :              (const int) nHarm, PrevFrameParam_mblk->Amp, Spec_sub_1, 
; 199  :              (const unsigned int) MAXHARM);

  00287	6a 5a		 push	 90			; 0000005aH
  00289	8d 95 18 fd ff
	ff		 lea	 edx, DWORD PTR _Spec_sub_1$[ebp]
  0028f	52		 push	 edx
  00290	8b 45 f8	 mov	 eax, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00293	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00296	51		 push	 ecx
  00297	0f bf 55 fc	 movsx	 edx, WORD PTR _nHarm$[ebp]
  0029b	52		 push	 edx
  0029c	8b 85 14 fd ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  002a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a4	51		 push	 ecx
  002a5	8b 55 f8	 mov	 edx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  002a8	8b 02		 mov	 eax, DWORD PTR [edx]
  002aa	50		 push	 eax
  002ab	e8 00 00 00 00	 call	 _SpecIntLn@24

; 200  :    SpecIntLn(Param_mblk->Pitch, SubFrameParam_mblk->Pitch, (const int) nHarm, 
; 201  :              Param_mblk->Amp, Spec_sub,  (const unsigned int) MAXHARM);

  002b0	6a 5a		 push	 90			; 0000005aH
  002b2	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR _Spec_sub$[ebp]
  002b8	51		 push	 ecx
  002b9	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  002bc	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002bf	50		 push	 eax
  002c0	0f bf 4d fc	 movsx	 ecx, WORD PTR _nHarm$[ebp]
  002c4	51		 push	 ecx
  002c5	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  002cb	8b 02		 mov	 eax, DWORD PTR [edx]
  002cd	50		 push	 eax
  002ce	8b 4d f0	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  002d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002d4	52		 push	 edx
  002d5	e8 00 00 00 00	 call	 _SpecIntLn@24

; 202  : 
; 203  :    for (i=0; i< nHarm; i++)

  002da	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002e1	eb 09		 jmp	 SHORT $L1736
$L1737:
  002e3	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  002e6	83 c0 01	 add	 eax, 1
  002e9	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$L1736:
  002ec	0f bf 4d fc	 movsx	 ecx, WORD PTR _nHarm$[ebp]
  002f0	39 4d f4	 cmp	 DWORD PTR _i$[ebp], ecx
  002f3	7d 35		 jge	 SHORT $L1738

; 204  :       SubFrameParam_mblk->Amp[i] = Spec_sub_1[i] + interpFactor*(Spec_sub[i]-Spec_sub_1[i]);

  002f5	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  002f8	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  002fb	d9 84 95 88 fe
	ff ff		 fld	 DWORD PTR _Spec_sub$[ebp+edx*4]
  00302	d8 a4 85 18 fd
	ff ff		 fsub	 DWORD PTR _Spec_sub_1$[ebp+eax*4]
  00309	d8 8d 84 fe ff
	ff		 fmul	 DWORD PTR _interpFactor$[ebp]
  0030f	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00312	d8 84 8d 18 fd
	ff ff		 fadd	 DWORD PTR _Spec_sub_1$[ebp+ecx*4]
  00319	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0031f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00322	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00325	d9 1c 88	 fstp	 DWORD PTR [eax+ecx*4]
  00328	eb b9		 jmp	 SHORT $L1737
$L1738:

; 205  :    for (i=nHarm; i< MAXHARM; i++)

  0032a	0f bf 55 fc	 movsx	 edx, WORD PTR _nHarm$[ebp]
  0032e	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
  00331	eb 09		 jmp	 SHORT $L1739
$L1740:
  00333	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00336	83 c0 01	 add	 eax, 1
  00339	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$L1739:
  0033c	83 7d f4 5a	 cmp	 DWORD PTR _i$[ebp], 90	; 0000005aH
  00340	7d 15		 jge	 SHORT $L1741

; 206  :       SubFrameParam_mblk->Amp[i] = 0.0F;

  00342	8b 8d 14 fd ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00348	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0034b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0034e	c7 04 82 00 00
	00 00		 mov	 DWORD PTR [edx+eax*4], 0
  00355	eb dc		 jmp	 SHORT $L1740
$L1741:

; 207  : 
; 208  :    InterpolateLsfs(Param_mblk->Lsf, PrevFrameParam_mblk->Lsf, interpFactor, SubFrameParam_mblk->Lsf);

  00357	8b 8d 14 fd ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0035d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00360	52		 push	 edx
  00361	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR _interpFactor$[ebp]
  00367	50		 push	 eax
  00368	8b 4d f8	 mov	 ecx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  0036b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0036e	52		 push	 edx
  0036f	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  00372	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00375	51		 push	 ecx
  00376	e8 00 00 00 00	 call	 _InterpolateLsfs@16

; 209  : 
; 210  :    if (interpFactor < 0.5)

  0037b	d9 85 84 fe ff
	ff		 fld	 DWORD PTR _interpFactor$[ebp]
  00381	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3fe0000000000000
  00387	df e0		 fnstsw	 ax
  00389	f6 c4 05	 test	 ah, 5
  0038c	7a 11		 jp	 SHORT $L1742

; 211  :       SubFrameParam_mblk->Pv = PrevFrameParam_mblk->Pv;

  0038e	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00394	8b 45 f8	 mov	 eax, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00397	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0039a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 212  :    else

  0039d	eb 0e		 jmp	 SHORT $L1743
$L1742:

; 213  :       SubFrameParam_mblk->Pv = Param_mblk->Pv;

  0039f	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  003a5	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  003a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  003aa	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$L1743:

; 214  : 
; 215  : 
; 216  :  /*-------------------------------------------------------
; 217  :    Decrement the warp frame, and check to see if unpacking
; 218  :    is necessary next time around ...
; 219  :    -------------------------------------------------------*/
; 220  :    SubFrameParam_mblk->WarpFrame--;

  003ad	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  003b3	66 8b 42 28	 mov	 ax, WORD PTR [edx+40]
  003b7	66 2d 01 00	 sub	 ax, 1
  003bb	8b 8d 14 fd ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  003c1	66 89 41 28	 mov	 WORD PTR [ecx+40], ax

; 221  :    if (SubFrameParam_mblk->WarpFrame==0)

  003c5	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  003cb	0f bf 42 28	 movsx	 eax, WORD PTR [edx+40]
  003cf	85 c0		 test	 eax, eax
  003d1	75 08		 jne	 SHORT $L1744

; 222  :       *unpackFLAG = 1;

  003d3	8b 4d 18	 mov	 ecx, DWORD PTR _unpackFLAG$[ebp]
  003d6	c6 01 01	 mov	 BYTE PTR [ecx], 1

; 223  :    else

  003d9	eb 06		 jmp	 SHORT $L1745
$L1744:

; 224  :       *unpackFLAG = 0;

  003db	8b 55 18	 mov	 edx, DWORD PTR _unpackFLAG$[ebp]
  003de	c6 02 00	 mov	 BYTE PTR [edx], 0
$L1745:

; 225  : 
; 226  :  /*-------------------------------------------------------
; 227  :    Update the previous frame parameters if we are finished
; 228  :    with the current frame's data ...
; 229  :    -------------------------------------------------------*/
; 230  :    if (SubFrameParam_mblk->WarpFrame==0)

  003e1	8b 85 14 fd ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  003e7	0f bf 48 28	 movsx	 ecx, WORD PTR [eax+40]
  003eb	85 c9		 test	 ecx, ecx
  003ed	75 55		 jne	 SHORT $L1746

; 231  :    {
; 232  :       memcpy(PrevFrameParam_mblk->Amp, Param_mblk->Amp, sizeof(float)*MAXHARM);

  003ef	68 68 01 00 00	 push	 360			; 00000168H
  003f4	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  003f7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  003fa	50		 push	 eax
  003fb	8b 4d f8	 mov	 ecx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  003fe	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00401	52		 push	 edx
  00402	e8 00 00 00 00	 call	 _memcpy
  00407	83 c4 0c	 add	 esp, 12			; 0000000cH

; 233  :       memcpy(PrevFrameParam_mblk->Lsf, Param_mblk->Lsf, sizeof(float)*LPC_ORDER);

  0040a	6a 28		 push	 40			; 00000028H
  0040c	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  0040f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00412	51		 push	 ecx
  00413	8b 55 f8	 mov	 edx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00416	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00419	50		 push	 eax
  0041a	e8 00 00 00 00	 call	 _memcpy
  0041f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :       PrevFrameParam_mblk->Pv = Param_mblk->Pv;

  00422	8b 4d f8	 mov	 ecx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00425	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  00428	8b 02		 mov	 eax, DWORD PTR [edx]
  0042a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 235  :       PrevFrameParam_mblk->Pitch = Param_mblk->Pitch;

  0042d	8b 4d f8	 mov	 ecx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00430	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  00433	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00436	89 01		 mov	 DWORD PTR [ecx], eax

; 236  :       PrevFrameParam_mblk->Energy = Param_mblk->Energy;

  00438	8b 4d f8	 mov	 ecx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  0043b	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  0043e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00441	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L1746:

; 237  :    }
; 238  : 
; 239  : STACK_END
; 240  : 
; 241  :    return 0;

  00444	66 33 c0	 xor	 ax, ax

; 242  : }

  00447	8b e5		 mov	 esp, ebp
  00449	5d		 pop	 ebp
  0044a	c2 14 00	 ret	 20			; 00000014H
_VoxSetup@20 ENDP
_TEXT	ENDS
PUBLIC	_VoxUpdateSubframe@4
; Function compile flags: /Odt
;	COMDAT _VoxUpdateSubframe@4
_TEXT	SEGMENT
_SubFrameParam_mblk$ = -4
_pvSubFrameParam_mblk$ = 8
_VoxUpdateSubframe@4 PROC NEAR				; COMDAT

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 246  : 
; 247  :    SubFrameParam *SubFrameParam_mblk=(SubFrameParam *)pvSubFrameParam_mblk;

  00004	8b 45 08	 mov	 eax, DWORD PTR _pvSubFrameParam_mblk$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR _SubFrameParam_mblk$[ebp], eax

; 248  : 
; 249  :    memcpy(SubFrameParam_mblk->Amp_1, SubFrameParam_mblk->Amp, sizeof(float)*MAXHARM);

  0000a	68 68 01 00 00	 push	 360			; 00000168H
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00012	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00015	52		 push	 edx
  00016	8b 45 fc	 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00019	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 _memcpy
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 250  :    memcpy(SubFrameParam_mblk->Lsf_1, SubFrameParam_mblk->Lsf, sizeof(float)*LPC_ORDER);

  00025	6a 28		 push	 40			; 00000028H
  00027	8b 55 fc	 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0002a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0002d	50		 push	 eax
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00031	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 _memcpy
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 251  :    SubFrameParam_mblk->Pv_1 = SubFrameParam_mblk->Pv;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00043	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00046	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 252  :    SubFrameParam_mblk->Pitch_1 = SubFrameParam_mblk->Pitch;

  00049	8b 45 fc	 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0004f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00051	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 253  :    SubFrameParam_mblk->Energy_1 = SubFrameParam_mblk->Energy;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0005a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0005d	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 254  : 
; 255  : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
_VoxUpdateSubframe@4 ENDP
_TEXT	ENDS
PUBLIC	__real@42340000
PUBLIC	__real@4579f000
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@4579f000
CONST	SEGMENT
__real@4579f000 DD 04579f000r			; 3999
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _InterpolateLsfs@16
_TEXT	SEGMENT
_i$ = -4
_Lsf$ = 8
_prevLsf$ = 12
_interpFactor$ = 16
_interpLsf$ = 20
_InterpolateLsfs@16 PROC NEAR				; COMDAT

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 293  :    int i;
; 294  :    
; 295  :    for (i=0; i<LPC_ORDER; i++)

  00005	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0000c	eb 09		 jmp	 SHORT $L1766
$L1767:
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00011	83 c0 01	 add	 eax, 1
  00014	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L1766:
  00017	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  0001b	7d 29		 jge	 SHORT $L1768

; 296  :       interpLsf[i] = prevLsf[i] + (Lsf[i]-prevLsf[i])*interpFactor;

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00020	8b 55 08	 mov	 edx, DWORD PTR _Lsf$[ebp]
  00023	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00026	8b 75 0c	 mov	 esi, DWORD PTR _prevLsf$[ebp]
  00029	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  0002c	d8 24 86	 fsub	 DWORD PTR [esi+eax*4]
  0002f	d8 4d 10	 fmul	 DWORD PTR _interpFactor$[ebp]
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00035	8b 55 0c	 mov	 edx, DWORD PTR _prevLsf$[ebp]
  00038	d8 04 8a	 fadd	 DWORD PTR [edx+ecx*4]
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003e	8b 4d 14	 mov	 ecx, DWORD PTR _interpLsf$[ebp]
  00041	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]
  00044	eb c8		 jmp	 SHORT $L1767
$L1768:

; 297  :    for (i=1; i<LPC_ORDER; i++)

  00046	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0004d	eb 09		 jmp	 SHORT $L1769
$L1770:
  0004f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00052	83 c2 01	 add	 edx, 1
  00055	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L1769:
  00058	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  0005c	7d 3b		 jge	 SHORT $L1771

; 298  :       if (interpLsf[i]<(interpLsf[i-1]+LSP_SEPERATION_HZ))

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00061	8b 4d 14	 mov	 ecx, DWORD PTR _interpLsf$[ebp]
  00064	d9 44 81 fc	 fld	 DWORD PTR [ecx+eax*4-4]
  00068	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@42340000
  0006e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00071	8b 45 14	 mov	 eax, DWORD PTR _interpLsf$[ebp]
  00074	d8 1c 90	 fcomp	 DWORD PTR [eax+edx*4]
  00077	df e0		 fnstsw	 ax
  00079	f6 c4 41	 test	 ah, 65			; 00000041H
  0007c	75 19		 jne	 SHORT $L1772

; 299  :             interpLsf[i] = (float)(interpLsf[i-1]+LSP_SEPERATION_HZ);

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00081	8b 55 14	 mov	 edx, DWORD PTR _interpLsf$[ebp]
  00084	d9 44 8a fc	 fld	 DWORD PTR [edx+ecx*4-4]
  00088	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@42340000
  0008e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00091	8b 4d 14	 mov	 ecx, DWORD PTR _interpLsf$[ebp]
  00094	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]
$L1772:

; 300  :    if (interpLsf[LPC_ORDER-1] > 3999.0F)

  00097	eb b6		 jmp	 SHORT $L1770
$L1771:
  00099	8b 55 14	 mov	 edx, DWORD PTR _interpLsf$[ebp]
  0009c	d9 42 24	 fld	 DWORD PTR [edx+36]
  0009f	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@4579f000
  000a5	df e0		 fnstsw	 ax
  000a7	f6 c4 41	 test	 ah, 65			; 00000041H
  000aa	75 0a		 jne	 SHORT $L1764

; 301  :       interpLsf[LPC_ORDER-1] = 3999.0F;

  000ac	8b 45 14	 mov	 eax, DWORD PTR _interpLsf$[ebp]
  000af	c7 40 24 00 f0
	79 45		 mov	 DWORD PTR [eax+36], 1165619200 ; 4579f000H
$L1764:

; 302  : }

  000b6	5e		 pop	 esi
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 10 00	 ret	 16			; 00000010H
_InterpolateLsfs@16 ENDP
_TEXT	ENDS
END
