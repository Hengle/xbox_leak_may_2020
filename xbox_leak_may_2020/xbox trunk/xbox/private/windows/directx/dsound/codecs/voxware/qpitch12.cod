; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\qpitch12.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@NJOFNIJE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09FKCBLBEO@pitch?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxQuanPitchVR12@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxLutPitchVR12@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxQuanPitchVR12@4
PUBLIC	??_C@_0EB@NJOFNIJE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_09FKCBLBEO@pitch?5?$DO?50?$AA@		; `string'
PUBLIC	__real@00000000
PUBLIC	__real@4064000000000000
PUBLIC	__real@3fe0000000000000
EXTRN	_log10:NEAR
EXTRN	_floor:NEAR
EXTRN	__assert:NEAR
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@00000000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\qpitch12.c
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0EB@NJOFNIJE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0EB@NJOFNIJE@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\qpitch12.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FKCBLBEO@pitch?5?$DO?50?$AA@
CONST	SEGMENT
??_C@_09FKCBLBEO@pitch?5?$DO?50?$AA@ DB 'pitch > 0', 00H ; `string'
CONST	ENDS
;	COMDAT __real@4064000000000000
CONST	SEGMENT
__real@4064000000000000 DQ 04064000000000000r	; 160
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxQuanPitchVR12@4
_TEXT	SEGMENT
tv94 = -12
_qP0$ = -4
_pitch$ = 8
_VoxQuanPitchVR12@4 PROC NEAR				; COMDAT

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 65   :   short qP0;
; 66   : 
; 67   :   assert(pitch > 0);

  00006	d9 45 08	 fld	 DWORD PTR _pitch$[ebp]
  00009	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0000f	df e0		 fnstsw	 ax
  00011	f6 c4 41	 test	 ah, 65			; 00000041H
  00014	74 14		 je	 SHORT $L973
  00016	6a 43		 push	 67			; 00000043H
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@NJOFNIJE@c?3?2xbox?2private?2windows?2directx?2@
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09FKCBLBEO@pitch?5?$DO?50?$AA@
  00022	e8 00 00 00 00	 call	 __assert
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
$L973:

; 68   :   qP0 = (short)floor((log10((double)QUANT_MAX_PITCH_VR/(double)pitch)) / log10(M_T0)+0.5);

  0002a	d9 45 08	 fld	 DWORD PTR _pitch$[ebp]
  0002d	dc 3d 00 00 00
	00		 fdivr	 QWORD PTR __real@4064000000000000
  00033	83 ec 08	 sub	 esp, 8
  00036	dd 1c 24	 fstp	 QWORD PTR [esp]
  00039	e8 00 00 00 00	 call	 _log10
  0003e	83 c4 08	 add	 esp, 8
  00041	dd 5d f4	 fstp	 QWORD PTR tv94[ebp]
  00044	68 c4 61 f0 3f	 push	 1072718276		; 3ff061c4H
  00049	68 72 02 e7 4d	 push	 1306985074		; 4de70272H
  0004e	e8 00 00 00 00	 call	 _log10
  00053	83 c4 08	 add	 esp, 8
  00056	dc 7d f4	 fdivr	 QWORD PTR tv94[ebp]
  00059	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  0005f	83 ec 08	 sub	 esp, 8
  00062	dd 1c 24	 fstp	 QWORD PTR [esp]
  00065	e8 00 00 00 00	 call	 _floor
  0006a	83 c4 08	 add	 esp, 8
  0006d	e8 00 00 00 00	 call	 __ftol2
  00072	66 89 45 fc	 mov	 WORD PTR _qP0$[ebp], ax

; 69   :   if (qP0 >= Q_PITCH_LEVEL)   qP0 = Q_PITCH_LEVEL-1;

  00076	0f bf 4d fc	 movsx	 ecx, WORD PTR _qP0$[ebp]
  0007a	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  00080	7c 06		 jl	 SHORT $L947
  00082	66 c7 45 fc 7f
	00		 mov	 WORD PTR _qP0$[ebp], 127 ; 0000007fH
$L947:

; 70   :   if (qP0 < 0)  qP0 = 0;

  00088	0f bf 55 fc	 movsx	 edx, WORD PTR _qP0$[ebp]
  0008c	85 d2		 test	 edx, edx
  0008e	7d 06		 jge	 SHORT $L948
  00090	66 c7 45 fc 00
	00		 mov	 WORD PTR _qP0$[ebp], 0
$L948:

; 71   :   return qP0;

  00096	66 8b 45 fc	 mov	 ax, WORD PTR _qP0$[ebp]

; 72   : }

  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
_VoxQuanPitchVR12@4 ENDP
_TEXT	ENDS
PUBLIC	_VoxLutPitchVR12@4
PUBLIC	__real@41000000
PUBLIC	__real@43200000
PUBLIC	__real@405f400000000000
PUBLIC	__real@3f000000
EXTRN	_pow:NEAR
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@43200000
CONST	SEGMENT
__real@43200000 DD 043200000r			; 160
CONST	ENDS
;	COMDAT __real@405f400000000000
CONST	SEGMENT
__real@405f400000000000 DQ 0405f400000000000r	; 125
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxLutPitchVR12@4
_TEXT	SEGMENT
tv78 = -8
_pitch$ = -4
_qP0$ = 8
_VoxLutPitchVR12@4 PROC NEAR				; COMDAT

; 76   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 77   :   float pitch;
; 78   :   
; 79   :   pitch = (float)((double)QUANT_MAX_PITCH_VR * pow(M_T0, (double)(-qP0)));

  00006	0f bf 45 08	 movsx	 eax, WORD PTR _qP0$[ebp]
  0000a	f7 d8		 neg	 eax
  0000c	89 45 f8	 mov	 DWORD PTR tv78[ebp], eax
  0000f	db 45 f8	 fild	 DWORD PTR tv78[ebp]
  00012	83 ec 08	 sub	 esp, 8
  00015	dd 1c 24	 fstp	 QWORD PTR [esp]
  00018	68 c4 61 f0 3f	 push	 1072718276		; 3ff061c4H
  0001d	68 72 02 e7 4d	 push	 1306985074		; 4de70272H
  00022	e8 00 00 00 00	 call	 _pow
  00027	83 c4 10	 add	 esp, 16			; 00000010H
  0002a	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4064000000000000
  00030	d9 55 fc	 fst	 DWORD PTR _pitch$[ebp]

; 80   :   
; 81   :   if (pitch < (float)QUANT_MIN_PITCH_VR)  pitch = (float)QUANT_MIN_PITCH_VR;

  00033	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41000000
  00039	df e0		 fnstsw	 ax
  0003b	f6 c4 05	 test	 ah, 5
  0003e	7a 07		 jp	 SHORT $L957
  00040	c7 45 fc 00 00
	00 41		 mov	 DWORD PTR _pitch$[ebp], 1090519040 ; 41000000H
$L957:

; 82   :   if (pitch > (float)QUANT_MAX_PITCH_VR)  pitch = (float)QUANT_MAX_PITCH_VR;

  00047	d9 45 fc	 fld	 DWORD PTR _pitch$[ebp]
  0004a	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@43200000
  00050	df e0		 fnstsw	 ax
  00052	f6 c4 41	 test	 ah, 65			; 00000041H
  00055	75 07		 jne	 SHORT $L960
  00057	c7 45 fc 00 00
	20 43		 mov	 DWORD PTR _pitch$[ebp], 1126170624 ; 43200000H
$L960:

; 83   : 
; 84   : #if 1  /* WIN16 ?? */
; 85   : 
; 86   : /* if (486) */
; 87   :   {
; 88   :      if (pitch > 125.0)

  0005e	d9 45 fc	 fld	 DWORD PTR _pitch$[ebp]
  00061	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@405f400000000000
  00067	df e0		 fnstsw	 ax
  00069	f6 c4 41	 test	 ah, 65			; 00000041H
  0006c	75 0c		 jne	 SHORT $L962

; 89   :         pitch*=0.5F;

  0006e	d9 45 fc	 fld	 DWORD PTR _pitch$[ebp]
  00071	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  00077	d9 5d fc	 fstp	 DWORD PTR _pitch$[ebp]
$L962:

; 90   :   }
; 91   : /* endif */
; 92   : 
; 93   : #endif
; 94   :   
; 95   :   return pitch;

  0007a	d9 45 fc	 fld	 DWORD PTR _pitch$[ebp]

; 96   : }

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
_VoxLutPitchVR12@4 ENDP
_TEXT	ENDS
END
