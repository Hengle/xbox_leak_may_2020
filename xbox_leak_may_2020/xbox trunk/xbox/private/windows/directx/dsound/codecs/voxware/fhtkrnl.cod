; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\fhtkrnl.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@GNDNFCJD@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@JDJDNNIF@pfAmps?5?$CB?$DN?5NULL?5?$CG?$CG?5piPhaseIndex?5?$CB@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@HOBDEDGM@pfSig?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@FGKGOBLI@pfFHTWeights?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@MONEIEMI@pfSinTbl?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCosTbl?5?$CB?$DN?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxFHTkrnl@32
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxFHTkrnl@32
PUBLIC	??_C@_0EA@GNDNFCJD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CH@JDJDNNIF@pfAmps?5?$CB?$DN?5NULL?5?$CG?$CG?5piPhaseIndex?5?$CB@ ; `string'
PUBLIC	??_C@_0O@HOBDEDGM@pfSig?5?$CB?$DN?5NULL?$AA@	; `string'
PUBLIC	??_C@_0BF@FGKGOBLI@pfFHTWeights?5?$CB?$DN?5NULL?$AA@ ; `string'
PUBLIC	??_C@_0CF@MONEIEMI@pfSinTbl?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCosTbl?5?$CB?$DN?5@ ; `string'
EXTRN	_vox_nspsCcsFft@12:NEAR
EXTRN	__fltused:NEAR
EXTRN	__assert:NEAR
EXTRN	_memset:NEAR
;	COMDAT ??_C@_0EA@GNDNFCJD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\fhtkrnl.c
CONST	SEGMENT
??_C@_0EA@GNDNFCJD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\fhtkrnl.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JDJDNNIF@pfAmps?5?$CB?$DN?5NULL?5?$CG?$CG?5piPhaseIndex?5?$CB@
CONST	SEGMENT
??_C@_0CH@JDJDNNIF@pfAmps?5?$CB?$DN?5NULL?5?$CG?$CG?5piPhaseIndex?5?$CB@ DB 'p'
	DB	'fAmps != NULL && piPhaseIndex != NULL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HOBDEDGM@pfSig?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0O@HOBDEDGM@pfSig?5?$CB?$DN?5NULL?$AA@ DB 'pfSig != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FGKGOBLI@pfFHTWeights?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BF@FGKGOBLI@pfFHTWeights?5?$CB?$DN?5NULL?$AA@ DB 'pfFHTWeights != '
	DB	'NULL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MONEIEMI@pfSinTbl?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCosTbl?5?$CB?$DN?5@
CONST	SEGMENT
??_C@_0CF@MONEIEMI@pfSinTbl?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCosTbl?5?$CB?$DN?5@ DB 'p'
	DB	'fSinTbl != NULL && pfCosTbl != NULL', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxFHTkrnl@32
_TEXT	SEGMENT
_fMag$ = -16
_j$ = -12
_iNfft$ = -8
_i$ = -4
_pfAmps$ = 8
_piPhaseIndex$ = 12
_iHarm$ = 16
_pfSig$ = 20
_iFFTorder$ = 24
_pfFHTWeights$ = 28
_pfSinTbl$ = 32
_pfCosTbl$ = 36
_VoxFHTkrnl@32 PROC NEAR				; COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 114  :   float fMag;
; 115  :   int   i, j;
; 116  :   int   iNfft = 1<<iFFTorder;

  00007	b8 01 00 00 00	 mov	 eax, 1
  0000c	8b 4d 18	 mov	 ecx, DWORD PTR _iFFTorder$[ebp]
  0000f	d3 e0		 shl	 eax, cl
  00011	89 45 f8	 mov	 DWORD PTR _iNfft$[ebp], eax

; 117  : 
; 118  :   assert(pfAmps != NULL && piPhaseIndex != NULL);

  00014	83 7d 08 00	 cmp	 DWORD PTR _pfAmps$[ebp], 0
  00018	74 06		 je	 SHORT $L1269
  0001a	83 7d 0c 00	 cmp	 DWORD PTR _piPhaseIndex$[ebp], 0
  0001e	75 14		 jne	 SHORT $L1270
$L1269:
  00020	6a 76		 push	 118			; 00000076H
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@GNDNFCJD@c?3?2xbox?2private?2windows?2directx?2@
  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@JDJDNNIF@pfAmps?5?$CB?$DN?5NULL?5?$CG?$CG?5piPhaseIndex?5?$CB@
  0002c	e8 00 00 00 00	 call	 __assert
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1270:

; 119  :   assert(pfSig != NULL);

  00034	83 7d 14 00	 cmp	 DWORD PTR _pfSig$[ebp], 0
  00038	75 14		 jne	 SHORT $L1271
  0003a	6a 77		 push	 119			; 00000077H
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@GNDNFCJD@c?3?2xbox?2private?2windows?2directx?2@
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@HOBDEDGM@pfSig?5?$CB?$DN?5NULL?$AA@
  00046	e8 00 00 00 00	 call	 __assert
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1271:

; 120  :   assert(pfFHTWeights != NULL);

  0004e	83 7d 1c 00	 cmp	 DWORD PTR _pfFHTWeights$[ebp], 0
  00052	75 14		 jne	 SHORT $L1272
  00054	6a 78		 push	 120			; 00000078H
  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@GNDNFCJD@c?3?2xbox?2private?2windows?2directx?2@
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@FGKGOBLI@pfFHTWeights?5?$CB?$DN?5NULL?$AA@
  00060	e8 00 00 00 00	 call	 __assert
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1272:

; 121  :   assert(pfSinTbl != NULL && pfCosTbl != NULL);

  00068	83 7d 20 00	 cmp	 DWORD PTR _pfSinTbl$[ebp], 0
  0006c	74 06		 je	 SHORT $L1273
  0006e	83 7d 24 00	 cmp	 DWORD PTR _pfCosTbl$[ebp], 0
  00072	75 14		 jne	 SHORT $L1274
$L1273:
  00074	6a 79		 push	 121			; 00000079H
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@GNDNFCJD@c?3?2xbox?2private?2windows?2directx?2@
  0007b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@MONEIEMI@pfSinTbl?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCosTbl?5?$CB?$DN?5@
  00080	e8 00 00 00 00	 call	 __assert
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1274:

; 122  : 
; 123  :   /*---------------------------------------------------------
; 124  :     Zero the FFT buffer
; 125  :   ---------------------------------------------------------*/
; 126  :   memset(pfSig, 0, sizeof(float)*(iNfft+2));

  00088	8b 55 f8	 mov	 edx, DWORD PTR _iNfft$[ebp]
  0008b	8d 04 95 08 00
	00 00		 lea	 eax, DWORD PTR [edx*4+8]
  00092	50		 push	 eax
  00093	6a 00		 push	 0
  00095	8b 4d 14	 mov	 ecx, DWORD PTR _pfSig$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _memset
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 127  : 
; 128  :   /*---------------------------------------------------------
; 129  :     Fill the interleaved FFT buffer with real and imaginary
; 130  :       parts corresponding to the harmonic amplitudes and 
; 131  :       phases.  Multiply the harmonic amplitudes by the FHT 
; 132  :       weight (pfFHTWeights[]).  
; 133  :   ---------------------------------------------------------*/
; 134  :   for (i=0, j=2; i < iHarm; i++, j+=2)

  000a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000a8	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _j$[ebp], 2
  000af	eb 12		 jmp	 SHORT $L1254
$L1255:
  000b1	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000b4	83 c2 01	 add	 edx, 1
  000b7	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  000ba	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  000bd	83 c0 02	 add	 eax, 2
  000c0	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
$L1254:
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000c6	3b 4d 10	 cmp	 ecx, DWORD PTR _iHarm$[ebp]
  000c9	7d 50		 jge	 SHORT $L1256

; 135  :   {
; 136  :      fMag       =  pfAmps[i] * pfFHTWeights[i];

  000cb	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000ce	8b 45 08	 mov	 eax, DWORD PTR _pfAmps$[ebp]
  000d1	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000d4	8b 75 1c	 mov	 esi, DWORD PTR _pfFHTWeights$[ebp]
  000d7	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  000da	d8 0c 8e	 fmul	 DWORD PTR [esi+ecx*4]
  000dd	d9 5d f0	 fstp	 DWORD PTR _fMag$[ebp]

; 137  :      pfSig[j]   =  fMag * pfSinTbl[piPhaseIndex[i]];

  000e0	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000e3	8b 45 0c	 mov	 eax, DWORD PTR _piPhaseIndex$[ebp]
  000e6	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  000e9	8b 55 20	 mov	 edx, DWORD PTR _pfSinTbl$[ebp]
  000ec	d9 45 f0	 fld	 DWORD PTR _fMag$[ebp]
  000ef	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  000f2	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  000f5	8b 4d 14	 mov	 ecx, DWORD PTR _pfSig$[ebp]
  000f8	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 138  :      pfSig[j+1] = -fMag * pfCosTbl[piPhaseIndex[i]];

  000fb	d9 45 f0	 fld	 DWORD PTR _fMag$[ebp]
  000fe	d9 e0		 fchs
  00100	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00103	8b 45 0c	 mov	 eax, DWORD PTR _piPhaseIndex$[ebp]
  00106	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00109	8b 55 24	 mov	 edx, DWORD PTR _pfCosTbl$[ebp]
  0010c	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  0010f	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  00112	8b 4d 14	 mov	 ecx, DWORD PTR _pfSig$[ebp]
  00115	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 139  :   }

  00119	eb 96		 jmp	 SHORT $L1255
$L1256:

; 140  : 
; 141  :   /*---------------------------------------------------------
; 142  :     Take the inverse REAL FFT without scaling.
; 143  :   ---------------------------------------------------------*/
; 144  :   VoxRealInverseFft(pfSig, iFFTorder, IFFT_NO_SCALE_FLAG);

  0011b	6a 08		 push	 8
  0011d	8b 55 18	 mov	 edx, DWORD PTR _iFFTorder$[ebp]
  00120	52		 push	 edx
  00121	8b 45 14	 mov	 eax, DWORD PTR _pfSig$[ebp]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 _vox_nspsCcsFft@12

; 145  : 
; 146  : }

  0012a	5e		 pop	 esi
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c2 20 00	 ret	 32			; 00000020H
_VoxFHTkrnl@32 ENDP
_TEXT	ENDS
END
