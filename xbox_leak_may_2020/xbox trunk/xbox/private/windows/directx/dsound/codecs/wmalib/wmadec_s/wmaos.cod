; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\wmaos.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT ??_C@_0DA@EENBKMIJ@?6?6?$CK?$CK?5Ticks?5per?5second?5?$CIclock?5res@
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT ??_C@_0DF@HPKPHKOO@?$CK?$CK?5Decode?5time?3?5?$CFf?5sec?4?5Entire?5d@
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT ??_C@_0BM@KFEOKPGH@?$CK?$CK?5Playback?5time?5?3?5?$CFf?5sec?4?6?$AA@
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT ??_C@_0DG@HLBNGHCL@?$CK?$CK?5Percentage?5of?5playback?5time?5s@
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT ??_C@_0EA@GBAGAFAC@?$CK?$CK?5Minimum?5MHz?5for?5realtime?5play@
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT ??_C@_0DA@FKJPLKOL@?$CK?$CK?5This?5CPU?5is?5?$CFf?5times?5faster?5t@
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT ??_C@_0BH@OJEBDBPF@?$CFs?$CI?$CFd?$CJ?5?3?5?$CK?$CK?$CK?5INFO?5?$CK?$CK?$CK?5?$AA@
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
WMADEC_RW	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RW	ENDS
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT @ByteSwap@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _PerfTimerNew@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _PerfTimerStart@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _PerfTimerStop@8
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _PerfTimerStopElapsed@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _PerfTimerReport@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _fltPerfTimerDecodeTime@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _PerfTimerFree@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _TraceInfoHelper
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _MyOutputDbgStr
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, WMADEC_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_DSoundBuildNumberD
WMADEC_RD	SEGMENT
_WMA_OK	DD	00H
_WMA_S_FALSE DD	01H
_WMA_S_BUFUNDERFLOW DD 02H
_WMA_S_NEWPACKET DD 03H
_WMA_S_NO_MORE_FRAME DD 04H
_WMA_S_DEFAULT DD 05H
_WMA_S_SWITCHCHMODE DD 06H
_WMA_E_FAIL DD	080004005H
_WMA_E_OUTOFMEMORY DD 08007000eH
_WMA_E_INVALIDARG DD 080070057H
_WMA_E_NOTSUPPORTED DD 080040000H
_WMA_E_LOSTPACKET DD 080040001H
_WMA_E_BROKEN_FRAME DD 080040002H
_WMA_E_BUFFEROVERFLOW DD 080040003H
_WMA_E_ONHOLD DD 080040004H
_WMA_E_BUFFERUNDERFLOW DD 080040005H
_WMA_E_INVALIDRECHDR DD 080040006H
_WMA_E_SYNCERROR DD 080040007H
_WMA_E_NOTIMPL DD 080040008H
_WMA_E_FLUSHOVERFLOW DD 080040009H
WMADEC_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_PerfTimerNew@4
EXTRN	_malloc:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\wmalib\wmadec_s\wmaos.c
;	COMDAT _PerfTimerNew@4
WMADEC	SEGMENT
_pInfo$ = -4
_lSamplesPerSecOutput$ = 8
_PerfTimerNew@4 PROC NEAR				; COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 57   :     PERFTIMERINFO  *pInfo;
; 58   : 
; 59   :     pInfo = (PERFTIMERINFO*)(malloc(sizeof(PERFTIMERINFO)));

  00004	6a 18		 push	 24			; 00000018H
  00006	e8 00 00 00 00	 call	 _malloc
  0000b	83 c4 04	 add	 esp, 4
  0000e	89 45 fc	 mov	 DWORD PTR _pInfo$[ebp], eax

; 60   :     if (NULL == pInfo)

  00011	83 7d fc 00	 cmp	 DWORD PTR _pInfo$[ebp], 0
  00015	75 04		 jne	 SHORT $L2360

; 61   :         return NULL;

  00017	33 c0		 xor	 eax, eax
  00019	eb 3d		 jmp	 SHORT $L2355
$L2360:

; 62   : 
; 63   :     pInfo->fFirstTime = WMAB_TRUE;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _pInfo$[ebp]
  0001e	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 64   :     pInfo->cDecodeTime = 0;

  00024	8b 4d fc	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  00027	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 65   :     pInfo->cTotalDecLoopTime = 0;

  0002e	8b 55 fc	 mov	 edx, DWORD PTR _pInfo$[ebp]
  00031	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 66   :     pInfo->cDecodeStart = 0;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _pInfo$[ebp]
  0003b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 67   :     pInfo->lSamplesPerSec = lSamplesPerSecOutput;

  00042	8b 4d fc	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  00045	8b 55 08	 mov	 edx, DWORD PTR _lSamplesPerSecOutput$[ebp]
  00048	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 68   :     pInfo->lPlaybackTime = 0;

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _pInfo$[ebp]
  0004e	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 69   : 
; 70   :     return pInfo;

  00055	8b 45 fc	 mov	 eax, DWORD PTR _pInfo$[ebp]
$L2355:

; 71   : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
_PerfTimerNew@4 ENDP
WMADEC	ENDS
PUBLIC	_PerfTimerStart@4
EXTRN	_clock:NEAR
; Function compile flags: /Odt
;	COMDAT _PerfTimerStart@4
WMADEC	SEGMENT
_pInfo$ = 8
_PerfTimerStart@4 PROC NEAR				; COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 75   :     pInfo->cDecodeStart = clock();

  00003	e8 00 00 00 00	 call	 _clock
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  0000b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 76   : 
; 77   :     if (pInfo->fFirstTime)

  0000e	8b 55 08	 mov	 edx, DWORD PTR _pInfo$[ebp]
  00011	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00014	74 15		 je	 SHORT $L2364

; 78   :     {
; 79   :         pInfo->cTotalDecLoopTime = pInfo->cDecodeStart;

  00016	8b 45 08	 mov	 eax, DWORD PTR _pInfo$[ebp]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  0001c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0001f	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 80   :         pInfo->fFirstTime = WMAB_FALSE;

  00022	8b 45 08	 mov	 eax, DWORD PTR _pInfo$[ebp]
  00025	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L2364:

; 81   :     }
; 82   : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
_PerfTimerStart@4 ENDP
WMADEC	ENDS
PUBLIC	_PerfTimerStop@8
; Function compile flags: /Odt
;	COMDAT _PerfTimerStop@8
WMADEC	SEGMENT
_cDecodeTime$ = -4
_pInfo$ = 8
_lSamplesDecoded$ = 12
_PerfTimerStop@8 PROC NEAR				; COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 86   :     clock_t cDecodeTime;
; 87   : 
; 88   :     cDecodeTime = clock() - pInfo->cDecodeStart;

  00004	e8 00 00 00 00	 call	 _clock
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  0000c	2b 41 0c	 sub	 eax, DWORD PTR [ecx+12]
  0000f	89 45 fc	 mov	 DWORD PTR _cDecodeTime$[ebp], eax

; 89   :     pInfo->cDecodeTime += cDecodeTime;

  00012	8b 55 08	 mov	 edx, DWORD PTR _pInfo$[ebp]
  00015	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00018	03 45 fc	 add	 eax, DWORD PTR _cDecodeTime$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  0001e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 90   : 
; 91   :     // Record output playback time from this decode call, in clock() ticks
; 92   :     pInfo->lPlaybackTime += lSamplesDecoded * CLOCKS_PER_SEC / pInfo->lSamplesPerSec;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _lSamplesDecoded$[ebp]
  00024	69 c0 e8 03 00
	00		 imul	 eax, 1000		; 000003e8H
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  0002d	99		 cdq
  0002e	f7 79 10	 idiv	 DWORD PTR [ecx+16]
  00031	8b 55 08	 mov	 edx, DWORD PTR _pInfo$[ebp]
  00034	03 42 14	 add	 eax, DWORD PTR [edx+20]
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  0003a	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 93   : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
_PerfTimerStop@8 ENDP
WMADEC	ENDS
PUBLIC	_PerfTimerStopElapsed@4
; Function compile flags: /Odt
;	COMDAT _PerfTimerStopElapsed@4
WMADEC	SEGMENT
_pInfo$ = 8
_PerfTimerStopElapsed@4 PROC NEAR			; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 97   :     pInfo->cTotalDecLoopTime = clock() - pInfo->cTotalDecLoopTime;

  00003	e8 00 00 00 00	 call	 _clock
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  0000b	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _pInfo$[ebp]
  00011	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 98   : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
_PerfTimerStopElapsed@4 ENDP
WMADEC	ENDS
PUBLIC	_PerfTimerReport@4
PUBLIC	??_C@_0DA@EENBKMIJ@?6?6?$CK?$CK?5Ticks?5per?5second?5?$CIclock?5res@ ; `string'
PUBLIC	??_C@_0DF@HPKPHKOO@?$CK?$CK?5Decode?5time?3?5?$CFf?5sec?4?5Entire?5d@ ; `string'
PUBLIC	??_C@_0BM@KFEOKPGH@?$CK?$CK?5Playback?5time?5?3?5?$CFf?5sec?4?6?$AA@ ; `string'
PUBLIC	??_C@_0DG@HLBNGHCL@?$CK?$CK?5Percentage?5of?5playback?5time?5s@ ; `string'
PUBLIC	??_C@_0EA@GBAGAFAC@?$CK?$CK?5Minimum?5MHz?5for?5realtime?5play@ ; `string'
PUBLIC	??_C@_0DA@FKJPLKOL@?$CK?$CK?5This?5CPU?5is?5?$CFf?5times?5faster?5t@ ; `string'
PUBLIC	__real@447a0000
PUBLIC	__real@42c80000
PUBLIC	__real@3f800000
EXTRN	_printf:NEAR
EXTRN	_sprintf:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0DA@EENBKMIJ@?6?6?$CK?$CK?5Ticks?5per?5second?5?$CIclock?5res@
WMADEC_RD	SEGMENT
??_C@_0DA@EENBKMIJ@?6?6?$CK?$CK?5Ticks?5per?5second?5?$CIclock?5res@ DB 0aH
	DB	0aH, '** Ticks per second (clock resolution): %ld.', 0aH, 00H ; `string'
WMADEC_RD	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT ??_C@_0DF@HPKPHKOO@?$CK?$CK?5Decode?5time?3?5?$CFf?5sec?4?5Entire?5d@
WMADEC_RD	SEGMENT
??_C@_0DF@HPKPHKOO@?$CK?$CK?5Decode?5time?3?5?$CFf?5sec?4?5Entire?5d@ DB '*'
	DB	'* Decode time: %f sec. Entire decode time: %f sec.', 0aH, 00H ; `string'
WMADEC_RD	ENDS
;	COMDAT ??_C@_0BM@KFEOKPGH@?$CK?$CK?5Playback?5time?5?3?5?$CFf?5sec?4?6?$AA@
WMADEC_RD	SEGMENT
??_C@_0BM@KFEOKPGH@?$CK?$CK?5Playback?5time?5?3?5?$CFf?5sec?4?6?$AA@ DB '*'
	DB	'* Playback time : %f sec.', 0aH, 00H	; `string'
WMADEC_RD	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT ??_C@_0DG@HLBNGHCL@?$CK?$CK?5Percentage?5of?5playback?5time?5s@
WMADEC_RD	SEGMENT
??_C@_0DG@HLBNGHCL@?$CK?$CK?5Percentage?5of?5playback?5time?5s@ DB '** Pe'
	DB	'rcentage of playback time spent decoding: %f%%.', 0aH, 00H ; `string'
WMADEC_RD	ENDS
;	COMDAT ??_C@_0EA@GBAGAFAC@?$CK?$CK?5Minimum?5MHz?5for?5realtime?5play@
WMADEC_RD	SEGMENT
??_C@_0EA@GBAGAFAC@?$CK?$CK?5Minimum?5MHz?5for?5realtime?5play@ DB '** Mi'
	DB	'nimum MHz for realtime playback: %f of current CPU speed.', 0aH
	DB	00H						; `string'
WMADEC_RD	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_0DA@FKJPLKOL@?$CK?$CK?5This?5CPU?5is?5?$CFf?5times?5faster?5t@
WMADEC_RD	SEGMENT
??_C@_0DA@FKJPLKOL@?$CK?$CK?5This?5CPU?5is?5?$CFf?5times?5faster?5t@ DB '*'
	DB	'* This CPU is %f times faster than required.', 0aH, 0aH, 00H ; `string'
; Function compile flags: /Odt
WMADEC_RD	ENDS
;	COMDAT _PerfTimerReport@4
WMADEC	SEGMENT
_sz$ = -272
_fltPlaybackTime$ = -16
_fltEntireDecodeTime$ = -12
_fltDecodeTime$ = -8
_fltDecodeTimeFraction$ = -4
_pInfo$ = 8
_PerfTimerReport@4 PROC NEAR				; COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H

; 102  :     char    sz[256];
; 103  :     float   fltDecodeTime;
; 104  :     float   fltEntireDecodeTime;
; 105  :     float   fltDecodeTimeFraction;
; 106  :     float   fltPlaybackTime;
; 107  : 
; 108  :     sprintf(sz, "\n\n** Ticks per second (clock resolution): %ld.\n", CLOCKS_PER_SEC);

  00009	68 e8 03 00 00	 push	 1000			; 000003e8H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@EENBKMIJ@?6?6?$CK?$CK?5Ticks?5per?5second?5?$CIclock?5res@
  00013	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _sz$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _sprintf
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 109  :     OUTPUT_DEBUG_STRING(sz);

  00022	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _sz$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _printf
  0002e	83 c4 04	 add	 esp, 4

; 110  : 
; 111  :     fltDecodeTime = (float) pInfo->cDecodeTime / (float) CLOCKS_PER_SEC;

  00031	8b 55 08	 mov	 edx, DWORD PTR _pInfo$[ebp]
  00034	db 42 04	 fild	 DWORD PTR [edx+4]
  00037	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@447a0000
  0003d	d9 5d f8	 fstp	 DWORD PTR _fltDecodeTime$[ebp]

; 112  :     fltEntireDecodeTime = (float) pInfo->cTotalDecLoopTime /
; 113  :         (float) CLOCKS_PER_SEC;

  00040	8b 45 08	 mov	 eax, DWORD PTR _pInfo$[ebp]
  00043	db 40 08	 fild	 DWORD PTR [eax+8]
  00046	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@447a0000
  0004c	d9 55 f4	 fst	 DWORD PTR _fltEntireDecodeTime$[ebp]

; 114  :     sprintf(sz, "** Decode time: %f sec. Entire decode time: %f sec.\n",
; 115  :         fltDecodeTime, fltEntireDecodeTime);

  0004f	83 ec 08	 sub	 esp, 8
  00052	dd 1c 24	 fstp	 QWORD PTR [esp]
  00055	d9 45 f8	 fld	 DWORD PTR _fltDecodeTime$[ebp]
  00058	83 ec 08	 sub	 esp, 8
  0005b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0005e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@HPKPHKOO@?$CK?$CK?5Decode?5time?3?5?$CFf?5sec?4?5Entire?5d@
  00063	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _sz$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 _sprintf
  0006f	83 c4 18	 add	 esp, 24			; 00000018H

; 116  :     OUTPUT_DEBUG_STRING(sz);

  00072	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _sz$[ebp]
  00078	52		 push	 edx
  00079	e8 00 00 00 00	 call	 _printf
  0007e	83 c4 04	 add	 esp, 4

; 117  : 
; 118  :     fltPlaybackTime = (float) pInfo->lPlaybackTime / (float) CLOCKS_PER_SEC;

  00081	8b 45 08	 mov	 eax, DWORD PTR _pInfo$[ebp]
  00084	db 40 14	 fild	 DWORD PTR [eax+20]
  00087	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@447a0000
  0008d	d9 55 f0	 fst	 DWORD PTR _fltPlaybackTime$[ebp]

; 119  :     sprintf(sz, "** Playback time : %f sec.\n",
; 120  :         fltPlaybackTime);

  00090	83 ec 08	 sub	 esp, 8
  00093	dd 1c 24	 fstp	 QWORD PTR [esp]
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@KFEOKPGH@?$CK?$CK?5Playback?5time?5?3?5?$CFf?5sec?4?6?$AA@
  0009b	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _sz$[ebp]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 _sprintf
  000a7	83 c4 10	 add	 esp, 16			; 00000010H

; 121  :     OUTPUT_DEBUG_STRING(sz);

  000aa	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _sz$[ebp]
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 _printf
  000b6	83 c4 04	 add	 esp, 4

; 122  : 
; 123  :     fltDecodeTimeFraction = (float)pInfo->cDecodeTime / (float) pInfo->lPlaybackTime;

  000b9	8b 45 08	 mov	 eax, DWORD PTR _pInfo$[ebp]
  000bc	db 40 04	 fild	 DWORD PTR [eax+4]
  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  000c2	da 71 14	 fidiv	 DWORD PTR [ecx+20]
  000c5	d9 55 fc	 fst	 DWORD PTR _fltDecodeTimeFraction$[ebp]

; 124  :     sprintf(sz, "** Percentage of playback time spent decoding: %f%%.\n",
; 125  :         fltDecodeTimeFraction * 100);

  000c8	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@42c80000
  000ce	83 ec 08	 sub	 esp, 8
  000d1	dd 1c 24	 fstp	 QWORD PTR [esp]
  000d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@HLBNGHCL@?$CK?$CK?5Percentage?5of?5playback?5time?5s@
  000d9	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _sz$[ebp]
  000df	52		 push	 edx
  000e0	e8 00 00 00 00	 call	 _sprintf
  000e5	83 c4 10	 add	 esp, 16			; 00000010H

; 126  :     OUTPUT_DEBUG_STRING(sz);

  000e8	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _sz$[ebp]
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 _printf
  000f4	83 c4 04	 add	 esp, 4

; 127  : #	if defined(WMA_MONITOR)
; 128  : 		fprintf(stderr,"%s\n",sz);
; 129  : #	endif
; 130  : 
; 131  :     sprintf(sz, "** Minimum MHz for realtime playback: %f of current CPU speed.\n",
; 132  :         fltDecodeTimeFraction);

  000f7	d9 45 fc	 fld	 DWORD PTR _fltDecodeTimeFraction$[ebp]
  000fa	83 ec 08	 sub	 esp, 8
  000fd	dd 1c 24	 fstp	 QWORD PTR [esp]
  00100	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@GBAGAFAC@?$CK?$CK?5Minimum?5MHz?5for?5realtime?5play@
  00105	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _sz$[ebp]
  0010b	51		 push	 ecx
  0010c	e8 00 00 00 00	 call	 _sprintf
  00111	83 c4 10	 add	 esp, 16			; 00000010H

; 133  :     OUTPUT_DEBUG_STRING(sz);

  00114	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _sz$[ebp]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 _printf
  00120	83 c4 04	 add	 esp, 4

; 134  : 
; 135  :     sprintf(sz, "** This CPU is %f times faster than required.\n\n",
; 136  :         (float)1.0 / fltDecodeTimeFraction);

  00123	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  00129	d8 75 fc	 fdiv	 DWORD PTR _fltDecodeTimeFraction$[ebp]
  0012c	83 ec 08	 sub	 esp, 8
  0012f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00132	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@FKJPLKOL@?$CK?$CK?5This?5CPU?5is?5?$CFf?5times?5faster?5t@
  00137	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _sz$[ebp]
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 _sprintf
  00143	83 c4 10	 add	 esp, 16			; 00000010H

; 137  :     OUTPUT_DEBUG_STRING(sz);

  00146	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _sz$[ebp]
  0014c	51		 push	 ecx
  0014d	e8 00 00 00 00	 call	 _printf
  00152	83 c4 04	 add	 esp, 4

; 138  : 
; 139  : }

  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 04 00	 ret	 4
_PerfTimerReport@4 ENDP
WMADEC	ENDS
PUBLIC	_fltPerfTimerDecodeTime@4
; Function compile flags: /Odt
;	COMDAT _fltPerfTimerDecodeTime@4
WMADEC	SEGMENT
_pInfo$ = 8
_fltPerfTimerDecodeTime@4 PROC NEAR			; COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  :     return (float) pInfo->cDecodeTime / (float) CLOCKS_PER_SEC;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pInfo$[ebp]
  00006	db 40 04	 fild	 DWORD PTR [eax+4]
  00009	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@447a0000

; 144  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
_fltPerfTimerDecodeTime@4 ENDP
WMADEC	ENDS
PUBLIC	_PerfTimerFree@4
EXTRN	_free:NEAR
; Function compile flags: /Odt
;	COMDAT _PerfTimerFree@4
WMADEC	SEGMENT
_pInfo$ = 8
_PerfTimerFree@4 PROC NEAR				; COMDAT

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 148  :     free(pInfo);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pInfo$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _free
  0000c	83 c4 04	 add	 esp, 4

; 149  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
_PerfTimerFree@4 ENDP
WMADEC	ENDS
PUBLIC	_TraceInfoHelper
PUBLIC	??_C@_0BH@OJEBDBPF@?$CFs?$CI?$CFd?$CJ?5?3?5?$CK?$CK?$CK?5INFO?5?$CK?$CK?$CK?5?$AA@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	_vsprintf:NEAR
;	COMDAT ??_C@_0BH@OJEBDBPF@?$CFs?$CI?$CFd?$CJ?5?3?5?$CK?$CK?$CK?5INFO?5?$CK?$CK?$CK?5?$AA@
WMADEC_RD	SEGMENT
??_C@_0BH@OJEBDBPF@?$CFs?$CI?$CFd?$CJ?5?3?5?$CK?$CK?$CK?5INFO?5?$CK?$CK?$CK?5?$AA@ DB '%'
	DB	's(%d) : *** INFO *** ', 00H			; `string'
WMADEC_RD	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
WMADEC_RD	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
; Function compile flags: /Odt
WMADEC_RD	ENDS
;	COMDAT _TraceInfoHelper
WMADEC	SEGMENT
_sz$ = -520
_vargs$ = -8
_iCharsWritten$ = -4
_pszFile$ = 8
_iLine$ = 12
_pszFmt$ = 16
_TraceInfoHelper PROC NEAR				; COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 02 00
	00		 sub	 esp, 520		; 00000208H

; 158  :     char    sz[512];
; 159  :     va_list vargs;
; 160  :     Int     iCharsWritten;
; 161  : 
; 162  :     // Prepend file/line identifier and "*** INFO ***" to get attention
; 163  :     iCharsWritten = sprintf(sz, "%s(%d) : *** INFO *** ", pszFile, iLine);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _iLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@OJEBDBPF@?$CFs?$CI?$CFd?$CJ?5?3?5?$CK?$CK?$CK?5INFO?5?$CK?$CK?$CK?5?$AA@
  00016	8d 95 f8 fd ff
	ff		 lea	 edx, DWORD PTR _sz$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 _sprintf
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR _iCharsWritten$[ebp], eax

; 164  : 
; 165  :     va_start(vargs, pszFmt);

  00028	8d 45 14	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  0002b	89 45 f8	 mov	 DWORD PTR _vargs$[ebp], eax

; 166  :     iCharsWritten += vsprintf(sz + iCharsWritten, pszFmt, vargs);

  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _vargs$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR _pszFmt$[ebp]
  00035	52		 push	 edx
  00036	8b 45 fc	 mov	 eax, DWORD PTR _iCharsWritten$[ebp]
  00039	8d 8c 05 f8 fd
	ff ff		 lea	 ecx, DWORD PTR _sz$[ebp+eax]
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _vsprintf
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
  00049	8b 55 fc	 mov	 edx, DWORD PTR _iCharsWritten$[ebp]
  0004c	03 d0		 add	 edx, eax
  0004e	89 55 fc	 mov	 DWORD PTR _iCharsWritten$[ebp], edx

; 167  :     va_end(vargs);

  00051	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vargs$[ebp], 0

; 168  : 
; 169  :     // Append a newline and print it!
; 170  :     sprintf(sz + iCharsWritten, "\n");

  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _iCharsWritten$[ebp]
  00060	8d 8c 05 f8 fd
	ff ff		 lea	 ecx, DWORD PTR _sz$[ebp+eax]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 _sprintf
  0006d	83 c4 08	 add	 esp, 8

; 171  :     OUTPUT_DEBUG_STRING(sz);

  00070	8d 95 f8 fd ff
	ff		 lea	 edx, DWORD PTR _sz$[ebp]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 _printf
  0007c	83 c4 04	 add	 esp, 4

; 172  : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_TraceInfoHelper ENDP
WMADEC	ENDS
PUBLIC	_MyOutputDbgStr
; Function compile flags: /Odt
;	COMDAT _MyOutputDbgStr
WMADEC	SEGMENT
_wmaReturn$ = 8
_pszFmt$ = 12
_MyOutputDbgStr PROC NEAR				; COMDAT

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : #if 0
; 183  :     char    sz[512];
; 184  :     va_list vargs;
; 185  : 
; 186  :     va_start(vargs, pszFmt);
; 187  :     vsprintf(sz, pszFmt, vargs);
; 188  :     va_end(vargs);
; 189  : 
; 190  :     OUTPUT_DEBUG_STRING(sz);
; 191  :     return wmaReturn;
; 192  : #endif
; 193  :     return wmaReturn;

  00003	8b 45 08	 mov	 eax, DWORD PTR _wmaReturn$[ebp]

; 194  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
_MyOutputDbgStr ENDP
WMADEC	ENDS
END
