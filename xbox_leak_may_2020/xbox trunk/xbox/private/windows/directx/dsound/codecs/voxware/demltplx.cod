; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\demltplx.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxDemultiplex@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxDemultiplex@16
EXTRN	__fltused:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\demltplx.c
;	COMDAT _VoxDemultiplex@16
_TEXT	SEGMENT
_pfSW$ = 8
_pfRE$ = 12
_pfIM$ = 16
_iLength$ = 20
_VoxDemultiplex@16 PROC NEAR				; COMDAT

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L603:

; 72   :    while ((iLength--) > 0)

  00003	8b 45 14	 mov	 eax, DWORD PTR _iLength$[ebp]
  00006	8b 4d 14	 mov	 ecx, DWORD PTR _iLength$[ebp]
  00009	83 e9 01	 sub	 ecx, 1
  0000c	89 4d 14	 mov	 DWORD PTR _iLength$[ebp], ecx
  0000f	85 c0		 test	 eax, eax
  00011	7e 3a		 jle	 SHORT $L601

; 73   :    {
; 74   :       *pfRE++ = *pfSW++;

  00013	8b 55 0c	 mov	 edx, DWORD PTR _pfRE$[ebp]
  00016	8b 45 08	 mov	 eax, DWORD PTR _pfSW$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 0a		 mov	 DWORD PTR [edx], ecx
  0001d	8b 55 0c	 mov	 edx, DWORD PTR _pfRE$[ebp]
  00020	83 c2 04	 add	 edx, 4
  00023	89 55 0c	 mov	 DWORD PTR _pfRE$[ebp], edx
  00026	8b 45 08	 mov	 eax, DWORD PTR _pfSW$[ebp]
  00029	83 c0 04	 add	 eax, 4
  0002c	89 45 08	 mov	 DWORD PTR _pfSW$[ebp], eax

; 75   :       *pfIM++ = *pfSW++;

  0002f	8b 4d 10	 mov	 ecx, DWORD PTR _pfIM$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _pfSW$[ebp]
  00035	8b 02		 mov	 eax, DWORD PTR [edx]
  00037	89 01		 mov	 DWORD PTR [ecx], eax
  00039	8b 4d 10	 mov	 ecx, DWORD PTR _pfIM$[ebp]
  0003c	83 c1 04	 add	 ecx, 4
  0003f	89 4d 10	 mov	 DWORD PTR _pfIM$[ebp], ecx
  00042	8b 55 08	 mov	 edx, DWORD PTR _pfSW$[ebp]
  00045	83 c2 04	 add	 edx, 4
  00048	89 55 08	 mov	 DWORD PTR _pfSW$[ebp], edx

; 76   :    }

  0004b	eb b6		 jmp	 SHORT $L603
$L601:

; 77   : }

  0004d	5d		 pop	 ebp
  0004e	c2 10 00	 ret	 16			; 00000010H
_VoxDemultiplex@16 ENDP
_TEXT	ENDS
END
