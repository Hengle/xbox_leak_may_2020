; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\peakpick.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@KOBDEFBC@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@CBPJJMML@pfMag?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@NJKGAINH@piPeakFreq?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@DPNEMBOK@piNPeaks?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _PeakPick@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_PeakPick@24
PUBLIC	??_C@_0EB@KOBDEFBC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@CBPJJMML@pfMag?5?$CB?$DN?5NULL?$AA@	; `string'
PUBLIC	??_C@_0BD@NJKGAINH@piPeakFreq?5?$CB?$DN?5NULL?$AA@ ; `string'
PUBLIC	??_C@_0BB@DPNEMBOK@piNPeaks?5?$CB?$DN?5NULL?$AA@ ; `string'
EXTRN	__assert:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0EB@KOBDEFBC@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\peakpick.c
CONST	SEGMENT
??_C@_0EB@KOBDEFBC@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\peakpick.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CBPJJMML@pfMag?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0O@CBPJJMML@pfMag?5?$CB?$DN?5NULL?$AA@ DB 'pfMag != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NJKGAINH@piPeakFreq?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BD@NJKGAINH@piPeakFreq?5?$CB?$DN?5NULL?$AA@ DB 'piPeakFreq != NULL'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DPNEMBOK@piNPeaks?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BB@DPNEMBOK@piNPeaks?5?$CB?$DN?5NULL?$AA@ DB 'piNPeaks != NULL', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _PeakPick@24
_TEXT	SEGMENT
_iNPeaks$ = -8
_i$ = -4
_pfMag$ = 8
_iStart$ = 12
_iStop$ = 16
_iMaxPeaks$ = 20
_piPeakFreq$ = 24
_piNPeaks$ = 28
_PeakPick@24 PROC NEAR					; COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 51   :    int    i;
; 52   :    int    iNPeaks;
; 53   :   
; 54   :    assert( pfMag != NULL);

  00007	83 7d 08 00	 cmp	 DWORD PTR _pfMag$[ebp], 0
  0000b	75 14		 jne	 SHORT $L905
  0000d	6a 36		 push	 54			; 00000036H
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@KOBDEFBC@c?3?2xbox?2private?2windows?2directx?2@
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@CBPJJMML@pfMag?5?$CB?$DN?5NULL?$AA@
  00019	e8 00 00 00 00	 call	 __assert
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L905:

; 55   :    assert( piPeakFreq != NULL);

  00021	83 7d 18 00	 cmp	 DWORD PTR _piPeakFreq$[ebp], 0
  00025	75 14		 jne	 SHORT $L906
  00027	6a 37		 push	 55			; 00000037H
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@KOBDEFBC@c?3?2xbox?2private?2windows?2directx?2@
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@NJKGAINH@piPeakFreq?5?$CB?$DN?5NULL?$AA@
  00033	e8 00 00 00 00	 call	 __assert
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
$L906:

; 56   :    assert( piNPeaks != NULL);

  0003b	83 7d 1c 00	 cmp	 DWORD PTR _piNPeaks$[ebp], 0
  0003f	75 14		 jne	 SHORT $L907
  00041	6a 38		 push	 56			; 00000038H
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@KOBDEFBC@c?3?2xbox?2private?2windows?2directx?2@
  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@DPNEMBOK@piNPeaks?5?$CB?$DN?5NULL?$AA@
  0004d	e8 00 00 00 00	 call	 __assert
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
$L907:

; 57   : 
; 58   :    iNPeaks = 0;

  00055	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iNPeaks$[ebp], 0

; 59   :    i=iStart+1;

  0005c	8b 45 0c	 mov	 eax, DWORD PTR _iStart$[ebp]
  0005f	83 c0 01	 add	 eax, 1
  00062	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 60   :    iStop--;    /* the ending test index is 1 less than the end of the array */

  00065	8b 4d 10	 mov	 ecx, DWORD PTR _iStop$[ebp]
  00068	83 e9 01	 sub	 ecx, 1
  0006b	89 4d 10	 mov	 DWORD PTR _iStop$[ebp], ecx
$L890:

; 61   : 
; 62   :    while (i<iStop)

  0006e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00071	3b 55 10	 cmp	 edx, DWORD PTR _iStop$[ebp]
  00074	7d 6c		 jge	 SHORT $L891

; 63   :    {
; 64   :       /*----------------------------------------------------------
; 65   :         A peak is defined as:
; 66   : 
; 67   :            (pfMag[i]>=pfMag[i-1]) && (pfMag[i]>pfMag[i+1])
; 68   : 
; 69   :         (There are other valid ways to define a peak but this
; 70   :          one has been chosen.)
; 71   :       ----------------------------------------------------------*/
; 72   :       if ( (pfMag[i]>=pfMag[i-1]) && (pfMag[i]>pfMag[i+1]) )

  00076	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _pfMag$[ebp]
  0007c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0007f	8b 75 08	 mov	 esi, DWORD PTR _pfMag$[ebp]
  00082	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  00085	d8 5c 96 fc	 fcomp	 DWORD PTR [esi+edx*4-4]
  00089	df e0		 fnstsw	 ax
  0008b	f6 c4 01	 test	 ah, 1
  0008e	75 47		 jne	 SHORT $L892
  00090	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _pfMag$[ebp]
  00096	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00099	8b 75 08	 mov	 esi, DWORD PTR _pfMag$[ebp]
  0009c	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  0009f	d8 5c 96 04	 fcomp	 DWORD PTR [esi+edx*4+4]
  000a3	df e0		 fnstsw	 ax
  000a5	f6 c4 41	 test	 ah, 65			; 00000041H
  000a8	75 2d		 jne	 SHORT $L892

; 73   :       {
; 74   :          *piPeakFreq++ = i;

  000aa	8b 45 18	 mov	 eax, DWORD PTR _piPeakFreq$[ebp]
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000b0	89 08		 mov	 DWORD PTR [eax], ecx
  000b2	8b 55 18	 mov	 edx, DWORD PTR _piPeakFreq$[ebp]
  000b5	83 c2 04	 add	 edx, 4
  000b8	89 55 18	 mov	 DWORD PTR _piPeakFreq$[ebp], edx

; 75   :          i++;                     /* (adjacent peaks are not possible)   */

  000bb	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000be	83 c0 01	 add	 eax, 1
  000c1	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 76   :          iNPeaks++;

  000c4	8b 4d f8	 mov	 ecx, DWORD PTR _iNPeaks$[ebp]
  000c7	83 c1 01	 add	 ecx, 1
  000ca	89 4d f8	 mov	 DWORD PTR _iNPeaks$[ebp], ecx

; 77   :          if (iNPeaks==iMaxPeaks)  /* If the maximum number of peaks has   */

  000cd	8b 55 f8	 mov	 edx, DWORD PTR _iNPeaks$[ebp]
  000d0	3b 55 14	 cmp	 edx, DWORD PTR _iMaxPeaks$[ebp]
  000d3	75 02		 jne	 SHORT $L892

; 78   :            break;                 /*   been found, then stop the search.  */

  000d5	eb 0b		 jmp	 SHORT $L891
$L892:

; 79   :       }
; 80   :       i++;

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000da	83 c0 01	 add	 eax, 1
  000dd	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax

; 81   :    }

  000e0	eb 8c		 jmp	 SHORT $L890
$L891:

; 82   : 
; 83   :    *piNPeaks = iNPeaks;

  000e2	8b 4d 1c	 mov	 ecx, DWORD PTR _piNPeaks$[ebp]
  000e5	8b 55 f8	 mov	 edx, DWORD PTR _iNPeaks$[ebp]
  000e8	89 11		 mov	 DWORD PTR [ecx], edx

; 84   : }

  000ea	5e		 pop	 esi
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 18 00	 ret	 24			; 00000018H
_PeakPick@24 ENDP
_TEXT	ENDS
END
