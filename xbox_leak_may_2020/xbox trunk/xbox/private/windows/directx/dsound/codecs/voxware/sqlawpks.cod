; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\sqlawpks.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxSquareLawPeaks@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxSquareLawPeaks@28
PUBLIC	__real@3d4ccccd
EXTRN	__fltused:NEAR
;	COMDAT __real@3d4ccccd
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\sqlawpks.c
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxSquareLawPeaks@28
_TEXT	SEGMENT
tv139 = -28
tv82 = -24
tv65 = -20
_j$ = -16
_iNuPeakCount$ = -12
_iPks$ = -8
_k$ = -4
_pfFltAmp$ = 8
_pfPkFrq$ = 12
_iBasePeakCount$ = 16
_fLoBandEdge$ = 20
_pfNuAmp$ = 24
_pfNuFrq$ = 28
_piNuPeaks$ = 32
_VoxSquareLawPeaks@28 PROC NEAR				; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi

; 97   : 
; 98   :    int   j, k;
; 99   :    int   iPks;
; 100  :    int   iNuPeakCount;
; 101  : 
; 102  : 
; 103  :    /*-----------------------------------------------------------
; 104  :      Compute the square-law peaks.
; 105  :    -----------------------------------------------------------*/
; 106  :    iNuPeakCount = 0;

  00007	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iNuPeakCount$[ebp], 0

; 107  : 
; 108  :    /*-----------------------------------------------------------
; 109  :      Include the original peaks.
; 110  :    -----------------------------------------------------------*/
; 111  :    iPks = VoxMIN( iBasePeakCount, MAXHARM );

  0000e	83 7d 10 64	 cmp	 DWORD PTR _iBasePeakCount$[ebp], 100 ; 00000064H
  00012	7e 09		 jle	 SHORT $L999
  00014	c7 45 ec 64 00
	00 00		 mov	 DWORD PTR tv65[ebp], 100 ; 00000064H
  0001b	eb 06		 jmp	 SHORT $L1000
$L999:
  0001d	8b 45 10	 mov	 eax, DWORD PTR _iBasePeakCount$[ebp]
  00020	89 45 ec	 mov	 DWORD PTR tv65[ebp], eax
$L1000:
  00023	8b 4d ec	 mov	 ecx, DWORD PTR tv65[ebp]
  00026	89 4d f8	 mov	 DWORD PTR _iPks$[ebp], ecx

; 112  :    for (k = 0; k < iPks; k++)

  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0
  00030	eb 09		 jmp	 SHORT $L978
$L979:
  00032	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00035	83 c2 01	 add	 edx, 1
  00038	89 55 fc	 mov	 DWORD PTR _k$[ebp], edx
$L978:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  0003e	3b 45 f8	 cmp	 eax, DWORD PTR _iPks$[ebp]
  00041	7d 2f		 jge	 SHORT $L980

; 113  :    {
; 114  :       pfNuAmp[iNuPeakCount] = pfFltAmp[k];

  00043	8b 4d f4	 mov	 ecx, DWORD PTR _iNuPeakCount$[ebp]
  00046	8b 55 18	 mov	 edx, DWORD PTR _pfNuAmp$[ebp]
  00049	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  0004c	8b 75 08	 mov	 esi, DWORD PTR _pfFltAmp$[ebp]
  0004f	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]
  00052	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 115  :       pfNuFrq[iNuPeakCount] = pfPkFrq[k];

  00055	8b 4d f4	 mov	 ecx, DWORD PTR _iNuPeakCount$[ebp]
  00058	8b 55 1c	 mov	 edx, DWORD PTR _pfNuFrq$[ebp]
  0005b	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  0005e	8b 75 0c	 mov	 esi, DWORD PTR _pfPkFrq$[ebp]
  00061	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]
  00064	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 116  :       iNuPeakCount ++;

  00067	8b 4d f4	 mov	 ecx, DWORD PTR _iNuPeakCount$[ebp]
  0006a	83 c1 01	 add	 ecx, 1
  0006d	89 4d f4	 mov	 DWORD PTR _iNuPeakCount$[ebp], ecx

; 117  :    }

  00070	eb c0		 jmp	 SHORT $L979
$L980:

; 118  : 
; 119  :    /*-----------------------------------------------------------
; 120  :      Compute peaks from the first difference.
; 121  :    -----------------------------------------------------------*/
; 122  :    iPks = VoxMIN( iBasePeakCount-1, MAXHARM-iNuPeakCount );

  00072	8b 55 10	 mov	 edx, DWORD PTR _iBasePeakCount$[ebp]
  00075	83 ea 01	 sub	 edx, 1
  00078	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  0007d	2b 45 f4	 sub	 eax, DWORD PTR _iNuPeakCount$[ebp]
  00080	3b d0		 cmp	 edx, eax
  00082	7e 0d		 jle	 SHORT $L1001
  00084	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00089	2b 4d f4	 sub	 ecx, DWORD PTR _iNuPeakCount$[ebp]
  0008c	89 4d e8	 mov	 DWORD PTR tv82[ebp], ecx
  0008f	eb 09		 jmp	 SHORT $L1002
$L1001:
  00091	8b 55 10	 mov	 edx, DWORD PTR _iBasePeakCount$[ebp]
  00094	83 ea 01	 sub	 edx, 1
  00097	89 55 e8	 mov	 DWORD PTR tv82[ebp], edx
$L1002:
  0009a	8b 45 e8	 mov	 eax, DWORD PTR tv82[ebp]
  0009d	89 45 f8	 mov	 DWORD PTR _iPks$[ebp], eax

; 123  :    for (k = 0; k < iPks; k++)

  000a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0
  000a7	eb 09		 jmp	 SHORT $L981
$L982:
  000a9	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  000ac	83 c1 01	 add	 ecx, 1
  000af	89 4d fc	 mov	 DWORD PTR _k$[ebp], ecx
$L981:
  000b2	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  000b5	3b 55 f8	 cmp	 edx, DWORD PTR _iPks$[ebp]
  000b8	7d 43		 jge	 SHORT $L983

; 124  :    {
; 125  :       pfNuAmp[iNuPeakCount] = pfFltAmp[k+1] * pfFltAmp[k];

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  000bd	8b 4d 08	 mov	 ecx, DWORD PTR _pfFltAmp$[ebp]
  000c0	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  000c3	8b 75 08	 mov	 esi, DWORD PTR _pfFltAmp$[ebp]
  000c6	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  000ca	d8 0c 96	 fmul	 DWORD PTR [esi+edx*4]
  000cd	8b 45 f4	 mov	 eax, DWORD PTR _iNuPeakCount$[ebp]
  000d0	8b 4d 18	 mov	 ecx, DWORD PTR _pfNuAmp$[ebp]
  000d3	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 126  :       pfNuFrq[iNuPeakCount] = pfPkFrq[k+1]  - pfPkFrq[k];   

  000d6	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  000d9	8b 45 0c	 mov	 eax, DWORD PTR _pfPkFrq$[ebp]
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  000df	8b 75 0c	 mov	 esi, DWORD PTR _pfPkFrq$[ebp]
  000e2	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  000e6	d8 24 8e	 fsub	 DWORD PTR [esi+ecx*4]
  000e9	8b 55 f4	 mov	 edx, DWORD PTR _iNuPeakCount$[ebp]
  000ec	8b 45 1c	 mov	 eax, DWORD PTR _pfNuFrq$[ebp]
  000ef	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 127  :       iNuPeakCount ++;

  000f2	8b 4d f4	 mov	 ecx, DWORD PTR _iNuPeakCount$[ebp]
  000f5	83 c1 01	 add	 ecx, 1
  000f8	89 4d f4	 mov	 DWORD PTR _iNuPeakCount$[ebp], ecx

; 128  :    }

  000fb	eb ac		 jmp	 SHORT $L982
$L983:

; 129  : 
; 130  :    /*-----------------------------------------------------------
; 131  :      Compute peaks from the second difference.
; 132  :    -----------------------------------------------------------*/
; 133  :    iPks = VoxMIN( iBasePeakCount-2, MAXHARM-iNuPeakCount );

  000fd	8b 55 10	 mov	 edx, DWORD PTR _iBasePeakCount$[ebp]
  00100	83 ea 02	 sub	 edx, 2
  00103	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00108	2b 45 f4	 sub	 eax, DWORD PTR _iNuPeakCount$[ebp]
  0010b	3b d0		 cmp	 edx, eax
  0010d	7e 0d		 jle	 SHORT $L1003
  0010f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00114	2b 4d f4	 sub	 ecx, DWORD PTR _iNuPeakCount$[ebp]
  00117	89 4d e4	 mov	 DWORD PTR tv139[ebp], ecx
  0011a	eb 09		 jmp	 SHORT $L1004
$L1003:
  0011c	8b 55 10	 mov	 edx, DWORD PTR _iBasePeakCount$[ebp]
  0011f	83 ea 02	 sub	 edx, 2
  00122	89 55 e4	 mov	 DWORD PTR tv139[ebp], edx
$L1004:
  00125	8b 45 e4	 mov	 eax, DWORD PTR tv139[ebp]
  00128	89 45 f8	 mov	 DWORD PTR _iPks$[ebp], eax

; 134  :    for (k = 0; k < iPks; k++)

  0012b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0
  00132	eb 09		 jmp	 SHORT $L984
$L985:
  00134	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00137	83 c1 01	 add	 ecx, 1
  0013a	89 4d fc	 mov	 DWORD PTR _k$[ebp], ecx
$L984:
  0013d	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00140	3b 55 f8	 cmp	 edx, DWORD PTR _iPks$[ebp]
  00143	7d 43		 jge	 SHORT $L986

; 135  :    {
; 136  :       pfNuAmp[iNuPeakCount] = pfFltAmp[k+2] * pfFltAmp[k];

  00145	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00148	8b 4d 08	 mov	 ecx, DWORD PTR _pfFltAmp$[ebp]
  0014b	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0014e	8b 75 08	 mov	 esi, DWORD PTR _pfFltAmp$[ebp]
  00151	d9 44 81 08	 fld	 DWORD PTR [ecx+eax*4+8]
  00155	d8 0c 96	 fmul	 DWORD PTR [esi+edx*4]
  00158	8b 45 f4	 mov	 eax, DWORD PTR _iNuPeakCount$[ebp]
  0015b	8b 4d 18	 mov	 ecx, DWORD PTR _pfNuAmp$[ebp]
  0015e	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 137  :       pfNuFrq[iNuPeakCount] = pfPkFrq[k+2]  - pfPkFrq[k];   

  00161	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00164	8b 45 0c	 mov	 eax, DWORD PTR _pfPkFrq$[ebp]
  00167	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  0016a	8b 75 0c	 mov	 esi, DWORD PTR _pfPkFrq$[ebp]
  0016d	d9 44 90 08	 fld	 DWORD PTR [eax+edx*4+8]
  00171	d8 24 8e	 fsub	 DWORD PTR [esi+ecx*4]
  00174	8b 55 f4	 mov	 edx, DWORD PTR _iNuPeakCount$[ebp]
  00177	8b 45 1c	 mov	 eax, DWORD PTR _pfNuFrq$[ebp]
  0017a	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 138  :       iNuPeakCount ++;

  0017d	8b 4d f4	 mov	 ecx, DWORD PTR _iNuPeakCount$[ebp]
  00180	83 c1 01	 add	 ecx, 1
  00183	89 4d f4	 mov	 DWORD PTR _iNuPeakCount$[ebp], ecx

; 139  :    }

  00186	eb ac		 jmp	 SHORT $L985
$L986:

; 140  : 
; 141  :    *piNuPeaks = iNuPeakCount;

  00188	8b 55 20	 mov	 edx, DWORD PTR _piNuPeaks$[ebp]
  0018b	8b 45 f4	 mov	 eax, DWORD PTR _iNuPeakCount$[ebp]
  0018e	89 02		 mov	 DWORD PTR [edx], eax

; 142  : 
; 143  :    /*-----------------------------------------------------------
; 144  :      Delete low-level peaks if there are enough of them.
; 145  :    -----------------------------------------------------------*/
; 146  :    if (iNuPeakCount >= MIN_NU_PEAKCOUNT)

  00190	83 7d f4 0a	 cmp	 DWORD PTR _iNuPeakCount$[ebp], 10 ; 0000000aH
  00194	7c 6e		 jl	 SHORT $L973

; 147  :    {
; 148  :       j = 0;

  00196	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 149  :       for (k = 0; k < iNuPeakCount; k++)

  0019d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0
  001a4	eb 09		 jmp	 SHORT $L988
$L989:
  001a6	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  001a9	83 c1 01	 add	 ecx, 1
  001ac	89 4d fc	 mov	 DWORD PTR _k$[ebp], ecx
$L988:
  001af	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  001b2	3b 55 f4	 cmp	 edx, DWORD PTR _iNuPeakCount$[ebp]
  001b5	7d 45		 jge	 SHORT $L990

; 150  :       {
; 151  :          if (pfNuAmp[k] > MIN_NU_THRESHOLD)

  001b7	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  001ba	8b 4d 18	 mov	 ecx, DWORD PTR _pfNuAmp$[ebp]
  001bd	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  001c0	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3d4ccccd
  001c6	df e0		 fnstsw	 ax
  001c8	f6 c4 41	 test	 ah, 65			; 00000041H
  001cb	75 2d		 jne	 SHORT $L991

; 152  :          {
; 153  :             pfNuAmp[j] = pfNuAmp[k];

  001cd	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  001d0	8b 45 18	 mov	 eax, DWORD PTR _pfNuAmp$[ebp]
  001d3	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  001d6	8b 75 18	 mov	 esi, DWORD PTR _pfNuAmp$[ebp]
  001d9	8b 0c 8e	 mov	 ecx, DWORD PTR [esi+ecx*4]
  001dc	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 154  :             pfNuFrq[j] = pfNuFrq[k];

  001df	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  001e2	8b 45 1c	 mov	 eax, DWORD PTR _pfNuFrq$[ebp]
  001e5	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  001e8	8b 75 1c	 mov	 esi, DWORD PTR _pfNuFrq$[ebp]
  001eb	8b 0c 8e	 mov	 ecx, DWORD PTR [esi+ecx*4]
  001ee	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 155  :             j ++;

  001f1	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  001f4	83 c2 01	 add	 edx, 1
  001f7	89 55 f0	 mov	 DWORD PTR _j$[ebp], edx
$L991:

; 156  :          }
; 157  :       }

  001fa	eb aa		 jmp	 SHORT $L989
$L990:

; 158  :       *piNuPeaks = j;

  001fc	8b 45 20	 mov	 eax, DWORD PTR _piNuPeaks$[ebp]
  001ff	8b 4d f0	 mov	 ecx, DWORD PTR _j$[ebp]
  00202	89 08		 mov	 DWORD PTR [eax], ecx
$L973:

; 159  :    }
; 160  : 
; 161  : } /*VoxSquareLawPeaks()*/

  00204	5e		 pop	 esi
  00205	8b e5		 mov	 esp, ebp
  00207	5d		 pop	 ebp
  00208	c2 1c 00	 ret	 28			; 0000001cH
_VoxSquareLawPeaks@28 ENDP
_TEXT	ENDS
END
