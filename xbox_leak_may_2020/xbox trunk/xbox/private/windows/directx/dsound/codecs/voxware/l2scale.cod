; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\l2scale.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@CGMDCCBD@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03ILLMOALB@pfX?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@PGJPLPDI@iLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _L2Scale@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_L2Scale@12
PUBLIC	??_C@_0EA@CGMDCCBD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_03ILLMOALB@pfX?$AA@			; `string'
PUBLIC	??_C@_0N@PGJPLPDI@iLength?5?$DO?$DN?50?$AA@	; `string'
PUBLIC	__real@0000000000000000
EXTRN	__assert:NEAR
EXTRN	_sqrt:NEAR
EXTRN	_DotProd@12:NEAR
EXTRN	_ScaleVector@16:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0EA@CGMDCCBD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\l2scale.c
CONST	SEGMENT
??_C@_0EA@CGMDCCBD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\l2scale.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03ILLMOALB@pfX?$AA@
CONST	SEGMENT
??_C@_03ILLMOALB@pfX?$AA@ DB 'pfX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PGJPLPDI@iLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0N@PGJPLPDI@iLength?5?$DO?$DN?50?$AA@ DB 'iLength >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _L2Scale@12
_TEXT	SEGMENT
_fTemp$ = -4
_pfX$ = 8
_iLength$ = 12
_fEnergySqr$ = 16
_L2Scale@12 PROC NEAR					; COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 54   :   float fTemp;
; 55   : 
; 56   :   assert( pfX );

  00004	83 7d 08 00	 cmp	 DWORD PTR _pfX$[ebp], 0
  00008	75 14		 jne	 SHORT $L675
  0000a	6a 38		 push	 56			; 00000038H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@CGMDCCBD@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03ILLMOALB@pfX?$AA@
  00016	e8 00 00 00 00	 call	 __assert
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L675:

; 57   :   assert( iLength >= 0 );

  0001e	83 7d 0c 00	 cmp	 DWORD PTR _iLength$[ebp], 0
  00022	7d 14		 jge	 SHORT $L676
  00024	6a 39		 push	 57			; 00000039H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@CGMDCCBD@c?3?2xbox?2private?2windows?2directx?2@
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@PGJPLPDI@iLength?5?$DO?$DN?50?$AA@
  00030	e8 00 00 00 00	 call	 __assert
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
$L676:

; 58   : 
; 59   :   /*------------------------------------------------------
; 60   :     Compute the energy in the vector
; 61   :   ------------------------------------------------------*/
; 62   :   fTemp = DotProd(pfX, pfX, iLength);

  00038	8b 55 0c	 mov	 edx, DWORD PTR _iLength$[ebp]
  0003b	52		 push	 edx
  0003c	8b 45 08	 mov	 eax, DWORD PTR _pfX$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _pfX$[ebp]
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 _DotProd@12
  00049	d9 55 fc	 fst	 DWORD PTR _fTemp$[ebp]

; 63   : 
; 64   :   /*------------------------------------------------------
; 65   :     If the energy (fTemp) is non-zero then compute the 
; 66   :       scale factor and scale the vector, Otherwise,
; 67   :       avoid a divide by zero and don't scale.
; 68   :   ------------------------------------------------------*/
; 69   :   if (fTemp>0.0)

  0004c	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00052	df e0		 fnstsw	 ax
  00054	f6 c4 41	 test	 ah, 65			; 00000041H
  00057	75 2c		 jne	 SHORT $L656

; 70   :   {
; 71   :     fTemp=(float)(sqrt(fEnergySqr/fTemp));

  00059	d9 45 10	 fld	 DWORD PTR _fEnergySqr$[ebp]
  0005c	d8 75 fc	 fdiv	 DWORD PTR _fTemp$[ebp]
  0005f	83 ec 08	 sub	 esp, 8
  00062	dd 1c 24	 fstp	 QWORD PTR [esp]
  00065	e8 00 00 00 00	 call	 _sqrt
  0006a	83 c4 08	 add	 esp, 8
  0006d	d9 5d fc	 fstp	 DWORD PTR _fTemp$[ebp]

; 72   :     ScaleVector( pfX, iLength, fTemp, pfX );

  00070	8b 55 08	 mov	 edx, DWORD PTR _pfX$[ebp]
  00073	52		 push	 edx
  00074	8b 45 fc	 mov	 eax, DWORD PTR _fTemp$[ebp]
  00077	50		 push	 eax
  00078	8b 4d 0c	 mov	 ecx, DWORD PTR _iLength$[ebp]
  0007b	51		 push	 ecx
  0007c	8b 55 08	 mov	 edx, DWORD PTR _pfX$[ebp]
  0007f	52		 push	 edx
  00080	e8 00 00 00 00	 call	 _ScaleVector@16
$L656:

; 73   :   }
; 74   : }

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 0c 00	 ret	 12			; 0000000cH
_L2Scale@12 ENDP
_TEXT	ENDS
END
