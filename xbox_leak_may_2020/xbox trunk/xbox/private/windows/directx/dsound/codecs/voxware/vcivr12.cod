; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\vcivr12.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0M@FEJDCLLO@RT?403?401?400?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _vciGetInfoVR12@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vciEncodeVR12@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vciDecodeVR12@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vciInitEncodeVR12@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vciInitDecodeVR12@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vciFreeEncodeVR12@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vciFreeDecodeVR12@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DropFrames@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VR12CompatibilityFunc@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vciGetExtCompatibilityVR12@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _initMethodStruct@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _freeMethodStruct@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	__real@45fa0000
PUBLIC	__real@43340000
PUBLIC	_vciGetInfoVR12@4
PUBLIC	??_C@_0M@FEJDCLLO@RT?403?401?400?$AA@		; `string'
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
EXTRN	_strcpy:NEAR
;	COMDAT ??_C@_0M@FEJDCLLO@RT?403?401?400?$AA@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\vcivr12.c
CONST	SEGMENT
??_C@_0M@FEJDCLLO@RT?403?401?400?$AA@ DB 'RT.03.01.00', 00H ; `string'
CONST	ENDS
;	COMDAT __real@45fa0000
CONST	SEGMENT
__real@45fa0000 DD 045fa0000r			; 8000
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _vciGetInfoVR12@4
_TEXT	SEGMENT
_avebits$ = -4
_pvciCodecInfoBlk$ = 8
_vciGetInfoVR12@4 PROC NEAR				; COMDAT

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 95   :    float avebits;
; 96   : 
; 97   :    if(!pvciCodecInfoBlk)

  00004	83 7d 08 00	 cmp	 DWORD PTR _pvciCodecInfoBlk$[ebp], 0
  00008	75 09		 jne	 SHORT $L1946

; 98   :       return VCI_NULL_ARG;

  0000a	66 b8 1a 18	 mov	 ax, 6170		; 0000181aH
  0000e	e9 b5 00 00 00	 jmp	 $L1944
$L1946:

; 99   : 
; 100  :    pvciCodecInfoBlk->wVCIVersion               = (unsigned short) VCI_VERSION;

  00013	8b 45 08	 mov	 eax, DWORD PTR _pvciCodecInfoBlk$[ebp]
  00016	66 c7 00 04 00	 mov	 WORD PTR [eax], 4

; 101  :    
; 102  :    /* Variables for codec identification.     */
; 103  :    strcpy(pvciCodecInfoBlk->sCodecVersion,     "RT.03.01.00");         

  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@FEJDCLLO@RT?403?401?400?$AA@
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pvciCodecInfoBlk$[ebp]
  00023	83 c1 02	 add	 ecx, 2
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 _strcpy
  0002c	83 c4 08	 add	 esp, 8

; 104  :    pvciCodecInfoBlk->dwCodecClassID            = (unsigned long)  VOXWARE_CODEC_RT_8K_VR12;      

  0002f	8b 55 08	 mov	 edx, DWORD PTR _pvciCodecInfoBlk$[ebp]
  00032	c7 42 24 12 00
	00 01		 mov	 DWORD PTR [edx+36], 16777234 ; 01000012H

; 105  :    pvciCodecInfoBlk->dwCodecID                 = (unsigned long)  VOXWARE_CODEC_ID_RT_8K_VR12;

  00039	8b 45 08	 mov	 eax, DWORD PTR _pvciCodecInfoBlk$[ebp]
  0003c	c7 40 28 20 00
	00 01		 mov	 DWORD PTR [eax+40], 16777248 ; 01000020H

; 106  :    
; 107  :    /* PCM Data formats.                       */
; 108  :    pvciCodecInfoBlk->wSamplingRate             = (unsigned short) RATE8K;   

  00043	8b 4d 08	 mov	 ecx, DWORD PTR _pvciCodecInfoBlk$[ebp]
  00046	66 c7 41 2c 40
	1f		 mov	 WORD PTR [ecx+44], 8000	; 00001f40H

; 109  :    pvciCodecInfoBlk->wNumBitsPerSample         = 16; 

  0004c	8b 55 08	 mov	 edx, DWORD PTR _pvciCodecInfoBlk$[ebp]
  0004f	66 c7 42 2e 10
	00		 mov	 WORD PTR [edx+46], 16	; 00000010H

; 110  :    pvciCodecInfoBlk->wNumSamplesPerFrame       = (unsigned short) FRAME_LEN;

  00055	8b 45 08	 mov	 eax, DWORD PTR _pvciCodecInfoBlk$[ebp]
  00058	66 c7 40 30 b4
	00		 mov	 WORD PTR [eax+48], 180	; 000000b4H

; 111  :    
; 112  :    /* Multi-channel support.                  */
; 113  :    pvciCodecInfoBlk->wNumChannels              = 1;

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _pvciCodecInfoBlk$[ebp]
  00061	66 c7 41 32 01
	00		 mov	 WORD PTR [ecx+50], 1

; 114  :    pvciCodecInfoBlk->wInterleaveBlockSize      = 1;

  00067	8b 55 08	 mov	 edx, DWORD PTR _pvciCodecInfoBlk$[ebp]
  0006a	66 c7 42 34 01
	00		 mov	 WORD PTR [edx+52], 1

; 115  : 
; 116  :    /* Bitstream information.                  */
; 117  :    avebits =  (TOTAL_BITS_VR12_SILENCE*RATE_S + TOTAL_BITS_VR12_UNVOICED*RATE_UV 
; 118  :              + TOTAL_BITS_VR12_VOICED*RATE_V + TOTAL_BITS_VR12_MIXED*RATE_MIX);

  00070	c7 45 fc cd cc
	e2 41		 mov	 DWORD PTR _avebits$[ebp], 1105382605 ; 41e2cccdH

; 119  :    pvciCodecInfoBlk->dwBitRate                  = (unsigned long) (avebits*RATE8K/((float)FRAME_LEN));

  00077	d9 45 fc	 fld	 DWORD PTR _avebits$[ebp]
  0007a	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@45fa0000
  00080	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@43340000
  00086	e8 00 00 00 00	 call	 __ftol2
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _pvciCodecInfoBlk$[ebp]
  0008e	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 120  :    pvciCodecInfoBlk->dwMinPacketBits            = (unsigned long) TOTAL_BITS_VR12_SILENCE;

  00091	8b 55 08	 mov	 edx, DWORD PTR _pvciCodecInfoBlk$[ebp]
  00094	c7 42 3c 02 00
	00 00		 mov	 DWORD PTR [edx+60], 2

; 121  :    pvciCodecInfoBlk->dwAvgPacketBits            = (unsigned long) avebits;

  0009b	d9 45 fc	 fld	 DWORD PTR _avebits$[ebp]
  0009e	e8 00 00 00 00	 call	 __ftol2
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _pvciCodecInfoBlk$[ebp]
  000a6	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 122  :    pvciCodecInfoBlk->dwMaxPacketBits            = (unsigned long) TOTAL_BITS_VR12_MIXED;

  000a9	8b 55 08	 mov	 edx, DWORD PTR _pvciCodecInfoBlk$[ebp]
  000ac	c7 42 44 29 00
	00 00		 mov	 DWORD PTR [edx+68], 41	; 00000029H

; 123  : 
; 124  :    /* Prime Flush Information	*/
; 125  :    pvciCodecInfoBlk->wNumPrimeFlushFrames      = (unsigned short) PRIME_FLUSH_FRAME;

  000b3	8b 45 08	 mov	 eax, DWORD PTR _pvciCodecInfoBlk$[ebp]
  000b6	66 c7 40 48 02
	00		 mov	 WORD PTR [eax+72], 2

; 126  :    pvciCodecInfoBlk->wNumPrimeFlushSamples     = (unsigned short) PRIME_FLUSH_SAMP;    

  000bc	8b 4d 08	 mov	 ecx, DWORD PTR _pvciCodecInfoBlk$[ebp]
  000bf	66 c7 41 4a 5a
	00		 mov	 WORD PTR [ecx+74], 90	; 0000005aH

; 127  :    return(VCI_NO_ERROR);

  000c5	66 33 c0	 xor	 ax, ax
$L1944:

; 128  : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 04 00	 ret	 4
_vciGetInfoVR12@4 ENDP
_TEXT	ENDS
PUBLIC	_vciEncodeVR12@8
EXTRN	_VoxPackVR12@20:NEAR
EXTRN	_VoxQuanVR12@8:NEAR
EXTRN	_VoxEncodeRT@8:NEAR
; Function compile flags: /Odt
;	COMDAT _vciEncodeVR12@8
_TEXT	SEGMENT
_vciCodecMblk$ = -4
_hCodecMemBlk$ = 8
_hvciEncodeIOBlk$ = 12
_vciEncodeVR12@8 PROC NEAR				; COMDAT

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 142  :    VCI_CODEC_BLOCK *vciCodecMblk = NULL;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _vciCodecMblk$[ebp], 0

; 143  :    STACK_DECLARE
; 144  :    
; 145  :    /* First make sure that the handle passed is the correct one. */
; 146  :    if(!VCI_BLOCK_CHECK(hCodecMemBlk))

  0000b	83 7d 08 00	 cmp	 DWORD PTR _hCodecMemBlk$[ebp], 0
  0000f	74 0b		 je	 SHORT $L1969
  00011	8b 45 08	 mov	 eax, DWORD PTR _hCodecMemBlk$[ebp]
  00014	81 38 ce fa 00
	00		 cmp	 DWORD PTR [eax], 64206	; 0000faceH
  0001a	74 09		 je	 SHORT $L1968
$L1969:

; 147  :       return VCI_NOT_VCI_HANDLE;

  0001c	66 b8 d4 17	 mov	 ax, 6100		; 000017d4H
  00020	e9 04 01 00 00	 jmp	 $L1964
$L1968:

; 148  : 
; 149  :    if(!VCI_IS_ENCODE(hCodecMemBlk))

  00025	8b 4d 08	 mov	 ecx, DWORD PTR _hCodecMemBlk$[ebp]
  00028	0f b6 51 0c	 movzx	 edx, BYTE PTR [ecx+12]
  0002c	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  0002f	74 09		 je	 SHORT $L1971

; 150  :       return VCI_NOT_ENC_HANDLE;

  00031	66 b8 de 17	 mov	 ax, 6110		; 000017deH
  00035	e9 ef 00 00 00	 jmp	 $L1964
$L1971:

; 151  : 
; 152  :    VCI_IO_BLK_PARAM_CHECK(hvciEncodeIOBlk);

  0003a	83 7d 0c 00	 cmp	 DWORD PTR _hvciEncodeIOBlk$[ebp], 0
  0003e	75 09		 jne	 SHORT $L1972
  00040	66 b8 1a 18	 mov	 ax, 6170		; 0000181aH
  00044	e9 e0 00 00 00	 jmp	 $L1964
$L1972:
  00049	8b 45 0c	 mov	 eax, DWORD PTR _hvciEncodeIOBlk$[ebp]
  0004c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00050	75 09		 jne	 SHORT $L1973
  00052	66 b8 f2 17	 mov	 ax, 6130		; 000017f2H
  00056	e9 ce 00 00 00	 jmp	 $L1964
$L1973:
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciEncodeIOBlk$[ebp]
  0005e	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00061	75 09		 jne	 SHORT $L1974
  00063	66 b8 ed 17	 mov	 ax, 6125		; 000017edH
  00067	e9 bd 00 00 00	 jmp	 $L1964
$L1974:
  0006c	8b 55 0c	 mov	 edx, DWORD PTR _hvciEncodeIOBlk$[ebp]
  0006f	0f b7 42 0e	 movzx	 eax, WORD PTR [edx+14]
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciEncodeIOBlk$[ebp]
  00076	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  0007a	3b c2		 cmp	 eax, edx
  0007c	7c 09		 jl	 SHORT $L1975
  0007e	66 b8 01 18	 mov	 ax, 6145		; 00001801H
  00082	e9 a2 00 00 00	 jmp	 $L1964
$L1975:
  00087	8b 45 0c	 mov	 eax, DWORD PTR _hvciEncodeIOBlk$[ebp]
  0008a	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  0008e	8b 55 0c	 mov	 edx, DWORD PTR _hvciEncodeIOBlk$[ebp]
  00091	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  00095	3b c8		 cmp	 ecx, eax
  00097	7c 09		 jl	 SHORT $L1976
  00099	66 b8 06 18	 mov	 ax, 6150		; 00001806H
  0009d	e9 87 00 00 00	 jmp	 $L1964
$L1976:
  000a2	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciEncodeIOBlk$[ebp]
  000a5	0f b6 51 10	 movzx	 edx, BYTE PTR [ecx+16]
  000a9	83 fa 07	 cmp	 edx, 7
  000ac	7e 06		 jle	 SHORT $L1977
  000ae	66 b8 f7 17	 mov	 ax, 6135		; 000017f7H
  000b2	eb 75		 jmp	 SHORT $L1964
$L1977:
  000b4	8b 45 0c	 mov	 eax, DWORD PTR _hvciEncodeIOBlk$[ebp]
  000b7	0f b6 48 14	 movzx	 ecx, BYTE PTR [eax+20]
  000bb	83 f9 07	 cmp	 ecx, 7
  000be	7e 06		 jle	 SHORT $L1978
  000c0	66 b8 fc 17	 mov	 ax, 6140		; 000017fcH
  000c4	eb 63		 jmp	 SHORT $L1964
$L1978:

; 153  : 
; 154  :    vciCodecMblk = (VCI_CODEC_BLOCK *)hCodecMemBlk;

  000c6	8b 55 08	 mov	 edx, DWORD PTR _hCodecMemBlk$[ebp]
  000c9	89 55 fc	 mov	 DWORD PTR _vciCodecMblk$[ebp], edx

; 155  :    STACK_ASSIGN(vciCodecMblk->pScratchBlk)
; 156  :    
; 157  :    vciCodecMblk->pVciCodecIOBlock=hvciEncodeIOBlk;

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciEncodeIOBlk$[ebp]
  000d2	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 158  : 
; 159  :    VoxEncodeRT(STACK_S hvciEncodeIOBlk->pPCMBuffer,vciCodecMblk->hCodecMblk);

  000d5	8b 55 fc	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  000d8	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000db	50		 push	 eax
  000dc	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciEncodeIOBlk$[ebp]
  000df	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 _VoxEncodeRT@8

; 160  :    
; 161  :    VoxQuanVR12(vciCodecMblk->pQuanMemBlk, 
; 162  :              ((ENC_MEM_BLK *)(vciCodecMblk->hCodecMblk))->Param_mblk);

  000e7	8b 45 fc	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  000ea	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ed	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000f0	52		 push	 edx
  000f1	8b 45 fc	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  000f4	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 _VoxQuanVR12@8

; 163  : 
; 164  :    VoxPackVR12(vciCodecMblk->pQuanMemBlk, hvciEncodeIOBlk->pVoxBuffer, 
; 165  :       &(hvciEncodeIOBlk->wVoxBufferWriteByteOffset),
; 166  :       &(hvciEncodeIOBlk->chVoxBufferWriteBitOffset), 
; 167  :       hvciEncodeIOBlk->wVoxBufferSize);

  000fd	8b 55 0c	 mov	 edx, DWORD PTR _hvciEncodeIOBlk$[ebp]
  00100	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  00104	50		 push	 eax
  00105	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciEncodeIOBlk$[ebp]
  00108	83 c1 14	 add	 ecx, 20			; 00000014H
  0010b	51		 push	 ecx
  0010c	8b 55 0c	 mov	 edx, DWORD PTR _hvciEncodeIOBlk$[ebp]
  0010f	83 c2 12	 add	 edx, 18			; 00000012H
  00112	52		 push	 edx
  00113	8b 45 0c	 mov	 eax, DWORD PTR _hvciEncodeIOBlk$[ebp]
  00116	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00119	51		 push	 ecx
  0011a	8b 55 fc	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  0011d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 _VoxPackVR12@20

; 168  : 
; 169  :    return(VCI_NO_ERROR);

  00126	66 33 c0	 xor	 ax, ax
$L1964:

; 170  : }

  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 08 00	 ret	 8
_vciEncodeVR12@8 ENDP
_TEXT	ENDS
PUBLIC	_vciDecodeVR12@8
EXTRN	_VoxUnPackVR12@20:NEAR
EXTRN	_VoxUnQuanVR12@8:NEAR
EXTRN	_VoxDecodeRT@8:NEAR
EXTRN	_VoxFadeIO@8:NEAR
EXTRN	_framesInBufferVR12@8:NEAR
; Function compile flags: /Odt
;	COMDAT _vciDecodeVR12@8
_TEXT	SEGMENT
_pFadeBlk$ = -16
_vciCodecMblk$ = -12
_TempFrames$ = -8
_DecMemBlk$ = -4
_hCodecMemBlk$ = 8
_hvciDecodeIOBlk$ = 12
_vciDecodeVR12@8 PROC NEAR				; COMDAT

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 184  :    VCI_CODEC_BLOCK *vciCodecMblk = NULL;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vciCodecMblk$[ebp], 0

; 185  :    DEC_MEM_BLK     *DecMemBlk    = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _DecMemBlk$[ebp], 0

; 186  :    STACK_DECLARE
; 187  :    FadeIOstruct    *pFadeBlk     = NULL;

  00014	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pFadeBlk$[ebp], 0

; 188  :    unsigned short  TempFrames;
; 189  : 
; 190  :    /* First make sure that the handle passed is the correct one. */
; 191  :    if(!VCI_BLOCK_CHECK(hCodecMemBlk))

  0001b	83 7d 08 00	 cmp	 DWORD PTR _hCodecMemBlk$[ebp], 0
  0001f	74 0b		 je	 SHORT $L1995
  00021	8b 45 08	 mov	 eax, DWORD PTR _hCodecMemBlk$[ebp]
  00024	81 38 ce fa 00
	00		 cmp	 DWORD PTR [eax], 64206	; 0000faceH
  0002a	74 09		 je	 SHORT $L1994
$L1995:

; 192  :       return VCI_NOT_VCI_HANDLE;

  0002c	66 b8 d4 17	 mov	 ax, 6100		; 000017d4H
  00030	e9 c9 01 00 00	 jmp	 $L1985
$L1994:

; 193  : 
; 194  :    if(!VCI_IS_DECODE(hCodecMemBlk))

  00035	8b 4d 08	 mov	 ecx, DWORD PTR _hCodecMemBlk$[ebp]
  00038	0f b6 51 0c	 movzx	 edx, BYTE PTR [ecx+12]
  0003c	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  0003f	74 09		 je	 SHORT $L1997

; 195  :       return VCI_NOT_DEC_HANDLE;

  00041	66 b8 e3 17	 mov	 ax, 6115		; 000017e3H
  00045	e9 b4 01 00 00	 jmp	 $L1985
$L1997:

; 196  :    
; 197  :    VCI_IO_BLK_PARAM_CHECK(hvciDecodeIOBlk);

  0004a	83 7d 0c 00	 cmp	 DWORD PTR _hvciDecodeIOBlk$[ebp], 0
  0004e	75 09		 jne	 SHORT $L1998
  00050	66 b8 1a 18	 mov	 ax, 6170		; 0000181aH
  00054	e9 a5 01 00 00	 jmp	 $L1985
$L1998:
  00059	8b 45 0c	 mov	 eax, DWORD PTR _hvciDecodeIOBlk$[ebp]
  0005c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00060	75 09		 jne	 SHORT $L1999
  00062	66 b8 f2 17	 mov	 ax, 6130		; 000017f2H
  00066	e9 93 01 00 00	 jmp	 $L1985
$L1999:
  0006b	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  0006e	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00071	75 09		 jne	 SHORT $L2000
  00073	66 b8 ed 17	 mov	 ax, 6125		; 000017edH
  00077	e9 82 01 00 00	 jmp	 $L1985
$L2000:
  0007c	8b 55 0c	 mov	 edx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  0007f	0f b7 42 0e	 movzx	 eax, WORD PTR [edx+14]
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  00086	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  0008a	3b c2		 cmp	 eax, edx
  0008c	7c 09		 jl	 SHORT $L2001
  0008e	66 b8 01 18	 mov	 ax, 6145		; 00001801H
  00092	e9 67 01 00 00	 jmp	 $L1985
$L2001:
  00097	8b 45 0c	 mov	 eax, DWORD PTR _hvciDecodeIOBlk$[ebp]
  0009a	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  0009e	8b 55 0c	 mov	 edx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  000a1	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  000a5	3b c8		 cmp	 ecx, eax
  000a7	7c 09		 jl	 SHORT $L2002
  000a9	66 b8 06 18	 mov	 ax, 6150		; 00001806H
  000ad	e9 4c 01 00 00	 jmp	 $L1985
$L2002:
  000b2	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  000b5	0f b6 51 10	 movzx	 edx, BYTE PTR [ecx+16]
  000b9	83 fa 07	 cmp	 edx, 7
  000bc	7e 09		 jle	 SHORT $L2003
  000be	66 b8 f7 17	 mov	 ax, 6135		; 000017f7H
  000c2	e9 37 01 00 00	 jmp	 $L1985
$L2003:
  000c7	8b 45 0c	 mov	 eax, DWORD PTR _hvciDecodeIOBlk$[ebp]
  000ca	0f b6 48 14	 movzx	 ecx, BYTE PTR [eax+20]
  000ce	83 f9 07	 cmp	 ecx, 7
  000d1	7e 09		 jle	 SHORT $L2004
  000d3	66 b8 fc 17	 mov	 ax, 6140		; 000017fcH
  000d7	e9 22 01 00 00	 jmp	 $L1985
$L2004:

; 198  : 
; 199  :    vciCodecMblk = (VCI_CODEC_BLOCK *)hCodecMemBlk;

  000dc	8b 55 08	 mov	 edx, DWORD PTR _hCodecMemBlk$[ebp]
  000df	89 55 f4	 mov	 DWORD PTR _vciCodecMblk$[ebp], edx

; 200  :    DecMemBlk= ((DEC_MEM_BLK*)(vciCodecMblk->hCodecMblk));

  000e2	8b 45 f4	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  000e5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e8	89 4d fc	 mov	 DWORD PTR _DecMemBlk$[ebp], ecx

; 201  : 
; 202  :    pFadeBlk = (FadeIOstruct *)(DecMemBlk->pFadeIOMemBlk);

  000eb	8b 55 fc	 mov	 edx, DWORD PTR _DecMemBlk$[ebp]
  000ee	8b 02		 mov	 eax, DWORD PTR [edx]
  000f0	89 45 f0	 mov	 DWORD PTR _pFadeBlk$[ebp], eax

; 203  : 
; 204  :    STACK_ASSIGN(vciCodecMblk->pScratchBlk)
; 205  :    vciCodecMblk->pVciCodecIOBlock=hvciDecodeIOBlk;

  000f3	8b 4d f4	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  000f6	8b 55 0c	 mov	 edx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  000f9	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 206  : 
; 207  :   if((DecMemBlk->unpackFLAG==ON)&&(pFadeBlk->CurrentFrameState))

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _DecMemBlk$[ebp]
  000ff	0f b6 48 3d	 movzx	 ecx, BYTE PTR [eax+61]
  00103	83 f9 01	 cmp	 ecx, 1
  00106	75 51		 jne	 SHORT $L2008
  00108	8b 55 f0	 mov	 edx, DWORD PTR _pFadeBlk$[ebp]
  0010b	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0010e	85 c0		 test	 eax, eax
  00110	74 47		 je	 SHORT $L2008

; 208  :   {
; 209  :       framesInBufferVR12(hvciDecodeIOBlk, &TempFrames);

  00112	8d 4d f8	 lea	 ecx, DWORD PTR _TempFrames$[ebp]
  00115	51		 push	 ecx
  00116	8b 55 0c	 mov	 edx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  00119	52		 push	 edx
  0011a	e8 00 00 00 00	 call	 _framesInBufferVR12@8

; 210  :       if (TempFrames == 0)

  0011f	0f b7 45 f8	 movzx	 eax, WORD PTR _TempFrames$[ebp]
  00123	85 c0		 test	 eax, eax
  00125	75 09		 jne	 SHORT $L2009

; 211  :          return VCI_INSUFFICIENT_VOX_DATA;

  00127	66 b8 0b 18	 mov	 ax, 6155		; 0000180bH
  0012b	e9 ce 00 00 00	 jmp	 $L1985
$L2009:

; 212  : 
; 213  :        VoxUnPackVR12(vciCodecMblk->pQuanMemBlk, hvciDecodeIOBlk->pVoxBuffer, 
; 214  :           &(hvciDecodeIOBlk->wVoxBufferReadByteOffset), 
; 215  :           &(hvciDecodeIOBlk->chVoxBufferReadBitOffset), 
; 216  :           hvciDecodeIOBlk->wVoxBufferSize);

  00130	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  00133	66 8b 51 0c	 mov	 dx, WORD PTR [ecx+12]
  00137	52		 push	 edx
  00138	8b 45 0c	 mov	 eax, DWORD PTR _hvciDecodeIOBlk$[ebp]
  0013b	83 c0 10	 add	 eax, 16			; 00000010H
  0013e	50		 push	 eax
  0013f	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  00142	83 c1 0e	 add	 ecx, 14			; 0000000eH
  00145	51		 push	 ecx
  00146	8b 55 0c	 mov	 edx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  00149	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0014c	50		 push	 eax
  0014d	8b 4d f4	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  00150	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00153	52		 push	 edx
  00154	e8 00 00 00 00	 call	 _VoxUnPackVR12@20
$L2008:

; 217  :   }
; 218  : 
; 219  :   if (!DropFrames(DecMemBlk->fWarpedLengthFactor,&DecMemBlk->Warp,&DecMemBlk->dropLeft)) {

  00159	8b 45 fc	 mov	 eax, DWORD PTR _DecMemBlk$[ebp]
  0015c	83 c0 32	 add	 eax, 50			; 00000032H
  0015f	50		 push	 eax
  00160	8b 4d fc	 mov	 ecx, DWORD PTR _DecMemBlk$[ebp]
  00163	83 c1 38	 add	 ecx, 56			; 00000038H
  00166	51		 push	 ecx
  00167	8b 55 fc	 mov	 edx, DWORD PTR _DecMemBlk$[ebp]
  0016a	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 _DropFrames@12
  00173	0f bf c8	 movsx	 ecx, ax
  00176	85 c9		 test	 ecx, ecx
  00178	75 71		 jne	 SHORT $L2010

; 220  :      VoxUnQuanVR12(vciCodecMblk->pQuanMemBlk, DecMemBlk->Param_mblk);

  0017a	8b 55 fc	 mov	 edx, DWORD PTR _DecMemBlk$[ebp]
  0017d	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00180	50		 push	 eax
  00181	8b 4d f4	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  00184	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00187	52		 push	 edx
  00188	e8 00 00 00 00	 call	 _VoxUnQuanVR12@8

; 221  : 
; 222  :      VoxFadeIO(pFadeBlk, DecMemBlk->Param_mblk);

  0018d	8b 45 fc	 mov	 eax, DWORD PTR _DecMemBlk$[ebp]
  00190	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00193	51		 push	 ecx
  00194	8b 55 f0	 mov	 edx, DWORD PTR _pFadeBlk$[ebp]
  00197	52		 push	 edx
  00198	e8 00 00 00 00	 call	 _VoxFadeIO@8

; 223  : 
; 224  :      VoxDecodeRT(STACK_S hvciDecodeIOBlk->pPCMBuffer,DecMemBlk);

  0019d	8b 45 fc	 mov	 eax, DWORD PTR _DecMemBlk$[ebp]
  001a0	50		 push	 eax
  001a1	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  001a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001a6	52		 push	 edx
  001a7	e8 00 00 00 00	 call	 _VoxDecodeRT@8

; 225  : 
; 226  :      if (!DecMemBlk->unpackFLAG) {

  001ac	8b 45 fc	 mov	 eax, DWORD PTR _DecMemBlk$[ebp]
  001af	0f b6 48 3d	 movzx	 ecx, BYTE PTR [eax+61]
  001b3	85 c9		 test	 ecx, ecx
  001b5	75 13		 jne	 SHORT $L2011

; 227  :        if (pFadeBlk->LastFrameState == SILENCE)

  001b7	8b 55 f0	 mov	 edx, DWORD PTR _pFadeBlk$[ebp]
  001ba	0f bf 42 02	 movsx	 eax, WORD PTR [edx+2]
  001be	85 c0		 test	 eax, eax
  001c0	75 08		 jne	 SHORT $L2011

; 228  : 	 pFadeBlk->CurrentFrameState = SILENCE;

  001c2	8b 4d f0	 mov	 ecx, DWORD PTR _pFadeBlk$[ebp]
  001c5	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0
$L2011:

; 229  :      }
; 230  : 
; 231  :      if(DecMemBlk->writeFLAG) 

  001ca	8b 55 fc	 mov	 edx, DWORD PTR _DecMemBlk$[ebp]
  001cd	0f b6 42 3c	 movzx	 eax, BYTE PTR [edx+60]
  001d1	85 c0		 test	 eax, eax
  001d3	74 0b		 je	 SHORT $L2013

; 232  :         hvciDecodeIOBlk->wSamplesInPCMBuffer = FRAME_LEN;

  001d5	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  001d8	66 c7 41 04 b4
	00		 mov	 WORD PTR [ecx+4], 180	; 000000b4H

; 233  :      else  

  001de	eb 09		 jmp	 SHORT $L2014
$L2013:

; 234  :         hvciDecodeIOBlk->wSamplesInPCMBuffer = 0;

  001e0	8b 55 0c	 mov	 edx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  001e3	66 c7 42 04 00
	00		 mov	 WORD PTR [edx+4], 0
$L2014:

; 235  :       
; 236  :   } else {

  001e9	eb 10		 jmp	 SHORT $L2015
$L2010:

; 237  :      DecMemBlk->writeFLAG=0;

  001eb	8b 45 fc	 mov	 eax, DWORD PTR _DecMemBlk$[ebp]
  001ee	c6 40 3c 00	 mov	 BYTE PTR [eax+60], 0

; 238  :      hvciDecodeIOBlk->wSamplesInPCMBuffer = 0;

  001f2	8b 4d 0c	 mov	 ecx, DWORD PTR _hvciDecodeIOBlk$[ebp]
  001f5	66 c7 41 04 00
	00		 mov	 WORD PTR [ecx+4], 0
$L2015:

; 239  :   } 
; 240  : 
; 241  :   return(VCI_NO_ERROR);

  001fb	66 33 c0	 xor	 ax, ax
$L1985:

; 242  : }

  001fe	8b e5		 mov	 esp, ebp
  00200	5d		 pop	 ebp
  00201	c2 08 00	 ret	 8
_vciDecodeVR12@8 ENDP
_TEXT	ENDS
PUBLIC	_vciInitEncodeVR12@4
PUBLIC	_vciFreeEncodeVR12@4
EXTRN	_vemInit@0:NEAR
EXTRN	_VoxInitQuanVR12@8:NEAR
EXTRN	_calloc:NEAR
EXTRN	_VoxInitEncodeRT@8:NEAR
; Function compile flags: /Odt
;	COMDAT _vciInitEncodeVR12@4
_TEXT	SEGMENT
_vciCodecMblk$ = -4
_hCodecMemBlk$ = 8
_vciInitEncodeVR12@4 PROC NEAR				; COMDAT

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 256  :    VCI_CODEC_BLOCK *vciCodecMblk;
; 257  :    STACK_DECLARE
; 258  : 
; 259  :    if(!hCodecMemBlk)

  00004	83 7d 08 00	 cmp	 DWORD PTR _hCodecMemBlk$[ebp], 0
  00008	75 09		 jne	 SHORT $L2020

; 260  :       return VCI_NULL_ARG;

  0000a	66 b8 1a 18	 mov	 ax, 6170		; 0000181aH
  0000e	e9 ec 00 00 00	 jmp	 $L2018
$L2020:

; 261  : 
; 262  :    if(VOX_MEM_INIT(vciCodecMblk=*hCodecMemBlk,1,sizeof(VCI_CODEC_BLOCK))) 

  00013	6a 2c		 push	 44			; 0000002cH
  00015	6a 01		 push	 1
  00017	e8 00 00 00 00	 call	 _calloc
  0001c	83 c4 08	 add	 esp, 8
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _hCodecMemBlk$[ebp]
  00022	89 01		 mov	 DWORD PTR [ecx], eax
  00024	8b 55 08	 mov	 edx, DWORD PTR _hCodecMemBlk$[ebp]
  00027	8b 02		 mov	 eax, DWORD PTR [edx]
  00029	89 45 fc	 mov	 DWORD PTR _vciCodecMblk$[ebp], eax
  0002c	83 7d fc 00	 cmp	 DWORD PTR _vciCodecMblk$[ebp], 0
  00030	75 09		 jne	 SHORT $L2022

; 263  :      return VCI_FAILED_MEM_ALLOC;

  00032	66 b8 70 17	 mov	 ax, 6000		; 00001770H
  00036	e9 c4 00 00 00	 jmp	 $L2018
$L2022:

; 264  : 
; 265  :    vciCodecMblk->chEncOrDec = ENCODE_ID;

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  0003e	c6 41 0c 0a	 mov	 BYTE PTR [ecx+12], 10	; 0000000aH

; 266  :    vciCodecMblk->dwVciChunkID = SANITY_CHECK;

  00042	8b 55 fc	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  00045	c7 02 ce fa 00
	00		 mov	 DWORD PTR [edx], 64206	; 0000faceH

; 267  :    vciCodecMblk->dwCodecClassID = VOXWARE_CODEC_RT_8K_VR12;  

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  0004e	c7 40 04 12 00
	00 01		 mov	 DWORD PTR [eax+4], 16777234 ; 01000012H

; 268  :    vciCodecMblk->dwCodecID = VOXWARE_CODEC_ID_RT_8K_VR12; 

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  00058	c7 41 08 20 00
	00 01		 mov	 DWORD PTR [ecx+8], 16777248 ; 01000020H

; 269  : 
; 270  :    if(!(vciCodecMblk->pvemMemBlk=vemInit())) {

  0005f	e8 00 00 00 00	 call	 _vemInit@0
  00064	8b 55 fc	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  00067	89 42 18	 mov	 DWORD PTR [edx+24], eax
  0006a	8b 45 fc	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  0006d	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00071	75 09		 jne	 SHORT $L2023

; 271  : #if VEM_DEFINED == 1
; 272  :       return VCI_FAILED_MEM_ALLOC;

  00073	66 b8 70 17	 mov	 ax, 6000		; 00001770H
  00077	e9 83 00 00 00	 jmp	 $L2018
$L2023:

; 273  : #endif
; 274  :    }
; 275  : 
; 276  :    if(VoxInitEncodeRT(&vciCodecMblk->hCodecMblk,vciCodecMblk->pvemMemBlk)) {

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  0007f	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00082	52		 push	 edx
  00083	8b 45 fc	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  00086	83 c0 10	 add	 eax, 16			; 00000010H
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _VoxInitEncodeRT@8
  0008f	0f b7 c8	 movzx	 ecx, ax
  00092	85 c9		 test	 ecx, ecx
  00094	74 0f		 je	 SHORT $L2024

; 277  :       vciFreeEncodeVR12(hCodecMemBlk);

  00096	8b 55 08	 mov	 edx, DWORD PTR _hCodecMemBlk$[ebp]
  00099	52		 push	 edx
  0009a	e8 00 00 00 00	 call	 _vciFreeEncodeVR12@4

; 278  :       return VCI_FAILED_MEM_ALLOC;

  0009f	66 b8 70 17	 mov	 ax, 6000		; 00001770H
  000a3	eb 5a		 jmp	 SHORT $L2018
$L2024:

; 279  :    }
; 280  : 
; 281  :    if(VoxInitQuanVR12(&vciCodecMblk->pQuanMemBlk, vciCodecMblk->pvemMemBlk)) {

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  000a8	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ab	51		 push	 ecx
  000ac	8b 55 fc	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  000af	83 c2 14	 add	 edx, 20			; 00000014H
  000b2	52		 push	 edx
  000b3	e8 00 00 00 00	 call	 _VoxInitQuanVR12@8
  000b8	0f b7 c0	 movzx	 eax, ax
  000bb	85 c0		 test	 eax, eax
  000bd	74 0f		 je	 SHORT $L2025

; 282  :       vciFreeEncodeVR12(hCodecMemBlk);

  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _hCodecMemBlk$[ebp]
  000c2	51		 push	 ecx
  000c3	e8 00 00 00 00	 call	 _vciFreeEncodeVR12@4

; 283  :       return VCI_FAILED_MEM_ALLOC;

  000c8	66 b8 70 17	 mov	 ax, 6000		; 00001770H
  000cc	eb 31		 jmp	 SHORT $L2018
$L2025:

; 284  :    }
; 285  : 
; 286  :    if(STACK_SET(vciCodecMblk->pScratchBlk,10240)) {

  000ce	33 d2		 xor	 edx, edx
  000d0	85 d2		 test	 edx, edx
  000d2	74 0f		 je	 SHORT $L2026

; 287  :       vciFreeEncodeVR12(hCodecMemBlk);

  000d4	8b 45 08	 mov	 eax, DWORD PTR _hCodecMemBlk$[ebp]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _vciFreeEncodeVR12@4

; 288  :       return VCI_FAILED_MEM_ALLOC;

  000dd	66 b8 70 17	 mov	 ax, 6000		; 00001770H
  000e1	eb 1c		 jmp	 SHORT $L2018
$L2026:

; 289  :    }
; 290  : 
; 291  :    if(initMethodStruct(&vciCodecMblk->pVciMethodStruct))

  000e3	8b 4d fc	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  000e6	83 c1 24	 add	 ecx, 36			; 00000024H
  000e9	51		 push	 ecx
  000ea	e8 00 00 00 00	 call	 _initMethodStruct@4
  000ef	0f b7 d0	 movzx	 edx, ax
  000f2	85 d2		 test	 edx, edx
  000f4	74 06		 je	 SHORT $L2027

; 292  :       return VCI_FAILED_MEM_ALLOC;

  000f6	66 b8 70 17	 mov	 ax, 6000		; 00001770H
  000fa	eb 03		 jmp	 SHORT $L2018
$L2027:

; 293  : 
; 294  :    return VCI_NO_ERROR;

  000fc	66 33 c0	 xor	 ax, ax
$L2018:

; 295  : }

  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 04 00	 ret	 4
_vciInitEncodeVR12@4 ENDP
_TEXT	ENDS
PUBLIC	_vciInitDecodeVR12@4
PUBLIC	_vciFreeDecodeVR12@4
EXTRN	_VoxInitDecodeRT@8:NEAR
EXTRN	_VoxinitFadeIO@4:NEAR
; Function compile flags: /Odt
;	COMDAT _vciInitDecodeVR12@4
_TEXT	SEGMENT
_vciCodecMblk$ = -8
_DecMemBlk$ = -4
_hCodecMemBlk$ = 8
_vciInitDecodeVR12@4 PROC NEAR				; COMDAT

; 308  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 309  :    VCI_CODEC_BLOCK *vciCodecMblk;
; 310  :    DEC_MEM_BLK     *DecMemBlk = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _DecMemBlk$[ebp], 0

; 311  : 
; 312  :    STACK_DECLARE
; 313  : 
; 314  :    if(!hCodecMemBlk)

  0000d	83 7d 08 00	 cmp	 DWORD PTR _hCodecMemBlk$[ebp], 0
  00011	75 09		 jne	 SHORT $L2034

; 315  :       return VCI_NULL_ARG;

  00013	66 b8 1a 18	 mov	 ax, 6170		; 0000181aH
  00017	e9 60 01 00 00	 jmp	 $L2030
$L2034:

; 316  : 
; 317  :    if(VOX_MEM_INIT(vciCodecMblk=*hCodecMemBlk,1,sizeof(VCI_CODEC_BLOCK))) 

  0001c	6a 2c		 push	 44			; 0000002cH
  0001e	6a 01		 push	 1
  00020	e8 00 00 00 00	 call	 _calloc
  00025	83 c4 08	 add	 esp, 8
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _hCodecMemBlk$[ebp]
  0002b	89 01		 mov	 DWORD PTR [ecx], eax
  0002d	8b 55 08	 mov	 edx, DWORD PTR _hCodecMemBlk$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	89 45 f8	 mov	 DWORD PTR _vciCodecMblk$[ebp], eax
  00035	83 7d f8 00	 cmp	 DWORD PTR _vciCodecMblk$[ebp], 0
  00039	75 09		 jne	 SHORT $L2036

; 318  :       return VCI_FAILED_MEM_ALLOC;

  0003b	66 b8 70 17	 mov	 ax, 6000		; 00001770H
  0003f	e9 38 01 00 00	 jmp	 $L2030
$L2036:

; 319  : 
; 320  :    vciCodecMblk->chEncOrDec = DECODE_ID;

  00044	8b 4d f8	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  00047	c6 41 0c 0b	 mov	 BYTE PTR [ecx+12], 11	; 0000000bH

; 321  :    vciCodecMblk->dwVciChunkID = SANITY_CHECK;

  0004b	8b 55 f8	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  0004e	c7 02 ce fa 00
	00		 mov	 DWORD PTR [edx], 64206	; 0000faceH

; 322  :    vciCodecMblk->dwCodecClassID = VOXWARE_CODEC_RT_8K_VR12;  

  00054	8b 45 f8	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  00057	c7 40 04 12 00
	00 01		 mov	 DWORD PTR [eax+4], 16777234 ; 01000012H

; 323  :    vciCodecMblk->dwCodecID = VOXWARE_CODEC_ID_RT_8K_VR12; 

  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  00061	c7 41 08 20 00
	00 01		 mov	 DWORD PTR [ecx+8], 16777248 ; 01000020H

; 324  : 
; 325  :    if(!(vciCodecMblk->pvemMemBlk=vemInit())) {

  00068	e8 00 00 00 00	 call	 _vemInit@0
  0006d	8b 55 f8	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  00070	89 42 18	 mov	 DWORD PTR [edx+24], eax
  00073	8b 45 f8	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  00076	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0007a	75 09		 jne	 SHORT $L2037

; 326  : #if VEM_DEFINED == 1
; 327  :       return VCI_FAILED_MEM_ALLOC;

  0007c	66 b8 70 17	 mov	 ax, 6000		; 00001770H
  00080	e9 f7 00 00 00	 jmp	 $L2030
$L2037:

; 328  : #endif
; 329  :    }
; 330  : 
; 331  :    if(VoxInitDecodeRT(&vciCodecMblk->hCodecMblk,vciCodecMblk->pvemMemBlk)) {

  00085	8b 4d f8	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  00088	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0008b	52		 push	 edx
  0008c	8b 45 f8	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  0008f	83 c0 10	 add	 eax, 16			; 00000010H
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _VoxInitDecodeRT@8
  00098	0f b7 c8	 movzx	 ecx, ax
  0009b	85 c9		 test	 ecx, ecx
  0009d	74 12		 je	 SHORT $L2038

; 332  :       vciFreeDecodeVR12(hCodecMemBlk);

  0009f	8b 55 08	 mov	 edx, DWORD PTR _hCodecMemBlk$[ebp]
  000a2	52		 push	 edx
  000a3	e8 00 00 00 00	 call	 _vciFreeDecodeVR12@4

; 333  :       return VCI_FAILED_MEM_ALLOC;

  000a8	66 b8 70 17	 mov	 ax, 6000		; 00001770H
  000ac	e9 cb 00 00 00	 jmp	 $L2030
$L2038:

; 334  :    } 
; 335  : 
; 336  :    if(VoxInitQuanVR12(&vciCodecMblk->pQuanMemBlk, vciCodecMblk->pvemMemBlk)) {     

  000b1	8b 45 f8	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  000b4	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000b7	51		 push	 ecx
  000b8	8b 55 f8	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  000bb	83 c2 14	 add	 edx, 20			; 00000014H
  000be	52		 push	 edx
  000bf	e8 00 00 00 00	 call	 _VoxInitQuanVR12@8
  000c4	0f b7 c0	 movzx	 eax, ax
  000c7	85 c0		 test	 eax, eax
  000c9	74 12		 je	 SHORT $L2039

; 337  :       vciFreeDecodeVR12(hCodecMemBlk);

  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _hCodecMemBlk$[ebp]
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 _vciFreeDecodeVR12@4

; 338  :       return VCI_FAILED_MEM_ALLOC;

  000d4	66 b8 70 17	 mov	 ax, 6000		; 00001770H
  000d8	e9 9f 00 00 00	 jmp	 $L2030
$L2039:

; 339  :    } 
; 340  : 
; 341  :    DecMemBlk = (DEC_MEM_BLK *)vciCodecMblk->hCodecMblk;

  000dd	8b 55 f8	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  000e0	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000e3	89 45 fc	 mov	 DWORD PTR _DecMemBlk$[ebp], eax

; 342  :    if (VoxinitFadeIO(&DecMemBlk->pFadeIOMemBlk)) {

  000e6	8b 4d fc	 mov	 ecx, DWORD PTR _DecMemBlk$[ebp]
  000e9	51		 push	 ecx
  000ea	e8 00 00 00 00	 call	 _VoxinitFadeIO@4
  000ef	0f b7 d0	 movzx	 edx, ax
  000f2	85 d2		 test	 edx, edx
  000f4	74 0f		 je	 SHORT $L2041

; 343  :       vciFreeDecodeVR12(hCodecMemBlk);

  000f6	8b 45 08	 mov	 eax, DWORD PTR _hCodecMemBlk$[ebp]
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 _vciFreeDecodeVR12@4

; 344  :       return VCI_FAILED_MEM_ALLOC;

  000ff	66 b8 70 17	 mov	 ax, 6000		; 00001770H
  00103	eb 77		 jmp	 SHORT $L2030
$L2041:

; 345  :    }
; 346  : 
; 347  :    if(STACK_SET(vciCodecMblk->pScratchBlk,4096)) {

  00105	33 c9		 xor	 ecx, ecx
  00107	85 c9		 test	 ecx, ecx
  00109	74 0f		 je	 SHORT $L2042

; 348  :       vciFreeDecodeVR12(hCodecMemBlk);

  0010b	8b 55 08	 mov	 edx, DWORD PTR _hCodecMemBlk$[ebp]
  0010e	52		 push	 edx
  0010f	e8 00 00 00 00	 call	 _vciFreeDecodeVR12@4

; 349  :       return VCI_FAILED_MEM_ALLOC;

  00114	66 b8 70 17	 mov	 ax, 6000		; 00001770H
  00118	eb 62		 jmp	 SHORT $L2030
$L2042:

; 350  :    } 
; 351  : 
; 352  :    if(initMethodStruct(&vciCodecMblk->pVciMethodStruct))

  0011a	8b 45 f8	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  0011d	83 c0 24	 add	 eax, 36			; 00000024H
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 _initMethodStruct@4
  00126	0f b7 c8	 movzx	 ecx, ax
  00129	85 c9		 test	 ecx, ecx
  0012b	74 06		 je	 SHORT $L2043

; 353  :       return VCI_FAILED_MEM_ALLOC;

  0012d	66 b8 70 17	 mov	 ax, 6000		; 00001770H
  00131	eb 49		 jmp	 SHORT $L2030
$L2043:

; 354  : 
; 355  :    ((DEC_MEM_BLK*)vciCodecMblk->hCodecMblk)->fWarpedLengthFactor=1.0F;

  00133	8b 55 f8	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  00136	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00139	c7 40 2c 00 00
	80 3f		 mov	 DWORD PTR [eax+44], 1065353216 ; 3f800000H

; 356  :    ((DEC_MEM_BLK*)vciCodecMblk->hCodecMblk)->Warp=1.0F;

  00140	8b 4d f8	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  00143	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00146	c7 42 38 00 00
	80 3f		 mov	 DWORD PTR [edx+56], 1065353216 ; 3f800000H

; 357  :    ((DEC_MEM_BLK*)vciCodecMblk->hCodecMblk)->dropRate=1;

  0014d	8b 45 f8	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  00150	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00153	66 c7 41 34 01
	00		 mov	 WORD PTR [ecx+52], 1

; 358  :    ((DEC_MEM_BLK*)vciCodecMblk->hCodecMblk)->writeFLAG=1;

  00159	8b 55 f8	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  0015c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0015f	c6 40 3c 01	 mov	 BYTE PTR [eax+60], 1

; 359  :    ((DEC_MEM_BLK*)vciCodecMblk->hCodecMblk)->unpackFLAG=1;

  00163	8b 4d f8	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  00166	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00169	c6 42 3d 01	 mov	 BYTE PTR [edx+61], 1

; 360  :    ((DEC_MEM_BLK*)vciCodecMblk->hCodecMblk)->dropLeft=0;

  0016d	8b 45 f8	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  00170	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00173	66 c7 41 32 00
	00		 mov	 WORD PTR [ecx+50], 0

; 361  : 
; 362  :    return VCI_NO_ERROR;

  00179	66 33 c0	 xor	 ax, ax
$L2030:

; 363  : }

  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c2 04 00	 ret	 4
_vciInitDecodeVR12@4 ENDP
_TEXT	ENDS
EXTRN	_vemFree@4:NEAR
EXTRN	_VoxFreeQuanVR12@4:NEAR
EXTRN	_free:NEAR
EXTRN	_VoxFreeEncodeRT@4:NEAR
; Function compile flags: /Odt
;	COMDAT _vciFreeEncodeVR12@4
_TEXT	SEGMENT
_vciCodecMblk$ = -4
_hCodecMemBlk$ = 8
_vciFreeEncodeVR12@4 PROC NEAR				; COMDAT

; 376  : {  

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 377  :    VCI_CODEC_BLOCK *vciCodecMblk   = NULL;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _vciCodecMblk$[ebp], 0

; 378  : 
; 379  :    if(!hCodecMemBlk)

  0000b	83 7d 08 00	 cmp	 DWORD PTR _hCodecMemBlk$[ebp], 0
  0000f	75 09		 jne	 SHORT $L2055

; 380  :       return VCI_NULL_ARG;

  00011	66 b8 1a 18	 mov	 ax, 6170		; 0000181aH
  00015	e9 c3 00 00 00	 jmp	 $L2052
$L2055:

; 381  : 
; 382  :    /* First make sure that the handle passed is the correct one. */
; 383  :    if(!VCI_BLOCK_CHECK(*hCodecMemBlk))

  0001a	8b 45 08	 mov	 eax, DWORD PTR _hCodecMemBlk$[ebp]
  0001d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00020	74 0d		 je	 SHORT $L2058
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _hCodecMemBlk$[ebp]
  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	81 3a ce fa 00
	00		 cmp	 DWORD PTR [edx], 64206	; 0000faceH
  0002d	74 09		 je	 SHORT $L2057
$L2058:

; 384  :       return VCI_NOT_VCI_HANDLE;

  0002f	66 b8 d4 17	 mov	 ax, 6100		; 000017d4H
  00033	e9 a5 00 00 00	 jmp	 $L2052
$L2057:

; 385  : 
; 386  :    if(!VCI_IS_ENCODE(*hCodecMemBlk))

  00038	8b 45 08	 mov	 eax, DWORD PTR _hCodecMemBlk$[ebp]
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	0f b6 51 0c	 movzx	 edx, BYTE PTR [ecx+12]
  00041	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00044	74 09		 je	 SHORT $L2060

; 387  :       return VCI_NOT_ENC_HANDLE;

  00046	66 b8 de 17	 mov	 ax, 6110		; 000017deH
  0004a	e9 8e 00 00 00	 jmp	 $L2052
$L2060:

; 388  :    
; 389  :    vciCodecMblk = (VCI_CODEC_BLOCK *)*hCodecMemBlk;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _hCodecMemBlk$[ebp]
  00052	8b 08		 mov	 ecx, DWORD PTR [eax]
  00054	89 4d fc	 mov	 DWORD PTR _vciCodecMblk$[ebp], ecx

; 390  :    STACK_UNSET(vciCodecMblk->pScratchBlk)
; 391  : 
; 392  :    vciCodecMblk->dwVciChunkID=0;

  00057	8b 55 fc	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  0005a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 393  : 
; 394  :    vemFree(vciCodecMblk->pvemMemBlk);

  00060	8b 45 fc	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  00063	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 _vemFree@4

; 395  : 
; 396  :    if(vciCodecMblk->hCodecMblk) {

  0006c	8b 55 fc	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  0006f	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00073	74 18		 je	 SHORT $L2062

; 397  :       VoxFreeEncodeRT(&vciCodecMblk->hCodecMblk);

  00075	8b 45 fc	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  00078	83 c0 10	 add	 eax, 16			; 00000010H
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _VoxFreeEncodeRT@4

; 398  :       VoxFreeQuanVR12(&vciCodecMblk->pQuanMemBlk);

  00081	8b 4d fc	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  00084	83 c1 14	 add	 ecx, 20			; 00000014H
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 _VoxFreeQuanVR12@4
$L2062:

; 399  :    }
; 400  : 
; 401  :    VOX_MEM_FREE(vciCodecMblk->hCodecMblk);

  0008d	8b 55 fc	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  00090	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00094	74 19		 je	 SHORT $L2063
  00096	8b 45 fc	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  00099	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0009c	51		 push	 ecx
  0009d	e8 00 00 00 00	 call	 _free
  000a2	83 c4 04	 add	 esp, 4
  000a5	8b 55 fc	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  000a8	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
$L2063:

; 402  : 
; 403  :    freeMethodStruct(&vciCodecMblk->pVciMethodStruct);

  000af	8b 45 fc	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  000b2	83 c0 24	 add	 eax, 36			; 00000024H
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _freeMethodStruct@4

; 404  : 
; 405  :    VOX_MEM_FREE(*hCodecMemBlk);

  000bb	8b 4d 08	 mov	 ecx, DWORD PTR _hCodecMemBlk$[ebp]
  000be	83 39 00	 cmp	 DWORD PTR [ecx], 0
  000c1	74 17		 je	 SHORT $L2065
  000c3	8b 55 08	 mov	 edx, DWORD PTR _hCodecMemBlk$[ebp]
  000c6	8b 02		 mov	 eax, DWORD PTR [edx]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 _free
  000ce	83 c4 04	 add	 esp, 4
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR _hCodecMemBlk$[ebp]
  000d4	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L2065:

; 406  : 
; 407  :    return VCI_NO_ERROR;

  000da	66 33 c0	 xor	 ax, ax
$L2052:

; 408  : }

  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 04 00	 ret	 4
_vciFreeEncodeVR12@4 ENDP
_TEXT	ENDS
EXTRN	_VoxFreeDecodeRT@4:NEAR
EXTRN	_VoxfreeFadeIO@4:NEAR
; Function compile flags: /Odt
;	COMDAT _vciFreeDecodeVR12@4
_TEXT	SEGMENT
_vciCodecMblk$ = -8
_DecMemBlk$ = -4
_hCodecMemBlk$ = 8
_vciFreeDecodeVR12@4 PROC NEAR				; COMDAT

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 422  :    VCI_CODEC_BLOCK *vciCodecMblk = NULL;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vciCodecMblk$[ebp], 0

; 423  :    DEC_MEM_BLK *DecMemBlk;
; 424  : 
; 425  :    if(!hCodecMemBlk)

  0000d	83 7d 08 00	 cmp	 DWORD PTR _hCodecMemBlk$[ebp], 0
  00011	75 09		 jne	 SHORT $L2073

; 426  :       return VCI_NULL_ARG;

  00013	66 b8 1a 18	 mov	 ax, 6170		; 0000181aH
  00017	e9 b0 00 00 00	 jmp	 $L2069
$L2073:

; 427  : 
; 428  :    /* First make sure that the handle passed is the correct one. */
; 429  :    if(!VCI_BLOCK_CHECK(*hCodecMemBlk))

  0001c	8b 45 08	 mov	 eax, DWORD PTR _hCodecMemBlk$[ebp]
  0001f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00022	74 0d		 je	 SHORT $L2076
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _hCodecMemBlk$[ebp]
  00027	8b 11		 mov	 edx, DWORD PTR [ecx]
  00029	81 3a ce fa 00
	00		 cmp	 DWORD PTR [edx], 64206	; 0000faceH
  0002f	74 09		 je	 SHORT $L2075
$L2076:

; 430  :       return VCI_NOT_VCI_HANDLE;

  00031	66 b8 d4 17	 mov	 ax, 6100		; 000017d4H
  00035	e9 92 00 00 00	 jmp	 $L2069
$L2075:

; 431  : 
; 432  :    if(!VCI_IS_DECODE(*hCodecMemBlk))

  0003a	8b 45 08	 mov	 eax, DWORD PTR _hCodecMemBlk$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	0f b6 51 0c	 movzx	 edx, BYTE PTR [ecx+12]
  00043	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  00046	74 06		 je	 SHORT $L2078

; 433  :       return VCI_NOT_DEC_HANDLE;

  00048	66 b8 e3 17	 mov	 ax, 6115		; 000017e3H
  0004c	eb 7e		 jmp	 SHORT $L2069
$L2078:

; 434  :    
; 435  :    vciCodecMblk = (VCI_CODEC_BLOCK *)*hCodecMemBlk;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _hCodecMemBlk$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	89 4d f8	 mov	 DWORD PTR _vciCodecMblk$[ebp], ecx

; 436  :    STACK_UNSET(vciCodecMblk->pScratchBlk)
; 437  : 
; 438  :    vciCodecMblk->dwVciChunkID=0;

  00056	8b 55 f8	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  00059	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 439  : 
; 440  :    vemFree(vciCodecMblk->pvemMemBlk);

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  00062	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 _vemFree@4

; 441  : 
; 442  :    if(vciCodecMblk->hCodecMblk) {

  0006b	8b 55 f8	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  0006e	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00072	74 2a		 je	 SHORT $L2080

; 443  :       DecMemBlk = (DEC_MEM_BLK *)vciCodecMblk->hCodecMblk;

  00074	8b 45 f8	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  00077	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0007a	89 4d fc	 mov	 DWORD PTR _DecMemBlk$[ebp], ecx

; 444  :       VoxfreeFadeIO(&DecMemBlk->pFadeIOMemBlk);

  0007d	8b 55 fc	 mov	 edx, DWORD PTR _DecMemBlk$[ebp]
  00080	52		 push	 edx
  00081	e8 00 00 00 00	 call	 _VoxfreeFadeIO@4

; 445  :       VoxFreeDecodeRT(&vciCodecMblk->hCodecMblk);

  00086	8b 45 f8	 mov	 eax, DWORD PTR _vciCodecMblk$[ebp]
  00089	83 c0 10	 add	 eax, 16			; 00000010H
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _VoxFreeDecodeRT@4

; 446  :       VoxFreeQuanVR12(&vciCodecMblk->pQuanMemBlk);

  00092	8b 4d f8	 mov	 ecx, DWORD PTR _vciCodecMblk$[ebp]
  00095	83 c1 14	 add	 ecx, 20			; 00000014H
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _VoxFreeQuanVR12@4
$L2080:

; 447  :    }
; 448  : 
; 449  :    freeMethodStruct(&vciCodecMblk->pVciMethodStruct);

  0009e	8b 55 f8	 mov	 edx, DWORD PTR _vciCodecMblk$[ebp]
  000a1	83 c2 24	 add	 edx, 36			; 00000024H
  000a4	52		 push	 edx
  000a5	e8 00 00 00 00	 call	 _freeMethodStruct@4

; 450  : 
; 451  :    VOX_MEM_FREE(*hCodecMemBlk);

  000aa	8b 45 08	 mov	 eax, DWORD PTR _hCodecMemBlk$[ebp]
  000ad	83 38 00	 cmp	 DWORD PTR [eax], 0
  000b0	74 17		 je	 SHORT $L2082
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR _hCodecMemBlk$[ebp]
  000b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b7	52		 push	 edx
  000b8	e8 00 00 00 00	 call	 _free
  000bd	83 c4 04	 add	 esp, 4
  000c0	8b 45 08	 mov	 eax, DWORD PTR _hCodecMemBlk$[ebp]
  000c3	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L2082:

; 452  : 
; 453  :   return VCI_NO_ERROR;

  000c9	66 33 c0	 xor	 ax, ax
$L2069:

; 454  : }

  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
_vciFreeDecodeVR12@4 ENDP
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
EXTRN	_floor:NEAR
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _DropFrames@12
_TEXT	SEGMENT
tv91 = -8
_dropit$ = -4
_InWarp$ = 8
_OutWarp$ = 12
_DropLeft$ = 16
_DropFrames@12 PROC NEAR				; COMDAT

; 465  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 466  :    short dropit;
; 467  : 
; 468  :    if (*DropLeft==0) {

  00006	8b 45 10	 mov	 eax, DWORD PTR _DropLeft$[ebp]
  00009	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0000c	85 c9		 test	 ecx, ecx
  0000e	75 61		 jne	 SHORT $L2092

; 469  :       dropit = 0;

  00010	66 c7 45 fc 00
	00		 mov	 WORD PTR _dropit$[ebp], 0

; 470  :       if (InWarp >=1.0)

  00016	d9 45 08	 fld	 DWORD PTR _InWarp$[ebp]
  00019	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3ff0000000000000
  0001f	df e0		 fnstsw	 ax
  00021	f6 c4 01	 test	 ah, 1
  00024	75 0a		 jne	 SHORT $L2093

; 471  :          *DropLeft = 0;

  00026	8b 55 10	 mov	 edx, DWORD PTR _DropLeft$[ebp]
  00029	66 c7 02 00 00	 mov	 WORD PTR [edx], 0

; 472  :       else 

  0002e	eb 28		 jmp	 SHORT $L2094
$L2093:

; 473  :          *DropLeft = ((short)floor(1.0/InWarp))-1;

  00030	d9 45 08	 fld	 DWORD PTR _InWarp$[ebp]
  00033	dc 3d 00 00 00
	00		 fdivr	 QWORD PTR __real@3ff0000000000000
  00039	83 ec 08	 sub	 esp, 8
  0003c	dd 1c 24	 fstp	 QWORD PTR [esp]
  0003f	e8 00 00 00 00	 call	 _floor
  00044	83 c4 08	 add	 esp, 8
  00047	e8 00 00 00 00	 call	 __ftol2
  0004c	0f bf c0	 movsx	 eax, ax
  0004f	83 e8 01	 sub	 eax, 1
  00052	8b 4d 10	 mov	 ecx, DWORD PTR _DropLeft$[ebp]
  00055	66 89 01	 mov	 WORD PTR [ecx], ax
$L2094:

; 474  : 
; 475  :      *OutWarp = InWarp*((*DropLeft)+1);

  00058	8b 55 10	 mov	 edx, DWORD PTR _DropLeft$[ebp]
  0005b	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 f8	 mov	 DWORD PTR tv91[ebp], eax
  00064	db 45 f8	 fild	 DWORD PTR tv91[ebp]
  00067	d8 4d 08	 fmul	 DWORD PTR _InWarp$[ebp]
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _OutWarp$[ebp]
  0006d	d9 19		 fstp	 DWORD PTR [ecx]

; 476  :    } else  {

  0006f	eb 16		 jmp	 SHORT $L2096
$L2092:

; 477  :       dropit=1;

  00071	66 c7 45 fc 01
	00		 mov	 WORD PTR _dropit$[ebp], 1

; 478  :      (*DropLeft)--;

  00077	8b 55 10	 mov	 edx, DWORD PTR _DropLeft$[ebp]
  0007a	66 8b 02	 mov	 ax, WORD PTR [edx]
  0007d	66 2d 01 00	 sub	 ax, 1
  00081	8b 4d 10	 mov	 ecx, DWORD PTR _DropLeft$[ebp]
  00084	66 89 01	 mov	 WORD PTR [ecx], ax
$L2096:

; 479  :    }
; 480  : 
; 481  :    return(dropit);

  00087	66 8b 45 fc	 mov	 ax, WORD PTR _dropit$[ebp]

; 482  : }

  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 0c 00	 ret	 12			; 0000000cH
_DropFrames@12 ENDP
_TEXT	ENDS
PUBLIC	_VR12CompatibilityFunc@8
; Function compile flags: /Odt
;	COMDAT _VR12CompatibilityFunc@8
_TEXT	SEGMENT
tv65 = -4
_VemPlugin$ = 8
_pVemCodID$ = 12
_VR12CompatibilityFunc@8 PROC NEAR			; COMDAT

; 492  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 493  :    *pVemCodID=(unsigned long)VOXWARE_CODEC_RT_8K_VR12;

  00004	8b 45 0c	 mov	 eax, DWORD PTR _pVemCodID$[ebp]
  00007	c7 00 12 00 00
	01		 mov	 DWORD PTR [eax], 16777234 ; 01000012H

; 494  :    
; 495  :    switch(VemPlugin) {

  0000d	0f b7 4d 08	 movzx	 ecx, WORD PTR _VemPlugin$[ebp]
  00011	89 4d fc	 mov	 DWORD PTR tv65[ebp], ecx
  00014	83 7d fc 01	 cmp	 DWORD PTR tv65[ebp], 1
  00018	74 0e		 je	 SHORT $L2107
  0001a	83 7d fc 02	 cmp	 DWORD PTR tv65[ebp], 2
  0001e	74 0e		 je	 SHORT $L2109
  00020	83 7d fc 04	 cmp	 DWORD PTR tv65[ebp], 4
  00024	74 0e		 je	 SHORT $L2111
  00026	eb 12		 jmp	 SHORT $L2104
$L2107:

; 496  :       case COMPATIBILITY_VFONT:
; 497  :          return (unsigned short)20;

  00028	66 b8 14 00	 mov	 ax, 20			; 00000014H
  0002c	eb 0f		 jmp	 SHORT $L2101
$L2109:

; 498  : 
; 499  :       case COMPATIBILITY_VAD_AGC:
; 500  :          return (unsigned short)20;

  0002e	66 b8 14 00	 mov	 ax, 20			; 00000014H
  00032	eb 09		 jmp	 SHORT $L2101
$L2111:

; 501  : 
; 502  :       case COMPATIBILITY_PLUS: 
; 503  :          return (unsigned short)20;

  00034	66 b8 14 00	 mov	 ax, 20			; 00000014H
  00038	eb 03		 jmp	 SHORT $L2101
$L2104:

; 504  :    }
; 505  :    return 0;

  0003a	66 33 c0	 xor	 ax, ax
$L2101:

; 506  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
_VR12CompatibilityFunc@8 ENDP
_TEXT	ENDS
PUBLIC	_vciGetExtCompatibilityVR12@4
; Function compile flags: /Odt
;	COMDAT _vciGetExtCompatibilityVR12@4
_TEXT	SEGMENT
_pCompatFunc$ = 8
_vciGetExtCompatibilityVR12@4 PROC NEAR			; COMDAT

; 509  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 510  :    if(!pCompatFunc)

  00003	83 7d 08 00	 cmp	 DWORD PTR _pCompatFunc$[ebp], 0
  00007	75 06		 jne	 SHORT $L2116

; 511  :       return VCI_NULL_ARG;

  00009	66 b8 1a 18	 mov	 ax, 6170		; 0000181aH
  0000d	eb 0c		 jmp	 SHORT $L2115
$L2116:

; 512  : 
; 513  :    *((COMPATIBILITY_FUNCTION **)pCompatFunc)=&VR12CompatibilityFunc;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _pCompatFunc$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:_VR12CompatibilityFunc@8

; 514  : 
; 515  :    return VCI_NO_ERROR;

  00018	66 33 c0	 xor	 ax, ax
$L2115:

; 516  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
_vciGetExtCompatibilityVR12@4 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT _initMethodStruct@4
_TEXT	SEGMENT
_hVciMethodStruct$ = 8
_initMethodStruct@4 PROC NEAR				; COMDAT

; 519  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 520  :    if(VOX_MEM_INIT(*hVciMethodStruct,1,sizeof(VCI_METHOD_STRUCT)))

  00003	6a 1c		 push	 28			; 0000001cH
  00005	6a 01		 push	 1
  00007	e8 00 00 00 00	 call	 _calloc
  0000c	83 c4 08	 add	 esp, 8
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _hVciMethodStruct$[ebp]
  00012	89 01		 mov	 DWORD PTR [ecx], eax
  00014	8b 55 08	 mov	 edx, DWORD PTR _hVciMethodStruct$[ebp]
  00017	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0001a	75 06		 jne	 SHORT $L2122

; 521  :       return 1;

  0001c	66 b8 01 00	 mov	 ax, 1
  00020	eb 56		 jmp	 SHORT $L2120
$L2122:

; 522  : 
; 523  :    (*hVciMethodStruct)->pfVciGetInfo=vciGetInfoVR12;

  00022	8b 45 08	 mov	 eax, DWORD PTR _hVciMethodStruct$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:_vciGetInfoVR12@4

; 524  : 
; 525  :    (*hVciMethodStruct)->pfVciEncode=vciEncodeVR12;

  0002d	8b 55 08	 mov	 edx, DWORD PTR _hVciMethodStruct$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET FLAT:_vciEncodeVR12@8

; 526  :    (*hVciMethodStruct)->pfVciDecode=vciDecodeVR12;

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _hVciMethodStruct$[ebp]
  0003c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003e	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET FLAT:_vciDecodeVR12@8

; 527  : 
; 528  :    (*hVciMethodStruct)->pfVciInitEncode=vciInitEncodeVR12;

  00045	8b 45 08	 mov	 eax, DWORD PTR _hVciMethodStruct$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], OFFSET FLAT:_vciInitEncodeVR12@4

; 529  :    (*hVciMethodStruct)->pfVciInitDecode=vciInitDecodeVR12; 

  00051	8b 55 08	 mov	 edx, DWORD PTR _hVciMethodStruct$[ebp]
  00054	8b 02		 mov	 eax, DWORD PTR [edx]
  00056	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET FLAT:_vciInitDecodeVR12@4

; 530  :                                                       
; 531  :    (*hVciMethodStruct)->pfVciFreeEncode=vciFreeEncodeVR12;                                                       

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _hVciMethodStruct$[ebp]
  00060	8b 11		 mov	 edx, DWORD PTR [ecx]
  00062	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET FLAT:_vciFreeEncodeVR12@4

; 532  :    (*hVciMethodStruct)->pfVciFreeDecode=vciFreeDecodeVR12;  

  00069	8b 45 08	 mov	 eax, DWORD PTR _hVciMethodStruct$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET FLAT:_vciFreeDecodeVR12@4

; 533  : 
; 534  :    return 0;

  00075	66 33 c0	 xor	 ax, ax
$L2120:

; 535  : }

  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_initMethodStruct@4 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT _freeMethodStruct@4
_TEXT	SEGMENT
_hVciMethodStruct$ = 8
_freeMethodStruct@4 PROC NEAR				; COMDAT

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 539  :    if(hVciMethodStruct)

  00003	83 7d 08 00	 cmp	 DWORD PTR _hVciMethodStruct$[ebp], 0
  00007	74 1f		 je	 SHORT $L2126

; 540  :       VOX_MEM_FREE(*hVciMethodStruct);

  00009	8b 45 08	 mov	 eax, DWORD PTR _hVciMethodStruct$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 17		 je	 SHORT $L2126
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _hVciMethodStruct$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 _free
  0001c	83 c4 04	 add	 esp, 4
  0001f	8b 45 08	 mov	 eax, DWORD PTR _hVciMethodStruct$[ebp]
  00022	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L2126:

; 541  : 
; 542  :    return 0;

  00028	66 33 c0	 xor	 ax, ax

; 543  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
_freeMethodStruct@4 ENDP
_TEXT	ENDS
END
