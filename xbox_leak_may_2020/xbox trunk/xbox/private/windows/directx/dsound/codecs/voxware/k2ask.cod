; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\k2ask.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DO@HKHPGDPP@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@IPKLOMJL@pfk?5?$CB?$DN?5NULL?5?$CG?$CG?5pfASK?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGCIKGNG@pfASK?5?$CB?$DN?5NULL?5?$CG?$CG?5pfk?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _K2ASK@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ASK2K@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	??_C@_0DO@HKHPGDPP@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BN@IPKLOMJL@pfk?5?$CB?$DN?5NULL?5?$CG?$CG?5pfASK?5?$CB?$DN?5NULL?$AA@ ; `string'
PUBLIC	_K2ASK@12
EXTRN	__fltused:NEAR
EXTRN	__assert:NEAR
EXTRN	_asin:NEAR
;	COMDAT ??_C@_0DO@HKHPGDPP@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\k2ask.c
CONST	SEGMENT
??_C@_0DO@HKHPGDPP@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\k2ask.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IPKLOMJL@pfk?5?$CB?$DN?5NULL?5?$CG?$CG?5pfASK?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BN@IPKLOMJL@pfk?5?$CB?$DN?5NULL?5?$CG?$CG?5pfASK?5?$CB?$DN?5NULL?$AA@ DB 'p'
	DB	'fk != NULL && pfASK != NULL', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _K2ASK@12
_TEXT	SEGMENT
tv76 = -8
_iLPCorder$ = 8
_pfk$ = 12
_pfASK$ = 16
_K2ASK@12 PROC NEAR					; COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 75   :   assert(pfk != NULL && pfASK != NULL);

  00006	83 7d 0c 00	 cmp	 DWORD PTR _pfk$[ebp], 0
  0000a	74 06		 je	 SHORT $L1099
  0000c	83 7d 10 00	 cmp	 DWORD PTR _pfASK$[ebp], 0
  00010	75 14		 jne	 SHORT $L1070
$L1099:
  00012	6a 4b		 push	 75			; 0000004bH
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@HKHPGDPP@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@IPKLOMJL@pfk?5?$CB?$DN?5NULL?5?$CG?$CG?5pfASK?5?$CB?$DN?5NULL?$AA@
  0001e	e8 00 00 00 00	 call	 __assert
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1070:

; 76   : 
; 77   :   while ((iLPCorder --) > 0)

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _iLPCorder$[ebp]
  00029	8b 55 08	 mov	 edx, DWORD PTR _iLPCorder$[ebp]
  0002c	83 ea 01	 sub	 edx, 1
  0002f	89 55 08	 mov	 DWORD PTR _iLPCorder$[ebp], edx
  00032	85 c9		 test	 ecx, ecx
  00034	7e 31		 jle	 SHORT $L1063

; 78   :     *pfASK++ = (float)(asin(*pfk++));

  00036	8b 45 0c	 mov	 eax, DWORD PTR _pfk$[ebp]
  00039	d9 00		 fld	 DWORD PTR [eax]
  0003b	dd 5d f8	 fstp	 QWORD PTR tv76[ebp]
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR tv76[ebp+4]
  00041	51		 push	 ecx
  00042	8b 55 f8	 mov	 edx, DWORD PTR tv76[ebp]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 _asin
  0004b	83 c4 08	 add	 esp, 8
  0004e	8b 45 10	 mov	 eax, DWORD PTR _pfASK$[ebp]
  00051	d9 18		 fstp	 DWORD PTR [eax]
  00053	8b 4d 10	 mov	 ecx, DWORD PTR _pfASK$[ebp]
  00056	83 c1 04	 add	 ecx, 4
  00059	89 4d 10	 mov	 DWORD PTR _pfASK$[ebp], ecx
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _pfk$[ebp]
  0005f	83 c2 04	 add	 edx, 4
  00062	89 55 0c	 mov	 DWORD PTR _pfk$[ebp], edx
  00065	eb bf		 jmp	 SHORT $L1070
$L1063:

; 79   : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 0c 00	 ret	 12			; 0000000cH
_K2ASK@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@LGCIKGNG@pfASK?5?$CB?$DN?5NULL?5?$CG?$CG?5pfk?5?$CB?$DN?5NULL?$AA@ ; `string'
PUBLIC	_ASK2K@12
EXTRN	_sin:NEAR
;	COMDAT ??_C@_0BN@LGCIKGNG@pfASK?5?$CB?$DN?5NULL?5?$CG?$CG?5pfk?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BN@LGCIKGNG@pfASK?5?$CB?$DN?5NULL?5?$CG?$CG?5pfk?5?$CB?$DN?5NULL?$AA@ DB 'p'
	DB	'fASK != NULL && pfk != NULL', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _ASK2K@12
_TEXT	SEGMENT
tv76 = -8
_iLPCorder$ = 8
_pfASK$ = 12
_pfk$ = 16
_ASK2K@12 PROC NEAR					; COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 114  :   assert(pfASK != NULL && pfk != NULL);

  00006	83 7d 0c 00	 cmp	 DWORD PTR _pfASK$[ebp], 0
  0000a	74 06		 je	 SHORT $L1105
  0000c	83 7d 10 00	 cmp	 DWORD PTR _pfk$[ebp], 0
  00010	75 14		 jne	 SHORT $L1085
$L1105:
  00012	6a 72		 push	 114			; 00000072H
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@HKHPGDPP@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@LGCIKGNG@pfASK?5?$CB?$DN?5NULL?5?$CG?$CG?5pfk?5?$CB?$DN?5NULL?$AA@
  0001e	e8 00 00 00 00	 call	 __assert
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1085:

; 115  :  
; 116  :   while ((iLPCorder--) > 0)

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _iLPCorder$[ebp]
  00029	8b 55 08	 mov	 edx, DWORD PTR _iLPCorder$[ebp]
  0002c	83 ea 01	 sub	 edx, 1
  0002f	89 55 08	 mov	 DWORD PTR _iLPCorder$[ebp], edx
  00032	85 c9		 test	 ecx, ecx
  00034	7e 31		 jle	 SHORT $L1079

; 117  :     *pfk++ = (float)sin(*pfASK++);

  00036	8b 45 0c	 mov	 eax, DWORD PTR _pfASK$[ebp]
  00039	d9 00		 fld	 DWORD PTR [eax]
  0003b	dd 5d f8	 fstp	 QWORD PTR tv76[ebp]
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR tv76[ebp+4]
  00041	51		 push	 ecx
  00042	8b 55 f8	 mov	 edx, DWORD PTR tv76[ebp]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 _sin
  0004b	83 c4 08	 add	 esp, 8
  0004e	8b 45 10	 mov	 eax, DWORD PTR _pfk$[ebp]
  00051	d9 18		 fstp	 DWORD PTR [eax]
  00053	8b 4d 10	 mov	 ecx, DWORD PTR _pfk$[ebp]
  00056	83 c1 04	 add	 ecx, 4
  00059	89 4d 10	 mov	 DWORD PTR _pfk$[ebp], ecx
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _pfASK$[ebp]
  0005f	83 c2 04	 add	 edx, 4
  00062	89 55 0c	 mov	 DWORD PTR _pfASK$[ebp], edx
  00065	eb bf		 jmp	 SHORT $L1085
$L1079:

; 118  : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 0c 00	 ret	 12			; 0000000cH
_ASK2K@12 ENDP
_TEXT	ENDS
END
