; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\main.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
WMADEC_RW	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RW	ENDS
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT @ByteSwap@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _Direct3D_AddRef@0
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _Direct3D_Release@0
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DDevice_BeginScene@0
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DDevice_EndScene@0
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DPalette_Unlock@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _WStrToStrN@12
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _WMADebugMessage
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, WMADEC_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_g_fp
PUBLIC	_g_fpLic
PUBLIC	_MAX_BUFSIZE
PUBLIC	_g_cbBuffer
PUBLIC	_g_cbBufLic
PUBLIC	_g_ulFullSec
PUBLIC	_g_ulOutputSamples
PUBLIC	_g_pmid
PUBLIC	_g_pRight
PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	_DSoundBuildNumberD
_DATA	SEGMENT
COMM	_g_hdrstate:BYTE:0c0H
COMM	_g_state:DWORD
COMM	_g_hdr:BYTE:028H
COMM	_g_lic:QWORD
COMM	_g_pBuffer:BYTE:080H
COMM	_g_pBufLic:BYTE:080H
COMM	_g_ulStartFirstSec:DWORD
COMM	_g_ulEndSec:DWORD
COMM	_g_SampleRate:DWORD
COMM	_g_pLeft:WORD:01000H
COMM	_g_szTitle:BYTE:080H
COMM	_g_szAuthor:BYTE:080H
COMM	_g_szCopyright:BYTE:080H
COMM	_g_szDescription:BYTE:080H
COMM	_g_szRating:BYTE:080H
_DATA	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
WMADEC_RD	SEGMENT
_WMA_OK	DD	00H
_WMA_S_FALSE DD	01H
_WMA_S_BUFUNDERFLOW DD 02H
_WMA_S_NEWPACKET DD 03H
_WMA_S_NO_MORE_FRAME DD 04H
_WMA_S_DEFAULT DD 05H
_WMA_S_SWITCHCHMODE DD 06H
_WMA_E_FAIL DD	080004005H
_WMA_E_OUTOFMEMORY DD 08007000eH
_WMA_E_INVALIDARG DD 080070057H
_WMA_E_NOTSUPPORTED DD 080040000H
_WMA_E_LOSTPACKET DD 080040001H
_WMA_E_BROKEN_FRAME DD 080040002H
_WMA_E_BUFFEROVERFLOW DD 080040003H
_WMA_E_ONHOLD DD 080040004H
_WMA_E_BUFFERUNDERFLOW DD 080040005H
_WMA_E_INVALIDRECHDR DD 080040006H
_WMA_E_SYNCERROR DD 080040007H
_WMA_E_NOTIMPL DD 080040008H
_WMA_E_FLUSHOVERFLOW DD 080040009H
WMADEC_RD	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
WMADEC_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
WMADEC_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
WMADEC_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
WMADEC_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
WMADEC_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
WMADEC_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
WMADEC_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
WMADEC_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
WMADEC_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
WMADEC_RD	ENDS
WMADEC_RW	SEGMENT
_g_fp	DD	00H
_g_fpLic DD	00H
WMADEC_RW	ENDS
WMADEC_RD	SEGMENT
_MAX_BUFSIZE DD	080H
WMADEC_RD	ENDS
WMADEC_RW	SEGMENT
_g_cbBuffer DD	00H
_g_cbBufLic DD	00H
_g_ulFullSec DD	00H
_g_ulOutputSamples DD 00H
_g_pmid	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	020H
	DB	069H
	DB	020H
	DB	032H
	DB	030H
	DB	035H
	DB	030H
	DB	030H
	DB	032H
	DB	030H
	DB	031H
	DB	032H
	DB	031H
_g_pRight DD	00H
WMADEC_RW	ENDS
PUBLIC	_WStrToStrN@12
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\wmalib\wmadec_s\main.c
;	COMDAT _WStrToStrN@12
WMADEC	SEGMENT
_pStr$ = 8
_pWStr$ = 12
_n$ = 16
_WStrToStrN@12 PROC NEAR				; COMDAT

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 219  :     if(pStr == NULL || pWStr == NULL)

  00003	83 7d 08 00	 cmp	 DWORD PTR _pStr$[ebp], 0
  00007	74 06		 je	 SHORT $L18916
  00009	83 7d 0c 00	 cmp	 DWORD PTR _pWStr$[ebp], 0
  0000d	75 02		 jne	 SHORT $L18918
$L18916:

; 220  :     {
; 221  :         return;

  0000f	eb 34		 jmp	 SHORT $L18912
$L18918:

; 222  :     }
; 223  : 
; 224  :     while(n-- > 0)

  00011	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00014	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00017	83 e9 01	 sub	 ecx, 1
  0001a	89 4d 10	 mov	 DWORD PTR _n$[ebp], ecx
  0001d	85 c0		 test	 eax, eax
  0001f	7e 1e		 jle	 SHORT $L18919

; 225  :     {
; 226  :         *pStr++ = *pWStr;

  00021	8b 55 08	 mov	 edx, DWORD PTR _pStr$[ebp]
  00024	8b 45 0c	 mov	 eax, DWORD PTR _pWStr$[ebp]
  00027	8a 08		 mov	 cl, BYTE PTR [eax]
  00029	88 0a		 mov	 BYTE PTR [edx], cl
  0002b	8b 55 08	 mov	 edx, DWORD PTR _pStr$[ebp]
  0002e	83 c2 01	 add	 edx, 1
  00031	89 55 08	 mov	 DWORD PTR _pStr$[ebp], edx

; 227  :         pWStr += 2;

  00034	8b 45 0c	 mov	 eax, DWORD PTR _pWStr$[ebp]
  00037	83 c0 02	 add	 eax, 2
  0003a	89 45 0c	 mov	 DWORD PTR _pWStr$[ebp], eax

; 228  :     }

  0003d	eb d2		 jmp	 SHORT $L18918
$L18919:

; 229  :     *pStr = 0;

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _pStr$[ebp]
  00042	c6 01 00	 mov	 BYTE PTR [ecx], 0
$L18912:

; 230  : }

  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
_WStrToStrN@12 ENDP
WMADEC	ENDS
PUBLIC	_WMADebugMessage
EXTRN	__iob:BYTE
EXTRN	_vfprintf:NEAR
; Function compile flags: /Odt
;	COMDAT _WMADebugMessage
WMADEC	SEGMENT
_vargs$ = -4
_pszFmt$ = 8
_WMADebugMessage PROC NEAR				; COMDAT

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 301  :     va_list vargs;
; 302  :     va_start(vargs, pszFmt);

  00004	8d 45 0c	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  00007	89 45 fc	 mov	 DWORD PTR _vargs$[ebp], eax

; 303  :     vfprintf(stderr, pszFmt, vargs );

  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _vargs$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _pszFmt$[ebp]
  00011	52		 push	 edx
  00012	68 40 00 00 00	 push	 OFFSET FLAT:__iob+64
  00017	e8 00 00 00 00	 call	 _vfprintf
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 304  :     va_end(vargs);

  0001f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _vargs$[ebp], 0

; 305  : }

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_WMADebugMessage ENDP
WMADEC	ENDS
END
