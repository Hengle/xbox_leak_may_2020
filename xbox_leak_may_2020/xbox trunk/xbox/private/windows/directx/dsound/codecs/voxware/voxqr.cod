; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\voxqr.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DO@KMMLNHFE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@CHAOEAHJ@fXval?5?$DO?$DN?50?40F?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@FIELGOLE@fXval?5?$DM?$DN?51?40F?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _fQuadRoot@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_fQuadRoot@4
PUBLIC	??_C@_0DO@KMMLNHFE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@CHAOEAHJ@fXval?5?$DO?$DN?50?40F?$AA@	; `string'
PUBLIC	??_C@_0O@FIELGOLE@fXval?5?$DM?$DN?51?40F?$AA@	; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@33d6bf95
PUBLIC	__real@3dcccccd
PUBLIC	__real@41200000
PUBLIC	__real@3f0ff59a
PUBLIC	__real@bef5d70a
PUBLIC	__real@3f80032f
PUBLIC	__real@3eedd1d6
EXTRN	__assert:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@00000000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\voxqr.c
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0DO@KMMLNHFE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DO@KMMLNHFE@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\voxqr.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CHAOEAHJ@fXval?5?$DO?$DN?50?40F?$AA@
CONST	SEGMENT
??_C@_0O@CHAOEAHJ@fXval?5?$DO?$DN?50?40F?$AA@ DB 'fXval >= 0.0F', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_0O@FIELGOLE@fXval?5?$DM?$DN?51?40F?$AA@
CONST	SEGMENT
??_C@_0O@FIELGOLE@fXval?5?$DM?$DN?51?40F?$AA@ DB 'fXval <= 1.0F', 00H ; `string'
CONST	ENDS
;	COMDAT __real@33d6bf95
CONST	SEGMENT
__real@33d6bf95 DD 033d6bf95r			; 1e-007
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@3f0ff59a
CONST	SEGMENT
__real@3f0ff59a DD 03f0ff59ar			; 0.562341
CONST	ENDS
;	COMDAT __real@bef5d70a
CONST	SEGMENT
__real@bef5d70a DD 0bef5d70ar			; -0.480156
CONST	ENDS
;	COMDAT __real@3f80032f
CONST	SEGMENT
__real@3f80032f DD 03f80032fr			; 1.0001
CONST	ENDS
;	COMDAT __real@3eedd1d6
CONST	SEGMENT
__real@3eedd1d6 DD 03eedd1d6r			; 0.464492
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _fQuadRoot@4
_TEXT	SEGMENT
_fout$ = -8
_fScale$ = -4
_fXval$ = 8
_fQuadRoot@4 PROC NEAR					; COMDAT

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 104  :   float fScale;
; 105  :   float fout;
; 106  : 
; 107  :   /*---------------------------------------------
; 108  :     Assert for input between 0.0 and 1.0
; 109  :   ---------------------------------------------*/
; 110  :   assert( fXval >= 0.0F );

  00006	d9 45 08	 fld	 DWORD PTR _fXval$[ebp]
  00009	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0000f	df e0		 fnstsw	 ax
  00011	f6 c4 01	 test	 ah, 1
  00014	74 14		 je	 SHORT $L617
  00016	6a 6e		 push	 110			; 0000006eH
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@KMMLNHFE@c?3?2xbox?2private?2windows?2directx?2@
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@CHAOEAHJ@fXval?5?$DO?$DN?50?40F?$AA@
  00022	e8 00 00 00 00	 call	 __assert
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
$L617:

; 111  :   assert( fXval <= 1.0F );

  0002a	d9 45 08	 fld	 DWORD PTR _fXval$[ebp]
  0002d	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f800000
  00033	df e0		 fnstsw	 ax
  00035	f6 c4 41	 test	 ah, 65			; 00000041H
  00038	7b 14		 jnp	 SHORT $L618
  0003a	6a 6f		 push	 111			; 0000006fH
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@KMMLNHFE@c?3?2xbox?2private?2windows?2directx?2@
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@FIELGOLE@fXval?5?$DM?$DN?51?40F?$AA@
  00046	e8 00 00 00 00	 call	 __assert
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L618:

; 112  : 
; 113  :   /*---------------------------------------------
; 114  :     Scale fXval so that it is between 0.1 and 1.0.
; 115  :   ---------------------------------------------*/
; 116  :   fScale = SCALE_INIT;

  0004e	c7 45 fc 00 00
	80 3f		 mov	 DWORD PTR _fScale$[ebp], 1065353216 ; 3f800000H

; 117  :   fXval += LIMITING_FACTOR; /* limit number of iterations in the while loop */

  00055	d9 45 08	 fld	 DWORD PTR _fXval$[ebp]
  00058	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@33d6bf95
  0005e	d9 5d 08	 fstp	 DWORD PTR _fXval$[ebp]
$L605:

; 118  :   while (fXval < INV_SCALE)

  00061	d9 45 08	 fld	 DWORD PTR _fXval$[ebp]
  00064	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3dcccccd
  0006a	df e0		 fnstsw	 ax
  0006c	f6 c4 05	 test	 ah, 5
  0006f	7a 1a		 jp	 SHORT $L606

; 119  :     {
; 120  :       fXval  *= CONST_SCALE;

  00071	d9 45 08	 fld	 DWORD PTR _fXval$[ebp]
  00074	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@41200000
  0007a	d9 5d 08	 fstp	 DWORD PTR _fXval$[ebp]

; 121  :       fScale *= INV_QR_SCALE;

  0007d	d9 45 fc	 fld	 DWORD PTR _fScale$[ebp]
  00080	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f0ff59a
  00086	d9 5d fc	 fstp	 DWORD PTR _fScale$[ebp]

; 122  :     }

  00089	eb d6		 jmp	 SHORT $L605
$L606:

; 123  : 
; 124  :   /*---------------------------------------------
; 125  :     Quadratic approximation to 4th root
; 126  :   ---------------------------------------------*/
; 127  :   fout  = QRA*fXval+QRB;

  0008b	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bef5d70a
  00091	d8 4d 08	 fmul	 DWORD PTR _fXval$[ebp]
  00094	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3f80032f
  0009a	d9 5d f8	 fstp	 DWORD PTR _fout$[ebp]

; 128  :   fout  = fXval*fout + QRC;

  0009d	d9 45 08	 fld	 DWORD PTR _fXval$[ebp]
  000a0	d8 4d f8	 fmul	 DWORD PTR _fout$[ebp]
  000a3	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3eedd1d6
  000a9	d9 55 f8	 fst	 DWORD PTR _fout$[ebp]

; 129  :   fout *= fScale;

  000ac	d8 4d fc	 fmul	 DWORD PTR _fScale$[ebp]
  000af	d9 55 f8	 fst	 DWORD PTR _fout$[ebp]

; 130  : 
; 131  :   return fout;
; 132  : }

  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 04 00	 ret	 4
_fQuadRoot@4 ENDP
_TEXT	ENDS
END
