; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\klpitch.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _fSetKLFactor@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_fLog2WinScale DD 0406eb5f8r			; 3.72986
	DD	0406a626er			; 3.66226
	DD	04065dfe6r			; 3.59179
	DD	0406127d6r			; 3.51806
	DD	0405c3204r			; 3.44055
	DD	04056f3e0r			; 3.35863
_fWinPeriod DD	042c00000r			; 96
	DD	042b00000r			; 88
	DD	042a00000r			; 80
	DD	042900000r			; 72
	DD	042800000r			; 64
CONST	ENDS
PUBLIC	_fSetKLFactor@8
PUBLIC	__real@3f000000
PUBLIC	__real@c0a17340
EXTRN	_fLog2@4:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@3f000000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\klpitch.c
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@c0a17340
CONST	SEGMENT
__real@c0a17340 DD 0c0a17340r			; -5.04532
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _fSetKLFactor@8
_TEXT	SEGMENT
_fLogAlpha$ = -8
_i$ = -4
_fAnaPitchPeriod$ = 8
_fSynF0$ = 12
_fSetKLFactor@8 PROC NEAR				; COMDAT

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 110  :    int   i;
; 111  :    float fLogAlpha;
; 112  : 
; 113  :    /*-----------------------------------------------------------------
; 114  :      Set the Scaling ratio: (window area)/sqrt(window energy).
; 115  :        This raio is a function of the analysis window used.  The
; 116  :        window used depends on the coarse pitch estimate at the
; 117  :        encoder, so the best we can do is guess based on the pitch
; 118  :        received by the decoder.
; 119  :    -----------------------------------------------------------------*/
; 120  :    for (i=0; i<NUMBER_OF_WINDOWS_M1; i++)

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0000d	eb 09		 jmp	 SHORT $L611
$L612:
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00012	83 c0 01	 add	 eax, 1
  00015	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L611:
  00018	83 7d fc 05	 cmp	 DWORD PTR _i$[ebp], 5
  0001c	7d 18		 jge	 SHORT $L613

; 121  :       if (fAnaPitchPeriod>fWinPeriod[i])

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00021	d9 45 08	 fld	 DWORD PTR _fAnaPitchPeriod$[ebp]
  00024	d8 1c 8d 00 00
	00 00		 fcomp	 DWORD PTR _fWinPeriod[ecx*4]
  0002b	df e0		 fnstsw	 ax
  0002d	f6 c4 41	 test	 ah, 65			; 00000041H
  00030	75 02		 jne	 SHORT $L614

; 122  :         break;

  00032	eb 02		 jmp	 SHORT $L613
$L614:

; 123  : 
; 124  :    /*-----------------------------------------------------------------
; 125  :     fLogAlpha = fLog2(fWinScale[i])+0.5*fLog2(fSynPitch/NFFT)
; 126  :                 + WINDOW_SCALING+PEAKPICK_SCALING+FUDGEFACTOR_SCALING
; 127  : 
; 128  :      fLog2(fWinScale[i])         normalizes for the energy in the 
; 129  :                                    analysis window
; 130  :      0.5F*fLog2(fSynPitch/NFFT)  normalizes for the synthesis pitch
; 131  :    -----------------------------------------------------------------*/
; 132  :    fLogAlpha = fLog2WinScale[i]+0.5F*fLog2(fSynF0)

  00034	eb d9		 jmp	 SHORT $L612
$L613:

; 133  :                + MULTI_SCALING;

  00036	8b 55 0c	 mov	 edx, DWORD PTR _fSynF0$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 _fLog2@4
  0003f	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  00045	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00048	d8 04 85 00 00
	00 00		 fadd	 DWORD PTR _fLog2WinScale[eax*4]
  0004f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@c0a17340
  00055	d9 55 f8	 fst	 DWORD PTR _fLogAlpha$[ebp]

; 134  :    
; 135  :    return fLogAlpha;
; 136  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
_fSetKLFactor@8 ENDP
_TEXT	ENDS
END
