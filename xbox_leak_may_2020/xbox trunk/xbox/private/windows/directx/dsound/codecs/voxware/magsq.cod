; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\magsq.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DO@EHNAMNLE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@FOHMHBAL@iLength?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@OAAIKNAO@pcfRe?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@HOAIKOHF@pcfIm?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GKLEIOAN@pfMagSq?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@PPKGLPPK@pcfVec?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _MagSq@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _MagSqIL@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_MagSq@16
PUBLIC	??_C@_0DO@EHNAMNLE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0M@FOHMHBAL@iLength?5?$DO?50?$AA@		; `string'
PUBLIC	??_C@_0O@OAAIKNAO@pcfRe?5?$CB?$DN?5NULL?$AA@	; `string'
PUBLIC	??_C@_0O@HOAIKOHF@pcfIm?5?$CB?$DN?5NULL?$AA@	; `string'
PUBLIC	??_C@_0BA@GKLEIOAN@pfMagSq?5?$CB?$DN?5NULL?$AA@	; `string'
EXTRN	__assert:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0DO@EHNAMNLE@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\magsq.c
CONST	SEGMENT
??_C@_0DO@EHNAMNLE@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\magsq.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FOHMHBAL@iLength?5?$DO?50?$AA@
CONST	SEGMENT
??_C@_0M@FOHMHBAL@iLength?5?$DO?50?$AA@ DB 'iLength > 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OAAIKNAO@pcfRe?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0O@OAAIKNAO@pcfRe?5?$CB?$DN?5NULL?$AA@ DB 'pcfRe != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HOAIKOHF@pcfIm?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0O@HOAIKOHF@pcfIm?5?$CB?$DN?5NULL?$AA@ DB 'pcfIm != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GKLEIOAN@pfMagSq?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BA@GKLEIOAN@pfMagSq?5?$CB?$DN?5NULL?$AA@ DB 'pfMagSq != NULL', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _MagSq@16
_TEXT	SEGMENT
_pcfRe$ = 8
_pcfIm$ = 12
_iLength$ = 16
_pfMagSq$ = 20
_MagSq@16 PROC NEAR					; COMDAT

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 53   : 
; 54   :   assert( iLength > 0 );

  00003	83 7d 10 00	 cmp	 DWORD PTR _iLength$[ebp], 0
  00007	7f 14		 jg	 SHORT $L944
  00009	6a 36		 push	 54			; 00000036H
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EHNAMNLE@c?3?2xbox?2private?2windows?2directx?2@
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@FOHMHBAL@iLength?5?$DO?50?$AA@
  00015	e8 00 00 00 00	 call	 __assert
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L944:

; 55   :   assert( pcfRe != NULL);

  0001d	83 7d 08 00	 cmp	 DWORD PTR _pcfRe$[ebp], 0
  00021	75 14		 jne	 SHORT $L945
  00023	6a 37		 push	 55			; 00000037H
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EHNAMNLE@c?3?2xbox?2private?2windows?2directx?2@
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@OAAIKNAO@pcfRe?5?$CB?$DN?5NULL?$AA@
  0002f	e8 00 00 00 00	 call	 __assert
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
$L945:

; 56   :   assert( pcfIm != NULL);

  00037	83 7d 0c 00	 cmp	 DWORD PTR _pcfIm$[ebp], 0
  0003b	75 14		 jne	 SHORT $L946
  0003d	6a 38		 push	 56			; 00000038H
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EHNAMNLE@c?3?2xbox?2private?2windows?2directx?2@
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@HOAIKOHF@pcfIm?5?$CB?$DN?5NULL?$AA@
  00049	e8 00 00 00 00	 call	 __assert
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L946:

; 57   :   assert( pfMagSq != NULL);

  00051	83 7d 14 00	 cmp	 DWORD PTR _pfMagSq$[ebp], 0
  00055	75 14		 jne	 SHORT $L947
  00057	6a 39		 push	 57			; 00000039H
  00059	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EHNAMNLE@c?3?2xbox?2private?2windows?2directx?2@
  0005e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@GKLEIOAN@pfMagSq?5?$CB?$DN?5NULL?$AA@
  00063	e8 00 00 00 00	 call	 __assert
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
$L947:

; 58   : 
; 59   :   for (; iLength > 0; iLength--, pcfRe++, pcfIm++)

  0006b	eb 1b		 jmp	 SHORT $L911
$L912:
  0006d	8b 4d 10	 mov	 ecx, DWORD PTR _iLength$[ebp]
  00070	83 e9 01	 sub	 ecx, 1
  00073	89 4d 10	 mov	 DWORD PTR _iLength$[ebp], ecx
  00076	8b 55 08	 mov	 edx, DWORD PTR _pcfRe$[ebp]
  00079	83 c2 04	 add	 edx, 4
  0007c	89 55 08	 mov	 DWORD PTR _pcfRe$[ebp], edx
  0007f	8b 45 0c	 mov	 eax, DWORD PTR _pcfIm$[ebp]
  00082	83 c0 04	 add	 eax, 4
  00085	89 45 0c	 mov	 DWORD PTR _pcfIm$[ebp], eax
$L911:
  00088	83 7d 10 00	 cmp	 DWORD PTR _iLength$[ebp], 0
  0008c	7e 26		 jle	 SHORT $L898

; 60   :     *pfMagSq++ = (*pcfRe)*(*pcfRe) + (*pcfIm)*(*pcfIm);

  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _pcfRe$[ebp]
  00091	8b 55 08	 mov	 edx, DWORD PTR _pcfRe$[ebp]
  00094	d9 01		 fld	 DWORD PTR [ecx]
  00096	d8 0a		 fmul	 DWORD PTR [edx]
  00098	8b 45 0c	 mov	 eax, DWORD PTR _pcfIm$[ebp]
  0009b	8b 4d 0c	 mov	 ecx, DWORD PTR _pcfIm$[ebp]
  0009e	d9 00		 fld	 DWORD PTR [eax]
  000a0	d8 09		 fmul	 DWORD PTR [ecx]
  000a2	de c1		 faddp	 ST(1), ST(0)
  000a4	8b 55 14	 mov	 edx, DWORD PTR _pfMagSq$[ebp]
  000a7	d9 1a		 fstp	 DWORD PTR [edx]
  000a9	8b 45 14	 mov	 eax, DWORD PTR _pfMagSq$[ebp]
  000ac	83 c0 04	 add	 eax, 4
  000af	89 45 14	 mov	 DWORD PTR _pfMagSq$[ebp], eax
  000b2	eb b9		 jmp	 SHORT $L912
$L898:

; 61   : }

  000b4	5d		 pop	 ebp
  000b5	c2 10 00	 ret	 16			; 00000010H
_MagSq@16 ENDP
_TEXT	ENDS
PUBLIC	_MagSqIL@12
PUBLIC	??_C@_0P@PPKGLPPK@pcfVec?5?$CB?$DN?5NULL?$AA@	; `string'
;	COMDAT ??_C@_0P@PPKGLPPK@pcfVec?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0P@PPKGLPPK@pcfVec?5?$CB?$DN?5NULL?$AA@ DB 'pcfVec != NULL', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _MagSqIL@12
_TEXT	SEGMENT
_pcfVec$ = 8
_iLength$ = 12
_pfMagSq$ = 16
_MagSqIL@12 PROC NEAR					; COMDAT

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   : 
; 89   :   assert( iLength > 0 );

  00003	83 7d 0c 00	 cmp	 DWORD PTR _iLength$[ebp], 0
  00007	7f 14		 jg	 SHORT $L952
  00009	6a 59		 push	 89			; 00000059H
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EHNAMNLE@c?3?2xbox?2private?2windows?2directx?2@
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@FOHMHBAL@iLength?5?$DO?50?$AA@
  00015	e8 00 00 00 00	 call	 __assert
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L952:

; 90   :   assert( pcfVec != NULL);

  0001d	83 7d 08 00	 cmp	 DWORD PTR _pcfVec$[ebp], 0
  00021	75 14		 jne	 SHORT $L953
  00023	6a 5a		 push	 90			; 0000005aH
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EHNAMNLE@c?3?2xbox?2private?2windows?2directx?2@
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@PPKGLPPK@pcfVec?5?$CB?$DN?5NULL?$AA@
  0002f	e8 00 00 00 00	 call	 __assert
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
$L953:

; 91   :   assert( pfMagSq != NULL);

  00037	83 7d 10 00	 cmp	 DWORD PTR _pfMagSq$[ebp], 0
  0003b	75 14		 jne	 SHORT $L954
  0003d	6a 5b		 push	 91			; 0000005bH
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EHNAMNLE@c?3?2xbox?2private?2windows?2directx?2@
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@GKLEIOAN@pfMagSq?5?$CB?$DN?5NULL?$AA@
  00049	e8 00 00 00 00	 call	 __assert
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L954:

; 92   : 
; 93   :   for (; iLength > 0; iLength--, pcfVec+=2)

  00051	eb 12		 jmp	 SHORT $L927
$L928:
  00053	8b 45 0c	 mov	 eax, DWORD PTR _iLength$[ebp]
  00056	83 e8 01	 sub	 eax, 1
  00059	89 45 0c	 mov	 DWORD PTR _iLength$[ebp], eax
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _pcfVec$[ebp]
  0005f	83 c1 08	 add	 ecx, 8
  00062	89 4d 08	 mov	 DWORD PTR _pcfVec$[ebp], ecx
$L927:
  00065	83 7d 0c 00	 cmp	 DWORD PTR _iLength$[ebp], 0
  00069	7e 28		 jle	 SHORT $L920

; 94   :     *pfMagSq++ = pcfVec[0]*pcfVec[0] + pcfVec[1]*pcfVec[1];

  0006b	8b 55 08	 mov	 edx, DWORD PTR _pcfVec$[ebp]
  0006e	8b 45 08	 mov	 eax, DWORD PTR _pcfVec$[ebp]
  00071	d9 02		 fld	 DWORD PTR [edx]
  00073	d8 08		 fmul	 DWORD PTR [eax]
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _pcfVec$[ebp]
  00078	8b 55 08	 mov	 edx, DWORD PTR _pcfVec$[ebp]
  0007b	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0007e	d8 4a 04	 fmul	 DWORD PTR [edx+4]
  00081	de c1		 faddp	 ST(1), ST(0)
  00083	8b 45 10	 mov	 eax, DWORD PTR _pfMagSq$[ebp]
  00086	d9 18		 fstp	 DWORD PTR [eax]
  00088	8b 4d 10	 mov	 ecx, DWORD PTR _pfMagSq$[ebp]
  0008b	83 c1 04	 add	 ecx, 4
  0008e	89 4d 10	 mov	 DWORD PTR _pfMagSq$[ebp], ecx
  00091	eb c0		 jmp	 SHORT $L928
$L920:

; 95   : }

  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
_MagSqIL@12 ENDP
_TEXT	ENDS
END
