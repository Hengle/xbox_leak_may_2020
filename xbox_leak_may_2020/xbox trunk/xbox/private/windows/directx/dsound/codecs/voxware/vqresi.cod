; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\vqresi.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DP@DEJNANCD@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DN@JJLBJLFD@?$CIpfASKq?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfASKorig?5?$CB@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@IPNDIFAD@?$CIpfASKq?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpiIndex?5?$CB?$DN?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxASKResiEnc@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxASKResiDec@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_tabCB_8_9 DD	03b4dea03r			; 0.003142
	DD	03b10e66dr			; 0.002211
	DD	0bd56616br			; -0.052339
	DD	0b727c5acr			; -1e-005
	DD	0bcc9cf57r			; -0.024635
	DD	0bd47cc7dr			; -0.048779
	DD	0bc78bdecr			; -0.015182
	DD	0bc444391r			; -0.011979
	DD	03d2e8f2ar			; 0.042617
	DD	03b3a6267r			; 0.002844
	DD	0bca5918ar			; -0.020211
	DD	03cfede98r			; 0.031112
	DD	03cb1465fr			; 0.02164
	DD	03d2d0a24r			; 0.042246
	DD	03ca62457r			; 0.020281
	DD	0bd0370cer			; -0.03209
_tabCB_10_11 DD	0bb4b6c7ar			; -0.003104
	DD	0bb16edeer			; -0.002303
	DD	03c83e20dr			; 0.016099
	DD	03d52b1b3r			; 0.051439
	DD	03d6b1a2ar			; 0.057398
	DD	03c106467r			; 0.008813
	DD	03c8bcbe6r			; 0.017065
	DD	03c3c3c5cr			; 0.011489
	DD	03cd62bf1r			; 0.026144
	DD	0bcec0b56r			; -0.028814
	DD	0bd36bd2br			; -0.044614
	DD	0bbf56eadr			; -0.00749
	DD	0bc662995r			; -0.014048
	DD	0bd2c4a41r			; -0.042063
	DD	0bcb85e81r			; -0.022506
	DD	03ced5f14r			; 0.028976
CONST	ENDS
PUBLIC	_VoxASKResiEnc@12
PUBLIC	??_C@_0DP@DEJNANCD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0DN@JJLBJLFD@?$CIpfASKq?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfASKorig?5?$CB@ ; `string'
EXTRN	__assert:NEAR
EXTRN	_Dim2VectorQuantize@12:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0DP@DEJNANCD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\vqresi.c
CONST	SEGMENT
??_C@_0DP@DEJNANCD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\vqresi.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@JJLBJLFD@?$CIpfASKq?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfASKorig?5?$CB@
CONST	SEGMENT
??_C@_0DN@JJLBJLFD@?$CIpfASKq?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfASKorig?5?$CB@ DB '('
	DB	'pfASKq != NULL) && (pfASKorig != NULL) && (piIndex != NULL)', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxASKResiEnc@12
_TEXT	SEGMENT
_fResi$ = -8
_pfASKq$ = 8
_pfASKorig$ = 12
_piIndex$ = 16
_VoxASKResiEnc@12 PROC NEAR				; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 97   :    float fResi[2];
; 98   : 
; 99   :    assert((pfASKq != NULL) && (pfASKorig != NULL) && (piIndex != NULL));

  00006	83 7d 08 00	 cmp	 DWORD PTR _pfASKq$[ebp], 0
  0000a	74 0c		 je	 SHORT $L935
  0000c	83 7d 0c 00	 cmp	 DWORD PTR _pfASKorig$[ebp], 0
  00010	74 06		 je	 SHORT $L935
  00012	83 7d 10 00	 cmp	 DWORD PTR _piIndex$[ebp], 0
  00016	75 14		 jne	 SHORT $L936
$L935:
  00018	6a 63		 push	 99			; 00000063H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@DEJNANCD@c?3?2xbox?2private?2windows?2directx?2@
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@JJLBJLFD@?$CIpfASKq?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfASKorig?5?$CB@
  00024	e8 00 00 00 00	 call	 __assert
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
$L936:

; 100  : 
; 101  :    /* quantize the residual of ASK[8] and ASK[9] */
; 102  :    fResi[0] = pfASKorig[8] - pfASKq[8];

  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _pfASKorig$[ebp]
  0002f	8b 55 08	 mov	 edx, DWORD PTR _pfASKq$[ebp]
  00032	d9 41 20	 fld	 DWORD PTR [ecx+32]
  00035	d8 62 20	 fsub	 DWORD PTR [edx+32]
  00038	d9 5d f8	 fstp	 DWORD PTR _fResi$[ebp]

; 103  :    fResi[1] = pfASKorig[9] - pfASKq[9];

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _pfASKorig$[ebp]
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _pfASKq$[ebp]
  00041	d9 40 24	 fld	 DWORD PTR [eax+36]
  00044	d8 61 24	 fsub	 DWORD PTR [ecx+36]
  00047	d9 5d fc	 fstp	 DWORD PTR _fResi$[ebp+4]

; 104  :    piIndex[0] = Dim2VectorQuantize(fResi, tabCB_8_9, RES_ASKS_8_9_SIZE);

  0004a	6a 08		 push	 8
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:_tabCB_8_9
  00051	8d 55 f8	 lea	 edx, DWORD PTR _fResi$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _Dim2VectorQuantize@12
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _piIndex$[ebp]
  0005d	89 01		 mov	 DWORD PTR [ecx], eax

; 105  : 
; 106  :    /* quantize the residual of ASK[10] and ASK[11] */
; 107  :    fResi[0] = pfASKorig[10] - pfASKq[10];

  0005f	8b 55 0c	 mov	 edx, DWORD PTR _pfASKorig$[ebp]
  00062	8b 45 08	 mov	 eax, DWORD PTR _pfASKq$[ebp]
  00065	d9 42 28	 fld	 DWORD PTR [edx+40]
  00068	d8 60 28	 fsub	 DWORD PTR [eax+40]
  0006b	d9 5d f8	 fstp	 DWORD PTR _fResi$[ebp]

; 108  :    fResi[1] = pfASKorig[11] - pfASKq[11];

  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _pfASKorig$[ebp]
  00071	8b 55 08	 mov	 edx, DWORD PTR _pfASKq$[ebp]
  00074	d9 41 2c	 fld	 DWORD PTR [ecx+44]
  00077	d8 62 2c	 fsub	 DWORD PTR [edx+44]
  0007a	d9 5d fc	 fstp	 DWORD PTR _fResi$[ebp+4]

; 109  :    piIndex[1] = Dim2VectorQuantize( fResi, tabCB_10_11, RES_ASKS_10_11_SIZE);

  0007d	6a 08		 push	 8
  0007f	68 00 00 00 00	 push	 OFFSET FLAT:_tabCB_10_11
  00084	8d 45 f8	 lea	 eax, DWORD PTR _fResi$[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _Dim2VectorQuantize@12
  0008d	8b 4d 10	 mov	 ecx, DWORD PTR _piIndex$[ebp]
  00090	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 110  : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
_VoxASKResiEnc@12 ENDP
_TEXT	ENDS
PUBLIC	_VoxASKResiDec@8
PUBLIC	??_C@_0CG@IPNDIFAD@?$CIpfASKq?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpiIndex?5?$CB?$DN?5@ ; `string'
EXTRN	_Dim2VectorLUT@16:NEAR
;	COMDAT ??_C@_0CG@IPNDIFAD@?$CIpfASKq?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpiIndex?5?$CB?$DN?5@
CONST	SEGMENT
??_C@_0CG@IPNDIFAD@?$CIpfASKq?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpiIndex?5?$CB?$DN?5@ DB '('
	DB	'pfASKq != NULL) && (piIndex != NULL)', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxASKResiDec@8
_TEXT	SEGMENT
_pfVector$ = -8
_pfASKq$ = 8
_piIndex$ = 12
_VoxASKResiDec@8 PROC NEAR				; COMDAT

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 144  :   float pfVector[2];
; 145  : 
; 146  :   assert((pfASKq != NULL) && (piIndex != NULL));

  00006	83 7d 08 00	 cmp	 DWORD PTR _pfASKq$[ebp], 0
  0000a	74 06		 je	 SHORT $L941
  0000c	83 7d 0c 00	 cmp	 DWORD PTR _piIndex$[ebp], 0
  00010	75 17		 jne	 SHORT $L942
$L941:
  00012	68 92 00 00 00	 push	 146			; 00000092H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@DEJNANCD@c?3?2xbox?2private?2windows?2directx?2@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@IPNDIFAD@?$CIpfASKq?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpiIndex?5?$CB?$DN?5@
  00021	e8 00 00 00 00	 call	 __assert
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
$L942:

; 147  : 
; 148  :   Dim2VectorLUT(piIndex[0], tabCB_8_9, RES_ASKS_8_9_SIZE, pfVector);

  00029	8d 4d f8	 lea	 ecx, DWORD PTR _pfVector$[ebp]
  0002c	51		 push	 ecx
  0002d	6a 08		 push	 8
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:_tabCB_8_9
  00034	8b 55 0c	 mov	 edx, DWORD PTR _piIndex$[ebp]
  00037	8b 02		 mov	 eax, DWORD PTR [edx]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _Dim2VectorLUT@16

; 149  :   pfASKq[8] += pfVector[0];

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _pfASKq$[ebp]
  00042	d9 45 f8	 fld	 DWORD PTR _pfVector$[ebp]
  00045	d8 41 20	 fadd	 DWORD PTR [ecx+32]
  00048	8b 55 08	 mov	 edx, DWORD PTR _pfASKq$[ebp]
  0004b	d9 5a 20	 fstp	 DWORD PTR [edx+32]

; 150  :   pfASKq[9] += pfVector[1];

  0004e	8b 45 08	 mov	 eax, DWORD PTR _pfASKq$[ebp]
  00051	d9 45 fc	 fld	 DWORD PTR _pfVector$[ebp+4]
  00054	d8 40 24	 fadd	 DWORD PTR [eax+36]
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _pfASKq$[ebp]
  0005a	d9 59 24	 fstp	 DWORD PTR [ecx+36]

; 151  : 
; 152  : 
; 153  :   Dim2VectorLUT(piIndex[1], tabCB_10_11, RES_ASKS_10_11_SIZE, pfVector);

  0005d	8d 55 f8	 lea	 edx, DWORD PTR _pfVector$[ebp]
  00060	52		 push	 edx
  00061	6a 08		 push	 8
  00063	68 00 00 00 00	 push	 OFFSET FLAT:_tabCB_10_11
  00068	8b 45 0c	 mov	 eax, DWORD PTR _piIndex$[ebp]
  0006b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 _Dim2VectorLUT@16

; 154  :   pfASKq[10] += pfVector[0];

  00074	8b 55 08	 mov	 edx, DWORD PTR _pfASKq$[ebp]
  00077	d9 45 f8	 fld	 DWORD PTR _pfVector$[ebp]
  0007a	d8 42 28	 fadd	 DWORD PTR [edx+40]
  0007d	8b 45 08	 mov	 eax, DWORD PTR _pfASKq$[ebp]
  00080	d9 58 28	 fstp	 DWORD PTR [eax+40]

; 155  :   pfASKq[11] += pfVector[1];

  00083	8b 4d 08	 mov	 ecx, DWORD PTR _pfASKq$[ebp]
  00086	d9 45 fc	 fld	 DWORD PTR _pfVector$[ebp+4]
  00089	d8 41 2c	 fadd	 DWORD PTR [ecx+44]
  0008c	8b 55 08	 mov	 edx, DWORD PTR _pfASKq$[ebp]
  0008f	d9 5a 2c	 fstp	 DWORD PTR [edx+44]

; 156  : }

  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 08 00	 ret	 8
_VoxASKResiDec@8 ENDP
_TEXT	ENDS
END
