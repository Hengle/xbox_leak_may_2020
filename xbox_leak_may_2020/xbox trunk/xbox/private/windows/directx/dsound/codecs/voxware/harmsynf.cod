; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\harmsynf.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _HarmSynFHTFloat@52
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_fFHTWeights64 DD 03f000d2ar			; 0.500201
	DD	03f0034afr			; 0.500804
	DD	03f0076acr			; 0.501811
	DD	03f00d34cr			; 0.503224
	DD	03f014ad0r			; 0.505048
	DD	03f01dd88r			; 0.507287
	DD	03f028bd9r			; 0.509946
	DD	03f03563cr			; 0.513035
	DD	03f043d3dr			; 0.516559
	DD	03f05417dr			; 0.520531
	DD	03f0663b3r			; 0.524959
	DD	03f07a4abr			; 0.529856
	DD	03f09054ar			; 0.535237
	DD	03f0a868dr			; 0.541116
	DD	03f0c298cr			; 0.547509
	DD	03f0def79r			; 0.554435
	DD	03f0fd9a5r			; 0.561915
	DD	03f11e97er			; 0.569969
	DD	03f142094r			; 0.578622
	DD	03f16809ar			; 0.5879
	DD	03f190b67r			; 0.59783
	DD	03f1bc2fdr			; 0.608444
	DD	03f1ea987r			; 0.619774
	DD	03f21c15fr			; 0.631857
	DD	03f250d11r			; 0.644731
	DD	03f288f5er			; 0.658438
	DD	03f2c4b43r			; 0.673023
	DD	03f3043far			; 0.688537
	DD	03f347d02r			; 0.705032
	DD	03f38fa25r			; 0.722567
	DD	03f3dbf7br			; 0.741203
	DD	03f42d174r			; 0.761009
	DD	03f4834e2r			; 0.782057
	DD	03f4deefar			; 0.804428
	DD	03f540565r			; 0.828207
	DD	03f5a7e49r			; 0.853489
	DD	03f61604fr			; 0.880376
	DD	03f68b2b8r			; 0.908977
	DD	03f707d67r			; 0.939413
	DD	03f78c8efr			; 0.971816
	DD	03f80cf56r			; 1.00633
	DD	03f858466r			; 1.0431
	DD	03f8a8939r			; 1.08231
	DD	03f8fe3e0r			; 1.12414
	DD	03f959b01r			; 1.16879
	DD	03f9bb5e0r			; 1.21649
	DD	03fa23c74r			; 1.26747
	DD	03fa93778r			; 1.32201
	DD	03fb0b083r			; 1.38039
	DD	03fb8b21fr			; 1.44294
	DD	03fc147e7r			; 1.51001
	DD	03fca7ea0r			; 1.58199
	DD	03fd46466r			; 1.65931
	DD	03fdf08car			; 1.74246
	DD	03fea7d07r			; 1.83194
	DD	03ff6d430r			; 1.92835
	DD	0400211b8r			; 2.03233
	DD	040094123r			; 2.1446
	DD	04011056br			; 2.26596
	DD	040196d21r			; 2.39729
	DD	040228885r			; 2.53958
	DD	0402c69bdr			; 2.69395
	DD	04037251fr			; 2.86164
	DD	04042d174r			; 3.04403
_fFHTWeights128 DD 03f00034ar			; 0.50005
	DD	03f000d2ar			; 0.500201
	DD	03f001da0r			; 0.500452
	DD	03f0034afr			; 0.500804
	DD	03f00525cr			; 0.501257
	DD	03f0076acr			; 0.501811
	DD	03f00a1a4r			; 0.502466
	DD	03f00d34cr			; 0.503224
	DD	03f010badr			; 0.504084
	DD	03f014ad0r			; 0.505048
	DD	03f0190bfr			; 0.506115
	DD	03f01dd88r			; 0.507287
	DD	03f023136r			; 0.508563
	DD	03f028bd9r			; 0.509946
	DD	03f02ed80r			; 0.511436
	DD	03f03563cr			; 0.513035
	DD	03f03c620r			; 0.514742
	DD	03f043d3dr			; 0.516559
	DD	03f04bbabr			; 0.518489
	DD	03f05417dr			; 0.520531
	DD	03f05cecdr			; 0.522687
	DD	03f0663b3r			; 0.524959
	DD	03f070049r			; 0.527348
	DD	03f07a4abr			; 0.529856
	DD	03f0850f6r			; 0.532485
	DD	03f09054ar			; 0.535237
	DD	03f09c1c6r			; 0.538113
	DD	03f0a868dr			; 0.541116
	DD	03f0b53c2r			; 0.544247
	DD	03f0c298cr			; 0.547509
	DD	03f0d0811r			; 0.550904
	DD	03f0def79r			; 0.554435
	DD	03f0edff1r			; 0.558105
	DD	03f0fd9a5r			; 0.561915
	DD	03f10dcc4r			; 0.565869
	DD	03f11e97er			; 0.569969
	DD	03f130007r			; 0.574219
	DD	03f142094r			; 0.578622
	DD	03f154b5dr			; 0.583181
	DD	03f16809ar			; 0.5879
	DD	03f17c089r			; 0.592782
	DD	03f190b67r			; 0.59783
	DD	03f1a6178r			; 0.60305
	DD	03f1bc2fdr			; 0.608444
	DD	03f1d303fr			; 0.614017
	DD	03f1ea987r			; 0.619774
	DD	03f202f22r			; 0.625719
	DD	03f21c15fr			; 0.631857
	DD	03f236092r			; 0.638192
	DD	03f250d11r			; 0.644731
	DD	03f26c736r			; 0.651477
	DD	03f288f5er			; 0.658438
	DD	03f2a65ebr			; 0.665618
	DD	03f2c4b43r			; 0.673023
	DD	03f2e3fcer			; 0.680661
	DD	03f3043far			; 0.688537
	DD	03f325839r			; 0.696659
	DD	03f347d02r			; 0.705032
	DD	03f36b2d1r			; 0.713666
	DD	03f38fa25r			; 0.722567
	DD	03f3b5384r			; 0.731743
	DD	03f3dbf7br			; 0.741203
	DD	03f403e98r			; 0.750955
	DD	03f42d174r			; 0.761009
	DD	03f4578acr			; 0.771373
	DD	03f4834e2r			; 0.782057
	DD	03f4b06c1r			; 0.793072
	DD	03f4deefar			; 0.804428
	DD	03f50ee46r			; 0.816136
	DD	03f540565r			; 0.828207
	DD	03f573521r			; 0.840654
	DD	03f5a7e49r			; 0.853489
	DD	03f5de1b7r			; 0.866725
	DD	03f61604fr			; 0.880376
	DD	03f64fafdr			; 0.894455
	DD	03f68b2b8r			; 0.908977
	DD	03f6c8882r			; 0.923958
	DD	03f707d67r			; 0.939413
	DD	03f74927fr			; 0.95536
	DD	03f78c8efr			; 0.971816
	DD	03f7d21e9r			; 0.988799
	DD	03f80cf56r			; 1.00633
	DD	03f832042r			; 1.02442
	DD	03f858466r			; 1.0431
	DD	03f87fc79r			; 1.06239
	DD	03f8a8939r			; 1.08231
	DD	03f8d2b6br			; 1.10289
	DD	03f8fe3e0r			; 1.12414
	DD	03f92b371r			; 1.1461
	DD	03f959b01r			; 1.16879
	DD	03f989b7er			; 1.19225
	DD	03f9bb5e0r			; 1.21649
	DD	03f9eeb2dr			; 1.24155
	DD	03fa23c74r			; 1.26747
	DD	03fa5aad4r			; 1.29428
	DD	03fa93778r			; 1.32201
	DD	03face39ar			; 1.3507
	DD	03fb0b083r			; 1.38039
	DD	03fb49f8cr			; 1.41112
	DD	03fb8b21fr			; 1.44294
	DD	03fbce9b9r			; 1.47588
	DD	03fc147e7r			; 1.51001
	DD	03fc5ce4cr			; 1.54536
	DD	03fca7ea0r			; 1.58199
	DD	03fcf5ab2r			; 1.61996
	DD	03fd46466r			; 1.65931
	DD	03fd99dbbr			; 1.70013
	DD	03fdf08car			; 1.74246
	DD	03fe4a7c8r			; 1.78637
	DD	03fea7d07r			; 1.83194
	DD	03ff08af8r			; 1.87924
	DD	03ff6d430r			; 1.92835
	DD	03ffd5b64r			; 1.97935
	DD	0400211b8r			; 2.03233
	DD	0400597abr			; 2.08738
	DD	040094123r			; 2.1446
	DD	0400d0fccr			; 2.20409
	DD	04011056br			; 2.26596
	DD	0401523dfr			; 2.33031
	DD	040196d21r			; 2.39729
	DD	0401de347r			; 2.467
	DD	040228885r			; 2.53958
	DD	040275f2fr			; 2.61518
	DD	0402c69bdr			; 2.69395
	DD	04031aaccr			; 2.77605
	DD	04037251fr			; 2.86164
	DD	0403cdba4r			; 2.95091
	DD	04042d174r			; 3.04403
CONST	ENDS
PUBLIC	_HarmSynFHTFloat@52
PUBLIC	__real@3f000000
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
EXTRN	_VoxFHTkrnl@32:NEAR
EXTRN	_PolyCycleIntp@24:NEAR
EXTRN	_OlAdd@20:NEAR
EXTRN	_sinTBL:DWORD
EXTRN	_cosTBL:DWORD
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@3f000000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\harmsynf.c
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _HarmSynFHTFloat@52
_TEXT	SEGMENT
tv241 = -1008
tv173 = -1004
tv224 = -1000
tv209 = -996
tv207 = -992
_maxHarm$ = -988
_pfPrevSyn$ = -984
_exp_size$ = -500
_exp_shift$ = -496
_synLEN$ = -492
_fSynBuf$ = -488
_fFHTWeights$ = -4
_pfAmps$ = 8
_piPhases$ = 12
_fPitch$ = 16
_fVPitch$ = 20
_fVPitch_1$ = 24
_fNormPhase$ = 28
_fVoicePhase$ = 32
_fResampRate$ = 36
_nHarm$ = 40
_fPitchCycle$ = 44
_pfOutBuf$ = 48
_frameLEN$ = 52
_olLEN$ = 56
_HarmSynFHTFloat@52 PROC NEAR				; COMDAT

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 03 00
	00		 sub	 esp, 1008		; 000003f0H

; 107  :    STACK_INIT
; 108  :    float  fSynBuf[MAXSYNLEN];  /* scratch */
; 109  :    float  pfPrevSyn[MAXSYNLEN];  /* scratch */
; 110  :    STACK_INIT_END
; 111  :    STACK_ATTACH(float*,fSynBuf)
; 112  :    STACK_ATTACH(float*,pfPrevSyn)
; 113  :    short  synLEN;
; 114  :    float  *fFHTWeights;
; 115  :    short  exp_size;
; 116  :    short  exp_shift;
; 117  :    short  maxHarm;
; 118  : 
; 119  :    STACK_START
; 120  : 
; 121  :    maxHarm = MAXHARM;

  00009	66 c7 85 24 fc
	ff ff 5a 00	 mov	 WORD PTR _maxHarm$[ebp], 90 ; 0000005aH

; 122  : 
; 123  : 
; 124  :    if (maxHarm < 64 )

  00012	0f bf 85 24 fc
	ff ff		 movsx	 eax, WORD PTR _maxHarm$[ebp]
  00019	83 f8 40	 cmp	 eax, 64			; 00000040H
  0001c	7d 27		 jge	 SHORT $L1513

; 125  :    {
; 126  :       fFHTWeights = (float *)fFHTWeights64;

  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fFHTWeights$[ebp], OFFSET FLAT:_fFHTWeights64

; 127  :       exp_shift = 7;

  00025	66 c7 85 10 fe
	ff ff 07 00	 mov	 WORD PTR _exp_shift$[ebp], 7

; 128  :       exp_size = 1<<exp_shift;

  0002e	0f bf 8d 10 fe
	ff ff		 movsx	 ecx, WORD PTR _exp_shift$[ebp]
  00035	ba 01 00 00 00	 mov	 edx, 1
  0003a	d3 e2		 shl	 edx, cl
  0003c	66 89 95 0c fe
	ff ff		 mov	 WORD PTR _exp_size$[ebp], dx

; 129  :    }
; 130  :    else

  00043	eb 25		 jmp	 SHORT $L1515
$L1513:

; 131  :    {
; 132  :       fFHTWeights = (float *)fFHTWeights128;

  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fFHTWeights$[ebp], OFFSET FLAT:_fFHTWeights128

; 133  :       exp_shift = 8;

  0004c	66 c7 85 10 fe
	ff ff 08 00	 mov	 WORD PTR _exp_shift$[ebp], 8

; 134  :       exp_size = 1<<exp_shift;

  00055	0f bf 8d 10 fe
	ff ff		 movsx	 ecx, WORD PTR _exp_shift$[ebp]
  0005c	b8 01 00 00 00	 mov	 eax, 1
  00061	d3 e0		 shl	 eax, cl
  00063	66 89 85 0c fe
	ff ff		 mov	 WORD PTR _exp_size$[ebp], ax
$L1515:

; 135  :    }
; 136  : 
; 137  :  /*---------------------------------------------
; 138  :     Make sure that frameLEN+olLEN is even
; 139  :    ---------------------------------------------*/
; 140  :    if (((olLEN+frameLEN)&1)==1)

  0006a	0f bf 4d 38	 movsx	 ecx, WORD PTR _olLEN$[ebp]
  0006e	0f bf 55 34	 movsx	 edx, WORD PTR _frameLEN$[ebp]
  00072	03 ca		 add	 ecx, edx
  00074	83 e1 01	 and	 ecx, 1
  00077	83 f9 01	 cmp	 ecx, 1
  0007a	75 0c		 jne	 SHORT $L1517

; 141  :       olLEN--;

  0007c	66 8b 45 38	 mov	 ax, WORD PTR _olLEN$[ebp]
  00080	66 2d 01 00	 sub	 ax, 1
  00084	66 89 45 38	 mov	 WORD PTR _olLEN$[ebp], ax
$L1517:

; 142  : 
; 143  :  /*---------------------------------------------
; 144  :     Make sure that frameLEN >= olLEN 
; 145  :    ---------------------------------------------*/
; 146  :    if (olLEN>frameLEN)

  00088	0f bf 4d 38	 movsx	 ecx, WORD PTR _olLEN$[ebp]
  0008c	0f bf 55 34	 movsx	 edx, WORD PTR _frameLEN$[ebp]
  00090	3b ca		 cmp	 ecx, edx
  00092	7e 08		 jle	 SHORT $L1518

; 147  :       olLEN=frameLEN;

  00094	66 8b 45 34	 mov	 ax, WORD PTR _frameLEN$[ebp]
  00098	66 89 45 38	 mov	 WORD PTR _olLEN$[ebp], ax
$L1518:

; 148  : 
; 149  :    synLEN   = olLEN + ((frameLEN-olLEN)>>1);

  0009c	0f bf 4d 38	 movsx	 ecx, WORD PTR _olLEN$[ebp]
  000a0	0f bf 55 34	 movsx	 edx, WORD PTR _frameLEN$[ebp]
  000a4	0f bf 45 38	 movsx	 eax, WORD PTR _olLEN$[ebp]
  000a8	2b d0		 sub	 edx, eax
  000aa	d1 fa		 sar	 edx, 1
  000ac	03 ca		 add	 ecx, edx
  000ae	66 89 8d 14 fe
	ff ff		 mov	 WORD PTR _synLEN$[ebp], cx

; 150  : 
; 151  :  /*----------------------------------------------------
; 152  :     Perform the synthesis (for now, use either 
; 153  :     sum of sinusoids or FHT )
; 154  :    ----------------------------------------------------*/ 
; 155  :    *fNormPhase = PolyCycleIntp(pfPrevSyn, (int)synLEN, fPitchCycle+PP_DELAY,
; 156  :                                (int)exp_shift, *fResampRate, *fNormPhase);

  000b5	8b 4d 1c	 mov	 ecx, DWORD PTR _fNormPhase$[ebp]
  000b8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ba	52		 push	 edx
  000bb	8b 45 24	 mov	 eax, DWORD PTR _fResampRate$[ebp]
  000be	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c0	51		 push	 ecx
  000c1	0f bf 95 10 fe
	ff ff		 movsx	 edx, WORD PTR _exp_shift$[ebp]
  000c8	52		 push	 edx
  000c9	8b 45 2c	 mov	 eax, DWORD PTR _fPitchCycle$[ebp]
  000cc	83 c0 04	 add	 eax, 4
  000cf	50		 push	 eax
  000d0	0f bf 8d 14 fe
	ff ff		 movsx	 ecx, WORD PTR _synLEN$[ebp]
  000d7	51		 push	 ecx
  000d8	8d 95 28 fc ff
	ff		 lea	 edx, DWORD PTR _pfPrevSyn$[ebp]
  000de	52		 push	 edx
  000df	e8 00 00 00 00	 call	 _PolyCycleIntp@24
  000e4	8b 45 1c	 mov	 eax, DWORD PTR _fNormPhase$[ebp]
  000e7	d9 18		 fstp	 DWORD PTR [eax]

; 157  : 
; 158  :    VoxFHTkrnl(pfAmps, piPhases, (int)nHarm, fPitchCycle+1, 
; 159  :               (int) exp_shift, fFHTWeights, sinTBL, cosTBL);

  000e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _cosTBL
  000ef	51		 push	 ecx
  000f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sinTBL
  000f6	52		 push	 edx
  000f7	8b 45 fc	 mov	 eax, DWORD PTR _fFHTWeights$[ebp]
  000fa	50		 push	 eax
  000fb	0f bf 8d 10 fe
	ff ff		 movsx	 ecx, WORD PTR _exp_shift$[ebp]
  00102	51		 push	 ecx
  00103	8b 55 2c	 mov	 edx, DWORD PTR _fPitchCycle$[ebp]
  00106	83 c2 04	 add	 edx, 4
  00109	52		 push	 edx
  0010a	0f bf 45 28	 movsx	 eax, WORD PTR _nHarm$[ebp]
  0010e	50		 push	 eax
  0010f	8b 4d 0c	 mov	 ecx, DWORD PTR _piPhases$[ebp]
  00112	51		 push	 ecx
  00113	8b 55 08	 mov	 edx, DWORD PTR _pfAmps$[ebp]
  00116	52		 push	 edx
  00117	e8 00 00 00 00	 call	 _VoxFHTkrnl@32

; 160  : 
; 161  : /*--------------------------------------------------
; 162  :    Now sample the pitch epoch using a polyphase 
; 163  :    filter to get our waveform ...
; 164  :   --------------------------------------------------*/
; 165  :    *fResampRate = (float)(exp_size)/fPitch;

  0011c	0f bf 85 0c fe
	ff ff		 movsx	 eax, WORD PTR _exp_size$[ebp]
  00123	89 85 20 fc ff
	ff		 mov	 DWORD PTR tv207[ebp], eax
  00129	db 85 20 fc ff
	ff		 fild	 DWORD PTR tv207[ebp]
  0012f	d8 75 10	 fdiv	 DWORD PTR _fPitch$[ebp]
  00132	8b 4d 24	 mov	 ecx, DWORD PTR _fResampRate$[ebp]
  00135	d9 19		 fstp	 DWORD PTR [ecx]

; 166  : 
; 167  :    *fNormPhase = *fVoicePhase + (float)(synLEN-olLEN)/fVPitch_1;

  00137	0f bf 95 14 fe
	ff ff		 movsx	 edx, WORD PTR _synLEN$[ebp]
  0013e	0f bf 45 38	 movsx	 eax, WORD PTR _olLEN$[ebp]
  00142	2b d0		 sub	 edx, eax
  00144	89 95 1c fc ff
	ff		 mov	 DWORD PTR tv209[ebp], edx
  0014a	db 85 1c fc ff
	ff		 fild	 DWORD PTR tv209[ebp]
  00150	d8 75 18	 fdiv	 DWORD PTR _fVPitch_1$[ebp]
  00153	8b 4d 20	 mov	 ecx, DWORD PTR _fVoicePhase$[ebp]
  00156	d8 01		 fadd	 DWORD PTR [ecx]
  00158	8b 55 1c	 mov	 edx, DWORD PTR _fNormPhase$[ebp]
  0015b	d9 1a		 fstp	 DWORD PTR [edx]

; 168  :    *fNormPhase *= (fVPitch/fPitch);

  0015d	d9 45 14	 fld	 DWORD PTR _fVPitch$[ebp]
  00160	d8 75 10	 fdiv	 DWORD PTR _fPitch$[ebp]
  00163	8b 45 1c	 mov	 eax, DWORD PTR _fNormPhase$[ebp]
  00166	d8 08		 fmul	 DWORD PTR [eax]
  00168	8b 4d 1c	 mov	 ecx, DWORD PTR _fNormPhase$[ebp]
  0016b	d9 19		 fstp	 DWORD PTR [ecx]

; 169  : 
; 170  :    *fNormPhase = PolyCycleIntp(fSynBuf, (int)synLEN, fPitchCycle+PP_DELAY,
; 171  :                                (int)exp_shift, *fResampRate, *fNormPhase);

  0016d	8b 55 1c	 mov	 edx, DWORD PTR _fNormPhase$[ebp]
  00170	8b 02		 mov	 eax, DWORD PTR [edx]
  00172	50		 push	 eax
  00173	8b 4d 24	 mov	 ecx, DWORD PTR _fResampRate$[ebp]
  00176	8b 11		 mov	 edx, DWORD PTR [ecx]
  00178	52		 push	 edx
  00179	0f bf 85 10 fe
	ff ff		 movsx	 eax, WORD PTR _exp_shift$[ebp]
  00180	50		 push	 eax
  00181	8b 4d 2c	 mov	 ecx, DWORD PTR _fPitchCycle$[ebp]
  00184	83 c1 04	 add	 ecx, 4
  00187	51		 push	 ecx
  00188	0f bf 95 14 fe
	ff ff		 movsx	 edx, WORD PTR _synLEN$[ebp]
  0018f	52		 push	 edx
  00190	8d 85 18 fe ff
	ff		 lea	 eax, DWORD PTR _fSynBuf$[ebp]
  00196	50		 push	 eax
  00197	e8 00 00 00 00	 call	 _PolyCycleIntp@24
  0019c	8b 4d 1c	 mov	 ecx, DWORD PTR _fNormPhase$[ebp]
  0019f	d9 19		 fstp	 DWORD PTR [ecx]

; 172  : 
; 173  :    *fVoicePhase += (float)frameLEN/((fVPitch+fVPitch_1)*0.5F);

  001a1	0f bf 55 34	 movsx	 edx, WORD PTR _frameLEN$[ebp]
  001a5	89 95 18 fc ff
	ff		 mov	 DWORD PTR tv224[ebp], edx
  001ab	db 85 18 fc ff
	ff		 fild	 DWORD PTR tv224[ebp]
  001b1	d9 45 14	 fld	 DWORD PTR _fVPitch$[ebp]
  001b4	d8 45 18	 fadd	 DWORD PTR _fVPitch_1$[ebp]
  001b7	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  001bd	de f9		 fdivp	 ST(1), ST(0)
  001bf	8b 45 20	 mov	 eax, DWORD PTR _fVoicePhase$[ebp]
  001c2	d8 00		 fadd	 DWORD PTR [eax]
  001c4	8b 4d 20	 mov	 ecx, DWORD PTR _fVoicePhase$[ebp]
  001c7	d9 19		 fstp	 DWORD PTR [ecx]

; 174  :    *fVoicePhase -= (float)(VoxFLOOR(*fVoicePhase)); /* mod phase to get fractional part */

  001c9	8b 55 20	 mov	 edx, DWORD PTR _fVoicePhase$[ebp]
  001cc	d9 02		 fld	 DWORD PTR [edx]
  001ce	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  001d4	df e0		 fnstsw	 ax
  001d6	f6 c4 01	 test	 ah, 1
  001d9	75 0d		 jne	 SHORT $L1539
  001db	8b 45 20	 mov	 eax, DWORD PTR _fVoicePhase$[ebp]
  001de	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e0	89 8d 14 fc ff
	ff		 mov	 DWORD PTR tv173[ebp], ecx
  001e6	eb 11		 jmp	 SHORT $L1540
$L1539:
  001e8	8b 55 20	 mov	 edx, DWORD PTR _fVoicePhase$[ebp]
  001eb	d9 02		 fld	 DWORD PTR [edx]
  001ed	d8 25 00 00 00
	00		 fsub	 DWORD PTR __real@3f800000
  001f3	d9 9d 14 fc ff
	ff		 fstp	 DWORD PTR tv173[ebp]
$L1540:
  001f9	d9 85 14 fc ff
	ff		 fld	 DWORD PTR tv173[ebp]
  001ff	e8 00 00 00 00	 call	 __ftol2
  00204	89 85 10 fc ff
	ff		 mov	 DWORD PTR tv241[ebp], eax
  0020a	db 85 10 fc ff
	ff		 fild	 DWORD PTR tv241[ebp]
  00210	8b 45 20	 mov	 eax, DWORD PTR _fVoicePhase$[ebp]
  00213	d8 28		 fsubr	 DWORD PTR [eax]
  00215	8b 4d 20	 mov	 ecx, DWORD PTR _fVoicePhase$[ebp]
  00218	d9 19		 fstp	 DWORD PTR [ecx]

; 175  : 
; 176  :  /*----------------------------------------------------
; 177  :      Do overlap-add of buffers ...
; 178  :    ----------------------------------------------------*/
; 179  :    OlAdd(pfPrevSyn, fSynBuf, (const int) olLEN, (const int) frameLEN, pfOutBuf);

  0021a	8b 55 30	 mov	 edx, DWORD PTR _pfOutBuf$[ebp]
  0021d	52		 push	 edx
  0021e	0f bf 45 34	 movsx	 eax, WORD PTR _frameLEN$[ebp]
  00222	50		 push	 eax
  00223	0f bf 4d 38	 movsx	 ecx, WORD PTR _olLEN$[ebp]
  00227	51		 push	 ecx
  00228	8d 95 18 fe ff
	ff		 lea	 edx, DWORD PTR _fSynBuf$[ebp]
  0022e	52		 push	 edx
  0022f	8d 85 28 fc ff
	ff		 lea	 eax, DWORD PTR _pfPrevSyn$[ebp]
  00235	50		 push	 eax
  00236	e8 00 00 00 00	 call	 _OlAdd@20

; 180  : 
; 181  :    STACK_END
; 182  : }

  0023b	8b e5		 mov	 esp, ebp
  0023d	5d		 pop	 ebp
  0023e	c2 34 00	 ret	 52			; 00000034H
_HarmSynFHTFloat@52 ENDP
_TEXT	ENDS
END
