; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\exphase.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@PPFCNDAK@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@EMJLGOOG@?$CIpfMinPhase?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfVEVPh@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _ExcitationPhase@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_ExcitationPhase@24
PUBLIC	??_C@_0EA@PPFCNDAK@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CN@EMJLGOOG@?$CIpfMinPhase?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfVEVPh@ ; `string'
EXTRN	__assert:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0EA@PPFCNDAK@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\exphase.c
CONST	SEGMENT
??_C@_0EA@PPFCNDAK@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\exphase.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EMJLGOOG@?$CIpfMinPhase?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfVEVPh@
CONST	SEGMENT
??_C@_0CN@EMJLGOOG@?$CIpfMinPhase?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfVEVPh@ DB '('
	DB	'pfMinPhase != NULL) && (pfVEVPhase != NULL)', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _ExcitationPhase@24
_TEXT	SEGMENT
_fLinearPhase$ = -8
_i$ = -4
_fOnsetPhase$ = 8
_fBeta$ = 12
_pfVEVPhase$ = 16
_pfMinPhase$ = 20
_iNpeaks$ = 24
_iBasePeaks$ = 28
_ExcitationPhase@24 PROC NEAR				; COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 75   :    int   i;
; 76   :    float fLinearPhase;
; 77   :    
; 78   :    assert((pfMinPhase != NULL) && (pfVEVPhase != NULL));

  00007	83 7d 14 00	 cmp	 DWORD PTR _pfMinPhase$[ebp], 0
  0000b	74 06		 je	 SHORT $L870
  0000d	83 7d 10 00	 cmp	 DWORD PTR _pfVEVPhase$[ebp], 0
  00011	75 14		 jne	 SHORT $L871
$L870:
  00013	6a 4e		 push	 78			; 0000004eH
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@PPFCNDAK@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@EMJLGOOG@?$CIpfMinPhase?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfVEVPh@
  0001f	e8 00 00 00 00	 call	 __assert
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
$L871:

; 79   : 
; 80   :  /*--------------------------------------------------------------------------
; 81   :    Compute the linear phase component with phase offset
; 82   :  --------------------------------------------------------------------------*/
; 83   :    fLinearPhase = fOnsetPhase + fBeta;

  00027	d9 45 08	 fld	 DWORD PTR _fOnsetPhase$[ebp]
  0002a	d8 45 0c	 fadd	 DWORD PTR _fBeta$[ebp]
  0002d	d9 5d f8	 fstp	 DWORD PTR _fLinearPhase$[ebp]

; 84   :    for (i=0; i<iNpeaks; i++)

  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00037	eb 09		 jmp	 SHORT $L855
$L856:
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0003c	83 c1 01	 add	 ecx, 1
  0003f	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L855:
  00042	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00045	3b 55 18	 cmp	 edx, DWORD PTR _iNpeaks$[ebp]
  00048	7d 20		 jge	 SHORT $L857

; 85   :    {     
; 86   :       pfMinPhase[i] += fLinearPhase;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004d	8b 4d 14	 mov	 ecx, DWORD PTR _pfMinPhase$[ebp]
  00050	d9 45 f8	 fld	 DWORD PTR _fLinearPhase$[ebp]
  00053	d8 04 81	 fadd	 DWORD PTR [ecx+eax*4]
  00056	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00059	8b 45 14	 mov	 eax, DWORD PTR _pfMinPhase$[ebp]
  0005c	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 87   :       fLinearPhase += fOnsetPhase;

  0005f	d9 45 f8	 fld	 DWORD PTR _fLinearPhase$[ebp]
  00062	d8 45 08	 fadd	 DWORD PTR _fOnsetPhase$[ebp]
  00065	d9 5d f8	 fstp	 DWORD PTR _fLinearPhase$[ebp]

; 88   :    }

  00068	eb cf		 jmp	 SHORT $L856
$L857:

; 89   : 
; 90   : 
; 91   :  /*--------------------------------------------------------------------------
; 92   :    Append the quantized phase residuals to the linear phase if iBasePeaks > 0
; 93   :  --------------------------------------------------------------------------*/
; 94   :    for (i=0; i<iBasePeaks; i++)

  0006a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00071	eb 09		 jmp	 SHORT $L858
$L859:
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00076	83 c1 01	 add	 ecx, 1
  00079	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L858:
  0007c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0007f	3b 55 1c	 cmp	 edx, DWORD PTR _iBasePeaks$[ebp]
  00082	7d 1d		 jge	 SHORT $L847

; 95   :       pfMinPhase[i] += pfVEVPhase[i];

  00084	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00087	8b 4d 14	 mov	 ecx, DWORD PTR _pfMinPhase$[ebp]
  0008a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0008d	8b 75 10	 mov	 esi, DWORD PTR _pfVEVPhase$[ebp]
  00090	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  00093	d8 04 96	 fadd	 DWORD PTR [esi+edx*4]
  00096	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00099	8b 4d 14	 mov	 ecx, DWORD PTR _pfMinPhase$[ebp]
  0009c	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]
  0009f	eb d2		 jmp	 SHORT $L859
$L847:

; 96   : 
; 97   : }

  000a1	5e		 pop	 esi
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 18 00	 ret	 24			; 00000018H
_ExcitationPhase@24 ENDP
_TEXT	ENDS
END
