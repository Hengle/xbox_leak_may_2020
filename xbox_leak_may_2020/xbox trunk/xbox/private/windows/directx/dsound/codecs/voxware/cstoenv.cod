; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\cstoenv.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@HALJOELA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@BNFKLFLL@pfSW?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCs?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxCsToEnv@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxCsToEnv@16
PUBLIC	??_C@_0EA@HALJOELA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BN@BNFKLFLL@pfSW?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCs?5?$CB?$DN?5NULL?$AA@ ; `string'
PUBLIC	__real@3fd8b90c
PUBLIC	__real@3e9d1bd0
EXTRN	__assert:NEAR
EXTRN	_memset:NEAR
EXTRN	_vox_nspsRealFft@12:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0EA@HALJOELA@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\cstoenv.c
CONST	SEGMENT
??_C@_0EA@HALJOELA@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\cstoenv.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BNFKLFLL@pfSW?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCs?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BN@BNFKLFLL@pfSW?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCs?5?$CB?$DN?5NULL?$AA@ DB 'p'
	DB	'fSW != NULL && pfCs != NULL', 00H		; `string'
CONST	ENDS
;	COMDAT __real@3fd8b90c
CONST	SEGMENT
__real@3fd8b90c DD 03fd8b90cr			; 1.69315
CONST	ENDS
;	COMDAT __real@3e9d1bd0
CONST	SEGMENT
__real@3e9d1bd0 DD 03e9d1bd0r			; 0.306853
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxCsToEnv@16
_TEXT	SEGMENT
_j$ = -12
_iLfft$ = -8
_i$ = -4
_pfCs$ = 8
_iOrderCepstral$ = 12
_iLogLfft$ = 16
_pfSW$ = 20
_VoxCsToEnv@16 PROC NEAR				; COMDAT

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 94   :    int   i, j;
; 95   :    int   iLfft;
; 96   : 
; 97   :    assert(pfSW != NULL && pfCs != NULL);

  00006	83 7d 14 00	 cmp	 DWORD PTR _pfSW$[ebp], 0
  0000a	74 06		 je	 SHORT $L898
  0000c	83 7d 08 00	 cmp	 DWORD PTR _pfCs$[ebp], 0
  00010	75 14		 jne	 SHORT $L899
$L898:
  00012	6a 61		 push	 97			; 00000061H
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HALJOELA@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@BNFKLFLL@pfSW?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCs?5?$CB?$DN?5NULL?$AA@
  0001e	e8 00 00 00 00	 call	 __assert
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
$L899:

; 98   : 
; 99   :    /* FFT size */
; 100  : 
; 101  :    iLfft = (1<<iLogLfft);

  00026	ba 01 00 00 00	 mov	 edx, 1
  0002b	8b 4d 10	 mov	 ecx, DWORD PTR _iLogLfft$[ebp]
  0002e	d3 e2		 shl	 edx, cl
  00030	89 55 f8	 mov	 DWORD PTR _iLfft$[ebp], edx

; 102  : 
; 103  :    
; 104  :    /* initialize the memory */
; 105  : 
; 106  :    memset(pfSW, 0, sizeof(float)*(iLfft+2));

  00033	8b 45 f8	 mov	 eax, DWORD PTR _iLfft$[ebp]
  00036	8d 0c 85 08 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+8]
  0003d	51		 push	 ecx
  0003e	6a 00		 push	 0
  00040	8b 55 14	 mov	 edx, DWORD PTR _pfSW$[ebp]
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 _memset
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 107  : 
; 108  :    
; 109  :    /* put cepstral coefficients to buffer before taking real FFT */
; 110  : 
; 111  :    pfSW[0] = pfCs[0];

  0004c	8b 45 14	 mov	 eax, DWORD PTR _pfSW$[ebp]
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _pfCs$[ebp]
  00052	8b 11		 mov	 edx, DWORD PTR [ecx]
  00054	89 10		 mov	 DWORD PTR [eax], edx

; 112  :   
; 113  :    for(i = 1,j = iLfft - 1;i < iOrderCepstral;i++, j--)

  00056	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0005d	8b 45 f8	 mov	 eax, DWORD PTR _iLfft$[ebp]
  00060	83 e8 01	 sub	 eax, 1
  00063	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
  00066	eb 12		 jmp	 SHORT $L886
$L887:
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0006b	83 c1 01	 add	 ecx, 1
  0006e	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  00071	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  00074	83 ea 01	 sub	 edx, 1
  00077	89 55 f4	 mov	 DWORD PTR _j$[ebp], edx
$L886:
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0007d	3b 45 0c	 cmp	 eax, DWORD PTR _iOrderCepstral$[ebp]
  00080	7d 32		 jge	 SHORT $L888

; 114  :    {
; 115  :       /*--------------------------------------------------
; 116  :         This code used to be written as:
; 117  : 
; 118  :            fEvenPart = pfCs[i];
; 119  :            fOddPart = pfCs[i]*LN_OF_2;
; 120  :            pfSW[i] = fEvenPart + fOddPart;
; 121  :            pfSW[j] = fEvenPart - fOddPart;
; 122  : 
; 123  :          which might be better for fixed point.
; 124  :       --------------------------------------------------*/
; 125  : 
; 126  :       pfSW[i] = pfCs[i] * (1.0F + LN_OF_2);

  00082	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00085	8b 55 08	 mov	 edx, DWORD PTR _pfCs$[ebp]
  00088	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  0008b	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3fd8b90c
  00091	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00094	8b 4d 14	 mov	 ecx, DWORD PTR _pfSW$[ebp]
  00097	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 127  :       pfSW[j] = pfCs[i] * (1.0F - LN_OF_2);

  0009a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0009d	8b 45 08	 mov	 eax, DWORD PTR _pfCs$[ebp]
  000a0	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  000a3	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3e9d1bd0
  000a9	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  000ac	8b 55 14	 mov	 edx, DWORD PTR _pfSW$[ebp]
  000af	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 128  :    }

  000b2	eb b4		 jmp	 SHORT $L887
$L888:

; 129  : 
; 130  :    /* Take the inter-leaved formated real FFT */
; 131  :    VoxRealFft(pfSW, iLogLfft);

  000b4	6a 01		 push	 1
  000b6	8b 45 10	 mov	 eax, DWORD PTR _iLogLfft$[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d 14	 mov	 ecx, DWORD PTR _pfSW$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _vox_nspsRealFft@12

; 132  : }

  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c2 10 00	 ret	 16			; 00000010H
_VoxCsToEnv@16 ENDP
_TEXT	ENDS
END
