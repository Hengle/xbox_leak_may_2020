; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\hamming.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _hamming@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _hamming_half@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _hamming_right@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_hamming@8
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@401921fb54442d18
PUBLIC	__real@3fdd70a3d70a3d71
PUBLIC	__real@3fe147ae147ae148
EXTRN	_cos:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@3ff0000000000000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\hamming.c
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@401921fb54442d18
CONST	SEGMENT
__real@401921fb54442d18 DQ 0401921fb54442d18r	; 6.28319
CONST	ENDS
;	COMDAT __real@3fdd70a3d70a3d71
CONST	SEGMENT
__real@3fdd70a3d70a3d71 DQ 03fdd70a3d70a3d71r	; 0.46
CONST	ENDS
;	COMDAT __real@3fe147ae147ae148
CONST	SEGMENT
__real@3fe147ae147ae148 DQ 03fe147ae147ae148r	; 0.54
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _hamming@8
_TEXT	SEGMENT
tv82 = -20
_tmp$ = -16
_i$ = -4
_win$ = 8
_N$ = 12
_hamming@8 PROC NEAR					; COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 27   :   double tmp = 2.0 * M_PI /  ((double)N - 1.0);

  00006	0f bf 45 0c	 movsx	 eax, WORD PTR _N$[ebp]
  0000a	89 45 ec	 mov	 DWORD PTR tv82[ebp], eax
  0000d	db 45 ec	 fild	 DWORD PTR tv82[ebp]
  00010	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  00016	dc 3d 00 00 00
	00		 fdivr	 QWORD PTR __real@401921fb54442d18
  0001c	dd 5d f0	 fstp	 QWORD PTR _tmp$[ebp]

; 28   :   int i;
; 29   :   
; 30   :   for (i = 0; i < N; i++)

  0001f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00026	eb 09		 jmp	 SHORT $L600
$L601:
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0002b	83 c1 01	 add	 ecx, 1
  0002e	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L600:
  00031	0f bf 55 0c	 movsx	 edx, WORD PTR _N$[ebp]
  00035	39 55 fc	 cmp	 DWORD PTR _i$[ebp], edx
  00038	7d 2b		 jge	 SHORT $L596

; 31   :     win[i] = (float)(0.54 - 0.46 * cos(tmp * (double)i));

  0003a	db 45 fc	 fild	 DWORD PTR _i$[ebp]
  0003d	dc 4d f0	 fmul	 QWORD PTR _tmp$[ebp]
  00040	83 ec 08	 sub	 esp, 8
  00043	dd 1c 24	 fstp	 QWORD PTR [esp]
  00046	e8 00 00 00 00	 call	 _cos
  0004b	83 c4 08	 add	 esp, 8
  0004e	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fdd70a3d70a3d71
  00054	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@3fe147ae147ae148
  0005a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _win$[ebp]
  00060	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]
  00063	eb c3		 jmp	 SHORT $L601
$L596:

; 32   : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
_hamming@8 ENDP
_TEXT	ENDS
PUBLIC	_hamming_half@8
; Function compile flags: /Odt
;	COMDAT _hamming_half@8
_TEXT	SEGMENT
tv85 = -24
_half_N$ = -20
_tmp$ = -16
_i$ = -4
_win$ = 8
_N$ = 12
_hamming_half@8 PROC NEAR				; COMDAT

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 37   :   double tmp = 2.0 * M_PI /  ((double)N - 1.0);

  00006	0f bf 45 0c	 movsx	 eax, WORD PTR _N$[ebp]
  0000a	89 45 e8	 mov	 DWORD PTR tv85[ebp], eax
  0000d	db 45 e8	 fild	 DWORD PTR tv85[ebp]
  00010	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  00016	dc 3d 00 00 00
	00		 fdivr	 QWORD PTR __real@401921fb54442d18
  0001c	dd 5d f0	 fstp	 QWORD PTR _tmp$[ebp]

; 38   :   short half_N = (short)(N >> 1);

  0001f	0f bf 4d 0c	 movsx	 ecx, WORD PTR _N$[ebp]
  00023	d1 f9		 sar	 ecx, 1
  00025	66 89 4d ec	 mov	 WORD PTR _half_N$[ebp], cx

; 39   :   int i;
; 40   : 
; 41   :   for (i = 0; i < half_N; i++)

  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00030	eb 09		 jmp	 SHORT $L615
$L616:
  00032	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00035	83 c2 01	 add	 edx, 1
  00038	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L615:
  0003b	0f bf 45 ec	 movsx	 eax, WORD PTR _half_N$[ebp]
  0003f	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00042	7d 2b		 jge	 SHORT $L609

; 42   :     win[i] = (float)(0.54 - 0.46 * cos(tmp * (double)i));

  00044	db 45 fc	 fild	 DWORD PTR _i$[ebp]
  00047	dc 4d f0	 fmul	 QWORD PTR _tmp$[ebp]
  0004a	83 ec 08	 sub	 esp, 8
  0004d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00050	e8 00 00 00 00	 call	 _cos
  00055	83 c4 08	 add	 esp, 8
  00058	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fdd70a3d70a3d71
  0005e	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@3fe147ae147ae148
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00067	8b 55 08	 mov	 edx, DWORD PTR _win$[ebp]
  0006a	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]
  0006d	eb c3		 jmp	 SHORT $L616
$L609:

; 43   : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
_hamming_half@8 ENDP
_TEXT	ENDS
PUBLIC	_hamming_right@8
; Function compile flags: /Odt
;	COMDAT _hamming_right@8
_TEXT	SEGMENT
tv86 = -24
_half_N$ = -20
_tmp$ = -16
_i$ = -4
_win$ = 8
_N$ = 12
_hamming_right@8 PROC NEAR				; COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 49   :   double tmp = 2.0 * M_PI /  ((double)N - 1.0);

  00006	0f bf 45 0c	 movsx	 eax, WORD PTR _N$[ebp]
  0000a	89 45 e8	 mov	 DWORD PTR tv86[ebp], eax
  0000d	db 45 e8	 fild	 DWORD PTR tv86[ebp]
  00010	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  00016	dc 3d 00 00 00
	00		 fdivr	 QWORD PTR __real@401921fb54442d18
  0001c	dd 5d f0	 fstp	 QWORD PTR _tmp$[ebp]

; 50   :   short half_N = (short)((N+1) >> 1);

  0001f	0f bf 4d 0c	 movsx	 ecx, WORD PTR _N$[ebp]
  00023	83 c1 01	 add	 ecx, 1
  00026	d1 f9		 sar	 ecx, 1
  00028	66 89 4d ec	 mov	 WORD PTR _half_N$[ebp], cx

; 51   :   int i;
; 52   : 
; 53   :   for (i = half_N; i < N; i++)

  0002c	0f bf 55 ec	 movsx	 edx, WORD PTR _half_N$[ebp]
  00030	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  00033	eb 09		 jmp	 SHORT $L630
$L631:
  00035	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00038	83 c0 01	 add	 eax, 1
  0003b	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L630:
  0003e	0f bf 4d 0c	 movsx	 ecx, WORD PTR _N$[ebp]
  00042	39 4d fc	 cmp	 DWORD PTR _i$[ebp], ecx
  00045	7d 30		 jge	 SHORT $L624

; 54   :     *win++ = (float)(0.54 - 0.46 * cos(tmp * (double)i));

  00047	db 45 fc	 fild	 DWORD PTR _i$[ebp]
  0004a	dc 4d f0	 fmul	 QWORD PTR _tmp$[ebp]
  0004d	83 ec 08	 sub	 esp, 8
  00050	dd 1c 24	 fstp	 QWORD PTR [esp]
  00053	e8 00 00 00 00	 call	 _cos
  00058	83 c4 08	 add	 esp, 8
  0005b	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fdd70a3d70a3d71
  00061	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@3fe147ae147ae148
  00067	8b 55 08	 mov	 edx, DWORD PTR _win$[ebp]
  0006a	d9 1a		 fstp	 DWORD PTR [edx]
  0006c	8b 45 08	 mov	 eax, DWORD PTR _win$[ebp]
  0006f	83 c0 04	 add	 eax, 4
  00072	89 45 08	 mov	 DWORD PTR _win$[ebp], eax
  00075	eb be		 jmp	 SHORT $L631
$L624:

; 55   : }

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
_hamming_right@8 ENDP
_TEXT	ENDS
END
