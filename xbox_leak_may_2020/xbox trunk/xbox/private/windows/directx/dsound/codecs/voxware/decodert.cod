; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\decodert.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0L@LKCHAPDB@pre?5decode?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@OHEIPEEH@post?5decode?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04HCCHHEEF@rate?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@KGCNFMNN@frame?5length?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@LDAOAEAG@write?5flag?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxDecodeRT@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxInitDecodeRT@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxFreeDecodeRT@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SmoothSpectrumInNoise@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_cfInvRate8k DD	03903126fr			; 0.000125
CONST	ENDS
PUBLIC	_VoxDecodeRT@8
PUBLIC	_SmoothSpectrumInNoise@16
EXTRN	_VoxSetup@20:NEAR
EXTRN	_VoxUpdateSubframe@4:NEAR
EXTRN	_VoxOutputManager@12:NEAR
EXTRN	_VoxSws@40:NEAR
EXTRN	_getnHarm@4:NEAR
EXTRN	__fltused:NEAR
EXTRN	_VoxLspToAsEven@16:NEAR
EXTRN	_vemServiceState@4:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
EXTRN	_VoxEnhance@20:NEAR
EXTRN	_VoxLPCSyn@16:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\decodert.c
;	COMDAT _VoxDecodeRT@8
_TEXT	SEGMENT
_SubFrameParam_mblk$ = -832
_lpc$ = -828
_Synthesis_mblk$ = -784
_pDecMemBlk$ = -780
_OutBufFloat$ = -776
_Param_mblk$ = -12
_PrevFrameParam_mblk$ = -8
_nHarm$ = -4
_pPCMBuffer$ = 8
_pMemBlkD$ = 12
_VoxDecodeRT@8 PROC NEAR				; COMDAT

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 40 03 00
	00		 sub	 esp, 832		; 00000340H

; 53   :    DEC_MEM_BLK* pDecMemBlk=(DEC_MEM_BLK*)pMemBlkD;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _pMemBlkD$[ebp]
  0000c	89 85 f4 fc ff
	ff		 mov	 DWORD PTR _pDecMemBlk$[ebp], eax

; 54   :    PARAM	*Param_mblk = (PARAM *)(pDecMemBlk->Param_mblk);

  00012	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _pDecMemBlk$[ebp]
  00018	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0001b	89 55 f4	 mov	 DWORD PTR _Param_mblk$[ebp], edx

; 55   :    Synthesis *Synthesis_mblk = (Synthesis *)(pDecMemBlk->Synthesis_mblk);

  0001e	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _pDecMemBlk$[ebp]
  00024	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00027	89 8d f0 fc ff
	ff		 mov	 DWORD PTR _Synthesis_mblk$[ebp], ecx

; 56   :    SubFrameParam *SubFrameParam_mblk = (SubFrameParam *)(pDecMemBlk->SubFrameParam_mblk);

  0002d	8b 95 f4 fc ff
	ff		 mov	 edx, DWORD PTR _pDecMemBlk$[ebp]
  00033	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00036	89 85 c0 fc ff
	ff		 mov	 DWORD PTR _SubFrameParam_mblk$[ebp], eax

; 57   :    PrevFrameParam *PrevFrameParam_mblk = (PrevFrameParam *)(pDecMemBlk->PrevFrameParam_mblk);

  0003c	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _pDecMemBlk$[ebp]
  00042	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00045	89 55 f8	 mov	 DWORD PTR _PrevFrameParam_mblk$[ebp], edx

; 58   : STACK_INIT
; 59   :    float lpc[LPC_ORDER+1];
; 60   :    float OutBufFloat[FRAME_LEN+LPC_ORDER];
; 61   : STACK_INIT_END
; 62   : 
; 63   : STACK_ATTACH(float *, lpc)
; 64   : STACK_ATTACH(float *, OutBufFloat)
; 65   : 
; 66   :    short nHarm;
; 67   : 
; 68   : STACK_START
; 69   : 
; 70   : /* service the "pre decode" state */
; 71   :    vemServiceState(pDecMemBlk->vemKeyPreDecode);

  00048	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _pDecMemBlk$[ebp]
  0004e	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _vemServiceState@4

; 72   : 
; 73   :    VoxSetup(STACK_S Param_mblk, SubFrameParam_mblk, PrevFrameParam_mblk, 
; 74   :             pDecMemBlk->Warp, &(pDecMemBlk->unpackFLAG));

  00057	8b 95 f4 fc ff
	ff		 mov	 edx, DWORD PTR _pDecMemBlk$[ebp]
  0005d	83 c2 3d	 add	 edx, 61			; 0000003dH
  00060	52		 push	 edx
  00061	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _pDecMemBlk$[ebp]
  00067	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0006a	51		 push	 ecx
  0006b	8b 55 f8	 mov	 edx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  0006e	52		 push	 edx
  0006f	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00075	50		 push	 eax
  00076	8b 4d f4	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 _VoxSetup@20

; 75   : 
; 76   :    nHarm = getnHarm(SubFrameParam_mblk->Pitch);

  0007f	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00085	8b 02		 mov	 eax, DWORD PTR [edx]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _getnHarm@4
  0008d	66 89 45 fc	 mov	 WORD PTR _nHarm$[ebp], ax

; 77   :    if (nHarm > MAXHARM)

  00091	0f bf 4d fc	 movsx	 ecx, WORD PTR _nHarm$[ebp]
  00095	83 f9 5a	 cmp	 ecx, 90			; 0000005aH
  00098	7e 06		 jle	 SHORT $L2250

; 78   :        nHarm = MAXHARM;

  0009a	66 c7 45 fc 5a
	00		 mov	 WORD PTR _nHarm$[ebp], 90 ; 0000005aH
$L2250:

; 79   : 
; 80   :    SmoothSpectrumInNoise( SubFrameParam_mblk->Lsf, SubFrameParam_mblk->AveLsf, 
; 81   :                         &(SubFrameParam_mblk->Hangover), SubFrameParam_mblk->Pv );

  000a0	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000a6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000a9	50		 push	 eax
  000aa	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000b0	83 c1 34	 add	 ecx, 52			; 00000034H
  000b3	51		 push	 ecx
  000b4	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000ba	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000bd	50		 push	 eax
  000be	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000c4	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 _SmoothSpectrumInNoise@16

; 82   : 
; 83   :    /****** perceptually weight the spectrum using the lpc's *********/
; 84   :    VoxLspToAsEven(SubFrameParam_mblk->Lsf, LPC_ORDER, cfInvRate8k, lpc);

  000cd	8d 85 c4 fc ff
	ff		 lea	 eax, DWORD PTR _lpc$[ebp]
  000d3	50		 push	 eax
  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _cfInvRate8k
  000da	51		 push	 ecx
  000db	6a 0a		 push	 10			; 0000000aH
  000dd	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000e3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _VoxLspToAsEven@16

; 85   : 
; 86   :    VoxEnhance(STACK_S lpc, SubFrameParam_mblk->Pv, SubFrameParam_mblk->Pitch, 
; 87   :            nHarm, SubFrameParam_mblk->Amp);

  000ec	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000f2	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000f5	52		 push	 edx
  000f6	0f bf 45 fc	 movsx	 eax, WORD PTR _nHarm$[ebp]
  000fa	50		 push	 eax
  000fb	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00101	8b 11		 mov	 edx, DWORD PTR [ecx]
  00103	52		 push	 edx
  00104	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  0010a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010d	51		 push	 ecx
  0010e	8d 95 c4 fc ff
	ff		 lea	 edx, DWORD PTR _lpc$[ebp]
  00114	52		 push	 edx
  00115	e8 00 00 00 00	 call	 _VoxEnhance@20

; 88   : 
; 89   :    memset(OutBufFloat+LPC_ORDER, 0, sizeof(float)*SubFrameParam_mblk->frameLEN);

  0011a	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00120	0f bf 48 2c	 movsx	 ecx, WORD PTR [eax+44]
  00124	c1 e1 02	 shl	 ecx, 2
  00127	51		 push	 ecx
  00128	6a 00		 push	 0
  0012a	8d 95 20 fd ff
	ff		 lea	 edx, DWORD PTR _OutBufFloat$[ebp+40]
  00130	52		 push	 edx
  00131	e8 00 00 00 00	 call	 _memset
  00136	83 c4 0c	 add	 esp, 12			; 0000000cH

; 90   : 
; 91   : 
; 92   :    /****** Calculate the unvoiced excitation with sine waves *******/
; 93   :      VoxSws(
; 94   :            STACK_S
; 95   :            pDecMemBlk->Sws_mblk,
; 96   :            SubFrameParam_mblk->Amp,
; 97   :            SubFrameParam_mblk->Amp_1,
; 98   :            SubFrameParam_mblk->Pitch,
; 99   :            SubFrameParam_mblk->Pitch_1,
; 100  :            SubFrameParam_mblk->Pv,
; 101  :            SubFrameParam_mblk->Pv_1,
; 102  :            SubFrameParam_mblk->frameLEN,
; 103  :            SubFrameParam_mblk->nSubs,
; 104  :            OutBufFloat+LPC_ORDER
; 105  :          );

  00139	8d 85 20 fd ff
	ff		 lea	 eax, DWORD PTR _OutBufFloat$[ebp+40]
  0013f	50		 push	 eax
  00140	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00146	66 8b 51 2e	 mov	 dx, WORD PTR [ecx+46]
  0014a	52		 push	 edx
  0014b	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00151	66 8b 48 2c	 mov	 cx, WORD PTR [eax+44]
  00155	51		 push	 ecx
  00156	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0015c	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0015f	50		 push	 eax
  00160	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00166	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00169	52		 push	 edx
  0016a	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00170	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00173	51		 push	 ecx
  00174	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0017a	8b 02		 mov	 eax, DWORD PTR [edx]
  0017c	50		 push	 eax
  0017d	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00183	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00186	52		 push	 edx
  00187	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  0018d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00190	51		 push	 ecx
  00191	8b 95 f4 fc ff
	ff		 mov	 edx, DWORD PTR _pDecMemBlk$[ebp]
  00197	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _VoxSws@40

; 106  :    /****** Do the synthesis using the unvoiced and voiced excitations ******/ 
; 107  :    VoxLPCSyn(STACK_S SubFrameParam_mblk->Lsf, OutBufFloat, Synthesis_mblk, SubFrameParam_mblk->frameLEN);

  001a0	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  001a6	66 8b 51 2c	 mov	 dx, WORD PTR [ecx+44]
  001aa	52		 push	 edx
  001ab	8b 85 f0 fc ff
	ff		 mov	 eax, DWORD PTR _Synthesis_mblk$[ebp]
  001b1	50		 push	 eax
  001b2	8d 8d f8 fc ff
	ff		 lea	 ecx, DWORD PTR _OutBufFloat$[ebp]
  001b8	51		 push	 ecx
  001b9	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  001bf	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 _VoxLPCSyn@16

; 108  : 
; 109  : 
; 110  :    /****** Do the output buffer management *******/
; 111  :    VoxOutputManager(pDecMemBlk->OutputBuffer_mblk,SubFrameParam_mblk->frameLEN, OutBufFloat+LPC_ORDER);

  001c8	8d 8d 20 fd ff
	ff		 lea	 ecx, DWORD PTR _OutBufFloat$[ebp+40]
  001ce	51		 push	 ecx
  001cf	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  001d5	0f bf 42 2c	 movsx	 eax, WORD PTR [edx+44]
  001d9	50		 push	 eax
  001da	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _pDecMemBlk$[ebp]
  001e0	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001e3	52		 push	 edx
  001e4	e8 00 00 00 00	 call	 _VoxOutputManager@12

; 112  : 
; 113  :    /****** Output the speech from the double buffer to the API buffer ******/
; 114  :    if (((OutputBuffer *)pDecMemBlk->OutputBuffer_mblk)->writeBuffer==1)

  001e9	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _pDecMemBlk$[ebp]
  001ef	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001f2	0f bf 51 14	 movsx	 edx, WORD PTR [ecx+20]
  001f6	83 fa 01	 cmp	 edx, 1
  001f9	75 29		 jne	 SHORT $L2253

; 115  :    {
; 116  :       memcpy(pPCMBuffer, ((OutputBuffer *)(pDecMemBlk->OutputBuffer_mblk))->outBufferB1, sizeof(short)*FRAME_LEN);

  001fb	68 68 01 00 00	 push	 360			; 00000168H
  00200	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _pDecMemBlk$[ebp]
  00206	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00209	8b 11		 mov	 edx, DWORD PTR [ecx]
  0020b	52		 push	 edx
  0020c	8b 45 08	 mov	 eax, DWORD PTR _pPCMBuffer$[ebp]
  0020f	50		 push	 eax
  00210	e8 00 00 00 00	 call	 _memcpy
  00215	83 c4 0c	 add	 esp, 12			; 0000000cH

; 117  :       pDecMemBlk->writeFLAG=1;

  00218	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _pDecMemBlk$[ebp]
  0021e	c6 41 3c 01	 mov	 BYTE PTR [ecx+60], 1

; 118  :    }
; 119  :    else if (((OutputBuffer*)(pDecMemBlk->OutputBuffer_mblk))->writeBuffer==2)

  00222	eb 46		 jmp	 SHORT $L2256
$L2253:
  00224	8b 95 f4 fc ff
	ff		 mov	 edx, DWORD PTR _pDecMemBlk$[ebp]
  0022a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0022d	0f bf 48 14	 movsx	 ecx, WORD PTR [eax+20]
  00231	83 f9 02	 cmp	 ecx, 2
  00234	75 2a		 jne	 SHORT $L2258

; 120  :    {
; 121  :       memcpy(pPCMBuffer,((OutputBuffer *)(pDecMemBlk->OutputBuffer_mblk))->outBufferB2, sizeof(short)*FRAME_LEN);

  00236	68 68 01 00 00	 push	 360			; 00000168H
  0023b	8b 95 f4 fc ff
	ff		 mov	 edx, DWORD PTR _pDecMemBlk$[ebp]
  00241	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00244	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00247	51		 push	 ecx
  00248	8b 55 08	 mov	 edx, DWORD PTR _pPCMBuffer$[ebp]
  0024b	52		 push	 edx
  0024c	e8 00 00 00 00	 call	 _memcpy
  00251	83 c4 0c	 add	 esp, 12			; 0000000cH

; 122  :       pDecMemBlk->writeFLAG=1;

  00254	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _pDecMemBlk$[ebp]
  0025a	c6 40 3c 01	 mov	 BYTE PTR [eax+60], 1

; 123  :    }
; 124  :    else pDecMemBlk->writeFLAG=0;

  0025e	eb 0a		 jmp	 SHORT $L2256
$L2258:
  00260	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _pDecMemBlk$[ebp]
  00266	c6 41 3c 00	 mov	 BYTE PTR [ecx+60], 0
$L2256:

; 125  : 
; 126  :    VoxUpdateSubframe(SubFrameParam_mblk);

  0026a	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00270	52		 push	 edx
  00271	e8 00 00 00 00	 call	 _VoxUpdateSubframe@4

; 127  : 
; 128  :    /* service the "post decode" state */
; 129  :    vemServiceState(pDecMemBlk->vemKeyPostDecode);

  00276	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _pDecMemBlk$[ebp]
  0027c	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0027f	51		 push	 ecx
  00280	e8 00 00 00 00	 call	 _vemServiceState@4

; 130  : STACK_END
; 131  : 
; 132  : return 0;

  00285	66 33 c0	 xor	 ax, ax

; 133  : }

  00288	8b e5		 mov	 esp, ebp
  0028a	5d		 pop	 ebp
  0028b	c2 08 00	 ret	 8
_VoxDecodeRT@8 ENDP
_TEXT	ENDS
PUBLIC	_VoxInitDecodeRT@8
PUBLIC	??_C@_0L@LKCHAPDB@pre?5decode?$AA@		; `string'
PUBLIC	??_C@_0M@OHEIPEEH@post?5decode?$AA@		; `string'
PUBLIC	??_C@_04HCCHHEEF@rate?$AA@			; `string'
PUBLIC	??_C@_0N@KGCNFMNN@frame?5length?$AA@		; `string'
PUBLIC	??_C@_0L@LDAOAEAG@write?5flag?$AA@		; `string'
EXTRN	_VoxInitOutputBuffers@4:NEAR
EXTRN	_VoxInitParam@8:NEAR
EXTRN	_VoxInitPrevFrame@4:NEAR
EXTRN	_VoxInitSubframe@4:NEAR
EXTRN	_VoxInitSws@4:NEAR
EXTRN	_calloc:NEAR
EXTRN	_vemRegisterState@8:NEAR
EXTRN	_vemRegisterVariable@16:NEAR
EXTRN	_vemRegisterConstShort@12:NEAR
EXTRN	_VoxInitLPCSyn@4:NEAR
;	COMDAT ??_C@_0L@LKCHAPDB@pre?5decode?$AA@
CONST	SEGMENT
??_C@_0L@LKCHAPDB@pre?5decode?$AA@ DB 'pre decode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHEIPEEH@post?5decode?$AA@
CONST	SEGMENT
??_C@_0M@OHEIPEEH@post?5decode?$AA@ DB 'post decode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCCHHEEF@rate?$AA@
CONST	SEGMENT
??_C@_04HCCHHEEF@rate?$AA@ DB 'rate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KGCNFMNN@frame?5length?$AA@
CONST	SEGMENT
??_C@_0N@KGCNFMNN@frame?5length?$AA@ DB 'frame length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LDAOAEAG@write?5flag?$AA@
CONST	SEGMENT
??_C@_0L@LDAOAEAG@write?5flag?$AA@ DB 'write flag', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxInitDecodeRT@8
_TEXT	SEGMENT
_pDecode_mblk$ = -4
_ppMemBlkD$ = 8
_pVemMem$ = 12
_VoxInitDecodeRT@8 PROC NEAR				; COMDAT

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 137  :    DEC_MEM_BLK *pDecode_mblk;
; 138  : 
; 139  :    if(VOX_MEM_INIT(pDecode_mblk=*ppMemBlkD,1,sizeof(DEC_MEM_BLK))) 

  00004	6a 4c		 push	 76			; 0000004cH
  00006	6a 01		 push	 1
  00008	e8 00 00 00 00	 call	 _calloc
  0000d	83 c4 08	 add	 esp, 8
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _ppMemBlkD$[ebp]
  00013	89 01		 mov	 DWORD PTR [ecx], eax
  00015	8b 55 08	 mov	 edx, DWORD PTR _ppMemBlkD$[ebp]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	89 45 fc	 mov	 DWORD PTR _pDecode_mblk$[ebp], eax
  0001d	83 7d fc 00	 cmp	 DWORD PTR _pDecode_mblk$[ebp], 0
  00021	75 09		 jne	 SHORT $L2269

; 140  :       return 1;

  00023	66 b8 01 00	 mov	 ax, 1
  00027	e9 5f 01 00 00	 jmp	 $L2266
$L2269:

; 141  : 
; 142  :    /****************************************************
; 143  :     Initialize the Sws block
; 144  :     ****************************************************/
; 145  :    if (VoxInitSws(&pDecode_mblk->Sws_mblk)) 

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _pDecode_mblk$[ebp]
  0002f	83 c1 20	 add	 ecx, 32			; 00000020H
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 _VoxInitSws@4
  00038	0f b7 d0	 movzx	 edx, ax
  0003b	85 d2		 test	 edx, edx
  0003d	74 09		 je	 SHORT $L2270

; 146  :       return 1;

  0003f	66 b8 01 00	 mov	 ax, 1
  00043	e9 43 01 00 00	 jmp	 $L2266
$L2270:

; 147  : 
; 148  :    /****************************************************
; 149  :     Initialize the LPC Synthesis block
; 150  :     ****************************************************/
; 151  :    if (VoxInitLPCSyn(&pDecode_mblk->Synthesis_mblk))

  00048	8b 45 fc	 mov	 eax, DWORD PTR _pDecode_mblk$[ebp]
  0004b	83 c0 04	 add	 eax, 4
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _VoxInitLPCSyn@4
  00054	0f b7 c8	 movzx	 ecx, ax
  00057	85 c9		 test	 ecx, ecx
  00059	74 09		 je	 SHORT $L2271

; 152  :       return 1;

  0005b	66 b8 01 00	 mov	 ax, 1
  0005f	e9 27 01 00 00	 jmp	 $L2266
$L2271:

; 153  : 
; 154  :    /****************************************************
; 155  :     Initialize the Output Buffer block
; 156  :     ****************************************************/
; 157  :    if (VoxInitOutputBuffers(&pDecode_mblk->OutputBuffer_mblk)) 

  00064	8b 55 fc	 mov	 edx, DWORD PTR _pDecode_mblk$[ebp]
  00067	83 c2 10	 add	 edx, 16			; 00000010H
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 _VoxInitOutputBuffers@4
  00070	0f b7 c0	 movzx	 eax, ax
  00073	85 c0		 test	 eax, eax
  00075	74 09		 je	 SHORT $L2272

; 158  :       return 1;

  00077	66 b8 01 00	 mov	 ax, 1
  0007b	e9 0b 01 00 00	 jmp	 $L2266
$L2272:

; 159  : 
; 160  :    /****************************************************
; 161  :     Initialize the subframe parameters block
; 162  :     ****************************************************/
; 163  :    if (VoxInitSubframe(&pDecode_mblk->SubFrameParam_mblk)) 

  00080	8b 4d fc	 mov	 ecx, DWORD PTR _pDecode_mblk$[ebp]
  00083	83 c1 14	 add	 ecx, 20			; 00000014H
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 _VoxInitSubframe@4
  0008c	0f b7 d0	 movzx	 edx, ax
  0008f	85 d2		 test	 edx, edx
  00091	74 09		 je	 SHORT $L2273

; 164  :       return 1;

  00093	66 b8 01 00	 mov	 ax, 1
  00097	e9 ef 00 00 00	 jmp	 $L2266
$L2273:

; 165  : 
; 166  :    /****************************************************
; 167  :     Initialize the prev frame memory parameters block
; 168  :     ****************************************************/
; 169  :    if (VoxInitPrevFrame(&pDecode_mblk->PrevFrameParam_mblk)) 

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _pDecode_mblk$[ebp]
  0009f	83 c0 18	 add	 eax, 24			; 00000018H
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 _VoxInitPrevFrame@4
  000a8	0f b7 c8	 movzx	 ecx, ax
  000ab	85 c9		 test	 ecx, ecx
  000ad	74 09		 je	 SHORT $L2274

; 170  :       return 1;

  000af	66 b8 01 00	 mov	 ax, 1
  000b3	e9 d3 00 00 00	 jmp	 $L2266
$L2274:

; 171  : 
; 172  :    /****************************************************
; 173  :     initialize parameter structure
; 174  :     ****************************************************/
; 175  :    if (VoxInitParam(&pDecode_mblk->Param_mblk, pVemMem)) 

  000b8	8b 55 0c	 mov	 edx, DWORD PTR _pVemMem$[ebp]
  000bb	52		 push	 edx
  000bc	8b 45 fc	 mov	 eax, DWORD PTR _pDecode_mblk$[ebp]
  000bf	83 c0 1c	 add	 eax, 28			; 0000001cH
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _VoxInitParam@8
  000c8	0f b7 c8	 movzx	 ecx, ax
  000cb	85 c9		 test	 ecx, ecx
  000cd	74 09		 je	 SHORT $L2275

; 176  :       return 1;

  000cf	66 b8 01 00	 mov	 ax, 1
  000d3	e9 b3 00 00 00	 jmp	 $L2266
$L2275:

; 177  : 
; 178  : 
; 179  :    /****************************************************
; 180  :     initialize the dropRate and fWarpedLengthFactor
; 181  :     ****************************************************/
; 182  :    pDecode_mblk->dropRate=1;

  000d8	8b 55 fc	 mov	 edx, DWORD PTR _pDecode_mblk$[ebp]
  000db	66 c7 42 34 01
	00		 mov	 WORD PTR [edx+52], 1

; 183  :    pDecode_mblk->fWarpedLengthFactor=1.0F;

  000e1	8b 45 fc	 mov	 eax, DWORD PTR _pDecode_mblk$[ebp]
  000e4	c7 40 2c 00 00
	80 3f		 mov	 DWORD PTR [eax+44], 1065353216 ; 3f800000H

; 184  :    pDecode_mblk->unpackFLAG=1;

  000eb	8b 4d fc	 mov	 ecx, DWORD PTR _pDecode_mblk$[ebp]
  000ee	c6 41 3d 01	 mov	 BYTE PTR [ecx+61], 1

; 185  : 
; 186  :    pDecode_mblk->pVemMem=pVemMem;

  000f2	8b 55 fc	 mov	 edx, DWORD PTR _pDecode_mblk$[ebp]
  000f5	8b 45 0c	 mov	 eax, DWORD PTR _pVemMem$[ebp]
  000f8	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 187  : 
; 188  :    if(!(pDecode_mblk->vemKeyPreDecode=vemRegisterState(
; 189  :       ((VEM_MAIN_STRUCT *)pVemMem)->pMemoryHandler, "pre decode")))

  000fb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@LKCHAPDB@pre?5decode?$AA@
  00100	8b 4d 0c	 mov	 ecx, DWORD PTR _pVemMem$[ebp]
  00103	8b 11		 mov	 edx, DWORD PTR [ecx]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 _vemRegisterState@8
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _pDecode_mblk$[ebp]
  0010e	89 41 44	 mov	 DWORD PTR [ecx+68], eax
  00111	8b 55 fc	 mov	 edx, DWORD PTR _pDecode_mblk$[ebp]
  00114	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  00118	75 06		 jne	 SHORT $L2277

; 190  :       return 1;

  0011a	66 b8 01 00	 mov	 ax, 1
  0011e	eb 6b		 jmp	 SHORT $L2266
$L2277:

; 191  : 
; 192  :    if(!(pDecode_mblk->vemKeyPostDecode=vemRegisterState(
; 193  :       ((VEM_MAIN_STRUCT *)pVemMem)->pMemoryHandler, "post decode")))

  00120	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@OHEIPEEH@post?5decode?$AA@
  00125	8b 45 0c	 mov	 eax, DWORD PTR _pVemMem$[ebp]
  00128	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012a	51		 push	 ecx
  0012b	e8 00 00 00 00	 call	 _vemRegisterState@8
  00130	8b 55 fc	 mov	 edx, DWORD PTR _pDecode_mblk$[ebp]
  00133	89 42 48	 mov	 DWORD PTR [edx+72], eax
  00136	8b 45 fc	 mov	 eax, DWORD PTR _pDecode_mblk$[ebp]
  00139	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  0013d	75 06		 jne	 SHORT $L2280

; 194  :       return 1;

  0013f	66 b8 01 00	 mov	 ax, 1
  00143	eb 46		 jmp	 SHORT $L2266
$L2280:

; 195  :    
; 196  :    vemRegisterConstShort(((VEM_MAIN_STRUCT *)pVemMem)->pMemoryHandler, 
; 197  :       (short)RATE8K, "rate");

  00145	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04HCCHHEEF@rate?$AA@
  0014a	68 40 1f 00 00	 push	 8000			; 00001f40H
  0014f	8b 4d 0c	 mov	 ecx, DWORD PTR _pVemMem$[ebp]
  00152	8b 11		 mov	 edx, DWORD PTR [ecx]
  00154	52		 push	 edx
  00155	e8 00 00 00 00	 call	 _vemRegisterConstShort@12

; 198  :    vemRegisterConstShort(((VEM_MAIN_STRUCT *)pVemMem)->pMemoryHandler, 
; 199  :       (short)FRAME_LEN, "frame length");

  0015a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@KGCNFMNN@frame?5length?$AA@
  0015f	68 b4 00 00 00	 push	 180			; 000000b4H
  00164	8b 45 0c	 mov	 eax, DWORD PTR _pVemMem$[ebp]
  00167	8b 08		 mov	 ecx, DWORD PTR [eax]
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 _vemRegisterConstShort@12

; 200  :    vemRegisterVariable(((VEM_MAIN_STRUCT *)pVemMem)->pMemoryHandler, 
; 201  :       &pDecode_mblk->writeFLAG, VEM_U_CHAR, "write flag");

  0016f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@LDAOAEAG@write?5flag?$AA@
  00174	6a 02		 push	 2
  00176	8b 55 fc	 mov	 edx, DWORD PTR _pDecode_mblk$[ebp]
  00179	83 c2 3c	 add	 edx, 60			; 0000003cH
  0017c	52		 push	 edx
  0017d	8b 45 0c	 mov	 eax, DWORD PTR _pVemMem$[ebp]
  00180	8b 08		 mov	 ecx, DWORD PTR [eax]
  00182	51		 push	 ecx
  00183	e8 00 00 00 00	 call	 _vemRegisterVariable@16

; 202  :       
; 203  :    return 0;

  00188	66 33 c0	 xor	 ax, ax
$L2266:

; 204  : }

  0018b	8b e5		 mov	 esp, ebp
  0018d	5d		 pop	 ebp
  0018e	c2 08 00	 ret	 8
_VoxInitDecodeRT@8 ENDP
_TEXT	ENDS
PUBLIC	_VoxFreeDecodeRT@4
EXTRN	_VoxFreeOutputBuffers@4:NEAR
EXTRN	_VoxFreeParam@4:NEAR
EXTRN	_VoxFreePrevFrame@4:NEAR
EXTRN	_VoxFreeSubframe@4:NEAR
EXTRN	_VoxFreeSws@4:NEAR
EXTRN	_free:NEAR
EXTRN	_nspFreeFftResources@0:NEAR
EXTRN	_VoxFreeLPCSyn@4:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxFreeDecodeRT@4
_TEXT	SEGMENT
_pDecode_mblk$ = -4
_hMemBlkD$ = 8
_VoxFreeDecodeRT@4 PROC NEAR				; COMDAT

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 209  :     DEC_MEM_BLK *pDecode_mblk=(DEC_MEM_BLK*)*hMemBlkD;

  00004	8b 45 08	 mov	 eax, DWORD PTR _hMemBlkD$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	89 4d fc	 mov	 DWORD PTR _pDecode_mblk$[ebp], ecx

; 210  :   
; 211  :     if (*hMemBlkD) {

  0000c	8b 55 08	 mov	 edx, DWORD PTR _hMemBlkD$[ebp]
  0000f	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00012	74 6c		 je	 SHORT $L2295

; 212  : 
; 213  :        VoxFreeSws(&pDecode_mblk->Sws_mblk);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pDecode_mblk$[ebp]
  00017	83 c0 20	 add	 eax, 32			; 00000020H
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _VoxFreeSws@4

; 214  : 
; 215  :        VoxFreeLPCSyn(&pDecode_mblk->Synthesis_mblk);

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _pDecode_mblk$[ebp]
  00023	83 c1 04	 add	 ecx, 4
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 _VoxFreeLPCSyn@4

; 216  : 
; 217  :        VoxFreeOutputBuffers(&pDecode_mblk->OutputBuffer_mblk);

  0002c	8b 55 fc	 mov	 edx, DWORD PTR _pDecode_mblk$[ebp]
  0002f	83 c2 10	 add	 edx, 16			; 00000010H
  00032	52		 push	 edx
  00033	e8 00 00 00 00	 call	 _VoxFreeOutputBuffers@4

; 218  : 
; 219  :        VoxFreeSubframe(&pDecode_mblk->SubFrameParam_mblk);

  00038	8b 45 fc	 mov	 eax, DWORD PTR _pDecode_mblk$[ebp]
  0003b	83 c0 14	 add	 eax, 20			; 00000014H
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _VoxFreeSubframe@4

; 220  : 
; 221  :        VoxFreePrevFrame(&pDecode_mblk->PrevFrameParam_mblk);

  00044	8b 4d fc	 mov	 ecx, DWORD PTR _pDecode_mblk$[ebp]
  00047	83 c1 18	 add	 ecx, 24			; 00000018H
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 _VoxFreePrevFrame@4

; 222  : 
; 223  :        VoxFreeParam(&pDecode_mblk->Param_mblk);

  00050	8b 55 fc	 mov	 edx, DWORD PTR _pDecode_mblk$[ebp]
  00053	83 c2 1c	 add	 edx, 28			; 0000001cH
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 _VoxFreeParam@4

; 224  : 
; 225  : #ifdef WIN32
; 226  :        nspFreeFftResources();

  0005c	e8 00 00 00 00	 call	 _nspFreeFftResources@0

; 227  : #endif
; 228  : 
; 229  :        VOX_MEM_FREE(*hMemBlkD);

  00061	8b 45 08	 mov	 eax, DWORD PTR _hMemBlkD$[ebp]
  00064	83 38 00	 cmp	 DWORD PTR [eax], 0
  00067	74 17		 je	 SHORT $L2295
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _hMemBlkD$[ebp]
  0006c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 _free
  00074	83 c4 04	 add	 esp, 4
  00077	8b 45 08	 mov	 eax, DWORD PTR _hMemBlkD$[ebp]
  0007a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L2295:

; 230  :     }
; 231  :     return 0;

  00080	66 33 c0	 xor	 ax, ax

; 232  : }

  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
_VoxFreeDecodeRT@4 ENDP
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3e4ccccd
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _SmoothSpectrumInNoise@16
_TEXT	SEGMENT
_i$ = -4
_CurrentLsf$ = 8
_AveLsf$ = 12
_Hangover$ = 16
_Pv$ = 20
_SmoothSpectrumInNoise@16 PROC NEAR			; COMDAT

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 238  :    int i;
; 239  : 
; 240  :    if (Pv >0.0F)

  00004	d9 45 14	 fld	 DWORD PTR _Pv$[ebp]
  00007	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0000d	df e0		 fnstsw	 ax
  0000f	f6 c4 41	 test	 ah, 65			; 00000041H
  00012	75 0b		 jne	 SHORT $L2308

; 241  :       *Hangover=HANGOVER_TIME;

  00014	8b 45 10	 mov	 eax, DWORD PTR _Hangover$[ebp]
  00017	c7 00 0a 00 00
	00		 mov	 DWORD PTR [eax], 10	; 0000000aH

; 242  :    else

  0001d	eb 0d		 jmp	 SHORT $L2309
$L2308:

; 243  :       (*Hangover)--;

  0001f	8b 4d 10	 mov	 ecx, DWORD PTR _Hangover$[ebp]
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	83 ea 01	 sub	 edx, 1
  00027	8b 45 10	 mov	 eax, DWORD PTR _Hangover$[ebp]
  0002a	89 10		 mov	 DWORD PTR [eax], edx
$L2309:

; 244  : 
; 245  :    if (*Hangover == HANGOVER_TIME-1)

  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _Hangover$[ebp]
  0002f	83 39 09	 cmp	 DWORD PTR [ecx], 9
  00032	75 12		 jne	 SHORT $L2310

; 246  :       memcpy(AveLsf, CurrentLsf, LPC_ORDER*sizeof(float));

  00034	6a 28		 push	 40			; 00000028H
  00036	8b 55 08	 mov	 edx, DWORD PTR _CurrentLsf$[ebp]
  00039	52		 push	 edx
  0003a	8b 45 0c	 mov	 eax, DWORD PTR _AveLsf$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _memcpy
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
$L2310:

; 247  : 
; 248  :    if (*Hangover < HANGOVER_TIME)

  00046	8b 4d 10	 mov	 ecx, DWORD PTR _Hangover$[ebp]
  00049	83 39 0a	 cmp	 DWORD PTR [ecx], 10	; 0000000aH
  0004c	7d 43		 jge	 SHORT $L2312

; 249  :    {
; 250  :       for (i=0;i<LPC_ORDER;i++)

  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00055	eb 09		 jmp	 SHORT $L2313
$L2314:
  00057	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0005a	83 c2 01	 add	 edx, 1
  0005d	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L2313:
  00060	83 7d fc 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00064	7d 2b		 jge	 SHORT $L2312

; 251  :          AveLsf[i] = AveLsf[i]*(1.0F-AVE_FACTOR) + CurrentLsf[i]*AVE_FACTOR;

  00066	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00069	8b 4d 0c	 mov	 ecx, DWORD PTR _AveLsf$[ebp]
  0006c	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  0006f	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f4ccccd
  00075	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00078	8b 45 08	 mov	 eax, DWORD PTR _CurrentLsf$[ebp]
  0007b	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  0007e	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3e4ccccd
  00084	de c1		 faddp	 ST(1), ST(0)
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00089	8b 55 0c	 mov	 edx, DWORD PTR _AveLsf$[ebp]
  0008c	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]
  0008f	eb c6		 jmp	 SHORT $L2314
$L2312:

; 252  :    }
; 253  : 
; 254  :    if (*Hangover < 0)

  00091	8b 45 10	 mov	 eax, DWORD PTR _Hangover$[ebp]
  00094	83 38 00	 cmp	 DWORD PTR [eax], 0
  00097	7d 1b		 jge	 SHORT $L2306

; 255  :    {
; 256  :       *Hangover = 0;

  00099	8b 4d 10	 mov	 ecx, DWORD PTR _Hangover$[ebp]
  0009c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 257  :       memcpy(CurrentLsf, AveLsf, LPC_ORDER*sizeof(float));

  000a2	6a 28		 push	 40			; 00000028H
  000a4	8b 55 0c	 mov	 edx, DWORD PTR _AveLsf$[ebp]
  000a7	52		 push	 edx
  000a8	8b 45 08	 mov	 eax, DWORD PTR _CurrentLsf$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _memcpy
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L2306:

; 258  :    }
; 259  : 
; 260  : }

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 10 00	 ret	 16			; 00000010H
_SmoothSpectrumInNoise@16 ENDP
_TEXT	ENDS
END
