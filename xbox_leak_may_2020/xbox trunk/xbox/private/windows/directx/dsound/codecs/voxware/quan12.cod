; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\quan12.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_09HOIKEFPG@post?5quan?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@IMJNPLMH@post?5unquan?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09FPJEIFPH@max?5pitch?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09FOJIBPED@min?5pitch?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxQuanVR12@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxUnQuanVR12@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxInitQuanVR12@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxFreeQuanVR12@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	__real@3fe6666666666666
PUBLIC	_VoxQuanVR12@8
PUBLIC	__real@3fa999999999999a
EXTRN	__fltused:NEAR
EXTRN	_vemServiceState@4:NEAR
EXTRN	_VoxAsToLspEven@16:NEAR
EXTRN	_VoxQuanEnergyVR12@16:NEAR
EXTRN	_VoxQuanPitchVR12@4:NEAR
EXTRN	_VoxQuanPvVR12@4:NEAR
EXTRN	_VoxLspMSVQ@36:NEAR
;	COMDAT __real@3fa999999999999a
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\quan12.c
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxQuanVR12@8
_TEXT	SEGMENT
_Quan_mblk$ = -8
_Param_mblk$ = -4
_pvQuanMemBlk$ = 8
_pvParamMemBlk$ = 12
_VoxQuanVR12@8 PROC NEAR				; COMDAT

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 80   :    PARAM *Param_mblk = (PARAM *)pvParamMemBlk;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _pvParamMemBlk$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _Param_mblk$[ebp], eax

; 81   :    QUAN_12 *Quan_mblk = (QUAN_12*)pvQuanMemBlk;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pvQuanMemBlk$[ebp]
  0000f	89 4d f8	 mov	 DWORD PTR _Quan_mblk$[ebp], ecx

; 82   : 
; 83   :    /*************************************************
; 84   :               Set the Class 
; 85   :     *************************************************/
; 86   :    if (Param_mblk->VAD == 0)

  00012	8b 55 fc	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  00015	0f bf 42 1c	 movsx	 eax, WORD PTR [edx+28]
  00019	85 c0		 test	 eax, eax
  0001b	75 0b		 jne	 SHORT $L1933

; 87   :       Quan_mblk->Class = SILENCE_FRAME;

  0001d	8b 4d f8	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00020	66 c7 41 4c 03
	00		 mov	 WORD PTR [ecx+76], 3

; 88   :    else if (Param_mblk->Pv<=PV_RESET)

  00026	eb 43		 jmp	 SHORT $L1934
$L1933:
  00028	8b 55 fc	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  0002b	d9 02		 fld	 DWORD PTR [edx]
  0002d	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3fa999999999999a
  00033	df e0		 fnstsw	 ax
  00035	f6 c4 41	 test	 ah, 65			; 00000041H
  00038	7a 0b		 jp	 SHORT $L1935

; 89   :       Quan_mblk->Class = UV_FRAME;   

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  0003d	66 c7 40 4c 02
	00		 mov	 WORD PTR [eax+76], 2

; 90   :    else if (Param_mblk->Pv<PV_V_BOUND)

  00043	eb 26		 jmp	 SHORT $L1934
$L1935:
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00048	d9 01		 fld	 DWORD PTR [ecx]
  0004a	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3fe6666666666666
  00050	df e0		 fnstsw	 ax
  00052	f6 c4 05	 test	 ah, 5
  00055	7a 0b		 jp	 SHORT $L1937

; 91   :       Quan_mblk->Class = MIX_FRAME;

  00057	8b 55 f8	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0005a	66 c7 42 4c 01
	00		 mov	 WORD PTR [edx+76], 1

; 92   :    else 

  00060	eb 09		 jmp	 SHORT $L1934
$L1937:

; 93   :       Quan_mblk->Class = V_FRAME;

  00062	8b 45 f8	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00065	66 c7 40 4c 00
	00		 mov	 WORD PTR [eax+76], 0
$L1934:

; 94   : 
; 95   :    if (Quan_mblk->Class==UV_FRAME)

  0006b	8b 4d f8	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0006e	0f bf 51 4c	 movsx	 edx, WORD PTR [ecx+76]
  00072	83 fa 02	 cmp	 edx, 2
  00075	75 6f		 jne	 SHORT $L1939

; 96   :    {
; 97   : 
; 98   :       /***** convert lpc to lsp *****/
; 99   :       VoxAsToLspEven(Param_mblk->Alpc, LPC_ORDER, RATE8K, Param_mblk->Lsf);

  00077	8b 45 fc	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  0007a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0007d	51		 push	 ecx
  0007e	68 00 00 fa 45	 push	 1174011904		; 45fa0000H
  00083	6a 0a		 push	 10			; 0000000aH
  00085	8b 55 fc	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  00088	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _VoxAsToLspEven@16

; 100  : 
; 101  :       VoxLspMSVQ (Param_mblk->Lsf, Param_mblk->Alpc+1, Quan_mblk->Lsf_INDEX, Quan_mblk->MSVQ_struct,
; 102  :                   NUMSTAGES_LSPVQ_VR12_UNVOICED, NUMCAND_LSPVQ_VR12, LPC_ORDER, TABLESIZE_LSPVQ_VR12,
; 103  :                   Quan_mblk->Lsf_MSVQ_TABLE);

  00091	8b 4d f8	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00094	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00097	52		 push	 edx
  00098	6a 10		 push	 16			; 00000010H
  0009a	6a 0a		 push	 10			; 0000000aH
  0009c	6a 10		 push	 16			; 00000010H
  0009e	6a 02		 push	 2
  000a0	8b 45 f8	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  000a3	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  000a6	51		 push	 ecx
  000a7	8b 55 f8	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  000aa	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000ad	50		 push	 eax
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  000b1	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000b4	83 c2 04	 add	 edx, 4
  000b7	52		 push	 edx
  000b8	8b 45 fc	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  000bb	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 _VoxLspMSVQ@36

; 104  : 
; 105  :       VoxQuanEnergyVR12(Param_mblk->Energy, Quan_mblk->Energy_TABLE_UnVoiced, 
; 106  :                    Quan_mblk->Energy_SIZE_UnVoiced, &(Quan_mblk->Energy_INDEX) );

  000c4	8b 55 f8	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  000c7	83 c2 22	 add	 edx, 34			; 00000022H
  000ca	52		 push	 edx
  000cb	8b 45 f8	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  000ce	66 8b 48 20	 mov	 cx, WORD PTR [eax+32]
  000d2	51		 push	 ecx
  000d3	8b 55 f8	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  000d6	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000d9	50		 push	 eax
  000da	8b 4d fc	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  000dd	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000e0	52		 push	 edx
  000e1	e8 00 00 00 00	 call	 _VoxQuanEnergyVR12@16
$L1939:

; 107  : 
; 108  :    }
; 109  : 
; 110  :    if (Quan_mblk->Class==MIX_FRAME)

  000e6	8b 45 f8	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  000e9	0f bf 48 4c	 movsx	 ecx, WORD PTR [eax+76]
  000ed	83 f9 01	 cmp	 ecx, 1
  000f0	0f 85 94 00 00
	00		 jne	 $L1940

; 111  :    {
; 112  : 
; 113  :       Quan_mblk->Pitch_INDEX = VoxQuanPitchVR12(Param_mblk->Pitch);

  000f6	8b 55 fc	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  000f9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 _VoxQuanPitchVR12@4
  00102	8b 4d f8	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00105	66 89 41 12	 mov	 WORD PTR [ecx+18], ax

; 114  : 
; 115  :       /***** convert lpc to lsp *****/
; 116  :       VoxAsToLspEven(Param_mblk->Alpc, LPC_ORDER, RATE8K, Param_mblk->Lsf);

  00109	8b 55 fc	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  0010c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0010f	50		 push	 eax
  00110	68 00 00 fa 45	 push	 1174011904		; 45fa0000H
  00115	6a 0a		 push	 10			; 0000000aH
  00117	8b 4d fc	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  0011a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0011d	52		 push	 edx
  0011e	e8 00 00 00 00	 call	 _VoxAsToLspEven@16

; 117  : 
; 118  :       VoxLspMSVQ (Param_mblk->Lsf, Param_mblk->Alpc+1, Quan_mblk->Lsf_INDEX, Quan_mblk->MSVQ_struct,
; 119  :                   NUMSTAGES_LSPVQ_VR12_MIXED, NUMCAND_LSPVQ_VR12, LPC_ORDER, TABLESIZE_LSPVQ_VR12,
; 120  :                   Quan_mblk->Lsf_MSVQ_TABLE);

  00123	8b 45 f8	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00126	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00129	51		 push	 ecx
  0012a	6a 10		 push	 16			; 00000010H
  0012c	6a 0a		 push	 10			; 0000000aH
  0012e	6a 10		 push	 16			; 00000010H
  00130	6a 06		 push	 6
  00132	8b 55 f8	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00135	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00138	50		 push	 eax
  00139	8b 4d f8	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0013c	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0013f	52		 push	 edx
  00140	8b 45 fc	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  00143	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00146	83 c1 04	 add	 ecx, 4
  00149	51		 push	 ecx
  0014a	8b 55 fc	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  0014d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 _VoxLspMSVQ@36

; 121  : 
; 122  :       Quan_mblk->Pv_INDEX = VoxQuanPvVR12(Param_mblk->Pv);

  00156	8b 4d fc	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00159	8b 11		 mov	 edx, DWORD PTR [ecx]
  0015b	52		 push	 edx
  0015c	e8 00 00 00 00	 call	 _VoxQuanPvVR12@4
  00161	8b 4d f8	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00164	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 123  : 
; 124  :       VoxQuanEnergyVR12(Param_mblk->Energy, Quan_mblk->Energy_TABLE_Voiced, 
; 125  :                    Quan_mblk->Energy_SIZE_Voiced, &(Quan_mblk->Energy_INDEX) );

  00168	8b 55 f8	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0016b	83 c2 22	 add	 edx, 34			; 00000022H
  0016e	52		 push	 edx
  0016f	8b 45 f8	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00172	66 8b 48 18	 mov	 cx, WORD PTR [eax+24]
  00176	51		 push	 ecx
  00177	8b 55 f8	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0017a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0017d	50		 push	 eax
  0017e	8b 4d fc	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00181	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00184	52		 push	 edx
  00185	e8 00 00 00 00	 call	 _VoxQuanEnergyVR12@16
$L1940:

; 126  :    }
; 127  : 
; 128  :    if (Quan_mblk->Class==V_FRAME)

  0018a	8b 45 f8	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  0018d	0f bf 48 4c	 movsx	 ecx, WORD PTR [eax+76]
  00191	85 c9		 test	 ecx, ecx
  00193	0f 85 82 00 00
	00		 jne	 $L1941

; 129  :    {
; 130  : 
; 131  :       Quan_mblk->Pitch_INDEX = VoxQuanPitchVR12(Param_mblk->Pitch);

  00199	8b 55 fc	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  0019c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 _VoxQuanPitchVR12@4
  001a5	8b 4d f8	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  001a8	66 89 41 12	 mov	 WORD PTR [ecx+18], ax

; 132  : 
; 133  :       /***** convert lpc to lsp *****/
; 134  :       VoxAsToLspEven(Param_mblk->Alpc, LPC_ORDER, RATE8K, Param_mblk->Lsf);

  001ac	8b 55 fc	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  001af	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001b2	50		 push	 eax
  001b3	68 00 00 fa 45	 push	 1174011904		; 45fa0000H
  001b8	6a 0a		 push	 10			; 0000000aH
  001ba	8b 4d fc	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  001bd	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001c0	52		 push	 edx
  001c1	e8 00 00 00 00	 call	 _VoxAsToLspEven@16

; 135  : 
; 136  :       VoxLspMSVQ (Param_mblk->Lsf, Param_mblk->Alpc+1, Quan_mblk->Lsf_INDEX, Quan_mblk->MSVQ_struct,
; 137  :                   NUMSTAGES_LSPVQ_VR12_VOICED, NUMCAND_LSPVQ_VR12, LPC_ORDER, TABLESIZE_LSPVQ_VR12,
; 138  :                   Quan_mblk->Lsf_MSVQ_TABLE);

  001c6	8b 45 f8	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  001c9	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  001cc	51		 push	 ecx
  001cd	6a 10		 push	 16			; 00000010H
  001cf	6a 0a		 push	 10			; 0000000aH
  001d1	6a 10		 push	 16			; 00000010H
  001d3	6a 06		 push	 6
  001d5	8b 55 f8	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  001d8	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  001db	50		 push	 eax
  001dc	8b 4d f8	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  001df	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  001e2	52		 push	 edx
  001e3	8b 45 fc	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  001e6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001e9	83 c1 04	 add	 ecx, 4
  001ec	51		 push	 ecx
  001ed	8b 55 fc	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  001f0	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 _VoxLspMSVQ@36

; 139  : 
; 140  :       VoxQuanEnergyVR12(Param_mblk->Energy, Quan_mblk->Energy_TABLE_Voiced, 
; 141  :                    Quan_mblk->Energy_SIZE_Voiced, &(Quan_mblk->Energy_INDEX) );

  001f9	8b 4d f8	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  001fc	83 c1 22	 add	 ecx, 34			; 00000022H
  001ff	51		 push	 ecx
  00200	8b 55 f8	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00203	66 8b 42 18	 mov	 ax, WORD PTR [edx+24]
  00207	50		 push	 eax
  00208	8b 4d f8	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0020b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0020e	52		 push	 edx
  0020f	8b 45 fc	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  00212	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00215	51		 push	 ecx
  00216	e8 00 00 00 00	 call	 _VoxQuanEnergyVR12@16
$L1941:

; 142  :    }
; 143  : 
; 144  :    vemServiceState(Quan_mblk->vemKeyPostQuan);

  0021b	8b 55 f8	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0021e	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  00221	50		 push	 eax
  00222	e8 00 00 00 00	 call	 _vemServiceState@4

; 145  :  
; 146  :    return 0;

  00227	66 33 c0	 xor	 ax, ax

; 147  : }

  0022a	8b e5		 mov	 esp, ebp
  0022c	5d		 pop	 ebp
  0022d	c2 08 00	 ret	 8
_VoxQuanVR12@8 ENDP
_TEXT	ENDS
PUBLIC	__real@3f19999a
PUBLIC	__real@3ecccccc
PUBLIC	__real@30000000
PUBLIC	__real@3f000000
PUBLIC	__real@42480000
PUBLIC	__real@42340000
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f8147ae
PUBLIC	__real@40a00000
PUBLIC	_VoxUnQuanVR12@8
EXTRN	_NuRand@4:NEAR
EXTRN	_VoxUnQuanEnergyVR12@12:NEAR
EXTRN	_VoxLutPitchVR12@4:NEAR
EXTRN	_VoxUnQuanPvVR12@4:NEAR
EXTRN	_VoxDecLspMSVQ@20:NEAR
EXTRN	_getnHarm@4:NEAR
EXTRN	_sqrt:NEAR
EXTRN	_memcpy:NEAR
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3ecccccc
CONST	SEGMENT
__real@3ecccccc DD 03eccccccr			; 0.4
CONST	ENDS
;	COMDAT __real@30000000
CONST	SEGMENT
__real@30000000 DD 030000000r			; 4.65661e-010
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f8147ae
CONST	SEGMENT
__real@3f8147ae DD 03f8147aer			; 1.01
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxUnQuanVR12@8
_TEXT	SEGMENT
tv399 = -28
tv312 = -24
_Quan_mblk$ = -20
_Param_mblk$ = -16
_scale$ = -12
_i$ = -8
_nHarm$ = -4
_pvQuanMemBlk$ = 8
_pvParamMemBlk$ = 12
_VoxUnQuanVR12@8 PROC NEAR				; COMDAT

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi

; 181  :    PARAM *Param_mblk  = (PARAM *)pvParamMemBlk;

  00007	8b 45 0c	 mov	 eax, DWORD PTR _pvParamMemBlk$[ebp]
  0000a	89 45 f0	 mov	 DWORD PTR _Param_mblk$[ebp], eax

; 182  :    QUAN_12 *Quan_mblk = (QUAN_12 *)pvQuanMemBlk;

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pvQuanMemBlk$[ebp]
  00010	89 4d ec	 mov	 DWORD PTR _Quan_mblk$[ebp], ecx

; 183  :    short   nHarm;
; 184  :    float   scale;
; 185  :    int     i;
; 186  : 
; 187  :    if (Quan_mblk->Class==SILENCE_FRAME)

  00013	8b 55 ec	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00016	0f bf 42 4c	 movsx	 eax, WORD PTR [edx+76]
  0001a	83 f8 03	 cmp	 eax, 3
  0001d	0f 85 2e 01 00
	00		 jne	 $L1954

; 188  :    {
; 189  :       Param_mblk->Pv    = 0.0F;

  00023	8b 4d f0	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 190  :       Param_mblk->Pitch = (float)PITCH_UV;

  0002c	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  0002f	c7 42 04 00 00
	fa 42		 mov	 DWORD PTR [edx+4], 1123680256 ; 42fa0000H

; 191  : 
; 192  :       if (Quan_mblk->PrevClass!=SILENCE_FRAME)

  00036	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00039	0f bf 48 4e	 movsx	 ecx, WORD PTR [eax+78]
  0003d	83 f9 03	 cmp	 ecx, 3
  00040	74 4c		 je	 SHORT $L1956

; 193  :       {
; 194  :          /**************************************************************************/
; 195  :          /* Calculate a running average of the lsfs, and the energy for use        */
; 196  :          /* during the voice inactive frames ...                                   */
; 197  :          /**************************************************************************/
; 198  :          for (i=0;i<LPC_ORDER;i++)

  00042	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00049	eb 09		 jmp	 SHORT $L1957
$L1958:
  0004b	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0004e	83 c2 01	 add	 edx, 1
  00051	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L1957:
  00054	83 7d f8 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00058	7d 34		 jge	 SHORT $L1956

; 199  :          {
; 200  :             Quan_mblk->UVLsf[i] = LONGTERM_AVE*Quan_mblk->UVLsf[i] + 
; 201  :                                  (1.0F-LONGTERM_AVE)*Quan_mblk->PrevLsf[i];

  0005a	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  0005d	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00060	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00063	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f19999a
  00069	d8 0c 91	 fmul	 DWORD PTR [ecx+edx*4]
  0006c	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  0006f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00072	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00075	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3ecccccc
  0007b	d8 0c 91	 fmul	 DWORD PTR [ecx+edx*4]
  0007e	de c1		 faddp	 ST(1), ST(0)
  00080	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00083	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00086	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00089	d9 1c 91	 fstp	 DWORD PTR [ecx+edx*4]

; 202  :          }

  0008c	eb bd		 jmp	 SHORT $L1958
$L1956:

; 203  :       }
; 204  : 
; 205  :       Param_mblk->Energy = Quan_mblk->BckGrndEnergyEst;

  0008e	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  00091	8b 4d ec	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00094	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  00097	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 206  : 
; 207  :       /**********************************************************************
; 208  :        Add a random component to the background noise fill spectrum so that
; 209  :        we don't repeat the exact same spectrum over and over again.
; 210  :        **********************************************************************/
; 211  :       for (i=0;i<LPC_ORDER;i++)

  0009a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000a1	eb 09		 jmp	 SHORT $L1960
$L1961:
  000a3	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000a6	83 c0 01	 add	 eax, 1
  000a9	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L1960:
  000ac	83 7d f8 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  000b0	7d 40		 jge	 SHORT $L1962

; 212  :          Param_mblk->Lsf[i] = Quan_mblk->UVLsf[i] +
; 213  :                               (((NuRand(&(Quan_mblk->Seed))*NURAND_SCALE)-0.5F)*2.0F)*BCKGRND_RND_HZ;

  000b2	8b 4d ec	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  000b5	8b 71 54	 mov	 esi, DWORD PTR [ecx+84]
  000b8	8b 55 ec	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  000bb	83 c2 58	 add	 edx, 88			; 00000058H
  000be	52		 push	 edx
  000bf	e8 00 00 00 00	 call	 _NuRand@4
  000c4	89 45 e8	 mov	 DWORD PTR tv312[ebp], eax
  000c7	db 45 e8	 fild	 DWORD PTR tv312[ebp]
  000ca	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@30000000
  000d0	d8 25 00 00 00
	00		 fsub	 DWORD PTR __real@3f000000
  000d6	dc c0		 fadd	 ST(0), ST(0)
  000d8	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@42480000
  000de	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000e1	d8 04 86	 fadd	 DWORD PTR [esi+eax*4]
  000e4	8b 4d f0	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  000e7	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000ea	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ed	d9 1c 82	 fstp	 DWORD PTR [edx+eax*4]
  000f0	eb b1		 jmp	 SHORT $L1961
$L1962:

; 214  : 
; 215  :       /**********************************************************************
; 216  :                              Stability check
; 217  :        **********************************************************************/
; 218  :       for (i=1;i<LPC_ORDER;i++)

  000f2	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  000f9	eb 09		 jmp	 SHORT $L1963
$L1964:
  000fb	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000fe	83 c1 01	 add	 ecx, 1
  00101	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L1963:
  00104	83 7d f8 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00108	7d 47		 jge	 SHORT $L1954

; 219  :          if (Param_mblk->Lsf[i] < Param_mblk->Lsf[i-1]+LSP_SEPERATION_HZ)

  0010a	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  0010d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00110	8b 4d f0	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00113	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00116	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00119	d9 44 8a fc	 fld	 DWORD PTR [edx+ecx*4-4]
  0011d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@42340000
  00123	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00126	d8 1c 90	 fcomp	 DWORD PTR [eax+edx*4]
  00129	df e0		 fnstsw	 ax
  0012b	f6 c4 41	 test	 ah, 65			; 00000041H
  0012e	75 1f		 jne	 SHORT $L1966

; 220  :              Param_mblk->Lsf[i] = Param_mblk->Lsf[i-1]+LSP_SEPERATION_HZ;

  00130	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  00133	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00136	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00139	d9 44 91 fc	 fld	 DWORD PTR [ecx+edx*4-4]
  0013d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@42340000
  00143	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  00146	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00149	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0014c	d9 1c 91	 fstp	 DWORD PTR [ecx+edx*4]
$L1966:

; 221  :    } /* end SILENCE_FRAME */

  0014f	eb aa		 jmp	 SHORT $L1964
$L1954:

; 222  : 
; 223  :    if (Quan_mblk->Class==UV_FRAME)

  00151	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00154	0f bf 48 4c	 movsx	 ecx, WORD PTR [eax+76]
  00158	83 f9 02	 cmp	 ecx, 2
  0015b	75 53		 jne	 SHORT $L1967

; 224  :    {
; 225  :       Param_mblk->Pitch = (float)PITCH_UV;

  0015d	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  00160	c7 42 04 00 00
	fa 42		 mov	 DWORD PTR [edx+4], 1123680256 ; 42fa0000H

; 226  :       Param_mblk->Pv    = 0.0F;

  00167	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  0016a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 227  :       Param_mblk->Energy= VoxUnQuanEnergyVR12(Quan_mblk->Energy_TABLE_UnVoiced,  
; 228  :                           Quan_mblk->Energy_SIZE_UnVoiced, Quan_mblk->Energy_INDEX);

  00170	8b 4d ec	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00173	66 8b 51 22	 mov	 dx, WORD PTR [ecx+34]
  00177	52		 push	 edx
  00178	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  0017b	66 8b 48 20	 mov	 cx, WORD PTR [eax+32]
  0017f	51		 push	 ecx
  00180	8b 55 ec	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00183	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 _VoxUnQuanEnergyVR12@12
  0018c	8b 4d f0	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  0018f	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 229  :       VoxDecLspMSVQ (Quan_mblk->Lsf_INDEX, Param_mblk->Lsf, Quan_mblk->Lsf_MSVQ_TABLE, 
; 230  :                   LPC_ORDER, NUMSTAGES_LSPVQ_VR12_UNVOICED);

  00192	6a 02		 push	 2
  00194	6a 0a		 push	 10			; 0000000aH
  00196	8b 55 ec	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00199	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0019c	50		 push	 eax
  0019d	8b 4d f0	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  001a0	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001a3	52		 push	 edx
  001a4	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  001a7	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001aa	51		 push	 ecx
  001ab	e8 00 00 00 00	 call	 _VoxDecLspMSVQ@20
$L1967:

; 231  :    }
; 232  : 
; 233  :    if (Quan_mblk->Class==MIX_FRAME)

  001b0	8b 55 ec	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  001b3	0f bf 42 4c	 movsx	 eax, WORD PTR [edx+76]
  001b7	83 f8 01	 cmp	 eax, 1
  001ba	75 65		 jne	 SHORT $L1969

; 234  :    {
; 235  :       /***** Unquantize Pitch *****/
; 236  :       Param_mblk->Pitch = VoxLutPitchVR12(Quan_mblk->Pitch_INDEX);

  001bc	8b 4d ec	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  001bf	66 8b 51 12	 mov	 dx, WORD PTR [ecx+18]
  001c3	52		 push	 edx
  001c4	e8 00 00 00 00	 call	 _VoxLutPitchVR12@4
  001c9	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  001cc	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 237  : 
; 238  :       /***** Unquantize Pv    *****/
; 239  :       Param_mblk->Pv = VoxUnQuanPvVR12( Quan_mblk->Pv_INDEX );

  001cf	8b 4d ec	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  001d2	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  001d6	52		 push	 edx
  001d7	e8 00 00 00 00	 call	 _VoxUnQuanPvVR12@4
  001dc	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  001df	d9 18		 fstp	 DWORD PTR [eax]

; 240  : 
; 241  :       /***** Unquantize Energy ****/
; 242  :       Param_mblk->Energy= VoxUnQuanEnergyVR12(Quan_mblk->Energy_TABLE_Voiced,  Quan_mblk->Energy_SIZE_Voiced,
; 243  :                                          Quan_mblk->Energy_INDEX);

  001e1	8b 4d ec	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  001e4	66 8b 51 22	 mov	 dx, WORD PTR [ecx+34]
  001e8	52		 push	 edx
  001e9	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  001ec	66 8b 48 18	 mov	 cx, WORD PTR [eax+24]
  001f0	51		 push	 ecx
  001f1	8b 55 ec	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  001f4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 _VoxUnQuanEnergyVR12@12
  001fd	8b 4d f0	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00200	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 244  : 
; 245  :       VoxDecLspMSVQ (Quan_mblk->Lsf_INDEX, Param_mblk->Lsf, Quan_mblk->Lsf_MSVQ_TABLE, 
; 246  :                   LPC_ORDER, NUMSTAGES_LSPVQ_VR12_MIXED);

  00203	6a 06		 push	 6
  00205	6a 0a		 push	 10			; 0000000aH
  00207	8b 55 ec	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0020a	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0020d	50		 push	 eax
  0020e	8b 4d f0	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00211	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00214	52		 push	 edx
  00215	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00218	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0021b	51		 push	 ecx
  0021c	e8 00 00 00 00	 call	 _VoxDecLspMSVQ@20
$L1969:

; 247  :    }
; 248  : 
; 249  :    if (Quan_mblk->Class==V_FRAME)

  00221	8b 55 ec	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00224	0f bf 42 4c	 movsx	 eax, WORD PTR [edx+76]
  00228	85 c0		 test	 eax, eax
  0022a	75 5c		 jne	 SHORT $L1970

; 250  :    {
; 251  :       /***** Unquantize Pitch *****/
; 252  :       Param_mblk->Pitch = VoxLutPitchVR12(Quan_mblk->Pitch_INDEX);

  0022c	8b 4d ec	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0022f	66 8b 51 12	 mov	 dx, WORD PTR [ecx+18]
  00233	52		 push	 edx
  00234	e8 00 00 00 00	 call	 _VoxLutPitchVR12@4
  00239	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  0023c	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 253  : 
; 254  :       /***** Unquantize Pv    *****/
; 255  :       Param_mblk->Pv = (float)PV_V;

  0023f	8b 4d f0	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00242	c7 01 d7 a3 70
	3f		 mov	 DWORD PTR [ecx], 1064346583 ; 3f70a3d7H

; 256  : 
; 257  :       /***** Unquantize Energy ****/
; 258  :       Param_mblk->Energy= VoxUnQuanEnergyVR12(Quan_mblk->Energy_TABLE_Voiced,  Quan_mblk->Energy_SIZE_Voiced,
; 259  :                                          Quan_mblk->Energy_INDEX);

  00248	8b 55 ec	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0024b	66 8b 42 22	 mov	 ax, WORD PTR [edx+34]
  0024f	50		 push	 eax
  00250	8b 4d ec	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00253	66 8b 51 18	 mov	 dx, WORD PTR [ecx+24]
  00257	52		 push	 edx
  00258	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  0025b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0025e	51		 push	 ecx
  0025f	e8 00 00 00 00	 call	 _VoxUnQuanEnergyVR12@12
  00264	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  00267	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 260  : 
; 261  :       VoxDecLspMSVQ (Quan_mblk->Lsf_INDEX, Param_mblk->Lsf, Quan_mblk->Lsf_MSVQ_TABLE, 
; 262  :                   LPC_ORDER, NUMSTAGES_LSPVQ_VR12_MIXED);

  0026a	6a 06		 push	 6
  0026c	6a 0a		 push	 10			; 0000000aH
  0026e	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00271	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00274	51		 push	 ecx
  00275	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  00278	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0027b	50		 push	 eax
  0027c	8b 4d ec	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0027f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00282	52		 push	 edx
  00283	e8 00 00 00 00	 call	 _VoxDecLspMSVQ@20
$L1970:

; 263  :    }
; 264  : 
; 265  :    /*******************************************************************
; 266  :     Calculate the harmonic amplitudes
; 267  :     *******************************************************************/
; 268  :    nHarm = getnHarm(Param_mblk->Pitch);

  00288	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  0028b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0028e	51		 push	 ecx
  0028f	e8 00 00 00 00	 call	 _getnHarm@4
  00294	66 89 45 fc	 mov	 WORD PTR _nHarm$[ebp], ax

; 269  :    scale = (float)sqrt(2.0*Param_mblk->Energy/nHarm);

  00298	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  0029b	d9 42 08	 fld	 DWORD PTR [edx+8]
  0029e	dc c0		 fadd	 ST(0), ST(0)
  002a0	0f bf 45 fc	 movsx	 eax, WORD PTR _nHarm$[ebp]
  002a4	89 45 e4	 mov	 DWORD PTR tv399[ebp], eax
  002a7	db 45 e4	 fild	 DWORD PTR tv399[ebp]
  002aa	de f9		 fdivp	 ST(1), ST(0)
  002ac	83 ec 08	 sub	 esp, 8
  002af	dd 1c 24	 fstp	 QWORD PTR [esp]
  002b2	e8 00 00 00 00	 call	 _sqrt
  002b7	83 c4 08	 add	 esp, 8
  002ba	d9 5d f4	 fstp	 DWORD PTR _scale$[ebp]

; 270  :    for (i=0; i< nHarm; i++)

  002bd	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002c4	eb 09		 jmp	 SHORT $L1973
$L1974:
  002c6	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  002c9	83 c1 01	 add	 ecx, 1
  002cc	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L1973:
  002cf	0f bf 55 fc	 movsx	 edx, WORD PTR _nHarm$[ebp]
  002d3	39 55 f8	 cmp	 DWORD PTR _i$[ebp], edx
  002d6	7d 11		 jge	 SHORT $L1975

; 271  :       Param_mblk->Amp[i] = scale;

  002d8	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  002db	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002de	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  002e1	8b 45 f4	 mov	 eax, DWORD PTR _scale$[ebp]
  002e4	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
  002e7	eb dd		 jmp	 SHORT $L1974
$L1975:

; 272  :    for (i=nHarm; i< MAXHARM; i++)

  002e9	0f bf 4d fc	 movsx	 ecx, WORD PTR _nHarm$[ebp]
  002ed	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
  002f0	eb 09		 jmp	 SHORT $L1976
$L1977:
  002f2	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  002f5	83 c2 01	 add	 edx, 1
  002f8	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L1976:
  002fb	83 7d f8 5a	 cmp	 DWORD PTR _i$[ebp], 90	; 0000005aH
  002ff	7d 12		 jge	 SHORT $L1978

; 273  :       Param_mblk->Amp[i] = 0.0F; 

  00301	8b 45 f0	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  00304	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00307	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0030a	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0
  00311	eb df		 jmp	 SHORT $L1977
$L1978:

; 274  :  
; 275  :    /*******************************************************************
; 276  :     Update the background noise estimate.  First, fade to silence 
; 277  :     during background noise.  Second, update the background noise 
; 278  :     estimate based on the frame energy and our current estimate
; 279  :     *******************************************************************/
; 280  :    if (Quan_mblk->Class==SILENCE_FRAME)

  00313	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00316	0f bf 48 4c	 movsx	 ecx, WORD PTR [eax+76]
  0031a	83 f9 03	 cmp	 ecx, 3
  0031d	75 14		 jne	 SHORT $L1979

; 281  :    {
; 282  :       Quan_mblk->BckGrndEnergyEst *= BCKGRND_FADE_FACTOR;

  0031f	8b 55 ec	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00322	d9 42 5c	 fld	 DWORD PTR [edx+92]
  00325	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f7d70a4
  0032b	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  0032e	d9 58 5c	 fstp	 DWORD PTR [eax+92]

; 283  :    }
; 284  :    else

  00331	eb 46		 jmp	 SHORT $L1980
$L1979:

; 285  :    {
; 286  :       Quan_mblk->BckGrndEnergyEst = (Quan_mblk->BckGrndEnergyEst*BCKGRND_MULT_FACTOR) + BCKGRND_ADD_FACTOR;

  00333	8b 4d ec	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00336	d9 41 5c	 fld	 DWORD PTR [ecx+92]
  00339	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f8147ae
  0033f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@40a00000
  00345	8b 55 ec	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00348	d9 5a 5c	 fstp	 DWORD PTR [edx+92]

; 287  :       if (Quan_mblk->PrevClass!= INIT_CLASS)  /* first frame is always low energy due to zero-padding */

  0034b	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  0034e	0f bf 48 4e	 movsx	 ecx, WORD PTR [eax+78]
  00352	81 f9 e7 03 00
	00		 cmp	 ecx, 999		; 000003e7H
  00358	74 1f		 je	 SHORT $L1980

; 288  :          if (Param_mblk->Energy < Quan_mblk->BckGrndEnergyEst)

  0035a	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  0035d	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00360	d9 42 08	 fld	 DWORD PTR [edx+8]
  00363	d8 58 5c	 fcomp	 DWORD PTR [eax+92]
  00366	df e0		 fnstsw	 ax
  00368	f6 c4 05	 test	 ah, 5
  0036b	7a 0c		 jp	 SHORT $L1980

; 289  :             Quan_mblk->BckGrndEnergyEst = Param_mblk->Energy;

  0036d	8b 4d ec	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00370	8b 55 f0	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  00373	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00376	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
$L1980:

; 290  :    }
; 291  : 
; 292  :    /**********************************************************************
; 293  :     Update our memory 
; 294  :     **********************************************************************/
; 295  :    Quan_mblk->PrevClass = Quan_mblk->Class;

  00379	8b 4d ec	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0037c	8b 55 ec	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0037f	66 8b 42 4c	 mov	 ax, WORD PTR [edx+76]
  00383	66 89 41 4e	 mov	 WORD PTR [ecx+78], ax

; 296  :    memcpy(Quan_mblk->PrevLsf, Param_mblk->Lsf, sizeof(float)*LPC_ORDER);

  00387	6a 28		 push	 40			; 00000028H
  00389	8b 4d f0	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  0038c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0038f	52		 push	 edx
  00390	8b 45 ec	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00393	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00396	51		 push	 ecx
  00397	e8 00 00 00 00	 call	 _memcpy
  0039c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 297  : 
; 298  :    vemServiceState(Quan_mblk->vemKeyPostUnQuan);

  0039f	8b 55 ec	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  003a2	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  003a5	50		 push	 eax
  003a6	e8 00 00 00 00	 call	 _vemServiceState@4

; 299  :     
; 300  :    return 0;

  003ab	66 33 c0	 xor	 ax, ax

; 301  : }

  003ae	5e		 pop	 esi
  003af	8b e5		 mov	 esp, ebp
  003b1	5d		 pop	 ebp
  003b2	c2 08 00	 ret	 8
_VoxUnQuanVR12@8 ENDP
_TEXT	ENDS
PUBLIC	_VoxInitQuanVR12@8
PUBLIC	??_C@_09HOIKEFPG@post?5quan?$AA@		; `string'
PUBLIC	??_C@_0M@IMJNPLMH@post?5unquan?$AA@		; `string'
PUBLIC	??_C@_09FPJEIFPH@max?5pitch?$AA@		; `string'
PUBLIC	??_C@_09FOJIBPED@min?5pitch?$AA@		; `string'
EXTRN	_vemRegisterState@8:NEAR
EXTRN	_vemRegisterConstShort@12:NEAR
EXTRN	_calloc:NEAR
EXTRN	_voxQuanGetPvTableVR12@0:NEAR
EXTRN	_voxQuanGetEnergyTableVR12_Voiced@0:NEAR
EXTRN	_voxQuanGetEnergyTableVR12_UnVoiced@0:NEAR
EXTRN	_voxQuanFillLsfMSVQTableVR12@4:NEAR
EXTRN	_VoxInitMSVQ@4:NEAR
;	COMDAT ??_C@_09HOIKEFPG@post?5quan?$AA@
CONST	SEGMENT
??_C@_09HOIKEFPG@post?5quan?$AA@ DB 'post quan', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IMJNPLMH@post?5unquan?$AA@
CONST	SEGMENT
??_C@_0M@IMJNPLMH@post?5unquan?$AA@ DB 'post unquan', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FPJEIFPH@max?5pitch?$AA@
CONST	SEGMENT
??_C@_09FPJEIFPH@max?5pitch?$AA@ DB 'max pitch', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FOJIBPED@min?5pitch?$AA@
CONST	SEGMENT
??_C@_09FOJIBPED@min?5pitch?$AA@ DB 'min pitch', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxInitQuanVR12@8
_TEXT	SEGMENT
_Quan_mblk$ = -4
_hQuan_mblk$ = 8
_pVemMem$ = 12
_VoxInitQuanVR12@8 PROC NEAR				; COMDAT

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 329  :   QUAN_12 *Quan_mblk;
; 330  : 
; 331  :   if(VOX_MEM_INIT(Quan_mblk=*hQuan_mblk,1,sizeof(QUAN_12))) 

  00004	6a 6c		 push	 108			; 0000006cH
  00006	6a 01		 push	 1
  00008	e8 00 00 00 00	 call	 _calloc
  0000d	83 c4 08	 add	 esp, 8
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _hQuan_mblk$[ebp]
  00013	89 01		 mov	 DWORD PTR [ecx], eax
  00015	8b 55 08	 mov	 edx, DWORD PTR _hQuan_mblk$[ebp]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	89 45 fc	 mov	 DWORD PTR _Quan_mblk$[ebp], eax
  0001d	83 7d fc 00	 cmp	 DWORD PTR _Quan_mblk$[ebp], 0
  00021	75 09		 jne	 SHORT $L1991

; 332  :      return 1;

  00023	66 b8 01 00	 mov	 ax, 1
  00027	e9 a9 02 00 00	 jmp	 $L1988
$L1991:

; 333  : 
; 334  :   /**** initialize Pv table ****/
; 335  :   Quan_mblk->Pv_INDEX = 0;

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0002f	66 c7 41 06 00
	00		 mov	 WORD PTR [ecx+6], 0

; 336  :   Quan_mblk->Pv_SIZE = (1<<PV_BITS_VR12_MIXED); 

  00035	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00038	66 c7 42 04 08
	00		 mov	 WORD PTR [edx+4], 8

; 337  :   Quan_mblk->Pv_TABLE = voxQuanGetPvTableVR12();

  0003e	e8 00 00 00 00	 call	 _voxQuanGetPvTableVR12@0
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00046	89 01		 mov	 DWORD PTR [ecx], eax

; 338  : 
; 339  :   /**** initialize pitch table ****/
; 340  :   Quan_mblk->Pitch_INDEX = 0;

  00048	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0004b	66 c7 42 12 00
	00		 mov	 WORD PTR [edx+18], 0

; 341  :   Quan_mblk->Pitch_SIZE = (1<<F0_BITS_VR12_VOICED);

  00051	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00054	66 c7 40 10 80
	00		 mov	 WORD PTR [eax+16], 128	; 00000080H

; 342  :   Quan_mblk->Pitch_TABLE = NULL;    /* calculate in the function */

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0005d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 343  : 
; 344  :   /***** initialize Energy table *****/
; 345  :   Quan_mblk->Energy_INDEX = 0;

  00064	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00067	66 c7 42 22 00
	00		 mov	 WORD PTR [edx+34], 0

; 346  :   Quan_mblk->Energy_SIZE_Voiced = ((short)1<<GAIN_BITS_VR12_VOICED);

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00070	66 c7 40 18 20
	00		 mov	 WORD PTR [eax+24], 32	; 00000020H

; 347  :   Quan_mblk->Energy_TABLE_Voiced = voxQuanGetEnergyTableVR12_Voiced();

  00076	e8 00 00 00 00	 call	 _voxQuanGetEnergyTableVR12_Voiced@0
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0007e	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 348  :   Quan_mblk->Energy_SIZE_UnVoiced = ((short)1<<GAIN_BITS_VR12_UNVOICED);

  00081	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00084	66 c7 42 20 20
	00		 mov	 WORD PTR [edx+32], 32	; 00000020H

; 349  :   Quan_mblk->Energy_TABLE_UnVoiced = voxQuanGetEnergyTableVR12_UnVoiced();

  0008a	e8 00 00 00 00	 call	 _voxQuanGetEnergyTableVR12_UnVoiced@0
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00092	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 350  : 
; 351  : 
; 352  :   if(VOX_MEM_INIT(Quan_mblk->Lsf_INDEX, NUMSTAGES_LSPVQ_VR12_VOICED,sizeof(unsigned short))) 

  00095	6a 02		 push	 2
  00097	6a 06		 push	 6
  00099	e8 00 00 00 00	 call	 _calloc
  0009e	83 c4 08	 add	 esp, 8
  000a1	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  000a4	89 42 2c	 mov	 DWORD PTR [edx+44], eax
  000a7	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  000aa	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  000ae	75 09		 jne	 SHORT $L1996

; 353  :      return 1;

  000b0	66 b8 01 00	 mov	 ax, 1
  000b4	e9 1c 02 00 00	 jmp	 $L1988
$L1996:

; 354  : 
; 355  :   if(voxQuanFillLsfMSVQTableVR12(&Quan_mblk->Lsf_MSVQ_TABLE)) 

  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  000bc	83 c1 30	 add	 ecx, 48			; 00000030H
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 _voxQuanFillLsfMSVQTableVR12@4
  000c5	0f b7 d0	 movzx	 edx, ax
  000c8	85 d2		 test	 edx, edx
  000ca	74 09		 je	 SHORT $L1997

; 356  :       return 1;

  000cc	66 b8 01 00	 mov	 ax, 1
  000d0	e9 00 02 00 00	 jmp	 $L1988
$L1997:

; 357  :   
; 358  :   if (VoxInitMSVQ(&(Quan_mblk->MSVQ_struct)))

  000d5	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  000d8	83 c0 44	 add	 eax, 68			; 00000044H
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 _VoxInitMSVQ@4
  000e1	0f b7 c8	 movzx	 ecx, ax
  000e4	85 c9		 test	 ecx, ecx
  000e6	74 09		 je	 SHORT $L1998

; 359  :      return 1;

  000e8	66 b8 01 00	 mov	 ax, 1
  000ec	e9 e4 01 00 00	 jmp	 $L1988
$L1998:

; 360  : 
; 361  :   if(VOX_MEM_INIT(Quan_mblk->PrevLsf, LPC_ORDER,sizeof(float))) 

  000f1	6a 04		 push	 4
  000f3	6a 0a		 push	 10			; 0000000aH
  000f5	e8 00 00 00 00	 call	 _calloc
  000fa	83 c4 08	 add	 esp, 8
  000fd	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00100	89 42 50	 mov	 DWORD PTR [edx+80], eax
  00103	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00106	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0010a	75 09		 jne	 SHORT $L2000

; 362  :      return 1;

  0010c	66 b8 01 00	 mov	 ax, 1
  00110	e9 c0 01 00 00	 jmp	 $L1988
$L2000:

; 363  : 
; 364  :   if(VOX_MEM_INIT(Quan_mblk->UVLsf, LPC_ORDER,sizeof(float))) 

  00115	6a 04		 push	 4
  00117	6a 0a		 push	 10			; 0000000aH
  00119	e8 00 00 00 00	 call	 _calloc
  0011e	83 c4 08	 add	 esp, 8
  00121	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00124	89 41 54	 mov	 DWORD PTR [ecx+84], eax
  00127	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0012a	83 7a 54 00	 cmp	 DWORD PTR [edx+84], 0
  0012e	75 09		 jne	 SHORT $L2002

; 365  :      return 1;

  00130	66 b8 01 00	 mov	 ax, 1
  00134	e9 9c 01 00 00	 jmp	 $L1988
$L2002:

; 366  : 
; 367  :   Quan_mblk->PrevLsf[0] = INITIAL_LSF_0;

  00139	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  0013c	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0013f	c7 01 00 80 ab
	43		 mov	 DWORD PTR [ecx], 1135312896 ; 43ab8000H

; 368  :   Quan_mblk->PrevLsf[1] = INITIAL_LSF_1;

  00145	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00148	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0014b	c7 40 04 00 00
	3c 44		 mov	 DWORD PTR [eax+4], 1144782848 ; 443c0000H

; 369  :   Quan_mblk->PrevLsf[2] = INITIAL_LSF_2;

  00152	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00155	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00158	c7 42 08 00 00
	93 44		 mov	 DWORD PTR [edx+8], 1150484480 ; 44930000H

; 370  :   Quan_mblk->PrevLsf[3] = INITIAL_LSF_3;

  0015f	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00162	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00165	c7 41 0c 00 00
	c0 44		 mov	 DWORD PTR [ecx+12], 1153433600 ; 44c00000H

; 371  :   Quan_mblk->PrevLsf[4] = INITIAL_LSF_4;

  0016c	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0016f	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00172	c7 40 10 00 20
	e6 44		 mov	 DWORD PTR [eax+16], 1155932160 ; 44e62000H

; 372  :   Quan_mblk->PrevLsf[5] = INITIAL_LSF_5;

  00179	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0017c	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0017f	c7 42 14 00 d0
	08 45		 mov	 DWORD PTR [edx+20], 1158205440 ; 4508d000H

; 373  :   Quan_mblk->PrevLsf[6] = INITIAL_LSF_6;

  00186	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00189	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0018c	c7 41 18 00 f0
	19 45		 mov	 DWORD PTR [ecx+24], 1159327744 ; 4519f000H

; 374  :   Quan_mblk->PrevLsf[7] = INITIAL_LSF_7;

  00193	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00196	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00199	c7 40 1c 00 60
	32 45		 mov	 DWORD PTR [eax+28], 1160929280 ; 45326000H

; 375  :   Quan_mblk->PrevLsf[8] = INITIAL_LSF_8;

  001a0	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  001a3	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  001a6	c7 42 20 00 30
	46 45		 mov	 DWORD PTR [edx+32], 1162227712 ; 45463000H

; 376  :   Quan_mblk->PrevLsf[9] = INITIAL_LSF_9;

  001ad	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  001b0	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  001b3	c7 41 24 00 30
	5e 45		 mov	 DWORD PTR [ecx+36], 1163800576 ; 455e3000H

; 377  : 
; 378  :   Quan_mblk->UVLsf[0] = INITIAL_LSF_0;

  001ba	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  001bd	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  001c0	c7 00 00 80 ab
	43		 mov	 DWORD PTR [eax], 1135312896 ; 43ab8000H

; 379  :   Quan_mblk->UVLsf[1] = INITIAL_LSF_1;

  001c6	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  001c9	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  001cc	c7 42 04 00 00
	3c 44		 mov	 DWORD PTR [edx+4], 1144782848 ; 443c0000H

; 380  :   Quan_mblk->UVLsf[2] = INITIAL_LSF_2;

  001d3	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  001d6	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  001d9	c7 41 08 00 00
	93 44		 mov	 DWORD PTR [ecx+8], 1150484480 ; 44930000H

; 381  :   Quan_mblk->UVLsf[3] = INITIAL_LSF_3;

  001e0	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  001e3	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  001e6	c7 40 0c 00 00
	c0 44		 mov	 DWORD PTR [eax+12], 1153433600 ; 44c00000H

; 382  :   Quan_mblk->UVLsf[4] = INITIAL_LSF_4;

  001ed	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  001f0	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  001f3	c7 42 10 00 20
	e6 44		 mov	 DWORD PTR [edx+16], 1155932160 ; 44e62000H

; 383  :   Quan_mblk->UVLsf[5] = INITIAL_LSF_5;

  001fa	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  001fd	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00200	c7 41 14 00 d0
	08 45		 mov	 DWORD PTR [ecx+20], 1158205440 ; 4508d000H

; 384  :   Quan_mblk->UVLsf[6] = INITIAL_LSF_6;

  00207	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0020a	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0020d	c7 40 18 00 f0
	19 45		 mov	 DWORD PTR [eax+24], 1159327744 ; 4519f000H

; 385  :   Quan_mblk->UVLsf[7] = INITIAL_LSF_7;

  00214	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00217	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0021a	c7 42 1c 00 60
	32 45		 mov	 DWORD PTR [edx+28], 1160929280 ; 45326000H

; 386  :   Quan_mblk->UVLsf[8] = INITIAL_LSF_8;

  00221	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00224	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00227	c7 41 20 00 30
	46 45		 mov	 DWORD PTR [ecx+32], 1162227712 ; 45463000H

; 387  :   Quan_mblk->UVLsf[9] = INITIAL_LSF_9;

  0022e	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00231	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00234	c7 40 24 00 30
	5e 45		 mov	 DWORD PTR [eax+36], 1163800576 ; 455e3000H

; 388  : 
; 389  :   Quan_mblk->PrevClass        = INIT_CLASS;

  0023b	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0023e	66 c7 41 4e e7
	03		 mov	 WORD PTR [ecx+78], 999	; 000003e7H

; 390  :   Quan_mblk->Seed             = 55;   /* some non-zero number */

  00244	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00247	c7 42 58 37 00
	00 00		 mov	 DWORD PTR [edx+88], 55	; 00000037H

; 391  :   Quan_mblk->BckGrndEnergyEst = 1000000.0F;  /* some large number */  

  0024e	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00251	c7 40 5c 00 24
	74 49		 mov	 DWORD PTR [eax+92], 1232348160 ; 49742400H

; 392  : 
; 393  :   Quan_mblk->pVemMem=pVemMem;

  00258	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0025b	8b 55 0c	 mov	 edx, DWORD PTR _pVemMem$[ebp]
  0025e	89 51 60	 mov	 DWORD PTR [ecx+96], edx

; 394  :   if(!(Quan_mblk->vemKeyPostQuan=vemRegisterState(
; 395  :      ((VEM_MAIN_STRUCT *)pVemMem)->pMemoryHandler,"post quan")))

  00261	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09HOIKEFPG@post?5quan?$AA@
  00266	8b 45 0c	 mov	 eax, DWORD PTR _pVemMem$[ebp]
  00269	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026b	51		 push	 ecx
  0026c	e8 00 00 00 00	 call	 _vemRegisterState@8
  00271	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00274	89 42 64	 mov	 DWORD PTR [edx+100], eax
  00277	8b 45 fc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  0027a	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  0027e	75 06		 jne	 SHORT $L2004

; 396  :   {
; 397  : #if VEM_DEFINED == 1
; 398  :      return 1;

  00280	66 b8 01 00	 mov	 ax, 1
  00284	eb 4f		 jmp	 SHORT $L1988
$L2004:

; 399  : #endif
; 400  :   }
; 401  : 
; 402  :   if(!(Quan_mblk->vemKeyPostUnQuan=vemRegisterState(
; 403  :      ((VEM_MAIN_STRUCT *)pVemMem)->pMemoryHandler,"post unquan")))

  00286	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@IMJNPLMH@post?5unquan?$AA@
  0028b	8b 4d 0c	 mov	 ecx, DWORD PTR _pVemMem$[ebp]
  0028e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00290	52		 push	 edx
  00291	e8 00 00 00 00	 call	 _vemRegisterState@8
  00296	8b 4d fc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00299	89 41 68	 mov	 DWORD PTR [ecx+104], eax
  0029c	8b 55 fc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0029f	83 7a 68 00	 cmp	 DWORD PTR [edx+104], 0
  002a3	75 06		 jne	 SHORT $L2007

; 404  :   {
; 405  : #if VEM_DEFINED == 1
; 406  :      return 1;

  002a5	66 b8 01 00	 mov	 ax, 1
  002a9	eb 2a		 jmp	 SHORT $L1988
$L2007:

; 407  : #endif
; 408  :   }
; 409  :   vemRegisterConstShort(((VEM_MAIN_STRUCT *)pVemMem)->pMemoryHandler, 
; 410  :      (short)QUANT_MAX_PITCH_VR, "max pitch");

  002ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09FPJEIFPH@max?5pitch?$AA@
  002b0	68 a0 00 00 00	 push	 160			; 000000a0H
  002b5	8b 45 0c	 mov	 eax, DWORD PTR _pVemMem$[ebp]
  002b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ba	51		 push	 ecx
  002bb	e8 00 00 00 00	 call	 _vemRegisterConstShort@12

; 411  : 
; 412  :   vemRegisterConstShort(((VEM_MAIN_STRUCT *)pVemMem)->pMemoryHandler, 
; 413  :      (short)QUANT_MIN_PITCH_VR, "min pitch");

  002c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09FOJIBPED@min?5pitch?$AA@
  002c5	6a 08		 push	 8
  002c7	8b 55 0c	 mov	 edx, DWORD PTR _pVemMem$[ebp]
  002ca	8b 02		 mov	 eax, DWORD PTR [edx]
  002cc	50		 push	 eax
  002cd	e8 00 00 00 00	 call	 _vemRegisterConstShort@12

; 414  : 
; 415  :   return 0;

  002d2	66 33 c0	 xor	 ax, ax
$L1988:

; 416  : }

  002d5	8b e5		 mov	 esp, ebp
  002d7	5d		 pop	 ebp
  002d8	c2 08 00	 ret	 8
_VoxInitQuanVR12@8 ENDP
_TEXT	ENDS
PUBLIC	_VoxFreeQuanVR12@4
EXTRN	_free:NEAR
EXTRN	_VoxFreeMSVQ@4:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxFreeQuanVR12@4
_TEXT	SEGMENT
_pQuan$ = -4
_hQuan_mblk$ = 8
_VoxFreeQuanVR12@4 PROC NEAR				; COMDAT

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 443  :   QUAN_12* pQuan=(QUAN_12 *)*hQuan_mblk;

  00004	8b 45 08	 mov	 eax, DWORD PTR _hQuan_mblk$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	89 4d fc	 mov	 DWORD PTR _pQuan$[ebp], ecx

; 444  :   if(*hQuan_mblk) {

  0000c	8b 55 08	 mov	 edx, DWORD PTR _hQuan_mblk$[ebp]
  0000f	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00012	0f 84 b3 00 00
	00		 je	 $L2020

; 445  :      /***** free LSF Table *****/
; 446  :      VOX_MEM_FREE(pQuan->Lsf_INDEX);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _pQuan$[ebp]
  0001b	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0001f	74 19		 je	 SHORT $L2021
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _pQuan$[ebp]
  00024	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00027	52		 push	 edx
  00028	e8 00 00 00 00	 call	 _free
  0002d	83 c4 04	 add	 esp, 4
  00030	8b 45 fc	 mov	 eax, DWORD PTR _pQuan$[ebp]
  00033	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
$L2021:

; 447  :      VOX_MEM_FREE(pQuan->PrevLsf);

  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _pQuan$[ebp]
  0003d	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  00041	74 19		 je	 SHORT $L2023
  00043	8b 55 fc	 mov	 edx, DWORD PTR _pQuan$[ebp]
  00046	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _free
  0004f	83 c4 04	 add	 esp, 4
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _pQuan$[ebp]
  00055	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
$L2023:

; 448  :      VOX_MEM_FREE(pQuan->UVLsf);

  0005c	8b 55 fc	 mov	 edx, DWORD PTR _pQuan$[ebp]
  0005f	83 7a 54 00	 cmp	 DWORD PTR [edx+84], 0
  00063	74 19		 je	 SHORT $L2025
  00065	8b 45 fc	 mov	 eax, DWORD PTR _pQuan$[ebp]
  00068	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 _free
  00071	83 c4 04	 add	 esp, 4
  00074	8b 55 fc	 mov	 edx, DWORD PTR _pQuan$[ebp]
  00077	c7 42 54 00 00
	00 00		 mov	 DWORD PTR [edx+84], 0
$L2025:

; 449  :      VOX_MEM_FREE_CONST(pQuan->Lsf_MSVQ_TABLE);  

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _pQuan$[ebp]
  00081	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  00085	74 19		 je	 SHORT $L2027
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _pQuan$[ebp]
  0008a	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0008d	52		 push	 edx
  0008e	e8 00 00 00 00	 call	 _free
  00093	83 c4 04	 add	 esp, 4
  00096	8b 45 fc	 mov	 eax, DWORD PTR _pQuan$[ebp]
  00099	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
$L2027:

; 450  :      
; 451  :      VoxFreeMSVQ(&(pQuan->MSVQ_struct));

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _pQuan$[ebp]
  000a3	83 c1 44	 add	 ecx, 68			; 00000044H
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 _VoxFreeMSVQ@4

; 452  : 
; 453  :      VOX_MEM_FREE(*hQuan_mblk);

  000ac	8b 55 08	 mov	 edx, DWORD PTR _hQuan_mblk$[ebp]
  000af	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000b2	74 17		 je	 SHORT $L2020
  000b4	8b 45 08	 mov	 eax, DWORD PTR _hQuan_mblk$[ebp]
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 _free
  000bf	83 c4 04	 add	 esp, 4
  000c2	8b 55 08	 mov	 edx, DWORD PTR _hQuan_mblk$[ebp]
  000c5	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L2020:

; 454  :   }
; 455  : 
; 456  :   return 0;

  000cb	66 33 c0	 xor	 ax, ax

; 457  : }

  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
_VoxFreeQuanVR12@4 ENDP
_TEXT	ENDS
END
