; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\p5fft.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _nspcUndCalcFftTwdTbl_great@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nspcUndGetFftTwdTbl_great@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nspCalcBitRevTbl@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nspGetBitRevTbl@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nspcbBitRev1@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nspcUndSplit_FFT_forward@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nspcUndSplit_FFT_inverse@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nspcUndSplit_FFT@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nspcUndRadix2_FFT@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nspcUndRealRecom_Fft@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nspcUndCcsRecom_Fft@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nspsbMpy1@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vox_nspsRealFft@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vox_nspsCcsFft@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vox_nspcFft@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _nspFreeFftResources@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_nspGetBitRevTbl@4
EXTRN	_malloc:NEAR
_BSS	SEGMENT
_ctxRevTbl DD	020H DUP (?)
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\p5fft.c
_BSS	ENDS
;	COMDAT _nspGetBitRevTbl@4
_TEXT	SEGMENT
_ptbl$ = -4
_order$ = 8
_nspGetBitRevTbl@4 PROC NEAR				; COMDAT

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 202  :     int          *ptbl;
; 203  :     ptbl=ctxRevTbl[order];

  00004	8b 45 08	 mov	 eax, DWORD PTR _order$[ebp]
  00007	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _ctxRevTbl[eax*4]
  0000e	89 4d fc	 mov	 DWORD PTR _ptbl$[ebp], ecx

; 204  :     if (!ptbl) {

  00011	83 7d fc 00	 cmp	 DWORD PTR _ptbl$[ebp], 0
  00015	75 56		 jne	 SHORT $L1134

; 205  :         ptbl=(int*) malloc((1<<order) *sizeof(int));

  00017	ba 01 00 00 00	 mov	 edx, 1
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _order$[ebp]
  0001f	d3 e2		 shl	 edx, cl
  00021	c1 e2 02	 shl	 edx, 2
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 _malloc
  0002a	83 c4 04	 add	 esp, 4
  0002d	89 45 fc	 mov	 DWORD PTR _ptbl$[ebp], eax

; 206  :         if (!ptbl){

  00030	83 7d fc 00	 cmp	 DWORD PTR _ptbl$[ebp], 0
  00034	75 1d		 jne	 SHORT $L1137

; 207  :             ptbl=(int*) malloc((1<<order) *sizeof(int));

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _order$[ebp]
  0003e	d3 e0		 shl	 eax, cl
  00040	c1 e0 02	 shl	 eax, 2
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _malloc
  00049	83 c4 04	 add	 esp, 4
  0004c	89 45 fc	 mov	 DWORD PTR _ptbl$[ebp], eax

; 208  :             return(NULL);

  0004f	33 c0		 xor	 eax, eax
  00051	eb 1d		 jmp	 SHORT $L1132
$L1137:

; 209  :         } else {
; 210  :            nspCalcBitRevTbl(ptbl,order);

  00053	8b 4d 08	 mov	 ecx, DWORD PTR _order$[ebp]
  00056	51		 push	 ecx
  00057	8b 55 fc	 mov	 edx, DWORD PTR _ptbl$[ebp]
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 _nspCalcBitRevTbl@8

; 211  :            ctxRevTbl[order]=ptbl;

  00060	8b 45 08	 mov	 eax, DWORD PTR _order$[ebp]
  00063	8b 4d fc	 mov	 ecx, DWORD PTR _ptbl$[ebp]
  00066	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _ctxRevTbl[eax*4], ecx
$L1134:

; 212  :         }
; 213  :     }
; 214  :     return ptbl;

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _ptbl$[ebp]
$L1132:

; 215  : }

  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
_nspGetBitRevTbl@4 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT _nspCalcBitRevTbl@8
_TEXT	SEGMENT
_j$ = -16
_k$ = -12
_n$ = -8
_i$ = -4
_tbl$ = 8
_order$ = 12
_nspCalcBitRevTbl@8 PROC NEAR				; COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 178  :    int  n, i, j, k;
; 179  : 
; 180  :    n=1<<order;

  00006	b8 01 00 00 00	 mov	 eax, 1
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _order$[ebp]
  0000e	d3 e0		 shl	 eax, cl
  00010	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax

; 181  :    tbl[0]=0;

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _tbl$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 182  :    tbl[n-1]=n-1;

  0001c	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  0001f	83 ea 01	 sub	 edx, 1
  00022	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _tbl$[ebp]
  00028	89 54 81 fc	 mov	 DWORD PTR [ecx+eax*4-4], edx

; 183  :    j = 0;

  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0

; 184  :    for (i = 1 ; i < (n-1) ; i++) {

  00033	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0003a	eb 09		 jmp	 SHORT $L1122
$L1123:
  0003c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0003f	83 c2 01	 add	 edx, 1
  00042	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L1122:
  00045	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00048	83 e8 01	 sub	 eax, 1
  0004b	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  0004e	7d 4e		 jge	 SHORT $L1117

; 185  :       k=n>>1;

  00050	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  00053	d1 f9		 sar	 ecx, 1
  00055	89 4d f4	 mov	 DWORD PTR _k$[ebp], ecx
$L1126:

; 186  :       while (k<=j) {

  00058	8b 55 f4	 mov	 edx, DWORD PTR _k$[ebp]
  0005b	3b 55 f0	 cmp	 edx, DWORD PTR _j$[ebp]
  0005e	7f 13		 jg	 SHORT $L1127

; 187  :          j=j-k;

  00060	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00063	2b 45 f4	 sub	 eax, DWORD PTR _k$[ebp]
  00066	89 45 f0	 mov	 DWORD PTR _j$[ebp], eax

; 188  :          k=k>>1;

  00069	8b 4d f4	 mov	 ecx, DWORD PTR _k$[ebp]
  0006c	d1 f9		 sar	 ecx, 1
  0006e	89 4d f4	 mov	 DWORD PTR _k$[ebp], ecx

; 189  :       }

  00071	eb e5		 jmp	 SHORT $L1126
$L1127:

; 190  :       j=j+k;

  00073	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  00076	03 55 f4	 add	 edx, DWORD PTR _k$[ebp]
  00079	89 55 f0	 mov	 DWORD PTR _j$[ebp], edx

; 191  :       if (i<=j){

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0007f	3b 45 f0	 cmp	 eax, DWORD PTR _j$[ebp]
  00082	7f 18		 jg	 SHORT $L1128

; 192  :          tbl[j]=i;

  00084	8b 4d f0	 mov	 ecx, DWORD PTR _j$[ebp]
  00087	8b 55 08	 mov	 edx, DWORD PTR _tbl$[ebp]
  0008a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0008d	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 193  :          tbl[i]=j;

  00090	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00093	8b 55 08	 mov	 edx, DWORD PTR _tbl$[ebp]
  00096	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00099	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
$L1128:

; 194  :       }
; 195  :    }

  0009c	eb 9e		 jmp	 SHORT $L1123
$L1117:

; 196  : } /* nspCalcBitRevTbl */

  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
_nspCalcBitRevTbl@8 ENDP
_TEXT	ENDS
PUBLIC	_nspcUndRealRecom_Fft@16
EXTRN	__fltused:NEAR
; Function compile flags: /Odt
;	COMDAT _nspcUndRealRecom_Fft@16
_TEXT	SEGMENT
_j$ = -32
_t4$ = -28
_t1$ = -24
_s1$ = -20
_s2$ = -16
_t3$ = -12
_t2$ = -8
_i$ = -4
_x$ = 8
_n$ = 12
_is$ = 16
_c$ = 20
_nspcUndRealRecom_Fft@16 PROC NEAR			; COMDAT

; 1361 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi

; 1362 :    float   s1, s2, t3, t4, t1, t2;
; 1363 :    int     i, j;
; 1364 : 
; 1365 :    if ( n == 1 ) return;

  00007	83 7d 0c 01	 cmp	 DWORD PTR _n$[ebp], 1
  0000b	75 05		 jne	 SHORT $L1480
  0000d	e9 2b 02 00 00	 jmp	 $L1471
$L1480:

; 1366 : 
; 1367 :    if ( is < 0 ) {                    /* inverse transform */

  00012	83 7d 10 00	 cmp	 DWORD PTR _is$[ebp], 0
  00016	0f 8d 03 01 00
	00		 jge	 $L1481

; 1368 : 
; 1369 :       for ( i=2, j=2*n-2 ; i < n ; i+=2, j-=2 ) {

  0001c	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _i$[ebp], 2
  00023	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]
  00026	8d 4c 00 fe	 lea	 ecx, DWORD PTR [eax+eax-2]
  0002a	89 4d e0	 mov	 DWORD PTR _j$[ebp], ecx
  0002d	eb 12		 jmp	 SHORT $L1482
$L1483:
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00032	83 c2 02	 add	 edx, 2
  00035	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  00038	8b 45 e0	 mov	 eax, DWORD PTR _j$[ebp]
  0003b	83 e8 02	 sub	 eax, 2
  0003e	89 45 e0	 mov	 DWORD PTR _j$[ebp], eax
$L1482:
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00044	3b 4d 0c	 cmp	 ecx, DWORD PTR _n$[ebp]
  00047	0f 8d cd 00 00
	00		 jge	 $L1484

; 1370 :          t2     = x[i+1] + x[j+1];

  0004d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00050	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00053	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  00056	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00059	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  0005d	d8 44 8e 04	 fadd	 DWORD PTR [esi+ecx*4+4]
  00061	d9 5d f8	 fstp	 DWORD PTR _t2$[ebp]

; 1371 :          t1     = x[ i ] - x[ j ];

  00064	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00067	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0006a	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  0006d	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00070	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00073	d8 24 8e	 fsub	 DWORD PTR [esi+ecx*4]
  00076	d9 5d e8	 fstp	 DWORD PTR _t1$[ebp]

; 1372 :          t4     = c[i-1]*t2 + c[i-2]*t1;

  00079	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0007c	8b 45 14	 mov	 eax, DWORD PTR _c$[ebp]
  0007f	d9 45 f8	 fld	 DWORD PTR _t2$[ebp]
  00082	d8 4c 90 fc	 fmul	 DWORD PTR [eax+edx*4-4]
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00089	8b 55 14	 mov	 edx, DWORD PTR _c$[ebp]
  0008c	d9 45 e8	 fld	 DWORD PTR _t1$[ebp]
  0008f	d8 4c 8a f8	 fmul	 DWORD PTR [edx+ecx*4-8]
  00093	de c1		 faddp	 ST(1), ST(0)
  00095	d9 5d e4	 fstp	 DWORD PTR _t4$[ebp]

; 1373 :          x[j+1] = x[j+1] - t4;

  00098	8b 45 e0	 mov	 eax, DWORD PTR _j$[ebp]
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0009e	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  000a2	d8 65 e4	 fsub	 DWORD PTR _t4$[ebp]
  000a5	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  000a8	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000ab	d9 5c 90 04	 fstp	 DWORD PTR [eax+edx*4+4]

; 1374 :          x[i+1] = x[i+1] - t4;

  000af	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000b2	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000b5	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  000b9	d8 65 e4	 fsub	 DWORD PTR _t4$[ebp]
  000bc	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000c2	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 1375 :          t3     = c[i-2]*t2 - c[i-1]*t1;

  000c6	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000c9	8b 45 14	 mov	 eax, DWORD PTR _c$[ebp]
  000cc	d9 45 f8	 fld	 DWORD PTR _t2$[ebp]
  000cf	d8 4c 90 f8	 fmul	 DWORD PTR [eax+edx*4-8]
  000d3	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000d6	8b 55 14	 mov	 edx, DWORD PTR _c$[ebp]
  000d9	d9 45 e8	 fld	 DWORD PTR _t1$[ebp]
  000dc	d8 4c 8a fc	 fmul	 DWORD PTR [edx+ecx*4-4]
  000e0	de e9		 fsubp	 ST(1), ST(0)
  000e2	d9 5d f4	 fstp	 DWORD PTR _t3$[ebp]

; 1376 :          s1     = x[ i ] + t3;

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000e8	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000eb	d9 45 f4	 fld	 DWORD PTR _t3$[ebp]
  000ee	d8 04 81	 fadd	 DWORD PTR [ecx+eax*4]
  000f1	d9 5d ec	 fstp	 DWORD PTR _s1$[ebp]

; 1377 :          x[ j ] = x[ j ] - t3;

  000f4	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  000f7	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000fa	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  000fd	d8 65 f4	 fsub	 DWORD PTR _t3$[ebp]
  00100	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  00103	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00106	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 1378 :          x[ i ] = s1;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0010f	8b 55 ec	 mov	 edx, DWORD PTR _s1$[ebp]
  00112	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 1379 :       } /* end for */

  00115	e9 15 ff ff ff	 jmp	 $L1483
$L1484:

; 1380 : 
; 1381 :    } else {                           /* forward transform */

  0011a	e9 1e 01 00 00	 jmp	 $L1471
$L1481:

; 1382 : 
; 1383 :       for ( i=2, j=2*n-2 ; i < n ; i+=2, j-=2 ) {

  0011f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _i$[ebp], 2
  00126	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]
  00129	8d 4c 00 fe	 lea	 ecx, DWORD PTR [eax+eax-2]
  0012d	89 4d e0	 mov	 DWORD PTR _j$[ebp], ecx
  00130	eb 12		 jmp	 SHORT $L1486
$L1487:
  00132	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00135	83 c2 02	 add	 edx, 2
  00138	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  0013b	8b 45 e0	 mov	 eax, DWORD PTR _j$[ebp]
  0013e	83 e8 02	 sub	 eax, 2
  00141	89 45 e0	 mov	 DWORD PTR _j$[ebp], eax
$L1486:
  00144	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00147	3b 4d 0c	 cmp	 ecx, DWORD PTR _n$[ebp]
  0014a	0f 8d d7 00 00
	00		 jge	 $L1488

; 1384 :          t2     = x[i+1] + x[j+1];

  00150	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00153	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00156	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  00159	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0015c	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  00160	d8 44 8e 04	 fadd	 DWORD PTR [esi+ecx*4+4]
  00164	d9 5d f8	 fstp	 DWORD PTR _t2$[ebp]

; 1385 :          t1     = x[ i ] - x[ j ];

  00167	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0016a	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0016d	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  00170	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00173	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00176	d8 24 8e	 fsub	 DWORD PTR [esi+ecx*4]
  00179	d9 5d e8	 fstp	 DWORD PTR _t1$[ebp]

; 1386 :          t4     = c[i-1]*t2 - c[i-2]*t1;

  0017c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0017f	8b 45 14	 mov	 eax, DWORD PTR _c$[ebp]
  00182	d9 45 f8	 fld	 DWORD PTR _t2$[ebp]
  00185	d8 4c 90 fc	 fmul	 DWORD PTR [eax+edx*4-4]
  00189	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0018c	8b 55 14	 mov	 edx, DWORD PTR _c$[ebp]
  0018f	d9 45 e8	 fld	 DWORD PTR _t1$[ebp]
  00192	d8 4c 8a f8	 fmul	 DWORD PTR [edx+ecx*4-8]
  00196	de e9		 fsubp	 ST(1), ST(0)
  00198	d9 5d e4	 fstp	 DWORD PTR _t4$[ebp]

; 1387 :          t3     = c[i-2]*t2 + c[i-1]*t1;

  0019b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0019e	8b 4d 14	 mov	 ecx, DWORD PTR _c$[ebp]
  001a1	d9 45 f8	 fld	 DWORD PTR _t2$[ebp]
  001a4	d8 4c 81 f8	 fmul	 DWORD PTR [ecx+eax*4-8]
  001a8	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  001ab	8b 45 14	 mov	 eax, DWORD PTR _c$[ebp]
  001ae	d9 45 e8	 fld	 DWORD PTR _t1$[ebp]
  001b1	d8 4c 90 fc	 fmul	 DWORD PTR [eax+edx*4-4]
  001b5	de c1		 faddp	 ST(1), ST(0)
  001b7	d9 5d f4	 fstp	 DWORD PTR _t3$[ebp]

; 1388 :          s1     = x[ j ] + t3;

  001ba	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  001bd	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  001c0	d9 45 f4	 fld	 DWORD PTR _t3$[ebp]
  001c3	d8 04 8a	 fadd	 DWORD PTR [edx+ecx*4]
  001c6	d9 5d ec	 fstp	 DWORD PTR _s1$[ebp]

; 1389 :          x[ j ] = x[ i ] - t3;

  001c9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001cc	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  001cf	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  001d2	d8 65 f4	 fsub	 DWORD PTR _t3$[ebp]
  001d5	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  001d8	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001db	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 1390 :          x[ i ] = s1;

  001de	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001e1	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  001e4	8b 45 ec	 mov	 eax, DWORD PTR _s1$[ebp]
  001e7	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 1391 :          s2     = -x[j+1] + t4;

  001ea	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  001ed	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  001f0	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  001f4	d9 e0		 fchs
  001f6	d8 45 e4	 fadd	 DWORD PTR _t4$[ebp]
  001f9	d9 5d f0	 fstp	 DWORD PTR _s2$[ebp]

; 1392 :          x[j+1] = -x[i+1] + t4;

  001fc	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001ff	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00202	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  00206	d9 e0		 fchs
  00208	d8 45 e4	 fadd	 DWORD PTR _t4$[ebp]
  0020b	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  0020e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00211	d9 5c 90 04	 fstp	 DWORD PTR [eax+edx*4+4]

; 1393 :          x[i+1] = s2;

  00215	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00218	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0021b	8b 45 f0	 mov	 eax, DWORD PTR _s2$[ebp]
  0021e	89 44 8a 04	 mov	 DWORD PTR [edx+ecx*4+4], eax

; 1394 :       } /* end for */

  00222	e9 0b ff ff ff	 jmp	 $L1487
$L1488:

; 1395 :       x[n+1] = -x[n+1];

  00227	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  0022a	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0022d	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  00231	d9 e0		 fchs
  00233	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]
  00236	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00239	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]
$L1471:

; 1396 : 
; 1397 :    } /* end if */
; 1398 : 
; 1399 :    return;
; 1400 : }  /* nspcUndRealRecom_Fft */

  0023d	5e		 pop	 esi
  0023e	8b e5		 mov	 esp, ebp
  00240	5d		 pop	 ebp
  00241	c2 10 00	 ret	 16			; 00000010H
_nspcUndRealRecom_Fft@16 ENDP
_TEXT	ENDS
PUBLIC	_nspsbMpy1@12
; Function compile flags: /Odt
;	COMDAT _nspsbMpy1@12
_TEXT	SEGMENT
_r3$ = -20
_r0$ = -16
_k$ = -12
_r2$ = -8
_r1$ = -4
_val$ = 8
_dst$ = 12
_n$ = 16
_nspsbMpy1@12 PROC NEAR					; COMDAT

; 1489 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 1490 :   float r0, r1, r2, r3;
; 1491 :   int k;
; 1492 : 
; 1493 : 
; 1494 :   for (k=n-8; k>=0; k-=8) {

  00006	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00009	83 e8 08	 sub	 eax, 8
  0000c	89 45 f4	 mov	 DWORD PTR _k$[ebp], eax
  0000f	eb 09		 jmp	 SHORT $L1535
$L1536:
  00011	8b 4d f4	 mov	 ecx, DWORD PTR _k$[ebp]
  00014	83 e9 08	 sub	 ecx, 8
  00017	89 4d f4	 mov	 DWORD PTR _k$[ebp], ecx
$L1535:
  0001a	83 7d f4 00	 cmp	 DWORD PTR _k$[ebp], 0
  0001e	0f 8c eb 00 00
	00		 jl	 $L1537

; 1495 :      r0 = dst[k  ] * val;

  00024	8b 55 f4	 mov	 edx, DWORD PTR _k$[ebp]
  00027	8b 45 0c	 mov	 eax, DWORD PTR _dst$[ebp]
  0002a	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  0002d	d8 0c 90	 fmul	 DWORD PTR [eax+edx*4]
  00030	d9 5d f0	 fstp	 DWORD PTR _r0$[ebp]

; 1496 :      r1 = dst[k+1] * val;

  00033	8b 4d f4	 mov	 ecx, DWORD PTR _k$[ebp]
  00036	8b 55 0c	 mov	 edx, DWORD PTR _dst$[ebp]
  00039	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  0003c	d8 4c 8a 04	 fmul	 DWORD PTR [edx+ecx*4+4]
  00040	d9 5d fc	 fstp	 DWORD PTR _r1$[ebp]

; 1497 :      r2 = dst[k+2] * val;

  00043	8b 45 f4	 mov	 eax, DWORD PTR _k$[ebp]
  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _dst$[ebp]
  00049	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  0004c	d8 4c 81 08	 fmul	 DWORD PTR [ecx+eax*4+8]
  00050	d9 5d f8	 fstp	 DWORD PTR _r2$[ebp]

; 1498 :      r3 = dst[k+3] * val;

  00053	8b 55 f4	 mov	 edx, DWORD PTR _k$[ebp]
  00056	8b 45 0c	 mov	 eax, DWORD PTR _dst$[ebp]
  00059	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  0005c	d8 4c 90 0c	 fmul	 DWORD PTR [eax+edx*4+12]
  00060	d9 5d ec	 fstp	 DWORD PTR _r3$[ebp]

; 1499 :      dst[k  ] = r0;

  00063	8b 4d f4	 mov	 ecx, DWORD PTR _k$[ebp]
  00066	8b 55 0c	 mov	 edx, DWORD PTR _dst$[ebp]
  00069	8b 45 f0	 mov	 eax, DWORD PTR _r0$[ebp]
  0006c	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 1500 :      dst[k+1] = r1;

  0006f	8b 4d f4	 mov	 ecx, DWORD PTR _k$[ebp]
  00072	8b 55 0c	 mov	 edx, DWORD PTR _dst$[ebp]
  00075	8b 45 fc	 mov	 eax, DWORD PTR _r1$[ebp]
  00078	89 44 8a 04	 mov	 DWORD PTR [edx+ecx*4+4], eax

; 1501 :      dst[k+2] = r2;

  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _k$[ebp]
  0007f	8b 55 0c	 mov	 edx, DWORD PTR _dst$[ebp]
  00082	8b 45 f8	 mov	 eax, DWORD PTR _r2$[ebp]
  00085	89 44 8a 08	 mov	 DWORD PTR [edx+ecx*4+8], eax

; 1502 :      dst[k+3] = r3;

  00089	8b 4d f4	 mov	 ecx, DWORD PTR _k$[ebp]
  0008c	8b 55 0c	 mov	 edx, DWORD PTR _dst$[ebp]
  0008f	8b 45 ec	 mov	 eax, DWORD PTR _r3$[ebp]
  00092	89 44 8a 0c	 mov	 DWORD PTR [edx+ecx*4+12], eax

; 1503 :      r0 = dst[k+4] * val;

  00096	8b 4d f4	 mov	 ecx, DWORD PTR _k$[ebp]
  00099	8b 55 0c	 mov	 edx, DWORD PTR _dst$[ebp]
  0009c	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  0009f	d8 4c 8a 10	 fmul	 DWORD PTR [edx+ecx*4+16]
  000a3	d9 5d f0	 fstp	 DWORD PTR _r0$[ebp]

; 1504 :      r1 = dst[k+5] * val;

  000a6	8b 45 f4	 mov	 eax, DWORD PTR _k$[ebp]
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR _dst$[ebp]
  000ac	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  000af	d8 4c 81 14	 fmul	 DWORD PTR [ecx+eax*4+20]
  000b3	d9 5d fc	 fstp	 DWORD PTR _r1$[ebp]

; 1505 :      r2 = dst[k+6] * val;

  000b6	8b 55 f4	 mov	 edx, DWORD PTR _k$[ebp]
  000b9	8b 45 0c	 mov	 eax, DWORD PTR _dst$[ebp]
  000bc	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  000bf	d8 4c 90 18	 fmul	 DWORD PTR [eax+edx*4+24]
  000c3	d9 5d f8	 fstp	 DWORD PTR _r2$[ebp]

; 1506 :      r3 = dst[k+7] * val;

  000c6	8b 4d f4	 mov	 ecx, DWORD PTR _k$[ebp]
  000c9	8b 55 0c	 mov	 edx, DWORD PTR _dst$[ebp]
  000cc	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  000cf	d8 4c 8a 1c	 fmul	 DWORD PTR [edx+ecx*4+28]
  000d3	d9 5d ec	 fstp	 DWORD PTR _r3$[ebp]

; 1507 :      dst[k+4] = r0;

  000d6	8b 45 f4	 mov	 eax, DWORD PTR _k$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR _dst$[ebp]
  000dc	8b 55 f0	 mov	 edx, DWORD PTR _r0$[ebp]
  000df	89 54 81 10	 mov	 DWORD PTR [ecx+eax*4+16], edx

; 1508 :      dst[k+5] = r1;

  000e3	8b 45 f4	 mov	 eax, DWORD PTR _k$[ebp]
  000e6	8b 4d 0c	 mov	 ecx, DWORD PTR _dst$[ebp]
  000e9	8b 55 fc	 mov	 edx, DWORD PTR _r1$[ebp]
  000ec	89 54 81 14	 mov	 DWORD PTR [ecx+eax*4+20], edx

; 1509 :      dst[k+6] = r2;

  000f0	8b 45 f4	 mov	 eax, DWORD PTR _k$[ebp]
  000f3	8b 4d 0c	 mov	 ecx, DWORD PTR _dst$[ebp]
  000f6	8b 55 f8	 mov	 edx, DWORD PTR _r2$[ebp]
  000f9	89 54 81 18	 mov	 DWORD PTR [ecx+eax*4+24], edx

; 1510 :      dst[k+7] = r3;

  000fd	8b 45 f4	 mov	 eax, DWORD PTR _k$[ebp]
  00100	8b 4d 0c	 mov	 ecx, DWORD PTR _dst$[ebp]
  00103	8b 55 ec	 mov	 edx, DWORD PTR _r3$[ebp]
  00106	89 54 81 1c	 mov	 DWORD PTR [ecx+eax*4+28], edx

; 1511 :    };

  0010a	e9 02 ff ff ff	 jmp	 $L1536
$L1537:

; 1512 :    for (k=k+7; k>=0; k--) {

  0010f	8b 45 f4	 mov	 eax, DWORD PTR _k$[ebp]
  00112	83 c0 07	 add	 eax, 7
  00115	89 45 f4	 mov	 DWORD PTR _k$[ebp], eax
  00118	eb 09		 jmp	 SHORT $L1538
$L1539:
  0011a	8b 4d f4	 mov	 ecx, DWORD PTR _k$[ebp]
  0011d	83 e9 01	 sub	 ecx, 1
  00120	89 4d f4	 mov	 DWORD PTR _k$[ebp], ecx
$L1538:
  00123	83 7d f4 00	 cmp	 DWORD PTR _k$[ebp], 0
  00127	7c 1d		 jl	 SHORT $L1529

; 1513 :        r0 = dst[k  ] * val;

  00129	8b 55 f4	 mov	 edx, DWORD PTR _k$[ebp]
  0012c	8b 45 0c	 mov	 eax, DWORD PTR _dst$[ebp]
  0012f	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  00132	d8 0c 90	 fmul	 DWORD PTR [eax+edx*4]
  00135	d9 5d f0	 fstp	 DWORD PTR _r0$[ebp]

; 1514 :        dst[k  ] = r0;

  00138	8b 4d f4	 mov	 ecx, DWORD PTR _k$[ebp]
  0013b	8b 55 0c	 mov	 edx, DWORD PTR _dst$[ebp]
  0013e	8b 45 f0	 mov	 eax, DWORD PTR _r0$[ebp]
  00141	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 1515 :    };

  00144	eb d4		 jmp	 SHORT $L1539
$L1529:

; 1516 : }

  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c2 0c 00	 ret	 12			; 0000000cH
_nspsbMpy1@12 ENDP
_TEXT	ENDS
PUBLIC	_vox_nspsRealFft@12
PUBLIC	__real@3ff0000000000000
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _vox_nspsRealFft@12
_TEXT	SEGMENT
_n$ = -24
_cx$ = -20
_inv_fl$ = -16
_Scale$ = -12
_p$ = -8
_w$ = -4
_samps$ = 8
_order$ = 12
_flags$ = 16
_vox_nspsRealFft@12 PROC NEAR				; COMDAT

; 1554 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1555 :    int          p,                 /* For (order-1) */
; 1556 :                 n,                 /* For pow(2,(order-1)) and pow(2,order) */
; 1557 :                 inv_fl;            /* Transform flag: forward or inverse */
; 1558 :    const SCplx *w=NULL;            /* Table of twiddle factors */

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _w$[ebp], 0

; 1559 :    SCplx       *cx;                /* For interpretation samps as SCplx */
; 1560 :    float        Scale;             /* For scale in inverse transform */
; 1561 : 
; 1562 :    /* Computes the tables of twiddle factors */
; 1563 :         p = order-1;                                               

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _order$[ebp]
  00010	83 e8 01	 sub	 eax, 1
  00013	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 1564 :         if ( p > 0 ) {                                             

  00016	83 7d f8 00	 cmp	 DWORD PTR _p$[ebp], 0
  0001a	7e 17		 jle	 SHORT $L1555

; 1565 :            w = nspcUndGetFftTwdTbl_great(p);                       

  0001c	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 _nspcUndGetFftTwdTbl_great@4
  00025	89 45 fc	 mov	 DWORD PTR _w$[ebp], eax

; 1566 :            if(!w) 

  00028	83 7d fc 00	 cmp	 DWORD PTR _w$[ebp], 0
  0002c	75 05		 jne	 SHORT $L1555

; 1567 :              return;

  0002e	e9 35 01 00 00	 jmp	 $L1547
$L1555:

; 1568 :         }
; 1569 :         if ( flags & NSP_Init ) return;

  00033	8b 55 10	 mov	 edx, DWORD PTR _flags$[ebp]
  00036	83 e2 04	 and	 edx, 4
  00039	85 d2		 test	 edx, edx
  0003b	74 05		 je	 SHORT $L1557
  0003d	e9 26 01 00 00	 jmp	 $L1547
$L1557:

; 1570 : 
; 1571 : 
; 1572 :    if ( order == 0 ) return;                               /* Control order */

  00042	83 7d 0c 00	 cmp	 DWORD PTR _order$[ebp], 0
  00046	75 05		 jne	 SHORT $L1558
  00048	e9 1b 01 00 00	 jmp	 $L1547
$L1558:

; 1573 : 
; 1574 :    cx = (SCplx *)samps;      /* Form pointer cx for interpr. samps as SCplx */

  0004d	8b 45 08	 mov	 eax, DWORD PTR _samps$[ebp]
  00050	89 45 ec	 mov	 DWORD PTR _cx$[ebp], eax

; 1575 : 
; 1576 :    n = 1 << p;                                   /* Form  pow(2,(order-1))  */

  00053	ba 01 00 00 00	 mov	 edx, 1
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  0005b	d3 e2		 shl	 edx, cl
  0005d	89 55 e8	 mov	 DWORD PTR _n$[ebp], edx

; 1577 : 
; 1578 :    inv_fl = ( flags & NSP_Forw ) ? 1 : -1;           /* Form transform flag */

  00060	8b 45 10	 mov	 eax, DWORD PTR _flags$[ebp]
  00063	83 e0 01	 and	 eax, 1
  00066	f7 d8		 neg	 eax
  00068	1b c0		 sbb	 eax, eax
  0006a	83 e0 02	 and	 eax, 2
  0006d	83 c0 ff	 add	 eax, -1
  00070	89 45 f0	 mov	 DWORD PTR _inv_fl$[ebp], eax

; 1579 : 
; 1580 :    if ( p > 0 ) {

  00073	83 7d f8 00	 cmp	 DWORD PTR _p$[ebp], 0
  00077	7e 4c		 jle	 SHORT $L1560

; 1581 : 
; 1582 :       if ( p < FFT_OrderSplit )    {  /* ---------Split algorithm --------- */

  00079	83 7d f8 0b	 cmp	 DWORD PTR _p$[ebp], 11	; 0000000bH
  0007d	7d 24		 jge	 SHORT $L1561

; 1583 : 
; 1584 :          nspcUndSplit_FFT(cx,n,inv_fl,w);            /* Computes FFT for cx */

  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _w$[ebp]
  00082	51		 push	 ecx
  00083	8b 55 f0	 mov	 edx, DWORD PTR _inv_fl$[ebp]
  00086	52		 push	 edx
  00087	8b 45 e8	 mov	 eax, DWORD PTR _n$[ebp]
  0008a	50		 push	 eax
  0008b	8b 4d ec	 mov	 ecx, DWORD PTR _cx$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 _nspcUndSplit_FFT@16

; 1585 :          nspcbBitRev1(cx,p);                         /* Form BitRev  for cx */

  00094	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  00097	52		 push	 edx
  00098	8b 45 ec	 mov	 eax, DWORD PTR _cx$[ebp]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 _nspcbBitRev1@8

; 1586 : 
; 1587 :       } else                       {  /* ---------Radix algorithm --------- */

  000a1	eb 22		 jmp	 SHORT $L1560
$L1561:

; 1588 : 
; 1589 :          nspcbBitRev1(cx,p);                         /* Form BitRev  for cx */

  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  000a6	51		 push	 ecx
  000a7	8b 55 ec	 mov	 edx, DWORD PTR _cx$[ebp]
  000aa	52		 push	 edx
  000ab	e8 00 00 00 00	 call	 _nspcbBitRev1@8

; 1590 :          nspcUndRadix2_FFT(cx,n,inv_fl,w);           /* Computes FFT for cx */

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _w$[ebp]
  000b3	50		 push	 eax
  000b4	8b 4d f0	 mov	 ecx, DWORD PTR _inv_fl$[ebp]
  000b7	51		 push	 ecx
  000b8	8b 55 e8	 mov	 edx, DWORD PTR _n$[ebp]
  000bb	52		 push	 edx
  000bc	8b 45 ec	 mov	 eax, DWORD PTR _cx$[ebp]
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 _nspcUndRadix2_FFT@16
$L1560:

; 1591 : 
; 1592 :       } /* if for algorithm type */
; 1593 : 
; 1594 :    } /* if for p */
; 1595 : 
; 1596 :    Scale      = samps[0] - samps[1];         /* Triginometric recombination */

  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _samps$[ebp]
  000c8	8b 55 08	 mov	 edx, DWORD PTR _samps$[ebp]
  000cb	d9 01		 fld	 DWORD PTR [ecx]
  000cd	d8 62 04	 fsub	 DWORD PTR [edx+4]
  000d0	d9 5d f4	 fstp	 DWORD PTR _Scale$[ebp]

; 1597 :    samps[0]   = samps[0] + samps[1];

  000d3	8b 45 08	 mov	 eax, DWORD PTR _samps$[ebp]
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _samps$[ebp]
  000d9	d9 00		 fld	 DWORD PTR [eax]
  000db	d8 41 04	 fadd	 DWORD PTR [ecx+4]
  000de	8b 55 08	 mov	 edx, DWORD PTR _samps$[ebp]
  000e1	d9 1a		 fstp	 DWORD PTR [edx]

; 1598 :    samps[1]   = (float)0.0;

  000e3	8b 45 08	 mov	 eax, DWORD PTR _samps$[ebp]
  000e6	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1599 :    nspcUndRealRecom_Fft(samps,n,inv_fl,(float *)(w+n/2));

  000ed	8b 45 e8	 mov	 eax, DWORD PTR _n$[ebp]
  000f0	99		 cdq
  000f1	2b c2		 sub	 eax, edx
  000f3	d1 f8		 sar	 eax, 1
  000f5	8b 4d fc	 mov	 ecx, DWORD PTR _w$[ebp]
  000f8	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  000fb	52		 push	 edx
  000fc	8b 45 f0	 mov	 eax, DWORD PTR _inv_fl$[ebp]
  000ff	50		 push	 eax
  00100	8b 4d e8	 mov	 ecx, DWORD PTR _n$[ebp]
  00103	51		 push	 ecx
  00104	8b 55 08	 mov	 edx, DWORD PTR _samps$[ebp]
  00107	52		 push	 edx
  00108	e8 00 00 00 00	 call	 _nspcUndRealRecom_Fft@16

; 1600 :    n          = 1 << order;

  0010d	b8 01 00 00 00	 mov	 eax, 1
  00112	8b 4d 0c	 mov	 ecx, DWORD PTR _order$[ebp]
  00115	d3 e0		 shl	 eax, cl
  00117	89 45 e8	 mov	 DWORD PTR _n$[ebp], eax

; 1601 :    samps[n  ] = Scale;

  0011a	8b 4d e8	 mov	 ecx, DWORD PTR _n$[ebp]
  0011d	8b 55 08	 mov	 edx, DWORD PTR _samps$[ebp]
  00120	8b 45 f4	 mov	 eax, DWORD PTR _Scale$[ebp]
  00123	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 1602 :    samps[n+1] = (float)0.0;

  00126	8b 4d e8	 mov	 ecx, DWORD PTR _n$[ebp]
  00129	8b 55 08	 mov	 edx, DWORD PTR _samps$[ebp]
  0012c	c7 44 8a 04 00
	00 00 00	 mov	 DWORD PTR [edx+ecx*4+4], 0

; 1603 : 
; 1604 :          if ( flags & NSP_Inv ) {                                   

  00134	8b 45 10	 mov	 eax, DWORD PTR _flags$[ebp]
  00137	83 e0 02	 and	 eax, 2
  0013a	85 c0		 test	 eax, eax
  0013c	74 2a		 je	 SHORT $L1547

; 1605 :            if ( !( flags & NSP_NoScale ) ) {                       

  0013e	8b 4d 10	 mov	 ecx, DWORD PTR _flags$[ebp]
  00141	83 e1 08	 and	 ecx, 8
  00144	85 c9		 test	 ecx, ecx
  00146	75 20		 jne	 SHORT $L1547

; 1606 :               Scale    = (float)(1.0/n);                          

  00148	db 45 e8	 fild	 DWORD PTR _n$[ebp]
  0014b	dc 3d 00 00 00
	00		 fdivr	 QWORD PTR __real@3ff0000000000000
  00151	d9 5d f4	 fstp	 DWORD PTR _Scale$[ebp]

; 1607 :               nspsbMpy1(Scale,samps,n+2);                           

  00154	8b 55 e8	 mov	 edx, DWORD PTR _n$[ebp]
  00157	83 c2 02	 add	 edx, 2
  0015a	52		 push	 edx
  0015b	8b 45 08	 mov	 eax, DWORD PTR _samps$[ebp]
  0015e	50		 push	 eax
  0015f	8b 4d f4	 mov	 ecx, DWORD PTR _Scale$[ebp]
  00162	51		 push	 ecx
  00163	e8 00 00 00 00	 call	 _nspsbMpy1@12
$L1547:

; 1608 :            }                                                       
; 1609 :         }
; 1610 :    return;
; 1611 : } /* nspsRealFft */

  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c2 0c 00	 ret	 12			; 0000000cH
_vox_nspsRealFft@12 ENDP
_TEXT	ENDS
EXTRN	_calloc:NEAR
_BSS	SEGMENT
_ctxFftTbl DD	020H DUP (?)
; Function compile flags: /Odt
_BSS	ENDS
;	COMDAT _nspcUndGetFftTwdTbl_great@4
_TEXT	SEGMENT
_A$ = -8
_length$ = -4
_order$ = 8
_nspcUndGetFftTwdTbl_great@4 PROC NEAR			; COMDAT

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 155  :     int            length;
; 156  :     SCplx         *A;
; 157  :     if(!ctxFftTbl[order]){

  00006	8b 45 08	 mov	 eax, DWORD PTR _order$[ebp]
  00009	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _ctxFftTbl[eax*4], 0
  00011	75 35		 jne	 SHORT $L1106

; 158  :        length = ( ( 1 << order ) * 3 )/2 + 4;

  00013	b8 01 00 00 00	 mov	 eax, 1
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _order$[ebp]
  0001b	d3 e0		 shl	 eax, cl
  0001d	6b c0 03	 imul	 eax, 3
  00020	99		 cdq
  00021	2b c2		 sub	 eax, edx
  00023	d1 f8		 sar	 eax, 1
  00025	83 c0 04	 add	 eax, 4
  00028	89 45 fc	 mov	 DWORD PTR _length$[ebp], eax

; 159  :        A = (SCplx*) calloc(length,sizeof(SCplx));

  0002b	6a 08		 push	 8
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _length$[ebp]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 _calloc
  00036	83 c4 08	 add	 esp, 8
  00039	89 45 f8	 mov	 DWORD PTR _A$[ebp], eax

; 160  :        if ( !A ) {

  0003c	83 7d f8 00	 cmp	 DWORD PTR _A$[ebp], 0
  00040	75 04		 jne	 SHORT $L1109

; 161  :           return(NULL);

  00042	33 c0		 xor	 eax, eax
  00044	eb 31		 jmp	 SHORT $L1103
$L1109:

; 162  :        }
; 163  :     }
; 164  :     else { A = ctxFftTbl[order];  return(A); }

  00046	eb 12		 jmp	 SHORT $L1111
$L1106:
  00048	8b 55 08	 mov	 edx, DWORD PTR _order$[ebp]
  0004b	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _ctxFftTbl[edx*4]
  00052	89 45 f8	 mov	 DWORD PTR _A$[ebp], eax
  00055	8b 45 f8	 mov	 eax, DWORD PTR _A$[ebp]
  00058	eb 1d		 jmp	 SHORT $L1103
$L1111:

; 165  : 
; 166  :     nspcUndCalcFftTwdTbl_great(A,order);

  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _order$[ebp]
  0005d	51		 push	 ecx
  0005e	8b 55 f8	 mov	 edx, DWORD PTR _A$[ebp]
  00061	52		 push	 edx
  00062	e8 00 00 00 00	 call	 _nspcUndCalcFftTwdTbl_great@8

; 167  : 
; 168  :     ctxFftTbl[order] = A;

  00067	8b 45 08	 mov	 eax, DWORD PTR _order$[ebp]
  0006a	8b 4d f8	 mov	 ecx, DWORD PTR _A$[ebp]
  0006d	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _ctxFftTbl[eax*4], ecx

; 169  :     return(A);

  00074	8b 45 f8	 mov	 eax, DWORD PTR _A$[ebp]
$L1103:

; 170  : 
; 171  : } /* nspcUndGetFftTwdTbl_great */

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
_nspcUndGetFftTwdTbl_great@4 ENDP
_TEXT	ENDS
PUBLIC	__real@40c90fdb
PUBLIC	__real@4008000000000000
PUBLIC	__real@40490fdb
PUBLIC	__real@3fe0000000000000
EXTRN	_cos:NEAR
EXTRN	_sin:NEAR
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _nspcUndCalcFftTwdTbl_great@8
_TEXT	SEGMENT
_j$ = -104
_n2$ = -100
_wpi$ = -96
_wpr$ = -88
_wtemp$ = -80
_ang3$ = -72
_wr$ = -64
_wpr3$ = -56
_i$ = -48
_n$ = -44
_wi$ = -40
_wpi3$ = -32
_wr3$ = -24
_ang$ = -16
_wi3$ = -8
_tbl$ = 8
_order$ = 12
_nspcUndCalcFftTwdTbl_great@8 PROC NEAR			; COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H

; 62   :    int     i,                         /*  loop index                */
; 63   :            j,
; 64   :            n,                         /*  pow(2,order)              */
; 65   :            n2;                        /*  n/2                       */
; 66   :    double  ang,                       /*  6.283185307179586 / n     */
; 67   :            wpr,  wpi,                 /*  ( cos(ang),  -sin(ang) )  */
; 68   :            wr,   wi,
; 69   :            ang3,                      /*  ang * 3                   */
; 70   :            wpr3, wpi3,                /*  ( cos(ang3), -sin(ang3) ) */
; 71   :            wr3,  wi3,
; 72   :            wtemp;
; 73   : 
; 74   :    n    = 1 << order;

  00006	b8 01 00 00 00	 mov	 eax, 1
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _order$[ebp]
  0000e	d3 e0		 shl	 eax, cl
  00010	89 45 d4	 mov	 DWORD PTR _n$[ebp], eax

; 75   :    n2   = n/2;

  00013	8b 45 d4	 mov	 eax, DWORD PTR _n$[ebp]
  00016	99		 cdq
  00017	2b c2		 sub	 eax, edx
  00019	d1 f8		 sar	 eax, 1
  0001b	89 45 9c	 mov	 DWORD PTR _n2$[ebp], eax

; 76   : 
; 77   :    ang  = DB_PI/n;

  0001e	db 45 d4	 fild	 DWORD PTR _n$[ebp]
  00021	d8 3d 00 00 00
	00		 fdivr	 DWORD PTR __real@40c90fdb
  00027	dd 5d f0	 fstp	 QWORD PTR _ang$[ebp]

; 78   : 
; 79   :    if ( order < FFT_OrderSplit )   {  /* ---- For Split algorithm --------- */

  0002a	83 7d 0c 0b	 cmp	 DWORD PTR _order$[ebp], 11 ; 0000000bH
  0002e	0f 8d 43 01 00
	00		 jge	 $L1076

; 80   : 
; 81   :       wpr  =  cos(ang);

  00034	8b 4d f4	 mov	 ecx, DWORD PTR _ang$[ebp+4]
  00037	51		 push	 ecx
  00038	8b 55 f0	 mov	 edx, DWORD PTR _ang$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 _cos
  00041	83 c4 08	 add	 esp, 8
  00044	dd 5d a8	 fstp	 QWORD PTR _wpr$[ebp]

; 82   :       wpi  = -sin(ang);

  00047	8b 45 f4	 mov	 eax, DWORD PTR _ang$[ebp+4]
  0004a	50		 push	 eax
  0004b	8b 4d f0	 mov	 ecx, DWORD PTR _ang$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _sin
  00054	83 c4 08	 add	 esp, 8
  00057	d9 e0		 fchs
  00059	dd 5d a0	 fstp	 QWORD PTR _wpi$[ebp]

; 83   :       ang3 = ang * 3.0;

  0005c	dd 45 f0	 fld	 QWORD PTR _ang$[ebp]
  0005f	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4008000000000000
  00065	dd 5d b8	 fstp	 QWORD PTR _ang3$[ebp]

; 84   :       wpr3 =  cos(ang3);

  00068	8b 55 bc	 mov	 edx, DWORD PTR _ang3$[ebp+4]
  0006b	52		 push	 edx
  0006c	8b 45 b8	 mov	 eax, DWORD PTR _ang3$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _cos
  00075	83 c4 08	 add	 esp, 8
  00078	dd 5d c8	 fstp	 QWORD PTR _wpr3$[ebp]

; 85   :       wpi3 = -sin(ang3);

  0007b	8b 4d bc	 mov	 ecx, DWORD PTR _ang3$[ebp+4]
  0007e	51		 push	 ecx
  0007f	8b 55 b8	 mov	 edx, DWORD PTR _ang3$[ebp]
  00082	52		 push	 edx
  00083	e8 00 00 00 00	 call	 _sin
  00088	83 c4 08	 add	 esp, 8
  0008b	d9 e0		 fchs
  0008d	dd 5d e0	 fstp	 QWORD PTR _wpi3$[ebp]

; 86   :       wr   = wpr;

  00090	8b 45 a8	 mov	 eax, DWORD PTR _wpr$[ebp]
  00093	89 45 c0	 mov	 DWORD PTR _wr$[ebp], eax
  00096	8b 4d ac	 mov	 ecx, DWORD PTR _wpr$[ebp+4]
  00099	89 4d c4	 mov	 DWORD PTR _wr$[ebp+4], ecx

; 87   :       wi   = wpi;

  0009c	8b 55 a0	 mov	 edx, DWORD PTR _wpi$[ebp]
  0009f	89 55 d8	 mov	 DWORD PTR _wi$[ebp], edx
  000a2	8b 45 a4	 mov	 eax, DWORD PTR _wpi$[ebp+4]
  000a5	89 45 dc	 mov	 DWORD PTR _wi$[ebp+4], eax

; 88   :       wr3  = wpr3;

  000a8	8b 4d c8	 mov	 ecx, DWORD PTR _wpr3$[ebp]
  000ab	89 4d e8	 mov	 DWORD PTR _wr3$[ebp], ecx
  000ae	8b 55 cc	 mov	 edx, DWORD PTR _wpr3$[ebp+4]
  000b1	89 55 ec	 mov	 DWORD PTR _wr3$[ebp+4], edx

; 89   :       wi3  = wpi3;

  000b4	8b 45 e0	 mov	 eax, DWORD PTR _wpi3$[ebp]
  000b7	89 45 f8	 mov	 DWORD PTR _wi3$[ebp], eax
  000ba	8b 4d e4	 mov	 ecx, DWORD PTR _wpi3$[ebp+4]
  000bd	89 4d fc	 mov	 DWORD PTR _wi3$[ebp+4], ecx

; 90   :       for ( i = 0 ; i < (n2-1) ; i+=2 ) {

  000c0	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000c7	eb 09		 jmp	 SHORT $L1077
$L1078:
  000c9	8b 55 d0	 mov	 edx, DWORD PTR _i$[ebp]
  000cc	83 c2 02	 add	 edx, 2
  000cf	89 55 d0	 mov	 DWORD PTR _i$[ebp], edx
$L1077:
  000d2	8b 45 9c	 mov	 eax, DWORD PTR _n2$[ebp]
  000d5	83 e8 01	 sub	 eax, 1
  000d8	39 45 d0	 cmp	 DWORD PTR _i$[ebp], eax
  000db	0f 8d 94 00 00
	00		 jge	 $L1079

; 91   :          tbl[ i ].re = (float)wr;

  000e1	dd 45 c0	 fld	 QWORD PTR _wr$[ebp]
  000e4	8b 4d d0	 mov	 ecx, DWORD PTR _i$[ebp]
  000e7	8b 55 08	 mov	 edx, DWORD PTR _tbl$[ebp]
  000ea	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 92   :          tbl[ i ].im = (float)wi;

  000ed	dd 45 d8	 fld	 QWORD PTR _wi$[ebp]
  000f0	8b 45 d0	 mov	 eax, DWORD PTR _i$[ebp]
  000f3	8b 4d 08	 mov	 ecx, DWORD PTR _tbl$[ebp]
  000f6	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 93   :                  wr  = (wtemp=wr)*wpr - wi*wpi;

  000fa	8b 55 c0	 mov	 edx, DWORD PTR _wr$[ebp]
  000fd	89 55 b0	 mov	 DWORD PTR _wtemp$[ebp], edx
  00100	8b 45 c4	 mov	 eax, DWORD PTR _wr$[ebp+4]
  00103	89 45 b4	 mov	 DWORD PTR _wtemp$[ebp+4], eax
  00106	dd 45 b0	 fld	 QWORD PTR _wtemp$[ebp]
  00109	dc 4d a8	 fmul	 QWORD PTR _wpr$[ebp]
  0010c	dd 45 d8	 fld	 QWORD PTR _wi$[ebp]
  0010f	dc 4d a0	 fmul	 QWORD PTR _wpi$[ebp]
  00112	de e9		 fsubp	 ST(1), ST(0)
  00114	dd 5d c0	 fstp	 QWORD PTR _wr$[ebp]

; 94   :                  wi  = wi*wpr + wtemp*wpi;

  00117	dd 45 d8	 fld	 QWORD PTR _wi$[ebp]
  0011a	dc 4d a8	 fmul	 QWORD PTR _wpr$[ebp]
  0011d	dd 45 b0	 fld	 QWORD PTR _wtemp$[ebp]
  00120	dc 4d a0	 fmul	 QWORD PTR _wpi$[ebp]
  00123	de c1		 faddp	 ST(1), ST(0)
  00125	dd 5d d8	 fstp	 QWORD PTR _wi$[ebp]

; 95   :          tbl[i+1].re = (float)wr3;

  00128	dd 45 e8	 fld	 QWORD PTR _wr3$[ebp]
  0012b	8b 4d d0	 mov	 ecx, DWORD PTR _i$[ebp]
  0012e	8b 55 08	 mov	 edx, DWORD PTR _tbl$[ebp]
  00131	d9 5c ca 08	 fstp	 DWORD PTR [edx+ecx*8+8]

; 96   :          tbl[i+1].im = (float)wi3;

  00135	dd 45 f8	 fld	 QWORD PTR _wi3$[ebp]
  00138	8b 45 d0	 mov	 eax, DWORD PTR _i$[ebp]
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _tbl$[ebp]
  0013e	d9 5c c1 0c	 fstp	 DWORD PTR [ecx+eax*8+12]

; 97   :                  wr3 = (wtemp=wr3)*wpr3 - wi3*wpi3;

  00142	8b 55 e8	 mov	 edx, DWORD PTR _wr3$[ebp]
  00145	89 55 b0	 mov	 DWORD PTR _wtemp$[ebp], edx
  00148	8b 45 ec	 mov	 eax, DWORD PTR _wr3$[ebp+4]
  0014b	89 45 b4	 mov	 DWORD PTR _wtemp$[ebp+4], eax
  0014e	dd 45 b0	 fld	 QWORD PTR _wtemp$[ebp]
  00151	dc 4d c8	 fmul	 QWORD PTR _wpr3$[ebp]
  00154	dd 45 f8	 fld	 QWORD PTR _wi3$[ebp]
  00157	dc 4d e0	 fmul	 QWORD PTR _wpi3$[ebp]
  0015a	de e9		 fsubp	 ST(1), ST(0)
  0015c	dd 5d e8	 fstp	 QWORD PTR _wr3$[ebp]

; 98   :                  wi3 = wi3*wpr3 + wtemp*wpi3;

  0015f	dd 45 f8	 fld	 QWORD PTR _wi3$[ebp]
  00162	dc 4d c8	 fmul	 QWORD PTR _wpr3$[ebp]
  00165	dd 45 b0	 fld	 QWORD PTR _wtemp$[ebp]
  00168	dc 4d e0	 fmul	 QWORD PTR _wpi3$[ebp]
  0016b	de c1		 faddp	 ST(1), ST(0)
  0016d	dd 5d f8	 fstp	 QWORD PTR _wi3$[ebp]

; 99   :       }

  00170	e9 54 ff ff ff	 jmp	 $L1078
$L1079:

; 100  : 
; 101  :    } else                          {  /* ---- For Radix algorithm --------- */

  00175	eb 59		 jmp	 SHORT $L1084
$L1076:

; 102  : 
; 103  :       for ( i = 0 ; i < n2 ; i++ ) {

  00177	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0017e	eb 09		 jmp	 SHORT $L1085
$L1086:
  00180	8b 4d d0	 mov	 ecx, DWORD PTR _i$[ebp]
  00183	83 c1 01	 add	 ecx, 1
  00186	89 4d d0	 mov	 DWORD PTR _i$[ebp], ecx
$L1085:
  00189	8b 55 d0	 mov	 edx, DWORD PTR _i$[ebp]
  0018c	3b 55 9c	 cmp	 edx, DWORD PTR _n2$[ebp]
  0018f	7d 3f		 jge	 SHORT $L1084

; 104  :           tbl[i].re = (float) cos(ang * i);

  00191	db 45 d0	 fild	 DWORD PTR _i$[ebp]
  00194	dc 4d f0	 fmul	 QWORD PTR _ang$[ebp]
  00197	83 ec 08	 sub	 esp, 8
  0019a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0019d	e8 00 00 00 00	 call	 _cos
  001a2	83 c4 08	 add	 esp, 8
  001a5	8b 45 d0	 mov	 eax, DWORD PTR _i$[ebp]
  001a8	8b 4d 08	 mov	 ecx, DWORD PTR _tbl$[ebp]
  001ab	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 105  :           tbl[i].im = (float)-sin(ang * i);

  001ae	db 45 d0	 fild	 DWORD PTR _i$[ebp]
  001b1	dc 4d f0	 fmul	 QWORD PTR _ang$[ebp]
  001b4	83 ec 08	 sub	 esp, 8
  001b7	dd 1c 24	 fstp	 QWORD PTR [esp]
  001ba	e8 00 00 00 00	 call	 _sin
  001bf	83 c4 08	 add	 esp, 8
  001c2	d9 e0		 fchs
  001c4	8b 55 d0	 mov	 edx, DWORD PTR _i$[ebp]
  001c7	8b 45 08	 mov	 eax, DWORD PTR _tbl$[ebp]
  001ca	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 106  :       }

  001ce	eb b0		 jmp	 SHORT $L1086
$L1084:

; 107  : 
; 108  :    } /* if for algorithm type */
; 109  : 
; 110  :    /*  Compute the table of sin/cos for the trigonometric recombination  */
; 111  : 
; 112  :    /* Real Type */
; 113  :    ang = PI/n;

  001d0	db 45 d4	 fild	 DWORD PTR _n$[ebp]
  001d3	d8 3d 00 00 00
	00		 fdivr	 DWORD PTR __real@40490fdb
  001d9	dd 5d f0	 fstp	 QWORD PTR _ang$[ebp]

; 114  :    wpr = cos(ang);

  001dc	8b 4d f4	 mov	 ecx, DWORD PTR _ang$[ebp+4]
  001df	51		 push	 ecx
  001e0	8b 55 f0	 mov	 edx, DWORD PTR _ang$[ebp]
  001e3	52		 push	 edx
  001e4	e8 00 00 00 00	 call	 _cos
  001e9	83 c4 08	 add	 esp, 8
  001ec	dd 5d a8	 fstp	 QWORD PTR _wpr$[ebp]

; 115  :    wpi = sin(ang);

  001ef	8b 45 f4	 mov	 eax, DWORD PTR _ang$[ebp+4]
  001f2	50		 push	 eax
  001f3	8b 4d f0	 mov	 ecx, DWORD PTR _ang$[ebp]
  001f6	51		 push	 ecx
  001f7	e8 00 00 00 00	 call	 _sin
  001fc	83 c4 08	 add	 esp, 8
  001ff	dd 5d a0	 fstp	 QWORD PTR _wpi$[ebp]

; 116  :    wr  = wpr;

  00202	8b 55 a8	 mov	 edx, DWORD PTR _wpr$[ebp]
  00205	89 55 c0	 mov	 DWORD PTR _wr$[ebp], edx
  00208	8b 45 ac	 mov	 eax, DWORD PTR _wpr$[ebp+4]
  0020b	89 45 c4	 mov	 DWORD PTR _wr$[ebp+4], eax

; 117  :    wi  = wpi;

  0020e	8b 4d a0	 mov	 ecx, DWORD PTR _wpi$[ebp]
  00211	89 4d d8	 mov	 DWORD PTR _wi$[ebp], ecx
  00214	8b 55 a4	 mov	 edx, DWORD PTR _wpi$[ebp+4]
  00217	89 55 dc	 mov	 DWORD PTR _wi$[ebp+4], edx

; 118  :    for ( i = n2 ; i < n ; i++ ) {

  0021a	8b 45 9c	 mov	 eax, DWORD PTR _n2$[ebp]
  0021d	89 45 d0	 mov	 DWORD PTR _i$[ebp], eax
  00220	eb 09		 jmp	 SHORT $L1090
$L1091:
  00222	8b 4d d0	 mov	 ecx, DWORD PTR _i$[ebp]
  00225	83 c1 01	 add	 ecx, 1
  00228	89 4d d0	 mov	 DWORD PTR _i$[ebp], ecx
$L1090:
  0022b	8b 55 d0	 mov	 edx, DWORD PTR _i$[ebp]
  0022e	3b 55 d4	 cmp	 edx, DWORD PTR _n$[ebp]
  00231	7d 5d		 jge	 SHORT $L1092

; 119  :       tbl[i].re = (float)( wr*0.5 );

  00233	dd 45 c0	 fld	 QWORD PTR _wr$[ebp]
  00236	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  0023c	8b 45 d0	 mov	 eax, DWORD PTR _i$[ebp]
  0023f	8b 4d 08	 mov	 ecx, DWORD PTR _tbl$[ebp]
  00242	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 120  :       tbl[i].im = (float)( -wi*0.5 + 0.5 );

  00245	dd 45 d8	 fld	 QWORD PTR _wi$[ebp]
  00248	d9 e0		 fchs
  0024a	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  00250	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00256	8b 55 d0	 mov	 edx, DWORD PTR _i$[ebp]
  00259	8b 45 08	 mov	 eax, DWORD PTR _tbl$[ebp]
  0025c	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 121  :              wr = (wtemp=wr)*wpr - wi*wpi;

  00260	8b 4d c0	 mov	 ecx, DWORD PTR _wr$[ebp]
  00263	89 4d b0	 mov	 DWORD PTR _wtemp$[ebp], ecx
  00266	8b 55 c4	 mov	 edx, DWORD PTR _wr$[ebp+4]
  00269	89 55 b4	 mov	 DWORD PTR _wtemp$[ebp+4], edx
  0026c	dd 45 b0	 fld	 QWORD PTR _wtemp$[ebp]
  0026f	dc 4d a8	 fmul	 QWORD PTR _wpr$[ebp]
  00272	dd 45 d8	 fld	 QWORD PTR _wi$[ebp]
  00275	dc 4d a0	 fmul	 QWORD PTR _wpi$[ebp]
  00278	de e9		 fsubp	 ST(1), ST(0)
  0027a	dd 5d c0	 fstp	 QWORD PTR _wr$[ebp]

; 122  :              wi = wi*wpr + wtemp*wpi;

  0027d	dd 45 d8	 fld	 QWORD PTR _wi$[ebp]
  00280	dc 4d a8	 fmul	 QWORD PTR _wpr$[ebp]
  00283	dd 45 b0	 fld	 QWORD PTR _wtemp$[ebp]
  00286	dc 4d a0	 fmul	 QWORD PTR _wpi$[ebp]
  00289	de c1		 faddp	 ST(1), ST(0)
  0028b	dd 5d d8	 fstp	 QWORD PTR _wi$[ebp]

; 123  :    }

  0028e	eb 92		 jmp	 SHORT $L1091
$L1092:

; 124  : 
; 125  :    /* Ccs Type */
; 126  :    for ( i = n, j = 0 ; i < (n+n2) ; i++, j++ ) {

  00290	8b 45 d4	 mov	 eax, DWORD PTR _n$[ebp]
  00293	89 45 d0	 mov	 DWORD PTR _i$[ebp], eax
  00296	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0029d	eb 12		 jmp	 SHORT $L1095
$L1096:
  0029f	8b 4d d0	 mov	 ecx, DWORD PTR _i$[ebp]
  002a2	83 c1 01	 add	 ecx, 1
  002a5	89 4d d0	 mov	 DWORD PTR _i$[ebp], ecx
  002a8	8b 55 98	 mov	 edx, DWORD PTR _j$[ebp]
  002ab	83 c2 01	 add	 edx, 1
  002ae	89 55 98	 mov	 DWORD PTR _j$[ebp], edx
$L1095:
  002b1	8b 45 d4	 mov	 eax, DWORD PTR _n$[ebp]
  002b4	03 45 9c	 add	 eax, DWORD PTR _n2$[ebp]
  002b7	39 45 d0	 cmp	 DWORD PTR _i$[ebp], eax
  002ba	7d 3f		 jge	 SHORT $L1060

; 127  :        tbl[i].re = (float) cos(ang * j);

  002bc	db 45 98	 fild	 DWORD PTR _j$[ebp]
  002bf	dc 4d f0	 fmul	 QWORD PTR _ang$[ebp]
  002c2	83 ec 08	 sub	 esp, 8
  002c5	dd 1c 24	 fstp	 QWORD PTR [esp]
  002c8	e8 00 00 00 00	 call	 _cos
  002cd	83 c4 08	 add	 esp, 8
  002d0	8b 4d d0	 mov	 ecx, DWORD PTR _i$[ebp]
  002d3	8b 55 08	 mov	 edx, DWORD PTR _tbl$[ebp]
  002d6	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 128  :        tbl[i].im = (float)-sin(ang * j);

  002d9	db 45 98	 fild	 DWORD PTR _j$[ebp]
  002dc	dc 4d f0	 fmul	 QWORD PTR _ang$[ebp]
  002df	83 ec 08	 sub	 esp, 8
  002e2	dd 1c 24	 fstp	 QWORD PTR [esp]
  002e5	e8 00 00 00 00	 call	 _sin
  002ea	83 c4 08	 add	 esp, 8
  002ed	d9 e0		 fchs
  002ef	8b 45 d0	 mov	 eax, DWORD PTR _i$[ebp]
  002f2	8b 4d 08	 mov	 ecx, DWORD PTR _tbl$[ebp]
  002f5	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 129  :    }

  002f9	eb a4		 jmp	 SHORT $L1096
$L1060:

; 130  : 
; 131  :    return;
; 132  : }  /* nspcUndCalcFftTwdTbl_great */

  002fb	8b e5		 mov	 esp, ebp
  002fd	5d		 pop	 ebp
  002fe	c2 08 00	 ret	 8
_nspcUndCalcFftTwdTbl_great@8 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT _nspcbBitRev1@8
_TEXT	SEGMENT
_j$ = -32
_tabrev$ = -28
_vecm_nn$ = -24
_temp$ = -20
_vecm_00$ = -16
_n$ = -12
_i$ = -8
_vecm_n0$ = -4
_vec$ = 8
_order$ = 12
_nspcbBitRev1@8 PROC NEAR				; COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi

; 221  :    typedef struct { long l0; long l1; } Memcb;
; 222  :    Memcb  *vecm_00, *vecm_n0, *vecm_nn;
; 223  :    long   temp;
; 224  :    int    *tabrev;
; 225  :    int    n, i, j;
; 226  : 
; 227  : #define CHANGE(mem1, mem2) \
; 228  :     { temp = mem1.l0; mem1.l0 = mem2.l0; mem2.l0 = temp;     \
; 229  :       temp = mem1.l1; mem1.l1 = mem2.l1; mem2.l1 = temp; };
; 230  : 
; 231  :      vecm_00 = (Memcb*) vec;

  00007	8b 45 08	 mov	 eax, DWORD PTR _vec$[ebp]
  0000a	89 45 f0	 mov	 DWORD PTR _vecm_00$[ebp], eax

; 232  :      if (order<3) {

  0000d	83 7d 0c 03	 cmp	 DWORD PTR _order$[ebp], 3
  00011	7d 47		 jge	 SHORT $L1161

; 233  :        if (order>1) {

  00013	83 7d 0c 01	 cmp	 DWORD PTR _order$[ebp], 1
  00017	7e 3c		 jle	 SHORT $L1162

; 234  :           CHANGE( vecm_00 [1], vecm_00 [2] );

  00019	8b 4d f0	 mov	 ecx, DWORD PTR _vecm_00$[ebp]
  0001c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001f	89 55 ec	 mov	 DWORD PTR _temp$[ebp], edx
  00022	8b 45 f0	 mov	 eax, DWORD PTR _vecm_00$[ebp]
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _vecm_00$[ebp]
  00028	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0002e	8b 45 f0	 mov	 eax, DWORD PTR _vecm_00$[ebp]
  00031	8b 4d ec	 mov	 ecx, DWORD PTR _temp$[ebp]
  00034	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00037	8b 55 f0	 mov	 edx, DWORD PTR _vecm_00$[ebp]
  0003a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003d	89 45 ec	 mov	 DWORD PTR _temp$[ebp], eax
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _vecm_00$[ebp]
  00043	8b 55 f0	 mov	 edx, DWORD PTR _vecm_00$[ebp]
  00046	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00049	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _vecm_00$[ebp]
  0004f	8b 55 ec	 mov	 edx, DWORD PTR _temp$[ebp]
  00052	89 51 14	 mov	 DWORD PTR [ecx+20], edx
$L1162:

; 235  :         };
; 236  :        return;

  00055	e9 b8 02 00 00	 jmp	 $L1147
$L1161:

; 237  :      };
; 238  :      n = (1<<order);

  0005a	b8 01 00 00 00	 mov	 eax, 1
  0005f	8b 4d 0c	 mov	 ecx, DWORD PTR _order$[ebp]
  00062	d3 e0		 shl	 eax, cl
  00064	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 239  :      vecm_n0 = (Memcb*) vecm_00 + (n>>1);

  00067	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  0006a	d1 f9		 sar	 ecx, 1
  0006c	8b 55 f0	 mov	 edx, DWORD PTR _vecm_00$[ebp]
  0006f	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00072	89 45 fc	 mov	 DWORD PTR _vecm_n0$[ebp], eax

; 240  :      vecm_nn = (Memcb*) vecm_00 + (n>>1) + (n>>2);

  00075	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00078	d1 f9		 sar	 ecx, 1
  0007a	8b 55 f0	 mov	 edx, DWORD PTR _vecm_00$[ebp]
  0007d	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00080	8b 4d f4	 mov	 ecx, DWORD PTR _n$[ebp]
  00083	c1 f9 02	 sar	 ecx, 2
  00086	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  00089	89 55 e8	 mov	 DWORD PTR _vecm_nn$[ebp], edx

; 241  :      tabrev = (int*) nspGetBitRevTbl(order);

  0008c	8b 45 0c	 mov	 eax, DWORD PTR _order$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _nspGetBitRevTbl@4
  00095	89 45 e4	 mov	 DWORD PTR _tabrev$[ebp], eax

; 242  :      for (i=0; i<=(n>>1)-4; i+=4) {

  00098	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0009f	eb 09		 jmp	 SHORT $L1166
$L1167:
  000a1	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000a4	83 c1 04	 add	 ecx, 4
  000a7	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L1166:
  000aa	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  000ad	d1 fa		 sar	 edx, 1
  000af	83 ea 04	 sub	 edx, 4
  000b2	39 55 f8	 cmp	 DWORD PTR _i$[ebp], edx
  000b5	0f 8f 57 02 00
	00		 jg	 $L1147

; 243  :         j = tabrev[i];

  000bb	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000be	8b 4d e4	 mov	 ecx, DWORD PTR _tabrev$[ebp]
  000c1	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000c4	89 55 e0	 mov	 DWORD PTR _j$[ebp], edx

; 244  :         CHANGE( vecm_00 [i+1], vecm_n0 [j  ] );

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ca	8b 4d f0	 mov	 ecx, DWORD PTR _vecm_00$[ebp]
  000cd	8b 54 c1 08	 mov	 edx, DWORD PTR [ecx+eax*8+8]
  000d1	89 55 ec	 mov	 DWORD PTR _temp$[ebp], edx
  000d4	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000d7	8b 4d f0	 mov	 ecx, DWORD PTR _vecm_00$[ebp]
  000da	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  000dd	8b 75 fc	 mov	 esi, DWORD PTR _vecm_n0$[ebp]
  000e0	8b 14 d6	 mov	 edx, DWORD PTR [esi+edx*8]
  000e3	89 54 c1 08	 mov	 DWORD PTR [ecx+eax*8+8], edx
  000e7	8b 45 e0	 mov	 eax, DWORD PTR _j$[ebp]
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _vecm_n0$[ebp]
  000ed	8b 55 ec	 mov	 edx, DWORD PTR _temp$[ebp]
  000f0	89 14 c1	 mov	 DWORD PTR [ecx+eax*8], edx
  000f3	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000f6	8b 4d f0	 mov	 ecx, DWORD PTR _vecm_00$[ebp]
  000f9	8b 54 c1 0c	 mov	 edx, DWORD PTR [ecx+eax*8+12]
  000fd	89 55 ec	 mov	 DWORD PTR _temp$[ebp], edx
  00100	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00103	8b 4d f0	 mov	 ecx, DWORD PTR _vecm_00$[ebp]
  00106	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  00109	8b 75 fc	 mov	 esi, DWORD PTR _vecm_n0$[ebp]
  0010c	8b 54 d6 04	 mov	 edx, DWORD PTR [esi+edx*8+4]
  00110	89 54 c1 0c	 mov	 DWORD PTR [ecx+eax*8+12], edx
  00114	8b 45 e0	 mov	 eax, DWORD PTR _j$[ebp]
  00117	8b 4d fc	 mov	 ecx, DWORD PTR _vecm_n0$[ebp]
  0011a	8b 55 ec	 mov	 edx, DWORD PTR _temp$[ebp]
  0011d	89 54 c1 04	 mov	 DWORD PTR [ecx+eax*8+4], edx

; 245  :         CHANGE( vecm_00 [i+3], vecm_nn [j  ] );

  00121	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00124	8b 4d f0	 mov	 ecx, DWORD PTR _vecm_00$[ebp]
  00127	8b 54 c1 18	 mov	 edx, DWORD PTR [ecx+eax*8+24]
  0012b	89 55 ec	 mov	 DWORD PTR _temp$[ebp], edx
  0012e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00131	8b 4d f0	 mov	 ecx, DWORD PTR _vecm_00$[ebp]
  00134	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  00137	8b 75 e8	 mov	 esi, DWORD PTR _vecm_nn$[ebp]
  0013a	8b 14 d6	 mov	 edx, DWORD PTR [esi+edx*8]
  0013d	89 54 c1 18	 mov	 DWORD PTR [ecx+eax*8+24], edx
  00141	8b 45 e0	 mov	 eax, DWORD PTR _j$[ebp]
  00144	8b 4d e8	 mov	 ecx, DWORD PTR _vecm_nn$[ebp]
  00147	8b 55 ec	 mov	 edx, DWORD PTR _temp$[ebp]
  0014a	89 14 c1	 mov	 DWORD PTR [ecx+eax*8], edx
  0014d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00150	8b 4d f0	 mov	 ecx, DWORD PTR _vecm_00$[ebp]
  00153	8b 54 c1 1c	 mov	 edx, DWORD PTR [ecx+eax*8+28]
  00157	89 55 ec	 mov	 DWORD PTR _temp$[ebp], edx
  0015a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0015d	8b 4d f0	 mov	 ecx, DWORD PTR _vecm_00$[ebp]
  00160	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  00163	8b 75 e8	 mov	 esi, DWORD PTR _vecm_nn$[ebp]
  00166	8b 54 d6 04	 mov	 edx, DWORD PTR [esi+edx*8+4]
  0016a	89 54 c1 1c	 mov	 DWORD PTR [ecx+eax*8+28], edx
  0016e	8b 45 e0	 mov	 eax, DWORD PTR _j$[ebp]
  00171	8b 4d e8	 mov	 ecx, DWORD PTR _vecm_nn$[ebp]
  00174	8b 55 ec	 mov	 edx, DWORD PTR _temp$[ebp]
  00177	89 54 c1 04	 mov	 DWORD PTR [ecx+eax*8+4], edx

; 246  :         if (i>j) {

  0017b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0017e	3b 45 e0	 cmp	 eax, DWORD PTR _j$[ebp]
  00181	0f 8e b4 00 00
	00		 jle	 $L1169

; 247  :            CHANGE( vecm_00 [i  ], vecm_00 [j  ] );

  00187	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0018a	8b 55 f0	 mov	 edx, DWORD PTR _vecm_00$[ebp]
  0018d	8b 04 ca	 mov	 eax, DWORD PTR [edx+ecx*8]
  00190	89 45 ec	 mov	 DWORD PTR _temp$[ebp], eax
  00193	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00196	8b 55 f0	 mov	 edx, DWORD PTR _vecm_00$[ebp]
  00199	8b 45 e0	 mov	 eax, DWORD PTR _j$[ebp]
  0019c	8b 75 f0	 mov	 esi, DWORD PTR _vecm_00$[ebp]
  0019f	8b 04 c6	 mov	 eax, DWORD PTR [esi+eax*8]
  001a2	89 04 ca	 mov	 DWORD PTR [edx+ecx*8], eax
  001a5	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  001a8	8b 55 f0	 mov	 edx, DWORD PTR _vecm_00$[ebp]
  001ab	8b 45 ec	 mov	 eax, DWORD PTR _temp$[ebp]
  001ae	89 04 ca	 mov	 DWORD PTR [edx+ecx*8], eax
  001b1	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001b4	8b 55 f0	 mov	 edx, DWORD PTR _vecm_00$[ebp]
  001b7	8b 44 ca 04	 mov	 eax, DWORD PTR [edx+ecx*8+4]
  001bb	89 45 ec	 mov	 DWORD PTR _temp$[ebp], eax
  001be	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001c1	8b 55 f0	 mov	 edx, DWORD PTR _vecm_00$[ebp]
  001c4	8b 45 e0	 mov	 eax, DWORD PTR _j$[ebp]
  001c7	8b 75 f0	 mov	 esi, DWORD PTR _vecm_00$[ebp]
  001ca	8b 44 c6 04	 mov	 eax, DWORD PTR [esi+eax*8+4]
  001ce	89 44 ca 04	 mov	 DWORD PTR [edx+ecx*8+4], eax
  001d2	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  001d5	8b 55 f0	 mov	 edx, DWORD PTR _vecm_00$[ebp]
  001d8	8b 45 ec	 mov	 eax, DWORD PTR _temp$[ebp]
  001db	89 44 ca 04	 mov	 DWORD PTR [edx+ecx*8+4], eax

; 248  :            CHANGE( vecm_n0 [i+1], vecm_n0 [j+1] );

  001df	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001e2	8b 55 fc	 mov	 edx, DWORD PTR _vecm_n0$[ebp]
  001e5	8b 44 ca 08	 mov	 eax, DWORD PTR [edx+ecx*8+8]
  001e9	89 45 ec	 mov	 DWORD PTR _temp$[ebp], eax
  001ec	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001ef	8b 55 fc	 mov	 edx, DWORD PTR _vecm_n0$[ebp]
  001f2	8b 45 e0	 mov	 eax, DWORD PTR _j$[ebp]
  001f5	8b 75 fc	 mov	 esi, DWORD PTR _vecm_n0$[ebp]
  001f8	8b 44 c6 08	 mov	 eax, DWORD PTR [esi+eax*8+8]
  001fc	89 44 ca 08	 mov	 DWORD PTR [edx+ecx*8+8], eax
  00200	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  00203	8b 55 fc	 mov	 edx, DWORD PTR _vecm_n0$[ebp]
  00206	8b 45 ec	 mov	 eax, DWORD PTR _temp$[ebp]
  00209	89 44 ca 08	 mov	 DWORD PTR [edx+ecx*8+8], eax
  0020d	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00210	8b 55 fc	 mov	 edx, DWORD PTR _vecm_n0$[ebp]
  00213	8b 44 ca 0c	 mov	 eax, DWORD PTR [edx+ecx*8+12]
  00217	89 45 ec	 mov	 DWORD PTR _temp$[ebp], eax
  0021a	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0021d	8b 55 fc	 mov	 edx, DWORD PTR _vecm_n0$[ebp]
  00220	8b 45 e0	 mov	 eax, DWORD PTR _j$[ebp]
  00223	8b 75 fc	 mov	 esi, DWORD PTR _vecm_n0$[ebp]
  00226	8b 44 c6 0c	 mov	 eax, DWORD PTR [esi+eax*8+12]
  0022a	89 44 ca 0c	 mov	 DWORD PTR [edx+ecx*8+12], eax
  0022e	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  00231	8b 55 fc	 mov	 edx, DWORD PTR _vecm_n0$[ebp]
  00234	8b 45 ec	 mov	 eax, DWORD PTR _temp$[ebp]
  00237	89 44 ca 0c	 mov	 DWORD PTR [edx+ecx*8+12], eax
$L1169:

; 249  :         };
; 250  :         j = tabrev[i+2];

  0023b	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0023e	8b 55 e4	 mov	 edx, DWORD PTR _tabrev$[ebp]
  00241	8b 44 8a 08	 mov	 eax, DWORD PTR [edx+ecx*4+8]
  00245	89 45 e0	 mov	 DWORD PTR _j$[ebp], eax

; 251  :         if (i+2>j) {

  00248	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0024b	83 c1 02	 add	 ecx, 2
  0024e	3b 4d e0	 cmp	 ecx, DWORD PTR _j$[ebp]
  00251	0f 8e b6 00 00
	00		 jle	 $L1170

; 252  :           CHANGE( vecm_00 [i+2], vecm_00 [j  ] );

  00257	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0025a	8b 45 f0	 mov	 eax, DWORD PTR _vecm_00$[ebp]
  0025d	8b 4c d0 10	 mov	 ecx, DWORD PTR [eax+edx*8+16]
  00261	89 4d ec	 mov	 DWORD PTR _temp$[ebp], ecx
  00264	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00267	8b 45 f0	 mov	 eax, DWORD PTR _vecm_00$[ebp]
  0026a	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  0026d	8b 75 f0	 mov	 esi, DWORD PTR _vecm_00$[ebp]
  00270	8b 0c ce	 mov	 ecx, DWORD PTR [esi+ecx*8]
  00273	89 4c d0 10	 mov	 DWORD PTR [eax+edx*8+16], ecx
  00277	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  0027a	8b 45 f0	 mov	 eax, DWORD PTR _vecm_00$[ebp]
  0027d	8b 4d ec	 mov	 ecx, DWORD PTR _temp$[ebp]
  00280	89 0c d0	 mov	 DWORD PTR [eax+edx*8], ecx
  00283	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00286	8b 45 f0	 mov	 eax, DWORD PTR _vecm_00$[ebp]
  00289	8b 4c d0 14	 mov	 ecx, DWORD PTR [eax+edx*8+20]
  0028d	89 4d ec	 mov	 DWORD PTR _temp$[ebp], ecx
  00290	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00293	8b 45 f0	 mov	 eax, DWORD PTR _vecm_00$[ebp]
  00296	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  00299	8b 75 f0	 mov	 esi, DWORD PTR _vecm_00$[ebp]
  0029c	8b 4c ce 04	 mov	 ecx, DWORD PTR [esi+ecx*8+4]
  002a0	89 4c d0 14	 mov	 DWORD PTR [eax+edx*8+20], ecx
  002a4	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  002a7	8b 45 f0	 mov	 eax, DWORD PTR _vecm_00$[ebp]
  002aa	8b 4d ec	 mov	 ecx, DWORD PTR _temp$[ebp]
  002ad	89 4c d0 04	 mov	 DWORD PTR [eax+edx*8+4], ecx

; 253  :           CHANGE( vecm_n0 [i+3], vecm_n0 [j+1] );

  002b1	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  002b4	8b 45 fc	 mov	 eax, DWORD PTR _vecm_n0$[ebp]
  002b7	8b 4c d0 18	 mov	 ecx, DWORD PTR [eax+edx*8+24]
  002bb	89 4d ec	 mov	 DWORD PTR _temp$[ebp], ecx
  002be	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  002c1	8b 45 fc	 mov	 eax, DWORD PTR _vecm_n0$[ebp]
  002c4	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  002c7	8b 75 fc	 mov	 esi, DWORD PTR _vecm_n0$[ebp]
  002ca	8b 4c ce 08	 mov	 ecx, DWORD PTR [esi+ecx*8+8]
  002ce	89 4c d0 18	 mov	 DWORD PTR [eax+edx*8+24], ecx
  002d2	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  002d5	8b 45 fc	 mov	 eax, DWORD PTR _vecm_n0$[ebp]
  002d8	8b 4d ec	 mov	 ecx, DWORD PTR _temp$[ebp]
  002db	89 4c d0 08	 mov	 DWORD PTR [eax+edx*8+8], ecx
  002df	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  002e2	8b 45 fc	 mov	 eax, DWORD PTR _vecm_n0$[ebp]
  002e5	8b 4c d0 1c	 mov	 ecx, DWORD PTR [eax+edx*8+28]
  002e9	89 4d ec	 mov	 DWORD PTR _temp$[ebp], ecx
  002ec	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  002ef	8b 45 fc	 mov	 eax, DWORD PTR _vecm_n0$[ebp]
  002f2	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  002f5	8b 75 fc	 mov	 esi, DWORD PTR _vecm_n0$[ebp]
  002f8	8b 4c ce 0c	 mov	 ecx, DWORD PTR [esi+ecx*8+12]
  002fc	89 4c d0 1c	 mov	 DWORD PTR [eax+edx*8+28], ecx
  00300	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  00303	8b 45 fc	 mov	 eax, DWORD PTR _vecm_n0$[ebp]
  00306	8b 4d ec	 mov	 ecx, DWORD PTR _temp$[ebp]
  00309	89 4c d0 0c	 mov	 DWORD PTR [eax+edx*8+12], ecx
$L1170:

; 254  :         };
; 255  :     };

  0030d	e9 8f fd ff ff	 jmp	 $L1167
$L1147:

; 256  : #undef CHANGE
; 257  : }

  00312	5e		 pop	 esi
  00313	8b e5		 mov	 esp, ebp
  00315	5d		 pop	 ebp
  00316	c2 08 00	 ret	 8
_nspcbBitRev1@8 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT _nspcUndSplit_FFT@16
_TEXT	SEGMENT
_t1$ = -24
_t3$ = -16
_t2$ = -8
_x$ = 8
_n$ = 12
_inv$ = 16
_w$ = 20
_nspcUndSplit_FFT@16 PROC NEAR				; COMDAT

; 812  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 813  :    SCplx         t1, t2, t3;
; 814  : 
; 815  :    if ( n < 8 ) {           /* -------- easy cases ---------- */

  00006	83 7d 0c 08	 cmp	 DWORD PTR _n$[ebp], 8
  0000a	0f 8d 70 01 00
	00		 jge	 $L1333

; 816  :       if ( n > 2 ) {        /*  .........  n = 4  ..........  */

  00010	83 7d 0c 02	 cmp	 DWORD PTR _n$[ebp], 2
  00014	0f 8e 15 01 00
	00		 jle	 $L1334

; 817  :             t1.re      =             x[ 0 ].re  -  x[ 2 ].re;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00020	d9 00		 fld	 DWORD PTR [eax]
  00022	d8 61 10	 fsub	 DWORD PTR [ecx+16]
  00025	d9 5d e8	 fstp	 DWORD PTR _t1$[ebp]

; 818  :             t1.im      =             x[ 0 ].im  -  x[ 2 ].im;

  00028	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0002b	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0002e	d9 42 04	 fld	 DWORD PTR [edx+4]
  00031	d8 60 14	 fsub	 DWORD PTR [eax+20]
  00034	d9 5d ec	 fstp	 DWORD PTR _t1$[ebp+4]

; 819  :             t2.re      =             x[ 1 ].re  -  x[ 3 ].re;

  00037	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0003a	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0003d	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00040	d8 62 18	 fsub	 DWORD PTR [edx+24]
  00043	d9 5d f8	 fstp	 DWORD PTR _t2$[ebp]

; 820  :             t2.im      =             x[ 1 ].im  -  x[ 3 ].im;

  00046	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0004c	d9 40 0c	 fld	 DWORD PTR [eax+12]
  0004f	d8 61 1c	 fsub	 DWORD PTR [ecx+28]
  00052	d9 5d fc	 fstp	 DWORD PTR _t2$[ebp+4]

; 821  :             t3.re      =             x[ 0 ].re  +  x[ 2 ].re;

  00055	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00058	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0005b	d9 02		 fld	 DWORD PTR [edx]
  0005d	d8 40 10	 fadd	 DWORD PTR [eax+16]
  00060	d9 5d f0	 fstp	 DWORD PTR _t3$[ebp]

; 822  :             t3.im      =             x[ 0 ].im  +  x[ 2 ].im;

  00063	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00066	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00069	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0006c	d8 42 14	 fadd	 DWORD PTR [edx+20]
  0006f	d9 5d f4	 fstp	 DWORD PTR _t3$[ebp+4]

; 823  :             x[ 0 ].re  =  t3.re  +  (x[ 1 ].re  +  x[ 3 ].re);

  00072	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00078	d9 40 08	 fld	 DWORD PTR [eax+8]
  0007b	d8 41 18	 fadd	 DWORD PTR [ecx+24]
  0007e	d8 45 f0	 fadd	 DWORD PTR _t3$[ebp]
  00081	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00084	d9 1a		 fstp	 DWORD PTR [edx]

; 824  :             x[ 0 ].im  =  t3.im  +  (x[ 1 ].im  +  x[ 3 ].im);

  00086	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0008c	d9 40 0c	 fld	 DWORD PTR [eax+12]
  0008f	d8 41 1c	 fadd	 DWORD PTR [ecx+28]
  00092	d8 45 f4	 fadd	 DWORD PTR _t3$[ebp+4]
  00095	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00098	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 825  :             x[ 1 ].re  =  t3.re  -  (x[ 1 ].re  +  x[ 3 ].re);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000a1	d9 40 08	 fld	 DWORD PTR [eax+8]
  000a4	d8 41 18	 fadd	 DWORD PTR [ecx+24]
  000a7	d8 6d f0	 fsubr	 DWORD PTR _t3$[ebp]
  000aa	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000ad	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 826  :             x[ 1 ].im  =  t3.im  -  (x[ 1 ].im  +  x[ 3 ].im);

  000b0	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000b6	d9 40 0c	 fld	 DWORD PTR [eax+12]
  000b9	d8 41 1c	 fadd	 DWORD PTR [ecx+28]
  000bc	d8 6d f4	 fsubr	 DWORD PTR _t3$[ebp+4]
  000bf	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000c2	d9 5a 0c	 fstp	 DWORD PTR [edx+12]

; 827  :          if ( inv > 0 ) {   /*  forward  transform  */

  000c5	83 7d 10 00	 cmp	 DWORD PTR _inv$[ebp], 0
  000c9	7e 32		 jle	 SHORT $L1335

; 828  :             x[ 2 ].re  =  t1.re  +  t2.im;

  000cb	d9 45 e8	 fld	 DWORD PTR _t1$[ebp]
  000ce	d8 45 fc	 fadd	 DWORD PTR _t2$[ebp+4]
  000d1	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000d4	d9 58 10	 fstp	 DWORD PTR [eax+16]

; 829  :             x[ 2 ].im  =  t1.im  -  t2.re;

  000d7	d9 45 ec	 fld	 DWORD PTR _t1$[ebp+4]
  000da	d8 65 f8	 fsub	 DWORD PTR _t2$[ebp]
  000dd	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000e0	d9 59 14	 fstp	 DWORD PTR [ecx+20]

; 830  :             x[ 3 ].re  =  t1.re  -  t2.im;

  000e3	d9 45 e8	 fld	 DWORD PTR _t1$[ebp]
  000e6	d8 65 fc	 fsub	 DWORD PTR _t2$[ebp+4]
  000e9	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000ec	d9 5a 18	 fstp	 DWORD PTR [edx+24]

; 831  :             x[ 3 ].im  =  t1.im  +  t2.re;

  000ef	d9 45 ec	 fld	 DWORD PTR _t1$[ebp+4]
  000f2	d8 45 f8	 fadd	 DWORD PTR _t2$[ebp]
  000f5	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000f8	d9 58 1c	 fstp	 DWORD PTR [eax+28]

; 832  :          }  else        {   /*  inverse  transform  */

  000fb	eb 30		 jmp	 SHORT $L1336
$L1335:

; 833  :             x[ 2 ].re  =  t1.re  -  t2.im;

  000fd	d9 45 e8	 fld	 DWORD PTR _t1$[ebp]
  00100	d8 65 fc	 fsub	 DWORD PTR _t2$[ebp+4]
  00103	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00106	d9 59 10	 fstp	 DWORD PTR [ecx+16]

; 834  :             x[ 2 ].im  =  t1.im  +  t2.re;

  00109	d9 45 ec	 fld	 DWORD PTR _t1$[ebp+4]
  0010c	d8 45 f8	 fadd	 DWORD PTR _t2$[ebp]
  0010f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00112	d9 5a 14	 fstp	 DWORD PTR [edx+20]

; 835  :             x[ 3 ].re  =  t1.re  +  t2.im;

  00115	d9 45 e8	 fld	 DWORD PTR _t1$[ebp]
  00118	d8 45 fc	 fadd	 DWORD PTR _t2$[ebp+4]
  0011b	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0011e	d9 58 18	 fstp	 DWORD PTR [eax+24]

; 836  :             x[ 3 ].im  =  t1.im  -  t2.re;

  00121	d9 45 ec	 fld	 DWORD PTR _t1$[ebp+4]
  00124	d8 65 f8	 fsub	 DWORD PTR _t2$[ebp]
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0012a	d9 59 1c	 fstp	 DWORD PTR [ecx+28]
$L1336:

; 837  :          }
; 838  :       }
; 839  :       else {

  0012d	eb 4f		 jmp	 SHORT $L1337
$L1334:

; 840  :          if ( n > 1 ) {     /*  .........  n = 2  ..........  */

  0012f	83 7d 0c 01	 cmp	 DWORD PTR _n$[ebp], 1
  00133	7e 49		 jle	 SHORT $L1337

; 841  :             t1         =            x[ 0 ];

  00135	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00138	8b 02		 mov	 eax, DWORD PTR [edx]
  0013a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0013d	89 45 e8	 mov	 DWORD PTR _t1$[ebp], eax
  00140	89 4d ec	 mov	 DWORD PTR _t1$[ebp+4], ecx

; 842  :             x[ 0 ].re  =  t1.re  +  x[ 1 ].re;

  00143	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00146	d9 45 e8	 fld	 DWORD PTR _t1$[ebp]
  00149	d8 42 08	 fadd	 DWORD PTR [edx+8]
  0014c	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0014f	d9 18		 fstp	 DWORD PTR [eax]

; 843  :             x[ 0 ].im  =  t1.im  +  x[ 1 ].im;

  00151	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00154	d9 45 ec	 fld	 DWORD PTR _t1$[ebp+4]
  00157	d8 41 0c	 fadd	 DWORD PTR [ecx+12]
  0015a	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0015d	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 844  :             x[ 1 ].re  =  t1.re  -  x[ 1 ].re;

  00160	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00163	d9 45 e8	 fld	 DWORD PTR _t1$[ebp]
  00166	d8 60 08	 fsub	 DWORD PTR [eax+8]
  00169	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0016c	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 845  :             x[ 1 ].im  =  t1.im  -  x[ 1 ].im;

  0016f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00172	d9 45 ec	 fld	 DWORD PTR _t1$[ebp+4]
  00175	d8 62 0c	 fsub	 DWORD PTR [edx+12]
  00178	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0017b	d9 58 0c	 fstp	 DWORD PTR [eax+12]
$L1337:

; 846  :          }
; 847  :       }
; 848  :       return;

  0017e	eb 2a		 jmp	 SHORT $L1329
$L1333:

; 849  :    }                        /* ----- end for easy cases ----- */
; 850  : 
; 851  :    if ( inv > 0 ) {         /*  forward  transform  */

  00180	83 7d 10 00	 cmp	 DWORD PTR _inv$[ebp], 0
  00184	7e 13		 jle	 SHORT $L1339

; 852  :       nspcUndSplit_FFT_forward( x, n, w);

  00186	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  00189	51		 push	 ecx
  0018a	8b 55 0c	 mov	 edx, DWORD PTR _n$[ebp]
  0018d	52		 push	 edx
  0018e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 _nspcUndSplit_FFT_forward@12

; 853  :    }  else        {         /*  inverse  transform  */

  00197	eb 11		 jmp	 SHORT $L1329
$L1339:

; 854  :       nspcUndSplit_FFT_inverse( x, n, w);

  00199	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  0019c	51		 push	 ecx
  0019d	8b 55 0c	 mov	 edx, DWORD PTR _n$[ebp]
  001a0	52		 push	 edx
  001a1	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001a4	50		 push	 eax
  001a5	e8 00 00 00 00	 call	 _nspcUndSplit_FFT_inverse@12
$L1329:

; 855  :    }
; 856  :    return;
; 857  : } /* nspcUndSplit_FFT */

  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c2 10 00	 ret	 16			; 00000010H
_nspcUndSplit_FFT@16 ENDP
_TEXT	ENDS
PUBLIC	__real@3f3504f7
PUBLIC	__real@bf3504f7
;	COMDAT __real@3f3504f7
CONST	SEGMENT
__real@3f3504f7 DD 03f3504f7r			; 0.707107
CONST	ENDS
;	COMDAT __real@bf3504f7
CONST	SEGMENT
__real@bf3504f7 DD 0bf3504f7r			; -0.707107
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _nspcUndSplit_FFT_forward@12
_TEXT	SEGMENT
_j$ = -92
_t2re$ = -88
_ww$ = -84
_n2$ = -80
_its$ = -76
_l$ = -72
_k$ = -68
_n8$ = -64
_t1im$ = -60
_x_1$ = -56
_t1re$ = -52
_nn$ = -48
_n4$ = -44
_is$ = -40
_i1$ = -36
_x_2$ = -32
_t3im$ = -28
_x_4$ = -24
_t2im$ = -20
_id$ = -16
_it$ = -12
_t3re$ = -8
_x_3$ = -4
_x$ = 8
_n$ = 12
_w$ = 16
_nspcUndSplit_FFT_forward@12 PROC NEAR			; COMDAT

; 286  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	56		 push	 esi

; 287  :    int           k,
; 288  :                  its, is, id, i1, it, j, l,
; 289  :                  nn, n2, n4, n8;
; 290  :    float         t1re, t1im, t2re, t2im, t3re, t3im;
; 291  :    float        *x_1, *x_2, *x_3, *x_4, *ww;
; 292  : 
; 293  :    /* --------------- Main Loop --------------- */
; 294  : 
; 295  :    its = 4;

  00007	c7 45 b4 04 00
	00 00		 mov	 DWORD PTR _its$[ebp], 4

; 296  :    n2  = n << 2;

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]
  00011	c1 e0 02	 shl	 eax, 2
  00014	89 45 b0	 mov	 DWORD PTR _n2$[ebp], eax

; 297  : 
; 298  :    nn  = n << 1;

  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  0001a	d1 e1		 shl	 ecx, 1
  0001c	89 4d d0	 mov	 DWORD PTR _nn$[ebp], ecx

; 299  : 
; 300  :    x_1 = (float *)x;

  0001f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00022	89 55 c8	 mov	 DWORD PTR _x_1$[ebp], edx

; 301  :    ww  = (float *)w;

  00025	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00028	89 45 ac	 mov	 DWORD PTR _ww$[ebp], eax

; 302  : 
; 303  :    for  ( k = 2 ; k < (n >> 2) ; k = (k << 1) )  {

  0002b	c7 45 bc 02 00
	00 00		 mov	 DWORD PTR _k$[ebp], 2
  00032	eb 08		 jmp	 SHORT $L1204
$L1205:
  00034	8b 4d bc	 mov	 ecx, DWORD PTR _k$[ebp]
  00037	d1 e1		 shl	 ecx, 1
  00039	89 4d bc	 mov	 DWORD PTR _k$[ebp], ecx
$L1204:
  0003c	8b 55 0c	 mov	 edx, DWORD PTR _n$[ebp]
  0003f	c1 fa 02	 sar	 edx, 2
  00042	39 55 bc	 cmp	 DWORD PTR _k$[ebp], edx
  00045	0f 8d 49 06 00
	00		 jge	 $L1206

; 304  : 
; 305  :       is   = 0;

  0004b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _is$[ebp], 0

; 306  :       id   = n2;

  00052	8b 45 b0	 mov	 eax, DWORD PTR _n2$[ebp]
  00055	89 45 f0	 mov	 DWORD PTR _id$[ebp], eax

; 307  :       n2   = n2 >> 1;

  00058	8b 4d b0	 mov	 ecx, DWORD PTR _n2$[ebp]
  0005b	d1 f9		 sar	 ecx, 1
  0005d	89 4d b0	 mov	 DWORD PTR _n2$[ebp], ecx

; 308  :       n4   = n2 >> 2;

  00060	8b 55 b0	 mov	 edx, DWORD PTR _n2$[ebp]
  00063	c1 fa 02	 sar	 edx, 2
  00066	89 55 d4	 mov	 DWORD PTR _n4$[ebp], edx

; 309  :       n8   = n4 >> 1;

  00069	8b 45 d4	 mov	 eax, DWORD PTR _n4$[ebp]
  0006c	d1 f8		 sar	 eax, 1
  0006e	89 45 c0	 mov	 DWORD PTR _n8$[ebp], eax

; 310  : 
; 311  :       x_2  = x_1 + n4;

  00071	8b 4d d4	 mov	 ecx, DWORD PTR _n4$[ebp]
  00074	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00077	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0007a	89 45 e0	 mov	 DWORD PTR _x_2$[ebp], eax

; 312  :       x_3  = x_2 + n4;

  0007d	8b 4d d4	 mov	 ecx, DWORD PTR _n4$[ebp]
  00080	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  00083	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00086	89 45 fc	 mov	 DWORD PTR _x_3$[ebp], eax

; 313  :       x_4  = x_3 + n4;

  00089	8b 4d d4	 mov	 ecx, DWORD PTR _n4$[ebp]
  0008c	8b 55 fc	 mov	 edx, DWORD PTR _x_3$[ebp]
  0008f	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00092	89 45 e8	 mov	 DWORD PTR _x_4$[ebp], eax
$m10$1207:

; 314  : 
; 315  :       m10:
; 316  :       for  ( i1 = is ; i1 < nn ; i1 += id )  {

  00095	8b 4d d8	 mov	 ecx, DWORD PTR _is$[ebp]
  00098	89 4d dc	 mov	 DWORD PTR _i1$[ebp], ecx
  0009b	eb 09		 jmp	 SHORT $L1208
$L1209:
  0009d	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  000a0	03 55 f0	 add	 edx, DWORD PTR _id$[ebp]
  000a3	89 55 dc	 mov	 DWORD PTR _i1$[ebp], edx
$L1208:
  000a6	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  000a9	3b 45 d0	 cmp	 eax, DWORD PTR _nn$[ebp]
  000ac	0f 8d b4 05 00
	00		 jge	 $L1210

; 317  : 
; 318  :          /* ............... Zero butterfly ............... */
; 319  :          t1re         =  x_1[ i1   ]  -  x_3[ i1   ];

  000b2	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  000b5	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  000b8	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  000bb	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  000be	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  000c1	d8 24 86	 fsub	 DWORD PTR [esi+eax*4]
  000c4	d9 5d cc	 fstp	 DWORD PTR _t1re$[ebp]

; 320  :          t1im         =  x_1[ i1+1 ]  -  x_3[ i1+1 ];

  000c7	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  000ca	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  000cd	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  000d0	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  000d3	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  000d7	d8 64 86 04	 fsub	 DWORD PTR [esi+eax*4+4]
  000db	d9 5d c4	 fstp	 DWORD PTR _t1im$[ebp]

; 321  :          x_1[ i1   ]  =  x_1[ i1   ]  +  x_3[ i1   ];

  000de	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  000e1	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  000e4	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  000e7	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  000ea	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  000ed	d8 04 86	 fadd	 DWORD PTR [esi+eax*4]
  000f0	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  000f3	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  000f6	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 322  :          x_1[ i1+1 ]  =  x_1[ i1+1 ]  +  x_3[ i1+1 ];

  000f9	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  000fc	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  000ff	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00102	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  00105	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  00109	d8 44 96 04	 fadd	 DWORD PTR [esi+edx*4+4]
  0010d	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00110	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00113	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 323  :          t2re         =  x_2[ i1   ]  -  x_4[ i1   ];

  00117	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  0011a	8b 45 e0	 mov	 eax, DWORD PTR _x_2$[ebp]
  0011d	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00120	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  00123	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00126	d8 24 8e	 fsub	 DWORD PTR [esi+ecx*4]
  00129	d9 5d a8	 fstp	 DWORD PTR _t2re$[ebp]

; 324  :          t2im         =  x_2[ i1+1 ]  -  x_4[ i1+1 ];

  0012c	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  0012f	8b 45 e0	 mov	 eax, DWORD PTR _x_2$[ebp]
  00132	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00135	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  00138	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  0013c	d8 64 8e 04	 fsub	 DWORD PTR [esi+ecx*4+4]
  00140	d9 5d ec	 fstp	 DWORD PTR _t2im$[ebp]

; 325  :          x_2[ i1   ]  =  x_2[ i1   ]  +  x_4[ i1   ];

  00143	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00146	8b 45 e0	 mov	 eax, DWORD PTR _x_2$[ebp]
  00149	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  0014c	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  0014f	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00152	d8 04 8e	 fadd	 DWORD PTR [esi+ecx*4]
  00155	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00158	8b 45 e0	 mov	 eax, DWORD PTR _x_2$[ebp]
  0015b	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 326  :          x_2[ i1+1 ]  =  x_2[ i1+1 ]  +  x_4[ i1+1 ];

  0015e	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00161	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  00164	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00167	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  0016a	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  0016e	d8 44 86 04	 fadd	 DWORD PTR [esi+eax*4+4]
  00172	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00175	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  00178	d9 5c 8a 04	 fstp	 DWORD PTR [edx+ecx*4+4]

; 327  :          x_3[ i1   ]  =  t1re  + t2im;

  0017c	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  0017f	d8 45 ec	 fadd	 DWORD PTR _t2im$[ebp]
  00182	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00185	8b 4d fc	 mov	 ecx, DWORD PTR _x_3$[ebp]
  00188	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 328  :          x_3[ i1+1 ]  =  t1im  - t2re;

  0018b	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  0018e	d8 65 a8	 fsub	 DWORD PTR _t2re$[ebp]
  00191	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00194	8b 45 fc	 mov	 eax, DWORD PTR _x_3$[ebp]
  00197	d9 5c 90 04	 fstp	 DWORD PTR [eax+edx*4+4]

; 329  :          x_4[ i1   ]  =  t1re  - t2im;

  0019b	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  0019e	d8 65 ec	 fsub	 DWORD PTR _t2im$[ebp]
  001a1	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  001a4	8b 55 e8	 mov	 edx, DWORD PTR _x_4$[ebp]
  001a7	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 330  :          x_4[ i1+1 ]  =  t1im  + t2re;

  001aa	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  001ad	d8 45 a8	 fadd	 DWORD PTR _t2re$[ebp]
  001b0	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  001b3	8b 4d e8	 mov	 ecx, DWORD PTR _x_4$[ebp]
  001b6	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 331  : 
; 332  :          /* ...................... N/8 butterfly ...................... */
; 333  :          l = i1 + n8;

  001ba	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  001bd	03 55 c0	 add	 edx, DWORD PTR _n8$[ebp]
  001c0	89 55 b8	 mov	 DWORD PTR _l$[ebp], edx

; 334  :          t1re        =  x_1[ l   ]  -  x_3[ l   ];

  001c3	8b 45 b8	 mov	 eax, DWORD PTR _l$[ebp]
  001c6	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  001c9	8b 55 b8	 mov	 edx, DWORD PTR _l$[ebp]
  001cc	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  001cf	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  001d2	d8 24 96	 fsub	 DWORD PTR [esi+edx*4]
  001d5	d9 5d cc	 fstp	 DWORD PTR _t1re$[ebp]

; 335  :          t1im        =  x_1[ l+1 ]  -  x_3[ l+1 ];

  001d8	8b 45 b8	 mov	 eax, DWORD PTR _l$[ebp]
  001db	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  001de	8b 55 b8	 mov	 edx, DWORD PTR _l$[ebp]
  001e1	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  001e4	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  001e8	d8 64 96 04	 fsub	 DWORD PTR [esi+edx*4+4]
  001ec	d9 5d c4	 fstp	 DWORD PTR _t1im$[ebp]

; 336  :          x_1[ l   ]  =  x_1[ l   ]  +  x_3[ l   ];

  001ef	8b 45 b8	 mov	 eax, DWORD PTR _l$[ebp]
  001f2	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  001f5	8b 55 b8	 mov	 edx, DWORD PTR _l$[ebp]
  001f8	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  001fb	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  001fe	d8 04 96	 fadd	 DWORD PTR [esi+edx*4]
  00201	8b 45 b8	 mov	 eax, DWORD PTR _l$[ebp]
  00204	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00207	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 337  :          x_1[ l+1 ]  =  x_1[ l+1 ]  +  x_3[ l+1 ];

  0020a	8b 55 b8	 mov	 edx, DWORD PTR _l$[ebp]
  0020d	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00210	8b 4d b8	 mov	 ecx, DWORD PTR _l$[ebp]
  00213	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  00216	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  0021a	d8 44 8e 04	 fadd	 DWORD PTR [esi+ecx*4+4]
  0021e	8b 55 b8	 mov	 edx, DWORD PTR _l$[ebp]
  00221	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00224	d9 5c 90 04	 fstp	 DWORD PTR [eax+edx*4+4]

; 338  :          t2re        =  x_2[ l   ]  -  x_4[ l   ];

  00228	8b 4d b8	 mov	 ecx, DWORD PTR _l$[ebp]
  0022b	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  0022e	8b 45 b8	 mov	 eax, DWORD PTR _l$[ebp]
  00231	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  00234	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00237	d8 24 86	 fsub	 DWORD PTR [esi+eax*4]
  0023a	d9 5d a8	 fstp	 DWORD PTR _t2re$[ebp]

; 339  :          t2im        =  x_2[ l+1 ]  -  x_4[ l+1 ];

  0023d	8b 4d b8	 mov	 ecx, DWORD PTR _l$[ebp]
  00240	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  00243	8b 45 b8	 mov	 eax, DWORD PTR _l$[ebp]
  00246	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  00249	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  0024d	d8 64 86 04	 fsub	 DWORD PTR [esi+eax*4+4]
  00251	d9 5d ec	 fstp	 DWORD PTR _t2im$[ebp]

; 340  :          x_2[ l   ]  =  x_2[ l   ]  +  x_4[ l   ];

  00254	8b 4d b8	 mov	 ecx, DWORD PTR _l$[ebp]
  00257	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  0025a	8b 45 b8	 mov	 eax, DWORD PTR _l$[ebp]
  0025d	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  00260	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00263	d8 04 86	 fadd	 DWORD PTR [esi+eax*4]
  00266	8b 4d b8	 mov	 ecx, DWORD PTR _l$[ebp]
  00269	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  0026c	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 341  :          x_2[ l+1 ]  =  x_2[ l+1 ]  +  x_4[ l+1 ];

  0026f	8b 45 b8	 mov	 eax, DWORD PTR _l$[ebp]
  00272	8b 4d e0	 mov	 ecx, DWORD PTR _x_2$[ebp]
  00275	8b 55 b8	 mov	 edx, DWORD PTR _l$[ebp]
  00278	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  0027b	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  0027f	d8 44 96 04	 fadd	 DWORD PTR [esi+edx*4+4]
  00283	8b 45 b8	 mov	 eax, DWORD PTR _l$[ebp]
  00286	8b 4d e0	 mov	 ecx, DWORD PTR _x_2$[ebp]
  00289	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 342  :          x_3[ l   ]  =  V707107*( (t1re + t2im) + (t1im - t2re) );

  0028d	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00290	d8 45 ec	 fadd	 DWORD PTR _t2im$[ebp]
  00293	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00296	d8 65 a8	 fsub	 DWORD PTR _t2re$[ebp]
  00299	de c1		 faddp	 ST(1), ST(0)
  0029b	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f7
  002a1	8b 55 b8	 mov	 edx, DWORD PTR _l$[ebp]
  002a4	8b 45 fc	 mov	 eax, DWORD PTR _x_3$[ebp]
  002a7	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 343  :          x_3[ l+1 ]  =  V707107*( (t1im - t2re) - (t1re + t2im) );

  002aa	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  002ad	d8 65 a8	 fsub	 DWORD PTR _t2re$[ebp]
  002b0	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  002b3	d8 45 ec	 fadd	 DWORD PTR _t2im$[ebp]
  002b6	de e9		 fsubp	 ST(1), ST(0)
  002b8	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f7
  002be	8b 4d b8	 mov	 ecx, DWORD PTR _l$[ebp]
  002c1	8b 55 fc	 mov	 edx, DWORD PTR _x_3$[ebp]
  002c4	d9 5c 8a 04	 fstp	 DWORD PTR [edx+ecx*4+4]

; 344  :          x_4[ l   ]  = -V707107*( (t1re - t2im) - (t1im + t2re) );

  002c8	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  002cb	d8 65 ec	 fsub	 DWORD PTR _t2im$[ebp]
  002ce	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  002d1	d8 45 a8	 fadd	 DWORD PTR _t2re$[ebp]
  002d4	de e9		 fsubp	 ST(1), ST(0)
  002d6	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@bf3504f7
  002dc	8b 45 b8	 mov	 eax, DWORD PTR _l$[ebp]
  002df	8b 4d e8	 mov	 ecx, DWORD PTR _x_4$[ebp]
  002e2	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 345  :          x_4[ l+1 ]  = -V707107*( (t1im + t2re) + (t1re - t2im) );

  002e5	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  002e8	d8 45 a8	 fadd	 DWORD PTR _t2re$[ebp]
  002eb	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  002ee	d8 65 ec	 fsub	 DWORD PTR _t2im$[ebp]
  002f1	de c1		 faddp	 ST(1), ST(0)
  002f3	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@bf3504f7
  002f9	8b 55 b8	 mov	 edx, DWORD PTR _l$[ebp]
  002fc	8b 45 e8	 mov	 eax, DWORD PTR _x_4$[ebp]
  002ff	d9 5c 90 04	 fstp	 DWORD PTR [eax+edx*4+4]

; 346  : 
; 347  :          /* ...................... General butterfly ................... */
; 348  :          for ( j=i1+2, it=its-4; j < l ; j+=2 , it+=its ) {

  00303	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00306	83 c1 02	 add	 ecx, 2
  00309	89 4d a4	 mov	 DWORD PTR _j$[ebp], ecx
  0030c	8b 55 b4	 mov	 edx, DWORD PTR _its$[ebp]
  0030f	83 ea 04	 sub	 edx, 4
  00312	89 55 f4	 mov	 DWORD PTR _it$[ebp], edx
  00315	eb 12		 jmp	 SHORT $L1215
$L1216:
  00317	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  0031a	83 c0 02	 add	 eax, 2
  0031d	89 45 a4	 mov	 DWORD PTR _j$[ebp], eax
  00320	8b 4d f4	 mov	 ecx, DWORD PTR _it$[ebp]
  00323	03 4d b4	 add	 ecx, DWORD PTR _its$[ebp]
  00326	89 4d f4	 mov	 DWORD PTR _it$[ebp], ecx
$L1215:
  00329	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  0032c	3b 55 b8	 cmp	 edx, DWORD PTR _l$[ebp]
  0032f	0f 8d 7b 01 00
	00		 jge	 $L1217

; 349  :             t1re        =  x_1[ j   ]  -  x_3[ j   ];

  00335	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00338	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  0033b	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  0033e	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  00341	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  00344	d8 24 96	 fsub	 DWORD PTR [esi+edx*4]
  00347	d9 5d cc	 fstp	 DWORD PTR _t1re$[ebp]

; 350  :             t1im        =  x_1[ j+1 ]  -  x_3[ j+1 ];

  0034a	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  0034d	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00350	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00353	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  00356	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  0035a	d8 64 96 04	 fsub	 DWORD PTR [esi+edx*4+4]
  0035e	d9 5d c4	 fstp	 DWORD PTR _t1im$[ebp]

; 351  :             x_1[ j   ]  =  x_1[ j   ]  +  x_3[ j   ];

  00361	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00364	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00367	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  0036a	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  0036d	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  00370	d8 04 96	 fadd	 DWORD PTR [esi+edx*4]
  00373	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00376	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00379	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 352  :             x_1[ j+1 ]  =  x_1[ j+1 ]  +  x_3[ j+1 ];

  0037c	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  0037f	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00382	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00385	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  00388	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  0038c	d8 44 8e 04	 fadd	 DWORD PTR [esi+ecx*4+4]
  00390	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00393	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00396	d9 5c 90 04	 fstp	 DWORD PTR [eax+edx*4+4]

; 353  :             t2im        =  x_2[ j   ]  -  x_4[ j   ];

  0039a	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  0039d	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  003a0	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  003a3	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  003a6	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  003a9	d8 24 86	 fsub	 DWORD PTR [esi+eax*4]
  003ac	d9 5d ec	 fstp	 DWORD PTR _t2im$[ebp]

; 354  :             t2re        =  x_4[ j+1 ]  -  x_2[ j+1 ];

  003af	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  003b2	8b 55 e8	 mov	 edx, DWORD PTR _x_4$[ebp]
  003b5	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  003b8	8b 75 e0	 mov	 esi, DWORD PTR _x_2$[ebp]
  003bb	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  003bf	d8 64 86 04	 fsub	 DWORD PTR [esi+eax*4+4]
  003c3	d9 5d a8	 fstp	 DWORD PTR _t2re$[ebp]

; 355  :             x_2[ j   ]  =  x_2[ j   ]  +  x_4[ j   ];

  003c6	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  003c9	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  003cc	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  003cf	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  003d2	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  003d5	d8 04 86	 fadd	 DWORD PTR [esi+eax*4]
  003d8	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  003db	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  003de	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 356  :             x_2[ j+1 ]  =  x_2[ j+1 ]  +  x_4[ j+1 ];

  003e1	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  003e4	8b 4d e0	 mov	 ecx, DWORD PTR _x_2$[ebp]
  003e7	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  003ea	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  003ed	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  003f1	d8 44 96 04	 fadd	 DWORD PTR [esi+edx*4+4]
  003f5	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  003f8	8b 4d e0	 mov	 ecx, DWORD PTR _x_2$[ebp]
  003fb	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 357  :             x_3[ j   ]  =  (t1re - t2re )*ww[ it   ]  -
; 358  :                            (t1im - t2im )*ww[ it+1 ];

  003ff	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00402	d8 65 a8	 fsub	 DWORD PTR _t2re$[ebp]
  00405	8b 55 f4	 mov	 edx, DWORD PTR _it$[ebp]
  00408	8b 45 ac	 mov	 eax, DWORD PTR _ww$[ebp]
  0040b	d8 0c 90	 fmul	 DWORD PTR [eax+edx*4]
  0040e	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00411	d8 65 ec	 fsub	 DWORD PTR _t2im$[ebp]
  00414	8b 4d f4	 mov	 ecx, DWORD PTR _it$[ebp]
  00417	8b 55 ac	 mov	 edx, DWORD PTR _ww$[ebp]
  0041a	d8 4c 8a 04	 fmul	 DWORD PTR [edx+ecx*4+4]
  0041e	de e9		 fsubp	 ST(1), ST(0)
  00420	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00423	8b 4d fc	 mov	 ecx, DWORD PTR _x_3$[ebp]
  00426	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 359  :             x_3[ j+1 ]  =  (t1im - t2im )*ww[ it   ]  +
; 360  :                            (t1re - t2re )*ww[ it+1 ];

  00429	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  0042c	d8 65 ec	 fsub	 DWORD PTR _t2im$[ebp]
  0042f	8b 55 f4	 mov	 edx, DWORD PTR _it$[ebp]
  00432	8b 45 ac	 mov	 eax, DWORD PTR _ww$[ebp]
  00435	d8 0c 90	 fmul	 DWORD PTR [eax+edx*4]
  00438	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  0043b	d8 65 a8	 fsub	 DWORD PTR _t2re$[ebp]
  0043e	8b 4d f4	 mov	 ecx, DWORD PTR _it$[ebp]
  00441	8b 55 ac	 mov	 edx, DWORD PTR _ww$[ebp]
  00444	d8 4c 8a 04	 fmul	 DWORD PTR [edx+ecx*4+4]
  00448	de c1		 faddp	 ST(1), ST(0)
  0044a	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  0044d	8b 4d fc	 mov	 ecx, DWORD PTR _x_3$[ebp]
  00450	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 361  :             x_4[ j   ]  =  (t1re + t2re )*ww[ it+2 ] -
; 362  :                            (t1im + t2im )*ww[ it+3 ];

  00454	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00457	d8 45 a8	 fadd	 DWORD PTR _t2re$[ebp]
  0045a	8b 55 f4	 mov	 edx, DWORD PTR _it$[ebp]
  0045d	8b 45 ac	 mov	 eax, DWORD PTR _ww$[ebp]
  00460	d8 4c 90 08	 fmul	 DWORD PTR [eax+edx*4+8]
  00464	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00467	d8 45 ec	 fadd	 DWORD PTR _t2im$[ebp]
  0046a	8b 4d f4	 mov	 ecx, DWORD PTR _it$[ebp]
  0046d	8b 55 ac	 mov	 edx, DWORD PTR _ww$[ebp]
  00470	d8 4c 8a 0c	 fmul	 DWORD PTR [edx+ecx*4+12]
  00474	de e9		 fsubp	 ST(1), ST(0)
  00476	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00479	8b 4d e8	 mov	 ecx, DWORD PTR _x_4$[ebp]
  0047c	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 363  :             x_4[ j+1 ]  =  (t1im + t2im )*ww[ it+2 ]  +
; 364  :                            (t1re + t2re )*ww[ it+3 ];

  0047f	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00482	d8 45 ec	 fadd	 DWORD PTR _t2im$[ebp]
  00485	8b 55 f4	 mov	 edx, DWORD PTR _it$[ebp]
  00488	8b 45 ac	 mov	 eax, DWORD PTR _ww$[ebp]
  0048b	d8 4c 90 08	 fmul	 DWORD PTR [eax+edx*4+8]
  0048f	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00492	d8 45 a8	 fadd	 DWORD PTR _t2re$[ebp]
  00495	8b 4d f4	 mov	 ecx, DWORD PTR _it$[ebp]
  00498	8b 55 ac	 mov	 edx, DWORD PTR _ww$[ebp]
  0049b	d8 4c 8a 0c	 fmul	 DWORD PTR [edx+ecx*4+12]
  0049f	de c1		 faddp	 ST(1), ST(0)
  004a1	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  004a4	8b 4d e8	 mov	 ecx, DWORD PTR _x_4$[ebp]
  004a7	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 365  :          }

  004ab	e9 67 fe ff ff	 jmp	 $L1216
$L1217:

; 366  :          for ( j=i1+n4-2, it=its-4; j > l ; j-=2 , it+=its ) {

  004b0	8b 55 d4	 mov	 edx, DWORD PTR _n4$[ebp]
  004b3	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  004b6	8d 4c 10 fe	 lea	 ecx, DWORD PTR [eax+edx-2]
  004ba	89 4d a4	 mov	 DWORD PTR _j$[ebp], ecx
  004bd	8b 55 b4	 mov	 edx, DWORD PTR _its$[ebp]
  004c0	83 ea 04	 sub	 edx, 4
  004c3	89 55 f4	 mov	 DWORD PTR _it$[ebp], edx
  004c6	eb 12		 jmp	 SHORT $L1218
$L1219:
  004c8	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  004cb	83 e8 02	 sub	 eax, 2
  004ce	89 45 a4	 mov	 DWORD PTR _j$[ebp], eax
  004d1	8b 4d f4	 mov	 ecx, DWORD PTR _it$[ebp]
  004d4	03 4d b4	 add	 ecx, DWORD PTR _its$[ebp]
  004d7	89 4d f4	 mov	 DWORD PTR _it$[ebp], ecx
$L1218:
  004da	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  004dd	3b 55 b8	 cmp	 edx, DWORD PTR _l$[ebp]
  004e0	0f 8e 7b 01 00
	00		 jle	 $L1220

; 367  :             t1re        =  x_1[ j   ]  -  x_3[ j   ];

  004e6	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  004e9	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  004ec	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  004ef	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  004f2	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  004f5	d8 24 96	 fsub	 DWORD PTR [esi+edx*4]
  004f8	d9 5d cc	 fstp	 DWORD PTR _t1re$[ebp]

; 368  :             t1im        =  x_1[ j+1 ]  -  x_3[ j+1 ];

  004fb	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  004fe	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00501	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00504	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  00507	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  0050b	d8 64 96 04	 fsub	 DWORD PTR [esi+edx*4+4]
  0050f	d9 5d c4	 fstp	 DWORD PTR _t1im$[ebp]

; 369  :             x_1[ j   ]  =  x_1[ j   ]  +  x_3[ j   ];

  00512	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00515	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00518	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  0051b	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  0051e	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  00521	d8 04 96	 fadd	 DWORD PTR [esi+edx*4]
  00524	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00527	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  0052a	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 370  :             x_1[ j+1 ]  =  x_1[ j+1 ]  +  x_3[ j+1 ];

  0052d	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00530	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00533	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00536	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  00539	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  0053d	d8 44 8e 04	 fadd	 DWORD PTR [esi+ecx*4+4]
  00541	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00544	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00547	d9 5c 90 04	 fstp	 DWORD PTR [eax+edx*4+4]

; 371  :             t2im        =  x_2[ j   ]  -  x_4[ j   ];

  0054b	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  0054e	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  00551	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00554	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  00557	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  0055a	d8 24 86	 fsub	 DWORD PTR [esi+eax*4]
  0055d	d9 5d ec	 fstp	 DWORD PTR _t2im$[ebp]

; 372  :             t2re        =  x_4[ j+1 ]  -  x_2[ j+1 ];

  00560	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00563	8b 55 e8	 mov	 edx, DWORD PTR _x_4$[ebp]
  00566	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00569	8b 75 e0	 mov	 esi, DWORD PTR _x_2$[ebp]
  0056c	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  00570	d8 64 86 04	 fsub	 DWORD PTR [esi+eax*4+4]
  00574	d9 5d a8	 fstp	 DWORD PTR _t2re$[ebp]

; 373  :             x_2[ j   ]  =  x_2[ j   ]  +  x_4[ j   ];

  00577	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  0057a	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  0057d	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00580	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  00583	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00586	d8 04 86	 fadd	 DWORD PTR [esi+eax*4]
  00589	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  0058c	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  0058f	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 374  :             x_2[ j+1 ]  =  x_2[ j+1 ]  +  x_4[ j+1 ];

  00592	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00595	8b 4d e0	 mov	 ecx, DWORD PTR _x_2$[ebp]
  00598	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  0059b	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  0059e	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  005a2	d8 44 96 04	 fadd	 DWORD PTR [esi+edx*4+4]
  005a6	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  005a9	8b 4d e0	 mov	 ecx, DWORD PTR _x_2$[ebp]
  005ac	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 375  :             x_3[ j   ]  =  (t2re - t1re )*ww[ it+1 ]  -
; 376  :                            (t2im - t1im )*ww[ it   ];

  005b0	d9 45 a8	 fld	 DWORD PTR _t2re$[ebp]
  005b3	d8 65 cc	 fsub	 DWORD PTR _t1re$[ebp]
  005b6	8b 55 f4	 mov	 edx, DWORD PTR _it$[ebp]
  005b9	8b 45 ac	 mov	 eax, DWORD PTR _ww$[ebp]
  005bc	d8 4c 90 04	 fmul	 DWORD PTR [eax+edx*4+4]
  005c0	d9 45 ec	 fld	 DWORD PTR _t2im$[ebp]
  005c3	d8 65 c4	 fsub	 DWORD PTR _t1im$[ebp]
  005c6	8b 4d f4	 mov	 ecx, DWORD PTR _it$[ebp]
  005c9	8b 55 ac	 mov	 edx, DWORD PTR _ww$[ebp]
  005cc	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  005cf	de e9		 fsubp	 ST(1), ST(0)
  005d1	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  005d4	8b 4d fc	 mov	 ecx, DWORD PTR _x_3$[ebp]
  005d7	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 377  :             x_3[ j+1 ]  =  (t2im - t1im )*ww[ it+1 ]  +
; 378  :                            (t2re - t1re )*ww[ it   ];

  005da	d9 45 ec	 fld	 DWORD PTR _t2im$[ebp]
  005dd	d8 65 c4	 fsub	 DWORD PTR _t1im$[ebp]
  005e0	8b 55 f4	 mov	 edx, DWORD PTR _it$[ebp]
  005e3	8b 45 ac	 mov	 eax, DWORD PTR _ww$[ebp]
  005e6	d8 4c 90 04	 fmul	 DWORD PTR [eax+edx*4+4]
  005ea	d9 45 a8	 fld	 DWORD PTR _t2re$[ebp]
  005ed	d8 65 cc	 fsub	 DWORD PTR _t1re$[ebp]
  005f0	8b 4d f4	 mov	 ecx, DWORD PTR _it$[ebp]
  005f3	8b 55 ac	 mov	 edx, DWORD PTR _ww$[ebp]
  005f6	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  005f9	de c1		 faddp	 ST(1), ST(0)
  005fb	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  005fe	8b 4d fc	 mov	 ecx, DWORD PTR _x_3$[ebp]
  00601	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 379  :             x_4[ j   ]  =  (t2re + t1re )*ww[ it+3 ]  -
; 380  :                            (t2im + t1im )*ww[ it+2 ];

  00605	d9 45 a8	 fld	 DWORD PTR _t2re$[ebp]
  00608	d8 45 cc	 fadd	 DWORD PTR _t1re$[ebp]
  0060b	8b 55 f4	 mov	 edx, DWORD PTR _it$[ebp]
  0060e	8b 45 ac	 mov	 eax, DWORD PTR _ww$[ebp]
  00611	d8 4c 90 0c	 fmul	 DWORD PTR [eax+edx*4+12]
  00615	d9 45 ec	 fld	 DWORD PTR _t2im$[ebp]
  00618	d8 45 c4	 fadd	 DWORD PTR _t1im$[ebp]
  0061b	8b 4d f4	 mov	 ecx, DWORD PTR _it$[ebp]
  0061e	8b 55 ac	 mov	 edx, DWORD PTR _ww$[ebp]
  00621	d8 4c 8a 08	 fmul	 DWORD PTR [edx+ecx*4+8]
  00625	de e9		 fsubp	 ST(1), ST(0)
  00627	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  0062a	8b 4d e8	 mov	 ecx, DWORD PTR _x_4$[ebp]
  0062d	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 381  :             x_4[ j+1 ]  =  (t2im + t1im )*ww[ it+3 ]  +
; 382  :                            (t2re + t1re )*ww[ it+2 ];

  00630	d9 45 ec	 fld	 DWORD PTR _t2im$[ebp]
  00633	d8 45 c4	 fadd	 DWORD PTR _t1im$[ebp]
  00636	8b 55 f4	 mov	 edx, DWORD PTR _it$[ebp]
  00639	8b 45 ac	 mov	 eax, DWORD PTR _ww$[ebp]
  0063c	d8 4c 90 0c	 fmul	 DWORD PTR [eax+edx*4+12]
  00640	d9 45 a8	 fld	 DWORD PTR _t2re$[ebp]
  00643	d8 45 cc	 fadd	 DWORD PTR _t1re$[ebp]
  00646	8b 4d f4	 mov	 ecx, DWORD PTR _it$[ebp]
  00649	8b 55 ac	 mov	 edx, DWORD PTR _ww$[ebp]
  0064c	d8 4c 8a 08	 fmul	 DWORD PTR [edx+ecx*4+8]
  00650	de c1		 faddp	 ST(1), ST(0)
  00652	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00655	8b 4d e8	 mov	 ecx, DWORD PTR _x_4$[ebp]
  00658	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 383  :          }

  0065c	e9 67 fe ff ff	 jmp	 $L1219
$L1220:

; 384  : 
; 385  :       }  /*  Loop  i1  end  */

  00661	e9 37 fa ff ff	 jmp	 $L1209
$L1210:

; 386  : 
; 387  :       /* control */
; 388  :       is = (id << 1) - n2;

  00666	8b 55 f0	 mov	 edx, DWORD PTR _id$[ebp]
  00669	d1 e2		 shl	 edx, 1
  0066b	2b 55 b0	 sub	 edx, DWORD PTR _n2$[ebp]
  0066e	89 55 d8	 mov	 DWORD PTR _is$[ebp], edx

; 389  :       id =  id << 2 ;

  00671	8b 45 f0	 mov	 eax, DWORD PTR _id$[ebp]
  00674	c1 e0 02	 shl	 eax, 2
  00677	89 45 f0	 mov	 DWORD PTR _id$[ebp], eax

; 390  :       if ( is < nn ) goto m10;

  0067a	8b 4d d8	 mov	 ecx, DWORD PTR _is$[ebp]
  0067d	3b 4d d0	 cmp	 ecx, DWORD PTR _nn$[ebp]
  00680	7d 05		 jge	 SHORT $L1221
  00682	e9 0e fa ff ff	 jmp	 $m10$1207
$L1221:

; 391  : 
; 392  :       its = its << 1;

  00687	8b 55 b4	 mov	 edx, DWORD PTR _its$[ebp]
  0068a	d1 e2		 shl	 edx, 1
  0068c	89 55 b4	 mov	 DWORD PTR _its$[ebp], edx

; 393  : 
; 394  :    }  /* --------  Main Loop  k  end  ----------- */

  0068f	e9 a0 f9 ff ff	 jmp	 $L1205
$L1206:

; 395  : 
; 396  :    is  = 0;

  00694	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _is$[ebp], 0

; 397  :    id  = n2;

  0069b	8b 45 b0	 mov	 eax, DWORD PTR _n2$[ebp]
  0069e	89 45 f0	 mov	 DWORD PTR _id$[ebp], eax

; 398  :    n2  = n2 >> 1;

  006a1	8b 4d b0	 mov	 ecx, DWORD PTR _n2$[ebp]
  006a4	d1 f9		 sar	 ecx, 1
  006a6	89 4d b0	 mov	 DWORD PTR _n2$[ebp], ecx

; 399  : 
; 400  :    x_2 = x_1 + 4;

  006a9	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  006ac	83 c2 10	 add	 edx, 16			; 00000010H
  006af	89 55 e0	 mov	 DWORD PTR _x_2$[ebp], edx

; 401  :    x_3 = x_2 + 4;

  006b2	8b 45 e0	 mov	 eax, DWORD PTR _x_2$[ebp]
  006b5	83 c0 10	 add	 eax, 16			; 00000010H
  006b8	89 45 fc	 mov	 DWORD PTR _x_3$[ebp], eax

; 402  :    x_4 = x_3 + 4;

  006bb	8b 4d fc	 mov	 ecx, DWORD PTR _x_3$[ebp]
  006be	83 c1 10	 add	 ecx, 16			; 00000010H
  006c1	89 4d e8	 mov	 DWORD PTR _x_4$[ebp], ecx
$m20$1222:

; 403  : 
; 404  :    m20:
; 405  :    for ( i1 = is, j = is + 2 ; i1 < nn ; i1+=id, j+=id ) {

  006c4	8b 55 d8	 mov	 edx, DWORD PTR _is$[ebp]
  006c7	89 55 dc	 mov	 DWORD PTR _i1$[ebp], edx
  006ca	8b 45 d8	 mov	 eax, DWORD PTR _is$[ebp]
  006cd	83 c0 02	 add	 eax, 2
  006d0	89 45 a4	 mov	 DWORD PTR _j$[ebp], eax
  006d3	eb 12		 jmp	 SHORT $L1223
$L1224:
  006d5	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  006d8	03 4d f0	 add	 ecx, DWORD PTR _id$[ebp]
  006db	89 4d dc	 mov	 DWORD PTR _i1$[ebp], ecx
  006de	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  006e1	03 55 f0	 add	 edx, DWORD PTR _id$[ebp]
  006e4	89 55 a4	 mov	 DWORD PTR _j$[ebp], edx
$L1223:
  006e7	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  006ea	3b 45 d0	 cmp	 eax, DWORD PTR _nn$[ebp]
  006ed	0f 8d 4d 02 00
	00		 jge	 $L1225

; 406  :       /* ............... Zero butterfly .............. */
; 407  :       t1re         =  x_1[ i1   ]  -  x_3[ i1   ];

  006f3	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  006f6	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  006f9	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  006fc	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  006ff	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00702	d8 24 86	 fsub	 DWORD PTR [esi+eax*4]
  00705	d9 5d cc	 fstp	 DWORD PTR _t1re$[ebp]

; 408  :       t1im         =  x_1[ i1+1 ]  -  x_3[ i1+1 ];

  00708	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  0070b	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  0070e	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00711	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  00714	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  00718	d8 64 86 04	 fsub	 DWORD PTR [esi+eax*4+4]
  0071c	d9 5d c4	 fstp	 DWORD PTR _t1im$[ebp]

; 409  :       x_1[ i1   ]  =  x_1[ i1   ]  +  x_3[ i1   ];

  0071f	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00722	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00725	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00728	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  0072b	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  0072e	d8 04 86	 fadd	 DWORD PTR [esi+eax*4]
  00731	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00734	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00737	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 410  :       x_1[ i1+1 ]  =  x_1[ i1+1 ]  +  x_3[ i1+1 ];

  0073a	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  0073d	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00740	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00743	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  00746	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  0074a	d8 44 96 04	 fadd	 DWORD PTR [esi+edx*4+4]
  0074e	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00751	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00754	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 411  :       t2re         =  x_2[ i1   ]  -  x_4[ i1   ];

  00758	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  0075b	8b 45 e0	 mov	 eax, DWORD PTR _x_2$[ebp]
  0075e	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00761	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  00764	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00767	d8 24 8e	 fsub	 DWORD PTR [esi+ecx*4]
  0076a	d9 5d a8	 fstp	 DWORD PTR _t2re$[ebp]

; 412  :       t2im         =  x_2[ i1+1 ]  -  x_4[ i1+1 ];

  0076d	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00770	8b 45 e0	 mov	 eax, DWORD PTR _x_2$[ebp]
  00773	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00776	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  00779	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  0077d	d8 64 8e 04	 fsub	 DWORD PTR [esi+ecx*4+4]
  00781	d9 5d ec	 fstp	 DWORD PTR _t2im$[ebp]

; 413  :       x_2[ i1   ]  =  x_2[ i1   ]  +  x_4[ i1   ];

  00784	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00787	8b 45 e0	 mov	 eax, DWORD PTR _x_2$[ebp]
  0078a	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  0078d	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  00790	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00793	d8 04 8e	 fadd	 DWORD PTR [esi+ecx*4]
  00796	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00799	8b 45 e0	 mov	 eax, DWORD PTR _x_2$[ebp]
  0079c	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 414  :       x_2[ i1+1 ]  =  x_2[ i1+1 ]  +  x_4[ i1+1 ];

  0079f	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  007a2	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  007a5	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  007a8	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  007ab	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  007af	d8 44 86 04	 fadd	 DWORD PTR [esi+eax*4+4]
  007b3	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  007b6	8b 55 e0	 mov	 edx, DWORD PTR _x_2$[ebp]
  007b9	d9 5c 8a 04	 fstp	 DWORD PTR [edx+ecx*4+4]

; 415  :       x_3[ i1   ]  =  t1re  +  t2im;

  007bd	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  007c0	d8 45 ec	 fadd	 DWORD PTR _t2im$[ebp]
  007c3	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  007c6	8b 4d fc	 mov	 ecx, DWORD PTR _x_3$[ebp]
  007c9	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 416  :       x_3[ i1+1 ]  =  t1im  -  t2re;

  007cc	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  007cf	d8 65 a8	 fsub	 DWORD PTR _t2re$[ebp]
  007d2	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  007d5	8b 45 fc	 mov	 eax, DWORD PTR _x_3$[ebp]
  007d8	d9 5c 90 04	 fstp	 DWORD PTR [eax+edx*4+4]

; 417  :       x_4[ i1   ]  =  t1re  -  t2im;

  007dc	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  007df	d8 65 ec	 fsub	 DWORD PTR _t2im$[ebp]
  007e2	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  007e5	8b 55 e8	 mov	 edx, DWORD PTR _x_4$[ebp]
  007e8	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 418  :       x_4[ i1+1 ]  =  t1im  +  t2re;

  007eb	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  007ee	d8 45 a8	 fadd	 DWORD PTR _t2re$[ebp]
  007f1	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  007f4	8b 4d e8	 mov	 ecx, DWORD PTR _x_4$[ebp]
  007f7	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 419  :       /* ............. N/8 butterfly ................. */
; 420  :       t1re         =  x_1[ j   ]  -  x_3[ j   ];

  007fb	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  007fe	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00801	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00804	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  00807	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  0080a	d8 24 8e	 fsub	 DWORD PTR [esi+ecx*4]
  0080d	d9 5d cc	 fstp	 DWORD PTR _t1re$[ebp]

; 421  :       t1im         =  x_1[ j+1 ]  -  x_3[ j+1 ];

  00810	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00813	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00816	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00819	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  0081c	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  00820	d8 64 8e 04	 fsub	 DWORD PTR [esi+ecx*4+4]
  00824	d9 5d c4	 fstp	 DWORD PTR _t1im$[ebp]

; 422  :       x_1[ j   ]   =  x_1[ j   ]  +  x_3[ j   ];

  00827	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  0082a	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  0082d	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00830	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  00833	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00836	d8 04 8e	 fadd	 DWORD PTR [esi+ecx*4]
  00839	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  0083c	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  0083f	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 423  :       x_1[ j+1 ]   =  x_1[ j+1 ]  +  x_3[ j+1 ];

  00842	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00845	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00848	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  0084b	8b 75 fc	 mov	 esi, DWORD PTR _x_3$[ebp]
  0084e	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  00852	d8 44 86 04	 fadd	 DWORD PTR [esi+eax*4+4]
  00856	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00859	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  0085c	d9 5c 8a 04	 fstp	 DWORD PTR [edx+ecx*4+4]

; 424  :       t2re         =  x_2[ j   ]  -  x_4[ j   ];

  00860	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00863	8b 4d e0	 mov	 ecx, DWORD PTR _x_2$[ebp]
  00866	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00869	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  0086c	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  0086f	d8 24 96	 fsub	 DWORD PTR [esi+edx*4]
  00872	d9 5d a8	 fstp	 DWORD PTR _t2re$[ebp]

; 425  :       t2im         =  x_2[ j+1 ]  -  x_4[ j+1 ];

  00875	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00878	8b 4d e0	 mov	 ecx, DWORD PTR _x_2$[ebp]
  0087b	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  0087e	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  00881	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  00885	d8 64 96 04	 fsub	 DWORD PTR [esi+edx*4+4]
  00889	d9 5d ec	 fstp	 DWORD PTR _t2im$[ebp]

; 426  :       x_2[ j   ]   =  x_2[ j   ]  +  x_4[ j   ];

  0088c	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  0088f	8b 4d e0	 mov	 ecx, DWORD PTR _x_2$[ebp]
  00892	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00895	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  00898	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  0089b	d8 04 96	 fadd	 DWORD PTR [esi+edx*4]
  0089e	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  008a1	8b 4d e0	 mov	 ecx, DWORD PTR _x_2$[ebp]
  008a4	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 427  :       x_2[ j+1 ]   =  x_2[ j+1 ]  +  x_4[ j+1 ];

  008a7	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  008aa	8b 45 e0	 mov	 eax, DWORD PTR _x_2$[ebp]
  008ad	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  008b0	8b 75 e8	 mov	 esi, DWORD PTR _x_4$[ebp]
  008b3	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  008b7	d8 44 8e 04	 fadd	 DWORD PTR [esi+ecx*4+4]
  008bb	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  008be	8b 45 e0	 mov	 eax, DWORD PTR _x_2$[ebp]
  008c1	d9 5c 90 04	 fstp	 DWORD PTR [eax+edx*4+4]

; 428  :       x_3[ j   ]   =  V707107*( (t1re + t2im) + (t1im - t2re) );

  008c5	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  008c8	d8 45 ec	 fadd	 DWORD PTR _t2im$[ebp]
  008cb	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  008ce	d8 65 a8	 fsub	 DWORD PTR _t2re$[ebp]
  008d1	de c1		 faddp	 ST(1), ST(0)
  008d3	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f7
  008d9	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  008dc	8b 55 fc	 mov	 edx, DWORD PTR _x_3$[ebp]
  008df	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 429  :       x_3[ j+1 ]   =  V707107*( (t1im - t2re) - (t1re + t2im) );

  008e2	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  008e5	d8 65 a8	 fsub	 DWORD PTR _t2re$[ebp]
  008e8	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  008eb	d8 45 ec	 fadd	 DWORD PTR _t2im$[ebp]
  008ee	de e9		 fsubp	 ST(1), ST(0)
  008f0	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f7
  008f6	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  008f9	8b 4d fc	 mov	 ecx, DWORD PTR _x_3$[ebp]
  008fc	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 430  :       x_4[ j   ]   = -V707107*( (t1re - t2im) - (t1im + t2re) );

  00900	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00903	d8 65 ec	 fsub	 DWORD PTR _t2im$[ebp]
  00906	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00909	d8 45 a8	 fadd	 DWORD PTR _t2re$[ebp]
  0090c	de e9		 fsubp	 ST(1), ST(0)
  0090e	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@bf3504f7
  00914	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00917	8b 45 e8	 mov	 eax, DWORD PTR _x_4$[ebp]
  0091a	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 431  :       x_4[ j+1 ]   = -V707107*( (t1im + t2re) + (t1re - t2im) );

  0091d	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00920	d8 45 a8	 fadd	 DWORD PTR _t2re$[ebp]
  00923	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00926	d8 65 ec	 fsub	 DWORD PTR _t2im$[ebp]
  00929	de c1		 faddp	 ST(1), ST(0)
  0092b	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@bf3504f7
  00931	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00934	8b 55 e8	 mov	 edx, DWORD PTR _x_4$[ebp]
  00937	d9 5c 8a 04	 fstp	 DWORD PTR [edx+ecx*4+4]

; 432  :    }

  0093b	e9 95 fd ff ff	 jmp	 $L1224
$L1225:

; 433  :    is = ( id << 1 ) - n2;

  00940	8b 45 f0	 mov	 eax, DWORD PTR _id$[ebp]
  00943	d1 e0		 shl	 eax, 1
  00945	2b 45 b0	 sub	 eax, DWORD PTR _n2$[ebp]
  00948	89 45 d8	 mov	 DWORD PTR _is$[ebp], eax

; 434  :    id =  id << 2 ;

  0094b	8b 4d f0	 mov	 ecx, DWORD PTR _id$[ebp]
  0094e	c1 e1 02	 shl	 ecx, 2
  00951	89 4d f0	 mov	 DWORD PTR _id$[ebp], ecx

; 435  :    if ( is < nn ) goto m20;

  00954	8b 55 d8	 mov	 edx, DWORD PTR _is$[ebp]
  00957	3b 55 d0	 cmp	 edx, DWORD PTR _nn$[ebp]
  0095a	7d 05		 jge	 SHORT $L1230
  0095c	e9 63 fd ff ff	 jmp	 $m20$1222
$L1230:

; 436  : 
; 437  :    if ( n == 8 ) {

  00961	83 7d 0c 08	 cmp	 DWORD PTR _n$[ebp], 8
  00965	75 13		 jne	 SHORT $L1231

; 438  :       is =  0;

  00967	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _is$[ebp], 0

; 439  :       id = 16;

  0096e	c7 45 f0 10 00
	00 00		 mov	 DWORD PTR _id$[ebp], 16	; 00000010H

; 440  :       goto m30;

  00975	e9 88 02 00 00	 jmp	 $m30$1232
$L1231:

; 441  :    }
; 442  : 
; 443  :    for ( i1 = 0 ; i1 < nn ; ) {

  0097a	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i1$[ebp], 0
$L1234:
  00981	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00984	3b 45 d0	 cmp	 eax, DWORD PTR _nn$[ebp]
  00987	0f 8d 67 02 00
	00		 jge	 $L1235

; 444  : 
; 445  :       t1re          =           x_1[ i1+ 8 ];

  0098d	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00990	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00993	8b 44 8a 20	 mov	 eax, DWORD PTR [edx+ecx*4+32]
  00997	89 45 cc	 mov	 DWORD PTR _t1re$[ebp], eax

; 446  :       t1im          =           x_1[ i1+ 9 ];

  0099a	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  0099d	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  009a0	8b 44 8a 24	 mov	 eax, DWORD PTR [edx+ecx*4+36]
  009a4	89 45 c4	 mov	 DWORD PTR _t1im$[ebp], eax

; 447  :       x_1[ i1+ 8 ]  =  t1re  +  x_1[ i1+10 ];

  009a7	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  009aa	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  009ad	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  009b0	d8 44 8a 28	 fadd	 DWORD PTR [edx+ecx*4+40]
  009b4	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  009b7	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  009ba	d9 5c 81 20	 fstp	 DWORD PTR [ecx+eax*4+32]

; 448  :       x_1[ i1+ 9 ]  =  t1im  +  x_1[ i1+11 ];

  009be	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  009c1	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  009c4	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  009c7	d8 44 90 2c	 fadd	 DWORD PTR [eax+edx*4+44]
  009cb	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  009ce	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  009d1	d9 5c 8a 24	 fstp	 DWORD PTR [edx+ecx*4+36]

; 449  :       x_1[ i1+10 ]  =  t1re  -  x_1[ i1+10 ];

  009d5	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  009d8	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  009db	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  009de	d8 64 81 28	 fsub	 DWORD PTR [ecx+eax*4+40]
  009e2	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  009e5	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  009e8	d9 5c 90 28	 fstp	 DWORD PTR [eax+edx*4+40]

; 450  :       x_1[ i1+11 ]  =  t1im  -  x_1[ i1+11 ];

  009ec	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  009ef	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  009f2	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  009f5	d8 64 8a 2c	 fsub	 DWORD PTR [edx+ecx*4+44]
  009f9	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  009fc	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  009ff	d9 5c 81 2c	 fstp	 DWORD PTR [ecx+eax*4+44]

; 451  :       t2re          =           x_1[ i1+12 ];

  00a03	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00a06	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00a09	8b 4c 90 30	 mov	 ecx, DWORD PTR [eax+edx*4+48]
  00a0d	89 4d a8	 mov	 DWORD PTR _t2re$[ebp], ecx

; 452  :       t2im          =           x_1[ i1+13 ];

  00a10	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00a13	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00a16	8b 4c 90 34	 mov	 ecx, DWORD PTR [eax+edx*4+52]
  00a1a	89 4d ec	 mov	 DWORD PTR _t2im$[ebp], ecx

; 453  :       x_1[ i1+12 ]  =  t2re  +  x_1[ i1+14 ];

  00a1d	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00a20	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00a23	d9 45 a8	 fld	 DWORD PTR _t2re$[ebp]
  00a26	d8 44 90 38	 fadd	 DWORD PTR [eax+edx*4+56]
  00a2a	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00a2d	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00a30	d9 5c 8a 30	 fstp	 DWORD PTR [edx+ecx*4+48]

; 454  :       x_1[ i1+13 ]  =  t2im  +  x_1[ i1+15 ];

  00a34	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00a37	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00a3a	d9 45 ec	 fld	 DWORD PTR _t2im$[ebp]
  00a3d	d8 44 81 3c	 fadd	 DWORD PTR [ecx+eax*4+60]
  00a41	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00a44	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00a47	d9 5c 90 34	 fstp	 DWORD PTR [eax+edx*4+52]

; 455  :       x_1[ i1+14 ]  =  t2re  -  x_1[ i1+14 ];

  00a4b	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00a4e	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00a51	d9 45 a8	 fld	 DWORD PTR _t2re$[ebp]
  00a54	d8 64 8a 38	 fsub	 DWORD PTR [edx+ecx*4+56]
  00a58	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00a5b	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00a5e	d9 5c 81 38	 fstp	 DWORD PTR [ecx+eax*4+56]

; 456  :       x_1[ i1+15 ]  =  t2im  -  x_1[ i1+15 ];

  00a62	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00a65	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00a68	d9 45 ec	 fld	 DWORD PTR _t2im$[ebp]
  00a6b	d8 64 90 3c	 fsub	 DWORD PTR [eax+edx*4+60]
  00a6f	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00a72	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00a75	d9 5c 8a 3c	 fstp	 DWORD PTR [edx+ecx*4+60]

; 457  : 
; 458  :       j  = i1;

  00a79	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00a7c	89 45 a4	 mov	 DWORD PTR _j$[ebp], eax

; 459  :       i1 = i1 + 32;

  00a7f	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00a82	83 c1 20	 add	 ecx, 32			; 00000020H
  00a85	89 4d dc	 mov	 DWORD PTR _i1$[ebp], ecx

; 460  :       for ( ; j < i1 ; j+=16 ) {

  00a88	eb 09		 jmp	 SHORT $L1236
$L1237:
  00a8a	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00a8d	83 c2 10	 add	 edx, 16			; 00000010H
  00a90	89 55 a4	 mov	 DWORD PTR _j$[ebp], edx
$L1236:
  00a93	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00a96	3b 45 dc	 cmp	 eax, DWORD PTR _i1$[ebp]
  00a99	0f 8d 50 01 00
	00		 jge	 $L1238

; 461  :          t1re        =            x_1[ j   ]  -  x_1[ j+4 ];

  00a9f	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00aa2	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00aa5	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00aa8	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00aab	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00aae	d8 64 86 10	 fsub	 DWORD PTR [esi+eax*4+16]
  00ab2	d9 5d cc	 fstp	 DWORD PTR _t1re$[ebp]

; 462  :          t1im        =            x_1[ j+1 ]  -  x_1[ j+5 ];

  00ab5	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00ab8	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00abb	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00abe	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00ac1	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  00ac5	d8 64 86 14	 fsub	 DWORD PTR [esi+eax*4+20]
  00ac9	d9 5d c4	 fstp	 DWORD PTR _t1im$[ebp]

; 463  :          t3re        =            x_1[ j   ]  +  x_1[ j+4 ];

  00acc	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00acf	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00ad2	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00ad5	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00ad8	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00adb	d8 44 86 10	 fadd	 DWORD PTR [esi+eax*4+16]
  00adf	d9 5d f8	 fstp	 DWORD PTR _t3re$[ebp]

; 464  :          t3im        =            x_1[ j+1 ]  +  x_1[ j+5 ];

  00ae2	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00ae5	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00ae8	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00aeb	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00aee	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  00af2	d8 44 86 14	 fadd	 DWORD PTR [esi+eax*4+20]
  00af6	d9 5d e4	 fstp	 DWORD PTR _t3im$[ebp]

; 465  :          x_1[ j   ]  =  t3re  +  (x_1[ j+2 ]  +  x_1[ j+6 ]);

  00af9	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00afc	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00aff	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00b02	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00b05	d9 44 8a 08	 fld	 DWORD PTR [edx+ecx*4+8]
  00b09	d8 44 86 18	 fadd	 DWORD PTR [esi+eax*4+24]
  00b0d	d8 45 f8	 fadd	 DWORD PTR _t3re$[ebp]
  00b10	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00b13	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00b16	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 466  :          x_1[ j+1 ]  =  t3im  +  (x_1[ j+3 ]  +  x_1[ j+7 ]);

  00b19	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00b1c	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00b1f	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00b22	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00b25	d9 44 81 0c	 fld	 DWORD PTR [ecx+eax*4+12]
  00b29	d8 44 96 1c	 fadd	 DWORD PTR [esi+edx*4+28]
  00b2d	d8 45 e4	 fadd	 DWORD PTR _t3im$[ebp]
  00b30	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00b33	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00b36	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 467  :          t2re        =            x_1[ j+2 ]  -  x_1[ j+6 ];

  00b3a	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00b3d	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00b40	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00b43	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00b46	d9 44 90 08	 fld	 DWORD PTR [eax+edx*4+8]
  00b4a	d8 64 8e 18	 fsub	 DWORD PTR [esi+ecx*4+24]
  00b4e	d9 5d a8	 fstp	 DWORD PTR _t2re$[ebp]

; 468  :          t2im        =            x_1[ j+3 ]  -  x_1[ j+7 ];

  00b51	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00b54	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00b57	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00b5a	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00b5d	d9 44 90 0c	 fld	 DWORD PTR [eax+edx*4+12]
  00b61	d8 64 8e 1c	 fsub	 DWORD PTR [esi+ecx*4+28]
  00b65	d9 5d ec	 fstp	 DWORD PTR _t2im$[ebp]

; 469  :          x_1[ j+2 ]  =  t3re  -  (x_1[ j+2 ]  +  x_1[ j+6 ]);

  00b68	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00b6b	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00b6e	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00b71	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00b74	d9 44 90 08	 fld	 DWORD PTR [eax+edx*4+8]
  00b78	d8 44 8e 18	 fadd	 DWORD PTR [esi+ecx*4+24]
  00b7c	d8 6d f8	 fsubr	 DWORD PTR _t3re$[ebp]
  00b7f	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00b82	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00b85	d9 5c 90 08	 fstp	 DWORD PTR [eax+edx*4+8]

; 470  :          x_1[ j+3 ]  =  t3im  -  (x_1[ j+3 ]  +  x_1[ j+7 ]);

  00b89	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00b8c	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00b8f	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00b92	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00b95	d9 44 8a 0c	 fld	 DWORD PTR [edx+ecx*4+12]
  00b99	d8 44 86 1c	 fadd	 DWORD PTR [esi+eax*4+28]
  00b9d	d8 6d e4	 fsubr	 DWORD PTR _t3im$[ebp]
  00ba0	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00ba3	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00ba6	d9 5c 8a 0c	 fstp	 DWORD PTR [edx+ecx*4+12]

; 471  :          x_1[ j+4 ]  =  t1re  +  t2im;

  00baa	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00bad	d8 45 ec	 fadd	 DWORD PTR _t2im$[ebp]
  00bb0	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00bb3	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00bb6	d9 5c 81 10	 fstp	 DWORD PTR [ecx+eax*4+16]

; 472  :          x_1[ j+5 ]  =  t1im  -  t2re;

  00bba	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00bbd	d8 65 a8	 fsub	 DWORD PTR _t2re$[ebp]
  00bc0	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00bc3	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00bc6	d9 5c 90 14	 fstp	 DWORD PTR [eax+edx*4+20]

; 473  :          x_1[ j+6 ]  =  t1re  -  t2im;

  00bca	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00bcd	d8 65 ec	 fsub	 DWORD PTR _t2im$[ebp]
  00bd0	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00bd3	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00bd6	d9 5c 8a 18	 fstp	 DWORD PTR [edx+ecx*4+24]

; 474  :          x_1[ j+7 ]  =  t1im  +  t2re;

  00bda	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00bdd	d8 45 a8	 fadd	 DWORD PTR _t2re$[ebp]
  00be0	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  00be3	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00be6	d9 5c 81 1c	 fstp	 DWORD PTR [ecx+eax*4+28]

; 475  :       }

  00bea	e9 9b fe ff ff	 jmp	 $L1237
$L1238:

; 476  :    }

  00bef	e9 8d fd ff ff	 jmp	 $L1234
$L1235:

; 477  : 
; 478  :    is = 24;

  00bf4	c7 45 d8 18 00
	00 00		 mov	 DWORD PTR _is$[ebp], 24	; 00000018H

; 479  :    id = 64;

  00bfb	c7 45 f0 40 00
	00 00		 mov	 DWORD PTR _id$[ebp], 64	; 00000040H
$m30$1232:

; 480  :    m30:
; 481  :    for ( i1 = is ; i1 < nn ; i1+=id ) {

  00c02	8b 55 d8	 mov	 edx, DWORD PTR _is$[ebp]
  00c05	89 55 dc	 mov	 DWORD PTR _i1$[ebp], edx
  00c08	eb 09		 jmp	 SHORT $L1239
$L1240:
  00c0a	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00c0d	03 45 f0	 add	 eax, DWORD PTR _id$[ebp]
  00c10	89 45 dc	 mov	 DWORD PTR _i1$[ebp], eax
$L1239:
  00c13	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00c16	3b 4d d0	 cmp	 ecx, DWORD PTR _nn$[ebp]
  00c19	0f 8d 50 01 00
	00		 jge	 $L1241

; 482  :       t1re         =            x_1[ i1   ]  -  x_1[ i1+4 ];

  00c1f	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00c22	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00c25	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00c28	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00c2b	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00c2e	d8 64 8e 10	 fsub	 DWORD PTR [esi+ecx*4+16]
  00c32	d9 5d cc	 fstp	 DWORD PTR _t1re$[ebp]

; 483  :       t1im         =            x_1[ i1+1 ]  -  x_1[ i1+5 ];

  00c35	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00c38	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00c3b	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00c3e	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00c41	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  00c45	d8 64 8e 14	 fsub	 DWORD PTR [esi+ecx*4+20]
  00c49	d9 5d c4	 fstp	 DWORD PTR _t1im$[ebp]

; 484  :       t2re         =            x_1[ i1+2 ]  -  x_1[ i1+6 ];

  00c4c	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00c4f	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00c52	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00c55	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00c58	d9 44 90 08	 fld	 DWORD PTR [eax+edx*4+8]
  00c5c	d8 64 8e 18	 fsub	 DWORD PTR [esi+ecx*4+24]
  00c60	d9 5d a8	 fstp	 DWORD PTR _t2re$[ebp]

; 485  :       t2im         =            x_1[ i1+3 ]  -  x_1[ i1+7 ];

  00c63	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00c66	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00c69	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00c6c	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00c6f	d9 44 90 0c	 fld	 DWORD PTR [eax+edx*4+12]
  00c73	d8 64 8e 1c	 fsub	 DWORD PTR [esi+ecx*4+28]
  00c77	d9 5d ec	 fstp	 DWORD PTR _t2im$[ebp]

; 486  :       t3re         =            x_1[ i1   ]  +  x_1[ i1+4 ];

  00c7a	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00c7d	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00c80	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00c83	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00c86	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00c89	d8 44 8e 10	 fadd	 DWORD PTR [esi+ecx*4+16]
  00c8d	d9 5d f8	 fstp	 DWORD PTR _t3re$[ebp]

; 487  :       t3im         =            x_1[ i1+1 ]  +  x_1[ i1+5 ];

  00c90	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00c93	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00c96	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00c99	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00c9c	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  00ca0	d8 44 8e 14	 fadd	 DWORD PTR [esi+ecx*4+20]
  00ca4	d9 5d e4	 fstp	 DWORD PTR _t3im$[ebp]

; 488  :       x_1[ i1   ]  =  t3re  +  (x_1[ i1+2 ]  +  x_1[ i1+6 ]);

  00ca7	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00caa	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00cad	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00cb0	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00cb3	d9 44 90 08	 fld	 DWORD PTR [eax+edx*4+8]
  00cb7	d8 44 8e 18	 fadd	 DWORD PTR [esi+ecx*4+24]
  00cbb	d8 45 f8	 fadd	 DWORD PTR _t3re$[ebp]
  00cbe	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00cc1	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00cc4	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 489  :       x_1[ i1+1 ]  =  t3im  +  (x_1[ i1+3 ]  +  x_1[ i1+7 ]);

  00cc7	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00cca	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00ccd	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00cd0	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00cd3	d9 44 8a 0c	 fld	 DWORD PTR [edx+ecx*4+12]
  00cd7	d8 44 86 1c	 fadd	 DWORD PTR [esi+eax*4+28]
  00cdb	d8 45 e4	 fadd	 DWORD PTR _t3im$[ebp]
  00cde	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00ce1	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00ce4	d9 5c 8a 04	 fstp	 DWORD PTR [edx+ecx*4+4]

; 490  :       x_1[ i1+2 ]  =  t3re  -  (x_1[ i1+2 ]  +  x_1[ i1+6 ]);

  00ce8	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00ceb	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00cee	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00cf1	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00cf4	d9 44 81 08	 fld	 DWORD PTR [ecx+eax*4+8]
  00cf8	d8 44 96 18	 fadd	 DWORD PTR [esi+edx*4+24]
  00cfc	d8 6d f8	 fsubr	 DWORD PTR _t3re$[ebp]
  00cff	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00d02	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00d05	d9 5c 81 08	 fstp	 DWORD PTR [ecx+eax*4+8]

; 491  :       x_1[ i1+3 ]  =  t3im  -  (x_1[ i1+3 ]  +  x_1[ i1+7 ]);

  00d09	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00d0c	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00d0f	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00d12	8b 75 c8	 mov	 esi, DWORD PTR _x_1$[ebp]
  00d15	d9 44 90 0c	 fld	 DWORD PTR [eax+edx*4+12]
  00d19	d8 44 8e 1c	 fadd	 DWORD PTR [esi+ecx*4+28]
  00d1d	d8 6d e4	 fsubr	 DWORD PTR _t3im$[ebp]
  00d20	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00d23	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00d26	d9 5c 90 0c	 fstp	 DWORD PTR [eax+edx*4+12]

; 492  :       x_1[ i1+4 ]  =  t1re  +  t2im;

  00d2a	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00d2d	d8 45 ec	 fadd	 DWORD PTR _t2im$[ebp]
  00d30	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00d33	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00d36	d9 5c 8a 10	 fstp	 DWORD PTR [edx+ecx*4+16]

; 493  :       x_1[ i1+5 ]  =  t1im  -  t2re;

  00d3a	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00d3d	d8 65 a8	 fsub	 DWORD PTR _t2re$[ebp]
  00d40	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00d43	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00d46	d9 5c 81 14	 fstp	 DWORD PTR [ecx+eax*4+20]

; 494  :       x_1[ i1+6 ]  =  t1re  -  t2im;

  00d4a	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00d4d	d8 65 ec	 fsub	 DWORD PTR _t2im$[ebp]
  00d50	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00d53	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00d56	d9 5c 90 18	 fstp	 DWORD PTR [eax+edx*4+24]

; 495  :       x_1[ i1+7 ]  =  t1im  +  t2re;

  00d5a	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00d5d	d8 45 a8	 fadd	 DWORD PTR _t2re$[ebp]
  00d60	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00d63	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00d66	d9 5c 8a 1c	 fstp	 DWORD PTR [edx+ecx*4+28]

; 496  :    }

  00d6a	e9 9b fe ff ff	 jmp	 $L1240
$L1241:

; 497  :    is = (id << 1) - 8;

  00d6f	8b 45 f0	 mov	 eax, DWORD PTR _id$[ebp]
  00d72	8d 4c 00 f8	 lea	 ecx, DWORD PTR [eax+eax-8]
  00d76	89 4d d8	 mov	 DWORD PTR _is$[ebp], ecx

; 498  :    id =  id << 2;

  00d79	8b 55 f0	 mov	 edx, DWORD PTR _id$[ebp]
  00d7c	c1 e2 02	 shl	 edx, 2
  00d7f	89 55 f0	 mov	 DWORD PTR _id$[ebp], edx

; 499  :    if ( is < nn ) goto m30;

  00d82	8b 45 d8	 mov	 eax, DWORD PTR _is$[ebp]
  00d85	3b 45 d0	 cmp	 eax, DWORD PTR _nn$[ebp]
  00d88	7d 05		 jge	 SHORT $L1242
  00d8a	e9 73 fe ff ff	 jmp	 $m30$1232
$L1242:

; 500  : 
; 501  :    if ( n == 8 ) {

  00d8f	83 7d 0c 08	 cmp	 DWORD PTR _n$[ebp], 8
  00d93	0f 85 91 00 00
	00		 jne	 $L1243

; 502  :       for ( i1 = 8 ; i1 < 16 ; i1+=4 ) {

  00d99	c7 45 dc 08 00
	00 00		 mov	 DWORD PTR _i1$[ebp], 8
  00da0	eb 09		 jmp	 SHORT $L1244
$L1245:
  00da2	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00da5	83 c1 04	 add	 ecx, 4
  00da8	89 4d dc	 mov	 DWORD PTR _i1$[ebp], ecx
$L1244:
  00dab	83 7d dc 10	 cmp	 DWORD PTR _i1$[ebp], 16	; 00000010H
  00daf	7d 79		 jge	 SHORT $L1243

; 503  :          t1re         =           x_1[ i1   ];

  00db1	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00db4	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00db7	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00dba	89 4d cc	 mov	 DWORD PTR _t1re$[ebp], ecx

; 504  :          t1im         =           x_1[ i1+1 ];

  00dbd	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00dc0	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00dc3	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  00dc7	89 4d c4	 mov	 DWORD PTR _t1im$[ebp], ecx

; 505  :          x_1[ i1   ]  =  t1re  +  x_1[ i1+2 ];

  00dca	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00dcd	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00dd0	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00dd3	d8 44 90 08	 fadd	 DWORD PTR [eax+edx*4+8]
  00dd7	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00dda	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00ddd	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 506  :          x_1[ i1+1 ]  =  t1im  +  x_1[ i1+3 ];

  00de0	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00de3	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00de6	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00de9	d8 44 81 0c	 fadd	 DWORD PTR [ecx+eax*4+12]
  00ded	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00df0	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00df3	d9 5c 90 04	 fstp	 DWORD PTR [eax+edx*4+4]

; 507  :          x_1[ i1+2 ]  =  t1re  -  x_1[ i1+2 ];

  00df7	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00dfa	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00dfd	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00e00	d8 64 8a 08	 fsub	 DWORD PTR [edx+ecx*4+8]
  00e04	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00e07	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00e0a	d9 5c 81 08	 fstp	 DWORD PTR [ecx+eax*4+8]

; 508  :          x_1[ i1+3 ]  =  t1im  -  x_1[ i1+3 ];

  00e0e	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00e11	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00e14	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00e17	d8 64 90 0c	 fsub	 DWORD PTR [eax+edx*4+12]
  00e1b	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00e1e	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00e21	d9 5c 8a 0c	 fstp	 DWORD PTR [edx+ecx*4+12]

; 509  :       }

  00e25	e9 78 ff ff ff	 jmp	 $L1245
$L1243:

; 510  :    }
; 511  : 
; 512  :    is =  56;

  00e2a	c7 45 d8 38 00
	00 00		 mov	 DWORD PTR _is$[ebp], 56	; 00000038H

; 513  :    id = 128;

  00e31	c7 45 f0 80 00
	00 00		 mov	 DWORD PTR _id$[ebp], 128 ; 00000080H
$m40$1247:

; 514  :    m40:
; 515  :    for ( i1 = is ; i1 < nn ; i1+=id ) {

  00e38	8b 45 d8	 mov	 eax, DWORD PTR _is$[ebp]
  00e3b	89 45 dc	 mov	 DWORD PTR _i1$[ebp], eax
  00e3e	eb 09		 jmp	 SHORT $L1248
$L1249:
  00e40	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00e43	03 4d f0	 add	 ecx, DWORD PTR _id$[ebp]
  00e46	89 4d dc	 mov	 DWORD PTR _i1$[ebp], ecx
$L1248:
  00e49	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00e4c	3b 55 d0	 cmp	 edx, DWORD PTR _nn$[ebp]
  00e4f	0f 8d ef 00 00
	00		 jge	 $L1250

; 516  :       t1re         =           x_1[ i1   ];

  00e55	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00e58	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00e5b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00e5e	89 55 cc	 mov	 DWORD PTR _t1re$[ebp], edx

; 517  :       t1im         =           x_1[ i1+1 ];

  00e61	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00e64	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00e67	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  00e6b	89 55 c4	 mov	 DWORD PTR _t1im$[ebp], edx

; 518  :       x_1[ i1   ]  =  t1re  +  x_1[ i1+2 ];

  00e6e	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00e71	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00e74	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00e77	d8 44 81 08	 fadd	 DWORD PTR [ecx+eax*4+8]
  00e7b	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00e7e	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00e81	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 519  :       x_1[ i1+1 ]  =  t1im  +  x_1[ i1+3 ];

  00e84	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00e87	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00e8a	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00e8d	d8 44 8a 0c	 fadd	 DWORD PTR [edx+ecx*4+12]
  00e91	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00e94	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00e97	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 520  :       x_1[ i1+2 ]  =  t1re  -  x_1[ i1+2 ];

  00e9b	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00e9e	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00ea1	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00ea4	d8 64 90 08	 fsub	 DWORD PTR [eax+edx*4+8]
  00ea8	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00eab	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00eae	d9 5c 8a 08	 fstp	 DWORD PTR [edx+ecx*4+8]

; 521  :       x_1[ i1+3 ]  =  t1im  -  x_1[ i1+3 ];

  00eb2	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00eb5	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00eb8	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00ebb	d8 64 81 0c	 fsub	 DWORD PTR [ecx+eax*4+12]
  00ebf	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00ec2	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00ec5	d9 5c 90 0c	 fstp	 DWORD PTR [eax+edx*4+12]

; 522  :       t1re         =           x_1[ i1+4 ];

  00ec9	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00ecc	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00ecf	8b 44 8a 10	 mov	 eax, DWORD PTR [edx+ecx*4+16]
  00ed3	89 45 cc	 mov	 DWORD PTR _t1re$[ebp], eax

; 523  :       t1im         =           x_1[ i1+5 ];

  00ed6	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00ed9	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00edc	8b 44 8a 14	 mov	 eax, DWORD PTR [edx+ecx*4+20]
  00ee0	89 45 c4	 mov	 DWORD PTR _t1im$[ebp], eax

; 524  :       x_1[ i1+4 ]  =  t1re  +  x_1[ i1+6 ];

  00ee3	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00ee6	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00ee9	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00eec	d8 44 8a 18	 fadd	 DWORD PTR [edx+ecx*4+24]
  00ef0	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00ef3	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00ef6	d9 5c 81 10	 fstp	 DWORD PTR [ecx+eax*4+16]

; 525  :       x_1[ i1+5 ]  =  t1im  +  x_1[ i1+7 ];

  00efa	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00efd	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00f00	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00f03	d8 44 90 1c	 fadd	 DWORD PTR [eax+edx*4+28]
  00f07	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00f0a	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00f0d	d9 5c 8a 14	 fstp	 DWORD PTR [edx+ecx*4+20]

; 526  :       x_1[ i1+6 ]  =  t1re  -  x_1[ i1+6 ];

  00f11	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00f14	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00f17	d9 45 cc	 fld	 DWORD PTR _t1re$[ebp]
  00f1a	d8 64 81 18	 fsub	 DWORD PTR [ecx+eax*4+24]
  00f1e	8b 55 dc	 mov	 edx, DWORD PTR _i1$[ebp]
  00f21	8b 45 c8	 mov	 eax, DWORD PTR _x_1$[ebp]
  00f24	d9 5c 90 18	 fstp	 DWORD PTR [eax+edx*4+24]

; 527  :       x_1[ i1+7 ]  =  t1im  -  x_1[ i1+7 ];

  00f28	8b 4d dc	 mov	 ecx, DWORD PTR _i1$[ebp]
  00f2b	8b 55 c8	 mov	 edx, DWORD PTR _x_1$[ebp]
  00f2e	d9 45 c4	 fld	 DWORD PTR _t1im$[ebp]
  00f31	d8 64 8a 1c	 fsub	 DWORD PTR [edx+ecx*4+28]
  00f35	8b 45 dc	 mov	 eax, DWORD PTR _i1$[ebp]
  00f38	8b 4d c8	 mov	 ecx, DWORD PTR _x_1$[ebp]
  00f3b	d9 5c 81 1c	 fstp	 DWORD PTR [ecx+eax*4+28]

; 528  :    }

  00f3f	e9 fc fe ff ff	 jmp	 $L1249
$L1250:

; 529  :    is = (id << 1) - 8;

  00f44	8b 55 f0	 mov	 edx, DWORD PTR _id$[ebp]
  00f47	8d 44 12 f8	 lea	 eax, DWORD PTR [edx+edx-8]
  00f4b	89 45 d8	 mov	 DWORD PTR _is$[ebp], eax

; 530  :    id =  id << 2;

  00f4e	8b 4d f0	 mov	 ecx, DWORD PTR _id$[ebp]
  00f51	c1 e1 02	 shl	 ecx, 2
  00f54	89 4d f0	 mov	 DWORD PTR _id$[ebp], ecx

; 531  :    if ( is < nn ) goto m40;

  00f57	8b 55 d8	 mov	 edx, DWORD PTR _is$[ebp]
  00f5a	3b 55 d0	 cmp	 edx, DWORD PTR _nn$[ebp]
  00f5d	7d 05		 jge	 SHORT $L1178
  00f5f	e9 d4 fe ff ff	 jmp	 $m40$1247
$L1178:

; 532  : 
; 533  :    return;
; 534  : }  /* nspcUndSplit_FFT_forward */

  00f64	5e		 pop	 esi
  00f65	8b e5		 mov	 esp, ebp
  00f67	5d		 pop	 ebp
  00f68	c2 0c 00	 ret	 12			; 0000000cH
_nspcUndSplit_FFT_forward@12 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT _nspcUndSplit_FFT_inverse@12
_TEXT	SEGMENT
_j$ = -72
_t2re$ = -68
_n2$ = -64
_its$ = -60
_k$ = -56
_n8$ = -52
_t1im$ = -48
_t1re$ = -44
_n4_3$ = -40
_n4$ = -36
_is$ = -32
_i1$ = -28
_n4_2$ = -24
_t3im$ = -20
_t2im$ = -16
_id$ = -12
_it$ = -8
_t3re$ = -4
_x$ = 8
_n$ = 12
_w$ = 16
_nspcUndSplit_FFT_inverse@12 PROC NEAR			; COMDAT

; 542  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	56		 push	 esi

; 543  :    int           k,
; 544  :                  its, is, id, i1, it, j,
; 545  :                  n2, n4, n8, n4_2, n4_3;
; 546  :    float         t1re, t1im, t2re, t2im, t3re, t3im;
; 547  : 
; 548  :    /* --------------- Main Loop --------------- */
; 549  : 
; 550  :    its = 2;

  00007	c7 45 c4 02 00
	00 00		 mov	 DWORD PTR _its$[ebp], 2

; 551  :    n2  = n << 1;

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]
  00011	d1 e0		 shl	 eax, 1
  00013	89 45 c0	 mov	 DWORD PTR _n2$[ebp], eax

; 552  : 
; 553  :    for  ( k = 2 ; k < (n >> 2) ; k = (k << 1) )  {

  00016	c7 45 c8 02 00
	00 00		 mov	 DWORD PTR _k$[ebp], 2
  0001d	eb 08		 jmp	 SHORT $L1278
$L1279:
  0001f	8b 4d c8	 mov	 ecx, DWORD PTR _k$[ebp]
  00022	d1 e1		 shl	 ecx, 1
  00024	89 4d c8	 mov	 DWORD PTR _k$[ebp], ecx
$L1278:
  00027	8b 55 0c	 mov	 edx, DWORD PTR _n$[ebp]
  0002a	c1 fa 02	 sar	 edx, 2
  0002d	39 55 c8	 cmp	 DWORD PTR _k$[ebp], edx
  00030	0f 8d 51 07 00
	00		 jge	 $L1280

; 554  : 
; 555  :       is   = 0;

  00036	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _is$[ebp], 0

; 556  :       id   = n2;

  0003d	8b 45 c0	 mov	 eax, DWORD PTR _n2$[ebp]
  00040	89 45 f4	 mov	 DWORD PTR _id$[ebp], eax

; 557  :       n2   = n2 >> 1;

  00043	8b 4d c0	 mov	 ecx, DWORD PTR _n2$[ebp]
  00046	d1 f9		 sar	 ecx, 1
  00048	89 4d c0	 mov	 DWORD PTR _n2$[ebp], ecx

; 558  :       n4   = n2 >> 2;

  0004b	8b 55 c0	 mov	 edx, DWORD PTR _n2$[ebp]
  0004e	c1 fa 02	 sar	 edx, 2
  00051	89 55 dc	 mov	 DWORD PTR _n4$[ebp], edx

; 559  :       n8   = n4 >> 1;

  00054	8b 45 dc	 mov	 eax, DWORD PTR _n4$[ebp]
  00057	d1 f8		 sar	 eax, 1
  00059	89 45 cc	 mov	 DWORD PTR _n8$[ebp], eax

; 560  :       n4_2 = n4 << 1;

  0005c	8b 4d dc	 mov	 ecx, DWORD PTR _n4$[ebp]
  0005f	d1 e1		 shl	 ecx, 1
  00061	89 4d e8	 mov	 DWORD PTR _n4_2$[ebp], ecx

; 561  :       n4_3 = n4_2 + n4;

  00064	8b 55 e8	 mov	 edx, DWORD PTR _n4_2$[ebp]
  00067	03 55 dc	 add	 edx, DWORD PTR _n4$[ebp]
  0006a	89 55 d8	 mov	 DWORD PTR _n4_3$[ebp], edx
$m10$1281:

; 562  : 
; 563  :       m10:
; 564  :       for  ( i1 = is ; i1 < n ; i1 += id )  {

  0006d	8b 45 e0	 mov	 eax, DWORD PTR _is$[ebp]
  00070	89 45 e4	 mov	 DWORD PTR _i1$[ebp], eax
  00073	eb 09		 jmp	 SHORT $L1282
$L1283:
  00075	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00078	03 4d f4	 add	 ecx, DWORD PTR _id$[ebp]
  0007b	89 4d e4	 mov	 DWORD PTR _i1$[ebp], ecx
$L1282:
  0007e	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00081	3b 55 0c	 cmp	 edx, DWORD PTR _n$[ebp]
  00084	0f 8d cf 06 00
	00		 jge	 $L1284

; 565  : 
; 566  :          /* ............... Zero butterfly ............... */
; 567  :          t1re            = x[ i1 ].re    - x[ n4_2 + i1 ].re;

  0008a	8b 45 e8	 mov	 eax, DWORD PTR _n4_2$[ebp]
  0008d	03 45 e4	 add	 eax, DWORD PTR _i1$[ebp]
  00090	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00093	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00096	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00099	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  0009c	d8 24 c6	 fsub	 DWORD PTR [esi+eax*8]
  0009f	d9 5d d4	 fstp	 DWORD PTR _t1re$[ebp]

; 568  :          t1im            = x[ i1 ].im    - x[ n4_2 + i1 ].im;

  000a2	8b 45 e8	 mov	 eax, DWORD PTR _n4_2$[ebp]
  000a5	03 45 e4	 add	 eax, DWORD PTR _i1$[ebp]
  000a8	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  000ab	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000ae	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  000b1	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  000b5	d8 64 c6 04	 fsub	 DWORD PTR [esi+eax*8+4]
  000b9	d9 5d d0	 fstp	 DWORD PTR _t1im$[ebp]

; 569  :          x[ i1 ].re      = x[ i1 ].re    + x[ n4_2 + i1 ].re;

  000bc	8b 45 e8	 mov	 eax, DWORD PTR _n4_2$[ebp]
  000bf	03 45 e4	 add	 eax, DWORD PTR _i1$[ebp]
  000c2	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  000c5	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000c8	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  000cb	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  000ce	d8 04 c6	 fadd	 DWORD PTR [esi+eax*8]
  000d1	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  000d4	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000d7	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 570  :          x[ i1 ].im      = x[ i1 ].im    + x[ n4_2 + i1 ].im;

  000da	8b 55 e8	 mov	 edx, DWORD PTR _n4_2$[ebp]
  000dd	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  000e0	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  000e3	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000e6	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  000e9	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  000ed	d8 44 d6 04	 fadd	 DWORD PTR [esi+edx*8+4]
  000f1	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  000f4	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000f7	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 571  :          t2re            = x[ n4+i1 ].re - x[ n4_3 + i1 ].re;

  000fb	8b 4d dc	 mov	 ecx, DWORD PTR _n4$[ebp]
  000fe	03 4d e4	 add	 ecx, DWORD PTR _i1$[ebp]
  00101	8b 55 d8	 mov	 edx, DWORD PTR _n4_3$[ebp]
  00104	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  00107	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0010a	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0010d	d9 04 c8	 fld	 DWORD PTR [eax+ecx*8]
  00110	d8 24 d6	 fsub	 DWORD PTR [esi+edx*8]
  00113	d9 5d bc	 fstp	 DWORD PTR _t2re$[ebp]

; 572  :          t2im            = x[ n4+i1 ].im - x[ n4_3 + i1 ].im;

  00116	8b 4d dc	 mov	 ecx, DWORD PTR _n4$[ebp]
  00119	03 4d e4	 add	 ecx, DWORD PTR _i1$[ebp]
  0011c	8b 55 d8	 mov	 edx, DWORD PTR _n4_3$[ebp]
  0011f	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  00122	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00125	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00128	d9 44 c8 04	 fld	 DWORD PTR [eax+ecx*8+4]
  0012c	d8 64 d6 04	 fsub	 DWORD PTR [esi+edx*8+4]
  00130	d9 5d f0	 fstp	 DWORD PTR _t2im$[ebp]

; 573  :          x[ n4+i1 ].re   = x[ n4+i1 ].re + x[ n4_3 + i1 ].re;

  00133	8b 4d dc	 mov	 ecx, DWORD PTR _n4$[ebp]
  00136	03 4d e4	 add	 ecx, DWORD PTR _i1$[ebp]
  00139	8b 55 d8	 mov	 edx, DWORD PTR _n4_3$[ebp]
  0013c	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  0013f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00142	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00145	d9 04 c8	 fld	 DWORD PTR [eax+ecx*8]
  00148	d8 04 d6	 fadd	 DWORD PTR [esi+edx*8]
  0014b	8b 4d dc	 mov	 ecx, DWORD PTR _n4$[ebp]
  0014e	03 4d e4	 add	 ecx, DWORD PTR _i1$[ebp]
  00151	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00154	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 574  :          x[ n4+i1 ].im   = x[ n4+i1 ].im + x[ n4_3 + i1 ].im;

  00157	8b 45 dc	 mov	 eax, DWORD PTR _n4$[ebp]
  0015a	03 45 e4	 add	 eax, DWORD PTR _i1$[ebp]
  0015d	8b 4d d8	 mov	 ecx, DWORD PTR _n4_3$[ebp]
  00160	03 4d e4	 add	 ecx, DWORD PTR _i1$[ebp]
  00163	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00166	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00169	d9 44 c2 04	 fld	 DWORD PTR [edx+eax*8+4]
  0016d	d8 44 ce 04	 fadd	 DWORD PTR [esi+ecx*8+4]
  00171	8b 45 dc	 mov	 eax, DWORD PTR _n4$[ebp]
  00174	03 45 e4	 add	 eax, DWORD PTR _i1$[ebp]
  00177	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0017a	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 575  :          x[ n4_2+i1 ].re = t1re - t2im;

  0017e	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00181	d8 65 f0	 fsub	 DWORD PTR _t2im$[ebp]
  00184	8b 55 e8	 mov	 edx, DWORD PTR _n4_2$[ebp]
  00187	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  0018a	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0018d	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 576  :          x[ n4_2+i1 ].im = t1im + t2re;

  00190	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00193	d8 45 bc	 fadd	 DWORD PTR _t2re$[ebp]
  00196	8b 4d e8	 mov	 ecx, DWORD PTR _n4_2$[ebp]
  00199	03 4d e4	 add	 ecx, DWORD PTR _i1$[ebp]
  0019c	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0019f	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 577  :          x[ n4_3+i1 ].re = t1re + t2im;

  001a3	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  001a6	d8 45 f0	 fadd	 DWORD PTR _t2im$[ebp]
  001a9	8b 45 d8	 mov	 eax, DWORD PTR _n4_3$[ebp]
  001ac	03 45 e4	 add	 eax, DWORD PTR _i1$[ebp]
  001af	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  001b2	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 578  :          x[ n4_3+i1 ].im = t1im - t2re;

  001b5	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  001b8	d8 65 bc	 fsub	 DWORD PTR _t2re$[ebp]
  001bb	8b 55 d8	 mov	 edx, DWORD PTR _n4_3$[ebp]
  001be	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  001c1	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001c4	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 579  : 
; 580  :          /* ...................... N/8 butterfly ...................... */
; 581  :          t1re                 = x[ i1+n8 ].re      - x[ n4_2 + i1+n8 ].re;

  001c8	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  001cb	03 4d cc	 add	 ecx, DWORD PTR _n8$[ebp]
  001ce	8b 55 e8	 mov	 edx, DWORD PTR _n4_2$[ebp]
  001d1	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  001d4	03 55 cc	 add	 edx, DWORD PTR _n8$[ebp]
  001d7	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001da	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  001dd	d9 04 c8	 fld	 DWORD PTR [eax+ecx*8]
  001e0	d8 24 d6	 fsub	 DWORD PTR [esi+edx*8]
  001e3	d9 5d d4	 fstp	 DWORD PTR _t1re$[ebp]

; 582  :          t1im                 = x[ i1+n8 ].im      - x[ n4_2 + i1+n8 ].im;

  001e6	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  001e9	03 4d cc	 add	 ecx, DWORD PTR _n8$[ebp]
  001ec	8b 55 e8	 mov	 edx, DWORD PTR _n4_2$[ebp]
  001ef	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  001f2	03 55 cc	 add	 edx, DWORD PTR _n8$[ebp]
  001f5	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001f8	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  001fb	d9 44 c8 04	 fld	 DWORD PTR [eax+ecx*8+4]
  001ff	d8 64 d6 04	 fsub	 DWORD PTR [esi+edx*8+4]
  00203	d9 5d d0	 fstp	 DWORD PTR _t1im$[ebp]

; 583  :          x[ i1+n8 ].re        = x[ i1+n8 ].re      + x[ n4_2 + i1+n8 ].re;

  00206	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00209	03 4d cc	 add	 ecx, DWORD PTR _n8$[ebp]
  0020c	8b 55 e8	 mov	 edx, DWORD PTR _n4_2$[ebp]
  0020f	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  00212	03 55 cc	 add	 edx, DWORD PTR _n8$[ebp]
  00215	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00218	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0021b	d9 04 c8	 fld	 DWORD PTR [eax+ecx*8]
  0021e	d8 04 d6	 fadd	 DWORD PTR [esi+edx*8]
  00221	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00224	03 4d cc	 add	 ecx, DWORD PTR _n8$[ebp]
  00227	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0022a	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 584  :          x[ i1+n8 ].im        = x[ i1+n8 ].im      + x[ n4_2 + i1+n8 ].im;

  0022d	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00230	03 45 cc	 add	 eax, DWORD PTR _n8$[ebp]
  00233	8b 4d e8	 mov	 ecx, DWORD PTR _n4_2$[ebp]
  00236	03 4d e4	 add	 ecx, DWORD PTR _i1$[ebp]
  00239	03 4d cc	 add	 ecx, DWORD PTR _n8$[ebp]
  0023c	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0023f	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00242	d9 44 c2 04	 fld	 DWORD PTR [edx+eax*8+4]
  00246	d8 44 ce 04	 fadd	 DWORD PTR [esi+ecx*8+4]
  0024a	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  0024d	03 45 cc	 add	 eax, DWORD PTR _n8$[ebp]
  00250	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00253	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 585  :          t2re                 = x[ n4 + i1+n8 ].re - x[ n4_3 + i1+n8 ].re;

  00257	8b 55 dc	 mov	 edx, DWORD PTR _n4$[ebp]
  0025a	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  0025d	03 55 cc	 add	 edx, DWORD PTR _n8$[ebp]
  00260	8b 45 d8	 mov	 eax, DWORD PTR _n4_3$[ebp]
  00263	03 45 e4	 add	 eax, DWORD PTR _i1$[ebp]
  00266	03 45 cc	 add	 eax, DWORD PTR _n8$[ebp]
  00269	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0026c	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0026f	d9 04 d1	 fld	 DWORD PTR [ecx+edx*8]
  00272	d8 24 c6	 fsub	 DWORD PTR [esi+eax*8]
  00275	d9 5d bc	 fstp	 DWORD PTR _t2re$[ebp]

; 586  :          t2im                 = x[ n4 + i1+n8 ].im - x[ n4_3 + i1+n8 ].im;

  00278	8b 55 dc	 mov	 edx, DWORD PTR _n4$[ebp]
  0027b	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  0027e	03 55 cc	 add	 edx, DWORD PTR _n8$[ebp]
  00281	8b 45 d8	 mov	 eax, DWORD PTR _n4_3$[ebp]
  00284	03 45 e4	 add	 eax, DWORD PTR _i1$[ebp]
  00287	03 45 cc	 add	 eax, DWORD PTR _n8$[ebp]
  0028a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0028d	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00290	d9 44 d1 04	 fld	 DWORD PTR [ecx+edx*8+4]
  00294	d8 64 c6 04	 fsub	 DWORD PTR [esi+eax*8+4]
  00298	d9 5d f0	 fstp	 DWORD PTR _t2im$[ebp]

; 587  :          x[ n4 + i1+n8 ].re   = x[ n4 + i1+n8 ].re + x[ n4_3 + i1+n8 ].re;

  0029b	8b 55 dc	 mov	 edx, DWORD PTR _n4$[ebp]
  0029e	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  002a1	03 55 cc	 add	 edx, DWORD PTR _n8$[ebp]
  002a4	8b 45 d8	 mov	 eax, DWORD PTR _n4_3$[ebp]
  002a7	03 45 e4	 add	 eax, DWORD PTR _i1$[ebp]
  002aa	03 45 cc	 add	 eax, DWORD PTR _n8$[ebp]
  002ad	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  002b0	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  002b3	d9 04 d1	 fld	 DWORD PTR [ecx+edx*8]
  002b6	d8 04 c6	 fadd	 DWORD PTR [esi+eax*8]
  002b9	8b 55 dc	 mov	 edx, DWORD PTR _n4$[ebp]
  002bc	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  002bf	03 55 cc	 add	 edx, DWORD PTR _n8$[ebp]
  002c2	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  002c5	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 588  :          x[ n4 + i1+n8 ].im   = x[ n4 + i1+n8 ].im + x[ n4_3 + i1+n8 ].im;

  002c8	8b 4d dc	 mov	 ecx, DWORD PTR _n4$[ebp]
  002cb	03 4d e4	 add	 ecx, DWORD PTR _i1$[ebp]
  002ce	03 4d cc	 add	 ecx, DWORD PTR _n8$[ebp]
  002d1	8b 55 d8	 mov	 edx, DWORD PTR _n4_3$[ebp]
  002d4	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  002d7	03 55 cc	 add	 edx, DWORD PTR _n8$[ebp]
  002da	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  002dd	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  002e0	d9 44 c8 04	 fld	 DWORD PTR [eax+ecx*8+4]
  002e4	d8 44 d6 04	 fadd	 DWORD PTR [esi+edx*8+4]
  002e8	8b 4d dc	 mov	 ecx, DWORD PTR _n4$[ebp]
  002eb	03 4d e4	 add	 ecx, DWORD PTR _i1$[ebp]
  002ee	03 4d cc	 add	 ecx, DWORD PTR _n8$[ebp]
  002f1	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  002f4	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 589  :          x[ n4_2 + i1+n8 ].re =  V707107*( (t1re - t2im) - (t1im + t2re) );

  002f8	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  002fb	d8 65 f0	 fsub	 DWORD PTR _t2im$[ebp]
  002fe	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00301	d8 45 bc	 fadd	 DWORD PTR _t2re$[ebp]
  00304	de e9		 fsubp	 ST(1), ST(0)
  00306	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f7
  0030c	8b 45 e8	 mov	 eax, DWORD PTR _n4_2$[ebp]
  0030f	03 45 e4	 add	 eax, DWORD PTR _i1$[ebp]
  00312	03 45 cc	 add	 eax, DWORD PTR _n8$[ebp]
  00315	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00318	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 590  :          x[ n4_2 + i1+n8 ].im =  V707107*( (t1im + t2re) + (t1re - t2im) );

  0031b	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  0031e	d8 45 bc	 fadd	 DWORD PTR _t2re$[ebp]
  00321	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00324	d8 65 f0	 fsub	 DWORD PTR _t2im$[ebp]
  00327	de c1		 faddp	 ST(1), ST(0)
  00329	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f7
  0032f	8b 55 e8	 mov	 edx, DWORD PTR _n4_2$[ebp]
  00332	03 55 e4	 add	 edx, DWORD PTR _i1$[ebp]
  00335	03 55 cc	 add	 edx, DWORD PTR _n8$[ebp]
  00338	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0033b	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 591  :          x[ n4_3 + i1+n8 ].re = -V707107*( (t1re + t2im) + (t1im - t2re) );

  0033f	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00342	d8 45 f0	 fadd	 DWORD PTR _t2im$[ebp]
  00345	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00348	d8 65 bc	 fsub	 DWORD PTR _t2re$[ebp]
  0034b	de c1		 faddp	 ST(1), ST(0)
  0034d	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@bf3504f7
  00353	8b 4d d8	 mov	 ecx, DWORD PTR _n4_3$[ebp]
  00356	03 4d e4	 add	 ecx, DWORD PTR _i1$[ebp]
  00359	03 4d cc	 add	 ecx, DWORD PTR _n8$[ebp]
  0035c	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0035f	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 592  :          x[ n4_3 + i1+n8 ].im = -V707107*( (t1im - t2re) - (t1re + t2im) );

  00362	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00365	d8 65 bc	 fsub	 DWORD PTR _t2re$[ebp]
  00368	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  0036b	d8 45 f0	 fadd	 DWORD PTR _t2im$[ebp]
  0036e	de e9		 fsubp	 ST(1), ST(0)
  00370	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@bf3504f7
  00376	8b 45 d8	 mov	 eax, DWORD PTR _n4_3$[ebp]
  00379	03 45 e4	 add	 eax, DWORD PTR _i1$[ebp]
  0037c	03 45 cc	 add	 eax, DWORD PTR _n8$[ebp]
  0037f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00382	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 593  : 
; 594  :          /* ...................... General butterfly ................... */
; 595  :          it = -1;

  00386	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _it$[ebp], -1

; 596  :          for ( j = i1+1 ; j < i1+n8 ; j++ ) {

  0038d	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00390	83 c2 01	 add	 edx, 1
  00393	89 55 b8	 mov	 DWORD PTR _j$[ebp], edx
  00396	eb 09		 jmp	 SHORT $L1289
$L1290:
  00398	8b 45 b8	 mov	 eax, DWORD PTR _j$[ebp]
  0039b	83 c0 01	 add	 eax, 1
  0039e	89 45 b8	 mov	 DWORD PTR _j$[ebp], eax
$L1289:
  003a1	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  003a4	03 4d cc	 add	 ecx, DWORD PTR _n8$[ebp]
  003a7	39 4d b8	 cmp	 DWORD PTR _j$[ebp], ecx
  003aa	0f 8d ba 01 00
	00		 jge	 $L1291

; 597  :             it = it + its;

  003b0	8b 55 f8	 mov	 edx, DWORD PTR _it$[ebp]
  003b3	03 55 c4	 add	 edx, DWORD PTR _its$[ebp]
  003b6	89 55 f8	 mov	 DWORD PTR _it$[ebp], edx

; 598  :             t1re             = x[ j ].re        - x[ n4_2 + j ].re;

  003b9	8b 45 e8	 mov	 eax, DWORD PTR _n4_2$[ebp]
  003bc	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  003bf	8b 4d b8	 mov	 ecx, DWORD PTR _j$[ebp]
  003c2	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  003c5	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  003c8	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  003cb	d8 24 c6	 fsub	 DWORD PTR [esi+eax*8]
  003ce	d9 5d d4	 fstp	 DWORD PTR _t1re$[ebp]

; 599  :             t1im             = x[ j ].im        - x[ n4_2 + j ].im;

  003d1	8b 45 e8	 mov	 eax, DWORD PTR _n4_2$[ebp]
  003d4	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  003d7	8b 4d b8	 mov	 ecx, DWORD PTR _j$[ebp]
  003da	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  003dd	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  003e0	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  003e4	d8 64 c6 04	 fsub	 DWORD PTR [esi+eax*8+4]
  003e8	d9 5d d0	 fstp	 DWORD PTR _t1im$[ebp]

; 600  :             x[ j ].re        = x[ j ].re        + x[ n4_2 + j ].re;

  003eb	8b 45 e8	 mov	 eax, DWORD PTR _n4_2$[ebp]
  003ee	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  003f1	8b 4d b8	 mov	 ecx, DWORD PTR _j$[ebp]
  003f4	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  003f7	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  003fa	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  003fd	d8 04 c6	 fadd	 DWORD PTR [esi+eax*8]
  00400	8b 45 b8	 mov	 eax, DWORD PTR _j$[ebp]
  00403	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00406	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 601  :             x[ j ].im        = x[ j ].im        + x[ n4_2 + j ].im;

  00409	8b 55 e8	 mov	 edx, DWORD PTR _n4_2$[ebp]
  0040c	03 55 b8	 add	 edx, DWORD PTR _j$[ebp]
  0040f	8b 45 b8	 mov	 eax, DWORD PTR _j$[ebp]
  00412	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00415	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00418	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  0041c	d8 44 d6 04	 fadd	 DWORD PTR [esi+edx*8+4]
  00420	8b 55 b8	 mov	 edx, DWORD PTR _j$[ebp]
  00423	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00426	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 602  :             t2im             = x[ n4 + j ].re   - x[ n4_3 + j ].re;

  0042a	8b 4d dc	 mov	 ecx, DWORD PTR _n4$[ebp]
  0042d	03 4d b8	 add	 ecx, DWORD PTR _j$[ebp]
  00430	8b 55 d8	 mov	 edx, DWORD PTR _n4_3$[ebp]
  00433	03 55 b8	 add	 edx, DWORD PTR _j$[ebp]
  00436	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00439	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0043c	d9 04 c8	 fld	 DWORD PTR [eax+ecx*8]
  0043f	d8 24 d6	 fsub	 DWORD PTR [esi+edx*8]
  00442	d9 5d f0	 fstp	 DWORD PTR _t2im$[ebp]

; 603  :             t2re             = x[ n4_3 + j ].im - x[ n4 + j ].im;

  00445	8b 4d d8	 mov	 ecx, DWORD PTR _n4_3$[ebp]
  00448	03 4d b8	 add	 ecx, DWORD PTR _j$[ebp]
  0044b	8b 55 dc	 mov	 edx, DWORD PTR _n4$[ebp]
  0044e	03 55 b8	 add	 edx, DWORD PTR _j$[ebp]
  00451	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00454	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00457	d9 44 c8 04	 fld	 DWORD PTR [eax+ecx*8+4]
  0045b	d8 64 d6 04	 fsub	 DWORD PTR [esi+edx*8+4]
  0045f	d9 5d bc	 fstp	 DWORD PTR _t2re$[ebp]

; 604  :             x[ n4 + j ].re   = x[ n4 + j ].re   + x[ n4_3 + j ].re;

  00462	8b 4d dc	 mov	 ecx, DWORD PTR _n4$[ebp]
  00465	03 4d b8	 add	 ecx, DWORD PTR _j$[ebp]
  00468	8b 55 d8	 mov	 edx, DWORD PTR _n4_3$[ebp]
  0046b	03 55 b8	 add	 edx, DWORD PTR _j$[ebp]
  0046e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00471	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00474	d9 04 c8	 fld	 DWORD PTR [eax+ecx*8]
  00477	d8 04 d6	 fadd	 DWORD PTR [esi+edx*8]
  0047a	8b 4d dc	 mov	 ecx, DWORD PTR _n4$[ebp]
  0047d	03 4d b8	 add	 ecx, DWORD PTR _j$[ebp]
  00480	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00483	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 605  :             x[ n4 + j ].im   = x[ n4 + j ].im   + x[ n4_3 + j ].im;

  00486	8b 45 dc	 mov	 eax, DWORD PTR _n4$[ebp]
  00489	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  0048c	8b 4d d8	 mov	 ecx, DWORD PTR _n4_3$[ebp]
  0048f	03 4d b8	 add	 ecx, DWORD PTR _j$[ebp]
  00492	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00495	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00498	d9 44 c2 04	 fld	 DWORD PTR [edx+eax*8+4]
  0049c	d8 44 ce 04	 fadd	 DWORD PTR [esi+ecx*8+4]
  004a0	8b 45 dc	 mov	 eax, DWORD PTR _n4$[ebp]
  004a3	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  004a6	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  004a9	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 606  :             x[ n4_2 + j ].re =  (t1re + t2re )*w[ it-1 ].re +
; 607  :                                 (t1im + t2im )*w[ it-1 ].im;

  004ad	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  004b0	d8 45 bc	 fadd	 DWORD PTR _t2re$[ebp]
  004b3	8b 55 f8	 mov	 edx, DWORD PTR _it$[ebp]
  004b6	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  004b9	d8 4c d0 f8	 fmul	 DWORD PTR [eax+edx*8-8]
  004bd	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  004c0	d8 45 f0	 fadd	 DWORD PTR _t2im$[ebp]
  004c3	8b 4d f8	 mov	 ecx, DWORD PTR _it$[ebp]
  004c6	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  004c9	d8 4c ca fc	 fmul	 DWORD PTR [edx+ecx*8-4]
  004cd	de c1		 faddp	 ST(1), ST(0)
  004cf	8b 45 e8	 mov	 eax, DWORD PTR _n4_2$[ebp]
  004d2	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  004d5	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  004d8	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 608  :             x[ n4_2 + j ].im =  (t1im + t2im )*w[ it-1 ].re -
; 609  :                                 (t1re + t2re )*w[ it-1 ].im;

  004db	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  004de	d8 45 f0	 fadd	 DWORD PTR _t2im$[ebp]
  004e1	8b 55 f8	 mov	 edx, DWORD PTR _it$[ebp]
  004e4	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  004e7	d8 4c d0 f8	 fmul	 DWORD PTR [eax+edx*8-8]
  004eb	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  004ee	d8 45 bc	 fadd	 DWORD PTR _t2re$[ebp]
  004f1	8b 4d f8	 mov	 ecx, DWORD PTR _it$[ebp]
  004f4	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  004f7	d8 4c ca fc	 fmul	 DWORD PTR [edx+ecx*8-4]
  004fb	de e9		 fsubp	 ST(1), ST(0)
  004fd	8b 45 e8	 mov	 eax, DWORD PTR _n4_2$[ebp]
  00500	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  00503	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00506	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 610  :             x[ n4_3 + j ].re =  (t1re - t2re )*w[  it  ].re +
; 611  :                                 (t1im - t2im )*w[  it  ].im;

  0050a	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  0050d	d8 65 bc	 fsub	 DWORD PTR _t2re$[ebp]
  00510	8b 55 f8	 mov	 edx, DWORD PTR _it$[ebp]
  00513	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00516	d8 0c d0	 fmul	 DWORD PTR [eax+edx*8]
  00519	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  0051c	d8 65 f0	 fsub	 DWORD PTR _t2im$[ebp]
  0051f	8b 4d f8	 mov	 ecx, DWORD PTR _it$[ebp]
  00522	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00525	d8 4c ca 04	 fmul	 DWORD PTR [edx+ecx*8+4]
  00529	de c1		 faddp	 ST(1), ST(0)
  0052b	8b 45 d8	 mov	 eax, DWORD PTR _n4_3$[ebp]
  0052e	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  00531	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00534	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 612  :             x[ n4_3 + j ].im =  (t1im - t2im )*w[  it  ].re -
; 613  :                                 (t1re - t2re )*w[  it  ].im;

  00537	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  0053a	d8 65 f0	 fsub	 DWORD PTR _t2im$[ebp]
  0053d	8b 55 f8	 mov	 edx, DWORD PTR _it$[ebp]
  00540	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00543	d8 0c d0	 fmul	 DWORD PTR [eax+edx*8]
  00546	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00549	d8 65 bc	 fsub	 DWORD PTR _t2re$[ebp]
  0054c	8b 4d f8	 mov	 ecx, DWORD PTR _it$[ebp]
  0054f	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00552	d8 4c ca 04	 fmul	 DWORD PTR [edx+ecx*8+4]
  00556	de e9		 fsubp	 ST(1), ST(0)
  00558	8b 45 d8	 mov	 eax, DWORD PTR _n4_3$[ebp]
  0055b	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  0055e	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00561	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 614  :          }

  00565	e9 2e fe ff ff	 jmp	 $L1290
$L1291:

; 615  :          it = -1;

  0056a	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _it$[ebp], -1

; 616  :          for ( j = i1+n4-1 ; j > i1+n8 ; j-- ) {

  00571	8b 55 dc	 mov	 edx, DWORD PTR _n4$[ebp]
  00574	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00577	8d 4c 10 ff	 lea	 ecx, DWORD PTR [eax+edx-1]
  0057b	89 4d b8	 mov	 DWORD PTR _j$[ebp], ecx
  0057e	eb 09		 jmp	 SHORT $L1292
$L1293:
  00580	8b 55 b8	 mov	 edx, DWORD PTR _j$[ebp]
  00583	83 ea 01	 sub	 edx, 1
  00586	89 55 b8	 mov	 DWORD PTR _j$[ebp], edx
$L1292:
  00589	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  0058c	03 45 cc	 add	 eax, DWORD PTR _n8$[ebp]
  0058f	39 45 b8	 cmp	 DWORD PTR _j$[ebp], eax
  00592	0f 8e bc 01 00
	00		 jle	 $L1294

; 617  :             it = it + its;

  00598	8b 4d f8	 mov	 ecx, DWORD PTR _it$[ebp]
  0059b	03 4d c4	 add	 ecx, DWORD PTR _its$[ebp]
  0059e	89 4d f8	 mov	 DWORD PTR _it$[ebp], ecx

; 618  :             t1re             = x[ j ].re        - x[ n4_2 + j ].re;

  005a1	8b 55 e8	 mov	 edx, DWORD PTR _n4_2$[ebp]
  005a4	03 55 b8	 add	 edx, DWORD PTR _j$[ebp]
  005a7	8b 45 b8	 mov	 eax, DWORD PTR _j$[ebp]
  005aa	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  005ad	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  005b0	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  005b3	d8 24 d6	 fsub	 DWORD PTR [esi+edx*8]
  005b6	d9 5d d4	 fstp	 DWORD PTR _t1re$[ebp]

; 619  :             t1im             = x[ j ].im        - x[ n4_2 + j ].im;

  005b9	8b 55 e8	 mov	 edx, DWORD PTR _n4_2$[ebp]
  005bc	03 55 b8	 add	 edx, DWORD PTR _j$[ebp]
  005bf	8b 45 b8	 mov	 eax, DWORD PTR _j$[ebp]
  005c2	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  005c5	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  005c8	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  005cc	d8 64 d6 04	 fsub	 DWORD PTR [esi+edx*8+4]
  005d0	d9 5d d0	 fstp	 DWORD PTR _t1im$[ebp]

; 620  :             x[ j ].re        = x[ j ].re        + x[ n4_2 + j ].re;

  005d3	8b 55 e8	 mov	 edx, DWORD PTR _n4_2$[ebp]
  005d6	03 55 b8	 add	 edx, DWORD PTR _j$[ebp]
  005d9	8b 45 b8	 mov	 eax, DWORD PTR _j$[ebp]
  005dc	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  005df	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  005e2	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  005e5	d8 04 d6	 fadd	 DWORD PTR [esi+edx*8]
  005e8	8b 55 b8	 mov	 edx, DWORD PTR _j$[ebp]
  005eb	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  005ee	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 621  :             x[ j ].im        = x[ j ].im        + x[ n4_2 + j ].im;

  005f1	8b 4d e8	 mov	 ecx, DWORD PTR _n4_2$[ebp]
  005f4	03 4d b8	 add	 ecx, DWORD PTR _j$[ebp]
  005f7	8b 55 b8	 mov	 edx, DWORD PTR _j$[ebp]
  005fa	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  005fd	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00600	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  00604	d8 44 ce 04	 fadd	 DWORD PTR [esi+ecx*8+4]
  00608	8b 4d b8	 mov	 ecx, DWORD PTR _j$[ebp]
  0060b	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0060e	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 622  :             t2im             = x[ n4 + j ].re   - x[ n4_3 + j ].re;

  00612	8b 45 dc	 mov	 eax, DWORD PTR _n4$[ebp]
  00615	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  00618	8b 4d d8	 mov	 ecx, DWORD PTR _n4_3$[ebp]
  0061b	03 4d b8	 add	 ecx, DWORD PTR _j$[ebp]
  0061e	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00621	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00624	d9 04 c2	 fld	 DWORD PTR [edx+eax*8]
  00627	d8 24 ce	 fsub	 DWORD PTR [esi+ecx*8]
  0062a	d9 5d f0	 fstp	 DWORD PTR _t2im$[ebp]

; 623  :             t2re             = x[ n4_3 + j ].im - x[ n4 + j ].im;

  0062d	8b 45 d8	 mov	 eax, DWORD PTR _n4_3$[ebp]
  00630	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  00633	8b 4d dc	 mov	 ecx, DWORD PTR _n4$[ebp]
  00636	03 4d b8	 add	 ecx, DWORD PTR _j$[ebp]
  00639	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0063c	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0063f	d9 44 c2 04	 fld	 DWORD PTR [edx+eax*8+4]
  00643	d8 64 ce 04	 fsub	 DWORD PTR [esi+ecx*8+4]
  00647	d9 5d bc	 fstp	 DWORD PTR _t2re$[ebp]

; 624  :             x[ n4 + j ].re   = x[ n4 + j ].re   + x[ n4_3 + j ].re;

  0064a	8b 45 dc	 mov	 eax, DWORD PTR _n4$[ebp]
  0064d	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  00650	8b 4d d8	 mov	 ecx, DWORD PTR _n4_3$[ebp]
  00653	03 4d b8	 add	 ecx, DWORD PTR _j$[ebp]
  00656	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00659	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0065c	d9 04 c2	 fld	 DWORD PTR [edx+eax*8]
  0065f	d8 04 ce	 fadd	 DWORD PTR [esi+ecx*8]
  00662	8b 45 dc	 mov	 eax, DWORD PTR _n4$[ebp]
  00665	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  00668	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0066b	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 625  :             x[ n4 + j ].im   = x[ n4 + j ].im   + x[ n4_3 + j ].im;

  0066e	8b 55 dc	 mov	 edx, DWORD PTR _n4$[ebp]
  00671	03 55 b8	 add	 edx, DWORD PTR _j$[ebp]
  00674	8b 45 d8	 mov	 eax, DWORD PTR _n4_3$[ebp]
  00677	03 45 b8	 add	 eax, DWORD PTR _j$[ebp]
  0067a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0067d	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00680	d9 44 d1 04	 fld	 DWORD PTR [ecx+edx*8+4]
  00684	d8 44 c6 04	 fadd	 DWORD PTR [esi+eax*8+4]
  00688	8b 55 dc	 mov	 edx, DWORD PTR _n4$[ebp]
  0068b	03 55 b8	 add	 edx, DWORD PTR _j$[ebp]
  0068e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00691	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 626  :             x[ n4_2 + j ].re = -(t2re + t1re )*w[ it-1 ].im -
; 627  :                                 (t2im + t1im )*w[ it-1 ].re;

  00695	d9 45 bc	 fld	 DWORD PTR _t2re$[ebp]
  00698	d8 45 d4	 fadd	 DWORD PTR _t1re$[ebp]
  0069b	d9 e0		 fchs
  0069d	8b 4d f8	 mov	 ecx, DWORD PTR _it$[ebp]
  006a0	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  006a3	d8 4c ca fc	 fmul	 DWORD PTR [edx+ecx*8-4]
  006a7	d9 45 f0	 fld	 DWORD PTR _t2im$[ebp]
  006aa	d8 45 d0	 fadd	 DWORD PTR _t1im$[ebp]
  006ad	8b 45 f8	 mov	 eax, DWORD PTR _it$[ebp]
  006b0	8b 4d 10	 mov	 ecx, DWORD PTR _w$[ebp]
  006b3	d8 4c c1 f8	 fmul	 DWORD PTR [ecx+eax*8-8]
  006b7	de e9		 fsubp	 ST(1), ST(0)
  006b9	8b 55 e8	 mov	 edx, DWORD PTR _n4_2$[ebp]
  006bc	03 55 b8	 add	 edx, DWORD PTR _j$[ebp]
  006bf	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  006c2	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 628  :             x[ n4_2 + j ].im =  (t2re + t1re )*w[ it-1 ].re -
; 629  :                                 (t2im + t1im )*w[ it-1 ].im;

  006c5	d9 45 bc	 fld	 DWORD PTR _t2re$[ebp]
  006c8	d8 45 d4	 fadd	 DWORD PTR _t1re$[ebp]
  006cb	8b 4d f8	 mov	 ecx, DWORD PTR _it$[ebp]
  006ce	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  006d1	d8 4c ca f8	 fmul	 DWORD PTR [edx+ecx*8-8]
  006d5	d9 45 f0	 fld	 DWORD PTR _t2im$[ebp]
  006d8	d8 45 d0	 fadd	 DWORD PTR _t1im$[ebp]
  006db	8b 45 f8	 mov	 eax, DWORD PTR _it$[ebp]
  006de	8b 4d 10	 mov	 ecx, DWORD PTR _w$[ebp]
  006e1	d8 4c c1 fc	 fmul	 DWORD PTR [ecx+eax*8-4]
  006e5	de e9		 fsubp	 ST(1), ST(0)
  006e7	8b 55 e8	 mov	 edx, DWORD PTR _n4_2$[ebp]
  006ea	03 55 b8	 add	 edx, DWORD PTR _j$[ebp]
  006ed	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  006f0	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 630  :             x[ n4_3 + j ].re =  (t1re - t2re )*w[  it  ].im +
; 631  :                                 (t1im - t2im )*w[  it  ].re;

  006f4	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  006f7	d8 65 bc	 fsub	 DWORD PTR _t2re$[ebp]
  006fa	8b 4d f8	 mov	 ecx, DWORD PTR _it$[ebp]
  006fd	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00700	d8 4c ca 04	 fmul	 DWORD PTR [edx+ecx*8+4]
  00704	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00707	d8 65 f0	 fsub	 DWORD PTR _t2im$[ebp]
  0070a	8b 45 f8	 mov	 eax, DWORD PTR _it$[ebp]
  0070d	8b 4d 10	 mov	 ecx, DWORD PTR _w$[ebp]
  00710	d8 0c c1	 fmul	 DWORD PTR [ecx+eax*8]
  00713	de c1		 faddp	 ST(1), ST(0)
  00715	8b 55 d8	 mov	 edx, DWORD PTR _n4_3$[ebp]
  00718	03 55 b8	 add	 edx, DWORD PTR _j$[ebp]
  0071b	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0071e	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 632  :             x[ n4_3 + j ].im =  (t1im - t2im )*w[  it  ].im -
; 633  :                                 (t1re - t2re )*w[  it  ].re;

  00721	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00724	d8 65 f0	 fsub	 DWORD PTR _t2im$[ebp]
  00727	8b 4d f8	 mov	 ecx, DWORD PTR _it$[ebp]
  0072a	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  0072d	d8 4c ca 04	 fmul	 DWORD PTR [edx+ecx*8+4]
  00731	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00734	d8 65 bc	 fsub	 DWORD PTR _t2re$[ebp]
  00737	8b 45 f8	 mov	 eax, DWORD PTR _it$[ebp]
  0073a	8b 4d 10	 mov	 ecx, DWORD PTR _w$[ebp]
  0073d	d8 0c c1	 fmul	 DWORD PTR [ecx+eax*8]
  00740	de e9		 fsubp	 ST(1), ST(0)
  00742	8b 55 d8	 mov	 edx, DWORD PTR _n4_3$[ebp]
  00745	03 55 b8	 add	 edx, DWORD PTR _j$[ebp]
  00748	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0074b	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 634  :          }

  0074f	e9 2c fe ff ff	 jmp	 $L1293
$L1294:

; 635  : 
; 636  :       }  /*  Loop  i1  end  */

  00754	e9 1c f9 ff ff	 jmp	 $L1283
$L1284:

; 637  : 
; 638  :       /* control */
; 639  :       is = (id << 1) - n2;

  00759	8b 4d f4	 mov	 ecx, DWORD PTR _id$[ebp]
  0075c	d1 e1		 shl	 ecx, 1
  0075e	2b 4d c0	 sub	 ecx, DWORD PTR _n2$[ebp]
  00761	89 4d e0	 mov	 DWORD PTR _is$[ebp], ecx

; 640  :       id =  id << 2 ;

  00764	8b 55 f4	 mov	 edx, DWORD PTR _id$[ebp]
  00767	c1 e2 02	 shl	 edx, 2
  0076a	89 55 f4	 mov	 DWORD PTR _id$[ebp], edx

; 641  :       if ( is < n ) goto m10;

  0076d	8b 45 e0	 mov	 eax, DWORD PTR _is$[ebp]
  00770	3b 45 0c	 cmp	 eax, DWORD PTR _n$[ebp]
  00773	7d 05		 jge	 SHORT $L1295
  00775	e9 f3 f8 ff ff	 jmp	 $m10$1281
$L1295:

; 642  : 
; 643  :       its = its << 1;

  0077a	8b 4d c4	 mov	 ecx, DWORD PTR _its$[ebp]
  0077d	d1 e1		 shl	 ecx, 1
  0077f	89 4d c4	 mov	 DWORD PTR _its$[ebp], ecx

; 644  : 
; 645  :    }  /* --------  Main Loop  k  end  ----------- */

  00782	e9 98 f8 ff ff	 jmp	 $L1279
$L1280:

; 646  : 
; 647  :    is = 0;

  00787	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _is$[ebp], 0

; 648  :    id = n2;

  0078e	8b 55 c0	 mov	 edx, DWORD PTR _n2$[ebp]
  00791	89 55 f4	 mov	 DWORD PTR _id$[ebp], edx

; 649  :    n2 = n2 >> 1;

  00794	8b 45 c0	 mov	 eax, DWORD PTR _n2$[ebp]
  00797	d1 f8		 sar	 eax, 1
  00799	89 45 c0	 mov	 DWORD PTR _n2$[ebp], eax
$m20$1296:

; 650  : 
; 651  :    m20:
; 652  :    for ( i1 = is ; i1 < n ; i1+=id ) {

  0079c	8b 4d e0	 mov	 ecx, DWORD PTR _is$[ebp]
  0079f	89 4d e4	 mov	 DWORD PTR _i1$[ebp], ecx
  007a2	eb 09		 jmp	 SHORT $L1297
$L1298:
  007a4	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  007a7	03 55 f4	 add	 edx, DWORD PTR _id$[ebp]
  007aa	89 55 e4	 mov	 DWORD PTR _i1$[ebp], edx
$L1297:
  007ad	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  007b0	3b 45 0c	 cmp	 eax, DWORD PTR _n$[ebp]
  007b3	0f 8d 62 02 00
	00		 jge	 $L1299

; 653  : 
; 654  :       /* ............... Zero butterfly .............. */
; 655  :       t1re           = x[     i1 ].re  -  x[ 4 + i1 ].re;

  007b9	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  007bc	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  007bf	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  007c2	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  007c5	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  007c8	d8 64 c6 20	 fsub	 DWORD PTR [esi+eax*8+32]
  007cc	d9 5d d4	 fstp	 DWORD PTR _t1re$[ebp]

; 656  :       t1im           = x[     i1 ].im  -  x[ 4 + i1 ].im;

  007cf	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  007d2	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  007d5	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  007d8	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  007db	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  007df	d8 64 c6 24	 fsub	 DWORD PTR [esi+eax*8+36]
  007e3	d9 5d d0	 fstp	 DWORD PTR _t1im$[ebp]

; 657  :       x[ i1 ].re     = x[     i1 ].re  +  x[ 4 + i1 ].re;

  007e6	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  007e9	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  007ec	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  007ef	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  007f2	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  007f5	d8 44 c6 20	 fadd	 DWORD PTR [esi+eax*8+32]
  007f9	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  007fc	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  007ff	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 658  :       x[ i1 ].im     = x[     i1 ].im  +  x[ 4 + i1 ].im;

  00802	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00805	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00808	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  0080b	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0080e	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  00812	d8 44 d6 24	 fadd	 DWORD PTR [esi+edx*8+36]
  00816	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00819	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0081c	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 659  :       t2re           = x[ 2 + i1 ].re  -  x[ 6 + i1 ].re;

  00820	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00823	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00826	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00829	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0082c	d9 44 d0 10	 fld	 DWORD PTR [eax+edx*8+16]
  00830	d8 64 ce 30	 fsub	 DWORD PTR [esi+ecx*8+48]
  00834	d9 5d bc	 fstp	 DWORD PTR _t2re$[ebp]

; 660  :       t2im           = x[ 2 + i1 ].im  -  x[ 6 + i1 ].im;

  00837	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  0083a	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0083d	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00840	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00843	d9 44 d0 14	 fld	 DWORD PTR [eax+edx*8+20]
  00847	d8 64 ce 34	 fsub	 DWORD PTR [esi+ecx*8+52]
  0084b	d9 5d f0	 fstp	 DWORD PTR _t2im$[ebp]

; 661  :       x[ 2 + i1 ].re = x[ 2 + i1 ].re  +  x[ 6 + i1 ].re;

  0084e	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00851	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00854	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00857	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0085a	d9 44 d0 10	 fld	 DWORD PTR [eax+edx*8+16]
  0085e	d8 44 ce 30	 fadd	 DWORD PTR [esi+ecx*8+48]
  00862	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00865	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00868	d9 5c d0 10	 fstp	 DWORD PTR [eax+edx*8+16]

; 662  :       x[ 2 + i1 ].im = x[ 2 + i1 ].im  +  x[ 6 + i1 ].im;

  0086c	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  0086f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00872	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00875	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00878	d9 44 ca 14	 fld	 DWORD PTR [edx+ecx*8+20]
  0087c	d8 44 c6 34	 fadd	 DWORD PTR [esi+eax*8+52]
  00880	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00883	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00886	d9 5c ca 14	 fstp	 DWORD PTR [edx+ecx*8+20]

; 663  :       x[ 4 + i1 ].re = t1re - t2im;

  0088a	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  0088d	d8 65 f0	 fsub	 DWORD PTR _t2im$[ebp]
  00890	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00893	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00896	d9 5c c1 20	 fstp	 DWORD PTR [ecx+eax*8+32]

; 664  :       x[ 4 + i1 ].im = t1im + t2re;

  0089a	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  0089d	d8 45 bc	 fadd	 DWORD PTR _t2re$[ebp]
  008a0	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  008a3	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  008a6	d9 5c d0 24	 fstp	 DWORD PTR [eax+edx*8+36]

; 665  :       x[ 6 + i1 ].re = t1re + t2im;

  008aa	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  008ad	d8 45 f0	 fadd	 DWORD PTR _t2im$[ebp]
  008b0	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  008b3	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  008b6	d9 5c ca 30	 fstp	 DWORD PTR [edx+ecx*8+48]

; 666  :       x[ 6 + i1 ].im = t1im - t2re;

  008ba	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  008bd	d8 65 bc	 fsub	 DWORD PTR _t2re$[ebp]
  008c0	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  008c3	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  008c6	d9 5c c1 34	 fstp	 DWORD PTR [ecx+eax*8+52]

; 667  : 
; 668  :       /* ............. N/8 butterfly ................. */
; 669  :       t1re           = x[ 1 + i1 ].re  -  x[ 5 + i1 ].re;

  008ca	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  008cd	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  008d0	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  008d3	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  008d6	d9 44 d0 08	 fld	 DWORD PTR [eax+edx*8+8]
  008da	d8 64 ce 28	 fsub	 DWORD PTR [esi+ecx*8+40]
  008de	d9 5d d4	 fstp	 DWORD PTR _t1re$[ebp]

; 670  :       t1im           = x[ 1 + i1 ].im  -  x[ 5 + i1 ].im;

  008e1	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  008e4	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  008e7	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  008ea	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  008ed	d9 44 d0 0c	 fld	 DWORD PTR [eax+edx*8+12]
  008f1	d8 64 ce 2c	 fsub	 DWORD PTR [esi+ecx*8+44]
  008f5	d9 5d d0	 fstp	 DWORD PTR _t1im$[ebp]

; 671  :       x[ 1 + i1 ].re = x[ 1 + i1 ].re  +  x[ 5 + i1 ].re;

  008f8	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  008fb	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  008fe	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00901	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00904	d9 44 d0 08	 fld	 DWORD PTR [eax+edx*8+8]
  00908	d8 44 ce 28	 fadd	 DWORD PTR [esi+ecx*8+40]
  0090c	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  0090f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00912	d9 5c d0 08	 fstp	 DWORD PTR [eax+edx*8+8]

; 672  :       x[ 1 + i1 ].im = x[ 1 + i1 ].im  +  x[ 5 + i1 ].im;

  00916	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00919	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0091c	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  0091f	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00922	d9 44 ca 0c	 fld	 DWORD PTR [edx+ecx*8+12]
  00926	d8 44 c6 2c	 fadd	 DWORD PTR [esi+eax*8+44]
  0092a	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  0092d	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00930	d9 5c ca 0c	 fstp	 DWORD PTR [edx+ecx*8+12]

; 673  :       t2re           = x[ 3 + i1 ].re  -  x[ 7 + i1 ].re;

  00934	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00937	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0093a	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  0093d	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00940	d9 44 c1 18	 fld	 DWORD PTR [ecx+eax*8+24]
  00944	d8 64 d6 38	 fsub	 DWORD PTR [esi+edx*8+56]
  00948	d9 5d bc	 fstp	 DWORD PTR _t2re$[ebp]

; 674  :       t2im           = x[ 3 + i1 ].im  -  x[ 7 + i1 ].im;

  0094b	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  0094e	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00951	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00954	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00957	d9 44 c1 1c	 fld	 DWORD PTR [ecx+eax*8+28]
  0095b	d8 64 d6 3c	 fsub	 DWORD PTR [esi+edx*8+60]
  0095f	d9 5d f0	 fstp	 DWORD PTR _t2im$[ebp]

; 675  :       x[ 3 + i1 ].re = x[ 3 + i1 ].re  +  x[ 7 + i1 ].re;

  00962	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00965	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00968	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  0096b	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0096e	d9 44 c1 18	 fld	 DWORD PTR [ecx+eax*8+24]
  00972	d8 44 d6 38	 fadd	 DWORD PTR [esi+edx*8+56]
  00976	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00979	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0097c	d9 5c c1 18	 fstp	 DWORD PTR [ecx+eax*8+24]

; 676  :       x[ 3 + i1 ].im = x[ 3 + i1 ].im  +  x[ 7 + i1 ].im;

  00980	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00983	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00986	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00989	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0098c	d9 44 d0 1c	 fld	 DWORD PTR [eax+edx*8+28]
  00990	d8 44 ce 3c	 fadd	 DWORD PTR [esi+ecx*8+60]
  00994	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00997	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0099a	d9 5c d0 1c	 fstp	 DWORD PTR [eax+edx*8+28]

; 677  :       x[ 5 + i1 ].re =  V707107*( (t1re - t2im) - (t1im + t2re) );

  0099e	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  009a1	d8 65 f0	 fsub	 DWORD PTR _t2im$[ebp]
  009a4	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  009a7	d8 45 bc	 fadd	 DWORD PTR _t2re$[ebp]
  009aa	de e9		 fsubp	 ST(1), ST(0)
  009ac	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f7
  009b2	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  009b5	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  009b8	d9 5c ca 28	 fstp	 DWORD PTR [edx+ecx*8+40]

; 678  :       x[ 5 + i1 ].im =  V707107*( (t1im + t2re) + (t1re - t2im) );

  009bc	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  009bf	d8 45 bc	 fadd	 DWORD PTR _t2re$[ebp]
  009c2	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  009c5	d8 65 f0	 fsub	 DWORD PTR _t2im$[ebp]
  009c8	de c1		 faddp	 ST(1), ST(0)
  009ca	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f7
  009d0	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  009d3	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  009d6	d9 5c c1 2c	 fstp	 DWORD PTR [ecx+eax*8+44]

; 679  :       x[ 7 + i1 ].re = -V707107*( (t1re + t2im) + (t1im - t2re) );

  009da	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  009dd	d8 45 f0	 fadd	 DWORD PTR _t2im$[ebp]
  009e0	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  009e3	d8 65 bc	 fsub	 DWORD PTR _t2re$[ebp]
  009e6	de c1		 faddp	 ST(1), ST(0)
  009e8	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@bf3504f7
  009ee	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  009f1	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  009f4	d9 5c d0 38	 fstp	 DWORD PTR [eax+edx*8+56]

; 680  :       x[ 7 + i1 ].im = -V707107*( (t1im - t2re) - (t1re + t2im) );

  009f8	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  009fb	d8 65 bc	 fsub	 DWORD PTR _t2re$[ebp]
  009fe	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00a01	d8 45 f0	 fadd	 DWORD PTR _t2im$[ebp]
  00a04	de e9		 fsubp	 ST(1), ST(0)
  00a06	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@bf3504f7
  00a0c	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00a0f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00a12	d9 5c ca 3c	 fstp	 DWORD PTR [edx+ecx*8+60]

; 681  : 
; 682  :    }

  00a16	e9 89 fd ff ff	 jmp	 $L1298
$L1299:

; 683  :    is = ( id << 1 ) - n2;

  00a1b	8b 45 f4	 mov	 eax, DWORD PTR _id$[ebp]
  00a1e	d1 e0		 shl	 eax, 1
  00a20	2b 45 c0	 sub	 eax, DWORD PTR _n2$[ebp]
  00a23	89 45 e0	 mov	 DWORD PTR _is$[ebp], eax

; 684  :    id =  id << 2 ;

  00a26	8b 4d f4	 mov	 ecx, DWORD PTR _id$[ebp]
  00a29	c1 e1 02	 shl	 ecx, 2
  00a2c	89 4d f4	 mov	 DWORD PTR _id$[ebp], ecx

; 685  :    if ( is < n ) goto m20;

  00a2f	8b 55 e0	 mov	 edx, DWORD PTR _is$[ebp]
  00a32	3b 55 0c	 cmp	 edx, DWORD PTR _n$[ebp]
  00a35	7d 05		 jge	 SHORT $L1304
  00a37	e9 60 fd ff ff	 jmp	 $m20$1296
$L1304:

; 686  : 
; 687  :    if ( n == 8 ) {

  00a3c	83 7d 0c 08	 cmp	 DWORD PTR _n$[ebp], 8
  00a40	75 13		 jne	 SHORT $L1305

; 688  :       is = 0;

  00a42	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _is$[ebp], 0

; 689  :       id = 8;

  00a49	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR _id$[ebp], 8

; 690  :       goto m30;

  00a50	e9 b6 03 00 00	 jmp	 $m30$1306
$L1305:

; 691  :    }
; 692  : 
; 693  :    for ( i1 = 0 ; i1 < n ; i1+=16 ) {

  00a55	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i1$[ebp], 0
  00a5c	eb 09		 jmp	 SHORT $L1307
$L1308:
  00a5e	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00a61	83 c0 10	 add	 eax, 16			; 00000010H
  00a64	89 45 e4	 mov	 DWORD PTR _i1$[ebp], eax
$L1307:
  00a67	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00a6a	3b 4d 0c	 cmp	 ecx, DWORD PTR _n$[ebp]
  00a6d	0f 8d 8a 03 00
	00		 jge	 $L1309

; 694  : 
; 695  :       t1re           =         x[     i1 ].re  -  x[ 2 + i1 ].re;

  00a73	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00a76	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00a79	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00a7c	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00a7f	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  00a82	d8 64 ce 10	 fsub	 DWORD PTR [esi+ecx*8+16]
  00a86	d9 5d d4	 fstp	 DWORD PTR _t1re$[ebp]

; 696  :       t1im           =         x[     i1 ].im  -  x[ 2 + i1 ].im;

  00a89	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00a8c	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00a8f	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00a92	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00a95	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  00a99	d8 64 ce 14	 fsub	 DWORD PTR [esi+ecx*8+20]
  00a9d	d9 5d d0	 fstp	 DWORD PTR _t1im$[ebp]

; 697  :       t2re           =         x[ 1 + i1 ].re  -  x[ 3 + i1 ].re;

  00aa0	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00aa3	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00aa6	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00aa9	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00aac	d9 44 d0 08	 fld	 DWORD PTR [eax+edx*8+8]
  00ab0	d8 64 ce 18	 fsub	 DWORD PTR [esi+ecx*8+24]
  00ab4	d9 5d bc	 fstp	 DWORD PTR _t2re$[ebp]

; 698  :       t2im           =         x[ 1 + i1 ].im  -  x[ 3 + i1 ].im;

  00ab7	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00aba	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00abd	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00ac0	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00ac3	d9 44 d0 0c	 fld	 DWORD PTR [eax+edx*8+12]
  00ac7	d8 64 ce 1c	 fsub	 DWORD PTR [esi+ecx*8+28]
  00acb	d9 5d f0	 fstp	 DWORD PTR _t2im$[ebp]

; 699  :       t3re           =         x[     i1 ].re  +  x[ 2 + i1 ].re;

  00ace	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00ad1	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00ad4	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00ad7	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00ada	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  00add	d8 44 ce 10	 fadd	 DWORD PTR [esi+ecx*8+16]
  00ae1	d9 5d fc	 fstp	 DWORD PTR _t3re$[ebp]

; 700  :       t3im           =         x[     i1 ].im  +  x[ 2 + i1 ].im;

  00ae4	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00ae7	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00aea	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00aed	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00af0	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  00af4	d8 44 ce 14	 fadd	 DWORD PTR [esi+ecx*8+20]
  00af8	d9 5d ec	 fstp	 DWORD PTR _t3im$[ebp]

; 701  :       x[     i1 ].re = t3re + (x[ 1 + i1 ].re  +  x[ 3 + i1 ].re);

  00afb	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00afe	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00b01	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00b04	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00b07	d9 44 d0 08	 fld	 DWORD PTR [eax+edx*8+8]
  00b0b	d8 44 ce 18	 fadd	 DWORD PTR [esi+ecx*8+24]
  00b0f	d8 45 fc	 fadd	 DWORD PTR _t3re$[ebp]
  00b12	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00b15	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00b18	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 702  :       x[     i1 ].im = t3im + (x[ 1 + i1 ].im  +  x[ 3 + i1 ].im);

  00b1b	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00b1e	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00b21	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00b24	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00b27	d9 44 ca 0c	 fld	 DWORD PTR [edx+ecx*8+12]
  00b2b	d8 44 c6 1c	 fadd	 DWORD PTR [esi+eax*8+28]
  00b2f	d8 45 ec	 fadd	 DWORD PTR _t3im$[ebp]
  00b32	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00b35	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00b38	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 703  :       x[ 1 + i1 ].re = t3re - (x[ 1 + i1 ].re  +  x[ 3 + i1 ].re);

  00b3c	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00b3f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00b42	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00b45	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00b48	d9 44 c1 08	 fld	 DWORD PTR [ecx+eax*8+8]
  00b4c	d8 44 d6 18	 fadd	 DWORD PTR [esi+edx*8+24]
  00b50	d8 6d fc	 fsubr	 DWORD PTR _t3re$[ebp]
  00b53	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00b56	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00b59	d9 5c c1 08	 fstp	 DWORD PTR [ecx+eax*8+8]

; 704  :       x[ 1 + i1 ].im = t3im - (x[ 1 + i1 ].im  +  x[ 3 + i1 ].im);

  00b5d	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00b60	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00b63	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00b66	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00b69	d9 44 d0 0c	 fld	 DWORD PTR [eax+edx*8+12]
  00b6d	d8 44 ce 1c	 fadd	 DWORD PTR [esi+ecx*8+28]
  00b71	d8 6d ec	 fsubr	 DWORD PTR _t3im$[ebp]
  00b74	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00b77	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00b7a	d9 5c d0 0c	 fstp	 DWORD PTR [eax+edx*8+12]

; 705  :       x[ 2 + i1 ].re = t1re - t2im;

  00b7e	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00b81	d8 65 f0	 fsub	 DWORD PTR _t2im$[ebp]
  00b84	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00b87	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00b8a	d9 5c ca 10	 fstp	 DWORD PTR [edx+ecx*8+16]

; 706  :       x[ 2 + i1 ].im = t1im + t2re;

  00b8e	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00b91	d8 45 bc	 fadd	 DWORD PTR _t2re$[ebp]
  00b94	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00b97	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00b9a	d9 5c c1 14	 fstp	 DWORD PTR [ecx+eax*8+20]

; 707  :       x[ 3 + i1 ].re = t1re + t2im;

  00b9e	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00ba1	d8 45 f0	 fadd	 DWORD PTR _t2im$[ebp]
  00ba4	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00ba7	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00baa	d9 5c d0 18	 fstp	 DWORD PTR [eax+edx*8+24]

; 708  :       x[ 3 + i1 ].im = t1im - t2re;

  00bae	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00bb1	d8 65 bc	 fsub	 DWORD PTR _t2re$[ebp]
  00bb4	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00bb7	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00bba	d9 5c ca 1c	 fstp	 DWORD PTR [edx+ecx*8+28]

; 709  : 
; 710  :       t1re           =          x[ 4 + i1 ].re;

  00bbe	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00bc1	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00bc4	8b 54 c1 20	 mov	 edx, DWORD PTR [ecx+eax*8+32]
  00bc8	89 55 d4	 mov	 DWORD PTR _t1re$[ebp], edx

; 711  :       t1im           =          x[ 4 + i1 ].im;

  00bcb	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00bce	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00bd1	8b 54 c1 24	 mov	 edx, DWORD PTR [ecx+eax*8+36]
  00bd5	89 55 d0	 mov	 DWORD PTR _t1im$[ebp], edx

; 712  :       x[ 4 + i1 ].re = t1re  +  x[ 5 + i1 ].re;

  00bd8	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00bdb	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00bde	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00be1	d8 44 c1 28	 fadd	 DWORD PTR [ecx+eax*8+40]
  00be5	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00be8	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00beb	d9 5c d0 20	 fstp	 DWORD PTR [eax+edx*8+32]

; 713  :       x[ 4 + i1 ].im = t1im  +  x[ 5 + i1 ].im;

  00bef	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00bf2	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00bf5	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00bf8	d8 44 ca 2c	 fadd	 DWORD PTR [edx+ecx*8+44]
  00bfc	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00bff	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00c02	d9 5c c1 24	 fstp	 DWORD PTR [ecx+eax*8+36]

; 714  :       x[ 5 + i1 ].re = t1re  -  x[ 5 + i1 ].re;

  00c06	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00c09	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00c0c	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00c0f	d8 64 d0 28	 fsub	 DWORD PTR [eax+edx*8+40]
  00c13	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00c16	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00c19	d9 5c ca 28	 fstp	 DWORD PTR [edx+ecx*8+40]

; 715  :       x[ 5 + i1 ].im = t1im  -  x[ 5 + i1 ].im;

  00c1d	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00c20	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00c23	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00c26	d8 64 c1 2c	 fsub	 DWORD PTR [ecx+eax*8+44]
  00c2a	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00c2d	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00c30	d9 5c d0 2c	 fstp	 DWORD PTR [eax+edx*8+44]

; 716  :       t2re           =          x[ 6 + i1 ].re;

  00c34	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00c37	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00c3a	8b 44 ca 30	 mov	 eax, DWORD PTR [edx+ecx*8+48]
  00c3e	89 45 bc	 mov	 DWORD PTR _t2re$[ebp], eax

; 717  :       t2im           =          x[ 6 + i1 ].im;

  00c41	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00c44	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00c47	8b 44 ca 34	 mov	 eax, DWORD PTR [edx+ecx*8+52]
  00c4b	89 45 f0	 mov	 DWORD PTR _t2im$[ebp], eax

; 718  :       x[ 6 + i1 ].re = t2re  +  x[ 7 + i1 ].re;

  00c4e	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00c51	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00c54	d9 45 bc	 fld	 DWORD PTR _t2re$[ebp]
  00c57	d8 44 ca 38	 fadd	 DWORD PTR [edx+ecx*8+56]
  00c5b	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00c5e	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00c61	d9 5c c1 30	 fstp	 DWORD PTR [ecx+eax*8+48]

; 719  :       x[ 6 + i1 ].im = t2im  +  x[ 7 + i1 ].im;

  00c65	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00c68	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00c6b	d9 45 f0	 fld	 DWORD PTR _t2im$[ebp]
  00c6e	d8 44 d0 3c	 fadd	 DWORD PTR [eax+edx*8+60]
  00c72	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00c75	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00c78	d9 5c ca 34	 fstp	 DWORD PTR [edx+ecx*8+52]

; 720  :       x[ 7 + i1 ].re = t2re  -  x[ 7 + i1 ].re;

  00c7c	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00c7f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00c82	d9 45 bc	 fld	 DWORD PTR _t2re$[ebp]
  00c85	d8 64 c1 38	 fsub	 DWORD PTR [ecx+eax*8+56]
  00c89	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00c8c	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00c8f	d9 5c d0 38	 fstp	 DWORD PTR [eax+edx*8+56]

; 721  :       x[ 7 + i1 ].im = t2im  -  x[ 7 + i1 ].im;

  00c93	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00c96	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00c99	d9 45 f0	 fld	 DWORD PTR _t2im$[ebp]
  00c9c	d8 64 ca 3c	 fsub	 DWORD PTR [edx+ecx*8+60]
  00ca0	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00ca3	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00ca6	d9 5c c1 3c	 fstp	 DWORD PTR [ecx+eax*8+60]

; 722  : 
; 723  :       t1re            =           x[ 8 + i1 ].re  -  x[ 10 + i1 ].re;

  00caa	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00cad	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00cb0	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00cb3	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00cb6	d9 44 d0 40	 fld	 DWORD PTR [eax+edx*8+64]
  00cba	d8 64 ce 50	 fsub	 DWORD PTR [esi+ecx*8+80]
  00cbe	d9 5d d4	 fstp	 DWORD PTR _t1re$[ebp]

; 724  :       t1im            =           x[ 8 + i1 ].im  -  x[ 10 + i1 ].im;

  00cc1	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00cc4	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00cc7	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00cca	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00ccd	d9 44 d0 44	 fld	 DWORD PTR [eax+edx*8+68]
  00cd1	d8 64 ce 54	 fsub	 DWORD PTR [esi+ecx*8+84]
  00cd5	d9 5d d0	 fstp	 DWORD PTR _t1im$[ebp]

; 725  :       t2re            =           x[ 9 + i1 ].re  -  x[ 11 + i1 ].re;

  00cd8	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00cdb	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00cde	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00ce1	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00ce4	d9 44 d0 48	 fld	 DWORD PTR [eax+edx*8+72]
  00ce8	d8 64 ce 58	 fsub	 DWORD PTR [esi+ecx*8+88]
  00cec	d9 5d bc	 fstp	 DWORD PTR _t2re$[ebp]

; 726  :       t2im            =           x[ 9 + i1 ].im  -  x[ 11 + i1 ].im;

  00cef	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00cf2	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00cf5	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00cf8	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00cfb	d9 44 d0 4c	 fld	 DWORD PTR [eax+edx*8+76]
  00cff	d8 64 ce 5c	 fsub	 DWORD PTR [esi+ecx*8+92]
  00d03	d9 5d f0	 fstp	 DWORD PTR _t2im$[ebp]

; 727  :       t3re            =           x[ 8 + i1 ].re  +  x[ 10 + i1 ].re;

  00d06	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00d09	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00d0c	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00d0f	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00d12	d9 44 d0 40	 fld	 DWORD PTR [eax+edx*8+64]
  00d16	d8 44 ce 50	 fadd	 DWORD PTR [esi+ecx*8+80]
  00d1a	d9 5d fc	 fstp	 DWORD PTR _t3re$[ebp]

; 728  :       t3im            =           x[ 8 + i1 ].im  +  x[ 10 + i1 ].im;

  00d1d	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00d20	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00d23	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00d26	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00d29	d9 44 d0 44	 fld	 DWORD PTR [eax+edx*8+68]
  00d2d	d8 44 ce 54	 fadd	 DWORD PTR [esi+ecx*8+84]
  00d31	d9 5d ec	 fstp	 DWORD PTR _t3im$[ebp]

; 729  :       x[  8 + i1 ].re = t3re  +  (x[ 9 + i1 ].re  +  x[ 11 + i1 ].re);

  00d34	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00d37	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00d3a	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00d3d	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00d40	d9 44 d0 48	 fld	 DWORD PTR [eax+edx*8+72]
  00d44	d8 44 ce 58	 fadd	 DWORD PTR [esi+ecx*8+88]
  00d48	d8 45 fc	 fadd	 DWORD PTR _t3re$[ebp]
  00d4b	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00d4e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00d51	d9 5c d0 40	 fstp	 DWORD PTR [eax+edx*8+64]

; 730  :       x[  8 + i1 ].im = t3im  +  (x[ 9 + i1 ].im  +  x[ 11 + i1 ].im);

  00d55	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00d58	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00d5b	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00d5e	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00d61	d9 44 ca 4c	 fld	 DWORD PTR [edx+ecx*8+76]
  00d65	d8 44 c6 5c	 fadd	 DWORD PTR [esi+eax*8+92]
  00d69	d8 45 ec	 fadd	 DWORD PTR _t3im$[ebp]
  00d6c	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00d6f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00d72	d9 5c ca 44	 fstp	 DWORD PTR [edx+ecx*8+68]

; 731  :       x[  9 + i1 ].re = t3re  -  (x[ 9 + i1 ].re  +  x[ 11 + i1 ].re);

  00d76	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00d79	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00d7c	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00d7f	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00d82	d9 44 c1 48	 fld	 DWORD PTR [ecx+eax*8+72]
  00d86	d8 44 d6 58	 fadd	 DWORD PTR [esi+edx*8+88]
  00d8a	d8 6d fc	 fsubr	 DWORD PTR _t3re$[ebp]
  00d8d	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00d90	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00d93	d9 5c c1 48	 fstp	 DWORD PTR [ecx+eax*8+72]

; 732  :       x[  9 + i1 ].im = t3im  -  (x[ 9 + i1 ].im  +  x[ 11 + i1 ].im);

  00d97	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00d9a	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00d9d	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00da0	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00da3	d9 44 d0 4c	 fld	 DWORD PTR [eax+edx*8+76]
  00da7	d8 44 ce 5c	 fadd	 DWORD PTR [esi+ecx*8+92]
  00dab	d8 6d ec	 fsubr	 DWORD PTR _t3im$[ebp]
  00dae	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00db1	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00db4	d9 5c d0 4c	 fstp	 DWORD PTR [eax+edx*8+76]

; 733  :       x[ 10 + i1 ].re = t1re - t2im;

  00db8	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00dbb	d8 65 f0	 fsub	 DWORD PTR _t2im$[ebp]
  00dbe	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00dc1	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00dc4	d9 5c ca 50	 fstp	 DWORD PTR [edx+ecx*8+80]

; 734  :       x[ 10 + i1 ].im = t1im + t2re;

  00dc8	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00dcb	d8 45 bc	 fadd	 DWORD PTR _t2re$[ebp]
  00dce	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00dd1	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00dd4	d9 5c c1 54	 fstp	 DWORD PTR [ecx+eax*8+84]

; 735  :       x[ 11 + i1 ].re = t1re + t2im;

  00dd8	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00ddb	d8 45 f0	 fadd	 DWORD PTR _t2im$[ebp]
  00dde	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00de1	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00de4	d9 5c d0 58	 fstp	 DWORD PTR [eax+edx*8+88]

; 736  :       x[ 11 + i1 ].im = t1im - t2re;

  00de8	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00deb	d8 65 bc	 fsub	 DWORD PTR _t2re$[ebp]
  00dee	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00df1	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00df4	d9 5c ca 5c	 fstp	 DWORD PTR [edx+ecx*8+92]

; 737  : 
; 738  :    }

  00df8	e9 61 fc ff ff	 jmp	 $L1308
$L1309:

; 739  : 
; 740  :    is = 12;

  00dfd	c7 45 e0 0c 00
	00 00		 mov	 DWORD PTR _is$[ebp], 12	; 0000000cH

; 741  :    id = 32;

  00e04	c7 45 f4 20 00
	00 00		 mov	 DWORD PTR _id$[ebp], 32	; 00000020H
$m30$1306:

; 742  : 
; 743  :    m30:
; 744  :    for ( i1 = is ; i1 < n ; i1+=id ) {

  00e0b	8b 45 e0	 mov	 eax, DWORD PTR _is$[ebp]
  00e0e	89 45 e4	 mov	 DWORD PTR _i1$[ebp], eax
  00e11	eb 09		 jmp	 SHORT $L1310
$L1311:
  00e13	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00e16	03 4d f4	 add	 ecx, DWORD PTR _id$[ebp]
  00e19	89 4d e4	 mov	 DWORD PTR _i1$[ebp], ecx
$L1310:
  00e1c	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00e1f	3b 55 0c	 cmp	 edx, DWORD PTR _n$[ebp]
  00e22	0f 8d 50 01 00
	00		 jge	 $L1312

; 745  :       t1re           =           x[     i1 ].re  -  x[ 2 + i1 ].re;

  00e28	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00e2b	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00e2e	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00e31	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00e34	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  00e37	d8 64 d6 10	 fsub	 DWORD PTR [esi+edx*8+16]
  00e3b	d9 5d d4	 fstp	 DWORD PTR _t1re$[ebp]

; 746  :       t1im           =           x[     i1 ].im  -  x[ 2 + i1 ].im;

  00e3e	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00e41	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00e44	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00e47	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00e4a	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  00e4e	d8 64 d6 14	 fsub	 DWORD PTR [esi+edx*8+20]
  00e52	d9 5d d0	 fstp	 DWORD PTR _t1im$[ebp]

; 747  :       t2re           =           x[ 1 + i1 ].re  -  x[ 3 + i1 ].re;

  00e55	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00e58	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00e5b	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00e5e	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00e61	d9 44 c1 08	 fld	 DWORD PTR [ecx+eax*8+8]
  00e65	d8 64 d6 18	 fsub	 DWORD PTR [esi+edx*8+24]
  00e69	d9 5d bc	 fstp	 DWORD PTR _t2re$[ebp]

; 748  :       t2im           =           x[ 1 + i1 ].im  -  x[ 3 + i1 ].im;

  00e6c	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00e6f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00e72	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00e75	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00e78	d9 44 c1 0c	 fld	 DWORD PTR [ecx+eax*8+12]
  00e7c	d8 64 d6 1c	 fsub	 DWORD PTR [esi+edx*8+28]
  00e80	d9 5d f0	 fstp	 DWORD PTR _t2im$[ebp]

; 749  :       t3re           =           x[     i1 ].re  +  x[ 2 + i1 ].re;

  00e83	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00e86	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00e89	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00e8c	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00e8f	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  00e92	d8 44 d6 10	 fadd	 DWORD PTR [esi+edx*8+16]
  00e96	d9 5d fc	 fstp	 DWORD PTR _t3re$[ebp]

; 750  :       t3im           =           x[     i1 ].im  +  x[ 2 + i1 ].im;

  00e99	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00e9c	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00e9f	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00ea2	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00ea5	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  00ea9	d8 44 d6 14	 fadd	 DWORD PTR [esi+edx*8+20]
  00ead	d9 5d ec	 fstp	 DWORD PTR _t3im$[ebp]

; 751  :       x[     i1 ].re = t3re  +  (x[ 1 + i1 ].re  +  x[ 3 + i1 ].re);

  00eb0	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00eb3	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00eb6	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00eb9	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00ebc	d9 44 c1 08	 fld	 DWORD PTR [ecx+eax*8+8]
  00ec0	d8 44 d6 18	 fadd	 DWORD PTR [esi+edx*8+24]
  00ec4	d8 45 fc	 fadd	 DWORD PTR _t3re$[ebp]
  00ec7	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00eca	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00ecd	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 752  :       x[     i1 ].im = t3im  +  (x[ 1 + i1 ].im  +  x[ 3 + i1 ].im);

  00ed0	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00ed3	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00ed6	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00ed9	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00edc	d9 44 d0 0c	 fld	 DWORD PTR [eax+edx*8+12]
  00ee0	d8 44 ce 1c	 fadd	 DWORD PTR [esi+ecx*8+28]
  00ee4	d8 45 ec	 fadd	 DWORD PTR _t3im$[ebp]
  00ee7	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00eea	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00eed	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 753  :       x[ 1 + i1 ].re = t3re  -  (x[ 1 + i1 ].re  +  x[ 3 + i1 ].re);

  00ef1	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00ef4	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00ef7	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00efa	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00efd	d9 44 ca 08	 fld	 DWORD PTR [edx+ecx*8+8]
  00f01	d8 44 c6 18	 fadd	 DWORD PTR [esi+eax*8+24]
  00f05	d8 6d fc	 fsubr	 DWORD PTR _t3re$[ebp]
  00f08	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00f0b	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00f0e	d9 5c ca 08	 fstp	 DWORD PTR [edx+ecx*8+8]

; 754  :       x[ 1 + i1 ].im = t3im  -  (x[ 1 + i1 ].im  +  x[ 3 + i1 ].im);

  00f12	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00f15	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00f18	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00f1b	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00f1e	d9 44 c1 0c	 fld	 DWORD PTR [ecx+eax*8+12]
  00f22	d8 44 d6 1c	 fadd	 DWORD PTR [esi+edx*8+28]
  00f26	d8 6d ec	 fsubr	 DWORD PTR _t3im$[ebp]
  00f29	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00f2c	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00f2f	d9 5c c1 0c	 fstp	 DWORD PTR [ecx+eax*8+12]

; 755  :       x[ 2 + i1 ].re = t1re - t2im;

  00f33	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00f36	d8 65 f0	 fsub	 DWORD PTR _t2im$[ebp]
  00f39	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00f3c	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00f3f	d9 5c d0 10	 fstp	 DWORD PTR [eax+edx*8+16]

; 756  :       x[ 2 + i1 ].im = t1im + t2re;

  00f43	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00f46	d8 45 bc	 fadd	 DWORD PTR _t2re$[ebp]
  00f49	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00f4c	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00f4f	d9 5c ca 14	 fstp	 DWORD PTR [edx+ecx*8+20]

; 757  :       x[ 3 + i1 ].re = t1re + t2im;

  00f53	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00f56	d8 45 f0	 fadd	 DWORD PTR _t2im$[ebp]
  00f59	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00f5c	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00f5f	d9 5c c1 18	 fstp	 DWORD PTR [ecx+eax*8+24]

; 758  :       x[ 3 + i1 ].im = t1im - t2re;

  00f63	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00f66	d8 65 bc	 fsub	 DWORD PTR _t2re$[ebp]
  00f69	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00f6c	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00f6f	d9 5c d0 1c	 fstp	 DWORD PTR [eax+edx*8+28]

; 759  :    }

  00f73	e9 9b fe ff ff	 jmp	 $L1311
$L1312:

; 760  :    is = (id << 1) - 4;

  00f78	8b 4d f4	 mov	 ecx, DWORD PTR _id$[ebp]
  00f7b	8d 54 09 fc	 lea	 edx, DWORD PTR [ecx+ecx-4]
  00f7f	89 55 e0	 mov	 DWORD PTR _is$[ebp], edx

; 761  :    id =  id << 2;

  00f82	8b 45 f4	 mov	 eax, DWORD PTR _id$[ebp]
  00f85	c1 e0 02	 shl	 eax, 2
  00f88	89 45 f4	 mov	 DWORD PTR _id$[ebp], eax

; 762  :    if ( is < n ) goto m30;

  00f8b	8b 4d e0	 mov	 ecx, DWORD PTR _is$[ebp]
  00f8e	3b 4d 0c	 cmp	 ecx, DWORD PTR _n$[ebp]
  00f91	7d 05		 jge	 SHORT $L1313
  00f93	e9 73 fe ff ff	 jmp	 $m30$1306
$L1313:

; 763  : 
; 764  :    if ( n == 8 ) {

  00f98	83 7d 0c 08	 cmp	 DWORD PTR _n$[ebp], 8
  00f9c	0f 85 f1 00 00
	00		 jne	 $L1314

; 765  :       i1 = 4;

  00fa2	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _i1$[ebp], 4

; 766  :       t1re           =          x[     i1 ].re;

  00fa9	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00fac	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00faf	8b 0c d0	 mov	 ecx, DWORD PTR [eax+edx*8]
  00fb2	89 4d d4	 mov	 DWORD PTR _t1re$[ebp], ecx

; 767  :       t1im           =          x[     i1 ].im;

  00fb5	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00fb8	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00fbb	8b 4c d0 04	 mov	 ecx, DWORD PTR [eax+edx*8+4]
  00fbf	89 4d d0	 mov	 DWORD PTR _t1im$[ebp], ecx

; 768  :       x[     i1 ].re = t1re  +  x[ 1 + i1 ].re;

  00fc2	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00fc5	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00fc8	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00fcb	d8 44 d0 08	 fadd	 DWORD PTR [eax+edx*8+8]
  00fcf	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00fd2	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00fd5	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 769  :       x[     i1 ].im = t1im  +  x[ 1 + i1 ].im;

  00fd8	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00fdb	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00fde	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  00fe1	d8 44 c1 0c	 fadd	 DWORD PTR [ecx+eax*8+12]
  00fe5	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  00fe8	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00feb	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 770  :       x[ 1 + i1 ].re = t1re  -  x[ 1 + i1 ].re;

  00fef	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  00ff2	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00ff5	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  00ff8	d8 64 ca 08	 fsub	 DWORD PTR [edx+ecx*8+8]
  00ffc	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  00fff	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  01002	d9 5c c1 08	 fstp	 DWORD PTR [ecx+eax*8+8]

; 771  :       x[ 1 + i1 ].im = t1im  -  x[ 1 + i1 ].im;

  01006	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  01009	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0100c	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  0100f	d8 64 d0 0c	 fsub	 DWORD PTR [eax+edx*8+12]
  01013	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  01016	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  01019	d9 5c ca 0c	 fstp	 DWORD PTR [edx+ecx*8+12]

; 772  :       t2re           =          x[ 2 + i1 ].re;

  0101d	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  01020	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  01023	8b 54 c1 10	 mov	 edx, DWORD PTR [ecx+eax*8+16]
  01027	89 55 bc	 mov	 DWORD PTR _t2re$[ebp], edx

; 773  :       t2im           =          x[ 2 + i1 ].im;

  0102a	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  0102d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  01030	8b 54 c1 14	 mov	 edx, DWORD PTR [ecx+eax*8+20]
  01034	89 55 f0	 mov	 DWORD PTR _t2im$[ebp], edx

; 774  :       x[ 2 + i1 ].re = t2re  +  x[ 3 + i1 ].re;

  01037	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  0103a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0103d	d9 45 bc	 fld	 DWORD PTR _t2re$[ebp]
  01040	d8 44 c1 18	 fadd	 DWORD PTR [ecx+eax*8+24]
  01044	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  01047	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0104a	d9 5c d0 10	 fstp	 DWORD PTR [eax+edx*8+16]

; 775  :       x[ 2 + i1 ].im = t2im  +  x[ 3 + i1 ].im;

  0104e	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  01051	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  01054	d9 45 f0	 fld	 DWORD PTR _t2im$[ebp]
  01057	d8 44 ca 1c	 fadd	 DWORD PTR [edx+ecx*8+28]
  0105b	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  0105e	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  01061	d9 5c c1 14	 fstp	 DWORD PTR [ecx+eax*8+20]

; 776  :       x[ 3 + i1 ].re = t2re  -  x[ 3 + i1 ].re;

  01065	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  01068	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0106b	d9 45 bc	 fld	 DWORD PTR _t2re$[ebp]
  0106e	d8 64 d0 18	 fsub	 DWORD PTR [eax+edx*8+24]
  01072	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  01075	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  01078	d9 5c ca 18	 fstp	 DWORD PTR [edx+ecx*8+24]

; 777  :       x[ 3 + i1 ].im = t2im  -  x[ 3 + i1 ].im;

  0107c	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  0107f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  01082	d9 45 f0	 fld	 DWORD PTR _t2im$[ebp]
  01085	d8 64 c1 1c	 fsub	 DWORD PTR [ecx+eax*8+28]
  01089	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  0108c	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0108f	d9 5c d0 1c	 fstp	 DWORD PTR [eax+edx*8+28]
$L1314:

; 778  :    }
; 779  : 
; 780  :    is = 28;

  01093	c7 45 e0 1c 00
	00 00		 mov	 DWORD PTR _is$[ebp], 28	; 0000001cH

; 781  :    id = 64;

  0109a	c7 45 f4 40 00
	00 00		 mov	 DWORD PTR _id$[ebp], 64	; 00000040H
$m40$1315:

; 782  :    m40:
; 783  :    for ( i1 = is; i1 < n ; i1+=id ) {

  010a1	8b 4d e0	 mov	 ecx, DWORD PTR _is$[ebp]
  010a4	89 4d e4	 mov	 DWORD PTR _i1$[ebp], ecx
  010a7	eb 09		 jmp	 SHORT $L1316
$L1317:
  010a9	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  010ac	03 55 f4	 add	 edx, DWORD PTR _id$[ebp]
  010af	89 55 e4	 mov	 DWORD PTR _i1$[ebp], edx
$L1316:
  010b2	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  010b5	3b 45 0c	 cmp	 eax, DWORD PTR _n$[ebp]
  010b8	0f 8d ef 00 00
	00		 jge	 $L1318

; 784  :       t1re           =          x[     i1 ].re;

  010be	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  010c1	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  010c4	8b 04 ca	 mov	 eax, DWORD PTR [edx+ecx*8]
  010c7	89 45 d4	 mov	 DWORD PTR _t1re$[ebp], eax

; 785  :       t1im           =          x[     i1 ].im;

  010ca	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  010cd	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  010d0	8b 44 ca 04	 mov	 eax, DWORD PTR [edx+ecx*8+4]
  010d4	89 45 d0	 mov	 DWORD PTR _t1im$[ebp], eax

; 786  :       x[     i1 ].re = t1re  +  x[ 1 + i1 ].re;

  010d7	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  010da	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  010dd	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  010e0	d8 44 ca 08	 fadd	 DWORD PTR [edx+ecx*8+8]
  010e4	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  010e7	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  010ea	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 787  :       x[     i1 ].im = t1im  +  x[ 1 + i1 ].im;

  010ed	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  010f0	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  010f3	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  010f6	d8 44 d0 0c	 fadd	 DWORD PTR [eax+edx*8+12]
  010fa	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  010fd	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  01100	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 788  :       x[ 1 + i1 ].re = t1re  -  x[ 1 + i1 ].re;

  01104	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  01107	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0110a	d9 45 d4	 fld	 DWORD PTR _t1re$[ebp]
  0110d	d8 64 c1 08	 fsub	 DWORD PTR [ecx+eax*8+8]
  01111	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  01114	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  01117	d9 5c d0 08	 fstp	 DWORD PTR [eax+edx*8+8]

; 789  :       x[ 1 + i1 ].im = t1im  -  x[ 1 + i1 ].im;

  0111b	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  0111e	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  01121	d9 45 d0	 fld	 DWORD PTR _t1im$[ebp]
  01124	d8 64 ca 0c	 fsub	 DWORD PTR [edx+ecx*8+12]
  01128	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  0112b	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0112e	d9 5c c1 0c	 fstp	 DWORD PTR [ecx+eax*8+12]

; 790  :       t2re           =          x[ 2 + i1 ].re;

  01132	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  01135	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  01138	8b 4c d0 10	 mov	 ecx, DWORD PTR [eax+edx*8+16]
  0113c	89 4d bc	 mov	 DWORD PTR _t2re$[ebp], ecx

; 791  :       t2im           =          x[ 2 + i1 ].im;

  0113f	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  01142	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  01145	8b 4c d0 14	 mov	 ecx, DWORD PTR [eax+edx*8+20]
  01149	89 4d f0	 mov	 DWORD PTR _t2im$[ebp], ecx

; 792  :       x[ 2 + i1 ].re = t2re  +  x[ 3 + i1 ].re;

  0114c	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  0114f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  01152	d9 45 bc	 fld	 DWORD PTR _t2re$[ebp]
  01155	d8 44 d0 18	 fadd	 DWORD PTR [eax+edx*8+24]
  01159	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  0115c	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0115f	d9 5c ca 10	 fstp	 DWORD PTR [edx+ecx*8+16]

; 793  :       x[ 2 + i1 ].im = t2im  +  x[ 3 + i1 ].im;

  01163	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  01166	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  01169	d9 45 f0	 fld	 DWORD PTR _t2im$[ebp]
  0116c	d8 44 c1 1c	 fadd	 DWORD PTR [ecx+eax*8+28]
  01170	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  01173	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  01176	d9 5c d0 14	 fstp	 DWORD PTR [eax+edx*8+20]

; 794  :       x[ 3 + i1 ].re = t2re  -  x[ 3 + i1 ].re;

  0117a	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  0117d	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  01180	d9 45 bc	 fld	 DWORD PTR _t2re$[ebp]
  01183	d8 64 ca 18	 fsub	 DWORD PTR [edx+ecx*8+24]
  01187	8b 45 e4	 mov	 eax, DWORD PTR _i1$[ebp]
  0118a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0118d	d9 5c c1 18	 fstp	 DWORD PTR [ecx+eax*8+24]

; 795  :       x[ 3 + i1 ].im = t2im  -  x[ 3 + i1 ].im;

  01191	8b 55 e4	 mov	 edx, DWORD PTR _i1$[ebp]
  01194	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  01197	d9 45 f0	 fld	 DWORD PTR _t2im$[ebp]
  0119a	d8 64 d0 1c	 fsub	 DWORD PTR [eax+edx*8+28]
  0119e	8b 4d e4	 mov	 ecx, DWORD PTR _i1$[ebp]
  011a1	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  011a4	d9 5c ca 1c	 fstp	 DWORD PTR [edx+ecx*8+28]

; 796  :    }

  011a8	e9 fc fe ff ff	 jmp	 $L1317
$L1318:

; 797  :    is = (id << 1) - 4;

  011ad	8b 45 f4	 mov	 eax, DWORD PTR _id$[ebp]
  011b0	8d 4c 00 fc	 lea	 ecx, DWORD PTR [eax+eax-4]
  011b4	89 4d e0	 mov	 DWORD PTR _is$[ebp], ecx

; 798  :    id =  id << 2;

  011b7	8b 55 f4	 mov	 edx, DWORD PTR _id$[ebp]
  011ba	c1 e2 02	 shl	 edx, 2
  011bd	89 55 f4	 mov	 DWORD PTR _id$[ebp], edx

; 799  :    if ( is < n ) goto m40;

  011c0	8b 45 e0	 mov	 eax, DWORD PTR _is$[ebp]
  011c3	3b 45 0c	 cmp	 eax, DWORD PTR _n$[ebp]
  011c6	7d 05		 jge	 SHORT $L1259
  011c8	e9 d4 fe ff ff	 jmp	 $m40$1315
$L1259:

; 800  : 
; 801  :    return;
; 802  : }  /* nspcUndSplit_FFT_inverse */

  011cd	5e		 pop	 esi
  011ce	8b e5		 mov	 esp, ebp
  011d0	5d		 pop	 ebp
  011d1	c2 0c 00	 ret	 12			; 0000000cH
_nspcUndSplit_FFT_inverse@12 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT _nspcUndRadix2_FFT@16
_TEXT	SEGMENT
tv86 = -164
_m$ = -160
_i2$ = -156
_kii$ = -152
_j$ = -148
_t11$ = -144
_k1$ = -136
_ik2$ = -132
_t$ = -128
_k2$ = -120
_t1$ = -116
_mmax$ = -108
_k$ = -104
_i4$ = -100
_kkj2$ = -96
_j1$ = -92
_ki2$ = -88
_i3$ = -84
_ki$ = -80
_kj$ = -76
_kkj$ = -72
_temp1$ = -68
_nn$ = -60
_kk$ = -56
_kkj1$ = -52
_temp$ = -48
_kk2$ = -40
_ik1$ = -36
_i1$ = -32
_kk1$ = -28
_t01$ = -24
_ki1$ = -16
_i$ = -12
_nj$ = -8
_istep$ = -4
_d$ = 8
_n$ = 12
_inv$ = 16
_w$ = 20
_nspcUndRadix2_FFT@16 PROC NEAR				; COMDAT

; 890  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	56		 push	 esi

; 891  :   int     nn=0, m;

  0000a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _nn$[ebp], 0

; 892  :   int     mmax=0, k, k1, k2, j1, i1, i2, i3, i4;

  00011	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _mmax$[ebp], 0

; 893  :   int     kk, kk1, kk2, ki, kii, ki1, ki2, ik1=0, ik2;

  00018	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _ik1$[ebp], 0

; 894  :   int     j, istep, i, nj, kj, kkj, kkj1, kkj2;
; 895  :   SCplx   t, t1, temp, temp1, t01, t11;
; 896  : 
; 897  :   if ( n < 1 ) return;

  0001f	83 7d 0c 01	 cmp	 DWORD PTR _n$[ebp], 1
  00023	7d 05		 jge	 SHORT $L1385
  00025	e9 d5 20 00 00	 jmp	 $norm$1458
$L1385:

; 898  : 
; 899  :   if ( n == 2 ) {

  0002a	83 7d 0c 02	 cmp	 DWORD PTR _n$[ebp], 2
  0002e	75 56		 jne	 SHORT $L1386

; 900  :       temp.re  = d[0].re - d[1].re;

  00030	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00036	d9 00		 fld	 DWORD PTR [eax]
  00038	d8 61 08	 fsub	 DWORD PTR [ecx+8]
  0003b	d9 5d d0	 fstp	 DWORD PTR _temp$[ebp]

; 901  :       temp.im  = d[0].im - d[1].im;

  0003e	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00041	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00044	d9 42 04	 fld	 DWORD PTR [edx+4]
  00047	d8 60 0c	 fsub	 DWORD PTR [eax+12]
  0004a	d9 5d d4	 fstp	 DWORD PTR _temp$[ebp+4]

; 902  :       d[0].re  = d[0].re + d[1].re;

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00050	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00053	d9 01		 fld	 DWORD PTR [ecx]
  00055	d8 42 08	 fadd	 DWORD PTR [edx+8]
  00058	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0005b	d9 18		 fstp	 DWORD PTR [eax]

; 903  :       d[0].im  = d[0].im + d[1].im;

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00060	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00063	d9 41 04	 fld	 DWORD PTR [ecx+4]
  00066	d8 42 0c	 fadd	 DWORD PTR [edx+12]
  00069	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0006c	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 904  :       d[1].re  = temp.re;

  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00072	8b 55 d0	 mov	 edx, DWORD PTR _temp$[ebp]
  00075	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 905  :       d[1].im  = temp.im;

  00078	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0007b	8b 4d d4	 mov	 ecx, DWORD PTR _temp$[ebp+4]
  0007e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 906  :       return;

  00081	e9 79 20 00 00	 jmp	 $norm$1458
$L1386:

; 907  :   }
; 908  : 
; 909  :   m = n<SizeBlock ? n : SizeBlock;

  00086	81 7d 0c 00 04
	00 00		 cmp	 DWORD PTR _n$[ebp], 1024 ; 00000400H
  0008d	7d 0b		 jge	 SHORT $L1701
  0008f	8b 55 0c	 mov	 edx, DWORD PTR _n$[ebp]
  00092	89 95 5c ff ff
	ff		 mov	 DWORD PTR tv86[ebp], edx
  00098	eb 0a		 jmp	 SHORT $L1702
$L1701:
  0009a	c7 85 5c ff ff
	ff 00 04 00 00	 mov	 DWORD PTR tv86[ebp], 1024 ; 00000400H
$L1702:
  000a4	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR tv86[ebp]
  000aa	89 85 60 ff ff
	ff		 mov	 DWORD PTR _m$[ebp], eax

; 910  :   if (inv<0) goto inverse;

  000b0	83 7d 10 00	 cmp	 DWORD PTR _inv$[ebp], 0
  000b4	7d 05		 jge	 SHORT $L1387
  000b6	e9 16 10 00 00	 jmp	 $inverse$1388
$L1387:

; 911  : 
; 912  :   for (j1=0; j1<n; j1+=m) {

  000bb	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _j1$[ebp], 0
  000c2	eb 0c		 jmp	 SHORT $L1389
$L1390:
  000c4	8b 4d a4	 mov	 ecx, DWORD PTR _j1$[ebp]
  000c7	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _m$[ebp]
  000cd	89 4d a4	 mov	 DWORD PTR _j1$[ebp], ecx
$L1389:
  000d0	8b 55 a4	 mov	 edx, DWORD PTR _j1$[ebp]
  000d3	3b 55 0c	 cmp	 edx, DWORD PTR _n$[ebp]
  000d6	0f 8d 56 0b 00
	00		 jge	 $L1391

; 913  : 
; 914  :     kk  = j1-3;

  000dc	8b 45 a4	 mov	 eax, DWORD PTR _j1$[ebp]
  000df	83 e8 03	 sub	 eax, 3
  000e2	89 45 c8	 mov	 DWORD PTR _kk$[ebp], eax

; 915  :     kk1 = j1-2;

  000e5	8b 4d a4	 mov	 ecx, DWORD PTR _j1$[ebp]
  000e8	83 e9 02	 sub	 ecx, 2
  000eb	89 4d e4	 mov	 DWORD PTR _kk1$[ebp], ecx

; 916  :     kk2 = j1-1;

  000ee	8b 55 a4	 mov	 edx, DWORD PTR _j1$[ebp]
  000f1	83 ea 01	 sub	 edx, 1
  000f4	89 55 d8	 mov	 DWORD PTR _kk2$[ebp], edx

; 917  :     for (j=j1; j<j1+m; j+=4) {

  000f7	8b 45 a4	 mov	 eax, DWORD PTR _j1$[ebp]
  000fa	89 85 6c ff ff
	ff		 mov	 DWORD PTR _j$[ebp], eax
  00100	eb 0f		 jmp	 SHORT $L1392
$L1393:
  00102	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  00108	83 c1 04	 add	 ecx, 4
  0010b	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _j$[ebp], ecx
$L1392:
  00111	8b 55 a4	 mov	 edx, DWORD PTR _j1$[ebp]
  00114	03 95 60 ff ff
	ff		 add	 edx, DWORD PTR _m$[ebp]
  0011a	39 95 6c ff ff
	ff		 cmp	 DWORD PTR _j$[ebp], edx
  00120	0f 8d 58 01 00
	00		 jge	 $L1394

; 918  : 
; 919  :       kk2 += 4;

  00126	8b 45 d8	 mov	 eax, DWORD PTR _kk2$[ebp]
  00129	83 c0 04	 add	 eax, 4
  0012c	89 45 d8	 mov	 DWORD PTR _kk2$[ebp], eax

; 920  :       kk  += 4;

  0012f	8b 4d c8	 mov	 ecx, DWORD PTR _kk$[ebp]
  00132	83 c1 04	 add	 ecx, 4
  00135	89 4d c8	 mov	 DWORD PTR _kk$[ebp], ecx

; 921  :       kk1 += 4;

  00138	8b 55 e4	 mov	 edx, DWORD PTR _kk1$[ebp]
  0013b	83 c2 04	 add	 edx, 4
  0013e	89 55 e4	 mov	 DWORD PTR _kk1$[ebp], edx

; 922  : 
; 923  :       temp.re  = d[j].re - d[kk].re;

  00141	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00147	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0014a	8b 55 c8	 mov	 edx, DWORD PTR _kk$[ebp]
  0014d	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00150	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  00153	d8 24 d6	 fsub	 DWORD PTR [esi+edx*8]
  00156	d9 5d d0	 fstp	 DWORD PTR _temp$[ebp]

; 924  :       temp1.re = d[kk1].im - d[kk2].im;

  00159	8b 45 e4	 mov	 eax, DWORD PTR _kk1$[ebp]
  0015c	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0015f	8b 55 d8	 mov	 edx, DWORD PTR _kk2$[ebp]
  00162	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00165	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  00169	d8 64 d6 04	 fsub	 DWORD PTR [esi+edx*8+4]
  0016d	d9 5d bc	 fstp	 DWORD PTR _temp1$[ebp]

; 925  :       temp.im  = d[j].im - d[kk].im;

  00170	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00176	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00179	8b 55 c8	 mov	 edx, DWORD PTR _kk$[ebp]
  0017c	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0017f	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  00183	d8 64 d6 04	 fsub	 DWORD PTR [esi+edx*8+4]
  00187	d9 5d d4	 fstp	 DWORD PTR _temp$[ebp+4]

; 926  :       temp1.im = d[kk2].re - d[kk1].re;

  0018a	8b 45 d8	 mov	 eax, DWORD PTR _kk2$[ebp]
  0018d	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00190	8b 55 e4	 mov	 edx, DWORD PTR _kk1$[ebp]
  00193	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00196	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  00199	d8 24 d6	 fsub	 DWORD PTR [esi+edx*8]
  0019c	d9 5d c0	 fstp	 DWORD PTR _temp1$[ebp+4]

; 927  :       d[j].re   = (t.re  = d[j].re + d[kk].re)
; 928  :                 + (t1.re = d[kk1].re + d[kk2].re);

  0019f	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  001a5	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  001a8	8b 55 c8	 mov	 edx, DWORD PTR _kk$[ebp]
  001ab	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  001ae	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  001b1	d8 04 d6	 fadd	 DWORD PTR [esi+edx*8]
  001b4	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]
  001b7	8b 45 e4	 mov	 eax, DWORD PTR _kk1$[ebp]
  001ba	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  001bd	8b 55 d8	 mov	 edx, DWORD PTR _kk2$[ebp]
  001c0	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  001c3	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  001c6	d8 04 d6	 fadd	 DWORD PTR [esi+edx*8]
  001c9	d9 55 8c	 fst	 DWORD PTR _t1$[ebp]
  001cc	d8 45 80	 fadd	 DWORD PTR _t$[ebp]
  001cf	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  001d5	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  001d8	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 929  :       d[j].im   = (t.im  = d[j].im + d[kk].im)
; 930  :                 + (t1.im = d[kk1].im + d[kk2].im);

  001db	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  001e1	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  001e4	8b 4d c8	 mov	 ecx, DWORD PTR _kk$[ebp]
  001e7	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  001ea	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  001ee	d8 44 ce 04	 fadd	 DWORD PTR [esi+ecx*8+4]
  001f2	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]
  001f5	8b 55 e4	 mov	 edx, DWORD PTR _kk1$[ebp]
  001f8	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  001fb	8b 4d d8	 mov	 ecx, DWORD PTR _kk2$[ebp]
  001fe	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00201	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  00205	d8 44 ce 04	 fadd	 DWORD PTR [esi+ecx*8+4]
  00209	d9 55 90	 fst	 DWORD PTR _t1$[ebp+4]
  0020c	d8 45 84	 fadd	 DWORD PTR _t$[ebp+4]
  0020f	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  00215	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00218	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 931  :       d[kk].re  = temp.re + temp1.re;

  0021c	d9 45 d0	 fld	 DWORD PTR _temp$[ebp]
  0021f	d8 45 bc	 fadd	 DWORD PTR _temp1$[ebp]
  00222	8b 4d c8	 mov	 ecx, DWORD PTR _kk$[ebp]
  00225	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00228	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 932  :       d[kk].im  = temp.im + temp1.im;

  0022b	d9 45 d4	 fld	 DWORD PTR _temp$[ebp+4]
  0022e	d8 45 c0	 fadd	 DWORD PTR _temp1$[ebp+4]
  00231	8b 45 c8	 mov	 eax, DWORD PTR _kk$[ebp]
  00234	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00237	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 933  :       d[kk1].re = t.re - t1.re;

  0023b	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  0023e	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  00241	8b 55 e4	 mov	 edx, DWORD PTR _kk1$[ebp]
  00244	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00247	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 934  :       d[kk1].im = t.im - t1.im;

  0024a	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  0024d	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  00250	8b 4d e4	 mov	 ecx, DWORD PTR _kk1$[ebp]
  00253	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00256	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 935  :       d[kk2].re = temp.re - temp1.re;

  0025a	d9 45 d0	 fld	 DWORD PTR _temp$[ebp]
  0025d	d8 65 bc	 fsub	 DWORD PTR _temp1$[ebp]
  00260	8b 45 d8	 mov	 eax, DWORD PTR _kk2$[ebp]
  00263	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00266	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 936  :       d[kk2].im = temp.im - temp1.im;

  00269	d9 45 d4	 fld	 DWORD PTR _temp$[ebp+4]
  0026c	d8 65 c0	 fsub	 DWORD PTR _temp1$[ebp+4]
  0026f	8b 55 d8	 mov	 edx, DWORD PTR _kk2$[ebp]
  00272	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00275	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 937  :     } /* for */

  00279	e9 84 fe ff ff	 jmp	 $L1393
$L1394:

; 938  :     nn = 4;

  0027e	c7 45 c4 04 00
	00 00		 mov	 DWORD PTR _nn$[ebp], 4

; 939  :     mmax = 8;

  00285	c7 45 94 08 00
	00 00		 mov	 DWORD PTR _mmax$[ebp], 8

; 940  :     istep = 16;

  0028c	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR _istep$[ebp], 16 ; 00000010H

; 941  :     if (nn==n) { return; }

  00293	8b 4d c4	 mov	 ecx, DWORD PTR _nn$[ebp]
  00296	3b 4d 0c	 cmp	 ecx, DWORD PTR _n$[ebp]
  00299	75 05		 jne	 SHORT $L1395
  0029b	e9 5f 1e 00 00	 jmp	 $norm$1458
$L1395:

; 942  :     ik1 = n>>3;

  002a0	8b 55 0c	 mov	 edx, DWORD PTR _n$[ebp]
  002a3	c1 fa 03	 sar	 edx, 3
  002a6	89 55 dc	 mov	 DWORD PTR _ik1$[ebp], edx

; 943  :     ik2 = n>>4;

  002a9	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]
  002ac	c1 f8 04	 sar	 eax, 4
  002af	89 85 7c ff ff
	ff		 mov	 DWORD PTR _ik2$[ebp], eax
$nextBlock$1396:

; 944  :  nextBlock:
; 945  : 
; 946  :     if (istep>n) goto label5;

  002b5	8b 4d fc	 mov	 ecx, DWORD PTR _istep$[ebp]
  002b8	3b 4d 0c	 cmp	 ecx, DWORD PTR _n$[ebp]
  002bb	7e 05		 jle	 SHORT $L1397
  002bd	e9 39 0c 00 00	 jmp	 $label5$1398
$L1397:

; 947  :     kk2 = (kk = j1+nn-istep) + mmax;

  002c2	8b 55 a4	 mov	 edx, DWORD PTR _j1$[ebp]
  002c5	03 55 c4	 add	 edx, DWORD PTR _nn$[ebp]
  002c8	2b 55 fc	 sub	 edx, DWORD PTR _istep$[ebp]
  002cb	89 55 c8	 mov	 DWORD PTR _kk$[ebp], edx
  002ce	8b 45 c8	 mov	 eax, DWORD PTR _kk$[ebp]
  002d1	03 45 94	 add	 eax, DWORD PTR _mmax$[ebp]
  002d4	89 45 d8	 mov	 DWORD PTR _kk2$[ebp], eax

; 948  :     kk1 = j1+mmax-istep;

  002d7	8b 4d a4	 mov	 ecx, DWORD PTR _j1$[ebp]
  002da	03 4d 94	 add	 ecx, DWORD PTR _mmax$[ebp]
  002dd	2b 4d fc	 sub	 ecx, DWORD PTR _istep$[ebp]
  002e0	89 4d e4	 mov	 DWORD PTR _kk1$[ebp], ecx

; 949  :     nj = nn>>1;

  002e3	8b 55 c4	 mov	 edx, DWORD PTR _nn$[ebp]
  002e6	d1 fa		 sar	 edx, 1
  002e8	89 55 f8	 mov	 DWORD PTR _nj$[ebp], edx

; 950  :     for (j=j1; j<j1+m; j+=istep) {

  002eb	8b 45 a4	 mov	 eax, DWORD PTR _j1$[ebp]
  002ee	89 85 6c ff ff
	ff		 mov	 DWORD PTR _j$[ebp], eax
  002f4	eb 0f		 jmp	 SHORT $L1399
$L1400:
  002f6	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  002fc	03 4d fc	 add	 ecx, DWORD PTR _istep$[ebp]
  002ff	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _j$[ebp], ecx
$L1399:
  00305	8b 55 a4	 mov	 edx, DWORD PTR _j1$[ebp]
  00308	03 95 60 ff ff
	ff		 add	 edx, DWORD PTR _m$[ebp]
  0030e	39 95 6c ff ff
	ff		 cmp	 DWORD PTR _j$[ebp], edx
  00314	0f 8d d3 08 00
	00		 jge	 $L1401

; 951  :       kk2 += istep;

  0031a	8b 45 d8	 mov	 eax, DWORD PTR _kk2$[ebp]
  0031d	03 45 fc	 add	 eax, DWORD PTR _istep$[ebp]
  00320	89 45 d8	 mov	 DWORD PTR _kk2$[ebp], eax

; 952  :       kk  += istep;

  00323	8b 4d c8	 mov	 ecx, DWORD PTR _kk$[ebp]
  00326	03 4d fc	 add	 ecx, DWORD PTR _istep$[ebp]
  00329	89 4d c8	 mov	 DWORD PTR _kk$[ebp], ecx

; 953  :       kk1 += istep;

  0032c	8b 55 e4	 mov	 edx, DWORD PTR _kk1$[ebp]
  0032f	03 55 fc	 add	 edx, DWORD PTR _istep$[ebp]
  00332	89 55 e4	 mov	 DWORD PTR _kk1$[ebp], edx

; 954  : 
; 955  :       temp.re  = d[j].re - d[kk].re;

  00335	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  0033b	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0033e	8b 55 c8	 mov	 edx, DWORD PTR _kk$[ebp]
  00341	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00344	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  00347	d8 24 d6	 fsub	 DWORD PTR [esi+edx*8]
  0034a	d9 5d d0	 fstp	 DWORD PTR _temp$[ebp]

; 956  :       temp.im  = d[j].im - d[kk].im;

  0034d	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00353	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00356	8b 55 c8	 mov	 edx, DWORD PTR _kk$[ebp]
  00359	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0035c	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  00360	d8 64 d6 04	 fsub	 DWORD PTR [esi+edx*8+4]
  00364	d9 5d d4	 fstp	 DWORD PTR _temp$[ebp+4]

; 957  :       temp1.re = d[kk1].im - d[kk2].im;

  00367	8b 45 e4	 mov	 eax, DWORD PTR _kk1$[ebp]
  0036a	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0036d	8b 55 d8	 mov	 edx, DWORD PTR _kk2$[ebp]
  00370	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00373	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  00377	d8 64 d6 04	 fsub	 DWORD PTR [esi+edx*8+4]
  0037b	d9 5d bc	 fstp	 DWORD PTR _temp1$[ebp]

; 958  :       temp1.im = d[kk2].re - d[kk1].re;

  0037e	8b 45 d8	 mov	 eax, DWORD PTR _kk2$[ebp]
  00381	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00384	8b 55 e4	 mov	 edx, DWORD PTR _kk1$[ebp]
  00387	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0038a	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  0038d	d8 24 d6	 fsub	 DWORD PTR [esi+edx*8]
  00390	d9 5d c0	 fstp	 DWORD PTR _temp1$[ebp+4]

; 959  : 
; 960  :       t.re      = d[j].re + d[kk].re;

  00393	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00399	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0039c	8b 55 c8	 mov	 edx, DWORD PTR _kk$[ebp]
  0039f	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  003a2	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  003a5	d8 04 d6	 fadd	 DWORD PTR [esi+edx*8]
  003a8	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 961  :       t1.re     = d[kk1].re + d[kk2].re;

  003ab	8b 45 e4	 mov	 eax, DWORD PTR _kk1$[ebp]
  003ae	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  003b1	8b 55 d8	 mov	 edx, DWORD PTR _kk2$[ebp]
  003b4	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  003b7	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  003ba	d8 04 d6	 fadd	 DWORD PTR [esi+edx*8]
  003bd	d9 5d 8c	 fstp	 DWORD PTR _t1$[ebp]

; 962  :       t.im      = d[j].im + d[kk].im;

  003c0	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  003c6	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  003c9	8b 55 c8	 mov	 edx, DWORD PTR _kk$[ebp]
  003cc	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  003cf	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  003d3	d8 44 d6 04	 fadd	 DWORD PTR [esi+edx*8+4]
  003d7	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 963  :       t1.im     = d[kk1].im + d[kk2].im;

  003da	8b 45 e4	 mov	 eax, DWORD PTR _kk1$[ebp]
  003dd	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  003e0	8b 55 d8	 mov	 edx, DWORD PTR _kk2$[ebp]
  003e3	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  003e6	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  003ea	d8 44 d6 04	 fadd	 DWORD PTR [esi+edx*8+4]
  003ee	d9 5d 90	 fstp	 DWORD PTR _t1$[ebp+4]

; 964  :       d[j].re   = t.re + t1.re;

  003f1	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  003f4	d8 45 8c	 fadd	 DWORD PTR _t1$[ebp]
  003f7	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  003fd	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00400	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 965  :       d[j].im   = t.im + t1.im;

  00403	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  00406	d8 45 90	 fadd	 DWORD PTR _t1$[ebp+4]
  00409	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  0040f	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00412	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 966  : 
; 967  :       d[kk].re  = temp.re + temp1.re;

  00416	d9 45 d0	 fld	 DWORD PTR _temp$[ebp]
  00419	d8 45 bc	 fadd	 DWORD PTR _temp1$[ebp]
  0041c	8b 4d c8	 mov	 ecx, DWORD PTR _kk$[ebp]
  0041f	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00422	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 968  :       d[kk].im  = temp.im + temp1.im;

  00425	d9 45 d4	 fld	 DWORD PTR _temp$[ebp+4]
  00428	d8 45 c0	 fadd	 DWORD PTR _temp1$[ebp+4]
  0042b	8b 45 c8	 mov	 eax, DWORD PTR _kk$[ebp]
  0042e	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00431	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 969  :       d[kk1].re = t.re - t1.re;

  00435	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  00438	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  0043b	8b 55 e4	 mov	 edx, DWORD PTR _kk1$[ebp]
  0043e	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00441	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 970  :       d[kk1].im = t.im - t1.im;

  00444	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  00447	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  0044a	8b 4d e4	 mov	 ecx, DWORD PTR _kk1$[ebp]
  0044d	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00450	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 971  :       d[kk2].re = temp.re - temp1.re;

  00454	d9 45 d0	 fld	 DWORD PTR _temp$[ebp]
  00457	d8 65 bc	 fsub	 DWORD PTR _temp1$[ebp]
  0045a	8b 45 d8	 mov	 eax, DWORD PTR _kk2$[ebp]
  0045d	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00460	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 972  :       d[kk2].im = temp.im - temp1.im;

  00463	d9 45 d4	 fld	 DWORD PTR _temp$[ebp+4]
  00466	d8 65 c0	 fsub	 DWORD PTR _temp1$[ebp+4]
  00469	8b 55 d8	 mov	 edx, DWORD PTR _kk2$[ebp]
  0046c	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0046f	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 973  : 
; 974  :       kj   = j+nj;

  00473	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  00479	03 4d f8	 add	 ecx, DWORD PTR _nj$[ebp]
  0047c	89 4d b4	 mov	 DWORD PTR _kj$[ebp], ecx

; 975  :       kkj2 = kk2+nj;

  0047f	8b 55 d8	 mov	 edx, DWORD PTR _kk2$[ebp]
  00482	03 55 f8	 add	 edx, DWORD PTR _nj$[ebp]
  00485	89 55 a0	 mov	 DWORD PTR _kkj2$[ebp], edx

; 976  :       kkj  = kk+nj;

  00488	8b 45 c8	 mov	 eax, DWORD PTR _kk$[ebp]
  0048b	03 45 f8	 add	 eax, DWORD PTR _nj$[ebp]
  0048e	89 45 b8	 mov	 DWORD PTR _kkj$[ebp], eax

; 977  :       kkj1 = kk1+nj;

  00491	8b 4d e4	 mov	 ecx, DWORD PTR _kk1$[ebp]
  00494	03 4d f8	 add	 ecx, DWORD PTR _nj$[ebp]
  00497	89 4d cc	 mov	 DWORD PTR _kkj1$[ebp], ecx

; 978  : 
; 979  :       temp.re  = d[kj].re - d[kkj].im;  /* tkk */

  0049a	8b 55 b4	 mov	 edx, DWORD PTR _kj$[ebp]
  0049d	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  004a0	8b 4d b8	 mov	 ecx, DWORD PTR _kkj$[ebp]
  004a3	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  004a6	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  004a9	d8 64 ce 04	 fsub	 DWORD PTR [esi+ecx*8+4]
  004ad	d9 5d d0	 fstp	 DWORD PTR _temp$[ebp]

; 980  :       temp.im  = d[kj].im + d[kkj].re;

  004b0	8b 55 b4	 mov	 edx, DWORD PTR _kj$[ebp]
  004b3	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  004b6	8b 4d b8	 mov	 ecx, DWORD PTR _kkj$[ebp]
  004b9	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  004bc	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  004c0	d8 04 ce	 fadd	 DWORD PTR [esi+ecx*8]
  004c3	d9 5d d4	 fstp	 DWORD PTR _temp$[ebp+4]

; 981  :       t.re  = d[kj].re + d[kkj].im;     /* tk  */

  004c6	8b 55 b4	 mov	 edx, DWORD PTR _kj$[ebp]
  004c9	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  004cc	8b 4d b8	 mov	 ecx, DWORD PTR _kkj$[ebp]
  004cf	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  004d2	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  004d5	d8 44 ce 04	 fadd	 DWORD PTR [esi+ecx*8+4]
  004d9	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 982  :       t.im  = d[kj].im - d[kkj].re;

  004dc	8b 55 b4	 mov	 edx, DWORD PTR _kj$[ebp]
  004df	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  004e2	8b 4d b8	 mov	 ecx, DWORD PTR _kkj$[ebp]
  004e5	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  004e8	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  004ec	d8 24 ce	 fsub	 DWORD PTR [esi+ecx*8]
  004ef	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 983  : 
; 984  :       temp1.re = d[kkj1].re - d[kkj2].im;     /* tk2 */

  004f2	8b 55 cc	 mov	 edx, DWORD PTR _kkj1$[ebp]
  004f5	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  004f8	8b 4d a0	 mov	 ecx, DWORD PTR _kkj2$[ebp]
  004fb	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  004fe	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  00501	d8 64 ce 04	 fsub	 DWORD PTR [esi+ecx*8+4]
  00505	d9 5d bc	 fstp	 DWORD PTR _temp1$[ebp]

; 985  :       temp1.im = d[kkj1].im + d[kkj2].re;

  00508	8b 55 cc	 mov	 edx, DWORD PTR _kkj1$[ebp]
  0050b	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0050e	8b 4d a0	 mov	 ecx, DWORD PTR _kkj2$[ebp]
  00511	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00514	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  00518	d8 04 ce	 fadd	 DWORD PTR [esi+ecx*8]
  0051b	d9 5d c0	 fstp	 DWORD PTR _temp1$[ebp+4]

; 986  :       t1.re = d[kkj1].re + d[kkj2].im;        /* tk1 */

  0051e	8b 55 cc	 mov	 edx, DWORD PTR _kkj1$[ebp]
  00521	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00524	8b 4d a0	 mov	 ecx, DWORD PTR _kkj2$[ebp]
  00527	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0052a	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  0052d	d8 44 ce 04	 fadd	 DWORD PTR [esi+ecx*8+4]
  00531	d9 5d 8c	 fstp	 DWORD PTR _t1$[ebp]

; 987  :       t1.im = d[kkj1].im - d[kkj2].re;

  00534	8b 55 cc	 mov	 edx, DWORD PTR _kkj1$[ebp]
  00537	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0053a	8b 4d a0	 mov	 ecx, DWORD PTR _kkj2$[ebp]
  0053d	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00540	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  00544	d8 24 ce	 fsub	 DWORD PTR [esi+ecx*8]
  00547	d9 5d 90	 fstp	 DWORD PTR _t1$[ebp+4]

; 988  : 
; 989  :       t11.re =-V707107*(temp1.re-temp1.im); /* tr1 */

  0054a	d9 45 bc	 fld	 DWORD PTR _temp1$[ebp]
  0054d	d8 65 c0	 fsub	 DWORD PTR _temp1$[ebp+4]
  00550	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@bf3504f7
  00556	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR _t11$[ebp]

; 990  :       t11.im =-V707107*(temp1.im+temp1.re);

  0055c	d9 45 c0	 fld	 DWORD PTR _temp1$[ebp+4]
  0055f	d8 45 bc	 fadd	 DWORD PTR _temp1$[ebp]
  00562	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@bf3504f7
  00568	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR _t11$[ebp+4]

; 991  :       t01.re = V707107*(t1.re+t1.im);        /* tr  */

  0056e	d9 45 8c	 fld	 DWORD PTR _t1$[ebp]
  00571	d8 45 90	 fadd	 DWORD PTR _t1$[ebp+4]
  00574	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f7
  0057a	d9 5d e8	 fstp	 DWORD PTR _t01$[ebp]

; 992  :       t01.im = V707107*(t1.im-t1.re);

  0057d	d9 45 90	 fld	 DWORD PTR _t1$[ebp+4]
  00580	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  00583	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f7
  00589	d9 5d ec	 fstp	 DWORD PTR _t01$[ebp+4]

; 993  : 
; 994  :       d[kj].re   = t.re + t01.re;

  0058c	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  0058f	d8 45 e8	 fadd	 DWORD PTR _t01$[ebp]
  00592	8b 55 b4	 mov	 edx, DWORD PTR _kj$[ebp]
  00595	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00598	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 995  :       d[kj].im   = t.im + t01.im;

  0059b	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  0059e	d8 45 ec	 fadd	 DWORD PTR _t01$[ebp+4]
  005a1	8b 4d b4	 mov	 ecx, DWORD PTR _kj$[ebp]
  005a4	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  005a7	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 996  :       d[kkj].re  = temp.re + t11.re;

  005ab	d9 45 d0	 fld	 DWORD PTR _temp$[ebp]
  005ae	d8 85 70 ff ff
	ff		 fadd	 DWORD PTR _t11$[ebp]
  005b4	8b 45 b8	 mov	 eax, DWORD PTR _kkj$[ebp]
  005b7	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  005ba	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 997  :       d[kkj].im  = temp.im + t11.im;

  005bd	d9 45 d4	 fld	 DWORD PTR _temp$[ebp+4]
  005c0	d8 85 74 ff ff
	ff		 fadd	 DWORD PTR _t11$[ebp+4]
  005c6	8b 55 b8	 mov	 edx, DWORD PTR _kkj$[ebp]
  005c9	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  005cc	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 998  :       d[kkj1].re = t.re - t01.re;

  005d0	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  005d3	d8 65 e8	 fsub	 DWORD PTR _t01$[ebp]
  005d6	8b 4d cc	 mov	 ecx, DWORD PTR _kkj1$[ebp]
  005d9	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  005dc	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 999  :       d[kkj1].im = t.im - t01.im;

  005df	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  005e2	d8 65 ec	 fsub	 DWORD PTR _t01$[ebp+4]
  005e5	8b 45 cc	 mov	 eax, DWORD PTR _kkj1$[ebp]
  005e8	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  005eb	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1000 :       d[kkj2].re = temp.re - t11.re;

  005ef	d9 45 d0	 fld	 DWORD PTR _temp$[ebp]
  005f2	d8 a5 70 ff ff
	ff		 fsub	 DWORD PTR _t11$[ebp]
  005f8	8b 55 a0	 mov	 edx, DWORD PTR _kkj2$[ebp]
  005fb	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  005fe	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1001 :       d[kkj2].im = temp.im - t11.im;

  00601	d9 45 d4	 fld	 DWORD PTR _temp$[ebp+4]
  00604	d8 a5 74 ff ff
	ff		 fsub	 DWORD PTR _t11$[ebp+4]
  0060a	8b 4d a0	 mov	 ecx, DWORD PTR _kkj2$[ebp]
  0060d	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00610	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1002 : 
; 1003 :       k2 = (k = j+nn) + mmax;

  00614	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  0061a	03 45 c4	 add	 eax, DWORD PTR _nn$[ebp]
  0061d	89 45 98	 mov	 DWORD PTR _k$[ebp], eax
  00620	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  00623	03 4d 94	 add	 ecx, DWORD PTR _mmax$[ebp]
  00626	89 4d 88	 mov	 DWORD PTR _k2$[ebp], ecx

; 1004 :       k1 = j+mmax;

  00629	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  0062f	03 55 94	 add	 edx, DWORD PTR _mmax$[ebp]
  00632	89 95 78 ff ff
	ff		 mov	 DWORD PTR _k1$[ebp], edx

; 1005 :       i1 = i2 = 0;

  00638	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i2$[ebp], 0
  00642	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  00648	89 45 e0	 mov	 DWORD PTR _i1$[ebp], eax

; 1006 :       ki  = k;

  0064b	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  0064e	89 4d b0	 mov	 DWORD PTR _ki$[ebp], ecx

; 1007 :       ki1 = k2;

  00651	8b 55 88	 mov	 edx, DWORD PTR _k2$[ebp]
  00654	89 55 f0	 mov	 DWORD PTR _ki1$[ebp], edx

; 1008 :       kii = k1;

  00657	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _k1$[ebp]
  0065d	89 85 68 ff ff
	ff		 mov	 DWORD PTR _kii$[ebp], eax

; 1009 :       ki2 = ki1 + nn;

  00663	8b 4d f0	 mov	 ecx, DWORD PTR _ki1$[ebp]
  00666	03 4d c4	 add	 ecx, DWORD PTR _nn$[ebp]
  00669	89 4d a8	 mov	 DWORD PTR _ki2$[ebp], ecx

; 1010 :       for (i=j+1; i<j+nj; i++) {

  0066c	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  00672	83 c2 01	 add	 edx, 1
  00675	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
  00678	eb 09		 jmp	 SHORT $L1406
$L1407:
  0067a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0067d	83 c0 01	 add	 eax, 1
  00680	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$L1406:
  00683	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  00689	03 4d f8	 add	 ecx, DWORD PTR _nj$[ebp]
  0068c	39 4d f4	 cmp	 DWORD PTR _i$[ebp], ecx
  0068f	0f 8d 53 05 00
	00		 jge	 $L1408

; 1011 :         k2++; k1++; k++;

  00695	8b 55 88	 mov	 edx, DWORD PTR _k2$[ebp]
  00698	83 c2 01	 add	 edx, 1
  0069b	89 55 88	 mov	 DWORD PTR _k2$[ebp], edx
  0069e	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _k1$[ebp]
  006a4	83 c0 01	 add	 eax, 1
  006a7	89 85 78 ff ff
	ff		 mov	 DWORD PTR _k1$[ebp], eax
  006ad	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  006b0	83 c1 01	 add	 ecx, 1
  006b3	89 4d 98	 mov	 DWORD PTR _k$[ebp], ecx

; 1012 :         i1+=ik1; i2+=ik2;

  006b6	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  006b9	03 55 dc	 add	 edx, DWORD PTR _ik1$[ebp]
  006bc	89 55 e0	 mov	 DWORD PTR _i1$[ebp], edx
  006bf	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  006c5	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _ik2$[ebp]
  006cb	89 85 64 ff ff
	ff		 mov	 DWORD PTR _i2$[ebp], eax

; 1013 : 
; 1014 :         t.re  = w[i1].re*d[k].re - w[i1].im*d[k].im;

  006d1	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  006d4	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  006d7	8b 45 98	 mov	 eax, DWORD PTR _k$[ebp]
  006da	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  006dd	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  006e0	d8 0c c6	 fmul	 DWORD PTR [esi+eax*8]
  006e3	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  006e6	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  006e9	8b 45 98	 mov	 eax, DWORD PTR _k$[ebp]
  006ec	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  006ef	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  006f3	d8 4c c6 04	 fmul	 DWORD PTR [esi+eax*8+4]
  006f7	de e9		 fsubp	 ST(1), ST(0)
  006f9	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 1015 :         t.im  = w[i1].re*d[k].im + w[i1].im*d[k].re;

  006fc	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  006ff	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00702	8b 45 98	 mov	 eax, DWORD PTR _k$[ebp]
  00705	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00708	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  0070b	d8 4c c6 04	 fmul	 DWORD PTR [esi+eax*8+4]
  0070f	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  00712	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00715	8b 45 98	 mov	 eax, DWORD PTR _k$[ebp]
  00718	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0071b	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  0071f	d8 0c c6	 fmul	 DWORD PTR [esi+eax*8]
  00722	de c1		 faddp	 ST(1), ST(0)
  00724	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 1016 :         t1.re = w[i1].re*d[k2].re - w[i1].im*d[k2].im;

  00727	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  0072a	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  0072d	8b 45 88	 mov	 eax, DWORD PTR _k2$[ebp]
  00730	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00733	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  00736	d8 0c c6	 fmul	 DWORD PTR [esi+eax*8]
  00739	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  0073c	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  0073f	8b 45 88	 mov	 eax, DWORD PTR _k2$[ebp]
  00742	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00745	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  00749	d8 4c c6 04	 fmul	 DWORD PTR [esi+eax*8+4]
  0074d	de e9		 fsubp	 ST(1), ST(0)
  0074f	d9 5d 8c	 fstp	 DWORD PTR _t1$[ebp]

; 1017 :         t1.im = w[i1].re*d[k2].im + w[i1].im*d[k2].re;

  00752	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  00755	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00758	8b 45 88	 mov	 eax, DWORD PTR _k2$[ebp]
  0075b	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0075e	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  00761	d8 4c c6 04	 fmul	 DWORD PTR [esi+eax*8+4]
  00765	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  00768	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  0076b	8b 45 88	 mov	 eax, DWORD PTR _k2$[ebp]
  0076e	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00771	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  00775	d8 0c c6	 fmul	 DWORD PTR [esi+eax*8]
  00778	de c1		 faddp	 ST(1), ST(0)
  0077a	d9 5d 90	 fstp	 DWORD PTR _t1$[ebp+4]

; 1018 : 
; 1019 :         temp.re  = w[i2].re*(d[k1].re + t1.re) - w[i2].im*(d[k1].im + t1.im);

  0077d	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _k1$[ebp]
  00783	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00786	d9 45 8c	 fld	 DWORD PTR _t1$[ebp]
  00789	d8 04 ca	 fadd	 DWORD PTR [edx+ecx*8]
  0078c	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  00792	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  00795	d8 0c c1	 fmul	 DWORD PTR [ecx+eax*8]
  00798	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _k1$[ebp]
  0079e	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  007a1	d9 45 90	 fld	 DWORD PTR _t1$[ebp+4]
  007a4	d8 44 d0 04	 fadd	 DWORD PTR [eax+edx*8+4]
  007a8	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  007ae	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  007b1	d8 4c ca 04	 fmul	 DWORD PTR [edx+ecx*8+4]
  007b5	de e9		 fsubp	 ST(1), ST(0)
  007b7	d9 5d d0	 fstp	 DWORD PTR _temp$[ebp]

; 1020 :         temp.im  = w[i2].re*(d[k1].im + t1.im) + w[i2].im*(d[k1].re + t1.re);

  007ba	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _k1$[ebp]
  007c0	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  007c3	d9 45 90	 fld	 DWORD PTR _t1$[ebp+4]
  007c6	d8 44 c1 04	 fadd	 DWORD PTR [ecx+eax*8+4]
  007ca	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  007d0	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  007d3	d8 0c d0	 fmul	 DWORD PTR [eax+edx*8]
  007d6	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _k1$[ebp]
  007dc	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  007df	d9 45 8c	 fld	 DWORD PTR _t1$[ebp]
  007e2	d8 04 ca	 fadd	 DWORD PTR [edx+ecx*8]
  007e5	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  007eb	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  007ee	d8 4c c1 04	 fmul	 DWORD PTR [ecx+eax*8+4]
  007f2	de c1		 faddp	 ST(1), ST(0)
  007f4	d9 5d d4	 fstp	 DWORD PTR _temp$[ebp+4]

; 1021 :         temp1.re = w[i2].im*(d[k1].re - t1.re) + w[i2].re*(d[k1].im - t1.im);

  007f7	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _k1$[ebp]
  007fd	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00800	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  00803	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  00806	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  0080c	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  0080f	d8 4c ca 04	 fmul	 DWORD PTR [edx+ecx*8+4]
  00813	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _k1$[ebp]
  00819	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0081c	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  00820	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  00823	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  00829	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  0082c	d8 0c d0	 fmul	 DWORD PTR [eax+edx*8]
  0082f	de c1		 faddp	 ST(1), ST(0)
  00831	d9 5d bc	 fstp	 DWORD PTR _temp1$[ebp]

; 1022 :         temp1.im = w[i2].im*(d[k1].im - t1.im) - w[i2].re*(d[k1].re - t1.re);

  00834	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _k1$[ebp]
  0083a	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  0083d	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  00841	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  00844	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  0084a	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  0084d	d8 4c c1 04	 fmul	 DWORD PTR [ecx+eax*8+4]
  00851	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _k1$[ebp]
  00857	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0085a	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  0085d	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  00860	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  00866	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00869	d8 0c ca	 fmul	 DWORD PTR [edx+ecx*8]
  0086c	de e9		 fsubp	 ST(1), ST(0)
  0086e	d9 5d c0	 fstp	 DWORD PTR _temp1$[ebp+4]

; 1023 : 
; 1024 :         d[k].re  = d[i].re - t.re + temp1.re;

  00871	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00874	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00877	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  0087a	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  0087d	d8 45 bc	 fadd	 DWORD PTR _temp1$[ebp]
  00880	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  00883	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00886	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1025 :         d[k2].re = d[i].re - t.re - temp1.re;

  00889	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0088c	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  0088f	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  00892	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  00895	d8 65 bc	 fsub	 DWORD PTR _temp1$[ebp]
  00898	8b 45 88	 mov	 eax, DWORD PTR _k2$[ebp]
  0089b	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0089e	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1026 :         d[k].im  = d[i].im - t.im + temp1.im;

  008a1	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  008a4	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  008a7	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  008ab	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  008ae	d8 45 c0	 fadd	 DWORD PTR _temp1$[ebp+4]
  008b1	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  008b4	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  008b7	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1027 :         d[k2].im = d[i].im - t.im - temp1.im;

  008bb	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  008be	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  008c1	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  008c5	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  008c8	d8 65 c0	 fsub	 DWORD PTR _temp1$[ebp+4]
  008cb	8b 55 88	 mov	 edx, DWORD PTR _k2$[ebp]
  008ce	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  008d1	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1028 :         d[k1].im = d[i].im + t.im - temp.im;

  008d5	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  008d8	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  008db	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  008de	d8 44 ca 04	 fadd	 DWORD PTR [edx+ecx*8+4]
  008e2	d8 65 d4	 fsub	 DWORD PTR _temp$[ebp+4]
  008e5	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _k1$[ebp]
  008eb	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  008ee	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1029 :         d[k1].re = d[i].re + t.re - temp.re;

  008f2	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  008f5	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  008f8	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  008fb	d8 04 d0	 fadd	 DWORD PTR [eax+edx*8]
  008fe	d8 65 d0	 fsub	 DWORD PTR _temp$[ebp]
  00901	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _k1$[ebp]
  00907	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  0090a	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1030 :         d[i].im += t.im + temp.im;

  0090d	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  00910	d8 45 d4	 fadd	 DWORD PTR _temp$[ebp+4]
  00913	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00916	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00919	d8 44 c1 04	 fadd	 DWORD PTR [ecx+eax*8+4]
  0091d	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00920	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00923	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1031 :         d[i].re += t.re + temp.re;

  00927	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  0092a	d8 45 d0	 fadd	 DWORD PTR _temp$[ebp]
  0092d	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00930	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00933	d8 04 ca	 fadd	 DWORD PTR [edx+ecx*8]
  00936	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00939	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0093c	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1032 : 
; 1033 :         ki--; ki1--; kii--; ki2--;

  0093f	8b 55 b0	 mov	 edx, DWORD PTR _ki$[ebp]
  00942	83 ea 01	 sub	 edx, 1
  00945	89 55 b0	 mov	 DWORD PTR _ki$[ebp], edx
  00948	8b 45 f0	 mov	 eax, DWORD PTR _ki1$[ebp]
  0094b	83 e8 01	 sub	 eax, 1
  0094e	89 45 f0	 mov	 DWORD PTR _ki1$[ebp], eax
  00951	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _kii$[ebp]
  00957	83 e9 01	 sub	 ecx, 1
  0095a	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _kii$[ebp], ecx
  00960	8b 55 a8	 mov	 edx, DWORD PTR _ki2$[ebp]
  00963	83 ea 01	 sub	 edx, 1
  00966	89 55 a8	 mov	 DWORD PTR _ki2$[ebp], edx

; 1034 :         t.re  =-w[i1].re*d[kii].re - w[i1].im*d[kii].im;

  00969	8b 45 e0	 mov	 eax, DWORD PTR _i1$[ebp]
  0096c	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  0096f	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  00972	d9 e0		 fchs
  00974	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _kii$[ebp]
  0097a	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0097d	d8 0c d0	 fmul	 DWORD PTR [eax+edx*8]
  00980	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  00983	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00986	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _kii$[ebp]
  0098c	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0098f	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  00993	d8 4c c6 04	 fmul	 DWORD PTR [esi+eax*8+4]
  00997	de e9		 fsubp	 ST(1), ST(0)
  00999	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 1035 :         t.im  =-w[i1].re*d[kii].im + w[i1].im*d[kii].re;

  0099c	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  0099f	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  009a2	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  009a5	d9 e0		 fchs
  009a7	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _kii$[ebp]
  009ad	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  009b0	d8 4c c1 04	 fmul	 DWORD PTR [ecx+eax*8+4]
  009b4	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  009b7	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  009ba	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _kii$[ebp]
  009c0	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  009c3	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  009c7	d8 0c ce	 fmul	 DWORD PTR [esi+ecx*8]
  009ca	de c1		 faddp	 ST(1), ST(0)
  009cc	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 1036 :         t1.re =-w[i1].re*d[ki2].re - w[i1].im*d[ki2].im;

  009cf	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  009d2	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  009d5	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  009d8	d9 e0		 fchs
  009da	8b 4d a8	 mov	 ecx, DWORD PTR _ki2$[ebp]
  009dd	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  009e0	d8 0c ca	 fmul	 DWORD PTR [edx+ecx*8]
  009e3	8b 45 e0	 mov	 eax, DWORD PTR _i1$[ebp]
  009e6	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  009e9	8b 55 a8	 mov	 edx, DWORD PTR _ki2$[ebp]
  009ec	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  009ef	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  009f3	d8 4c d6 04	 fmul	 DWORD PTR [esi+edx*8+4]
  009f7	de e9		 fsubp	 ST(1), ST(0)
  009f9	d9 5d 8c	 fstp	 DWORD PTR _t1$[ebp]

; 1037 :         t1.im =-w[i1].re*d[ki2].im + w[i1].im*d[ki2].re;

  009fc	8b 45 e0	 mov	 eax, DWORD PTR _i1$[ebp]
  009ff	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  00a02	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  00a05	d9 e0		 fchs
  00a07	8b 55 a8	 mov	 edx, DWORD PTR _ki2$[ebp]
  00a0a	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00a0d	d8 4c d0 04	 fmul	 DWORD PTR [eax+edx*8+4]
  00a11	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  00a14	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00a17	8b 45 a8	 mov	 eax, DWORD PTR _ki2$[ebp]
  00a1a	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00a1d	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  00a21	d8 0c c6	 fmul	 DWORD PTR [esi+eax*8]
  00a24	de c1		 faddp	 ST(1), ST(0)
  00a26	d9 5d 90	 fstp	 DWORD PTR _t1$[ebp+4]

; 1038 : 
; 1039 :         temp.re  =-w[i2].im*(d[ki1].re + t1.re) + w[i2].re*(d[ki1].im + t1.im);

  00a29	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  00a2f	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00a32	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  00a36	d9 e0		 fchs
  00a38	8b 45 f0	 mov	 eax, DWORD PTR _ki1$[ebp]
  00a3b	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00a3e	d9 45 8c	 fld	 DWORD PTR _t1$[ebp]
  00a41	d8 04 c1	 fadd	 DWORD PTR [ecx+eax*8]
  00a44	de c9		 fmulp	 ST(1), ST(0)
  00a46	8b 55 f0	 mov	 edx, DWORD PTR _ki1$[ebp]
  00a49	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00a4c	d9 45 90	 fld	 DWORD PTR _t1$[ebp+4]
  00a4f	d8 44 d0 04	 fadd	 DWORD PTR [eax+edx*8+4]
  00a53	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  00a59	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00a5c	d8 0c ca	 fmul	 DWORD PTR [edx+ecx*8]
  00a5f	de c1		 faddp	 ST(1), ST(0)
  00a61	d9 5d d0	 fstp	 DWORD PTR _temp$[ebp]

; 1040 :         temp.im  =-w[i2].im*(d[ki1].im + t1.im) - w[i2].re*(d[ki1].re + t1.re);

  00a64	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  00a6a	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  00a6d	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  00a71	d9 e0		 fchs
  00a73	8b 55 f0	 mov	 edx, DWORD PTR _ki1$[ebp]
  00a76	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00a79	d9 45 90	 fld	 DWORD PTR _t1$[ebp+4]
  00a7c	d8 44 d0 04	 fadd	 DWORD PTR [eax+edx*8+4]
  00a80	de c9		 fmulp	 ST(1), ST(0)
  00a82	8b 4d f0	 mov	 ecx, DWORD PTR _ki1$[ebp]
  00a85	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00a88	d9 45 8c	 fld	 DWORD PTR _t1$[ebp]
  00a8b	d8 04 ca	 fadd	 DWORD PTR [edx+ecx*8]
  00a8e	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  00a94	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  00a97	d8 0c c1	 fmul	 DWORD PTR [ecx+eax*8]
  00a9a	de e9		 fsubp	 ST(1), ST(0)
  00a9c	d9 5d d4	 fstp	 DWORD PTR _temp$[ebp+4]

; 1041 :         temp1.re =-w[i2].re*(d[ki1].re - t1.re) - w[i2].im*(d[ki1].im - t1.im);

  00a9f	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  00aa5	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00aa8	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  00aab	d9 e0		 fchs
  00aad	8b 4d f0	 mov	 ecx, DWORD PTR _ki1$[ebp]
  00ab0	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00ab3	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  00ab6	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  00ab9	de c9		 fmulp	 ST(1), ST(0)
  00abb	8b 45 f0	 mov	 eax, DWORD PTR _ki1$[ebp]
  00abe	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00ac1	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  00ac5	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  00ac8	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  00ace	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00ad1	d8 4c d0 04	 fmul	 DWORD PTR [eax+edx*8+4]
  00ad5	de e9		 fsubp	 ST(1), ST(0)
  00ad7	d9 5d bc	 fstp	 DWORD PTR _temp1$[ebp]

; 1042 :         temp1.im =-w[i2].re*(d[ki1].im - t1.im) + w[i2].im*(d[ki1].re - t1.re);

  00ada	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  00ae0	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00ae3	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  00ae6	d9 e0		 fchs
  00ae8	8b 45 f0	 mov	 eax, DWORD PTR _ki1$[ebp]
  00aeb	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00aee	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  00af2	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  00af5	de c9		 fmulp	 ST(1), ST(0)
  00af7	8b 55 f0	 mov	 edx, DWORD PTR _ki1$[ebp]
  00afa	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00afd	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  00b00	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  00b03	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  00b09	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00b0c	d8 4c ca 04	 fmul	 DWORD PTR [edx+ecx*8+4]
  00b10	de c1		 faddp	 ST(1), ST(0)
  00b12	d9 5d c0	 fstp	 DWORD PTR _temp1$[ebp+4]

; 1043 : 
; 1044 :         d[kii].re = d[ki].re - t.re + temp1.re;

  00b15	8b 45 b0	 mov	 eax, DWORD PTR _ki$[ebp]
  00b18	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00b1b	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  00b1e	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  00b21	d8 45 bc	 fadd	 DWORD PTR _temp1$[ebp]
  00b24	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _kii$[ebp]
  00b2a	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00b2d	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1045 :         d[ki2].re = d[ki].re - t.re - temp1.re;

  00b30	8b 4d b0	 mov	 ecx, DWORD PTR _ki$[ebp]
  00b33	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00b36	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  00b39	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  00b3c	d8 65 bc	 fsub	 DWORD PTR _temp1$[ebp]
  00b3f	8b 45 a8	 mov	 eax, DWORD PTR _ki2$[ebp]
  00b42	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00b45	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1046 :         d[kii].im = d[ki].im - t.im + temp1.im;

  00b48	8b 55 b0	 mov	 edx, DWORD PTR _ki$[ebp]
  00b4b	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00b4e	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  00b52	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  00b55	d8 45 c0	 fadd	 DWORD PTR _temp1$[ebp+4]
  00b58	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _kii$[ebp]
  00b5e	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00b61	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1047 :         d[ki2].im = d[ki].im - t.im - temp1.im;

  00b65	8b 45 b0	 mov	 eax, DWORD PTR _ki$[ebp]
  00b68	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00b6b	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  00b6f	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  00b72	d8 65 c0	 fsub	 DWORD PTR _temp1$[ebp+4]
  00b75	8b 55 a8	 mov	 edx, DWORD PTR _ki2$[ebp]
  00b78	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00b7b	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1048 :         d[ki1].im = d[ki].im + t.im - temp.im;

  00b7f	8b 4d b0	 mov	 ecx, DWORD PTR _ki$[ebp]
  00b82	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00b85	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  00b88	d8 44 ca 04	 fadd	 DWORD PTR [edx+ecx*8+4]
  00b8c	d8 65 d4	 fsub	 DWORD PTR _temp$[ebp+4]
  00b8f	8b 45 f0	 mov	 eax, DWORD PTR _ki1$[ebp]
  00b92	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00b95	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1049 :         d[ki1].re = d[ki].re + t.re - temp.re;

  00b99	8b 55 b0	 mov	 edx, DWORD PTR _ki$[ebp]
  00b9c	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00b9f	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  00ba2	d8 04 d0	 fadd	 DWORD PTR [eax+edx*8]
  00ba5	d8 65 d0	 fsub	 DWORD PTR _temp$[ebp]
  00ba8	8b 4d f0	 mov	 ecx, DWORD PTR _ki1$[ebp]
  00bab	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00bae	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1050 :         d[ki].im  = d[ki].im + t.im + temp.im;

  00bb1	8b 45 b0	 mov	 eax, DWORD PTR _ki$[ebp]
  00bb4	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00bb7	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  00bba	d8 44 c1 04	 fadd	 DWORD PTR [ecx+eax*8+4]
  00bbe	d8 45 d4	 fadd	 DWORD PTR _temp$[ebp+4]
  00bc1	8b 55 b0	 mov	 edx, DWORD PTR _ki$[ebp]
  00bc4	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00bc7	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1051 :         d[ki].re  = d[ki].re + t.re + temp.re;

  00bcb	8b 4d b0	 mov	 ecx, DWORD PTR _ki$[ebp]
  00bce	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00bd1	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  00bd4	d8 04 ca	 fadd	 DWORD PTR [edx+ecx*8]
  00bd7	d8 45 d0	 fadd	 DWORD PTR _temp$[ebp]
  00bda	8b 45 b0	 mov	 eax, DWORD PTR _ki$[ebp]
  00bdd	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00be0	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1052 :       }  /* for i */

  00be3	e9 92 fa ff ff	 jmp	 $L1407
$L1408:

; 1053 :     }   /* for j */

  00be8	e9 09 f7 ff ff	 jmp	 $L1400
$L1401:

; 1054 :     nn = istep;

  00bed	8b 55 fc	 mov	 edx, DWORD PTR _istep$[ebp]
  00bf0	89 55 c4	 mov	 DWORD PTR _nn$[ebp], edx

; 1055 :     mmax <<= 2;

  00bf3	8b 45 94	 mov	 eax, DWORD PTR _mmax$[ebp]
  00bf6	c1 e0 02	 shl	 eax, 2
  00bf9	89 45 94	 mov	 DWORD PTR _mmax$[ebp], eax

; 1056 :     istep <<= 2;

  00bfc	8b 4d fc	 mov	 ecx, DWORD PTR _istep$[ebp]
  00bff	c1 e1 02	 shl	 ecx, 2
  00c02	89 4d fc	 mov	 DWORD PTR _istep$[ebp], ecx

; 1057 :     ik1>>=2;

  00c05	8b 55 dc	 mov	 edx, DWORD PTR _ik1$[ebp]
  00c08	c1 fa 02	 sar	 edx, 2
  00c0b	89 55 dc	 mov	 DWORD PTR _ik1$[ebp], edx

; 1058 :     ik2>>=2;

  00c0e	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _ik2$[ebp]
  00c14	c1 f8 02	 sar	 eax, 2
  00c17	89 85 7c ff ff
	ff		 mov	 DWORD PTR _ik2$[ebp], eax

; 1059 :     if (nn < m) goto nextBlock;

  00c1d	8b 4d c4	 mov	 ecx, DWORD PTR _nn$[ebp]
  00c20	3b 8d 60 ff ff
	ff		 cmp	 ecx, DWORD PTR _m$[ebp]
  00c26	7d 05		 jge	 SHORT $L1409
  00c28	e9 88 f6 ff ff	 jmp	 $nextBlock$1396
$L1409:

; 1060 :   } /* for */

  00c2d	e9 92 f4 ff ff	 jmp	 $L1390
$L1391:

; 1061 :   if (m<n) {

  00c32	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _m$[ebp]
  00c38	3b 55 0c	 cmp	 edx, DWORD PTR _n$[ebp]
  00c3b	0f 8d b5 02 00
	00		 jge	 $L1410
$nextB$1411:

; 1062 :     nextB:
; 1063 : 
; 1064 :     i1 = i4 = 0;

  00c41	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _i4$[ebp], 0
  00c48	8b 45 9c	 mov	 eax, DWORD PTR _i4$[ebp]
  00c4b	89 45 e0	 mov	 DWORD PTR _i1$[ebp], eax

; 1065 :     ik2 = ik1<<1;

  00c4e	8b 4d dc	 mov	 ecx, DWORD PTR _ik1$[ebp]
  00c51	d1 e1		 shl	 ecx, 1
  00c53	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _ik2$[ebp], ecx

; 1066 :     for (i2=0; i2<nn; i2+=256,i4=i1) {

  00c59	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i2$[ebp], 0
  00c63	eb 18		 jmp	 SHORT $L1412
$L1413:
  00c65	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  00c6b	81 c2 00 01 00
	00		 add	 edx, 256		; 00000100H
  00c71	89 95 64 ff ff
	ff		 mov	 DWORD PTR _i2$[ebp], edx
  00c77	8b 45 e0	 mov	 eax, DWORD PTR _i1$[ebp]
  00c7a	89 45 9c	 mov	 DWORD PTR _i4$[ebp], eax
$L1412:
  00c7d	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  00c83	3b 4d c4	 cmp	 ecx, DWORD PTR _nn$[ebp]
  00c86	0f 8d 47 02 00
	00		 jge	 $L1414

; 1067 :       kk = i2+nn;

  00c8c	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  00c92	03 55 c4	 add	 edx, DWORD PTR _nn$[ebp]
  00c95	89 55 c8	 mov	 DWORD PTR _kk$[ebp], edx

; 1068 :       for (j=0; j<n; j += mmax) {

  00c98	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0
  00ca2	eb 0f		 jmp	 SHORT $L1415
$L1416:
  00ca4	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00caa	03 45 94	 add	 eax, DWORD PTR _mmax$[ebp]
  00cad	89 85 6c ff ff
	ff		 mov	 DWORD PTR _j$[ebp], eax
$L1415:
  00cb3	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  00cb9	3b 4d 0c	 cmp	 ecx, DWORD PTR _n$[ebp]
  00cbc	0f 8d 0c 02 00
	00		 jge	 $L1417

; 1069 :         i3 = i2+j;

  00cc2	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  00cc8	03 95 6c ff ff
	ff		 add	 edx, DWORD PTR _j$[ebp]
  00cce	89 55 ac	 mov	 DWORD PTR _i3$[ebp], edx

; 1070 :         i1 = i4;

  00cd1	8b 45 9c	 mov	 eax, DWORD PTR _i4$[ebp]
  00cd4	89 45 e0	 mov	 DWORD PTR _i1$[ebp], eax

; 1071 :         k=kk+j;

  00cd7	8b 4d c8	 mov	 ecx, DWORD PTR _kk$[ebp]
  00cda	03 8d 6c ff ff
	ff		 add	 ecx, DWORD PTR _j$[ebp]
  00ce0	89 4d 98	 mov	 DWORD PTR _k$[ebp], ecx

; 1072 :         for (i=0 ; i<256; i+=2,i1+=ik2) {

  00ce3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00cea	eb 15		 jmp	 SHORT $L1418
$L1419:
  00cec	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00cef	83 c2 02	 add	 edx, 2
  00cf2	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
  00cf5	8b 45 e0	 mov	 eax, DWORD PTR _i1$[ebp]
  00cf8	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _ik2$[ebp]
  00cfe	89 45 e0	 mov	 DWORD PTR _i1$[ebp], eax
$L1418:
  00d01	81 7d f4 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00d08	0f 8d bb 01 00
	00		 jge	 $L1420

; 1073 :           t.re = w[i1].re*d[k+i].re - w[i1].im*d[k+i].im;

  00d0e	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  00d11	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  00d14	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  00d17	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00d1a	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00d1d	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  00d20	d8 0c ce	 fmul	 DWORD PTR [esi+ecx*8]
  00d23	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  00d26	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  00d29	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  00d2c	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00d2f	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00d32	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  00d36	d8 4c ce 04	 fmul	 DWORD PTR [esi+ecx*8+4]
  00d3a	de e9		 fsubp	 ST(1), ST(0)
  00d3c	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 1074 :           t.im = w[i1].im*d[k+i].re + w[i1].re*d[k+i].im;

  00d3f	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  00d42	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  00d45	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  00d48	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00d4b	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00d4e	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  00d52	d8 0c ce	 fmul	 DWORD PTR [esi+ecx*8]
  00d55	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  00d58	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  00d5b	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  00d5e	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00d61	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00d64	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  00d67	d8 4c ce 04	 fmul	 DWORD PTR [esi+ecx*8+4]
  00d6b	de c1		 faddp	 ST(1), ST(0)
  00d6d	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 1075 :           t1.re = w[i1+ik1].re*d[k+i+1].re - w[i1+ik1].im*d[k+i+1].im;

  00d70	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  00d73	03 4d dc	 add	 ecx, DWORD PTR _ik1$[ebp]
  00d76	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  00d79	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  00d7c	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00d7f	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00d82	d9 04 c8	 fld	 DWORD PTR [eax+ecx*8]
  00d85	d8 4c d6 08	 fmul	 DWORD PTR [esi+edx*8+8]
  00d89	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  00d8c	03 4d dc	 add	 ecx, DWORD PTR _ik1$[ebp]
  00d8f	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  00d92	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  00d95	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00d98	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00d9b	d9 44 c8 04	 fld	 DWORD PTR [eax+ecx*8+4]
  00d9f	d8 4c d6 0c	 fmul	 DWORD PTR [esi+edx*8+12]
  00da3	de e9		 fsubp	 ST(1), ST(0)
  00da5	d9 5d 8c	 fstp	 DWORD PTR _t1$[ebp]

; 1076 :           t1.im = w[i1+ik1].im*d[k+i+1].re + w[i1+ik1].re*d[k+i+1].im;

  00da8	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  00dab	03 4d dc	 add	 ecx, DWORD PTR _ik1$[ebp]
  00dae	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  00db1	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  00db4	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00db7	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00dba	d9 44 c8 04	 fld	 DWORD PTR [eax+ecx*8+4]
  00dbe	d8 4c d6 08	 fmul	 DWORD PTR [esi+edx*8+8]
  00dc2	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  00dc5	03 4d dc	 add	 ecx, DWORD PTR _ik1$[ebp]
  00dc8	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  00dcb	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  00dce	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00dd1	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00dd4	d9 04 c8	 fld	 DWORD PTR [eax+ecx*8]
  00dd7	d8 4c d6 0c	 fmul	 DWORD PTR [esi+edx*8+12]
  00ddb	de c1		 faddp	 ST(1), ST(0)
  00ddd	d9 5d 90	 fstp	 DWORD PTR _t1$[ebp+4]

; 1077 :           d[k+i].re = d[i+i3].re - t.re;

  00de0	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00de3	03 4d ac	 add	 ecx, DWORD PTR _i3$[ebp]
  00de6	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00de9	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  00dec	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  00def	8b 45 98	 mov	 eax, DWORD PTR _k$[ebp]
  00df2	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  00df5	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00df8	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1078 :           d[k+i].im = d[i+i3].im - t.im;

  00dfb	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00dfe	03 55 ac	 add	 edx, DWORD PTR _i3$[ebp]
  00e01	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00e04	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  00e08	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  00e0b	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  00e0e	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  00e11	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00e14	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1079 :           d[i+i3].re += t.re;

  00e18	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00e1b	03 45 ac	 add	 eax, DWORD PTR _i3$[ebp]
  00e1e	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00e21	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  00e24	d8 04 c1	 fadd	 DWORD PTR [ecx+eax*8]
  00e27	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00e2a	03 55 ac	 add	 edx, DWORD PTR _i3$[ebp]
  00e2d	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00e30	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1080 :           d[i+i3].im += t.im;

  00e33	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00e36	03 4d ac	 add	 ecx, DWORD PTR _i3$[ebp]
  00e39	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00e3c	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  00e3f	d8 44 ca 04	 fadd	 DWORD PTR [edx+ecx*8+4]
  00e43	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00e46	03 45 ac	 add	 eax, DWORD PTR _i3$[ebp]
  00e49	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00e4c	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1081 :           d[k+i+1].re = d[i+i3+1].re - t1.re;

  00e50	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00e53	03 55 ac	 add	 edx, DWORD PTR _i3$[ebp]
  00e56	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00e59	d9 44 d0 08	 fld	 DWORD PTR [eax+edx*8+8]
  00e5d	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  00e60	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  00e63	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  00e66	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00e69	d9 5c ca 08	 fstp	 DWORD PTR [edx+ecx*8+8]

; 1082 :           d[k+i+1].im = d[i+i3+1].im - t1.im;

  00e6d	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00e70	03 45 ac	 add	 eax, DWORD PTR _i3$[ebp]
  00e73	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00e76	d9 44 c1 0c	 fld	 DWORD PTR [ecx+eax*8+12]
  00e7a	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  00e7d	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  00e80	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  00e83	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00e86	d9 5c d0 0c	 fstp	 DWORD PTR [eax+edx*8+12]

; 1083 :           d[i+i3+1].re += t1.re;

  00e8a	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00e8d	03 4d ac	 add	 ecx, DWORD PTR _i3$[ebp]
  00e90	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00e93	d9 45 8c	 fld	 DWORD PTR _t1$[ebp]
  00e96	d8 44 ca 08	 fadd	 DWORD PTR [edx+ecx*8+8]
  00e9a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00e9d	03 45 ac	 add	 eax, DWORD PTR _i3$[ebp]
  00ea0	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00ea3	d9 5c c1 08	 fstp	 DWORD PTR [ecx+eax*8+8]

; 1084 :           d[i+i3+1].im += t1.im;

  00ea7	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00eaa	03 55 ac	 add	 edx, DWORD PTR _i3$[ebp]
  00ead	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00eb0	d9 45 90	 fld	 DWORD PTR _t1$[ebp+4]
  00eb3	d8 44 d0 0c	 fadd	 DWORD PTR [eax+edx*8+12]
  00eb7	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00eba	03 4d ac	 add	 ecx, DWORD PTR _i3$[ebp]
  00ebd	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00ec0	d9 5c ca 0c	 fstp	 DWORD PTR [edx+ecx*8+12]

; 1085 :         }  /* for i */

  00ec4	e9 23 fe ff ff	 jmp	 $L1419
$L1420:

; 1086 :       }  /* for j */

  00ec9	e9 d6 fd ff ff	 jmp	 $L1416
$L1417:

; 1087 :     }  /* for i2 */

  00ece	e9 92 fd ff ff	 jmp	 $L1413
$L1414:

; 1088 :     nn = mmax;

  00ed3	8b 45 94	 mov	 eax, DWORD PTR _mmax$[ebp]
  00ed6	89 45 c4	 mov	 DWORD PTR _nn$[ebp], eax

; 1089 :     mmax <<= 1;

  00ed9	8b 4d 94	 mov	 ecx, DWORD PTR _mmax$[ebp]
  00edc	d1 e1		 shl	 ecx, 1
  00ede	89 4d 94	 mov	 DWORD PTR _mmax$[ebp], ecx

; 1090 :     ik1 >>= 1;

  00ee1	8b 55 dc	 mov	 edx, DWORD PTR _ik1$[ebp]
  00ee4	d1 fa		 sar	 edx, 1
  00ee6	89 55 dc	 mov	 DWORD PTR _ik1$[ebp], edx

; 1091 :     if (nn<n) goto nextB;

  00ee9	8b 45 c4	 mov	 eax, DWORD PTR _nn$[ebp]
  00eec	3b 45 0c	 cmp	 eax, DWORD PTR _n$[ebp]
  00eef	7d 05		 jge	 SHORT $L1410
  00ef1	e9 4b fd ff ff	 jmp	 $nextB$1411
$L1410:

; 1092 :   } /* if */
; 1093 : 
; 1094 :     return;

  00ef6	e9 04 12 00 00	 jmp	 $norm$1458
$label5$1398:

; 1095 :   label5:
; 1096 :     nj = nn>>1;

  00efb	8b 4d c4	 mov	 ecx, DWORD PTR _nn$[ebp]
  00efe	d1 f9		 sar	 ecx, 1
  00f00	89 4d f8	 mov	 DWORD PTR _nj$[ebp], ecx

; 1097 :     for (i=0; i<nj; i++) {

  00f03	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00f0a	eb 09		 jmp	 SHORT $L1422
$L1423:
  00f0c	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00f0f	83 c2 01	 add	 edx, 1
  00f12	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$L1422:
  00f15	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00f18	3b 45 f8	 cmp	 eax, DWORD PTR _nj$[ebp]
  00f1b	0f 8d ab 01 00
	00		 jge	 $L1424

; 1098 :       t.im = w[i].im*d[nn+i].re + w[i].re*d[nn+i].im;

  00f21	8b 4d c4	 mov	 ecx, DWORD PTR _nn$[ebp]
  00f24	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  00f27	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00f2a	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00f2d	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00f30	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  00f34	d8 0c ce	 fmul	 DWORD PTR [esi+ecx*8]
  00f37	8b 4d c4	 mov	 ecx, DWORD PTR _nn$[ebp]
  00f3a	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  00f3d	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00f40	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00f43	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00f46	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  00f49	d8 4c ce 04	 fmul	 DWORD PTR [esi+ecx*8+4]
  00f4d	de c1		 faddp	 ST(1), ST(0)
  00f4f	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 1099 :       t.re = w[i].re*d[nn+i].re - w[i].im*d[nn+i].im;

  00f52	8b 4d c4	 mov	 ecx, DWORD PTR _nn$[ebp]
  00f55	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  00f58	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00f5b	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00f5e	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00f61	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  00f64	d8 0c ce	 fmul	 DWORD PTR [esi+ecx*8]
  00f67	8b 4d c4	 mov	 ecx, DWORD PTR _nn$[ebp]
  00f6a	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  00f6d	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00f70	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00f73	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  00f76	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  00f7a	d8 4c ce 04	 fmul	 DWORD PTR [esi+ecx*8+4]
  00f7e	de e9		 fsubp	 ST(1), ST(0)
  00f80	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 1100 :       d[nn+i].re = d[i].re - t.re;

  00f83	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00f86	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00f89	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  00f8c	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  00f8f	8b 45 c4	 mov	 eax, DWORD PTR _nn$[ebp]
  00f92	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  00f95	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00f98	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1101 :       d[nn+i].im = d[i].im - t.im;

  00f9b	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00f9e	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00fa1	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  00fa5	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  00fa8	8b 4d c4	 mov	 ecx, DWORD PTR _nn$[ebp]
  00fab	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  00fae	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00fb1	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1102 :       d[i].re += t.re;

  00fb5	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00fb8	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00fbb	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  00fbe	d8 04 c1	 fadd	 DWORD PTR [ecx+eax*8]
  00fc1	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00fc4	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  00fc7	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1103 :       d[i].im += t.im;

  00fca	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00fcd	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00fd0	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  00fd3	d8 44 ca 04	 fadd	 DWORD PTR [edx+ecx*8+4]
  00fd7	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00fda	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  00fdd	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1104 :       t.im = -w[i].re*d[nn+nj+i].re + w[i].im*d[nn+nj+i].im;

  00fe1	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00fe4	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00fe7	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  00fea	d9 e0		 fchs
  00fec	8b 4d c4	 mov	 ecx, DWORD PTR _nn$[ebp]
  00fef	03 4d f8	 add	 ecx, DWORD PTR _nj$[ebp]
  00ff2	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  00ff5	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  00ff8	d8 0c ca	 fmul	 DWORD PTR [edx+ecx*8]
  00ffb	8b 45 c4	 mov	 eax, DWORD PTR _nn$[ebp]
  00ffe	03 45 f8	 add	 eax, DWORD PTR _nj$[ebp]
  01001	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  01004	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01007	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  0100a	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0100d	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  01011	d8 4c c6 04	 fmul	 DWORD PTR [esi+eax*8+4]
  01015	de c1		 faddp	 ST(1), ST(0)
  01017	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 1105 :       t.re = w[i].im*d[nn+nj+i].re + w[i].re*d[nn+nj+i].im;

  0101a	8b 45 c4	 mov	 eax, DWORD PTR _nn$[ebp]
  0101d	03 45 f8	 add	 eax, DWORD PTR _nj$[ebp]
  01020	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  01023	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01026	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  01029	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0102c	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  01030	d8 0c c6	 fmul	 DWORD PTR [esi+eax*8]
  01033	8b 45 c4	 mov	 eax, DWORD PTR _nn$[ebp]
  01036	03 45 f8	 add	 eax, DWORD PTR _nj$[ebp]
  01039	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  0103c	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0103f	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  01042	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01045	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  01048	d8 4c c6 04	 fmul	 DWORD PTR [esi+eax*8+4]
  0104c	de c1		 faddp	 ST(1), ST(0)
  0104e	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 1106 :       d[nn+nj+i].re = d[i+nj].re - t.re;

  01051	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01054	03 45 f8	 add	 eax, DWORD PTR _nj$[ebp]
  01057	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0105a	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  0105d	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  01060	8b 55 c4	 mov	 edx, DWORD PTR _nn$[ebp]
  01063	03 55 f8	 add	 edx, DWORD PTR _nj$[ebp]
  01066	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  01069	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0106c	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1107 :       d[nn+nj+i].im = d[i+nj].im - t.im;

  0106f	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01072	03 4d f8	 add	 ecx, DWORD PTR _nj$[ebp]
  01075	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01078	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  0107c	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  0107f	8b 45 c4	 mov	 eax, DWORD PTR _nn$[ebp]
  01082	03 45 f8	 add	 eax, DWORD PTR _nj$[ebp]
  01085	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  01088	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0108b	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1108 :       d[i+nj].re += t.re;

  0108f	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  01092	03 55 f8	 add	 edx, DWORD PTR _nj$[ebp]
  01095	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01098	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  0109b	d8 04 d0	 fadd	 DWORD PTR [eax+edx*8]
  0109e	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  010a1	03 4d f8	 add	 ecx, DWORD PTR _nj$[ebp]
  010a4	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  010a7	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1109 :       d[i+nj].im += t.im;

  010aa	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  010ad	03 45 f8	 add	 eax, DWORD PTR _nj$[ebp]
  010b0	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  010b3	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  010b6	d8 44 c1 04	 fadd	 DWORD PTR [ecx+eax*8+4]
  010ba	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  010bd	03 55 f8	 add	 edx, DWORD PTR _nj$[ebp]
  010c0	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  010c3	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1110 :     }  /* for i */

  010c7	e9 40 fe ff ff	 jmp	 $L1423
$L1424:

; 1111 :     return;

  010cc	e9 2e 10 00 00	 jmp	 $norm$1458
$inverse$1388:

; 1112 : 
; 1113 :     inverse:
; 1114 :   for (j1=0; j1<n; j1+=m) {

  010d1	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _j1$[ebp], 0
  010d8	eb 0c		 jmp	 SHORT $L1425
$L1426:
  010da	8b 4d a4	 mov	 ecx, DWORD PTR _j1$[ebp]
  010dd	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _m$[ebp]
  010e3	89 4d a4	 mov	 DWORD PTR _j1$[ebp], ecx
$L1425:
  010e6	8b 55 a4	 mov	 edx, DWORD PTR _j1$[ebp]
  010e9	3b 55 0c	 cmp	 edx, DWORD PTR _n$[ebp]
  010ec	0f 8d 5e 0b 00
	00		 jge	 $L1427

; 1115 : 
; 1116 :     kk  = j1-3;

  010f2	8b 45 a4	 mov	 eax, DWORD PTR _j1$[ebp]
  010f5	83 e8 03	 sub	 eax, 3
  010f8	89 45 c8	 mov	 DWORD PTR _kk$[ebp], eax

; 1117 :     kk1 = j1-2;

  010fb	8b 4d a4	 mov	 ecx, DWORD PTR _j1$[ebp]
  010fe	83 e9 02	 sub	 ecx, 2
  01101	89 4d e4	 mov	 DWORD PTR _kk1$[ebp], ecx

; 1118 :     kk2 = j1-1;

  01104	8b 55 a4	 mov	 edx, DWORD PTR _j1$[ebp]
  01107	83 ea 01	 sub	 edx, 1
  0110a	89 55 d8	 mov	 DWORD PTR _kk2$[ebp], edx

; 1119 :     for (j=j1; j<j1+m; j+=4) {

  0110d	8b 45 a4	 mov	 eax, DWORD PTR _j1$[ebp]
  01110	89 85 6c ff ff
	ff		 mov	 DWORD PTR _j$[ebp], eax
  01116	eb 0f		 jmp	 SHORT $L1428
$L1429:
  01118	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  0111e	83 c1 04	 add	 ecx, 4
  01121	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _j$[ebp], ecx
$L1428:
  01127	8b 55 a4	 mov	 edx, DWORD PTR _j1$[ebp]
  0112a	03 95 60 ff ff
	ff		 add	 edx, DWORD PTR _m$[ebp]
  01130	39 95 6c ff ff
	ff		 cmp	 DWORD PTR _j$[ebp], edx
  01136	0f 8d 5c 01 00
	00		 jge	 $L1430

; 1120 :       kk2 += 4;

  0113c	8b 45 d8	 mov	 eax, DWORD PTR _kk2$[ebp]
  0113f	83 c0 04	 add	 eax, 4
  01142	89 45 d8	 mov	 DWORD PTR _kk2$[ebp], eax

; 1121 :       kk  += 4;

  01145	8b 4d c8	 mov	 ecx, DWORD PTR _kk$[ebp]
  01148	83 c1 04	 add	 ecx, 4
  0114b	89 4d c8	 mov	 DWORD PTR _kk$[ebp], ecx

; 1122 :       kk1 += 4;

  0114e	8b 55 e4	 mov	 edx, DWORD PTR _kk1$[ebp]
  01151	83 c2 04	 add	 edx, 4
  01154	89 55 e4	 mov	 DWORD PTR _kk1$[ebp], edx

; 1123 : 
; 1124 :       temp.re  = d[j].re - d[kk].re;

  01157	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  0115d	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01160	8b 55 c8	 mov	 edx, DWORD PTR _kk$[ebp]
  01163	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01166	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  01169	d8 24 d6	 fsub	 DWORD PTR [esi+edx*8]
  0116c	d9 5d d0	 fstp	 DWORD PTR _temp$[ebp]

; 1125 :       temp1.re =-d[kk1].im + d[kk2].im;

  0116f	8b 45 e4	 mov	 eax, DWORD PTR _kk1$[ebp]
  01172	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01175	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  01179	d9 e0		 fchs
  0117b	8b 55 d8	 mov	 edx, DWORD PTR _kk2$[ebp]
  0117e	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01181	d8 44 d0 04	 fadd	 DWORD PTR [eax+edx*8+4]
  01185	d9 5d bc	 fstp	 DWORD PTR _temp1$[ebp]

; 1126 :       temp.im  = d[j].im - d[kk].im;

  01188	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  0118e	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01191	8b 45 c8	 mov	 eax, DWORD PTR _kk$[ebp]
  01194	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01197	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  0119b	d8 64 c6 04	 fsub	 DWORD PTR [esi+eax*8+4]
  0119f	d9 5d d4	 fstp	 DWORD PTR _temp$[ebp+4]

; 1127 :       temp1.im =-d[kk2].re + d[kk1].re;

  011a2	8b 4d d8	 mov	 ecx, DWORD PTR _kk2$[ebp]
  011a5	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  011a8	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  011ab	d9 e0		 fchs
  011ad	8b 45 e4	 mov	 eax, DWORD PTR _kk1$[ebp]
  011b0	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  011b3	d8 04 c1	 fadd	 DWORD PTR [ecx+eax*8]
  011b6	d9 5d c0	 fstp	 DWORD PTR _temp1$[ebp+4]

; 1128 :       d[j].re   = (t.re  = d[j].re + d[kk].re)
; 1129 :                 + (t1.re = d[kk1].re + d[kk2].re);

  011b9	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  011bf	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  011c2	8b 4d c8	 mov	 ecx, DWORD PTR _kk$[ebp]
  011c5	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  011c8	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  011cb	d8 04 ce	 fadd	 DWORD PTR [esi+ecx*8]
  011ce	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]
  011d1	8b 55 e4	 mov	 edx, DWORD PTR _kk1$[ebp]
  011d4	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  011d7	8b 4d d8	 mov	 ecx, DWORD PTR _kk2$[ebp]
  011da	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  011dd	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  011e0	d8 04 ce	 fadd	 DWORD PTR [esi+ecx*8]
  011e3	d9 55 8c	 fst	 DWORD PTR _t1$[ebp]
  011e6	d8 45 80	 fadd	 DWORD PTR _t$[ebp]
  011e9	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  011ef	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  011f2	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1130 :       d[j].im   = (t.im  = d[j].im + d[kk].im)
; 1131 :                 + (t1.im = d[kk1].im + d[kk2].im);

  011f5	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  011fb	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  011fe	8b 45 c8	 mov	 eax, DWORD PTR _kk$[ebp]
  01201	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01204	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  01208	d8 44 c6 04	 fadd	 DWORD PTR [esi+eax*8+4]
  0120c	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]
  0120f	8b 4d e4	 mov	 ecx, DWORD PTR _kk1$[ebp]
  01212	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01215	8b 45 d8	 mov	 eax, DWORD PTR _kk2$[ebp]
  01218	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0121b	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  0121f	d8 44 c6 04	 fadd	 DWORD PTR [esi+eax*8+4]
  01223	d9 55 90	 fst	 DWORD PTR _t1$[ebp+4]
  01226	d8 45 84	 fadd	 DWORD PTR _t$[ebp+4]
  01229	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  0122f	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01232	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1132 :       d[kk].re  = temp.re + temp1.re;

  01236	d9 45 d0	 fld	 DWORD PTR _temp$[ebp]
  01239	d8 45 bc	 fadd	 DWORD PTR _temp1$[ebp]
  0123c	8b 45 c8	 mov	 eax, DWORD PTR _kk$[ebp]
  0123f	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01242	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1133 :       d[kk].im  = temp.im + temp1.im;

  01245	d9 45 d4	 fld	 DWORD PTR _temp$[ebp+4]
  01248	d8 45 c0	 fadd	 DWORD PTR _temp1$[ebp+4]
  0124b	8b 55 c8	 mov	 edx, DWORD PTR _kk$[ebp]
  0124e	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01251	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1134 :       d[kk1].re = t.re - t1.re;

  01255	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  01258	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  0125b	8b 4d e4	 mov	 ecx, DWORD PTR _kk1$[ebp]
  0125e	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01261	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1135 :       d[kk1].im = t.im - t1.im;

  01264	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  01267	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  0126a	8b 45 e4	 mov	 eax, DWORD PTR _kk1$[ebp]
  0126d	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01270	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1136 :       d[kk2].re = temp.re - temp1.re;

  01274	d9 45 d0	 fld	 DWORD PTR _temp$[ebp]
  01277	d8 65 bc	 fsub	 DWORD PTR _temp1$[ebp]
  0127a	8b 55 d8	 mov	 edx, DWORD PTR _kk2$[ebp]
  0127d	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01280	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1137 :       d[kk2].im = temp.im - temp1.im;

  01283	d9 45 d4	 fld	 DWORD PTR _temp$[ebp+4]
  01286	d8 65 c0	 fsub	 DWORD PTR _temp1$[ebp+4]
  01289	8b 4d d8	 mov	 ecx, DWORD PTR _kk2$[ebp]
  0128c	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  0128f	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1138 :     } /* for */

  01293	e9 80 fe ff ff	 jmp	 $L1429
$L1430:

; 1139 :     nn = 4;

  01298	c7 45 c4 04 00
	00 00		 mov	 DWORD PTR _nn$[ebp], 4

; 1140 :     mmax = 8;

  0129f	c7 45 94 08 00
	00 00		 mov	 DWORD PTR _mmax$[ebp], 8

; 1141 :     istep = 16;

  012a6	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR _istep$[ebp], 16 ; 00000010H

; 1142 :     if (nn==n) return;

  012ad	8b 45 c4	 mov	 eax, DWORD PTR _nn$[ebp]
  012b0	3b 45 0c	 cmp	 eax, DWORD PTR _n$[ebp]
  012b3	75 05		 jne	 SHORT $L1431
  012b5	e9 45 0e 00 00	 jmp	 $norm$1458
$L1431:

; 1143 :     ik1 = n>>3;

  012ba	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  012bd	c1 f9 03	 sar	 ecx, 3
  012c0	89 4d dc	 mov	 DWORD PTR _ik1$[ebp], ecx

; 1144 :     ik2 = n>>4;

  012c3	8b 55 0c	 mov	 edx, DWORD PTR _n$[ebp]
  012c6	c1 fa 04	 sar	 edx, 4
  012c9	89 95 7c ff ff
	ff		 mov	 DWORD PTR _ik2$[ebp], edx
$invnext$1432:

; 1145 :     invnext:
; 1146 : 
; 1147 :     if (istep>n) goto inv;

  012cf	8b 45 fc	 mov	 eax, DWORD PTR _istep$[ebp]
  012d2	3b 45 0c	 cmp	 eax, DWORD PTR _n$[ebp]
  012d5	7e 05		 jle	 SHORT $L1433
  012d7	e9 40 0c 00 00	 jmp	 $inv$1434
$L1433:

; 1148 :     kk2 = (kk = j1+nn-istep) + mmax;

  012dc	8b 4d a4	 mov	 ecx, DWORD PTR _j1$[ebp]
  012df	03 4d c4	 add	 ecx, DWORD PTR _nn$[ebp]
  012e2	2b 4d fc	 sub	 ecx, DWORD PTR _istep$[ebp]
  012e5	89 4d c8	 mov	 DWORD PTR _kk$[ebp], ecx
  012e8	8b 55 c8	 mov	 edx, DWORD PTR _kk$[ebp]
  012eb	03 55 94	 add	 edx, DWORD PTR _mmax$[ebp]
  012ee	89 55 d8	 mov	 DWORD PTR _kk2$[ebp], edx

; 1149 :     kk1 = j1+mmax-istep;

  012f1	8b 45 a4	 mov	 eax, DWORD PTR _j1$[ebp]
  012f4	03 45 94	 add	 eax, DWORD PTR _mmax$[ebp]
  012f7	2b 45 fc	 sub	 eax, DWORD PTR _istep$[ebp]
  012fa	89 45 e4	 mov	 DWORD PTR _kk1$[ebp], eax

; 1150 :     nj = nn>>1;

  012fd	8b 4d c4	 mov	 ecx, DWORD PTR _nn$[ebp]
  01300	d1 f9		 sar	 ecx, 1
  01302	89 4d f8	 mov	 DWORD PTR _nj$[ebp], ecx

; 1151 :     for (j=j1; j<j1+m; j+=istep) {

  01305	8b 55 a4	 mov	 edx, DWORD PTR _j1$[ebp]
  01308	89 95 6c ff ff
	ff		 mov	 DWORD PTR _j$[ebp], edx
  0130e	eb 0f		 jmp	 SHORT $L1435
$L1436:
  01310	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  01316	03 45 fc	 add	 eax, DWORD PTR _istep$[ebp]
  01319	89 85 6c ff ff
	ff		 mov	 DWORD PTR _j$[ebp], eax
$L1435:
  0131f	8b 4d a4	 mov	 ecx, DWORD PTR _j1$[ebp]
  01322	03 8d 60 ff ff
	ff		 add	 ecx, DWORD PTR _m$[ebp]
  01328	39 8d 6c ff ff
	ff		 cmp	 DWORD PTR _j$[ebp], ecx
  0132e	0f 8d d7 08 00
	00		 jge	 $L1437

; 1152 :       kk2 += istep;

  01334	8b 55 d8	 mov	 edx, DWORD PTR _kk2$[ebp]
  01337	03 55 fc	 add	 edx, DWORD PTR _istep$[ebp]
  0133a	89 55 d8	 mov	 DWORD PTR _kk2$[ebp], edx

; 1153 :       kk  += istep;

  0133d	8b 45 c8	 mov	 eax, DWORD PTR _kk$[ebp]
  01340	03 45 fc	 add	 eax, DWORD PTR _istep$[ebp]
  01343	89 45 c8	 mov	 DWORD PTR _kk$[ebp], eax

; 1154 :       kk1 += istep;

  01346	8b 4d e4	 mov	 ecx, DWORD PTR _kk1$[ebp]
  01349	03 4d fc	 add	 ecx, DWORD PTR _istep$[ebp]
  0134c	89 4d e4	 mov	 DWORD PTR _kk1$[ebp], ecx

; 1155 : 
; 1156 :       temp.re  = d[j].re - d[kk].re;

  0134f	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  01355	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01358	8b 4d c8	 mov	 ecx, DWORD PTR _kk$[ebp]
  0135b	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0135e	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  01361	d8 24 ce	 fsub	 DWORD PTR [esi+ecx*8]
  01364	d9 5d d0	 fstp	 DWORD PTR _temp$[ebp]

; 1157 :       temp.im  = d[j].im - d[kk].im;

  01367	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  0136d	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01370	8b 4d c8	 mov	 ecx, DWORD PTR _kk$[ebp]
  01373	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01376	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  0137a	d8 64 ce 04	 fsub	 DWORD PTR [esi+ecx*8+4]
  0137e	d9 5d d4	 fstp	 DWORD PTR _temp$[ebp+4]

; 1158 :       temp1.re =-d[kk1].im + d[kk2].im;

  01381	8b 55 e4	 mov	 edx, DWORD PTR _kk1$[ebp]
  01384	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01387	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  0138b	d9 e0		 fchs
  0138d	8b 4d d8	 mov	 ecx, DWORD PTR _kk2$[ebp]
  01390	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01393	d8 44 ca 04	 fadd	 DWORD PTR [edx+ecx*8+4]
  01397	d9 5d bc	 fstp	 DWORD PTR _temp1$[ebp]

; 1159 :       temp1.im =-d[kk2].re + d[kk1].re;

  0139a	8b 45 d8	 mov	 eax, DWORD PTR _kk2$[ebp]
  0139d	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  013a0	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  013a3	d9 e0		 fchs
  013a5	8b 55 e4	 mov	 edx, DWORD PTR _kk1$[ebp]
  013a8	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  013ab	d8 04 d0	 fadd	 DWORD PTR [eax+edx*8]
  013ae	d9 5d c0	 fstp	 DWORD PTR _temp1$[ebp+4]

; 1160 : 
; 1161 :       t.re      = d[j].re + d[kk].re;

  013b1	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  013b7	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  013ba	8b 45 c8	 mov	 eax, DWORD PTR _kk$[ebp]
  013bd	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  013c0	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  013c3	d8 04 c6	 fadd	 DWORD PTR [esi+eax*8]
  013c6	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 1162 :       t1.re     = d[kk1].re + d[kk2].re;

  013c9	8b 4d e4	 mov	 ecx, DWORD PTR _kk1$[ebp]
  013cc	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  013cf	8b 45 d8	 mov	 eax, DWORD PTR _kk2$[ebp]
  013d2	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  013d5	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  013d8	d8 04 c6	 fadd	 DWORD PTR [esi+eax*8]
  013db	d9 5d 8c	 fstp	 DWORD PTR _t1$[ebp]

; 1163 :       t.im      = d[j].im + d[kk].im;

  013de	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  013e4	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  013e7	8b 45 c8	 mov	 eax, DWORD PTR _kk$[ebp]
  013ea	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  013ed	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  013f1	d8 44 c6 04	 fadd	 DWORD PTR [esi+eax*8+4]
  013f5	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 1164 :       t1.im     = d[kk1].im + d[kk2].im;

  013f8	8b 4d e4	 mov	 ecx, DWORD PTR _kk1$[ebp]
  013fb	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  013fe	8b 45 d8	 mov	 eax, DWORD PTR _kk2$[ebp]
  01401	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01404	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  01408	d8 44 c6 04	 fadd	 DWORD PTR [esi+eax*8+4]
  0140c	d9 5d 90	 fstp	 DWORD PTR _t1$[ebp+4]

; 1165 :       d[j].re   = t.re + t1.re;

  0140f	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  01412	d8 45 8c	 fadd	 DWORD PTR _t1$[ebp]
  01415	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  0141b	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  0141e	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1166 :       d[j].im   = t.im + t1.im;

  01421	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  01424	d8 45 90	 fadd	 DWORD PTR _t1$[ebp+4]
  01427	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  0142d	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01430	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1167 :       d[kk].re  = temp.re + temp1.re;

  01434	d9 45 d0	 fld	 DWORD PTR _temp$[ebp]
  01437	d8 45 bc	 fadd	 DWORD PTR _temp1$[ebp]
  0143a	8b 55 c8	 mov	 edx, DWORD PTR _kk$[ebp]
  0143d	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01440	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1168 :       d[kk].im  = temp.im + temp1.im;

  01443	d9 45 d4	 fld	 DWORD PTR _temp$[ebp+4]
  01446	d8 45 c0	 fadd	 DWORD PTR _temp1$[ebp+4]
  01449	8b 4d c8	 mov	 ecx, DWORD PTR _kk$[ebp]
  0144c	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  0144f	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1169 :       d[kk1].re = t.re - t1.re;

  01453	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  01456	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  01459	8b 45 e4	 mov	 eax, DWORD PTR _kk1$[ebp]
  0145c	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0145f	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1170 :       d[kk1].im = t.im - t1.im;

  01462	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  01465	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  01468	8b 55 e4	 mov	 edx, DWORD PTR _kk1$[ebp]
  0146b	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0146e	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1171 :       d[kk2].re = temp.re - temp1.re;

  01472	d9 45 d0	 fld	 DWORD PTR _temp$[ebp]
  01475	d8 65 bc	 fsub	 DWORD PTR _temp1$[ebp]
  01478	8b 4d d8	 mov	 ecx, DWORD PTR _kk2$[ebp]
  0147b	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  0147e	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1172 :       d[kk2].im = temp.im - temp1.im;

  01481	d9 45 d4	 fld	 DWORD PTR _temp$[ebp+4]
  01484	d8 65 c0	 fsub	 DWORD PTR _temp1$[ebp+4]
  01487	8b 45 d8	 mov	 eax, DWORD PTR _kk2$[ebp]
  0148a	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0148d	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1173 : 
; 1174 :       kj   = j+nj;

  01491	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  01497	03 55 f8	 add	 edx, DWORD PTR _nj$[ebp]
  0149a	89 55 b4	 mov	 DWORD PTR _kj$[ebp], edx

; 1175 :       kkj2 = kk2+nj;

  0149d	8b 45 d8	 mov	 eax, DWORD PTR _kk2$[ebp]
  014a0	03 45 f8	 add	 eax, DWORD PTR _nj$[ebp]
  014a3	89 45 a0	 mov	 DWORD PTR _kkj2$[ebp], eax

; 1176 :       kkj  = kk+nj;

  014a6	8b 4d c8	 mov	 ecx, DWORD PTR _kk$[ebp]
  014a9	03 4d f8	 add	 ecx, DWORD PTR _nj$[ebp]
  014ac	89 4d b8	 mov	 DWORD PTR _kkj$[ebp], ecx

; 1177 :       kkj1 = kk1+nj;

  014af	8b 55 e4	 mov	 edx, DWORD PTR _kk1$[ebp]
  014b2	03 55 f8	 add	 edx, DWORD PTR _nj$[ebp]
  014b5	89 55 cc	 mov	 DWORD PTR _kkj1$[ebp], edx

; 1178 : 
; 1179 :       temp.re  = d[kj].re + d[kkj].im;  /* tkk */

  014b8	8b 45 b4	 mov	 eax, DWORD PTR _kj$[ebp]
  014bb	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  014be	8b 55 b8	 mov	 edx, DWORD PTR _kkj$[ebp]
  014c1	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  014c4	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  014c7	d8 44 d6 04	 fadd	 DWORD PTR [esi+edx*8+4]
  014cb	d9 5d d0	 fstp	 DWORD PTR _temp$[ebp]

; 1180 :       temp.im  = d[kj].im - d[kkj].re;

  014ce	8b 45 b4	 mov	 eax, DWORD PTR _kj$[ebp]
  014d1	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  014d4	8b 55 b8	 mov	 edx, DWORD PTR _kkj$[ebp]
  014d7	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  014da	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  014de	d8 24 d6	 fsub	 DWORD PTR [esi+edx*8]
  014e1	d9 5d d4	 fstp	 DWORD PTR _temp$[ebp+4]

; 1181 :       t.re  = d[kj].re - d[kkj].im;     /* tk  */

  014e4	8b 45 b4	 mov	 eax, DWORD PTR _kj$[ebp]
  014e7	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  014ea	8b 55 b8	 mov	 edx, DWORD PTR _kkj$[ebp]
  014ed	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  014f0	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  014f3	d8 64 d6 04	 fsub	 DWORD PTR [esi+edx*8+4]
  014f7	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 1182 :       t.im  = d[kj].im + d[kkj].re;

  014fa	8b 45 b4	 mov	 eax, DWORD PTR _kj$[ebp]
  014fd	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01500	8b 55 b8	 mov	 edx, DWORD PTR _kkj$[ebp]
  01503	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01506	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  0150a	d8 04 d6	 fadd	 DWORD PTR [esi+edx*8]
  0150d	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 1183 : 
; 1184 :       temp1.re = d[kkj1].re + d[kkj2].im;     /* tk2 */

  01510	8b 45 cc	 mov	 eax, DWORD PTR _kkj1$[ebp]
  01513	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01516	8b 55 a0	 mov	 edx, DWORD PTR _kkj2$[ebp]
  01519	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0151c	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  0151f	d8 44 d6 04	 fadd	 DWORD PTR [esi+edx*8+4]
  01523	d9 5d bc	 fstp	 DWORD PTR _temp1$[ebp]

; 1185 :       temp1.im = d[kkj1].im - d[kkj2].re;

  01526	8b 45 cc	 mov	 eax, DWORD PTR _kkj1$[ebp]
  01529	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0152c	8b 55 a0	 mov	 edx, DWORD PTR _kkj2$[ebp]
  0152f	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01532	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  01536	d8 24 d6	 fsub	 DWORD PTR [esi+edx*8]
  01539	d9 5d c0	 fstp	 DWORD PTR _temp1$[ebp+4]

; 1186 :       t1.re = d[kkj1].re - d[kkj2].im;        /* tk1 */

  0153c	8b 45 cc	 mov	 eax, DWORD PTR _kkj1$[ebp]
  0153f	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01542	8b 55 a0	 mov	 edx, DWORD PTR _kkj2$[ebp]
  01545	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01548	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  0154b	d8 64 d6 04	 fsub	 DWORD PTR [esi+edx*8+4]
  0154f	d9 5d 8c	 fstp	 DWORD PTR _t1$[ebp]

; 1187 :       t1.im = d[kkj1].im + d[kkj2].re;

  01552	8b 45 cc	 mov	 eax, DWORD PTR _kkj1$[ebp]
  01555	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01558	8b 55 a0	 mov	 edx, DWORD PTR _kkj2$[ebp]
  0155b	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0155e	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  01562	d8 04 d6	 fadd	 DWORD PTR [esi+edx*8]
  01565	d9 5d 90	 fstp	 DWORD PTR _t1$[ebp+4]

; 1188 : 
; 1189 :       t11.re =-V707107*(temp1.re+temp1.im); /* tr1 */

  01568	d9 45 bc	 fld	 DWORD PTR _temp1$[ebp]
  0156b	d8 45 c0	 fadd	 DWORD PTR _temp1$[ebp+4]
  0156e	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@bf3504f7
  01574	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR _t11$[ebp]

; 1190 :       t11.im =-V707107*(temp1.im-temp1.re);

  0157a	d9 45 c0	 fld	 DWORD PTR _temp1$[ebp+4]
  0157d	d8 65 bc	 fsub	 DWORD PTR _temp1$[ebp]
  01580	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@bf3504f7
  01586	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR _t11$[ebp+4]

; 1191 :       t01.re = V707107*(t1.re-t1.im);        /* tr  */

  0158c	d9 45 8c	 fld	 DWORD PTR _t1$[ebp]
  0158f	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  01592	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f7
  01598	d9 5d e8	 fstp	 DWORD PTR _t01$[ebp]

; 1192 :       t01.im = V707107*(t1.im+t1.re);

  0159b	d9 45 90	 fld	 DWORD PTR _t1$[ebp+4]
  0159e	d8 45 8c	 fadd	 DWORD PTR _t1$[ebp]
  015a1	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f7
  015a7	d9 5d ec	 fstp	 DWORD PTR _t01$[ebp+4]

; 1193 : 
; 1194 :       d[kj].re   = t.re + t01.re;

  015aa	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  015ad	d8 45 e8	 fadd	 DWORD PTR _t01$[ebp]
  015b0	8b 45 b4	 mov	 eax, DWORD PTR _kj$[ebp]
  015b3	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  015b6	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1195 :       d[kj].im   = t.im + t01.im;

  015b9	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  015bc	d8 45 ec	 fadd	 DWORD PTR _t01$[ebp+4]
  015bf	8b 55 b4	 mov	 edx, DWORD PTR _kj$[ebp]
  015c2	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  015c5	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1196 :       d[kkj].re  = temp.re + t11.re;

  015c9	d9 45 d0	 fld	 DWORD PTR _temp$[ebp]
  015cc	d8 85 70 ff ff
	ff		 fadd	 DWORD PTR _t11$[ebp]
  015d2	8b 4d b8	 mov	 ecx, DWORD PTR _kkj$[ebp]
  015d5	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  015d8	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1197 :       d[kkj].im  = temp.im + t11.im;

  015db	d9 45 d4	 fld	 DWORD PTR _temp$[ebp+4]
  015de	d8 85 74 ff ff
	ff		 fadd	 DWORD PTR _t11$[ebp+4]
  015e4	8b 45 b8	 mov	 eax, DWORD PTR _kkj$[ebp]
  015e7	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  015ea	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1198 :       d[kkj1].re = t.re - t01.re;

  015ee	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  015f1	d8 65 e8	 fsub	 DWORD PTR _t01$[ebp]
  015f4	8b 55 cc	 mov	 edx, DWORD PTR _kkj1$[ebp]
  015f7	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  015fa	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1199 :       d[kkj1].im = t.im - t01.im;

  015fd	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  01600	d8 65 ec	 fsub	 DWORD PTR _t01$[ebp+4]
  01603	8b 4d cc	 mov	 ecx, DWORD PTR _kkj1$[ebp]
  01606	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01609	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1200 :       d[kkj2].re = temp.re - t11.re;

  0160d	d9 45 d0	 fld	 DWORD PTR _temp$[ebp]
  01610	d8 a5 70 ff ff
	ff		 fsub	 DWORD PTR _t11$[ebp]
  01616	8b 45 a0	 mov	 eax, DWORD PTR _kkj2$[ebp]
  01619	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0161c	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1201 :       d[kkj2].im = temp.im - t11.im;

  0161f	d9 45 d4	 fld	 DWORD PTR _temp$[ebp+4]
  01622	d8 a5 74 ff ff
	ff		 fsub	 DWORD PTR _t11$[ebp+4]
  01628	8b 55 a0	 mov	 edx, DWORD PTR _kkj2$[ebp]
  0162b	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0162e	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1202 : 
; 1203 :       k2 = (k = j+nn) + mmax;

  01632	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  01638	03 4d c4	 add	 ecx, DWORD PTR _nn$[ebp]
  0163b	89 4d 98	 mov	 DWORD PTR _k$[ebp], ecx
  0163e	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  01641	03 55 94	 add	 edx, DWORD PTR _mmax$[ebp]
  01644	89 55 88	 mov	 DWORD PTR _k2$[ebp], edx

; 1204 :       k1 = j+mmax;

  01647	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  0164d	03 45 94	 add	 eax, DWORD PTR _mmax$[ebp]
  01650	89 85 78 ff ff
	ff		 mov	 DWORD PTR _k1$[ebp], eax

; 1205 :       i1 = i2 = 0;

  01656	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i2$[ebp], 0
  01660	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  01666	89 4d e0	 mov	 DWORD PTR _i1$[ebp], ecx

; 1206 :       ki  = k;

  01669	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  0166c	89 55 b0	 mov	 DWORD PTR _ki$[ebp], edx

; 1207 :       ki1 = k2;

  0166f	8b 45 88	 mov	 eax, DWORD PTR _k2$[ebp]
  01672	89 45 f0	 mov	 DWORD PTR _ki1$[ebp], eax

; 1208 :       kii = k1;

  01675	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _k1$[ebp]
  0167b	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _kii$[ebp], ecx

; 1209 :       ki2 = ki1 + nn;

  01681	8b 55 f0	 mov	 edx, DWORD PTR _ki1$[ebp]
  01684	03 55 c4	 add	 edx, DWORD PTR _nn$[ebp]
  01687	89 55 a8	 mov	 DWORD PTR _ki2$[ebp], edx

; 1210 :       for (i=j+1; i<j+nj; i++) {

  0168a	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  01690	83 c0 01	 add	 eax, 1
  01693	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  01696	eb 09		 jmp	 SHORT $L1442
$L1443:
  01698	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0169b	83 c1 01	 add	 ecx, 1
  0169e	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$L1442:
  016a1	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  016a7	03 55 f8	 add	 edx, DWORD PTR _nj$[ebp]
  016aa	39 55 f4	 cmp	 DWORD PTR _i$[ebp], edx
  016ad	0f 8d 53 05 00
	00		 jge	 $L1444

; 1211 :         k2++; k1++; k++;

  016b3	8b 45 88	 mov	 eax, DWORD PTR _k2$[ebp]
  016b6	83 c0 01	 add	 eax, 1
  016b9	89 45 88	 mov	 DWORD PTR _k2$[ebp], eax
  016bc	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _k1$[ebp]
  016c2	83 c1 01	 add	 ecx, 1
  016c5	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _k1$[ebp], ecx
  016cb	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  016ce	83 c2 01	 add	 edx, 1
  016d1	89 55 98	 mov	 DWORD PTR _k$[ebp], edx

; 1212 :         i1+=ik1; i2+=ik2;

  016d4	8b 45 e0	 mov	 eax, DWORD PTR _i1$[ebp]
  016d7	03 45 dc	 add	 eax, DWORD PTR _ik1$[ebp]
  016da	89 45 e0	 mov	 DWORD PTR _i1$[ebp], eax
  016dd	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  016e3	03 8d 7c ff ff
	ff		 add	 ecx, DWORD PTR _ik2$[ebp]
  016e9	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _i2$[ebp], ecx

; 1213 : 
; 1214 :         t.re  = w[i1].re*d[k].re + w[i1].im*d[k].im;

  016ef	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  016f2	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  016f5	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  016f8	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  016fb	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  016fe	d8 0c ce	 fmul	 DWORD PTR [esi+ecx*8]
  01701	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  01704	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01707	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  0170a	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0170d	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  01711	d8 4c ce 04	 fmul	 DWORD PTR [esi+ecx*8+4]
  01715	de c1		 faddp	 ST(1), ST(0)
  01717	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 1215 :         t.im  = w[i1].re*d[k].im - w[i1].im*d[k].re;

  0171a	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  0171d	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01720	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  01723	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01726	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  01729	d8 4c ce 04	 fmul	 DWORD PTR [esi+ecx*8+4]
  0172d	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  01730	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01733	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  01736	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01739	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  0173d	d8 0c ce	 fmul	 DWORD PTR [esi+ecx*8]
  01740	de e9		 fsubp	 ST(1), ST(0)
  01742	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 1216 :         t1.re = w[i1].re*d[k2].re + w[i1].im*d[k2].im;

  01745	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  01748	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  0174b	8b 4d 88	 mov	 ecx, DWORD PTR _k2$[ebp]
  0174e	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01751	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  01754	d8 0c ce	 fmul	 DWORD PTR [esi+ecx*8]
  01757	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  0175a	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  0175d	8b 4d 88	 mov	 ecx, DWORD PTR _k2$[ebp]
  01760	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01763	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  01767	d8 4c ce 04	 fmul	 DWORD PTR [esi+ecx*8+4]
  0176b	de c1		 faddp	 ST(1), ST(0)
  0176d	d9 5d 8c	 fstp	 DWORD PTR _t1$[ebp]

; 1217 :         t1.im = w[i1].re*d[k2].im - w[i1].im*d[k2].re;

  01770	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  01773	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01776	8b 4d 88	 mov	 ecx, DWORD PTR _k2$[ebp]
  01779	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0177c	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  0177f	d8 4c ce 04	 fmul	 DWORD PTR [esi+ecx*8+4]
  01783	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  01786	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01789	8b 4d 88	 mov	 ecx, DWORD PTR _k2$[ebp]
  0178c	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0178f	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  01793	d8 0c ce	 fmul	 DWORD PTR [esi+ecx*8]
  01796	de e9		 fsubp	 ST(1), ST(0)
  01798	d9 5d 90	 fstp	 DWORD PTR _t1$[ebp+4]

; 1218 : 
; 1219 :         temp.re  = w[i2].re*(d[k1].re + t1.re) + w[i2].im*(d[k1].im + t1.im);

  0179b	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _k1$[ebp]
  017a1	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  017a4	d9 45 8c	 fld	 DWORD PTR _t1$[ebp]
  017a7	d8 04 d0	 fadd	 DWORD PTR [eax+edx*8]
  017aa	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  017b0	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  017b3	d8 0c ca	 fmul	 DWORD PTR [edx+ecx*8]
  017b6	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _k1$[ebp]
  017bc	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  017bf	d9 45 90	 fld	 DWORD PTR _t1$[ebp+4]
  017c2	d8 44 c1 04	 fadd	 DWORD PTR [ecx+eax*8+4]
  017c6	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  017cc	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  017cf	d8 4c d0 04	 fmul	 DWORD PTR [eax+edx*8+4]
  017d3	de c1		 faddp	 ST(1), ST(0)
  017d5	d9 5d d0	 fstp	 DWORD PTR _temp$[ebp]

; 1220 :         temp.im  = w[i2].re*(d[k1].im + t1.im) - w[i2].im*(d[k1].re + t1.re);

  017d8	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _k1$[ebp]
  017de	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  017e1	d9 45 90	 fld	 DWORD PTR _t1$[ebp+4]
  017e4	d8 44 ca 04	 fadd	 DWORD PTR [edx+ecx*8+4]
  017e8	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  017ee	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  017f1	d8 0c c1	 fmul	 DWORD PTR [ecx+eax*8]
  017f4	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _k1$[ebp]
  017fa	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  017fd	d9 45 8c	 fld	 DWORD PTR _t1$[ebp]
  01800	d8 04 d0	 fadd	 DWORD PTR [eax+edx*8]
  01803	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  01809	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  0180c	d8 4c ca 04	 fmul	 DWORD PTR [edx+ecx*8+4]
  01810	de e9		 fsubp	 ST(1), ST(0)
  01812	d9 5d d4	 fstp	 DWORD PTR _temp$[ebp+4]

; 1221 :         temp1.re = w[i2].im*(d[k1].re - t1.re) - w[i2].re*(d[k1].im - t1.im);

  01815	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _k1$[ebp]
  0181b	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0181e	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  01821	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  01824	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  0182a	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  0182d	d8 4c d0 04	 fmul	 DWORD PTR [eax+edx*8+4]
  01831	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _k1$[ebp]
  01837	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  0183a	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  0183e	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  01841	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  01847	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  0184a	d8 0c c1	 fmul	 DWORD PTR [ecx+eax*8]
  0184d	de e9		 fsubp	 ST(1), ST(0)
  0184f	d9 5d bc	 fstp	 DWORD PTR _temp1$[ebp]

; 1222 :         temp1.im = w[i2].im*(d[k1].im - t1.im) + w[i2].re*(d[k1].re - t1.re);

  01852	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _k1$[ebp]
  01858	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0185b	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  0185f	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  01862	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  01868	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  0186b	d8 4c ca 04	 fmul	 DWORD PTR [edx+ecx*8+4]
  0186f	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _k1$[ebp]
  01875	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01878	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  0187b	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  0187e	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  01884	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01887	d8 0c d0	 fmul	 DWORD PTR [eax+edx*8]
  0188a	de c1		 faddp	 ST(1), ST(0)
  0188c	d9 5d c0	 fstp	 DWORD PTR _temp1$[ebp+4]

; 1223 : 
; 1224 :         d[k].re  = d[i].re - t.re + temp1.re;

  0188f	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01892	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01895	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  01898	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  0189b	d8 45 bc	 fadd	 DWORD PTR _temp1$[ebp]
  0189e	8b 45 98	 mov	 eax, DWORD PTR _k$[ebp]
  018a1	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  018a4	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1225 :         d[k2].re = d[i].re - t.re - temp1.re;

  018a7	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  018aa	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  018ad	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  018b0	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  018b3	d8 65 bc	 fsub	 DWORD PTR _temp1$[ebp]
  018b6	8b 4d 88	 mov	 ecx, DWORD PTR _k2$[ebp]
  018b9	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  018bc	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1226 :         d[k].im  = d[i].im - t.im + temp1.im;

  018bf	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  018c2	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  018c5	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  018c9	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  018cc	d8 45 c0	 fadd	 DWORD PTR _temp1$[ebp+4]
  018cf	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  018d2	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  018d5	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1227 :         d[k2].im = d[i].im - t.im - temp1.im;

  018d9	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  018dc	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  018df	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  018e3	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  018e6	d8 65 c0	 fsub	 DWORD PTR _temp1$[ebp+4]
  018e9	8b 45 88	 mov	 eax, DWORD PTR _k2$[ebp]
  018ec	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  018ef	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1228 :         d[k1].im = d[i].im + t.im - temp.im;

  018f3	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  018f6	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  018f9	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  018fc	d8 44 d0 04	 fadd	 DWORD PTR [eax+edx*8+4]
  01900	d8 65 d4	 fsub	 DWORD PTR _temp$[ebp+4]
  01903	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _k1$[ebp]
  01909	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  0190c	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1229 :         d[k1].re = d[i].re + t.re - temp.re;

  01910	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01913	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01916	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  01919	d8 04 c1	 fadd	 DWORD PTR [ecx+eax*8]
  0191c	d8 65 d0	 fsub	 DWORD PTR _temp$[ebp]
  0191f	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _k1$[ebp]
  01925	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01928	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1230 :         d[i].im += t.im + temp.im;

  0192b	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  0192e	d8 45 d4	 fadd	 DWORD PTR _temp$[ebp+4]
  01931	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01934	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01937	d8 44 ca 04	 fadd	 DWORD PTR [edx+ecx*8+4]
  0193b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0193e	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01941	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1231 :         d[i].re += t.re + temp.re;

  01945	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  01948	d8 45 d0	 fadd	 DWORD PTR _temp$[ebp]
  0194b	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0194e	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01951	d8 04 d0	 fadd	 DWORD PTR [eax+edx*8]
  01954	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01957	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  0195a	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1232 : 
; 1233 :         ki--; ki1--; kii--; ki2--;

  0195d	8b 45 b0	 mov	 eax, DWORD PTR _ki$[ebp]
  01960	83 e8 01	 sub	 eax, 1
  01963	89 45 b0	 mov	 DWORD PTR _ki$[ebp], eax
  01966	8b 4d f0	 mov	 ecx, DWORD PTR _ki1$[ebp]
  01969	83 e9 01	 sub	 ecx, 1
  0196c	89 4d f0	 mov	 DWORD PTR _ki1$[ebp], ecx
  0196f	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _kii$[ebp]
  01975	83 ea 01	 sub	 edx, 1
  01978	89 95 68 ff ff
	ff		 mov	 DWORD PTR _kii$[ebp], edx
  0197e	8b 45 a8	 mov	 eax, DWORD PTR _ki2$[ebp]
  01981	83 e8 01	 sub	 eax, 1
  01984	89 45 a8	 mov	 DWORD PTR _ki2$[ebp], eax

; 1234 :         t.re  =-w[i1].re*d[kii].re + w[i1].im*d[kii].im;

  01987	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  0198a	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  0198d	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  01990	d9 e0		 fchs
  01992	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _kii$[ebp]
  01998	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  0199b	d8 0c c1	 fmul	 DWORD PTR [ecx+eax*8]
  0199e	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  019a1	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  019a4	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _kii$[ebp]
  019aa	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  019ad	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  019b1	d8 4c ce 04	 fmul	 DWORD PTR [esi+ecx*8+4]
  019b5	de c1		 faddp	 ST(1), ST(0)
  019b7	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 1235 :         t.im  =-w[i1].re*d[kii].im - w[i1].im*d[kii].re;

  019ba	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  019bd	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  019c0	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  019c3	d9 e0		 fchs
  019c5	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _kii$[ebp]
  019cb	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  019ce	d8 4c ca 04	 fmul	 DWORD PTR [edx+ecx*8+4]
  019d2	8b 45 e0	 mov	 eax, DWORD PTR _i1$[ebp]
  019d5	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  019d8	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _kii$[ebp]
  019de	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  019e1	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  019e5	d8 0c d6	 fmul	 DWORD PTR [esi+edx*8]
  019e8	de e9		 fsubp	 ST(1), ST(0)
  019ea	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 1236 :         t1.re =-w[i1].re*d[ki2].re + w[i1].im*d[ki2].im;

  019ed	8b 45 e0	 mov	 eax, DWORD PTR _i1$[ebp]
  019f0	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  019f3	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  019f6	d9 e0		 fchs
  019f8	8b 55 a8	 mov	 edx, DWORD PTR _ki2$[ebp]
  019fb	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  019fe	d8 0c d0	 fmul	 DWORD PTR [eax+edx*8]
  01a01	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  01a04	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  01a07	8b 45 a8	 mov	 eax, DWORD PTR _ki2$[ebp]
  01a0a	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01a0d	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  01a11	d8 4c c6 04	 fmul	 DWORD PTR [esi+eax*8+4]
  01a15	de c1		 faddp	 ST(1), ST(0)
  01a17	d9 5d 8c	 fstp	 DWORD PTR _t1$[ebp]

; 1237 :         t1.im =-w[i1].re*d[ki2].im - w[i1].im*d[ki2].re;

  01a1a	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  01a1d	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  01a20	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  01a23	d9 e0		 fchs
  01a25	8b 45 a8	 mov	 eax, DWORD PTR _ki2$[ebp]
  01a28	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01a2b	d8 4c c1 04	 fmul	 DWORD PTR [ecx+eax*8+4]
  01a2f	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  01a32	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01a35	8b 4d a8	 mov	 ecx, DWORD PTR _ki2$[ebp]
  01a38	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01a3b	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  01a3f	d8 0c ce	 fmul	 DWORD PTR [esi+ecx*8]
  01a42	de e9		 fsubp	 ST(1), ST(0)
  01a44	d9 5d 90	 fstp	 DWORD PTR _t1$[ebp+4]

; 1238 : 
; 1239 :         temp.re  =-w[i2].im*(d[ki1].re + t1.re) - w[i2].re*(d[ki1].im + t1.im);

  01a47	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  01a4d	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01a50	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  01a54	d9 e0		 fchs
  01a56	8b 4d f0	 mov	 ecx, DWORD PTR _ki1$[ebp]
  01a59	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01a5c	d9 45 8c	 fld	 DWORD PTR _t1$[ebp]
  01a5f	d8 04 ca	 fadd	 DWORD PTR [edx+ecx*8]
  01a62	de c9		 fmulp	 ST(1), ST(0)
  01a64	8b 45 f0	 mov	 eax, DWORD PTR _ki1$[ebp]
  01a67	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01a6a	d9 45 90	 fld	 DWORD PTR _t1$[ebp+4]
  01a6d	d8 44 c1 04	 fadd	 DWORD PTR [ecx+eax*8+4]
  01a71	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  01a77	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01a7a	d8 0c d0	 fmul	 DWORD PTR [eax+edx*8]
  01a7d	de e9		 fsubp	 ST(1), ST(0)
  01a7f	d9 5d d0	 fstp	 DWORD PTR _temp$[ebp]

; 1240 :         temp.im  =-w[i2].im*(d[ki1].im + t1.im) + w[i2].re*(d[ki1].re + t1.re);

  01a82	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  01a88	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  01a8b	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  01a8f	d9 e0		 fchs
  01a91	8b 45 f0	 mov	 eax, DWORD PTR _ki1$[ebp]
  01a94	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01a97	d9 45 90	 fld	 DWORD PTR _t1$[ebp+4]
  01a9a	d8 44 c1 04	 fadd	 DWORD PTR [ecx+eax*8+4]
  01a9e	de c9		 fmulp	 ST(1), ST(0)
  01aa0	8b 55 f0	 mov	 edx, DWORD PTR _ki1$[ebp]
  01aa3	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01aa6	d9 45 8c	 fld	 DWORD PTR _t1$[ebp]
  01aa9	d8 04 d0	 fadd	 DWORD PTR [eax+edx*8]
  01aac	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _i2$[ebp]
  01ab2	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  01ab5	d8 0c ca	 fmul	 DWORD PTR [edx+ecx*8]
  01ab8	de c1		 faddp	 ST(1), ST(0)
  01aba	d9 5d d4	 fstp	 DWORD PTR _temp$[ebp+4]

; 1241 :         temp1.re =-w[i2].re*(d[ki1].re - t1.re) + w[i2].im*(d[ki1].im - t1.im);

  01abd	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  01ac3	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  01ac6	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  01ac9	d9 e0		 fchs
  01acb	8b 55 f0	 mov	 edx, DWORD PTR _ki1$[ebp]
  01ace	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01ad1	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  01ad4	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  01ad7	de c9		 fmulp	 ST(1), ST(0)
  01ad9	8b 4d f0	 mov	 ecx, DWORD PTR _ki1$[ebp]
  01adc	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01adf	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  01ae3	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  01ae6	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  01aec	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  01aef	d8 4c c1 04	 fmul	 DWORD PTR [ecx+eax*8+4]
  01af3	de c1		 faddp	 ST(1), ST(0)
  01af5	d9 5d bc	 fstp	 DWORD PTR _temp1$[ebp]

; 1242 :         temp1.im =-w[i2].re*(d[ki1].im - t1.im) - w[i2].im*(d[ki1].re - t1.re);

  01af8	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  01afe	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01b01	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  01b04	d9 e0		 fchs
  01b06	8b 4d f0	 mov	 ecx, DWORD PTR _ki1$[ebp]
  01b09	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01b0c	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  01b10	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  01b13	de c9		 fmulp	 ST(1), ST(0)
  01b15	8b 45 f0	 mov	 eax, DWORD PTR _ki1$[ebp]
  01b18	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01b1b	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  01b1e	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  01b21	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  01b27	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01b2a	d8 4c d0 04	 fmul	 DWORD PTR [eax+edx*8+4]
  01b2e	de e9		 fsubp	 ST(1), ST(0)
  01b30	d9 5d c0	 fstp	 DWORD PTR _temp1$[ebp+4]

; 1243 : 
; 1244 :         d[kii].re = d[ki].re - t.re + temp1.re;

  01b33	8b 4d b0	 mov	 ecx, DWORD PTR _ki$[ebp]
  01b36	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01b39	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  01b3c	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  01b3f	d8 45 bc	 fadd	 DWORD PTR _temp1$[ebp]
  01b42	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _kii$[ebp]
  01b48	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01b4b	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1245 :         d[ki2].re = d[ki].re - t.re - temp1.re;

  01b4e	8b 55 b0	 mov	 edx, DWORD PTR _ki$[ebp]
  01b51	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01b54	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  01b57	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  01b5a	d8 65 bc	 fsub	 DWORD PTR _temp1$[ebp]
  01b5d	8b 4d a8	 mov	 ecx, DWORD PTR _ki2$[ebp]
  01b60	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01b63	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1246 :         d[kii].im = d[ki].im - t.im + temp1.im;

  01b66	8b 45 b0	 mov	 eax, DWORD PTR _ki$[ebp]
  01b69	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01b6c	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  01b70	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  01b73	d8 45 c0	 fadd	 DWORD PTR _temp1$[ebp+4]
  01b76	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _kii$[ebp]
  01b7c	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01b7f	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1247 :         d[ki2].im = d[ki].im - t.im - temp1.im;

  01b83	8b 4d b0	 mov	 ecx, DWORD PTR _ki$[ebp]
  01b86	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01b89	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  01b8d	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  01b90	d8 65 c0	 fsub	 DWORD PTR _temp1$[ebp+4]
  01b93	8b 45 a8	 mov	 eax, DWORD PTR _ki2$[ebp]
  01b96	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01b99	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1248 :         d[ki1].im = d[ki].im + t.im - temp.im;

  01b9d	8b 55 b0	 mov	 edx, DWORD PTR _ki$[ebp]
  01ba0	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01ba3	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  01ba6	d8 44 d0 04	 fadd	 DWORD PTR [eax+edx*8+4]
  01baa	d8 65 d4	 fsub	 DWORD PTR _temp$[ebp+4]
  01bad	8b 4d f0	 mov	 ecx, DWORD PTR _ki1$[ebp]
  01bb0	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01bb3	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1249 :         d[ki1].re = d[ki].re + t.re - temp.re;

  01bb7	8b 45 b0	 mov	 eax, DWORD PTR _ki$[ebp]
  01bba	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01bbd	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  01bc0	d8 04 c1	 fadd	 DWORD PTR [ecx+eax*8]
  01bc3	d8 65 d0	 fsub	 DWORD PTR _temp$[ebp]
  01bc6	8b 55 f0	 mov	 edx, DWORD PTR _ki1$[ebp]
  01bc9	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01bcc	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1250 :         d[ki].im  = d[ki].im + t.im + temp.im;

  01bcf	8b 4d b0	 mov	 ecx, DWORD PTR _ki$[ebp]
  01bd2	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01bd5	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  01bd8	d8 44 ca 04	 fadd	 DWORD PTR [edx+ecx*8+4]
  01bdc	d8 45 d4	 fadd	 DWORD PTR _temp$[ebp+4]
  01bdf	8b 45 b0	 mov	 eax, DWORD PTR _ki$[ebp]
  01be2	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01be5	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1251 :         d[ki].re  = d[ki].re + t.re + temp.re;

  01be9	8b 55 b0	 mov	 edx, DWORD PTR _ki$[ebp]
  01bec	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01bef	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  01bf2	d8 04 d0	 fadd	 DWORD PTR [eax+edx*8]
  01bf5	d8 45 d0	 fadd	 DWORD PTR _temp$[ebp]
  01bf8	8b 4d b0	 mov	 ecx, DWORD PTR _ki$[ebp]
  01bfb	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01bfe	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1252 :       }  /* for i */

  01c01	e9 92 fa ff ff	 jmp	 $L1443
$L1444:

; 1253 :     }   /* for j */

  01c06	e9 05 f7 ff ff	 jmp	 $L1436
$L1437:

; 1254 :     nn = istep;

  01c0b	8b 45 fc	 mov	 eax, DWORD PTR _istep$[ebp]
  01c0e	89 45 c4	 mov	 DWORD PTR _nn$[ebp], eax

; 1255 :     mmax <<= 2;

  01c11	8b 4d 94	 mov	 ecx, DWORD PTR _mmax$[ebp]
  01c14	c1 e1 02	 shl	 ecx, 2
  01c17	89 4d 94	 mov	 DWORD PTR _mmax$[ebp], ecx

; 1256 :     istep <<= 2;

  01c1a	8b 55 fc	 mov	 edx, DWORD PTR _istep$[ebp]
  01c1d	c1 e2 02	 shl	 edx, 2
  01c20	89 55 fc	 mov	 DWORD PTR _istep$[ebp], edx

; 1257 :     ik1>>=2;

  01c23	8b 45 dc	 mov	 eax, DWORD PTR _ik1$[ebp]
  01c26	c1 f8 02	 sar	 eax, 2
  01c29	89 45 dc	 mov	 DWORD PTR _ik1$[ebp], eax

; 1258 :     ik2>>=2;

  01c2c	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _ik2$[ebp]
  01c32	c1 f9 02	 sar	 ecx, 2
  01c35	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _ik2$[ebp], ecx

; 1259 :     if (nn < m) goto invnext;

  01c3b	8b 55 c4	 mov	 edx, DWORD PTR _nn$[ebp]
  01c3e	3b 95 60 ff ff
	ff		 cmp	 edx, DWORD PTR _m$[ebp]
  01c44	7d 05		 jge	 SHORT $L1445
  01c46	e9 84 f6 ff ff	 jmp	 $invnext$1432
$L1445:

; 1260 :   } /* for */

  01c4b	e9 8a f4 ff ff	 jmp	 $L1426
$L1427:

; 1261 : 
; 1262 :   if (m<n) {

  01c50	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _m$[ebp]
  01c56	3b 45 0c	 cmp	 eax, DWORD PTR _n$[ebp]
  01c59	0f 8d b8 02 00
	00		 jge	 $L1446
$invnextB$1447:

; 1263 : 
; 1264 :     invnextB:
; 1265 : 
; 1266 :     i1 = i4 = 0;

  01c5f	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _i4$[ebp], 0
  01c66	8b 4d 9c	 mov	 ecx, DWORD PTR _i4$[ebp]
  01c69	89 4d e0	 mov	 DWORD PTR _i1$[ebp], ecx

; 1267 :     ik2 = ik1 << 1;

  01c6c	8b 55 dc	 mov	 edx, DWORD PTR _ik1$[ebp]
  01c6f	d1 e2		 shl	 edx, 1
  01c71	89 95 7c ff ff
	ff		 mov	 DWORD PTR _ik2$[ebp], edx

; 1268 :     for (i2=0; i2<nn; i2+=256,i4=i1) {

  01c77	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i2$[ebp], 0
  01c81	eb 17		 jmp	 SHORT $L1448
$L1449:
  01c83	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  01c89	05 00 01 00 00	 add	 eax, 256		; 00000100H
  01c8e	89 85 64 ff ff
	ff		 mov	 DWORD PTR _i2$[ebp], eax
  01c94	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  01c97	89 4d 9c	 mov	 DWORD PTR _i4$[ebp], ecx
$L1448:
  01c9a	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _i2$[ebp]
  01ca0	3b 55 c4	 cmp	 edx, DWORD PTR _nn$[ebp]
  01ca3	0f 8d 4b 02 00
	00		 jge	 $L1450

; 1269 :       kk = i2+nn;

  01ca9	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  01caf	03 45 c4	 add	 eax, DWORD PTR _nn$[ebp]
  01cb2	89 45 c8	 mov	 DWORD PTR _kk$[ebp], eax

; 1270 :       for (j=0; j<n; j += mmax) {

  01cb5	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0
  01cbf	eb 0f		 jmp	 SHORT $L1451
$L1452:
  01cc1	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  01cc7	03 4d 94	 add	 ecx, DWORD PTR _mmax$[ebp]
  01cca	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _j$[ebp], ecx
$L1451:
  01cd0	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  01cd6	3b 55 0c	 cmp	 edx, DWORD PTR _n$[ebp]
  01cd9	0f 8d 10 02 00
	00		 jge	 $L1453

; 1271 :         i3 = i2+j;

  01cdf	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i2$[ebp]
  01ce5	03 85 6c ff ff
	ff		 add	 eax, DWORD PTR _j$[ebp]
  01ceb	89 45 ac	 mov	 DWORD PTR _i3$[ebp], eax

; 1272 :         k=kk+j;

  01cee	8b 4d c8	 mov	 ecx, DWORD PTR _kk$[ebp]
  01cf1	03 8d 6c ff ff
	ff		 add	 ecx, DWORD PTR _j$[ebp]
  01cf7	89 4d 98	 mov	 DWORD PTR _k$[ebp], ecx

; 1273 :         i1 = i4;

  01cfa	8b 55 9c	 mov	 edx, DWORD PTR _i4$[ebp]
  01cfd	89 55 e0	 mov	 DWORD PTR _i1$[ebp], edx

; 1274 :         for (i=0 ; i<256; i+=2,i1+=ik2) {

  01d00	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01d07	eb 15		 jmp	 SHORT $L1454
$L1455:
  01d09	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01d0c	83 c0 02	 add	 eax, 2
  01d0f	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  01d12	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  01d15	03 8d 7c ff ff
	ff		 add	 ecx, DWORD PTR _ik2$[ebp]
  01d1b	89 4d e0	 mov	 DWORD PTR _i1$[ebp], ecx
$L1454:
  01d1e	81 7d f4 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  01d25	0f 8d bf 01 00
	00		 jge	 $L1456

; 1275 :           t.re = w[i1].re*d[k+i].re + w[i1].im*d[k+i].im;

  01d2b	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  01d2e	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  01d31	8b 45 e0	 mov	 eax, DWORD PTR _i1$[ebp]
  01d34	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  01d37	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01d3a	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  01d3d	d8 0c d6	 fmul	 DWORD PTR [esi+edx*8]
  01d40	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  01d43	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  01d46	8b 45 e0	 mov	 eax, DWORD PTR _i1$[ebp]
  01d49	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  01d4c	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01d4f	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  01d53	d8 4c d6 04	 fmul	 DWORD PTR [esi+edx*8+4]
  01d57	de c1		 faddp	 ST(1), ST(0)
  01d59	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 1276 :           t.im =-w[i1].im*d[k+i].re + w[i1].re*d[k+i].im;

  01d5c	8b 55 e0	 mov	 edx, DWORD PTR _i1$[ebp]
  01d5f	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01d62	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  01d66	d9 e0		 fchs
  01d68	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  01d6b	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  01d6e	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01d71	d8 0c ca	 fmul	 DWORD PTR [edx+ecx*8]
  01d74	8b 45 98	 mov	 eax, DWORD PTR _k$[ebp]
  01d77	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  01d7a	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  01d7d	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  01d80	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01d83	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  01d86	d8 4c c6 04	 fmul	 DWORD PTR [esi+eax*8+4]
  01d8a	de c1		 faddp	 ST(1), ST(0)
  01d8c	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 1277 :           t1.re = w[i1+ik1].re*d[k+i+1].re + w[i1+ik1].im*d[k+i+1].im;

  01d8f	8b 45 e0	 mov	 eax, DWORD PTR _i1$[ebp]
  01d92	03 45 dc	 add	 eax, DWORD PTR _ik1$[ebp]
  01d95	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  01d98	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  01d9b	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  01d9e	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01da1	d9 04 c2	 fld	 DWORD PTR [edx+eax*8]
  01da4	d8 4c ce 08	 fmul	 DWORD PTR [esi+ecx*8+8]
  01da8	8b 45 e0	 mov	 eax, DWORD PTR _i1$[ebp]
  01dab	03 45 dc	 add	 eax, DWORD PTR _ik1$[ebp]
  01dae	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  01db1	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  01db4	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  01db7	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01dba	d9 44 c2 04	 fld	 DWORD PTR [edx+eax*8+4]
  01dbe	d8 4c ce 0c	 fmul	 DWORD PTR [esi+ecx*8+12]
  01dc2	de c1		 faddp	 ST(1), ST(0)
  01dc4	d9 5d 8c	 fstp	 DWORD PTR _t1$[ebp]

; 1278 :           t1.im =-w[i1+ik1].im*d[k+i+1].re + w[i1+ik1].re*d[k+i+1].im;

  01dc7	8b 45 e0	 mov	 eax, DWORD PTR _i1$[ebp]
  01dca	03 45 dc	 add	 eax, DWORD PTR _ik1$[ebp]
  01dcd	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  01dd0	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  01dd4	d9 e0		 fchs
  01dd6	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  01dd9	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  01ddc	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01ddf	d8 4c d0 08	 fmul	 DWORD PTR [eax+edx*8+8]
  01de3	8b 4d e0	 mov	 ecx, DWORD PTR _i1$[ebp]
  01de6	03 4d dc	 add	 ecx, DWORD PTR _ik1$[ebp]
  01de9	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  01dec	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  01def	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01df2	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01df5	d9 04 c8	 fld	 DWORD PTR [eax+ecx*8]
  01df8	d8 4c d6 0c	 fmul	 DWORD PTR [esi+edx*8+12]
  01dfc	de c1		 faddp	 ST(1), ST(0)
  01dfe	d9 5d 90	 fstp	 DWORD PTR _t1$[ebp+4]

; 1279 :           d[k+i].re = d[i+i3].re - t.re;

  01e01	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01e04	03 4d ac	 add	 ecx, DWORD PTR _i3$[ebp]
  01e07	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01e0a	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  01e0d	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  01e10	8b 45 98	 mov	 eax, DWORD PTR _k$[ebp]
  01e13	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  01e16	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01e19	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1280 :           d[k+i].im = d[i+i3].im - t.im;

  01e1c	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  01e1f	03 55 ac	 add	 edx, DWORD PTR _i3$[ebp]
  01e22	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01e25	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  01e29	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  01e2c	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  01e2f	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  01e32	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01e35	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1281 :           d[i+i3].re += t.re;

  01e39	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01e3c	03 45 ac	 add	 eax, DWORD PTR _i3$[ebp]
  01e3f	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01e42	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  01e45	d8 04 c1	 fadd	 DWORD PTR [ecx+eax*8]
  01e48	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  01e4b	03 55 ac	 add	 edx, DWORD PTR _i3$[ebp]
  01e4e	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01e51	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1282 :           d[i+i3].im += t.im;

  01e54	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01e57	03 4d ac	 add	 ecx, DWORD PTR _i3$[ebp]
  01e5a	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01e5d	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  01e60	d8 44 ca 04	 fadd	 DWORD PTR [edx+ecx*8+4]
  01e64	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01e67	03 45 ac	 add	 eax, DWORD PTR _i3$[ebp]
  01e6a	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01e6d	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1283 :           d[k+i+1].re = d[i+i3+1].re - t1.re;

  01e71	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  01e74	03 55 ac	 add	 edx, DWORD PTR _i3$[ebp]
  01e77	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01e7a	d9 44 d0 08	 fld	 DWORD PTR [eax+edx*8+8]
  01e7e	d8 65 8c	 fsub	 DWORD PTR _t1$[ebp]
  01e81	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  01e84	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  01e87	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01e8a	d9 5c ca 08	 fstp	 DWORD PTR [edx+ecx*8+8]

; 1284 :           d[k+i+1].im = d[i+i3+1].im - t1.im;

  01e8e	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01e91	03 45 ac	 add	 eax, DWORD PTR _i3$[ebp]
  01e94	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01e97	d9 44 c1 0c	 fld	 DWORD PTR [ecx+eax*8+12]
  01e9b	d8 65 90	 fsub	 DWORD PTR _t1$[ebp+4]
  01e9e	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  01ea1	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  01ea4	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01ea7	d9 5c d0 0c	 fstp	 DWORD PTR [eax+edx*8+12]

; 1285 :           d[i+i3+1].re += t1.re;

  01eab	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01eae	03 4d ac	 add	 ecx, DWORD PTR _i3$[ebp]
  01eb1	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01eb4	d9 45 8c	 fld	 DWORD PTR _t1$[ebp]
  01eb7	d8 44 ca 08	 fadd	 DWORD PTR [edx+ecx*8+8]
  01ebb	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01ebe	03 45 ac	 add	 eax, DWORD PTR _i3$[ebp]
  01ec1	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01ec4	d9 5c c1 08	 fstp	 DWORD PTR [ecx+eax*8+8]

; 1286 :           d[i+i3+1].im += t1.im;

  01ec8	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  01ecb	03 55 ac	 add	 edx, DWORD PTR _i3$[ebp]
  01ece	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01ed1	d9 45 90	 fld	 DWORD PTR _t1$[ebp+4]
  01ed4	d8 44 d0 0c	 fadd	 DWORD PTR [eax+edx*8+12]
  01ed8	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01edb	03 4d ac	 add	 ecx, DWORD PTR _i3$[ebp]
  01ede	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01ee1	d9 5c ca 0c	 fstp	 DWORD PTR [edx+ecx*8+12]

; 1287 :         }  /* for i */

  01ee5	e9 1f fe ff ff	 jmp	 $L1455
$L1456:

; 1288 :       }  /* for j */

  01eea	e9 d2 fd ff ff	 jmp	 $L1452
$L1453:

; 1289 :     }  /* for i2 */

  01eef	e9 8f fd ff ff	 jmp	 $L1449
$L1450:

; 1290 :     nn = mmax;

  01ef4	8b 45 94	 mov	 eax, DWORD PTR _mmax$[ebp]
  01ef7	89 45 c4	 mov	 DWORD PTR _nn$[ebp], eax

; 1291 :     mmax <<= 1;

  01efa	8b 4d 94	 mov	 ecx, DWORD PTR _mmax$[ebp]
  01efd	d1 e1		 shl	 ecx, 1
  01eff	89 4d 94	 mov	 DWORD PTR _mmax$[ebp], ecx

; 1292 :     ik1 >>= 1;

  01f02	8b 55 dc	 mov	 edx, DWORD PTR _ik1$[ebp]
  01f05	d1 fa		 sar	 edx, 1
  01f07	89 55 dc	 mov	 DWORD PTR _ik1$[ebp], edx

; 1293 :     if (nn<n) goto invnextB;

  01f0a	8b 45 c4	 mov	 eax, DWORD PTR _nn$[ebp]
  01f0d	3b 45 0c	 cmp	 eax, DWORD PTR _n$[ebp]
  01f10	7d 05		 jge	 SHORT $L1446
  01f12	e9 48 fd ff ff	 jmp	 $invnextB$1447
$L1446:

; 1294 :   } /* if */
; 1295 :     goto norm;

  01f17	e9 e3 01 00 00	 jmp	 $norm$1458
$inv$1434:

; 1296 :   inv:
; 1297 :     k = nn;

  01f1c	8b 4d c4	 mov	 ecx, DWORD PTR _nn$[ebp]
  01f1f	89 4d 98	 mov	 DWORD PTR _k$[ebp], ecx

; 1298 :     nj = nn>>1;

  01f22	8b 55 c4	 mov	 edx, DWORD PTR _nn$[ebp]
  01f25	d1 fa		 sar	 edx, 1
  01f27	89 55 f8	 mov	 DWORD PTR _nj$[ebp], edx

; 1299 :     k1= k + nj;

  01f2a	8b 45 98	 mov	 eax, DWORD PTR _k$[ebp]
  01f2d	03 45 f8	 add	 eax, DWORD PTR _nj$[ebp]
  01f30	89 85 78 ff ff
	ff		 mov	 DWORD PTR _k1$[ebp], eax

; 1300 :     for (i=0; i<nj; i++) {

  01f36	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  01f3d	eb 09		 jmp	 SHORT $L1459
$L1460:
  01f3f	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01f42	83 c1 01	 add	 ecx, 1
  01f45	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$L1459:
  01f48	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  01f4b	3b 55 f8	 cmp	 edx, DWORD PTR _nj$[ebp]
  01f4e	0f 8d ab 01 00
	00		 jge	 $norm$1458

; 1301 :       t.im =-w[i].im*d[k+i].re + w[i].re*d[k+i].im;

  01f54	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01f57	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  01f5a	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  01f5e	d9 e0		 fchs
  01f60	8b 55 98	 mov	 edx, DWORD PTR _k$[ebp]
  01f63	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  01f66	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01f69	d8 0c d0	 fmul	 DWORD PTR [eax+edx*8]
  01f6c	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  01f6f	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  01f72	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  01f75	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01f78	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01f7b	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  01f7e	d8 4c ce 04	 fmul	 DWORD PTR [esi+ecx*8+4]
  01f82	de c1		 faddp	 ST(1), ST(0)
  01f84	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 1302 :       t.re = w[i].re*d[k+i].re + w[i].im*d[k+i].im;

  01f87	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  01f8a	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  01f8d	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  01f90	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01f93	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01f96	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  01f99	d8 0c ce	 fmul	 DWORD PTR [esi+ecx*8]
  01f9c	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  01f9f	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  01fa2	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  01fa5	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  01fa8	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  01fab	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  01faf	d8 4c ce 04	 fmul	 DWORD PTR [esi+ecx*8+4]
  01fb3	de c1		 faddp	 ST(1), ST(0)
  01fb5	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 1303 :       d[k+i].re = d[i].re - t.re;

  01fb8	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01fbb	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01fbe	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  01fc1	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  01fc4	8b 45 98	 mov	 eax, DWORD PTR _k$[ebp]
  01fc7	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  01fca	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01fcd	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1304 :       d[k+i].im = d[i].im - t.im;

  01fd0	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  01fd3	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01fd6	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  01fda	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  01fdd	8b 4d 98	 mov	 ecx, DWORD PTR _k$[ebp]
  01fe0	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  01fe3	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  01fe6	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1305 :       d[i].re += t.re;

  01fea	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  01fed	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  01ff0	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  01ff3	d8 04 c1	 fadd	 DWORD PTR [ecx+eax*8]
  01ff6	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  01ff9	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  01ffc	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1306 :       d[i].im += t.im;

  01fff	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  02002	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  02005	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  02008	d8 44 ca 04	 fadd	 DWORD PTR [edx+ecx*8+4]
  0200c	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0200f	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  02012	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1307 :       t.im =  w[i].re*d[k1+i].re + w[i].im*d[k1+i].im;

  02016	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _k1$[ebp]
  0201c	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  0201f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  02022	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  02025	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  02028	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  0202b	d8 0c d6	 fmul	 DWORD PTR [esi+edx*8]
  0202e	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _k1$[ebp]
  02034	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  02037	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0203a	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  0203d	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  02040	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  02044	d8 4c d6 04	 fmul	 DWORD PTR [esi+edx*8+4]
  02048	de c1		 faddp	 ST(1), ST(0)
  0204a	d9 5d 84	 fstp	 DWORD PTR _t$[ebp+4]

; 1308 :       t.re = w[i].im*d[k1+i].re - w[i].re*d[k1+i].im;

  0204d	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _k1$[ebp]
  02053	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  02056	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  02059	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  0205c	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  0205f	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  02063	d8 0c d6	 fmul	 DWORD PTR [esi+edx*8]
  02066	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _k1$[ebp]
  0206c	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  0206f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  02072	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  02075	8b 75 08	 mov	 esi, DWORD PTR _d$[ebp]
  02078	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  0207b	d8 4c d6 04	 fmul	 DWORD PTR [esi+edx*8+4]
  0207f	de e9		 fsubp	 ST(1), ST(0)
  02081	d9 5d 80	 fstp	 DWORD PTR _t$[ebp]

; 1309 :       d[k1+i].re = d[nj+i].re - t.re;

  02084	8b 55 f8	 mov	 edx, DWORD PTR _nj$[ebp]
  02087	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  0208a	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  0208d	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  02090	d8 65 80	 fsub	 DWORD PTR _t$[ebp]
  02093	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _k1$[ebp]
  02099	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  0209c	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  0209f	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1310 :       d[k1+i].im = d[nj+i].im - t.im;

  020a2	8b 45 f8	 mov	 eax, DWORD PTR _nj$[ebp]
  020a5	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  020a8	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  020ab	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  020af	d8 65 84	 fsub	 DWORD PTR _t$[ebp+4]
  020b2	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _k1$[ebp]
  020b8	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  020bb	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  020be	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1311 :       d[nj+i].re += t.re;

  020c2	8b 4d f8	 mov	 ecx, DWORD PTR _nj$[ebp]
  020c5	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  020c8	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  020cb	d9 45 80	 fld	 DWORD PTR _t$[ebp]
  020ce	d8 04 ca	 fadd	 DWORD PTR [edx+ecx*8]
  020d1	8b 45 f8	 mov	 eax, DWORD PTR _nj$[ebp]
  020d4	03 45 f4	 add	 eax, DWORD PTR _i$[ebp]
  020d7	8b 4d 08	 mov	 ecx, DWORD PTR _d$[ebp]
  020da	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1312 :       d[nj+i].im += t.im;

  020dd	8b 55 f8	 mov	 edx, DWORD PTR _nj$[ebp]
  020e0	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  020e3	8b 45 08	 mov	 eax, DWORD PTR _d$[ebp]
  020e6	d9 45 84	 fld	 DWORD PTR _t$[ebp+4]
  020e9	d8 44 d0 04	 fadd	 DWORD PTR [eax+edx*8+4]
  020ed	8b 4d f8	 mov	 ecx, DWORD PTR _nj$[ebp]
  020f0	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  020f3	8b 55 08	 mov	 edx, DWORD PTR _d$[ebp]
  020f6	d9 5c ca 04	 fstp	 DWORD PTR [edx+ecx*8+4]

; 1313 :     }  /* for i */

  020fa	e9 40 fe ff ff	 jmp	 $L1460
$norm$1458:

; 1314 : 
; 1315 :     norm:
; 1316 : 
; 1317 :     /*t.re = 1.0/n;
; 1318 :     for (i=0; i<n; i++) {
; 1319 :         d[i].re *= t.re;
; 1320 :         d[i].im *= t.re;
; 1321 :     }*/ /* for */
; 1322 : 
; 1323 :     return;
; 1324 : 
; 1325 : } /* nspcUndRadix2_FFT */

  020ff	5e		 pop	 esi
  02100	8b e5		 mov	 esp, ebp
  02102	5d		 pop	 ebp
  02103	c2 10 00	 ret	 16			; 00000010H
_nspcUndRadix2_FFT@16 ENDP
_TEXT	ENDS
PUBLIC	_vox_nspsCcsFft@12
; Function compile flags: /Odt
;	COMDAT _vox_nspsCcsFft@12
_TEXT	SEGMENT
_n2$ = -32
_Zcale$ = -28
_n$ = -24
_cx$ = -20
_inv_fl$ = -16
_Scale$ = -12
_p$ = -8
_w$ = -4
_samps$ = 8
_order$ = 12
_flags$ = 16
_vox_nspsCcsFft@12 PROC NEAR				; COMDAT

; 1650 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 1651 :    int          p,                   /* For (order-1) */
; 1652 :                 n,                   /* For pow(2,order) */
; 1653 :                 n2,                  /* For pow(2,order-1) */
; 1654 :                 inv_fl;              /* Transform flag: forward or inverse */
; 1655 :    const SCplx *w=NULL;              /* Table of twiddle factors (order-1) */

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _w$[ebp], 0

; 1656 :    SCplx       *cx;                  /* For interpretation samps as SCplx */
; 1657 :    float        Scale,               /* For scale in inverse transform */
; 1658 :                 Zcale;
; 1659 : 
; 1660 :    /* Computes the tables of twiddle factors */
; 1661 : 
; 1662 :    p = order-1;                                                

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _order$[ebp]
  00010	83 e8 01	 sub	 eax, 1
  00013	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 1663 :    if ( p > 0 ) {                                              

  00016	83 7d f8 00	 cmp	 DWORD PTR _p$[ebp], 0
  0001a	7e 17		 jle	 SHORT $L1585

; 1664 :       w = nspcUndGetFftTwdTbl_great(p);                        

  0001c	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 _nspcUndGetFftTwdTbl_great@4
  00025	89 45 fc	 mov	 DWORD PTR _w$[ebp], eax

; 1665 :       if(!w) 

  00028	83 7d fc 00	 cmp	 DWORD PTR _w$[ebp], 0
  0002c	75 05		 jne	 SHORT $L1585

; 1666 :         return;

  0002e	e9 26 01 00 00	 jmp	 $L1575
$L1585:

; 1667 :    }
; 1668 : 
; 1669 :    if ( order == 0 ) return;                               /* Control order */

  00033	83 7d 0c 00	 cmp	 DWORD PTR _order$[ebp], 0
  00037	75 05		 jne	 SHORT $L1587
  00039	e9 1b 01 00 00	 jmp	 $L1575
$L1587:

; 1670 : 
; 1671 :    n     = 1 << order;                                 /* Form pow(2,order) */

  0003e	ba 01 00 00 00	 mov	 edx, 1
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _order$[ebp]
  00046	d3 e2		 shl	 edx, cl
  00048	89 55 e8	 mov	 DWORD PTR _n$[ebp], edx

; 1672 : 
; 1673 :    Scale = samps[0] + samps[n];          /* for triginometric recombination */

  0004b	8b 45 08	 mov	 eax, DWORD PTR _samps$[ebp]
  0004e	8b 4d e8	 mov	 ecx, DWORD PTR _n$[ebp]
  00051	8b 55 08	 mov	 edx, DWORD PTR _samps$[ebp]
  00054	d9 00		 fld	 DWORD PTR [eax]
  00056	d8 04 8a	 fadd	 DWORD PTR [edx+ecx*4]
  00059	d9 5d f4	 fstp	 DWORD PTR _Scale$[ebp]

; 1674 :    Zcale = samps[0] - samps[n];

  0005c	8b 45 08	 mov	 eax, DWORD PTR _samps$[ebp]
  0005f	8b 4d e8	 mov	 ecx, DWORD PTR _n$[ebp]
  00062	8b 55 08	 mov	 edx, DWORD PTR _samps$[ebp]
  00065	d9 00		 fld	 DWORD PTR [eax]
  00067	d8 24 8a	 fsub	 DWORD PTR [edx+ecx*4]
  0006a	d9 5d e4	 fstp	 DWORD PTR _Zcale$[ebp]

; 1675 : 
; 1676 :    if ( p > 0 ) {

  0006d	83 7d f8 00	 cmp	 DWORD PTR _p$[ebp], 0
  00071	0f 8e a0 00 00
	00		 jle	 $L1588

; 1677 : 
; 1678 :       cx = (SCplx *)samps;   /* Form pointer cx for interpr. samps as SCplx */

  00077	8b 45 08	 mov	 eax, DWORD PTR _samps$[ebp]
  0007a	89 45 ec	 mov	 DWORD PTR _cx$[ebp], eax

; 1679 :       n2 = 1 << p;                                   /* Form pow(2,order-1) */

  0007d	ba 01 00 00 00	 mov	 edx, 1
  00082	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00085	d3 e2		 shl	 edx, cl
  00087	89 55 e0	 mov	 DWORD PTR _n2$[ebp], edx

; 1680 :       inv_fl = ( flags & NSP_Forw ) ? 1 : -1;        /* Form transform flag */

  0008a	8b 45 10	 mov	 eax, DWORD PTR _flags$[ebp]
  0008d	83 e0 01	 and	 eax, 1
  00090	f7 d8		 neg	 eax
  00092	1b c0		 sbb	 eax, eax
  00094	83 e0 02	 and	 eax, 2
  00097	83 c0 ff	 add	 eax, -1
  0009a	89 45 f0	 mov	 DWORD PTR _inv_fl$[ebp], eax

; 1681 : 
; 1682 :       nspcUndCcsRecom_Fft(cx,p,flags,(w+n2));     /* Computes trig. recomb. */

  0009d	8b 4d e0	 mov	 ecx, DWORD PTR _n2$[ebp]
  000a0	8b 55 fc	 mov	 edx, DWORD PTR _w$[ebp]
  000a3	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  000a6	50		 push	 eax
  000a7	8b 4d 10	 mov	 ecx, DWORD PTR _flags$[ebp]
  000aa	51		 push	 ecx
  000ab	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  000ae	52		 push	 edx
  000af	8b 45 ec	 mov	 eax, DWORD PTR _cx$[ebp]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _nspcUndCcsRecom_Fft@16

; 1683 :       samps[0] = Scale;

  000b8	8b 4d 08	 mov	 ecx, DWORD PTR _samps$[ebp]
  000bb	8b 55 f4	 mov	 edx, DWORD PTR _Scale$[ebp]
  000be	89 11		 mov	 DWORD PTR [ecx], edx

; 1684 :       samps[1] = Zcale;

  000c0	8b 45 08	 mov	 eax, DWORD PTR _samps$[ebp]
  000c3	8b 4d e4	 mov	 ecx, DWORD PTR _Zcale$[ebp]
  000c6	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1685 : 
; 1686 :       if ( p < FFT_OrderSplit )    {  /* ---------Split algorithm --------- */

  000c9	83 7d f8 0b	 cmp	 DWORD PTR _p$[ebp], 11	; 0000000bH
  000cd	7d 24		 jge	 SHORT $L1590

; 1687 : 
; 1688 :          nspcUndSplit_FFT(cx,n2,inv_fl,w);           /* Computes FFT for cx */

  000cf	8b 55 fc	 mov	 edx, DWORD PTR _w$[ebp]
  000d2	52		 push	 edx
  000d3	8b 45 f0	 mov	 eax, DWORD PTR _inv_fl$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d e0	 mov	 ecx, DWORD PTR _n2$[ebp]
  000da	51		 push	 ecx
  000db	8b 55 ec	 mov	 edx, DWORD PTR _cx$[ebp]
  000de	52		 push	 edx
  000df	e8 00 00 00 00	 call	 _nspcUndSplit_FFT@16

; 1689 :          nspcbBitRev1(cx,p);                         /* Form BitRev  for cx */

  000e4	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d ec	 mov	 ecx, DWORD PTR _cx$[ebp]
  000eb	51		 push	 ecx
  000ec	e8 00 00 00 00	 call	 _nspcbBitRev1@8

; 1690 : 
; 1691 :       } else                       {  /* ---------Radix algorithm --------- */

  000f1	eb 22		 jmp	 SHORT $L1591
$L1590:

; 1692 : 
; 1693 :          nspcbBitRev1(cx,p);                         /* Form BitRev  for cx */

  000f3	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  000f6	52		 push	 edx
  000f7	8b 45 ec	 mov	 eax, DWORD PTR _cx$[ebp]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 _nspcbBitRev1@8

; 1694 :          nspcUndRadix2_FFT(cx,n2,inv_fl,w);          /* Computes FFT for cx */

  00100	8b 4d fc	 mov	 ecx, DWORD PTR _w$[ebp]
  00103	51		 push	 ecx
  00104	8b 55 f0	 mov	 edx, DWORD PTR _inv_fl$[ebp]
  00107	52		 push	 edx
  00108	8b 45 e0	 mov	 eax, DWORD PTR _n2$[ebp]
  0010b	50		 push	 eax
  0010c	8b 4d ec	 mov	 ecx, DWORD PTR _cx$[ebp]
  0010f	51		 push	 ecx
  00110	e8 00 00 00 00	 call	 _nspcUndRadix2_FFT@16
$L1591:

; 1695 : 
; 1696 :       } /* if for algorithm type */
; 1697 : 
; 1698 :    }  else  {   /* p == 0 */

  00115	eb 11		 jmp	 SHORT $L1592
$L1588:

; 1699 :       samps[0] = Scale; samps[1] = Zcale;

  00117	8b 55 08	 mov	 edx, DWORD PTR _samps$[ebp]
  0011a	8b 45 f4	 mov	 eax, DWORD PTR _Scale$[ebp]
  0011d	89 02		 mov	 DWORD PTR [edx], eax
  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _samps$[ebp]
  00122	8b 55 e4	 mov	 edx, DWORD PTR _Zcale$[ebp]
  00125	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$L1592:

; 1700 :    }  /* if for p */
; 1701 : 
; 1702 :    if ( flags & NSP_Inv ) {                                    

  00128	8b 45 10	 mov	 eax, DWORD PTR _flags$[ebp]
  0012b	83 e0 02	 and	 eax, 2
  0012e	85 c0		 test	 eax, eax
  00130	74 27		 je	 SHORT $L1575

; 1703 :       if ( !( flags & NSP_NoScale ) ) {                        

  00132	8b 4d 10	 mov	 ecx, DWORD PTR _flags$[ebp]
  00135	83 e1 08	 and	 ecx, 8
  00138	85 c9		 test	 ecx, ecx
  0013a	75 1d		 jne	 SHORT $L1575

; 1704 :          Scale    = (float)(1.0/n);                                  

  0013c	db 45 e8	 fild	 DWORD PTR _n$[ebp]
  0013f	dc 3d 00 00 00
	00		 fdivr	 QWORD PTR __real@3ff0000000000000
  00145	d9 5d f4	 fstp	 DWORD PTR _Scale$[ebp]

; 1705 :          nspsbMpy1(Scale,samps,n);                            

  00148	8b 55 e8	 mov	 edx, DWORD PTR _n$[ebp]
  0014b	52		 push	 edx
  0014c	8b 45 08	 mov	 eax, DWORD PTR _samps$[ebp]
  0014f	50		 push	 eax
  00150	8b 4d f4	 mov	 ecx, DWORD PTR _Scale$[ebp]
  00153	51		 push	 ecx
  00154	e8 00 00 00 00	 call	 _nspsbMpy1@12
$L1575:

; 1706 :       }                                                        
; 1707 :    }
; 1708 : 
; 1709 :    return;
; 1710 : } /* nspsCcsFft */

  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c2 0c 00	 ret	 12			; 0000000cH
_vox_nspsCcsFft@12 ENDP
_TEXT	ENDS
PUBLIC	__real@c0000000
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _nspcUndCcsRecom_Fft@16
_TEXT	SEGMENT
_reDif$ = -40
_limit$ = -36
_l$ = -32
_k$ = -28
_imTmp$ = -24
_len$ = -20
_reTmp$ = -16
_reSum$ = -12
_imSum$ = -8
_imDif$ = -4
_x$ = 8
_order$ = 12
_flags$ = 16
_expTbl$ = 20
_nspcUndCcsRecom_Fft@16 PROC NEAR			; COMDAT

; 1437 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi

; 1438 :   float         reTmp, imTmp, reSum, imSum, reDif, imDif;
; 1439 :   int           len, limit, k, l;
; 1440 : 
; 1441 :   len   = 1<<order;

  00007	b8 01 00 00 00	 mov	 eax, 1
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _order$[ebp]
  0000f	d3 e0		 shl	 eax, cl
  00011	89 45 ec	 mov	 DWORD PTR _len$[ebp], eax

; 1442 :   limit = len>>1;

  00014	8b 4d ec	 mov	 ecx, DWORD PTR _len$[ebp]
  00017	d1 f9		 sar	 ecx, 1
  00019	89 4d dc	 mov	 DWORD PTR _limit$[ebp], ecx

; 1443 :   
; 1444 :   if ( limit ) {

  0001c	83 7d dc 00	 cmp	 DWORD PTR _limit$[ebp], 0
  00020	0f 84 7f 02 00
	00		 je	 $L1498

; 1445 : 
; 1446 :      if ( flags & NSP_Forw ) {     /*  forward transform  */

  00026	8b 55 10	 mov	 edx, DWORD PTR _flags$[ebp]
  00029	83 e2 01	 and	 edx, 1
  0002c	85 d2		 test	 edx, edx
  0002e	0f 84 3a 01 00
	00		 je	 $L1510

; 1447 : 
; 1448 :         for ( k=1, l=len-k ; k < limit ; k++, l-- ) {

  00034	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _k$[ebp], 1
  0003b	8b 45 ec	 mov	 eax, DWORD PTR _len$[ebp]
  0003e	2b 45 e4	 sub	 eax, DWORD PTR _k$[ebp]
  00041	89 45 e0	 mov	 DWORD PTR _l$[ebp], eax
  00044	eb 12		 jmp	 SHORT $L1511
$L1512:
  00046	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  00049	83 c1 01	 add	 ecx, 1
  0004c	89 4d e4	 mov	 DWORD PTR _k$[ebp], ecx
  0004f	8b 55 e0	 mov	 edx, DWORD PTR _l$[ebp]
  00052	83 ea 01	 sub	 edx, 1
  00055	89 55 e0	 mov	 DWORD PTR _l$[ebp], edx
$L1511:
  00058	8b 45 e4	 mov	 eax, DWORD PTR _k$[ebp]
  0005b	3b 45 dc	 cmp	 eax, DWORD PTR _limit$[ebp]
  0005e	0f 8d db 00 00
	00		 jge	 $L1513

; 1449 :            reDif  = x[k].re - x[l].re;

  00064	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  00067	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0006a	8b 45 e0	 mov	 eax, DWORD PTR _l$[ebp]
  0006d	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00070	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  00073	d8 24 c6	 fsub	 DWORD PTR [esi+eax*8]
  00076	d9 5d d8	 fstp	 DWORD PTR _reDif$[ebp]

; 1450 :            imDif  = x[k].im + x[l].im;

  00079	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  0007c	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0007f	8b 45 e0	 mov	 eax, DWORD PTR _l$[ebp]
  00082	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00085	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  00089	d8 44 c6 04	 fadd	 DWORD PTR [esi+eax*8+4]
  0008d	d9 5d fc	 fstp	 DWORD PTR _imDif$[ebp]

; 1451 :            reSum  = x[k].re + x[l].re;

  00090	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  00093	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00096	8b 45 e0	 mov	 eax, DWORD PTR _l$[ebp]
  00099	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0009c	d9 04 ca	 fld	 DWORD PTR [edx+ecx*8]
  0009f	d8 04 c6	 fadd	 DWORD PTR [esi+eax*8]
  000a2	d9 5d f4	 fstp	 DWORD PTR _reSum$[ebp]

; 1452 :            imSum  = x[k].im - x[l].im;

  000a5	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  000a8	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000ab	8b 45 e0	 mov	 eax, DWORD PTR _l$[ebp]
  000ae	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  000b1	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  000b5	d8 64 c6 04	 fsub	 DWORD PTR [esi+eax*8+4]
  000b9	d9 5d f8	 fstp	 DWORD PTR _imSum$[ebp]

; 1453 :            imTmp   = reDif*expTbl[k].re - imDif*expTbl[k].im;

  000bc	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  000bf	8b 55 14	 mov	 edx, DWORD PTR _expTbl$[ebp]
  000c2	d9 45 d8	 fld	 DWORD PTR _reDif$[ebp]
  000c5	d8 0c ca	 fmul	 DWORD PTR [edx+ecx*8]
  000c8	8b 45 e4	 mov	 eax, DWORD PTR _k$[ebp]
  000cb	8b 4d 14	 mov	 ecx, DWORD PTR _expTbl$[ebp]
  000ce	d9 45 fc	 fld	 DWORD PTR _imDif$[ebp]
  000d1	d8 4c c1 04	 fmul	 DWORD PTR [ecx+eax*8+4]
  000d5	de e9		 fsubp	 ST(1), ST(0)
  000d7	d9 5d e8	 fstp	 DWORD PTR _imTmp$[ebp]

; 1454 :            x[k].im = imSum + imTmp;

  000da	d9 45 f8	 fld	 DWORD PTR _imSum$[ebp]
  000dd	d8 45 e8	 fadd	 DWORD PTR _imTmp$[ebp]
  000e0	8b 55 e4	 mov	 edx, DWORD PTR _k$[ebp]
  000e3	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000e6	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1455 :            reTmp   =-reDif*expTbl[k].im - imDif*expTbl[k].re;

  000ea	d9 45 d8	 fld	 DWORD PTR _reDif$[ebp]
  000ed	d9 e0		 fchs
  000ef	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  000f2	8b 55 14	 mov	 edx, DWORD PTR _expTbl$[ebp]
  000f5	d8 4c ca 04	 fmul	 DWORD PTR [edx+ecx*8+4]
  000f9	8b 45 e4	 mov	 eax, DWORD PTR _k$[ebp]
  000fc	8b 4d 14	 mov	 ecx, DWORD PTR _expTbl$[ebp]
  000ff	d9 45 fc	 fld	 DWORD PTR _imDif$[ebp]
  00102	d8 0c c1	 fmul	 DWORD PTR [ecx+eax*8]
  00105	de e9		 fsubp	 ST(1), ST(0)
  00107	d9 5d f0	 fstp	 DWORD PTR _reTmp$[ebp]

; 1456 :            x[l].im =-imSum + imTmp;

  0010a	d9 45 f8	 fld	 DWORD PTR _imSum$[ebp]
  0010d	d9 e0		 fchs
  0010f	d8 45 e8	 fadd	 DWORD PTR _imTmp$[ebp]
  00112	8b 55 e0	 mov	 edx, DWORD PTR _l$[ebp]
  00115	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00118	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1457 :            x[k].re = reSum + reTmp;

  0011c	d9 45 f4	 fld	 DWORD PTR _reSum$[ebp]
  0011f	d8 45 f0	 fadd	 DWORD PTR _reTmp$[ebp]
  00122	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  00125	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00128	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1458 :            x[l].re = reSum - reTmp;

  0012b	d9 45 f4	 fld	 DWORD PTR _reSum$[ebp]
  0012e	d8 65 f0	 fsub	 DWORD PTR _reTmp$[ebp]
  00131	8b 45 e0	 mov	 eax, DWORD PTR _l$[ebp]
  00134	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00137	d9 1c c1	 fstp	 DWORD PTR [ecx+eax*8]

; 1459 :         } /* for */

  0013a	e9 07 ff ff ff	 jmp	 $L1512
$L1513:

; 1460 :         x[ limit ].re *= (float)2;

  0013f	8b 55 dc	 mov	 edx, DWORD PTR _limit$[ebp]
  00142	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00145	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  00148	dc c0		 fadd	 ST(0), ST(0)
  0014a	8b 4d dc	 mov	 ecx, DWORD PTR _limit$[ebp]
  0014d	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00150	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1461 :         x[ limit ].im *= (float)2;

  00153	8b 45 dc	 mov	 eax, DWORD PTR _limit$[ebp]
  00156	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00159	d9 44 c1 04	 fld	 DWORD PTR [ecx+eax*8+4]
  0015d	dc c0		 fadd	 ST(0), ST(0)
  0015f	8b 55 dc	 mov	 edx, DWORD PTR _limit$[ebp]
  00162	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00165	d9 5c d0 04	 fstp	 DWORD PTR [eax+edx*8+4]

; 1462 : 
; 1463 :      } else {                      /*  inverse transform  */

  00169	e9 37 01 00 00	 jmp	 $L1498
$L1510:

; 1464 : 
; 1465 :         for ( k=1, l=len-k ; k < limit ; k++, l-- ) {

  0016e	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _k$[ebp], 1
  00175	8b 4d ec	 mov	 ecx, DWORD PTR _len$[ebp]
  00178	2b 4d e4	 sub	 ecx, DWORD PTR _k$[ebp]
  0017b	89 4d e0	 mov	 DWORD PTR _l$[ebp], ecx
  0017e	eb 12		 jmp	 SHORT $L1517
$L1518:
  00180	8b 55 e4	 mov	 edx, DWORD PTR _k$[ebp]
  00183	83 c2 01	 add	 edx, 1
  00186	89 55 e4	 mov	 DWORD PTR _k$[ebp], edx
  00189	8b 45 e0	 mov	 eax, DWORD PTR _l$[ebp]
  0018c	83 e8 01	 sub	 eax, 1
  0018f	89 45 e0	 mov	 DWORD PTR _l$[ebp], eax
$L1517:
  00192	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  00195	3b 4d dc	 cmp	 ecx, DWORD PTR _limit$[ebp]
  00198	0f 8d d9 00 00
	00		 jge	 $L1519

; 1466 :            reDif  = x[k].re - x[l].re;

  0019e	8b 55 e4	 mov	 edx, DWORD PTR _k$[ebp]
  001a1	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001a4	8b 4d e0	 mov	 ecx, DWORD PTR _l$[ebp]
  001a7	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  001aa	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  001ad	d8 24 ce	 fsub	 DWORD PTR [esi+ecx*8]
  001b0	d9 5d d8	 fstp	 DWORD PTR _reDif$[ebp]

; 1467 :            imDif  = x[k].im + x[l].im;

  001b3	8b 55 e4	 mov	 edx, DWORD PTR _k$[ebp]
  001b6	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001b9	8b 4d e0	 mov	 ecx, DWORD PTR _l$[ebp]
  001bc	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  001bf	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  001c3	d8 44 ce 04	 fadd	 DWORD PTR [esi+ecx*8+4]
  001c7	d9 5d fc	 fstp	 DWORD PTR _imDif$[ebp]

; 1468 :            reSum  = x[k].re + x[l].re;

  001ca	8b 55 e4	 mov	 edx, DWORD PTR _k$[ebp]
  001cd	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001d0	8b 4d e0	 mov	 ecx, DWORD PTR _l$[ebp]
  001d3	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  001d6	d9 04 d0	 fld	 DWORD PTR [eax+edx*8]
  001d9	d8 04 ce	 fadd	 DWORD PTR [esi+ecx*8]
  001dc	d9 5d f4	 fstp	 DWORD PTR _reSum$[ebp]

; 1469 :            imSum  = x[k].im - x[l].im;

  001df	8b 55 e4	 mov	 edx, DWORD PTR _k$[ebp]
  001e2	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001e5	8b 4d e0	 mov	 ecx, DWORD PTR _l$[ebp]
  001e8	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  001eb	d9 44 d0 04	 fld	 DWORD PTR [eax+edx*8+4]
  001ef	d8 64 ce 04	 fsub	 DWORD PTR [esi+ecx*8+4]
  001f3	d9 5d f8	 fstp	 DWORD PTR _imSum$[ebp]

; 1470 :            imTmp   = reDif*expTbl[k].re + imDif*expTbl[k].im;

  001f6	8b 55 e4	 mov	 edx, DWORD PTR _k$[ebp]
  001f9	8b 45 14	 mov	 eax, DWORD PTR _expTbl$[ebp]
  001fc	d9 45 d8	 fld	 DWORD PTR _reDif$[ebp]
  001ff	d8 0c d0	 fmul	 DWORD PTR [eax+edx*8]
  00202	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  00205	8b 55 14	 mov	 edx, DWORD PTR _expTbl$[ebp]
  00208	d9 45 fc	 fld	 DWORD PTR _imDif$[ebp]
  0020b	d8 4c ca 04	 fmul	 DWORD PTR [edx+ecx*8+4]
  0020f	de c1		 faddp	 ST(1), ST(0)
  00211	d9 5d e8	 fstp	 DWORD PTR _imTmp$[ebp]

; 1471 :            x[k].im = imSum + imTmp;

  00214	d9 45 f8	 fld	 DWORD PTR _imSum$[ebp]
  00217	d8 45 e8	 fadd	 DWORD PTR _imTmp$[ebp]
  0021a	8b 45 e4	 mov	 eax, DWORD PTR _k$[ebp]
  0021d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00220	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1472 :            reTmp   = reDif*expTbl[k].im - imDif*expTbl[k].re;

  00224	8b 55 e4	 mov	 edx, DWORD PTR _k$[ebp]
  00227	8b 45 14	 mov	 eax, DWORD PTR _expTbl$[ebp]
  0022a	d9 45 d8	 fld	 DWORD PTR _reDif$[ebp]
  0022d	d8 4c d0 04	 fmul	 DWORD PTR [eax+edx*8+4]
  00231	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  00234	8b 55 14	 mov	 edx, DWORD PTR _expTbl$[ebp]
  00237	d9 45 fc	 fld	 DWORD PTR _imDif$[ebp]
  0023a	d8 0c ca	 fmul	 DWORD PTR [edx+ecx*8]
  0023d	de e9		 fsubp	 ST(1), ST(0)
  0023f	d9 5d f0	 fstp	 DWORD PTR _reTmp$[ebp]

; 1473 :            x[l].im =-imSum + imTmp;

  00242	d9 45 f8	 fld	 DWORD PTR _imSum$[ebp]
  00245	d9 e0		 fchs
  00247	d8 45 e8	 fadd	 DWORD PTR _imTmp$[ebp]
  0024a	8b 45 e0	 mov	 eax, DWORD PTR _l$[ebp]
  0024d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00250	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]

; 1474 :            x[k].re = reSum + reTmp;

  00254	d9 45 f4	 fld	 DWORD PTR _reSum$[ebp]
  00257	d8 45 f0	 fadd	 DWORD PTR _reTmp$[ebp]
  0025a	8b 55 e4	 mov	 edx, DWORD PTR _k$[ebp]
  0025d	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00260	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1475 :            x[l].re = reSum - reTmp;

  00263	d9 45 f4	 fld	 DWORD PTR _reSum$[ebp]
  00266	d8 65 f0	 fsub	 DWORD PTR _reTmp$[ebp]
  00269	8b 4d e0	 mov	 ecx, DWORD PTR _l$[ebp]
  0026c	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0026f	d9 1c ca	 fstp	 DWORD PTR [edx+ecx*8]

; 1476 :         } /* for */

  00272	e9 09 ff ff ff	 jmp	 $L1518
$L1519:

; 1477 :         x[ limit ].re *= (float)2;

  00277	8b 45 dc	 mov	 eax, DWORD PTR _limit$[ebp]
  0027a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0027d	d9 04 c1	 fld	 DWORD PTR [ecx+eax*8]
  00280	dc c0		 fadd	 ST(0), ST(0)
  00282	8b 55 dc	 mov	 edx, DWORD PTR _limit$[ebp]
  00285	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00288	d9 1c d0	 fstp	 DWORD PTR [eax+edx*8]

; 1478 :         x[ limit ].im *= -(float)2;

  0028b	8b 4d dc	 mov	 ecx, DWORD PTR _limit$[ebp]
  0028e	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00291	d9 44 ca 04	 fld	 DWORD PTR [edx+ecx*8+4]
  00295	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@c0000000
  0029b	8b 45 dc	 mov	 eax, DWORD PTR _limit$[ebp]
  0029e	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  002a1	d9 5c c1 04	 fstp	 DWORD PTR [ecx+eax*8+4]
$L1498:

; 1479 : 
; 1480 :      } /* if for transform */
; 1481 : 
; 1482 :   } /* if ( limit ) */
; 1483 : 
; 1484 :   return;
; 1485 : } /* nspcUndCcsRecom_Fft */

  002a5	5e		 pop	 esi
  002a6	8b e5		 mov	 esp, ebp
  002a8	5d		 pop	 ebp
  002a9	c2 10 00	 ret	 16			; 00000010H
_nspcUndCcsRecom_Fft@16 ENDP
_TEXT	ENDS
PUBLIC	_vox_nspcFft@12
; Function compile flags: /Odt
;	COMDAT _vox_nspcFft@12
_TEXT	SEGMENT
_n$ = -16
_inv_fl$ = -12
_Scale$ = -8
_w$ = -4
_samps$ = 8
_order$ = 12
_flags$ = 16
_vox_nspcFft@12 PROC NEAR				; COMDAT

; 1753 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1754 :    int          n,                 /* Length of signal */
; 1755 :                 inv_fl;            /* Transform flag: forward or inverse */
; 1756 :    const SCplx *w;                 /* Table of twiddle factors */
; 1757 :    float        Scale;             /* For scale in inverse transform */
; 1758 : 
; 1759 :    /* Computes the table of twiddle factors */
; 1760 :    w = nspcUndGetFftTwdTbl_great(order);                       

  00006	8b 45 0c	 mov	 eax, DWORD PTR _order$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _nspcUndGetFftTwdTbl_great@4
  0000f	89 45 fc	 mov	 DWORD PTR _w$[ebp], eax

; 1761 : 
; 1762 :    /* Control argument flags: NSP_NoBitRev, NSP_InBitRev, NSP_OutBitRev */
; 1763 :    if ( ! ( (flags & NSP_InBitRev ) |                          
; 1764 :             (flags & NSP_OutBitRev) |                          
; 1765 :             (flags & NSP_NoBitRev ) ) ) 

  00012	8b 4d 10	 mov	 ecx, DWORD PTR _flags$[ebp]
  00015	83 e1 20	 and	 ecx, 32			; 00000020H
  00018	8b 55 10	 mov	 edx, DWORD PTR _flags$[ebp]
  0001b	83 e2 40	 and	 edx, 64			; 00000040H
  0001e	0b ca		 or	 ecx, edx
  00020	8b 45 10	 mov	 eax, DWORD PTR _flags$[ebp]
  00023	83 e0 10	 and	 eax, 16			; 00000010H
  00026	0b c8		 or	 ecx, eax
  00028	85 c9		 test	 ecx, ecx
  0002a	75 09		 jne	 SHORT $L1607

; 1766 :    {                      
; 1767 :       flags = flags | NSP_NoBitRev;                            

  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _flags$[ebp]
  0002f	83 c9 10	 or	 ecx, 16			; 00000010H
  00032	89 4d 10	 mov	 DWORD PTR _flags$[ebp], ecx
$L1607:

; 1768 :    }
; 1769 : 
; 1770 :    if ( order == 0 )  return;                     /* Control order */

  00035	83 7d 0c 00	 cmp	 DWORD PTR _order$[ebp], 0
  00039	75 05		 jne	 SHORT $L1608
  0003b	e9 e1 00 00 00	 jmp	 $L1602
$L1608:

; 1771 : 
; 1772 :    n = 1 << order;                                /* Form length of signal */

  00040	ba 01 00 00 00	 mov	 edx, 1
  00045	8b 4d 0c	 mov	 ecx, DWORD PTR _order$[ebp]
  00048	d3 e2		 shl	 edx, cl
  0004a	89 55 f0	 mov	 DWORD PTR _n$[ebp], edx

; 1773 : 
; 1774 :    inv_fl = ( flags & NSP_Forw ) ? 1 : -1;        /* Form transform flag */

  0004d	8b 45 10	 mov	 eax, DWORD PTR _flags$[ebp]
  00050	83 e0 01	 and	 eax, 1
  00053	f7 d8		 neg	 eax
  00055	1b c0		 sbb	 eax, eax
  00057	83 e0 02	 and	 eax, 2
  0005a	83 c0 ff	 add	 eax, -1
  0005d	89 45 f4	 mov	 DWORD PTR _inv_fl$[ebp], eax

; 1775 : 
; 1776 :    if ( order < FFT_OrderSplit )   {  /* ---------Split algorithm --------- */

  00060	83 7d 0c 0b	 cmp	 DWORD PTR _order$[ebp], 11 ; 0000000bH
  00064	7d 45		 jge	 SHORT $L1609

; 1777 : 
; 1778 :       if ( flags & NSP_InBitRev ) {               /* Control NSP_InBitRev */

  00066	8b 4d 10	 mov	 ecx, DWORD PTR _flags$[ebp]
  00069	83 e1 20	 and	 ecx, 32			; 00000020H
  0006c	85 c9		 test	 ecx, ecx
  0006e	74 0d		 je	 SHORT $L1610

; 1779 :          nspcbBitRev1(samps,order);

  00070	8b 55 0c	 mov	 edx, DWORD PTR _order$[ebp]
  00073	52		 push	 edx
  00074	8b 45 08	 mov	 eax, DWORD PTR _samps$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _nspcbBitRev1@8
$L1610:

; 1780 :       }
; 1781 :       nspcUndSplit_FFT(samps,n,inv_fl,w);         /* Computes FFT */

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _w$[ebp]
  00080	51		 push	 ecx
  00081	8b 55 f4	 mov	 edx, DWORD PTR _inv_fl$[ebp]
  00084	52		 push	 edx
  00085	8b 45 f0	 mov	 eax, DWORD PTR _n$[ebp]
  00088	50		 push	 eax
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _samps$[ebp]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 _nspcUndSplit_FFT@16

; 1782 :       if ( !( flags & NSP_OutBitRev ) ) {         /* Control NSP_OutBitRev */

  00092	8b 55 10	 mov	 edx, DWORD PTR _flags$[ebp]
  00095	83 e2 40	 and	 edx, 64			; 00000040H
  00098	85 d2		 test	 edx, edx
  0009a	75 0d		 jne	 SHORT $L1611

; 1783 :          nspcbBitRev1(samps,order);

  0009c	8b 45 0c	 mov	 eax, DWORD PTR _order$[ebp]
  0009f	50		 push	 eax
  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _samps$[ebp]
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 _nspcbBitRev1@8
$L1611:

; 1784 :       }
; 1785 : 
; 1786 :    } else                          {  /* ---------Radix algorithm --------- */

  000a9	eb 43		 jmp	 SHORT $L1612
$L1609:

; 1787 : 
; 1788 :       if ( !( flags & NSP_InBitRev ) ) {          /* Control NSP_InBitRev */

  000ab	8b 55 10	 mov	 edx, DWORD PTR _flags$[ebp]
  000ae	83 e2 20	 and	 edx, 32			; 00000020H
  000b1	85 d2		 test	 edx, edx
  000b3	75 0d		 jne	 SHORT $L1613

; 1789 :          nspcbBitRev1(samps,order);

  000b5	8b 45 0c	 mov	 eax, DWORD PTR _order$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _samps$[ebp]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 _nspcbBitRev1@8
$L1613:

; 1790 :       }
; 1791 :       nspcUndRadix2_FFT(samps,n,inv_fl,w);        /* Computes FFT */

  000c2	8b 55 fc	 mov	 edx, DWORD PTR _w$[ebp]
  000c5	52		 push	 edx
  000c6	8b 45 f4	 mov	 eax, DWORD PTR _inv_fl$[ebp]
  000c9	50		 push	 eax
  000ca	8b 4d f0	 mov	 ecx, DWORD PTR _n$[ebp]
  000cd	51		 push	 ecx
  000ce	8b 55 08	 mov	 edx, DWORD PTR _samps$[ebp]
  000d1	52		 push	 edx
  000d2	e8 00 00 00 00	 call	 _nspcUndRadix2_FFT@16

; 1792 :       if ( flags & NSP_OutBitRev ) {              /* Control NSP_OutBitRev */

  000d7	8b 45 10	 mov	 eax, DWORD PTR _flags$[ebp]
  000da	83 e0 40	 and	 eax, 64			; 00000040H
  000dd	85 c0		 test	 eax, eax
  000df	74 0d		 je	 SHORT $L1612

; 1793 :          nspcbBitRev1(samps,order);

  000e1	8b 4d 0c	 mov	 ecx, DWORD PTR _order$[ebp]
  000e4	51		 push	 ecx
  000e5	8b 55 08	 mov	 edx, DWORD PTR _samps$[ebp]
  000e8	52		 push	 edx
  000e9	e8 00 00 00 00	 call	 _nspcbBitRev1@8
$L1612:

; 1794 :       }
; 1795 : 
; 1796 :    } /* if for algorithm type */
; 1797 : 
; 1798 :    /* Control NSP_Inv and NSP_NoScale */
; 1799 :    if ( flags & NSP_Inv ) 

  000ee	8b 45 10	 mov	 eax, DWORD PTR _flags$[ebp]
  000f1	83 e0 02	 and	 eax, 2
  000f4	85 c0		 test	 eax, eax
  000f6	74 29		 je	 SHORT $L1602

; 1800 :    {                                    
; 1801 :       if ( !( flags & NSP_NoScale ) ) 

  000f8	8b 4d 10	 mov	 ecx, DWORD PTR _flags$[ebp]
  000fb	83 e1 08	 and	 ecx, 8
  000fe	85 c9		 test	 ecx, ecx
  00100	75 1f		 jne	 SHORT $L1602

; 1802 :       {                        
; 1803 :           Scale    = (float)(1.0/n);                           

  00102	db 45 f0	 fild	 DWORD PTR _n$[ebp]
  00105	dc 3d 00 00 00
	00		 fdivr	 QWORD PTR __real@3ff0000000000000
  0010b	d9 5d f8	 fstp	 DWORD PTR _Scale$[ebp]

; 1804 :           nspsbMpy1(Scale,(float *)samps,n*2);                           

  0010e	8b 55 f0	 mov	 edx, DWORD PTR _n$[ebp]
  00111	d1 e2		 shl	 edx, 1
  00113	52		 push	 edx
  00114	8b 45 08	 mov	 eax, DWORD PTR _samps$[ebp]
  00117	50		 push	 eax
  00118	8b 4d f8	 mov	 ecx, DWORD PTR _Scale$[ebp]
  0011b	51		 push	 ecx
  0011c	e8 00 00 00 00	 call	 _nspsbMpy1@12
$L1602:

; 1805 :       }                                                        
; 1806 :    }
; 1807 : 
; 1808 :    return;
; 1809 : }  /* nspcFft */

  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 0c 00	 ret	 12			; 0000000cH
_vox_nspcFft@12 ENDP
_TEXT	ENDS
PUBLIC	_nspFreeFftResources@0
EXTRN	_free:NEAR
; Function compile flags: /Odt
;	COMDAT _nspFreeFftResources@0
_TEXT	SEGMENT
_i$ = -4
_nspFreeFftResources@0 PROC NEAR			; COMDAT

; 1813 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1814 :    unsigned short i;
; 1815 :    for(i=0;i<32;i++) 

  00004	66 c7 45 fc 00
	00		 mov	 WORD PTR _i$[ebp], 0
  0000a	eb 0c		 jmp	 SHORT $L1621
$L1622:
  0000c	66 8b 45 fc	 mov	 ax, WORD PTR _i$[ebp]
  00010	66 05 01 00	 add	 ax, 1
  00014	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
$L1621:
  00018	0f b7 4d fc	 movzx	 ecx, WORD PTR _i$[ebp]
  0001c	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0001f	7d 33		 jge	 SHORT $L1623

; 1816 :       if(ctxFftTbl[i]) {

  00021	0f b7 55 fc	 movzx	 edx, WORD PTR _i$[ebp]
  00025	83 3c 95 00 00
	00 00 00	 cmp	 DWORD PTR _ctxFftTbl[edx*4], 0
  0002d	74 23		 je	 SHORT $L1624

; 1817 :          free(ctxFftTbl[i]);

  0002f	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00033	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _ctxFftTbl[eax*4]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _free
  00040	83 c4 04	 add	 esp, 4

; 1818 :          ctxFftTbl[i]=NULL;

  00043	0f b7 55 fc	 movzx	 edx, WORD PTR _i$[ebp]
  00047	c7 04 95 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _ctxFftTbl[edx*4], 0
$L1624:

; 1819 :       }
; 1820 : 
; 1821 :    for(i=0;i<32;i++)

  00052	eb b8		 jmp	 SHORT $L1622
$L1623:
  00054	66 c7 45 fc 00
	00		 mov	 WORD PTR _i$[ebp], 0
  0005a	eb 0c		 jmp	 SHORT $L1626
$L1627:
  0005c	66 8b 45 fc	 mov	 ax, WORD PTR _i$[ebp]
  00060	66 05 01 00	 add	 ax, 1
  00064	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
$L1626:
  00068	0f b7 4d fc	 movzx	 ecx, WORD PTR _i$[ebp]
  0006c	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0006f	7d 33		 jge	 SHORT $L1619

; 1822 :       if(ctxRevTbl[i]) {

  00071	0f b7 55 fc	 movzx	 edx, WORD PTR _i$[ebp]
  00075	83 3c 95 00 00
	00 00 00	 cmp	 DWORD PTR _ctxRevTbl[edx*4], 0
  0007d	74 23		 je	 SHORT $L1629

; 1823 :          free(ctxRevTbl[i]);

  0007f	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00083	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _ctxRevTbl[eax*4]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 _free
  00090	83 c4 04	 add	 esp, 4

; 1824 :          ctxRevTbl[i]=NULL;

  00093	0f b7 55 fc	 movzx	 edx, WORD PTR _i$[ebp]
  00097	c7 04 95 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _ctxRevTbl[edx*4], 0
$L1629:

; 1825 :       }
; 1826 : 
; 1827 : 
; 1828 :    return;

  000a2	eb b8		 jmp	 SHORT $L1627
$L1619:

; 1829 : }

  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_nspFreeFftResources@0 ENDP
_TEXT	ENDS
END
