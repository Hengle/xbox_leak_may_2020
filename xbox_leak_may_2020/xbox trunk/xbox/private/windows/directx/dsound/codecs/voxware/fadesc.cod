; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\fadesc.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxFadeSC@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxinitFadeSC@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxfreeFadeSC@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _SetCurrentFrameStateSC@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _GetCurrentFrameStateSC@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _GetLastFrameStateSC@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _UpdateFadeStateSC@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_fASKinit DD	0be081fb1r			; -0.132933
	DD	03d565651r			; 0.0523284
	DD	0bdf5c1abr			; -0.119998
	DD	0bdaac243r			; -0.0833783
	DD	0be183a03r			; -0.148659
	DD	0bdd738b1r			; -0.105089
	DD	0bdb1fc9fr			; -0.0869076
	DD	03d41bf6dr			; 0.0473017
	DD	0bd6c64dbr			; -0.0577134
	DD	0bdae9261r			; -0.0852401
	DD	03d3387c5r			; 0.0438307
	DD	03caa27acr			; 0.0207709
CONST	ENDS
PUBLIC	_VoxFadeSC@8
PUBLIC	__real@00000000
PUBLIC	__real@3c6b313c
PUBLIC	__real@3f800000
EXTRN	__fltused:NEAR
EXTRN	_memcpy:NEAR
;	COMDAT __real@00000000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\fadesc.c
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3c6b313c
CONST	SEGMENT
__real@3c6b313c DD 03c6b313cr			; 0.014355
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxFadeSC@8
_TEXT	SEGMENT
_FadeSC_mblk$ = -20
_pSubParamEnd$ = -16
_FadeFactor$ = -12
_Param_mblk$ = -8
_pSubParamMid$ = -4
_pvFadeSCMemBlk$ = 8
_pvParamMemBlk$ = 12
_VoxFadeSC@8 PROC NEAR					; COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 101  :    PARAM_SC *Param_mblk = (PARAM_SC *)pvParamMemBlk;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _pvParamMemBlk$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _Param_mblk$[ebp], eax

; 102  :    FadeSCstruct *FadeSC_mblk = (FadeSCstruct *)pvFadeSCMemBlk;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pvFadeSCMemBlk$[ebp]
  0000f	89 4d ec	 mov	 DWORD PTR _FadeSC_mblk$[ebp], ecx

; 103  :    SUBFRAME_PARAM_SC *pSubParamMid = &(Param_mblk->SubParam[PARAM_MIDFRAME]);

  00012	8b 55 f8	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  00015	89 55 fc	 mov	 DWORD PTR _pSubParamMid$[ebp], edx

; 104  :    SUBFRAME_PARAM_SC *pSubParamEnd = &(Param_mblk->SubParam[PARAM_ENDFRAME]);

  00018	8b 45 f8	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  0001b	83 c0 28	 add	 eax, 40			; 00000028H
  0001e	89 45 f0	 mov	 DWORD PTR _pSubParamEnd$[ebp], eax

; 105  : 
; 106  :    float FadeFactor;
; 107  : 
; 108  :    /*====================================================================
; 109  :      Check to see if there should be silence/background noise injection.
; 110  :      ====================================================================*/
; 111  :    if (FadeSC_mblk->CurrentFrameState == SILENCE)

  00021	8b 4d ec	 mov	 ecx, DWORD PTR _FadeSC_mblk$[ebp]
  00024	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00027	75 4c		 jne	 SHORT $L1261

; 112  :    {
; 113  :     /*===================================================================
; 114  :       Set the energy, pitch, pv, nad spectrum to either preset
; 115  :       "noise" values, current noise estimates.
; 116  :       ===================================================================*/
; 117  :       Param_mblk->fLog2Gain     = FadeSC_mblk->BackgroundEnergyEst;

  00029	8b 55 f8	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  0002c	8b 45 ec	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  0002f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00032	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 118  :       pSubParamMid->Pitch = pSubParamEnd->Pitch = SILENCE_PITCH;

  00035	8b 55 f0	 mov	 edx, DWORD PTR _pSubParamEnd$[ebp]
  00038	c7 02 00 00 fa
	42		 mov	 DWORD PTR [edx], 1123680256 ; 42fa0000H
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _pSubParamMid$[ebp]
  00041	c7 00 00 00 fa
	42		 mov	 DWORD PTR [eax], 1123680256 ; 42fa0000H

; 119  :       pSubParamMid->Pv = pSubParamEnd->Pv = 0.0F;

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _pSubParamEnd$[ebp]
  0004a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00051	8b 55 fc	 mov	 edx, DWORD PTR _pSubParamMid$[ebp]
  00054	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 120  : 
; 121  :       memcpy(Param_mblk->pfASK, FadeSC_mblk->BackgroundASK, 
; 122  :              LPC_ORDER*sizeof(float));

  0005b	6a 30		 push	 48			; 00000030H
  0005d	8b 45 ec	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  00060	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00063	51		 push	 ecx
  00064	8b 55 f8	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  00067	83 c2 54	 add	 edx, 84			; 00000054H
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 _memcpy
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  :    }
; 124  :  /*========================================================================
; 125  :    If we are not in silence, and the voicing is zero, we must update our
; 126  :    background noise estimates of energy and ASKs.
; 127  :    ========================================================================*/
; 128  :    else if ((pSubParamMid->Pv == 0.0F)&&(pSubParamEnd->Pv == 0.0F))

  00073	eb 71		 jmp	 SHORT $L1263
$L1261:
  00075	8b 45 fc	 mov	 eax, DWORD PTR _pSubParamMid$[ebp]
  00078	d9 40 04	 fld	 DWORD PTR [eax+4]
  0007b	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00081	df e0		 fnstsw	 ax
  00083	f6 c4 44	 test	 ah, 68			; 00000044H
  00086	7a 5e		 jp	 SHORT $L1263
  00088	8b 4d f0	 mov	 ecx, DWORD PTR _pSubParamEnd$[ebp]
  0008b	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0008e	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00094	df e0		 fnstsw	 ax
  00096	f6 c4 44	 test	 ah, 68			; 00000044H
  00099	7a 4b		 jp	 SHORT $L1263

; 129  :    {
; 130  :      memcpy(FadeSC_mblk->BackgroundASK, Param_mblk->pfASK, 
; 131  :             LPC_ORDER*sizeof(float));

  0009b	6a 30		 push	 48			; 00000030H
  0009d	8b 55 f8	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  000a0	83 c2 54	 add	 edx, 84			; 00000054H
  000a3	52		 push	 edx
  000a4	8b 45 ec	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  000a7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000aa	51		 push	 ecx
  000ab	e8 00 00 00 00	 call	 _memcpy
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 132  : 
; 133  :      if (Param_mblk->fLog2Gain < FadeSC_mblk->BackgroundEnergyEst)

  000b3	8b 55 f8	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  000b6	8b 45 ec	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  000b9	d9 42 50	 fld	 DWORD PTR [edx+80]
  000bc	d8 58 08	 fcomp	 DWORD PTR [eax+8]
  000bf	df e0		 fnstsw	 ax
  000c1	f6 c4 05	 test	 ah, 5
  000c4	7a 0e		 jp	 SHORT $L1266

; 134  :        FadeSC_mblk->BackgroundEnergyEst = Param_mblk->fLog2Gain;

  000c6	8b 4d ec	 mov	 ecx, DWORD PTR _FadeSC_mblk$[ebp]
  000c9	8b 55 f8	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  000cc	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  000cf	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 135  :      else

  000d2	eb 12		 jmp	 SHORT $L1263
$L1266:

; 136  :        FadeSC_mblk->BackgroundEnergyEst += (float)ENERGY_INCREASE;

  000d4	8b 4d ec	 mov	 ecx, DWORD PTR _FadeSC_mblk$[ebp]
  000d7	d9 41 08	 fld	 DWORD PTR [ecx+8]
  000da	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3c6b313c
  000e0	8b 55 ec	 mov	 edx, DWORD PTR _FadeSC_mblk$[ebp]
  000e3	d9 5a 08	 fstp	 DWORD PTR [edx+8]
$L1263:

; 137  :    }
; 138  : 
; 139  : 
; 140  :  /*=========================================================================
; 141  :    We want to fade in over a few frames.  Check to see if the codec must 
; 142  :    fade in.  If it does, set the fade in length counting.
; 143  :    =========================================================================*/
; 144  :    if ((FadeSC_mblk->CurrentFrameState == NORMAL)
; 145  :       &&(FadeSC_mblk->LastFrameState   == SILENCE))

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  000e9	83 38 01	 cmp	 DWORD PTR [eax], 1
  000ec	75 13		 jne	 SHORT $L1269
  000ee	8b 4d ec	 mov	 ecx, DWORD PTR _FadeSC_mblk$[ebp]
  000f1	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  000f5	75 0a		 jne	 SHORT $L1269

; 146  :    {
; 147  :      FadeSC_mblk->FadeInCount = FADEIN_LEN;

  000f7	8b 55 ec	 mov	 edx, DWORD PTR _FadeSC_mblk$[ebp]
  000fa	c7 42 10 01 00
	00 00		 mov	 DWORD PTR [edx+16], 1
$L1269:

; 148  :    }
; 149  : 
; 150  :  /*=========================================================================
; 151  :    Check if the decoder needs to fade in this frame
; 152  :    =========================================================================*/
; 153  :    if (FadeSC_mblk->FadeInCount > 0)

  00101	8b 45 ec	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  00104	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00108	7e 52		 jle	 SHORT $L1270

; 154  :    {
; 155  :       FadeSC_mblk->FadeInCount--;

  0010a	8b 4d ec	 mov	 ecx, DWORD PTR _FadeSC_mblk$[ebp]
  0010d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00110	83 ea 01	 sub	 edx, 1
  00113	8b 45 ec	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  00116	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 156  :       FadeFactor = 1.0F - (float)FadeSC_mblk->FadeInCount * INV_FADEIN_LEN;

  00119	8b 4d ec	 mov	 ecx, DWORD PTR _FadeSC_mblk$[ebp]
  0011c	db 41 10	 fild	 DWORD PTR [ecx+16]
  0011f	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f800000
  00125	d8 2d 00 00 00
	00		 fsubr	 DWORD PTR __real@3f800000
  0012b	d9 5d f4	 fstp	 DWORD PTR _FadeFactor$[ebp]

; 157  :       if (Param_mblk->fLog2Gain > FadeSC_mblk->BackgroundEnergyEst)

  0012e	8b 55 f8	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  00131	8b 45 ec	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  00134	d9 42 50	 fld	 DWORD PTR [edx+80]
  00137	d8 58 08	 fcomp	 DWORD PTR [eax+8]
  0013a	df e0		 fnstsw	 ax
  0013c	f6 c4 41	 test	 ah, 65			; 00000041H
  0013f	75 1b		 jne	 SHORT $L1270

; 158  :          Param_mblk->fLog2Gain = FadeSC_mblk->BackgroundEnergyEst + 
; 159  :         (Param_mblk->fLog2Gain-FadeSC_mblk->BackgroundEnergyEst)*FadeFactor;

  00141	8b 4d f8	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00144	8b 55 ec	 mov	 edx, DWORD PTR _FadeSC_mblk$[ebp]
  00147	d9 41 50	 fld	 DWORD PTR [ecx+80]
  0014a	d8 62 08	 fsub	 DWORD PTR [edx+8]
  0014d	d8 4d f4	 fmul	 DWORD PTR _FadeFactor$[ebp]
  00150	8b 45 ec	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  00153	d8 40 08	 fadd	 DWORD PTR [eax+8]
  00156	8b 4d f8	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00159	d9 59 50	 fstp	 DWORD PTR [ecx+80]
$L1270:

; 160  :    }
; 161  :   
; 162  :    FadeSC_mblk->LastFrameState    = FadeSC_mblk->CurrentFrameState;

  0015c	8b 55 ec	 mov	 edx, DWORD PTR _FadeSC_mblk$[ebp]
  0015f	8b 45 ec	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  00162	8b 08		 mov	 ecx, DWORD PTR [eax]
  00164	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 163  :    FadeSC_mblk->CurrentFrameState = NORMAL;

  00167	8b 55 ec	 mov	 edx, DWORD PTR _FadeSC_mblk$[ebp]
  0016a	c7 02 01 00 00
	00		 mov	 DWORD PTR [edx], 1

; 164  : }

  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c2 08 00	 ret	 8
_VoxFadeSC@8 ENDP
_TEXT	ENDS
PUBLIC	_VoxinitFadeSC@4
EXTRN	_calloc:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxinitFadeSC@4
_TEXT	SEGMENT
_FadeSC_mblk$ = -4
_hFadeSCMemBlk$ = 8
_VoxinitFadeSC@4 PROC NEAR				; COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 193  :    FadeSCstruct *FadeSC_mblk;
; 194  : 
; 195  :    if(VOX_MEM_INIT(FadeSC_mblk=*hFadeSCMemBlk,1,sizeof(FadeSCstruct))) 

  00004	6a 14		 push	 20			; 00000014H
  00006	6a 01		 push	 1
  00008	e8 00 00 00 00	 call	 _calloc
  0000d	83 c4 08	 add	 esp, 8
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _hFadeSCMemBlk$[ebp]
  00013	89 01		 mov	 DWORD PTR [ecx], eax
  00015	8b 55 08	 mov	 edx, DWORD PTR _hFadeSCMemBlk$[ebp]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	89 45 fc	 mov	 DWORD PTR _FadeSC_mblk$[ebp], eax
  0001d	83 7d fc 00	 cmp	 DWORD PTR _FadeSC_mblk$[ebp], 0
  00021	75 06		 jne	 SHORT $L1278

; 196  :       return 1;

  00023	66 b8 01 00	 mov	 ax, 1
  00027	eb 61		 jmp	 SHORT $L1275
$L1278:

; 197  : 
; 198  :    if(VOX_MEM_INIT(FadeSC_mblk->BackgroundASK,LPC_ORDER,sizeof(float))) 

  00029	6a 04		 push	 4
  0002b	6a 0c		 push	 12			; 0000000cH
  0002d	e8 00 00 00 00	 call	 _calloc
  00032	83 c4 08	 add	 esp, 8
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _FadeSC_mblk$[ebp]
  00038	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _FadeSC_mblk$[ebp]
  0003e	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  00042	75 06		 jne	 SHORT $L1280

; 199  :       return 1;

  00044	66 b8 01 00	 mov	 ax, 1
  00048	eb 40		 jmp	 SHORT $L1275
$L1280:

; 200  : 
; 201  :    memcpy(FadeSC_mblk->BackgroundASK, fASKinit, LPC_ORDER*sizeof(float));

  0004a	6a 30		 push	 48			; 00000030H
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:_fASKinit
  00051	8b 45 fc	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  00054	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 _memcpy
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 202  :   
; 203  :    FadeSC_mblk->FadeInCount         = 0; 

  00060	8b 55 fc	 mov	 edx, DWORD PTR _FadeSC_mblk$[ebp]
  00063	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 204  :    FadeSC_mblk->CurrentFrameState   = NORMAL;

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  0006d	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 205  :    FadeSC_mblk->LastFrameState      = NORMAL;

  00073	8b 4d fc	 mov	 ecx, DWORD PTR _FadeSC_mblk$[ebp]
  00076	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 206  :    FadeSC_mblk->BackgroundEnergyEst = INITIAL_BACKGROUND_ENERGY; 

  0007d	8b 55 fc	 mov	 edx, DWORD PTR _FadeSC_mblk$[ebp]
  00080	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 207  :  
; 208  :   return 0;

  00087	66 33 c0	 xor	 ax, ax
$L1275:

; 209  : }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
_VoxinitFadeSC@4 ENDP
_TEXT	ENDS
PUBLIC	_VoxfreeFadeSC@4
EXTRN	_free:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxfreeFadeSC@4
_TEXT	SEGMENT
_FadeSC_mblk$ = -4
_hFadeSCMemBlk$ = 8
_VoxfreeFadeSC@4 PROC NEAR				; COMDAT

; 236  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 237  :    FadeSCstruct *FadeSC_mblk=(FadeSCstruct *)*hFadeSCMemBlk;

  00004	8b 45 08	 mov	 eax, DWORD PTR _hFadeSCMemBlk$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	89 4d fc	 mov	 DWORD PTR _FadeSC_mblk$[ebp], ecx

; 238  : 
; 239  :    if(*hFadeSCMemBlk) {

  0000c	8b 55 08	 mov	 edx, DWORD PTR _hFadeSCMemBlk$[ebp]
  0000f	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00012	74 41		 je	 SHORT $L1287

; 240  :       VOX_MEM_FREE(FadeSC_mblk->BackgroundASK);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  00017	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0001b	74 19		 je	 SHORT $L1288
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _FadeSC_mblk$[ebp]
  00020	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 _free
  00029	83 c4 04	 add	 esp, 4
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _FadeSC_mblk$[ebp]
  0002f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$L1288:

; 241  :       VOX_MEM_FREE(*hFadeSCMemBlk);

  00036	8b 4d 08	 mov	 ecx, DWORD PTR _hFadeSCMemBlk$[ebp]
  00039	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0003c	74 17		 je	 SHORT $L1287
  0003e	8b 55 08	 mov	 edx, DWORD PTR _hFadeSCMemBlk$[ebp]
  00041	8b 02		 mov	 eax, DWORD PTR [edx]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _free
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _hFadeSCMemBlk$[ebp]
  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L1287:

; 242  :    }
; 243  :    return 0;

  00055	66 33 c0	 xor	 ax, ax

; 244  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
_VoxfreeFadeSC@4 ENDP
_TEXT	ENDS
PUBLIC	_SetCurrentFrameStateSC@8
; Function compile flags: /Odt
;	COMDAT _SetCurrentFrameStateSC@8
_TEXT	SEGMENT
_pvFadeSCMemBlk$ = 8
_iFrameFlag$ = 12
_SetCurrentFrameStateSC@8 PROC NEAR			; COMDAT

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 274  :   ((FadeSCstruct *)pvFadeSCMemBlk)->CurrentFrameState = iFrameFlag;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvFadeSCMemBlk$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _iFrameFlag$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 275  : }

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
_SetCurrentFrameStateSC@8 ENDP
_TEXT	ENDS
PUBLIC	_GetCurrentFrameStateSC@4
; Function compile flags: /Odt
;	COMDAT _GetCurrentFrameStateSC@4
_TEXT	SEGMENT
_pvFadeSCMemBlk$ = 8
_GetCurrentFrameStateSC@4 PROC NEAR			; COMDAT

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :   return ((FadeSCstruct *)pvFadeSCMemBlk)->CurrentFrameState;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvFadeSCMemBlk$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 305  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
_GetCurrentFrameStateSC@4 ENDP
_TEXT	ENDS
PUBLIC	_GetLastFrameStateSC@4
; Function compile flags: /Odt
;	COMDAT _GetLastFrameStateSC@4
_TEXT	SEGMENT
_pvFadeSCMemBlk$ = 8
_GetLastFrameStateSC@4 PROC NEAR			; COMDAT

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 333  :   return ((FadeSCstruct *)pvFadeSCMemBlk)->LastFrameState;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvFadeSCMemBlk$[ebp]
  00006	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 334  : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
_GetLastFrameStateSC@4 ENDP
_TEXT	ENDS
PUBLIC	_UpdateFadeStateSC@8
; Function compile flags: /Odt
;	COMDAT _UpdateFadeStateSC@8
_TEXT	SEGMENT
_pvFadeSCMemBlk$ = 8
_DecReqDataFlag$ = 12
_UpdateFadeStateSC@8 PROC NEAR				; COMDAT

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 368  :   if (!DecReqDataFlag)

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _DecReqDataFlag$[ebp]
  00007	85 c0		 test	 eax, eax
  00009	75 12		 jne	 SHORT $L1310

; 369  :   {
; 370  :      if (((FadeSCstruct *)pvFadeSCMemBlk)->LastFrameState == SILENCE)

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _pvFadeSCMemBlk$[ebp]
  0000e	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00012	75 09		 jne	 SHORT $L1310

; 371  :         ((FadeSCstruct *)pvFadeSCMemBlk)->CurrentFrameState = SILENCE;

  00014	8b 55 08	 mov	 edx, DWORD PTR _pvFadeSCMemBlk$[ebp]
  00017	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L1310:

; 372  :   }
; 373  : }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
_UpdateFadeStateSC@8 ENDP
_TEXT	ENDS
END
