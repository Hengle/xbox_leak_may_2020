; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\decplssc.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FE@DDLDBNCM@?$CI?$CI?$CIDEC_MEM_BLK?$CK?$CJpMemBlkD?$CJ?9?$DOiNewF@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _voxSetDecodeSC@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _voxGetDecodeRateSC@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _voxGetDecodeInitRateSC@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _voxGetDecReqDataFlagSC@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _voxSetFrameSkippedSC@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _voxSetRepeatFrameSC@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _voxSetWarpFactorSC@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _voxGetWarpFactorSC@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxGetDecPrevPvSC@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxGetDecPrevPitchSC@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_voxSetDecodeSC@8
PUBLIC	??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@ ; `string'
EXTRN	__assert:NEAR
;	COMDAT ??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\decplssc.c
CONST	SEGMENT
??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\decplssc.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@ DB 'pMemBlkD != NULL', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _voxSetDecodeSC@8
_TEXT	SEGMENT
tv70 = -12
_ret$ = -8
_pDecode_mblk$ = -4
_pMemBlkD$ = 8
_wScale$ = 12
_voxSetDecodeSC@8 PROC NEAR				; COMDAT

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 58   :    DEC_MEM_BLK *pDecode_mblk=(DEC_MEM_BLK*)pMemBlkD;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pMemBlkD$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _pDecode_mblk$[ebp], eax

; 59   :    unsigned short ret = 1;   /* default: fail */

  0000c	66 c7 45 f8 01
	00		 mov	 WORD PTR _ret$[ebp], 1

; 60   : 
; 61   :    assert(pMemBlkD != NULL);

  00012	83 7d 08 00	 cmp	 DWORD PTR _pMemBlkD$[ebp], 0
  00016	75 14		 jne	 SHORT $L1037
  00018	6a 3d		 push	 61			; 0000003dH
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@
  00024	e8 00 00 00 00	 call	 __assert
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1037:

; 62   : 
; 63   :    switch(wScale) {

  0002c	0f b7 55 0c	 movzx	 edx, WORD PTR _wScale$[ebp]
  00030	89 55 f4	 mov	 DWORD PTR tv70[ebp], edx
  00033	83 7d f4 01	 cmp	 DWORD PTR tv70[ebp], 1
  00037	74 08		 je	 SHORT $L949
  00039	83 7d f4 02	 cmp	 DWORD PTR tv70[ebp], 2
  0003d	74 21		 je	 SHORT $L951
  0003f	eb 3c		 jmp	 SHORT $L946
$L949:

; 64   :       case SC_RATE_3K:
; 65   :          if(pDecode_mblk->iSCRateValid&SC_RATE_3K) {

  00041	8b 45 fc	 mov	 eax, DWORD PTR _pDecode_mblk$[ebp]
  00044	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00047	83 e1 01	 and	 ecx, 1
  0004a	85 c9		 test	 ecx, ecx
  0004c	74 10		 je	 SHORT $L950

; 66   :             pDecode_mblk->iSCTargetRate=SC_RATE_3K;

  0004e	8b 55 fc	 mov	 edx, DWORD PTR _pDecode_mblk$[ebp]
  00051	c7 42 20 01 00
	00 00		 mov	 DWORD PTR [edx+32], 1

; 67   :             ret = 0;  /* ok */

  00058	66 c7 45 f8 00
	00		 mov	 WORD PTR _ret$[ebp], 0
$L950:

; 68   :          }
; 69   :          break;

  0005e	eb 1d		 jmp	 SHORT $L946
$L951:

; 70   :       case SC_RATE_6K:
; 71   :          if(pDecode_mblk->iSCRateValid&SC_RATE_6K) {

  00060	8b 45 fc	 mov	 eax, DWORD PTR _pDecode_mblk$[ebp]
  00063	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00066	83 e1 02	 and	 ecx, 2
  00069	85 c9		 test	 ecx, ecx
  0006b	74 10		 je	 SHORT $L946

; 72   :             pDecode_mblk->iSCTargetRate=SC_RATE_6K;

  0006d	8b 55 fc	 mov	 edx, DWORD PTR _pDecode_mblk$[ebp]
  00070	c7 42 20 02 00
	00 00		 mov	 DWORD PTR [edx+32], 2

; 73   :             ret = 0;  /* ok */

  00077	66 c7 45 f8 00
	00		 mov	 WORD PTR _ret$[ebp], 0
$L946:

; 74   :          }
; 75   :    }
; 76   : 
; 77   :    return ret;

  0007d	66 8b 45 f8	 mov	 ax, WORD PTR _ret$[ebp]

; 78   : }

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
_voxSetDecodeSC@8 ENDP
_TEXT	ENDS
PUBLIC	_voxGetDecodeRateSC@4
; Function compile flags: /Odt
;	COMDAT _voxGetDecodeRateSC@4
_TEXT	SEGMENT
_pMemBlkD$ = 8
_voxGetDecodeRateSC@4 PROC NEAR				; COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 98   :    assert(pMemBlkD != NULL);

  00003	83 7d 08 00	 cmp	 DWORD PTR _pMemBlkD$[ebp], 0
  00007	75 14		 jne	 SHORT $L1041
  00009	6a 62		 push	 98			; 00000062H
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@
  00015	e8 00 00 00 00	 call	 __assert
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1041:

; 99   :    return(((DEC_MEM_BLK*)pMemBlkD)->iSCTargetRate);

  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _pMemBlkD$[ebp]
  00020	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]

; 100  : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
_voxGetDecodeRateSC@4 ENDP
_TEXT	ENDS
PUBLIC	_voxGetDecodeInitRateSC@4
; Function compile flags: /Odt
;	COMDAT _voxGetDecodeInitRateSC@4
_TEXT	SEGMENT
_pMemBlkD$ = 8
_voxGetDecodeInitRateSC@4 PROC NEAR			; COMDAT

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 119  :    assert(pMemBlkD != NULL);

  00003	83 7d 08 00	 cmp	 DWORD PTR _pMemBlkD$[ebp], 0
  00007	75 14		 jne	 SHORT $L1045
  00009	6a 77		 push	 119			; 00000077H
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@
  00015	e8 00 00 00 00	 call	 __assert
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1045:

; 120  :    return(((DEC_MEM_BLK*)pMemBlkD)->iSCRateValid);

  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _pMemBlkD$[ebp]
  00020	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 121  : }  

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
_voxGetDecodeInitRateSC@4 ENDP
_TEXT	ENDS
PUBLIC	_voxGetDecReqDataFlagSC@4
PUBLIC	??_C@_0FE@DDLDBNCM@?$CI?$CI?$CIDEC_MEM_BLK?$CK?$CJpMemBlkD?$CJ?9?$DOiNewF@ ; `string'
;	COMDAT ??_C@_0FE@DDLDBNCM@?$CI?$CI?$CIDEC_MEM_BLK?$CK?$CJpMemBlkD?$CJ?9?$DOiNewF@
CONST	SEGMENT
??_C@_0FE@DDLDBNCM@?$CI?$CI?$CIDEC_MEM_BLK?$CK?$CJpMemBlkD?$CJ?9?$DOiNewF@ DB '('
	DB	'((DEC_MEM_BLK*)pMemBlkD)->iNewFrame==1)|| (((DEC_MEM_BLK*)pMe'
	DB	'mBlkD)->iNewFrame==0)', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _voxGetDecReqDataFlagSC@4
_TEXT	SEGMENT
_pMemBlkD$ = 8
_voxGetDecReqDataFlagSC@4 PROC NEAR			; COMDAT

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 141  :    assert(pMemBlkD != NULL);

  00003	83 7d 08 00	 cmp	 DWORD PTR _pMemBlkD$[ebp], 0
  00007	75 17		 jne	 SHORT $L1049
  00009	68 8d 00 00 00	 push	 141			; 0000008dH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@
  00018	e8 00 00 00 00	 call	 __assert
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1049:

; 142  : 
; 143  :    assert((((DEC_MEM_BLK*)pMemBlkD)->iNewFrame==1)||
; 144  :           (((DEC_MEM_BLK*)pMemBlkD)->iNewFrame==0));

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pMemBlkD$[ebp]
  00023	83 79 64 01	 cmp	 DWORD PTR [ecx+100], 1
  00027	74 20		 je	 SHORT $L1050
  00029	8b 55 08	 mov	 edx, DWORD PTR _pMemBlkD$[ebp]
  0002c	83 7a 64 00	 cmp	 DWORD PTR [edx+100], 0
  00030	74 17		 je	 SHORT $L1050
  00032	68 90 00 00 00	 push	 144			; 00000090H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FE@DDLDBNCM@?$CI?$CI?$CIDEC_MEM_BLK?$CK?$CJpMemBlkD?$CJ?9?$DOiNewF@
  00041	e8 00 00 00 00	 call	 __assert
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1050:

; 145  : 
; 146  :    return (unsigned char)(((DEC_MEM_BLK*)pMemBlkD)->iNewFrame);

  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pMemBlkD$[ebp]
  0004c	8a 41 64	 mov	 al, BYTE PTR [ecx+100]

; 147  : }  

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
_voxGetDecReqDataFlagSC@4 ENDP
_TEXT	ENDS
PUBLIC	_voxSetFrameSkippedSC@8
; Function compile flags: /Odt
;	COMDAT _voxSetFrameSkippedSC@8
_TEXT	SEGMENT
_pMemBlkD$ = 8
_iFrameSkipped$ = 12
_voxSetFrameSkippedSC@8 PROC NEAR			; COMDAT

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 167  :   assert(pMemBlkD != NULL);

  00003	83 7d 08 00	 cmp	 DWORD PTR _pMemBlkD$[ebp], 0
  00007	75 17		 jne	 SHORT $L1054
  00009	68 a7 00 00 00	 push	 167			; 000000a7H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@
  00018	e8 00 00 00 00	 call	 __assert
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1054:

; 168  :   ((DEC_MEM_BLK*)pMemBlkD)->iFramesSkipped = iFrameSkipped;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pMemBlkD$[ebp]
  00023	8b 55 0c	 mov	 edx, DWORD PTR _iFrameSkipped$[ebp]
  00026	89 51 70	 mov	 DWORD PTR [ecx+112], edx

; 169  : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
_voxSetFrameSkippedSC@8 ENDP
_TEXT	ENDS
PUBLIC	_voxSetRepeatFrameSC@8
; Function compile flags: /Odt
;	COMDAT _voxSetRepeatFrameSC@8
_TEXT	SEGMENT
_pMemBlkD$ = 8
_iRepeatFrameFlag$ = 12
_voxSetRepeatFrameSC@8 PROC NEAR			; COMDAT

; 187  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 188  :   assert(pMemBlkD != NULL);

  00003	83 7d 08 00	 cmp	 DWORD PTR _pMemBlkD$[ebp], 0
  00007	75 17		 jne	 SHORT $L1058
  00009	68 bc 00 00 00	 push	 188			; 000000bcH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@
  00018	e8 00 00 00 00	 call	 __assert
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1058:

; 189  :   ((DEC_MEM_BLK*)pMemBlkD)->iRepeatFrameFlag = iRepeatFrameFlag;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pMemBlkD$[ebp]
  00023	8b 55 0c	 mov	 edx, DWORD PTR _iRepeatFrameFlag$[ebp]
  00026	89 51 78	 mov	 DWORD PTR [ecx+120], edx

; 190  : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
_voxSetRepeatFrameSC@8 ENDP
_TEXT	ENDS
PUBLIC	_voxSetWarpFactorSC@8
EXTRN	__fltused:NEAR
; Function compile flags: /Odt
;	COMDAT _voxSetWarpFactorSC@8
_TEXT	SEGMENT
_pMemBlkD$ = 8
_fWarpFactor$ = 12
_voxSetWarpFactorSC@8 PROC NEAR				; COMDAT

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 210  :   assert(pMemBlkD != NULL);

  00003	83 7d 08 00	 cmp	 DWORD PTR _pMemBlkD$[ebp], 0
  00007	75 17		 jne	 SHORT $L1062
  00009	68 d2 00 00 00	 push	 210			; 000000d2H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@
  00018	e8 00 00 00 00	 call	 __assert
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1062:

; 211  :   ((DEC_MEM_BLK*)pMemBlkD)->fWarpedLengthFactor = fWarpFactor;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pMemBlkD$[ebp]
  00023	8b 55 0c	 mov	 edx, DWORD PTR _fWarpFactor$[ebp]
  00026	89 51 5c	 mov	 DWORD PTR [ecx+92], edx

; 212  : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
_voxSetWarpFactorSC@8 ENDP
_TEXT	ENDS
PUBLIC	_voxGetWarpFactorSC@4
; Function compile flags: /Odt
;	COMDAT _voxGetWarpFactorSC@4
_TEXT	SEGMENT
_pMemBlkD$ = 8
_voxGetWarpFactorSC@4 PROC NEAR				; COMDAT

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 231  :   assert(pMemBlkD != NULL);

  00003	83 7d 08 00	 cmp	 DWORD PTR _pMemBlkD$[ebp], 0
  00007	75 17		 jne	 SHORT $L1067
  00009	68 e7 00 00 00	 push	 231			; 000000e7H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@
  00018	e8 00 00 00 00	 call	 __assert
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1067:

; 232  :   return ((DEC_MEM_BLK*)pMemBlkD)->fWarpedLengthFactor;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pMemBlkD$[ebp]
  00023	d9 41 5c	 fld	 DWORD PTR [ecx+92]

; 233  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
_voxGetWarpFactorSC@4 ENDP
_TEXT	ENDS
PUBLIC	_VoxGetDecPrevPvSC@4
; Function compile flags: /Odt
;	COMDAT _VoxGetDecPrevPvSC@4
_TEXT	SEGMENT
_pMemBlkD$ = 8
_VoxGetDecPrevPvSC@4 PROC NEAR				; COMDAT

; 251  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 252  :   assert(pMemBlkD != NULL);

  00003	83 7d 08 00	 cmp	 DWORD PTR _pMemBlkD$[ebp], 0
  00007	75 17		 jne	 SHORT $L1071
  00009	68 fc 00 00 00	 push	 252			; 000000fcH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@
  00018	e8 00 00 00 00	 call	 __assert
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1071:

; 253  :   return ((DEC_MEM_BLK*)pMemBlkD)->PrevSubParam.Pv;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pMemBlkD$[ebp]
  00023	d9 41 38	 fld	 DWORD PTR [ecx+56]

; 254  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
_VoxGetDecPrevPvSC@4 ENDP
_TEXT	ENDS
PUBLIC	_VoxGetDecPrevPitchSC@4
; Function compile flags: /Odt
;	COMDAT _VoxGetDecPrevPitchSC@4
_TEXT	SEGMENT
_pMemBlkD$ = 8
_VoxGetDecPrevPitchSC@4 PROC NEAR			; COMDAT

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 272  :   assert(pMemBlkD != NULL);

  00003	83 7d 08 00	 cmp	 DWORD PTR _pMemBlkD$[ebp], 0
  00007	75 17		 jne	 SHORT $L1075
  00009	68 10 01 00 00	 push	 272			; 00000110H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@BIHMJPIK@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@GMEKIPJN@pMemBlkD?5?$CB?$DN?5NULL?$AA@
  00018	e8 00 00 00 00	 call	 __assert
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1075:

; 273  :   return ((DEC_MEM_BLK*)pMemBlkD)->PrevSubParam.Pitch;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pMemBlkD$[ebp]
  00023	d9 41 34	 fld	 DWORD PTR [ecx+52]

; 274  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
_VoxGetDecPrevPitchSC@4 ENDP
_TEXT	ENDS
END
