; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\coder.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DO@HJOEBLLJ@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@CDNGNHBD@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvEncM@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@CINLGGLJ@pvParamMblk?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CP@EIFPOJMD@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvPara@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@POKLDHON@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvDecM@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxQuantSC3@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxQuantSC6@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxUnQuantSC3@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxUnQuantSC6@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxQuantSC3@12
PUBLIC	??_C@_0DO@HJOEBLLJ@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CN@CDNGNHBD@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvEncM@ ; `string'
PUBLIC	??_C@_0BE@CINLGGLJ@pvParamMblk?5?$CB?$DN?5NULL?$AA@ ; `string'
EXTRN	__assert:NEAR
EXTRN	_VoxQuanPitchSC3@4:NEAR
EXTRN	_VoxUnQuanPitchSC3@4:NEAR
EXTRN	_UnQuanMidPitchSC3@16:NEAR
EXTRN	_QuanGainSC3@4:NEAR
EXTRN	_QuanPvSC3@12:NEAR
EXTRN	_UnQuanPvSC3@16:NEAR
EXTRN	_VoxMSVQEncPred@16:NEAR
EXTRN	__fltused:NEAR
EXTRN	_memcpy:NEAR
;	COMDAT ??_C@_0DO@HJOEBLLJ@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\coder.c
CONST	SEGMENT
??_C@_0DO@HJOEBLLJ@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\coder.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CDNGNHBD@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvEncM@
CONST	SEGMENT
??_C@_0CN@CDNGNHBD@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvEncM@ DB '('
	DB	'piQuanIndex != NULL) && (pvEncMblk != NULL)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CINLGGLJ@pvParamMblk?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BE@CINLGGLJ@pvParamMblk?5?$CB?$DN?5NULL?$AA@ DB 'pvParamMblk != NU'
	DB	'LL', 00H					; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxQuantSC3@12
_TEXT	SEGMENT
_pParamMblk$ = -16
_pSubParam_End$ = -12
_pSubParam_Mid$ = -8
_pEncMblk$ = -4
_piQuanIndex$ = 8
_pvEncMblk$ = 12
_pvParamMblk$ = 16
_VoxQuantSC3@12 PROC NEAR				; COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 91   :    ENC_MEM_BLK *pEncMblk = (ENC_MEM_BLK *)pvEncMblk;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _pvEncMblk$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _pEncMblk$[ebp], eax

; 92   :    PARAM_SC *pParamMblk   = (PARAM_SC *)pvParamMblk;

  0000c	8b 4d 10	 mov	 ecx, DWORD PTR _pvParamMblk$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR _pParamMblk$[ebp], ecx

; 93   :    SUBFRAME_PARAM_SC *pSubParam_Mid, *pSubParam_End;
; 94   : 
; 95   : 
; 96   :    assert((piQuanIndex != NULL) && (pvEncMblk != NULL));

  00012	83 7d 08 00	 cmp	 DWORD PTR _piQuanIndex$[ebp], 0
  00016	74 06		 je	 SHORT $L1519
  00018	83 7d 0c 00	 cmp	 DWORD PTR _pvEncMblk$[ebp], 0
  0001c	75 14		 jne	 SHORT $L1520
$L1519:
  0001e	6a 60		 push	 96			; 00000060H
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@HJOEBLLJ@c?3?2xbox?2private?2windows?2directx?2@
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@CDNGNHBD@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvEncM@
  0002a	e8 00 00 00 00	 call	 __assert
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1520:

; 97   :    assert(pvParamMblk != NULL);

  00032	83 7d 10 00	 cmp	 DWORD PTR _pvParamMblk$[ebp], 0
  00036	75 14		 jne	 SHORT $L1521
  00038	6a 61		 push	 97			; 00000061H
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@HJOEBLLJ@c?3?2xbox?2private?2windows?2directx?2@
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@CINLGGLJ@pvParamMblk?5?$CB?$DN?5NULL?$AA@
  00044	e8 00 00 00 00	 call	 __assert
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1521:

; 98   : 
; 99   :    pSubParam_Mid = &(pParamMblk->SubParam[PARAM_MIDFRAME]); 

  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _pParamMblk$[ebp]
  0004f	89 4d f8	 mov	 DWORD PTR _pSubParam_Mid$[ebp], ecx

; 100  :    pSubParam_End = &(pParamMblk->SubParam[PARAM_ENDFRAME]); 

  00052	8b 55 f0	 mov	 edx, DWORD PTR _pParamMblk$[ebp]
  00055	83 c2 28	 add	 edx, 40			; 00000028H
  00058	89 55 f4	 mov	 DWORD PTR _pSubParam_End$[ebp], edx

; 101  : 
; 102  :    /*--------------------------------------------------------
; 103  :      Quantize VOICING and Get the quantized voicing.
; 104  :      Quantize voicing vector on outer frame boundary
; 105  :      -----------------------------------------------------*/
; 106  :    piQuanIndex[INDEX_PV] = QuanPvSC3(pEncMblk->Pv_1, pSubParam_Mid->Pv,
; 107  :                                      pSubParam_End->Pv);

  0005b	8b 45 f4	 mov	 eax, DWORD PTR _pSubParam_End$[ebp]
  0005e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00061	51		 push	 ecx
  00062	8b 55 f8	 mov	 edx, DWORD PTR _pSubParam_Mid$[ebp]
  00065	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00068	50		 push	 eax
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _pEncMblk$[ebp]
  0006c	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0006f	52		 push	 edx
  00070	e8 00 00 00 00	 call	 _QuanPvSC3@12
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _piQuanIndex$[ebp]
  00078	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 108  :    UnQuanPvSC3(piQuanIndex[INDEX_PV], pEncMblk->Pv_1,
; 109  :                &(pSubParam_Mid->Pv), &(pSubParam_End->Pv));

  0007b	8b 55 f4	 mov	 edx, DWORD PTR _pSubParam_End$[ebp]
  0007e	83 c2 04	 add	 edx, 4
  00081	52		 push	 edx
  00082	8b 45 f8	 mov	 eax, DWORD PTR _pSubParam_Mid$[ebp]
  00085	83 c0 04	 add	 eax, 4
  00088	50		 push	 eax
  00089	8b 4d fc	 mov	 ecx, DWORD PTR _pEncMblk$[ebp]
  0008c	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0008f	52		 push	 edx
  00090	8b 45 08	 mov	 eax, DWORD PTR _piQuanIndex$[ebp]
  00093	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 _UnQuanPvSC3@16

; 110  : 
; 111  :  
; 112  :    /*--------------------------------------------------------
; 113  :      Quantize PITCH and Get the quantized pitch
; 114  :      Quantize pitch on outer frame boundary
; 115  :      -----------------------------------------------------*/
; 116  :    piQuanIndex[INDEX_PITCH] = VoxQuanPitchSC3(pSubParam_End->Pitch);

  0009c	8b 55 f4	 mov	 edx, DWORD PTR _pSubParam_End$[ebp]
  0009f	8b 02		 mov	 eax, DWORD PTR [edx]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _VoxQuanPitchSC3@4
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _piQuanIndex$[ebp]
  000aa	89 01		 mov	 DWORD PTR [ecx], eax

; 117  :    pSubParam_End->Pitch = VoxUnQuanPitchSC3(piQuanIndex[INDEX_PITCH]);

  000ac	8b 55 08	 mov	 edx, DWORD PTR _piQuanIndex$[ebp]
  000af	8b 02		 mov	 eax, DWORD PTR [edx]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 _VoxUnQuanPitchSC3@4
  000b7	8b 4d f4	 mov	 ecx, DWORD PTR _pSubParam_End$[ebp]
  000ba	d9 19		 fstp	 DWORD PTR [ecx]

; 118  : 
; 119  :   
; 120  :    /*------------------------------------------------------------------------
; 121  :      Get the quantized the middle frame pitch:
; 122  :      No frame-fill bits: Use voicing-dependent, 20ms  pitch interpolation
; 123  :      -------------------------------------------------------------------------*/
; 124  :    pSubParam_Mid->Pitch = UnQuanMidPitchSC3(pEncMblk->Pitch_1,
; 125  :                                             pSubParam_End->Pitch,
; 126  :                                             pEncMblk->Pv_1,
; 127  :                                             pSubParam_End->Pv);

  000bc	8b 55 f4	 mov	 edx, DWORD PTR _pSubParam_End$[ebp]
  000bf	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c2	50		 push	 eax
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR _pEncMblk$[ebp]
  000c6	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000c9	52		 push	 edx
  000ca	8b 45 f4	 mov	 eax, DWORD PTR _pSubParam_End$[ebp]
  000cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cf	51		 push	 ecx
  000d0	8b 55 fc	 mov	 edx, DWORD PTR _pEncMblk$[ebp]
  000d3	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _UnQuanMidPitchSC3@16
  000dc	8b 4d f8	 mov	 ecx, DWORD PTR _pSubParam_Mid$[ebp]
  000df	d9 19		 fstp	 DWORD PTR [ecx]

; 128  :    
; 129  :    /*--------------------------------------------------------
; 130  :      Quantize GAIN
; 131  :      Quantize gain on outer frame boundary
; 132  :      -----------------------------------------------------*/
; 133  :    piQuanIndex[INDEX_GAIN] = QuanGainSC3(pParamMblk->fLog2Gain);

  000e1	8b 55 f0	 mov	 edx, DWORD PTR _pParamMblk$[ebp]
  000e4	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 _QuanGainSC3@4
  000ed	8b 4d 08	 mov	 ecx, DWORD PTR _piQuanIndex$[ebp]
  000f0	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 134  :   
; 135  :    
; 136  :    /*--------------------------------------------------------
; 137  :      Preserve the unquantized ASKs.
; 138  :      --------------------------------------------------------*/
; 139  :    memcpy(pParamMblk->pfASKunquant, pParamMblk->pfASK, LPC_ORDER*sizeof(float));

  000f3	6a 30		 push	 48			; 00000030H
  000f5	8b 55 f0	 mov	 edx, DWORD PTR _pParamMblk$[ebp]
  000f8	83 c2 54	 add	 edx, 84			; 00000054H
  000fb	52		 push	 edx
  000fc	8b 45 f0	 mov	 eax, DWORD PTR _pParamMblk$[ebp]
  000ff	05 84 00 00 00	 add	 eax, 132		; 00000084H
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _memcpy
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 140  : 
; 141  :    /*-----------------------------------------------------
; 142  :      Quantize ASKs on outer frame boundary and Get the
; 143  :      quantized ASKs.
; 144  :      -----------------------------------------------------*/
; 145  :    VoxMSVQEncPred( STACK_S pParamMblk->pfASK,
; 146  :                    &(piQuanIndex[INDEX_ASK]),
; 147  :                    LPC_ORDER,
; 148  :                    pSubParam_End->Pv);

  0010d	8b 4d f4	 mov	 ecx, DWORD PTR _pSubParam_End$[ebp]
  00110	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00113	52		 push	 edx
  00114	6a 0c		 push	 12			; 0000000cH
  00116	8b 45 08	 mov	 eax, DWORD PTR _piQuanIndex$[ebp]
  00119	83 c0 0c	 add	 eax, 12			; 0000000cH
  0011c	50		 push	 eax
  0011d	8b 4d f0	 mov	 ecx, DWORD PTR _pParamMblk$[ebp]
  00120	83 c1 54	 add	 ecx, 84			; 00000054H
  00123	51		 push	 ecx
  00124	e8 00 00 00 00	 call	 _VoxMSVQEncPred@16

; 149  : 
; 150  :    /*-----------------------------------------------------
; 151  :       Update the memory 
; 152  :      ----------------------------------------------------*/
; 153  :     pEncMblk->Pv_1 = pSubParam_End->Pv;

  00129	8b 55 fc	 mov	 edx, DWORD PTR _pEncMblk$[ebp]
  0012c	8b 45 f4	 mov	 eax, DWORD PTR _pSubParam_End$[ebp]
  0012f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00132	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 154  :     pEncMblk->Pitch_1 = pSubParam_End->Pitch;

  00135	8b 55 fc	 mov	 edx, DWORD PTR _pEncMblk$[ebp]
  00138	8b 45 f4	 mov	 eax, DWORD PTR _pSubParam_End$[ebp]
  0013b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013d	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 155  : }

  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c2 0c 00	 ret	 12			; 0000000cH
_VoxQuantSC3@12 ENDP
_TEXT	ENDS
PUBLIC	_VoxQuantSC6@8
PUBLIC	??_C@_0CP@EIFPOJMD@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvPara@ ; `string'
EXTRN	_VoxSVQEncPhase@12:NEAR
EXTRN	_VoxEncPhasePrediction@16:NEAR
EXTRN	_VoxASKResiEnc@12:NEAR
;	COMDAT ??_C@_0CP@EIFPOJMD@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvPara@
CONST	SEGMENT
??_C@_0CP@EIFPOJMD@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvPara@ DB '('
	DB	'piQuanIndex != NULL) && (pvParamMblk != NULL)', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxQuantSC6@8
_TEXT	SEGMENT
_pParamMblk$ = -12
_pSubParam_End$ = -8
_pSubParam_Mid$ = -4
_piQuanIndex$ = 8
_pvParamMblk$ = 12
_VoxQuantSC6@8 PROC NEAR				; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 189  :    PARAM_SC    *pParamMblk   = (PARAM_SC *)pvParamMblk;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _pvParamMblk$[ebp]
  00009	89 45 f4	 mov	 DWORD PTR _pParamMblk$[ebp], eax

; 190  :    SUBFRAME_PARAM_SC *pSubParam_Mid, *pSubParam_End;
; 191  : 
; 192  :    assert((piQuanIndex != NULL) && (pvParamMblk != NULL));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _piQuanIndex$[ebp], 0
  00010	74 06		 je	 SHORT $L1526
  00012	83 7d 0c 00	 cmp	 DWORD PTR _pvParamMblk$[ebp], 0
  00016	75 17		 jne	 SHORT $L1527
$L1526:
  00018	68 c0 00 00 00	 push	 192			; 000000c0H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@HJOEBLLJ@c?3?2xbox?2private?2windows?2directx?2@
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@EIFPOJMD@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvPara@
  00027	e8 00 00 00 00	 call	 __assert
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1527:

; 193  : 
; 194  : 
; 195  :    pSubParam_Mid = &(pParamMblk->SubParam[PARAM_MIDFRAME]); 

  0002f	8b 55 f4	 mov	 edx, DWORD PTR _pParamMblk$[ebp]
  00032	89 55 fc	 mov	 DWORD PTR _pSubParam_Mid$[ebp], edx

; 196  :    pSubParam_End = &(pParamMblk->SubParam[PARAM_ENDFRAME]); 

  00035	8b 45 f4	 mov	 eax, DWORD PTR _pParamMblk$[ebp]
  00038	83 c0 28	 add	 eax, 40			; 00000028H
  0003b	89 45 f8	 mov	 DWORD PTR _pSubParam_End$[ebp], eax

; 197  : 
; 198  :    /*--------------------------------------------------------
; 199  :      Quantize Phase
; 200  :      --------------------------------------------------------*/
; 201  :    /*-----------------------------------------------------
; 202  :      Compute the predicted phase based on the quantized pitch
; 203  :      -----------------------------------------------------*/
; 204  :    VoxEncPhasePrediction(pSubParam_Mid->Pitch, pSubParam_End->Pitch,
; 205  :                          pSubParam_Mid->pfVEVphase, 
; 206  :                          pSubParam_End->pfVEVphase);

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _pSubParam_End$[ebp]
  00041	83 c1 08	 add	 ecx, 8
  00044	51		 push	 ecx
  00045	8b 55 fc	 mov	 edx, DWORD PTR _pSubParam_Mid$[ebp]
  00048	83 c2 08	 add	 edx, 8
  0004b	52		 push	 edx
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _pSubParam_End$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	51		 push	 ecx
  00052	8b 55 fc	 mov	 edx, DWORD PTR _pSubParam_Mid$[ebp]
  00055	8b 02		 mov	 eax, DWORD PTR [edx]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _VoxEncPhasePrediction@16

; 207  :   
; 208  :    /*-----------------------------------------------------
; 209  :      Vector quantize mid-frame and outer frame Phases
; 210  :      -----------------------------------------------------*/
; 211  :    VoxSVQEncPhase(pSubParam_Mid->pfVEVphase, pSubParam_End->pfVEVphase, 
; 212  :                   &(piQuanIndex[INDEX_PHASE]));

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _piQuanIndex$[ebp]
  00060	83 c1 08	 add	 ecx, 8
  00063	51		 push	 ecx
  00064	8b 55 f8	 mov	 edx, DWORD PTR _pSubParam_End$[ebp]
  00067	83 c2 08	 add	 edx, 8
  0006a	52		 push	 edx
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _pSubParam_Mid$[ebp]
  0006e	83 c0 08	 add	 eax, 8
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _VoxSVQEncPhase@12

; 213  :   
; 214  :    /*--------------------------------------------------------
; 215  :      Quantize the residue ASKs
; 216  :      --------------------------------------------------------*/
; 217  :    VoxASKResiEnc(pParamMblk->pfASK, pParamMblk->pfASKunquant, 
; 218  :                  &(piQuanIndex[INDEX_ASKRESI]));

  00077	8b 4d 08	 mov	 ecx, DWORD PTR _piQuanIndex$[ebp]
  0007a	51		 push	 ecx
  0007b	8b 55 f4	 mov	 edx, DWORD PTR _pParamMblk$[ebp]
  0007e	81 c2 84 00 00
	00		 add	 edx, 132		; 00000084H
  00084	52		 push	 edx
  00085	8b 45 f4	 mov	 eax, DWORD PTR _pParamMblk$[ebp]
  00088	83 c0 54	 add	 eax, 84			; 00000054H
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _VoxASKResiEnc@12

; 219  : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
_VoxQuantSC6@8 ENDP
_TEXT	ENDS
PUBLIC	_VoxUnQuantSC3@12
PUBLIC	??_C@_0CN@POKLDHON@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvDecM@ ; `string'
EXTRN	_UnQuanGainSC3@4:NEAR
EXTRN	_VoxMSVQDecPred@16:NEAR
EXTRN	_VoxGetDecPrevPvSC@4:NEAR
EXTRN	_VoxGetDecPrevPitchSC@4:NEAR
;	COMDAT ??_C@_0CN@POKLDHON@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvDecM@
CONST	SEGMENT
??_C@_0CN@POKLDHON@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvDecM@ DB '('
	DB	'piQuanIndex != NULL) && (pvDecMblk != NULL)', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxUnQuantSC3@12
_TEXT	SEGMENT
_Pv_1$ = -20
_pParamMblk$ = -16
_Pitch_1$ = -12
_pSubParam_End$ = -8
_pSubParam_Mid$ = -4
_piQuanIndex$ = 8
_pvDecMblk$ = 12
_pvParamMblk$ = 16
_VoxUnQuantSC3@12 PROC NEAR				; COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 255  :    PARAM_SC *pParamMblk   = (PARAM_SC *)pvParamMblk;

  00006	8b 45 10	 mov	 eax, DWORD PTR _pvParamMblk$[ebp]
  00009	89 45 f0	 mov	 DWORD PTR _pParamMblk$[ebp], eax

; 256  :    float Pv_1;
; 257  :    float Pitch_1;
; 258  :    SUBFRAME_PARAM_SC *pSubParam_Mid, *pSubParam_End;
; 259  : 
; 260  :    assert((piQuanIndex != NULL) && (pvDecMblk != NULL));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _piQuanIndex$[ebp], 0
  00010	74 06		 je	 SHORT $L1531
  00012	83 7d 0c 00	 cmp	 DWORD PTR _pvDecMblk$[ebp], 0
  00016	75 17		 jne	 SHORT $L1532
$L1531:
  00018	68 04 01 00 00	 push	 260			; 00000104H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@HJOEBLLJ@c?3?2xbox?2private?2windows?2directx?2@
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@POKLDHON@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvDecM@
  00027	e8 00 00 00 00	 call	 __assert
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1532:

; 261  :    assert(pvParamMblk != NULL);

  0002f	83 7d 10 00	 cmp	 DWORD PTR _pvParamMblk$[ebp], 0
  00033	75 17		 jne	 SHORT $L1533
  00035	68 05 01 00 00	 push	 261			; 00000105H
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@HJOEBLLJ@c?3?2xbox?2private?2windows?2directx?2@
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@CINLGGLJ@pvParamMblk?5?$CB?$DN?5NULL?$AA@
  00044	e8 00 00 00 00	 call	 __assert
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1533:

; 262  : 
; 263  :    pSubParam_Mid = &(pParamMblk->SubParam[PARAM_MIDFRAME]); 

  0004c	8b 45 f0	 mov	 eax, DWORD PTR _pParamMblk$[ebp]
  0004f	89 45 fc	 mov	 DWORD PTR _pSubParam_Mid$[ebp], eax

; 264  :    pSubParam_End = &(pParamMblk->SubParam[PARAM_ENDFRAME]); 

  00052	8b 4d f0	 mov	 ecx, DWORD PTR _pParamMblk$[ebp]
  00055	83 c1 28	 add	 ecx, 40			; 00000028H
  00058	89 4d f8	 mov	 DWORD PTR _pSubParam_End$[ebp], ecx

; 265  : 
; 266  :    Pv_1    = VoxGetDecPrevPvSC(pvDecMblk);

  0005b	8b 55 0c	 mov	 edx, DWORD PTR _pvDecMblk$[ebp]
  0005e	52		 push	 edx
  0005f	e8 00 00 00 00	 call	 _VoxGetDecPrevPvSC@4
  00064	d9 5d ec	 fstp	 DWORD PTR _Pv_1$[ebp]

; 267  :    Pitch_1 = VoxGetDecPrevPitchSC(pvDecMblk);

  00067	8b 45 0c	 mov	 eax, DWORD PTR _pvDecMblk$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _VoxGetDecPrevPitchSC@4
  00070	d9 5d f4	 fstp	 DWORD PTR _Pitch_1$[ebp]

; 268  : 
; 269  :    /*--------------------------------------------------------
; 270  :      UnQuantize VOICING
; 271  :      Since Pv was used to quantize mid-frame pitch,
; 272  :      it must be unquantized first
; 273  :      --------------------------------------------------------*/
; 274  :    /*-------------------------------------------------------
; 275  :    Unquantize voicing vector of two subframes 
; 276  :    -------------------------------------------------------*/
; 277  :    UnQuanPvSC3(piQuanIndex[INDEX_PV], Pv_1,
; 278  :                &(pSubParam_Mid->Pv), &(pSubParam_End->Pv));

  00073	8b 4d f8	 mov	 ecx, DWORD PTR _pSubParam_End$[ebp]
  00076	83 c1 04	 add	 ecx, 4
  00079	51		 push	 ecx
  0007a	8b 55 fc	 mov	 edx, DWORD PTR _pSubParam_Mid$[ebp]
  0007d	83 c2 04	 add	 edx, 4
  00080	52		 push	 edx
  00081	8b 45 ec	 mov	 eax, DWORD PTR _Pv_1$[ebp]
  00084	50		 push	 eax
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _piQuanIndex$[ebp]
  00088	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0008b	52		 push	 edx
  0008c	e8 00 00 00 00	 call	 _UnQuanPvSC3@16

; 279  : 
; 280  :    /*--------------------------------------------------------
; 281  :      UnQuantize PITCH
; 282  :      --------------------------------------------------------*/
; 283  :    /*--------------------------------------------------------
; 284  :      UnQuantize pitch on 20ms outer frame boundary
; 285  :      --------------------------------------------------------*/
; 286  :    pSubParam_End->Pitch = VoxUnQuanPitchSC3(piQuanIndex[INDEX_PITCH]);

  00091	8b 45 08	 mov	 eax, DWORD PTR _piQuanIndex$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 _VoxUnQuanPitchSC3@4
  0009c	8b 55 f8	 mov	 edx, DWORD PTR _pSubParam_End$[ebp]
  0009f	d9 1a		 fstp	 DWORD PTR [edx]

; 287  : 
; 288  :    /*--------------------------------------------------------
; 289  :      No frame-fill bits: Use voicing-dependent, 20ms pitch interpolation
; 290  :      --------------------------------------------------------*/
; 291  :    pSubParam_Mid->Pitch = UnQuanMidPitchSC3(Pitch_1,
; 292  :                                             pSubParam_End->Pitch,
; 293  :                                             Pv_1,
; 294  :                                             pSubParam_End->Pv);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _pSubParam_End$[ebp]
  000a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a7	51		 push	 ecx
  000a8	8b 55 ec	 mov	 edx, DWORD PTR _Pv_1$[ebp]
  000ab	52		 push	 edx
  000ac	8b 45 f8	 mov	 eax, DWORD PTR _pSubParam_End$[ebp]
  000af	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b1	51		 push	 ecx
  000b2	8b 55 f4	 mov	 edx, DWORD PTR _Pitch_1$[ebp]
  000b5	52		 push	 edx
  000b6	e8 00 00 00 00	 call	 _UnQuanMidPitchSC3@16
  000bb	8b 45 fc	 mov	 eax, DWORD PTR _pSubParam_Mid$[ebp]
  000be	d9 18		 fstp	 DWORD PTR [eax]

; 295  : 
; 296  :    /*--------------------------------------------------------
; 297  :      UnQuantize GAIN
; 298  :      --------------------------------------------------------*/
; 299  :    /*--------------------------------------------------------
; 300  :      UnQuantize gain on outer frame boundary
; 301  :      --------------------------------------------------------*/
; 302  :    pParamMblk->fLog2Gain = UnQuanGainSC3(piQuanIndex[INDEX_GAIN]);

  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _piQuanIndex$[ebp]
  000c3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 _UnQuanGainSC3@4
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _pParamMblk$[ebp]
  000cf	d9 58 50	 fstp	 DWORD PTR [eax+80]

; 303  : 
; 304  : 
; 305  :    /*--------------------------------------------------------
; 306  :      UnQuantize ASK
; 307  :      --------------------------------------------------------*/
; 308  : 
; 309  :    /*--------------------------------------------------------
; 310  :      UnQuantize ASKs on outer frame boundary
; 311  :      --------------------------------------------------------*/
; 312  :    VoxMSVQDecPred( STACK_S &(piQuanIndex[INDEX_ASK]), pParamMblk->pfASK,
; 313  :                    LPC_ORDER, pSubParam_End->Pv);

  000d2	8b 4d f8	 mov	 ecx, DWORD PTR _pSubParam_End$[ebp]
  000d5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d8	52		 push	 edx
  000d9	6a 0c		 push	 12			; 0000000cH
  000db	8b 45 f0	 mov	 eax, DWORD PTR _pParamMblk$[ebp]
  000de	83 c0 54	 add	 eax, 84			; 00000054H
  000e1	50		 push	 eax
  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _piQuanIndex$[ebp]
  000e5	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 _VoxMSVQDecPred@16

; 314  : }

  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 0c 00	 ret	 12			; 0000000cH
_VoxUnQuantSC3@12 ENDP
_TEXT	ENDS
PUBLIC	_VoxUnQuantSC6@8
EXTRN	_VoxSVQDecPhase@12:NEAR
EXTRN	_VoxDecPhasePrediction@16:NEAR
EXTRN	_VoxASKResiDec@8:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxUnQuantSC6@8
_TEXT	SEGMENT
_pParamMblk$ = -12
_pSubParam_End$ = -8
_pSubParam_Mid$ = -4
_piQuanIndex$ = 8
_pvParamMblk$ = 12
_VoxUnQuantSC6@8 PROC NEAR				; COMDAT

; 346  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 347  :    PARAM_SC *pParamMblk   = (PARAM_SC *)pvParamMblk;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _pvParamMblk$[ebp]
  00009	89 45 f4	 mov	 DWORD PTR _pParamMblk$[ebp], eax

; 348  :    SUBFRAME_PARAM_SC *pSubParam_Mid, *pSubParam_End;
; 349  : 
; 350  :    assert((piQuanIndex != NULL) && (pvParamMblk != NULL));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _piQuanIndex$[ebp], 0
  00010	74 06		 je	 SHORT $L1537
  00012	83 7d 0c 00	 cmp	 DWORD PTR _pvParamMblk$[ebp], 0
  00016	75 17		 jne	 SHORT $L1538
$L1537:
  00018	68 5e 01 00 00	 push	 350			; 0000015eH
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@HJOEBLLJ@c?3?2xbox?2private?2windows?2directx?2@
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@EIFPOJMD@?$CIpiQuanIndex?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpvPara@
  00027	e8 00 00 00 00	 call	 __assert
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1538:

; 351  : 
; 352  :    pSubParam_Mid = &(pParamMblk->SubParam[PARAM_MIDFRAME]); 

  0002f	8b 55 f4	 mov	 edx, DWORD PTR _pParamMblk$[ebp]
  00032	89 55 fc	 mov	 DWORD PTR _pSubParam_Mid$[ebp], edx

; 353  :    pSubParam_End = &(pParamMblk->SubParam[PARAM_ENDFRAME]); 

  00035	8b 45 f4	 mov	 eax, DWORD PTR _pParamMblk$[ebp]
  00038	83 c0 28	 add	 eax, 40			; 00000028H
  0003b	89 45 f8	 mov	 DWORD PTR _pSubParam_End$[ebp], eax

; 354  : 
; 355  :    /*--------------------------------------------------------
; 356  :      UnQuantize Phase
; 357  :      --------------------------------------------------------*/
; 358  :    /*--------------------------------------------------------
; 359  :      UnQuantize mid-frame and outer frame Phase Vectors
; 360  :      --------------------------------------------------------*/
; 361  :    VoxSVQDecPhase(&(piQuanIndex[INDEX_PHASE]), pSubParam_Mid->pfVEVphase,
; 362  :                   pSubParam_End->pfVEVphase);

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _pSubParam_End$[ebp]
  00041	83 c1 08	 add	 ecx, 8
  00044	51		 push	 ecx
  00045	8b 55 fc	 mov	 edx, DWORD PTR _pSubParam_Mid$[ebp]
  00048	83 c2 08	 add	 edx, 8
  0004b	52		 push	 edx
  0004c	8b 45 08	 mov	 eax, DWORD PTR _piQuanIndex$[ebp]
  0004f	83 c0 08	 add	 eax, 8
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _VoxSVQDecPhase@12

; 363  : 
; 364  :    /*-----------------------------------------------------
; 365  :      Compute the mid-frame phase from the quantized phase prediction
; 366  :      -----------------------------------------------------*/
; 367  :    VoxDecPhasePrediction(pSubParam_Mid->Pitch, pSubParam_End->Pitch,
; 368  :                          pSubParam_Mid->pfVEVphase,
; 369  :                          pSubParam_End->pfVEVphase);

  00058	8b 4d f8	 mov	 ecx, DWORD PTR _pSubParam_End$[ebp]
  0005b	83 c1 08	 add	 ecx, 8
  0005e	51		 push	 ecx
  0005f	8b 55 fc	 mov	 edx, DWORD PTR _pSubParam_Mid$[ebp]
  00062	83 c2 08	 add	 edx, 8
  00065	52		 push	 edx
  00066	8b 45 f8	 mov	 eax, DWORD PTR _pSubParam_End$[ebp]
  00069	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006b	51		 push	 ecx
  0006c	8b 55 fc	 mov	 edx, DWORD PTR _pSubParam_Mid$[ebp]
  0006f	8b 02		 mov	 eax, DWORD PTR [edx]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _VoxDecPhasePrediction@16

; 370  : 
; 371  :    /*--------------------------------------------------------
; 372  :      UnQuantize ASK residuals
; 373  :      --------------------------------------------------------*/
; 374  :    VoxASKResiDec(pParamMblk->pfASK, &(piQuanIndex[INDEX_ASKRESI]));

  00077	8b 4d 08	 mov	 ecx, DWORD PTR _piQuanIndex$[ebp]
  0007a	51		 push	 ecx
  0007b	8b 55 f4	 mov	 edx, DWORD PTR _pParamMblk$[ebp]
  0007e	83 c2 54	 add	 edx, 84			; 00000054H
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 _VoxASKResiDec@8

; 375  : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 08 00	 ret	 8
_VoxUnQuantSC6@8 ENDP
_TEXT	ENDS
END
