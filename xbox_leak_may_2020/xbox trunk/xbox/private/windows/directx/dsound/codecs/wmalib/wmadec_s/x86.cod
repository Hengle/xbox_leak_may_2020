; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\x86.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
WMADEC_RW	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RW	ENDS
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT @ROUNDF@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT @ByteSwap@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _g_SupportMMX_XDS@0
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _g_SupportKNI_XDS@0
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _g_SupportSIMD_FP_XDS@0
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _g_SupportCMOV_XDS@0
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _auSaveHistoryMono_XDS@12
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _auReconstruct_X86_XDS@16
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _auReconMono_X86_XDS@20
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _auReconStereo_MMX_XDS@16
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _auReconStereo_SIMDFP_XDS@16
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, WMADEC_RW, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_DSoundBuildNumberD
WMADEC_RD	SEGMENT
_WMA_OK	DD	00H
_WMA_S_FALSE DD	01H
_WMA_S_BUFUNDERFLOW DD 02H
_WMA_S_NEWPACKET DD 03H
_WMA_S_NO_MORE_FRAME DD 04H
_WMA_S_DEFAULT DD 05H
_WMA_S_SWITCHCHMODE DD 06H
_WMA_E_FAIL DD	080004005H
_WMA_E_OUTOFMEMORY DD 08007000eH
_WMA_E_INVALIDARG DD 080070057H
_WMA_E_NOTSUPPORTED DD 080040000H
_WMA_E_LOSTPACKET DD 080040001H
_WMA_E_BROKEN_FRAME DD 080040002H
_WMA_E_BUFFEROVERFLOW DD 080040003H
_WMA_E_ONHOLD DD 080040004H
_WMA_E_BUFFERUNDERFLOW DD 080040005H
_WMA_E_INVALIDRECHDR DD 080040006H
_WMA_E_SYNCERROR DD 080040007H
_WMA_E_NOTIMPL DD 080040008H
_WMA_E_FLUSHOVERFLOW DD 080040009H
WMADEC_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
WMADEC_RW	SEGMENT
?g_iSupportMMXCount@?1??g_SupportMMX_XDS@@9@9 DD 00H	; `g_SupportMMX_XDS'::`2'::g_iSupportMMXCount
?g_iSupportKNIValue@?1??g_SupportKNI_XDS@@9@9 DD 0ffffffffH ; `g_SupportKNI_XDS'::`2'::g_iSupportKNIValue
?g_iSupportSIMD_FPValue@?1??g_SupportSIMD_FP_XDS@@9@9 DD 0ffffffffH ; `g_SupportSIMD_FP_XDS'::`2'::g_iSupportSIMD_FPValue
?g_bSupportCMOV@?1??g_SupportCMOV_XDS@@9@9 DD 0ffffffffH ; `g_SupportCMOV_XDS'::`2'::g_bSupportCMOV
WMADEC_RW	ENDS
WMADEC_RD	SEGMENT
?x0000FFFF0000FFFF@?1??auReconStereo_MMX_XDS@@9@9 DQ 0000ffff0000ffffH ; `auReconStereo_MMX_XDS'::`2'::x0000FFFF0000FFFF
?x8000800080008000@?1??auReconStereo_MMX_XDS@@9@9 DQ 8000800080008000H ; `auReconStereo_MMX_XDS'::`2'::x8000800080008000
WMADEC_RD	ENDS
PUBLIC	_g_SupportMMX_XDS@0
_BSS	SEGMENT
?g_bSupportMMX@?1??g_SupportMMX_XDS@@9@9 DD 01H DUP (?)	; `g_SupportMMX_XDS'::`2'::g_bSupportMMX
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\wmalib\wmadec_s\x86.c
_BSS	ENDS
;	COMDAT _g_SupportMMX_XDS@0
WMADEC	SEGMENT
_cpuff$ = -4
_g_SupportMMX_XDS@0 PROC NEAR				; COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 150  :     static Bool g_bSupportMMX;
; 151  :     static Int g_iSupportMMXCount = 0;
; 152  : 
; 153  :     Int cpuff;
; 154  : 
; 155  : #ifdef DISABLE_OPT
; 156  : 	return WMAB_FALSE;
; 157  : #endif	// DISABLE_OPT
; 158  : 
; 159  :     g_iSupportMMXCount++;

  00005	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iSupportMMXCount@?1??g_SupportMMX_XDS@@9@9
  0000a	83 c0 01	 add	 eax, 1
  0000d	a3 00 00 00 00	 mov	 DWORD PTR ?g_iSupportMMXCount@?1??g_SupportMMX_XDS@@9@9, eax

; 160  :     if (g_iSupportMMXCount != 1)

  00012	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_iSupportMMXCount@?1??g_SupportMMX_XDS@@9@9, 1
  00019	74 07		 je	 SHORT $L2147

; 161  :         return g_bSupportMMX;

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_bSupportMMX@?1??g_SupportMMX_XDS@@9@9
  00020	eb 4b		 jmp	 SHORT $L2141
$L2147:

; 162  : 
; 163  :     cpuff=0;

  00022	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _cpuff$[ebp], 0

; 164  :     _asm {
; 165  :         // Push general purpose register and pop them out before finish.
; 166  :         // Need to do push-pop general purpose register because 
; 167  :         // compiler doesn't know the existence of CPUID which will affect
; 168  :         // eax, ebx, ecx, edx.  
; 169  :         push    eax

  00029	50		 push	 eax

; 170  :         push    ebx

  0002a	53		 push	 ebx

; 171  :         push    ecx

  0002b	51		 push	 ecx

; 172  :         push    edx

  0002c	52		 push	 edx

; 173  : 
; 174  :         pushfd                  // Get original EFLAGS

  0002d	9c		 pushfd

; 175  :         pop     eax

  0002e	58		 pop	 eax

; 176  :         mov     ecx,eax

  0002f	8b c8		 mov	 ecx, eax

; 177  :         xor     eax,200000h     // Flip ID bit in EFLAGS

  00031	35 00 00 20 00	 xor	 eax, 2097152		; 00200000H

; 178  :         push    eax             // Save new EFLAGS value on stack

  00036	50		 push	 eax

; 179  :         popfd                   // Replace current EFLAGS value

  00037	9d		 popfd

; 180  :         pushfd                  // Get new EFLAGS

  00038	9c		 pushfd

; 181  :         pop     eax             // Store new EFLAGS in EAX

  00039	58		 pop	 eax

; 182  :         xor     eax,ecx         // Can not toggle ID bit,

  0003a	33 c1		 xor	 eax, ecx

; 183  :         // CPUID opcode is not available, So is MMX 
; 184  :         jz      noSupport       // Processor=80486  

  0003c	74 17		 je	 SHORT $noSupport$2148

; 185  : 
; 186  :         xor     eax,eax         // Set up for CPUID instruction

  0003e	33 c0		 xor	 eax, eax

; 187  :         CPU_ID                  // Get and save vendor ID

  00040	0f		 DB	 15			; 0000000fH
  00041	a2		 DB	 -94			; ffffffa2H

; 188  :         cmp     eax,1           // Make sure 1 is valid input 

  00042	83 f8 01	 cmp	 eax, 1

; 189  :         jl      noSupport       // If not, jump to end

  00045	7c 0e		 jl	 SHORT $noSupport$2148

; 190  :         xor     eax,eax

  00047	33 c0		 xor	 eax, eax

; 191  :         inc     eax

  00049	40		 inc	 eax

; 192  :         CPU_ID                  // Get family/model/stepping/

  0004a	0f		 DB	 15			; 0000000fH
  0004b	a2		 DB	 -94			; ffffffa2H

; 193  :         and     edx,0x00800000  //   features

  0004c	81 e2 00 00 80
	00		 and	 edx, 8388608		; 00800000H

; 194  :         mov     cpuff,edx

  00052	89 55 fc	 mov	 DWORD PTR _cpuff$[ebp], edx
$noSupport$2148:

; 195  : noSupport:
; 196  :         pop edx

  00055	5a		 pop	 edx

; 197  :         pop ecx

  00056	59		 pop	 ecx

; 198  :         pop ebx

  00057	5b		 pop	 ebx

; 199  :         pop eax

  00058	58		 pop	 eax

; 200  :     }
; 201  :     g_bSupportMMX = (cpuff != 0);

  00059	33 c9		 xor	 ecx, ecx
  0005b	83 7d fc 00	 cmp	 DWORD PTR _cpuff$[ebp], 0
  0005f	0f 95 c1	 setne	 cl
  00062	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_bSupportMMX@?1??g_SupportMMX_XDS@@9@9, ecx

; 202  :     return g_bSupportMMX;

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_bSupportMMX@?1??g_SupportMMX_XDS@@9@9
$L2141:

; 203  : } // g_SupportMMX

  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_g_SupportMMX_XDS@0 ENDP
WMADEC	ENDS
PUBLIC	_g_SupportKNI_XDS@0
; Function compile flags: /Odt
;	COMDAT _g_SupportKNI_XDS@0
WMADEC	SEGMENT
_cpuff$ = -4
_g_SupportKNI_XDS@0 PROC NEAR				; COMDAT

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 209  :     static Int g_iSupportKNIValue = -1;
; 210  : 
; 211  :     Int cpuff;
; 212  : 
; 213  : #ifdef DISABLE_OPT
; 214  : 	return WMAB_FALSE;
; 215  : #endif	// DISABLE_OPT
; 216  : 
; 217  :     if (g_iSupportKNIValue > -1) return (Bool)g_iSupportKNIValue;

  00005	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?g_iSupportKNIValue@?1??g_SupportKNI_XDS@@9@9, -1
  0000c	7e 0a		 jle	 SHORT $L2155
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iSupportKNIValue@?1??g_SupportKNI_XDS@@9@9
  00013	e9 b8 00 00 00	 jmp	 $L2151
$L2155:

; 218  : 
; 219  :     cpuff=0;

  00018	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _cpuff$[ebp], 0

; 220  :     _asm {
; 221  :         // Push general purpose register and pop them out before finish.
; 222  :         // Need to do push-pop general purpose register because 
; 223  :         // compiler doesn't know the existence of CPUID which will affect
; 224  :         // eax, ebx, ecx, edx.  
; 225  :         push    eax

  0001f	50		 push	 eax

; 226  :         push    ebx

  00020	53		 push	 ebx

; 227  :         push    ecx

  00021	51		 push	 ecx

; 228  :         push    edx

  00022	52		 push	 edx

; 229  : 
; 230  :         pushfd                  // Get original EFLAGS

  00023	9c		 pushfd

; 231  :         pop     eax

  00024	58		 pop	 eax

; 232  :         mov     ecx,eax

  00025	8b c8		 mov	 ecx, eax

; 233  :         xor     eax,200000h     // Flip ID bit in EFLAGS

  00027	35 00 00 20 00	 xor	 eax, 2097152		; 00200000H

; 234  :         push    eax             // Save new EFLAGS value on stack

  0002c	50		 push	 eax

; 235  :         popfd                   // Replace current EFLAGS value

  0002d	9d		 popfd

; 236  :         pushfd                  // Get new EFLAGS

  0002e	9c		 pushfd

; 237  :         pop     eax             // Store new EFLAGS in EAX

  0002f	58		 pop	 eax

; 238  :         xor     eax,ecx         // Can not toggle ID bit,

  00030	33 c1		 xor	 eax, ecx

; 239  :         // CPUID opcode is not available, So is MMX 
; 240  :         jz      noSupport       // Processor=80486  

  00032	0f 84 81 00 00
	00		 je	 $noSupport$2157

; 241  : 
; 242  :         xor     eax,eax         // Set up for CPUID instruction

  00038	33 c0		 xor	 eax, eax

; 243  :         CPU_ID                  // Get and save vendor ID

  0003a	0f		 DB	 15			; 0000000fH
  0003b	a2		 DB	 -94			; ffffffa2H

; 244  :         cmp     eax,1           // Make sure 1 is valid input 

  0003c	83 f8 01	 cmp	 eax, 1

; 245  :         jl      noSupport       // If not, jump to end

  0003f	7c 78		 jl	 SHORT $noSupport$2157

; 246  : 		push	ebx

  00041	53		 push	 ebx

; 247  : 		push	edx

  00042	52		 push	 edx

; 248  : 		push	ecx

  00043	51		 push	 ecx

; 249  : 		xor		ebx,0x756E6547

  00044	81 f3 47 65 6e
	75		 xor	 ebx, 1970169159		; 756e6547H

; 250  : 		xor		edx,0x49656E69

  0004a	81 f2 69 6e 65
	49		 xor	 edx, 1231384169		; 49656e69H

; 251  : 		xor		ecx,0x6C65746E

  00050	81 f1 6e 74 65
	6c		 xor	 ecx, 1818588270		; 6c65746eH

; 252  :         xor     eax,eax

  00056	33 c0		 xor	 eax, eax

; 253  : 		or		ebx,edx

  00058	0b da		 or	 ebx, edx

; 254  : 		or		ebx,ecx

  0005a	0b d9		 or	 ebx, ecx

; 255  : 		or		eax,ebx

  0005c	0b c3		 or	 eax, ebx

; 256  : 		pop 	ecx

  0005e	59		 pop	 ecx

; 257  : 		pop 	edx

  0005f	5a		 pop	 edx

; 258  : 		pop 	ebx

  00060	5b		 pop	 ebx

; 259  : 		cmp		eax,0

  00061	83 f8 00	 cmp	 eax, 0

; 260  : 		jz		INTEL

  00064	74 27		 je	 SHORT $INTEL$2158

; 261  : 		push	ebx

  00066	53		 push	 ebx

; 262  : 		push	edx

  00067	52		 push	 edx

; 263  : 		push	ecx

  00068	51		 push	 ecx

; 264  : 		xor		ebx,0x68747541

  00069	81 f3 41 75 74
	68		 xor	 ebx, 1752462657		; 68747541H

; 265  : 		xor		edx,0x69746E65

  0006f	81 f2 65 6e 74
	69		 xor	 edx, 1769238117		; 69746e65H

; 266  : 		xor		ecx,0x444D4163

  00075	81 f1 63 41 4d
	44		 xor	 ecx, 1145913699		; 444d4163H

; 267  :         xor     eax,eax

  0007b	33 c0		 xor	 eax, eax

; 268  : 		or		ebx,edx

  0007d	0b da		 or	 ebx, edx

; 269  : 		or		ebx,ecx

  0007f	0b d9		 or	 ebx, ecx

; 270  : 		or		eax,ebx

  00081	0b c3		 or	 eax, ebx

; 271  : 		pop 	ecx

  00083	59		 pop	 ecx

; 272  : 		pop 	edx

  00084	5a		 pop	 edx

; 273  : 		pop 	ebx

  00085	5b		 pop	 ebx

; 274  : 		cmp		eax,0

  00086	83 f8 00	 cmp	 eax, 0

; 275  : 		jz		AMD

  00089	74 12		 je	 SHORT $AMD$2159

; 276  : 		jmp		noSupport

  0008b	eb 2c		 jmp	 SHORT $noSupport$2157
$INTEL$2158:

; 277  : INTEL:
; 278  :         xor     eax,eax

  0008d	33 c0		 xor	 eax, eax

; 279  :         inc     eax

  0008f	40		 inc	 eax

; 280  :         CPU_ID                  // Get family/model/stepping/

  00090	0f		 DB	 15			; 0000000fH
  00091	a2		 DB	 -94			; ffffffa2H

; 281  : 		// check bit 25 for KNI support
; 282  :         and     edx,0x02000000  //   features

  00092	81 e2 00 00 00
	02		 and	 edx, 33554432		; 02000000H

; 283  :         mov     cpuff,edx

  00098	89 55 fc	 mov	 DWORD PTR _cpuff$[ebp], edx

; 284  : 		jmp		noSupport

  0009b	eb 1c		 jmp	 SHORT $noSupport$2157
$AMD$2159:

; 285  : AMD:
; 286  :         xor     eax,eax

  0009d	33 c0		 xor	 eax, eax

; 287  :         inc     eax

  0009f	40		 inc	 eax

; 288  :         CPU_ID                  // Get family/model/stepping/

  000a0	0f		 DB	 15			; 0000000fH
  000a1	a2		 DB	 -94			; ffffffa2H

; 289  : 		// check bit 25 for KNI support
; 290  :         cmp     eax,0x0610  //   features

  000a2	3d 10 06 00 00	 cmp	 eax, 1552		; 00000610H

; 291  : 		jz		K7

  000a7	74 09		 je	 SHORT $K7$2160

; 292  :         mov     cpuff,0

  000a9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _cpuff$[ebp], 0

; 293  : 		jmp		noSupport

  000b0	eb 07		 jmp	 SHORT $noSupport$2157
$K7$2160:

; 294  : K7:
; 295  :         mov     cpuff,1

  000b2	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _cpuff$[ebp], 1
$noSupport$2157:

; 296  : noSupport:
; 297  :         pop edx

  000b9	5a		 pop	 edx

; 298  :         pop ecx

  000ba	59		 pop	 ecx

; 299  :         pop ebx

  000bb	5b		 pop	 ebx

; 300  :         pop eax

  000bc	58		 pop	 eax

; 301  :     }
; 302  :     g_iSupportKNIValue = (cpuff != 0);

  000bd	33 c0		 xor	 eax, eax
  000bf	83 7d fc 00	 cmp	 DWORD PTR _cpuff$[ebp], 0
  000c3	0f 95 c0	 setne	 al
  000c6	a3 00 00 00 00	 mov	 DWORD PTR ?g_iSupportKNIValue@?1??g_SupportKNI_XDS@@9@9, eax

; 303  :     return (Bool)g_iSupportKNIValue;

  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iSupportKNIValue@?1??g_SupportKNI_XDS@@9@9
$L2151:

; 304  : } // g_SupportKNI

  000d0	5b		 pop	 ebx
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
_g_SupportKNI_XDS@0 ENDP
WMADEC	ENDS
PUBLIC	_g_SupportSIMD_FP_XDS@0
EXTRN	__except_handler3:NEAR
EXTRN	__except_list:DWORD
;	COMDAT CONST
CONST	SEGMENT
$T2824	DD	0ffffffffH
	DD	FLAT:$L2820
	DD	FLAT:$L2821
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _g_SupportSIMD_FP_XDS@0
WMADEC	SEGMENT
_supported$ = -44
_start$ = -40
_end$ = -32
__$SEHRec$ = -24
_g_SupportSIMD_FP_XDS@0 PROC NEAR			; COMDAT

; 320  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 OFFSET FLAT:$T2824
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:__except_handler3
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00015	50		 push	 eax
  00016	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0001d	83 c4 e4	 add	 esp, -28		; ffffffe4H
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 321  :     static Int g_iSupportSIMD_FPValue = -1;
; 322  : 
; 323  :     I64 start;
; 324  :     I64 end;
; 325  :     Bool supported;
; 326  : 
; 327  : #ifdef DISABLE_OPT
; 328  : 	return WMAB_FALSE;
; 329  : #endif	// DISABLE_OPT
; 330  : 
; 331  :     if (!g_SupportKNI()) return WMAB_FALSE;

  00026	e8 00 00 00 00	 call	 _g_SupportKNI_XDS@0
  0002b	85 c0		 test	 eax, eax
  0002d	75 04		 jne	 SHORT $L2170
  0002f	33 c0		 xor	 eax, eax
  00031	eb 60		 jmp	 SHORT $L2819
$L2170:

; 332  :     if (g_iSupportSIMD_FPValue > -1) return (Bool)g_iSupportSIMD_FPValue;

  00033	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?g_iSupportSIMD_FPValue@?1??g_SupportSIMD_FP_XDS@@9@9, -1
  0003a	7e 07		 jle	 SHORT $L2171
  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iSupportSIMD_FPValue@?1??g_SupportSIMD_FP_XDS@@9@9
  00041	eb 50		 jmp	 SHORT $L2819
$L2171:

; 333  : 
; 334  :     supported = WMAB_TRUE;

  00043	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _supported$[ebp], 1

; 335  :     _try {

  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 337  :             lea     edi,start        //Check time stamp. Time operation to make sure emulator is not running

  00051	8d 7d d8	 lea	 edi, DWORD PTR _start$[ebp]

; 338  :             RDTSC

  00054	0f		 DB	 15			; 0000000fH
  00055	31		 DB	 49			; 00000031H

; 339  :             mov     [edi],eax

  00056	89 07		 mov	 DWORD PTR [edi], eax

; 340  :             mov     [edi+4],edx

  00058	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 341  :             movaps  xmm1_xmm1

  0005b	0f		 DB	 15			; 0000000fH
  0005c	28		 DB	 40			; 00000028H
  0005d	c9		 DB	 -55			; ffffffc9H

; 342  :             lea     edi,end 

  0005e	8d 7d e0	 lea	 edi, DWORD PTR _end$[ebp]

; 343  :             RDTSC

  00061	0f		 DB	 15			; 0000000fH
  00062	31		 DB	 49			; 00000031H

; 344  :             mov     [edi],eax

  00063	89 07		 mov	 DWORD PTR [edi], eax

; 345  :             mov     [edi+4],edx

  00065	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 336  :         _asm {

  00068	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -1
  0006f	eb 17		 jmp	 SHORT $L2823
$L2820:

; 346  :         
; 347  :         }
; 348  :     } _except (1) {

  00071	b8 01 00 00 00	 mov	 eax, 1
$L2822:
  00076	c3		 ret	 0
$L2821:
  00077	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 349  :         supported = WMAB_FALSE;

  0007a	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _supported$[ebp], 0
  00081	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -1
$L2823:

; 350  :     }
; 351  : //    if ((end-start) > 60) supported = WMAB_FALSE; //If it took a lot of clocks to execute the instruction then emulator is running
; 352  :     g_iSupportSIMD_FPValue = (Int)supported;

  00088	8b 45 d4	 mov	 eax, DWORD PTR _supported$[ebp]
  0008b	a3 00 00 00 00	 mov	 DWORD PTR ?g_iSupportSIMD_FPValue@?1??g_SupportSIMD_FP_XDS@@9@9, eax

; 353  :     return supported;

  00090	8b 45 d4	 mov	 eax, DWORD PTR _supported$[ebp]
$L2819:

; 354  : } // g_SupportSIMD_FP

  00093	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
_g_SupportSIMD_FP_XDS@0 ENDP
WMADEC	ENDS
PUBLIC	_g_SupportCMOV_XDS@0
; Function compile flags: /Odt
;	COMDAT _g_SupportCMOV_XDS@0
WMADEC	SEGMENT
_cpuff$ = -4
_g_SupportCMOV_XDS@0 PROC NEAR				; COMDAT

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 359  :     static Bool g_bSupportCMOV = -1;
; 360  :     Int cpuff;
; 361  : 
; 362  : #ifdef DISABLE_OPT
; 363  : 	return WMAB_FALSE;
; 364  : #endif	// DISABLE_OPT
; 365  : 
; 366  :     if (g_bSupportCMOV != -1) return g_bSupportCMOV;

  00005	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?g_bSupportCMOV@?1??g_SupportCMOV_XDS@@9@9, -1
  0000c	74 07		 je	 SHORT $L2181
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_bSupportCMOV@?1??g_SupportCMOV_XDS@@9@9
  00013	eb 43		 jmp	 SHORT $L2177
$L2181:

; 367  : 
; 368  :     cpuff=0;

  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _cpuff$[ebp], 0

; 369  :     _asm {
; 370  :         // Push general purpose register and pop them out before finish.
; 371  :         // Need to do push-pop general purpose register because 
; 372  :         // compiler doesn't know the existence of CPUID which will affect
; 373  :         // eax, ebx, ecx, edx.  
; 374  :         push    eax

  0001c	50		 push	 eax

; 375  :         push    ebx

  0001d	53		 push	 ebx

; 376  :         push    ecx

  0001e	51		 push	 ecx

; 377  :         push    edx

  0001f	52		 push	 edx

; 378  : 
; 379  :         pushfd                  // Get original EFLAGS

  00020	9c		 pushfd

; 380  :         pop     eax

  00021	58		 pop	 eax

; 381  :         mov     ecx,eax

  00022	8b c8		 mov	 ecx, eax

; 382  :         xor     eax,200000h     // Flip ID bit in EFLAGS

  00024	35 00 00 20 00	 xor	 eax, 2097152		; 00200000H

; 383  :         push    eax             // Save new EFLAGS value on stack

  00029	50		 push	 eax

; 384  :         popfd                   // Replace current EFLAGS value

  0002a	9d		 popfd

; 385  :         pushfd                  // Get new EFLAGS

  0002b	9c		 pushfd

; 386  :         pop     eax             // Store new EFLAGS in EAX

  0002c	58		 pop	 eax

; 387  :         xor     eax,ecx         // Can not toggle ID bit,

  0002d	33 c1		 xor	 eax, ecx

; 388  :         // CPUID opcode is not available, So does not support CMOV 
; 389  :         jz      noSupport       // Processor=80486  

  0002f	74 10		 je	 SHORT $noSupport$2182

; 390  : 
; 391  :         mov     eax,1           // Set up for CPUID instruction	for version and feture information

  00031	b8 01 00 00 00	 mov	 eax, 1

; 392  :         CPU_ID                  // Get features

  00036	0f		 DB	 15			; 0000000fH
  00037	a2		 DB	 -94			; ffffffa2H

; 393  :         and     edx,0x00008000  // Mask out all but bit 15 for CMOV detection  

  00038	81 e2 00 80 00
	00		 and	 edx, 32768		; 00008000H

; 394  :         mov     cpuff,edx

  0003e	89 55 fc	 mov	 DWORD PTR _cpuff$[ebp], edx
$noSupport$2182:

; 395  : noSupport:
; 396  :         pop edx

  00041	5a		 pop	 edx

; 397  :         pop ecx

  00042	59		 pop	 ecx

; 398  :         pop ebx

  00043	5b		 pop	 ebx

; 399  :         pop eax

  00044	58		 pop	 eax

; 400  :     }
; 401  :     g_bSupportCMOV = (cpuff != 0);

  00045	33 c0		 xor	 eax, eax
  00047	83 7d fc 00	 cmp	 DWORD PTR _cpuff$[ebp], 0
  0004b	0f 95 c0	 setne	 al
  0004e	a3 00 00 00 00	 mov	 DWORD PTR ?g_bSupportCMOV@?1??g_SupportCMOV_XDS@@9@9, eax

; 402  :     return g_bSupportCMOV;

  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_bSupportCMOV@?1??g_SupportCMOV_XDS@@9@9
$L2177:

; 403  : } // g_SupportCMOV

  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_g_SupportCMOV_XDS@0 ENDP
WMADEC	ENDS
PUBLIC	@ROUNDF@4
PUBLIC	_auSaveHistoryMono_XDS@12
EXTRN	__fltused:NEAR
; Function compile flags: /Odt
;	COMDAT _auSaveHistoryMono_XDS@12
WMADEC	SEGMENT
tv824 = -356
tv825 = -352
tv799 = -348
tv800 = -344
tv778 = -340
tv779 = -336
tv757 = -332
tv758 = -328
tv736 = -324
tv737 = -320
tv715 = -316
tv716 = -312
tv694 = -308
tv695 = -304
tv673 = -300
tv674 = -296
tv652 = -292
tv653 = -288
tv631 = -284
tv632 = -280
tv610 = -276
tv611 = -272
tv589 = -268
tv590 = -264
tv568 = -260
tv569 = -256
tv547 = -252
tv548 = -248
tv526 = -244
tv527 = -240
tv505 = -236
tv506 = -232
tv484 = -228
tv485 = -224
tv454 = -220
tv455 = -216
tv430 = -212
tv431 = -208
tv410 = -204
tv411 = -200
tv390 = -196
tv391 = -192
tv370 = -188
tv371 = -184
tv350 = -180
tv351 = -176
tv330 = -172
tv331 = -168
tv310 = -164
tv311 = -160
tv290 = -156
tv291 = -152
tv270 = -148
tv271 = -144
tv250 = -140
tv251 = -136
tv230 = -132
tv231 = -128
tv210 = -124
tv211 = -120
tv190 = -116
tv191 = -112
tv170 = -108
tv171 = -104
tv150 = -100
tv151 = -96
tv130 = -92
tv131 = -88
_piDstSign$ = -84
_bp2Sin1$ = -80
_piCoef$ = -76
_cChan$ = -72
_piDst$ = -68
_cSubFrameSample3Quad$ = -64
_bp2Step$ = -60
_iLoopCnt$ = -56
_iLoopBy1$ = -52
_uiSignbitCount$ = -48
_iLoopBy16$ = -44
_iResult$ = -40
_cfResult$ = -36
_iCoefRecurQ4$ = -32
_bp2Sin$ = -28
_uiSignbitData$ = -24
_bp2Cos$ = -20
_i$ = -16
_pfltSinTable$ = -12
_bp2Cos1$ = -8
_iLoopLen$ = -4
_pau$ = 8
_ppcinfo$ = 12
_fForceTransformAll$ = 16
_auSaveHistoryMono_XDS@12 PROC NEAR			; COMDAT

; 1705 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H

; 1706 :     CoefType *piCoef;   //floating vlaue = (float)*piCoef/(1<<5)  assuming TRANSFORM_FRACT_BITS = 5
; 1707 :     
; 1708 :     Int i;      // , iEnd, iSegEnd;
; 1709 :     I16 *piDst; 
; 1710 :     I32 iResult;
; 1711 :     CoefType cfResult;
; 1712 : 
; 1713 :     // get local copies of these values which are used frequently or repeatedly (helps optimization)
; 1714 :     Int cChan = pau->m_cChannel;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  0000c	0f b7 48 58	 movzx	 ecx, WORD PTR [eax+88]
  00010	89 4d b8	 mov	 DWORD PTR _cChan$[ebp], ecx

; 1715 : 	// HALF_TRANSFORM: the following member variables are not restored so continue to hold their halved values
; 1716 :     Int cSubFrameSample3Quad = 3 * pau->m_cSubFrameSampleQuadAdjusted;

  00013	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00016	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  0001c	6b c0 03	 imul	 eax, 3
  0001f	89 45 c0	 mov	 DWORD PTR _cSubFrameSample3Quad$[ebp], eax

; 1717 :     Int iCoefRecurQ4 = pau->m_iCoefRecurQ4;

  00022	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00025	8b 91 98 03 00
	00		 mov	 edx, DWORD PTR [ecx+920]
  0002b	89 55 e0	 mov	 DWORD PTR _iCoefRecurQ4$[ebp], edx

; 1718 :     BP2Type bp2Sin  = INTEGER_OR_INT_FLOAT( pau->m_iSinRampDownStart, pau->m_fltSinRampDownStart );

  0002e	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00031	8b 88 6c 03 00
	00		 mov	 ecx, DWORD PTR [eax+876]
  00037	89 4d e4	 mov	 DWORD PTR _bp2Sin$[ebp], ecx

; 1719 :     BP2Type bp2Cos  = INTEGER_OR_INT_FLOAT( pau->m_iCosRampDownStart, pau->m_fltCosRampDownStart );

  0003a	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  0003d	8b 82 70 03 00
	00		 mov	 eax, DWORD PTR [edx+880]
  00043	89 45 ec	 mov	 DWORD PTR _bp2Cos$[ebp], eax

; 1720 :     BP2Type bp2Sin1 = INTEGER_OR_INT_FLOAT( pau->m_iSinRampDownPrior, pau->m_fltSinRampDownPrior );

  00046	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00049	8b 91 74 03 00
	00		 mov	 edx, DWORD PTR [ecx+884]
  0004f	89 55 b0	 mov	 DWORD PTR _bp2Sin1$[ebp], edx

; 1721 :     BP2Type bp2Cos1 = INTEGER_OR_INT_FLOAT( pau->m_iCosRampDownPrior, pau->m_fltCosRampDownPrior );

  00052	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00055	8b 88 78 03 00
	00		 mov	 ecx, DWORD PTR [eax+888]
  0005b	89 4d f8	 mov	 DWORD PTR _bp2Cos1$[ebp], ecx

; 1722 :     BP2Type bp2Step = INTEGER_OR_INT_FLOAT( pau->m_iSinRampDownStep,  pau->m_fltSinRampDownStep  );

  0005e	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00061	8b 82 7c 03 00
	00		 mov	 eax, DWORD PTR [edx+892]
  00067	89 45 c4	 mov	 DWORD PTR _bp2Step$[ebp], eax

; 1723 :     Float *pfltSinTable = pau->m_piSinForSaveHistory;

  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  0006d	8b 91 2c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1068]
  00073	89 55 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], edx

; 1724 :     Int iLoopCnt;
; 1725 :     Int iLoopLen;
; 1726 :     Int iLoopBy16;
; 1727 :     Int iLoopBy1;
; 1728 : 
; 1729 : #ifndef PREVOUTPUT_16BITS
; 1730 :     I16    *piDstSign = ppcinfo->m_piPrevOutputSign;

  00076	8b 45 0c	 mov	 eax, DWORD PTR _ppcinfo$[ebp]
  00079	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0007c	89 4d ac	 mov	 DWORD PTR _piDstSign$[ebp], ecx

; 1731 :     U32     uiSignbitData = 0;

  0007f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _uiSignbitData$[ebp], 0

; 1732 :     U32     uiSignbitCount = 0;

  00086	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _uiSignbitCount$[ebp], 0

; 1733 : #endif  // PREVOUTPUT_16BITS
; 1734 : 
; 1735 : #ifdef PROFILE
; 1736 :     FunctionProfile fp;
; 1737 :     FunctionProfileStart(&fp,SAVE_HISTORY_MONO_PROFILE);
; 1738 : #endif
; 1739 : 
; 1740 :     //all starting from the begining of this frame
; 1741 :     //official starting of a subfrm (including leading zeros)
; 1742 :     //case 1 (Large -> Small):  starts later than what's been reconstructed w/o leading zeros
; 1743 :     //                          in this case dst should be skiped (this may mean memcpy from prev)
; 1744 :     //                          src and coef are fine
; 1745 :     //                          
; 1746 :     //case 2 (Small -> Large):  starts earler than what's been reconstructed but all leading zeros
; 1747 :     //                          in this case dst 
; 1748 : 
; 1749 :     //eventually we'll use piOutput directly
; 1750 :     piDst = ppcinfo->m_piPrevOutput;

  0008d	8b 55 0c	 mov	 edx, DWORD PTR _ppcinfo$[ebp]
  00090	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00093	89 45 bc	 mov	 DWORD PTR _piDst$[ebp], eax

; 1751 : 
; 1752 : 
; 1753 :     //persistent states
; 1754 :     i = ppcinfo->m_iCurrGetPCM_SubFrame;       //current position in a frame

  00096	8b 4d 0c	 mov	 ecx, DWORD PTR _ppcinfo$[ebp]
  00099	0f bf 51 38	 movsx	 edx, WORD PTR [ecx+56]
  0009d	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx

; 1755 :     assert( (0<=i && i<=iCoefRecurQ4) || (i==CURRGETPCM_INVALID));
; 1756 :     piCoef = (CoefType*)ppcinfo->m_rgiCoefReconCurr; 

  000a0	8b 45 0c	 mov	 eax, DWORD PTR _ppcinfo$[ebp]
  000a3	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000a6	89 4d b4	 mov	 DWORD PTR _piCoef$[ebp], ecx

; 1757 :     ASSERT_SIGNBIT_POINTER(piDstSign);
; 1758 : 
; 1759 : 
; 1760 : #if defined(WMA_SHOW_FRAMES)  && defined(_DEBUG)
; 1761 :     prvWmaShowFrames(pau, "SavHist", " %4d 0x%08x 0x%08x %4d %4d", 
; 1762 :         i, piCoef, piDst, cSubFrameSample3Quad, iCoefRecurQ4);
; 1763 : #endif
; 1764 :     iLoopLen = cSubFrameSample3Quad - i;

  000a9	8b 55 c0	 mov	 edx, DWORD PTR _cSubFrameSample3Quad$[ebp]
  000ac	2b 55 f0	 sub	 edx, DWORD PTR _i$[ebp]
  000af	89 55 fc	 mov	 DWORD PTR _iLoopLen$[ebp], edx

; 1765 :     if ( iLoopLen<0 )

  000b2	83 7d fc 00	 cmp	 DWORD PTR _iLoopLen$[ebp], 0
  000b6	7d 07		 jge	 SHORT $L2212

; 1766 :         iLoopLen = 0;

  000b8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _iLoopLen$[ebp], 0
$L2212:

; 1767 :     iLoopBy1  = iLoopLen & 0xF;

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _iLoopLen$[ebp]
  000c2	83 e0 0f	 and	 eax, 15			; 0000000fH
  000c5	89 45 cc	 mov	 DWORD PTR _iLoopBy1$[ebp], eax

; 1768 :     iLoopBy16 = iLoopLen >> 4;

  000c8	8b 4d fc	 mov	 ecx, DWORD PTR _iLoopLen$[ebp]
  000cb	c1 f9 04	 sar	 ecx, 4
  000ce	89 4d d4	 mov	 DWORD PTR _iLoopBy16$[ebp], ecx

; 1769 :     for (iLoopCnt = 0; iLoopCnt < iLoopBy16; iLoopCnt++,i+=16) {

  000d1	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _iLoopCnt$[ebp], 0
  000d8	eb 12		 jmp	 SHORT $L2213
$L2214:
  000da	8b 55 c8	 mov	 edx, DWORD PTR _iLoopCnt$[ebp]
  000dd	83 c2 01	 add	 edx, 1
  000e0	89 55 c8	 mov	 DWORD PTR _iLoopCnt$[ebp], edx
  000e3	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000e6	83 c0 10	 add	 eax, 16			; 00000010H
  000e9	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L2213:
  000ec	8b 4d c8	 mov	 ecx, DWORD PTR _iLoopCnt$[ebp]
  000ef	3b 4d d4	 cmp	 ecx, DWORD PTR _iLoopBy16$[ebp]
  000f2	0f 8d 6c 0a 00
	00		 jge	 $L2215

; 1770 : 
; 1771 :         //1
; 1772 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  000f8	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  000fb	83 ea 04	 sub	 edx, 4
  000fe	89 55 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], edx
  00101	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00104	83 e8 04	 sub	 eax, 4
  00107	89 45 b4	 mov	 DWORD PTR _piCoef$[ebp], eax
  0010a	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  0010d	d9 01		 fld	 DWORD PTR [ecx]
  0010f	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  00112	d8 0a		 fmul	 DWORD PTR [edx]
  00114	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1773 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00117	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 @ROUNDF@4
  00120	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00123	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  0012a	7d 09		 jge	 SHORT $L2837
  0012c	c7 45 a8 00 00
	ff ff		 mov	 DWORD PTR tv131[ebp], -65536 ; ffff0000H
  00133	eb 1e		 jmp	 SHORT $L2838
$L2837:
  00135	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  0013c	7e 09		 jle	 SHORT $L2835
  0013e	c7 45 a4 ff ff
	00 00		 mov	 DWORD PTR tv130[ebp], 65535 ; 0000ffffH
  00145	eb 06		 jmp	 SHORT $L2836
$L2835:
  00147	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  0014a	89 4d a4	 mov	 DWORD PTR tv130[ebp], ecx
$L2836:
  0014d	8b 55 a4	 mov	 edx, DWORD PTR tv130[ebp]
  00150	89 55 a8	 mov	 DWORD PTR tv131[ebp], edx
$L2838:
  00153	8b 45 a8	 mov	 eax, DWORD PTR tv131[ebp]
  00156	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00159	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  0015c	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  00160	66 89 11	 mov	 WORD PTR [ecx], dx

; 1774 :         piDst += cChan;

  00163	8b 45 b8	 mov	 eax, DWORD PTR _cChan$[ebp]
  00166	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00169	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0016c	89 55 bc	 mov	 DWORD PTR _piDst$[ebp], edx

; 1775 :         RECORD_SIGNBIT_FAST;

  0016f	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00172	d1 e0		 shl	 eax, 1
  00174	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  00177	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  0017a	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0017d	83 e1 01	 and	 ecx, 1
  00180	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  00183	0b d1		 or	 edx, ecx
  00185	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  00188	8b 45 d0	 mov	 eax, DWORD PTR _uiSignbitCount$[ebp]
  0018b	83 c0 01	 add	 eax, 1
  0018e	89 45 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax

; 1776 : 
; 1777 :         //2
; 1778 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  00191	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  00194	83 e9 04	 sub	 ecx, 4
  00197	89 4d f4	 mov	 DWORD PTR _pfltSinTable$[ebp], ecx
  0019a	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  0019d	83 ea 04	 sub	 edx, 4
  001a0	89 55 b4	 mov	 DWORD PTR _piCoef$[ebp], edx
  001a3	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  001a6	d9 00		 fld	 DWORD PTR [eax]
  001a8	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  001ab	d8 09		 fmul	 DWORD PTR [ecx]
  001ad	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1779 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  001b0	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  001b3	52		 push	 edx
  001b4	e8 00 00 00 00	 call	 @ROUNDF@4
  001b9	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  001bc	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  001c3	7d 09		 jge	 SHORT $L2841
  001c5	c7 45 a0 00 00
	ff ff		 mov	 DWORD PTR tv151[ebp], -65536 ; ffff0000H
  001cc	eb 1e		 jmp	 SHORT $L2842
$L2841:
  001ce	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  001d5	7e 09		 jle	 SHORT $L2839
  001d7	c7 45 9c ff ff
	00 00		 mov	 DWORD PTR tv150[ebp], 65535 ; 0000ffffH
  001de	eb 06		 jmp	 SHORT $L2840
$L2839:
  001e0	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  001e3	89 45 9c	 mov	 DWORD PTR tv150[ebp], eax
$L2840:
  001e6	8b 4d 9c	 mov	 ecx, DWORD PTR tv150[ebp]
  001e9	89 4d a0	 mov	 DWORD PTR tv151[ebp], ecx
$L2842:
  001ec	8b 55 a0	 mov	 edx, DWORD PTR tv151[ebp]
  001ef	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  001f2	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  001f5	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  001f9	66 89 08	 mov	 WORD PTR [eax], cx

; 1780 :         piDst += cChan;

  001fc	8b 55 b8	 mov	 edx, DWORD PTR _cChan$[ebp]
  001ff	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  00202	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00205	89 4d bc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 1781 :         RECORD_SIGNBIT_FAST;

  00208	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  0020b	d1 e2		 shl	 edx, 1
  0020d	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  00210	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  00213	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00216	83 e0 01	 and	 eax, 1
  00219	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  0021c	0b c8		 or	 ecx, eax
  0021e	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  00221	8b 55 d0	 mov	 edx, DWORD PTR _uiSignbitCount$[ebp]
  00224	83 c2 01	 add	 edx, 1
  00227	89 55 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], edx

; 1782 : 
; 1783 :         //3
; 1784 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  0022a	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  0022d	83 e8 04	 sub	 eax, 4
  00230	89 45 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], eax
  00233	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00236	83 e9 04	 sub	 ecx, 4
  00239	89 4d b4	 mov	 DWORD PTR _piCoef$[ebp], ecx
  0023c	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  0023f	d9 02		 fld	 DWORD PTR [edx]
  00241	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  00244	d8 08		 fmul	 DWORD PTR [eax]
  00246	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1785 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00249	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  0024c	51		 push	 ecx
  0024d	e8 00 00 00 00	 call	 @ROUNDF@4
  00252	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00255	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  0025c	7d 09		 jge	 SHORT $L2845
  0025e	c7 45 98 00 00
	ff ff		 mov	 DWORD PTR tv171[ebp], -65536 ; ffff0000H
  00265	eb 1e		 jmp	 SHORT $L2846
$L2845:
  00267	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  0026e	7e 09		 jle	 SHORT $L2843
  00270	c7 45 94 ff ff
	00 00		 mov	 DWORD PTR tv170[ebp], 65535 ; 0000ffffH
  00277	eb 06		 jmp	 SHORT $L2844
$L2843:
  00279	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  0027c	89 55 94	 mov	 DWORD PTR tv170[ebp], edx
$L2844:
  0027f	8b 45 94	 mov	 eax, DWORD PTR tv170[ebp]
  00282	89 45 98	 mov	 DWORD PTR tv171[ebp], eax
$L2846:
  00285	8b 4d 98	 mov	 ecx, DWORD PTR tv171[ebp]
  00288	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  0028b	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  0028e	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  00292	66 89 02	 mov	 WORD PTR [edx], ax

; 1786 :         piDst += cChan;

  00295	8b 4d b8	 mov	 ecx, DWORD PTR _cChan$[ebp]
  00298	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  0029b	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0029e	89 45 bc	 mov	 DWORD PTR _piDst$[ebp], eax

; 1787 :         RECORD_SIGNBIT_FAST;

  002a1	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  002a4	d1 e1		 shl	 ecx, 1
  002a6	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  002a9	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  002ac	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  002af	83 e2 01	 and	 edx, 1
  002b2	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  002b5	0b c2		 or	 eax, edx
  002b7	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  002ba	8b 4d d0	 mov	 ecx, DWORD PTR _uiSignbitCount$[ebp]
  002bd	83 c1 01	 add	 ecx, 1
  002c0	89 4d d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], ecx

; 1788 : 
; 1789 :         //4
; 1790 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  002c3	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  002c6	83 ea 04	 sub	 edx, 4
  002c9	89 55 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], edx
  002cc	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  002cf	83 e8 04	 sub	 eax, 4
  002d2	89 45 b4	 mov	 DWORD PTR _piCoef$[ebp], eax
  002d5	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  002d8	d9 01		 fld	 DWORD PTR [ecx]
  002da	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  002dd	d8 0a		 fmul	 DWORD PTR [edx]
  002df	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1791 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  002e2	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  002e5	50		 push	 eax
  002e6	e8 00 00 00 00	 call	 @ROUNDF@4
  002eb	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  002ee	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  002f5	7d 09		 jge	 SHORT $L2849
  002f7	c7 45 90 00 00
	ff ff		 mov	 DWORD PTR tv191[ebp], -65536 ; ffff0000H
  002fe	eb 1e		 jmp	 SHORT $L2850
$L2849:
  00300	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  00307	7e 09		 jle	 SHORT $L2847
  00309	c7 45 8c ff ff
	00 00		 mov	 DWORD PTR tv190[ebp], 65535 ; 0000ffffH
  00310	eb 06		 jmp	 SHORT $L2848
$L2847:
  00312	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00315	89 4d 8c	 mov	 DWORD PTR tv190[ebp], ecx
$L2848:
  00318	8b 55 8c	 mov	 edx, DWORD PTR tv190[ebp]
  0031b	89 55 90	 mov	 DWORD PTR tv191[ebp], edx
$L2850:
  0031e	8b 45 90	 mov	 eax, DWORD PTR tv191[ebp]
  00321	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00324	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00327	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  0032b	66 89 11	 mov	 WORD PTR [ecx], dx

; 1792 :         piDst += cChan;

  0032e	8b 45 b8	 mov	 eax, DWORD PTR _cChan$[ebp]
  00331	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00334	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00337	89 55 bc	 mov	 DWORD PTR _piDst$[ebp], edx

; 1793 :         RECORD_SIGNBIT_FAST;

  0033a	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  0033d	d1 e0		 shl	 eax, 1
  0033f	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  00342	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00345	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  00348	83 e1 01	 and	 ecx, 1
  0034b	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  0034e	0b d1		 or	 edx, ecx
  00350	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  00353	8b 45 d0	 mov	 eax, DWORD PTR _uiSignbitCount$[ebp]
  00356	83 c0 01	 add	 eax, 1
  00359	89 45 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax

; 1794 : 
; 1795 :         //5
; 1796 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  0035c	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  0035f	83 e9 04	 sub	 ecx, 4
  00362	89 4d f4	 mov	 DWORD PTR _pfltSinTable$[ebp], ecx
  00365	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00368	83 ea 04	 sub	 edx, 4
  0036b	89 55 b4	 mov	 DWORD PTR _piCoef$[ebp], edx
  0036e	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00371	d9 00		 fld	 DWORD PTR [eax]
  00373	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  00376	d8 09		 fmul	 DWORD PTR [ecx]
  00378	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1797 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  0037b	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  0037e	52		 push	 edx
  0037f	e8 00 00 00 00	 call	 @ROUNDF@4
  00384	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00387	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  0038e	7d 09		 jge	 SHORT $L2853
  00390	c7 45 88 00 00
	ff ff		 mov	 DWORD PTR tv211[ebp], -65536 ; ffff0000H
  00397	eb 1e		 jmp	 SHORT $L2854
$L2853:
  00399	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  003a0	7e 09		 jle	 SHORT $L2851
  003a2	c7 45 84 ff ff
	00 00		 mov	 DWORD PTR tv210[ebp], 65535 ; 0000ffffH
  003a9	eb 06		 jmp	 SHORT $L2852
$L2851:
  003ab	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  003ae	89 45 84	 mov	 DWORD PTR tv210[ebp], eax
$L2852:
  003b1	8b 4d 84	 mov	 ecx, DWORD PTR tv210[ebp]
  003b4	89 4d 88	 mov	 DWORD PTR tv211[ebp], ecx
$L2854:
  003b7	8b 55 88	 mov	 edx, DWORD PTR tv211[ebp]
  003ba	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  003bd	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  003c0	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  003c4	66 89 08	 mov	 WORD PTR [eax], cx

; 1798 :         piDst += cChan;

  003c7	8b 55 b8	 mov	 edx, DWORD PTR _cChan$[ebp]
  003ca	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  003cd	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  003d0	89 4d bc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 1799 :         RECORD_SIGNBIT_FAST;

  003d3	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  003d6	d1 e2		 shl	 edx, 1
  003d8	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  003db	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  003de	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  003e1	83 e0 01	 and	 eax, 1
  003e4	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  003e7	0b c8		 or	 ecx, eax
  003e9	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  003ec	8b 55 d0	 mov	 edx, DWORD PTR _uiSignbitCount$[ebp]
  003ef	83 c2 01	 add	 edx, 1
  003f2	89 55 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], edx

; 1800 : 
; 1801 :         //6
; 1802 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  003f5	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  003f8	83 e8 04	 sub	 eax, 4
  003fb	89 45 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], eax
  003fe	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00401	83 e9 04	 sub	 ecx, 4
  00404	89 4d b4	 mov	 DWORD PTR _piCoef$[ebp], ecx
  00407	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  0040a	d9 02		 fld	 DWORD PTR [edx]
  0040c	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  0040f	d8 08		 fmul	 DWORD PTR [eax]
  00411	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1803 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00414	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  00417	51		 push	 ecx
  00418	e8 00 00 00 00	 call	 @ROUNDF@4
  0041d	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00420	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  00427	7d 09		 jge	 SHORT $L2857
  00429	c7 45 80 00 00
	ff ff		 mov	 DWORD PTR tv231[ebp], -65536 ; ffff0000H
  00430	eb 27		 jmp	 SHORT $L2858
$L2857:
  00432	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  00439	7e 0c		 jle	 SHORT $L2855
  0043b	c7 85 7c ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv230[ebp], 65535 ; 0000ffffH
  00445	eb 09		 jmp	 SHORT $L2856
$L2855:
  00447	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  0044a	89 95 7c ff ff
	ff		 mov	 DWORD PTR tv230[ebp], edx
$L2856:
  00450	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR tv230[ebp]
  00456	89 45 80	 mov	 DWORD PTR tv231[ebp], eax
$L2858:
  00459	8b 4d 80	 mov	 ecx, DWORD PTR tv231[ebp]
  0045c	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  0045f	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00462	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  00466	66 89 02	 mov	 WORD PTR [edx], ax

; 1804 :         piDst += cChan;

  00469	8b 4d b8	 mov	 ecx, DWORD PTR _cChan$[ebp]
  0046c	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  0046f	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00472	89 45 bc	 mov	 DWORD PTR _piDst$[ebp], eax

; 1805 :         RECORD_SIGNBIT_FAST;

  00475	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00478	d1 e1		 shl	 ecx, 1
  0047a	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  0047d	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00480	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00483	83 e2 01	 and	 edx, 1
  00486	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00489	0b c2		 or	 eax, edx
  0048b	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  0048e	8b 4d d0	 mov	 ecx, DWORD PTR _uiSignbitCount$[ebp]
  00491	83 c1 01	 add	 ecx, 1
  00494	89 4d d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], ecx

; 1806 : 
; 1807 :         //7
; 1808 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  00497	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  0049a	83 ea 04	 sub	 edx, 4
  0049d	89 55 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], edx
  004a0	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  004a3	83 e8 04	 sub	 eax, 4
  004a6	89 45 b4	 mov	 DWORD PTR _piCoef$[ebp], eax
  004a9	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  004ac	d9 01		 fld	 DWORD PTR [ecx]
  004ae	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  004b1	d8 0a		 fmul	 DWORD PTR [edx]
  004b3	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1809 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  004b6	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  004b9	50		 push	 eax
  004ba	e8 00 00 00 00	 call	 @ROUNDF@4
  004bf	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  004c2	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  004c9	7d 0c		 jge	 SHORT $L2861
  004cb	c7 85 78 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv251[ebp], -65536 ; ffff0000H
  004d5	eb 2a		 jmp	 SHORT $L2862
$L2861:
  004d7	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  004de	7e 0c		 jle	 SHORT $L2859
  004e0	c7 85 74 ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv250[ebp], 65535 ; 0000ffffH
  004ea	eb 09		 jmp	 SHORT $L2860
$L2859:
  004ec	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  004ef	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv250[ebp], ecx
$L2860:
  004f5	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR tv250[ebp]
  004fb	89 95 78 ff ff
	ff		 mov	 DWORD PTR tv251[ebp], edx
$L2862:
  00501	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv251[ebp]
  00507	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0050a	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  0050d	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  00511	66 89 11	 mov	 WORD PTR [ecx], dx

; 1810 :         piDst += cChan;

  00514	8b 45 b8	 mov	 eax, DWORD PTR _cChan$[ebp]
  00517	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  0051a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0051d	89 55 bc	 mov	 DWORD PTR _piDst$[ebp], edx

; 1811 :         RECORD_SIGNBIT_FAST;

  00520	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00523	d1 e0		 shl	 eax, 1
  00525	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  00528	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  0052b	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0052e	83 e1 01	 and	 ecx, 1
  00531	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  00534	0b d1		 or	 edx, ecx
  00536	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  00539	8b 45 d0	 mov	 eax, DWORD PTR _uiSignbitCount$[ebp]
  0053c	83 c0 01	 add	 eax, 1
  0053f	89 45 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax

; 1812 : 
; 1813 :         //8
; 1814 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  00542	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  00545	83 e9 04	 sub	 ecx, 4
  00548	89 4d f4	 mov	 DWORD PTR _pfltSinTable$[ebp], ecx
  0054b	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  0054e	83 ea 04	 sub	 edx, 4
  00551	89 55 b4	 mov	 DWORD PTR _piCoef$[ebp], edx
  00554	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00557	d9 00		 fld	 DWORD PTR [eax]
  00559	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  0055c	d8 09		 fmul	 DWORD PTR [ecx]
  0055e	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1815 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00561	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  00564	52		 push	 edx
  00565	e8 00 00 00 00	 call	 @ROUNDF@4
  0056a	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0056d	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  00574	7d 0c		 jge	 SHORT $L2865
  00576	c7 85 70 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv271[ebp], -65536 ; ffff0000H
  00580	eb 2a		 jmp	 SHORT $L2866
$L2865:
  00582	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  00589	7e 0c		 jle	 SHORT $L2863
  0058b	c7 85 6c ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv270[ebp], 65535 ; 0000ffffH
  00595	eb 09		 jmp	 SHORT $L2864
$L2863:
  00597	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  0059a	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv270[ebp], eax
$L2864:
  005a0	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR tv270[ebp]
  005a6	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv271[ebp], ecx
$L2866:
  005ac	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv271[ebp]
  005b2	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  005b5	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  005b8	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  005bc	66 89 08	 mov	 WORD PTR [eax], cx

; 1816 :         piDst += cChan;

  005bf	8b 55 b8	 mov	 edx, DWORD PTR _cChan$[ebp]
  005c2	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  005c5	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  005c8	89 4d bc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 1817 :         RECORD_SIGNBIT_FAST;

  005cb	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  005ce	d1 e2		 shl	 edx, 1
  005d0	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  005d3	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  005d6	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  005d9	83 e0 01	 and	 eax, 1
  005dc	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  005df	0b c8		 or	 ecx, eax
  005e1	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  005e4	8b 55 d0	 mov	 edx, DWORD PTR _uiSignbitCount$[ebp]
  005e7	83 c2 01	 add	 edx, 1
  005ea	89 55 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], edx

; 1818 : 
; 1819 :         //9
; 1820 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  005ed	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  005f0	83 e8 04	 sub	 eax, 4
  005f3	89 45 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], eax
  005f6	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  005f9	83 e9 04	 sub	 ecx, 4
  005fc	89 4d b4	 mov	 DWORD PTR _piCoef$[ebp], ecx
  005ff	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00602	d9 02		 fld	 DWORD PTR [edx]
  00604	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  00607	d8 08		 fmul	 DWORD PTR [eax]
  00609	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1821 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  0060c	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  0060f	51		 push	 ecx
  00610	e8 00 00 00 00	 call	 @ROUNDF@4
  00615	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00618	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  0061f	7d 0c		 jge	 SHORT $L2869
  00621	c7 85 68 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv291[ebp], -65536 ; ffff0000H
  0062b	eb 2a		 jmp	 SHORT $L2870
$L2869:
  0062d	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  00634	7e 0c		 jle	 SHORT $L2867
  00636	c7 85 64 ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv290[ebp], 65535 ; 0000ffffH
  00640	eb 09		 jmp	 SHORT $L2868
$L2867:
  00642	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00645	89 95 64 ff ff
	ff		 mov	 DWORD PTR tv290[ebp], edx
$L2868:
  0064b	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv290[ebp]
  00651	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
$L2870:
  00657	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR tv291[ebp]
  0065d	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  00660	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00663	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  00667	66 89 02	 mov	 WORD PTR [edx], ax

; 1822 :         piDst += cChan;

  0066a	8b 4d b8	 mov	 ecx, DWORD PTR _cChan$[ebp]
  0066d	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00670	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00673	89 45 bc	 mov	 DWORD PTR _piDst$[ebp], eax

; 1823 :         RECORD_SIGNBIT_FAST;

  00676	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00679	d1 e1		 shl	 ecx, 1
  0067b	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  0067e	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00681	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00684	83 e2 01	 and	 edx, 1
  00687	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  0068a	0b c2		 or	 eax, edx
  0068c	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  0068f	8b 4d d0	 mov	 ecx, DWORD PTR _uiSignbitCount$[ebp]
  00692	83 c1 01	 add	 ecx, 1
  00695	89 4d d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], ecx

; 1824 : 
; 1825 :         //10
; 1826 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  00698	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  0069b	83 ea 04	 sub	 edx, 4
  0069e	89 55 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], edx
  006a1	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  006a4	83 e8 04	 sub	 eax, 4
  006a7	89 45 b4	 mov	 DWORD PTR _piCoef$[ebp], eax
  006aa	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  006ad	d9 01		 fld	 DWORD PTR [ecx]
  006af	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  006b2	d8 0a		 fmul	 DWORD PTR [edx]
  006b4	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1827 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  006b7	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  006ba	50		 push	 eax
  006bb	e8 00 00 00 00	 call	 @ROUNDF@4
  006c0	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  006c3	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  006ca	7d 0c		 jge	 SHORT $L2873
  006cc	c7 85 60 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv311[ebp], -65536 ; ffff0000H
  006d6	eb 2a		 jmp	 SHORT $L2874
$L2873:
  006d8	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  006df	7e 0c		 jle	 SHORT $L2871
  006e1	c7 85 5c ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv310[ebp], 65535 ; 0000ffffH
  006eb	eb 09		 jmp	 SHORT $L2872
$L2871:
  006ed	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  006f0	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv310[ebp], ecx
$L2872:
  006f6	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR tv310[ebp]
  006fc	89 95 60 ff ff
	ff		 mov	 DWORD PTR tv311[ebp], edx
$L2874:
  00702	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv311[ebp]
  00708	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0070b	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  0070e	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  00712	66 89 11	 mov	 WORD PTR [ecx], dx

; 1828 :         piDst += cChan;

  00715	8b 45 b8	 mov	 eax, DWORD PTR _cChan$[ebp]
  00718	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  0071b	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0071e	89 55 bc	 mov	 DWORD PTR _piDst$[ebp], edx

; 1829 :         RECORD_SIGNBIT_FAST;

  00721	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00724	d1 e0		 shl	 eax, 1
  00726	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  00729	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  0072c	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0072f	83 e1 01	 and	 ecx, 1
  00732	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  00735	0b d1		 or	 edx, ecx
  00737	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  0073a	8b 45 d0	 mov	 eax, DWORD PTR _uiSignbitCount$[ebp]
  0073d	83 c0 01	 add	 eax, 1
  00740	89 45 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax

; 1830 : 
; 1831 :         //11
; 1832 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  00743	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  00746	83 e9 04	 sub	 ecx, 4
  00749	89 4d f4	 mov	 DWORD PTR _pfltSinTable$[ebp], ecx
  0074c	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  0074f	83 ea 04	 sub	 edx, 4
  00752	89 55 b4	 mov	 DWORD PTR _piCoef$[ebp], edx
  00755	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00758	d9 00		 fld	 DWORD PTR [eax]
  0075a	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  0075d	d8 09		 fmul	 DWORD PTR [ecx]
  0075f	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1833 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00762	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  00765	52		 push	 edx
  00766	e8 00 00 00 00	 call	 @ROUNDF@4
  0076b	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0076e	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  00775	7d 0c		 jge	 SHORT $L2877
  00777	c7 85 58 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv331[ebp], -65536 ; ffff0000H
  00781	eb 2a		 jmp	 SHORT $L2878
$L2877:
  00783	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  0078a	7e 0c		 jle	 SHORT $L2875
  0078c	c7 85 54 ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv330[ebp], 65535 ; 0000ffffH
  00796	eb 09		 jmp	 SHORT $L2876
$L2875:
  00798	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  0079b	89 85 54 ff ff
	ff		 mov	 DWORD PTR tv330[ebp], eax
$L2876:
  007a1	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR tv330[ebp]
  007a7	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv331[ebp], ecx
$L2878:
  007ad	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv331[ebp]
  007b3	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  007b6	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  007b9	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  007bd	66 89 08	 mov	 WORD PTR [eax], cx

; 1834 :         piDst += cChan;

  007c0	8b 55 b8	 mov	 edx, DWORD PTR _cChan$[ebp]
  007c3	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  007c6	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  007c9	89 4d bc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 1835 :         RECORD_SIGNBIT_FAST;

  007cc	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  007cf	d1 e2		 shl	 edx, 1
  007d1	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  007d4	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  007d7	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  007da	83 e0 01	 and	 eax, 1
  007dd	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  007e0	0b c8		 or	 ecx, eax
  007e2	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  007e5	8b 55 d0	 mov	 edx, DWORD PTR _uiSignbitCount$[ebp]
  007e8	83 c2 01	 add	 edx, 1
  007eb	89 55 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], edx

; 1836 : 
; 1837 :         //12
; 1838 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  007ee	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  007f1	83 e8 04	 sub	 eax, 4
  007f4	89 45 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], eax
  007f7	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  007fa	83 e9 04	 sub	 ecx, 4
  007fd	89 4d b4	 mov	 DWORD PTR _piCoef$[ebp], ecx
  00800	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00803	d9 02		 fld	 DWORD PTR [edx]
  00805	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  00808	d8 08		 fmul	 DWORD PTR [eax]
  0080a	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1839 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  0080d	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  00810	51		 push	 ecx
  00811	e8 00 00 00 00	 call	 @ROUNDF@4
  00816	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00819	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  00820	7d 0c		 jge	 SHORT $L2881
  00822	c7 85 50 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv351[ebp], -65536 ; ffff0000H
  0082c	eb 2a		 jmp	 SHORT $L2882
$L2881:
  0082e	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  00835	7e 0c		 jle	 SHORT $L2879
  00837	c7 85 4c ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv350[ebp], 65535 ; 0000ffffH
  00841	eb 09		 jmp	 SHORT $L2880
$L2879:
  00843	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00846	89 95 4c ff ff
	ff		 mov	 DWORD PTR tv350[ebp], edx
$L2880:
  0084c	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv350[ebp]
  00852	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv351[ebp], eax
$L2882:
  00858	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv351[ebp]
  0085e	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  00861	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00864	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  00868	66 89 02	 mov	 WORD PTR [edx], ax

; 1840 :         piDst += cChan;

  0086b	8b 4d b8	 mov	 ecx, DWORD PTR _cChan$[ebp]
  0086e	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00871	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00874	89 45 bc	 mov	 DWORD PTR _piDst$[ebp], eax

; 1841 :         RECORD_SIGNBIT_FAST;

  00877	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  0087a	d1 e1		 shl	 ecx, 1
  0087c	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  0087f	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00882	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00885	83 e2 01	 and	 edx, 1
  00888	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  0088b	0b c2		 or	 eax, edx
  0088d	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  00890	8b 4d d0	 mov	 ecx, DWORD PTR _uiSignbitCount$[ebp]
  00893	83 c1 01	 add	 ecx, 1
  00896	89 4d d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], ecx

; 1842 : 
; 1843 :         //13
; 1844 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  00899	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  0089c	83 ea 04	 sub	 edx, 4
  0089f	89 55 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], edx
  008a2	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  008a5	83 e8 04	 sub	 eax, 4
  008a8	89 45 b4	 mov	 DWORD PTR _piCoef$[ebp], eax
  008ab	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  008ae	d9 01		 fld	 DWORD PTR [ecx]
  008b0	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  008b3	d8 0a		 fmul	 DWORD PTR [edx]
  008b5	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1845 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  008b8	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  008bb	50		 push	 eax
  008bc	e8 00 00 00 00	 call	 @ROUNDF@4
  008c1	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  008c4	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  008cb	7d 0c		 jge	 SHORT $L2885
  008cd	c7 85 48 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv371[ebp], -65536 ; ffff0000H
  008d7	eb 2a		 jmp	 SHORT $L2886
$L2885:
  008d9	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  008e0	7e 0c		 jle	 SHORT $L2883
  008e2	c7 85 44 ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv370[ebp], 65535 ; 0000ffffH
  008ec	eb 09		 jmp	 SHORT $L2884
$L2883:
  008ee	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  008f1	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv370[ebp], ecx
$L2884:
  008f7	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv370[ebp]
  008fd	89 95 48 ff ff
	ff		 mov	 DWORD PTR tv371[ebp], edx
$L2886:
  00903	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR tv371[ebp]
  00909	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0090c	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  0090f	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  00913	66 89 11	 mov	 WORD PTR [ecx], dx

; 1846 :         piDst += cChan;

  00916	8b 45 b8	 mov	 eax, DWORD PTR _cChan$[ebp]
  00919	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  0091c	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0091f	89 55 bc	 mov	 DWORD PTR _piDst$[ebp], edx

; 1847 :         RECORD_SIGNBIT_FAST;

  00922	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00925	d1 e0		 shl	 eax, 1
  00927	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  0092a	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  0092d	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  00930	83 e1 01	 and	 ecx, 1
  00933	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  00936	0b d1		 or	 edx, ecx
  00938	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  0093b	8b 45 d0	 mov	 eax, DWORD PTR _uiSignbitCount$[ebp]
  0093e	83 c0 01	 add	 eax, 1
  00941	89 45 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax

; 1848 : 
; 1849 :         //14
; 1850 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  00944	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  00947	83 e9 04	 sub	 ecx, 4
  0094a	89 4d f4	 mov	 DWORD PTR _pfltSinTable$[ebp], ecx
  0094d	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00950	83 ea 04	 sub	 edx, 4
  00953	89 55 b4	 mov	 DWORD PTR _piCoef$[ebp], edx
  00956	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00959	d9 00		 fld	 DWORD PTR [eax]
  0095b	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  0095e	d8 09		 fmul	 DWORD PTR [ecx]
  00960	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1851 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00963	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  00966	52		 push	 edx
  00967	e8 00 00 00 00	 call	 @ROUNDF@4
  0096c	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0096f	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  00976	7d 0c		 jge	 SHORT $L2889
  00978	c7 85 40 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv391[ebp], -65536 ; ffff0000H
  00982	eb 2a		 jmp	 SHORT $L2890
$L2889:
  00984	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  0098b	7e 0c		 jle	 SHORT $L2887
  0098d	c7 85 3c ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv390[ebp], 65535 ; 0000ffffH
  00997	eb 09		 jmp	 SHORT $L2888
$L2887:
  00999	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  0099c	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv390[ebp], eax
$L2888:
  009a2	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR tv390[ebp]
  009a8	89 8d 40 ff ff
	ff		 mov	 DWORD PTR tv391[ebp], ecx
$L2890:
  009ae	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR tv391[ebp]
  009b4	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  009b7	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  009ba	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  009be	66 89 08	 mov	 WORD PTR [eax], cx

; 1852 :         piDst += cChan;

  009c1	8b 55 b8	 mov	 edx, DWORD PTR _cChan$[ebp]
  009c4	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  009c7	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  009ca	89 4d bc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 1853 :         RECORD_SIGNBIT_FAST;

  009cd	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  009d0	d1 e2		 shl	 edx, 1
  009d2	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  009d5	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  009d8	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  009db	83 e0 01	 and	 eax, 1
  009de	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  009e1	0b c8		 or	 ecx, eax
  009e3	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  009e6	8b 55 d0	 mov	 edx, DWORD PTR _uiSignbitCount$[ebp]
  009e9	83 c2 01	 add	 edx, 1
  009ec	89 55 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], edx

; 1854 : 
; 1855 :         //15
; 1856 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  009ef	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  009f2	83 e8 04	 sub	 eax, 4
  009f5	89 45 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], eax
  009f8	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  009fb	83 e9 04	 sub	 ecx, 4
  009fe	89 4d b4	 mov	 DWORD PTR _piCoef$[ebp], ecx
  00a01	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00a04	d9 02		 fld	 DWORD PTR [edx]
  00a06	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  00a09	d8 08		 fmul	 DWORD PTR [eax]
  00a0b	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1857 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00a0e	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  00a11	51		 push	 ecx
  00a12	e8 00 00 00 00	 call	 @ROUNDF@4
  00a17	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00a1a	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  00a21	7d 0c		 jge	 SHORT $L2893
  00a23	c7 85 38 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv411[ebp], -65536 ; ffff0000H
  00a2d	eb 2a		 jmp	 SHORT $L2894
$L2893:
  00a2f	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  00a36	7e 0c		 jle	 SHORT $L2891
  00a38	c7 85 34 ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv410[ebp], 65535 ; 0000ffffH
  00a42	eb 09		 jmp	 SHORT $L2892
$L2891:
  00a44	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00a47	89 95 34 ff ff
	ff		 mov	 DWORD PTR tv410[ebp], edx
$L2892:
  00a4d	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv410[ebp]
  00a53	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv411[ebp], eax
$L2894:
  00a59	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv411[ebp]
  00a5f	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  00a62	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00a65	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  00a69	66 89 02	 mov	 WORD PTR [edx], ax

; 1858 :         piDst += cChan;

  00a6c	8b 4d b8	 mov	 ecx, DWORD PTR _cChan$[ebp]
  00a6f	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00a72	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00a75	89 45 bc	 mov	 DWORD PTR _piDst$[ebp], eax

; 1859 :         RECORD_SIGNBIT_FAST;

  00a78	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00a7b	d1 e1		 shl	 ecx, 1
  00a7d	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  00a80	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00a83	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00a86	83 e2 01	 and	 edx, 1
  00a89	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00a8c	0b c2		 or	 eax, edx
  00a8e	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  00a91	8b 4d d0	 mov	 ecx, DWORD PTR _uiSignbitCount$[ebp]
  00a94	83 c1 01	 add	 ecx, 1
  00a97	89 4d d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], ecx

; 1860 : 
; 1861 :         //16
; 1862 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  00a9a	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  00a9d	83 ea 04	 sub	 edx, 4
  00aa0	89 55 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], edx
  00aa3	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00aa6	83 e8 04	 sub	 eax, 4
  00aa9	89 45 b4	 mov	 DWORD PTR _piCoef$[ebp], eax
  00aac	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00aaf	d9 01		 fld	 DWORD PTR [ecx]
  00ab1	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  00ab4	d8 0a		 fmul	 DWORD PTR [edx]
  00ab6	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1863 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00ab9	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  00abc	50		 push	 eax
  00abd	e8 00 00 00 00	 call	 @ROUNDF@4
  00ac2	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00ac5	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  00acc	7d 0c		 jge	 SHORT $L2897
  00ace	c7 85 30 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv431[ebp], -65536 ; ffff0000H
  00ad8	eb 2a		 jmp	 SHORT $L2898
$L2897:
  00ada	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  00ae1	7e 0c		 jle	 SHORT $L2895
  00ae3	c7 85 2c ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv430[ebp], 65535 ; 0000ffffH
  00aed	eb 09		 jmp	 SHORT $L2896
$L2895:
  00aef	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00af2	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv430[ebp], ecx
$L2896:
  00af8	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR tv430[ebp]
  00afe	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv431[ebp], edx
$L2898:
  00b04	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv431[ebp]
  00b0a	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00b0d	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00b10	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  00b14	66 89 11	 mov	 WORD PTR [ecx], dx

; 1864 :         piDst += cChan;

  00b17	8b 45 b8	 mov	 eax, DWORD PTR _cChan$[ebp]
  00b1a	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00b1d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00b20	89 55 bc	 mov	 DWORD PTR _piDst$[ebp], edx

; 1865 :         RECORD_SIGNBIT_FAST;

  00b23	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00b26	d1 e0		 shl	 eax, 1
  00b28	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  00b2b	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00b2e	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  00b31	83 e1 01	 and	 ecx, 1
  00b34	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  00b37	0b d1		 or	 edx, ecx
  00b39	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  00b3c	8b 45 d0	 mov	 eax, DWORD PTR _uiSignbitCount$[ebp]
  00b3f	83 c0 01	 add	 eax, 1
  00b42	89 45 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax

; 1866 : 
; 1867 :         *piDstSign = (I16) uiSignbitData;                                       

  00b45	8b 4d ac	 mov	 ecx, DWORD PTR _piDstSign$[ebp]
  00b48	66 8b 55 e8	 mov	 dx, WORD PTR _uiSignbitData$[ebp]
  00b4c	66 89 11	 mov	 WORD PTR [ecx], dx

; 1868 :         piDstSign += 1;                                                      

  00b4f	8b 45 ac	 mov	 eax, DWORD PTR _piDstSign$[ebp]
  00b52	83 c0 02	 add	 eax, 2
  00b55	89 45 ac	 mov	 DWORD PTR _piDstSign$[ebp], eax

; 1869 :         uiSignbitCount = 0;                                                     

  00b58	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _uiSignbitCount$[ebp], 0

; 1870 : 
; 1871 :     }

  00b5f	e9 76 f5 ff ff	 jmp	 $L2214
$L2215:

; 1872 : 
; 1873 :     for (iLoopCnt = 0; iLoopCnt < iLoopBy1; iLoopBy1++,i++)    {

  00b64	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _iLoopCnt$[ebp], 0
  00b6b	eb 12		 jmp	 SHORT $L2313
$L2314:
  00b6d	8b 4d cc	 mov	 ecx, DWORD PTR _iLoopBy1$[ebp]
  00b70	83 c1 01	 add	 ecx, 1
  00b73	89 4d cc	 mov	 DWORD PTR _iLoopBy1$[ebp], ecx
  00b76	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00b79	83 c2 01	 add	 edx, 1
  00b7c	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx
$L2313:
  00b7f	8b 45 c8	 mov	 eax, DWORD PTR _iLoopCnt$[ebp]
  00b82	3b 45 cc	 cmp	 eax, DWORD PTR _iLoopBy1$[ebp]
  00b85	0f 8d d7 00 00
	00		 jge	 $L2315

; 1874 : 
; 1875 :         cfResult = INT_FROM_COEF( MULT_BP2(*--pfltSinTable,*--piCoef) );

  00b8b	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  00b8e	83 e9 04	 sub	 ecx, 4
  00b91	89 4d f4	 mov	 DWORD PTR _pfltSinTable$[ebp], ecx
  00b94	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00b97	83 ea 04	 sub	 edx, 4
  00b9a	89 55 b4	 mov	 DWORD PTR _piCoef$[ebp], edx
  00b9d	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00ba0	d9 00		 fld	 DWORD PTR [eax]
  00ba2	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  00ba5	d8 09		 fmul	 DWORD PTR [ecx]
  00ba7	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 1876 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00baa	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  00bad	52		 push	 edx
  00bae	e8 00 00 00 00	 call	 @ROUNDF@4
  00bb3	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00bb6	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  00bbd	7d 0c		 jge	 SHORT $L2901
  00bbf	c7 85 28 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv455[ebp], -65536 ; ffff0000H
  00bc9	eb 2a		 jmp	 SHORT $L2902
$L2901:
  00bcb	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  00bd2	7e 0c		 jle	 SHORT $L2899
  00bd4	c7 85 24 ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv454[ebp], 65535 ; 0000ffffH
  00bde	eb 09		 jmp	 SHORT $L2900
$L2899:
  00be0	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  00be3	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv454[ebp], eax
$L2900:
  00be9	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv454[ebp]
  00bef	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv455[ebp], ecx
$L2902:
  00bf5	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR tv455[ebp]
  00bfb	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  00bfe	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  00c01	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  00c05	66 89 08	 mov	 WORD PTR [eax], cx

; 1877 : 
; 1878 :         piDst += cChan;

  00c08	8b 55 b8	 mov	 edx, DWORD PTR _cChan$[ebp]
  00c0b	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  00c0e	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00c11	89 4d bc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 1879 : 
; 1880 :         RECORD_SIGNBIT(iResult, piDstSign, uiSignbitData,
; 1881 :             uiSignbitCount, 1);

  00c14	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  00c17	d1 e2		 shl	 edx, 1
  00c19	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  00c1c	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  00c1f	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00c22	83 e0 01	 and	 eax, 1
  00c25	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00c28	0b c8		 or	 ecx, eax
  00c2a	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  00c2d	8b 55 d0	 mov	 edx, DWORD PTR _uiSignbitCount$[ebp]
  00c30	83 c2 01	 add	 edx, 1
  00c33	89 55 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], edx
  00c36	83 7d d0 10	 cmp	 DWORD PTR _uiSignbitCount$[ebp], 16 ; 00000010H
  00c3a	72 21		 jb	 SHORT $L2322
  00c3c	8b 45 ac	 mov	 eax, DWORD PTR _piDstSign$[ebp]
  00c3f	66 8b 4d e8	 mov	 cx, WORD PTR _uiSignbitData$[ebp]
  00c43	66 89 08	 mov	 WORD PTR [eax], cx
  00c46	8b 55 ac	 mov	 edx, DWORD PTR _piDstSign$[ebp]
  00c49	83 c2 02	 add	 edx, 2
  00c4c	89 55 ac	 mov	 DWORD PTR _piDstSign$[ebp], edx
  00c4f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _uiSignbitData$[ebp], 0
  00c56	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _uiSignbitCount$[ebp], 0
$L2322:

; 1882 : 
; 1883 :     }

  00c5d	e9 0b ff ff ff	 jmp	 $L2314
$L2315:

; 1884 : 
; 1885 :     iLoopLen = iCoefRecurQ4 - i;

  00c62	8b 45 e0	 mov	 eax, DWORD PTR _iCoefRecurQ4$[ebp]
  00c65	2b 45 f0	 sub	 eax, DWORD PTR _i$[ebp]
  00c68	89 45 fc	 mov	 DWORD PTR _iLoopLen$[ebp], eax

; 1886 :     if ( iLoopLen < 0 )

  00c6b	83 7d fc 00	 cmp	 DWORD PTR _iLoopLen$[ebp], 0
  00c6f	7d 07		 jge	 SHORT $L2324

; 1887 :         iLoopLen = 0;

  00c71	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _iLoopLen$[ebp], 0
$L2324:

; 1888 :     iLoopBy1  = iLoopLen & 0xF;

  00c78	8b 4d fc	 mov	 ecx, DWORD PTR _iLoopLen$[ebp]
  00c7b	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00c7e	89 4d cc	 mov	 DWORD PTR _iLoopBy1$[ebp], ecx

; 1889 :     iLoopBy16 = iLoopLen >> 4;

  00c81	8b 55 fc	 mov	 edx, DWORD PTR _iLoopLen$[ebp]
  00c84	c1 fa 04	 sar	 edx, 4
  00c87	89 55 d4	 mov	 DWORD PTR _iLoopBy16$[ebp], edx

; 1890 :     for (iLoopCnt=0; iLoopCnt < iLoopBy16; iLoopCnt++,i++)    {

  00c8a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _iLoopCnt$[ebp], 0
  00c91	eb 12		 jmp	 SHORT $L2325
$L2326:
  00c93	8b 45 c8	 mov	 eax, DWORD PTR _iLoopCnt$[ebp]
  00c96	83 c0 01	 add	 eax, 1
  00c99	89 45 c8	 mov	 DWORD PTR _iLoopCnt$[ebp], eax
  00c9c	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00c9f	83 c1 01	 add	 ecx, 1
  00ca2	89 4d f0	 mov	 DWORD PTR _i$[ebp], ecx
$L2325:
  00ca5	8b 55 c8	 mov	 edx, DWORD PTR _iLoopCnt$[ebp]
  00ca8	3b 55 d4	 cmp	 edx, DWORD PTR _iLoopBy16$[ebp]
  00cab	0f 8d ef 0a 00
	00		 jge	 $L2327

; 1891 : 
; 1892 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  00cb1	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  00cb4	83 e8 04	 sub	 eax, 4
  00cb7	89 45 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], eax
  00cba	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  00cbd	d9 01		 fld	 DWORD PTR [ecx]
  00cbf	d9 e0		 fchs
  00cc1	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00cc4	d8 0a		 fmul	 DWORD PTR [edx]
  00cc6	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00cc9	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00ccc	83 c0 04	 add	 eax, 4
  00ccf	89 45 b4	 mov	 DWORD PTR _piCoef$[ebp], eax

; 1893 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00cd2	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  00cd5	51		 push	 ecx
  00cd6	e8 00 00 00 00	 call	 @ROUNDF@4
  00cdb	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00cde	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  00ce5	7d 0c		 jge	 SHORT $L2905
  00ce7	c7 85 20 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv485[ebp], -65536 ; ffff0000H
  00cf1	eb 2a		 jmp	 SHORT $L2906
$L2905:
  00cf3	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  00cfa	7e 0c		 jle	 SHORT $L2903
  00cfc	c7 85 1c ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv484[ebp], 65535 ; 0000ffffH
  00d06	eb 09		 jmp	 SHORT $L2904
$L2903:
  00d08	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00d0b	89 95 1c ff ff
	ff		 mov	 DWORD PTR tv484[ebp], edx
$L2904:
  00d11	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv484[ebp]
  00d17	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv485[ebp], eax
$L2906:
  00d1d	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv485[ebp]
  00d23	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  00d26	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00d29	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  00d2d	66 89 02	 mov	 WORD PTR [edx], ax

; 1894 :         piDst += cChan;

  00d30	8b 4d b8	 mov	 ecx, DWORD PTR _cChan$[ebp]
  00d33	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00d36	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00d39	89 45 bc	 mov	 DWORD PTR _piDst$[ebp], eax

; 1895 :         RECORD_SIGNBIT_FAST;

  00d3c	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00d3f	d1 e1		 shl	 ecx, 1
  00d41	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  00d44	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00d47	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00d4a	83 e2 01	 and	 edx, 1
  00d4d	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00d50	0b c2		 or	 eax, edx
  00d52	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  00d55	8b 4d d0	 mov	 ecx, DWORD PTR _uiSignbitCount$[ebp]
  00d58	83 c1 01	 add	 ecx, 1
  00d5b	89 4d d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], ecx

; 1896 : 
; 1897 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  00d5e	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  00d61	83 ea 04	 sub	 edx, 4
  00d64	89 55 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], edx
  00d67	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  00d6a	d9 00		 fld	 DWORD PTR [eax]
  00d6c	d9 e0		 fchs
  00d6e	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00d71	d8 09		 fmul	 DWORD PTR [ecx]
  00d73	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00d76	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00d79	83 c2 04	 add	 edx, 4
  00d7c	89 55 b4	 mov	 DWORD PTR _piCoef$[ebp], edx

; 1898 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00d7f	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  00d82	50		 push	 eax
  00d83	e8 00 00 00 00	 call	 @ROUNDF@4
  00d88	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00d8b	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  00d92	7d 0c		 jge	 SHORT $L2909
  00d94	c7 85 18 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv506[ebp], -65536 ; ffff0000H
  00d9e	eb 2a		 jmp	 SHORT $L2910
$L2909:
  00da0	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  00da7	7e 0c		 jle	 SHORT $L2907
  00da9	c7 85 14 ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv505[ebp], 65535 ; 0000ffffH
  00db3	eb 09		 jmp	 SHORT $L2908
$L2907:
  00db5	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00db8	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv505[ebp], ecx
$L2908:
  00dbe	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR tv505[ebp]
  00dc4	89 95 18 ff ff
	ff		 mov	 DWORD PTR tv506[ebp], edx
$L2910:
  00dca	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv506[ebp]
  00dd0	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00dd3	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00dd6	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  00dda	66 89 11	 mov	 WORD PTR [ecx], dx

; 1899 :         piDst += cChan;

  00ddd	8b 45 b8	 mov	 eax, DWORD PTR _cChan$[ebp]
  00de0	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00de3	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00de6	89 55 bc	 mov	 DWORD PTR _piDst$[ebp], edx

; 1900 :         RECORD_SIGNBIT_FAST;

  00de9	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00dec	d1 e0		 shl	 eax, 1
  00dee	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  00df1	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00df4	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  00df7	83 e1 01	 and	 ecx, 1
  00dfa	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  00dfd	0b d1		 or	 edx, ecx
  00dff	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  00e02	8b 45 d0	 mov	 eax, DWORD PTR _uiSignbitCount$[ebp]
  00e05	83 c0 01	 add	 eax, 1
  00e08	89 45 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax

; 1901 : 
; 1902 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  00e0b	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  00e0e	83 e9 04	 sub	 ecx, 4
  00e11	89 4d f4	 mov	 DWORD PTR _pfltSinTable$[ebp], ecx
  00e14	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  00e17	d9 02		 fld	 DWORD PTR [edx]
  00e19	d9 e0		 fchs
  00e1b	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00e1e	d8 08		 fmul	 DWORD PTR [eax]
  00e20	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00e23	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00e26	83 c1 04	 add	 ecx, 4
  00e29	89 4d b4	 mov	 DWORD PTR _piCoef$[ebp], ecx

; 1903 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00e2c	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  00e2f	52		 push	 edx
  00e30	e8 00 00 00 00	 call	 @ROUNDF@4
  00e35	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00e38	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  00e3f	7d 0c		 jge	 SHORT $L2913
  00e41	c7 85 10 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv527[ebp], -65536 ; ffff0000H
  00e4b	eb 2a		 jmp	 SHORT $L2914
$L2913:
  00e4d	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  00e54	7e 0c		 jle	 SHORT $L2911
  00e56	c7 85 0c ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv526[ebp], 65535 ; 0000ffffH
  00e60	eb 09		 jmp	 SHORT $L2912
$L2911:
  00e62	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  00e65	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv526[ebp], eax
$L2912:
  00e6b	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR tv526[ebp]
  00e71	89 8d 10 ff ff
	ff		 mov	 DWORD PTR tv527[ebp], ecx
$L2914:
  00e77	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR tv527[ebp]
  00e7d	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  00e80	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  00e83	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  00e87	66 89 08	 mov	 WORD PTR [eax], cx

; 1904 :         piDst += cChan;

  00e8a	8b 55 b8	 mov	 edx, DWORD PTR _cChan$[ebp]
  00e8d	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  00e90	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00e93	89 4d bc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 1905 :         RECORD_SIGNBIT_FAST;

  00e96	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  00e99	d1 e2		 shl	 edx, 1
  00e9b	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  00e9e	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  00ea1	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  00ea4	83 e0 01	 and	 eax, 1
  00ea7	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00eaa	0b c8		 or	 ecx, eax
  00eac	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  00eaf	8b 55 d0	 mov	 edx, DWORD PTR _uiSignbitCount$[ebp]
  00eb2	83 c2 01	 add	 edx, 1
  00eb5	89 55 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], edx

; 1906 : 
; 1907 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  00eb8	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  00ebb	83 e8 04	 sub	 eax, 4
  00ebe	89 45 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], eax
  00ec1	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  00ec4	d9 01		 fld	 DWORD PTR [ecx]
  00ec6	d9 e0		 fchs
  00ec8	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00ecb	d8 0a		 fmul	 DWORD PTR [edx]
  00ecd	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00ed0	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00ed3	83 c0 04	 add	 eax, 4
  00ed6	89 45 b4	 mov	 DWORD PTR _piCoef$[ebp], eax

; 1908 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00ed9	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  00edc	51		 push	 ecx
  00edd	e8 00 00 00 00	 call	 @ROUNDF@4
  00ee2	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00ee5	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  00eec	7d 0c		 jge	 SHORT $L2917
  00eee	c7 85 08 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv548[ebp], -65536 ; ffff0000H
  00ef8	eb 2a		 jmp	 SHORT $L2918
$L2917:
  00efa	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  00f01	7e 0c		 jle	 SHORT $L2915
  00f03	c7 85 04 ff ff
	ff ff ff 00 00	 mov	 DWORD PTR tv547[ebp], 65535 ; 0000ffffH
  00f0d	eb 09		 jmp	 SHORT $L2916
$L2915:
  00f0f	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00f12	89 95 04 ff ff
	ff		 mov	 DWORD PTR tv547[ebp], edx
$L2916:
  00f18	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv547[ebp]
  00f1e	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv548[ebp], eax
$L2918:
  00f24	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv548[ebp]
  00f2a	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  00f2d	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00f30	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  00f34	66 89 02	 mov	 WORD PTR [edx], ax

; 1909 :         piDst += cChan;

  00f37	8b 4d b8	 mov	 ecx, DWORD PTR _cChan$[ebp]
  00f3a	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00f3d	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00f40	89 45 bc	 mov	 DWORD PTR _piDst$[ebp], eax

; 1910 :         RECORD_SIGNBIT_FAST;

  00f43	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00f46	d1 e1		 shl	 ecx, 1
  00f48	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  00f4b	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00f4e	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  00f51	83 e2 01	 and	 edx, 1
  00f54	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00f57	0b c2		 or	 eax, edx
  00f59	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  00f5c	8b 4d d0	 mov	 ecx, DWORD PTR _uiSignbitCount$[ebp]
  00f5f	83 c1 01	 add	 ecx, 1
  00f62	89 4d d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], ecx

; 1911 : 
; 1912 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  00f65	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  00f68	83 ea 04	 sub	 edx, 4
  00f6b	89 55 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], edx
  00f6e	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  00f71	d9 00		 fld	 DWORD PTR [eax]
  00f73	d9 e0		 fchs
  00f75	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00f78	d8 09		 fmul	 DWORD PTR [ecx]
  00f7a	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00f7d	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00f80	83 c2 04	 add	 edx, 4
  00f83	89 55 b4	 mov	 DWORD PTR _piCoef$[ebp], edx

; 1913 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  00f86	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  00f89	50		 push	 eax
  00f8a	e8 00 00 00 00	 call	 @ROUNDF@4
  00f8f	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00f92	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  00f99	7d 0c		 jge	 SHORT $L2921
  00f9b	c7 85 00 ff ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv569[ebp], -65536 ; ffff0000H
  00fa5	eb 2a		 jmp	 SHORT $L2922
$L2921:
  00fa7	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  00fae	7e 0c		 jle	 SHORT $L2919
  00fb0	c7 85 fc fe ff
	ff ff ff 00 00	 mov	 DWORD PTR tv568[ebp], 65535 ; 0000ffffH
  00fba	eb 09		 jmp	 SHORT $L2920
$L2919:
  00fbc	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00fbf	89 8d fc fe ff
	ff		 mov	 DWORD PTR tv568[ebp], ecx
$L2920:
  00fc5	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR tv568[ebp]
  00fcb	89 95 00 ff ff
	ff		 mov	 DWORD PTR tv569[ebp], edx
$L2922:
  00fd1	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR tv569[ebp]
  00fd7	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00fda	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00fdd	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  00fe1	66 89 11	 mov	 WORD PTR [ecx], dx

; 1914 :         piDst += cChan;

  00fe4	8b 45 b8	 mov	 eax, DWORD PTR _cChan$[ebp]
  00fe7	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00fea	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00fed	89 55 bc	 mov	 DWORD PTR _piDst$[ebp], edx

; 1915 :         RECORD_SIGNBIT_FAST;

  00ff0	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00ff3	d1 e0		 shl	 eax, 1
  00ff5	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  00ff8	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00ffb	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  00ffe	83 e1 01	 and	 ecx, 1
  01001	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  01004	0b d1		 or	 edx, ecx
  01006	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  01009	8b 45 d0	 mov	 eax, DWORD PTR _uiSignbitCount$[ebp]
  0100c	83 c0 01	 add	 eax, 1
  0100f	89 45 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax

; 1916 : 
; 1917 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  01012	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  01015	83 e9 04	 sub	 ecx, 4
  01018	89 4d f4	 mov	 DWORD PTR _pfltSinTable$[ebp], ecx
  0101b	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  0101e	d9 02		 fld	 DWORD PTR [edx]
  01020	d9 e0		 fchs
  01022	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  01025	d8 08		 fmul	 DWORD PTR [eax]
  01027	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  0102a	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  0102d	83 c1 04	 add	 ecx, 4
  01030	89 4d b4	 mov	 DWORD PTR _piCoef$[ebp], ecx

; 1918 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  01033	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  01036	52		 push	 edx
  01037	e8 00 00 00 00	 call	 @ROUNDF@4
  0103c	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0103f	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  01046	7d 0c		 jge	 SHORT $L2925
  01048	c7 85 f8 fe ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv590[ebp], -65536 ; ffff0000H
  01052	eb 2a		 jmp	 SHORT $L2926
$L2925:
  01054	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  0105b	7e 0c		 jle	 SHORT $L2923
  0105d	c7 85 f4 fe ff
	ff ff ff 00 00	 mov	 DWORD PTR tv589[ebp], 65535 ; 0000ffffH
  01067	eb 09		 jmp	 SHORT $L2924
$L2923:
  01069	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  0106c	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv589[ebp], eax
$L2924:
  01072	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR tv589[ebp]
  01078	89 8d f8 fe ff
	ff		 mov	 DWORD PTR tv590[ebp], ecx
$L2926:
  0107e	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR tv590[ebp]
  01084	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  01087	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  0108a	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  0108e	66 89 08	 mov	 WORD PTR [eax], cx

; 1919 :         piDst += cChan;

  01091	8b 55 b8	 mov	 edx, DWORD PTR _cChan$[ebp]
  01094	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  01097	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0109a	89 4d bc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 1920 :         RECORD_SIGNBIT_FAST;

  0109d	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  010a0	d1 e2		 shl	 edx, 1
  010a2	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  010a5	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  010a8	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  010ab	83 e0 01	 and	 eax, 1
  010ae	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  010b1	0b c8		 or	 ecx, eax
  010b3	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  010b6	8b 55 d0	 mov	 edx, DWORD PTR _uiSignbitCount$[ebp]
  010b9	83 c2 01	 add	 edx, 1
  010bc	89 55 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], edx

; 1921 : 
; 1922 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  010bf	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  010c2	83 e8 04	 sub	 eax, 4
  010c5	89 45 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], eax
  010c8	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  010cb	d9 01		 fld	 DWORD PTR [ecx]
  010cd	d9 e0		 fchs
  010cf	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  010d2	d8 0a		 fmul	 DWORD PTR [edx]
  010d4	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  010d7	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  010da	83 c0 04	 add	 eax, 4
  010dd	89 45 b4	 mov	 DWORD PTR _piCoef$[ebp], eax

; 1923 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  010e0	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  010e3	51		 push	 ecx
  010e4	e8 00 00 00 00	 call	 @ROUNDF@4
  010e9	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  010ec	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  010f3	7d 0c		 jge	 SHORT $L2929
  010f5	c7 85 f0 fe ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv611[ebp], -65536 ; ffff0000H
  010ff	eb 2a		 jmp	 SHORT $L2930
$L2929:
  01101	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  01108	7e 0c		 jle	 SHORT $L2927
  0110a	c7 85 ec fe ff
	ff ff ff 00 00	 mov	 DWORD PTR tv610[ebp], 65535 ; 0000ffffH
  01114	eb 09		 jmp	 SHORT $L2928
$L2927:
  01116	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  01119	89 95 ec fe ff
	ff		 mov	 DWORD PTR tv610[ebp], edx
$L2928:
  0111f	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR tv610[ebp]
  01125	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv611[ebp], eax
$L2930:
  0112b	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR tv611[ebp]
  01131	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  01134	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  01137	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  0113b	66 89 02	 mov	 WORD PTR [edx], ax

; 1924 :         piDst += cChan;

  0113e	8b 4d b8	 mov	 ecx, DWORD PTR _cChan$[ebp]
  01141	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  01144	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  01147	89 45 bc	 mov	 DWORD PTR _piDst$[ebp], eax

; 1925 :         RECORD_SIGNBIT_FAST;

  0114a	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  0114d	d1 e1		 shl	 ecx, 1
  0114f	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  01152	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  01155	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  01158	83 e2 01	 and	 edx, 1
  0115b	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  0115e	0b c2		 or	 eax, edx
  01160	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  01163	8b 4d d0	 mov	 ecx, DWORD PTR _uiSignbitCount$[ebp]
  01166	83 c1 01	 add	 ecx, 1
  01169	89 4d d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], ecx

; 1926 : 
; 1927 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  0116c	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  0116f	83 ea 04	 sub	 edx, 4
  01172	89 55 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], edx
  01175	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  01178	d9 00		 fld	 DWORD PTR [eax]
  0117a	d9 e0		 fchs
  0117c	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  0117f	d8 09		 fmul	 DWORD PTR [ecx]
  01181	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  01184	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  01187	83 c2 04	 add	 edx, 4
  0118a	89 55 b4	 mov	 DWORD PTR _piCoef$[ebp], edx

; 1928 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  0118d	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  01190	50		 push	 eax
  01191	e8 00 00 00 00	 call	 @ROUNDF@4
  01196	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  01199	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  011a0	7d 0c		 jge	 SHORT $L2933
  011a2	c7 85 e8 fe ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv632[ebp], -65536 ; ffff0000H
  011ac	eb 2a		 jmp	 SHORT $L2934
$L2933:
  011ae	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  011b5	7e 0c		 jle	 SHORT $L2931
  011b7	c7 85 e4 fe ff
	ff ff ff 00 00	 mov	 DWORD PTR tv631[ebp], 65535 ; 0000ffffH
  011c1	eb 09		 jmp	 SHORT $L2932
$L2931:
  011c3	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  011c6	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv631[ebp], ecx
$L2932:
  011cc	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR tv631[ebp]
  011d2	89 95 e8 fe ff
	ff		 mov	 DWORD PTR tv632[ebp], edx
$L2934:
  011d8	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR tv632[ebp]
  011de	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  011e1	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  011e4	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  011e8	66 89 11	 mov	 WORD PTR [ecx], dx

; 1929 :         piDst += cChan;

  011eb	8b 45 b8	 mov	 eax, DWORD PTR _cChan$[ebp]
  011ee	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  011f1	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  011f4	89 55 bc	 mov	 DWORD PTR _piDst$[ebp], edx

; 1930 :         RECORD_SIGNBIT_FAST;

  011f7	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  011fa	d1 e0		 shl	 eax, 1
  011fc	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  011ff	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  01202	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  01205	83 e1 01	 and	 ecx, 1
  01208	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  0120b	0b d1		 or	 edx, ecx
  0120d	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  01210	8b 45 d0	 mov	 eax, DWORD PTR _uiSignbitCount$[ebp]
  01213	83 c0 01	 add	 eax, 1
  01216	89 45 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax

; 1931 : 
; 1932 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  01219	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  0121c	83 e9 04	 sub	 ecx, 4
  0121f	89 4d f4	 mov	 DWORD PTR _pfltSinTable$[ebp], ecx
  01222	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  01225	d9 02		 fld	 DWORD PTR [edx]
  01227	d9 e0		 fchs
  01229	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  0122c	d8 08		 fmul	 DWORD PTR [eax]
  0122e	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  01231	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  01234	83 c1 04	 add	 ecx, 4
  01237	89 4d b4	 mov	 DWORD PTR _piCoef$[ebp], ecx

; 1933 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  0123a	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  0123d	52		 push	 edx
  0123e	e8 00 00 00 00	 call	 @ROUNDF@4
  01243	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  01246	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  0124d	7d 0c		 jge	 SHORT $L2937
  0124f	c7 85 e0 fe ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv653[ebp], -65536 ; ffff0000H
  01259	eb 2a		 jmp	 SHORT $L2938
$L2937:
  0125b	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  01262	7e 0c		 jle	 SHORT $L2935
  01264	c7 85 dc fe ff
	ff ff ff 00 00	 mov	 DWORD PTR tv652[ebp], 65535 ; 0000ffffH
  0126e	eb 09		 jmp	 SHORT $L2936
$L2935:
  01270	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  01273	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv652[ebp], eax
$L2936:
  01279	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv652[ebp]
  0127f	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv653[ebp], ecx
$L2938:
  01285	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR tv653[ebp]
  0128b	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  0128e	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  01291	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  01295	66 89 08	 mov	 WORD PTR [eax], cx

; 1934 :         piDst += cChan;

  01298	8b 55 b8	 mov	 edx, DWORD PTR _cChan$[ebp]
  0129b	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  0129e	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  012a1	89 4d bc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 1935 :         RECORD_SIGNBIT_FAST;

  012a4	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  012a7	d1 e2		 shl	 edx, 1
  012a9	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  012ac	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  012af	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  012b2	83 e0 01	 and	 eax, 1
  012b5	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  012b8	0b c8		 or	 ecx, eax
  012ba	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  012bd	8b 55 d0	 mov	 edx, DWORD PTR _uiSignbitCount$[ebp]
  012c0	83 c2 01	 add	 edx, 1
  012c3	89 55 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], edx

; 1936 : 
; 1937 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  012c6	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  012c9	83 e8 04	 sub	 eax, 4
  012cc	89 45 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], eax
  012cf	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  012d2	d9 01		 fld	 DWORD PTR [ecx]
  012d4	d9 e0		 fchs
  012d6	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  012d9	d8 0a		 fmul	 DWORD PTR [edx]
  012db	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  012de	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  012e1	83 c0 04	 add	 eax, 4
  012e4	89 45 b4	 mov	 DWORD PTR _piCoef$[ebp], eax

; 1938 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  012e7	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  012ea	51		 push	 ecx
  012eb	e8 00 00 00 00	 call	 @ROUNDF@4
  012f0	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  012f3	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  012fa	7d 0c		 jge	 SHORT $L2941
  012fc	c7 85 d8 fe ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv674[ebp], -65536 ; ffff0000H
  01306	eb 2a		 jmp	 SHORT $L2942
$L2941:
  01308	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  0130f	7e 0c		 jle	 SHORT $L2939
  01311	c7 85 d4 fe ff
	ff ff ff 00 00	 mov	 DWORD PTR tv673[ebp], 65535 ; 0000ffffH
  0131b	eb 09		 jmp	 SHORT $L2940
$L2939:
  0131d	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  01320	89 95 d4 fe ff
	ff		 mov	 DWORD PTR tv673[ebp], edx
$L2940:
  01326	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR tv673[ebp]
  0132c	89 85 d8 fe ff
	ff		 mov	 DWORD PTR tv674[ebp], eax
$L2942:
  01332	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR tv674[ebp]
  01338	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  0133b	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  0133e	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  01342	66 89 02	 mov	 WORD PTR [edx], ax

; 1939 :         piDst += cChan;

  01345	8b 4d b8	 mov	 ecx, DWORD PTR _cChan$[ebp]
  01348	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  0134b	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0134e	89 45 bc	 mov	 DWORD PTR _piDst$[ebp], eax

; 1940 :         RECORD_SIGNBIT_FAST;

  01351	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  01354	d1 e1		 shl	 ecx, 1
  01356	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  01359	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  0135c	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  0135f	83 e2 01	 and	 edx, 1
  01362	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  01365	0b c2		 or	 eax, edx
  01367	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  0136a	8b 4d d0	 mov	 ecx, DWORD PTR _uiSignbitCount$[ebp]
  0136d	83 c1 01	 add	 ecx, 1
  01370	89 4d d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], ecx

; 1941 : 
; 1942 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  01373	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  01376	83 ea 04	 sub	 edx, 4
  01379	89 55 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], edx
  0137c	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  0137f	d9 00		 fld	 DWORD PTR [eax]
  01381	d9 e0		 fchs
  01383	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  01386	d8 09		 fmul	 DWORD PTR [ecx]
  01388	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  0138b	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  0138e	83 c2 04	 add	 edx, 4
  01391	89 55 b4	 mov	 DWORD PTR _piCoef$[ebp], edx

; 1943 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  01394	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  01397	50		 push	 eax
  01398	e8 00 00 00 00	 call	 @ROUNDF@4
  0139d	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  013a0	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  013a7	7d 0c		 jge	 SHORT $L2945
  013a9	c7 85 d0 fe ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv695[ebp], -65536 ; ffff0000H
  013b3	eb 2a		 jmp	 SHORT $L2946
$L2945:
  013b5	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  013bc	7e 0c		 jle	 SHORT $L2943
  013be	c7 85 cc fe ff
	ff ff ff 00 00	 mov	 DWORD PTR tv694[ebp], 65535 ; 0000ffffH
  013c8	eb 09		 jmp	 SHORT $L2944
$L2943:
  013ca	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  013cd	89 8d cc fe ff
	ff		 mov	 DWORD PTR tv694[ebp], ecx
$L2944:
  013d3	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR tv694[ebp]
  013d9	89 95 d0 fe ff
	ff		 mov	 DWORD PTR tv695[ebp], edx
$L2946:
  013df	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR tv695[ebp]
  013e5	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  013e8	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  013eb	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  013ef	66 89 11	 mov	 WORD PTR [ecx], dx

; 1944 :         piDst += cChan;

  013f2	8b 45 b8	 mov	 eax, DWORD PTR _cChan$[ebp]
  013f5	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  013f8	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  013fb	89 55 bc	 mov	 DWORD PTR _piDst$[ebp], edx

; 1945 :         RECORD_SIGNBIT_FAST;

  013fe	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  01401	d1 e0		 shl	 eax, 1
  01403	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  01406	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  01409	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  0140c	83 e1 01	 and	 ecx, 1
  0140f	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  01412	0b d1		 or	 edx, ecx
  01414	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  01417	8b 45 d0	 mov	 eax, DWORD PTR _uiSignbitCount$[ebp]
  0141a	83 c0 01	 add	 eax, 1
  0141d	89 45 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax

; 1946 : 
; 1947 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  01420	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  01423	83 e9 04	 sub	 ecx, 4
  01426	89 4d f4	 mov	 DWORD PTR _pfltSinTable$[ebp], ecx
  01429	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  0142c	d9 02		 fld	 DWORD PTR [edx]
  0142e	d9 e0		 fchs
  01430	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  01433	d8 08		 fmul	 DWORD PTR [eax]
  01435	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  01438	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  0143b	83 c1 04	 add	 ecx, 4
  0143e	89 4d b4	 mov	 DWORD PTR _piCoef$[ebp], ecx

; 1948 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  01441	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  01444	52		 push	 edx
  01445	e8 00 00 00 00	 call	 @ROUNDF@4
  0144a	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0144d	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  01454	7d 0c		 jge	 SHORT $L2949
  01456	c7 85 c8 fe ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv716[ebp], -65536 ; ffff0000H
  01460	eb 2a		 jmp	 SHORT $L2950
$L2949:
  01462	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  01469	7e 0c		 jle	 SHORT $L2947
  0146b	c7 85 c4 fe ff
	ff ff ff 00 00	 mov	 DWORD PTR tv715[ebp], 65535 ; 0000ffffH
  01475	eb 09		 jmp	 SHORT $L2948
$L2947:
  01477	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  0147a	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv715[ebp], eax
$L2948:
  01480	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv715[ebp]
  01486	89 8d c8 fe ff
	ff		 mov	 DWORD PTR tv716[ebp], ecx
$L2950:
  0148c	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR tv716[ebp]
  01492	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  01495	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  01498	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  0149c	66 89 08	 mov	 WORD PTR [eax], cx

; 1949 :         piDst += cChan;

  0149f	8b 55 b8	 mov	 edx, DWORD PTR _cChan$[ebp]
  014a2	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  014a5	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  014a8	89 4d bc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 1950 :         RECORD_SIGNBIT_FAST;

  014ab	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  014ae	d1 e2		 shl	 edx, 1
  014b0	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  014b3	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  014b6	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  014b9	83 e0 01	 and	 eax, 1
  014bc	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  014bf	0b c8		 or	 ecx, eax
  014c1	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  014c4	8b 55 d0	 mov	 edx, DWORD PTR _uiSignbitCount$[ebp]
  014c7	83 c2 01	 add	 edx, 1
  014ca	89 55 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], edx

; 1951 : 
; 1952 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  014cd	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  014d0	83 e8 04	 sub	 eax, 4
  014d3	89 45 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], eax
  014d6	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  014d9	d9 01		 fld	 DWORD PTR [ecx]
  014db	d9 e0		 fchs
  014dd	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  014e0	d8 0a		 fmul	 DWORD PTR [edx]
  014e2	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  014e5	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  014e8	83 c0 04	 add	 eax, 4
  014eb	89 45 b4	 mov	 DWORD PTR _piCoef$[ebp], eax

; 1953 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  014ee	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  014f1	51		 push	 ecx
  014f2	e8 00 00 00 00	 call	 @ROUNDF@4
  014f7	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  014fa	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  01501	7d 0c		 jge	 SHORT $L2953
  01503	c7 85 c0 fe ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv737[ebp], -65536 ; ffff0000H
  0150d	eb 2a		 jmp	 SHORT $L2954
$L2953:
  0150f	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  01516	7e 0c		 jle	 SHORT $L2951
  01518	c7 85 bc fe ff
	ff ff ff 00 00	 mov	 DWORD PTR tv736[ebp], 65535 ; 0000ffffH
  01522	eb 09		 jmp	 SHORT $L2952
$L2951:
  01524	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  01527	89 95 bc fe ff
	ff		 mov	 DWORD PTR tv736[ebp], edx
$L2952:
  0152d	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv736[ebp]
  01533	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv737[ebp], eax
$L2954:
  01539	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv737[ebp]
  0153f	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  01542	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  01545	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  01549	66 89 02	 mov	 WORD PTR [edx], ax

; 1954 :         piDst += cChan;

  0154c	8b 4d b8	 mov	 ecx, DWORD PTR _cChan$[ebp]
  0154f	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  01552	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  01555	89 45 bc	 mov	 DWORD PTR _piDst$[ebp], eax

; 1955 :         RECORD_SIGNBIT_FAST;

  01558	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  0155b	d1 e1		 shl	 ecx, 1
  0155d	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  01560	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  01563	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  01566	83 e2 01	 and	 edx, 1
  01569	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  0156c	0b c2		 or	 eax, edx
  0156e	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  01571	8b 4d d0	 mov	 ecx, DWORD PTR _uiSignbitCount$[ebp]
  01574	83 c1 01	 add	 ecx, 1
  01577	89 4d d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], ecx

; 1956 : 
; 1957 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  0157a	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  0157d	83 ea 04	 sub	 edx, 4
  01580	89 55 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], edx
  01583	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  01586	d9 00		 fld	 DWORD PTR [eax]
  01588	d9 e0		 fchs
  0158a	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  0158d	d8 09		 fmul	 DWORD PTR [ecx]
  0158f	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  01592	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  01595	83 c2 04	 add	 edx, 4
  01598	89 55 b4	 mov	 DWORD PTR _piCoef$[ebp], edx

; 1958 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  0159b	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  0159e	50		 push	 eax
  0159f	e8 00 00 00 00	 call	 @ROUNDF@4
  015a4	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  015a7	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  015ae	7d 0c		 jge	 SHORT $L2957
  015b0	c7 85 b8 fe ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv758[ebp], -65536 ; ffff0000H
  015ba	eb 2a		 jmp	 SHORT $L2958
$L2957:
  015bc	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  015c3	7e 0c		 jle	 SHORT $L2955
  015c5	c7 85 b4 fe ff
	ff ff ff 00 00	 mov	 DWORD PTR tv757[ebp], 65535 ; 0000ffffH
  015cf	eb 09		 jmp	 SHORT $L2956
$L2955:
  015d1	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  015d4	89 8d b4 fe ff
	ff		 mov	 DWORD PTR tv757[ebp], ecx
$L2956:
  015da	8b 95 b4 fe ff
	ff		 mov	 edx, DWORD PTR tv757[ebp]
  015e0	89 95 b8 fe ff
	ff		 mov	 DWORD PTR tv758[ebp], edx
$L2958:
  015e6	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR tv758[ebp]
  015ec	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  015ef	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  015f2	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  015f6	66 89 11	 mov	 WORD PTR [ecx], dx

; 1959 :         piDst += cChan;

  015f9	8b 45 b8	 mov	 eax, DWORD PTR _cChan$[ebp]
  015fc	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  015ff	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  01602	89 55 bc	 mov	 DWORD PTR _piDst$[ebp], edx

; 1960 :         RECORD_SIGNBIT_FAST;

  01605	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  01608	d1 e0		 shl	 eax, 1
  0160a	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  0160d	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  01610	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  01613	83 e1 01	 and	 ecx, 1
  01616	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  01619	0b d1		 or	 edx, ecx
  0161b	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  0161e	8b 45 d0	 mov	 eax, DWORD PTR _uiSignbitCount$[ebp]
  01621	83 c0 01	 add	 eax, 1
  01624	89 45 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax

; 1961 : 
; 1962 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  01627	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  0162a	83 e9 04	 sub	 ecx, 4
  0162d	89 4d f4	 mov	 DWORD PTR _pfltSinTable$[ebp], ecx
  01630	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  01633	d9 02		 fld	 DWORD PTR [edx]
  01635	d9 e0		 fchs
  01637	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  0163a	d8 08		 fmul	 DWORD PTR [eax]
  0163c	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  0163f	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  01642	83 c1 04	 add	 ecx, 4
  01645	89 4d b4	 mov	 DWORD PTR _piCoef$[ebp], ecx

; 1963 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  01648	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  0164b	52		 push	 edx
  0164c	e8 00 00 00 00	 call	 @ROUNDF@4
  01651	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  01654	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  0165b	7d 0c		 jge	 SHORT $L2961
  0165d	c7 85 b0 fe ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv779[ebp], -65536 ; ffff0000H
  01667	eb 2a		 jmp	 SHORT $L2962
$L2961:
  01669	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  01670	7e 0c		 jle	 SHORT $L2959
  01672	c7 85 ac fe ff
	ff ff ff 00 00	 mov	 DWORD PTR tv778[ebp], 65535 ; 0000ffffH
  0167c	eb 09		 jmp	 SHORT $L2960
$L2959:
  0167e	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  01681	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv778[ebp], eax
$L2960:
  01687	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv778[ebp]
  0168d	89 8d b0 fe ff
	ff		 mov	 DWORD PTR tv779[ebp], ecx
$L2962:
  01693	8b 95 b0 fe ff
	ff		 mov	 edx, DWORD PTR tv779[ebp]
  01699	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  0169c	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  0169f	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  016a3	66 89 08	 mov	 WORD PTR [eax], cx

; 1964 :         piDst += cChan;

  016a6	8b 55 b8	 mov	 edx, DWORD PTR _cChan$[ebp]
  016a9	8b 45 bc	 mov	 eax, DWORD PTR _piDst$[ebp]
  016ac	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  016af	89 4d bc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 1965 :         RECORD_SIGNBIT_FAST;

  016b2	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  016b5	d1 e2		 shl	 edx, 1
  016b7	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  016ba	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  016bd	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  016c0	83 e0 01	 and	 eax, 1
  016c3	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  016c6	0b c8		 or	 ecx, eax
  016c8	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  016cb	8b 55 d0	 mov	 edx, DWORD PTR _uiSignbitCount$[ebp]
  016ce	83 c2 01	 add	 edx, 1
  016d1	89 55 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], edx

; 1966 : 
; 1967 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  016d4	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  016d7	83 e8 04	 sub	 eax, 4
  016da	89 45 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], eax
  016dd	8b 4d f4	 mov	 ecx, DWORD PTR _pfltSinTable$[ebp]
  016e0	d9 01		 fld	 DWORD PTR [ecx]
  016e2	d9 e0		 fchs
  016e4	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  016e7	d8 0a		 fmul	 DWORD PTR [edx]
  016e9	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  016ec	8b 45 b4	 mov	 eax, DWORD PTR _piCoef$[ebp]
  016ef	83 c0 04	 add	 eax, 4
  016f2	89 45 b4	 mov	 DWORD PTR _piCoef$[ebp], eax

; 1968 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  016f5	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  016f8	51		 push	 ecx
  016f9	e8 00 00 00 00	 call	 @ROUNDF@4
  016fe	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  01701	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  01708	7d 0c		 jge	 SHORT $L2965
  0170a	c7 85 a8 fe ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv800[ebp], -65536 ; ffff0000H
  01714	eb 2a		 jmp	 SHORT $L2966
$L2965:
  01716	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  0171d	7e 0c		 jle	 SHORT $L2963
  0171f	c7 85 a4 fe ff
	ff ff ff 00 00	 mov	 DWORD PTR tv799[ebp], 65535 ; 0000ffffH
  01729	eb 09		 jmp	 SHORT $L2964
$L2963:
  0172b	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  0172e	89 95 a4 fe ff
	ff		 mov	 DWORD PTR tv799[ebp], edx
$L2964:
  01734	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv799[ebp]
  0173a	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv800[ebp], eax
$L2966:
  01740	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv800[ebp]
  01746	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  01749	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  0174c	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  01750	66 89 02	 mov	 WORD PTR [edx], ax

; 1969 :         piDst += cChan;

  01753	8b 4d b8	 mov	 ecx, DWORD PTR _cChan$[ebp]
  01756	8b 55 bc	 mov	 edx, DWORD PTR _piDst$[ebp]
  01759	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0175c	89 45 bc	 mov	 DWORD PTR _piDst$[ebp], eax

; 1970 :         RECORD_SIGNBIT_FAST;

  0175f	8b 4d e8	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  01762	d1 e1		 shl	 ecx, 1
  01764	89 4d e8	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx
  01767	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  0176a	c1 fa 1f	 sar	 edx, 31			; 0000001fH
  0176d	83 e2 01	 and	 edx, 1
  01770	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  01773	0b c2		 or	 eax, edx
  01775	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  01778	8b 4d d0	 mov	 ecx, DWORD PTR _uiSignbitCount$[ebp]
  0177b	83 c1 01	 add	 ecx, 1
  0177e	89 4d d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], ecx

; 1971 : 
; 1972 :         *piDstSign = (I16) uiSignbitData;                                       

  01781	8b 55 ac	 mov	 edx, DWORD PTR _piDstSign$[ebp]
  01784	66 8b 45 e8	 mov	 ax, WORD PTR _uiSignbitData$[ebp]
  01788	66 89 02	 mov	 WORD PTR [edx], ax

; 1973 :         piDstSign += 1;                                                      

  0178b	8b 4d ac	 mov	 ecx, DWORD PTR _piDstSign$[ebp]
  0178e	83 c1 02	 add	 ecx, 2
  01791	89 4d ac	 mov	 DWORD PTR _piDstSign$[ebp], ecx

; 1974 :         uiSignbitCount = 0;                                                     

  01794	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _uiSignbitCount$[ebp], 0

; 1975 :     }

  0179b	e9 f3 f4 ff ff	 jmp	 $L2326
$L2327:

; 1976 :     for (iLoopCnt=0; iLoopCnt < iLoopBy1; iLoopCnt++,i++)    {

  017a0	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _iLoopCnt$[ebp], 0
  017a7	eb 12		 jmp	 SHORT $L2425
$L2426:
  017a9	8b 55 c8	 mov	 edx, DWORD PTR _iLoopCnt$[ebp]
  017ac	83 c2 01	 add	 edx, 1
  017af	89 55 c8	 mov	 DWORD PTR _iLoopCnt$[ebp], edx
  017b2	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  017b5	83 c0 01	 add	 eax, 1
  017b8	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L2425:
  017bb	8b 4d c8	 mov	 ecx, DWORD PTR _iLoopCnt$[ebp]
  017be	3b 4d cc	 cmp	 ecx, DWORD PTR _iLoopBy1$[ebp]
  017c1	0f 8d d9 00 00
	00		 jge	 $L2427

; 1977 : 
; 1978 :         cfResult = INT_FROM_COEF( MULT_BP2(-(*--pfltSinTable),*piCoef++) );

  017c7	8b 55 f4	 mov	 edx, DWORD PTR _pfltSinTable$[ebp]
  017ca	83 ea 04	 sub	 edx, 4
  017cd	89 55 f4	 mov	 DWORD PTR _pfltSinTable$[ebp], edx
  017d0	8b 45 f4	 mov	 eax, DWORD PTR _pfltSinTable$[ebp]
  017d3	d9 00		 fld	 DWORD PTR [eax]
  017d5	d9 e0		 fchs
  017d7	8b 4d b4	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  017da	d8 09		 fmul	 DWORD PTR [ecx]
  017dc	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  017df	8b 55 b4	 mov	 edx, DWORD PTR _piCoef$[ebp]
  017e2	83 c2 04	 add	 edx, 4
  017e5	89 55 b4	 mov	 DWORD PTR _piCoef$[ebp], edx

; 1979 :         
; 1980 :         ROUND_SATURATE_STORE( piDst, cfResult, I17_MIN, I17_MAX, iResult );

  017e8	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  017eb	50		 push	 eax
  017ec	e8 00 00 00 00	 call	 @ROUNDF@4
  017f1	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  017f4	81 7d d8 00 00
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -65536 ; ffff0000H
  017fb	7d 0c		 jge	 SHORT $L2969
  017fd	c7 85 a0 fe ff
	ff 00 00 ff ff	 mov	 DWORD PTR tv825[ebp], -65536 ; ffff0000H
  01807	eb 2a		 jmp	 SHORT $L2970
$L2969:
  01809	81 7d d8 ff ff
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 65535 ; 0000ffffH
  01810	7e 0c		 jle	 SHORT $L2967
  01812	c7 85 9c fe ff
	ff ff ff 00 00	 mov	 DWORD PTR tv824[ebp], 65535 ; 0000ffffH
  0181c	eb 09		 jmp	 SHORT $L2968
$L2967:
  0181e	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  01821	89 8d 9c fe ff
	ff		 mov	 DWORD PTR tv824[ebp], ecx
$L2968:
  01827	8b 95 9c fe ff
	ff		 mov	 edx, DWORD PTR tv824[ebp]
  0182d	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv825[ebp], edx
$L2970:
  01833	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR tv825[ebp]
  01839	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0183c	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  0183f	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  01843	66 89 11	 mov	 WORD PTR [ecx], dx

; 1981 : 
; 1982 :         piDst += cChan;

  01846	8b 45 b8	 mov	 eax, DWORD PTR _cChan$[ebp]
  01849	8b 4d bc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  0184c	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0184f	89 55 bc	 mov	 DWORD PTR _piDst$[ebp], edx

; 1983 : 
; 1984 :         RECORD_SIGNBIT(iResult, piDstSign, uiSignbitData,
; 1985 :             uiSignbitCount, 1);

  01852	8b 45 e8	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  01855	d1 e0		 shl	 eax, 1
  01857	89 45 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  0185a	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  0185d	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  01860	83 e1 01	 and	 ecx, 1
  01863	8b 55 e8	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  01866	0b d1		 or	 edx, ecx
  01868	89 55 e8	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  0186b	8b 45 d0	 mov	 eax, DWORD PTR _uiSignbitCount$[ebp]
  0186e	83 c0 01	 add	 eax, 1
  01871	89 45 d0	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax
  01874	83 7d d0 10	 cmp	 DWORD PTR _uiSignbitCount$[ebp], 16 ; 00000010H
  01878	72 21		 jb	 SHORT $L2434
  0187a	8b 4d ac	 mov	 ecx, DWORD PTR _piDstSign$[ebp]
  0187d	66 8b 55 e8	 mov	 dx, WORD PTR _uiSignbitData$[ebp]
  01881	66 89 11	 mov	 WORD PTR [ecx], dx
  01884	8b 45 ac	 mov	 eax, DWORD PTR _piDstSign$[ebp]
  01887	83 c0 02	 add	 eax, 2
  0188a	89 45 ac	 mov	 DWORD PTR _piDstSign$[ebp], eax
  0188d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _uiSignbitData$[ebp], 0
  01894	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _uiSignbitCount$[ebp], 0
$L2434:

; 1986 : 
; 1987 :     }

  0189b	e9 09 ff ff ff	 jmp	 $L2426
$L2427:

; 1988 : 
; 1989 :     ppcinfo->m_iCurrGetPCM_SubFrame = (I16)i;       //protect ourself from multiple calls

  018a0	8b 4d 0c	 mov	 ecx, DWORD PTR _ppcinfo$[ebp]
  018a3	66 8b 55 f0	 mov	 dx, WORD PTR _i$[ebp]
  018a7	66 89 51 38	 mov	 WORD PTR [ecx+56], dx

; 1990 : 
; 1991 : #ifdef PROFILE
; 1992 :     FunctionProfileStop(&fp);
; 1993 : #endif
; 1994 :     return WMA_OK;

  018ab	a1 00 00 00 00	 mov	 eax, DWORD PTR _WMA_OK

; 1995 : }

  018b0	8b e5		 mov	 esp, ebp
  018b2	5d		 pop	 ebp
  018b3	c2 0c 00	 ret	 12			; 0000000cH
_auSaveHistoryMono_XDS@12 ENDP
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\wmalib\x86\macros.h
WMADEC	ENDS
;	COMDAT @ROUNDF@4
WMADEC	SEGMENT
_intval$ = -8
_f$ = 8
@ROUNDF@4 PROC NEAR					; COMDAT

; 35   : INLINE Int FASTCALL ROUNDF(float f) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 36   :     __int64 intval;
; 37   :     _asm {
; 38   :         fld         f

  00006	d9 45 08	 fld	 DWORD PTR _f$[ebp]

; 39   :         fistp       dword ptr [intval]

  00009	db 5d f8	 fistp	 DWORD PTR _intval$[ebp]

; 40   :         mov         eax,dword ptr [intval]

  0000c	8b 45 f8	 mov	 eax, DWORD PTR _intval$[ebp]

; 41   :     }
; 42   : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
@ROUNDF@4 ENDP
WMADEC	ENDS
PUBLIC	_auReconstruct_X86_XDS@16
PUBLIC	_auReconMono_X86_XDS@20
EXTRN	_auReconstruct_XDS@16:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\wmalib\wmadec_s\x86.c
;	COMDAT _auReconstruct_X86_XDS@16
WMADEC	SEGMENT
_hr$ = -8
_iChannel$ = -4
_pau$ = 8
_piOutput$ = 12
_pcSampleGet$ = 16
_fForceTransformAll$ = 20
_auReconstruct_X86_XDS@16 PROC NEAR			; COMDAT

; 2000 : WMARESULT auReconstruct_X86 (CAudioObject* pau, I16* piOutput, I16* pcSampleGet, Bool fForceTransformAll){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2001 :     Int iChannel;
; 2002 :     WMARESULT hr;
; 2003 :     for (iChannel = 0; iChannel < pau->m_cChannel; iChannel++)

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _iChannel$[ebp], 0
  0000d	eb 09		 jmp	 SHORT $L2448
$L2449:
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _iChannel$[ebp]
  00012	83 c0 01	 add	 eax, 1
  00015	89 45 fc	 mov	 DWORD PTR _iChannel$[ebp], eax
$L2448:
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  0001b	0f b7 51 58	 movzx	 edx, WORD PTR [ecx+88]
  0001f	39 55 fc	 cmp	 DWORD PTR _iChannel$[ebp], edx
  00022	7d 5f		 jge	 SHORT $L2450

; 2004 :     {
; 2005 :         hr = (auReconMono_X86) (pau, 
; 2006 :                           pau->m_rgpcinfo + iChannel, 
; 2007 :                           piOutput + iChannel,  
; 2008 :                           (I16*)pcSampleGet,
; 2009 :                           fForceTransformAll);

  00024	8b 45 14	 mov	 eax, DWORD PTR _fForceTransformAll$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 10	 mov	 ecx, DWORD PTR _pcSampleGet$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _iChannel$[ebp]
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _piOutput$[ebp]
  00032	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00035	51		 push	 ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _iChannel$[ebp]
  00039	6b d2 70	 imul	 edx, 112		; 00000070H
  0003c	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  0003f	03 90 a0 03 00
	00		 add	 edx, DWORD PTR [eax+928]
  00045	52		 push	 edx
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 _auReconMono_X86_XDS@20
  0004f	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 2010 :         if (hr != WMA_OK){

  00052	8b 55 f8	 mov	 edx, DWORD PTR _hr$[ebp]
  00055	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _WMA_OK
  0005b	74 24		 je	 SHORT $L2452

; 2011 :             pau->aupfnReconstruct = auReconstruct;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00060	c7 80 f8 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1016], OFFSET FLAT:_auReconstruct_XDS@16

; 2012 :             return auReconstruct(pau,piOutput,pcSampleGet,fForceTransformAll); 

  0006a	8b 4d 14	 mov	 ecx, DWORD PTR _fForceTransformAll$[ebp]
  0006d	51		 push	 ecx
  0006e	8b 55 10	 mov	 edx, DWORD PTR _pcSampleGet$[ebp]
  00071	52		 push	 edx
  00072	8b 45 0c	 mov	 eax, DWORD PTR _piOutput$[ebp]
  00075	50		 push	 eax
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 _auReconstruct_XDS@16
  0007f	eb 05		 jmp	 SHORT $L2445
$L2452:

; 2013 :         }
; 2014 :     }

  00081	eb 8c		 jmp	 SHORT $L2449
$L2450:

; 2015 :     return hr;

  00083	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L2445:

; 2016 : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 10 00	 ret	 16			; 00000010H
_auReconstruct_X86_XDS@16 ENDP
; Function compile flags: /Odt
WMADEC	ENDS
;	COMDAT _auReconMono_X86_XDS@20
WMADEC	SEGMENT
tv943 = -396
tv944 = -392
tv933 = -388
tv920 = -384
tv921 = -380
tv897 = -376
tv898 = -372
tv874 = -368
tv875 = -364
tv851 = -360
tv852 = -356
tv828 = -352
tv829 = -348
tv805 = -344
tv806 = -340
tv782 = -336
tv783 = -332
tv759 = -328
tv760 = -324
tv736 = -320
tv737 = -316
tv713 = -312
tv714 = -308
tv690 = -304
tv691 = -300
tv667 = -296
tv668 = -292
tv644 = -288
tv645 = -284
tv621 = -280
tv622 = -276
tv598 = -272
tv599 = -268
tv575 = -264
tv576 = -260
tv541 = -256
tv528 = -252
tv529 = -248
tv506 = -244
tv507 = -240
tv484 = -236
tv485 = -232
tv462 = -228
tv463 = -224
tv440 = -220
tv441 = -216
tv418 = -212
tv419 = -208
tv396 = -204
tv397 = -200
tv374 = -196
tv375 = -192
tv352 = -188
tv353 = -184
tv330 = -180
tv331 = -176
tv308 = -172
tv309 = -168
tv286 = -164
tv287 = -160
tv264 = -156
tv265 = -152
tv242 = -148
tv243 = -144
tv220 = -140
tv221 = -136
tv198 = -132
tv199 = -128
tv133 = -124
_iLoopBy1$2560 = -120
_iLoopCnt$2561 = -116
_iLoopBy16$2559 = -112
_iLoopBy1$2502 = -108
_iLoopCnt$2503 = -104
_iLoopBy16$2501 = -100
_c_iSignOffset$2493 = -96
_c_iOffset$2492 = -92
_piSin$ = -88
_iCoefRecurQ2$ = -84
_piSrcSign$ = -80
_bp2Sin1$ = -76
_piCoef$ = -72
_iSegEnd$ = -68
_iEnd$ = -64
_cChan$ = -60
_iCoefRecurQ3$ = -56
_piDst$ = -52
_bp2Step$ = -48
_uiSignbitCount$ = -44
_iResult$ = -40
_cfResult$ = -36
_cSubFrameSampleQuad$ = -32
_cSubFrameSampleHalf$ = -28
_bp2Sin$ = -24
_uiSignbitData$ = -20
_bp2Cos$ = -16
_i$ = -12
_piSrc$ = -8
_bp2Cos1$ = -4
_pau$ = 8
_ppcinfo$ = 12
_piOutput$ = 16
_pcSampleGet$ = 20
_fForceTransformAll$ = 24
_auReconMono_X86_XDS@20 PROC NEAR			; COMDAT

; 2030 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 01 00
	00		 sub	 esp, 396		; 0000018cH

; 2031 :     //all starting from the begining of this frame
; 2032 :     //official starting of a subfrm (including leading zeros)
; 2033 :     //case 1 (Large -> Small):  starts later than what's been reconstructed w/o leading zeros
; 2034 :     //                          in this case dst should be skiped (this may mean memcpy from prev)
; 2035 :     //                          src and coef are fine
; 2036 :     //                          
; 2037 :     //case 2 (Small -> Large):  starts earler than what's been reconstructed but all leading zeros
; 2038 :     //                          in this case dst 
; 2039 : 
; 2040 :     CoefType *piCoef;   //floating vlaue = (float)*piCoef/(1<<5)  assuming TRANSFORM_FRACT_BITS = 5
; 2041 :     Int i, iEnd, iSegEnd;
; 2042 :     I16 *piSrc, *piDst; 
; 2043 :     I32 iResult;
; 2044 :     CoefType cfResult;
; 2045 :     // get local copies of these values which are used frequently or repeatedly (helps optimization)
; 2046 :     Int cChan = pau->m_cChannel;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  0000c	0f b7 48 58	 movzx	 ecx, WORD PTR [eax+88]
  00010	89 4d c4	 mov	 DWORD PTR _cChan$[ebp], ecx

; 2047 :     Int cSubFrameSampleHalf = pau->m_cSubFrameSampleHalfAdjusted;

  00013	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00016	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  0001c	89 45 e4	 mov	 DWORD PTR _cSubFrameSampleHalf$[ebp], eax

; 2048 :     Int cSubFrameSampleQuad = pau->m_cSubFrameSampleQuadAdjusted;

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00022	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  00028	89 55 e0	 mov	 DWORD PTR _cSubFrameSampleQuad$[ebp], edx

; 2049 :     Int iCoefRecurQ2 = pau->m_iCoefRecurQ2;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  0002e	8b 88 90 03 00
	00		 mov	 ecx, DWORD PTR [eax+912]
  00034	89 4d ac	 mov	 DWORD PTR _iCoefRecurQ2$[ebp], ecx

; 2050 :     Int iCoefRecurQ3 = pau->m_iCoefRecurQ3;

  00037	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  0003a	8b 82 94 03 00
	00		 mov	 eax, DWORD PTR [edx+916]
  00040	89 45 c8	 mov	 DWORD PTR _iCoefRecurQ3$[ebp], eax

; 2051 :     BP2Type bp2Sin  = *((BP2Type*)(&ppcinfo->m_iSin));

  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _ppcinfo$[ebp]
  00046	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00049	89 55 e8	 mov	 DWORD PTR _bp2Sin$[ebp], edx

; 2052 :     BP2Type bp2Cos  = *((BP2Type*)(&ppcinfo->m_iCos));

  0004c	8b 45 0c	 mov	 eax, DWORD PTR _ppcinfo$[ebp]
  0004f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00052	89 4d f0	 mov	 DWORD PTR _bp2Cos$[ebp], ecx

; 2053 :     BP2Type bp2Sin1 = *((BP2Type*)(&ppcinfo->m_iSin1));

  00055	8b 55 0c	 mov	 edx, DWORD PTR _ppcinfo$[ebp]
  00058	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0005b	89 45 b4	 mov	 DWORD PTR _bp2Sin1$[ebp], eax

; 2054 :     BP2Type bp2Cos1 = *((BP2Type*)(&ppcinfo->m_iCos1));

  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR _ppcinfo$[ebp]
  00061	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  00064	89 55 fc	 mov	 DWORD PTR _bp2Cos1$[ebp], edx

; 2055 :     BP2Type bp2Step = *((BP2Type*)(&ppcinfo->m_iStep));

  00067	8b 45 0c	 mov	 eax, DWORD PTR _ppcinfo$[ebp]
  0006a	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  0006d	89 4d d0	 mov	 DWORD PTR _bp2Step$[ebp], ecx

; 2056 :     float *piSin = pau->m_piSinForRecon;

  00070	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00073	8b 82 28 04 00
	00		 mov	 eax, DWORD PTR [edx+1064]
  00079	89 45 a8	 mov	 DWORD PTR _piSin$[ebp], eax

; 2057 : 
; 2058 : #ifndef PREVOUTPUT_16BITS
; 2059 :     U16    *piSrcSign;
; 2060 :     I32     uiSignbitData;
; 2061 :     U32     uiSignbitCount;
; 2062 : #endif  // PREVOUTPUT_16BITS
; 2063 : #ifdef PROFILE
; 2064 :     FunctionProfile fp;
; 2065 :     FunctionProfileStart(&fp,RECON_MONO_PROFILE);
; 2066 : #endif
; 2067 : 
; 2068 :     //persistent states
; 2069 :     i = ppcinfo->m_iCurrGetPCM_SubFrame;       //current position in a frame

  0007c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppcinfo$[ebp]
  0007f	0f bf 51 38	 movsx	 edx, WORD PTR [ecx+56]
  00083	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx

; 2070 :     piCoef = (CoefType*)ppcinfo->m_rgiCoefReconCurr; 

  00086	8b 45 0c	 mov	 eax, DWORD PTR _ppcinfo$[ebp]
  00089	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0008c	89 4d b8	 mov	 DWORD PTR _piCoef$[ebp], ecx

; 2071 :     piSrc = ppcinfo->m_piPrevOutputCurr;

  0008f	8b 55 0c	 mov	 edx, DWORD PTR _ppcinfo$[ebp]
  00092	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00095	89 45 f8	 mov	 DWORD PTR _piSrc$[ebp], eax

; 2072 : 
; 2073 :     //eventually we'll use piOutput directly
; 2074 :     piDst = piOutput;

  00098	8b 4d 10	 mov	 ecx, DWORD PTR _piOutput$[ebp]
  0009b	89 4d cc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 2075 : 
; 2076 :     iEnd = i + *pcSampleGet;

  0009e	8b 55 14	 mov	 edx, DWORD PTR _pcSampleGet$[ebp]
  000a1	0f bf 02	 movsx	 eax, WORD PTR [edx]
  000a4	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  000a7	03 c8		 add	 ecx, eax
  000a9	89 4d c0	 mov	 DWORD PTR _iEnd$[ebp], ecx

; 2077 :     *pcSampleGet = 0;

  000ac	8b 55 14	 mov	 edx, DWORD PTR _pcSampleGet$[ebp]
  000af	66 c7 02 00 00	 mov	 WORD PTR [edx], 0

; 2078 : 
; 2079 :     CALC_SIGN_OFFSETS(ppcinfo->m_piPrevOutput, piSrc, ppcinfo->m_piPrevOutputSign, piSrcSign, 
; 2080 :         uiSignbitData, uiSignbitCount, cChan)

  000b4	8b 45 0c	 mov	 eax, DWORD PTR _ppcinfo$[ebp]
  000b7	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  000ba	2b 50 40	 sub	 edx, DWORD PTR [eax+64]
  000bd	d1 fa		 sar	 edx, 1
  000bf	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  000c2	83 e9 01	 sub	 ecx, 1
  000c5	d3 fa		 sar	 edx, cl
  000c7	89 55 a4	 mov	 DWORD PTR _c_iOffset$2492[ebp], edx
  000ca	8b 45 a4	 mov	 eax, DWORD PTR _c_iOffset$2492[ebp]
  000cd	83 c0 0f	 add	 eax, 15			; 0000000fH
  000d0	c1 e8 04	 shr	 eax, 4
  000d3	89 45 a0	 mov	 DWORD PTR _c_iSignOffset$2493[ebp], eax
  000d6	8b 4d 0c	 mov	 ecx, DWORD PTR _ppcinfo$[ebp]
  000d9	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000dc	8b 45 a0	 mov	 eax, DWORD PTR _c_iSignOffset$2493[ebp]
  000df	8d 0c 42	 lea	 ecx, DWORD PTR [edx+eax*2]
  000e2	89 4d b0	 mov	 DWORD PTR _piSrcSign$[ebp], ecx
  000e5	8b 45 a4	 mov	 eax, DWORD PTR _c_iOffset$2492[ebp]
  000e8	33 d2		 xor	 edx, edx
  000ea	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000ef	f7 f1		 div	 ecx
  000f1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000f6	2b c2		 sub	 eax, edx
  000f8	89 45 d4	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax
  000fb	83 7d d4 10	 cmp	 DWORD PTR _uiSignbitCount$[ebp], 16 ; 00000010H
  000ff	75 14		 jne	 SHORT $L2497
  00101	8b 4d b0	 mov	 ecx, DWORD PTR _piSrcSign$[ebp]
  00104	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00107	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  0010a	8b 45 b0	 mov	 eax, DWORD PTR _piSrcSign$[ebp]
  0010d	83 c0 02	 add	 eax, 2
  00110	89 45 b0	 mov	 DWORD PTR _piSrcSign$[ebp], eax
  00113	eb 0a		 jmp	 SHORT $L2498
$L2497:
  00115	8b 4d b0	 mov	 ecx, DWORD PTR _piSrcSign$[ebp]
  00118	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  0011c	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
$L2498:

; 2081 :     ASSERT_SIGNBIT_POINTER(piSrcSign);
; 2082 : 
; 2083 :     if (i < cSubFrameSampleQuad) 

  0011f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00122	3b 45 e0	 cmp	 eax, DWORD PTR _cSubFrameSampleQuad$[ebp]
  00125	0f 8d 22 0c 00
	00		 jge	 $L2499

; 2084 :     {
; 2085 :         iSegEnd = min (cSubFrameSampleQuad, iEnd);

  0012b	8b 4d e0	 mov	 ecx, DWORD PTR _cSubFrameSampleQuad$[ebp]
  0012e	3b 4d c0	 cmp	 ecx, DWORD PTR _iEnd$[ebp]
  00131	7d 08		 jge	 SHORT $L2981
  00133	8b 55 e0	 mov	 edx, DWORD PTR _cSubFrameSampleQuad$[ebp]
  00136	89 55 84	 mov	 DWORD PTR tv133[ebp], edx
  00139	eb 06		 jmp	 SHORT $L2982
$L2981:
  0013b	8b 45 c0	 mov	 eax, DWORD PTR _iEnd$[ebp]
  0013e	89 45 84	 mov	 DWORD PTR tv133[ebp], eax
$L2982:
  00141	8b 4d 84	 mov	 ecx, DWORD PTR tv133[ebp]
  00144	89 4d bc	 mov	 DWORD PTR _iSegEnd$[ebp], ecx

; 2086 :         if ( i < iSegEnd )

  00147	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0014a	3b 55 bc	 cmp	 edx, DWORD PTR _iSegEnd$[ebp]
  0014d	0f 8d fa 0b 00
	00		 jge	 $L2499

; 2087 :         {
; 2088 :             Int iLoopBy16,iLoopBy1,iLoopCnt;
; 2089 :             iLoopBy16 = (iSegEnd - i) >> 4;

  00153	8b 45 bc	 mov	 eax, DWORD PTR _iSegEnd$[ebp]
  00156	2b 45 f4	 sub	 eax, DWORD PTR _i$[ebp]
  00159	c1 f8 04	 sar	 eax, 4
  0015c	89 45 9c	 mov	 DWORD PTR _iLoopBy16$2501[ebp], eax

; 2090 :             iLoopBy1  = (iSegEnd - i) & 0xF;

  0015f	8b 4d bc	 mov	 ecx, DWORD PTR _iSegEnd$[ebp]
  00162	2b 4d f4	 sub	 ecx, DWORD PTR _i$[ebp]
  00165	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00168	89 4d 94	 mov	 DWORD PTR _iLoopBy1$2502[ebp], ecx

; 2091 :             (*pcSampleGet) += (I16)(iLoopBy16<<4);

  0016b	8b 55 9c	 mov	 edx, DWORD PTR _iLoopBy16$2501[ebp]
  0016e	c1 e2 04	 shl	 edx, 4
  00171	0f bf c2	 movsx	 eax, dx
  00174	8b 4d 14	 mov	 ecx, DWORD PTR _pcSampleGet$[ebp]
  00177	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  0017a	03 d0		 add	 edx, eax
  0017c	8b 45 14	 mov	 eax, DWORD PTR _pcSampleGet$[ebp]
  0017f	66 89 10	 mov	 WORD PTR [eax], dx

; 2092 :             i += (iLoopBy16<<4);

  00182	8b 4d 9c	 mov	 ecx, DWORD PTR _iLoopBy16$2501[ebp]
  00185	c1 e1 04	 shl	 ecx, 4
  00188	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0018b	03 d1		 add	 edx, ecx
  0018d	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx

; 2093 :             for (iLoopCnt = 0; iLoopCnt < iLoopBy16; iLoopCnt++)    {

  00190	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _iLoopCnt$2503[ebp], 0
  00197	eb 09		 jmp	 SHORT $L2505
$L2506:
  00199	8b 45 98	 mov	 eax, DWORD PTR _iLoopCnt$2503[ebp]
  0019c	83 c0 01	 add	 eax, 1
  0019f	89 45 98	 mov	 DWORD PTR _iLoopCnt$2503[ebp], eax
$L2505:
  001a2	8b 4d 98	 mov	 ecx, DWORD PTR _iLoopCnt$2503[ebp]
  001a5	3b 4d 9c	 cmp	 ecx, DWORD PTR _iLoopBy16$2501[ebp]
  001a8	0f 8d 81 0b 00
	00		 jge	 $L2507

; 2094 :                 uiSignbitData<<=16;

  001ae	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  001b1	c1 e2 10	 shl	 edx, 16			; 00000010H
  001b4	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx

; 2095 : 
; 2096 :                 COMBINE_SIGNBIT_FAST

  001b7	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  001ba	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  001bd	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  001c2	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  001c5	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  001c8	0b c2		 or	 eax, edx
  001ca	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  001cd	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  001d0	d1 e0		 shl	 eax, 1
  001d2	89 45 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], eax

; 2097 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  001d5	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  001d8	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  001db	d9 01		 fld	 DWORD PTR [ecx]
  001dd	d8 0a		 fmul	 DWORD PTR [edx]
  001df	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  001e2	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  001e5	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  001e8	83 c0 04	 add	 eax, 4
  001eb	89 45 b8	 mov	 DWORD PTR _piCoef$[ebp], eax
  001ee	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  001f1	83 c1 04	 add	 ecx, 4
  001f4	89 4d a8	 mov	 DWORD PTR _piSin$[ebp], ecx

; 2098 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  001f7	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  001fa	52		 push	 edx
  001fb	e8 00 00 00 00	 call	 @ROUNDF@4
  00200	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00203	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  0020a	7d 09		 jge	 SHORT $L2985
  0020c	c7 45 80 00 80
	ff ff		 mov	 DWORD PTR tv199[ebp], -32768 ; ffff8000H
  00213	eb 27		 jmp	 SHORT $L2986
$L2985:
  00215	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  0021c	7e 0c		 jle	 SHORT $L2983
  0021e	c7 85 7c ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv198[ebp], 32767 ; 00007fffH
  00228	eb 09		 jmp	 SHORT $L2984
$L2983:
  0022a	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  0022d	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv198[ebp], eax
$L2984:
  00233	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv198[ebp]
  00239	89 4d 80	 mov	 DWORD PTR tv199[ebp], ecx
$L2986:
  0023c	8b 55 80	 mov	 edx, DWORD PTR tv199[ebp]
  0023f	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  00242	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  00245	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  00249	66 89 08	 mov	 WORD PTR [eax], cx

; 2099 :                 piSrc += cChan;

  0024c	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  0024f	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  00252	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00255	89 4d f8	 mov	 DWORD PTR _piSrc$[ebp], ecx

; 2100 :                 piDst += cChan;

  00258	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  0025b	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  0025e	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00261	89 4d cc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 2101 : 
; 2102 :                 COMBINE_SIGNBIT_FAST

  00264	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  00267	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  0026a	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  00270	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  00273	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00276	0b d1		 or	 edx, ecx
  00278	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  0027b	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  0027e	d1 e2		 shl	 edx, 1
  00280	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx

; 2103 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  00283	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  00286	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00289	d9 00		 fld	 DWORD PTR [eax]
  0028b	d8 09		 fmul	 DWORD PTR [ecx]
  0028d	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  00290	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00293	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00296	83 c2 04	 add	 edx, 4
  00299	89 55 b8	 mov	 DWORD PTR _piCoef$[ebp], edx
  0029c	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  0029f	83 c0 04	 add	 eax, 4
  002a2	89 45 a8	 mov	 DWORD PTR _piSin$[ebp], eax

; 2104 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  002a5	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  002a8	51		 push	 ecx
  002a9	e8 00 00 00 00	 call	 @ROUNDF@4
  002ae	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  002b1	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  002b8	7d 0c		 jge	 SHORT $L2989
  002ba	c7 85 78 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv221[ebp], -32768 ; ffff8000H
  002c4	eb 2a		 jmp	 SHORT $L2990
$L2989:
  002c6	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  002cd	7e 0c		 jle	 SHORT $L2987
  002cf	c7 85 74 ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv220[ebp], 32767 ; 00007fffH
  002d9	eb 09		 jmp	 SHORT $L2988
$L2987:
  002db	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  002de	89 95 74 ff ff
	ff		 mov	 DWORD PTR tv220[ebp], edx
$L2988:
  002e4	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR tv220[ebp]
  002ea	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv221[ebp], eax
$L2990:
  002f0	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv221[ebp]
  002f6	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  002f9	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  002fc	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  00300	66 89 02	 mov	 WORD PTR [edx], ax

; 2105 :                 piSrc += cChan;

  00303	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  00306	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  00309	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0030c	89 45 f8	 mov	 DWORD PTR _piSrc$[ebp], eax

; 2106 :                 piDst += cChan;

  0030f	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  00312	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00315	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00318	89 45 cc	 mov	 DWORD PTR _piDst$[ebp], eax

; 2107 : 
; 2108 :                 COMBINE_SIGNBIT_FAST                                                         

  0031b	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  0031e	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  00321	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  00327	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  0032a	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0032d	0b c8		 or	 ecx, eax
  0032f	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  00332	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00335	d1 e1		 shl	 ecx, 1
  00337	89 4d ec	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx

; 2109 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  0033a	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  0033d	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00340	d9 02		 fld	 DWORD PTR [edx]
  00342	d8 08		 fmul	 DWORD PTR [eax]
  00344	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  00347	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  0034a	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  0034d	83 c1 04	 add	 ecx, 4
  00350	89 4d b8	 mov	 DWORD PTR _piCoef$[ebp], ecx
  00353	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  00356	83 c2 04	 add	 edx, 4
  00359	89 55 a8	 mov	 DWORD PTR _piSin$[ebp], edx

; 2110 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  0035c	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 @ROUNDF@4
  00365	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00368	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  0036f	7d 0c		 jge	 SHORT $L2993
  00371	c7 85 70 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv243[ebp], -32768 ; ffff8000H
  0037b	eb 2a		 jmp	 SHORT $L2994
$L2993:
  0037d	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00384	7e 0c		 jle	 SHORT $L2991
  00386	c7 85 6c ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv242[ebp], 32767 ; 00007fffH
  00390	eb 09		 jmp	 SHORT $L2992
$L2991:
  00392	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00395	89 8d 6c ff ff
	ff		 mov	 DWORD PTR tv242[ebp], ecx
$L2992:
  0039b	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR tv242[ebp]
  003a1	89 95 70 ff ff
	ff		 mov	 DWORD PTR tv243[ebp], edx
$L2994:
  003a7	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv243[ebp]
  003ad	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  003b0	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  003b3	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  003b7	66 89 11	 mov	 WORD PTR [ecx], dx

; 2111 :                 piSrc += cChan;

  003ba	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  003bd	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  003c0	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  003c3	89 55 f8	 mov	 DWORD PTR _piSrc$[ebp], edx

; 2112 :                 piDst += cChan;

  003c6	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  003c9	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  003cc	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  003cf	89 55 cc	 mov	 DWORD PTR _piDst$[ebp], edx

; 2113 : 
; 2114 :                 COMBINE_SIGNBIT_FAST                                                         

  003d2	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  003d5	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  003d8	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  003dd	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  003e0	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  003e3	0b c2		 or	 eax, edx
  003e5	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  003e8	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  003eb	d1 e0		 shl	 eax, 1
  003ed	89 45 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], eax

; 2115 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  003f0	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  003f3	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  003f6	d9 01		 fld	 DWORD PTR [ecx]
  003f8	d8 0a		 fmul	 DWORD PTR [edx]
  003fa	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  003fd	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00400	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00403	83 c0 04	 add	 eax, 4
  00406	89 45 b8	 mov	 DWORD PTR _piCoef$[ebp], eax
  00409	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  0040c	83 c1 04	 add	 ecx, 4
  0040f	89 4d a8	 mov	 DWORD PTR _piSin$[ebp], ecx

; 2116 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00412	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  00415	52		 push	 edx
  00416	e8 00 00 00 00	 call	 @ROUNDF@4
  0041b	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0041e	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00425	7d 0c		 jge	 SHORT $L2997
  00427	c7 85 68 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv265[ebp], -32768 ; ffff8000H
  00431	eb 2a		 jmp	 SHORT $L2998
$L2997:
  00433	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  0043a	7e 0c		 jle	 SHORT $L2995
  0043c	c7 85 64 ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv264[ebp], 32767 ; 00007fffH
  00446	eb 09		 jmp	 SHORT $L2996
$L2995:
  00448	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  0044b	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv264[ebp], eax
$L2996:
  00451	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR tv264[ebp]
  00457	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv265[ebp], ecx
$L2998:
  0045d	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR tv265[ebp]
  00463	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  00466	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  00469	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  0046d	66 89 08	 mov	 WORD PTR [eax], cx

; 2117 :                 piSrc += cChan;

  00470	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  00473	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  00476	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00479	89 4d f8	 mov	 DWORD PTR _piSrc$[ebp], ecx

; 2118 :                 piDst += cChan;

  0047c	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  0047f	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  00482	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00485	89 4d cc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 2119 : 
; 2120 :                 COMBINE_SIGNBIT_FAST                                                         

  00488	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  0048b	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  0048e	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  00494	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  00497	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0049a	0b d1		 or	 edx, ecx
  0049c	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  0049f	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  004a2	d1 e2		 shl	 edx, 1
  004a4	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx

; 2121 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  004a7	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  004aa	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  004ad	d9 00		 fld	 DWORD PTR [eax]
  004af	d8 09		 fmul	 DWORD PTR [ecx]
  004b1	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  004b4	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  004b7	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  004ba	83 c2 04	 add	 edx, 4
  004bd	89 55 b8	 mov	 DWORD PTR _piCoef$[ebp], edx
  004c0	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  004c3	83 c0 04	 add	 eax, 4
  004c6	89 45 a8	 mov	 DWORD PTR _piSin$[ebp], eax

; 2122 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  004c9	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  004cc	51		 push	 ecx
  004cd	e8 00 00 00 00	 call	 @ROUNDF@4
  004d2	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  004d5	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  004dc	7d 0c		 jge	 SHORT $L3001
  004de	c7 85 60 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv287[ebp], -32768 ; ffff8000H
  004e8	eb 2a		 jmp	 SHORT $L3002
$L3001:
  004ea	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  004f1	7e 0c		 jle	 SHORT $L2999
  004f3	c7 85 5c ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv286[ebp], 32767 ; 00007fffH
  004fd	eb 09		 jmp	 SHORT $L3000
$L2999:
  004ff	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00502	89 95 5c ff ff
	ff		 mov	 DWORD PTR tv286[ebp], edx
$L3000:
  00508	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR tv286[ebp]
  0050e	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
$L3002:
  00514	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp]
  0051a	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  0051d	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00520	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  00524	66 89 02	 mov	 WORD PTR [edx], ax

; 2123 :                 piSrc += cChan;

  00527	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  0052a	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  0052d	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00530	89 45 f8	 mov	 DWORD PTR _piSrc$[ebp], eax

; 2124 :                 piDst += cChan;

  00533	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  00536	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00539	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0053c	89 45 cc	 mov	 DWORD PTR _piDst$[ebp], eax

; 2125 : 
; 2126 :                 COMBINE_SIGNBIT_FAST                                                         

  0053f	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00542	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  00545	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  0054b	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  0054e	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00551	0b c8		 or	 ecx, eax
  00553	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  00556	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00559	d1 e1		 shl	 ecx, 1
  0055b	89 4d ec	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx

; 2127 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  0055e	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  00561	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00564	d9 02		 fld	 DWORD PTR [edx]
  00566	d8 08		 fmul	 DWORD PTR [eax]
  00568	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  0056b	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  0056e	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00571	83 c1 04	 add	 ecx, 4
  00574	89 4d b8	 mov	 DWORD PTR _piCoef$[ebp], ecx
  00577	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  0057a	83 c2 04	 add	 edx, 4
  0057d	89 55 a8	 mov	 DWORD PTR _piSin$[ebp], edx

; 2128 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00580	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  00583	50		 push	 eax
  00584	e8 00 00 00 00	 call	 @ROUNDF@4
  00589	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0058c	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00593	7d 0c		 jge	 SHORT $L3005
  00595	c7 85 58 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv309[ebp], -32768 ; ffff8000H
  0059f	eb 2a		 jmp	 SHORT $L3006
$L3005:
  005a1	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  005a8	7e 0c		 jle	 SHORT $L3003
  005aa	c7 85 54 ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv308[ebp], 32767 ; 00007fffH
  005b4	eb 09		 jmp	 SHORT $L3004
$L3003:
  005b6	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  005b9	89 8d 54 ff ff
	ff		 mov	 DWORD PTR tv308[ebp], ecx
$L3004:
  005bf	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR tv308[ebp]
  005c5	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv309[ebp], edx
$L3006:
  005cb	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv309[ebp]
  005d1	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  005d4	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  005d7	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  005db	66 89 11	 mov	 WORD PTR [ecx], dx

; 2129 :                 piSrc += cChan;

  005de	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  005e1	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  005e4	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  005e7	89 55 f8	 mov	 DWORD PTR _piSrc$[ebp], edx

; 2130 :                 piDst += cChan;

  005ea	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  005ed	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  005f0	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  005f3	89 55 cc	 mov	 DWORD PTR _piDst$[ebp], edx

; 2131 : 
; 2132 :                 COMBINE_SIGNBIT_FAST                                                         

  005f6	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  005f9	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  005fc	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  00601	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  00604	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00607	0b c2		 or	 eax, edx
  00609	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0060c	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  0060f	d1 e0		 shl	 eax, 1
  00611	89 45 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], eax

; 2133 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  00614	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  00617	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  0061a	d9 01		 fld	 DWORD PTR [ecx]
  0061c	d8 0a		 fmul	 DWORD PTR [edx]
  0061e	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  00621	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00624	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00627	83 c0 04	 add	 eax, 4
  0062a	89 45 b8	 mov	 DWORD PTR _piCoef$[ebp], eax
  0062d	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  00630	83 c1 04	 add	 ecx, 4
  00633	89 4d a8	 mov	 DWORD PTR _piSin$[ebp], ecx

; 2134 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00636	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  00639	52		 push	 edx
  0063a	e8 00 00 00 00	 call	 @ROUNDF@4
  0063f	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00642	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00649	7d 0c		 jge	 SHORT $L3009
  0064b	c7 85 50 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv331[ebp], -32768 ; ffff8000H
  00655	eb 2a		 jmp	 SHORT $L3010
$L3009:
  00657	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  0065e	7e 0c		 jle	 SHORT $L3007
  00660	c7 85 4c ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv330[ebp], 32767 ; 00007fffH
  0066a	eb 09		 jmp	 SHORT $L3008
$L3007:
  0066c	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  0066f	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv330[ebp], eax
$L3008:
  00675	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv330[ebp]
  0067b	89 8d 50 ff ff
	ff		 mov	 DWORD PTR tv331[ebp], ecx
$L3010:
  00681	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR tv331[ebp]
  00687	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  0068a	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  0068d	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  00691	66 89 08	 mov	 WORD PTR [eax], cx

; 2135 :                 piSrc += cChan;

  00694	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  00697	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  0069a	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0069d	89 4d f8	 mov	 DWORD PTR _piSrc$[ebp], ecx

; 2136 :                 piDst += cChan;

  006a0	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  006a3	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  006a6	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  006a9	89 4d cc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 2137 : 
; 2138 :                 COMBINE_SIGNBIT_FAST                                                         

  006ac	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  006af	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  006b2	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  006b8	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  006bb	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  006be	0b d1		 or	 edx, ecx
  006c0	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  006c3	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  006c6	d1 e2		 shl	 edx, 1
  006c8	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx

; 2139 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  006cb	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  006ce	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  006d1	d9 00		 fld	 DWORD PTR [eax]
  006d3	d8 09		 fmul	 DWORD PTR [ecx]
  006d5	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  006d8	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  006db	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  006de	83 c2 04	 add	 edx, 4
  006e1	89 55 b8	 mov	 DWORD PTR _piCoef$[ebp], edx
  006e4	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  006e7	83 c0 04	 add	 eax, 4
  006ea	89 45 a8	 mov	 DWORD PTR _piSin$[ebp], eax

; 2140 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  006ed	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  006f0	51		 push	 ecx
  006f1	e8 00 00 00 00	 call	 @ROUNDF@4
  006f6	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  006f9	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00700	7d 0c		 jge	 SHORT $L3013
  00702	c7 85 48 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv353[ebp], -32768 ; ffff8000H
  0070c	eb 2a		 jmp	 SHORT $L3014
$L3013:
  0070e	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00715	7e 0c		 jle	 SHORT $L3011
  00717	c7 85 44 ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv352[ebp], 32767 ; 00007fffH
  00721	eb 09		 jmp	 SHORT $L3012
$L3011:
  00723	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00726	89 95 44 ff ff
	ff		 mov	 DWORD PTR tv352[ebp], edx
$L3012:
  0072c	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv352[ebp]
  00732	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv353[ebp], eax
$L3014:
  00738	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv353[ebp]
  0073e	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  00741	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00744	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  00748	66 89 02	 mov	 WORD PTR [edx], ax

; 2141 :                 piSrc += cChan;

  0074b	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  0074e	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  00751	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00754	89 45 f8	 mov	 DWORD PTR _piSrc$[ebp], eax

; 2142 :                 piDst += cChan;

  00757	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  0075a	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  0075d	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00760	89 45 cc	 mov	 DWORD PTR _piDst$[ebp], eax

; 2143 : 
; 2144 :                 COMBINE_SIGNBIT_FAST                                                         

  00763	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00766	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  00769	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  0076f	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  00772	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00775	0b c8		 or	 ecx, eax
  00777	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  0077a	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  0077d	d1 e1		 shl	 ecx, 1
  0077f	89 4d ec	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx

; 2145 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  00782	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  00785	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00788	d9 02		 fld	 DWORD PTR [edx]
  0078a	d8 08		 fmul	 DWORD PTR [eax]
  0078c	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  0078f	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00792	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00795	83 c1 04	 add	 ecx, 4
  00798	89 4d b8	 mov	 DWORD PTR _piCoef$[ebp], ecx
  0079b	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  0079e	83 c2 04	 add	 edx, 4
  007a1	89 55 a8	 mov	 DWORD PTR _piSin$[ebp], edx

; 2146 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  007a4	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  007a7	50		 push	 eax
  007a8	e8 00 00 00 00	 call	 @ROUNDF@4
  007ad	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  007b0	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  007b7	7d 0c		 jge	 SHORT $L3017
  007b9	c7 85 40 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv375[ebp], -32768 ; ffff8000H
  007c3	eb 2a		 jmp	 SHORT $L3018
$L3017:
  007c5	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  007cc	7e 0c		 jle	 SHORT $L3015
  007ce	c7 85 3c ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv374[ebp], 32767 ; 00007fffH
  007d8	eb 09		 jmp	 SHORT $L3016
$L3015:
  007da	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  007dd	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv374[ebp], ecx
$L3016:
  007e3	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR tv374[ebp]
  007e9	89 95 40 ff ff
	ff		 mov	 DWORD PTR tv375[ebp], edx
$L3018:
  007ef	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv375[ebp]
  007f5	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  007f8	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  007fb	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  007ff	66 89 11	 mov	 WORD PTR [ecx], dx

; 2147 :                 piSrc += cChan;

  00802	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  00805	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  00808	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0080b	89 55 f8	 mov	 DWORD PTR _piSrc$[ebp], edx

; 2148 :                 piDst += cChan;

  0080e	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  00811	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00814	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00817	89 55 cc	 mov	 DWORD PTR _piDst$[ebp], edx

; 2149 : 
; 2150 :                 COMBINE_SIGNBIT_FAST                                                         

  0081a	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  0081d	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00820	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  00825	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  00828	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0082b	0b c2		 or	 eax, edx
  0082d	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00830	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00833	d1 e0		 shl	 eax, 1
  00835	89 45 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], eax

; 2151 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  00838	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  0083b	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  0083e	d9 01		 fld	 DWORD PTR [ecx]
  00840	d8 0a		 fmul	 DWORD PTR [edx]
  00842	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  00845	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00848	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  0084b	83 c0 04	 add	 eax, 4
  0084e	89 45 b8	 mov	 DWORD PTR _piCoef$[ebp], eax
  00851	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  00854	83 c1 04	 add	 ecx, 4
  00857	89 4d a8	 mov	 DWORD PTR _piSin$[ebp], ecx

; 2152 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  0085a	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  0085d	52		 push	 edx
  0085e	e8 00 00 00 00	 call	 @ROUNDF@4
  00863	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00866	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  0086d	7d 0c		 jge	 SHORT $L3021
  0086f	c7 85 38 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv397[ebp], -32768 ; ffff8000H
  00879	eb 2a		 jmp	 SHORT $L3022
$L3021:
  0087b	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00882	7e 0c		 jle	 SHORT $L3019
  00884	c7 85 34 ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv396[ebp], 32767 ; 00007fffH
  0088e	eb 09		 jmp	 SHORT $L3020
$L3019:
  00890	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  00893	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv396[ebp], eax
$L3020:
  00899	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR tv396[ebp]
  0089f	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv397[ebp], ecx
$L3022:
  008a5	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR tv397[ebp]
  008ab	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  008ae	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  008b1	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  008b5	66 89 08	 mov	 WORD PTR [eax], cx

; 2153 :                 piSrc += cChan;

  008b8	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  008bb	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  008be	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  008c1	89 4d f8	 mov	 DWORD PTR _piSrc$[ebp], ecx

; 2154 :                 piDst += cChan;

  008c4	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  008c7	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  008ca	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  008cd	89 4d cc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 2155 : 
; 2156 :                 COMBINE_SIGNBIT_FAST                                                         

  008d0	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  008d3	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  008d6	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  008dc	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  008df	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  008e2	0b d1		 or	 edx, ecx
  008e4	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  008e7	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  008ea	d1 e2		 shl	 edx, 1
  008ec	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx

; 2157 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  008ef	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  008f2	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  008f5	d9 00		 fld	 DWORD PTR [eax]
  008f7	d8 09		 fmul	 DWORD PTR [ecx]
  008f9	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  008fc	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  008ff	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00902	83 c2 04	 add	 edx, 4
  00905	89 55 b8	 mov	 DWORD PTR _piCoef$[ebp], edx
  00908	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  0090b	83 c0 04	 add	 eax, 4
  0090e	89 45 a8	 mov	 DWORD PTR _piSin$[ebp], eax

; 2158 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00911	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  00914	51		 push	 ecx
  00915	e8 00 00 00 00	 call	 @ROUNDF@4
  0091a	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0091d	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00924	7d 0c		 jge	 SHORT $L3025
  00926	c7 85 30 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv419[ebp], -32768 ; ffff8000H
  00930	eb 2a		 jmp	 SHORT $L3026
$L3025:
  00932	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00939	7e 0c		 jle	 SHORT $L3023
  0093b	c7 85 2c ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv418[ebp], 32767 ; 00007fffH
  00945	eb 09		 jmp	 SHORT $L3024
$L3023:
  00947	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  0094a	89 95 2c ff ff
	ff		 mov	 DWORD PTR tv418[ebp], edx
$L3024:
  00950	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv418[ebp]
  00956	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv419[ebp], eax
$L3026:
  0095c	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv419[ebp]
  00962	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  00965	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00968	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  0096c	66 89 02	 mov	 WORD PTR [edx], ax

; 2159 :                 piSrc += cChan;

  0096f	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  00972	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  00975	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00978	89 45 f8	 mov	 DWORD PTR _piSrc$[ebp], eax

; 2160 :                 piDst += cChan;

  0097b	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  0097e	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00981	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00984	89 45 cc	 mov	 DWORD PTR _piDst$[ebp], eax

; 2161 : 
; 2162 :                 COMBINE_SIGNBIT_FAST                                                         

  00987	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  0098a	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0098d	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  00993	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  00996	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00999	0b c8		 or	 ecx, eax
  0099b	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  0099e	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  009a1	d1 e1		 shl	 ecx, 1
  009a3	89 4d ec	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx

; 2163 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  009a6	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  009a9	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  009ac	d9 02		 fld	 DWORD PTR [edx]
  009ae	d8 08		 fmul	 DWORD PTR [eax]
  009b0	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  009b3	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  009b6	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  009b9	83 c1 04	 add	 ecx, 4
  009bc	89 4d b8	 mov	 DWORD PTR _piCoef$[ebp], ecx
  009bf	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  009c2	83 c2 04	 add	 edx, 4
  009c5	89 55 a8	 mov	 DWORD PTR _piSin$[ebp], edx

; 2164 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  009c8	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  009cb	50		 push	 eax
  009cc	e8 00 00 00 00	 call	 @ROUNDF@4
  009d1	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  009d4	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  009db	7d 0c		 jge	 SHORT $L3029
  009dd	c7 85 28 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv441[ebp], -32768 ; ffff8000H
  009e7	eb 2a		 jmp	 SHORT $L3030
$L3029:
  009e9	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  009f0	7e 0c		 jle	 SHORT $L3027
  009f2	c7 85 24 ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv440[ebp], 32767 ; 00007fffH
  009fc	eb 09		 jmp	 SHORT $L3028
$L3027:
  009fe	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00a01	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv440[ebp], ecx
$L3028:
  00a07	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv440[ebp]
  00a0d	89 95 28 ff ff
	ff		 mov	 DWORD PTR tv441[ebp], edx
$L3030:
  00a13	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR tv441[ebp]
  00a19	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00a1c	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00a1f	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  00a23	66 89 11	 mov	 WORD PTR [ecx], dx

; 2165 :                 piSrc += cChan;

  00a26	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  00a29	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  00a2c	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00a2f	89 55 f8	 mov	 DWORD PTR _piSrc$[ebp], edx

; 2166 :                 piDst += cChan;

  00a32	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  00a35	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00a38	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00a3b	89 55 cc	 mov	 DWORD PTR _piDst$[ebp], edx

; 2167 : 
; 2168 :                 COMBINE_SIGNBIT_FAST                                                         

  00a3e	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00a41	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00a44	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  00a49	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  00a4c	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00a4f	0b c2		 or	 eax, edx
  00a51	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00a54	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00a57	d1 e0		 shl	 eax, 1
  00a59	89 45 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], eax

; 2169 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  00a5c	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  00a5f	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00a62	d9 01		 fld	 DWORD PTR [ecx]
  00a64	d8 0a		 fmul	 DWORD PTR [edx]
  00a66	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  00a69	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00a6c	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00a6f	83 c0 04	 add	 eax, 4
  00a72	89 45 b8	 mov	 DWORD PTR _piCoef$[ebp], eax
  00a75	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  00a78	83 c1 04	 add	 ecx, 4
  00a7b	89 4d a8	 mov	 DWORD PTR _piSin$[ebp], ecx

; 2170 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00a7e	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  00a81	52		 push	 edx
  00a82	e8 00 00 00 00	 call	 @ROUNDF@4
  00a87	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00a8a	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00a91	7d 0c		 jge	 SHORT $L3033
  00a93	c7 85 20 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv463[ebp], -32768 ; ffff8000H
  00a9d	eb 2a		 jmp	 SHORT $L3034
$L3033:
  00a9f	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00aa6	7e 0c		 jle	 SHORT $L3031
  00aa8	c7 85 1c ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv462[ebp], 32767 ; 00007fffH
  00ab2	eb 09		 jmp	 SHORT $L3032
$L3031:
  00ab4	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  00ab7	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv462[ebp], eax
$L3032:
  00abd	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv462[ebp]
  00ac3	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv463[ebp], ecx
$L3034:
  00ac9	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv463[ebp]
  00acf	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  00ad2	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  00ad5	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  00ad9	66 89 08	 mov	 WORD PTR [eax], cx

; 2171 :                 piSrc += cChan;

  00adc	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  00adf	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  00ae2	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00ae5	89 4d f8	 mov	 DWORD PTR _piSrc$[ebp], ecx

; 2172 :                 piDst += cChan;

  00ae8	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  00aeb	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  00aee	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00af1	89 4d cc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 2173 : 
; 2174 :                 COMBINE_SIGNBIT_FAST                                                         

  00af4	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  00af7	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  00afa	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  00b00	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  00b03	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00b06	0b d1		 or	 edx, ecx
  00b08	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  00b0b	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  00b0e	d1 e2		 shl	 edx, 1
  00b10	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx

; 2175 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  00b13	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  00b16	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00b19	d9 00		 fld	 DWORD PTR [eax]
  00b1b	d8 09		 fmul	 DWORD PTR [ecx]
  00b1d	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  00b20	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00b23	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00b26	83 c2 04	 add	 edx, 4
  00b29	89 55 b8	 mov	 DWORD PTR _piCoef$[ebp], edx
  00b2c	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  00b2f	83 c0 04	 add	 eax, 4
  00b32	89 45 a8	 mov	 DWORD PTR _piSin$[ebp], eax

; 2176 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00b35	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  00b38	51		 push	 ecx
  00b39	e8 00 00 00 00	 call	 @ROUNDF@4
  00b3e	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00b41	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00b48	7d 0c		 jge	 SHORT $L3037
  00b4a	c7 85 18 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv485[ebp], -32768 ; ffff8000H
  00b54	eb 2a		 jmp	 SHORT $L3038
$L3037:
  00b56	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00b5d	7e 0c		 jle	 SHORT $L3035
  00b5f	c7 85 14 ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv484[ebp], 32767 ; 00007fffH
  00b69	eb 09		 jmp	 SHORT $L3036
$L3035:
  00b6b	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00b6e	89 95 14 ff ff
	ff		 mov	 DWORD PTR tv484[ebp], edx
$L3036:
  00b74	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv484[ebp]
  00b7a	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv485[ebp], eax
$L3038:
  00b80	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv485[ebp]
  00b86	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  00b89	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00b8c	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  00b90	66 89 02	 mov	 WORD PTR [edx], ax

; 2177 :                 piSrc += cChan;

  00b93	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  00b96	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  00b99	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00b9c	89 45 f8	 mov	 DWORD PTR _piSrc$[ebp], eax

; 2178 :                 piDst += cChan;

  00b9f	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  00ba2	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00ba5	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00ba8	89 45 cc	 mov	 DWORD PTR _piDst$[ebp], eax

; 2179 : 
; 2180 :                 COMBINE_SIGNBIT_FAST                                                         

  00bab	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00bae	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  00bb1	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  00bb7	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  00bba	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00bbd	0b c8		 or	 ecx, eax
  00bbf	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  00bc2	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00bc5	d1 e1		 shl	 ecx, 1
  00bc7	89 4d ec	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx

; 2181 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  00bca	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  00bcd	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00bd0	d9 02		 fld	 DWORD PTR [edx]
  00bd2	d8 08		 fmul	 DWORD PTR [eax]
  00bd4	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  00bd7	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00bda	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00bdd	83 c1 04	 add	 ecx, 4
  00be0	89 4d b8	 mov	 DWORD PTR _piCoef$[ebp], ecx
  00be3	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  00be6	83 c2 04	 add	 edx, 4
  00be9	89 55 a8	 mov	 DWORD PTR _piSin$[ebp], edx

; 2182 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00bec	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  00bef	50		 push	 eax
  00bf0	e8 00 00 00 00	 call	 @ROUNDF@4
  00bf5	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00bf8	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00bff	7d 0c		 jge	 SHORT $L3041
  00c01	c7 85 10 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv507[ebp], -32768 ; ffff8000H
  00c0b	eb 2a		 jmp	 SHORT $L3042
$L3041:
  00c0d	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00c14	7e 0c		 jle	 SHORT $L3039
  00c16	c7 85 0c ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv506[ebp], 32767 ; 00007fffH
  00c20	eb 09		 jmp	 SHORT $L3040
$L3039:
  00c22	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00c25	89 8d 0c ff ff
	ff		 mov	 DWORD PTR tv506[ebp], ecx
$L3040:
  00c2b	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR tv506[ebp]
  00c31	89 95 10 ff ff
	ff		 mov	 DWORD PTR tv507[ebp], edx
$L3042:
  00c37	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR tv507[ebp]
  00c3d	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00c40	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00c43	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  00c47	66 89 11	 mov	 WORD PTR [ecx], dx

; 2183 :                 piSrc += cChan;

  00c4a	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  00c4d	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  00c50	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00c53	89 55 f8	 mov	 DWORD PTR _piSrc$[ebp], edx

; 2184 :                 piDst += cChan;

  00c56	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  00c59	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00c5c	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00c5f	89 55 cc	 mov	 DWORD PTR _piDst$[ebp], edx

; 2185 : 
; 2186 :                 COMBINE_SIGNBIT_FAST                                                         

  00c62	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00c65	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00c68	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  00c6d	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  00c70	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00c73	0b c2		 or	 eax, edx
  00c75	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00c78	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00c7b	d1 e0		 shl	 eax, 1
  00c7d	89 45 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], eax

; 2187 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );

  00c80	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  00c83	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00c86	d9 01		 fld	 DWORD PTR [ecx]
  00c88	d8 0a		 fmul	 DWORD PTR [edx]
  00c8a	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  00c8d	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00c90	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00c93	83 c0 04	 add	 eax, 4
  00c96	89 45 b8	 mov	 DWORD PTR _piCoef$[ebp], eax
  00c99	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  00c9c	83 c1 04	 add	 ecx, 4
  00c9f	89 4d a8	 mov	 DWORD PTR _piSin$[ebp], ecx

; 2188 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00ca2	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  00ca5	52		 push	 edx
  00ca6	e8 00 00 00 00	 call	 @ROUNDF@4
  00cab	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00cae	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00cb5	7d 0c		 jge	 SHORT $L3045
  00cb7	c7 85 08 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv529[ebp], -32768 ; ffff8000H
  00cc1	eb 2a		 jmp	 SHORT $L3046
$L3045:
  00cc3	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00cca	7e 0c		 jle	 SHORT $L3043
  00ccc	c7 85 04 ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv528[ebp], 32767 ; 00007fffH
  00cd6	eb 09		 jmp	 SHORT $L3044
$L3043:
  00cd8	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  00cdb	89 85 04 ff ff
	ff		 mov	 DWORD PTR tv528[ebp], eax
$L3044:
  00ce1	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR tv528[ebp]
  00ce7	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv529[ebp], ecx
$L3046:
  00ced	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR tv529[ebp]
  00cf3	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  00cf6	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  00cf9	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  00cfd	66 89 08	 mov	 WORD PTR [eax], cx

; 2189 :                 piSrc += cChan;

  00d00	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  00d03	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  00d06	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00d09	89 4d f8	 mov	 DWORD PTR _piSrc$[ebp], ecx

; 2190 :                 piDst += cChan;

  00d0c	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  00d0f	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  00d12	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00d15	89 4d cc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 2191 : 
; 2192 :                 uiSignbitData = *piSrcSign++;                                              

  00d18	8b 55 b0	 mov	 edx, DWORD PTR _piSrcSign$[ebp]
  00d1b	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00d1e	89 45 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], eax
  00d21	8b 4d b0	 mov	 ecx, DWORD PTR _piSrcSign$[ebp]
  00d24	83 c1 02	 add	 ecx, 2
  00d27	89 4d b0	 mov	 DWORD PTR _piSrcSign$[ebp], ecx

; 2193 :             }

  00d2a	e9 6a f4 ff ff	 jmp	 $L2506
$L2507:

; 2194 :             uiSignbitCount = 16;                                                     

  00d2f	c7 45 d4 10 00
	00 00		 mov	 DWORD PTR _uiSignbitCount$[ebp], 16 ; 00000010H

; 2195 :             if (iLoopBy1) return !WMA_OK;

  00d36	83 7d 94 00	 cmp	 DWORD PTR _iLoopBy1$2502[ebp], 0
  00d3a	74 11		 je	 SHORT $L2499
  00d3c	33 c0		 xor	 eax, eax
  00d3e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _WMA_OK, 0
  00d45	0f 94 c0	 sete	 al
  00d48	e9 81 0d 00 00	 jmp	 $L2463
$L2499:

; 2196 : 
; 2197 : /*            for (iLoopCnt = 0; iLoopCnt < iLoopBy1; iLoopCnt++, i++, (*pcSampleGet)++)    {
; 2198 : 
; 2199 :                 COMBINE_SIGNBIT(iResult, *piSrc, piSrcSign, uiSignbitData,
; 2200 :                     uiSignbitCount);
; 2201 : 
; 2202 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef++) + COEF_FROM_INT(iResult) );
; 2203 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );
; 2204 : 
; 2205 :                 piSrc += cChan;
; 2206 :                 piDst += cChan;
; 2207 :             }   */
; 2208 : 
; 2209 :         }
; 2210 :     }
; 2211 :     if (i < iCoefRecurQ2)  

  00d4d	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00d50	3b 55 ac	 cmp	 edx, DWORD PTR _iCoefRecurQ2$[ebp]
  00d53	0f 8d 35 0c 00
	00		 jge	 $L2557

; 2212 :     {
; 2213 :         iSegEnd = min (iCoefRecurQ2, iEnd);

  00d59	8b 45 ac	 mov	 eax, DWORD PTR _iCoefRecurQ2$[ebp]
  00d5c	3b 45 c0	 cmp	 eax, DWORD PTR _iEnd$[ebp]
  00d5f	7d 0b		 jge	 SHORT $L3047
  00d61	8b 4d ac	 mov	 ecx, DWORD PTR _iCoefRecurQ2$[ebp]
  00d64	89 8d 00 ff ff
	ff		 mov	 DWORD PTR tv541[ebp], ecx
  00d6a	eb 09		 jmp	 SHORT $L3048
$L3047:
  00d6c	8b 55 c0	 mov	 edx, DWORD PTR _iEnd$[ebp]
  00d6f	89 95 00 ff ff
	ff		 mov	 DWORD PTR tv541[ebp], edx
$L3048:
  00d75	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR tv541[ebp]
  00d7b	89 45 bc	 mov	 DWORD PTR _iSegEnd$[ebp], eax

; 2214 :         if ( i < iSegEnd )

  00d7e	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00d81	3b 4d bc	 cmp	 ecx, DWORD PTR _iSegEnd$[ebp]
  00d84	0f 8d 04 0c 00
	00		 jge	 $L2557

; 2215 :         {
; 2216 :             Int iLoopBy16,iLoopBy1,iLoopCnt;
; 2217 :             iLoopBy16 = (iSegEnd - i) >> 4;

  00d8a	8b 55 bc	 mov	 edx, DWORD PTR _iSegEnd$[ebp]
  00d8d	2b 55 f4	 sub	 edx, DWORD PTR _i$[ebp]
  00d90	c1 fa 04	 sar	 edx, 4
  00d93	89 55 90	 mov	 DWORD PTR _iLoopBy16$2559[ebp], edx

; 2218 :             iLoopBy1  = (iSegEnd - i) & 0xF;

  00d96	8b 45 bc	 mov	 eax, DWORD PTR _iSegEnd$[ebp]
  00d99	2b 45 f4	 sub	 eax, DWORD PTR _i$[ebp]
  00d9c	83 e0 0f	 and	 eax, 15			; 0000000fH
  00d9f	89 45 88	 mov	 DWORD PTR _iLoopBy1$2560[ebp], eax

; 2219 :             (*pcSampleGet) += (I16)(iLoopBy16<<4);

  00da2	8b 4d 90	 mov	 ecx, DWORD PTR _iLoopBy16$2559[ebp]
  00da5	c1 e1 04	 shl	 ecx, 4
  00da8	0f bf d1	 movsx	 edx, cx
  00dab	8b 45 14	 mov	 eax, DWORD PTR _pcSampleGet$[ebp]
  00dae	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00db1	03 ca		 add	 ecx, edx
  00db3	8b 55 14	 mov	 edx, DWORD PTR _pcSampleGet$[ebp]
  00db6	66 89 0a	 mov	 WORD PTR [edx], cx

; 2220 :             i += (iLoopBy16<<4);

  00db9	8b 45 90	 mov	 eax, DWORD PTR _iLoopBy16$2559[ebp]
  00dbc	c1 e0 04	 shl	 eax, 4
  00dbf	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00dc2	03 c8		 add	 ecx, eax
  00dc4	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx

; 2221 :             for (iLoopCnt = 0;iLoopCnt < iLoopBy16;iLoopCnt++)    {

  00dc7	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _iLoopCnt$2561[ebp], 0
  00dce	eb 09		 jmp	 SHORT $L2563
$L2564:
  00dd0	8b 55 8c	 mov	 edx, DWORD PTR _iLoopCnt$2561[ebp]
  00dd3	83 c2 01	 add	 edx, 1
  00dd6	89 55 8c	 mov	 DWORD PTR _iLoopCnt$2561[ebp], edx
$L2563:
  00dd9	8b 45 8c	 mov	 eax, DWORD PTR _iLoopCnt$2561[ebp]
  00ddc	3b 45 90	 cmp	 eax, DWORD PTR _iLoopBy16$2559[ebp]
  00ddf	0f 8d 8b 0b 00
	00		 jge	 $L2565

; 2222 :                 uiSignbitData<<=16;

  00de5	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00de8	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00deb	89 4d ec	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx

; 2223 : 
; 2224 :                 COMBINE_SIGNBIT_FAST                                                         

  00dee	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  00df1	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  00df4	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  00dfa	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  00dfd	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00e00	0b d1		 or	 edx, ecx
  00e02	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  00e05	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  00e08	d1 e2		 shl	 edx, 1
  00e0a	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx

; 2225 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  00e0d	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00e10	83 e8 04	 sub	 eax, 4
  00e13	89 45 b8	 mov	 DWORD PTR _piCoef$[ebp], eax
  00e16	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00e19	d9 01		 fld	 DWORD PTR [ecx]
  00e1b	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  00e1e	d8 0a		 fmul	 DWORD PTR [edx]
  00e20	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  00e23	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00e26	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  00e29	83 c0 04	 add	 eax, 4
  00e2c	89 45 a8	 mov	 DWORD PTR _piSin$[ebp], eax

; 2226 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00e2f	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  00e32	51		 push	 ecx
  00e33	e8 00 00 00 00	 call	 @ROUNDF@4
  00e38	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00e3b	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00e42	7d 0c		 jge	 SHORT $L3051
  00e44	c7 85 fc fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv576[ebp], -32768 ; ffff8000H
  00e4e	eb 2a		 jmp	 SHORT $L3052
$L3051:
  00e50	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00e57	7e 0c		 jle	 SHORT $L3049
  00e59	c7 85 f8 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv575[ebp], 32767 ; 00007fffH
  00e63	eb 09		 jmp	 SHORT $L3050
$L3049:
  00e65	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  00e68	89 95 f8 fe ff
	ff		 mov	 DWORD PTR tv575[ebp], edx
$L3050:
  00e6e	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR tv575[ebp]
  00e74	89 85 fc fe ff
	ff		 mov	 DWORD PTR tv576[ebp], eax
$L3052:
  00e7a	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR tv576[ebp]
  00e80	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  00e83	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00e86	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  00e8a	66 89 02	 mov	 WORD PTR [edx], ax

; 2227 :                 piSrc += cChan;

  00e8d	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  00e90	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  00e93	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00e96	89 45 f8	 mov	 DWORD PTR _piSrc$[ebp], eax

; 2228 :                 piDst += cChan;

  00e99	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  00e9c	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  00e9f	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00ea2	89 45 cc	 mov	 DWORD PTR _piDst$[ebp], eax

; 2229 : 
; 2230 :                 COMBINE_SIGNBIT_FAST                                                         

  00ea5	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00ea8	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  00eab	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  00eb1	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  00eb4	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00eb7	0b c8		 or	 ecx, eax
  00eb9	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  00ebc	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  00ebf	d1 e1		 shl	 ecx, 1
  00ec1	89 4d ec	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx

; 2231 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  00ec4	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00ec7	83 ea 04	 sub	 edx, 4
  00eca	89 55 b8	 mov	 DWORD PTR _piCoef$[ebp], edx
  00ecd	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00ed0	d9 00		 fld	 DWORD PTR [eax]
  00ed2	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  00ed5	d8 09		 fmul	 DWORD PTR [ecx]
  00ed7	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  00eda	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00edd	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  00ee0	83 c2 04	 add	 edx, 4
  00ee3	89 55 a8	 mov	 DWORD PTR _piSin$[ebp], edx

; 2232 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00ee6	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  00ee9	50		 push	 eax
  00eea	e8 00 00 00 00	 call	 @ROUNDF@4
  00eef	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00ef2	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00ef9	7d 0c		 jge	 SHORT $L3055
  00efb	c7 85 f4 fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv599[ebp], -32768 ; ffff8000H
  00f05	eb 2a		 jmp	 SHORT $L3056
$L3055:
  00f07	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00f0e	7e 0c		 jle	 SHORT $L3053
  00f10	c7 85 f0 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv598[ebp], 32767 ; 00007fffH
  00f1a	eb 09		 jmp	 SHORT $L3054
$L3053:
  00f1c	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00f1f	89 8d f0 fe ff
	ff		 mov	 DWORD PTR tv598[ebp], ecx
$L3054:
  00f25	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR tv598[ebp]
  00f2b	89 95 f4 fe ff
	ff		 mov	 DWORD PTR tv599[ebp], edx
$L3056:
  00f31	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR tv599[ebp]
  00f37	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00f3a	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00f3d	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  00f41	66 89 11	 mov	 WORD PTR [ecx], dx

; 2233 :                 piSrc += cChan;

  00f44	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  00f47	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  00f4a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00f4d	89 55 f8	 mov	 DWORD PTR _piSrc$[ebp], edx

; 2234 :                 piDst += cChan;

  00f50	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  00f53	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00f56	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00f59	89 55 cc	 mov	 DWORD PTR _piDst$[ebp], edx

; 2235 : 
; 2236 :                 COMBINE_SIGNBIT_FAST                                                         

  00f5c	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00f5f	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00f62	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  00f67	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  00f6a	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00f6d	0b c2		 or	 eax, edx
  00f6f	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00f72	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  00f75	d1 e0		 shl	 eax, 1
  00f77	89 45 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], eax

; 2237 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  00f7a	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00f7d	83 e9 04	 sub	 ecx, 4
  00f80	89 4d b8	 mov	 DWORD PTR _piCoef$[ebp], ecx
  00f83	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00f86	d9 02		 fld	 DWORD PTR [edx]
  00f88	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  00f8b	d8 08		 fmul	 DWORD PTR [eax]
  00f8d	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  00f90	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  00f93	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  00f96	83 c1 04	 add	 ecx, 4
  00f99	89 4d a8	 mov	 DWORD PTR _piSin$[ebp], ecx

; 2238 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00f9c	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  00f9f	52		 push	 edx
  00fa0	e8 00 00 00 00	 call	 @ROUNDF@4
  00fa5	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  00fa8	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00faf	7d 0c		 jge	 SHORT $L3059
  00fb1	c7 85 ec fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv622[ebp], -32768 ; ffff8000H
  00fbb	eb 2a		 jmp	 SHORT $L3060
$L3059:
  00fbd	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00fc4	7e 0c		 jle	 SHORT $L3057
  00fc6	c7 85 e8 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv621[ebp], 32767 ; 00007fffH
  00fd0	eb 09		 jmp	 SHORT $L3058
$L3057:
  00fd2	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  00fd5	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv621[ebp], eax
$L3058:
  00fdb	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR tv621[ebp]
  00fe1	89 8d ec fe ff
	ff		 mov	 DWORD PTR tv622[ebp], ecx
$L3060:
  00fe7	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR tv622[ebp]
  00fed	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  00ff0	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  00ff3	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  00ff7	66 89 08	 mov	 WORD PTR [eax], cx

; 2239 :                 piSrc += cChan;

  00ffa	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  00ffd	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  01000	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  01003	89 4d f8	 mov	 DWORD PTR _piSrc$[ebp], ecx

; 2240 :                 piDst += cChan;

  01006	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  01009	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  0100c	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0100f	89 4d cc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 2241 : 
; 2242 :                 COMBINE_SIGNBIT_FAST                                                         

  01012	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  01015	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  01018	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  0101e	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  01021	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  01024	0b d1		 or	 edx, ecx
  01026	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  01029	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  0102c	d1 e2		 shl	 edx, 1
  0102e	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx

; 2243 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  01031	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  01034	83 e8 04	 sub	 eax, 4
  01037	89 45 b8	 mov	 DWORD PTR _piCoef$[ebp], eax
  0103a	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  0103d	d9 01		 fld	 DWORD PTR [ecx]
  0103f	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  01042	d8 0a		 fmul	 DWORD PTR [edx]
  01044	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  01047	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  0104a	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  0104d	83 c0 04	 add	 eax, 4
  01050	89 45 a8	 mov	 DWORD PTR _piSin$[ebp], eax

; 2244 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  01053	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  01056	51		 push	 ecx
  01057	e8 00 00 00 00	 call	 @ROUNDF@4
  0105c	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0105f	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  01066	7d 0c		 jge	 SHORT $L3063
  01068	c7 85 e4 fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv645[ebp], -32768 ; ffff8000H
  01072	eb 2a		 jmp	 SHORT $L3064
$L3063:
  01074	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  0107b	7e 0c		 jle	 SHORT $L3061
  0107d	c7 85 e0 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv644[ebp], 32767 ; 00007fffH
  01087	eb 09		 jmp	 SHORT $L3062
$L3061:
  01089	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  0108c	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv644[ebp], edx
$L3062:
  01092	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv644[ebp]
  01098	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv645[ebp], eax
$L3064:
  0109e	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv645[ebp]
  010a4	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  010a7	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  010aa	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  010ae	66 89 02	 mov	 WORD PTR [edx], ax

; 2245 :                 piSrc += cChan;

  010b1	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  010b4	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  010b7	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  010ba	89 45 f8	 mov	 DWORD PTR _piSrc$[ebp], eax

; 2246 :                 piDst += cChan;

  010bd	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  010c0	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  010c3	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  010c6	89 45 cc	 mov	 DWORD PTR _piDst$[ebp], eax

; 2247 : 
; 2248 :                 COMBINE_SIGNBIT_FAST                                                         

  010c9	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  010cc	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  010cf	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  010d5	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  010d8	0f b7 02	 movzx	 eax, WORD PTR [edx]
  010db	0b c8		 or	 ecx, eax
  010dd	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  010e0	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  010e3	d1 e1		 shl	 ecx, 1
  010e5	89 4d ec	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx

; 2249 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  010e8	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  010eb	83 ea 04	 sub	 edx, 4
  010ee	89 55 b8	 mov	 DWORD PTR _piCoef$[ebp], edx
  010f1	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  010f4	d9 00		 fld	 DWORD PTR [eax]
  010f6	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  010f9	d8 09		 fmul	 DWORD PTR [ecx]
  010fb	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  010fe	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  01101	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  01104	83 c2 04	 add	 edx, 4
  01107	89 55 a8	 mov	 DWORD PTR _piSin$[ebp], edx

; 2250 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  0110a	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  0110d	50		 push	 eax
  0110e	e8 00 00 00 00	 call	 @ROUNDF@4
  01113	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  01116	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  0111d	7d 0c		 jge	 SHORT $L3067
  0111f	c7 85 dc fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv668[ebp], -32768 ; ffff8000H
  01129	eb 2a		 jmp	 SHORT $L3068
$L3067:
  0112b	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  01132	7e 0c		 jle	 SHORT $L3065
  01134	c7 85 d8 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv667[ebp], 32767 ; 00007fffH
  0113e	eb 09		 jmp	 SHORT $L3066
$L3065:
  01140	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  01143	89 8d d8 fe ff
	ff		 mov	 DWORD PTR tv667[ebp], ecx
$L3066:
  01149	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR tv667[ebp]
  0114f	89 95 dc fe ff
	ff		 mov	 DWORD PTR tv668[ebp], edx
$L3068:
  01155	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv668[ebp]
  0115b	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0115e	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  01161	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  01165	66 89 11	 mov	 WORD PTR [ecx], dx

; 2251 :                 piSrc += cChan;

  01168	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  0116b	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  0116e	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  01171	89 55 f8	 mov	 DWORD PTR _piSrc$[ebp], edx

; 2252 :                 piDst += cChan;

  01174	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  01177	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  0117a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0117d	89 55 cc	 mov	 DWORD PTR _piDst$[ebp], edx

; 2253 : 
; 2254 :                 COMBINE_SIGNBIT_FAST                                                         

  01180	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  01183	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  01186	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  0118b	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  0118e	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  01191	0b c2		 or	 eax, edx
  01193	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  01196	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  01199	d1 e0		 shl	 eax, 1
  0119b	89 45 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], eax

; 2255 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  0119e	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  011a1	83 e9 04	 sub	 ecx, 4
  011a4	89 4d b8	 mov	 DWORD PTR _piCoef$[ebp], ecx
  011a7	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  011aa	d9 02		 fld	 DWORD PTR [edx]
  011ac	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  011af	d8 08		 fmul	 DWORD PTR [eax]
  011b1	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  011b4	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  011b7	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  011ba	83 c1 04	 add	 ecx, 4
  011bd	89 4d a8	 mov	 DWORD PTR _piSin$[ebp], ecx

; 2256 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  011c0	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  011c3	52		 push	 edx
  011c4	e8 00 00 00 00	 call	 @ROUNDF@4
  011c9	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  011cc	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  011d3	7d 0c		 jge	 SHORT $L3071
  011d5	c7 85 d4 fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv691[ebp], -32768 ; ffff8000H
  011df	eb 2a		 jmp	 SHORT $L3072
$L3071:
  011e1	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  011e8	7e 0c		 jle	 SHORT $L3069
  011ea	c7 85 d0 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv690[ebp], 32767 ; 00007fffH
  011f4	eb 09		 jmp	 SHORT $L3070
$L3069:
  011f6	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  011f9	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv690[ebp], eax
$L3070:
  011ff	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv690[ebp]
  01205	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv691[ebp], ecx
$L3072:
  0120b	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR tv691[ebp]
  01211	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  01214	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  01217	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  0121b	66 89 08	 mov	 WORD PTR [eax], cx

; 2257 :                 piSrc += cChan;

  0121e	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  01221	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  01224	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  01227	89 4d f8	 mov	 DWORD PTR _piSrc$[ebp], ecx

; 2258 :                 piDst += cChan;

  0122a	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  0122d	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  01230	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  01233	89 4d cc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 2259 : 
; 2260 :                 COMBINE_SIGNBIT_FAST                                                         

  01236	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  01239	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  0123c	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  01242	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  01245	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  01248	0b d1		 or	 edx, ecx
  0124a	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  0124d	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  01250	d1 e2		 shl	 edx, 1
  01252	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx

; 2261 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  01255	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  01258	83 e8 04	 sub	 eax, 4
  0125b	89 45 b8	 mov	 DWORD PTR _piCoef$[ebp], eax
  0125e	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  01261	d9 01		 fld	 DWORD PTR [ecx]
  01263	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  01266	d8 0a		 fmul	 DWORD PTR [edx]
  01268	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  0126b	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  0126e	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  01271	83 c0 04	 add	 eax, 4
  01274	89 45 a8	 mov	 DWORD PTR _piSin$[ebp], eax

; 2262 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  01277	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  0127a	51		 push	 ecx
  0127b	e8 00 00 00 00	 call	 @ROUNDF@4
  01280	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  01283	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  0128a	7d 0c		 jge	 SHORT $L3075
  0128c	c7 85 cc fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv714[ebp], -32768 ; ffff8000H
  01296	eb 2a		 jmp	 SHORT $L3076
$L3075:
  01298	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  0129f	7e 0c		 jle	 SHORT $L3073
  012a1	c7 85 c8 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv713[ebp], 32767 ; 00007fffH
  012ab	eb 09		 jmp	 SHORT $L3074
$L3073:
  012ad	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  012b0	89 95 c8 fe ff
	ff		 mov	 DWORD PTR tv713[ebp], edx
$L3074:
  012b6	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR tv713[ebp]
  012bc	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv714[ebp], eax
$L3076:
  012c2	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR tv714[ebp]
  012c8	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  012cb	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  012ce	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  012d2	66 89 02	 mov	 WORD PTR [edx], ax

; 2263 :                 piSrc += cChan;

  012d5	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  012d8	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  012db	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  012de	89 45 f8	 mov	 DWORD PTR _piSrc$[ebp], eax

; 2264 :                 piDst += cChan;

  012e1	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  012e4	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  012e7	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  012ea	89 45 cc	 mov	 DWORD PTR _piDst$[ebp], eax

; 2265 : 
; 2266 :                 COMBINE_SIGNBIT_FAST                                                         

  012ed	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  012f0	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  012f3	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  012f9	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  012fc	0f b7 02	 movzx	 eax, WORD PTR [edx]
  012ff	0b c8		 or	 ecx, eax
  01301	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  01304	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  01307	d1 e1		 shl	 ecx, 1
  01309	89 4d ec	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx

; 2267 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  0130c	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  0130f	83 ea 04	 sub	 edx, 4
  01312	89 55 b8	 mov	 DWORD PTR _piCoef$[ebp], edx
  01315	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  01318	d9 00		 fld	 DWORD PTR [eax]
  0131a	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  0131d	d8 09		 fmul	 DWORD PTR [ecx]
  0131f	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  01322	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  01325	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  01328	83 c2 04	 add	 edx, 4
  0132b	89 55 a8	 mov	 DWORD PTR _piSin$[ebp], edx

; 2268 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  0132e	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  01331	50		 push	 eax
  01332	e8 00 00 00 00	 call	 @ROUNDF@4
  01337	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0133a	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  01341	7d 0c		 jge	 SHORT $L3079
  01343	c7 85 c4 fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv737[ebp], -32768 ; ffff8000H
  0134d	eb 2a		 jmp	 SHORT $L3080
$L3079:
  0134f	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  01356	7e 0c		 jle	 SHORT $L3077
  01358	c7 85 c0 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv736[ebp], 32767 ; 00007fffH
  01362	eb 09		 jmp	 SHORT $L3078
$L3077:
  01364	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  01367	89 8d c0 fe ff
	ff		 mov	 DWORD PTR tv736[ebp], ecx
$L3078:
  0136d	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR tv736[ebp]
  01373	89 95 c4 fe ff
	ff		 mov	 DWORD PTR tv737[ebp], edx
$L3080:
  01379	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR tv737[ebp]
  0137f	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  01382	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  01385	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  01389	66 89 11	 mov	 WORD PTR [ecx], dx

; 2269 :                 piSrc += cChan;

  0138c	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  0138f	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  01392	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  01395	89 55 f8	 mov	 DWORD PTR _piSrc$[ebp], edx

; 2270 :                 piDst += cChan;

  01398	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  0139b	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  0139e	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  013a1	89 55 cc	 mov	 DWORD PTR _piDst$[ebp], edx

; 2271 : 
; 2272 :                 COMBINE_SIGNBIT_FAST                                                         

  013a4	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  013a7	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  013aa	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  013af	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  013b2	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  013b5	0b c2		 or	 eax, edx
  013b7	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  013ba	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  013bd	d1 e0		 shl	 eax, 1
  013bf	89 45 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], eax

; 2273 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  013c2	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  013c5	83 e9 04	 sub	 ecx, 4
  013c8	89 4d b8	 mov	 DWORD PTR _piCoef$[ebp], ecx
  013cb	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  013ce	d9 02		 fld	 DWORD PTR [edx]
  013d0	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  013d3	d8 08		 fmul	 DWORD PTR [eax]
  013d5	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  013d8	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  013db	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  013de	83 c1 04	 add	 ecx, 4
  013e1	89 4d a8	 mov	 DWORD PTR _piSin$[ebp], ecx

; 2274 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  013e4	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  013e7	52		 push	 edx
  013e8	e8 00 00 00 00	 call	 @ROUNDF@4
  013ed	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  013f0	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  013f7	7d 0c		 jge	 SHORT $L3083
  013f9	c7 85 bc fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv760[ebp], -32768 ; ffff8000H
  01403	eb 2a		 jmp	 SHORT $L3084
$L3083:
  01405	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  0140c	7e 0c		 jle	 SHORT $L3081
  0140e	c7 85 b8 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv759[ebp], 32767 ; 00007fffH
  01418	eb 09		 jmp	 SHORT $L3082
$L3081:
  0141a	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  0141d	89 85 b8 fe ff
	ff		 mov	 DWORD PTR tv759[ebp], eax
$L3082:
  01423	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR tv759[ebp]
  01429	89 8d bc fe ff
	ff		 mov	 DWORD PTR tv760[ebp], ecx
$L3084:
  0142f	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR tv760[ebp]
  01435	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  01438	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  0143b	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  0143f	66 89 08	 mov	 WORD PTR [eax], cx

; 2275 :                 piSrc += cChan;

  01442	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  01445	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  01448	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0144b	89 4d f8	 mov	 DWORD PTR _piSrc$[ebp], ecx

; 2276 :                 piDst += cChan;

  0144e	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  01451	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  01454	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  01457	89 4d cc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 2277 : 
; 2278 :                 COMBINE_SIGNBIT_FAST                                                         

  0145a	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  0145d	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  01460	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  01466	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  01469	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0146c	0b d1		 or	 edx, ecx
  0146e	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  01471	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  01474	d1 e2		 shl	 edx, 1
  01476	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx

; 2279 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  01479	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  0147c	83 e8 04	 sub	 eax, 4
  0147f	89 45 b8	 mov	 DWORD PTR _piCoef$[ebp], eax
  01482	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  01485	d9 01		 fld	 DWORD PTR [ecx]
  01487	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  0148a	d8 0a		 fmul	 DWORD PTR [edx]
  0148c	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  0148f	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  01492	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  01495	83 c0 04	 add	 eax, 4
  01498	89 45 a8	 mov	 DWORD PTR _piSin$[ebp], eax

; 2280 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  0149b	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  0149e	51		 push	 ecx
  0149f	e8 00 00 00 00	 call	 @ROUNDF@4
  014a4	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  014a7	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  014ae	7d 0c		 jge	 SHORT $L3087
  014b0	c7 85 b4 fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv783[ebp], -32768 ; ffff8000H
  014ba	eb 2a		 jmp	 SHORT $L3088
$L3087:
  014bc	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  014c3	7e 0c		 jle	 SHORT $L3085
  014c5	c7 85 b0 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv782[ebp], 32767 ; 00007fffH
  014cf	eb 09		 jmp	 SHORT $L3086
$L3085:
  014d1	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  014d4	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv782[ebp], edx
$L3086:
  014da	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv782[ebp]
  014e0	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv783[ebp], eax
$L3088:
  014e6	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR tv783[ebp]
  014ec	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  014ef	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  014f2	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  014f6	66 89 02	 mov	 WORD PTR [edx], ax

; 2281 :                 piSrc += cChan;

  014f9	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  014fc	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  014ff	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  01502	89 45 f8	 mov	 DWORD PTR _piSrc$[ebp], eax

; 2282 :                 piDst += cChan;

  01505	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  01508	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  0150b	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0150e	89 45 cc	 mov	 DWORD PTR _piDst$[ebp], eax

; 2283 : 
; 2284 :                 COMBINE_SIGNBIT_FAST                                                         

  01511	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  01514	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  01517	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  0151d	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  01520	0f b7 02	 movzx	 eax, WORD PTR [edx]
  01523	0b c8		 or	 ecx, eax
  01525	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  01528	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  0152b	d1 e1		 shl	 ecx, 1
  0152d	89 4d ec	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx

; 2285 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  01530	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  01533	83 ea 04	 sub	 edx, 4
  01536	89 55 b8	 mov	 DWORD PTR _piCoef$[ebp], edx
  01539	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  0153c	d9 00		 fld	 DWORD PTR [eax]
  0153e	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  01541	d8 09		 fmul	 DWORD PTR [ecx]
  01543	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  01546	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  01549	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  0154c	83 c2 04	 add	 edx, 4
  0154f	89 55 a8	 mov	 DWORD PTR _piSin$[ebp], edx

; 2286 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  01552	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  01555	50		 push	 eax
  01556	e8 00 00 00 00	 call	 @ROUNDF@4
  0155b	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  0155e	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  01565	7d 0c		 jge	 SHORT $L3091
  01567	c7 85 ac fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv806[ebp], -32768 ; ffff8000H
  01571	eb 2a		 jmp	 SHORT $L3092
$L3091:
  01573	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  0157a	7e 0c		 jle	 SHORT $L3089
  0157c	c7 85 a8 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv805[ebp], 32767 ; 00007fffH
  01586	eb 09		 jmp	 SHORT $L3090
$L3089:
  01588	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  0158b	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv805[ebp], ecx
$L3090:
  01591	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR tv805[ebp]
  01597	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv806[ebp], edx
$L3092:
  0159d	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR tv806[ebp]
  015a3	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  015a6	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  015a9	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  015ad	66 89 11	 mov	 WORD PTR [ecx], dx

; 2287 :                 piSrc += cChan;

  015b0	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  015b3	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  015b6	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  015b9	89 55 f8	 mov	 DWORD PTR _piSrc$[ebp], edx

; 2288 :                 piDst += cChan;

  015bc	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  015bf	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  015c2	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  015c5	89 55 cc	 mov	 DWORD PTR _piDst$[ebp], edx

; 2289 : 
; 2290 :                 COMBINE_SIGNBIT_FAST                                                         

  015c8	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  015cb	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  015ce	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  015d3	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  015d6	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  015d9	0b c2		 or	 eax, edx
  015db	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  015de	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  015e1	d1 e0		 shl	 eax, 1
  015e3	89 45 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], eax

; 2291 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  015e6	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  015e9	83 e9 04	 sub	 ecx, 4
  015ec	89 4d b8	 mov	 DWORD PTR _piCoef$[ebp], ecx
  015ef	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  015f2	d9 02		 fld	 DWORD PTR [edx]
  015f4	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  015f7	d8 08		 fmul	 DWORD PTR [eax]
  015f9	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  015fc	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  015ff	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  01602	83 c1 04	 add	 ecx, 4
  01605	89 4d a8	 mov	 DWORD PTR _piSin$[ebp], ecx

; 2292 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  01608	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  0160b	52		 push	 edx
  0160c	e8 00 00 00 00	 call	 @ROUNDF@4
  01611	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  01614	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  0161b	7d 0c		 jge	 SHORT $L3095
  0161d	c7 85 a4 fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv829[ebp], -32768 ; ffff8000H
  01627	eb 2a		 jmp	 SHORT $L3096
$L3095:
  01629	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  01630	7e 0c		 jle	 SHORT $L3093
  01632	c7 85 a0 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv828[ebp], 32767 ; 00007fffH
  0163c	eb 09		 jmp	 SHORT $L3094
$L3093:
  0163e	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  01641	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv828[ebp], eax
$L3094:
  01647	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv828[ebp]
  0164d	89 8d a4 fe ff
	ff		 mov	 DWORD PTR tv829[ebp], ecx
$L3096:
  01653	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR tv829[ebp]
  01659	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  0165c	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  0165f	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  01663	66 89 08	 mov	 WORD PTR [eax], cx

; 2293 :                 piSrc += cChan;

  01666	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  01669	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  0166c	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0166f	89 4d f8	 mov	 DWORD PTR _piSrc$[ebp], ecx

; 2294 :                 piDst += cChan;

  01672	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  01675	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  01678	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0167b	89 4d cc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 2295 : 
; 2296 :                 COMBINE_SIGNBIT_FAST                                                         

  0167e	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  01681	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  01684	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  0168a	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  0168d	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  01690	0b d1		 or	 edx, ecx
  01692	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  01695	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  01698	d1 e2		 shl	 edx, 1
  0169a	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx

; 2297 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  0169d	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  016a0	83 e8 04	 sub	 eax, 4
  016a3	89 45 b8	 mov	 DWORD PTR _piCoef$[ebp], eax
  016a6	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  016a9	d9 01		 fld	 DWORD PTR [ecx]
  016ab	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  016ae	d8 0a		 fmul	 DWORD PTR [edx]
  016b0	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  016b3	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  016b6	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  016b9	83 c0 04	 add	 eax, 4
  016bc	89 45 a8	 mov	 DWORD PTR _piSin$[ebp], eax

; 2298 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  016bf	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  016c2	51		 push	 ecx
  016c3	e8 00 00 00 00	 call	 @ROUNDF@4
  016c8	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  016cb	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  016d2	7d 0c		 jge	 SHORT $L3099
  016d4	c7 85 9c fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv852[ebp], -32768 ; ffff8000H
  016de	eb 2a		 jmp	 SHORT $L3100
$L3099:
  016e0	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  016e7	7e 0c		 jle	 SHORT $L3097
  016e9	c7 85 98 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv851[ebp], 32767 ; 00007fffH
  016f3	eb 09		 jmp	 SHORT $L3098
$L3097:
  016f5	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  016f8	89 95 98 fe ff
	ff		 mov	 DWORD PTR tv851[ebp], edx
$L3098:
  016fe	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR tv851[ebp]
  01704	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv852[ebp], eax
$L3100:
  0170a	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv852[ebp]
  01710	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  01713	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  01716	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  0171a	66 89 02	 mov	 WORD PTR [edx], ax

; 2299 :                 piSrc += cChan;

  0171d	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  01720	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  01723	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  01726	89 45 f8	 mov	 DWORD PTR _piSrc$[ebp], eax

; 2300 :                 piDst += cChan;

  01729	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  0172c	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  0172f	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  01732	89 45 cc	 mov	 DWORD PTR _piDst$[ebp], eax

; 2301 : 
; 2302 :                 COMBINE_SIGNBIT_FAST                                                         

  01735	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  01738	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0173b	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  01741	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  01744	0f b7 02	 movzx	 eax, WORD PTR [edx]
  01747	0b c8		 or	 ecx, eax
  01749	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  0174c	8b 4d ec	 mov	 ecx, DWORD PTR _uiSignbitData$[ebp]
  0174f	d1 e1		 shl	 ecx, 1
  01751	89 4d ec	 mov	 DWORD PTR _uiSignbitData$[ebp], ecx

; 2303 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  01754	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  01757	83 ea 04	 sub	 edx, 4
  0175a	89 55 b8	 mov	 DWORD PTR _piCoef$[ebp], edx
  0175d	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  01760	d9 00		 fld	 DWORD PTR [eax]
  01762	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  01765	d8 09		 fmul	 DWORD PTR [ecx]
  01767	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  0176a	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  0176d	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  01770	83 c2 04	 add	 edx, 4
  01773	89 55 a8	 mov	 DWORD PTR _piSin$[ebp], edx

; 2304 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  01776	8b 45 dc	 mov	 eax, DWORD PTR _cfResult$[ebp]
  01779	50		 push	 eax
  0177a	e8 00 00 00 00	 call	 @ROUNDF@4
  0177f	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  01782	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  01789	7d 0c		 jge	 SHORT $L3103
  0178b	c7 85 94 fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv875[ebp], -32768 ; ffff8000H
  01795	eb 2a		 jmp	 SHORT $L3104
$L3103:
  01797	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  0179e	7e 0c		 jle	 SHORT $L3101
  017a0	c7 85 90 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv874[ebp], 32767 ; 00007fffH
  017aa	eb 09		 jmp	 SHORT $L3102
$L3101:
  017ac	8b 4d d8	 mov	 ecx, DWORD PTR _iResult$[ebp]
  017af	89 8d 90 fe ff
	ff		 mov	 DWORD PTR tv874[ebp], ecx
$L3102:
  017b5	8b 95 90 fe ff
	ff		 mov	 edx, DWORD PTR tv874[ebp]
  017bb	89 95 94 fe ff
	ff		 mov	 DWORD PTR tv875[ebp], edx
$L3104:
  017c1	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR tv875[ebp]
  017c7	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  017ca	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  017cd	66 8b 55 d8	 mov	 dx, WORD PTR _iResult$[ebp]
  017d1	66 89 11	 mov	 WORD PTR [ecx], dx

; 2305 :                 piSrc += cChan;

  017d4	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  017d7	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  017da	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  017dd	89 55 f8	 mov	 DWORD PTR _piSrc$[ebp], edx

; 2306 :                 piDst += cChan;

  017e0	8b 45 c4	 mov	 eax, DWORD PTR _cChan$[ebp]
  017e3	8b 4d cc	 mov	 ecx, DWORD PTR _piDst$[ebp]
  017e6	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  017e9	89 55 cc	 mov	 DWORD PTR _piDst$[ebp], edx

; 2307 : 
; 2308 :                 COMBINE_SIGNBIT_FAST                                                         

  017ec	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  017ef	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  017f2	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  017f7	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  017fa	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  017fd	0b c2		 or	 eax, edx
  017ff	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  01802	8b 45 ec	 mov	 eax, DWORD PTR _uiSignbitData$[ebp]
  01805	d1 e0		 shl	 eax, 1
  01807	89 45 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], eax

; 2309 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  0180a	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  0180d	83 e9 04	 sub	 ecx, 4
  01810	89 4d b8	 mov	 DWORD PTR _piCoef$[ebp], ecx
  01813	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  01816	d9 02		 fld	 DWORD PTR [edx]
  01818	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  0181b	d8 08		 fmul	 DWORD PTR [eax]
  0181d	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  01820	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  01823	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  01826	83 c1 04	 add	 ecx, 4
  01829	89 4d a8	 mov	 DWORD PTR _piSin$[ebp], ecx

; 2310 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  0182c	8b 55 dc	 mov	 edx, DWORD PTR _cfResult$[ebp]
  0182f	52		 push	 edx
  01830	e8 00 00 00 00	 call	 @ROUNDF@4
  01835	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  01838	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  0183f	7d 0c		 jge	 SHORT $L3107
  01841	c7 85 8c fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv898[ebp], -32768 ; ffff8000H
  0184b	eb 2a		 jmp	 SHORT $L3108
$L3107:
  0184d	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  01854	7e 0c		 jle	 SHORT $L3105
  01856	c7 85 88 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv897[ebp], 32767 ; 00007fffH
  01860	eb 09		 jmp	 SHORT $L3106
$L3105:
  01862	8b 45 d8	 mov	 eax, DWORD PTR _iResult$[ebp]
  01865	89 85 88 fe ff
	ff		 mov	 DWORD PTR tv897[ebp], eax
$L3106:
  0186b	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR tv897[ebp]
  01871	89 8d 8c fe ff
	ff		 mov	 DWORD PTR tv898[ebp], ecx
$L3108:
  01877	8b 95 8c fe ff
	ff		 mov	 edx, DWORD PTR tv898[ebp]
  0187d	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  01880	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  01883	66 8b 4d d8	 mov	 cx, WORD PTR _iResult$[ebp]
  01887	66 89 08	 mov	 WORD PTR [eax], cx

; 2311 :                 piSrc += cChan;

  0188a	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  0188d	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  01890	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  01893	89 4d f8	 mov	 DWORD PTR _piSrc$[ebp], ecx

; 2312 :                 piDst += cChan;

  01896	8b 55 c4	 mov	 edx, DWORD PTR _cChan$[ebp]
  01899	8b 45 cc	 mov	 eax, DWORD PTR _piDst$[ebp]
  0189c	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0189f	89 4d cc	 mov	 DWORD PTR _piDst$[ebp], ecx

; 2313 : 
; 2314 :                 COMBINE_SIGNBIT_FAST                                                         

  018a2	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  018a5	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  018a8	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  018ae	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  018b1	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  018b4	0b d1		 or	 edx, ecx
  018b6	89 55 d8	 mov	 DWORD PTR _iResult$[ebp], edx
  018b9	8b 55 ec	 mov	 edx, DWORD PTR _uiSignbitData$[ebp]
  018bc	d1 e2		 shl	 edx, 1
  018be	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx

; 2315 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );

  018c1	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  018c4	83 e8 04	 sub	 eax, 4
  018c7	89 45 b8	 mov	 DWORD PTR _piCoef$[ebp], eax
  018ca	8b 4d b8	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  018cd	d9 01		 fld	 DWORD PTR [ecx]
  018cf	8b 55 a8	 mov	 edx, DWORD PTR _piSin$[ebp]
  018d2	d8 0a		 fmul	 DWORD PTR [edx]
  018d4	da 45 d8	 fiadd	 DWORD PTR _iResult$[ebp]
  018d7	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]
  018da	8b 45 a8	 mov	 eax, DWORD PTR _piSin$[ebp]
  018dd	83 c0 04	 add	 eax, 4
  018e0	89 45 a8	 mov	 DWORD PTR _piSin$[ebp], eax

; 2316 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  018e3	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  018e6	51		 push	 ecx
  018e7	e8 00 00 00 00	 call	 @ROUNDF@4
  018ec	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  018ef	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  018f6	7d 0c		 jge	 SHORT $L3111
  018f8	c7 85 84 fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv921[ebp], -32768 ; ffff8000H
  01902	eb 2a		 jmp	 SHORT $L3112
$L3111:
  01904	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  0190b	7e 0c		 jle	 SHORT $L3109
  0190d	c7 85 80 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv920[ebp], 32767 ; 00007fffH
  01917	eb 09		 jmp	 SHORT $L3110
$L3109:
  01919	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  0191c	89 95 80 fe ff
	ff		 mov	 DWORD PTR tv920[ebp], edx
$L3110:
  01922	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR tv920[ebp]
  01928	89 85 84 fe ff
	ff		 mov	 DWORD PTR tv921[ebp], eax
$L3112:
  0192e	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR tv921[ebp]
  01934	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  01937	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  0193a	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  0193e	66 89 02	 mov	 WORD PTR [edx], ax

; 2317 :                 piSrc += cChan;

  01941	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  01944	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  01947	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0194a	89 45 f8	 mov	 DWORD PTR _piSrc$[ebp], eax

; 2318 :                 piDst += cChan;

  0194d	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  01950	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  01953	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  01956	89 45 cc	 mov	 DWORD PTR _piDst$[ebp], eax

; 2319 : 
; 2320 :                 uiSignbitData = *piSrcSign++;                                              

  01959	8b 4d b0	 mov	 ecx, DWORD PTR _piSrcSign$[ebp]
  0195c	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0195f	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  01962	8b 45 b0	 mov	 eax, DWORD PTR _piSrcSign$[ebp]
  01965	83 c0 02	 add	 eax, 2
  01968	89 45 b0	 mov	 DWORD PTR _piSrcSign$[ebp], eax

; 2321 :             }

  0196b	e9 60 f4 ff ff	 jmp	 $L2564
$L2565:

; 2322 :             uiSignbitCount = 16;                                                     

  01970	c7 45 d4 10 00
	00 00		 mov	 DWORD PTR _uiSignbitCount$[ebp], 16 ; 00000010H

; 2323 :             if (iLoopBy1) return !WMA_OK;

  01977	83 7d 88 00	 cmp	 DWORD PTR _iLoopBy1$2560[ebp], 0
  0197b	74 11		 je	 SHORT $L2557
  0197d	33 c0		 xor	 eax, eax
  0197f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _WMA_OK, 0
  01986	0f 94 c0	 sete	 al
  01989	e9 40 01 00 00	 jmp	 $L2463
$L2557:

; 2324 : /*            for (iLoopCnt = 0; iLoopCnt < iLoopBy1; iLoopCnt++, i++,(*pcSampleGet)++)    {
; 2325 : 
; 2326 :                 COMBINE_SIGNBIT(iResult, *piSrc, piSrcSign, uiSignbitData,
; 2327 :                     uiSignbitCount);
; 2328 : 
; 2329 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef) + COEF_FROM_INT(iResult) );
; 2330 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );
; 2331 : 
; 2332 :                 piSrc += cChan;
; 2333 :                 piDst += cChan;
; 2334 :             }  */
; 2335 :         }
; 2336 :     }
; 2337 :     if (i < iCoefRecurQ3) 

  0198e	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  01991	3b 4d c8	 cmp	 ecx, DWORD PTR _iCoefRecurQ3$[ebp]
  01994	0f 8d cc 00 00
	00		 jge	 $L2615

; 2338 :     {
; 2339 :         iSegEnd = min (iCoefRecurQ3, iEnd);

  0199a	8b 55 c8	 mov	 edx, DWORD PTR _iCoefRecurQ3$[ebp]
  0199d	3b 55 c0	 cmp	 edx, DWORD PTR _iEnd$[ebp]
  019a0	7d 0b		 jge	 SHORT $L3113
  019a2	8b 45 c8	 mov	 eax, DWORD PTR _iCoefRecurQ3$[ebp]
  019a5	89 85 7c fe ff
	ff		 mov	 DWORD PTR tv933[ebp], eax
  019ab	eb 09		 jmp	 SHORT $L3114
$L3113:
  019ad	8b 4d c0	 mov	 ecx, DWORD PTR _iEnd$[ebp]
  019b0	89 8d 7c fe ff
	ff		 mov	 DWORD PTR tv933[ebp], ecx
$L3114:
  019b6	8b 95 7c fe ff
	ff		 mov	 edx, DWORD PTR tv933[ebp]
  019bc	89 55 bc	 mov	 DWORD PTR _iSegEnd$[ebp], edx

; 2340 :         for (; i < iSegEnd; i++,(*pcSampleGet)++)    {

  019bf	eb 19		 jmp	 SHORT $L2616
$L2617:
  019c1	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  019c4	83 c0 01	 add	 eax, 1
  019c7	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  019ca	8b 4d 14	 mov	 ecx, DWORD PTR _pcSampleGet$[ebp]
  019cd	66 8b 11	 mov	 dx, WORD PTR [ecx]
  019d0	66 83 c2 01	 add	 dx, 1
  019d4	8b 45 14	 mov	 eax, DWORD PTR _pcSampleGet$[ebp]
  019d7	66 89 10	 mov	 WORD PTR [eax], dx
$L2616:
  019da	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  019dd	3b 4d bc	 cmp	 ecx, DWORD PTR _iSegEnd$[ebp]
  019e0	0f 8d 80 00 00
	00		 jge	 $L2615

; 2341 :             cfResult = INT_FROM_COEF( *--piCoef );

  019e6	8b 55 b8	 mov	 edx, DWORD PTR _piCoef$[ebp]
  019e9	83 ea 04	 sub	 edx, 4
  019ec	89 55 b8	 mov	 DWORD PTR _piCoef$[ebp], edx
  019ef	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  019f2	d9 00		 fld	 DWORD PTR [eax]
  019f4	d9 5d dc	 fstp	 DWORD PTR _cfResult$[ebp]

; 2342 :             ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  019f7	8b 4d dc	 mov	 ecx, DWORD PTR _cfResult$[ebp]
  019fa	51		 push	 ecx
  019fb	e8 00 00 00 00	 call	 @ROUNDF@4
  01a00	89 45 d8	 mov	 DWORD PTR _iResult$[ebp], eax
  01a03	81 7d d8 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  01a0a	7d 0c		 jge	 SHORT $L3117
  01a0c	c7 85 78 fe ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv944[ebp], -32768 ; ffff8000H
  01a16	eb 2a		 jmp	 SHORT $L3118
$L3117:
  01a18	81 7d d8 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  01a1f	7e 0c		 jle	 SHORT $L3115
  01a21	c7 85 74 fe ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv943[ebp], 32767 ; 00007fffH
  01a2b	eb 09		 jmp	 SHORT $L3116
$L3115:
  01a2d	8b 55 d8	 mov	 edx, DWORD PTR _iResult$[ebp]
  01a30	89 95 74 fe ff
	ff		 mov	 DWORD PTR tv943[ebp], edx
$L3116:
  01a36	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR tv943[ebp]
  01a3c	89 85 78 fe ff
	ff		 mov	 DWORD PTR tv944[ebp], eax
$L3118:
  01a42	8b 8d 78 fe ff
	ff		 mov	 ecx, DWORD PTR tv944[ebp]
  01a48	89 4d d8	 mov	 DWORD PTR _iResult$[ebp], ecx
  01a4b	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  01a4e	66 8b 45 d8	 mov	 ax, WORD PTR _iResult$[ebp]
  01a52	66 89 02	 mov	 WORD PTR [edx], ax

; 2343 :             piDst += cChan;

  01a55	8b 4d c4	 mov	 ecx, DWORD PTR _cChan$[ebp]
  01a58	8b 55 cc	 mov	 edx, DWORD PTR _piDst$[ebp]
  01a5b	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  01a5e	89 45 cc	 mov	 DWORD PTR _piDst$[ebp], eax

; 2344 :         }

  01a61	e9 5b ff ff ff	 jmp	 $L2617
$L2615:

; 2345 :     }
; 2346 : 
; 2347 :     SAVE_SIGNBIT_STATE(piSrcSign,uiSignbitData);

  01a66	83 7d d4 00	 cmp	 DWORD PTR _uiSignbitCount$[ebp], 0
  01a6a	74 0b		 je	 SHORT $L2621
  01a6c	8b 4d b0	 mov	 ecx, DWORD PTR _piSrcSign$[ebp]
  01a6f	66 8b 55 ec	 mov	 dx, WORD PTR _uiSignbitData$[ebp]
  01a73	66 89 51 fe	 mov	 WORD PTR [ecx-2], dx
$L2621:

; 2348 :     if (pau->m_cChannel < 2 || ((pau->m_cChannel == 2) && (ppcinfo == &(pau->m_rgpcinfo[1]))))

  01a77	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  01a7a	0f b7 48 58	 movzx	 ecx, WORD PTR [eax+88]
  01a7e	83 f9 02	 cmp	 ecx, 2
  01a81	7c 1d		 jl	 SHORT $L2624
  01a83	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  01a86	0f b7 42 58	 movzx	 eax, WORD PTR [edx+88]
  01a8a	83 f8 02	 cmp	 eax, 2
  01a8d	75 1d		 jne	 SHORT $L2623
  01a8f	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  01a92	8b 91 a0 03 00
	00		 mov	 edx, DWORD PTR [ecx+928]
  01a98	83 c2 70	 add	 edx, 112		; 00000070H
  01a9b	39 55 0c	 cmp	 DWORD PTR _ppcinfo$[ebp], edx
  01a9e	75 0c		 jne	 SHORT $L2623
$L2624:

; 2349 :         pau->m_piSinForRecon = piSin;

  01aa0	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  01aa3	8b 4d a8	 mov	 ecx, DWORD PTR _piSin$[ebp]
  01aa6	89 88 28 04 00
	00		 mov	 DWORD PTR [eax+1064], ecx
$L2623:

; 2350 : 
; 2351 :     ppcinfo->m_rgiCoefReconCurr = (Int*)piCoef;

  01aac	8b 55 0c	 mov	 edx, DWORD PTR _ppcinfo$[ebp]
  01aaf	8b 45 b8	 mov	 eax, DWORD PTR _piCoef$[ebp]
  01ab2	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 2352 :     ppcinfo->m_iCurrGetPCM_SubFrame = (I16)i;

  01ab5	8b 4d 0c	 mov	 ecx, DWORD PTR _ppcinfo$[ebp]
  01ab8	66 8b 55 f4	 mov	 dx, WORD PTR _i$[ebp]
  01abc	66 89 51 38	 mov	 WORD PTR [ecx+56], dx

; 2353 :     ppcinfo->m_piPrevOutputCurr = piSrc;

  01ac0	8b 45 0c	 mov	 eax, DWORD PTR _ppcinfo$[ebp]
  01ac3	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  01ac6	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 2354 : #ifdef PROFILE
; 2355 :     FunctionProfileStop(&fp);
; 2356 : #endif
; 2357 :     return WMA_OK;

  01ac9	a1 00 00 00 00	 mov	 eax, DWORD PTR _WMA_OK
$L2463:

; 2358 : }

  01ace	8b e5		 mov	 esp, ebp
  01ad0	5d		 pop	 ebp
  01ad1	c2 14 00	 ret	 20			; 00000014H
_auReconMono_X86_XDS@20 ENDP
WMADEC	ENDS
PUBLIC	_auReconStereo_MMX_XDS@16
EXTRN	__chkstk:NEAR
; Function compile flags: /Odt
;	COMDAT _auReconStereo_MMX_XDS@16
WMADEC	SEGMENT
tv254 = -8340
tv255 = -8336
tv246 = -8332
tv247 = -8328
tv236 = -8324
tv181 = -8320
tv158 = -8316
_iLoopBy1$2690 = -8312
_iLoopBy16$2689 = -8308
_iLoopBy1$2682 = -8304
_iLoopBy16$2681 = -8300
_c_iSignOffset$2673 = -8296
_c_iOffset$2672 = -8292
_c_iSignOffset$2666 = -8288
_c_iOffset$2665 = -8284
_piCoef2$ = -8280
_piSin$ = -8276
_iCoefRecurQ2$ = -8272
_piSrcSign$ = -8268
_tBuf$ = -8264
_piCoef$ = -8260
_iSegEnd$ = -8256
_uiSignbitData2$ = -8252
_iEnd$ = -8248
_cChan$ = -8244
_iCoefRecurQ3$ = -8240
_piDst$ = -8236
_uiSignbitCount$ = -8232
_piSrcSign2$ = -8228
_tempBuf$ = -8224
_iResult$ = -32
_cfResult$ = -28
_cSubFrameSampleQuad$ = -24
_cSubFrameSampleHalf$ = -20
_uiSignbitData$ = -16
_i$ = -12
_piSrc$ = -8
_uiSignbitCount2$ = -4
_pau$ = 8
_piOutput$ = 12
_pcSampleGet$ = 16
_fForceTransformAll$ = 20
_auReconStereo_MMX_XDS@16 PROC NEAR			; COMDAT

; 2594 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 94 20 00 00	 mov	 eax, 8340		; 00002094H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 2595 :     static const __int64 x0000FFFF0000FFFF = 0x0000FFFF0000FFFF;
; 2596 :     static const __int64 x8000800080008000 = 0x8000800080008000;
; 2597 :     Int tempBuf[2048];
; 2598 :     Int *tBuf;
; 2599 : 
; 2600 :     Float *piCoef2; 
; 2601 :     Float *piCoef;  
; 2602 :     Int i, iEnd, iSegEnd;
; 2603 :     I16 *piSrc, *piDst; 
; 2604 :     I32 iResult;
; 2605 :     Float cfResult;
; 2606 : 
; 2607 :     // get local copies of these values which are used frequently or repeatedly (helps optimization)
; 2608 :     Int cChan = pau->m_cChannel;

  00010	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00013	0f b7 48 58	 movzx	 ecx, WORD PTR [eax+88]
  00017	89 8d cc df ff
	ff		 mov	 DWORD PTR _cChan$[ebp], ecx

; 2609 :     Int cSubFrameSampleHalf = pau->m_cSubFrameSampleHalfAdjusted;

  0001d	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00020	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00026	89 45 ec	 mov	 DWORD PTR _cSubFrameSampleHalf$[ebp], eax

; 2610 :     Int cSubFrameSampleQuad = pau->m_cSubFrameSampleQuadAdjusted;

  00029	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  0002c	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  00032	89 55 e8	 mov	 DWORD PTR _cSubFrameSampleQuad$[ebp], edx

; 2611 :     Int iCoefRecurQ2 = pau->m_iCoefRecurQ2;

  00035	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00038	8b 88 90 03 00
	00		 mov	 ecx, DWORD PTR [eax+912]
  0003e	89 8d b0 df ff
	ff		 mov	 DWORD PTR _iCoefRecurQ2$[ebp], ecx

; 2612 :     Int iCoefRecurQ3 = pau->m_iCoefRecurQ3;

  00044	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00047	8b 82 94 03 00
	00		 mov	 eax, DWORD PTR [edx+916]
  0004d	89 85 d0 df ff
	ff		 mov	 DWORD PTR _iCoefRecurQ3$[ebp], eax

; 2613 :     float *piSin = pau->m_piSinForRecon;

  00053	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00056	8b 91 28 04 00
	00		 mov	 edx, DWORD PTR [ecx+1064]
  0005c	89 95 ac df ff
	ff		 mov	 DWORD PTR _piSin$[ebp], edx

; 2614 : 
; 2615 :     U16    *piSrcSign;
; 2616 :     I32     uiSignbitData;
; 2617 :     U32     uiSignbitCount;
; 2618 :     U16    *piSrcSign2;
; 2619 :     I32     uiSignbitData2;
; 2620 :     U32     uiSignbitCount2;
; 2621 : 
; 2622 : #ifdef PREVOUTPUT_16BITS
; 2623 :     assert(0);
; 2624 : #endif// PREVOUTPUT_16BITS
; 2625 : 
; 2626 : #ifdef PROFILE
; 2627 :     FunctionProfile fp;
; 2628 :     FunctionProfileStart(&fp,RECON_MONO_PROFILE);
; 2629 : #endif
; 2630 : 
; 2631 :     //persistent states
; 2632 :     i = pau->m_rgpcinfo[0].m_iCurrGetPCM_SubFrame;       //current position in a frame

  00062	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00065	8b 88 a0 03 00
	00		 mov	 ecx, DWORD PTR [eax+928]
  0006b	0f bf 51 38	 movsx	 edx, WORD PTR [ecx+56]
  0006f	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx

; 2633 :     assert(i==pau->m_rgpcinfo[1].m_iCurrGetPCM_SubFrame);
; 2634 :     piCoef = (float*)pau->m_rgpcinfo[0].m_rgiCoefReconCurr; 

  00072	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00075	8b 88 a0 03 00
	00		 mov	 ecx, DWORD PTR [eax+928]
  0007b	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0007e	89 95 bc df ff
	ff		 mov	 DWORD PTR _piCoef$[ebp], edx

; 2635 :     piCoef2 = (float*)(pau->m_rgpcinfo[1].m_rgiCoefReconCurr); 

  00084	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00087	8b 88 a0 03 00
	00		 mov	 ecx, DWORD PTR [eax+928]
  0008d	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00093	89 95 a8 df ff
	ff		 mov	 DWORD PTR _piCoef2$[ebp], edx

; 2636 : 
; 2637 :     piSrc = pau->m_rgpcinfo[0].m_piPrevOutputCurr;

  00099	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  0009c	8b 88 a0 03 00
	00		 mov	 ecx, DWORD PTR [eax+928]
  000a2	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  000a5	89 55 f8	 mov	 DWORD PTR _piSrc$[ebp], edx

; 2638 :     assert((piSrc+1) == pau->m_rgpcinfo[1].m_piPrevOutputCurr);
; 2639 :     
; 2640 :     //eventually we'll use piOutput directly
; 2641 :     piDst = piOutput;

  000a8	8b 45 0c	 mov	 eax, DWORD PTR _piOutput$[ebp]
  000ab	89 85 d4 df ff
	ff		 mov	 DWORD PTR _piDst$[ebp], eax

; 2642 : 
; 2643 :     iEnd = i + *pcSampleGet;

  000b1	8b 4d 10	 mov	 ecx, DWORD PTR _pcSampleGet$[ebp]
  000b4	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  000b7	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000ba	03 c2		 add	 eax, edx
  000bc	89 85 c8 df ff
	ff		 mov	 DWORD PTR _iEnd$[ebp], eax

; 2644 :     *pcSampleGet = 0;

  000c2	8b 4d 10	 mov	 ecx, DWORD PTR _pcSampleGet$[ebp]
  000c5	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0

; 2645 : 
; 2646 :     CALC_SIGN_OFFSETS(pau->m_rgpcinfo[0].m_piPrevOutput,(piSrc+0), pau->m_rgpcinfo[0].m_piPrevOutputSign, piSrcSign, 
; 2647 :         uiSignbitData, uiSignbitCount, cChan)

  000ca	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  000cd	8b 82 a0 03 00
	00		 mov	 eax, DWORD PTR [edx+928]
  000d3	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  000d6	2b 50 40	 sub	 edx, DWORD PTR [eax+64]
  000d9	d1 fa		 sar	 edx, 1
  000db	8b 8d cc df ff
	ff		 mov	 ecx, DWORD PTR _cChan$[ebp]
  000e1	83 e9 01	 sub	 ecx, 1
  000e4	d3 fa		 sar	 edx, cl
  000e6	89 95 a4 df ff
	ff		 mov	 DWORD PTR _c_iOffset$2665[ebp], edx
  000ec	8b 85 a4 df ff
	ff		 mov	 eax, DWORD PTR _c_iOffset$2665[ebp]
  000f2	83 c0 0f	 add	 eax, 15			; 0000000fH
  000f5	c1 e8 04	 shr	 eax, 4
  000f8	89 85 a0 df ff
	ff		 mov	 DWORD PTR _c_iSignOffset$2666[ebp], eax
  000fe	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00101	8b 91 a0 03 00
	00		 mov	 edx, DWORD PTR [ecx+928]
  00107	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0010a	8b 8d a0 df ff
	ff		 mov	 ecx, DWORD PTR _c_iSignOffset$2666[ebp]
  00110	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  00113	89 95 b4 df ff
	ff		 mov	 DWORD PTR _piSrcSign$[ebp], edx
  00119	8b 85 a4 df ff
	ff		 mov	 eax, DWORD PTR _c_iOffset$2665[ebp]
  0011f	33 d2		 xor	 edx, edx
  00121	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00126	f7 f1		 div	 ecx
  00128	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0012d	2b c2		 sub	 eax, edx
  0012f	89 85 d8 df ff
	ff		 mov	 DWORD PTR _uiSignbitCount$[ebp], eax
  00135	83 bd d8 df ff
	ff 10		 cmp	 DWORD PTR _uiSignbitCount$[ebp], 16 ; 00000010H
  0013c	75 1d		 jne	 SHORT $L2670
  0013e	8b 8d b4 df ff
	ff		 mov	 ecx, DWORD PTR _piSrcSign$[ebp]
  00144	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00147	89 55 f0	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  0014a	8b 85 b4 df ff
	ff		 mov	 eax, DWORD PTR _piSrcSign$[ebp]
  00150	83 c0 02	 add	 eax, 2
  00153	89 85 b4 df ff
	ff		 mov	 DWORD PTR _piSrcSign$[ebp], eax
  00159	eb 0d		 jmp	 SHORT $L2671
$L2670:
  0015b	8b 8d b4 df ff
	ff		 mov	 ecx, DWORD PTR _piSrcSign$[ebp]
  00161	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  00165	89 55 f0	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
$L2671:

; 2648 : 
; 2649 :     CALC_SIGN_OFFSETS(pau->m_rgpcinfo[1].m_piPrevOutput,(piSrc+1), pau->m_rgpcinfo[1].m_piPrevOutputSign, piSrcSign2, 
; 2650 :         uiSignbitData2, uiSignbitCount2, cChan)

  00168	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  0016b	83 c0 02	 add	 eax, 2
  0016e	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00171	8b 91 a0 03 00
	00		 mov	 edx, DWORD PTR [ecx+928]
  00177	2b 82 b0 00 00
	00		 sub	 eax, DWORD PTR [edx+176]
  0017d	d1 f8		 sar	 eax, 1
  0017f	8b 8d cc df ff
	ff		 mov	 ecx, DWORD PTR _cChan$[ebp]
  00185	83 e9 01	 sub	 ecx, 1
  00188	d3 f8		 sar	 eax, cl
  0018a	89 85 9c df ff
	ff		 mov	 DWORD PTR _c_iOffset$2672[ebp], eax
  00190	8b 85 9c df ff
	ff		 mov	 eax, DWORD PTR _c_iOffset$2672[ebp]
  00196	83 c0 0f	 add	 eax, 15			; 0000000fH
  00199	c1 e8 04	 shr	 eax, 4
  0019c	89 85 98 df ff
	ff		 mov	 DWORD PTR _c_iSignOffset$2673[ebp], eax
  001a2	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  001a5	8b 91 a0 03 00
	00		 mov	 edx, DWORD PTR [ecx+928]
  001ab	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  001b1	8b 8d 98 df ff
	ff		 mov	 ecx, DWORD PTR _c_iSignOffset$2673[ebp]
  001b7	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  001ba	89 95 dc df ff
	ff		 mov	 DWORD PTR _piSrcSign2$[ebp], edx
  001c0	8b 85 9c df ff
	ff		 mov	 eax, DWORD PTR _c_iOffset$2672[ebp]
  001c6	33 d2		 xor	 edx, edx
  001c8	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001cd	f7 f1		 div	 ecx
  001cf	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001d4	2b c2		 sub	 eax, edx
  001d6	89 45 fc	 mov	 DWORD PTR _uiSignbitCount2$[ebp], eax
  001d9	83 7d fc 10	 cmp	 DWORD PTR _uiSignbitCount2$[ebp], 16 ; 00000010H
  001dd	75 20		 jne	 SHORT $L2677
  001df	8b 8d dc df ff
	ff		 mov	 ecx, DWORD PTR _piSrcSign2$[ebp]
  001e5	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  001e8	89 95 c4 df ff
	ff		 mov	 DWORD PTR _uiSignbitData2$[ebp], edx
  001ee	8b 85 dc df ff
	ff		 mov	 eax, DWORD PTR _piSrcSign2$[ebp]
  001f4	83 c0 02	 add	 eax, 2
  001f7	89 85 dc df ff
	ff		 mov	 DWORD PTR _piSrcSign2$[ebp], eax
  001fd	eb 10		 jmp	 SHORT $L2678
$L2677:
  001ff	8b 8d dc df ff
	ff		 mov	 ecx, DWORD PTR _piSrcSign2$[ebp]
  00205	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  00209	89 95 c4 df ff
	ff		 mov	 DWORD PTR _uiSignbitData2$[ebp], edx
$L2678:

; 2651 : 
; 2652 :     ASSERT_SIGNBIT_POINTER(piSrcSign);
; 2653 : 
; 2654 :     if (i < cSubFrameSampleQuad) 

  0020f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00212	3b 45 e8	 cmp	 eax, DWORD PTR _cSubFrameSampleQuad$[ebp]
  00215	0f 8d 65 03 00
	00		 jge	 $L2679

; 2655 :     {
; 2656 :         iSegEnd = min (cSubFrameSampleQuad, iEnd);

  0021b	8b 4d e8	 mov	 ecx, DWORD PTR _cSubFrameSampleQuad$[ebp]
  0021e	3b 8d c8 df ff
	ff		 cmp	 ecx, DWORD PTR _iEnd$[ebp]
  00224	7d 0b		 jge	 SHORT $L3122
  00226	8b 55 e8	 mov	 edx, DWORD PTR _cSubFrameSampleQuad$[ebp]
  00229	89 95 84 df ff
	ff		 mov	 DWORD PTR tv158[ebp], edx
  0022f	eb 0c		 jmp	 SHORT $L3123
$L3122:
  00231	8b 85 c8 df ff
	ff		 mov	 eax, DWORD PTR _iEnd$[ebp]
  00237	89 85 84 df ff
	ff		 mov	 DWORD PTR tv158[ebp], eax
$L3123:
  0023d	8b 8d 84 df ff
	ff		 mov	 ecx, DWORD PTR tv158[ebp]
  00243	89 8d c0 df ff
	ff		 mov	 DWORD PTR _iSegEnd$[ebp], ecx

; 2657 :         if ( i < iSegEnd )

  00249	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0024c	3b 95 c0 df ff
	ff		 cmp	 edx, DWORD PTR _iSegEnd$[ebp]
  00252	0f 8d 28 03 00
	00		 jge	 $L2679

; 2658 :         {
; 2659 :             Int iLoopBy16,iLoopBy1;//,iLoopCnt;
; 2660 :             iLoopBy16 = (iSegEnd - i) >> 4;

  00258	8b 85 c0 df ff
	ff		 mov	 eax, DWORD PTR _iSegEnd$[ebp]
  0025e	2b 45 f4	 sub	 eax, DWORD PTR _i$[ebp]
  00261	c1 f8 04	 sar	 eax, 4
  00264	89 85 94 df ff
	ff		 mov	 DWORD PTR _iLoopBy16$2681[ebp], eax

; 2661 :             iLoopBy1  = (iSegEnd - i) & 0xF;

  0026a	8b 8d c0 df ff
	ff		 mov	 ecx, DWORD PTR _iSegEnd$[ebp]
  00270	2b 4d f4	 sub	 ecx, DWORD PTR _i$[ebp]
  00273	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00276	89 8d 90 df ff
	ff		 mov	 DWORD PTR _iLoopBy1$2682[ebp], ecx

; 2662 :             (*pcSampleGet) += (I16)(iLoopBy16<<4);

  0027c	8b 95 94 df ff
	ff		 mov	 edx, DWORD PTR _iLoopBy16$2681[ebp]
  00282	c1 e2 04	 shl	 edx, 4
  00285	0f bf c2	 movsx	 eax, dx
  00288	8b 4d 10	 mov	 ecx, DWORD PTR _pcSampleGet$[ebp]
  0028b	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  0028e	03 d0		 add	 edx, eax
  00290	8b 45 10	 mov	 eax, DWORD PTR _pcSampleGet$[ebp]
  00293	66 89 10	 mov	 WORD PTR [eax], dx

; 2663 :             i += (iLoopBy16<<4);

  00296	8b 8d 94 df ff
	ff		 mov	 ecx, DWORD PTR _iLoopBy16$2681[ebp]
  0029c	c1 e1 04	 shl	 ecx, 4
  0029f	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  002a2	03 d1		 add	 edx, ecx
  002a4	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx

; 2664 :             assert(iLoopBy1==0);
; 2665 :             tBuf = tempBuf;

  002a7	8d 85 e0 df ff
	ff		 lea	 eax, DWORD PTR _tempBuf$[ebp]
  002ad	89 85 b8 df ff
	ff		 mov	 DWORD PTR _tBuf$[ebp], eax

; 2666 : 
; 2667 :             _asm{
; 2668 :             
; 2669 :             mov         esi,piSin

  002b3	8b b5 ac df ff
	ff		 mov	 esi, DWORD PTR _piSin$[ebp]

; 2670 :             mov         ecx,piCoef

  002b9	8b 8d bc df ff
	ff		 mov	 ecx, DWORD PTR _piCoef$[ebp]

; 2671 :             mov         edx,piCoef2

  002bf	8b 95 a8 df ff
	ff		 mov	 edx, DWORD PTR _piCoef2$[ebp]

; 2672 :             lea         ebx,tempBuf

  002c5	8d 9d e0 df ff
	ff		 lea	 ebx, DWORD PTR _tempBuf$[ebp]

; 2673 :             mov         eax,iLoopBy16

  002cb	8b 85 94 df ff
	ff		 mov	 eax, DWORD PTR _iLoopBy16$2681[ebp]

; 2674 :             shl         eax,4

  002d1	c1 e0 04	 shl	 eax, 4
$Loop1F$2684:

; 2675 :             Loop1F:
; 2676 : 
; 2677 :                 fld         dword Ptr [esi]         //Load Sin value

  002d4	d9 06		 fld	 DWORD PTR [esi]

; 2678 :                 add         esi,4                   //piSin++

  002d6	83 c6 04	 add	 esi, 4

; 2679 :                 fld         dword Ptr [ecx]         //Load Coefficent from channel 1

  002d9	d9 01		 fld	 DWORD PTR [ecx]

; 2680 :                 fmul        st(0),st(1)             //Multiply it with Sin value

  002db	d8 c9		 fmul	 ST(0), ST(1)

; 2681 :                 add         ecx,4                   //piCoef++

  002dd	83 c1 04	 add	 ecx, 4

; 2682 :                 fld         dword Ptr [edx]         //Load Coefficent from channel 2

  002e0	d9 02		 fld	 DWORD PTR [edx]

; 2683 :                 fmulp       st(2),st(0)             //Multiply it with Sin value

  002e2	de ca		 fmulp	 ST(2), ST(0)

; 2684 :                 fistp       dword Ptr [ebx]         //Store as 32bit int

  002e4	db 1b		 fistp	 DWORD PTR [ebx]

; 2685 :                 add         edx,4                   //piCoef2++

  002e6	83 c2 04	 add	 edx, 4

; 2686 :                 fistp       dword Ptr [ebx+4]       //Store as 32bit int

  002e9	db 5b 04	 fistp	 DWORD PTR [ebx+4]

; 2687 :                 add         ebx,8                   //bump temp buffer ptr

  002ec	83 c3 08	 add	 ebx, 8

; 2688 : 
; 2689 :             dec         eax

  002ef	48		 dec	 eax

; 2690 :             jnz         Loop1F

  002f0	75 e2		 jne	 SHORT $Loop1F$2684

; 2691 :             mov         piSin,esi

  002f2	89 b5 ac df ff
	ff		 mov	 DWORD PTR _piSin$[ebp], esi

; 2692 :             mov         piCoef,ecx

  002f8	89 8d bc df ff
	ff		 mov	 DWORD PTR _piCoef$[ebp], ecx

; 2693 :             mov         piCoef2,edx

  002fe	89 95 a8 df ff
	ff		 mov	 DWORD PTR _piCoef2$[ebp], edx

; 2694 :    
; 2695 : 
; 2696 :             mov         ebx,piSrcSign

  00304	8b 9d b4 df ff
	ff		 mov	 ebx, DWORD PTR _piSrcSign$[ebp]

; 2697 :             mov         ecx,piSrcSign2

  0030a	8b 8d dc df ff
	ff		 mov	 ecx, DWORD PTR _piSrcSign2$[ebp]

; 2698 :             mov         esi,piSrc

  00310	8b 75 f8	 mov	 esi, DWORD PTR _piSrc$[ebp]

; 2699 :             mov         edx,tBuf 

  00313	8b 95 b8 df ff
	ff		 mov	 edx, DWORD PTR _tBuf$[ebp]

; 2700 :             mov         edi,piDst

  00319	8b bd d4 df ff
	ff		 mov	 edi, DWORD PTR _piDst$[ebp]

; 2701 : 
; 2702 :             movd        mm0,uiSignbitData    

  0031f	0f 6e 45 f0	 movd	 mm0, DWORD PTR _uiSignbitData$[ebp]

; 2703 :             movd        mm1,uiSignbitData2

  00323	0f 6e 8d c4 df
	ff ff		 movd	 mm1, DWORD PTR _uiSignbitData2$[ebp]

; 2704 : 
; 2705 :             mov         eax,iLoopBy16

  0032a	8b 85 94 df ff
	ff		 mov	 eax, DWORD PTR _iLoopBy16$2681[ebp]
$Loop1M$2685:

; 2706 :             Loop1M:    
; 2707 :                     
; 2708 :                 punpcklwd   mm0,mm1

  00330	0f 61 c1	 punpcklwd mm0, mm1

; 2709 :                     
; 2710 : #               define RECONSTRUCT4(x) _asm {                                            \
; 2711 : _asm            movq        mm1,mm0                                                      \
; 2712 : _asm            psraw       mm1,15             /*sine extend sine bit data*/             \
; 2713 : _asm            movd        mm2,[esi+(x*8)]    /*load 2 16bit data elements*/            \
; 2714 : _asm            punpcklwd   mm2,mm1            /*merge with sign bit for 2 32bit values*/\
; 2715 : _asm            movq        mm1,[edx+(x*16)]   /*get 2 precalculated coef * sin */       \
; 2716 : _asm            paddd       mm1,mm2            /*add the 2 vectors*/                     \
; 2717 : _asm            pslld       mm0,1              /*shift sine bit data for next time*/     \
; 2718 : _asm            movq        mm3,mm0            /*repeat process for 2 more elements*/    \
; 2719 : _asm            psraw       mm3,15                                                       \
; 2720 : _asm            movd        mm4,[esi+(x*8)+4]                                            \
; 2721 : _asm            punpcklwd   mm4,mm3                                                      \
; 2722 : _asm            movq        mm3,[edx+(x*16)+8]                                           \
; 2723 : _asm            paddd       mm3,mm4                                                      \
; 2724 : _asm            packssdw    mm1,mm3           /*merge and saturate 2 sets of 2*/         \
; 2725 : _asm            movq        [edi+(x*8)],mm1   /*store 4 reconstructed samples*/          \
; 2726 : _asm            pslld       mm0,1             /*shift sine bit data for next time*/      }
; 2727 : 
; 2728 :                 RECONSTRUCT4(0)

  00333	0f 7f c1	 movq	 mm1, mm0
  00336	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  0033a	0f 6e 16	 movd	 mm2, DWORD PTR [esi]
  0033d	0f 61 d1	 punpcklwd mm2, mm1
  00340	0f 6f 0a	 movq	 mm1, MMWORD PTR [edx]
  00343	0f fe ca	 paddd	 mm1, mm2
  00346	0f 72 f0 01	 pslld	 mm0, 1
  0034a	0f 7f c3	 movq	 mm3, mm0
  0034d	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  00351	0f 6e 66 04	 movd	 mm4, DWORD PTR [esi+4]
  00355	0f 61 e3	 punpcklwd mm4, mm3
  00358	0f 6f 5a 08	 movq	 mm3, MMWORD PTR [edx+8]
  0035c	0f fe dc	 paddd	 mm3, mm4
  0035f	0f 6b cb	 packssdw mm1, mm3
  00362	0f 7f 0f	 movq	 MMWORD PTR [edi], mm1
  00365	0f 72 f0 01	 pslld	 mm0, 1

; 2729 :                 RECONSTRUCT4(1)

  00369	0f 7f c1	 movq	 mm1, mm0
  0036c	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  00370	0f 6e 56 08	 movd	 mm2, DWORD PTR [esi+8]
  00374	0f 61 d1	 punpcklwd mm2, mm1
  00377	0f 6f 4a 10	 movq	 mm1, MMWORD PTR [edx+16]
  0037b	0f fe ca	 paddd	 mm1, mm2
  0037e	0f 72 f0 01	 pslld	 mm0, 1
  00382	0f 7f c3	 movq	 mm3, mm0
  00385	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  00389	0f 6e 66 0c	 movd	 mm4, DWORD PTR [esi+12]
  0038d	0f 61 e3	 punpcklwd mm4, mm3
  00390	0f 6f 5a 18	 movq	 mm3, MMWORD PTR [edx+24]
  00394	0f fe dc	 paddd	 mm3, mm4
  00397	0f 6b cb	 packssdw mm1, mm3
  0039a	0f 7f 4f 08	 movq	 MMWORD PTR [edi+8], mm1
  0039e	0f 72 f0 01	 pslld	 mm0, 1

; 2730 :                 RECONSTRUCT4(2)

  003a2	0f 7f c1	 movq	 mm1, mm0
  003a5	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  003a9	0f 6e 56 10	 movd	 mm2, DWORD PTR [esi+16]
  003ad	0f 61 d1	 punpcklwd mm2, mm1
  003b0	0f 6f 4a 20	 movq	 mm1, MMWORD PTR [edx+32]
  003b4	0f fe ca	 paddd	 mm1, mm2
  003b7	0f 72 f0 01	 pslld	 mm0, 1
  003bb	0f 7f c3	 movq	 mm3, mm0
  003be	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  003c2	0f 6e 66 14	 movd	 mm4, DWORD PTR [esi+20]
  003c6	0f 61 e3	 punpcklwd mm4, mm3
  003c9	0f 6f 5a 28	 movq	 mm3, MMWORD PTR [edx+40]
  003cd	0f fe dc	 paddd	 mm3, mm4
  003d0	0f 6b cb	 packssdw mm1, mm3
  003d3	0f 7f 4f 10	 movq	 MMWORD PTR [edi+16], mm1
  003d7	0f 72 f0 01	 pslld	 mm0, 1

; 2731 :                 RECONSTRUCT4(3)

  003db	0f 7f c1	 movq	 mm1, mm0
  003de	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  003e2	0f 6e 56 18	 movd	 mm2, DWORD PTR [esi+24]
  003e6	0f 61 d1	 punpcklwd mm2, mm1
  003e9	0f 6f 4a 30	 movq	 mm1, MMWORD PTR [edx+48]
  003ed	0f fe ca	 paddd	 mm1, mm2
  003f0	0f 72 f0 01	 pslld	 mm0, 1
  003f4	0f 7f c3	 movq	 mm3, mm0
  003f7	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  003fb	0f 6e 66 1c	 movd	 mm4, DWORD PTR [esi+28]
  003ff	0f 61 e3	 punpcklwd mm4, mm3
  00402	0f 6f 5a 38	 movq	 mm3, MMWORD PTR [edx+56]
  00406	0f fe dc	 paddd	 mm3, mm4
  00409	0f 6b cb	 packssdw mm1, mm3
  0040c	0f 7f 4f 18	 movq	 MMWORD PTR [edi+24], mm1
  00410	0f 72 f0 01	 pslld	 mm0, 1

; 2732 :                 RECONSTRUCT4(4)

  00414	0f 7f c1	 movq	 mm1, mm0
  00417	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  0041b	0f 6e 56 20	 movd	 mm2, DWORD PTR [esi+32]
  0041f	0f 61 d1	 punpcklwd mm2, mm1
  00422	0f 6f 4a 40	 movq	 mm1, MMWORD PTR [edx+64]
  00426	0f fe ca	 paddd	 mm1, mm2
  00429	0f 72 f0 01	 pslld	 mm0, 1
  0042d	0f 7f c3	 movq	 mm3, mm0
  00430	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  00434	0f 6e 66 24	 movd	 mm4, DWORD PTR [esi+36]
  00438	0f 61 e3	 punpcklwd mm4, mm3
  0043b	0f 6f 5a 48	 movq	 mm3, MMWORD PTR [edx+72]
  0043f	0f fe dc	 paddd	 mm3, mm4
  00442	0f 6b cb	 packssdw mm1, mm3
  00445	0f 7f 4f 20	 movq	 MMWORD PTR [edi+32], mm1
  00449	0f 72 f0 01	 pslld	 mm0, 1

; 2733 :                 RECONSTRUCT4(5)

  0044d	0f 7f c1	 movq	 mm1, mm0
  00450	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  00454	0f 6e 56 28	 movd	 mm2, DWORD PTR [esi+40]
  00458	0f 61 d1	 punpcklwd mm2, mm1
  0045b	0f 6f 4a 50	 movq	 mm1, MMWORD PTR [edx+80]
  0045f	0f fe ca	 paddd	 mm1, mm2
  00462	0f 72 f0 01	 pslld	 mm0, 1
  00466	0f 7f c3	 movq	 mm3, mm0
  00469	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  0046d	0f 6e 66 2c	 movd	 mm4, DWORD PTR [esi+44]
  00471	0f 61 e3	 punpcklwd mm4, mm3
  00474	0f 6f 5a 58	 movq	 mm3, MMWORD PTR [edx+88]
  00478	0f fe dc	 paddd	 mm3, mm4
  0047b	0f 6b cb	 packssdw mm1, mm3
  0047e	0f 7f 4f 28	 movq	 MMWORD PTR [edi+40], mm1
  00482	0f 72 f0 01	 pslld	 mm0, 1

; 2734 :                 RECONSTRUCT4(6)

  00486	0f 7f c1	 movq	 mm1, mm0
  00489	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  0048d	0f 6e 56 30	 movd	 mm2, DWORD PTR [esi+48]
  00491	0f 61 d1	 punpcklwd mm2, mm1
  00494	0f 6f 4a 60	 movq	 mm1, MMWORD PTR [edx+96]
  00498	0f fe ca	 paddd	 mm1, mm2
  0049b	0f 72 f0 01	 pslld	 mm0, 1
  0049f	0f 7f c3	 movq	 mm3, mm0
  004a2	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  004a6	0f 6e 66 34	 movd	 mm4, DWORD PTR [esi+52]
  004aa	0f 61 e3	 punpcklwd mm4, mm3
  004ad	0f 6f 5a 68	 movq	 mm3, MMWORD PTR [edx+104]
  004b1	0f fe dc	 paddd	 mm3, mm4
  004b4	0f 6b cb	 packssdw mm1, mm3
  004b7	0f 7f 4f 30	 movq	 MMWORD PTR [edi+48], mm1
  004bb	0f 72 f0 01	 pslld	 mm0, 1

; 2735 :                 RECONSTRUCT4(7)

  004bf	0f 7f c1	 movq	 mm1, mm0
  004c2	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  004c6	0f 6e 56 38	 movd	 mm2, DWORD PTR [esi+56]
  004ca	0f 61 d1	 punpcklwd mm2, mm1
  004cd	0f 6f 4a 70	 movq	 mm1, MMWORD PTR [edx+112]
  004d1	0f fe ca	 paddd	 mm1, mm2
  004d4	0f 72 f0 01	 pslld	 mm0, 1
  004d8	0f 7f c3	 movq	 mm3, mm0
  004db	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  004df	0f 6e 66 3c	 movd	 mm4, DWORD PTR [esi+60]
  004e3	0f 61 e3	 punpcklwd mm4, mm3
  004e6	0f 6f 5a 78	 movq	 mm3, MMWORD PTR [edx+120]
  004ea	0f fe dc	 paddd	 mm3, mm4
  004ed	0f 6b cb	 packssdw mm1, mm3
  004f0	0f 7f 4f 38	 movq	 MMWORD PTR [edi+56], mm1
  004f4	0f 72 f0 01	 pslld	 mm0, 1

; 2736 :                     
; 2737 :                 add         esi,32*2

  004f8	83 c6 40	 add	 esi, 64			; 00000040H

; 2738 :                 add         edx,32*4

  004fb	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H

; 2739 :                 add         edi,32*2

  00501	83 c7 40	 add	 edi, 64			; 00000040H

; 2740 : 
; 2741 :                 movd        mm0,[ebx]

  00504	0f 6e 03	 movd	 mm0, DWORD PTR [ebx]

; 2742 :                 movd        mm1,[ecx]

  00507	0f 6e 09	 movd	 mm1, DWORD PTR [ecx]

; 2743 : 
; 2744 :                 add         ebx,2

  0050a	83 c3 02	 add	 ebx, 2

; 2745 :                 add         ecx,2

  0050d	83 c1 02	 add	 ecx, 2

; 2746 :                 
; 2747 : 
; 2748 :             dec         eax

  00510	48		 dec	 eax

; 2749 :             jnz         Loop1M

  00511	0f 85 19 fe ff
	ff		 jne	 $Loop1M$2685

; 2750 : 
; 2751 :             mov         piSrc,esi

  00517	89 75 f8	 mov	 DWORD PTR _piSrc$[ebp], esi

; 2752 :             mov         tBuf,edx

  0051a	89 95 b8 df ff
	ff		 mov	 DWORD PTR _tBuf$[ebp], edx

; 2753 :             mov         piDst,edi

  00520	89 bd d4 df ff
	ff		 mov	 DWORD PTR _piDst$[ebp], edi

; 2754 : 
; 2755 :             movd        uiSignbitData,mm0

  00526	0f 7e 45 f0	 movd	 DWORD PTR _uiSignbitData$[ebp], mm0

; 2756 :             movd        uiSignbitData2,mm1

  0052a	0f 7e 8d c4 df
	ff ff		 movd	 DWORD PTR _uiSignbitData2$[ebp], mm1

; 2757 :             mov         piSrcSign,ebx

  00531	89 9d b4 df ff
	ff		 mov	 DWORD PTR _piSrcSign$[ebp], ebx

; 2758 :             mov         piSrcSign2,ecx

  00537	89 8d dc df ff
	ff		 mov	 DWORD PTR _piSrcSign2$[ebp], ecx

; 2759 : 
; 2760 :             emms

  0053d	0f 77		 emms

; 2761 :             }
; 2762 :             uiSignbitCount  = 16;

  0053f	c7 85 d8 df ff
	ff 10 00 00 00	 mov	 DWORD PTR _uiSignbitCount$[ebp], 16 ; 00000010H

; 2763 :             uiSignbitCount2 = 16;

  00549	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR _uiSignbitCount2$[ebp], 16 ; 00000010H

; 2764 :             if (iLoopBy1) {

  00550	83 bd 90 df ff
	ff 00		 cmp	 DWORD PTR _iLoopBy1$2682[ebp], 0
  00557	74 27		 je	 SHORT $L2679

; 2765 :                 pau->aupfnReconstruct = auReconstruct;

  00559	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  0055c	c7 81 f8 03 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1016], OFFSET FLAT:_auReconstruct_XDS@16

; 2766 :                 return auReconstruct(pau,piOutput,pcSampleGet,fForceTransformAll); 

  00566	8b 55 14	 mov	 edx, DWORD PTR _fForceTransformAll$[ebp]
  00569	52		 push	 edx
  0056a	8b 45 10	 mov	 eax, DWORD PTR _pcSampleGet$[ebp]
  0056d	50		 push	 eax
  0056e	8b 4d 0c	 mov	 ecx, DWORD PTR _piOutput$[ebp]
  00571	51		 push	 ecx
  00572	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00575	52		 push	 edx
  00576	e8 00 00 00 00	 call	 _auReconstruct_XDS@16
  0057b	e9 af 05 00 00	 jmp	 $L2635
$L2679:

; 2767 :             }
; 2768 : /*            for (iLoopCnt = 0; iLoopCnt < iLoopBy1; iLoopCnt++, i++, (*pcSampleGet)++)    {
; 2769 :                 //Channel 1
; 2770 :                 COMBINE_SIGNBIT(iResult, *piSrc, piSrcSign, uiSignbitData,
; 2771 :                     uiSignbitCount);
; 2772 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin,*piCoef++) + COEF_FROM_INT(iResult) );
; 2773 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );
; 2774 :                 piSrc++;
; 2775 :                 piDst++;
; 2776 : 
; 2777 :                 //Channel 2
; 2778 :                 COMBINE_SIGNBIT(iResult, *piSrc, piSrcSign, uiSignbitData2,
; 2779 :                     uiSignbitCount2);
; 2780 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*piCoef2++) + COEF_FROM_INT(iResult) );
; 2781 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );
; 2782 :                 piSrc++;
; 2783 :                 piDst++;
; 2784 :             }  */
; 2785 :         }
; 2786 :     }
; 2787 : 
; 2788 :     if (i < iCoefRecurQ2)  

  00580	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00583	3b 85 b0 df ff
	ff		 cmp	 eax, DWORD PTR _iCoefRecurQ2$[ebp]
  00589	0f 8d 6d 03 00
	00		 jge	 $L2687

; 2789 :     {
; 2790 :         iSegEnd = min (iCoefRecurQ2, iEnd);

  0058f	8b 8d b0 df ff
	ff		 mov	 ecx, DWORD PTR _iCoefRecurQ2$[ebp]
  00595	3b 8d c8 df ff
	ff		 cmp	 ecx, DWORD PTR _iEnd$[ebp]
  0059b	7d 0e		 jge	 SHORT $L3124
  0059d	8b 95 b0 df ff
	ff		 mov	 edx, DWORD PTR _iCoefRecurQ2$[ebp]
  005a3	89 95 80 df ff
	ff		 mov	 DWORD PTR tv181[ebp], edx
  005a9	eb 0c		 jmp	 SHORT $L3125
$L3124:
  005ab	8b 85 c8 df ff
	ff		 mov	 eax, DWORD PTR _iEnd$[ebp]
  005b1	89 85 80 df ff
	ff		 mov	 DWORD PTR tv181[ebp], eax
$L3125:
  005b7	8b 8d 80 df ff
	ff		 mov	 ecx, DWORD PTR tv181[ebp]
  005bd	89 8d c0 df ff
	ff		 mov	 DWORD PTR _iSegEnd$[ebp], ecx

; 2791 :         if ( i < iSegEnd )

  005c3	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  005c6	3b 95 c0 df ff
	ff		 cmp	 edx, DWORD PTR _iSegEnd$[ebp]
  005cc	0f 8d 2a 03 00
	00		 jge	 $L2687

; 2792 :         {
; 2793 :             Int iLoopBy16,iLoopBy1;//,iLoopCnt;
; 2794 :             iLoopBy16 = (iSegEnd - i) >> 4;

  005d2	8b 85 c0 df ff
	ff		 mov	 eax, DWORD PTR _iSegEnd$[ebp]
  005d8	2b 45 f4	 sub	 eax, DWORD PTR _i$[ebp]
  005db	c1 f8 04	 sar	 eax, 4
  005de	89 85 8c df ff
	ff		 mov	 DWORD PTR _iLoopBy16$2689[ebp], eax

; 2795 :             iLoopBy1  = (iSegEnd - i) & 0xF;

  005e4	8b 8d c0 df ff
	ff		 mov	 ecx, DWORD PTR _iSegEnd$[ebp]
  005ea	2b 4d f4	 sub	 ecx, DWORD PTR _i$[ebp]
  005ed	83 e1 0f	 and	 ecx, 15			; 0000000fH
  005f0	89 8d 88 df ff
	ff		 mov	 DWORD PTR _iLoopBy1$2690[ebp], ecx

; 2796 :             assert(iLoopBy1==0);
; 2797 :             (*pcSampleGet) += (I16)(iLoopBy16<<4);

  005f6	8b 95 8c df ff
	ff		 mov	 edx, DWORD PTR _iLoopBy16$2689[ebp]
  005fc	c1 e2 04	 shl	 edx, 4
  005ff	0f bf c2	 movsx	 eax, dx
  00602	8b 4d 10	 mov	 ecx, DWORD PTR _pcSampleGet$[ebp]
  00605	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00608	03 d0		 add	 edx, eax
  0060a	8b 45 10	 mov	 eax, DWORD PTR _pcSampleGet$[ebp]
  0060d	66 89 10	 mov	 WORD PTR [eax], dx

; 2798 :             i += (iLoopBy16<<4);

  00610	8b 8d 8c df ff
	ff		 mov	 ecx, DWORD PTR _iLoopBy16$2689[ebp]
  00616	c1 e1 04	 shl	 ecx, 4
  00619	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0061c	03 d1		 add	 edx, ecx
  0061e	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx

; 2799 :             tBuf = tempBuf;

  00621	8d 85 e0 df ff
	ff		 lea	 eax, DWORD PTR _tempBuf$[ebp]
  00627	89 85 b8 df ff
	ff		 mov	 DWORD PTR _tBuf$[ebp], eax

; 2800 :             _asm{
; 2801 :             mov         esi,piSin

  0062d	8b b5 ac df ff
	ff		 mov	 esi, DWORD PTR _piSin$[ebp]

; 2802 :             mov         ecx,piCoef

  00633	8b 8d bc df ff
	ff		 mov	 ecx, DWORD PTR _piCoef$[ebp]

; 2803 :             mov         edx,piCoef2

  00639	8b 95 a8 df ff
	ff		 mov	 edx, DWORD PTR _piCoef2$[ebp]

; 2804 :             mov         ebx,tBuf

  0063f	8b 9d b8 df ff
	ff		 mov	 ebx, DWORD PTR _tBuf$[ebp]

; 2805 :             mov         eax,iLoopBy16

  00645	8b 85 8c df ff
	ff		 mov	 eax, DWORD PTR _iLoopBy16$2689[ebp]

; 2806 :             shl         eax,4

  0064b	c1 e0 04	 shl	 eax, 4
$Loop2F$2692:

; 2807 :             Loop2F:
; 2808 : 
; 2809 :                 fld         dword Ptr [esi]         //Load Sin value

  0064e	d9 06		 fld	 DWORD PTR [esi]

; 2810 :                 add         esi,4                   //piSin++

  00650	83 c6 04	 add	 esi, 4

; 2811 :                 fld         dword Ptr [ecx-4]       //Load Coefficent from channel 1

  00653	d9 41 fc	 fld	 DWORD PTR [ecx-4]

; 2812 :                 fmul        st(0),st(1)             //Multiply it with Sin value

  00656	d8 c9		 fmul	 ST(0), ST(1)

; 2813 :                 sub         ecx,4                   //piCoef--

  00658	83 e9 04	 sub	 ecx, 4

; 2814 :                 fld         dword Ptr [edx-4]       //Load Coefficent from channel 2

  0065b	d9 42 fc	 fld	 DWORD PTR [edx-4]

; 2815 :                 fmulp       st(2),st(0)             //Multiply it with Sin value

  0065e	de ca		 fmulp	 ST(2), ST(0)

; 2816 :                 fistp       dword Ptr [ebx]         //Store as 32bit int

  00660	db 1b		 fistp	 DWORD PTR [ebx]

; 2817 :                 sub         edx,4                   //piCoef--

  00662	83 ea 04	 sub	 edx, 4

; 2818 :                 fistp       dword Ptr [ebx+4]       //Store as 32bit int

  00665	db 5b 04	 fistp	 DWORD PTR [ebx+4]

; 2819 :                 add         ebx,8                   //bump temp buffer ptr

  00668	83 c3 08	 add	 ebx, 8

; 2820 : 
; 2821 :             dec         eax

  0066b	48		 dec	 eax

; 2822 :             jnz         Loop2F

  0066c	75 e0		 jne	 SHORT $Loop2F$2692

; 2823 :             mov         piSin,esi

  0066e	89 b5 ac df ff
	ff		 mov	 DWORD PTR _piSin$[ebp], esi

; 2824 :             mov         piCoef,ecx

  00674	89 8d bc df ff
	ff		 mov	 DWORD PTR _piCoef$[ebp], ecx

; 2825 :             mov         piCoef2,edx

  0067a	89 95 a8 df ff
	ff		 mov	 DWORD PTR _piCoef2$[ebp], edx

; 2826 :                 
; 2827 :             mov         ebx,piSrcSign

  00680	8b 9d b4 df ff
	ff		 mov	 ebx, DWORD PTR _piSrcSign$[ebp]

; 2828 :             mov         ecx,piSrcSign2

  00686	8b 8d dc df ff
	ff		 mov	 ecx, DWORD PTR _piSrcSign2$[ebp]

; 2829 :             mov         esi,piSrc

  0068c	8b 75 f8	 mov	 esi, DWORD PTR _piSrc$[ebp]

; 2830 :             mov         edx,tBuf 

  0068f	8b 95 b8 df ff
	ff		 mov	 edx, DWORD PTR _tBuf$[ebp]

; 2831 :             mov         edi,piDst

  00695	8b bd d4 df ff
	ff		 mov	 edi, DWORD PTR _piDst$[ebp]

; 2832 : 
; 2833 :             movd        mm0,uiSignbitData    

  0069b	0f 6e 45 f0	 movd	 mm0, DWORD PTR _uiSignbitData$[ebp]

; 2834 :             movd        mm1,uiSignbitData2

  0069f	0f 6e 8d c4 df
	ff ff		 movd	 mm1, DWORD PTR _uiSignbitData2$[ebp]

; 2835 : 
; 2836 :             mov         eax,iLoopBy16

  006a6	8b 85 8c df ff
	ff		 mov	 eax, DWORD PTR _iLoopBy16$2689[ebp]
$Loop2M$2693:

; 2837 :             Loop2M:    
; 2838 :                     
; 2839 :                 punpcklwd   mm0,mm1

  006ac	0f 61 c1	 punpcklwd mm0, mm1

; 2840 :                     
; 2841 :                 RECONSTRUCT4(0)

  006af	0f 7f c1	 movq	 mm1, mm0
  006b2	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  006b6	0f 6e 16	 movd	 mm2, DWORD PTR [esi]
  006b9	0f 61 d1	 punpcklwd mm2, mm1
  006bc	0f 6f 0a	 movq	 mm1, MMWORD PTR [edx]
  006bf	0f fe ca	 paddd	 mm1, mm2
  006c2	0f 72 f0 01	 pslld	 mm0, 1
  006c6	0f 7f c3	 movq	 mm3, mm0
  006c9	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  006cd	0f 6e 66 04	 movd	 mm4, DWORD PTR [esi+4]
  006d1	0f 61 e3	 punpcklwd mm4, mm3
  006d4	0f 6f 5a 08	 movq	 mm3, MMWORD PTR [edx+8]
  006d8	0f fe dc	 paddd	 mm3, mm4
  006db	0f 6b cb	 packssdw mm1, mm3
  006de	0f 7f 0f	 movq	 MMWORD PTR [edi], mm1
  006e1	0f 72 f0 01	 pslld	 mm0, 1

; 2842 :                 RECONSTRUCT4(1)

  006e5	0f 7f c1	 movq	 mm1, mm0
  006e8	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  006ec	0f 6e 56 08	 movd	 mm2, DWORD PTR [esi+8]
  006f0	0f 61 d1	 punpcklwd mm2, mm1
  006f3	0f 6f 4a 10	 movq	 mm1, MMWORD PTR [edx+16]
  006f7	0f fe ca	 paddd	 mm1, mm2
  006fa	0f 72 f0 01	 pslld	 mm0, 1
  006fe	0f 7f c3	 movq	 mm3, mm0
  00701	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  00705	0f 6e 66 0c	 movd	 mm4, DWORD PTR [esi+12]
  00709	0f 61 e3	 punpcklwd mm4, mm3
  0070c	0f 6f 5a 18	 movq	 mm3, MMWORD PTR [edx+24]
  00710	0f fe dc	 paddd	 mm3, mm4
  00713	0f 6b cb	 packssdw mm1, mm3
  00716	0f 7f 4f 08	 movq	 MMWORD PTR [edi+8], mm1
  0071a	0f 72 f0 01	 pslld	 mm0, 1

; 2843 :                 RECONSTRUCT4(2)

  0071e	0f 7f c1	 movq	 mm1, mm0
  00721	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  00725	0f 6e 56 10	 movd	 mm2, DWORD PTR [esi+16]
  00729	0f 61 d1	 punpcklwd mm2, mm1
  0072c	0f 6f 4a 20	 movq	 mm1, MMWORD PTR [edx+32]
  00730	0f fe ca	 paddd	 mm1, mm2
  00733	0f 72 f0 01	 pslld	 mm0, 1
  00737	0f 7f c3	 movq	 mm3, mm0
  0073a	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  0073e	0f 6e 66 14	 movd	 mm4, DWORD PTR [esi+20]
  00742	0f 61 e3	 punpcklwd mm4, mm3
  00745	0f 6f 5a 28	 movq	 mm3, MMWORD PTR [edx+40]
  00749	0f fe dc	 paddd	 mm3, mm4
  0074c	0f 6b cb	 packssdw mm1, mm3
  0074f	0f 7f 4f 10	 movq	 MMWORD PTR [edi+16], mm1
  00753	0f 72 f0 01	 pslld	 mm0, 1

; 2844 :                 RECONSTRUCT4(3)

  00757	0f 7f c1	 movq	 mm1, mm0
  0075a	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  0075e	0f 6e 56 18	 movd	 mm2, DWORD PTR [esi+24]
  00762	0f 61 d1	 punpcklwd mm2, mm1
  00765	0f 6f 4a 30	 movq	 mm1, MMWORD PTR [edx+48]
  00769	0f fe ca	 paddd	 mm1, mm2
  0076c	0f 72 f0 01	 pslld	 mm0, 1
  00770	0f 7f c3	 movq	 mm3, mm0
  00773	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  00777	0f 6e 66 1c	 movd	 mm4, DWORD PTR [esi+28]
  0077b	0f 61 e3	 punpcklwd mm4, mm3
  0077e	0f 6f 5a 38	 movq	 mm3, MMWORD PTR [edx+56]
  00782	0f fe dc	 paddd	 mm3, mm4
  00785	0f 6b cb	 packssdw mm1, mm3
  00788	0f 7f 4f 18	 movq	 MMWORD PTR [edi+24], mm1
  0078c	0f 72 f0 01	 pslld	 mm0, 1

; 2845 :                 RECONSTRUCT4(4)

  00790	0f 7f c1	 movq	 mm1, mm0
  00793	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  00797	0f 6e 56 20	 movd	 mm2, DWORD PTR [esi+32]
  0079b	0f 61 d1	 punpcklwd mm2, mm1
  0079e	0f 6f 4a 40	 movq	 mm1, MMWORD PTR [edx+64]
  007a2	0f fe ca	 paddd	 mm1, mm2
  007a5	0f 72 f0 01	 pslld	 mm0, 1
  007a9	0f 7f c3	 movq	 mm3, mm0
  007ac	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  007b0	0f 6e 66 24	 movd	 mm4, DWORD PTR [esi+36]
  007b4	0f 61 e3	 punpcklwd mm4, mm3
  007b7	0f 6f 5a 48	 movq	 mm3, MMWORD PTR [edx+72]
  007bb	0f fe dc	 paddd	 mm3, mm4
  007be	0f 6b cb	 packssdw mm1, mm3
  007c1	0f 7f 4f 20	 movq	 MMWORD PTR [edi+32], mm1
  007c5	0f 72 f0 01	 pslld	 mm0, 1

; 2846 :                 RECONSTRUCT4(5)

  007c9	0f 7f c1	 movq	 mm1, mm0
  007cc	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  007d0	0f 6e 56 28	 movd	 mm2, DWORD PTR [esi+40]
  007d4	0f 61 d1	 punpcklwd mm2, mm1
  007d7	0f 6f 4a 50	 movq	 mm1, MMWORD PTR [edx+80]
  007db	0f fe ca	 paddd	 mm1, mm2
  007de	0f 72 f0 01	 pslld	 mm0, 1
  007e2	0f 7f c3	 movq	 mm3, mm0
  007e5	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  007e9	0f 6e 66 2c	 movd	 mm4, DWORD PTR [esi+44]
  007ed	0f 61 e3	 punpcklwd mm4, mm3
  007f0	0f 6f 5a 58	 movq	 mm3, MMWORD PTR [edx+88]
  007f4	0f fe dc	 paddd	 mm3, mm4
  007f7	0f 6b cb	 packssdw mm1, mm3
  007fa	0f 7f 4f 28	 movq	 MMWORD PTR [edi+40], mm1
  007fe	0f 72 f0 01	 pslld	 mm0, 1

; 2847 :                 RECONSTRUCT4(6)

  00802	0f 7f c1	 movq	 mm1, mm0
  00805	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  00809	0f 6e 56 30	 movd	 mm2, DWORD PTR [esi+48]
  0080d	0f 61 d1	 punpcklwd mm2, mm1
  00810	0f 6f 4a 60	 movq	 mm1, MMWORD PTR [edx+96]
  00814	0f fe ca	 paddd	 mm1, mm2
  00817	0f 72 f0 01	 pslld	 mm0, 1
  0081b	0f 7f c3	 movq	 mm3, mm0
  0081e	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  00822	0f 6e 66 34	 movd	 mm4, DWORD PTR [esi+52]
  00826	0f 61 e3	 punpcklwd mm4, mm3
  00829	0f 6f 5a 68	 movq	 mm3, MMWORD PTR [edx+104]
  0082d	0f fe dc	 paddd	 mm3, mm4
  00830	0f 6b cb	 packssdw mm1, mm3
  00833	0f 7f 4f 30	 movq	 MMWORD PTR [edi+48], mm1
  00837	0f 72 f0 01	 pslld	 mm0, 1

; 2848 :                 RECONSTRUCT4(7)

  0083b	0f 7f c1	 movq	 mm1, mm0
  0083e	0f 71 e1 0f	 psraw	 mm1, 15			; 0000000fH
  00842	0f 6e 56 38	 movd	 mm2, DWORD PTR [esi+56]
  00846	0f 61 d1	 punpcklwd mm2, mm1
  00849	0f 6f 4a 70	 movq	 mm1, MMWORD PTR [edx+112]
  0084d	0f fe ca	 paddd	 mm1, mm2
  00850	0f 72 f0 01	 pslld	 mm0, 1
  00854	0f 7f c3	 movq	 mm3, mm0
  00857	0f 71 e3 0f	 psraw	 mm3, 15			; 0000000fH
  0085b	0f 6e 66 3c	 movd	 mm4, DWORD PTR [esi+60]
  0085f	0f 61 e3	 punpcklwd mm4, mm3
  00862	0f 6f 5a 78	 movq	 mm3, MMWORD PTR [edx+120]
  00866	0f fe dc	 paddd	 mm3, mm4
  00869	0f 6b cb	 packssdw mm1, mm3
  0086c	0f 7f 4f 38	 movq	 MMWORD PTR [edi+56], mm1
  00870	0f 72 f0 01	 pslld	 mm0, 1

; 2849 :                     
; 2850 :                 add         esi,32*2

  00874	83 c6 40	 add	 esi, 64			; 00000040H

; 2851 :                 add         edx,32*4

  00877	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H

; 2852 :                 add         edi,32*2

  0087d	83 c7 40	 add	 edi, 64			; 00000040H

; 2853 : 
; 2854 :                 movd        mm0,[ebx]

  00880	0f 6e 03	 movd	 mm0, DWORD PTR [ebx]

; 2855 :                 movd        mm1,[ecx]

  00883	0f 6e 09	 movd	 mm1, DWORD PTR [ecx]

; 2856 : 
; 2857 :                 add         ebx,2

  00886	83 c3 02	 add	 ebx, 2

; 2858 :                 add         ecx,2

  00889	83 c1 02	 add	 ecx, 2

; 2859 :                 
; 2860 : 
; 2861 :             dec         eax

  0088c	48		 dec	 eax

; 2862 :             jnz         Loop2M

  0088d	0f 85 19 fe ff
	ff		 jne	 $Loop2M$2693

; 2863 : 
; 2864 :             mov         piSrc,esi

  00893	89 75 f8	 mov	 DWORD PTR _piSrc$[ebp], esi

; 2865 :             mov         tBuf,edx

  00896	89 95 b8 df ff
	ff		 mov	 DWORD PTR _tBuf$[ebp], edx

; 2866 :             mov         piDst,edi

  0089c	89 bd d4 df ff
	ff		 mov	 DWORD PTR _piDst$[ebp], edi

; 2867 : 
; 2868 :             movd        uiSignbitData,mm0

  008a2	0f 7e 45 f0	 movd	 DWORD PTR _uiSignbitData$[ebp], mm0

; 2869 :             movd        uiSignbitData2,mm1

  008a6	0f 7e 8d c4 df
	ff ff		 movd	 DWORD PTR _uiSignbitData2$[ebp], mm1

; 2870 :             mov         piSrcSign,ebx

  008ad	89 9d b4 df ff
	ff		 mov	 DWORD PTR _piSrcSign$[ebp], ebx

; 2871 :             mov         piSrcSign2,ecx

  008b3	89 8d dc df ff
	ff		 mov	 DWORD PTR _piSrcSign2$[ebp], ecx

; 2872 : 
; 2873 :             emms

  008b9	0f 77		 emms

; 2874 : #           undef RECONSTRUCT4
; 2875 :             }
; 2876 :             uiSignbitCount  = 16;

  008bb	c7 85 d8 df ff
	ff 10 00 00 00	 mov	 DWORD PTR _uiSignbitCount$[ebp], 16 ; 00000010H

; 2877 :             uiSignbitCount2 = 16;

  008c5	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR _uiSignbitCount2$[ebp], 16 ; 00000010H

; 2878 :             if (iLoopBy1) {

  008cc	83 bd 88 df ff
	ff 00		 cmp	 DWORD PTR _iLoopBy1$2690[ebp], 0
  008d3	74 27		 je	 SHORT $L2687

; 2879 :                 pau->aupfnReconstruct = auReconstruct;

  008d5	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  008d8	c7 81 f8 03 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1016], OFFSET FLAT:_auReconstruct_XDS@16

; 2880 :                 return auReconstruct(pau,piOutput,pcSampleGet,fForceTransformAll); 

  008e2	8b 55 14	 mov	 edx, DWORD PTR _fForceTransformAll$[ebp]
  008e5	52		 push	 edx
  008e6	8b 45 10	 mov	 eax, DWORD PTR _pcSampleGet$[ebp]
  008e9	50		 push	 eax
  008ea	8b 4d 0c	 mov	 ecx, DWORD PTR _piOutput$[ebp]
  008ed	51		 push	 ecx
  008ee	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  008f1	52		 push	 edx
  008f2	e8 00 00 00 00	 call	 _auReconstruct_XDS@16
  008f7	e9 33 02 00 00	 jmp	 $L2635
$L2687:

; 2881 :             }
; 2882 : 
; 2883 : /*            for (iLoopCnt = 0; iLoopCnt < iLoopBy1; iLoopCnt++, i++, (*pcSampleGet)++)    {
; 2884 :                 //Channel 1
; 2885 :                 COMBINE_SIGNBIT(iResult, *piSrc, piSrcSign, uiSignbitData,
; 2886 :                     uiSignbitCount);
; 2887 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin,*--piCoef) + COEF_FROM_INT(iResult) );
; 2888 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );
; 2889 :                 piSrc++;
; 2890 :                 piDst++;
; 2891 : 
; 2892 :                 //Channel 2
; 2893 :                 COMBINE_SIGNBIT(iResult, *piSrc, piSrcSign, uiSignbitData2,
; 2894 :                     uiSignbitCount2);
; 2895 :                 cfResult = INT_FROM_COEF( MULT_BP2(*piSin++,*--piCoef2) + COEF_FROM_INT(iResult) );
; 2896 :                 ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );
; 2897 :                 piSrc++;
; 2898 :                 piDst++;
; 2899 :             }   */
; 2900 :         }
; 2901 :     }
; 2902 :     if (i < iCoefRecurQ3) 

  008fc	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  008ff	3b 85 d0 df ff
	ff		 cmp	 eax, DWORD PTR _iCoefRecurQ3$[ebp]
  00905	0f 8d 6f 01 00
	00		 jge	 $L2695

; 2903 :     {
; 2904 :         iSegEnd = min (iCoefRecurQ3, iEnd);

  0090b	8b 8d d0 df ff
	ff		 mov	 ecx, DWORD PTR _iCoefRecurQ3$[ebp]
  00911	3b 8d c8 df ff
	ff		 cmp	 ecx, DWORD PTR _iEnd$[ebp]
  00917	7d 0e		 jge	 SHORT $L3126
  00919	8b 95 d0 df ff
	ff		 mov	 edx, DWORD PTR _iCoefRecurQ3$[ebp]
  0091f	89 95 7c df ff
	ff		 mov	 DWORD PTR tv236[ebp], edx
  00925	eb 0c		 jmp	 SHORT $L3127
$L3126:
  00927	8b 85 c8 df ff
	ff		 mov	 eax, DWORD PTR _iEnd$[ebp]
  0092d	89 85 7c df ff
	ff		 mov	 DWORD PTR tv236[ebp], eax
$L3127:
  00933	8b 8d 7c df ff
	ff		 mov	 ecx, DWORD PTR tv236[ebp]
  00939	89 8d c0 df ff
	ff		 mov	 DWORD PTR _iSegEnd$[ebp], ecx

; 2905 : 
; 2906 :         for (; i < iSegEnd; i++,(*pcSampleGet)++)    {

  0093f	eb 19		 jmp	 SHORT $L2696
$L2697:
  00941	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00944	83 c2 01	 add	 edx, 1
  00947	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
  0094a	8b 45 10	 mov	 eax, DWORD PTR _pcSampleGet$[ebp]
  0094d	66 8b 08	 mov	 cx, WORD PTR [eax]
  00950	66 83 c1 01	 add	 cx, 1
  00954	8b 55 10	 mov	 edx, DWORD PTR _pcSampleGet$[ebp]
  00957	66 89 0a	 mov	 WORD PTR [edx], cx
$L2696:
  0095a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0095d	3b 85 c0 df ff
	ff		 cmp	 eax, DWORD PTR _iSegEnd$[ebp]
  00963	0f 8d 11 01 00
	00		 jge	 $L2695

; 2907 :             cfResult = INT_FROM_COEF( *--piCoef );

  00969	8b 8d bc df ff
	ff		 mov	 ecx, DWORD PTR _piCoef$[ebp]
  0096f	83 e9 04	 sub	 ecx, 4
  00972	89 8d bc df ff
	ff		 mov	 DWORD PTR _piCoef$[ebp], ecx
  00978	8b 95 bc df ff
	ff		 mov	 edx, DWORD PTR _piCoef$[ebp]
  0097e	d9 02		 fld	 DWORD PTR [edx]
  00980	d9 5d e4	 fstp	 DWORD PTR _cfResult$[ebp]

; 2908 :             ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00983	8b 45 e4	 mov	 eax, DWORD PTR _cfResult$[ebp]
  00986	50		 push	 eax
  00987	e8 00 00 00 00	 call	 @ROUNDF@4
  0098c	89 45 e0	 mov	 DWORD PTR _iResult$[ebp], eax
  0098f	81 7d e0 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00996	7d 0c		 jge	 SHORT $L3130
  00998	c7 85 78 df ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv247[ebp], -32768 ; ffff8000H
  009a2	eb 2a		 jmp	 SHORT $L3131
$L3130:
  009a4	81 7d e0 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  009ab	7e 0c		 jle	 SHORT $L3128
  009ad	c7 85 74 df ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv246[ebp], 32767 ; 00007fffH
  009b7	eb 09		 jmp	 SHORT $L3129
$L3128:
  009b9	8b 4d e0	 mov	 ecx, DWORD PTR _iResult$[ebp]
  009bc	89 8d 74 df ff
	ff		 mov	 DWORD PTR tv246[ebp], ecx
$L3129:
  009c2	8b 95 74 df ff
	ff		 mov	 edx, DWORD PTR tv246[ebp]
  009c8	89 95 78 df ff
	ff		 mov	 DWORD PTR tv247[ebp], edx
$L3131:
  009ce	8b 85 78 df ff
	ff		 mov	 eax, DWORD PTR tv247[ebp]
  009d4	89 45 e0	 mov	 DWORD PTR _iResult$[ebp], eax
  009d7	8b 8d d4 df ff
	ff		 mov	 ecx, DWORD PTR _piDst$[ebp]
  009dd	66 8b 55 e0	 mov	 dx, WORD PTR _iResult$[ebp]
  009e1	66 89 11	 mov	 WORD PTR [ecx], dx

; 2909 :             cfResult = INT_FROM_COEF( *--piCoef2 );

  009e4	8b 85 a8 df ff
	ff		 mov	 eax, DWORD PTR _piCoef2$[ebp]
  009ea	83 e8 04	 sub	 eax, 4
  009ed	89 85 a8 df ff
	ff		 mov	 DWORD PTR _piCoef2$[ebp], eax
  009f3	8b 8d a8 df ff
	ff		 mov	 ecx, DWORD PTR _piCoef2$[ebp]
  009f9	d9 01		 fld	 DWORD PTR [ecx]
  009fb	d9 5d e4	 fstp	 DWORD PTR _cfResult$[ebp]

; 2910 :             ROUND_SATURATE_STORE( (piDst+1), cfResult, SHRT_MIN, SHRT_MAX, iResult );

  009fe	8b 55 e4	 mov	 edx, DWORD PTR _cfResult$[ebp]
  00a01	52		 push	 edx
  00a02	e8 00 00 00 00	 call	 @ROUNDF@4
  00a07	89 45 e0	 mov	 DWORD PTR _iResult$[ebp], eax
  00a0a	81 7d e0 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00a11	7d 0c		 jge	 SHORT $L3134
  00a13	c7 85 70 df ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv255[ebp], -32768 ; ffff8000H
  00a1d	eb 2a		 jmp	 SHORT $L3135
$L3134:
  00a1f	81 7d e0 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00a26	7e 0c		 jle	 SHORT $L3132
  00a28	c7 85 6c df ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv254[ebp], 32767 ; 00007fffH
  00a32	eb 09		 jmp	 SHORT $L3133
$L3132:
  00a34	8b 45 e0	 mov	 eax, DWORD PTR _iResult$[ebp]
  00a37	89 85 6c df ff
	ff		 mov	 DWORD PTR tv254[ebp], eax
$L3133:
  00a3d	8b 8d 6c df ff
	ff		 mov	 ecx, DWORD PTR tv254[ebp]
  00a43	89 8d 70 df ff
	ff		 mov	 DWORD PTR tv255[ebp], ecx
$L3135:
  00a49	8b 95 70 df ff
	ff		 mov	 edx, DWORD PTR tv255[ebp]
  00a4f	89 55 e0	 mov	 DWORD PTR _iResult$[ebp], edx
  00a52	8b 85 d4 df ff
	ff		 mov	 eax, DWORD PTR _piDst$[ebp]
  00a58	66 8b 4d e0	 mov	 cx, WORD PTR _iResult$[ebp]
  00a5c	66 89 48 02	 mov	 WORD PTR [eax+2], cx

; 2911 :             piDst += cChan;

  00a60	8b 95 cc df ff
	ff		 mov	 edx, DWORD PTR _cChan$[ebp]
  00a66	8b 85 d4 df ff
	ff		 mov	 eax, DWORD PTR _piDst$[ebp]
  00a6c	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00a6f	89 8d d4 df ff
	ff		 mov	 DWORD PTR _piDst$[ebp], ecx

; 2912 :         }

  00a75	e9 c7 fe ff ff	 jmp	 $L2697
$L2695:

; 2913 :     }
; 2914 : 
; 2915 :     SAVE_SIGNBIT_STATE(piSrcSign,uiSignbitData);

  00a7a	83 bd d8 df ff
	ff 00		 cmp	 DWORD PTR _uiSignbitCount$[ebp], 0
  00a81	74 0e		 je	 SHORT $L2703
  00a83	8b 95 b4 df ff
	ff		 mov	 edx, DWORD PTR _piSrcSign$[ebp]
  00a89	66 8b 45 f0	 mov	 ax, WORD PTR _uiSignbitData$[ebp]
  00a8d	66 89 42 fe	 mov	 WORD PTR [edx-2], ax
$L2703:

; 2916 :     pau->m_rgpcinfo[0].m_rgiCoefReconCurr = (Int*)piCoef;

  00a91	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00a94	8b 91 a0 03 00
	00		 mov	 edx, DWORD PTR [ecx+928]
  00a9a	8b 85 bc df ff
	ff		 mov	 eax, DWORD PTR _piCoef$[ebp]
  00aa0	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 2917 :     pau->m_rgpcinfo[0].m_iCurrGetPCM_SubFrame = (I16)i;

  00aa3	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00aa6	8b 91 a0 03 00
	00		 mov	 edx, DWORD PTR [ecx+928]
  00aac	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00ab0	66 89 42 38	 mov	 WORD PTR [edx+56], ax

; 2918 :     pau->m_rgpcinfo[0].m_piPrevOutputCurr = piSrc;

  00ab4	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00ab7	8b 91 a0 03 00
	00		 mov	 edx, DWORD PTR [ecx+928]
  00abd	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  00ac0	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 2919 : 
; 2920 : 
; 2921 :     SAVE_SIGNBIT_STATE(piSrcSign2,uiSignbitData2);

  00ac3	83 bd d8 df ff
	ff 00		 cmp	 DWORD PTR _uiSignbitCount$[ebp], 0
  00aca	74 11		 je	 SHORT $L2707
  00acc	8b 8d dc df ff
	ff		 mov	 ecx, DWORD PTR _piSrcSign2$[ebp]
  00ad2	66 8b 95 c4 df
	ff ff		 mov	 dx, WORD PTR _uiSignbitData2$[ebp]
  00ad9	66 89 51 fe	 mov	 WORD PTR [ecx-2], dx
$L2707:

; 2922 :     pau->m_rgpcinfo[1].m_rgiCoefReconCurr = (Int*)piCoef2;

  00add	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00ae0	8b 88 a0 03 00
	00		 mov	 ecx, DWORD PTR [eax+928]
  00ae6	8b 95 a8 df ff
	ff		 mov	 edx, DWORD PTR _piCoef2$[ebp]
  00aec	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx

; 2923 :     pau->m_rgpcinfo[1].m_iCurrGetPCM_SubFrame = (I16)i;//= (I16)i;

  00af2	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00af5	8b 88 a0 03 00
	00		 mov	 ecx, DWORD PTR [eax+928]
  00afb	66 8b 55 f4	 mov	 dx, WORD PTR _i$[ebp]
  00aff	66 89 91 a8 00
	00 00		 mov	 WORD PTR [ecx+168], dx

; 2924 :     pau->m_rgpcinfo[1].m_piPrevOutputCurr = piSrc+1;

  00b06	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  00b09	83 c0 02	 add	 eax, 2
  00b0c	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00b0f	8b 91 a0 03 00
	00		 mov	 edx, DWORD PTR [ecx+928]
  00b15	89 82 b8 00 00
	00		 mov	 DWORD PTR [edx+184], eax

; 2925 : 
; 2926 :     pau->m_piSinForRecon = piSin;

  00b1b	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00b1e	8b 8d ac df ff
	ff		 mov	 ecx, DWORD PTR _piSin$[ebp]
  00b24	89 88 28 04 00
	00		 mov	 DWORD PTR [eax+1064], ecx

; 2927 : 
; 2928 : #ifdef PROFILE
; 2929 :     FunctionProfileStop(&fp);
; 2930 : #endif
; 2931 :     return WMA_OK;

  00b2a	a1 00 00 00 00	 mov	 eax, DWORD PTR _WMA_OK
$L2635:

; 2932 : }

  00b2f	5f		 pop	 edi
  00b30	5e		 pop	 esi
  00b31	5b		 pop	 ebx
  00b32	8b e5		 mov	 esp, ebp
  00b34	5d		 pop	 ebp
  00b35	c2 10 00	 ret	 16			; 00000010H
_auReconStereo_MMX_XDS@16 ENDP
WMADEC	ENDS
PUBLIC	_auReconStereo_SIMDFP_XDS@16
; Function compile flags: /Odt
;	COMDAT _auReconStereo_SIMDFP_XDS@16
WMADEC	SEGMENT
tv269 = -164
tv270 = -160
tv261 = -156
tv262 = -152
tv236 = -148
tv181 = -144
tv158 = -140
_cfResult$2783 = -136
_iLoopBy4$2773 = -132
_iLoopBy1$2774 = -128
_iLoopCnt$2775 = -124
_iLoopBy1$2768 = -120
_piDstCopy$2766 = -116
_iLoopBy16$2767 = -112
_iLoopBy1$2760 = -108
_iLoopBy16$2759 = -104
_c_iSignOffset$2751 = -100
_c_iOffset$2750 = -96
_c_iSignOffset$2744 = -92
_c_iOffset$2743 = -88
_piCoef2$ = -84
_piSin$ = -80
_iCoefRecurQ2$ = -76
_piSrcSign$ = -72
_piCoef$ = -68
_iSegEnd$ = -64
_uiSignbitData2$ = -60
_iEnd$ = -56
_cChan$ = -52
_iCoefRecurQ3$ = -48
_piDst$ = -44
_uiSignbitCount$ = -40
_piSrcSign2$ = -36
_iResult$ = -32
_cSubFrameSampleQuad$ = -28
_cSubFrameSampleHalf$ = -24
_uiSignbitData$ = -20
_overflow$ = -16
_i$ = -12
_piSrc$ = -8
_uiSignbitCount2$ = -4
_pau$ = 8
_piOutput$ = 12
_pcSampleGet$ = 16
_fForceTransformAll$ = 20
_auReconStereo_SIMDFP_XDS@16 PROC NEAR			; COMDAT

; 2942 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2943 :     Int overflow = 0;

  0000c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _overflow$[ebp], 0

; 2944 :     Float *piCoef2; 
; 2945 :     Float *piCoef;  
; 2946 :     Int i, iEnd, iSegEnd;
; 2947 :     I16 *piSrc, *piDst; 
; 2948 :     I32 iResult;
; 2949 : 
; 2950 :     // get local copies of these values which are used frequently or repeatedly (helps optimization)
; 2951 :     Int cChan = pau->m_cChannel;

  00013	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00016	0f b7 48 58	 movzx	 ecx, WORD PTR [eax+88]
  0001a	89 4d cc	 mov	 DWORD PTR _cChan$[ebp], ecx

; 2952 :     Int cSubFrameSampleHalf = pau->m_cSubFrameSampleHalfAdjusted;

  0001d	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00020	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00026	89 45 e8	 mov	 DWORD PTR _cSubFrameSampleHalf$[ebp], eax

; 2953 :     Int cSubFrameSampleQuad = pau->m_cSubFrameSampleQuadAdjusted;

  00029	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  0002c	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  00032	89 55 e4	 mov	 DWORD PTR _cSubFrameSampleQuad$[ebp], edx

; 2954 :     Int iCoefRecurQ2 = pau->m_iCoefRecurQ2;

  00035	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00038	8b 88 90 03 00
	00		 mov	 ecx, DWORD PTR [eax+912]
  0003e	89 4d b4	 mov	 DWORD PTR _iCoefRecurQ2$[ebp], ecx

; 2955 :     Int iCoefRecurQ3 = pau->m_iCoefRecurQ3;

  00041	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00044	8b 82 94 03 00
	00		 mov	 eax, DWORD PTR [edx+916]
  0004a	89 45 d0	 mov	 DWORD PTR _iCoefRecurQ3$[ebp], eax

; 2956 :     float *piSin = pau->m_piSinForRecon;

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00050	8b 91 28 04 00
	00		 mov	 edx, DWORD PTR [ecx+1064]
  00056	89 55 b0	 mov	 DWORD PTR _piSin$[ebp], edx

; 2957 : 
; 2958 :     U16    *piSrcSign;
; 2959 :     I32     uiSignbitData;
; 2960 :     U32     uiSignbitCount;
; 2961 :     U16    *piSrcSign2;
; 2962 :     I32     uiSignbitData2;
; 2963 :     U32     uiSignbitCount2;
; 2964 : 
; 2965 : #ifdef PREVOUTPUT_16BITS
; 2966 :     assert(0);
; 2967 : #endif// PREVOUTPUT_16BITS
; 2968 : 
; 2969 : #ifdef PROFILE
; 2970 :     FunctionProfile fp;
; 2971 :     FunctionProfileStart(&fp,RECON_MONO_PROFILE);
; 2972 : #endif
; 2973 : 
; 2974 :     //persistent states
; 2975 :     i = pau->m_rgpcinfo[0].m_iCurrGetPCM_SubFrame;       //current position in a frame

  00059	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  0005c	8b 88 a0 03 00
	00		 mov	 ecx, DWORD PTR [eax+928]
  00062	0f bf 51 38	 movsx	 edx, WORD PTR [ecx+56]
  00066	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx

; 2976 :     assert(i==pau->m_rgpcinfo[1].m_iCurrGetPCM_SubFrame);
; 2977 :     piCoef = (float*)pau->m_rgpcinfo[0].m_rgiCoefReconCurr; 

  00069	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  0006c	8b 88 a0 03 00
	00		 mov	 ecx, DWORD PTR [eax+928]
  00072	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00075	89 55 bc	 mov	 DWORD PTR _piCoef$[ebp], edx

; 2978 :     piCoef2 = (float*)(pau->m_rgpcinfo[1].m_rgiCoefReconCurr); 

  00078	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  0007b	8b 88 a0 03 00
	00		 mov	 ecx, DWORD PTR [eax+928]
  00081	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  00087	89 55 ac	 mov	 DWORD PTR _piCoef2$[ebp], edx

; 2979 : 
; 2980 :     piSrc = pau->m_rgpcinfo[0].m_piPrevOutputCurr;

  0008a	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  0008d	8b 88 a0 03 00
	00		 mov	 ecx, DWORD PTR [eax+928]
  00093	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00096	89 55 f8	 mov	 DWORD PTR _piSrc$[ebp], edx

; 2981 :     assert((piSrc+1) == pau->m_rgpcinfo[1].m_piPrevOutputCurr);
; 2982 :     
; 2983 :     //eventually we'll use piOutput directly
; 2984 :     piDst = piOutput;

  00099	8b 45 0c	 mov	 eax, DWORD PTR _piOutput$[ebp]
  0009c	89 45 d4	 mov	 DWORD PTR _piDst$[ebp], eax

; 2985 : 
; 2986 :     iEnd = i + *pcSampleGet;

  0009f	8b 4d 10	 mov	 ecx, DWORD PTR _pcSampleGet$[ebp]
  000a2	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000a8	03 c2		 add	 eax, edx
  000aa	89 45 c8	 mov	 DWORD PTR _iEnd$[ebp], eax

; 2987 :     *pcSampleGet = 0;

  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _pcSampleGet$[ebp]
  000b0	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0

; 2988 : 
; 2989 :     CALC_SIGN_OFFSETS(pau->m_rgpcinfo[0].m_piPrevOutput,(piSrc+0), pau->m_rgpcinfo[0].m_piPrevOutputSign, piSrcSign, 
; 2990 :         uiSignbitData, uiSignbitCount, cChan)

  000b5	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  000b8	8b 82 a0 03 00
	00		 mov	 eax, DWORD PTR [edx+928]
  000be	8b 55 f8	 mov	 edx, DWORD PTR _piSrc$[ebp]
  000c1	2b 50 40	 sub	 edx, DWORD PTR [eax+64]
  000c4	d1 fa		 sar	 edx, 1
  000c6	8b 4d cc	 mov	 ecx, DWORD PTR _cChan$[ebp]
  000c9	83 e9 01	 sub	 ecx, 1
  000cc	d3 fa		 sar	 edx, cl
  000ce	89 55 a8	 mov	 DWORD PTR _c_iOffset$2743[ebp], edx
  000d1	8b 45 a8	 mov	 eax, DWORD PTR _c_iOffset$2743[ebp]
  000d4	83 c0 0f	 add	 eax, 15			; 0000000fH
  000d7	c1 e8 04	 shr	 eax, 4
  000da	89 45 a4	 mov	 DWORD PTR _c_iSignOffset$2744[ebp], eax
  000dd	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  000e0	8b 91 a0 03 00
	00		 mov	 edx, DWORD PTR [ecx+928]
  000e6	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000e9	8b 4d a4	 mov	 ecx, DWORD PTR _c_iSignOffset$2744[ebp]
  000ec	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  000ef	89 55 b8	 mov	 DWORD PTR _piSrcSign$[ebp], edx
  000f2	8b 45 a8	 mov	 eax, DWORD PTR _c_iOffset$2743[ebp]
  000f5	33 d2		 xor	 edx, edx
  000f7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000fc	f7 f1		 div	 ecx
  000fe	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00103	2b c2		 sub	 eax, edx
  00105	89 45 d8	 mov	 DWORD PTR _uiSignbitCount$[ebp], eax
  00108	83 7d d8 10	 cmp	 DWORD PTR _uiSignbitCount$[ebp], 16 ; 00000010H
  0010c	75 14		 jne	 SHORT $L2748
  0010e	8b 4d b8	 mov	 ecx, DWORD PTR _piSrcSign$[ebp]
  00111	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00114	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
  00117	8b 45 b8	 mov	 eax, DWORD PTR _piSrcSign$[ebp]
  0011a	83 c0 02	 add	 eax, 2
  0011d	89 45 b8	 mov	 DWORD PTR _piSrcSign$[ebp], eax
  00120	eb 0a		 jmp	 SHORT $L2749
$L2748:
  00122	8b 4d b8	 mov	 ecx, DWORD PTR _piSrcSign$[ebp]
  00125	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  00129	89 55 ec	 mov	 DWORD PTR _uiSignbitData$[ebp], edx
$L2749:

; 2991 : 
; 2992 :     CALC_SIGN_OFFSETS(pau->m_rgpcinfo[1].m_piPrevOutput,(piSrc+1), pau->m_rgpcinfo[1].m_piPrevOutputSign, piSrcSign2, 
; 2993 :         uiSignbitData2, uiSignbitCount2, cChan)

  0012c	8b 45 f8	 mov	 eax, DWORD PTR _piSrc$[ebp]
  0012f	83 c0 02	 add	 eax, 2
  00132	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00135	8b 91 a0 03 00
	00		 mov	 edx, DWORD PTR [ecx+928]
  0013b	2b 82 b0 00 00
	00		 sub	 eax, DWORD PTR [edx+176]
  00141	d1 f8		 sar	 eax, 1
  00143	8b 4d cc	 mov	 ecx, DWORD PTR _cChan$[ebp]
  00146	83 e9 01	 sub	 ecx, 1
  00149	d3 f8		 sar	 eax, cl
  0014b	89 45 a0	 mov	 DWORD PTR _c_iOffset$2750[ebp], eax
  0014e	8b 45 a0	 mov	 eax, DWORD PTR _c_iOffset$2750[ebp]
  00151	83 c0 0f	 add	 eax, 15			; 0000000fH
  00154	c1 e8 04	 shr	 eax, 4
  00157	89 45 9c	 mov	 DWORD PTR _c_iSignOffset$2751[ebp], eax
  0015a	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  0015d	8b 91 a0 03 00
	00		 mov	 edx, DWORD PTR [ecx+928]
  00163	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  00169	8b 4d 9c	 mov	 ecx, DWORD PTR _c_iSignOffset$2751[ebp]
  0016c	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0016f	89 55 dc	 mov	 DWORD PTR _piSrcSign2$[ebp], edx
  00172	8b 45 a0	 mov	 eax, DWORD PTR _c_iOffset$2750[ebp]
  00175	33 d2		 xor	 edx, edx
  00177	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0017c	f7 f1		 div	 ecx
  0017e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00183	2b c2		 sub	 eax, edx
  00185	89 45 fc	 mov	 DWORD PTR _uiSignbitCount2$[ebp], eax
  00188	83 7d fc 10	 cmp	 DWORD PTR _uiSignbitCount2$[ebp], 16 ; 00000010H
  0018c	75 14		 jne	 SHORT $L2755
  0018e	8b 4d dc	 mov	 ecx, DWORD PTR _piSrcSign2$[ebp]
  00191	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00194	89 55 c4	 mov	 DWORD PTR _uiSignbitData2$[ebp], edx
  00197	8b 45 dc	 mov	 eax, DWORD PTR _piSrcSign2$[ebp]
  0019a	83 c0 02	 add	 eax, 2
  0019d	89 45 dc	 mov	 DWORD PTR _piSrcSign2$[ebp], eax
  001a0	eb 0a		 jmp	 SHORT $L2756
$L2755:
  001a2	8b 4d dc	 mov	 ecx, DWORD PTR _piSrcSign2$[ebp]
  001a5	0f b7 51 fe	 movzx	 edx, WORD PTR [ecx-2]
  001a9	89 55 c4	 mov	 DWORD PTR _uiSignbitData2$[ebp], edx
$L2756:

; 2994 : 
; 2995 :     ASSERT_SIGNBIT_POINTER(piSrcSign);
; 2996 : 
; 2997 :     if (i < cSubFrameSampleQuad) 

  001ac	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001af	3b 45 e4	 cmp	 eax, DWORD PTR _cSubFrameSampleQuad$[ebp]
  001b2	0f 8d b6 03 00
	00		 jge	 $L2757

; 2998 :     {
; 2999 :         iSegEnd = min (cSubFrameSampleQuad, iEnd);

  001b8	8b 4d e4	 mov	 ecx, DWORD PTR _cSubFrameSampleQuad$[ebp]
  001bb	3b 4d c8	 cmp	 ecx, DWORD PTR _iEnd$[ebp]
  001be	7d 0b		 jge	 SHORT $L3140
  001c0	8b 55 e4	 mov	 edx, DWORD PTR _cSubFrameSampleQuad$[ebp]
  001c3	89 95 74 ff ff
	ff		 mov	 DWORD PTR tv158[ebp], edx
  001c9	eb 09		 jmp	 SHORT $L3141
$L3140:
  001cb	8b 45 c8	 mov	 eax, DWORD PTR _iEnd$[ebp]
  001ce	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv158[ebp], eax
$L3141:
  001d4	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR tv158[ebp]
  001da	89 4d c0	 mov	 DWORD PTR _iSegEnd$[ebp], ecx

; 3000 :         if ( i < iSegEnd )

  001dd	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  001e0	3b 55 c0	 cmp	 edx, DWORD PTR _iSegEnd$[ebp]
  001e3	0f 8d 85 03 00
	00		 jge	 $L2757

; 3001 :         {
; 3002 :             Int iLoopBy16,iLoopBy1;
; 3003 :             iLoopBy16 = (iSegEnd - i) >> 4;

  001e9	8b 45 c0	 mov	 eax, DWORD PTR _iSegEnd$[ebp]
  001ec	2b 45 f4	 sub	 eax, DWORD PTR _i$[ebp]
  001ef	c1 f8 04	 sar	 eax, 4
  001f2	89 45 98	 mov	 DWORD PTR _iLoopBy16$2759[ebp], eax

; 3004 :             iLoopBy1  = (iSegEnd - i) & 0xF;

  001f5	8b 4d c0	 mov	 ecx, DWORD PTR _iSegEnd$[ebp]
  001f8	2b 4d f4	 sub	 ecx, DWORD PTR _i$[ebp]
  001fb	83 e1 0f	 and	 ecx, 15			; 0000000fH
  001fe	89 4d 94	 mov	 DWORD PTR _iLoopBy1$2760[ebp], ecx

; 3005 :             (*pcSampleGet) += (I16)(iLoopBy16<<4);

  00201	8b 55 98	 mov	 edx, DWORD PTR _iLoopBy16$2759[ebp]
  00204	c1 e2 04	 shl	 edx, 4
  00207	0f bf c2	 movsx	 eax, dx
  0020a	8b 4d 10	 mov	 ecx, DWORD PTR _pcSampleGet$[ebp]
  0020d	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00210	03 d0		 add	 edx, eax
  00212	8b 45 10	 mov	 eax, DWORD PTR _pcSampleGet$[ebp]
  00215	66 89 10	 mov	 WORD PTR [eax], dx

; 3006 :             i += (iLoopBy16<<4);

  00218	8b 4d 98	 mov	 ecx, DWORD PTR _iLoopBy16$2759[ebp]
  0021b	c1 e1 04	 shl	 ecx, 4
  0021e	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00221	03 d1		 add	 edx, ecx
  00223	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx

; 3007 : 
; 3008 :             _asm {
; 3009 :             mov         ebx,piSin

  00226	8b 5d b0	 mov	 ebx, DWORD PTR _piSin$[ebp]

; 3010 :             mov         ecx,piCoef

  00229	8b 4d bc	 mov	 ecx, DWORD PTR _piCoef$[ebp]

; 3011 :             mov         edx,piCoef2

  0022c	8b 55 ac	 mov	 edx, DWORD PTR _piCoef2$[ebp]

; 3012 :             mov         esi,piSrc

  0022f	8b 75 f8	 mov	 esi, DWORD PTR _piSrc$[ebp]

; 3013 :             mov         edi,piDst

  00232	8b 7d d4	 mov	 edi, DWORD PTR _piDst$[ebp]

; 3014 :             
; 3015 :             movd        mm0,uiSignbitData    

  00235	0f 6e 45 ec	 movd	 mm0, DWORD PTR _uiSignbitData$[ebp]

; 3016 :             movd        mm1,uiSignbitData2

  00239	0f 6e 4d c4	 movd	 mm1, DWORD PTR _uiSignbitData2$[ebp]

; 3017 : 
; 3018 :             mov         eax,iLoopBy16

  0023d	8b 45 98	 mov	 eax, DWORD PTR _iLoopBy16$2759[ebp]
$Loop1$2762:

; 3019 :             Loop1:
; 3020 : 
; 3021 :                 punpcklwd   mm0,mm1

  00240	0f 61 c1	 punpcklwd mm0, mm1

; 3022 :                                            //Note:The indentation of these comments tries
; 3023 :                                            //     to show logical paths since the instructions 
; 3024 :                                            //     have been scheduled out of logical paths
; 3025 : 
; 3026 : #define RECONSTRUCT8(x) _asm {                                                                                           \
; 3027 : _asm            movups      xmm3_ebx          /*Load 4 Sin values from table*/                                           \
; 3028 : _asm            movq        mm5,mm0               /*copy sign bit data*/                                                 \
; 3029 : _asm            add         ebx,4*4       /*Bump ptr*/                                                                   \
; 3030 : _asm            movaps      xmm0_xmm3         /*copy Sin values*/                                                        \
; 3031 : _asm            psraw       mm5,15                /*sine extend sine bit data*/                                          \
; 3032 : _asm            shufps      (xmm0_xmm3,0x50)  /*broadcast 1st and 2nd Sin values (a=a,b=a,c=b,d=b) */                    \
; 3033 : _asm            movd        mm2,[esi+(x*16)]      /*load 2 16bit data elements from piSrc*/                              \
; 3034 : _asm            movups      xmm4_ecx          /*Load Coefficents for channel 1*/                                         \
; 3035 : _asm            add         ecx,4*4       /*Bump ptr*/                                                                   \
; 3036 : _asm            punpcklwd   mm2,mm5               /*interleave src with sign bit for 2 32bit values*/                    \
; 3037 : _asm            movaps      xmm1_xmm4         /*make a copy of coefficents for channel 1*/                               \
; 3038 : _asm            pslld       mm0,1                 /*shift sine bit data for next 2*/                                     \
; 3039 : _asm            movups      xmm2_edx          /*Load Coefficents for channel 2*/                                         \
; 3040 : _asm            add         edx,4*4       /*Bump ptr*/                                                                   \
; 3041 : _asm            movq        mm6,mm0               /*copy sign bit data*/                                                 \
; 3042 : _asm            pslld       mm0,1                 /*shift sine bit data for next 2*/                                     \
; 3043 : _asm            unpcklps    xmm1_xmm2         /*Interleve first 2 Coefficents of channel 1 & 2*/                         \
; 3044 : _asm            psraw       mm6,15                /*sine extend sine bit data*/                                          \
; 3045 : _asm            mulps       xmm0_xmm1         /*Multiply coefficents with Sin values*/                                   \
; 3046 : _asm            movd        mm4,[esi+(x*16)+4]    /*load next 2 16bit data elements from piSrc*/                         \
; 3047 : _asm            cvtps2pi    mm1_xmm0          /*convert 2 lower multiply results to rounded integer values*/             \
; 3048 : _asm            punpcklwd   mm4,mm6               /*interleave src with sign bit for 2 32bit values*/                    \
; 3049 : _asm            shufps      (xmm0_xmm0,0xE)   /*move high elements in to low (a=c,b=d,c=a,d=a)*/                         \
; 3050 : _asm            movq        mm7,mm0                   /*copy sign bit data*/                                             \
; 3051 : _asm            pslld       mm0,1                     /*shift sine bit data for next 2*/                                 \
; 3052 : _asm            cvtps2pi    mm3_xmm0          /*convert 2 multiplyed results to rounded integer values*/                 \
; 3053 : _asm            psraw       mm7,15                    /*sine extend sine bit data*/                                      \
; 3054 : _asm            movaps      xmm0_xmm3                      /*copy Sin values*/                                           \
; 3055 : _asm            paddd       mm1,mm2           /*add the 2 vectors*/                                                      \
; 3056 : _asm            paddd       mm3,mm4           /*add the 2 other vectors*/                                                \
; 3057 : _asm            shufps      (xmm0_xmm3,0xFA)               /*broadcast 3rd and 4th Sin Values (a=c,b=c,c=d,d=d)*/        \
; 3058 : _asm            packssdw    mm1,mm3           /*merge and saturate vectors*/                                             \
; 3059 : _asm            movq        mm5,mm0                   /*copy sign bit data*/                                             \
; 3060 : _asm            movaps      xmm1_xmm4                      /*make a copy of coefficents for channel 1*/                  \
; 3061 : _asm            movq        [edi+(x*16)],mm1  /*store 4 reconstructed samples*/                                          \
; 3062 : _asm            unpckhps    xmm1_xmm2                      /*Interleve last 2 Coefficents of channel 1 & 2*/             \
; 3063 : _asm            movd        mm2,[esi+(x*16)+8]        /*load next 2 16bit data elements from piSrc*/                     \
; 3064 : _asm            pslld       mm0,1                     /*shift sine bit data for next 2*/                                 \
; 3065 : _asm            mulps       xmm0_xmm1                      /*Multiply coefficents with Sin values*/                      \
; 3066 : _asm            movd        mm4,[esi+(x*16)+12]       /*load next 2 16bit data elements from piSrc*/                     \
; 3067 : _asm            psraw       mm5,15                    /*sine extend sine bit data*/                                      \
; 3068 : _asm            cvtps2pi    mm1_xmm0                       /*convert 2 lower multiply results to rounded integer values*/\
; 3069 : _asm            punpcklwd   mm2,mm7                   /*merge with sign bit for 2 32bit values*/                         \
; 3070 : _asm            shufps      (xmm0_xmm0,0xE)                /*move high elements in to low (a=c,b=d,c=a,d=a)*/            \
; 3071 : _asm            punpcklwd   mm4,mm5                   /*interleave src with sign bit for 2 32bit values*/                \
; 3072 : _asm            paddd       mm1,mm2                        /*add the 2 vectors*/                                         \
; 3073 : _asm            cvtps2pi    mm3_xmm0                       /*convert 2 multiply results to rounded integer values*/      \
; 3074 : _asm            paddd       mm3,mm4                        /*add the 2 other vectors*/                                   \
; 3075 : _asm            packssdw    mm1,mm3                        /*merge and saturate 2 sets of 2*/                            \
; 3076 : _asm            movq        [edi+(x*16)+8],mm1             /*store 4 reconstructed samples*/                             }
; 3077 : 
; 3078 :                 RECONSTRUCT8(0)

  00243	0f		 DB	 15			; 0000000fH
  00244	10		 DB	 16			; 00000010H
  00245	1b		 DB	 27			; 0000001bH
  00246	0f 7f c5	 movq	 mm5, mm0
  00249	83 c3 10	 add	 ebx, 16			; 00000010H
  0024c	0f		 DB	 15			; 0000000fH
  0024d	28		 DB	 40			; 00000028H
  0024e	c3		 DB	 -61			; ffffffc3H
  0024f	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  00253	0f		 DB	 15			; 0000000fH
  00254	c6		 DB	 -58			; ffffffc6H
  00255	c3		 DB	 -61			; ffffffc3H
  00256	50		 DB	 80			; 00000050H
  00257	0f 6e 16	 movd	 mm2, DWORD PTR [esi]
  0025a	0f		 DB	 15			; 0000000fH
  0025b	10		 DB	 16			; 00000010H
  0025c	21		 DB	 33			; 00000021H
  0025d	83 c1 10	 add	 ecx, 16			; 00000010H
  00260	0f 61 d5	 punpcklwd mm2, mm5
  00263	0f		 DB	 15			; 0000000fH
  00264	28		 DB	 40			; 00000028H
  00265	cc		 DB	 -52			; ffffffccH
  00266	0f 72 f0 01	 pslld	 mm0, 1
  0026a	0f		 DB	 15			; 0000000fH
  0026b	10		 DB	 16			; 00000010H
  0026c	12		 DB	 18			; 00000012H
  0026d	83 c2 10	 add	 edx, 16			; 00000010H
  00270	0f 7f c6	 movq	 mm6, mm0
  00273	0f 72 f0 01	 pslld	 mm0, 1
  00277	0f		 DB	 15			; 0000000fH
  00278	14		 DB	 20			; 00000014H
  00279	ca		 DB	 -54			; ffffffcaH
  0027a	0f 71 e6 0f	 psraw	 mm6, 15			; 0000000fH
  0027e	0f		 DB	 15			; 0000000fH
  0027f	59		 DB	 89			; 00000059H
  00280	c1		 DB	 -63			; ffffffc1H
  00281	0f 6e 66 04	 movd	 mm4, DWORD PTR [esi+4]
  00285	0f		 DB	 15			; 0000000fH
  00286	2d		 DB	 45			; 0000002dH
  00287	c8		 DB	 -56			; ffffffc8H
  00288	0f 61 e6	 punpcklwd mm4, mm6
  0028b	0f		 DB	 15			; 0000000fH
  0028c	c6		 DB	 -58			; ffffffc6H
  0028d	c0		 DB	 -64			; ffffffc0H
  0028e	0e		 DB	 14			; 0000000eH
  0028f	0f 7f c7	 movq	 mm7, mm0
  00292	0f 72 f0 01	 pslld	 mm0, 1
  00296	0f		 DB	 15			; 0000000fH
  00297	2d		 DB	 45			; 0000002dH
  00298	d8		 DB	 -40			; ffffffd8H
  00299	0f 71 e7 0f	 psraw	 mm7, 15			; 0000000fH
  0029d	0f		 DB	 15			; 0000000fH
  0029e	28		 DB	 40			; 00000028H
  0029f	c3		 DB	 -61			; ffffffc3H
  002a0	0f fe ca	 paddd	 mm1, mm2
  002a3	0f fe dc	 paddd	 mm3, mm4
  002a6	0f		 DB	 15			; 0000000fH
  002a7	c6		 DB	 -58			; ffffffc6H
  002a8	c3		 DB	 -61			; ffffffc3H
  002a9	fa		 DB	 -6			; fffffffaH
  002aa	0f 6b cb	 packssdw mm1, mm3
  002ad	0f 7f c5	 movq	 mm5, mm0
  002b0	0f		 DB	 15			; 0000000fH
  002b1	28		 DB	 40			; 00000028H
  002b2	cc		 DB	 -52			; ffffffccH
  002b3	0f 7f 0f	 movq	 MMWORD PTR [edi], mm1
  002b6	0f		 DB	 15			; 0000000fH
  002b7	15		 DB	 21			; 00000015H
  002b8	ca		 DB	 -54			; ffffffcaH
  002b9	0f 6e 56 08	 movd	 mm2, DWORD PTR [esi+8]
  002bd	0f 72 f0 01	 pslld	 mm0, 1
  002c1	0f		 DB	 15			; 0000000fH
  002c2	59		 DB	 89			; 00000059H
  002c3	c1		 DB	 -63			; ffffffc1H
  002c4	0f 6e 66 0c	 movd	 mm4, DWORD PTR [esi+12]
  002c8	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  002cc	0f		 DB	 15			; 0000000fH
  002cd	2d		 DB	 45			; 0000002dH
  002ce	c8		 DB	 -56			; ffffffc8H
  002cf	0f 61 d7	 punpcklwd mm2, mm7
  002d2	0f		 DB	 15			; 0000000fH
  002d3	c6		 DB	 -58			; ffffffc6H
  002d4	c0		 DB	 -64			; ffffffc0H
  002d5	0e		 DB	 14			; 0000000eH
  002d6	0f 61 e5	 punpcklwd mm4, mm5
  002d9	0f fe ca	 paddd	 mm1, mm2
  002dc	0f		 DB	 15			; 0000000fH
  002dd	2d		 DB	 45			; 0000002dH
  002de	d8		 DB	 -40			; ffffffd8H
  002df	0f fe dc	 paddd	 mm3, mm4
  002e2	0f 6b cb	 packssdw mm1, mm3
  002e5	0f 7f 4f 08	 movq	 MMWORD PTR [edi+8], mm1

; 3079 :                 RECONSTRUCT8(1)

  002e9	0f		 DB	 15			; 0000000fH
  002ea	10		 DB	 16			; 00000010H
  002eb	1b		 DB	 27			; 0000001bH
  002ec	0f 7f c5	 movq	 mm5, mm0
  002ef	83 c3 10	 add	 ebx, 16			; 00000010H
  002f2	0f		 DB	 15			; 0000000fH
  002f3	28		 DB	 40			; 00000028H
  002f4	c3		 DB	 -61			; ffffffc3H
  002f5	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  002f9	0f		 DB	 15			; 0000000fH
  002fa	c6		 DB	 -58			; ffffffc6H
  002fb	c3		 DB	 -61			; ffffffc3H
  002fc	50		 DB	 80			; 00000050H
  002fd	0f 6e 56 10	 movd	 mm2, DWORD PTR [esi+16]
  00301	0f		 DB	 15			; 0000000fH
  00302	10		 DB	 16			; 00000010H
  00303	21		 DB	 33			; 00000021H
  00304	83 c1 10	 add	 ecx, 16			; 00000010H
  00307	0f 61 d5	 punpcklwd mm2, mm5
  0030a	0f		 DB	 15			; 0000000fH
  0030b	28		 DB	 40			; 00000028H
  0030c	cc		 DB	 -52			; ffffffccH
  0030d	0f 72 f0 01	 pslld	 mm0, 1
  00311	0f		 DB	 15			; 0000000fH
  00312	10		 DB	 16			; 00000010H
  00313	12		 DB	 18			; 00000012H
  00314	83 c2 10	 add	 edx, 16			; 00000010H
  00317	0f 7f c6	 movq	 mm6, mm0
  0031a	0f 72 f0 01	 pslld	 mm0, 1
  0031e	0f		 DB	 15			; 0000000fH
  0031f	14		 DB	 20			; 00000014H
  00320	ca		 DB	 -54			; ffffffcaH
  00321	0f 71 e6 0f	 psraw	 mm6, 15			; 0000000fH
  00325	0f		 DB	 15			; 0000000fH
  00326	59		 DB	 89			; 00000059H
  00327	c1		 DB	 -63			; ffffffc1H
  00328	0f 6e 66 14	 movd	 mm4, DWORD PTR [esi+20]
  0032c	0f		 DB	 15			; 0000000fH
  0032d	2d		 DB	 45			; 0000002dH
  0032e	c8		 DB	 -56			; ffffffc8H
  0032f	0f 61 e6	 punpcklwd mm4, mm6
  00332	0f		 DB	 15			; 0000000fH
  00333	c6		 DB	 -58			; ffffffc6H
  00334	c0		 DB	 -64			; ffffffc0H
  00335	0e		 DB	 14			; 0000000eH
  00336	0f 7f c7	 movq	 mm7, mm0
  00339	0f 72 f0 01	 pslld	 mm0, 1
  0033d	0f		 DB	 15			; 0000000fH
  0033e	2d		 DB	 45			; 0000002dH
  0033f	d8		 DB	 -40			; ffffffd8H
  00340	0f 71 e7 0f	 psraw	 mm7, 15			; 0000000fH
  00344	0f		 DB	 15			; 0000000fH
  00345	28		 DB	 40			; 00000028H
  00346	c3		 DB	 -61			; ffffffc3H
  00347	0f fe ca	 paddd	 mm1, mm2
  0034a	0f fe dc	 paddd	 mm3, mm4
  0034d	0f		 DB	 15			; 0000000fH
  0034e	c6		 DB	 -58			; ffffffc6H
  0034f	c3		 DB	 -61			; ffffffc3H
  00350	fa		 DB	 -6			; fffffffaH
  00351	0f 6b cb	 packssdw mm1, mm3
  00354	0f 7f c5	 movq	 mm5, mm0
  00357	0f		 DB	 15			; 0000000fH
  00358	28		 DB	 40			; 00000028H
  00359	cc		 DB	 -52			; ffffffccH
  0035a	0f 7f 4f 10	 movq	 MMWORD PTR [edi+16], mm1
  0035e	0f		 DB	 15			; 0000000fH
  0035f	15		 DB	 21			; 00000015H
  00360	ca		 DB	 -54			; ffffffcaH
  00361	0f 6e 56 18	 movd	 mm2, DWORD PTR [esi+24]
  00365	0f 72 f0 01	 pslld	 mm0, 1
  00369	0f		 DB	 15			; 0000000fH
  0036a	59		 DB	 89			; 00000059H
  0036b	c1		 DB	 -63			; ffffffc1H
  0036c	0f 6e 66 1c	 movd	 mm4, DWORD PTR [esi+28]
  00370	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  00374	0f		 DB	 15			; 0000000fH
  00375	2d		 DB	 45			; 0000002dH
  00376	c8		 DB	 -56			; ffffffc8H
  00377	0f 61 d7	 punpcklwd mm2, mm7
  0037a	0f		 DB	 15			; 0000000fH
  0037b	c6		 DB	 -58			; ffffffc6H
  0037c	c0		 DB	 -64			; ffffffc0H
  0037d	0e		 DB	 14			; 0000000eH
  0037e	0f 61 e5	 punpcklwd mm4, mm5
  00381	0f fe ca	 paddd	 mm1, mm2
  00384	0f		 DB	 15			; 0000000fH
  00385	2d		 DB	 45			; 0000002dH
  00386	d8		 DB	 -40			; ffffffd8H
  00387	0f fe dc	 paddd	 mm3, mm4
  0038a	0f 6b cb	 packssdw mm1, mm3
  0038d	0f 7f 4f 18	 movq	 MMWORD PTR [edi+24], mm1

; 3080 :                 RECONSTRUCT8(2)

  00391	0f		 DB	 15			; 0000000fH
  00392	10		 DB	 16			; 00000010H
  00393	1b		 DB	 27			; 0000001bH
  00394	0f 7f c5	 movq	 mm5, mm0
  00397	83 c3 10	 add	 ebx, 16			; 00000010H
  0039a	0f		 DB	 15			; 0000000fH
  0039b	28		 DB	 40			; 00000028H
  0039c	c3		 DB	 -61			; ffffffc3H
  0039d	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  003a1	0f		 DB	 15			; 0000000fH
  003a2	c6		 DB	 -58			; ffffffc6H
  003a3	c3		 DB	 -61			; ffffffc3H
  003a4	50		 DB	 80			; 00000050H
  003a5	0f 6e 56 20	 movd	 mm2, DWORD PTR [esi+32]
  003a9	0f		 DB	 15			; 0000000fH
  003aa	10		 DB	 16			; 00000010H
  003ab	21		 DB	 33			; 00000021H
  003ac	83 c1 10	 add	 ecx, 16			; 00000010H
  003af	0f 61 d5	 punpcklwd mm2, mm5
  003b2	0f		 DB	 15			; 0000000fH
  003b3	28		 DB	 40			; 00000028H
  003b4	cc		 DB	 -52			; ffffffccH
  003b5	0f 72 f0 01	 pslld	 mm0, 1
  003b9	0f		 DB	 15			; 0000000fH
  003ba	10		 DB	 16			; 00000010H
  003bb	12		 DB	 18			; 00000012H
  003bc	83 c2 10	 add	 edx, 16			; 00000010H
  003bf	0f 7f c6	 movq	 mm6, mm0
  003c2	0f 72 f0 01	 pslld	 mm0, 1
  003c6	0f		 DB	 15			; 0000000fH
  003c7	14		 DB	 20			; 00000014H
  003c8	ca		 DB	 -54			; ffffffcaH
  003c9	0f 71 e6 0f	 psraw	 mm6, 15			; 0000000fH
  003cd	0f		 DB	 15			; 0000000fH
  003ce	59		 DB	 89			; 00000059H
  003cf	c1		 DB	 -63			; ffffffc1H
  003d0	0f 6e 66 24	 movd	 mm4, DWORD PTR [esi+36]
  003d4	0f		 DB	 15			; 0000000fH
  003d5	2d		 DB	 45			; 0000002dH
  003d6	c8		 DB	 -56			; ffffffc8H
  003d7	0f 61 e6	 punpcklwd mm4, mm6
  003da	0f		 DB	 15			; 0000000fH
  003db	c6		 DB	 -58			; ffffffc6H
  003dc	c0		 DB	 -64			; ffffffc0H
  003dd	0e		 DB	 14			; 0000000eH
  003de	0f 7f c7	 movq	 mm7, mm0
  003e1	0f 72 f0 01	 pslld	 mm0, 1
  003e5	0f		 DB	 15			; 0000000fH
  003e6	2d		 DB	 45			; 0000002dH
  003e7	d8		 DB	 -40			; ffffffd8H
  003e8	0f 71 e7 0f	 psraw	 mm7, 15			; 0000000fH
  003ec	0f		 DB	 15			; 0000000fH
  003ed	28		 DB	 40			; 00000028H
  003ee	c3		 DB	 -61			; ffffffc3H
  003ef	0f fe ca	 paddd	 mm1, mm2
  003f2	0f fe dc	 paddd	 mm3, mm4
  003f5	0f		 DB	 15			; 0000000fH
  003f6	c6		 DB	 -58			; ffffffc6H
  003f7	c3		 DB	 -61			; ffffffc3H
  003f8	fa		 DB	 -6			; fffffffaH
  003f9	0f 6b cb	 packssdw mm1, mm3
  003fc	0f 7f c5	 movq	 mm5, mm0
  003ff	0f		 DB	 15			; 0000000fH
  00400	28		 DB	 40			; 00000028H
  00401	cc		 DB	 -52			; ffffffccH
  00402	0f 7f 4f 20	 movq	 MMWORD PTR [edi+32], mm1
  00406	0f		 DB	 15			; 0000000fH
  00407	15		 DB	 21			; 00000015H
  00408	ca		 DB	 -54			; ffffffcaH
  00409	0f 6e 56 28	 movd	 mm2, DWORD PTR [esi+40]
  0040d	0f 72 f0 01	 pslld	 mm0, 1
  00411	0f		 DB	 15			; 0000000fH
  00412	59		 DB	 89			; 00000059H
  00413	c1		 DB	 -63			; ffffffc1H
  00414	0f 6e 66 2c	 movd	 mm4, DWORD PTR [esi+44]
  00418	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  0041c	0f		 DB	 15			; 0000000fH
  0041d	2d		 DB	 45			; 0000002dH
  0041e	c8		 DB	 -56			; ffffffc8H
  0041f	0f 61 d7	 punpcklwd mm2, mm7
  00422	0f		 DB	 15			; 0000000fH
  00423	c6		 DB	 -58			; ffffffc6H
  00424	c0		 DB	 -64			; ffffffc0H
  00425	0e		 DB	 14			; 0000000eH
  00426	0f 61 e5	 punpcklwd mm4, mm5
  00429	0f fe ca	 paddd	 mm1, mm2
  0042c	0f		 DB	 15			; 0000000fH
  0042d	2d		 DB	 45			; 0000002dH
  0042e	d8		 DB	 -40			; ffffffd8H
  0042f	0f fe dc	 paddd	 mm3, mm4
  00432	0f 6b cb	 packssdw mm1, mm3
  00435	0f 7f 4f 28	 movq	 MMWORD PTR [edi+40], mm1

; 3081 :                 RECONSTRUCT8(3)

  00439	0f		 DB	 15			; 0000000fH
  0043a	10		 DB	 16			; 00000010H
  0043b	1b		 DB	 27			; 0000001bH
  0043c	0f 7f c5	 movq	 mm5, mm0
  0043f	83 c3 10	 add	 ebx, 16			; 00000010H
  00442	0f		 DB	 15			; 0000000fH
  00443	28		 DB	 40			; 00000028H
  00444	c3		 DB	 -61			; ffffffc3H
  00445	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  00449	0f		 DB	 15			; 0000000fH
  0044a	c6		 DB	 -58			; ffffffc6H
  0044b	c3		 DB	 -61			; ffffffc3H
  0044c	50		 DB	 80			; 00000050H
  0044d	0f 6e 56 30	 movd	 mm2, DWORD PTR [esi+48]
  00451	0f		 DB	 15			; 0000000fH
  00452	10		 DB	 16			; 00000010H
  00453	21		 DB	 33			; 00000021H
  00454	83 c1 10	 add	 ecx, 16			; 00000010H
  00457	0f 61 d5	 punpcklwd mm2, mm5
  0045a	0f		 DB	 15			; 0000000fH
  0045b	28		 DB	 40			; 00000028H
  0045c	cc		 DB	 -52			; ffffffccH
  0045d	0f 72 f0 01	 pslld	 mm0, 1
  00461	0f		 DB	 15			; 0000000fH
  00462	10		 DB	 16			; 00000010H
  00463	12		 DB	 18			; 00000012H
  00464	83 c2 10	 add	 edx, 16			; 00000010H
  00467	0f 7f c6	 movq	 mm6, mm0
  0046a	0f 72 f0 01	 pslld	 mm0, 1
  0046e	0f		 DB	 15			; 0000000fH
  0046f	14		 DB	 20			; 00000014H
  00470	ca		 DB	 -54			; ffffffcaH
  00471	0f 71 e6 0f	 psraw	 mm6, 15			; 0000000fH
  00475	0f		 DB	 15			; 0000000fH
  00476	59		 DB	 89			; 00000059H
  00477	c1		 DB	 -63			; ffffffc1H
  00478	0f 6e 66 34	 movd	 mm4, DWORD PTR [esi+52]
  0047c	0f		 DB	 15			; 0000000fH
  0047d	2d		 DB	 45			; 0000002dH
  0047e	c8		 DB	 -56			; ffffffc8H
  0047f	0f 61 e6	 punpcklwd mm4, mm6
  00482	0f		 DB	 15			; 0000000fH
  00483	c6		 DB	 -58			; ffffffc6H
  00484	c0		 DB	 -64			; ffffffc0H
  00485	0e		 DB	 14			; 0000000eH
  00486	0f 7f c7	 movq	 mm7, mm0
  00489	0f 72 f0 01	 pslld	 mm0, 1
  0048d	0f		 DB	 15			; 0000000fH
  0048e	2d		 DB	 45			; 0000002dH
  0048f	d8		 DB	 -40			; ffffffd8H
  00490	0f 71 e7 0f	 psraw	 mm7, 15			; 0000000fH
  00494	0f		 DB	 15			; 0000000fH
  00495	28		 DB	 40			; 00000028H
  00496	c3		 DB	 -61			; ffffffc3H
  00497	0f fe ca	 paddd	 mm1, mm2
  0049a	0f fe dc	 paddd	 mm3, mm4
  0049d	0f		 DB	 15			; 0000000fH
  0049e	c6		 DB	 -58			; ffffffc6H
  0049f	c3		 DB	 -61			; ffffffc3H
  004a0	fa		 DB	 -6			; fffffffaH
  004a1	0f 6b cb	 packssdw mm1, mm3
  004a4	0f 7f c5	 movq	 mm5, mm0
  004a7	0f		 DB	 15			; 0000000fH
  004a8	28		 DB	 40			; 00000028H
  004a9	cc		 DB	 -52			; ffffffccH
  004aa	0f 7f 4f 30	 movq	 MMWORD PTR [edi+48], mm1
  004ae	0f		 DB	 15			; 0000000fH
  004af	15		 DB	 21			; 00000015H
  004b0	ca		 DB	 -54			; ffffffcaH
  004b1	0f 6e 56 38	 movd	 mm2, DWORD PTR [esi+56]
  004b5	0f 72 f0 01	 pslld	 mm0, 1
  004b9	0f		 DB	 15			; 0000000fH
  004ba	59		 DB	 89			; 00000059H
  004bb	c1		 DB	 -63			; ffffffc1H
  004bc	0f 6e 66 3c	 movd	 mm4, DWORD PTR [esi+60]
  004c0	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  004c4	0f		 DB	 15			; 0000000fH
  004c5	2d		 DB	 45			; 0000002dH
  004c6	c8		 DB	 -56			; ffffffc8H
  004c7	0f 61 d7	 punpcklwd mm2, mm7
  004ca	0f		 DB	 15			; 0000000fH
  004cb	c6		 DB	 -58			; ffffffc6H
  004cc	c0		 DB	 -64			; ffffffc0H
  004cd	0e		 DB	 14			; 0000000eH
  004ce	0f 61 e5	 punpcklwd mm4, mm5
  004d1	0f fe ca	 paddd	 mm1, mm2
  004d4	0f		 DB	 15			; 0000000fH
  004d5	2d		 DB	 45			; 0000002dH
  004d6	d8		 DB	 -40			; ffffffd8H
  004d7	0f fe dc	 paddd	 mm3, mm4
  004da	0f 6b cb	 packssdw mm1, mm3
  004dd	0f 7f 4f 38	 movq	 MMWORD PTR [edi+56], mm1

; 3082 :                 
; 3083 :                 add         esi,2*32

  004e1	83 c6 40	 add	 esi, 64			; 00000040H

; 3084 :                 add         edi,2*32

  004e4	83 c7 40	 add	 edi, 64			; 00000040H

; 3085 : 
; 3086 : 
; 3087 :                 mov         iResult,ebx

  004e7	89 5d e0	 mov	 DWORD PTR _iResult$[ebp], ebx

; 3088 : 
; 3089 :                 mov         ebx,piSrcSign  //uiSignbitData = *piSrcSign++;

  004ea	8b 5d b8	 mov	 ebx, DWORD PTR _piSrcSign$[ebp]

; 3090 :                 movd        mm0,[ebx]

  004ed	0f 6e 03	 movd	 mm0, DWORD PTR [ebx]

; 3091 :                 pslld       mm0,16

  004f0	0f 72 f0 10	 pslld	 mm0, 16			; 00000010H

; 3092 :                 psrld       mm0,16

  004f4	0f 72 d0 10	 psrld	 mm0, 16			; 00000010H

; 3093 :                 add         ebx,2

  004f8	83 c3 02	 add	 ebx, 2

; 3094 :                 mov         piSrcSign,ebx

  004fb	89 5d b8	 mov	 DWORD PTR _piSrcSign$[ebp], ebx

; 3095 : 
; 3096 :                 mov         ebx,piSrcSign2 //uiSignbitData2 = *piSrcSign2++;

  004fe	8b 5d dc	 mov	 ebx, DWORD PTR _piSrcSign2$[ebp]

; 3097 :                 movd        mm1,[ebx]

  00501	0f 6e 0b	 movd	 mm1, DWORD PTR [ebx]

; 3098 :                 pslld       mm1,16

  00504	0f 72 f1 10	 pslld	 mm1, 16			; 00000010H

; 3099 :                 psrld       mm1,16

  00508	0f 72 d1 10	 psrld	 mm1, 16			; 00000010H

; 3100 :                 add         ebx,2

  0050c	83 c3 02	 add	 ebx, 2

; 3101 :                 mov         piSrcSign2,ebx

  0050f	89 5d dc	 mov	 DWORD PTR _piSrcSign2$[ebp], ebx

; 3102 : 
; 3103 :                 mov         ebx,iResult

  00512	8b 5d e0	 mov	 ebx, DWORD PTR _iResult$[ebp]

; 3104 :  
; 3105 :             dec         eax

  00515	48		 dec	 eax

; 3106 :             jnz         Loop1

  00516	0f 85 24 fd ff
	ff		 jne	 $Loop1$2762

; 3107 : 
; 3108 :             mov         piSrc,esi

  0051c	89 75 f8	 mov	 DWORD PTR _piSrc$[ebp], esi

; 3109 :             mov         piDst,edi

  0051f	89 7d d4	 mov	 DWORD PTR _piDst$[ebp], edi

; 3110 :             mov         piSin,ebx

  00522	89 5d b0	 mov	 DWORD PTR _piSin$[ebp], ebx

; 3111 :             mov         piCoef,ecx

  00525	89 4d bc	 mov	 DWORD PTR _piCoef$[ebp], ecx

; 3112 :             mov         piCoef2,edx

  00528	89 55 ac	 mov	 DWORD PTR _piCoef2$[ebp], edx

; 3113 :             movd        uiSignbitData,mm0

  0052b	0f 7e 45 ec	 movd	 DWORD PTR _uiSignbitData$[ebp], mm0

; 3114 :             movd        uiSignbitData2,mm1

  0052f	0f 7e 4d c4	 movd	 DWORD PTR _uiSignbitData2$[ebp], mm1

; 3115 : #           undef RECONSTRUCT8
; 3116 :             }
; 3117 :             uiSignbitCount = 16;                                                     

  00533	c7 45 d8 10 00
	00 00		 mov	 DWORD PTR _uiSignbitCount$[ebp], 16 ; 00000010H

; 3118 :             uiSignbitCount2 = 16;                                                     

  0053a	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR _uiSignbitCount2$[ebp], 16 ; 00000010H

; 3119 :             if (iLoopBy1) {

  00541	83 7d 94 00	 cmp	 DWORD PTR _iLoopBy1$2760[ebp], 0
  00545	74 27		 je	 SHORT $L2757

; 3120 :                 pau->aupfnReconstruct = auReconstruct;

  00547	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  0054a	c7 80 f8 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1016], OFFSET FLAT:_auReconstruct_XDS@16

; 3121 :                 return auReconstruct(pau,piOutput,pcSampleGet,fForceTransformAll); 

  00554	8b 4d 14	 mov	 ecx, DWORD PTR _fForceTransformAll$[ebp]
  00557	51		 push	 ecx
  00558	8b 55 10	 mov	 edx, DWORD PTR _pcSampleGet$[ebp]
  0055b	52		 push	 edx
  0055c	8b 45 0c	 mov	 eax, DWORD PTR _piOutput$[ebp]
  0055f	50		 push	 eax
  00560	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00563	51		 push	 ecx
  00564	e8 00 00 00 00	 call	 _auReconstruct_XDS@16
  00569	e9 93 06 00 00	 jmp	 $L2719
$L2757:

; 3122 :             }
; 3123 :         }
; 3124 :     }
; 3125 : 
; 3126 :     if (i < iCoefRecurQ2)  

  0056e	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00571	3b 55 b4	 cmp	 edx, DWORD PTR _iCoefRecurQ2$[ebp]
  00574	0f 8d dc 03 00
	00		 jge	 $L2764

; 3127 :     {
; 3128 :         iSegEnd = min (iCoefRecurQ2, iEnd);

  0057a	8b 45 b4	 mov	 eax, DWORD PTR _iCoefRecurQ2$[ebp]
  0057d	3b 45 c8	 cmp	 eax, DWORD PTR _iEnd$[ebp]
  00580	7d 0b		 jge	 SHORT $L3142
  00582	8b 4d b4	 mov	 ecx, DWORD PTR _iCoefRecurQ2$[ebp]
  00585	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv181[ebp], ecx
  0058b	eb 09		 jmp	 SHORT $L3143
$L3142:
  0058d	8b 55 c8	 mov	 edx, DWORD PTR _iEnd$[ebp]
  00590	89 95 70 ff ff
	ff		 mov	 DWORD PTR tv181[ebp], edx
$L3143:
  00596	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv181[ebp]
  0059c	89 45 c0	 mov	 DWORD PTR _iSegEnd$[ebp], eax

; 3129 :         if ( i < iSegEnd )

  0059f	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  005a2	3b 4d c0	 cmp	 ecx, DWORD PTR _iSegEnd$[ebp]
  005a5	0f 8d ab 03 00
	00		 jge	 $L2764

; 3130 :         {
; 3131 :             U16 *piDstCopy = piDst;

  005ab	8b 55 d4	 mov	 edx, DWORD PTR _piDst$[ebp]
  005ae	89 55 8c	 mov	 DWORD PTR _piDstCopy$2766[ebp], edx

; 3132 :             Int iLoopBy16,iLoopBy1;
; 3133 :             iLoopBy16 = (iSegEnd - i) >> 4;

  005b1	8b 45 c0	 mov	 eax, DWORD PTR _iSegEnd$[ebp]
  005b4	2b 45 f4	 sub	 eax, DWORD PTR _i$[ebp]
  005b7	c1 f8 04	 sar	 eax, 4
  005ba	89 45 90	 mov	 DWORD PTR _iLoopBy16$2767[ebp], eax

; 3134 :             iLoopBy1  = (iSegEnd - i) & 0xF;

  005bd	8b 4d c0	 mov	 ecx, DWORD PTR _iSegEnd$[ebp]
  005c0	2b 4d f4	 sub	 ecx, DWORD PTR _i$[ebp]
  005c3	83 e1 0f	 and	 ecx, 15			; 0000000fH
  005c6	89 4d 88	 mov	 DWORD PTR _iLoopBy1$2768[ebp], ecx

; 3135 :             (*pcSampleGet) += (I16)(iLoopBy16<<4);

  005c9	8b 55 90	 mov	 edx, DWORD PTR _iLoopBy16$2767[ebp]
  005cc	c1 e2 04	 shl	 edx, 4
  005cf	0f bf c2	 movsx	 eax, dx
  005d2	8b 4d 10	 mov	 ecx, DWORD PTR _pcSampleGet$[ebp]
  005d5	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  005d8	03 d0		 add	 edx, eax
  005da	8b 45 10	 mov	 eax, DWORD PTR _pcSampleGet$[ebp]
  005dd	66 89 10	 mov	 WORD PTR [eax], dx

; 3136 :             i += (iLoopBy16<<4);

  005e0	8b 4d 90	 mov	 ecx, DWORD PTR _iLoopBy16$2767[ebp]
  005e3	c1 e1 04	 shl	 ecx, 4
  005e6	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  005e9	03 d1		 add	 edx, ecx
  005eb	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx

; 3137 : 
; 3138 :             _asm {
; 3139 :             mov         ebx,piSin

  005ee	8b 5d b0	 mov	 ebx, DWORD PTR _piSin$[ebp]

; 3140 :             mov         ecx,piCoef

  005f1	8b 4d bc	 mov	 ecx, DWORD PTR _piCoef$[ebp]

; 3141 :             mov         edx,piCoef2

  005f4	8b 55 ac	 mov	 edx, DWORD PTR _piCoef2$[ebp]

; 3142 :             mov         esi,piSrc

  005f7	8b 75 f8	 mov	 esi, DWORD PTR _piSrc$[ebp]

; 3143 :             mov         edi,piDst

  005fa	8b 7d d4	 mov	 edi, DWORD PTR _piDst$[ebp]

; 3144 :             
; 3145 :             movd        mm0,uiSignbitData    

  005fd	0f 6e 45 ec	 movd	 mm0, DWORD PTR _uiSignbitData$[ebp]

; 3146 :             movd        mm1,uiSignbitData2

  00601	0f 6e 4d c4	 movd	 mm1, DWORD PTR _uiSignbitData2$[ebp]

; 3147 : 
; 3148 :             mov         eax,iLoopBy16

  00605	8b 45 90	 mov	 eax, DWORD PTR _iLoopBy16$2767[ebp]
$Loop2$2770:

; 3149 :             Loop2:
; 3150 : 
; 3151 :                 punpcklwd   mm0,mm1

  00608	0f 61 c1	 punpcklwd mm0, mm1

; 3152 : 
; 3153 : #define RECONSTRUCT8(x) _asm {                                                                                           \
; 3154 : _asm            movups      xmm3_ebx          /*Load 4 Sin values from table*/                                           \
; 3155 : _asm            movq        mm5,mm0               /*copy sign bit data*/                                                 \
; 3156 : _asm            add         ebx,4*4       /*Bump ptr*/                                                                   \
; 3157 : _asm            movaps      xmm0_xmm3         /*copy Sin values*/                                                        \
; 3158 : _asm            psraw       mm5,15                /*sine extend sine bit data*/                                          \
; 3159 : _asm            shufps      (xmm0_xmm3,0x50)  /*broadcast 1st and 2nd Sin values (a=a,b=a,c=b,d=b) */                    \
; 3160 : _asm            movd        mm2,[esi+(x*16)]      /*load 2 16bit data elements from piSrc*/                              \
; 3161 : _asm            sub         ecx,4*4       /*Bump ptr*/                                                                   \
; 3162 : _asm            movups      xmm4_ecx          /*Load Coefficents for channel 1*/                                         \
; 3163 : _asm            shufps      (xmm4_xmm4,0x1B)                                                                             \
; 3164 : _asm            punpcklwd   mm2,mm5               /*interleave src with sign bit for 2 32bit values*/                    \
; 3165 : _asm            movaps      xmm1_xmm4         /*make a copy of coefficents for channel 1*/                               \
; 3166 : _asm            pslld       mm0,1                 /*shift sine bit data for next 2*/                                     \
; 3167 : _asm            sub         edx,4*4       /*Bump ptr*/                                                                   \
; 3168 : _asm            movups      xmm2_edx          /*Load Coefficents for channel 2*/                                         \
; 3169 : _asm            shufps      (xmm2_xmm2,0x1B)                                                                             \
; 3170 : _asm            movq        mm6,mm0               /*copy sign bit data*/                                                 \
; 3171 : _asm            pslld       mm0,1                 /*shift sine bit data for next 2*/                                     \
; 3172 : _asm            unpcklps    xmm1_xmm2         /*Interleve first 2 Coefficents of channel 1 & 2*/                         \
; 3173 : _asm            psraw       mm6,15                /*sine extend sine bit data*/                                          \
; 3174 : _asm            mulps       xmm0_xmm1         /*Multiply coefficents with Sin values*/                                   \
; 3175 : _asm            movd        mm4,[esi+(x*16)+4]    /*load next 2 16bit data elements from piSrc*/                         \
; 3176 : _asm            cvtps2pi    mm1_xmm0          /*convert 2 lower multiply results to rounded integer values*/             \
; 3177 : _asm            punpcklwd   mm4,mm6               /*interleave src with sign bit for 2 32bit values*/                    \
; 3178 : _asm            shufps      (xmm0_xmm0,0xE)   /*move high elements in to low (a=c,b=d,c=a,d=a)*/                         \
; 3179 : _asm            movq        mm7,mm0                   /*copy sign bit data*/                                             \
; 3180 : _asm            pslld       mm0,1                     /*shift sine bit data for next 2*/                                 \
; 3181 : _asm            cvtps2pi    mm3_xmm0          /*convert 2 multiplyed results to rounded integer values*/                 \
; 3182 : _asm            psraw       mm7,15                    /*sine extend sine bit data*/                                      \
; 3183 : _asm            movaps      xmm0_xmm3                      /*copy Sin values*/                                           \
; 3184 : _asm            paddd       mm1,mm2           /*add the 2 vectors*/                                                      \
; 3185 : _asm            paddd       mm3,mm4           /*add the 2 other vectors*/                                                \
; 3186 : _asm            shufps      (xmm0_xmm3,0xFA)               /*broadcast 3rd and 4th Sin Values (a=c,b=c,c=d,d=d)*/        \
; 3187 : _asm            packssdw    mm1,mm3           /*merge and saturate vectors*/                                             \
; 3188 : _asm            movq        mm5,mm0                   /*copy sign bit data*/                                             \
; 3189 : _asm            movaps      xmm1_xmm4                      /*make a copy of coefficents for channel 1*/                  \
; 3190 : _asm            movq        [edi+(x*16)],mm1  /*store 4 reconstructed samples*/                                          \
; 3191 : _asm            unpckhps    xmm1_xmm2                      /*Interleve last 2 Coefficents of channel 1 & 2*/             \
; 3192 : _asm            movd        mm2,[esi+(x*16)+8]        /*load next 2 16bit data elements from piSrc*/                     \
; 3193 : _asm            pslld       mm0,1                     /*shift sine bit data for next 2*/                                 \
; 3194 : _asm            mulps       xmm0_xmm1                      /*Multiply coefficents with Sin values*/                      \
; 3195 : _asm            movd        mm4,[esi+(x*16)+12]       /*load next 2 16bit data elements from piSrc*/                     \
; 3196 : _asm            psraw       mm5,15                    /*sine extend sine bit data*/                                      \
; 3197 : _asm            cvtps2pi    mm1_xmm0                       /*convert 2 lower multiply results to rounded integer values*/\
; 3198 : _asm            punpcklwd   mm2,mm7                   /*merge with sign bit for 2 32bit values*/                         \
; 3199 : _asm            shufps      (xmm0_xmm0,0xE)                /*move high elements in to low (a=c,b=d,c=a,d=a)*/            \
; 3200 : _asm            punpcklwd   mm4,mm5                   /*interleave src with sign bit for 2 32bit values*/                \
; 3201 : _asm            paddd       mm1,mm2                        /*add the 2 vectors*/                                         \
; 3202 : _asm            cvtps2pi    mm3_xmm0                       /*convert 2 multiply results to rounded integer values*/      \
; 3203 : _asm            paddd       mm3,mm4                        /*add the 2 other vectors*/                                   \
; 3204 : _asm            packssdw    mm1,mm3                        /*merge and saturate 2 sets of 2*/                            \
; 3205 : _asm            movq        [edi+(x*16)+8],mm1             /*store 4 reconstructed samples*/                             }
; 3206 : 
; 3207 :                 RECONSTRUCT8(0)

  0060b	0f		 DB	 15			; 0000000fH
  0060c	10		 DB	 16			; 00000010H
  0060d	1b		 DB	 27			; 0000001bH
  0060e	0f 7f c5	 movq	 mm5, mm0
  00611	83 c3 10	 add	 ebx, 16			; 00000010H
  00614	0f		 DB	 15			; 0000000fH
  00615	28		 DB	 40			; 00000028H
  00616	c3		 DB	 -61			; ffffffc3H
  00617	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  0061b	0f		 DB	 15			; 0000000fH
  0061c	c6		 DB	 -58			; ffffffc6H
  0061d	c3		 DB	 -61			; ffffffc3H
  0061e	50		 DB	 80			; 00000050H
  0061f	0f 6e 16	 movd	 mm2, DWORD PTR [esi]
  00622	83 e9 10	 sub	 ecx, 16			; 00000010H
  00625	0f		 DB	 15			; 0000000fH
  00626	10		 DB	 16			; 00000010H
  00627	21		 DB	 33			; 00000021H
  00628	0f		 DB	 15			; 0000000fH
  00629	c6		 DB	 -58			; ffffffc6H
  0062a	e4		 DB	 -28			; ffffffe4H
  0062b	1b		 DB	 27			; 0000001bH
  0062c	0f 61 d5	 punpcklwd mm2, mm5
  0062f	0f		 DB	 15			; 0000000fH
  00630	28		 DB	 40			; 00000028H
  00631	cc		 DB	 -52			; ffffffccH
  00632	0f 72 f0 01	 pslld	 mm0, 1
  00636	83 ea 10	 sub	 edx, 16			; 00000010H
  00639	0f		 DB	 15			; 0000000fH
  0063a	10		 DB	 16			; 00000010H
  0063b	12		 DB	 18			; 00000012H
  0063c	0f		 DB	 15			; 0000000fH
  0063d	c6		 DB	 -58			; ffffffc6H
  0063e	d2		 DB	 -46			; ffffffd2H
  0063f	1b		 DB	 27			; 0000001bH
  00640	0f 7f c6	 movq	 mm6, mm0
  00643	0f 72 f0 01	 pslld	 mm0, 1
  00647	0f		 DB	 15			; 0000000fH
  00648	14		 DB	 20			; 00000014H
  00649	ca		 DB	 -54			; ffffffcaH
  0064a	0f 71 e6 0f	 psraw	 mm6, 15			; 0000000fH
  0064e	0f		 DB	 15			; 0000000fH
  0064f	59		 DB	 89			; 00000059H
  00650	c1		 DB	 -63			; ffffffc1H
  00651	0f 6e 66 04	 movd	 mm4, DWORD PTR [esi+4]
  00655	0f		 DB	 15			; 0000000fH
  00656	2d		 DB	 45			; 0000002dH
  00657	c8		 DB	 -56			; ffffffc8H
  00658	0f 61 e6	 punpcklwd mm4, mm6
  0065b	0f		 DB	 15			; 0000000fH
  0065c	c6		 DB	 -58			; ffffffc6H
  0065d	c0		 DB	 -64			; ffffffc0H
  0065e	0e		 DB	 14			; 0000000eH
  0065f	0f 7f c7	 movq	 mm7, mm0
  00662	0f 72 f0 01	 pslld	 mm0, 1
  00666	0f		 DB	 15			; 0000000fH
  00667	2d		 DB	 45			; 0000002dH
  00668	d8		 DB	 -40			; ffffffd8H
  00669	0f 71 e7 0f	 psraw	 mm7, 15			; 0000000fH
  0066d	0f		 DB	 15			; 0000000fH
  0066e	28		 DB	 40			; 00000028H
  0066f	c3		 DB	 -61			; ffffffc3H
  00670	0f fe ca	 paddd	 mm1, mm2
  00673	0f fe dc	 paddd	 mm3, mm4
  00676	0f		 DB	 15			; 0000000fH
  00677	c6		 DB	 -58			; ffffffc6H
  00678	c3		 DB	 -61			; ffffffc3H
  00679	fa		 DB	 -6			; fffffffaH
  0067a	0f 6b cb	 packssdw mm1, mm3
  0067d	0f 7f c5	 movq	 mm5, mm0
  00680	0f		 DB	 15			; 0000000fH
  00681	28		 DB	 40			; 00000028H
  00682	cc		 DB	 -52			; ffffffccH
  00683	0f 7f 0f	 movq	 MMWORD PTR [edi], mm1
  00686	0f		 DB	 15			; 0000000fH
  00687	15		 DB	 21			; 00000015H
  00688	ca		 DB	 -54			; ffffffcaH
  00689	0f 6e 56 08	 movd	 mm2, DWORD PTR [esi+8]
  0068d	0f 72 f0 01	 pslld	 mm0, 1
  00691	0f		 DB	 15			; 0000000fH
  00692	59		 DB	 89			; 00000059H
  00693	c1		 DB	 -63			; ffffffc1H
  00694	0f 6e 66 0c	 movd	 mm4, DWORD PTR [esi+12]
  00698	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  0069c	0f		 DB	 15			; 0000000fH
  0069d	2d		 DB	 45			; 0000002dH
  0069e	c8		 DB	 -56			; ffffffc8H
  0069f	0f 61 d7	 punpcklwd mm2, mm7
  006a2	0f		 DB	 15			; 0000000fH
  006a3	c6		 DB	 -58			; ffffffc6H
  006a4	c0		 DB	 -64			; ffffffc0H
  006a5	0e		 DB	 14			; 0000000eH
  006a6	0f 61 e5	 punpcklwd mm4, mm5
  006a9	0f fe ca	 paddd	 mm1, mm2
  006ac	0f		 DB	 15			; 0000000fH
  006ad	2d		 DB	 45			; 0000002dH
  006ae	d8		 DB	 -40			; ffffffd8H
  006af	0f fe dc	 paddd	 mm3, mm4
  006b2	0f 6b cb	 packssdw mm1, mm3
  006b5	0f 7f 4f 08	 movq	 MMWORD PTR [edi+8], mm1

; 3208 :                 RECONSTRUCT8(1)

  006b9	0f		 DB	 15			; 0000000fH
  006ba	10		 DB	 16			; 00000010H
  006bb	1b		 DB	 27			; 0000001bH
  006bc	0f 7f c5	 movq	 mm5, mm0
  006bf	83 c3 10	 add	 ebx, 16			; 00000010H
  006c2	0f		 DB	 15			; 0000000fH
  006c3	28		 DB	 40			; 00000028H
  006c4	c3		 DB	 -61			; ffffffc3H
  006c5	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  006c9	0f		 DB	 15			; 0000000fH
  006ca	c6		 DB	 -58			; ffffffc6H
  006cb	c3		 DB	 -61			; ffffffc3H
  006cc	50		 DB	 80			; 00000050H
  006cd	0f 6e 56 10	 movd	 mm2, DWORD PTR [esi+16]
  006d1	83 e9 10	 sub	 ecx, 16			; 00000010H
  006d4	0f		 DB	 15			; 0000000fH
  006d5	10		 DB	 16			; 00000010H
  006d6	21		 DB	 33			; 00000021H
  006d7	0f		 DB	 15			; 0000000fH
  006d8	c6		 DB	 -58			; ffffffc6H
  006d9	e4		 DB	 -28			; ffffffe4H
  006da	1b		 DB	 27			; 0000001bH
  006db	0f 61 d5	 punpcklwd mm2, mm5
  006de	0f		 DB	 15			; 0000000fH
  006df	28		 DB	 40			; 00000028H
  006e0	cc		 DB	 -52			; ffffffccH
  006e1	0f 72 f0 01	 pslld	 mm0, 1
  006e5	83 ea 10	 sub	 edx, 16			; 00000010H
  006e8	0f		 DB	 15			; 0000000fH
  006e9	10		 DB	 16			; 00000010H
  006ea	12		 DB	 18			; 00000012H
  006eb	0f		 DB	 15			; 0000000fH
  006ec	c6		 DB	 -58			; ffffffc6H
  006ed	d2		 DB	 -46			; ffffffd2H
  006ee	1b		 DB	 27			; 0000001bH
  006ef	0f 7f c6	 movq	 mm6, mm0
  006f2	0f 72 f0 01	 pslld	 mm0, 1
  006f6	0f		 DB	 15			; 0000000fH
  006f7	14		 DB	 20			; 00000014H
  006f8	ca		 DB	 -54			; ffffffcaH
  006f9	0f 71 e6 0f	 psraw	 mm6, 15			; 0000000fH
  006fd	0f		 DB	 15			; 0000000fH
  006fe	59		 DB	 89			; 00000059H
  006ff	c1		 DB	 -63			; ffffffc1H
  00700	0f 6e 66 14	 movd	 mm4, DWORD PTR [esi+20]
  00704	0f		 DB	 15			; 0000000fH
  00705	2d		 DB	 45			; 0000002dH
  00706	c8		 DB	 -56			; ffffffc8H
  00707	0f 61 e6	 punpcklwd mm4, mm6
  0070a	0f		 DB	 15			; 0000000fH
  0070b	c6		 DB	 -58			; ffffffc6H
  0070c	c0		 DB	 -64			; ffffffc0H
  0070d	0e		 DB	 14			; 0000000eH
  0070e	0f 7f c7	 movq	 mm7, mm0
  00711	0f 72 f0 01	 pslld	 mm0, 1
  00715	0f		 DB	 15			; 0000000fH
  00716	2d		 DB	 45			; 0000002dH
  00717	d8		 DB	 -40			; ffffffd8H
  00718	0f 71 e7 0f	 psraw	 mm7, 15			; 0000000fH
  0071c	0f		 DB	 15			; 0000000fH
  0071d	28		 DB	 40			; 00000028H
  0071e	c3		 DB	 -61			; ffffffc3H
  0071f	0f fe ca	 paddd	 mm1, mm2
  00722	0f fe dc	 paddd	 mm3, mm4
  00725	0f		 DB	 15			; 0000000fH
  00726	c6		 DB	 -58			; ffffffc6H
  00727	c3		 DB	 -61			; ffffffc3H
  00728	fa		 DB	 -6			; fffffffaH
  00729	0f 6b cb	 packssdw mm1, mm3
  0072c	0f 7f c5	 movq	 mm5, mm0
  0072f	0f		 DB	 15			; 0000000fH
  00730	28		 DB	 40			; 00000028H
  00731	cc		 DB	 -52			; ffffffccH
  00732	0f 7f 4f 10	 movq	 MMWORD PTR [edi+16], mm1
  00736	0f		 DB	 15			; 0000000fH
  00737	15		 DB	 21			; 00000015H
  00738	ca		 DB	 -54			; ffffffcaH
  00739	0f 6e 56 18	 movd	 mm2, DWORD PTR [esi+24]
  0073d	0f 72 f0 01	 pslld	 mm0, 1
  00741	0f		 DB	 15			; 0000000fH
  00742	59		 DB	 89			; 00000059H
  00743	c1		 DB	 -63			; ffffffc1H
  00744	0f 6e 66 1c	 movd	 mm4, DWORD PTR [esi+28]
  00748	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  0074c	0f		 DB	 15			; 0000000fH
  0074d	2d		 DB	 45			; 0000002dH
  0074e	c8		 DB	 -56			; ffffffc8H
  0074f	0f 61 d7	 punpcklwd mm2, mm7
  00752	0f		 DB	 15			; 0000000fH
  00753	c6		 DB	 -58			; ffffffc6H
  00754	c0		 DB	 -64			; ffffffc0H
  00755	0e		 DB	 14			; 0000000eH
  00756	0f 61 e5	 punpcklwd mm4, mm5
  00759	0f fe ca	 paddd	 mm1, mm2
  0075c	0f		 DB	 15			; 0000000fH
  0075d	2d		 DB	 45			; 0000002dH
  0075e	d8		 DB	 -40			; ffffffd8H
  0075f	0f fe dc	 paddd	 mm3, mm4
  00762	0f 6b cb	 packssdw mm1, mm3
  00765	0f 7f 4f 18	 movq	 MMWORD PTR [edi+24], mm1

; 3209 :                 RECONSTRUCT8(2)

  00769	0f		 DB	 15			; 0000000fH
  0076a	10		 DB	 16			; 00000010H
  0076b	1b		 DB	 27			; 0000001bH
  0076c	0f 7f c5	 movq	 mm5, mm0
  0076f	83 c3 10	 add	 ebx, 16			; 00000010H
  00772	0f		 DB	 15			; 0000000fH
  00773	28		 DB	 40			; 00000028H
  00774	c3		 DB	 -61			; ffffffc3H
  00775	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  00779	0f		 DB	 15			; 0000000fH
  0077a	c6		 DB	 -58			; ffffffc6H
  0077b	c3		 DB	 -61			; ffffffc3H
  0077c	50		 DB	 80			; 00000050H
  0077d	0f 6e 56 20	 movd	 mm2, DWORD PTR [esi+32]
  00781	83 e9 10	 sub	 ecx, 16			; 00000010H
  00784	0f		 DB	 15			; 0000000fH
  00785	10		 DB	 16			; 00000010H
  00786	21		 DB	 33			; 00000021H
  00787	0f		 DB	 15			; 0000000fH
  00788	c6		 DB	 -58			; ffffffc6H
  00789	e4		 DB	 -28			; ffffffe4H
  0078a	1b		 DB	 27			; 0000001bH
  0078b	0f 61 d5	 punpcklwd mm2, mm5
  0078e	0f		 DB	 15			; 0000000fH
  0078f	28		 DB	 40			; 00000028H
  00790	cc		 DB	 -52			; ffffffccH
  00791	0f 72 f0 01	 pslld	 mm0, 1
  00795	83 ea 10	 sub	 edx, 16			; 00000010H
  00798	0f		 DB	 15			; 0000000fH
  00799	10		 DB	 16			; 00000010H
  0079a	12		 DB	 18			; 00000012H
  0079b	0f		 DB	 15			; 0000000fH
  0079c	c6		 DB	 -58			; ffffffc6H
  0079d	d2		 DB	 -46			; ffffffd2H
  0079e	1b		 DB	 27			; 0000001bH
  0079f	0f 7f c6	 movq	 mm6, mm0
  007a2	0f 72 f0 01	 pslld	 mm0, 1
  007a6	0f		 DB	 15			; 0000000fH
  007a7	14		 DB	 20			; 00000014H
  007a8	ca		 DB	 -54			; ffffffcaH
  007a9	0f 71 e6 0f	 psraw	 mm6, 15			; 0000000fH
  007ad	0f		 DB	 15			; 0000000fH
  007ae	59		 DB	 89			; 00000059H
  007af	c1		 DB	 -63			; ffffffc1H
  007b0	0f 6e 66 24	 movd	 mm4, DWORD PTR [esi+36]
  007b4	0f		 DB	 15			; 0000000fH
  007b5	2d		 DB	 45			; 0000002dH
  007b6	c8		 DB	 -56			; ffffffc8H
  007b7	0f 61 e6	 punpcklwd mm4, mm6
  007ba	0f		 DB	 15			; 0000000fH
  007bb	c6		 DB	 -58			; ffffffc6H
  007bc	c0		 DB	 -64			; ffffffc0H
  007bd	0e		 DB	 14			; 0000000eH
  007be	0f 7f c7	 movq	 mm7, mm0
  007c1	0f 72 f0 01	 pslld	 mm0, 1
  007c5	0f		 DB	 15			; 0000000fH
  007c6	2d		 DB	 45			; 0000002dH
  007c7	d8		 DB	 -40			; ffffffd8H
  007c8	0f 71 e7 0f	 psraw	 mm7, 15			; 0000000fH
  007cc	0f		 DB	 15			; 0000000fH
  007cd	28		 DB	 40			; 00000028H
  007ce	c3		 DB	 -61			; ffffffc3H
  007cf	0f fe ca	 paddd	 mm1, mm2
  007d2	0f fe dc	 paddd	 mm3, mm4
  007d5	0f		 DB	 15			; 0000000fH
  007d6	c6		 DB	 -58			; ffffffc6H
  007d7	c3		 DB	 -61			; ffffffc3H
  007d8	fa		 DB	 -6			; fffffffaH
  007d9	0f 6b cb	 packssdw mm1, mm3
  007dc	0f 7f c5	 movq	 mm5, mm0
  007df	0f		 DB	 15			; 0000000fH
  007e0	28		 DB	 40			; 00000028H
  007e1	cc		 DB	 -52			; ffffffccH
  007e2	0f 7f 4f 20	 movq	 MMWORD PTR [edi+32], mm1
  007e6	0f		 DB	 15			; 0000000fH
  007e7	15		 DB	 21			; 00000015H
  007e8	ca		 DB	 -54			; ffffffcaH
  007e9	0f 6e 56 28	 movd	 mm2, DWORD PTR [esi+40]
  007ed	0f 72 f0 01	 pslld	 mm0, 1
  007f1	0f		 DB	 15			; 0000000fH
  007f2	59		 DB	 89			; 00000059H
  007f3	c1		 DB	 -63			; ffffffc1H
  007f4	0f 6e 66 2c	 movd	 mm4, DWORD PTR [esi+44]
  007f8	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  007fc	0f		 DB	 15			; 0000000fH
  007fd	2d		 DB	 45			; 0000002dH
  007fe	c8		 DB	 -56			; ffffffc8H
  007ff	0f 61 d7	 punpcklwd mm2, mm7
  00802	0f		 DB	 15			; 0000000fH
  00803	c6		 DB	 -58			; ffffffc6H
  00804	c0		 DB	 -64			; ffffffc0H
  00805	0e		 DB	 14			; 0000000eH
  00806	0f 61 e5	 punpcklwd mm4, mm5
  00809	0f fe ca	 paddd	 mm1, mm2
  0080c	0f		 DB	 15			; 0000000fH
  0080d	2d		 DB	 45			; 0000002dH
  0080e	d8		 DB	 -40			; ffffffd8H
  0080f	0f fe dc	 paddd	 mm3, mm4
  00812	0f 6b cb	 packssdw mm1, mm3
  00815	0f 7f 4f 28	 movq	 MMWORD PTR [edi+40], mm1

; 3210 :                 RECONSTRUCT8(3)

  00819	0f		 DB	 15			; 0000000fH
  0081a	10		 DB	 16			; 00000010H
  0081b	1b		 DB	 27			; 0000001bH
  0081c	0f 7f c5	 movq	 mm5, mm0
  0081f	83 c3 10	 add	 ebx, 16			; 00000010H
  00822	0f		 DB	 15			; 0000000fH
  00823	28		 DB	 40			; 00000028H
  00824	c3		 DB	 -61			; ffffffc3H
  00825	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  00829	0f		 DB	 15			; 0000000fH
  0082a	c6		 DB	 -58			; ffffffc6H
  0082b	c3		 DB	 -61			; ffffffc3H
  0082c	50		 DB	 80			; 00000050H
  0082d	0f 6e 56 30	 movd	 mm2, DWORD PTR [esi+48]
  00831	83 e9 10	 sub	 ecx, 16			; 00000010H
  00834	0f		 DB	 15			; 0000000fH
  00835	10		 DB	 16			; 00000010H
  00836	21		 DB	 33			; 00000021H
  00837	0f		 DB	 15			; 0000000fH
  00838	c6		 DB	 -58			; ffffffc6H
  00839	e4		 DB	 -28			; ffffffe4H
  0083a	1b		 DB	 27			; 0000001bH
  0083b	0f 61 d5	 punpcklwd mm2, mm5
  0083e	0f		 DB	 15			; 0000000fH
  0083f	28		 DB	 40			; 00000028H
  00840	cc		 DB	 -52			; ffffffccH
  00841	0f 72 f0 01	 pslld	 mm0, 1
  00845	83 ea 10	 sub	 edx, 16			; 00000010H
  00848	0f		 DB	 15			; 0000000fH
  00849	10		 DB	 16			; 00000010H
  0084a	12		 DB	 18			; 00000012H
  0084b	0f		 DB	 15			; 0000000fH
  0084c	c6		 DB	 -58			; ffffffc6H
  0084d	d2		 DB	 -46			; ffffffd2H
  0084e	1b		 DB	 27			; 0000001bH
  0084f	0f 7f c6	 movq	 mm6, mm0
  00852	0f 72 f0 01	 pslld	 mm0, 1
  00856	0f		 DB	 15			; 0000000fH
  00857	14		 DB	 20			; 00000014H
  00858	ca		 DB	 -54			; ffffffcaH
  00859	0f 71 e6 0f	 psraw	 mm6, 15			; 0000000fH
  0085d	0f		 DB	 15			; 0000000fH
  0085e	59		 DB	 89			; 00000059H
  0085f	c1		 DB	 -63			; ffffffc1H
  00860	0f 6e 66 34	 movd	 mm4, DWORD PTR [esi+52]
  00864	0f		 DB	 15			; 0000000fH
  00865	2d		 DB	 45			; 0000002dH
  00866	c8		 DB	 -56			; ffffffc8H
  00867	0f 61 e6	 punpcklwd mm4, mm6
  0086a	0f		 DB	 15			; 0000000fH
  0086b	c6		 DB	 -58			; ffffffc6H
  0086c	c0		 DB	 -64			; ffffffc0H
  0086d	0e		 DB	 14			; 0000000eH
  0086e	0f 7f c7	 movq	 mm7, mm0
  00871	0f 72 f0 01	 pslld	 mm0, 1
  00875	0f		 DB	 15			; 0000000fH
  00876	2d		 DB	 45			; 0000002dH
  00877	d8		 DB	 -40			; ffffffd8H
  00878	0f 71 e7 0f	 psraw	 mm7, 15			; 0000000fH
  0087c	0f		 DB	 15			; 0000000fH
  0087d	28		 DB	 40			; 00000028H
  0087e	c3		 DB	 -61			; ffffffc3H
  0087f	0f fe ca	 paddd	 mm1, mm2
  00882	0f fe dc	 paddd	 mm3, mm4
  00885	0f		 DB	 15			; 0000000fH
  00886	c6		 DB	 -58			; ffffffc6H
  00887	c3		 DB	 -61			; ffffffc3H
  00888	fa		 DB	 -6			; fffffffaH
  00889	0f 6b cb	 packssdw mm1, mm3
  0088c	0f 7f c5	 movq	 mm5, mm0
  0088f	0f		 DB	 15			; 0000000fH
  00890	28		 DB	 40			; 00000028H
  00891	cc		 DB	 -52			; ffffffccH
  00892	0f 7f 4f 30	 movq	 MMWORD PTR [edi+48], mm1
  00896	0f		 DB	 15			; 0000000fH
  00897	15		 DB	 21			; 00000015H
  00898	ca		 DB	 -54			; ffffffcaH
  00899	0f 6e 56 38	 movd	 mm2, DWORD PTR [esi+56]
  0089d	0f 72 f0 01	 pslld	 mm0, 1
  008a1	0f		 DB	 15			; 0000000fH
  008a2	59		 DB	 89			; 00000059H
  008a3	c1		 DB	 -63			; ffffffc1H
  008a4	0f 6e 66 3c	 movd	 mm4, DWORD PTR [esi+60]
  008a8	0f 71 e5 0f	 psraw	 mm5, 15			; 0000000fH
  008ac	0f		 DB	 15			; 0000000fH
  008ad	2d		 DB	 45			; 0000002dH
  008ae	c8		 DB	 -56			; ffffffc8H
  008af	0f 61 d7	 punpcklwd mm2, mm7
  008b2	0f		 DB	 15			; 0000000fH
  008b3	c6		 DB	 -58			; ffffffc6H
  008b4	c0		 DB	 -64			; ffffffc0H
  008b5	0e		 DB	 14			; 0000000eH
  008b6	0f 61 e5	 punpcklwd mm4, mm5
  008b9	0f fe ca	 paddd	 mm1, mm2
  008bc	0f		 DB	 15			; 0000000fH
  008bd	2d		 DB	 45			; 0000002dH
  008be	d8		 DB	 -40			; ffffffd8H
  008bf	0f fe dc	 paddd	 mm3, mm4
  008c2	0f 6b cb	 packssdw mm1, mm3
  008c5	0f 7f 4f 38	 movq	 MMWORD PTR [edi+56], mm1

; 3211 :                 
; 3212 :                 add         esi,2*32

  008c9	83 c6 40	 add	 esi, 64			; 00000040H

; 3213 :                 add         edi,2*32

  008cc	83 c7 40	 add	 edi, 64			; 00000040H

; 3214 : 
; 3215 :                 mov         iResult,ebx

  008cf	89 5d e0	 mov	 DWORD PTR _iResult$[ebp], ebx

; 3216 : 
; 3217 :                 mov         ebx,piSrcSign   //uiSignbitData = *piSrcSign++;

  008d2	8b 5d b8	 mov	 ebx, DWORD PTR _piSrcSign$[ebp]

; 3218 :                 movd        mm0,[ebx]

  008d5	0f 6e 03	 movd	 mm0, DWORD PTR [ebx]

; 3219 :                 pslld       mm0,16

  008d8	0f 72 f0 10	 pslld	 mm0, 16			; 00000010H

; 3220 :                 psrld       mm0,16

  008dc	0f 72 d0 10	 psrld	 mm0, 16			; 00000010H

; 3221 :                 add         ebx,2

  008e0	83 c3 02	 add	 ebx, 2

; 3222 :                 mov         piSrcSign,ebx

  008e3	89 5d b8	 mov	 DWORD PTR _piSrcSign$[ebp], ebx

; 3223 : 
; 3224 :                 mov         ebx,piSrcSign2  //uiSignbitData2 = *piSrcSign2++;

  008e6	8b 5d dc	 mov	 ebx, DWORD PTR _piSrcSign2$[ebp]

; 3225 :                 movd        mm1,[ebx]

  008e9	0f 6e 0b	 movd	 mm1, DWORD PTR [ebx]

; 3226 :                 pslld       mm1,16

  008ec	0f 72 f1 10	 pslld	 mm1, 16			; 00000010H

; 3227 :                 psrld       mm1,16

  008f0	0f 72 d1 10	 psrld	 mm1, 16			; 00000010H

; 3228 :                 add         ebx,2

  008f4	83 c3 02	 add	 ebx, 2

; 3229 :                 mov         piSrcSign2,ebx

  008f7	89 5d dc	 mov	 DWORD PTR _piSrcSign2$[ebp], ebx

; 3230 : 
; 3231 :                 mov         ebx,iResult

  008fa	8b 5d e0	 mov	 ebx, DWORD PTR _iResult$[ebp]

; 3232 :  
; 3233 :             dec         eax

  008fd	48		 dec	 eax

; 3234 :             jnz         Loop2

  008fe	0f 85 04 fd ff
	ff		 jne	 $Loop2$2770

; 3235 : 
; 3236 :             mov         piSrc,esi

  00904	89 75 f8	 mov	 DWORD PTR _piSrc$[ebp], esi

; 3237 :             mov         piDst,edi

  00907	89 7d d4	 mov	 DWORD PTR _piDst$[ebp], edi

; 3238 :             mov         piSin,ebx

  0090a	89 5d b0	 mov	 DWORD PTR _piSin$[ebp], ebx

; 3239 :             mov         piCoef,ecx

  0090d	89 4d bc	 mov	 DWORD PTR _piCoef$[ebp], ecx

; 3240 :             mov         piCoef2,edx

  00910	89 55 ac	 mov	 DWORD PTR _piCoef2$[ebp], edx

; 3241 :             movd        uiSignbitData,mm0

  00913	0f 7e 45 ec	 movd	 DWORD PTR _uiSignbitData$[ebp], mm0

; 3242 :             movd        uiSignbitData2,mm1

  00917	0f 7e 4d c4	 movd	 DWORD PTR _uiSignbitData2$[ebp], mm1

; 3243 : #           undef RECONSTRUCT8
; 3244 : 
; 3245 :             }
; 3246 :             uiSignbitCount = 16;                                                     

  0091b	c7 45 d8 10 00
	00 00		 mov	 DWORD PTR _uiSignbitCount$[ebp], 16 ; 00000010H

; 3247 :             uiSignbitCount2 = 16;                                                     

  00922	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR _uiSignbitCount2$[ebp], 16 ; 00000010H

; 3248 :             if (iLoopBy1) {

  00929	83 7d 88 00	 cmp	 DWORD PTR _iLoopBy1$2768[ebp], 0
  0092d	74 27		 je	 SHORT $L2764

; 3249 :                 pau->aupfnReconstruct = auReconstruct;

  0092f	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00932	c7 80 f8 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1016], OFFSET FLAT:_auReconstruct_XDS@16

; 3250 :                 return auReconstruct(pau,piOutput,pcSampleGet,fForceTransformAll); 

  0093c	8b 4d 14	 mov	 ecx, DWORD PTR _fForceTransformAll$[ebp]
  0093f	51		 push	 ecx
  00940	8b 55 10	 mov	 edx, DWORD PTR _pcSampleGet$[ebp]
  00943	52		 push	 edx
  00944	8b 45 0c	 mov	 eax, DWORD PTR _piOutput$[ebp]
  00947	50		 push	 eax
  00948	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  0094b	51		 push	 ecx
  0094c	e8 00 00 00 00	 call	 _auReconstruct_XDS@16
  00951	e9 ab 02 00 00	 jmp	 $L2719
$L2764:

; 3251 :             }
; 3252 :         }
; 3253 :     }
; 3254 :     if (i < iCoefRecurQ3) 

  00956	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00959	3b 55 d0	 cmp	 edx, DWORD PTR _iCoefRecurQ3$[ebp]
  0095c	0f 8d 00 02 00
	00		 jge	 $L2772

; 3255 :     {
; 3256 :         Int iLoopBy4,iLoopBy1,iLoopCnt;
; 3257 :         iSegEnd = min (iCoefRecurQ3, iEnd);

  00962	8b 45 d0	 mov	 eax, DWORD PTR _iCoefRecurQ3$[ebp]
  00965	3b 45 c8	 cmp	 eax, DWORD PTR _iEnd$[ebp]
  00968	7d 0b		 jge	 SHORT $L3144
  0096a	8b 4d d0	 mov	 ecx, DWORD PTR _iCoefRecurQ3$[ebp]
  0096d	89 8d 6c ff ff
	ff		 mov	 DWORD PTR tv236[ebp], ecx
  00973	eb 09		 jmp	 SHORT $L3145
$L3144:
  00975	8b 55 c8	 mov	 edx, DWORD PTR _iEnd$[ebp]
  00978	89 95 6c ff ff
	ff		 mov	 DWORD PTR tv236[ebp], edx
$L3145:
  0097e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv236[ebp]
  00984	89 45 c0	 mov	 DWORD PTR _iSegEnd$[ebp], eax

; 3258 :         iLoopBy4 = (iSegEnd - i) >> 2;

  00987	8b 4d c0	 mov	 ecx, DWORD PTR _iSegEnd$[ebp]
  0098a	2b 4d f4	 sub	 ecx, DWORD PTR _i$[ebp]
  0098d	c1 f9 02	 sar	 ecx, 2
  00990	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _iLoopBy4$2773[ebp], ecx

; 3259 :         iLoopBy1 = (iSegEnd - i) & 0x3;

  00996	8b 55 c0	 mov	 edx, DWORD PTR _iSegEnd$[ebp]
  00999	2b 55 f4	 sub	 edx, DWORD PTR _i$[ebp]
  0099c	83 e2 03	 and	 edx, 3
  0099f	89 55 80	 mov	 DWORD PTR _iLoopBy1$2774[ebp], edx

; 3260 :         (*pcSampleGet) += (I16)(iLoopBy4<<2);

  009a2	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _iLoopBy4$2773[ebp]
  009a8	c1 e0 02	 shl	 eax, 2
  009ab	0f bf c8	 movsx	 ecx, ax
  009ae	8b 55 10	 mov	 edx, DWORD PTR _pcSampleGet$[ebp]
  009b1	0f bf 02	 movsx	 eax, WORD PTR [edx]
  009b4	03 c1		 add	 eax, ecx
  009b6	8b 4d 10	 mov	 ecx, DWORD PTR _pcSampleGet$[ebp]
  009b9	66 89 01	 mov	 WORD PTR [ecx], ax

; 3261 :         i += (iLoopBy4<<2);

  009bc	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _iLoopBy4$2773[ebp]
  009c2	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  009c5	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  009c8	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx

; 3262 :         if (iLoopBy4 != 0)

  009cb	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR _iLoopBy4$2773[ebp], 0
  009d2	74 53		 je	 SHORT $L2777

; 3263 :         {
; 3264 :             _asm {
; 3265 : 
; 3266 :             mov         eax,iLoopBy4

  009d4	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _iLoopBy4$2773[ebp]

; 3267 :             mov         ecx,piCoef

  009da	8b 4d bc	 mov	 ecx, DWORD PTR _piCoef$[ebp]

; 3268 :             mov         edx,piCoef2

  009dd	8b 55 ac	 mov	 edx, DWORD PTR _piCoef2$[ebp]

; 3269 :             mov         edi,piDst

  009e0	8b 7d d4	 mov	 edi, DWORD PTR _piDst$[ebp]
$Loop3$2778:

; 3270 :             Loop3:    
; 3271 :                 sub         ecx,4*4                 //Bump ptr                                                              

  009e3	83 e9 10	 sub	 ecx, 16			; 00000010H

; 3272 :                 movups      xmm4_ecx                //Load Coefficents for channel 1

  009e6	0f		 DB	 15			; 0000000fH
  009e7	10		 DB	 16			; 00000010H
  009e8	21		 DB	 33			; 00000021H

; 3273 :                 sub         edx,4*4                 //Bump ptr                                          

  009e9	83 ea 10	 sub	 edx, 16			; 00000010H

; 3274 :                 movups      xmm2_edx                //Load Coefficents for channel 2                                        

  009ec	0f		 DB	 15			; 0000000fH
  009ed	10		 DB	 16			; 00000010H
  009ee	12		 DB	 18			; 00000012H

; 3275 :                 cvtps2pi    mm0_xmm4                //convert 2 lower multiply results to rounded integer values            

  009ef	0f		 DB	 15			; 0000000fH
  009f0	2d		 DB	 45			; 0000002dH
  009f1	c4		 DB	 -60			; ffffffc4H

; 3276 :                 cvtps2pi    mm1_xmm2                //convert 2 lower multiply results to rounded integer values           

  009f2	0f		 DB	 15			; 0000000fH
  009f3	2d		 DB	 45			; 0000002dH
  009f4	ca		 DB	 -54			; ffffffcaH

; 3277 :                 shufps      (xmm4_xmm4,0xE)         //move high elements in to low (a=c,b=d,c=a,d=a)              

  009f5	0f		 DB	 15			; 0000000fH
  009f6	c6		 DB	 -58			; ffffffc6H
  009f7	e4		 DB	 -28			; ffffffe4H
  009f8	0e		 DB	 14			; 0000000eH

; 3278 :                 shufps      (xmm2_xmm2,0xE)         //move high elements in to low (a=c,b=d,c=a,d=a)                        

  009f9	0f		 DB	 15			; 0000000fH
  009fa	c6		 DB	 -58			; ffffffc6H
  009fb	d2		 DB	 -46			; ffffffd2H
  009fc	0e		 DB	 14			; 0000000eH

; 3279 :                 cvtps2pi    mm2_xmm4                //convert 2 lower multiply results to rounded integer values           

  009fd	0f		 DB	 15			; 0000000fH
  009fe	2d		 DB	 45			; 0000002dH
  009ff	d4		 DB	 -44			; ffffffd4H

; 3280 :                 cvtps2pi    mm3_xmm2                //convert 2 lower multiply results to rounded integer values            

  00a00	0f		 DB	 15			; 0000000fH
  00a01	2d		 DB	 45			; 0000002dH
  00a02	da		 DB	 -38			; ffffffdaH

; 3281 :                 packssdw    mm2,mm3                 //Convert to 16bit and saturate

  00a03	0f 6b d3	 packssdw mm2, mm3

; 3282 :                 pshufw      mm2_mm2 emit 0x8D     //Shuffle (a=b,b=d,c=a,b=c)

  00a06	0f		 DB	 15			; 0000000fH
  00a07	70		 DB	 112			; 00000070H
  00a08	d2		 DB	 -46			; ffffffd2H
  00a09	8d		 DB	 -115			; ffffff8dH

; 3283 :                 packssdw    mm0,mm1                 //Convert to 16bit and saturate

  00a0a	0f 6b c1	 packssdw mm0, mm1

; 3284 :                 pshufw      mm0_mm0 emit 0x8D     //Shuffle (a=b,b=d,c=a,b=c)

  00a0d	0f		 DB	 15			; 0000000fH
  00a0e	70		 DB	 112			; 00000070H
  00a0f	c0		 DB	 -64			; ffffffc0H
  00a10	8d		 DB	 -115			; ffffff8dH

; 3285 :                 movq        [edi],mm2               //Store 4 16bit words

  00a11	0f 7f 17	 movq	 MMWORD PTR [edi], mm2

; 3286 :                 movq        [edi+8],mm0             //Store 4 16bit words

  00a14	0f 7f 47 08	 movq	 MMWORD PTR [edi+8], mm0

; 3287 :                 add         edi,2*8                 //Bump Ptr

  00a18	83 c7 10	 add	 edi, 16			; 00000010H

; 3288 :             dec         eax

  00a1b	48		 dec	 eax

; 3289 :             jnz         Loop3

  00a1c	75 c5		 jne	 SHORT $Loop3$2778

; 3290 :             mov         piCoef,ecx

  00a1e	89 4d bc	 mov	 DWORD PTR _piCoef$[ebp], ecx

; 3291 :             mov         piCoef2,edx

  00a21	89 55 ac	 mov	 DWORD PTR _piCoef2$[ebp], edx

; 3292 :             mov         piDst,edi

  00a24	89 7d d4	 mov	 DWORD PTR _piDst$[ebp], edi
$L2777:

; 3293 : 
; 3294 :             }
; 3295 :         }
; 3296 :         if (iLoopBy1) _asm emms

  00a27	83 7d 80 00	 cmp	 DWORD PTR _iLoopBy1$2774[ebp], 0
  00a2b	74 02		 je	 SHORT $L2779
  00a2d	0f 77		 emms
$L2779:

; 3297 :         for (iLoopCnt = 0; iLoopCnt < iLoopBy1; iLoopCnt++, i++,(*pcSampleGet)++)    {

  00a2f	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _iLoopCnt$2775[ebp], 0
  00a36	eb 22		 jmp	 SHORT $L2780
$L2781:
  00a38	8b 55 84	 mov	 edx, DWORD PTR _iLoopCnt$2775[ebp]
  00a3b	83 c2 01	 add	 edx, 1
  00a3e	89 55 84	 mov	 DWORD PTR _iLoopCnt$2775[ebp], edx
  00a41	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00a44	83 c0 01	 add	 eax, 1
  00a47	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  00a4a	8b 4d 10	 mov	 ecx, DWORD PTR _pcSampleGet$[ebp]
  00a4d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00a50	66 83 c2 01	 add	 dx, 1
  00a54	8b 45 10	 mov	 eax, DWORD PTR _pcSampleGet$[ebp]
  00a57	66 89 10	 mov	 WORD PTR [eax], dx
$L2780:
  00a5a	8b 4d 84	 mov	 ecx, DWORD PTR _iLoopCnt$2775[ebp]
  00a5d	3b 4d 80	 cmp	 ecx, DWORD PTR _iLoopBy1$2774[ebp]
  00a60	0f 8d fc 00 00
	00		 jge	 $L2772

; 3298 :             Float cfResult = INT_FROM_COEF( *--piCoef );

  00a66	8b 55 bc	 mov	 edx, DWORD PTR _piCoef$[ebp]
  00a69	83 ea 04	 sub	 edx, 4
  00a6c	89 55 bc	 mov	 DWORD PTR _piCoef$[ebp], edx
  00a6f	8b 45 bc	 mov	 eax, DWORD PTR _piCoef$[ebp]
  00a72	d9 00		 fld	 DWORD PTR [eax]
  00a74	d9 9d 78 ff ff
	ff		 fstp	 DWORD PTR _cfResult$2783[ebp]

; 3299 :             ROUND_SATURATE_STORE( piDst, cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00a7a	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _cfResult$2783[ebp]
  00a80	51		 push	 ecx
  00a81	e8 00 00 00 00	 call	 @ROUNDF@4
  00a86	89 45 e0	 mov	 DWORD PTR _iResult$[ebp], eax
  00a89	81 7d e0 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00a90	7d 0c		 jge	 SHORT $L3148
  00a92	c7 85 68 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv262[ebp], -32768 ; ffff8000H
  00a9c	eb 2a		 jmp	 SHORT $L3149
$L3148:
  00a9e	81 7d e0 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00aa5	7e 0c		 jle	 SHORT $L3146
  00aa7	c7 85 64 ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv261[ebp], 32767 ; 00007fffH
  00ab1	eb 09		 jmp	 SHORT $L3147
$L3146:
  00ab3	8b 55 e0	 mov	 edx, DWORD PTR _iResult$[ebp]
  00ab6	89 95 64 ff ff
	ff		 mov	 DWORD PTR tv261[ebp], edx
$L3147:
  00abc	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv261[ebp]
  00ac2	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv262[ebp], eax
$L3149:
  00ac8	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR tv262[ebp]
  00ace	89 4d e0	 mov	 DWORD PTR _iResult$[ebp], ecx
  00ad1	8b 55 d4	 mov	 edx, DWORD PTR _piDst$[ebp]
  00ad4	66 8b 45 e0	 mov	 ax, WORD PTR _iResult$[ebp]
  00ad8	66 89 02	 mov	 WORD PTR [edx], ax

; 3300 :             cfResult = INT_FROM_COEF( *--piCoef2 );

  00adb	8b 4d ac	 mov	 ecx, DWORD PTR _piCoef2$[ebp]
  00ade	83 e9 04	 sub	 ecx, 4
  00ae1	89 4d ac	 mov	 DWORD PTR _piCoef2$[ebp], ecx
  00ae4	8b 55 ac	 mov	 edx, DWORD PTR _piCoef2$[ebp]
  00ae7	d9 02		 fld	 DWORD PTR [edx]
  00ae9	d9 9d 78 ff ff
	ff		 fstp	 DWORD PTR _cfResult$2783[ebp]

; 3301 :             ROUND_SATURATE_STORE( (piDst+1), cfResult, SHRT_MIN, SHRT_MAX, iResult );

  00aef	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _cfResult$2783[ebp]
  00af5	50		 push	 eax
  00af6	e8 00 00 00 00	 call	 @ROUNDF@4
  00afb	89 45 e0	 mov	 DWORD PTR _iResult$[ebp], eax
  00afe	81 7d e0 00 80
	ff ff		 cmp	 DWORD PTR _iResult$[ebp], -32768 ; ffff8000H
  00b05	7d 0c		 jge	 SHORT $L3152
  00b07	c7 85 60 ff ff
	ff 00 80 ff ff	 mov	 DWORD PTR tv270[ebp], -32768 ; ffff8000H
  00b11	eb 2a		 jmp	 SHORT $L3153
$L3152:
  00b13	81 7d e0 ff 7f
	00 00		 cmp	 DWORD PTR _iResult$[ebp], 32767 ; 00007fffH
  00b1a	7e 0c		 jle	 SHORT $L3150
  00b1c	c7 85 5c ff ff
	ff ff 7f 00 00	 mov	 DWORD PTR tv269[ebp], 32767 ; 00007fffH
  00b26	eb 09		 jmp	 SHORT $L3151
$L3150:
  00b28	8b 4d e0	 mov	 ecx, DWORD PTR _iResult$[ebp]
  00b2b	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv269[ebp], ecx
$L3151:
  00b31	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR tv269[ebp]
  00b37	89 95 60 ff ff
	ff		 mov	 DWORD PTR tv270[ebp], edx
$L3153:
  00b3d	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv270[ebp]
  00b43	89 45 e0	 mov	 DWORD PTR _iResult$[ebp], eax
  00b46	8b 4d d4	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00b49	66 8b 55 e0	 mov	 dx, WORD PTR _iResult$[ebp]
  00b4d	66 89 51 02	 mov	 WORD PTR [ecx+2], dx

; 3302 :             piDst += cChan;

  00b51	8b 45 cc	 mov	 eax, DWORD PTR _cChan$[ebp]
  00b54	8b 4d d4	 mov	 ecx, DWORD PTR _piDst$[ebp]
  00b57	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00b5a	89 55 d4	 mov	 DWORD PTR _piDst$[ebp], edx

; 3303 :         }

  00b5d	e9 d6 fe ff ff	 jmp	 $L2781
$L2772:

; 3304 :     }
; 3305 :     _asm emms

  00b62	0f 77		 emms

; 3306 : 
; 3307 :     SAVE_SIGNBIT_STATE(piSrcSign,uiSignbitData);

  00b64	83 7d d8 00	 cmp	 DWORD PTR _uiSignbitCount$[ebp], 0
  00b68	74 0b		 je	 SHORT $L2788
  00b6a	8b 45 b8	 mov	 eax, DWORD PTR _piSrcSign$[ebp]
  00b6d	66 8b 4d ec	 mov	 cx, WORD PTR _uiSignbitData$[ebp]
  00b71	66 89 48 fe	 mov	 WORD PTR [eax-2], cx
$L2788:

; 3308 :     pau->m_rgpcinfo[0].m_rgiCoefReconCurr = (Int*)piCoef;

  00b75	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00b78	8b 82 a0 03 00
	00		 mov	 eax, DWORD PTR [edx+928]
  00b7e	8b 4d bc	 mov	 ecx, DWORD PTR _piCoef$[ebp]
  00b81	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 3309 :     pau->m_rgpcinfo[0].m_iCurrGetPCM_SubFrame = (I16)i;

  00b84	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00b87	8b 82 a0 03 00
	00		 mov	 eax, DWORD PTR [edx+928]
  00b8d	66 8b 4d f4	 mov	 cx, WORD PTR _i$[ebp]
  00b91	66 89 48 38	 mov	 WORD PTR [eax+56], cx

; 3310 :     pau->m_rgpcinfo[0].m_piPrevOutputCurr = piSrc;

  00b95	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00b98	8b 82 a0 03 00
	00		 mov	 eax, DWORD PTR [edx+928]
  00b9e	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  00ba1	89 48 48	 mov	 DWORD PTR [eax+72], ecx

; 3311 : 
; 3312 : 
; 3313 :     SAVE_SIGNBIT_STATE(piSrcSign2,uiSignbitData2);

  00ba4	83 7d d8 00	 cmp	 DWORD PTR _uiSignbitCount$[ebp], 0
  00ba8	74 0b		 je	 SHORT $L2792
  00baa	8b 55 dc	 mov	 edx, DWORD PTR _piSrcSign2$[ebp]
  00bad	66 8b 45 c4	 mov	 ax, WORD PTR _uiSignbitData2$[ebp]
  00bb1	66 89 42 fe	 mov	 WORD PTR [edx-2], ax
$L2792:

; 3314 :     pau->m_rgpcinfo[1].m_rgiCoefReconCurr = (Int*)piCoef2;

  00bb5	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00bb8	8b 91 a0 03 00
	00		 mov	 edx, DWORD PTR [ecx+928]
  00bbe	8b 45 ac	 mov	 eax, DWORD PTR _piCoef2$[ebp]
  00bc1	89 82 ac 00 00
	00		 mov	 DWORD PTR [edx+172], eax

; 3315 :     pau->m_rgpcinfo[1].m_iCurrGetPCM_SubFrame = (I16)i;

  00bc7	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00bca	8b 91 a0 03 00
	00		 mov	 edx, DWORD PTR [ecx+928]
  00bd0	66 8b 45 f4	 mov	 ax, WORD PTR _i$[ebp]
  00bd4	66 89 82 a8 00
	00 00		 mov	 WORD PTR [edx+168], ax

; 3316 :     pau->m_rgpcinfo[1].m_piPrevOutputCurr = piSrc+1;

  00bdb	8b 4d f8	 mov	 ecx, DWORD PTR _piSrc$[ebp]
  00bde	83 c1 02	 add	 ecx, 2
  00be1	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00be4	8b 82 a0 03 00
	00		 mov	 eax, DWORD PTR [edx+928]
  00bea	89 88 b8 00 00
	00		 mov	 DWORD PTR [eax+184], ecx

; 3317 : 
; 3318 :     pau->m_piSinForRecon = piSin;

  00bf0	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00bf3	8b 55 b0	 mov	 edx, DWORD PTR _piSin$[ebp]
  00bf6	89 91 28 04 00
	00		 mov	 DWORD PTR [ecx+1064], edx

; 3319 : 
; 3320 : #ifdef PROFILE
; 3321 :     FunctionProfileStop(&fp);
; 3322 : #endif
; 3323 :     return WMA_OK;

  00bfc	a1 00 00 00 00	 mov	 eax, DWORD PTR _WMA_OK
$L2719:

; 3324 : }

  00c01	5f		 pop	 edi
  00c02	5e		 pop	 esi
  00c03	5b		 pop	 ebx
  00c04	8b e5		 mov	 esp, ebp
  00c06	5d		 pop	 ebp
  00c07	c2 10 00	 ret	 16			; 00000010H
_auReconStereo_SIMDFP_XDS@16 ENDP
WMADEC	ENDS
END
