; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\refine.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxPitchRefine_TIME@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
PUBLIC	_CRefinePitchTab1
PUBLIC	_CRefinePitchTab2
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_CRefinePitchTab1 DD 0bfc00000r			; -1.5
	DD	0bf400000r			; -0.75
	DD	000000000r			; 0
	DD	03f400000r			; 0.75
	DD	03fc00000r			; 1.5
_CRefinePitchTab2 DD 0bf000000r			; -0.5
	DD	0be800000r			; -0.25
	DD	03e800000r			; 0.25
	DD	03f000000r			; 0.5
CONST	ENDS
PUBLIC	__real@41000000
PUBLIC	__real@43360000
PUBLIC	_VoxPitchRefine_TIME@24
EXTRN	__fltused:NEAR
EXTRN	_CalcCmpxSpecErr@24:NEAR
EXTRN	_CalcBandErr@24:NEAR
;	COMDAT __real@41000000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\refine.c
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@43360000
CONST	SEGMENT
__real@43360000 DD 043360000r			; 182
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxPitchRefine_TIME@24
_TEXT	SEGMENT
_iSpecInd2$ = -40
_pSWR$ = -36
_minErr$ = -32
_fTryPitch$ = -28
_pSWI$ = -24
_iSpecInd1$ = -20
_totalErr$ = -16
_i$ = -12
_fBasePitch$ = -8
_fRefinePitch$ = -4
_pitch$ = 8
_SWR$ = 12
_SWI$ = 16
_pPower$ = 20
_uiWinLen$ = 24
_BandError$ = 28
_VoxPitchRefine_TIME@24 PROC NEAR			; COMDAT

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H

; 94   :   float *pSWR = (float *)SWR;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _SWR$[ebp]
  00009	89 45 dc	 mov	 DWORD PTR _pSWR$[ebp], eax

; 95   :   float *pSWI = (float *)SWI;

  0000c	8b 4d 10	 mov	 ecx, DWORD PTR _SWI$[ebp]
  0000f	89 4d e8	 mov	 DWORD PTR _pSWI$[ebp], ecx

; 96   :   int iSpecInd1, iSpecInd2;
; 97   :   float minErr, totalErr;
; 98   :   int i;
; 99   :   float fBasePitch;
; 100  :   float fTryPitch;
; 101  :   float fRefinePitch;
; 102  : 
; 103  : 
; 104  :   if (*pitch < (float)MIN_REFINE_PITCH) *pitch = (float)MIN_REFINE_PITCH;

  00012	8b 55 08	 mov	 edx, DWORD PTR _pitch$[ebp]
  00015	d9 02		 fld	 DWORD PTR [edx]
  00017	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41000000
  0001d	df e0		 fnstsw	 ax
  0001f	f6 c4 05	 test	 ah, 5
  00022	7a 09		 jp	 SHORT $L1037
  00024	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00027	c7 00 00 00 00
	41		 mov	 DWORD PTR [eax], 1090519040 ; 41000000H
$L1037:

; 105  : 
; 106  : 
; 107  :   /*************************************************************
; 108  :     Find the errors from 0.75 resolution 
; 109  :     The spectrum error ranged from 50Hz to 3700 Hz
; 110  :     ************************************************************/
; 111  :   fBasePitch = *pitch;

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _pitch$[ebp]
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	89 55 f8	 mov	 DWORD PTR _fBasePitch$[ebp], edx

; 112  :   iSpecInd1 = SPEC_START;  iSpecInd2 = SPEC_END;

  00035	c7 45 ec 03 00
	00 00		 mov	 DWORD PTR _iSpecInd1$[ebp], 3
  0003c	c7 45 d8 40 00
	00 00		 mov	 DWORD PTR _iSpecInd2$[ebp], 64 ; 00000040H

; 113  :   i = 0;

  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 114  :   minErr = MAXCON;    

  0004a	c7 45 e0 ff ff
	7f 7f		 mov	 DWORD PTR _minErr$[ebp], 2139095039 ; 7f7fffffH

; 115  :   fRefinePitch = fBasePitch;

  00051	8b 45 f8	 mov	 eax, DWORD PTR _fBasePitch$[ebp]
  00054	89 45 fc	 mov	 DWORD PTR _fRefinePitch$[ebp], eax
$L1040:

; 116  :   while (i < NREFINEP01) {

  00057	83 7d f4 05	 cmp	 DWORD PTR _i$[ebp], 5
  0005b	7d 6c		 jge	 SHORT $L1041

; 117  :     fTryPitch = *pitch + CRefinePitchTab1[i];

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _pitch$[ebp]
  00060	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00063	d9 01		 fld	 DWORD PTR [ecx]
  00065	d8 04 95 00 00
	00 00		 fadd	 DWORD PTR _CRefinePitchTab1[edx*4]
  0006c	d9 55 e4	 fst	 DWORD PTR _fTryPitch$[ebp]

; 118  : 
; 119  :     if (fTryPitch >= MIN_REFINE_PITCH)

  0006f	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41000000
  00075	df e0		 fnstsw	 ax
  00077	f6 c4 01	 test	 ah, 1
  0007a	75 22		 jne	 SHORT $L1042

; 120  :       totalErr = CalcCmpxSpecErr(fTryPitch, pSWR, pSWI, uiWinLen, iSpecInd1, iSpecInd2);

  0007c	8b 45 d8	 mov	 eax, DWORD PTR _iSpecInd2$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d ec	 mov	 ecx, DWORD PTR _iSpecInd1$[ebp]
  00083	51		 push	 ecx
  00084	8b 55 18	 mov	 edx, DWORD PTR _uiWinLen$[ebp]
  00087	52		 push	 edx
  00088	8b 45 e8	 mov	 eax, DWORD PTR _pSWI$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d dc	 mov	 ecx, DWORD PTR _pSWR$[ebp]
  0008f	51		 push	 ecx
  00090	8b 55 e4	 mov	 edx, DWORD PTR _fTryPitch$[ebp]
  00093	52		 push	 edx
  00094	e8 00 00 00 00	 call	 _CalcCmpxSpecErr@24
  00099	d9 5d f0	 fstp	 DWORD PTR _totalErr$[ebp]

; 121  :     else

  0009c	eb 07		 jmp	 SHORT $L1043
$L1042:

; 122  :       totalErr = MAXCON;

  0009e	c7 45 f0 ff ff
	7f 7f		 mov	 DWORD PTR _totalErr$[ebp], 2139095039 ; 7f7fffffH
$L1043:

; 123  : 
; 124  :     if (minErr > totalErr) {

  000a5	d9 45 e0	 fld	 DWORD PTR _minErr$[ebp]
  000a8	d8 5d f0	 fcomp	 DWORD PTR _totalErr$[ebp]
  000ab	df e0		 fnstsw	 ax
  000ad	f6 c4 41	 test	 ah, 65			; 00000041H
  000b0	75 0c		 jne	 SHORT $L1044

; 125  :       minErr = totalErr;

  000b2	8b 45 f0	 mov	 eax, DWORD PTR _totalErr$[ebp]
  000b5	89 45 e0	 mov	 DWORD PTR _minErr$[ebp], eax

; 126  :       fRefinePitch = fTryPitch;

  000b8	8b 4d e4	 mov	 ecx, DWORD PTR _fTryPitch$[ebp]
  000bb	89 4d fc	 mov	 DWORD PTR _fRefinePitch$[ebp], ecx
$L1044:

; 127  :     }
; 128  :     i++;

  000be	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  000c1	83 c2 01	 add	 edx, 1
  000c4	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx

; 129  :   } 

  000c7	eb 8e		 jmp	 SHORT $L1040
$L1041:

; 130  : 
; 131  : 
; 132  :   /*************************************************************
; 133  :     second run: test from  0.25 resultion 
; 134  :     ************************************************************/
; 135  :   i = 0;

  000c9	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 136  :   fBasePitch = fRefinePitch;

  000d0	8b 45 fc	 mov	 eax, DWORD PTR _fRefinePitch$[ebp]
  000d3	89 45 f8	 mov	 DWORD PTR _fBasePitch$[ebp], eax
$L1046:

; 137  :   while (i < NREFINEP02) {

  000d6	83 7d f4 04	 cmp	 DWORD PTR _i$[ebp], 4
  000da	7d 6a		 jge	 SHORT $L1047

; 138  :     fTryPitch = fBasePitch + CRefinePitchTab2[i];

  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  000df	d9 45 f8	 fld	 DWORD PTR _fBasePitch$[ebp]
  000e2	d8 04 8d 00 00
	00 00		 fadd	 DWORD PTR _CRefinePitchTab2[ecx*4]
  000e9	d9 55 e4	 fst	 DWORD PTR _fTryPitch$[ebp]

; 139  : 
; 140  :     if (fTryPitch >= MIN_REFINE_PITCH)

  000ec	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41000000
  000f2	df e0		 fnstsw	 ax
  000f4	f6 c4 01	 test	 ah, 1
  000f7	75 22		 jne	 SHORT $L1048

; 141  :       totalErr = CalcCmpxSpecErr(fTryPitch, pSWR, pSWI, uiWinLen, iSpecInd1, iSpecInd2);

  000f9	8b 55 d8	 mov	 edx, DWORD PTR _iSpecInd2$[ebp]
  000fc	52		 push	 edx
  000fd	8b 45 ec	 mov	 eax, DWORD PTR _iSpecInd1$[ebp]
  00100	50		 push	 eax
  00101	8b 4d 18	 mov	 ecx, DWORD PTR _uiWinLen$[ebp]
  00104	51		 push	 ecx
  00105	8b 55 e8	 mov	 edx, DWORD PTR _pSWI$[ebp]
  00108	52		 push	 edx
  00109	8b 45 dc	 mov	 eax, DWORD PTR _pSWR$[ebp]
  0010c	50		 push	 eax
  0010d	8b 4d e4	 mov	 ecx, DWORD PTR _fTryPitch$[ebp]
  00110	51		 push	 ecx
  00111	e8 00 00 00 00	 call	 _CalcCmpxSpecErr@24
  00116	d9 5d f0	 fstp	 DWORD PTR _totalErr$[ebp]

; 142  :     else

  00119	eb 07		 jmp	 SHORT $L1049
$L1048:

; 143  :       totalErr = MAXCON;

  0011b	c7 45 f0 ff ff
	7f 7f		 mov	 DWORD PTR _totalErr$[ebp], 2139095039 ; 7f7fffffH
$L1049:

; 144  : 
; 145  :     if (minErr > totalErr) {

  00122	d9 45 e0	 fld	 DWORD PTR _minErr$[ebp]
  00125	d8 5d f0	 fcomp	 DWORD PTR _totalErr$[ebp]
  00128	df e0		 fnstsw	 ax
  0012a	f6 c4 41	 test	 ah, 65			; 00000041H
  0012d	75 0c		 jne	 SHORT $L1050

; 146  :       minErr = totalErr;

  0012f	8b 55 f0	 mov	 edx, DWORD PTR _totalErr$[ebp]
  00132	89 55 e0	 mov	 DWORD PTR _minErr$[ebp], edx

; 147  :       fRefinePitch = fTryPitch;

  00135	8b 45 e4	 mov	 eax, DWORD PTR _fTryPitch$[ebp]
  00138	89 45 fc	 mov	 DWORD PTR _fRefinePitch$[ebp], eax
$L1050:

; 148  :     }
; 149  :     i++;

  0013b	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0013e	83 c1 01	 add	 ecx, 1
  00141	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx

; 150  :   } 

  00144	eb 90		 jmp	 SHORT $L1046
$L1047:

; 151  : 
; 152  : 
; 153  :   /**** make sure the number of harmonics won't go beyond 90 ****/
; 154  :   /**** the maximum pitch after the refinement is 180+1.5+0.5 ****/
; 155  :   /**** and the corresponding number of harmonics should be 
; 156  :         (floor)(182.0*255.0/512.0) ****/
; 157  :   if(fRefinePitch > (float)(MAX_PITCH+2))

  00146	d9 45 fc	 fld	 DWORD PTR _fRefinePitch$[ebp]
  00149	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@43360000
  0014f	df e0		 fnstsw	 ax
  00151	f6 c4 41	 test	 ah, 65			; 00000041H
  00154	75 07		 jne	 SHORT $L1052

; 158  :      fRefinePitch = (float)(MAX_PITCH+2);

  00156	c7 45 fc 00 00
	36 43		 mov	 DWORD PTR _fRefinePitch$[ebp], 1127612416 ; 43360000H
$L1052:

; 159  : 
; 160  :   /*************************************************************
; 161  :     calculate the harmonics error and energy 
; 162  :     ************************************************************/
; 163  :   CalcBandErr(fRefinePitch, pSWR, pSWI, pPower, uiWinLen, BandError);

  0015d	8b 55 1c	 mov	 edx, DWORD PTR _BandError$[ebp]
  00160	52		 push	 edx
  00161	8b 45 18	 mov	 eax, DWORD PTR _uiWinLen$[ebp]
  00164	50		 push	 eax
  00165	8b 4d 14	 mov	 ecx, DWORD PTR _pPower$[ebp]
  00168	51		 push	 ecx
  00169	8b 55 e8	 mov	 edx, DWORD PTR _pSWI$[ebp]
  0016c	52		 push	 edx
  0016d	8b 45 dc	 mov	 eax, DWORD PTR _pSWR$[ebp]
  00170	50		 push	 eax
  00171	8b 4d fc	 mov	 ecx, DWORD PTR _fRefinePitch$[ebp]
  00174	51		 push	 ecx
  00175	e8 00 00 00 00	 call	 _CalcBandErr@24

; 164  : 
; 165  : 
; 166  :   *pitch = fRefinePitch;

  0017a	8b 55 08	 mov	 edx, DWORD PTR _pitch$[ebp]
  0017d	8b 45 fc	 mov	 eax, DWORD PTR _fRefinePitch$[ebp]
  00180	89 02		 mov	 DWORD PTR [edx], eax

; 167  : 
; 168  :   return 0;

  00182	66 33 c0	 xor	 ax, ax

; 169  :   
; 170  : }

  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c2 18 00	 ret	 24			; 00000018H
_VoxPitchRefine_TIME@24 ENDP
_TEXT	ENDS
END
