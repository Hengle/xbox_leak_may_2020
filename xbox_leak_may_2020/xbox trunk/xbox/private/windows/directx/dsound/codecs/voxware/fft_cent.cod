; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\fft_cent.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@DFKJGPHA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@JCBEELLN@pfSig?5?$CB?$DN?5NULL?5?$CG?$CG?5pfSW?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FF@FLOKLHEM@?$CI?$CIpfSig?5?$DN?$DN?5pfSW?$CJ?$CG?$CG?$CIiNfft?$DO?$DN?$CIiLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxFftCenter@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxFftCenter@16
PUBLIC	??_C@_0EB@DFKJGPHA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BO@JCBEELLN@pfSig?5?$CB?$DN?5NULL?5?$CG?$CG?5pfSW?5?$CB?$DN?5NULL?$AA@ ; `string'
PUBLIC	??_C@_0FF@FLOKLHEM@?$CI?$CIpfSig?5?$DN?$DN?5pfSW?$CJ?$CG?$CG?$CIiNfft?$DO?$DN?$CIiLeng@ ; `string'
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
EXTRN	__assert:NEAR
EXTRN	_vox_nspsRealFft@12:NEAR
;	COMDAT ??_C@_0EB@DFKJGPHA@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\fft_cent.c
CONST	SEGMENT
??_C@_0EB@DFKJGPHA@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\fft_cent.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JCBEELLN@pfSig?5?$CB?$DN?5NULL?5?$CG?$CG?5pfSW?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BO@JCBEELLN@pfSig?5?$CB?$DN?5NULL?5?$CG?$CG?5pfSW?5?$CB?$DN?5NULL?$AA@ DB 'p'
	DB	'fSig != NULL && pfSW != NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@FLOKLHEM@?$CI?$CIpfSig?5?$DN?$DN?5pfSW?$CJ?$CG?$CG?$CIiNfft?$DO?$DN?$CIiLeng@
CONST	SEGMENT
??_C@_0FF@FLOKLHEM@?$CI?$CIpfSig?5?$DN?$DN?5pfSW?$CJ?$CG?$CG?$CIiNfft?$DO?$DN?$CIiLeng@ DB '('
	DB	'(pfSig == pfSW)&&(iNfft>=(iLength+iHalfLen))) ||((pfSig != pf'
	DB	'SW)&&(iNfft>=iLength))', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxFftCenter@16
_TEXT	SEGMENT
_iNfft$ = -8
_iHalfLen$ = -4
_pfSig$ = 8
_iLength$ = 12
_pfSW$ = 16
_iFFTorder$ = 20
_VoxFftCenter@16 PROC NEAR				; COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 82   :   int iNfft = 1 << iFFTorder; 

  00006	b8 01 00 00 00	 mov	 eax, 1
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _iFFTorder$[ebp]
  0000e	d3 e0		 shl	 eax, cl
  00010	89 45 f8	 mov	 DWORD PTR _iNfft$[ebp], eax

; 83   :   int iHalfLen = iLength >> 1;

  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _iLength$[ebp]
  00016	d1 f9		 sar	 ecx, 1
  00018	89 4d fc	 mov	 DWORD PTR _iHalfLen$[ebp], ecx

; 84   : 
; 85   :   /*** do error checking ***/ 
; 86   :   assert(pfSig != NULL && pfSW != NULL);

  0001b	83 7d 08 00	 cmp	 DWORD PTR _pfSig$[ebp], 0
  0001f	74 06		 je	 SHORT $L899
  00021	83 7d 10 00	 cmp	 DWORD PTR _pfSW$[ebp], 0
  00025	75 14		 jne	 SHORT $L900
$L899:
  00027	6a 56		 push	 86			; 00000056H
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@DFKJGPHA@c?3?2xbox?2private?2windows?2directx?2@
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@JCBEELLN@pfSig?5?$CB?$DN?5NULL?5?$CG?$CG?5pfSW?5?$CB?$DN?5NULL?$AA@
  00033	e8 00 00 00 00	 call	 __assert
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
$L900:

; 87   :   assert(((pfSig == pfSW)&&(iNfft>=(iLength+iHalfLen))) 
; 88   :          ||((pfSig != pfSW)&&(iNfft>=iLength)));

  0003b	8b 45 08	 mov	 eax, DWORD PTR _pfSig$[ebp]
  0003e	3b 45 10	 cmp	 eax, DWORD PTR _pfSW$[ebp]
  00041	75 0b		 jne	 SHORT $L901
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _iLength$[ebp]
  00046	03 4d fc	 add	 ecx, DWORD PTR _iHalfLen$[ebp]
  00049	39 4d f8	 cmp	 DWORD PTR _iNfft$[ebp], ecx
  0004c	7d 24		 jge	 SHORT $L903
$L901:
  0004e	8b 55 08	 mov	 edx, DWORD PTR _pfSig$[ebp]
  00051	3b 55 10	 cmp	 edx, DWORD PTR _pfSW$[ebp]
  00054	74 08		 je	 SHORT $L902
  00056	8b 45 f8	 mov	 eax, DWORD PTR _iNfft$[ebp]
  00059	3b 45 0c	 cmp	 eax, DWORD PTR _iLength$[ebp]
  0005c	7d 14		 jge	 SHORT $L903
$L902:
  0005e	6a 58		 push	 88			; 00000058H
  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@DFKJGPHA@c?3?2xbox?2private?2windows?2directx?2@
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@FLOKLHEM@?$CI?$CIpfSig?5?$DN?$DN?5pfSW?$CJ?$CG?$CG?$CIiNfft?$DO?$DN?$CIiLeng@
  0006a	e8 00 00 00 00	 call	 __assert
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
$L903:

; 89   : 
; 90   :   /*** Put the beginning part of pfSig to the end of pfSWR ******/
; 91   :   memcpy(&(pfSW[iNfft-iHalfLen]), &(pfSig[0]), iHalfLen*sizeof(float));

  00072	8b 55 fc	 mov	 edx, DWORD PTR _iHalfLen$[ebp]
  00075	c1 e2 02	 shl	 edx, 2
  00078	52		 push	 edx
  00079	8b 45 08	 mov	 eax, DWORD PTR _pfSig$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d f8	 mov	 ecx, DWORD PTR _iNfft$[ebp]
  00080	2b 4d fc	 sub	 ecx, DWORD PTR _iHalfLen$[ebp]
  00083	8b 55 10	 mov	 edx, DWORD PTR _pfSW$[ebp]
  00086	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _memcpy
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 92   : 
; 93   :   /*** Put the end part of pfSig to the beginning of pfSWR ***/
; 94   :   memcpy(&(pfSW[0]), &(pfSig[iHalfLen]), (iLength-iHalfLen)*sizeof(float));

  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _iLength$[ebp]
  00095	2b 4d fc	 sub	 ecx, DWORD PTR _iHalfLen$[ebp]
  00098	c1 e1 02	 shl	 ecx, 2
  0009b	51		 push	 ecx
  0009c	8b 55 fc	 mov	 edx, DWORD PTR _iHalfLen$[ebp]
  0009f	8b 45 08	 mov	 eax, DWORD PTR _pfSig$[ebp]
  000a2	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  000a5	51		 push	 ecx
  000a6	8b 55 10	 mov	 edx, DWORD PTR _pfSW$[ebp]
  000a9	52		 push	 edx
  000aa	e8 00 00 00 00	 call	 _memcpy
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 95   :      
; 96   :   /*** Zero the center of pfSig ***/
; 97   :   memset(&(pfSW[iLength-iHalfLen]), 0, (iNfft-iLength)*sizeof(float));

  000b2	8b 45 f8	 mov	 eax, DWORD PTR _iNfft$[ebp]
  000b5	2b 45 0c	 sub	 eax, DWORD PTR _iLength$[ebp]
  000b8	c1 e0 02	 shl	 eax, 2
  000bb	50		 push	 eax
  000bc	6a 00		 push	 0
  000be	8b 4d 0c	 mov	 ecx, DWORD PTR _iLength$[ebp]
  000c1	2b 4d fc	 sub	 ecx, DWORD PTR _iHalfLen$[ebp]
  000c4	8b 55 10	 mov	 edx, DWORD PTR _pfSW$[ebp]
  000c7	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _memset
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 98   : 
; 99   :   /*** FFT computation ***/
; 100  :   VoxRealFft(pfSW, iFFTorder);

  000d3	6a 01		 push	 1
  000d5	8b 4d 14	 mov	 ecx, DWORD PTR _iFFTorder$[ebp]
  000d8	51		 push	 ecx
  000d9	8b 55 10	 mov	 edx, DWORD PTR _pfSW$[ebp]
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 _vox_nspsRealFft@12

; 101  : } /* VoxFftCenter() */

  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 10 00	 ret	 16			; 00000010H
_VoxFftCenter@16 ENDP
_TEXT	ENDS
END
