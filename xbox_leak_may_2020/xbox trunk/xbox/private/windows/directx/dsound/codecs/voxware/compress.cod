; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\compress.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _ScaleAndCompress@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_ScaleAndCompress@16
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
EXTRN	_fQuadRoot@4:NEAR
EXTRN	_ScaleVector@16:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@00000000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\compress.c
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _ScaleAndCompress@16
_TEXT	SEGMENT
_fScale$ = -8
_i$ = -4
_pfIn$ = 8
_iLength$ = 12
_fMaxVal$ = 16
_pfOut$ = 20
_ScaleAndCompress@16 PROC NEAR				; COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 69   :    int   i;
; 70   :    float fScale;
; 71   :    
; 72   :    /*------------------------------------------------------
; 73   :      Compute the scale factor: 1/fMaxVal
; 74   :    ------------------------------------------------------*/
; 75   :    if (fMaxVal == 0.0F)

  00006	d9 45 10	 fld	 DWORD PTR _fMaxVal$[ebp]
  00009	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0000f	df e0		 fnstsw	 ax
  00011	f6 c4 44	 test	 ah, 68			; 00000044H
  00014	7a 09		 jp	 SHORT $L679

; 76   :      fScale = 1.0F;

  00016	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _fScale$[ebp], 1065353216 ; 3f800000H

; 77   :    else

  0001d	eb 0c		 jmp	 SHORT $L680
$L679:

; 78   :      fScale = 1.0F/fMaxVal;

  0001f	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  00025	d8 75 10	 fdiv	 DWORD PTR _fMaxVal$[ebp]
  00028	d9 5d f8	 fstp	 DWORD PTR _fScale$[ebp]
$L680:

; 79   : 
; 80   :    /*------------------------------------------------------
; 81   :      Scale 
; 82   :    ------------------------------------------------------*/
; 83   :    ScaleVector( (float*) pfIn, iLength, fScale, pfOut );

  0002b	8b 45 14	 mov	 eax, DWORD PTR _pfOut$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _fScale$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 0c	 mov	 edx, DWORD PTR _iLength$[ebp]
  00036	52		 push	 edx
  00037	8b 45 08	 mov	 eax, DWORD PTR _pfIn$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _ScaleVector@16

; 84   : 
; 85   :    /*------------------------------------------------------
; 86   :      Compress with an approximation to the fourth root
; 87   :    ------------------------------------------------------*/
; 88   :    for (i = 0; i < iLength; i++)

  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00047	eb 09		 jmp	 SHORT $L682
$L683:
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0004c	83 c1 01	 add	 ecx, 1
  0004f	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L682:
  00052	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00055	3b 55 0c	 cmp	 edx, DWORD PTR _iLength$[ebp]
  00058	7d 1a		 jge	 SHORT $L676

; 89   :       pfOut[i] = fQuadRoot( pfOut[i] ); 

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0005d	8b 4d 14	 mov	 ecx, DWORD PTR _pfOut$[ebp]
  00060	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 _fQuadRoot@4
  00069	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0006c	8b 4d 14	 mov	 ecx, DWORD PTR _pfOut$[ebp]
  0006f	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]
  00072	eb d5		 jmp	 SHORT $L683
$L676:

; 90   :  
; 91   : } /* ScaleAndCompress() */

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 10 00	 ret	 16			; 00000010H
_ScaleAndCompress@16 ENDP
_TEXT	ENDS
END
