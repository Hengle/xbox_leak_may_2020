; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\codepv.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DP@PACPLNOJ@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@IANCPEOO@Pv_Mid?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@FAPICKDC@Pv?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _QuanPvSC3@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _UnQuanPvSC3@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_PvCodeBook DD	000000000r			; 0
	DD	03e126e98r			; 0.143
	DD	03e926e98r			; 0.286
	DD	03edba5e3r			; 0.429
	DD	03f122d0er			; 0.571
	DD	03f36c8b4r			; 0.714
	DD	03f5b645ar			; 0.857
	DD	03f800000r			; 1
CONST	ENDS
PUBLIC	_QuanPvSC3@12
EXTRN	_ScalarQuant@12:NEAR
EXTRN	__fltused:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\codepv.c
;	COMDAT _QuanPvSC3@12
_TEXT	SEGMENT
_t1$ = -16
_t2$ = -12
_index$ = -8
_index_ff$ = -4
_Pv_1$ = 8
_Pv_Mid$ = 12
_Pv$ = 16
_QuanPvSC3@12 PROC NEAR					; COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 82   :   int index, index_ff = 0;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _index_ff$[ebp], 0

; 83   :   float t1, t2;
; 84   : 
; 85   :   /* scalar-quantize the end frame Pv */
; 86   :   index = ScalarQuant(Pv, PvCodeBook, LENGTH_PV_CB );

  0000d	6a 08		 push	 8
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:_PvCodeBook
  00014	8b 45 10	 mov	 eax, DWORD PTR _Pv$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 _ScalarQuant@12
  0001d	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax

; 87   :   
; 88   :   /* then do one bit frame-fill of the middle-frame Pv */
; 89   :   t1 = Pv_1-Pv_Mid;

  00020	d9 45 08	 fld	 DWORD PTR _Pv_1$[ebp]
  00023	d8 65 0c	 fsub	 DWORD PTR _Pv_Mid$[ebp]
  00026	d9 55 f0	 fst	 DWORD PTR _t1$[ebp]

; 90   :   t1 = t1*t1;

  00029	d8 4d f0	 fmul	 DWORD PTR _t1$[ebp]
  0002c	d9 5d f0	 fstp	 DWORD PTR _t1$[ebp]

; 91   : 
; 92   :   t2 = PvCodeBook[index]-Pv_Mid;

  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _index$[ebp]
  00032	d9 04 8d 00 00
	00 00		 fld	 DWORD PTR _PvCodeBook[ecx*4]
  00039	d8 65 0c	 fsub	 DWORD PTR _Pv_Mid$[ebp]
  0003c	d9 55 f4	 fst	 DWORD PTR _t2$[ebp]

; 93   :   t2 = t2*t2;

  0003f	d8 4d f4	 fmul	 DWORD PTR _t2$[ebp]
  00042	d9 55 f4	 fst	 DWORD PTR _t2$[ebp]

; 94   : 
; 95   :   if (t2 < t1)

  00045	d8 5d f0	 fcomp	 DWORD PTR _t1$[ebp]
  00048	df e0		 fnstsw	 ax
  0004a	f6 c4 05	 test	 ah, 5
  0004d	7a 07		 jp	 SHORT $L915

; 96   :     index_ff = 1;

  0004f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _index_ff$[ebp], 1
$L915:

; 97   : 
; 98   :   /* pack the index */
; 99   :   index += (index_ff<<(BITS_PV_SC3-1));

  00056	8b 55 fc	 mov	 edx, DWORD PTR _index_ff$[ebp]
  00059	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0005c	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  0005f	89 4d f8	 mov	 DWORD PTR _index$[ebp], ecx

; 100  : 
; 101  :   return index;

  00062	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]

; 102  : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 0c 00	 ret	 12			; 0000000cH
_QuanPvSC3@12 ENDP
_TEXT	ENDS
PUBLIC	_UnQuanPvSC3@16
PUBLIC	??_C@_0DP@PACPLNOJ@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0P@IANCPEOO@Pv_Mid?5?$CB?$DN?5NULL?$AA@	; `string'
PUBLIC	??_C@_0L@FAPICKDC@Pv?5?$CB?$DN?5NULL?$AA@	; `string'
EXTRN	__assert:NEAR
EXTRN	_ScalarLUT@12:NEAR
;	COMDAT ??_C@_0DP@PACPLNOJ@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DP@PACPLNOJ@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\codepv.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IANCPEOO@Pv_Mid?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0P@IANCPEOO@Pv_Mid?5?$CB?$DN?5NULL?$AA@ DB 'Pv_Mid != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FAPICKDC@Pv?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0L@FAPICKDC@Pv?5?$CB?$DN?5NULL?$AA@ DB 'Pv != NULL', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _UnQuanPvSC3@16
_TEXT	SEGMENT
_index2$ = -8
_index1$ = -4
_index$ = 8
_Pv_1$ = 12
_Pv_Mid$ = 16
_Pv$ = 20
_UnQuanPvSC3@16 PROC NEAR				; COMDAT

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 139  :   int index1, index2;
; 140  : 
; 141  :   assert(Pv_Mid != NULL);

  00006	83 7d 10 00	 cmp	 DWORD PTR _Pv_Mid$[ebp], 0
  0000a	75 17		 jne	 SHORT $L953
  0000c	68 8d 00 00 00	 push	 141			; 0000008dH
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PACPLNOJ@c?3?2xbox?2private?2windows?2directx?2@
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@IANCPEOO@Pv_Mid?5?$CB?$DN?5NULL?$AA@
  0001b	e8 00 00 00 00	 call	 __assert
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
$L953:

; 142  :   assert(Pv != NULL);

  00023	83 7d 14 00	 cmp	 DWORD PTR _Pv$[ebp], 0
  00027	75 17		 jne	 SHORT $L954
  00029	68 8e 00 00 00	 push	 142			; 0000008eH
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PACPLNOJ@c?3?2xbox?2private?2windows?2directx?2@
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@FAPICKDC@Pv?5?$CB?$DN?5NULL?$AA@
  00038	e8 00 00 00 00	 call	 __assert
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L954:

; 143  : 
; 144  :   /* unpack the bits */
; 145  :   index2 = index & (LENGTH_PV_CB);

  00040	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  00043	83 e2 08	 and	 edx, 8
  00046	89 55 f8	 mov	 DWORD PTR _index2$[ebp], edx

; 146  :   index1 = index - index2;

  00049	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0004c	2b 45 f8	 sub	 eax, DWORD PTR _index2$[ebp]
  0004f	89 45 fc	 mov	 DWORD PTR _index1$[ebp], eax

; 147  :   
; 148  :   /* unquan the 3-bit scalar quantizer */
; 149  :   *Pv = ScalarLUT( PvCodeBook, LENGTH_PV_CB, index1);

  00052	8b 4d fc	 mov	 ecx, DWORD PTR _index1$[ebp]
  00055	51		 push	 ecx
  00056	6a 08		 push	 8
  00058	68 00 00 00 00	 push	 OFFSET FLAT:_PvCodeBook
  0005d	e8 00 00 00 00	 call	 _ScalarLUT@12
  00062	8b 55 14	 mov	 edx, DWORD PTR _Pv$[ebp]
  00065	d9 1a		 fstp	 DWORD PTR [edx]

; 150  :   
; 151  :   /* unquan the 1-bit frame-fill */
; 152  :   if (index2 == 0)

  00067	83 7d f8 00	 cmp	 DWORD PTR _index2$[ebp], 0
  0006b	75 0a		 jne	 SHORT $L936

; 153  :     *Pv_Mid = Pv_1;

  0006d	8b 45 10	 mov	 eax, DWORD PTR _Pv_Mid$[ebp]
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _Pv_1$[ebp]
  00073	89 08		 mov	 DWORD PTR [eax], ecx

; 154  :   else

  00075	eb 0a		 jmp	 SHORT $L924
$L936:

; 155  :     *Pv_Mid = *Pv;

  00077	8b 55 10	 mov	 edx, DWORD PTR _Pv_Mid$[ebp]
  0007a	8b 45 14	 mov	 eax, DWORD PTR _Pv$[ebp]
  0007d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007f	89 0a		 mov	 DWORD PTR [edx], ecx
$L924:

; 156  : }

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 10 00	 ret	 16			; 00000010H
_UnQuanPvSC3@16 ENDP
_TEXT	ENDS
END
