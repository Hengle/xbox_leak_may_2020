; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\synspec.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@JALNLPAM@iStartDFT?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@IKACFBKH@iEndDFT?5?$DM?5NFFT_2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@NCEBOCK@iStartDFT?5?$DM?5iEndDFT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@JNFGADBO@iHarmF0?5?$DM?5NFFT_2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CK@PJAHPKKI@WinIndex?5?$DM?5iSpecTableLen?5?$CG?$CG?5WinI@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _CalcCmpxSpecErr@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CalcBandErr@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxSynSpecSeeVoc@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
PUBLIC	_pWinR221
PUBLIC	_iSpecTableLen
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_pWinR221 DD	03f800000r			; 1
	DD	03f7ff7e5r			; 0.999876
	DD	03f7fdf96r			; 0.999505
	DD	03f7fb716r			; 0.998887
	DD	03f7f7e6br			; 0.998023
	DD	03f7f35a0r			; 0.996912
	DD	03f7edcbfr			; 0.995556
	DD	03f7e73d6r			; 0.993955
	DD	03f7dfaf7r			; 0.992111
	DD	03f7d7235r			; 0.990024
	DD	03f7cd9a5r			; 0.987696
	DD	03f7c315fr			; 0.985128
	DD	03f7b797fr			; 0.982323
	DD	03f7ab222r			; 0.979281
	DD	03f79db67r			; 0.976004
	DD	03f78f570r			; 0.972495
	DD	03f780062r			; 0.968756
	DD	03f76fc63r			; 0.964789
	DD	03f75e99dr			; 0.960596
	DD	03f74c83ar			; 0.95618
	DD	03f739868r			; 0.951544
	DD	03f725a58r			; 0.946691
	DD	03f710e3ar			; 0.941623
	DD	03f6fb442r			; 0.936344
	DD	03f6e4ca8r			; 0.930857
	DD	03f6cd7a2r			; 0.925165
	DD	03f6b556cr			; 0.919272
	DD	03f69c63fr			; 0.913181
	DD	03f682a5cr			; 0.906896
	DD	03f668200r			; 0.900421
	DD	03f64cd6er			; 0.89376
	DD	03f630ce8r			; 0.886916
	DD	03f6140b3r			; 0.879893
	DD	03f5f6915r			; 0.872697
	DD	03f5d8656r			; 0.865331
	DD	03f5b98bfr			; 0.857799
	DD	03f59a09br			; 0.850107
	DD	03f579e36r			; 0.842258
	DD	03f5591ddr			; 0.834257
	DD	03f537bder			; 0.826109
	DD	03f515c89r			; 0.817818
	DD	03f4f342fr			; 0.80939
	DD	03f4d0320r			; 0.800829
	DD	03f4ac9b0r			; 0.79214
	DD	03f488833r			; 0.783328
	DD	03f463efbr			; 0.774399
	DD	03f43ee5er			; 0.765356
	DD	03f4196b3r			; 0.756206
	DD	03f3f384er			; 0.746953
	DD	03f3cd386r			; 0.737603
	DD	03f3a68b4r			; 0.72816
	DD	03f37f82dr			; 0.718631
	DD	03f35824ar			; 0.709019
	DD	03f330764r			; 0.699332
	DD	03f3087d1r			; 0.689572
	DD	03f2e03ebr			; 0.679747
	DD	03f2b7c0ar			; 0.669861
	DD	03f28f086r			; 0.65992
	DD	03f2661b6r			; 0.649928
	DD	03f23cff4r			; 0.639892
	DD	03f213b97r			; 0.629816
	DD	03f1ea4f6r			; 0.619705
	DD	03f1c0c68r			; 0.609564
	DD	03f197243r			; 0.5994
	DD	03f16d6dfr			; 0.589216
	DD	03f143a8fr			; 0.579019
	DD	03f119da9r			; 0.568812
	DD	03f0f0081r			; 0.558601
	DD	03f0c636ar			; 0.548392
	DD	03f09c6b7r			; 0.538188
	DD	03f072abar			; 0.527996
	DD	03f048fc2r			; 0.517819
	DD	03f01f620r			; 0.507662
	DD	03efebc42r			; 0.49753
	DD	03ef99029r			; 0.487428
	DD	03ef4688br			; 0.47736
	DD	03eef45ffr			; 0.467331
	DD	03eea2918r			; 0.457345
	DD	03ee51268r			; 0.447406
	DD	03ee0027cr			; 0.437519
	DD	03edaf9e0r			; 0.427688
	DD	03ed5f91dr			; 0.417916
	DD	03ed100b8r			; 0.408209
	DD	03ecc1133r			; 0.398569
	DD	03ec72b0fr			; 0.389
	DD	03ec24ec7r			; 0.379507
	DD	03ebd7cd3r			; 0.370093
	DD	03eb8b5abr			; 0.360761
	DD	03eb3f9bfr			; 0.351515
	DD	03eaf497er			; 0.342358
	DD	03eaaa555r			; 0.333293
	DD	03ea60da9r			; 0.324323
	DD	03ea182e0r			; 0.315452
	DD	03e9d055ar			; 0.306681
	DD	03e989572r			; 0.298015
	DD	03e943384r			; 0.289456
	DD	03e8fdfe2r			; 0.281005
	DD	03e8b9adfr			; 0.272666
	DD	03e8764c8r			; 0.264441
	DD	03e833de8r			; 0.256332
	DD	03e7e4d07r			; 0.248341
	DD	03e763dbbr			; 0.24047
	DD	03e6e4e67r			; 0.232721
	DD	03e667f81r			; 0.225096
	DD	03e5ed175r			; 0.217596
	DD	03e5744a8r			; 0.210223
	DD	03e4fd979r			; 0.202978
	DD	03e48903dr			; 0.195863
	DD	03e416941r			; 0.188878
	DD	03e3a64cdr			; 0.182025
	DD	03e338320r			; 0.175305
	DD	03e2cc471r			; 0.168718
	DD	03e2628efr			; 0.162266
	DD	03e1fb0c4r			; 0.155948
	DD	03e195c11r			; 0.149765
	DD	03e132aefr			; 0.143718
	DD	03e0d1d72r			; 0.137808
	DD	03e0733a5r			; 0.132033
	DD	03e016d8cr			; 0.126394
	DD	03df7964br			; 0.120892
	DD	03dec98d0r			; 0.115526
	DD	03de1e289r			; 0.110295
	DD	03dd77347r			; 0.1052
	DD	03dcd4ad3r			; 0.10024
	DD	03dc368e4r			; 0.0954149
	DD	03db9cd29r			; 0.0907233
	DD	03db07743r			; 0.086165
	DD	03da766c8r			; 0.081739
	DD	03d9e9b41r			; 0.0774446
	DD	03d96142dr			; 0.0732807
	DD	03d8dd0ffr			; 0.0692463
	DD	03d85d120r			; 0.0653403
	DD	03d7c27e0r			; 0.0615615
	DD	03d6d3184r			; 0.0579085
	DD	03d5ebdc4r			; 0.0543802
	DD	03d50cb23r			; 0.050975
	DD	03d435812r			; 0.0476914
	DD	03d3662f0r			; 0.0445279
	DD	03d29ea0er			; 0.041483
	DD	03d1debaar			; 0.0385548
	DD	03d1265f4r			; 0.0357418
	DD	03d07570fr			; 0.033042
	DD	03cf97a1cr			; 0.0304537
	DD	03ce52bf0r			; 0.0279751
	DD	03cd1bf8er			; 0.025604
	DD	03cbf30d5r			; 0.0233387
	DD	03cad7b8br			; 0.0211771
	DD	03c9c9b65r			; 0.0191171
	DD	03c8c8c04r			; 0.0171566
	DD	03c7a91ecr			; 0.0152936
	DD	03c5d9b77r			; 0.0135258
	DD	03c422b8ar			; 0.0118512
	DD	03c2838edr			; 0.0102675
	DD	03c0fba4fr			; 0.00877245
	DD	03bf14c9br			; 0.00736387
	DD	03bc5e6e4r			; 0.00603949
	DD	03b9d3070r			; 0.00479703
	DD	03b6e2c3cr			; 0.00363423
	DD	03b270973r			; 0.00254878
	DD	03ac9a40ar			; 0.0015384
	DD	03a1d7d76r			; 0.000600777
	DD	0398ba8d9r			; 0.000266379
	DD	03a8ba3f1r			; 0.00106537
	DD	03aebbb7er			; 0.0017985
	DD	03b21bedbr			; 0.00246804
	DD	03b499b95r			; 0.00307629
	DD	03b6d9a0cr			; 0.00362551
	DD	03b86f014r			; 0.00411798
	DD	03b9549c9r			; 0.00455592
	DD	03ba1ecd7r			; 0.00494156
	DD	03bacebc7r			; 0.00527713
	DD	03bb658f8r			; 0.00556481
	DD	03bbe4696r			; 0.00580675
	DD	03bc4c69cr			; 0.00600512
	DD	03bc9eacbr			; 0.00616202
	DD	03bcdc4a9r			; 0.00627955
	DD	03bd0657fr			; 0.00635976
	DD	03bd1de50r			; 0.00640468
	DD	03bd23fddr			; 0.0064163
	DD	03bd19a9cr			; 0.0063966
	DD	03bcffeb9r			; 0.0063475
	DD	03bcd7c11r			; 0.00627089
	DD	03bca222fr			; 0.00616863
	DD	03bc6004cr			; 0.00604252
	DD	03bc1254ar			; 0.00589434
	DD	03bbb9fb3r			; 0.00572582
	DD	03bb57db7r			; 0.00553867
	DD	03baecd2br			; 0.00533452
	DD	03ba79b83r			; 0.00511497
	DD	03b9ff5d8r			; 0.0048816
	DD	03b97e8der			; 0.00463591
	DD	03b8f80e8r			; 0.00437938
	DD	03b86c9e7r			; 0.00411342
	DD	03b7b9eccr			; 0.00383942
	DD	03b693918r			; 0.0035587
	DD	03b567831r			; 0.00327254
	DD	03b4370cbr			; 0.00298219
	DD	03b3036cbr			; 0.00268881
	DD	03b1cdd48r			; 0.00239356
	DD	03b097689r			; 0.00209752
	DD	03aec280dr			; 0.00180173
	DD	03ac58cd5r			; 0.00150719
	DD	03a9f3b23r			; 0.00121484
	DD	03a72a21er			; 0.000925572
	DD	03a27d63dr			; 0.000640247
	DD	039bc90eer			; 0.000359661
	DD	038b15bf2r			; 8.45714e-005
	DD	03941447ar			; 0.000184314
	DD	039ea01d1r			; 0.000446333
	DD	03a37ba79r			; 0.000700868
	DD	03a785770r			; 0.000947348
	DD	03a9b5a36r			; 0.00118524
	DD	03ab9587cr			; 0.00141408
	DD	03ad617c4r			; 0.0016334
	DD	03af18ab4r			; 0.00184282
	DD	03b05d2acr			; 0.00204198
	DD	03b122e8cr			; 0.00223056
	DD	03b1dd45br			; 0.00240829
	DD	03b28c022r			; 0.00257493
	DD	03b32ee8cr			; 0.00273028
	DD	03b3c5ce6r			; 0.00287419
	DD	03b450916r			; 0.00300652
	DD	03b4cf19cr			; 0.00312719
	DD	03b541587r			; 0.00323615
	DD	03b5a7476r			; 0.00333336
	DD	03b600e91r			; 0.00341884
	DD	03b64e486r			; 0.00349262
	DD	03b68f77fr			; 0.00355479
	DD	03b6c4924r			; 0.00360543
	DD	03b6edb92r			; 0.00364468
	DD	03b70b156r			; 0.00367268
	DD	03b71cd69r			; 0.00368961
	DD	03b723329r			; 0.00369568
	DD	03b71e658r			; 0.0036911
	DD	03b70eb13r			; 0.00367612
	DD	03b6f45cdr			; 0.00365101
	DD	03b6cfb4br			; 0.00361605
	DD	03b6a10a0r			; 0.00357155
	DD	03b668b24r			; 0.00351781
	DD	03b627074r			; 0.00345519
	DD	03b5dc667r			; 0.00338402
	DD	03b58930dr			; 0.00330466
	DD	03b52dcabr			; 0.0032175
	DD	03b4ca9b0r			; 0.00312291
	DD	03b4600b6r			; 0.00302128
	DD	03b3ee87cr			; 0.00291303
	DD	03b3767dcr			; 0.00279855
	DD	03b2f85cfr			; 0.00267826
	DD	03b274961r			; 0.00255259
	DD	03b1eb9aer			; 0.00242196
	DD	03b15dde1r			; 0.00228678
	DD	03b0cbd2ar			; 0.00214751
	DD	03b035ec0r			; 0.00200455
	DD	03af393abr			; 0.00185834
	DD	03ae00b36r			; 0.00170932
	DD	03acc3270r			; 0.0015579
	DD	03ab8178br			; 0.00140451
	DD	03aa3c89cr			; 0.00124957
	DD	03a8f538cr			; 0.00109349
	DD	03a758c33r			; 0.00093669
	DD	03a4c5b91r			; 0.000779563
	DD	03a232fc5r			; 0.000622507
	DD	039f445b5r			; 0.000465912
	DD	039a29c9br			; 0.000310157
	DD	039232becr			; 0.000155613
	DD	03631192fr			; 2.63897e-006
	DD	0391b9f4fr			; 0.000148413
	DD	0399bd208r			; 0.000297204
	DD	039e878e6r			; 0.000443406
	DD	03a19ccebr			; 0.000586702
	DD	03a3e860ar			; 0.00072679
	DD	03a62544ar			; 0.000863378
	DD	03a829284r			; 0.000996188
	DD	03a937347r			; 0.00112496
	DD	03aa3c405r			; 0.00124943
	DD	03ab37cd5r			; 0.00136938
	DD	03ac29644r			; 0.00148458
	DD	03ad10961r			; 0.00159482
	DD	03adecfb7r			; 0.00169992
	DD	03aebe354r			; 0.00179968
	DD	03af83ec4r			; 0.00189396
	DD	03b01ee8cr			; 0.0019826
	DD	03b075cf2r			; 0.00206548
	DD	03b0c689dr			; 0.00214247
	DD	03b110fdar			; 0.00221347
	DD	03b155135r			; 0.0022784
	DD	03b192b7cr			; 0.00233719
	DD	03b1c9dbdr			; 0.00238977
	DD	03b1fa745r			; 0.00243612
	DD	03b2247a1r			; 0.00247619
	DD	03b247e9br			; 0.00250999
	DD	03b264c3cr			; 0.0025375
	DD	03b27b0c8r			; 0.00255875
	DD	03b28acbfr			; 0.00257377
	DD	03b2940dar			; 0.0025826
	DD	03b296e0br			; 0.00258529
	DD	03b29357br			; 0.00258192
	DD	03b28988ar			; 0.00257257
	DD	03b2798cbr			; 0.00255732
	DD	03b263803r			; 0.0025363
	DD	03b247829r			; 0.0025096
	DD	03b225b61r			; 0.00247737
	DD	03b1fe3ffr			; 0.00243974
	DD	03b1d147fr			; 0.00239685
	DD	03b19ef88r			; 0.00234887
	DD	03b1677e7r			; 0.00229597
	DD	03b12b08er			; 0.00223831
	DD	03b0e9c94r			; 0.00217608
	DD	03b0a3f2er			; 0.00210948
	DD	03b059bb1r			; 0.0020387
	DD	03b00b58dr			; 0.00196395
	DD	03af7209ar			; 0.00188543
	DD	03aec5f27r			; 0.00180337
	DD	03ae12e31r			; 0.00171799
	DD	03ad5954er			; 0.00162951
	DD	03ac99c36r			; 0.00153816
	DD	03abd4abcr			; 0.00144418
	DD	03ab0a8cfr			; 0.0013478
	DD	03aa3be6fr			; 0.00124927
	DD	03a9693afr			; 0.00114881
	DD	03a8930a9r			; 0.00104668
	DD	03a773afcr			; 0.000943109
	DD	03a5bc4a6r			; 0.000838349
	DD	03a400e92r			; 0.000732639
	DD	03a2428f7r			; 0.000626221
	DD	03a0823f2r			; 0.000519334
	DD	039d81f0er			; 0.000412219
	DD	0399ff720r			; 0.00030511
	DD	0394fdee7r			; 0.000198241
	DD	038c09bddr			; 9.18431e-005
	DD	037687c4ar			; 1.38572e-005
	DD	038f8ccc0r			; 0.000118637
	DD	039691342r			; 0.000222278
	DD	039aa2a88r			; 0.000324566
	DD	039def9eer			; 0.000425294
	DD	03a096e4cr			; 0.000524257
	DD	03a22dc0cr			; 0.00062126
	DD	03a3bb96br			; 0.000716111
	DD	03a53fa0fr			; 0.000808627
	DD	03a6b9213r			; 0.000898631
	DD	03a813b07r			; 0.000985951
	DD	03a8c4d8br			; 0.00107043
	DD	03a96fb62r			; 0.0011519
	DD	03aa13f9er			; 0.00123023
	DD	03aab1596r			; 0.00130527
	DD	03ab478e8r			; 0.00137689
	DD	03abd657ar			; 0.00144498
	DD	03ac5d77fr			; 0.00150941
	DD	03acdcb73r			; 0.00157009
	DD	03ad53e20r			; 0.00162691
	DD	03adc2c9cr			; 0.0016798
	DD	03ae2944cr			; 0.00172866
	DD	03ae872e5r			; 0.00177344
	DD	03aedc667r			; 0.00181408
	DD	03af28d23r			; 0.00185052
	DD	03af6c5bbr			; 0.00188272
	DD	03afa6f1dr			; 0.00191066
	DD	03afd8888r			; 0.00193431
	DD	03b0008c5r			; 0.00195365
	DD	03b0104fcr			; 0.00196868
	DD	03b01b8ffr			; 0.00197941
	DD	03b022508r			; 0.00198585
	DD	03b024973r			; 0.00198802
	DD	03b0226c8r			; 0.00198595
	DD	03b01bdafr			; 0.00197969
	DD	03b010ef2r			; 0.00196927
	DD	03b001b82r			; 0.00195476
	DD	03afdc8e1r			; 0.00193622
	DD	03afad5dfr			; 0.00191372
	DD	03af760a3r			; 0.00188734
	DD	03af36c11r			; 0.00185716
	DD	03aeefb4ar			; 0.00182328
	DD	03aea11a8r			; 0.0017858
	DD	03ae4b2bdr			; 0.00174483
	DD	03adee252r			; 0.00170047
	DD	03ad8a463r			; 0.00165285
	DD	03ad1fd19r			; 0.00160209
	DD	03acaf0cfr			; 0.00154831
	DD	03ac3840br			; 0.00149167
	DD	03abbbb79r			; 0.00143228
	DD	03ab39beer			; 0.00137031
	DD	03aab2a5fr			; 0.00130589
	DD	03aa26be2r			; 0.00123918
	DD	03a9965adr			; 0.00117033
	DD	03a901d0cr			; 0.0010995
	DD	03a869766r			; 0.00102685
	DD	03a79b466r			; 0.000952548
	DD	03a65d600r			; 0.000876755
	DD	03a519ecbr			; 0.000799638
	DD	03a3d1a11r			; 0.000721366
	DD	03a28532er			; 0.000642109
	DD	03a135587r			; 0.000562035
	DD	039fc590fr			; 0.000481315
	DD	039d1c733r			; 0.00040012
	DD	039a70c40r			; 0.000318618
	DD	039787dcbr			; 0.00023698
	DD	03922eb59r			; 0.000155372
	DD	0389b1bc0r			; 7.39614e-005
	DD	036edcbecr			; 7.08689e-006
	DD	038b7bb5cr			; 8.76102e-005
	DD	0392f94f4r			; 0.000167448
	DD	0398134e7r			; 0.000246442
	DD	039aa194fr			; 0.000324438
	DD	039d26352r			; 0.000401283
	DD	039f9ff06r			; 0.00047683
	DD	03a106c81r			; 0.000550933
	DD	03a236f32r			; 0.000623453
	DD	03a35fe70r			; 0.000694252
	DD	03a48115fr			; 0.000763198
	DD	03a599f75r			; 0.000830165
	DD	03a6aa07cr			; 0.000895031
	DD	03a7b0c96r			; 0.000957677
	DD	03a856e20r			; 0.00101799
	DD	03a8d042br			; 0.00107587
	DD	03a944509r			; 0.00113121
	DD	03a9b2d8br			; 0.00118391
	DD	03aa1bab3r			; 0.0012339
	DD	03aa7e9b9r			; 0.00128107
	DD	03aadb80ar			; 0.00132537
	DD	03ab32346r			; 0.00136671
	DD	03ab82948r			; 0.00140504
	DD	03abcc820r			; 0.00144029
	DD	03ac0fe19r			; 0.00147242
	DD	03ac4c9b1r			; 0.00150137
	DD	03ac829a4r			; 0.00152712
	DD	03acb1ce5r			; 0.00154963
	DD	03acda2a0r			; 0.00156887
	DD	03acfba3br			; 0.00158483
	DD	03ad16355r			; 0.0015975
	DD	03ad29dc5r			; 0.00160687
	DD	03ad3699ar			; 0.00161295
	DD	03ad3c71dr			; 0.00161574
	DD	03ad3b6cer			; 0.00161525
	DD	03ad33961r			; 0.00161151
	DD	03ad24fc4r			; 0.00160455
	DD	03ad0fb19r			; 0.0015944
	DD	03acf3cb3r			; 0.00158109
	DD	03acd161fr			; 0.00156469
	DD	03aca8915r			; 0.00154522
	DD	03ac79782r			; 0.00152276
	DD	03ac44384r			; 0.00149737
	DD	03ac08f61r			; 0.00146912
	DD	03abc7d92r			; 0.00143807
	DD	03ab810b9r			; 0.00140431
	DD	03ab34ba1r			; 0.00136792
	DD	03aae313dr			; 0.00132898
	DD	03aa8c4a7r			; 0.0012876
	DD	03aa3091dr			; 0.00124386
	DD	03a9d0200r			; 0.00119787
	DD	03a96b2cfr			; 0.00114974
	DD	03a901f2cr			; 0.00109956
	DD	03a894ad1r			; 0.00104746
	DD	03a823997r			; 0.000993538
	DD	03a75ded9r			; 0.000937922
	DD	03a66e0adr			; 0.000880728
	DD	03a5780dfr			; 0.00082208
	DD	03a47c7c6r			; 0.000762102
	DD	03a37bddar			; 0.000700919
	DD	03a276badr			; 0.000638659
	DD	03a16d9e9r			; 0.000575452
	DD	03a06114ar			; 0.000511427
	DD	039ea3535r			; 0.000446716
	DD	039c7fd5ar			; 0.00038145
	DD	039a58cb5r			; 0.000315761
	DD	03982f4f6r			; 0.00024978
	DD	039408f93r			; 0.00018364
	DD	038f65b28r			; 0.000117472
	DD	038579bbcr			; 5.1405e-005
	DD	03772199cr			; 1.44303e-005
	DD	038a79334r			; 7.9906e-005
	DD	03917ef09r			; 0.000144895
	DD	0395b7053r			; 0.000209273
	DD	0398f1633r			; 0.000272916
	DD	039b00163r			; 0.000335704
	DD	039d069cdr			; 0.000397517
	DD	039f03fddr			; 0.000458239
	DD	03a07ba2fr			; 0.000517758
	DD	03a16fc41r			; 0.000575963
	DD	03a25def5r			; 0.000632747
	DD	03a345b56r			; 0.000688007
	DD	03a426aaar			; 0.000741641
	DD	03a500678r			; 0.000793553
	DD	03a5d288ar			; 0.000843652
	DD	03a69caf1r			; 0.000891849
	DD	03a75e802r			; 0.000938058
	DD	03a80bd30r			; 0.000982201
	DD	03a863e7dr			; 0.0010242
	DD	03a8b7587r			; 0.00106399
	DD	03a906013r			; 0.0011015
	DD	03a94fc12r			; 0.00113666
	DD	03a99479fr			; 0.00116943
	DD	03a9d40fbr			; 0.00119975
	DD	03aa0e698r			; 0.00122758
	DD	03aa43711r			; 0.00125286
	DD	03aa7312dr			; 0.00127557
	DD	03aa9d3e0r			; 0.00129568
	DD	03aac1e4ar			; 0.00131316
	DD	03aae0fb8r			; 0.00132798
	DD	03aafa7a6r			; 0.00134014
	DD	03ab0e5bbr			; 0.00134962
	DD	03ab1c9cbr			; 0.00135642
	DD	03ab253d7r			; 0.00136053
	DD	03ab2840dr			; 0.00136197
	DD	03ab25ac6r			; 0.00136074
	DD	03ab1d888r			; 0.00135686
	DD	03ab0fe05r			; 0.00135034
	DD	03aafcc17r			; 0.00134123
	DD	03aae43c4r			; 0.00132953
	DD	03aac663ar			; 0.0013153
	DD	03aaa34d1r			; 0.00129857
	DD	03aa7b108r			; 0.00127938
	DD	03aa4dc83r			; 0.00125779
	DD	03aa1b90er			; 0.00123385
	DD	03a9e489ar			; 0.00120761
	DD	03a9a8d37r			; 0.00117914
	DD	03a96891cr			; 0.0011485
	DD	03a923e9fr			; 0.00111576
	DD	03a8db037r			; 0.001081
	DD	03a88e076r			; 0.00104429
	DD	03a83d20dr			; 0.00100571
	DD	03a7d0f93r			; 0.00096535
	DD	03a720921r			; 0.000923293
	DD	03a6696c2r			; 0.000879627
	DD	03a5abe9er			; 0.000834444
	DD	03a4e870cr			; 0.00078784
	DD	03a41f685r			; 0.00073991
	DD	03a3513a9r			; 0.000690753
	DD	03a27e536r			; 0.00064047
	DD	03a1a7208r			; 0.000589163
	DD	03a0cc112r			; 0.000536935
	DD	039fdb2bfr			; 0.000483891
	DD	039e18418r			; 0.000430138
	DD	039c50486r			; 0.000375781
	DD	039a84271r			; 0.00032093
	DD	0398b4c56r			; 0.00026569
	DD	0395c616cr			; 0.000210171
	DD	03921fc25r			; 0.000154481
	DD	038cf0b9dr			; 9.87269e-005
	DD	038346d17r			; 4.30169e-005
	DD	037526c1fr			; 1.25421e-005
	DD	0388e4798r			; 6.78442e-005
	DD	03900bfa1r			; 0.000122784
	DD	03939de58r			; 0.000177258
	DD	03972646cr			; 0.000231163
	DD	039951b5fr			; 0.000284399
	DD	039b09d57r			; 0.000336866
	DD	039cbab0dr			; 0.000388466
	DD	039e637bar			; 0.000439105
	DD	03a001b73r			; 0.00048869
	DD	03a0cce36r			; 0.00053713
	DD	03a192e40r			; 0.000584338
	DD	03a2535dbr			; 0.000630228
	DD	03a30df82r			; 0.000674717
	DD	03a3c25e5r			; 0.000717728
	DD	03a4703ebr			; 0.000759183
	DD	03a5174b2r			; 0.000799011
	DD	03a5b7396r			; 0.000837141
	DD	03a64fc2dr			; 0.000873509
	DD	03a6e0a4er			; 0.000908052
	DD	03a769a0fr			; 0.000940711
	DD	03a7ea7c9r			; 0.000971433
	DD	03a83180cr			; 0.00100017
	DD	03a8697eer			; 0.00102687
	DD	03a89d21fr			; 0.00105149
	DD	03a8cc555r			; 0.001074
	DD	03a8f706cr			; 0.00109435
	DD	03a91d264r			; 0.00111253
	DD	03a93ea60r			; 0.00112851
	DD	03a95b7a9r			; 0.00114225
	DD	03a9739afr			; 0.00115376
	DD	03a987004r			; 0.00116301
	DD	03a995a62r			; 0.00116999
	DD	03a99f8a7r			; 0.00117471
	DD	03a9a4ad6r			; 0.00117716
	DD	03a9a5116r			; 0.00117734
	DD	03a9a0bb5r			; 0.00117528
	DD	03a997b25r			; 0.00117097
	DD	03a989ffar			; 0.00116444
	DD	03a977aedr			; 0.0011557
	DD	03a960cdbr			; 0.00114479
	DD	03a9456c1r			; 0.00113174
	DD	03a9259c1r			; 0.00111657
	DD	03a90171cr			; 0.00109932
	DD	03a8d9033r			; 0.00108004
	DD	03a8ac689r			; 0.00105877
	DD	03a87bbbdr			; 0.00103556
	DD	03a84718dr			; 0.00101046
	DD	03a80e9d5r			; 0.000983531
	DD	03a7a4d15r			; 0.000954823
	DD	03a725380r			; 0.000924401
	DD	03a69eb41r			; 0.00089233
	DD	03a6118dfr			; 0.000858677
	DD	03a57e110r			; 0.000823514
	DD	03a4e48b5r			; 0.000786911
	DD	03a4454dbr			; 0.000748945
	DD	03a3a0ab4r			; 0.000709693
	DD	03a2f6f96r			; 0.000669235
	DD	03a2488f9r			; 0.000627651
	DD	03a195c76r			; 0.000585026
	DD	03a0defber			; 0.000541445
	DD	03a02489fr			; 0.000496993
	DD	039ecd9f4r			; 0.000451758
	DD	039d4c58ar			; 0.00040583
	DD	039bc600br			; 0.000359297
	DD	039a3b59er			; 0.000312251
	DD	0398ad27fr			; 0.000264782
	DD	0396385eer			; 0.000216983
	DD	0393126b3r			; 0.000168945
	DD	038fd3fefr			; 0.000120759
	DD	0389814c3r			; 7.25179e-005
	DD	037cbf41dr			; 2.43132e-005
	DD	037c75964r			; 2.37643e-005
	DD	0389634c6r			; 7.16239e-005
	DD	038f9ee10r			; 0.000119176
	DD	0392e6946r			; 0.000166332
	DD	0395f598fr			; 0.000213003
	DD	03987d858r			; 0.000259104
	DD	0399fabear			; 0.000304549
	DD	039b71c4ar			; 0.000349256
	DD	039ce1e7fr			; 0.000393141
	DD	039e4a7cer			; 0.000436126
	DD	039faadc6r			; 0.000478132
	DD	03a08131dr			; 0.000519084
	DD	03a1283a8r			; 0.000558908
	DD	03a1ca3bfr			; 0.000597533
	DD	03a266ec8r			; 0.000634891
	DD	03a2fe059r			; 0.000670915
	DD	03a38f434r			; 0.000705543
	DD	03a41a64er			; 0.000738715
	DD	03a49f2d0r			; 0.000770372
	DD	03a51d616r			; 0.000800462
	DD	03a594cb4r			; 0.000828932
	DD	03a605372r			; 0.000855736
	DD	03a66e756r			; 0.000880828
	DD	03a6d059cr			; 0.000904167
	DD	03a72abbdr			; 0.000925716
	DD	03a77d76er			; 0.00094544
	DD	03a7c86a1r			; 0.00096331
	DD	03a805bc3r			; 0.000979297
	DD	03a823446r			; 0.000993379
	DD	03a83cc2fr			; 0.00100554
	DD	03a8522f6r			; 0.00101575
	DD	03a86382fr			; 0.00102401
	DD	03a870b93r			; 0.00103031
	DD	03a879cf5r			; 0.00103465
	DD	03a87ec4cr			; 0.00103701
	DD	03a87f9adr			; 0.00103741
	DD	03a87c54fr			; 0.00103585
	DD	03a874f83r			; 0.00103234
	DD	03a8698c0r			; 0.00102689
	DD	03a85a196r			; 0.00101953
	DD	03a846ab7r			; 0.00101026
	DD	03a82f4f1r			; 0.000999121
	DD	03a814130r			; 0.000986135
	DD	03a7ea0fcr			; 0.000971332
	DD	03a7a47fdr			; 0.000954747
	DD	03a7579e7r			; 0.000936417
	DD	03a703970r			; 0.000916383
	DD	03a6a8985r			; 0.000894688
	DD	03a646d44r			; 0.000871379
	DD	03a5de7fcr			; 0.000846505
	DD	03a56fd2er			; 0.000820118
	DD	03a4fb083r			; 0.000792273
	DD	03a4805d6r			; 0.000763026
	DD	03a400126r			; 0.000732439
	DD	03a37a69er			; 0.000700572
	DD	03a2efa8br			; 0.000667491
	DD	03a26015er			; 0.00063326
	DD	03a1cbfabr			; 0.000597949
	DD	03a133a21r			; 0.000561627
	DD	03a09758er			; 0.000524365
	DD	039feedb2r			; 0.000486238
	DD	039ea8602r			; 0.000447318
	DD	039d5be31r			; 0.000407682
	DD	039c0a08br			; 0.000367407
	DD	039ab377dr			; 0.00032657
	DD	039958d8cr			; 0.00028525
	DD	0397f5aa9r			; 0.000243525
	DD	039534308r			; 0.000201475
	DD	03926e9a4r			; 0.00015918
	DD	038f4c7f1r			; 0.000116721
	DD	0389b8f0dr			; 7.41762e-005
	DD	03804a713r			; 3.16269e-005
	DD	03735fe8br			; 1.08477e-005
	DD	0385f00e3r			; 5.31682e-005
	DD	038c7c413r			; 9.52558e-005
	DD	0390fb069r			; 0.000137033
	DD	0393b16a0r			; 0.000178421
	DD	03966003ar			; 0.000219346
	DD	039882c88r			; 0.000259731
	DD	0399d06a9r			; 0.000299503
	DD	039b184c8r			; 0.00033859
	DD	039c59d60r			; 0.00037692
	DD	039d94728r			; 0.000414425
	DD	039ec7910r			; 0.000451036
	DD	039ff2a4ar			; 0.000486689
	DD	03a08a927r			; 0.000521319
	DD	03a11746fr			; 0.000554866
	DD	03a19f303r			; 0.00058727
	DD	03a222110r			; 0.000618474
	DD	03a29faf0r			; 0.000648423
	DD	03a317d25r			; 0.000677066
	DD	03a38a45fr			; 0.000704354
	DD	03a3f6d7dr			; 0.000730239
	DD	03a45d58cr			; 0.000754677
	DD	03a4bd9ccr			; 0.000777629
	DD	03a5177abr			; 0.000799055
	DD	03a56accer			; 0.00081892
	DD	03a5b770br			; 0.000837193
	DD	03a5fd470r			; 0.000853843
	DD	03a63c33dr			; 0.000868846
	DD	03a6741e9r			; 0.000882177
	DD	03a6a4f24r			; 0.000893818
	DD	03a6ce9d3r			; 0.000903753
	DD	03a6f1112r			; 0.000911967
	DD	03a70c437r			; 0.000918451
	DD	03a7202cer			; 0.000923199
	DD	03a72cc9br			; 0.000926206
	DD	03a73219br			; 0.000927472
	DD	03a730201r			; 0.000927001
	DD	03a726e39r			; 0.000924799
	DD	03a7166e4r			; 0.000920875
	DD	03a6fecdcr			; 0.000915242
	DD	03a6e012fr			; 0.000907916
	DD	03a6ba520r			; 0.000898914
	DD	03a68da28r			; 0.000888261
	DD	03a65a1f3r			; 0.000875979
	DD	03a61fe5fr			; 0.000862097
	DD	03a5df17cr			; 0.000846646
	DD	03a597d8br			; 0.00082966
	DD	03a54a4far			; 0.000811174
	DD	03a4f6a68r			; 0.000791228
	DD	03a49d09fr			; 0.000769863
	DD	03a43da93r			; 0.000747123
	DD	03a3d8b64r			; 0.000723055
	DD	03a36e658r			; 0.000697707
	DD	03a2feedar			; 0.000671131
	DD	03a28a87er			; 0.00064338
	DD	03a2116f5r			; 0.000614508
	DD	03a193e16r			; 0.000584574
	DD	03a1121d3r			; 0.000553635
	DD	03a08c63dr			; 0.000521753
	DD	03a002f7er			; 0.000488989
	DD	039eec3b7r			; 0.000455407
	DD	039dcc360r			; 0.000421072
	DD	039ca66d6r			; 0.000386051
	DD	039b7b71br			; 0.000350409
	DD	039a4bd54r			; 0.000314216
	DD	0399182c2r			; 0.00027754
	DD	0397c2177r			; 0.000240451
	DD	03954e157r			; 0.000203018
	DD	0392d5817r			; 0.000165314
	DD	0390598ber			; 0.000127408
	DD	038bb6cbar			; 8.93711e-005
	DD	038571020r			; 5.1275e-005
	DD	0375d4caer			; 1.31905e-005
	DD	037d022efr			; 2.48118e-005
	DD	03883691er			; 6.26615e-005
	DD	038d2520er			; 0.000100289
	DD	039104f2fr			; 0.000137624
	DD	0393714a5r			; 0.000174599
	DD	0395d6741r			; 0.000211147
	DD	039819a90r			; 0.0002472
	DD	039943655r			; 0.000282692
	DD	039a67e4fr			; 0.000317561
	DD	039b86a0cr			; 0.000351742
	DD	039c9f14ar			; 0.000385175
	DD	039db0c00r			; 0.000417799
	DD	039ebb25br			; 0.000449556
	DD	039fbdcc9r			; 0.000480389
	DD	03a05c1far			; 0.000510245
	DD	03a0d5067r			; 0.00053907
	DD	03a149647r			; 0.000566815
	DD	03a1b9059r			; 0.000593429
	DD	03a223b84r			; 0.000618868
	DD	03a2894d8r			; 0.000643087
	DD	03a2e998br			; 0.000666045
	DD	03a3446fer			; 0.000687703
	DD	03a399abfr			; 0.000708025
	DD	03a3e9286r			; 0.000726976
	DD	03a432c3ar			; 0.000744525
	DD	03a4765efr			; 0.000760644
	DD	03a4b3de9r			; 0.000775306
	DD	03a4eb29ar			; 0.000788489
	DD	03a51c2a5r			; 0.000800172
	DD	03a546cddr			; 0.000810338
	DD	03a56b049r			; 0.000818972
	DD	03a588c1dr			; 0.000826062
	DD	03a59ffc1r			; 0.0008316
	DD	03a5b0acer			; 0.00083558
	DD	03a5bad11r			; 0.000837998
	DD	03a5be685r			; 0.000838854
	DD	03a5bb759r			; 0.000838151
	DD	03a5b1feer			; 0.000835894
	DD	03a5a20d3r			; 0.000832093
	DD	03a58bacbr			; 0.000826758
	DD	03a56eec8r			; 0.000819903
	DD	03a54bde9r			; 0.000811546
	DD	03a522981r			; 0.000801705
	DD	03a4f330dr			; 0.000790403
	DD	03a4bdc39r			; 0.000777665
	DD	03a4826dbr			; 0.000763518
	DD	03a4414f9r			; 0.000747993
	DD	03a3fa8c0r			; 0.000731122
	DD	03a3ae486r			; 0.000712939
	DD	03a35cacar			; 0.000693482
	DD	03a305e32r			; 0.00067279
	DD	03a2aa188r			; 0.000650906
	DD	03a2497bbr			; 0.000627871
	DD	03a1e43dbr			; 0.000603733
	DD	03a17a91br			; 0.000578539
	DD	03a10cacbr			; 0.000552338
	DD	03a09ac5br			; 0.000525182
	DD	03a025154r			; 0.000497123
	DD	039f57ab7r			; 0.000468215
	DD	039e5e85cr			; 0.000438514
	DD	039d5f33fr			; 0.000408078
	DD	039c5a330r			; 0.000376964
	DD	039b50024r			; 0.000345231
	DD	039a41233r			; 0.000312941
	DD	03992e192r			; 0.000280154
	DD	039817691r			; 0.000246931
	DD	0395fb327r			; 0.000213337
	DD	0393c2622r			; 0.000179433
	DD	03918571br			; 0.000145283
	DD	038e8ae5dr			; 0.000110951
	DD	038a06f08r			; 7.65008e-005
	DD	038302515r			; 4.19962e-005
	DD	036fbb324r			; 7.50124e-006
	DD	037e1d341r			; 2.69205e-005
	DD	038805b75r			; 6.12055e-005
	DD	038c7d6efr			; 9.52909e-005
	DD	0390762ddr			; 0.000129114
	DD	0392a8355r			; 0.000162614
	DD	0394d3c7er			; 0.000195729
	DD	0396f7e35r			; 0.000228398
	DD	039889c4br			; 0.000260564
	DD	039992e05r			; 0.000292167
	DD	039a96ca6r			; 0.000323151
	DD	039b950b7r			; 0.000353461
	DD	039c8d2f1r			; 0.000383041
	DD	039d7ec42r			; 0.00041184
	DD	039e695car			; 0.000439806
	DD	039f4c8e7r			; 0.00046689
	DD	03a013f99r			; 0.000493044
	DD	03a07d93fr			; 0.000518221
	DD	03a0e2e74r			; 0.000542379
	DD	03a143c67r			; 0.000565475
	DD	03a1a0069r			; 0.000587469
	DD	03a1f77f1r			; 0.000608324
	DD	03a24a09dr			; 0.000628004
	DD	03a29782fr			; 0.000646475
	DD	03a2dfc92r			; 0.000663706
	DD	03a322bdcr			; 0.00067967
	DD	03a360447r			; 0.000694339
	DD	03a39843cr			; 0.000707689
	DD	03a3caa4dr			; 0.000719701
	DD	03a3f7536r			; 0.000730354
	DD	03a41e3e0r			; 0.000739632
	DD	03a43f562r			; 0.000747522
	DD	03a45a8fcr			; 0.000754013
	DD	03a46fe1cr			; 0.000759097
	DD	03a47f45er			; 0.000762766
	DD	03a488b8br			; 0.000765019
	DD	03a48c396r			; 0.000765854
	DD	03a489ca2r			; 0.000765273
	DD	03a4816fer			; 0.000763282
	DD	03a473324r			; 0.000759887
	DD	03a45f1bcr			; 0.000755097
	DD	03a445397r			; 0.000748926
	DD	03a4259b5r			; 0.000741388
	DD	03a40053cr			; 0.0007325
	DD	03a3d577fr			; 0.000722282
	DD	03a3a51far			; 0.000710755
	DD	03a36f64fr			; 0.000697945
	DD	03a33464cr			; 0.000683878
	DD	03a2f43e0r			; 0.000668583
	DD	03a2af124r			; 0.000652092
	DD	03a265052r			; 0.000634437
	DD	03a2163ccr			; 0.000615653
	DD	03a1c2e10r			; 0.000595779
	DD	03a16b1c2r			; 0.000574853
	DD	03a10f1a2r			; 0.000552917
	DD	03a0af091r			; 0.000530013
	DD	03a04b18cr			; 0.000506186
	DD	039fc6f52r			; 0.000481481
	DD	039ef0c35r			; 0.000455947
	DD	039e14053r			; 0.000429633
	DD	039d3126dr			; 0.000402588
	DD	039c4896dr			; 0.000374864
	DD	039b5ac64r			; 0.000346515
	DD	039a68286r			; 0.000317592
	DD	039971325r			; 0.000288152
	DD	0398765b2r			; 0.00025825
	DD	0396f0367r			; 0.000227941
	DD	0394edd8fr			; 0.000197282
	DD	0392e6939r			; 0.000166331
	DD	0390db5dbr			; 0.000135146
	DD	038d9a605r			; 0.000103783
	DD	03897a08er			; 7.23015e-005
	DD	0382af51br			; 4.07594e-005
	DD	0371a99d8r			; 9.21493e-006
	DD	037bad912r			; 2.2274e-005
	DD	0386105dbr			; 5.36496e-005
	DD	038b1f3ebr			; 8.48545e-005
	DD	038f2eaa9r			; 0.000115832
	DD	03919a46er			; 0.000146525
	DD	03939784br			; 0.000176878
	DD	03958e227r			; 0.000206836
	DD	03977d37br			; 0.000236345
	DD	0398b1effr			; 0.000265352
	DD	0399a09d8r			; 0.000293805
	DD	039a8a372r			; 0.000321652
	DD	039b6e51dr			; 0.000348844
	DD	039c4c859r			; 0.000375333
	DD	039d246d6r			; 0.000401071
	DD	039df5a76r			; 0.000426013
	DD	039ebfd53r			; 0.000450114
	DD	039f829bdr			; 0.000473333
	DD	03a01ed21r			; 0.000495629
	DD	03a0784d4r			; 0.000516963
	DD	03a0cd97fr			; 0.000537299
	DD	03a11e8c5r			; 0.0005566
	DD	03a16b070r			; 0.000574834
	DD	03a1b2e69r			; 0.00059197
	DD	03a1f60bfr			; 0.000607978
	DD	03a2345a6r			; 0.000622833
	DD	03a26db76r			; 0.00063651
	DD	03a2a20adr			; 0.000648985
	DD	03a2d13f2r			; 0.00066024
	DD	03a2fb411r			; 0.000670255
	DD	03a31ffffr			; 0.000679016
	DD	03a33f6d7r			; 0.000686509
	DD	03a3597e0r			; 0.000692723
	DD	03a36e287r			; 0.00069765
	DD	03a37d662r			; 0.000701284
	DD	03a387332r			; 0.000703621
	DD	03a38b8dfr			; 0.000704659
	DD	03a38a77ar			; 0.0007044
	DD	03a383f3er			; 0.000702847
	DD	03a37808er			; 0.000700005
	DD	03a366bf5r			; 0.000695884
	DD	03a350226r			; 0.000690492
	DD	03a3343fdr			; 0.000683844
	DD	03a31327br			; 0.000675954
	DD	03a2ecec8r			; 0.000666839
	DD	03a2c1a34r			; 0.000656518
	DD	03a291631r			; 0.000645015
	DD	03a25c457r			; 0.000632351
	DD	03a222661r			; 0.000618553
	DD	03a1e3e2fr			; 0.000603649
	DD	03a1a0dbfr			; 0.000587668
	DD	03a159733r			; 0.000570643
	DD	03a10dccar			; 0.000552606
	DD	03a0be0e4r			; 0.000533594
	DD	03a06a5fcr			; 0.000513643
	DD	03a012eaar			; 0.000492791
	DD	039f6fb45r			; 0.00047108
	DD	039eb2b61r			; 0.00044855
	DD	039def373r			; 0.000425245
	DD	039d25971r			; 0.00040121
	DD	039c5637cr			; 0.000376489
	DD	039b817der			; 0.00035113
	DD	039aa7d03r			; 0.000325181
	DD	0399c997br			; 0.00029869
	DD	0398e73f4r			; 0.000271707
	DD	039801334r			; 0.000244284
	DD	03962fc39r			; 0.00021647
	DD	039457745r			; 0.000188318
	DD	03927a599r			; 0.000159881
	DD	03909955cr			; 0.00013121
	DD	038d6a997r			; 0.000102359
	DD	03899e469r			; 7.33815e-005
	DD	03839efaar			; 4.43306e-005
	DD	037800219r			; 1.52598e-005
	DD	037672725r			; 1.37778e-005
	DD	0383337c9r			; 4.27289e-005
	DD	038960819r			; 7.15407e-005
	DD	038d20d53r			; 0.000100161
	DD	03906c7d3r			; 0.000128537
	DD	0392439b8r			; 0.000156618
	DD	039414eb4r			; 0.000184352
	DD	0395df958r			; 0.000211691
	DD	0397a2c6cr			; 0.000238584
	DD	0398aed7cr			; 0.000264984
	DD	039987c26r			; 0.000290842
	DD	039a5bbfer			; 0.000316113
	DD	039b2a6far			; 0.000340752
	DD	039bf373ar			; 0.000364715
	DD	039cb670ar			; 0.000387959
	DD	039d730ear			; 0.000410444
	DD	039e28f88r			; 0.00043213
	DD	039ed7dcbr			; 0.000452979
	DD	039f7f6d0r			; 0.000472954
	DD	03a00faf7r			; 0.000492021
	DD	03a05bb5br			; 0.000510147
	DD	03a0a3a7dr			; 0.0005273
	DD	03a0e7663r			; 0.000543451
	DD	03a126d37r			; 0.000558573
	DD	03a161d41r			; 0.000572641
	DD	03a1984eer			; 0.000585629
	DD	03a1ca2cbr			; 0.000597519
	DD	03a1f758ar			; 0.000608288
	DD	03a21fc01r			; 0.000617921
	DD	03a24352ar			; 0.000626403
	DD	03a262022r			; 0.000633719
	DD	03a27bc2fr			; 0.000639859
	DD	03a2908b8r			; 0.000644814
	DD	03a2a054cr			; 0.000648577
	DD	03a2ab1a0r			; 0.000651145
	DD	03a2b0d8dr			; 0.000652515
	DD	03a2b1912r			; 0.000652687
	DD	03a2ad456r			; 0.000651663
	DD	03a2a3fa1r			; 0.000649447
	DD	03a295b66r			; 0.000646046
	DD	03a282837r			; 0.000641468
	DD	03a26a6cfr			; 0.000635725
	DD	03a24d80br			; 0.00062883
	DD	03a22bceer			; 0.000620796
	DD	03a20569ar			; 0.000611642
	DD	03a1da657r			; 0.000601386
	DD	03a1aad8fr			; 0.00059005
	DD	03a176dccr			; 0.000577655
	DD	03a13e8b7r			; 0.000564228
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
_iSpecTableLen DD 040cH
CONST	ENDS
PUBLIC	_CalcCmpxSpecErr@24
PUBLIC	??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0P@JALNLPAM@iStartDFT?5?$DO?$DN?50?$AA@	; `string'
PUBLIC	??_C@_0BB@IKACFBKH@iEndDFT?5?$DM?5NFFT_2?$AA@	; `string'
PUBLIC	??_C@_0BE@NCEBOCK@iStartDFT?5?$DM?5iEndDFT?$AA@	; `string'
PUBLIC	??_C@_0BB@JNFGADBO@iHarmF0?5?$DM?5NFFT_2?$AA@	; `string'
PUBLIC	??_C@_0CK@PJAHPKKI@WinIndex?5?$DM?5iSpecTableLen?5?$CG?$CG?5WinI@ ; `string'
PUBLIC	__real@3e14f209
PUBLIC	__real@41100000
PUBLIC	__real@43800000
PUBLIC	__real@44000000
PUBLIC	__real@3f000000
PUBLIC	__real@4a800000
PUBLIC	__real@3b000000
PUBLIC	__real@00000000
EXTRN	__assert:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@3e14f209
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\synspec.c
CONST	SEGMENT
__real@3e14f209 DD 03e14f209r			; 0.145455
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@44000000
CONST	SEGMENT
__real@44000000 DD 044000000r			; 512
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@4a800000
CONST	SEGMENT
__real@4a800000 DD 04a800000r			; 4.1943e+006
CONST	ENDS
;	COMDAT ??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\synspec.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JALNLPAM@iStartDFT?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0P@JALNLPAM@iStartDFT?5?$DO?$DN?50?$AA@ DB 'iStartDFT >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IKACFBKH@iEndDFT?5?$DM?5NFFT_2?$AA@
CONST	SEGMENT
??_C@_0BB@IKACFBKH@iEndDFT?5?$DM?5NFFT_2?$AA@ DB 'iEndDFT < NFFT_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NCEBOCK@iStartDFT?5?$DM?5iEndDFT?$AA@
CONST	SEGMENT
??_C@_0BE@NCEBOCK@iStartDFT?5?$DM?5iEndDFT?$AA@ DB 'iStartDFT < iEndDFT', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3b000000
CONST	SEGMENT
__real@3b000000 DD 03b000000r			; 0.00195313
CONST	ENDS
;	COMDAT ??_C@_0BB@JNFGADBO@iHarmF0?5?$DM?5NFFT_2?$AA@
CONST	SEGMENT
??_C@_0BB@JNFGADBO@iHarmF0?5?$DM?5NFFT_2?$AA@ DB 'iHarmF0 < NFFT_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PJAHPKKI@WinIndex?5?$DM?5iSpecTableLen?5?$CG?$CG?5WinI@
CONST	SEGMENT
??_C@_0CK@PJAHPKKI@WinIndex?5?$DM?5iSpecTableLen?5?$CG?$CG?5WinI@ DB 'Win'
	DB	'Index < iSpecTableLen && WinIndex >= 0', 00H ; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _CalcCmpxSpecErr@24
_TEXT	SEGMENT
tv250 = -112
tv247 = -108
tv190 = -104
tv187 = -100
tv256 = -96
_pWinSpecTab$ = -92
_ftmp$ = -88
_iResampFactor$ = -84
_invF0$ = -80
_iHarmF0$ = -76
_ftmp1$ = -72
_fAmpReal$ = -68
_iHarm$ = -64
_Fix_fHarmF0$ = -60
_fTotalErr$ = -56
_WinIndex$ = -52
_F0$ = -48
_iHarmEnd$ = -44
_ftmp2$ = -40
_iHarmStart$ = -36
_i$ = -32
_iLeftBound$ = -28
_iRightBound$ = -24
_fWin$ = -20
_fBandWdth$ = -16
_fAmpImag$ = -12
_Fix_F0$ = -8
_Fix_fBandWdth$ = -4
_fPitch$ = 8
_pSWR$ = 12
_pSWI$ = 16
_uiWinLen$ = 20
_iStartDFT$ = 24
_iEndDFT$ = 28
_CalcCmpxSpecErr@24 PROC NEAR				; COMDAT

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H

; 58   :   float F0, fBandWdth;
; 59   :   int iHarmStart, iHarmEnd;
; 60   :   float fTotalErr;
; 61   :   int iLeftBound, iRightBound;
; 62   :   float fAmpReal, fAmpImag;
; 63   :   float fWin;
; 64   :   int WinIndex;
; 65   :   int i;
; 66   :   int iHarm;
; 67   :   float invF0;
; 68   :   int iHarmF0;
; 69   :   float *pWinSpecTab = (float *)pWinR221;

  00006	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _pWinSpecTab$[ebp], OFFSET FLAT:_pWinR221

; 70   :   long Fix_F0, Fix_fBandWdth;
; 71   :   long Fix_fHarmF0;
; 72   :   register float ftmp1, ftmp2;
; 73   :   float ftmp;
; 74   :   int iResampFactor;
; 75   : 
; 76   : 
; 77   :   /*************************************************************
; 78   :     calculate the resampling factor for synthesis spectrum 
; 79   : 	 ************************************************************/
; 80   :   ftmp = SPEC_RESAMP_BASE*(float)(uiWinLen-1);

  0000d	8b 45 14	 mov	 eax, DWORD PTR _uiWinLen$[ebp]
  00010	83 e8 01	 sub	 eax, 1
  00013	89 45 a0	 mov	 DWORD PTR tv256[ebp], eax
  00016	db 45 a0	 fild	 DWORD PTR tv256[ebp]
  00019	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3e14f209
  0001f	d9 5d a8	 fstp	 DWORD PTR _ftmp$[ebp]

; 81   :   VoxROUND2pos(ftmp, iResampFactor);

  00022	d9 45 a8	 fld	 DWORD PTR _ftmp$[ebp]
  00025	db 5d ac	 fistp	 DWORD PTR _iResampFactor$[ebp]

; 82   : 
; 83   :   /* adjust the resample factor */
; 84   :   if (fPitch < (MIN_REFINE_PITCH+1))

  00028	d9 45 08	 fld	 DWORD PTR _fPitch$[ebp]
  0002b	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41100000
  00031	df e0		 fnstsw	 ax
  00033	f6 c4 05	 test	 ah, 5
  00036	7a 09		 jp	 SHORT $L699

; 85   :     iResampFactor --;

  00038	8b 4d ac	 mov	 ecx, DWORD PTR _iResampFactor$[ebp]
  0003b	83 e9 01	 sub	 ecx, 1
  0003e	89 4d ac	 mov	 DWORD PTR _iResampFactor$[ebp], ecx
$L699:

; 86   : 
; 87   :   /* check the pitch range and reset ResampFactor */
; 88   :   if (((float)iResampFactor * (float)NFFT_2) > (fPitch * (float)iSpecTableLen)) 

  00041	db 45 ac	 fild	 DWORD PTR _iResampFactor$[ebp]
  00044	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@43800000
  0004a	db 05 00 00 00
	00		 fild	 DWORD PTR _iSpecTableLen
  00050	d8 4d 08	 fmul	 DWORD PTR _fPitch$[ebp]
  00053	de d9		 fcompp
  00055	df e0		 fnstsw	 ax
  00057	f6 c4 05	 test	 ah, 5
  0005a	7a 07		 jp	 SHORT $L703

; 89   :     iResampFactor = REFINE_SPEC_SCALE;

  0005c	c7 45 ac 20 00
	00 00		 mov	 DWORD PTR _iResampFactor$[ebp], 32 ; 00000020H
$L703:

; 90   : 
; 91   : 
; 92   :   /*************************************************************
; 93   :     fundamental frequency in DFT domain 
; 94   :     ************************************************************/
; 95   :   F0 = (float)NFFT/fPitch;

  00063	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@44000000
  00069	d8 75 08	 fdiv	 DWORD PTR _fPitch$[ebp]
  0006c	d9 55 d0	 fst	 DWORD PTR _F0$[ebp]

; 96   :   fBandWdth = F0 * 0.5F;

  0006f	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  00075	d9 5d f0	 fstp	 DWORD PTR _fBandWdth$[ebp]

; 97   : 
; 98   :   ftmp = FIX_SCALE*F0;

  00078	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@4a800000
  0007e	d8 4d d0	 fmul	 DWORD PTR _F0$[ebp]
  00081	d9 5d a8	 fstp	 DWORD PTR _ftmp$[ebp]

; 99   :   VoxROUND2posLong(ftmp, Fix_F0);

  00084	d9 45 a8	 fld	 DWORD PTR _ftmp$[ebp]
  00087	db 5d f8	 fistp	 DWORD PTR _Fix_F0$[ebp]

; 100  :   ftmp = FIX_SCALE*fBandWdth;

  0008a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@4a800000
  00090	d8 4d f0	 fmul	 DWORD PTR _fBandWdth$[ebp]
  00093	d9 5d a8	 fstp	 DWORD PTR _ftmp$[ebp]

; 101  :   VoxROUND2posLong(ftmp, Fix_fBandWdth);

  00096	d9 45 a8	 fld	 DWORD PTR _ftmp$[ebp]
  00099	db 5d fc	 fistp	 DWORD PTR _Fix_fBandWdth$[ebp]

; 102  : 
; 103  :   /*************************************************************
; 104  :     calculate the index of first harmonic and last harmonic 
; 105  :     ************************************************************/
; 106  :   assert(iStartDFT >= 0);

  0009c	83 7d 18 00	 cmp	 DWORD PTR _iStartDFT$[ebp], 0
  000a0	7d 14		 jge	 SHORT $L928
  000a2	6a 6a		 push	 106			; 0000006aH
  000a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
  000a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@JALNLPAM@iStartDFT?5?$DO?$DN?50?$AA@
  000ae	e8 00 00 00 00	 call	 __assert
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH
$L928:

; 107  :   assert(iEndDFT < NFFT_2);

  000b6	81 7d 1c 00 01
	00 00		 cmp	 DWORD PTR _iEndDFT$[ebp], 256 ; 00000100H
  000bd	7c 14		 jl	 SHORT $L929
  000bf	6a 6b		 push	 107			; 0000006bH
  000c1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
  000c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@IKACFBKH@iEndDFT?5?$DM?5NFFT_2?$AA@
  000cb	e8 00 00 00 00	 call	 __assert
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH
$L929:

; 108  :   assert(iStartDFT < iEndDFT);

  000d3	8b 4d 18	 mov	 ecx, DWORD PTR _iStartDFT$[ebp]
  000d6	3b 4d 1c	 cmp	 ecx, DWORD PTR _iEndDFT$[ebp]
  000d9	7c 14		 jl	 SHORT $L930
  000db	6a 6c		 push	 108			; 0000006cH
  000dd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
  000e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@NCEBOCK@iStartDFT?5?$DM?5iEndDFT?$AA@
  000e7	e8 00 00 00 00	 call	 __assert
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH
$L930:

; 109  :   invF0 = fPitch * INV_NFFT;

  000ef	d9 45 08	 fld	 DWORD PTR _fPitch$[ebp]
  000f2	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3b000000
  000f8	d9 5d b0	 fstp	 DWORD PTR _invF0$[ebp]

; 110  :   ftmp = iStartDFT*invF0;

  000fb	db 45 18	 fild	 DWORD PTR _iStartDFT$[ebp]
  000fe	d8 4d b0	 fmul	 DWORD PTR _invF0$[ebp]
  00101	d9 5d a8	 fstp	 DWORD PTR _ftmp$[ebp]

; 111  :   VoxROUND2pos(ftmp, iHarmStart);

  00104	d9 45 a8	 fld	 DWORD PTR _ftmp$[ebp]
  00107	db 5d dc	 fistp	 DWORD PTR _iHarmStart$[ebp]

; 112  : 
; 113  :   ftmp = iEndDFT*invF0;

  0010a	db 45 1c	 fild	 DWORD PTR _iEndDFT$[ebp]
  0010d	d8 4d b0	 fmul	 DWORD PTR _invF0$[ebp]
  00110	d9 5d a8	 fstp	 DWORD PTR _ftmp$[ebp]

; 114  :   VoxROUND2pos(ftmp, iHarmEnd);

  00113	d9 45 a8	 fld	 DWORD PTR _ftmp$[ebp]
  00116	db 5d d4	 fistp	 DWORD PTR _iHarmEnd$[ebp]

; 115  : 
; 116  :   if (((iHarmEnd*Fix_F0+FIX_05)>>BIT_SHIFT) >= NFFT_2)

  00119	8b 45 d4	 mov	 eax, DWORD PTR _iHarmEnd$[ebp]
  0011c	0f af 45 f8	 imul	 eax, DWORD PTR _Fix_F0$[ebp]
  00120	05 00 00 20 00	 add	 eax, 2097152		; 00200000H
  00125	c1 f8 16	 sar	 eax, 22			; 00000016H
  00128	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0012d	7c 09		 jl	 SHORT $L719

; 117  :     iHarmEnd --;

  0012f	8b 4d d4	 mov	 ecx, DWORD PTR _iHarmEnd$[ebp]
  00132	83 e9 01	 sub	 ecx, 1
  00135	89 4d d4	 mov	 DWORD PTR _iHarmEnd$[ebp], ecx
$L719:

; 118  : 
; 119  :   
; 120  :   /*************************************************************
; 121  :     Synthesis the spectrum and measure the errors between
; 122  :     synthetic spectrum and original spectrum 
; 123  :     ************************************************************/
; 124  :   fTotalErr = MINCON;

  00138	c7 45 c8 bd 37
	86 35		 mov	 DWORD PTR _fTotalErr$[ebp], 897988541 ; 358637bdH

; 125  : 
; 126  :   Fix_fHarmF0 = (long)(iHarmStart-1)*Fix_F0;

  0013f	8b 55 dc	 mov	 edx, DWORD PTR _iHarmStart$[ebp]
  00142	83 ea 01	 sub	 edx, 1
  00145	0f af 55 f8	 imul	 edx, DWORD PTR _Fix_F0$[ebp]
  00149	89 55 c4	 mov	 DWORD PTR _Fix_fHarmF0$[ebp], edx

; 127  :   iLeftBound = (int)((Fix_fHarmF0 + Fix_fBandWdth + FIX_05)>>BIT_SHIFT);

  0014c	8b 45 fc	 mov	 eax, DWORD PTR _Fix_fBandWdth$[ebp]
  0014f	8b 4d c4	 mov	 ecx, DWORD PTR _Fix_fHarmF0$[ebp]
  00152	8d 94 01 00 00
	20 00		 lea	 edx, DWORD PTR [ecx+eax+2097152]
  00159	c1 fa 16	 sar	 edx, 22			; 00000016H
  0015c	89 55 e4	 mov	 DWORD PTR _iLeftBound$[ebp], edx

; 128  : 
; 129  : 
; 130  :   if (iLeftBound < iStartDFT)

  0015f	8b 45 e4	 mov	 eax, DWORD PTR _iLeftBound$[ebp]
  00162	3b 45 18	 cmp	 eax, DWORD PTR _iStartDFT$[ebp]
  00165	7d 06		 jge	 SHORT $L724

; 131  :     iLeftBound = iStartDFT;

  00167	8b 4d 18	 mov	 ecx, DWORD PTR _iStartDFT$[ebp]
  0016a	89 4d e4	 mov	 DWORD PTR _iLeftBound$[ebp], ecx
$L724:

; 132  : 
; 133  : 
; 134  :   for (iHarm = iHarmStart; iHarm <= iHarmEnd; iHarm++) {

  0016d	8b 55 dc	 mov	 edx, DWORD PTR _iHarmStart$[ebp]
  00170	89 55 c0	 mov	 DWORD PTR _iHarm$[ebp], edx
  00173	eb 09		 jmp	 SHORT $L725
$L726:
  00175	8b 45 c0	 mov	 eax, DWORD PTR _iHarm$[ebp]
  00178	83 c0 01	 add	 eax, 1
  0017b	89 45 c0	 mov	 DWORD PTR _iHarm$[ebp], eax
$L725:
  0017e	8b 4d c0	 mov	 ecx, DWORD PTR _iHarm$[ebp]
  00181	3b 4d d4	 cmp	 ecx, DWORD PTR _iHarmEnd$[ebp]
  00184	0f 8f 3e 02 00
	00		 jg	 $L727

; 135  :     /* the center frequency of iHarm-th harmonic */
; 136  :     Fix_fHarmF0 += Fix_F0;

  0018a	8b 55 c4	 mov	 edx, DWORD PTR _Fix_fHarmF0$[ebp]
  0018d	03 55 f8	 add	 edx, DWORD PTR _Fix_F0$[ebp]
  00190	89 55 c4	 mov	 DWORD PTR _Fix_fHarmF0$[ebp], edx

; 137  :     iRightBound = (int)((Fix_fHarmF0+Fix_fBandWdth+FIX_05)>>BIT_SHIFT);

  00193	8b 45 fc	 mov	 eax, DWORD PTR _Fix_fBandWdth$[ebp]
  00196	8b 4d c4	 mov	 ecx, DWORD PTR _Fix_fHarmF0$[ebp]
  00199	8d 94 01 00 00
	20 00		 lea	 edx, DWORD PTR [ecx+eax+2097152]
  001a0	c1 fa 16	 sar	 edx, 22			; 00000016H
  001a3	89 55 e8	 mov	 DWORD PTR _iRightBound$[ebp], edx

; 138  : 
; 139  : 
; 140  :     if (iRightBound > iEndDFT)

  001a6	8b 45 e8	 mov	 eax, DWORD PTR _iRightBound$[ebp]
  001a9	3b 45 1c	 cmp	 eax, DWORD PTR _iEndDFT$[ebp]
  001ac	7e 06		 jle	 SHORT $L731

; 141  :       iRightBound = iEndDFT;

  001ae	8b 4d 1c	 mov	 ecx, DWORD PTR _iEndDFT$[ebp]
  001b1	89 4d e8	 mov	 DWORD PTR _iRightBound$[ebp], ecx
$L731:

; 142  : 
; 143  :     /* find the center amplitude */
; 144  :     iHarmF0 = (int)((Fix_fHarmF0+FIX_05)>>BIT_SHIFT);

  001b4	8b 55 c4	 mov	 edx, DWORD PTR _Fix_fHarmF0$[ebp]
  001b7	81 c2 00 00 20
	00		 add	 edx, 2097152		; 00200000H
  001bd	c1 fa 16	 sar	 edx, 22			; 00000016H
  001c0	89 55 b4	 mov	 DWORD PTR _iHarmF0$[ebp], edx

; 145  : 
; 146  :     assert(iHarmF0 < NFFT_2);

  001c3	81 7d b4 00 01
	00 00		 cmp	 DWORD PTR _iHarmF0$[ebp], 256 ; 00000100H
  001ca	7c 17		 jl	 SHORT $L931
  001cc	68 92 00 00 00	 push	 146			; 00000092H
  001d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
  001d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@JNFGADBO@iHarmF0?5?$DM?5NFFT_2?$AA@
  001db	e8 00 00 00 00	 call	 __assert
  001e0	83 c4 0c	 add	 esp, 12			; 0000000cH
$L931:

; 147  : 
; 148  :     fAmpReal = pSWR[iHarmF0];

  001e3	8b 4d b4	 mov	 ecx, DWORD PTR _iHarmF0$[ebp]
  001e6	8b 55 0c	 mov	 edx, DWORD PTR _pSWR$[ebp]
  001e9	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  001ec	89 45 bc	 mov	 DWORD PTR _fAmpReal$[ebp], eax

; 149  :     fAmpImag = pSWI[iHarmF0];

  001ef	8b 4d b4	 mov	 ecx, DWORD PTR _iHarmF0$[ebp]
  001f2	8b 55 10	 mov	 edx, DWORD PTR _pSWI$[ebp]
  001f5	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  001f8	89 45 f4	 mov	 DWORD PTR _fAmpImag$[ebp], eax

; 150  : 
; 151  :     /* synthesis the left part of one harmonic spectrum */
; 152  :     WinIndex = -iResampFactor*iLeftBound;

  001fb	8b 4d ac	 mov	 ecx, DWORD PTR _iResampFactor$[ebp]
  001fe	f7 d9		 neg	 ecx
  00200	0f af 4d e4	 imul	 ecx, DWORD PTR _iLeftBound$[ebp]
  00204	89 4d cc	 mov	 DWORD PTR _WinIndex$[ebp], ecx

; 153  :     WinIndex+=(int)(((long)iResampFactor*((long)Fix_fHarmF0>>DOWN_SHIFT)
; 154  : 		     -(long)FIX_05_REFINE)>>REFINE_SHIFT);

  00207	8b 55 c4	 mov	 edx, DWORD PTR _Fix_fHarmF0$[ebp]
  0020a	c1 fa 06	 sar	 edx, 6
  0020d	8b 45 ac	 mov	 eax, DWORD PTR _iResampFactor$[ebp]
  00210	0f af c2	 imul	 eax, edx
  00213	2d 00 80 00 00	 sub	 eax, 32768		; 00008000H
  00218	c1 f8 10	 sar	 eax, 16			; 00000010H
  0021b	8b 4d cc	 mov	 ecx, DWORD PTR _WinIndex$[ebp]
  0021e	03 c8		 add	 ecx, eax
  00220	89 4d cc	 mov	 DWORD PTR _WinIndex$[ebp], ecx

; 155  : 
; 156  :     i = iLeftBound;

  00223	8b 55 e4	 mov	 edx, DWORD PTR _iLeftBound$[ebp]
  00226	89 55 e0	 mov	 DWORD PTR _i$[ebp], edx
$L744:

; 157  :     while(WinIndex >= 0) {

  00229	83 7d cc 00	 cmp	 DWORD PTR _WinIndex$[ebp], 0
  0022d	0f 8c bb 00 00
	00		 jl	 $L745

; 158  :       assert(WinIndex < iSpecTableLen && WinIndex >= 0);

  00233	8b 45 cc	 mov	 eax, DWORD PTR _WinIndex$[ebp]
  00236	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _iSpecTableLen
  0023c	7d 06		 jge	 SHORT $L932
  0023e	83 7d cc 00	 cmp	 DWORD PTR _WinIndex$[ebp], 0
  00242	7d 17		 jge	 SHORT $L933
$L932:
  00244	68 9e 00 00 00	 push	 158			; 0000009eH
  00249	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
  0024e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@PJAHPKKI@WinIndex?5?$DM?5iSpecTableLen?5?$CG?$CG?5WinI@
  00253	e8 00 00 00 00	 call	 __assert
  00258	83 c4 0c	 add	 esp, 12			; 0000000cH
$L933:

; 159  :       fWin = pWinSpecTab[WinIndex];

  0025b	8b 55 cc	 mov	 edx, DWORD PTR _WinIndex$[ebp]
  0025e	8b 45 a4	 mov	 eax, DWORD PTR _pWinSpecTab$[ebp]
  00261	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00264	89 4d ec	 mov	 DWORD PTR _fWin$[ebp], ecx

; 160  :       ftmp1 = pSWR[i] - fAmpReal*fWin;

  00267	d9 45 bc	 fld	 DWORD PTR _fAmpReal$[ebp]
  0026a	d8 4d ec	 fmul	 DWORD PTR _fWin$[ebp]
  0026d	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  00270	8b 45 0c	 mov	 eax, DWORD PTR _pSWR$[ebp]
  00273	d8 2c 90	 fsubr	 DWORD PTR [eax+edx*4]
  00276	d9 5d b8	 fstp	 DWORD PTR _ftmp1$[ebp]

; 161  :       ftmp2 = pSWI[i] - fAmpImag*fWin;

  00279	d9 45 f4	 fld	 DWORD PTR _fAmpImag$[ebp]
  0027c	d8 4d ec	 fmul	 DWORD PTR _fWin$[ebp]
  0027f	8b 4d e0	 mov	 ecx, DWORD PTR _i$[ebp]
  00282	8b 55 10	 mov	 edx, DWORD PTR _pSWI$[ebp]
  00285	d8 2c 8a	 fsubr	 DWORD PTR [edx+ecx*4]
  00288	d9 5d d8	 fstp	 DWORD PTR _ftmp2$[ebp]

; 162  :       fTotalErr += (float)FABS(ftmp1)+(float)FABS(ftmp2);

  0028b	d9 45 b8	 fld	 DWORD PTR _ftmp1$[ebp]
  0028e	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00294	df e0		 fnstsw	 ax
  00296	f6 c4 41	 test	 ah, 65			; 00000041H
  00299	75 08		 jne	 SHORT $L934
  0029b	8b 45 b8	 mov	 eax, DWORD PTR _ftmp1$[ebp]
  0029e	89 45 9c	 mov	 DWORD PTR tv187[ebp], eax
  002a1	eb 08		 jmp	 SHORT $L935
$L934:
  002a3	d9 45 b8	 fld	 DWORD PTR _ftmp1$[ebp]
  002a6	d9 e0		 fchs
  002a8	d9 5d 9c	 fstp	 DWORD PTR tv187[ebp]
$L935:
  002ab	d9 45 d8	 fld	 DWORD PTR _ftmp2$[ebp]
  002ae	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  002b4	df e0		 fnstsw	 ax
  002b6	f6 c4 41	 test	 ah, 65			; 00000041H
  002b9	75 08		 jne	 SHORT $L936
  002bb	8b 4d d8	 mov	 ecx, DWORD PTR _ftmp2$[ebp]
  002be	89 4d 98	 mov	 DWORD PTR tv190[ebp], ecx
  002c1	eb 08		 jmp	 SHORT $L937
$L936:
  002c3	d9 45 d8	 fld	 DWORD PTR _ftmp2$[ebp]
  002c6	d9 e0		 fchs
  002c8	d9 5d 98	 fstp	 DWORD PTR tv190[ebp]
$L937:
  002cb	d9 45 9c	 fld	 DWORD PTR tv187[ebp]
  002ce	d8 45 98	 fadd	 DWORD PTR tv190[ebp]
  002d1	d8 45 c8	 fadd	 DWORD PTR _fTotalErr$[ebp]
  002d4	d9 5d c8	 fstp	 DWORD PTR _fTotalErr$[ebp]

; 163  :       i++;

  002d7	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  002da	83 c2 01	 add	 edx, 1
  002dd	89 55 e0	 mov	 DWORD PTR _i$[ebp], edx

; 164  :       WinIndex -= iResampFactor;

  002e0	8b 45 cc	 mov	 eax, DWORD PTR _WinIndex$[ebp]
  002e3	2b 45 ac	 sub	 eax, DWORD PTR _iResampFactor$[ebp]
  002e6	89 45 cc	 mov	 DWORD PTR _WinIndex$[ebp], eax

; 165  :     }

  002e9	e9 3b ff ff ff	 jmp	 $L744
$L745:

; 166  : 
; 167  :     /* synthesis the right part of one harmonic spectrum */
; 168  :     WinIndex = -WinIndex;

  002ee	8b 4d cc	 mov	 ecx, DWORD PTR _WinIndex$[ebp]
  002f1	f7 d9		 neg	 ecx
  002f3	89 4d cc	 mov	 DWORD PTR _WinIndex$[ebp], ecx
$L757:

; 169  :     while (i < iRightBound) {

  002f6	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  002f9	3b 55 e8	 cmp	 edx, DWORD PTR _iRightBound$[ebp]
  002fc	0f 8d bb 00 00
	00		 jge	 $L758

; 170  :       assert(WinIndex < iSpecTableLen && WinIndex >= 0);

  00302	8b 45 cc	 mov	 eax, DWORD PTR _WinIndex$[ebp]
  00305	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _iSpecTableLen
  0030b	7d 06		 jge	 SHORT $L938
  0030d	83 7d cc 00	 cmp	 DWORD PTR _WinIndex$[ebp], 0
  00311	7d 17		 jge	 SHORT $L939
$L938:
  00313	68 aa 00 00 00	 push	 170			; 000000aaH
  00318	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
  0031d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@PJAHPKKI@WinIndex?5?$DM?5iSpecTableLen?5?$CG?$CG?5WinI@
  00322	e8 00 00 00 00	 call	 __assert
  00327	83 c4 0c	 add	 esp, 12			; 0000000cH
$L939:

; 171  :       fWin = pWinSpecTab[WinIndex];

  0032a	8b 55 cc	 mov	 edx, DWORD PTR _WinIndex$[ebp]
  0032d	8b 45 a4	 mov	 eax, DWORD PTR _pWinSpecTab$[ebp]
  00330	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00333	89 4d ec	 mov	 DWORD PTR _fWin$[ebp], ecx

; 172  :       ftmp1 = pSWR[i] - fAmpReal*fWin;

  00336	d9 45 bc	 fld	 DWORD PTR _fAmpReal$[ebp]
  00339	d8 4d ec	 fmul	 DWORD PTR _fWin$[ebp]
  0033c	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  0033f	8b 45 0c	 mov	 eax, DWORD PTR _pSWR$[ebp]
  00342	d8 2c 90	 fsubr	 DWORD PTR [eax+edx*4]
  00345	d9 5d b8	 fstp	 DWORD PTR _ftmp1$[ebp]

; 173  :       ftmp2 = pSWI[i] - fAmpImag*fWin;

  00348	d9 45 f4	 fld	 DWORD PTR _fAmpImag$[ebp]
  0034b	d8 4d ec	 fmul	 DWORD PTR _fWin$[ebp]
  0034e	8b 4d e0	 mov	 ecx, DWORD PTR _i$[ebp]
  00351	8b 55 10	 mov	 edx, DWORD PTR _pSWI$[ebp]
  00354	d8 2c 8a	 fsubr	 DWORD PTR [edx+ecx*4]
  00357	d9 5d d8	 fstp	 DWORD PTR _ftmp2$[ebp]

; 174  :       fTotalErr += (float)FABS(ftmp1)+(float)FABS(ftmp2);

  0035a	d9 45 b8	 fld	 DWORD PTR _ftmp1$[ebp]
  0035d	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00363	df e0		 fnstsw	 ax
  00365	f6 c4 41	 test	 ah, 65			; 00000041H
  00368	75 08		 jne	 SHORT $L940
  0036a	8b 45 b8	 mov	 eax, DWORD PTR _ftmp1$[ebp]
  0036d	89 45 94	 mov	 DWORD PTR tv247[ebp], eax
  00370	eb 08		 jmp	 SHORT $L941
$L940:
  00372	d9 45 b8	 fld	 DWORD PTR _ftmp1$[ebp]
  00375	d9 e0		 fchs
  00377	d9 5d 94	 fstp	 DWORD PTR tv247[ebp]
$L941:
  0037a	d9 45 d8	 fld	 DWORD PTR _ftmp2$[ebp]
  0037d	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00383	df e0		 fnstsw	 ax
  00385	f6 c4 41	 test	 ah, 65			; 00000041H
  00388	75 08		 jne	 SHORT $L942
  0038a	8b 4d d8	 mov	 ecx, DWORD PTR _ftmp2$[ebp]
  0038d	89 4d 90	 mov	 DWORD PTR tv250[ebp], ecx
  00390	eb 08		 jmp	 SHORT $L943
$L942:
  00392	d9 45 d8	 fld	 DWORD PTR _ftmp2$[ebp]
  00395	d9 e0		 fchs
  00397	d9 5d 90	 fstp	 DWORD PTR tv250[ebp]
$L943:
  0039a	d9 45 94	 fld	 DWORD PTR tv247[ebp]
  0039d	d8 45 90	 fadd	 DWORD PTR tv250[ebp]
  003a0	d8 45 c8	 fadd	 DWORD PTR _fTotalErr$[ebp]
  003a3	d9 5d c8	 fstp	 DWORD PTR _fTotalErr$[ebp]

; 175  :       i++;

  003a6	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  003a9	83 c2 01	 add	 edx, 1
  003ac	89 55 e0	 mov	 DWORD PTR _i$[ebp], edx

; 176  :       WinIndex += iResampFactor;

  003af	8b 45 cc	 mov	 eax, DWORD PTR _WinIndex$[ebp]
  003b2	03 45 ac	 add	 eax, DWORD PTR _iResampFactor$[ebp]
  003b5	89 45 cc	 mov	 DWORD PTR _WinIndex$[ebp], eax

; 177  :     }

  003b8	e9 39 ff ff ff	 jmp	 $L757
$L758:

; 178  : 
; 179  :     /* save the rightBound as the leftBound for the next harmonic */
; 180  :     iLeftBound = iRightBound;

  003bd	8b 4d e8	 mov	 ecx, DWORD PTR _iRightBound$[ebp]
  003c0	89 4d e4	 mov	 DWORD PTR _iLeftBound$[ebp], ecx

; 181  :   }

  003c3	e9 ad fd ff ff	 jmp	 $L726
$L727:

; 182  : 
; 183  :   return fTotalErr;

  003c8	d9 45 c8	 fld	 DWORD PTR _fTotalErr$[ebp]

; 184  : }

  003cb	8b e5		 mov	 esp, ebp
  003cd	5d		 pop	 ebp
  003ce	c2 18 00	 ret	 24			; 00000018H
_CalcCmpxSpecErr@24 ENDP
_TEXT	ENDS
PUBLIC	_CalcBandErr@24
EXTRN	_getnHarm@4:NEAR
; Function compile flags: /Odt
;	COMDAT _CalcBandErr@24
_TEXT	SEGMENT
tv202 = -92
_fTmpSW$ = -88
_pWinSpecTab$ = -84
_ftmp$ = -80
_iResampFactor$ = -76
_NHarm$ = -72
_iHarmF0$ = -68
_fAmpReal$ = -64
_iHarm$ = -60
_Fix_fHarmF0$ = -56
_fTotalErr$ = -52
_WinIndex$ = -48
_F0$ = -44
_fTmpErr$ = -40
_i$ = -36
_iLeftBound$ = -32
_iRightBound$ = -28
_fWin$ = -24
_fBandWdth$ = -20
_fAmpImag$ = -16
_fTotalEng$ = -12
_Fix_F0$ = -8
_Fix_fBandWdth$ = -4
_fPitch$ = 8
_pSWR$ = 12
_pSWI$ = 16
_pPower$ = 20
_uiWinLen$ = 24
_pBandErr$ = 28
_CalcBandErr@24 PROC NEAR				; COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH

; 195  :   float F0, fBandWdth;
; 196  :   int NHarm;
; 197  :   int iLeftBound, iRightBound;
; 198  :   float fAmpReal, fAmpImag;
; 199  :   float fTotalErr, fTotalEng;
; 200  :   int WinIndex;
; 201  :   float fWin;
; 202  :   int i;
; 203  :   float fTmpSW, fTmpErr;
; 204  :   int iHarm;
; 205  :   int iHarmF0;
; 206  :   float *pWinSpecTab = (float *)pWinR221;

  00006	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _pWinSpecTab$[ebp], OFFSET FLAT:_pWinR221

; 207  :   long Fix_F0, Fix_fBandWdth;
; 208  :   long Fix_fHarmF0;
; 209  :   float ftmp;
; 210  :   int iResampFactor;
; 211  : 
; 212  : 
; 213  :   /*************************************************************
; 214  :     calculate the resampling factor for synthesis spectrum 
; 215  : 	 ************************************************************/
; 216  :   ftmp = SPEC_RESAMP_BASE*(float)(uiWinLen-1);

  0000d	8b 45 18	 mov	 eax, DWORD PTR _uiWinLen$[ebp]
  00010	83 e8 01	 sub	 eax, 1
  00013	89 45 a4	 mov	 DWORD PTR tv202[ebp], eax
  00016	db 45 a4	 fild	 DWORD PTR tv202[ebp]
  00019	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3e14f209
  0001f	d9 5d b0	 fstp	 DWORD PTR _ftmp$[ebp]

; 217  :   VoxROUND2pos(ftmp, iResampFactor);

  00022	d9 45 b0	 fld	 DWORD PTR _ftmp$[ebp]
  00025	db 5d b4	 fistp	 DWORD PTR _iResampFactor$[ebp]

; 218  : 
; 219  :   /* adjust the resample factor */
; 220  :   if (fPitch < (MIN_REFINE_PITCH+1))

  00028	d9 45 08	 fld	 DWORD PTR _fPitch$[ebp]
  0002b	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41100000
  00031	df e0		 fnstsw	 ax
  00033	f6 c4 05	 test	 ah, 5
  00036	7a 09		 jp	 SHORT $L807

; 221  :     iResampFactor --;

  00038	8b 4d b4	 mov	 ecx, DWORD PTR _iResampFactor$[ebp]
  0003b	83 e9 01	 sub	 ecx, 1
  0003e	89 4d b4	 mov	 DWORD PTR _iResampFactor$[ebp], ecx
$L807:

; 222  : 
; 223  :   /* check the pitch range and reset ResampFactor */
; 224  :   if (((float)iResampFactor * (float)NFFT_2) > (fPitch * (float)iSpecTableLen)) 

  00041	db 45 b4	 fild	 DWORD PTR _iResampFactor$[ebp]
  00044	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@43800000
  0004a	db 05 00 00 00
	00		 fild	 DWORD PTR _iSpecTableLen
  00050	d8 4d 08	 fmul	 DWORD PTR _fPitch$[ebp]
  00053	de d9		 fcompp
  00055	df e0		 fnstsw	 ax
  00057	f6 c4 05	 test	 ah, 5
  0005a	7a 07		 jp	 SHORT $L811

; 225  :     iResampFactor = REFINE_SPEC_SCALE;

  0005c	c7 45 b4 20 00
	00 00		 mov	 DWORD PTR _iResampFactor$[ebp], 32 ; 00000020H
$L811:

; 226  : 
; 227  : 
; 228  :   /*************************************************************
; 229  :     fundamental frequency in DFT domain 
; 230  :     ************************************************************/
; 231  :   F0 = (float)NFFT/fPitch;

  00063	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@44000000
  00069	d8 75 08	 fdiv	 DWORD PTR _fPitch$[ebp]
  0006c	d9 55 d4	 fst	 DWORD PTR _F0$[ebp]

; 232  :   fBandWdth = F0 * 0.5F;

  0006f	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  00075	d9 5d ec	 fstp	 DWORD PTR _fBandWdth$[ebp]

; 233  : 
; 234  :   ftmp = FIX_SCALE*F0;

  00078	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@4a800000
  0007e	d8 4d d4	 fmul	 DWORD PTR _F0$[ebp]
  00081	d9 5d b0	 fstp	 DWORD PTR _ftmp$[ebp]

; 235  :   VoxROUND2posLong(ftmp, Fix_F0);

  00084	d9 45 b0	 fld	 DWORD PTR _ftmp$[ebp]
  00087	db 5d f8	 fistp	 DWORD PTR _Fix_F0$[ebp]

; 236  : 
; 237  :   ftmp = FIX_SCALE*fBandWdth;

  0008a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@4a800000
  00090	d8 4d ec	 fmul	 DWORD PTR _fBandWdth$[ebp]
  00093	d9 5d b0	 fstp	 DWORD PTR _ftmp$[ebp]

; 238  :   VoxROUND2posLong(ftmp, Fix_fBandWdth);

  00096	d9 45 b0	 fld	 DWORD PTR _ftmp$[ebp]
  00099	db 5d fc	 fistp	 DWORD PTR _Fix_fBandWdth$[ebp]

; 239  : 
; 240  : 
; 241  :   /*************************************************************
; 242  :     calculate number of harmonics.
; 243  :     ************************************************************/
; 244  :   NHarm = getnHarm(fPitch);  

  0009c	8b 55 08	 mov	 edx, DWORD PTR _fPitch$[ebp]
  0009f	52		 push	 edx
  000a0	e8 00 00 00 00	 call	 _getnHarm@4
  000a5	0f bf c0	 movsx	 eax, ax
  000a8	89 45 b8	 mov	 DWORD PTR _NHarm$[ebp], eax

; 245  : 
; 246  :   /* make sure that number of harmonics won't out of range */
; 247  :   if (NHarm > MAXHARM)    NHarm = MAXHARM;

  000ab	83 7d b8 5a	 cmp	 DWORD PTR _NHarm$[ebp], 90 ; 0000005aH
  000af	7e 07		 jle	 SHORT $L817
  000b1	c7 45 b8 5a 00
	00 00		 mov	 DWORD PTR _NHarm$[ebp], 90 ; 0000005aH
$L817:

; 248  :   
; 249  :   /*************************************************************
; 250  :     Synthesis the spectrum and measure the errors between
; 251  :     synthetic spectrum and original spectrum 
; 252  :     ************************************************************/
; 253  :   Fix_fHarmF0 = 0;

  000b8	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _Fix_fHarmF0$[ebp], 0

; 254  : 
; 255  :   iLeftBound = (int)((Fix_fHarmF0+Fix_fBandWdth+FIX_05)>>BIT_SHIFT);

  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _Fix_fBandWdth$[ebp]
  000c2	8b 55 c8	 mov	 edx, DWORD PTR _Fix_fHarmF0$[ebp]
  000c5	8d 84 0a 00 00
	20 00		 lea	 eax, DWORD PTR [edx+ecx+2097152]
  000cc	c1 f8 16	 sar	 eax, 22			; 00000016H
  000cf	89 45 e0	 mov	 DWORD PTR _iLeftBound$[ebp], eax

; 256  : 
; 257  :   for (iHarm = 0; iHarm < NHarm; iHarm++) {

  000d2	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _iHarm$[ebp], 0
  000d9	eb 09		 jmp	 SHORT $L821
$L822:
  000db	8b 4d c4	 mov	 ecx, DWORD PTR _iHarm$[ebp]
  000de	83 c1 01	 add	 ecx, 1
  000e1	89 4d c4	 mov	 DWORD PTR _iHarm$[ebp], ecx
$L821:
  000e4	8b 55 c4	 mov	 edx, DWORD PTR _iHarm$[ebp]
  000e7	3b 55 b8	 cmp	 edx, DWORD PTR _NHarm$[ebp]
  000ea	0f 8d 31 02 00
	00		 jge	 $L823

; 258  :     /* the center frequency of iHarm-th harmonic */
; 259  :     Fix_fHarmF0 += Fix_F0;         

  000f0	8b 45 c8	 mov	 eax, DWORD PTR _Fix_fHarmF0$[ebp]
  000f3	03 45 f8	 add	 eax, DWORD PTR _Fix_F0$[ebp]
  000f6	89 45 c8	 mov	 DWORD PTR _Fix_fHarmF0$[ebp], eax

; 260  :     iRightBound = (int)((Fix_fHarmF0+Fix_fBandWdth+FIX_05)>>BIT_SHIFT);

  000f9	8b 4d fc	 mov	 ecx, DWORD PTR _Fix_fBandWdth$[ebp]
  000fc	8b 55 c8	 mov	 edx, DWORD PTR _Fix_fHarmF0$[ebp]
  000ff	8d 84 0a 00 00
	20 00		 lea	 eax, DWORD PTR [edx+ecx+2097152]
  00106	c1 f8 16	 sar	 eax, 22			; 00000016H
  00109	89 45 e4	 mov	 DWORD PTR _iRightBound$[ebp], eax

; 261  : 
; 262  :     if (iRightBound >= NFFT_2)

  0010c	81 7d e4 00 01
	00 00		 cmp	 DWORD PTR _iRightBound$[ebp], 256 ; 00000100H
  00113	7c 07		 jl	 SHORT $L827

; 263  :       iRightBound = NFFT_2-1;

  00115	c7 45 e4 ff 00
	00 00		 mov	 DWORD PTR _iRightBound$[ebp], 255 ; 000000ffH
$L827:

; 264  : 
; 265  :     /* find the center amplitude */
; 266  :     iHarmF0 = (int)((Fix_fHarmF0+FIX_05)>>BIT_SHIFT);

  0011c	8b 4d c8	 mov	 ecx, DWORD PTR _Fix_fHarmF0$[ebp]
  0011f	81 c1 00 00 20
	00		 add	 ecx, 2097152		; 00200000H
  00125	c1 f9 16	 sar	 ecx, 22			; 00000016H
  00128	89 4d bc	 mov	 DWORD PTR _iHarmF0$[ebp], ecx

; 267  :     assert(iHarmF0 < NFFT_2);

  0012b	81 7d bc 00 01
	00 00		 cmp	 DWORD PTR _iHarmF0$[ebp], 256 ; 00000100H
  00132	7c 17		 jl	 SHORT $L964
  00134	68 0b 01 00 00	 push	 267			; 0000010bH
  00139	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
  0013e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@JNFGADBO@iHarmF0?5?$DM?5NFFT_2?$AA@
  00143	e8 00 00 00 00	 call	 __assert
  00148	83 c4 0c	 add	 esp, 12			; 0000000cH
$L964:

; 268  : 
; 269  :     fAmpReal = pSWR[iHarmF0];

  0014b	8b 45 bc	 mov	 eax, DWORD PTR _iHarmF0$[ebp]
  0014e	8b 4d 0c	 mov	 ecx, DWORD PTR _pSWR$[ebp]
  00151	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00154	89 55 c0	 mov	 DWORD PTR _fAmpReal$[ebp], edx

; 270  :     fAmpImag = pSWI[iHarmF0];

  00157	8b 45 bc	 mov	 eax, DWORD PTR _iHarmF0$[ebp]
  0015a	8b 4d 10	 mov	 ecx, DWORD PTR _pSWI$[ebp]
  0015d	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00160	89 55 f0	 mov	 DWORD PTR _fAmpImag$[ebp], edx

; 271  : 
; 272  :     fTotalErr = MINCON;

  00163	c7 45 cc bd 37
	86 35		 mov	 DWORD PTR _fTotalErr$[ebp], 897988541 ; 358637bdH

; 273  :     fTotalEng = MINCON;

  0016a	c7 45 f4 bd 37
	86 35		 mov	 DWORD PTR _fTotalEng$[ebp], 897988541 ; 358637bdH

; 274  : 
; 275  :     /* synthesis the left part of one harmonic spectrum */
; 276  :     WinIndex = -iResampFactor*iLeftBound;

  00171	8b 45 b4	 mov	 eax, DWORD PTR _iResampFactor$[ebp]
  00174	f7 d8		 neg	 eax
  00176	0f af 45 e0	 imul	 eax, DWORD PTR _iLeftBound$[ebp]
  0017a	89 45 d0	 mov	 DWORD PTR _WinIndex$[ebp], eax

; 277  :     WinIndex+=(int)(((long)iResampFactor*((long)Fix_fHarmF0>>DOWN_SHIFT)
; 278  : 		     -(long)FIX_05_REFINE)>>REFINE_SHIFT);

  0017d	8b 4d c8	 mov	 ecx, DWORD PTR _Fix_fHarmF0$[ebp]
  00180	c1 f9 06	 sar	 ecx, 6
  00183	8b 55 b4	 mov	 edx, DWORD PTR _iResampFactor$[ebp]
  00186	0f af d1	 imul	 edx, ecx
  00189	81 ea 00 80 00
	00		 sub	 edx, 32768		; 00008000H
  0018f	c1 fa 10	 sar	 edx, 16			; 00000010H
  00192	8b 45 d0	 mov	 eax, DWORD PTR _WinIndex$[ebp]
  00195	03 c2		 add	 eax, edx
  00197	89 45 d0	 mov	 DWORD PTR _WinIndex$[ebp], eax

; 279  :     i = iLeftBound;

  0019a	8b 4d e0	 mov	 ecx, DWORD PTR _iLeftBound$[ebp]
  0019d	89 4d dc	 mov	 DWORD PTR _i$[ebp], ecx
$L839:

; 280  :     while(WinIndex >= 0) {

  001a0	83 7d d0 00	 cmp	 DWORD PTR _WinIndex$[ebp], 0
  001a4	0f 8c 9c 00 00
	00		 jl	 $L840

; 281  :       assert(WinIndex < iSpecTableLen && WinIndex >= 0); 

  001aa	8b 55 d0	 mov	 edx, DWORD PTR _WinIndex$[ebp]
  001ad	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _iSpecTableLen
  001b3	7d 06		 jge	 SHORT $L965
  001b5	83 7d d0 00	 cmp	 DWORD PTR _WinIndex$[ebp], 0
  001b9	7d 17		 jge	 SHORT $L966
$L965:
  001bb	68 19 01 00 00	 push	 281			; 00000119H
  001c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
  001c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@PJAHPKKI@WinIndex?5?$DM?5iSpecTableLen?5?$CG?$CG?5WinI@
  001ca	e8 00 00 00 00	 call	 __assert
  001cf	83 c4 0c	 add	 esp, 12			; 0000000cH
$L966:

; 282  :       fWin = pWinSpecTab[WinIndex];

  001d2	8b 4d d0	 mov	 ecx, DWORD PTR _WinIndex$[ebp]
  001d5	8b 55 ac	 mov	 edx, DWORD PTR _pWinSpecTab$[ebp]
  001d8	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  001db	89 45 e8	 mov	 DWORD PTR _fWin$[ebp], eax

; 283  : 
; 284  :       fTmpSW = pSWR[i];

  001de	8b 4d dc	 mov	 ecx, DWORD PTR _i$[ebp]
  001e1	8b 55 0c	 mov	 edx, DWORD PTR _pSWR$[ebp]
  001e4	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  001e7	89 45 a8	 mov	 DWORD PTR _fTmpSW$[ebp], eax

; 285  :       fTmpErr = fTmpSW - fAmpReal*fWin;

  001ea	d9 45 c0	 fld	 DWORD PTR _fAmpReal$[ebp]
  001ed	d8 4d e8	 fmul	 DWORD PTR _fWin$[ebp]
  001f0	d8 6d a8	 fsubr	 DWORD PTR _fTmpSW$[ebp]
  001f3	d9 55 d8	 fst	 DWORD PTR _fTmpErr$[ebp]

; 286  : 
; 287  :       fTotalErr += fTmpErr*fTmpErr;

  001f6	d8 4d d8	 fmul	 DWORD PTR _fTmpErr$[ebp]
  001f9	d8 45 cc	 fadd	 DWORD PTR _fTotalErr$[ebp]
  001fc	d9 5d cc	 fstp	 DWORD PTR _fTotalErr$[ebp]

; 288  : 
; 289  :       fTmpSW = pSWI[i];

  001ff	8b 4d dc	 mov	 ecx, DWORD PTR _i$[ebp]
  00202	8b 55 10	 mov	 edx, DWORD PTR _pSWI$[ebp]
  00205	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00208	89 45 a8	 mov	 DWORD PTR _fTmpSW$[ebp], eax

; 290  :       fTmpErr = fTmpSW - fAmpImag*fWin;

  0020b	d9 45 f0	 fld	 DWORD PTR _fAmpImag$[ebp]
  0020e	d8 4d e8	 fmul	 DWORD PTR _fWin$[ebp]
  00211	d8 6d a8	 fsubr	 DWORD PTR _fTmpSW$[ebp]
  00214	d9 55 d8	 fst	 DWORD PTR _fTmpErr$[ebp]

; 291  :       fTotalErr += fTmpErr*fTmpErr;

  00217	d8 4d d8	 fmul	 DWORD PTR _fTmpErr$[ebp]
  0021a	d8 45 cc	 fadd	 DWORD PTR _fTotalErr$[ebp]
  0021d	d9 5d cc	 fstp	 DWORD PTR _fTotalErr$[ebp]

; 292  :       fTotalEng += pPower[i];

  00220	8b 4d dc	 mov	 ecx, DWORD PTR _i$[ebp]
  00223	8b 55 14	 mov	 edx, DWORD PTR _pPower$[ebp]
  00226	d9 45 f4	 fld	 DWORD PTR _fTotalEng$[ebp]
  00229	d8 04 8a	 fadd	 DWORD PTR [edx+ecx*4]
  0022c	d9 5d f4	 fstp	 DWORD PTR _fTotalEng$[ebp]

; 293  : 
; 294  :       i++;

  0022f	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  00232	83 c0 01	 add	 eax, 1
  00235	89 45 dc	 mov	 DWORD PTR _i$[ebp], eax

; 295  :       WinIndex -= iResampFactor;

  00238	8b 4d d0	 mov	 ecx, DWORD PTR _WinIndex$[ebp]
  0023b	2b 4d b4	 sub	 ecx, DWORD PTR _iResampFactor$[ebp]
  0023e	89 4d d0	 mov	 DWORD PTR _WinIndex$[ebp], ecx

; 296  :     }

  00241	e9 5a ff ff ff	 jmp	 $L839
$L840:

; 297  : 
; 298  :     /* synthesis the right part of one harmonic spectrum */
; 299  :     WinIndex = -WinIndex;

  00246	8b 55 d0	 mov	 edx, DWORD PTR _WinIndex$[ebp]
  00249	f7 da		 neg	 edx
  0024b	89 55 d0	 mov	 DWORD PTR _WinIndex$[ebp], edx
$L843:

; 300  :     while (i < iRightBound) {

  0024e	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  00251	3b 45 e4	 cmp	 eax, DWORD PTR _iRightBound$[ebp]
  00254	0f 8d a8 00 00
	00		 jge	 $L844

; 301  :       assert(WinIndex < iSpecTableLen && WinIndex >= 0); 

  0025a	8b 4d d0	 mov	 ecx, DWORD PTR _WinIndex$[ebp]
  0025d	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _iSpecTableLen
  00263	7d 06		 jge	 SHORT $L967
  00265	83 7d d0 00	 cmp	 DWORD PTR _WinIndex$[ebp], 0
  00269	7d 17		 jge	 SHORT $L968
$L967:
  0026b	68 2d 01 00 00	 push	 301			; 0000012dH
  00270	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
  00275	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@PJAHPKKI@WinIndex?5?$DM?5iSpecTableLen?5?$CG?$CG?5WinI@
  0027a	e8 00 00 00 00	 call	 __assert
  0027f	83 c4 0c	 add	 esp, 12			; 0000000cH
$L968:

; 302  :       fWin = pWinSpecTab[WinIndex];

  00282	8b 45 d0	 mov	 eax, DWORD PTR _WinIndex$[ebp]
  00285	8b 4d ac	 mov	 ecx, DWORD PTR _pWinSpecTab$[ebp]
  00288	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0028b	89 55 e8	 mov	 DWORD PTR _fWin$[ebp], edx

; 303  : 
; 304  :       fWin = pWinSpecTab[WinIndex];

  0028e	8b 45 d0	 mov	 eax, DWORD PTR _WinIndex$[ebp]
  00291	8b 4d ac	 mov	 ecx, DWORD PTR _pWinSpecTab$[ebp]
  00294	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00297	89 55 e8	 mov	 DWORD PTR _fWin$[ebp], edx

; 305  :       fTmpSW = pSWR[i];

  0029a	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  0029d	8b 4d 0c	 mov	 ecx, DWORD PTR _pSWR$[ebp]
  002a0	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  002a3	89 55 a8	 mov	 DWORD PTR _fTmpSW$[ebp], edx

; 306  :       fTmpErr = fTmpSW - fAmpReal*fWin;

  002a6	d9 45 c0	 fld	 DWORD PTR _fAmpReal$[ebp]
  002a9	d8 4d e8	 fmul	 DWORD PTR _fWin$[ebp]
  002ac	d8 6d a8	 fsubr	 DWORD PTR _fTmpSW$[ebp]
  002af	d9 55 d8	 fst	 DWORD PTR _fTmpErr$[ebp]

; 307  : 
; 308  :       fTotalErr += fTmpErr*fTmpErr;

  002b2	d8 4d d8	 fmul	 DWORD PTR _fTmpErr$[ebp]
  002b5	d8 45 cc	 fadd	 DWORD PTR _fTotalErr$[ebp]
  002b8	d9 5d cc	 fstp	 DWORD PTR _fTotalErr$[ebp]

; 309  :  
; 310  :       fTmpSW = pSWI[i];

  002bb	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  002be	8b 4d 10	 mov	 ecx, DWORD PTR _pSWI$[ebp]
  002c1	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  002c4	89 55 a8	 mov	 DWORD PTR _fTmpSW$[ebp], edx

; 311  :       fTmpErr = fTmpSW - fAmpImag*fWin;

  002c7	d9 45 f0	 fld	 DWORD PTR _fAmpImag$[ebp]
  002ca	d8 4d e8	 fmul	 DWORD PTR _fWin$[ebp]
  002cd	d8 6d a8	 fsubr	 DWORD PTR _fTmpSW$[ebp]
  002d0	d9 55 d8	 fst	 DWORD PTR _fTmpErr$[ebp]

; 312  :       fTotalErr += fTmpErr*fTmpErr;

  002d3	d8 4d d8	 fmul	 DWORD PTR _fTmpErr$[ebp]
  002d6	d8 45 cc	 fadd	 DWORD PTR _fTotalErr$[ebp]
  002d9	d9 5d cc	 fstp	 DWORD PTR _fTotalErr$[ebp]

; 313  :       fTotalEng += pPower[i];

  002dc	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  002df	8b 4d 14	 mov	 ecx, DWORD PTR _pPower$[ebp]
  002e2	d9 45 f4	 fld	 DWORD PTR _fTotalEng$[ebp]
  002e5	d8 04 81	 fadd	 DWORD PTR [ecx+eax*4]
  002e8	d9 5d f4	 fstp	 DWORD PTR _fTotalEng$[ebp]

; 314  : 
; 315  : 
; 316  :       i++;

  002eb	8b 55 dc	 mov	 edx, DWORD PTR _i$[ebp]
  002ee	83 c2 01	 add	 edx, 1
  002f1	89 55 dc	 mov	 DWORD PTR _i$[ebp], edx

; 317  :       WinIndex += iResampFactor;

  002f4	8b 45 d0	 mov	 eax, DWORD PTR _WinIndex$[ebp]
  002f7	03 45 b4	 add	 eax, DWORD PTR _iResampFactor$[ebp]
  002fa	89 45 d0	 mov	 DWORD PTR _WinIndex$[ebp], eax

; 318  :     }

  002fd	e9 4c ff ff ff	 jmp	 $L843
$L844:

; 319  : 
; 320  :     /* save the rightBound as the leftBound for the next harmonic */
; 321  :     iLeftBound = iRightBound;

  00302	8b 4d e4	 mov	 ecx, DWORD PTR _iRightBound$[ebp]
  00305	89 4d e0	 mov	 DWORD PTR _iLeftBound$[ebp], ecx

; 322  : 
; 323  :     *pBandErr++ = fTotalErr/fTotalEng;

  00308	d9 45 cc	 fld	 DWORD PTR _fTotalErr$[ebp]
  0030b	d8 75 f4	 fdiv	 DWORD PTR _fTotalEng$[ebp]
  0030e	8b 55 1c	 mov	 edx, DWORD PTR _pBandErr$[ebp]
  00311	d9 1a		 fstp	 DWORD PTR [edx]
  00313	8b 45 1c	 mov	 eax, DWORD PTR _pBandErr$[ebp]
  00316	83 c0 04	 add	 eax, 4
  00319	89 45 1c	 mov	 DWORD PTR _pBandErr$[ebp], eax

; 324  :   }

  0031c	e9 ba fd ff ff	 jmp	 $L822
$L823:

; 325  : 
; 326  :   return NHarm;

  00321	8b 45 b8	 mov	 eax, DWORD PTR _NHarm$[ebp]

; 327  : }

  00324	8b e5		 mov	 esp, ebp
  00326	5d		 pop	 ebp
  00327	c2 18 00	 ret	 24			; 00000018H
_CalcBandErr@24 ENDP
_TEXT	ENDS
PUBLIC	_VoxSynSpecSeeVoc@28
PUBLIC	__real@41a00000
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxSynSpecSeeVoc@28
_TEXT	SEGMENT
tv279 = -92
tv242 = -88
_fTmpSW$ = -84
_ftmp$ = -80
_NHarm$ = -76
_iHarmF0$ = -72
_fAmpReal$ = -68
_lastSVPeak$ = -64
_iHarm$ = -60
_fTotalErr$ = -56
_WinIndex$ = -52
_fHarmF0$ = -48
_F0$ = -44
_fTmpErr$ = -40
_Ind_SV$ = -36
_i$ = -32
_iLeftBound$ = -28
_iRightBound$ = -24
_fWin$ = -20
_fBandWdth$ = -16
_fAmpImag$ = -12
_fTotalEng$ = -8
_ResampFactor$ = -4
_pSWR$ = 8
_pSWI$ = 12
_pPower$ = 16
_iSeeVocFreq$ = 20
_fPitch$ = 24
_pBandErr$ = 28
_uiWinLen$ = 32
_VoxSynSpecSeeVoc@28 PROC NEAR				; COMDAT

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH

; 332  :   float F0, fBandWdth;
; 333  :   int NHarm;
; 334  :   int iLeftBound, iRightBound;
; 335  :   float fAmpReal, fAmpImag;
; 336  :   float fTotalErr, fTotalEng;
; 337  :   int WinIndex;
; 338  :   float fWin;
; 339  :   int i;
; 340  :   float fTmpSW, fTmpErr;
; 341  :   int iHarm;
; 342  :   int iHarmF0;
; 343  :   int ResampFactor;
; 344  :   float fHarmF0;
; 345  :   int Ind_SV;
; 346  :   int lastSVPeak;
; 347  :   float ftmp;
; 348  : 
; 349  :   /*************************************************************
; 350  :     calculate the resampling factor for synthesis spectrum 
; 351  : 	 ************************************************************/
; 352  :   ftmp =  SPEC_RESAMP_BASE*(float)(uiWinLen-1);

  00006	8b 45 20	 mov	 eax, DWORD PTR _uiWinLen$[ebp]
  00009	83 e8 01	 sub	 eax, 1
  0000c	89 45 a8	 mov	 DWORD PTR tv242[ebp], eax
  0000f	db 45 a8	 fild	 DWORD PTR tv242[ebp]
  00012	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3e14f209
  00018	d9 5d b0	 fstp	 DWORD PTR _ftmp$[ebp]

; 353  :   VoxROUND2pos(ftmp, ResampFactor);

  0001b	d9 45 b0	 fld	 DWORD PTR _ftmp$[ebp]
  0001e	db 5d fc	 fistp	 DWORD PTR _ResampFactor$[ebp]

; 354  : 
; 355  :   /* adjust the resample factor */
; 356  :   if (fPitch < (MIN_REFINE_PITCH+1))

  00021	d9 45 18	 fld	 DWORD PTR _fPitch$[ebp]
  00024	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41100000
  0002a	df e0		 fnstsw	 ax
  0002c	f6 c4 05	 test	 ah, 5
  0002f	7a 09		 jp	 SHORT $L885

; 357  :     ResampFactor --;

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _ResampFactor$[ebp]
  00034	83 e9 01	 sub	 ecx, 1
  00037	89 4d fc	 mov	 DWORD PTR _ResampFactor$[ebp], ecx
$L885:

; 358  : 
; 359  :   /* check the pitch range and reset ResampFactor */
; 360  :   if (((float)ResampFactor * (float)NFFT_2) > (fPitch * (float)iSpecTableLen)) 

  0003a	db 45 fc	 fild	 DWORD PTR _ResampFactor$[ebp]
  0003d	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@43800000
  00043	db 05 00 00 00
	00		 fild	 DWORD PTR _iSpecTableLen
  00049	d8 4d 18	 fmul	 DWORD PTR _fPitch$[ebp]
  0004c	de d9		 fcompp
  0004e	df e0		 fnstsw	 ax
  00050	f6 c4 05	 test	 ah, 5
  00053	7a 07		 jp	 SHORT $L889

; 361  :     ResampFactor = REFINE_SPEC_SCALE;

  00055	c7 45 fc 20 00
	00 00		 mov	 DWORD PTR _ResampFactor$[ebp], 32 ; 00000020H
$L889:

; 362  : 
; 363  :   /*************************************************************
; 364  :     fundamental frequency in DFT domain 
; 365  :     ************************************************************/
; 366  :   F0 = (float)NFFT/fPitch;

  0005c	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@44000000
  00062	d8 75 18	 fdiv	 DWORD PTR _fPitch$[ebp]
  00065	d9 55 d4	 fst	 DWORD PTR _F0$[ebp]

; 367  :   fBandWdth = F0 * 0.5F;

  00068	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  0006e	d9 55 f0	 fst	 DWORD PTR _fBandWdth$[ebp]

; 368  : 
; 369  :   if (fBandWdth > (float)MAX_BANDWDTH)

  00071	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41a00000
  00077	df e0		 fnstsw	 ax
  00079	f6 c4 41	 test	 ah, 65			; 00000041H
  0007c	75 07		 jne	 SHORT $L892

; 370  :     fBandWdth = (float)MAX_BANDWDTH;

  0007e	c7 45 f0 00 00
	a0 41		 mov	 DWORD PTR _fBandWdth$[ebp], 1101004800 ; 41a00000H
$L892:

; 371  : 
; 372  : 
; 373  :   /*************************************************************
; 374  :     calculate number of harmonics.
; 375  :     ************************************************************/
; 376  :   NHarm = getnHarm(fPitch);  

  00085	8b 55 18	 mov	 edx, DWORD PTR _fPitch$[ebp]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 _getnHarm@4
  0008e	0f bf c0	 movsx	 eax, ax
  00091	89 45 b4	 mov	 DWORD PTR _NHarm$[ebp], eax

; 377  : 
; 378  :   /* make sure that number of harmonics won't out of range */
; 379  :   if (NHarm > MAXHARM)    NHarm = MAXHARM;

  00094	83 7d b4 5a	 cmp	 DWORD PTR _NHarm$[ebp], 90 ; 0000005aH
  00098	7e 07		 jle	 SHORT $L894
  0009a	c7 45 b4 5a 00
	00 00		 mov	 DWORD PTR _NHarm$[ebp], 90 ; 0000005aH
$L894:

; 380  :   
; 381  :   /*************************************************************
; 382  :     Synthesis the spectrum and measure the errors between
; 383  :     synthetic spectrum and original spectrum 
; 384  :     ************************************************************/
; 385  :   fHarmF0 = 0.0F;

  000a1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _fHarmF0$[ebp], 0

; 386  : 
; 387  :   Ind_SV = 0;

  000a8	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Ind_SV$[ebp], 0

; 388  :   lastSVPeak = iSeeVocFreq[0];

  000af	8b 4d 14	 mov	 ecx, DWORD PTR _iSeeVocFreq$[ebp]
  000b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b4	89 55 c0	 mov	 DWORD PTR _lastSVPeak$[ebp], edx

; 389  :   for (iHarm = 0; iHarm < NHarm; iHarm++) {

  000b7	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _iHarm$[ebp], 0
  000be	eb 09		 jmp	 SHORT $L895
$L896:
  000c0	8b 45 c4	 mov	 eax, DWORD PTR _iHarm$[ebp]
  000c3	83 c0 01	 add	 eax, 1
  000c6	89 45 c4	 mov	 DWORD PTR _iHarm$[ebp], eax
$L895:
  000c9	8b 4d c4	 mov	 ecx, DWORD PTR _iHarm$[ebp]
  000cc	3b 4d b4	 cmp	 ecx, DWORD PTR _NHarm$[ebp]
  000cf	0f 8d 71 02 00
	00		 jge	 $L897

; 390  :     /* the center frequency of iHarm-th harmonic */
; 391  : 	 fHarmF0 += F0;

  000d5	d9 45 d0	 fld	 DWORD PTR _fHarmF0$[ebp]
  000d8	d8 45 d4	 fadd	 DWORD PTR _F0$[ebp]
  000db	d9 55 d0	 fst	 DWORD PTR _fHarmF0$[ebp]

; 392  : 	 ftmp = fHarmF0-fBandWdth;

  000de	d8 65 f0	 fsub	 DWORD PTR _fBandWdth$[ebp]
  000e1	d9 5d b0	 fstp	 DWORD PTR _ftmp$[ebp]

; 393  : 	 VoxROUND2pos(ftmp, iLeftBound);

  000e4	d9 45 b0	 fld	 DWORD PTR _ftmp$[ebp]
  000e7	db 5d e4	 fistp	 DWORD PTR _iLeftBound$[ebp]

; 394  : 	 ftmp = fHarmF0 + fBandWdth;

  000ea	d9 45 d0	 fld	 DWORD PTR _fHarmF0$[ebp]
  000ed	d8 45 f0	 fadd	 DWORD PTR _fBandWdth$[ebp]
  000f0	d9 5d b0	 fstp	 DWORD PTR _ftmp$[ebp]

; 395  : 	 VoxROUND2pos(ftmp, iRightBound);

  000f3	d9 45 b0	 fld	 DWORD PTR _ftmp$[ebp]
  000f6	db 5d e8	 fistp	 DWORD PTR _iRightBound$[ebp]

; 396  : 
; 397  :     if (iRightBound >= NFFT_2)

  000f9	81 7d e8 00 01
	00 00		 cmp	 DWORD PTR _iRightBound$[ebp], 256 ; 00000100H
  00100	7c 07		 jl	 SHORT $L900

; 398  :       iRightBound = NFFT_2-1;

  00102	c7 45 e8 ff 00
	00 00		 mov	 DWORD PTR _iRightBound$[ebp], 255 ; 000000ffH
$L900:

; 399  : 
; 400  : #ifdef SEEVOC_PEAK_ON
; 401  : 
; 402  :     while (fHarmF0 > iSeeVocFreq[Ind_SV]) {

  00109	8b 55 dc	 mov	 edx, DWORD PTR _Ind_SV$[ebp]
  0010c	8b 45 14	 mov	 eax, DWORD PTR _iSeeVocFreq$[ebp]
  0010f	db 04 90	 fild	 DWORD PTR [eax+edx*4]
  00112	d8 5d d0	 fcomp	 DWORD PTR _fHarmF0$[ebp]
  00115	df e0		 fnstsw	 ax
  00117	f6 c4 05	 test	 ah, 5
  0011a	7a 17		 jp	 SHORT $L901

; 403  :       lastSVPeak = iSeeVocFreq[Ind_SV];

  0011c	8b 4d dc	 mov	 ecx, DWORD PTR _Ind_SV$[ebp]
  0011f	8b 55 14	 mov	 edx, DWORD PTR _iSeeVocFreq$[ebp]
  00122	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00125	89 45 c0	 mov	 DWORD PTR _lastSVPeak$[ebp], eax

; 404  :       Ind_SV++;

  00128	8b 4d dc	 mov	 ecx, DWORD PTR _Ind_SV$[ebp]
  0012b	83 c1 01	 add	 ecx, 1
  0012e	89 4d dc	 mov	 DWORD PTR _Ind_SV$[ebp], ecx

; 405  :     }

  00131	eb d6		 jmp	 SHORT $L900
$L901:

; 406  : 
; 407  :     /* find the shortest distance of seevoc peaks */
; 408  :     if ((iSeeVocFreq[Ind_SV]+lastSVPeak) > (fHarmF0+fHarmF0))

  00133	8b 55 dc	 mov	 edx, DWORD PTR _Ind_SV$[ebp]
  00136	8b 45 14	 mov	 eax, DWORD PTR _iSeeVocFreq$[ebp]
  00139	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0013c	03 4d c0	 add	 ecx, DWORD PTR _lastSVPeak$[ebp]
  0013f	89 4d a4	 mov	 DWORD PTR tv279[ebp], ecx
  00142	db 45 a4	 fild	 DWORD PTR tv279[ebp]
  00145	d9 45 d0	 fld	 DWORD PTR _fHarmF0$[ebp]
  00148	d8 45 d0	 fadd	 DWORD PTR _fHarmF0$[ebp]
  0014b	de d9		 fcompp
  0014d	df e0		 fnstsw	 ax
  0014f	f6 c4 05	 test	 ah, 5
  00152	7a 08		 jp	 SHORT $L902

; 409  :       iHarmF0 = lastSVPeak;

  00154	8b 55 c0	 mov	 edx, DWORD PTR _lastSVPeak$[ebp]
  00157	89 55 b8	 mov	 DWORD PTR _iHarmF0$[ebp], edx

; 410  :     else

  0015a	eb 0c		 jmp	 SHORT $L903
$L902:

; 411  :       iHarmF0 = iSeeVocFreq[Ind_SV];

  0015c	8b 45 dc	 mov	 eax, DWORD PTR _Ind_SV$[ebp]
  0015f	8b 4d 14	 mov	 ecx, DWORD PTR _iSeeVocFreq$[ebp]
  00162	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00165	89 55 b8	 mov	 DWORD PTR _iHarmF0$[ebp], edx
$L903:

; 412  : 
; 413  : #else
; 414  : 	 /* find the center amplitude */
; 415  : 	 VoxROUND2pos(fHarmF0, iHarmF0);
; 416  : #endif
; 417  :     assert(iHarmF0 < NFFT_2);

  00168	81 7d b8 00 01
	00 00		 cmp	 DWORD PTR _iHarmF0$[ebp], 256 ; 00000100H
  0016f	7c 17		 jl	 SHORT $L972
  00171	68 a1 01 00 00	 push	 417			; 000001a1H
  00176	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
  0017b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@JNFGADBO@iHarmF0?5?$DM?5NFFT_2?$AA@
  00180	e8 00 00 00 00	 call	 __assert
  00185	83 c4 0c	 add	 esp, 12			; 0000000cH
$L972:

; 418  : 
; 419  :     fAmpReal = pSWR[iHarmF0];

  00188	8b 4d b8	 mov	 ecx, DWORD PTR _iHarmF0$[ebp]
  0018b	8b 55 08	 mov	 edx, DWORD PTR _pSWR$[ebp]
  0018e	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00191	89 45 bc	 mov	 DWORD PTR _fAmpReal$[ebp], eax

; 420  :     fAmpImag = pSWI[iHarmF0];

  00194	8b 4d b8	 mov	 ecx, DWORD PTR _iHarmF0$[ebp]
  00197	8b 55 0c	 mov	 edx, DWORD PTR _pSWI$[ebp]
  0019a	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0019d	89 45 f4	 mov	 DWORD PTR _fAmpImag$[ebp], eax

; 421  : 
; 422  :     fTotalErr = MINCON;

  001a0	c7 45 c8 bd 37
	86 35		 mov	 DWORD PTR _fTotalErr$[ebp], 897988541 ; 358637bdH

; 423  :     fTotalEng = MINCON;

  001a7	c7 45 f8 bd 37
	86 35		 mov	 DWORD PTR _fTotalEng$[ebp], 897988541 ; 358637bdH

; 424  : 
; 425  : 	 /* synthesis the left part of one harmonic spectrum */
; 426  : 	 ftmp = ResampFactor * (fHarmF0-iLeftBound);

  001ae	db 45 fc	 fild	 DWORD PTR _ResampFactor$[ebp]
  001b1	db 45 e4	 fild	 DWORD PTR _iLeftBound$[ebp]
  001b4	d8 6d d0	 fsubr	 DWORD PTR _fHarmF0$[ebp]
  001b7	de c9		 fmulp	 ST(1), ST(0)
  001b9	d9 5d b0	 fstp	 DWORD PTR _ftmp$[ebp]

; 427  : 	 VoxROUND2pos(ftmp, WinIndex);

  001bc	d9 45 b0	 fld	 DWORD PTR _ftmp$[ebp]
  001bf	db 5d cc	 fistp	 DWORD PTR _WinIndex$[ebp]

; 428  : 	 i = iLeftBound;

  001c2	8b 4d e4	 mov	 ecx, DWORD PTR _iLeftBound$[ebp]
  001c5	89 4d e0	 mov	 DWORD PTR _i$[ebp], ecx
$L906:

; 429  :     while(WinIndex >= 0) {

  001c8	83 7d cc 00	 cmp	 DWORD PTR _WinIndex$[ebp], 0
  001cc	0f 8c 9d 00 00
	00		 jl	 $L907

; 430  :       assert(WinIndex < iSpecTableLen && WinIndex >= 0); 

  001d2	8b 55 cc	 mov	 edx, DWORD PTR _WinIndex$[ebp]
  001d5	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _iSpecTableLen
  001db	7d 06		 jge	 SHORT $L973
  001dd	83 7d cc 00	 cmp	 DWORD PTR _WinIndex$[ebp], 0
  001e1	7d 17		 jge	 SHORT $L974
$L973:
  001e3	68 ae 01 00 00	 push	 430			; 000001aeH
  001e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
  001ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@PJAHPKKI@WinIndex?5?$DM?5iSpecTableLen?5?$CG?$CG?5WinI@
  001f2	e8 00 00 00 00	 call	 __assert
  001f7	83 c4 0c	 add	 esp, 12			; 0000000cH
$L974:

; 431  :       fWin = pWinR221[WinIndex];

  001fa	8b 4d cc	 mov	 ecx, DWORD PTR _WinIndex$[ebp]
  001fd	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _pWinR221[ecx*4]
  00204	89 55 ec	 mov	 DWORD PTR _fWin$[ebp], edx

; 432  : 
; 433  :       fTmpSW = pSWR[i];

  00207	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  0020a	8b 4d 08	 mov	 ecx, DWORD PTR _pSWR$[ebp]
  0020d	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00210	89 55 ac	 mov	 DWORD PTR _fTmpSW$[ebp], edx

; 434  :       fTmpErr = fTmpSW - fAmpReal*fWin;

  00213	d9 45 bc	 fld	 DWORD PTR _fAmpReal$[ebp]
  00216	d8 4d ec	 fmul	 DWORD PTR _fWin$[ebp]
  00219	d8 6d ac	 fsubr	 DWORD PTR _fTmpSW$[ebp]
  0021c	d9 55 d8	 fst	 DWORD PTR _fTmpErr$[ebp]

; 435  : 
; 436  :       fTotalErr += fTmpErr*fTmpErr;

  0021f	d8 4d d8	 fmul	 DWORD PTR _fTmpErr$[ebp]
  00222	d8 45 c8	 fadd	 DWORD PTR _fTotalErr$[ebp]
  00225	d9 5d c8	 fstp	 DWORD PTR _fTotalErr$[ebp]

; 437  : 
; 438  :       fTmpSW = pSWI[i];

  00228	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  0022b	8b 4d 0c	 mov	 ecx, DWORD PTR _pSWI$[ebp]
  0022e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00231	89 55 ac	 mov	 DWORD PTR _fTmpSW$[ebp], edx

; 439  :       fTmpErr = fTmpSW - fAmpImag*fWin;

  00234	d9 45 f4	 fld	 DWORD PTR _fAmpImag$[ebp]
  00237	d8 4d ec	 fmul	 DWORD PTR _fWin$[ebp]
  0023a	d8 6d ac	 fsubr	 DWORD PTR _fTmpSW$[ebp]
  0023d	d9 55 d8	 fst	 DWORD PTR _fTmpErr$[ebp]

; 440  :       fTotalErr += fTmpErr*fTmpErr;

  00240	d8 4d d8	 fmul	 DWORD PTR _fTmpErr$[ebp]
  00243	d8 45 c8	 fadd	 DWORD PTR _fTotalErr$[ebp]
  00246	d9 5d c8	 fstp	 DWORD PTR _fTotalErr$[ebp]

; 441  :       fTotalEng += pPower[i];

  00249	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  0024c	8b 4d 10	 mov	 ecx, DWORD PTR _pPower$[ebp]
  0024f	d9 45 f8	 fld	 DWORD PTR _fTotalEng$[ebp]
  00252	d8 04 81	 fadd	 DWORD PTR [ecx+eax*4]
  00255	d9 5d f8	 fstp	 DWORD PTR _fTotalEng$[ebp]

; 442  : 
; 443  :       i++;

  00258	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  0025b	83 c2 01	 add	 edx, 1
  0025e	89 55 e0	 mov	 DWORD PTR _i$[ebp], edx

; 444  :       WinIndex -= ResampFactor;

  00261	8b 45 cc	 mov	 eax, DWORD PTR _WinIndex$[ebp]
  00264	2b 45 fc	 sub	 eax, DWORD PTR _ResampFactor$[ebp]
  00267	89 45 cc	 mov	 DWORD PTR _WinIndex$[ebp], eax

; 445  :     }

  0026a	e9 59 ff ff ff	 jmp	 $L906
$L907:

; 446  : 
; 447  :     /* synthesis the right part of one harmonic spectrum */
; 448  :     WinIndex = -WinIndex;

  0026f	8b 4d cc	 mov	 ecx, DWORD PTR _WinIndex$[ebp]
  00272	f7 d9		 neg	 ecx
  00274	89 4d cc	 mov	 DWORD PTR _WinIndex$[ebp], ecx
$L910:

; 449  :     while (i < iRightBound) {

  00277	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  0027a	3b 55 e8	 cmp	 edx, DWORD PTR _iRightBound$[ebp]
  0027d	0f 8d aa 00 00
	00		 jge	 $L911

; 450  :       assert(WinIndex < iSpecTableLen && WinIndex >= 0); 

  00283	8b 45 cc	 mov	 eax, DWORD PTR _WinIndex$[ebp]
  00286	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _iSpecTableLen
  0028c	7d 06		 jge	 SHORT $L975
  0028e	83 7d cc 00	 cmp	 DWORD PTR _WinIndex$[ebp], 0
  00292	7d 17		 jge	 SHORT $L976
$L975:
  00294	68 c2 01 00 00	 push	 450			; 000001c2H
  00299	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MMDADBAL@c?3?2xbox?2private?2windows?2directx?2@
  0029e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@PJAHPKKI@WinIndex?5?$DM?5iSpecTableLen?5?$CG?$CG?5WinI@
  002a3	e8 00 00 00 00	 call	 __assert
  002a8	83 c4 0c	 add	 esp, 12			; 0000000cH
$L976:

; 451  :       fWin = pWinR221[WinIndex];

  002ab	8b 55 cc	 mov	 edx, DWORD PTR _WinIndex$[ebp]
  002ae	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _pWinR221[edx*4]
  002b5	89 45 ec	 mov	 DWORD PTR _fWin$[ebp], eax

; 452  : 
; 453  :       fWin = pWinR221[WinIndex];

  002b8	8b 4d cc	 mov	 ecx, DWORD PTR _WinIndex$[ebp]
  002bb	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _pWinR221[ecx*4]
  002c2	89 55 ec	 mov	 DWORD PTR _fWin$[ebp], edx

; 454  :       fTmpSW = pSWR[i];

  002c5	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  002c8	8b 4d 08	 mov	 ecx, DWORD PTR _pSWR$[ebp]
  002cb	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  002ce	89 55 ac	 mov	 DWORD PTR _fTmpSW$[ebp], edx

; 455  :       fTmpErr = fTmpSW - fAmpReal*fWin;

  002d1	d9 45 bc	 fld	 DWORD PTR _fAmpReal$[ebp]
  002d4	d8 4d ec	 fmul	 DWORD PTR _fWin$[ebp]
  002d7	d8 6d ac	 fsubr	 DWORD PTR _fTmpSW$[ebp]
  002da	d9 55 d8	 fst	 DWORD PTR _fTmpErr$[ebp]

; 456  : 
; 457  :       fTotalErr += fTmpErr*fTmpErr;

  002dd	d8 4d d8	 fmul	 DWORD PTR _fTmpErr$[ebp]
  002e0	d8 45 c8	 fadd	 DWORD PTR _fTotalErr$[ebp]
  002e3	d9 5d c8	 fstp	 DWORD PTR _fTotalErr$[ebp]

; 458  : 
; 459  :       fTmpSW = pSWI[i];

  002e6	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  002e9	8b 4d 0c	 mov	 ecx, DWORD PTR _pSWI$[ebp]
  002ec	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  002ef	89 55 ac	 mov	 DWORD PTR _fTmpSW$[ebp], edx

; 460  :       fTmpErr = fTmpSW - fAmpImag*fWin;

  002f2	d9 45 f4	 fld	 DWORD PTR _fAmpImag$[ebp]
  002f5	d8 4d ec	 fmul	 DWORD PTR _fWin$[ebp]
  002f8	d8 6d ac	 fsubr	 DWORD PTR _fTmpSW$[ebp]
  002fb	d9 55 d8	 fst	 DWORD PTR _fTmpErr$[ebp]

; 461  :       fTotalErr += fTmpErr*fTmpErr;

  002fe	d8 4d d8	 fmul	 DWORD PTR _fTmpErr$[ebp]
  00301	d8 45 c8	 fadd	 DWORD PTR _fTotalErr$[ebp]
  00304	d9 5d c8	 fstp	 DWORD PTR _fTotalErr$[ebp]

; 462  :       fTotalEng += pPower[i];

  00307	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  0030a	8b 4d 10	 mov	 ecx, DWORD PTR _pPower$[ebp]
  0030d	d9 45 f8	 fld	 DWORD PTR _fTotalEng$[ebp]
  00310	d8 04 81	 fadd	 DWORD PTR [ecx+eax*4]
  00313	d9 5d f8	 fstp	 DWORD PTR _fTotalEng$[ebp]

; 463  : 
; 464  :       i++;

  00316	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  00319	83 c2 01	 add	 edx, 1
  0031c	89 55 e0	 mov	 DWORD PTR _i$[ebp], edx

; 465  :       WinIndex += ResampFactor;

  0031f	8b 45 cc	 mov	 eax, DWORD PTR _WinIndex$[ebp]
  00322	03 45 fc	 add	 eax, DWORD PTR _ResampFactor$[ebp]
  00325	89 45 cc	 mov	 DWORD PTR _WinIndex$[ebp], eax

; 466  :     }

  00328	e9 4a ff ff ff	 jmp	 $L910
$L911:

; 467  : 
; 468  :     *pBandErr++ = fTotalErr/fTotalEng;

  0032d	d9 45 c8	 fld	 DWORD PTR _fTotalErr$[ebp]
  00330	d8 75 f8	 fdiv	 DWORD PTR _fTotalEng$[ebp]
  00333	8b 4d 1c	 mov	 ecx, DWORD PTR _pBandErr$[ebp]
  00336	d9 19		 fstp	 DWORD PTR [ecx]
  00338	8b 55 1c	 mov	 edx, DWORD PTR _pBandErr$[ebp]
  0033b	83 c2 04	 add	 edx, 4
  0033e	89 55 1c	 mov	 DWORD PTR _pBandErr$[ebp], edx

; 469  :   }

  00341	e9 7a fd ff ff	 jmp	 $L896
$L897:

; 470  : 
; 471  :   return NHarm;

  00346	8b 45 b4	 mov	 eax, DWORD PTR _NHarm$[ebp]

; 472  : }

  00349	8b e5		 mov	 esp, ebp
  0034b	5d		 pop	 ebp
  0034c	c2 1c 00	 ret	 28			; 0000001cH
_VoxSynSpecSeeVoc@28 ENDP
_TEXT	ENDS
END
