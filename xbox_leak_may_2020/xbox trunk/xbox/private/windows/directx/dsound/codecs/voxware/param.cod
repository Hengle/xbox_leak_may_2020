; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\param.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0L@BHDJJEPO@amplitudes?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09CLDFFCKN@lpc?5order?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03LFGKDIGM@lpc?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02CNCKJAMN@pv?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05NCNFOFLM@pitch?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09NNKOCLHA@resEnergy?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxInitParam@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxFreeParam@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxInitPrevFrame@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxFreePrevFrame@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxInitSubframe@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxFreeSubframe@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	??_C@_0L@BHDJJEPO@amplitudes?$AA@		; `string'
PUBLIC	??_C@_09CLDFFCKN@lpc?5order?$AA@		; `string'
PUBLIC	??_C@_03LFGKDIGM@lpc?$AA@			; `string'
PUBLIC	??_C@_02CNCKJAMN@pv?$AA@			; `string'
PUBLIC	??_C@_05NCNFOFLM@pitch?$AA@			; `string'
PUBLIC	??_C@_09NNKOCLHA@resEnergy?$AA@			; `string'
PUBLIC	_VoxInitParam@8
EXTRN	_vemRegisterArray@20:NEAR
EXTRN	_vemRegisterVariable@16:NEAR
EXTRN	_vemRegisterConstShort@12:NEAR
EXTRN	_calloc:NEAR
;	COMDAT ??_C@_0L@BHDJJEPO@amplitudes?$AA@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\param.c
CONST	SEGMENT
??_C@_0L@BHDJJEPO@amplitudes?$AA@ DB 'amplitudes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CLDFFCKN@lpc?5order?$AA@
CONST	SEGMENT
??_C@_09CLDFFCKN@lpc?5order?$AA@ DB 'lpc order', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LFGKDIGM@lpc?$AA@
CONST	SEGMENT
??_C@_03LFGKDIGM@lpc?$AA@ DB 'lpc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CNCKJAMN@pv?$AA@
CONST	SEGMENT
??_C@_02CNCKJAMN@pv?$AA@ DB 'pv', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NCNFOFLM@pitch?$AA@
CONST	SEGMENT
??_C@_05NCNFOFLM@pitch?$AA@ DB 'pitch', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NNKOCLHA@resEnergy?$AA@
CONST	SEGMENT
??_C@_09NNKOCLHA@resEnergy?$AA@ DB 'resEnergy', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxInitParam@8
_TEXT	SEGMENT
_pVemMemHandle$ = -8
_pParam$ = -4
_hParam$ = 8
_pVemMem$ = 12
_VoxInitParam@8 PROC NEAR				; COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 69   :    PARAM *pParam;
; 70   :    void  *pVemMemHandle;
; 71   : 
; 72   :    if(VOX_MEM_INIT(pParam=*hParam,1,sizeof(PARAM))) 

  00006	6a 20		 push	 32			; 00000020H
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 _calloc
  0000f	83 c4 08	 add	 esp, 8
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _hParam$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax
  00017	8b 55 08	 mov	 edx, DWORD PTR _hParam$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	89 45 fc	 mov	 DWORD PTR _pParam$[ebp], eax
  0001f	83 7d fc 00	 cmp	 DWORD PTR _pParam$[ebp], 0
  00023	75 09		 jne	 SHORT $L1250

; 73   :       return 1;

  00025	66 b8 01 00	 mov	 ax, 1
  00029	e9 29 01 00 00	 jmp	 $L1246
$L1250:

; 74   : 
; 75   :    if(VOX_MEM_INIT(pParam->Amp,MAXHARM,sizeof(float))) 

  0002e	6a 04		 push	 4
  00030	6a 5a		 push	 90			; 0000005aH
  00032	e8 00 00 00 00	 call	 _calloc
  00037	83 c4 08	 add	 esp, 8
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _pParam$[ebp]
  0003d	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00040	8b 55 fc	 mov	 edx, DWORD PTR _pParam$[ebp]
  00043	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00047	75 09		 jne	 SHORT $L1252

; 76   :       return 1;

  00049	66 b8 01 00	 mov	 ax, 1
  0004d	e9 05 01 00 00	 jmp	 $L1246
$L1252:

; 77   : 
; 78   :    if(VOX_MEM_INIT(pParam->Lsf,LPC_ORDER,sizeof(float))) 

  00052	6a 04		 push	 4
  00054	6a 0a		 push	 10			; 0000000aH
  00056	e8 00 00 00 00	 call	 _calloc
  0005b	83 c4 08	 add	 esp, 8
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _pParam$[ebp]
  00061	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00064	8b 55 fc	 mov	 edx, DWORD PTR _pParam$[ebp]
  00067	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0006b	75 09		 jne	 SHORT $L1254

; 79   :       return 1;

  0006d	66 b8 01 00	 mov	 ax, 1
  00071	e9 e1 00 00 00	 jmp	 $L1246
$L1254:

; 80   : 
; 81   :    if(VOX_MEM_INIT(pParam->Alpc,LPC_ORDER+1,sizeof(float))) 

  00076	6a 04		 push	 4
  00078	6a 0b		 push	 11			; 0000000bH
  0007a	e8 00 00 00 00	 call	 _calloc
  0007f	83 c4 08	 add	 esp, 8
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _pParam$[ebp]
  00085	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00088	8b 55 fc	 mov	 edx, DWORD PTR _pParam$[ebp]
  0008b	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  0008f	75 09		 jne	 SHORT $L1256

; 82   :       return 1;

  00091	66 b8 01 00	 mov	 ax, 1
  00095	e9 bd 00 00 00	 jmp	 $L1246
$L1256:

; 83   : 
; 84   :    if(VOX_MEM_INIT(pParam->Blpc,LPC_ORDER,sizeof(float))) 

  0009a	6a 04		 push	 4
  0009c	6a 0a		 push	 10			; 0000000aH
  0009e	e8 00 00 00 00	 call	 _calloc
  000a3	83 c4 08	 add	 esp, 8
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _pParam$[ebp]
  000a9	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  000ac	8b 55 fc	 mov	 edx, DWORD PTR _pParam$[ebp]
  000af	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  000b3	75 09		 jne	 SHORT $L1258

; 85   :       return 1;

  000b5	66 b8 01 00	 mov	 ax, 1
  000b9	e9 99 00 00 00	 jmp	 $L1246
$L1258:

; 86   :    
; 87   :    if(pVemMem) {

  000be	83 7d 0c 00	 cmp	 DWORD PTR _pVemMem$[ebp], 0
  000c2	0f 84 8c 00 00
	00		 je	 $L1259

; 88   :       pVemMemHandle = ((VEM_MAIN_STRUCT *)pVemMem)->pMemoryHandler;

  000c8	8b 45 0c	 mov	 eax, DWORD PTR _pVemMem$[ebp]
  000cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cd	89 4d f8	 mov	 DWORD PTR _pVemMemHandle$[ebp], ecx

; 89   :       vemRegisterArray(pVemMemHandle, pParam->Amp, VEM_FLOAT, MAXHARM, "amplitudes");

  000d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@BHDJJEPO@amplitudes?$AA@
  000d5	6a 5a		 push	 90			; 0000005aH
  000d7	6a 09		 push	 9
  000d9	8b 55 fc	 mov	 edx, DWORD PTR _pParam$[ebp]
  000dc	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000df	50		 push	 eax
  000e0	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMemHandle$[ebp]
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 _vemRegisterArray@20

; 90   :       vemRegisterConstShort(pVemMemHandle, (short)LPC_ORDER, "lpc order");

  000e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09CLDFFCKN@lpc?5order?$AA@
  000ee	6a 0a		 push	 10			; 0000000aH
  000f0	8b 55 f8	 mov	 edx, DWORD PTR _pVemMemHandle$[ebp]
  000f3	52		 push	 edx
  000f4	e8 00 00 00 00	 call	 _vemRegisterConstShort@12

; 91   : 
; 92   : 	  /* This change is for VoiceFont backward compatibility - see Wei or John      */
; 93   :       /* vemRegisterArray(pVemMemHandle, pParam->Alpc, VEM_FLOAT, LPC_ORDER, "lpc");*/
; 94   : 
; 95   : 	  vemRegisterArray(pVemMemHandle, pParam->Blpc, VEM_FLOAT, LPC_ORDER, "lpc");

  000f9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03LFGKDIGM@lpc?$AA@
  000fe	6a 0a		 push	 10			; 0000000aH
  00100	6a 09		 push	 9
  00102	8b 45 fc	 mov	 eax, DWORD PTR _pParam$[ebp]
  00105	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00108	51		 push	 ecx
  00109	8b 55 f8	 mov	 edx, DWORD PTR _pVemMemHandle$[ebp]
  0010c	52		 push	 edx
  0010d	e8 00 00 00 00	 call	 _vemRegisterArray@20

; 96   : 
; 97   :       vemRegisterVariable(pVemMemHandle, &pParam->Pv, VEM_FLOAT, "pv");

  00112	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02CNCKJAMN@pv?$AA@
  00117	6a 09		 push	 9
  00119	8b 45 fc	 mov	 eax, DWORD PTR _pParam$[ebp]
  0011c	50		 push	 eax
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMemHandle$[ebp]
  00120	51		 push	 ecx
  00121	e8 00 00 00 00	 call	 _vemRegisterVariable@16

; 98   :       vemRegisterVariable(pVemMemHandle, &pParam->Pitch, VEM_FLOAT, "pitch");

  00126	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05NCNFOFLM@pitch?$AA@
  0012b	6a 09		 push	 9
  0012d	8b 55 fc	 mov	 edx, DWORD PTR _pParam$[ebp]
  00130	83 c2 04	 add	 edx, 4
  00133	52		 push	 edx
  00134	8b 45 f8	 mov	 eax, DWORD PTR _pVemMemHandle$[ebp]
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 _vemRegisterVariable@16

; 99   :       vemRegisterVariable(pVemMemHandle, &pParam->Energy, VEM_FLOAT, "resEnergy");  

  0013d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09NNKOCLHA@resEnergy?$AA@
  00142	6a 09		 push	 9
  00144	8b 4d fc	 mov	 ecx, DWORD PTR _pParam$[ebp]
  00147	83 c1 08	 add	 ecx, 8
  0014a	51		 push	 ecx
  0014b	8b 55 f8	 mov	 edx, DWORD PTR _pVemMemHandle$[ebp]
  0014e	52		 push	 edx
  0014f	e8 00 00 00 00	 call	 _vemRegisterVariable@16
$L1259:

; 100  :    }
; 101  : 
; 102  :    return 0;

  00154	66 33 c0	 xor	 ax, ax
$L1246:

; 103  : }

  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c2 08 00	 ret	 8
_VoxInitParam@8 ENDP
_TEXT	ENDS
PUBLIC	_VoxFreeParam@4
EXTRN	_free:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxFreeParam@4
_TEXT	SEGMENT
_pParam$ = 8
_VoxFreeParam@4 PROC NEAR				; COMDAT

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 130  :    if(*pParam) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _pParam$[ebp]
  00006	83 38 00	 cmp	 DWORD PTR [eax], 0
  00009	0f 84 bf 00 00
	00		 je	 $L1271

; 131  :       VOX_MEM_FREE(((PARAM*)*pParam)->Amp);

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pParam$[ebp]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00018	74 1d		 je	 SHORT $L1273
  0001a	8b 45 08	 mov	 eax, DWORD PTR _pParam$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 _free
  00028	83 c4 04	 add	 esp, 4
  0002b	8b 45 08	 mov	 eax, DWORD PTR _pParam$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
$L1273:

; 132  :       VOX_MEM_FREE(((PARAM*)*pParam)->Lsf);

  00037	8b 55 08	 mov	 edx, DWORD PTR _pParam$[ebp]
  0003a	8b 02		 mov	 eax, DWORD PTR [edx]
  0003c	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00040	74 1d		 je	 SHORT $L1278
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _pParam$[ebp]
  00045	8b 11		 mov	 edx, DWORD PTR [ecx]
  00047	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _free
  00050	83 c4 04	 add	 esp, 4
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _pParam$[ebp]
  00056	8b 11		 mov	 edx, DWORD PTR [ecx]
  00058	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
$L1278:

; 133  :       VOX_MEM_FREE(((PARAM*)*pParam)->Alpc);

  0005f	8b 45 08	 mov	 eax, DWORD PTR _pParam$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00068	74 1d		 je	 SHORT $L1283
  0006a	8b 55 08	 mov	 edx, DWORD PTR _pParam$[ebp]
  0006d	8b 02		 mov	 eax, DWORD PTR [edx]
  0006f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 _free
  00078	83 c4 04	 add	 esp, 4
  0007b	8b 55 08	 mov	 edx, DWORD PTR _pParam$[ebp]
  0007e	8b 02		 mov	 eax, DWORD PTR [edx]
  00080	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
$L1283:

; 134  : 	  VOX_MEM_FREE(((PARAM*)*pParam)->Blpc);

  00087	8b 4d 08	 mov	 ecx, DWORD PTR _pParam$[ebp]
  0008a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008c	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  00090	74 1d		 je	 SHORT $L1288
  00092	8b 45 08	 mov	 eax, DWORD PTR _pParam$[ebp]
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0009a	52		 push	 edx
  0009b	e8 00 00 00 00	 call	 _free
  000a0	83 c4 04	 add	 esp, 4
  000a3	8b 45 08	 mov	 eax, DWORD PTR _pParam$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
$L1288:

; 135  :       VOX_MEM_FREE(*pParam);

  000af	8b 55 08	 mov	 edx, DWORD PTR _pParam$[ebp]
  000b2	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000b5	74 17		 je	 SHORT $L1271
  000b7	8b 45 08	 mov	 eax, DWORD PTR _pParam$[ebp]
  000ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 _free
  000c2	83 c4 04	 add	 esp, 4
  000c5	8b 55 08	 mov	 edx, DWORD PTR _pParam$[ebp]
  000c8	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L1271:

; 136  :    }
; 137  :    return 0;

  000ce	66 33 c0	 xor	 ax, ax

; 138  : }

  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
_VoxFreeParam@4 ENDP
_TEXT	ENDS
PUBLIC	__real@43c80000
PUBLIC	__real@43960000
PUBLIC	_VoxInitPrevFrame@4
EXTRN	__fltused:NEAR
;	COMDAT __real@43c80000
CONST	SEGMENT
__real@43c80000 DD 043c80000r			; 400
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxInitPrevFrame@4
_TEXT	SEGMENT
tv142 = -12
_i$ = -8
_PrevFrameParam_mblk$ = -4
_hPrevFrameParam_mblk$ = 8
_VoxInitPrevFrame@4 PROC NEAR				; COMDAT

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 165  :    PrevFrameParam *PrevFrameParam_mblk;
; 166  : 	short i;
; 167  : 
; 168  :    if(VOX_MEM_INIT(PrevFrameParam_mblk=*hPrevFrameParam_mblk,1,sizeof(PrevFrameParam))) 

  00006	6a 14		 push	 20			; 00000014H
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 _calloc
  0000f	83 c4 08	 add	 esp, 8
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _hPrevFrameParam_mblk$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax
  00017	8b 55 08	 mov	 edx, DWORD PTR _hPrevFrameParam_mblk$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	89 45 fc	 mov	 DWORD PTR _PrevFrameParam_mblk$[ebp], eax
  0001f	83 7d fc 00	 cmp	 DWORD PTR _PrevFrameParam_mblk$[ebp], 0
  00023	75 09		 jne	 SHORT $L1300

; 169  :       return 1;

  00025	66 b8 01 00	 mov	 ax, 1
  00029	e9 a7 00 00 00	 jmp	 $L1296
$L1300:

; 170  : 
; 171  :    if(VOX_MEM_INIT(PrevFrameParam_mblk->Amp,MAXHARM,sizeof(float))) 

  0002e	6a 04		 push	 4
  00030	6a 5a		 push	 90			; 0000005aH
  00032	e8 00 00 00 00	 call	 _calloc
  00037	83 c4 08	 add	 esp, 8
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  0003d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00040	8b 55 fc	 mov	 edx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00043	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  00047	75 09		 jne	 SHORT $L1302

; 172  :       return 1;

  00049	66 b8 01 00	 mov	 ax, 1
  0004d	e9 83 00 00 00	 jmp	 $L1296
$L1302:

; 173  : 
; 174  :    if(VOX_MEM_INIT(PrevFrameParam_mblk->Lsf,LPC_ORDER,sizeof(float))) 

  00052	6a 04		 push	 4
  00054	6a 0a		 push	 10			; 0000000aH
  00056	e8 00 00 00 00	 call	 _calloc
  0005b	83 c4 08	 add	 esp, 8
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00061	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00064	8b 55 fc	 mov	 edx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00067	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  0006b	75 06		 jne	 SHORT $L1304

; 175  :       return 1;

  0006d	66 b8 01 00	 mov	 ax, 1
  00071	eb 62		 jmp	 SHORT $L1296
$L1304:

; 176  : 
; 177  :    PrevFrameParam_mblk->Pitch = INITIAL_PITCH;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00076	c7 00 00 00 c8
	42		 mov	 DWORD PTR [eax], 1120403456 ; 42c80000H

; 178  :    PrevFrameParam_mblk->Pv=0.0F;

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  0007f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 179  : 
; 180  :   for(i=0;i<LPC_ORDER;i++) 

  00086	66 c7 45 f8 00
	00		 mov	 WORD PTR _i$[ebp], 0
  0008c	eb 0c		 jmp	 SHORT $L1305
$L1306:
  0008e	66 8b 55 f8	 mov	 dx, WORD PTR _i$[ebp]
  00092	66 83 c2 01	 add	 dx, 1
  00096	66 89 55 f8	 mov	 WORD PTR _i$[ebp], dx
$L1305:
  0009a	0f bf 45 f8	 movsx	 eax, WORD PTR _i$[ebp]
  0009e	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000a1	7d 25		 jge	 SHORT $L1307

; 181  : 	PrevFrameParam_mblk->Lsf[i] = LSP_INITIAL_COND_DEL*i + LSP_INITIAL_COND_0;

  000a3	0f bf 4d f8	 movsx	 ecx, WORD PTR _i$[ebp]
  000a7	89 4d f4	 mov	 DWORD PTR tv142[ebp], ecx
  000aa	db 45 f4	 fild	 DWORD PTR tv142[ebp]
  000ad	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@43c80000
  000b3	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@43960000
  000b9	0f bf 55 f8	 movsx	 edx, WORD PTR _i$[ebp]
  000bd	8b 45 fc	 mov	 eax, DWORD PTR _PrevFrameParam_mblk$[ebp]
  000c0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000c3	d9 1c 91	 fstp	 DWORD PTR [ecx+edx*4]
  000c6	eb c6		 jmp	 SHORT $L1306
$L1307:

; 182  : 
; 183  : 
; 184  :    PrevFrameParam_mblk->Energy = 0.0F;

  000c8	8b 55 fc	 mov	 edx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  000cb	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 185  : 
; 186  :    return 0;

  000d2	66 33 c0	 xor	 ax, ax
$L1296:

; 187  : }

  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 04 00	 ret	 4
_VoxInitPrevFrame@4 ENDP
_TEXT	ENDS
PUBLIC	_VoxFreePrevFrame@4
; Function compile flags: /Odt
;	COMDAT _VoxFreePrevFrame@4
_TEXT	SEGMENT
_PrevFrameParam_mblk$ = -4
_hPrevFrameParam_mblk$ = 8
_VoxFreePrevFrame@4 PROC NEAR				; COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 214  :    PrevFrameParam *PrevFrameParam_mblk=(PrevFrameParam *)*hPrevFrameParam_mblk;

  00004	8b 45 08	 mov	 eax, DWORD PTR _hPrevFrameParam_mblk$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	89 4d fc	 mov	 DWORD PTR _PrevFrameParam_mblk$[ebp], ecx

; 215  : 
; 216  :    if(*hPrevFrameParam_mblk) {

  0000c	8b 55 08	 mov	 edx, DWORD PTR _hPrevFrameParam_mblk$[ebp]
  0000f	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00012	74 63		 je	 SHORT $L1314

; 217  :       VOX_MEM_FREE(PrevFrameParam_mblk->Amp);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00017	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0001b	74 19		 je	 SHORT $L1315
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00020	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 _free
  00029	83 c4 04	 add	 esp, 4
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _PrevFrameParam_mblk$[ebp]
  0002f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$L1315:

; 218  :       VOX_MEM_FREE(PrevFrameParam_mblk->Lsf);

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00039	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  0003d	74 19		 je	 SHORT $L1317
  0003f	8b 55 fc	 mov	 edx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00042	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _free
  0004b	83 c4 04	 add	 esp, 4
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _PrevFrameParam_mblk$[ebp]
  00051	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
$L1317:

; 219  : 
; 220  :       VOX_MEM_FREE(*hPrevFrameParam_mblk);

  00058	8b 55 08	 mov	 edx, DWORD PTR _hPrevFrameParam_mblk$[ebp]
  0005b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0005e	74 17		 je	 SHORT $L1314
  00060	8b 45 08	 mov	 eax, DWORD PTR _hPrevFrameParam_mblk$[ebp]
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 _free
  0006b	83 c4 04	 add	 esp, 4
  0006e	8b 55 08	 mov	 edx, DWORD PTR _hPrevFrameParam_mblk$[ebp]
  00071	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L1314:

; 221  :    }
; 222  : 
; 223  :    return 0;

  00077	66 33 c0	 xor	 ax, ax

; 224  : }

  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
_VoxFreePrevFrame@4 ENDP
_TEXT	ENDS
PUBLIC	_VoxInitSubframe@4
; Function compile flags: /Odt
;	COMDAT _VoxInitSubframe@4
_TEXT	SEGMENT
_SubFrameParam_mblk$ = -4
_hSubFrameParam_mblk$ = 8
_VoxInitSubframe@4 PROC NEAR				; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 251  : 
; 252  :    SubFrameParam *SubFrameParam_mblk;
; 253  : 
; 254  :    if(VOX_MEM_INIT(SubFrameParam_mblk=*hSubFrameParam_mblk,1,sizeof(SubFrameParam))) 

  00004	6a 38		 push	 56			; 00000038H
  00006	6a 01		 push	 1
  00008	e8 00 00 00 00	 call	 _calloc
  0000d	83 c4 08	 add	 esp, 8
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _hSubFrameParam_mblk$[ebp]
  00013	89 01		 mov	 DWORD PTR [ecx], eax
  00015	8b 55 08	 mov	 edx, DWORD PTR _hSubFrameParam_mblk$[ebp]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	89 45 fc	 mov	 DWORD PTR _SubFrameParam_mblk$[ebp], eax
  0001d	83 7d fc 00	 cmp	 DWORD PTR _SubFrameParam_mblk$[ebp], 0
  00021	75 09		 jne	 SHORT $L1326

; 255  :       return 1;

  00023	66 b8 01 00	 mov	 ax, 1
  00027	e9 e6 00 00 00	 jmp	 $L1323
$L1326:

; 256  : 
; 257  :    if(VOX_MEM_INIT(SubFrameParam_mblk->Amp,MAXHARM,sizeof(float))) 

  0002c	6a 04		 push	 4
  0002e	6a 5a		 push	 90			; 0000005aH
  00030	e8 00 00 00 00	 call	 _calloc
  00035	83 c4 08	 add	 esp, 8
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0003b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00041	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  00045	75 09		 jne	 SHORT $L1328

; 258  :       return 1;

  00047	66 b8 01 00	 mov	 ax, 1
  0004b	e9 c2 00 00 00	 jmp	 $L1323
$L1328:

; 259  : 
; 260  :    if(VOX_MEM_INIT(SubFrameParam_mblk->Lsf,LPC_ORDER,sizeof(float))) 

  00050	6a 04		 push	 4
  00052	6a 0a		 push	 10			; 0000000aH
  00054	e8 00 00 00 00	 call	 _calloc
  00059	83 c4 08	 add	 esp, 8
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0005f	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00062	8b 55 fc	 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00065	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00069	75 09		 jne	 SHORT $L1330

; 261  :       return 1;

  0006b	66 b8 01 00	 mov	 ax, 1
  0006f	e9 9e 00 00 00	 jmp	 $L1323
$L1330:

; 262  : 
; 263  :    if(VOX_MEM_INIT(SubFrameParam_mblk->Amp_1,MAXHARM,sizeof(float)))

  00074	6a 04		 push	 4
  00076	6a 5a		 push	 90			; 0000005aH
  00078	e8 00 00 00 00	 call	 _calloc
  0007d	83 c4 08	 add	 esp, 8
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00083	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00086	8b 55 fc	 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00089	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  0008d	75 06		 jne	 SHORT $L1332

; 264  :       return 1;

  0008f	66 b8 01 00	 mov	 ax, 1
  00093	eb 7d		 jmp	 SHORT $L1323
$L1332:

; 265  : 
; 266  :    if(VOX_MEM_INIT(SubFrameParam_mblk->Lsf_1,LPC_ORDER,sizeof(float))) 

  00095	6a 04		 push	 4
  00097	6a 0a		 push	 10			; 0000000aH
  00099	e8 00 00 00 00	 call	 _calloc
  0009e	83 c4 08	 add	 esp, 8
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000a4	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  000a7	8b 55 fc	 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000aa	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  000ae	75 06		 jne	 SHORT $L1334

; 267  :       return 1;

  000b0	66 b8 01 00	 mov	 ax, 1
  000b4	eb 5c		 jmp	 SHORT $L1323
$L1334:

; 268  : 
; 269  :    if(VOX_MEM_INIT(SubFrameParam_mblk->AveLsf,LPC_ORDER,sizeof(float))) 

  000b6	6a 04		 push	 4
  000b8	6a 0a		 push	 10			; 0000000aH
  000ba	e8 00 00 00 00	 call	 _calloc
  000bf	83 c4 08	 add	 esp, 8
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000c5	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  000c8	8b 55 fc	 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000cb	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  000cf	75 06		 jne	 SHORT $L1336

; 270  :       return 1;

  000d1	66 b8 01 00	 mov	 ax, 1
  000d5	eb 3b		 jmp	 SHORT $L1323
$L1336:

; 271  : 
; 272  :    SubFrameParam_mblk->frameLEN = FRAME_LEN;

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  000da	66 c7 40 2c b4
	00		 mov	 WORD PTR [eax+44], 180	; 000000b4H

; 273  :    SubFrameParam_mblk->Pitch_1= 50.0F; /*INITIAL_PITCH; //### MUST FIX INITIAL PITCH */

  000e0	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000e3	c7 41 14 00 00
	48 42		 mov	 DWORD PTR [ecx+20], 1112014848 ; 42480000H

; 274  :    SubFrameParam_mblk->nSubs = SYNSUBFRAMES;

  000ea	8b 55 fc	 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000ed	66 c7 42 2e 03
	00		 mov	 WORD PTR [edx+46], 3

; 275  :    SubFrameParam_mblk->WarpFrame = 0;

  000f3	8b 45 fc	 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  000f6	66 c7 40 28 00
	00		 mov	 WORD PTR [eax+40], 0

; 276  :    SubFrameParam_mblk->totalWarpFrame = 1;

  000fc	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000ff	66 c7 41 2a 01
	00		 mov	 WORD PTR [ecx+42], 1

; 277  :    SubFrameParam_mblk->Hangover = HANGOVER_TIME;

  00105	8b 55 fc	 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00108	c7 42 34 0a 00
	00 00		 mov	 DWORD PTR [edx+52], 10	; 0000000aH

; 278  :    return 0;

  0010f	66 33 c0	 xor	 ax, ax
$L1323:

; 279  : }

  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 04 00	 ret	 4
_VoxInitSubframe@4 ENDP
_TEXT	ENDS
PUBLIC	_VoxFreeSubframe@4
; Function compile flags: /Odt
;	COMDAT _VoxFreeSubframe@4
_TEXT	SEGMENT
_SubFrameParam_mblk$ = -4
_hSubFrameParam_mblk$ = 8
_VoxFreeSubframe@4 PROC NEAR				; COMDAT

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 306  :    SubFrameParam *SubFrameParam_mblk=(SubFrameParam *)*hSubFrameParam_mblk;

  00004	8b 45 08	 mov	 eax, DWORD PTR _hSubFrameParam_mblk$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	89 4d fc	 mov	 DWORD PTR _SubFrameParam_mblk$[ebp], ecx

; 307  : 
; 308  :    if(*hSubFrameParam_mblk) {

  0000c	8b 55 08	 mov	 edx, DWORD PTR _hSubFrameParam_mblk$[ebp]
  0000f	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00012	0f 84 c9 00 00
	00		 je	 $L1342

; 309  :       VOX_MEM_FREE(SubFrameParam_mblk->Amp);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  0001b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0001f	74 19		 je	 SHORT $L1343
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00024	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00027	52		 push	 edx
  00028	e8 00 00 00 00	 call	 _free
  0002d	83 c4 04	 add	 esp, 4
  00030	8b 45 fc	 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00033	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$L1343:

; 310  :       VOX_MEM_FREE(SubFrameParam_mblk->Lsf);

  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0003d	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00041	74 19		 je	 SHORT $L1345
  00043	8b 55 fc	 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00046	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _free
  0004f	83 c4 04	 add	 esp, 4
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00055	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
$L1345:

; 311  :       VOX_MEM_FREE(SubFrameParam_mblk->Amp_1);

  0005c	8b 55 fc	 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0005f	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  00063	74 19		 je	 SHORT $L1347
  00065	8b 45 fc	 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00068	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 _free
  00071	83 c4 04	 add	 esp, 4
  00074	8b 55 fc	 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  00077	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
$L1347:

; 312  :       VOX_MEM_FREE(SubFrameParam_mblk->Lsf_1);

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00081	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00085	74 19		 je	 SHORT $L1349
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  0008a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0008d	52		 push	 edx
  0008e	e8 00 00 00 00	 call	 _free
  00093	83 c4 04	 add	 esp, 4
  00096	8b 45 fc	 mov	 eax, DWORD PTR _SubFrameParam_mblk$[ebp]
  00099	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
$L1349:

; 313  :       VOX_MEM_FREE(SubFrameParam_mblk->AveLsf);

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000a3	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  000a7	74 19		 je	 SHORT $L1351
  000a9	8b 55 fc	 mov	 edx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000ac	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _free
  000b5	83 c4 04	 add	 esp, 4
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _SubFrameParam_mblk$[ebp]
  000bb	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
$L1351:

; 314  : 
; 315  :       VOX_MEM_FREE(*hSubFrameParam_mblk);

  000c2	8b 55 08	 mov	 edx, DWORD PTR _hSubFrameParam_mblk$[ebp]
  000c5	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000c8	74 17		 je	 SHORT $L1342
  000ca	8b 45 08	 mov	 eax, DWORD PTR _hSubFrameParam_mblk$[ebp]
  000cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 _free
  000d5	83 c4 04	 add	 esp, 4
  000d8	8b 55 08	 mov	 edx, DWORD PTR _hSubFrameParam_mblk$[ebp]
  000db	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L1342:

; 316  :    }
; 317  :    return 0;

  000e1	66 33 c0	 xor	 ax, ax

; 318  : }

  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
_VoxFreeSubframe@4 ENDP
_TEXT	ENDS
END
