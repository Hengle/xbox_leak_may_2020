; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\asktoenv.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@GHNJGBAA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DI@OAFLKGF@?$CIpfASK?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfEnv?5?$CB?$DN?5NUL@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxAskToEnv@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxAskToEnv@16
PUBLIC	??_C@_0EB@GHNJGBAA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0DI@OAFLKGF@?$CIpfASK?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfEnv?5?$CB?$DN?5NUL@ ; `string'
EXTRN	__assert:NEAR
EXTRN	_VoxAsToCs@20:NEAR
EXTRN	_VoxCsToEnv@16:NEAR
EXTRN	_VoxDemultiplex@16:NEAR
EXTRN	_ASK2K@12:NEAR
EXTRN	_VoxKsToAs@12:NEAR
EXTRN	_PostFilter@12:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0EB@GHNJGBAA@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\asktoenv.c
CONST	SEGMENT
??_C@_0EB@GHNJGBAA@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\asktoenv.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@OAFLKGF@?$CIpfASK?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfEnv?5?$CB?$DN?5NUL@
CONST	SEGMENT
??_C@_0DI@OAFLKGF@?$CIpfASK?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfEnv?5?$CB?$DN?5NUL@ DB '('
	DB	'pfASK != NULL) && (pfEnv != NULL) && (pfPhase != NULL)', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxAskToEnv@16
_TEXT	SEGMENT
_fSW$ = -800
_fAS$ = -276
_fKS$ = -224
_fCS$ = -176
_pfASK$ = 8
_fLog2Gain$ = 12
_pfEnv$ = 16
_pfPhase$ = 20
_VoxAskToEnv@16 PROC NEAR				; COMDAT

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 03 00
	00		 sub	 esp, 800		; 00000320H

; 71   : STACK_INIT
; 72   :    float  fCS[ORDER_CEPSTRAL];
; 73   :    float  fSW[CSENV_NFFT+2];
; 74   :    float  fKS[LPC_ORDER];
; 75   :    float  fAS[LPC_ORDER+1];
; 76   : STACK_INIT_END
; 77   : 
; 78   :    STACK_ATTACH(float *, fCS)
; 79   :    STACK_ATTACH(float *, fSW)
; 80   :    STACK_ATTACH(float *, fKS)
; 81   :    STACK_ATTACH(float *, fAS)
; 82   : 
; 83   :    STACK_START
; 84   : 
; 85   :    assert((pfASK != NULL) && (pfEnv != NULL) && (pfPhase != NULL));

  00009	83 7d 08 00	 cmp	 DWORD PTR _pfASK$[ebp], 0
  0000d	74 0c		 je	 SHORT $L999
  0000f	83 7d 10 00	 cmp	 DWORD PTR _pfEnv$[ebp], 0
  00013	74 06		 je	 SHORT $L999
  00015	83 7d 14 00	 cmp	 DWORD PTR _pfPhase$[ebp], 0
  00019	75 14		 jne	 SHORT $L1000
$L999:
  0001b	6a 55		 push	 85			; 00000055H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@GHNJGBAA@c?3?2xbox?2private?2windows?2directx?2@
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@OAFLKGF@?$CIpfASK?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfEnv?5?$CB?$DN?5NUL@
  00027	e8 00 00 00 00	 call	 __assert
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1000:

; 86   : 
; 87   :    /*-------------------------------------------------------------------
; 88   :      Compute the predictor coefficients from the ASKs
; 89   :    -------------------------------------------------------------------*/
; 90   :    ASK2K(LPC_ORDER, pfASK, fKS );

  0002f	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _fKS$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 08	 mov	 edx, DWORD PTR _pfASK$[ebp]
  00039	52		 push	 edx
  0003a	6a 0c		 push	 12			; 0000000cH
  0003c	e8 00 00 00 00	 call	 _ASK2K@12

; 91   :    VoxKsToAs(fKS, fAS, LPC_ORDER);

  00041	6a 0c		 push	 12			; 0000000cH
  00043	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _fAS$[ebp]
  00049	50		 push	 eax
  0004a	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _fKS$[ebp]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _VoxKsToAs@12

; 92   :  
; 93   :    /*-------------------------------------------------------------------
; 94   :      Compute amplitude and phase envelopes from cepstral coefficients
; 95   :    -------------------------------------------------------------------*/
; 96   :    VoxAsToCs(fLog2Gain, fAS, LPC_ORDER, fCS, ORDER_CEPSTRAL);

  00056	6a 2c		 push	 44			; 0000002cH
  00058	8d 95 50 ff ff
	ff		 lea	 edx, DWORD PTR _fCS$[ebp]
  0005e	52		 push	 edx
  0005f	6a 0c		 push	 12			; 0000000cH
  00061	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _fAS$[ebp]
  00067	50		 push	 eax
  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _fLog2Gain$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 _VoxAsToCs@20

; 97   :  
; 98   :    VoxCsToEnv(fCS, ORDER_CEPSTRAL, CSENV_FFT_ORDER, fSW);

  00071	8d 95 e0 fc ff
	ff		 lea	 edx, DWORD PTR _fSW$[ebp]
  00077	52		 push	 edx
  00078	6a 07		 push	 7
  0007a	6a 2c		 push	 44			; 0000002cH
  0007c	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _fCS$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _VoxCsToEnv@16

; 99   : 
; 100  :    VoxDemultiplex(fSW,  pfEnv, pfPhase, CSENV_NFFT_2);

  00088	6a 40		 push	 64			; 00000040H
  0008a	8b 4d 14	 mov	 ecx, DWORD PTR _pfPhase$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 55 10	 mov	 edx, DWORD PTR _pfEnv$[ebp]
  00091	52		 push	 edx
  00092	8d 85 e0 fc ff
	ff		 lea	 eax, DWORD PTR _fSW$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 _VoxDemultiplex@16

; 101  : 
; 102  :    /*-------------------------------------------------------------------
; 103  :      Postfilter the envelope.
; 104  :    -------------------------------------------------------------------*/
; 105  :    PostFilter(pfEnv, fLog2Gain, fKS);

  0009e	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _fKS$[ebp]
  000a4	51		 push	 ecx
  000a5	8b 55 0c	 mov	 edx, DWORD PTR _fLog2Gain$[ebp]
  000a8	52		 push	 edx
  000a9	8b 45 10	 mov	 eax, DWORD PTR _pfEnv$[ebp]
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 _PostFilter@12

; 106  : 
; 107  :    STACK_END
; 108  : }

  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 10 00	 ret	 16			; 00000010H
_VoxAskToEnv@16 ENDP
_TEXT	ENDS
END
