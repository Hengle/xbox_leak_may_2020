; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\corrfunc.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _corrfunc@36
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_corrfunc@36
PUBLIC	__real@3fe0000000000000
EXTRN	_cosTBL_32:DWORD
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@3fe0000000000000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\corrfunc.c
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _corrfunc@36
_TEXT	SEGMENT
tv92 = -32
_j$ = -24
_fSum_k$ = -20
_iIndex$ = -16
_ipitch$ = -12
_mult_v1$ = -8
_lIndex$ = -4
_dpitch$ = 8
_fpitch$ = 12
_fHiEdge$ = 16
_fRefinedMax$ = 20
_iBpeaks$ = 24
_pfFltPwr$ = 28
_fFltEnergy$ = 32
_iPeakFrq$ = 36
_fRefinedPeriod$ = 40
_corrfunc@36 PROC NEAR					; COMDAT

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi

; 59   :   float fSum_k;
; 60   : 
; 61   :   int j;
; 62   :   unsigned long lIndex;
; 63   :   int iIndex;
; 64   :   unsigned long ipitch;
; 65   :   unsigned long mult_v1;
; 66   : 
; 67   :   /*** Refine the pitch about the previously estimated value ***/
; 68   :   
; 69   :   mult_v1= (unsigned long) (1<<F0_SHIFT_BITS );

  00007	c7 45 f8 00 10
	00 00		 mov	 DWORD PTR _mult_v1$[ebp], 4096 ; 00001000H
$L634:

; 70   :   
; 71   :   while (fpitch <= fHiEdge)

  0000e	d9 45 0c	 fld	 DWORD PTR _fpitch$[ebp]
  00011	d8 5d 10	 fcomp	 DWORD PTR _fHiEdge$[ebp]
  00014	df e0		 fnstsw	 ax
  00016	f6 c4 41	 test	 ah, 65			; 00000041H
  00019	0f 8a af 00 00
	00		 jp	 $L625

; 72   :     { 
; 73   :       ipitch =(unsigned long)(fpitch*mult_v1+0.5);

  0001f	8b 45 f8	 mov	 eax, DWORD PTR _mult_v1$[ebp]
  00022	89 45 e0	 mov	 DWORD PTR tv92[ebp], eax
  00025	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv92[ebp+4], 0
  0002c	df 6d e0	 fild	 QWORD PTR tv92[ebp]
  0002f	d8 4d 0c	 fmul	 DWORD PTR _fpitch$[ebp]
  00032	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00038	e8 00 00 00 00	 call	 __ftol2
  0003d	89 45 f4	 mov	 DWORD PTR _ipitch$[ebp], eax

; 74   :       fSum_k = fFltEnergy;

  00040	8b 4d 20	 mov	 ecx, DWORD PTR _fFltEnergy$[ebp]
  00043	89 4d ec	 mov	 DWORD PTR _fSum_k$[ebp], ecx

; 75   : 
; 76   :       for (j = 0; j < iBpeaks; j++)

  00046	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0004d	eb 09		 jmp	 SHORT $L637
$L638:
  0004f	8b 55 e8	 mov	 edx, DWORD PTR _j$[ebp]
  00052	83 c2 01	 add	 edx, 1
  00055	89 55 e8	 mov	 DWORD PTR _j$[ebp], edx
$L637:
  00058	8b 45 e8	 mov	 eax, DWORD PTR _j$[ebp]
  0005b	3b 45 18	 cmp	 eax, DWORD PTR _iBpeaks$[ebp]
  0005e	7d 41		 jge	 SHORT $L639

; 77   :         {  
; 78   :           lIndex = (ipitch*iPeakFrq[j])+ OFFSET_ROUND;

  00060	8b 4d e8	 mov	 ecx, DWORD PTR _j$[ebp]
  00063	8b 55 24	 mov	 edx, DWORD PTR _iPeakFrq$[ebp]
  00066	8b 45 f4	 mov	 eax, DWORD PTR _ipitch$[ebp]
  00069	0f af 04 8a	 imul	 eax, DWORD PTR [edx+ecx*4]
  0006d	05 00 00 80 00	 add	 eax, 8388608		; 00800000H
  00072	89 45 fc	 mov	 DWORD PTR _lIndex$[ebp], eax

; 79   :           iIndex = (int)(lIndex >>N_SHIFTS) & TRIG_TABLE_MASK;

  00075	8b 4d fc	 mov	 ecx, DWORD PTR _lIndex$[ebp]
  00078	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0007b	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00081	89 4d f0	 mov	 DWORD PTR _iIndex$[ebp], ecx

; 80   :           fSum_k += pfFltPwr[j]*cosTBL_32[iIndex];

  00084	8b 55 e8	 mov	 edx, DWORD PTR _j$[ebp]
  00087	8b 45 1c	 mov	 eax, DWORD PTR _pfFltPwr$[ebp]
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  0008d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _cosTBL_32
  00093	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00096	d8 0c 8e	 fmul	 DWORD PTR [esi+ecx*4]
  00099	d8 45 ec	 fadd	 DWORD PTR _fSum_k$[ebp]
  0009c	d9 5d ec	 fstp	 DWORD PTR _fSum_k$[ebp]

; 81   :         }

  0009f	eb ae		 jmp	 SHORT $L638
$L639:

; 82   : 
; 83   :       /*** Test for a correlation peak and store winning pitch period ***/
; 84   :       if (fSum_k > *fRefinedMax)

  000a1	8b 55 14	 mov	 edx, DWORD PTR _fRefinedMax$[ebp]
  000a4	d9 45 ec	 fld	 DWORD PTR _fSum_k$[ebp]
  000a7	d8 1a		 fcomp	 DWORD PTR [edx]
  000a9	df e0		 fnstsw	 ax
  000ab	f6 c4 41	 test	 ah, 65			; 00000041H
  000ae	75 10		 jne	 SHORT $L641

; 85   :         {
; 86   :           *fRefinedMax = fSum_k;

  000b0	8b 45 14	 mov	 eax, DWORD PTR _fRefinedMax$[ebp]
  000b3	8b 4d ec	 mov	 ecx, DWORD PTR _fSum_k$[ebp]
  000b6	89 08		 mov	 DWORD PTR [eax], ecx

; 87   :           *fRefinedPeriod = fpitch;   /** 1 sample ahead **/

  000b8	8b 55 28	 mov	 edx, DWORD PTR _fRefinedPeriod$[ebp]
  000bb	8b 45 0c	 mov	 eax, DWORD PTR _fpitch$[ebp]
  000be	89 02		 mov	 DWORD PTR [edx], eax
$L641:

; 88   :         }
; 89   :       fpitch += dpitch; 

  000c0	d9 45 0c	 fld	 DWORD PTR _fpitch$[ebp]
  000c3	d8 45 08	 fadd	 DWORD PTR _dpitch$[ebp]
  000c6	d9 5d 0c	 fstp	 DWORD PTR _fpitch$[ebp]

; 90   :     }

  000c9	e9 40 ff ff ff	 jmp	 $L634
$L625:

; 91   : 
; 92   :  
; 93   : } /* corrfunc.c*/

  000ce	5e		 pop	 esi
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 24 00	 ret	 36			; 00000024H
_corrfunc@36 ENDP
_TEXT	ENDS
END
