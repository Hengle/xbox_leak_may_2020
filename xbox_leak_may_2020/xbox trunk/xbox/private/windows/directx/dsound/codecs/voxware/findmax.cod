; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\findmax.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@MONOPMIN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DE@MLOCJEBO@pfX?5?$CB?$DN?5NULL?5?$CG?$CG?5piMaxIndex?5?$CB?$DN?5NUL@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@OPIEIOHJ@iLength?5?$DO?$DN?51?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _FindMaxValueFlt@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_FindMaxValueFlt@16
PUBLIC	??_C@_0EA@MONOPMIN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0DE@MLOCJEBO@pfX?5?$CB?$DN?5NULL?5?$CG?$CG?5piMaxIndex?5?$CB?$DN?5NUL@ ; `string'
PUBLIC	??_C@_0N@OPIEIOHJ@iLength?5?$DO?$DN?51?$AA@	; `string'
EXTRN	__assert:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0EA@MONOPMIN@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\findmax.c
CONST	SEGMENT
??_C@_0EA@MONOPMIN@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\findmax.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MLOCJEBO@pfX?5?$CB?$DN?5NULL?5?$CG?$CG?5piMaxIndex?5?$CB?$DN?5NUL@
CONST	SEGMENT
??_C@_0DE@MLOCJEBO@pfX?5?$CB?$DN?5NULL?5?$CG?$CG?5piMaxIndex?5?$CB?$DN?5NUL@ DB 'p'
	DB	'fX != NULL && piMaxIndex != NULL && pfXmax != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OPIEIOHJ@iLength?5?$DO?$DN?51?$AA@
CONST	SEGMENT
??_C@_0N@OPIEIOHJ@iLength?5?$DO?$DN?51?$AA@ DB 'iLength >= 1', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _FindMaxValueFlt@16
_TEXT	SEGMENT
tv225 = -36
tv223 = -32
_plElement$ = -28
_iIndexMin$ = -24
_lMax$ = -20
_lMin$ = -16
_uMax$ = -12
_i$ = -8
_iIndexMax$ = -4
_pfX$ = 8
_iLength$ = 12
_piMaxIndex$ = 16
_pfXmax$ = 20
_FindMaxValueFlt@16 PROC NEAR				; COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 86   :   int   i;
; 87   :   long  *plElement;
; 88   :   long   lMax;
; 89   :   long   lMin;
; 90   :   int   iIndexMax;
; 91   :   int   iIndexMin;
; 92   :   union dt
; 93   :   {
; 94   :     float f;
; 95   :     long   l;
; 96   :   } uMax;
; 97   : 
; 98   : 
; 99   :   /* do error checking */
; 100  :   assert(pfX != NULL && piMaxIndex != NULL && pfXmax != NULL);

  00006	83 7d 08 00	 cmp	 DWORD PTR _pfX$[ebp], 0
  0000a	74 0c		 je	 SHORT $L955
  0000c	83 7d 10 00	 cmp	 DWORD PTR _piMaxIndex$[ebp], 0
  00010	74 06		 je	 SHORT $L955
  00012	83 7d 14 00	 cmp	 DWORD PTR _pfXmax$[ebp], 0
  00016	75 14		 jne	 SHORT $L956
$L955:
  00018	6a 64		 push	 100			; 00000064H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MONOPMIN@c?3?2xbox?2private?2windows?2directx?2@
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@MLOCJEBO@pfX?5?$CB?$DN?5NULL?5?$CG?$CG?5piMaxIndex?5?$CB?$DN?5NUL@
  00024	e8 00 00 00 00	 call	 __assert
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
$L956:

; 101  :   assert(iLength >= 1);

  0002c	83 7d 0c 01	 cmp	 DWORD PTR _iLength$[ebp], 1
  00030	7d 14		 jge	 SHORT $L957
  00032	6a 65		 push	 101			; 00000065H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MONOPMIN@c?3?2xbox?2private?2windows?2directx?2@
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OPIEIOHJ@iLength?5?$DO?$DN?51?$AA@
  0003e	e8 00 00 00 00	 call	 __assert
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
$L957:

; 102  : 
; 103  :   /* do block comparison */
; 104  :   plElement = (long *)pfX;

  00046	8b 55 08	 mov	 edx, DWORD PTR _pfX$[ebp]
  00049	89 55 e4	 mov	 DWORD PTR _plElement$[ebp], edx

; 105  :   lMin = ( lMax = plElement[0] );

  0004c	8b 45 e4	 mov	 eax, DWORD PTR _plElement$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	89 4d ec	 mov	 DWORD PTR _lMax$[ebp], ecx
  00054	8b 55 ec	 mov	 edx, DWORD PTR _lMax$[ebp]
  00057	89 55 f0	 mov	 DWORD PTR _lMin$[ebp], edx

; 106  :   iIndexMax = iIndexMin = 0;

  0005a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iIndexMin$[ebp], 0
  00061	8b 45 e8	 mov	 eax, DWORD PTR _iIndexMin$[ebp]
  00064	89 45 fc	 mov	 DWORD PTR _iIndexMax$[ebp], eax

; 107  :   for ( i = 1; ( ( lMax < 0 ) && ( ( i + 4 ) <= iLength ) ); i += 4 )

  00067	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0006e	eb 09		 jmp	 SHORT $L918
$L919:
  00070	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00073	83 c1 04	 add	 ecx, 4
  00076	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L918:
  00079	83 7d ec 00	 cmp	 DWORD PTR _lMax$[ebp], 0
  0007d	0f 8d 32 01 00
	00		 jge	 $L920
  00083	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00086	83 c2 04	 add	 edx, 4
  00089	3b 55 0c	 cmp	 edx, DWORD PTR _iLength$[ebp]
  0008c	0f 8f 23 01 00
	00		 jg	 $L920

; 108  :   {
; 109  :     if ( plElement[i  ] > lMax ) {lMax = plElement[i  ];  iIndexMax = i;}

  00092	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00095	8b 4d e4	 mov	 ecx, DWORD PTR _plElement$[ebp]
  00098	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0009b	3b 55 ec	 cmp	 edx, DWORD PTR _lMax$[ebp]
  0009e	7e 12		 jle	 SHORT $L921
  000a0	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000a3	8b 4d e4	 mov	 ecx, DWORD PTR _plElement$[ebp]
  000a6	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000a9	89 55 ec	 mov	 DWORD PTR _lMax$[ebp], edx
  000ac	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000af	89 45 fc	 mov	 DWORD PTR _iIndexMax$[ebp], eax
$L921:

; 110  :     if ( plElement[i  ] < lMin ) {lMin = plElement[i  ];  iIndexMin = i;}

  000b2	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000b5	8b 55 e4	 mov	 edx, DWORD PTR _plElement$[ebp]
  000b8	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  000bb	3b 45 f0	 cmp	 eax, DWORD PTR _lMin$[ebp]
  000be	7d 12		 jge	 SHORT $L922
  000c0	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000c3	8b 55 e4	 mov	 edx, DWORD PTR _plElement$[ebp]
  000c6	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  000c9	89 45 f0	 mov	 DWORD PTR _lMin$[ebp], eax
  000cc	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000cf	89 4d e8	 mov	 DWORD PTR _iIndexMin$[ebp], ecx
$L922:

; 111  :     if ( plElement[i+1] > lMax ) {lMax = plElement[i+1];  iIndexMax = i+1;}

  000d2	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000d5	8b 45 e4	 mov	 eax, DWORD PTR _plElement$[ebp]
  000d8	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  000dc	3b 4d ec	 cmp	 ecx, DWORD PTR _lMax$[ebp]
  000df	7e 16		 jle	 SHORT $L923
  000e1	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000e4	8b 45 e4	 mov	 eax, DWORD PTR _plElement$[ebp]
  000e7	8b 4c 90 04	 mov	 ecx, DWORD PTR [eax+edx*4+4]
  000eb	89 4d ec	 mov	 DWORD PTR _lMax$[ebp], ecx
  000ee	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000f1	83 c2 01	 add	 edx, 1
  000f4	89 55 fc	 mov	 DWORD PTR _iIndexMax$[ebp], edx
$L923:

; 112  :     if ( plElement[i+1] < lMin ) {lMin = plElement[i+1];  iIndexMin = i+1;}

  000f7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000fa	8b 4d e4	 mov	 ecx, DWORD PTR _plElement$[ebp]
  000fd	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  00101	3b 55 f0	 cmp	 edx, DWORD PTR _lMin$[ebp]
  00104	7d 16		 jge	 SHORT $L924
  00106	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00109	8b 4d e4	 mov	 ecx, DWORD PTR _plElement$[ebp]
  0010c	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  00110	89 55 f0	 mov	 DWORD PTR _lMin$[ebp], edx
  00113	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00116	83 c0 01	 add	 eax, 1
  00119	89 45 e8	 mov	 DWORD PTR _iIndexMin$[ebp], eax
$L924:

; 113  :     if ( plElement[i+2] > lMax ) {lMax = plElement[i+2];  iIndexMax = i+2;}

  0011c	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0011f	8b 55 e4	 mov	 edx, DWORD PTR _plElement$[ebp]
  00122	8b 44 8a 08	 mov	 eax, DWORD PTR [edx+ecx*4+8]
  00126	3b 45 ec	 cmp	 eax, DWORD PTR _lMax$[ebp]
  00129	7e 16		 jle	 SHORT $L925
  0012b	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0012e	8b 55 e4	 mov	 edx, DWORD PTR _plElement$[ebp]
  00131	8b 44 8a 08	 mov	 eax, DWORD PTR [edx+ecx*4+8]
  00135	89 45 ec	 mov	 DWORD PTR _lMax$[ebp], eax
  00138	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0013b	83 c1 02	 add	 ecx, 2
  0013e	89 4d fc	 mov	 DWORD PTR _iIndexMax$[ebp], ecx
$L925:

; 114  :     if ( plElement[i+2] < lMin ) {lMin = plElement[i+2];  iIndexMin = i+2;}

  00141	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00144	8b 45 e4	 mov	 eax, DWORD PTR _plElement$[ebp]
  00147	8b 4c 90 08	 mov	 ecx, DWORD PTR [eax+edx*4+8]
  0014b	3b 4d f0	 cmp	 ecx, DWORD PTR _lMin$[ebp]
  0014e	7d 16		 jge	 SHORT $L926
  00150	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00153	8b 45 e4	 mov	 eax, DWORD PTR _plElement$[ebp]
  00156	8b 4c 90 08	 mov	 ecx, DWORD PTR [eax+edx*4+8]
  0015a	89 4d f0	 mov	 DWORD PTR _lMin$[ebp], ecx
  0015d	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00160	83 c2 02	 add	 edx, 2
  00163	89 55 e8	 mov	 DWORD PTR _iIndexMin$[ebp], edx
$L926:

; 115  :     if ( plElement[i+3] > lMax ) {lMax = plElement[i+3];  iIndexMax = i+3;}

  00166	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00169	8b 4d e4	 mov	 ecx, DWORD PTR _plElement$[ebp]
  0016c	8b 54 81 0c	 mov	 edx, DWORD PTR [ecx+eax*4+12]
  00170	3b 55 ec	 cmp	 edx, DWORD PTR _lMax$[ebp]
  00173	7e 16		 jle	 SHORT $L927
  00175	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00178	8b 4d e4	 mov	 ecx, DWORD PTR _plElement$[ebp]
  0017b	8b 54 81 0c	 mov	 edx, DWORD PTR [ecx+eax*4+12]
  0017f	89 55 ec	 mov	 DWORD PTR _lMax$[ebp], edx
  00182	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00185	83 c0 03	 add	 eax, 3
  00188	89 45 fc	 mov	 DWORD PTR _iIndexMax$[ebp], eax
$L927:

; 116  :     if ( plElement[i+3] < lMin ) {lMin = plElement[i+3];  iIndexMin = i+3;}

  0018b	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0018e	8b 55 e4	 mov	 edx, DWORD PTR _plElement$[ebp]
  00191	8b 44 8a 0c	 mov	 eax, DWORD PTR [edx+ecx*4+12]
  00195	3b 45 f0	 cmp	 eax, DWORD PTR _lMin$[ebp]
  00198	7d 16		 jge	 SHORT $L928
  0019a	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0019d	8b 55 e4	 mov	 edx, DWORD PTR _plElement$[ebp]
  001a0	8b 44 8a 0c	 mov	 eax, DWORD PTR [edx+ecx*4+12]
  001a4	89 45 f0	 mov	 DWORD PTR _lMin$[ebp], eax
  001a7	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001aa	83 c1 03	 add	 ecx, 3
  001ad	89 4d e8	 mov	 DWORD PTR _iIndexMin$[ebp], ecx
$L928:

; 117  :   }

  001b0	e9 bb fe ff ff	 jmp	 $L919
$L920:

; 118  :   for ( ; ( ( lMax < 0 ) && ( i < iLength ) ); i++ )

  001b5	eb 09		 jmp	 SHORT $L929
$L930:
  001b7	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  001ba	83 c2 01	 add	 edx, 1
  001bd	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L929:
  001c0	83 7d ec 00	 cmp	 DWORD PTR _lMax$[ebp], 0
  001c4	7d 4a		 jge	 SHORT $L931
  001c6	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001c9	3b 45 0c	 cmp	 eax, DWORD PTR _iLength$[ebp]
  001cc	7d 42		 jge	 SHORT $L931

; 119  :   {
; 120  :     if ( plElement[i] > lMax ) {lMax = plElement[i]; iIndexMax = i;}

  001ce	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001d1	8b 55 e4	 mov	 edx, DWORD PTR _plElement$[ebp]
  001d4	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  001d7	3b 45 ec	 cmp	 eax, DWORD PTR _lMax$[ebp]
  001da	7e 12		 jle	 SHORT $L932
  001dc	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001df	8b 55 e4	 mov	 edx, DWORD PTR _plElement$[ebp]
  001e2	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  001e5	89 45 ec	 mov	 DWORD PTR _lMax$[ebp], eax
  001e8	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001eb	89 4d fc	 mov	 DWORD PTR _iIndexMax$[ebp], ecx
$L932:

; 121  :     if ( plElement[i] < lMin ) {lMin = plElement[i]; iIndexMin = i;}

  001ee	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  001f1	8b 45 e4	 mov	 eax, DWORD PTR _plElement$[ebp]
  001f4	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  001f7	3b 4d f0	 cmp	 ecx, DWORD PTR _lMin$[ebp]
  001fa	7d 12		 jge	 SHORT $L933
  001fc	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  001ff	8b 45 e4	 mov	 eax, DWORD PTR _plElement$[ebp]
  00202	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00205	89 4d f0	 mov	 DWORD PTR _lMin$[ebp], ecx
  00208	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0020b	89 55 e8	 mov	 DWORD PTR _iIndexMin$[ebp], edx
$L933:

; 122  :   }

  0020e	eb a7		 jmp	 SHORT $L930
$L931:

; 123  :   for ( ; ( i + 4 ) <= iLength; i += 4 )

  00210	eb 09		 jmp	 SHORT $L934
$L935:
  00212	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00215	83 c0 04	 add	 eax, 4
  00218	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L934:
  0021b	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0021e	83 c1 04	 add	 ecx, 4
  00221	3b 4d 0c	 cmp	 ecx, DWORD PTR _iLength$[ebp]
  00224	0f 8f 94 00 00
	00		 jg	 $L936

; 124  :   {
; 125  :     if ( plElement[i  ] > lMax ){ lMax = plElement[i  ];iIndexMax = i;}

  0022a	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0022d	8b 45 e4	 mov	 eax, DWORD PTR _plElement$[ebp]
  00230	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00233	3b 4d ec	 cmp	 ecx, DWORD PTR _lMax$[ebp]
  00236	7e 12		 jle	 SHORT $L937
  00238	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0023b	8b 45 e4	 mov	 eax, DWORD PTR _plElement$[ebp]
  0023e	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00241	89 4d ec	 mov	 DWORD PTR _lMax$[ebp], ecx
  00244	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00247	89 55 fc	 mov	 DWORD PTR _iIndexMax$[ebp], edx
$L937:

; 126  :     if ( plElement[i+1] > lMax ){ lMax = plElement[i+1];iIndexMax = i+1;}

  0024a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0024d	8b 4d e4	 mov	 ecx, DWORD PTR _plElement$[ebp]
  00250	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  00254	3b 55 ec	 cmp	 edx, DWORD PTR _lMax$[ebp]
  00257	7e 16		 jle	 SHORT $L938
  00259	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0025c	8b 4d e4	 mov	 ecx, DWORD PTR _plElement$[ebp]
  0025f	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  00263	89 55 ec	 mov	 DWORD PTR _lMax$[ebp], edx
  00266	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00269	83 c0 01	 add	 eax, 1
  0026c	89 45 fc	 mov	 DWORD PTR _iIndexMax$[ebp], eax
$L938:

; 127  :     if ( plElement[i+2] > lMax ){ lMax = plElement[i+2];iIndexMax = i+2;}

  0026f	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00272	8b 55 e4	 mov	 edx, DWORD PTR _plElement$[ebp]
  00275	8b 44 8a 08	 mov	 eax, DWORD PTR [edx+ecx*4+8]
  00279	3b 45 ec	 cmp	 eax, DWORD PTR _lMax$[ebp]
  0027c	7e 16		 jle	 SHORT $L939
  0027e	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00281	8b 55 e4	 mov	 edx, DWORD PTR _plElement$[ebp]
  00284	8b 44 8a 08	 mov	 eax, DWORD PTR [edx+ecx*4+8]
  00288	89 45 ec	 mov	 DWORD PTR _lMax$[ebp], eax
  0028b	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0028e	83 c1 02	 add	 ecx, 2
  00291	89 4d fc	 mov	 DWORD PTR _iIndexMax$[ebp], ecx
$L939:

; 128  :     if ( plElement[i+3] > lMax ){ lMax = plElement[i+3];iIndexMax = i+3;}

  00294	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00297	8b 45 e4	 mov	 eax, DWORD PTR _plElement$[ebp]
  0029a	8b 4c 90 0c	 mov	 ecx, DWORD PTR [eax+edx*4+12]
  0029e	3b 4d ec	 cmp	 ecx, DWORD PTR _lMax$[ebp]
  002a1	7e 16		 jle	 SHORT $L940
  002a3	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  002a6	8b 45 e4	 mov	 eax, DWORD PTR _plElement$[ebp]
  002a9	8b 4c 90 0c	 mov	 ecx, DWORD PTR [eax+edx*4+12]
  002ad	89 4d ec	 mov	 DWORD PTR _lMax$[ebp], ecx
  002b0	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  002b3	83 c2 03	 add	 edx, 3
  002b6	89 55 fc	 mov	 DWORD PTR _iIndexMax$[ebp], edx
$L940:

; 129  :   }

  002b9	e9 54 ff ff ff	 jmp	 $L935
$L936:

; 130  :   for ( ; i < iLength; i++ ) 

  002be	eb 09		 jmp	 SHORT $L941
$L942:
  002c0	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  002c3	83 c0 01	 add	 eax, 1
  002c6	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L941:
  002c9	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  002cc	3b 4d 0c	 cmp	 ecx, DWORD PTR _iLength$[ebp]
  002cf	7d 22		 jge	 SHORT $L943

; 131  :     if ( plElement[i] > lMax ) {

  002d1	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  002d4	8b 45 e4	 mov	 eax, DWORD PTR _plElement$[ebp]
  002d7	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  002da	3b 4d ec	 cmp	 ecx, DWORD PTR _lMax$[ebp]
  002dd	7e 12		 jle	 SHORT $L944

; 132  :        lMax = plElement[i];

  002df	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  002e2	8b 45 e4	 mov	 eax, DWORD PTR _plElement$[ebp]
  002e5	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  002e8	89 4d ec	 mov	 DWORD PTR _lMax$[ebp], ecx

; 133  :        iIndexMax = i;

  002eb	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  002ee	89 55 fc	 mov	 DWORD PTR _iIndexMax$[ebp], edx
$L944:

; 134  :     }
; 135  : 
; 136  :   uMax.l = ( lMax >= 0 ) ? lMax : lMin;

  002f1	eb cd		 jmp	 SHORT $L942
$L943:
  002f3	83 7d ec 00	 cmp	 DWORD PTR _lMax$[ebp], 0
  002f7	7c 08		 jl	 SHORT $L958
  002f9	8b 45 ec	 mov	 eax, DWORD PTR _lMax$[ebp]
  002fc	89 45 e0	 mov	 DWORD PTR tv223[ebp], eax
  002ff	eb 06		 jmp	 SHORT $L959
$L958:
  00301	8b 4d f0	 mov	 ecx, DWORD PTR _lMin$[ebp]
  00304	89 4d e0	 mov	 DWORD PTR tv223[ebp], ecx
$L959:
  00307	8b 55 e0	 mov	 edx, DWORD PTR tv223[ebp]
  0030a	89 55 f4	 mov	 DWORD PTR _uMax$[ebp], edx

; 137  :   *piMaxIndex = ( lMax >= 0 ) ? iIndexMax : iIndexMin;

  0030d	83 7d ec 00	 cmp	 DWORD PTR _lMax$[ebp], 0
  00311	7c 08		 jl	 SHORT $L960
  00313	8b 45 fc	 mov	 eax, DWORD PTR _iIndexMax$[ebp]
  00316	89 45 dc	 mov	 DWORD PTR tv225[ebp], eax
  00319	eb 06		 jmp	 SHORT $L961
$L960:
  0031b	8b 4d e8	 mov	 ecx, DWORD PTR _iIndexMin$[ebp]
  0031e	89 4d dc	 mov	 DWORD PTR tv225[ebp], ecx
$L961:
  00321	8b 55 10	 mov	 edx, DWORD PTR _piMaxIndex$[ebp]
  00324	8b 45 dc	 mov	 eax, DWORD PTR tv225[ebp]
  00327	89 02		 mov	 DWORD PTR [edx], eax

; 138  :   *pfXmax = uMax.f;

  00329	8b 4d 14	 mov	 ecx, DWORD PTR _pfXmax$[ebp]
  0032c	8b 55 f4	 mov	 edx, DWORD PTR _uMax$[ebp]
  0032f	89 11		 mov	 DWORD PTR [ecx], edx

; 139  : }

  00331	8b e5		 mov	 esp, ebp
  00333	5d		 pop	 ebp
  00334	c2 10 00	 ret	 16			; 00000010H
_FindMaxValueFlt@16 ENDP
_TEXT	ENDS
END
