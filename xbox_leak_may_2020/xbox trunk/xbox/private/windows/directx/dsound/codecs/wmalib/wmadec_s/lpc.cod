; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\lpc.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT ??_C@_0EE@FFMKPEON@c?3?2xbox?2private?2windows?2directx?2@
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
;	COMDAT ??_C@_0CF@ECGGHIKF@?$CFs?$CI?$CFd?$CJ?5?3?5?$CK?$CK?$CK?5TRACE?5?$CK?$CK?$CK?5code?5?$DN?50x@
WMADEC_RD	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
WMADEC_RW	SEGMENT DWORD USE32 PUBLIC ''
WMADEC_RW	ENDS
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _LOG2@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT @ByteSwap@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _prvPq2lpc_XDS@20
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _prvConvolve_odd_XDS@28
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _prvConvolve_XDS@28
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _prvLsp2pq_XDS@20
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _auLsp2lpc_XDS@16
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _prvInitInverseQuadRootTable_XDS@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _InverseQuadRootI@4
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _InverseQuadRootOfSumSquares@8
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _prvDoLpc4_XDS@24
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _prvLpcJLoopBottom_XDS@36
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _prvLpcToSpectrum_XDS@12
WMADEC	SEGMENT PARA USE32 PUBLIC ''
WMADEC	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, WMADEC_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_DSoundBuildNumberD
PUBLIC	_g_rgiLsfReconLevel_XDS
PUBLIC	_lpc_trig2048_XDS
_DATA	SEGMENT
COMM	_g_InvQuadRootExponent:DWORD:0100H
COMM	_g_InvQuadRootMantissa:DWORD:01000H
_DATA	ENDS
WMADEC_RD	SEGMENT
_WMA_OK	DD	00H
_WMA_S_FALSE DD	01H
_WMA_S_BUFUNDERFLOW DD 02H
_WMA_S_NEWPACKET DD 03H
_WMA_S_NO_MORE_FRAME DD 04H
_WMA_S_DEFAULT DD 05H
_WMA_S_SWITCHCHMODE DD 06H
_WMA_E_FAIL DD	080004005H
_WMA_E_OUTOFMEMORY DD 08007000eH
_WMA_E_INVALIDARG DD 080070057H
_WMA_E_NOTSUPPORTED DD 080040000H
_WMA_E_LOSTPACKET DD 080040001H
_WMA_E_BROKEN_FRAME DD 080040002H
_WMA_E_BUFFEROVERFLOW DD 080040003H
_WMA_E_ONHOLD DD 080040004H
_WMA_E_BUFFERUNDERFLOW DD 080040005H
_WMA_E_INVALIDRECHDR DD 080040006H
_WMA_E_SYNCERROR DD 080040007H
_WMA_E_NOTIMPL DD 080040008H
_WMA_E_FLUSHOVERFLOW DD 080040009H
WMADEC_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
WMADEC_RD	SEGMENT
_g_rgiLsfReconLevel_XDS DD 0bffe60car		; -1.98733
	DD	0bffd5e77r			; -1.97945
	DD	0bffc63a5r			; -1.97179
	DD	0bffb36a8r			; -1.96261
	DD	0bff9a62dr			; -1.95038
	DD	0bff77861r			; -1.93336
	DD	0bff41ee1r			; -1.90719
	DD	0bfee5334r			; -1.86191
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0bffc7e28r			; -1.9726
	DD	0bffafc88r			; -1.96083
	DD	0bff993e5r			; -1.94983
	DD	0bff81267r			; -1.93806
	DD	0bff66bd8r			; -1.92517
	DD	0bff47e39r			; -1.9101
	DD	0bff237a6r			; -1.89232
	DD	0bfef8d40r			; -1.8715
	DD	0bfec3e33r			; -1.84565
	DD	0bfe82369r			; -1.81358
	DD	0bfe35a8br			; -1.7762
	DD	0bfddc790r			; -1.73265
	DD	0bfd6ec0cr			; -1.67908
	DD	0bfce0712r			; -1.60959
	DD	0bfc10fdcr			; -1.5083
	DD	0bfaa64dfr			; -1.3312
	DD	0bff356f4r			; -1.90109
	DD	0bfeeb290r			; -1.86482
	DD	0bfeac6f5r			; -1.8342
	DD	0bfe69d99r			; -1.80168
	DD	0bfe21cb6r			; -1.7665
	DD	0bfdd3474r			; -1.72816
	DD	0bfd7aef7r			; -1.68503
	DD	0bfd195c0r			; -1.63738
	DD	0bfcae1ccr			; -1.58502
	DD	0bfc24c3fr			; -1.51795
	DD	0bfb7e908r			; -1.4368
	DD	0bfab74edr			; -1.33951
	DD	0bf9ef20fr			; -1.24176
	DD	0bf8fb198r			; -1.12261
	DD	0bf77adddr			; -0.967497
	DD	0bf3d9045r			; -0.740483
	DD	0bfe27cf7r			; -1.76944
	DD	0bfd6d011r			; -1.67822
	DD	0bfccbb3ar			; -1.59946
	DD	0bfc48ebbr			; -1.53561
	DD	0bfbcc33br			; -1.47471
	DD	0bfb4bfbfr			; -1.4121
	DD	0bfac2c16r			; -1.3451
	DD	0bfa2fe9cr			; -1.2734
	DD	0bf98b579r			; -1.19304
	DD	0bf8c7fdar			; -1.09765
	DD	0bf7cf9d6r			; -0.988187
	DD	0bf5f553er			; -0.872394
	DD	0bf3e6295r			; -0.743692
	DD	0bf1901adr			; -0.597682
	DD	0bedd05fdr			; -0.431686
	DD	0be3815afr			; -0.17977
	DD	0bfb7969ar			; -1.43428
	DD	0bfa90254r			; -1.32038
	DD	0bf9af98er			; -1.21074
	DD	0bf8d8a32r			; -1.10578
	DD	0bf80b813r			; -1.00562
	DD	0bf67428dr			; -0.903359
	DD	0bf4deb83r			; -0.804375
	DD	0bf35044ar			; -0.707097
	DD	0bf1ab1b3r			; -0.604274
	DD	0beff0c45r			; -0.49814
	DD	0bec52b39r			; -0.385095
	DD	0be8ac96dr			; -0.271068
	DD	0be13882dr			; -0.144074
	DD	0bb101edbr			; -0.0021991
	DD	03e2b43f4r			; 0.167251
	DD	03ebd1cder			; 0.369361
	DD	0bf7fbba3r			; -0.998957
	DD	0bf57858er			; -0.841882
	DD	0bf35212cr			; -0.707537
	DD	0bf143daar			; -0.579066
	DD	0bef0ecabr			; -0.470556
	DD	0bebd4557r			; -0.36967
	DD	0be895a39r			; -0.268266
	DD	0be2fc0c6r			; -0.171634
	DD	0bd93a0bbr			; -0.0720839
	DD	03cfaea6br			; 0.0306294
	DD	03fb33f73r			; 1.40037
	DD	03e80a90br			; 0.25129
	DD	03ebe890dr			; 0.372139
	DD	03f02c0f0r			; 0.510756
	DD	03f261caer			; 0.648875
	DD	03f4d96acr			; 0.80308
	DD	0be87c21cr			; -0.265153
	DD	0bd814d31r			; -0.0631355
	DD	03db5b341r			; 0.0887208
	DD	03e5819afr			; 0.211035
	DD	03e9f13a6r			; 0.310697
	DD	03ecb29cbr			; 0.396803
	DD	03ef1c8c1r			; 0.472235
	DD	03f0aaaf9r			; 0.541671
	DD	03f1d4c6dr			; 0.614447
	DD	03f307eb6r			; 0.689433
	DD	03f440b9br			; 0.765802
	DD	03f5a0911r			; 0.851701
	DD	03f73f0a4r			; 0.952891
	DD	03f8856bdr			; 1.06515
	DD	03f9a40f3r			; 1.20511
	DD	03fb02695r			; 1.37618
	DD	03f0a1651r			; 0.539403
	DD	03f3cda84r			; 0.737709
	DD	03f625e20r			; 0.884249
	DD	03f816e53r			; 1.01118
	DD	03f912356r			; 1.13389
	DD	03fa257aer			; 1.2683
	DD	03fb5d052r			; 1.42042
	DD	03fcf6746r			; 1.62034
	DD	03f8d00d7r			; 1.10159
	DD	03f9522d6r			; 1.16513
	DD	03f9ddf1cr			; 1.23337
	DD	03fa6ee31r			; 1.30414
	DD	03fb03584r			; 1.37663
	DD	03fbbf911r			; 1.46854
	DD	03fc9c2d2r			; 1.57626
	DD	03fd59fb5r			; 1.66894
	DD	03ec5a469r			; 0.38602
	DD	03f0f624ar			; 0.560094
	DD	03f2b7705r			; 0.669785
	DD	03f42a205r			; 0.760285
	DD	03f56a55br			; 0.838461
	DD	03f689f4fr			; 0.908681
	DD	03f795de2r			; 0.974089
	DD	03f84bac4r			; 1.03695
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03fc7dd97r			; 1.56145
	DD	03fd4688ar			; 1.65944
	DD	03fdd0af5r			; 1.7269
	DD	03fe3a86dr			; 1.77858
	DD	03fe93848r			; 1.82203
	DD	03fee5c98r			; 1.8622
	DD	03ff39041r			; 1.90284
	DD	03ff95ec6r			; 1.9482
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
_lpc_trig2048_XDS DD 000000000r			; 0
	DD	03f800000r			; 1
	DD	03ac90fd5r			; 0.00153398
	DD	03f7fffecr			; 0.999999
	DD	03b490fc6r			; 0.00306796
	DD	03f7fffb1r			; 0.999995
	DD	03b96cbc1r			; 0.00460193
	DD	03f7fff4er			; 0.999989
	DD	03bc90f88r			; 0.00613588
	DD	03f7ffec4r			; 0.999981
	DD	03bfb5330r			; 0.00766983
	DD	03f7ffe13r			; 0.999971
	DD	03c16cb58r			; 0.00920375
	DD	03f7ffd39r			; 0.999958
	DD	03c2fed02r			; 0.0107377
	DD	03f7ffc39r			; 0.999942
	DD	03c490e90r			; 0.0122715
	DD	03f7ffb11r			; 0.999925
	DD	03c622fffr			; 0.0138054
	DD	03f7ff9c1r			; 0.999905
	DD	03c7b514br			; 0.0153392
	DD	03f7ff84ar			; 0.999882
	DD	03c8a3938r			; 0.016873
	DD	03f7ff6acr			; 0.999858
	DD	03c96c9b6r			; 0.0184067
	DD	03f7ff4e6r			; 0.999831
	DD	03ca35a1cr			; 0.0199404
	DD	03f7ff2f8r			; 0.999801
	DD	03cafea69r			; 0.0214741
	DD	03f7ff0e3r			; 0.999769
	DD	03cbc7a9br			; 0.0230077
	DD	03f7feea7r			; 0.999735
	DD	03cc90ab0r			; 0.0245412
	DD	03f7fec43r			; 0.999699
	DD	03cd59aa6r			; 0.0260747
	DD	03f7fe9b8r			; 0.99966
	DD	03ce22a7ar			; 0.0276081
	DD	03f7fe705r			; 0.999619
	DD	03ceeba2cr			; 0.0291415
	DD	03f7fe42br			; 0.999575
	DD	03cfb49bar			; 0.0306748
	DD	03f7fe129r			; 0.999529
	DD	03d03ec90r			; 0.032208
	DD	03f7fde00r			; 0.999481
	DD	03d0a342fr			; 0.0337412
	DD	03f7fdaafr			; 0.999431
	DD	03d107bb8r			; 0.0352742
	DD	03f7fd737r			; 0.999378
	DD	03d16c32cr			; 0.0368072
	DD	03f7fd397r			; 0.999322
	DD	03d1d0a88r			; 0.0383401
	DD	03f7fcfd1r			; 0.999265
	DD	03d2351cbr			; 0.0398729
	DD	03f7fcbe2r			; 0.999205
	DD	03d2998f6r			; 0.0414056
	DD	03f7fc7ccr			; 0.999142
	DD	03d2fe007r			; 0.0429383
	DD	03f7fc38fr			; 0.999078
	DD	03d3626fcr			; 0.0444708
	DD	03f7fbf2ar			; 0.999011
	DD	03d3c6dd5r			; 0.0460032
	DD	03f7fba9er			; 0.998941
	DD	03d42b491r			; 0.0475355
	DD	03f7fb5ear			; 0.99887
	DD	03d48fb30r			; 0.0490677
	DD	03f7fb10fr			; 0.998795
	DD	03d4f41afr			; 0.0505998
	DD	03f7fac0dr			; 0.998719
	DD	03d55880er			; 0.0521317
	DD	03f7fa6e3r			; 0.99864
	DD	03d5bce4cr			; 0.0536635
	DD	03f7fa191r			; 0.998559
	DD	03d621469r			; 0.0551952
	DD	03f7f9c18r			; 0.998476
	DD	03d685a62r			; 0.0567268
	DD	03f7f9678r			; 0.99839
	DD	03d6ea038r			; 0.0582583
	DD	03f7f90b1r			; 0.998302
	DD	03d74e5e9r			; 0.0597896
	DD	03f7f8ac2r			; 0.998211
	DD	03d7b2b74r			; 0.0613207
	DD	03f7f84abr			; 0.998118
	DD	03d80b86cr			; 0.0628518
	DD	03f7f7e6dr			; 0.998023
	DD	03d83db0ar			; 0.0643826
	DD	03f7f7808r			; 0.997925
	DD	03d86fd94r			; 0.0659133
	DD	03f7f717br			; 0.997825
	DD	03d8a200ar			; 0.0674439
	DD	03f7f6ac7r			; 0.997723
	DD	03d8d426ar			; 0.0689743
	DD	03f7f63ecr			; 0.997618
	DD	03d9064b4r			; 0.0705046
	DD	03f7f5ce9r			; 0.997511
	DD	03d9386e7r			; 0.0720346
	DD	03f7f55bfr			; 0.997402
	DD	03d96a905r			; 0.0735646
	DD	03f7f4e6dr			; 0.99729
	DD	03d99cb0ar			; 0.0750943
	DD	03f7f46f4r			; 0.997176
	DD	03d9cecf9r			; 0.0766239
	DD	03f7f3f54r			; 0.99706
	DD	03da00ecfr			; 0.0781532
	DD	03f7f378cr			; 0.996941
	DD	03da3308cr			; 0.0796824
	DD	03f7f2f9dr			; 0.99682
	DD	03da65230r			; 0.0812114
	DD	03f7f2787r			; 0.996697
	DD	03da973bar			; 0.0827403
	DD	03f7f1f49r			; 0.996571
	DD	03dac952br			; 0.0842689
	DD	03f7f16e4r			; 0.996443
	DD	03dafb680r			; 0.0857973
	DD	03f7f0e58r			; 0.996313
	DD	03db2d7bbr			; 0.0873255
	DD	03f7f05a4r			; 0.99618
	DD	03db5f8dar			; 0.0888536
	DD	03f7efcc9r			; 0.996045
	DD	03db919ddr			; 0.0903814
	DD	03f7ef3c7r			; 0.995907
	DD	03dbc3ac3r			; 0.091909
	DD	03f7eea9dr			; 0.995767
	DD	03dbf5b8dr			; 0.0934363
	DD	03f7ee14cr			; 0.995625
	DD	03dc27c39r			; 0.0949635
	DD	03f7ed7d4r			; 0.995481
	DD	03dc59cc6r			; 0.0964904
	DD	03f7ece34r			; 0.995334
	DD	03dc8bd36r			; 0.0980171
	DD	03f7ec46dr			; 0.995185
	DD	03dcbdd86r			; 0.0995436
	DD	03f7eba7fr			; 0.995033
	DD	03dcefdb7r			; 0.10107
	DD	03f7eb069r			; 0.994879
	DD	03dd21dc8r			; 0.102596
	DD	03f7ea62dr			; 0.994723
	DD	03dd53db9r			; 0.104122
	DD	03f7e9bc9r			; 0.994565
	DD	03dd85d89r			; 0.105647
	DD	03f7e913dr			; 0.994404
	DD	03ddb7d37r			; 0.107172
	DD	03f7e868br			; 0.99424
	DD	03dde9cc4r			; 0.108697
	DD	03f7e7bb1r			; 0.994075
	DD	03de1bc2er			; 0.110222
	DD	03f7e70b0r			; 0.993907
	DD	03de4db76r			; 0.111747
	DD	03f7e6588r			; 0.993737
	DD	03de7fa9ar			; 0.113271
	DD	03f7e5a38r			; 0.993564
	DD	03deb199ar			; 0.114795
	DD	03f7e4ec1r			; 0.993389
	DD	03dee3876r			; 0.116319
	DD	03f7e4323r			; 0.993212
	DD	03df1572er			; 0.117842
	DD	03f7e375er			; 0.993032
	DD	03df475c0r			; 0.119365
	DD	03f7e2b72r			; 0.99285
	DD	03df7942cr			; 0.120888
	DD	03f7e1f5er			; 0.992666
	DD	03dfab273r			; 0.122411
	DD	03f7e1324r			; 0.99248
	DD	03dfdd092r			; 0.123933
	DD	03f7e06c2r			; 0.992291
	DD	03e007745r			; 0.125455
	DD	03f7dfa38r			; 0.992099
	DD	03e02062er			; 0.126977
	DD	03f7ded88r			; 0.991906
	DD	03e039502r			; 0.128498
	DD	03f7de0b1r			; 0.99171
	DD	03e0523c2r			; 0.130019
	DD	03f7dd3b2r			; 0.991511
	DD	03e06b26er			; 0.13154
	DD	03f7dc68cr			; 0.991311
	DD	03e084105r			; 0.133061
	DD	03f7db940r			; 0.991108
	DD	03e09cf86r			; 0.134581
	DD	03f7dabccr			; 0.990903
	DD	03e0b5df3r			; 0.136101
	DD	03f7d9e30r			; 0.990695
	DD	03e0cec4ar			; 0.13762
	DD	03f7d906er			; 0.990485
	DD	03e0e7a8br			; 0.139139
	DD	03f7d8285r			; 0.990273
	DD	03e1008b7r			; 0.140658
	DD	03f7d7474r			; 0.990058
	DD	03e1196ccr			; 0.142177
	DD	03f7d663dr			; 0.989841
	DD	03e1324car			; 0.143695
	DD	03f7d57der			; 0.989622
	DD	03e14b2b2r			; 0.145213
	DD	03f7d4959r			; 0.9894
	DD	03e164083r			; 0.14673
	DD	03f7d3aacr			; 0.989177
	DD	03e17ce3dr			; 0.148248
	DD	03f7d2bd8r			; 0.98895
	DD	03e195be0r			; 0.149765
	DD	03f7d1cddr			; 0.988722
	DD	03e1ae96br			; 0.151281
	DD	03f7d0dbcr			; 0.988491
	DD	03e1c76der			; 0.152797
	DD	03f7cfe73r			; 0.988258
	DD	03e1e0438r			; 0.154313
	DD	03f7cef03r			; 0.988022
	DD	03e1f917br			; 0.155828
	DD	03f7cdf6cr			; 0.987784
	DD	03e211ea5r			; 0.157343
	DD	03f7ccfaer			; 0.987544
	DD	03e22abb6r			; 0.158858
	DD	03f7cbfc9r			; 0.987301
	DD	03e2438adr			; 0.160372
	DD	03f7cafbdr			; 0.987057
	DD	03e25c58cr			; 0.161886
	DD	03f7c9f8ar			; 0.986809
	DD	03e275251r			; 0.1634
	DD	03f7c8f31r			; 0.98656
	DD	03e28defcr			; 0.164913
	DD	03f7c7eb0r			; 0.986308
	DD	03e2a6b8dr			; 0.166426
	DD	03f7c6e08r			; 0.986054
	DD	03e2bf804r			; 0.167938
	DD	03f7c5d3ar			; 0.985798
	DD	03e2d8461r			; 0.16945
	DD	03f7c4c44r			; 0.985539
	DD	03e2f10a2r			; 0.170962
	DD	03f7c3b28r			; 0.985278
	DD	03e309cc9r			; 0.172473
	DD	03f7c29e5r			; 0.985014
	DD	03e3228d4r			; 0.173984
	DD	03f7c187ar			; 0.984748
	DD	03e33b4c4r			; 0.175494
	DD	03f7c06e9r			; 0.98448
	DD	03e354098r			; 0.177004
	DD	03f7bf531r			; 0.98421
	DD	03e36cc50r			; 0.178514
	DD	03f7be353r			; 0.983937
	DD	03e3857ecr			; 0.180023
	DD	03f7bd14dr			; 0.983662
	DD	03e39e36cr			; 0.181532
	DD	03f7bbf20r			; 0.983385
	DD	03e3b6ecfr			; 0.18304
	DD	03f7baccdr			; 0.983105
	DD	03e3cfa15r			; 0.184548
	DD	03f7b9a53r			; 0.982824
	DD	03e3e853er			; 0.186055
	DD	03f7b87b2r			; 0.982539
	DD	03e401049r			; 0.187562
	DD	03f7b74ear			; 0.982253
	DD	03e419b37r			; 0.189069
	DD	03f7b61fcr			; 0.981964
	DD	03e432607r			; 0.190575
	DD	03f7b4ee7r			; 0.981673
	DD	03e44b0b9r			; 0.19208
	DD	03f7b3babr			; 0.981379
	DD	03e463b4dr			; 0.193586
	DD	03f7b2848r			; 0.981083
	DD	03e47c5c2r			; 0.19509
	DD	03f7b14ber			; 0.980785
	DD	03e495018r			; 0.196595
	DD	03f7b010er			; 0.980485
	DD	03e4ada4fr			; 0.198098
	DD	03f7aed37r			; 0.980182
	DD	03e4c6467r			; 0.199602
	DD	03f7ad93ar			; 0.979877
	DD	03e4dee60r			; 0.201105
	DD	03f7ac516r			; 0.97957
	DD	03e4f7838r			; 0.202607
	DD	03f7ab0cbr			; 0.97926
	DD	03e5101f1r			; 0.204109
	DD	03f7a9c59r			; 0.978948
	DD	03e528b89r			; 0.20561
	DD	03f7a87c1r			; 0.978634
	DD	03e541501r			; 0.207111
	DD	03f7a7302r			; 0.978317
	DD	03e559e58r			; 0.208612
	DD	03f7a5e1cr			; 0.977998
	DD	03e57278fr			; 0.210112
	DD	03f7a4910r			; 0.977677
	DD	03e58b0a4r			; 0.211611
	DD	03f7a33ddr			; 0.977354
	DD	03e5a3997r			; 0.21311
	DD	03f7a1e84r			; 0.977028
	DD	03e5bc26ar			; 0.214609
	DD	03f7a0904r			; 0.9767
	DD	03e5d4b1ar			; 0.216107
	DD	03f79f35er			; 0.97637
	DD	03e5ed3a8r			; 0.217604
	DD	03f79dd91r			; 0.976037
	DD	03e605c13r			; 0.219101
	DD	03f79c79dr			; 0.975702
	DD	03e61e45cr			; 0.220598
	DD	03f79b183r			; 0.975365
	DD	03e636c83r			; 0.222094
	DD	03f799b43r			; 0.975025
	DD	03e64f486r			; 0.223589
	DD	03f7984dcr			; 0.974684
	DD	03e667c66r			; 0.225084
	DD	03f796e4er			; 0.974339
	DD	03e680422r			; 0.226578
	DD	03f79579ar			; 0.973993
	DD	03e698bbar			; 0.228072
	DD	03f7940c0r			; 0.973644
	DD	03e6b132fr			; 0.229565
	DD	03f7929bfr			; 0.973293
	DD	03e6c9a7fr			; 0.231058
	DD	03f791298r			; 0.97294
	DD	03e6e21abr			; 0.23255
	DD	03f78fb4ar			; 0.972584
	DD	03e6fa8b2r			; 0.234042
	DD	03f78e3d6r			; 0.972227
	DD	03e712f94r			; 0.235533
	DD	03f78cc3br			; 0.971866
	DD	03e72b651r			; 0.237024
	DD	03f78b47br			; 0.971504
	DD	03e743ce8r			; 0.238514
	DD	03f789c93r			; 0.971139
	DD	03e75c35ar			; 0.240003
	DD	03f788486r			; 0.970772
	DD	03e7749a6r			; 0.241492
	DD	03f786c52r			; 0.970403
	DD	03e78cfccr			; 0.24298
	DD	03f7853f8r			; 0.970031
	DD	03e7a55cbr			; 0.244468
	DD	03f783b77r			; 0.969657
	DD	03e7bdba4r			; 0.245955
	DD	03f7822d1r			; 0.969281
	DD	03e7d6156r			; 0.247442
	DD	03f780a04r			; 0.968903
	DD	03e7ee6e1r			; 0.248928
	DD	03f77f110r			; 0.968522
	DD	03e803622r			; 0.250413
	DD	03f77d7f7r			; 0.968139
	DD	03e80f8c0r			; 0.251898
	DD	03f77beb7r			; 0.967754
	DD	03e81bb4ar			; 0.253382
	DD	03f77a551r			; 0.967366
	DD	03e827dc0r			; 0.254866
	DD	03f778bc5r			; 0.966976
	DD	03e834022r			; 0.256349
	DD	03f777213r			; 0.966584
	DD	03e840270r			; 0.257831
	DD	03f77583ar			; 0.96619
	DD	03e84c4aar			; 0.259313
	DD	03f773e3cr			; 0.965793
	DD	03e8586cer			; 0.260794
	DD	03f772417r			; 0.965394
	DD	03e8648dfr			; 0.262275
	DD	03f7709ccr			; 0.964993
	DD	03e870adar			; 0.263755
	DD	03f76ef5br			; 0.96459
	DD	03e87ccc1r			; 0.265234
	DD	03f76d4c4r			; 0.964184
	DD	03e888e93r			; 0.266713
	DD	03f76ba07r			; 0.963776
	DD	03e895050r			; 0.268191
	DD	03f769f24r			; 0.963366
	DD	03e8a11f7r			; 0.269668
	DD	03f76841br			; 0.962953
	DD	03e8ad38ar			; 0.271145
	DD	03f7668ecr			; 0.962538
	DD	03e8b9507r			; 0.272621
	DD	03f764d97r			; 0.962121
	DD	03e8c566er			; 0.274097
	DD	03f76321br			; 0.961702
	DD	03e8d17c0r			; 0.275572
	DD	03f76167ar			; 0.96128
	DD	03e8dd8fcr			; 0.277046
	DD	03f75fab3r			; 0.960857
	DD	03e8e9a22r			; 0.27852
	DD	03f75dec6r			; 0.960431
	DD	03e8f5b32r			; 0.279993
	DD	03f75c2b3r			; 0.960002
	DD	03e901c2cr			; 0.281465
	DD	03f75a67br			; 0.959572
	DD	03e90dd10r			; 0.282937
	DD	03f758a1cr			; 0.959139
	DD	03e919dddr			; 0.284408
	DD	03f756d97r			; 0.958703
	DD	03e925e94r			; 0.285878
	DD	03f7550edr			; 0.958266
	DD	03e931f35r			; 0.287347
	DD	03f75341dr			; 0.957826
	DD	03e93dfbfr			; 0.288816
	DD	03f751727r			; 0.957385
	DD	03e94a031r			; 0.290285
	DD	03f74fa0br			; 0.95694
	DD	03e95608dr			; 0.291752
	DD	03f74dcc9r			; 0.956494
	DD	03e9620d2r			; 0.293219
	DD	03f74bf62r			; 0.956045
	DD	03e96e100r			; 0.294685
	DD	03f74a1d5r			; 0.955594
	DD	03e97a117r			; 0.296151
	DD	03f748422r			; 0.955141
	DD	03e986116r			; 0.297616
	DD	03f746649r			; 0.954686
	DD	03e9920fer			; 0.29908
	DD	03f74484br			; 0.954228
	DD	03e99e0cer			; 0.300543
	DD	03f742a27r			; 0.953768
	DD	03e9aa086r			; 0.302006
	DD	03f740bddr			; 0.953306
	DD	03e9b6027r			; 0.303468
	DD	03f73ed6er			; 0.952842
	DD	03e9c1fafr			; 0.304929
	DD	03f73ced9r			; 0.952375
	DD	03e9cdf20r			; 0.30639
	DD	03f73b01fr			; 0.951906
	DD	03e9d9e78r			; 0.30785
	DD	03f73913fr			; 0.951435
	DD	03e9e5db8r			; 0.309309
	DD	03f737239r			; 0.950962
	DD	03e9f1cdfr			; 0.310767
	DD	03f73530er			; 0.950486
	DD	03e9fdbeer			; 0.312225
	DD	03f7333ber			; 0.950008
	DD	03ea09ae5r			; 0.313682
	DD	03f731447r			; 0.949528
	DD	03ea159c2r			; 0.315138
	DD	03f72f4acr			; 0.949046
	DD	03ea21887r			; 0.316593
	DD	03f72d4ebr			; 0.948561
	DD	03ea2d733r			; 0.318048
	DD	03f72b504r			; 0.948075
	DD	03ea395c5r			; 0.319502
	DD	03f7294f8r			; 0.947586
	DD	03ea4543fr			; 0.320955
	DD	03f7274c7r			; 0.947094
	DD	03ea5129fr			; 0.322408
	DD	03f725470r			; 0.946601
	DD	03ea5d0e5r			; 0.323859
	DD	03f7233f4r			; 0.946105
	DD	03ea68f12r			; 0.32531
	DD	03f721352r			; 0.945607
	DD	03ea74d25r			; 0.32676
	DD	03f71f28cr			; 0.945107
	DD	03ea80b1fr			; 0.32821
	DD	03f71d19fr			; 0.944605
	DD	03ea8c8fer			; 0.329658
	DD	03f71b08er			; 0.9441
	DD	03ea986c4r			; 0.331106
	DD	03f718f57r			; 0.943593
	DD	03eaa446fr			; 0.332553
	DD	03f716dfbr			; 0.943084
	DD	03eab0201r			; 0.334
	DD	03f714c7ar			; 0.942573
	DD	03eabbf77r			; 0.335445
	DD	03f712ad4r			; 0.94206
	DD	03eac7cd4r			; 0.33689
	DD	03f710908r			; 0.941544
	DD	03ead3a15r			; 0.338334
	DD	03f70e717r			; 0.941026
	DD	03eadf73cr			; 0.339777
	DD	03f70c501r			; 0.940506
	DD	03eaeb449r			; 0.341219
	DD	03f70a2c6r			; 0.939984
	DD	03eaf713ar			; 0.342661
	DD	03f708066r			; 0.939459
	DD	03eb02e10r			; 0.344101
	DD	03f705de1r			; 0.938932
	DD	03eb0eacbr			; 0.345541
	DD	03f703b37r			; 0.938404
	DD	03eb1a76br			; 0.34698
	DD	03f701867r			; 0.937872
	DD	03eb263efr			; 0.348419
	DD	03f6ff573r			; 0.937339
	DD	03eb32058r			; 0.349856
	DD	03f6fd25ar			; 0.936803
	DD	03eb3dca5r			; 0.351293
	DD	03f6faf1br			; 0.936266
	DD	03eb498d6r			; 0.352729
	DD	03f6f8bb8r			; 0.935726
	DD	03eb554ecr			; 0.354164
	DD	03f6f6830r			; 0.935184
	DD	03eb610e6r			; 0.355598
	DD	03f6f4483r			; 0.934639
	DD	03eb6ccc3r			; 0.357031
	DD	03f6f20b0r			; 0.934093
	DD	03eb78884r			; 0.358463
	DD	03f6efcbar			; 0.933544
	DD	03eb8442ar			; 0.359895
	DD	03f6ed89er			; 0.932993
	DD	03eb8ffb2r			; 0.361326
	DD	03f6eb45dr			; 0.93244
	DD	03eb9bb1er			; 0.362756
	DD	03f6e8ff8r			; 0.931884
	DD	03eba766er			; 0.364185
	DD	03f6e6b6dr			; 0.931327
	DD	03ebb31a0r			; 0.365613
	DD	03f6e46ber			; 0.930767
	DD	03ebbecb6r			; 0.36704
	DD	03f6e21ebr			; 0.930205
	DD	03ebca7afr			; 0.368467
	DD	03f6dfcf2r			; 0.929641
	DD	03ebd628br			; 0.369892
	DD	03f6dd7d5r			; 0.929075
	DD	03ebe1d4ar			; 0.371317
	DD	03f6db293r			; 0.928506
	DD	03ebed7ebr			; 0.372741
	DD	03f6d8d2dr			; 0.927935
	DD	03ebf926fr			; 0.374164
	DD	03f6d67a1r			; 0.927363
	DD	03ec04cd5r			; 0.375586
	DD	03f6d41f2r			; 0.926787
	DD	03ec1071er			; 0.377007
	DD	03f6d1c1dr			; 0.92621
	DD	03ec1c148r			; 0.378428
	DD	03f6cf624r			; 0.925631
	DD	03ec27b55r			; 0.379847
	DD	03f6cd007r			; 0.925049
	DD	03ec33544r			; 0.381266
	DD	03f6ca9c5r			; 0.924465
	DD	03ec3ef15r			; 0.382683
	DD	03f6c835er			; 0.92388
	DD	03ec4a8c8r			; 0.3841
	DD	03f6c5cd4r			; 0.923291
	DD	03ec5625cr			; 0.385516
	DD	03f6c3624r			; 0.922701
	DD	03ec61bd2r			; 0.386931
	DD	03f6c0f50r			; 0.922109
	DD	03ec6d529r			; 0.388345
	DD	03f6be858r			; 0.921514
	DD	03ec78e62r			; 0.389758
	DD	03f6bc13br			; 0.920917
	DD	03ec8477cr			; 0.39117
	DD	03f6b99fbr			; 0.920318
	DD	03ec90077r			; 0.392582
	DD	03f6b7295r			; 0.919717
	DD	03ec9b953r			; 0.393992
	DD	03f6b4b0cr			; 0.919114
	DD	03eca7210r			; 0.395401
	DD	03f6b235er			; 0.918508
	DD	03ecb2aaer			; 0.39681
	DD	03f6afb8cr			; 0.917901
	DD	03ecbe32cr			; 0.398218
	DD	03f6ad395r			; 0.917291
	DD	03ecc9b8br			; 0.399624
	DD	03f6aab7br			; 0.916679
	DD	03ecd53car			; 0.40103
	DD	03f6a833cr			; 0.916065
	DD	03ece0bear			; 0.402435
	DD	03f6a5ad9r			; 0.915449
	DD	03ecec3ear			; 0.403838
	DD	03f6a3252r			; 0.91483
	DD	03ecf7bcar			; 0.405241
	DD	03f6a09a7r			; 0.91421
	DD	03ed0338ar			; 0.406643
	DD	03f69e0d7r			; 0.913587
	DD	03ed0eb2ar			; 0.408044
	DD	03f69b7e4r			; 0.912962
	DD	03ed1a2aar			; 0.409444
	DD	03f698eccr			; 0.912335
	DD	03ed25a09r			; 0.410843
	DD	03f696591r			; 0.911706
	DD	03ed31148r			; 0.412241
	DD	03f693c32r			; 0.911075
	DD	03ed3c867r			; 0.413638
	DD	03f6912aer			; 0.910441
	DD	03ed47f64r			; 0.415034
	DD	03f68e907r			; 0.909806
	DD	03ed53641r			; 0.41643
	DD	03f68bf3cr			; 0.909168
	DD	03ed5ecfdr			; 0.417824
	DD	03f68954cr			; 0.908528
	DD	03ed6a399r			; 0.419217
	DD	03f686b39r			; 0.907886
	DD	03ed75a13r			; 0.420609
	DD	03f684103r			; 0.907242
	DD	03ed8106br			; 0.422
	DD	03f6816a8r			; 0.906596
	DD	03ed8c6a3r			; 0.42339
	DD	03f67ec29r			; 0.905947
	DD	03ed97cb9r			; 0.42478
	DD	03f67c187r			; 0.905297
	DD	03eda32adr			; 0.426168
	DD	03f6796c1r			; 0.904644
	DD	03edae880r			; 0.427555
	DD	03f676bd8r			; 0.903989
	DD	03edb9e31r			; 0.428941
	DD	03f6740car			; 0.903332
	DD	03edc53c1r			; 0.430326
	DD	03f671599r			; 0.902673
	DD	03edd092er			; 0.431711
	DD	03f66ea45r			; 0.902012
	DD	03eddbe79r			; 0.433094
	DD	03f66beccr			; 0.901349
	DD	03ede73a2r			; 0.434476
	DD	03f669330r			; 0.900683
	DD	03edf28a9r			; 0.435857
	DD	03f666771r			; 0.900016
	DD	03edfdd8dr			; 0.437237
	DD	03f663b8er			; 0.899346
	DD	03ee0924fr			; 0.438616
	DD	03f660f88r			; 0.898674
	DD	03ee146eer			; 0.439994
	DD	03f65e35er			; 0.898001
	DD	03ee1fb6ar			; 0.441371
	DD	03f65b710r			; 0.897325
	DD	03ee2afc4r			; 0.442747
	DD	03f658aa0r			; 0.896646
	DD	03ee363far			; 0.444122
	DD	03f655e0br			; 0.895966
	DD	03ee4180er			; 0.445496
	DD	03f653154r			; 0.895284
	DD	03ee4cbfer			; 0.446869
	DD	03f650479r			; 0.894599
	DD	03ee57fcbr			; 0.448241
	DD	03f64d77br			; 0.893913
	DD	03ee63375r			; 0.449611
	DD	03f64aa59r			; 0.893224
	DD	03ee6e6fbr			; 0.450981
	DD	03f647d14r			; 0.892534
	DD	03ee79a5dr			; 0.45235
	DD	03f644facr			; 0.891841
	DD	03ee84d9cr			; 0.453717
	DD	03f642221r			; 0.891146
	DD	03ee900b7r			; 0.455084
	DD	03f63f473r			; 0.890449
	DD	03ee9b3aer			; 0.456449
	DD	03f63c6a1r			; 0.88975
	DD	03eea6681r			; 0.457813
	DD	03f6398acr			; 0.889048
	DD	03eeb1930r			; 0.459177
	DD	03f636a95r			; 0.888345
	DD	03eebcbbbr			; 0.460539
	DD	03f633c5ar			; 0.88764
	DD	03eec7e21r			; 0.4619
	DD	03f630dfcr			; 0.886932
	DD	03eed3063r			; 0.46326
	DD	03f62df7br			; 0.886223
	DD	03eede280r			; 0.464619
	DD	03f62b0d7r			; 0.885511
	DD	03eee9479r			; 0.465977
	DD	03f628210r			; 0.884797
	DD	03eef464cr			; 0.467333
	DD	03f625326r			; 0.884081
	DD	03eeff7fbr			; 0.468689
	DD	03f62241ar			; 0.883363
	DD	03ef0a985r			; 0.470043
	DD	03f61f4ear			; 0.882643
	DD	03ef15aear			; 0.471397
	DD	03f61c598r			; 0.881921
	DD	03ef20c29r			; 0.472749
	DD	03f619622r			; 0.881197
	DD	03ef2bd43r			; 0.4741
	DD	03f61668ar			; 0.880471
	DD	03ef36e38r			; 0.47545
	DD	03f6136d0r			; 0.879743
	DD	03ef41f07r			; 0.476799
	DD	03f6106f2r			; 0.879012
	DD	03ef4cfb1r			; 0.478147
	DD	03f60d6f2r			; 0.87828
	DD	03ef58035r			; 0.479494
	DD	03f60a6cfr			; 0.877545
	DD	03ef63093r			; 0.480839
	DD	03f607689r			; 0.876809
	DD	03ef6e0cbr			; 0.482184
	DD	03f604621r			; 0.87607
	DD	03ef790dcr			; 0.483527
	DD	03f601596r			; 0.875329
	DD	03ef840c8r			; 0.484869
	DD	03f5fe4e9r			; 0.874587
	DD	03ef8f08er			; 0.48621
	DD	03f5fb419r			; 0.873842
	DD	03ef9a02dr			; 0.48755
	DD	03f5f8327r			; 0.873095
	DD	03efa4fa5r			; 0.488889
	DD	03f5f5212r			; 0.872346
	DD	03efafef7r			; 0.490226
	DD	03f5f20dbr			; 0.871595
	DD	03efbae22r			; 0.491563
	DD	03f5eef81r			; 0.870842
	DD	03efc5d27r			; 0.492898
	DD	03f5ebe05r			; 0.870087
	DD	03efd0c04r			; 0.494232
	DD	03f5e8c67r			; 0.86933
	DD	03efdbabbr			; 0.495565
	DD	03f5e5aa6r			; 0.868571
	DD	03efe694ar			; 0.496897
	DD	03f5e28c3r			; 0.867809
	DD	03eff17b2r			; 0.498228
	DD	03f5df6ber			; 0.867046
	DD	03effc5f3r			; 0.499557
	DD	03f5dc497r			; 0.866281
	DD	03f003a06r			; 0.500885
	DD	03f5d924dr			; 0.865514
	DD	03f0090ffr			; 0.502212
	DD	03f5d5fe1r			; 0.864744
	DD	03f00e7e4r			; 0.503538
	DD	03f5d2d53r			; 0.863973
	DD	03f013eb5r			; 0.504863
	DD	03f5cfaa3r			; 0.863199
	DD	03f019573r			; 0.506187
	DD	03f5cc7d1r			; 0.862424
	DD	03f01ec1cr			; 0.507509
	DD	03f5c94ddr			; 0.861646
	DD	03f0242b1r			; 0.50883
	DD	03f5c61c7r			; 0.860867
	DD	03f029932r			; 0.51015
	DD	03f5c2e8er			; 0.860085
	DD	03f02ef9fr			; 0.511469
	DD	03f5bfb34r			; 0.859302
	DD	03f0345f8r			; 0.512786
	DD	03f5bc7b8r			; 0.858516
	DD	03f039c3dr			; 0.514103
	DD	03f5b941ar			; 0.857729
	DD	03f03f26dr			; 0.515418
	DD	03f5b605ar			; 0.856939
	DD	03f044889r			; 0.516732
	DD	03f5b2c79r			; 0.856147
	DD	03f049e91r			; 0.518045
	DD	03f5af875r			; 0.855354
	DD	03f04f484r			; 0.519356
	DD	03f5ac450r			; 0.854558
	DD	03f054a62r			; 0.520666
	DD	03f5a9009r			; 0.85376
	DD	03f05a02cr			; 0.521975
	DD	03f5a5ba0r			; 0.852961
	DD	03f05f5e2r			; 0.523283
	DD	03f5a2716r			; 0.852159
	DD	03f064b82r			; 0.52459
	DD	03f59f26ar			; 0.851355
	DD	03f06a10er			; 0.525895
	DD	03f59bd9cr			; 0.850549
	DD	03f06f686r			; 0.527199
	DD	03f5988adr			; 0.849742
	DD	03f074be8r			; 0.528502
	DD	03f59539cr			; 0.848932
	DD	03f07a136r			; 0.529804
	DD	03f591e6ar			; 0.84812
	DD	03f07f66fr			; 0.531104
	DD	03f58e916r			; 0.847307
	DD	03f084b92r			; 0.532403
	DD	03f58b3a1r			; 0.846491
	DD	03f08a0a1r			; 0.533701
	DD	03f587e0br			; 0.845673
	DD	03f08f59br			; 0.534998
	DD	03f584853r			; 0.844854
	DD	03f094a7fr			; 0.536293
	DD	03f581279r			; 0.844032
	DD	03f099f4er			; 0.537587
	DD	03f57dc7fr			; 0.843208
	DD	03f09f409r			; 0.53888
	DD	03f57a663r			; 0.842383
	DD	03f0a48adr			; 0.540171
	DD	03f577026r			; 0.841555
	DD	03f0a9d3dr			; 0.541462
	DD	03f5739c7r			; 0.840725
	DD	03f0af1b7r			; 0.542751
	DD	03f570348r			; 0.839894
	DD	03f0b461cr			; 0.544039
	DD	03f56cca7r			; 0.83906
	DD	03f0b9a6br			; 0.545325
	DD	03f5695e5r			; 0.838225
	DD	03f0beea5r			; 0.54661
	DD	03f565f02r			; 0.837387
	DD	03f0c42c9r			; 0.547894
	DD	03f5627fer			; 0.836548
	DD	03f0c96d7r			; 0.549177
	DD	03f55f0d9r			; 0.835706
	DD	03f0cead0r			; 0.550458
	DD	03f55b993r			; 0.834863
	DD	03f0d3eb3r			; 0.551738
	DD	03f55822cr			; 0.834018
	DD	03f0d9281r			; 0.553017
	DD	03f554aa4r			; 0.83317
	DD	03f0de638r			; 0.554294
	DD	03f5512fbr			; 0.832321
	DD	03f0e39dar			; 0.55557
	DD	03f54db31r			; 0.83147
	DD	03f0e8d65r			; 0.556845
	DD	03f54a347r			; 0.830616
	DD	03f0ee0dbr			; 0.558119
	DD	03f546b3br			; 0.829761
	DD	03f0f343br			; 0.559391
	DD	03f54330fr			; 0.828904
	DD	03f0f8784r			; 0.560662
	DD	03f53fac3r			; 0.828045
	DD	03f0fdab8r			; 0.561931
	DD	03f53c255r			; 0.827184
	DD	03f102dd5r			; 0.563199
	DD	03f5389c7r			; 0.826321
	DD	03f1080dcr			; 0.564466
	DD	03f535118r			; 0.825456
	DD	03f10d3cdr			; 0.565732
	DD	03f531849r			; 0.824589
	DD	03f1126a7r			; 0.566996
	DD	03f52df59r			; 0.823721
	DD	03f11796br			; 0.568259
	DD	03f52a649r			; 0.82285
	DD	03f11cc19r			; 0.569521
	DD	03f526d18r			; 0.821977
	DD	03f121eb0r			; 0.570781
	DD	03f5233c6r			; 0.821102
	DD	03f127130r			; 0.57204
	DD	03f51fa54r			; 0.820226
	DD	03f12c39ar			; 0.573297
	DD	03f51c0c2r			; 0.819348
	DD	03f1315eer			; 0.574553
	DD	03f518710r			; 0.818467
	DD	03f13682ar			; 0.575808
	DD	03f514d3dr			; 0.817585
	DD	03f13ba50r			; 0.577062
	DD	03f51134ar			; 0.816701
	DD	03f140c5fr			; 0.578314
	DD	03f50d937r			; 0.815814
	DD	03f145e58r			; 0.579565
	DD	03f509f03r			; 0.814926
	DD	03f14b039r			; 0.580814
	DD	03f5064afr			; 0.814036
	DD	03f150204r			; 0.582062
	DD	03f502a3br			; 0.813144
	DD	03f1553b7r			; 0.583309
	DD	03f4fefa8r			; 0.812251
	DD	03f15a554r			; 0.584554
	DD	03f4fb4f4r			; 0.811355
	DD	03f15f6d9r			; 0.585798
	DD	03f4f7a1fr			; 0.810457
	DD	03f164847r			; 0.58704
	DD	03f4f3f2br			; 0.809558
	DD	03f16999fr			; 0.588282
	DD	03f4f0417r			; 0.808656
	DD	03f16eader			; 0.589521
	DD	03f4ec8e4r			; 0.807753
	DD	03f173c07r			; 0.59076
	DD	03f4e8d90r			; 0.806848
	DD	03f178d18r			; 0.591997
	DD	03f4e521cr			; 0.80594
	DD	03f17de12r			; 0.593232
	DD	03f4e1689r			; 0.805031
	DD	03f182ef5r			; 0.594467
	DD	03f4ddad5r			; 0.80412
	DD	03f187fc0r			; 0.595699
	DD	03f4d9f02r			; 0.803208
	DD	03f18d073r			; 0.596931
	DD	03f4d6310r			; 0.802293
	DD	03f19210fr			; 0.598161
	DD	03f4d26fdr			; 0.801376
	DD	03f197194r			; 0.599389
	DD	03f4ceacbr			; 0.800458
	DD	03f19c200r			; 0.600616
	DD	03f4cae79r			; 0.799537
	DD	03f1a1255r			; 0.601842
	DD	03f4c7208r			; 0.798615
	DD	03f1a6293r			; 0.603067
	DD	03f4c3578r			; 0.797691
	DD	03f1ab2b8r			; 0.60429
	DD	03f4bf8c7r			; 0.796765
	DD	03f1b02c6r			; 0.605511
	DD	03f4bbbf8r			; 0.795837
	DD	03f1b52bbr			; 0.606731
	DD	03f4b7f09r			; 0.794907
	DD	03f1ba299r			; 0.60795
	DD	03f4b41far			; 0.793975
	DD	03f1bf25fr			; 0.609167
	DD	03f4b04ccr			; 0.793042
	DD	03f1c420cr			; 0.610383
	DD	03f4ac77fr			; 0.792107
	DD	03f1c91a2r			; 0.611597
	DD	03f4a8a13r			; 0.791169
	DD	03f1ce11fr			; 0.61281
	DD	03f4a4c87r			; 0.79023
	DD	03f1d3084r			; 0.614022
	DD	03f4a0edcr			; 0.789289
	DD	03f1d7fd1r			; 0.615232
	DD	03f49d112r			; 0.788346
	DD	03f1dcf06r			; 0.61644
	DD	03f499329r			; 0.787402
	DD	03f1e1e22r			; 0.617647
	DD	03f495521r			; 0.786455
	DD	03f1e6d26r			; 0.618853
	DD	03f4916far			; 0.785507
	DD	03f1ebc12r			; 0.620057
	DD	03f48d8b3r			; 0.784557
	DD	03f1f0ae5r			; 0.62126
	DD	03f489a4er			; 0.783605
	DD	03f1f599fr			; 0.622461
	DD	03f485bcar			; 0.782651
	DD	03f1fa841r			; 0.623661
	DD	03f481d27r			; 0.781695
	DD	03f1ff6cbr			; 0.62486
	DD	03f47de65r			; 0.780737
	DD	03f20453br			; 0.626056
	DD	03f479f84r			; 0.779778
	DD	03f209393r			; 0.627252
	DD	03f476085r			; 0.778817
	DD	03f20e1d2r			; 0.628446
	DD	03f472167r			; 0.777853
	DD	03f212ff9r			; 0.629638
	DD	03f46e22ar			; 0.776888
	DD	03f217e06r			; 0.630829
	DD	03f46a2cer			; 0.775922
	DD	03f21cbfbr			; 0.632019
	DD	03f466354r			; 0.774953
	DD	03f2219d7r			; 0.633207
	DD	03f4623bbr			; 0.773983
	DD	03f226799r			; 0.634393
	DD	03f45e403r			; 0.77301
	DD	03f22b543r			; 0.635578
	DD	03f45a42dr			; 0.772036
	DD	03f2302d3r			; 0.636762
	DD	03f456439r			; 0.771061
	DD	03f23504br			; 0.637944
	DD	03f452426r			; 0.770083
	DD	03f239da9r			; 0.639124
	DD	03f44e3f5r			; 0.769103
	DD	03f23eaeer			; 0.640303
	DD	03f44a3a5r			; 0.768122
	DD	03f24381ar			; 0.641481
	DD	03f446337r			; 0.767139
	DD	03f24852cr			; 0.642657
	DD	03f4422abr			; 0.766154
	DD	03f24d225r			; 0.643832
	DD	03f43e200r			; 0.765167
	DD	03f251f04r			; 0.645005
	DD	03f43a138r			; 0.764179
	DD	03f256bcbr			; 0.646176
	DD	03f436051r			; 0.763188
	DD	03f25b877r			; 0.647346
	DD	03f431f4cr			; 0.762196
	DD	03f26050ar			; 0.648514
	DD	03f42de29r			; 0.761202
	DD	03f265184r			; 0.649681
	DD	03f429ce8r			; 0.760207
	DD	03f269de3r			; 0.650847
	DD	03f425b89r			; 0.759209
	DD	03f26ea2ar			; 0.652011
	DD	03f421a0br			; 0.75821
	DD	03f273656r			; 0.653173
	DD	03f41d870r			; 0.757209
	DD	03f278268r			; 0.654334
	DD	03f4196b7r			; 0.756206
	DD	03f27ce61r			; 0.655493
	DD	03f4154e1r			; 0.755201
	DD	03f281a40r			; 0.656651
	DD	03f4112ecr			; 0.754195
	DD	03f286605r			; 0.657807
	DD	03f40d0dar			; 0.753187
	DD	03f28b1b0r			; 0.658961
	DD	03f408ea9r			; 0.752177
	DD	03f28fd41r			; 0.660114
	DD	03f404c5cr			; 0.751165
	DD	03f2948b8r			; 0.661266
	DD	03f4009f0r			; 0.750152
	DD	03f299415r			; 0.662416
	DD	03f3fc767r			; 0.749136
	DD	03f29df57r			; 0.663564
	DD	03f3f84c0r			; 0.748119
	DD	03f2a2a80r			; 0.664711
	DD	03f3f41fcr			; 0.747101
	DD	03f2a758er			; 0.665856
	DD	03f3eff1br			; 0.74608
	DD	03f2ac082r			; 0.667
	DD	03f3ebc1br			; 0.745058
	DD	03f2b0b5br			; 0.668142
	DD	03f3e78ffr			; 0.744034
	DD	03f2b561br			; 0.669283
	DD	03f3e35c5r			; 0.743008
	DD	03f2ba0bfr			; 0.670422
	DD	03f3df26er			; 0.74198
	DD	03f2beb4ar			; 0.671559
	DD	03f3daef9r			; 0.740951
	DD	03f2c35b9r			; 0.672695
	DD	03f3d6b67r			; 0.73992
	DD	03f2c800fr			; 0.673829
	DD	03f3d27b8r			; 0.738887
	DD	03f2cca49r			; 0.674962
	DD	03f3ce3ecr			; 0.737853
	DD	03f2d1469r			; 0.676093
	DD	03f3ca003r			; 0.736817
	DD	03f2d5e6fr			; 0.677222
	DD	03f3c5bfcr			; 0.735779
	DD	03f2da859r			; 0.67835
	DD	03f3c17d9r			; 0.734739
	DD	03f2df229r			; 0.679476
	DD	03f3bd398r			; 0.733697
	DD	03f2e3bder			; 0.680601
	DD	03f3b8f3br			; 0.732654
	DD	03f2e8578r			; 0.681724
	DD	03f3b4ac1r			; 0.731609
	DD	03f2ecef7r			; 0.682846
	DD	03f3b0629r			; 0.730563
	DD	03f2f185br			; 0.683965
	DD	03f3ac175r			; 0.729514
	DD	03f2f61a5r			; 0.685084
	DD	03f3a7ca4r			; 0.728464
	DD	03f2faad3r			; 0.6862
	DD	03f3a37b7r			; 0.727413
	DD	03f2ff3e6r			; 0.687315
	DD	03f39f2acr			; 0.726359
	DD	03f303cder			; 0.688429
	DD	03f39ad85r			; 0.725304
	DD	03f3085bbr			; 0.689541
	DD	03f396842r			; 0.724247
	DD	03f30ce7cr			; 0.690651
	DD	03f3922e1r			; 0.723188
	DD	03f311722r			; 0.691759
	DD	03f38dd65r			; 0.722128
	DD	03f315fadr			; 0.692866
	DD	03f3897cbr			; 0.721066
	DD	03f31a81dr			; 0.693971
	DD	03f385216r			; 0.720003
	DD	03f31f071r			; 0.695075
	DD	03f380c43r			; 0.718937
	DD	03f3238aar			; 0.696177
	DD	03f37c655r			; 0.71787
	DD	03f3280c7r			; 0.697277
	DD	03f37804ar			; 0.716801
	DD	03f32c8c9r			; 0.698376
	DD	03f373a23r			; 0.715731
	DD	03f3310afr			; 0.699473
	DD	03f36f3dfr			; 0.714659
	DD	03f33587ar			; 0.700569
	DD	03f36ad7fr			; 0.713585
	DD	03f33a029r			; 0.701663
	DD	03f366704r			; 0.712509
	DD	03f33e7bcr			; 0.702755
	DD	03f36206cr			; 0.711432
	DD	03f342f34r			; 0.703845
	DD	03f35d9b8r			; 0.710353
	DD	03f34768fr			; 0.704934
	DD	03f3592e7r			; 0.709273
	DD	03f34bdcfr			; 0.706021
	DD	03f354bfbr			; 0.708191
	DD	03f3504f3r			; 0.707107
	DD	03f3504f3r			; 0.707107
WMADEC_RD	ENDS
PUBLIC	__real@3f000000
PUBLIC	_prvPq2lpc_XDS@20
EXTRN	__fltused:NEAR
;	COMDAT __real@3f000000
; File c:\xbox\private\windows\directx\dsound\codecs\wmalib\wmadec_s\lpc.c
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _prvPq2lpc_XDS@20
WMADEC	SEGMENT
_i$ = -4
_pau$ = 8
_p$ = 12
_q$ = 16
_lpc$ = 20
_order$ = 24
_prvPq2lpc_XDS@20 PROC NEAR				; COMDAT

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 149  :   I32 i;
; 150  :   
; 151  :   for(i=1; i<=order/2; i++) {

  00005	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0000c	eb 09		 jmp	 SHORT $L3743
$L3744:
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00011	83 c0 01	 add	 eax, 1
  00014	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L3743:
  00017	8b 45 18	 mov	 eax, DWORD PTR _order$[ebp]
  0001a	99		 cdq
  0001b	2b c2		 sub	 eax, edx
  0001d	d1 f8		 sar	 eax, 1
  0001f	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00022	7f 4c		 jg	 SHORT $L3741

; 152  :     lpc[i-1]= -DIV2(p[i]+q[i]);

  00024	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00027	8b 55 0c	 mov	 edx, DWORD PTR _p$[ebp]
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002d	8b 75 10	 mov	 esi, DWORD PTR _q$[ebp]
  00030	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00033	d8 04 86	 fadd	 DWORD PTR [esi+eax*4]
  00036	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  0003c	d9 e0		 fchs
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00041	8b 55 14	 mov	 edx, DWORD PTR _lpc$[ebp]
  00044	d9 5c 8a fc	 fstp	 DWORD PTR [edx+ecx*4-4]

; 153  :     lpc[order-i]= -DIV2(p[i]-q[i]);

  00048	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _p$[ebp]
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00051	8b 75 10	 mov	 esi, DWORD PTR _q$[ebp]
  00054	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  00057	d8 24 96	 fsub	 DWORD PTR [esi+edx*4]
  0005a	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  00060	d9 e0		 fchs
  00062	8b 45 18	 mov	 eax, DWORD PTR _order$[ebp]
  00065	2b 45 fc	 sub	 eax, DWORD PTR _i$[ebp]
  00068	8b 4d 14	 mov	 ecx, DWORD PTR _lpc$[ebp]
  0006b	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 154  :   }

  0006e	eb 9e		 jmp	 SHORT $L3744
$L3741:

; 155  : }

  00070	5e		 pop	 esi
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 14 00	 ret	 20			; 00000014H
_prvPq2lpc_XDS@20 ENDP
WMADEC	ENDS
PUBLIC	_prvConvolve_odd_XDS@28
; Function compile flags: /Odt
;	COMDAT _prvConvolve_odd_XDS@28
WMADEC	SEGMENT
_j$ = -412
_ret$ = -408
_i$ = -4
_pau$ = 8
_in1$ = 12
_l1$ = 16
_in2$ = 20
_l2$ = 24
_out$ = 28
_lout$ = 32
_prvConvolve_odd_XDS@28 PROC NEAR			; COMDAT

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 01 00
	00		 sub	 esp, 412		; 0000019cH

; 160  :   // In BUILD_INTEGER mode, in1 assumed to have FRACT_BITS_LSP and in2 to have FRACT_BITS_LP. Output will have
; 161  :   // FRACT_BITS_LP.
; 162  :   I32   i,j;
; 163  :   LpType ret[100];
; 164  :   
; 165  :   for (i=0; (i<l1)&&(i<l2); i++) {

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $L3764
$L3765:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L3764:
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0001e	3b 4d 10	 cmp	 ecx, DWORD PTR _l1$[ebp]
  00021	7d 6f		 jge	 SHORT $L3766
  00023	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00026	3b 55 18	 cmp	 edx, DWORD PTR _l2$[ebp]
  00029	7d 67		 jge	 SHORT $L3766

; 166  :     ret[i]=0;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002e	c7 84 85 68 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _ret$[ebp+eax*4], 0

; 167  :     for (j=0; j<=i; j++) {

  00039	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0
  00043	eb 0f		 jmp	 SHORT $L3767
$L3768:
  00045	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  0004b	83 c1 01	 add	 ecx, 1
  0004e	89 8d 64 fe ff
	ff		 mov	 DWORD PTR _j$[ebp], ecx
$L3767:
  00054	8b 95 64 fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  0005a	3b 55 fc	 cmp	 edx, DWORD PTR _i$[ebp]
  0005d	7f 31		 jg	 SHORT $L3769

; 168  :       ret[i] += MULT_LSP(in1[j],in2[i-j]);

  0005f	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _in1$[ebp]
  00068	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0006e	2b 95 64 fe ff
	ff		 sub	 edx, DWORD PTR _j$[ebp]
  00074	8b 45 14	 mov	 eax, DWORD PTR _in2$[ebp]
  00077	d8 0c 90	 fmul	 DWORD PTR [eax+edx*4]
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0007d	d8 84 8d 68 fe
	ff ff		 fadd	 DWORD PTR _ret$[ebp+ecx*4]
  00084	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00087	d9 9c 95 68 fe
	ff ff		 fstp	 DWORD PTR _ret$[ebp+edx*4]

; 169  :     }

  0008e	eb b5		 jmp	 SHORT $L3768
$L3769:

; 170  :   }

  00090	eb 80		 jmp	 SHORT $L3765
$L3766:

; 171  :   
; 172  :   for (i=l1; i<(l1+l2)/2; i++) {

  00092	8b 45 10	 mov	 eax, DWORD PTR _l1$[ebp]
  00095	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  00098	eb 09		 jmp	 SHORT $L3770
$L3771:
  0009a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0009d	83 c1 01	 add	 ecx, 1
  000a0	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L3770:
  000a3	8b 45 10	 mov	 eax, DWORD PTR _l1$[ebp]
  000a6	03 45 18	 add	 eax, DWORD PTR _l2$[ebp]
  000a9	99		 cdq
  000aa	2b c2		 sub	 eax, edx
  000ac	d1 f8		 sar	 eax, 1
  000ae	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  000b1	7d 67		 jge	 SHORT $L3772

; 173  :     ret[i]=0;

  000b3	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000b6	c7 84 95 68 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _ret$[ebp+edx*4], 0

; 174  :     for (j=0; j<l1; j++) {

  000c1	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0
  000cb	eb 0f		 jmp	 SHORT $L3773
$L3774:
  000cd	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  000d3	83 c0 01	 add	 eax, 1
  000d6	89 85 64 fe ff
	ff		 mov	 DWORD PTR _j$[ebp], eax
$L3773:
  000dc	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  000e2	3b 4d 10	 cmp	 ecx, DWORD PTR _l1$[ebp]
  000e5	7d 31		 jge	 SHORT $L3775

; 175  :       ret[i] += MULT_LSP(in1[j],in2[i-j]);

  000e7	8b 95 64 fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  000ed	8b 45 0c	 mov	 eax, DWORD PTR _in1$[ebp]
  000f0	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000f6	2b 8d 64 fe ff
	ff		 sub	 ecx, DWORD PTR _j$[ebp]
  000fc	8b 55 14	 mov	 edx, DWORD PTR _in2$[ebp]
  000ff	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  00102	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00105	d8 84 85 68 fe
	ff ff		 fadd	 DWORD PTR _ret$[ebp+eax*4]
  0010c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0010f	d9 9c 8d 68 fe
	ff ff		 fstp	 DWORD PTR _ret$[ebp+ecx*4]

; 176  :     }

  00116	eb b5		 jmp	 SHORT $L3774
$L3775:

; 177  :   }

  00118	eb 80		 jmp	 SHORT $L3771
$L3772:

; 178  :   
; 179  :   *lout=(l1+l2)-1;

  0011a	8b 55 18	 mov	 edx, DWORD PTR _l2$[ebp]
  0011d	8b 45 10	 mov	 eax, DWORD PTR _l1$[ebp]
  00120	8d 4c 10 ff	 lea	 ecx, DWORD PTR [eax+edx-1]
  00124	8b 55 20	 mov	 edx, DWORD PTR _lout$[ebp]
  00127	89 0a		 mov	 DWORD PTR [edx], ecx

; 180  :   for (i=0; i<(*lout)/2; i++) {

  00129	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00130	eb 09		 jmp	 SHORT $L3776
$L3777:
  00132	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00135	83 c0 01	 add	 eax, 1
  00138	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L3776:
  0013b	8b 4d 20	 mov	 ecx, DWORD PTR _lout$[ebp]
  0013e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00140	99		 cdq
  00141	2b c2		 sub	 eax, edx
  00143	d1 f8		 sar	 eax, 1
  00145	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00148	7d 30		 jge	 SHORT $L3778

; 181  :     out[i]=ret[i];

  0014a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0014d	8b 45 1c	 mov	 eax, DWORD PTR _out$[ebp]
  00150	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00153	8b 8c 8d 68 fe
	ff ff		 mov	 ecx, DWORD PTR _ret$[ebp+ecx*4]
  0015a	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 182  :     out[(*lout-1)-i]=ret[i];

  0015d	8b 55 20	 mov	 edx, DWORD PTR _lout$[ebp]
  00160	8b 02		 mov	 eax, DWORD PTR [edx]
  00162	83 e8 01	 sub	 eax, 1
  00165	2b 45 fc	 sub	 eax, DWORD PTR _i$[ebp]
  00168	8b 4d 1c	 mov	 ecx, DWORD PTR _out$[ebp]
  0016b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0016e	8b 94 95 68 fe
	ff ff		 mov	 edx, DWORD PTR _ret$[ebp+edx*4]
  00175	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 183  :   }

  00178	eb b8		 jmp	 SHORT $L3777
$L3778:

; 184  :   out[*lout/2]=ret[*lout/2];

  0017a	8b 45 20	 mov	 eax, DWORD PTR _lout$[ebp]
  0017d	8b 00		 mov	 eax, DWORD PTR [eax]
  0017f	99		 cdq
  00180	2b c2		 sub	 eax, edx
  00182	8b c8		 mov	 ecx, eax
  00184	d1 f9		 sar	 ecx, 1
  00186	8b 55 20	 mov	 edx, DWORD PTR _lout$[ebp]
  00189	8b 02		 mov	 eax, DWORD PTR [edx]
  0018b	99		 cdq
  0018c	2b c2		 sub	 eax, edx
  0018e	d1 f8		 sar	 eax, 1
  00190	8b 55 1c	 mov	 edx, DWORD PTR _out$[ebp]
  00193	8b 8c 8d 68 fe
	ff ff		 mov	 ecx, DWORD PTR _ret$[ebp+ecx*4]
  0019a	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx

; 185  : }

  0019d	8b e5		 mov	 esp, ebp
  0019f	5d		 pop	 ebp
  001a0	c2 1c 00	 ret	 28			; 0000001cH
_prvConvolve_odd_XDS@28 ENDP
WMADEC	ENDS
PUBLIC	_prvConvolve_XDS@28
; Function compile flags: /Odt
;	COMDAT _prvConvolve_XDS@28
WMADEC	SEGMENT
_j$ = -412
_ret$ = -408
_i$ = -4
_pau$ = 8
_in1$ = 12
_l1$ = 16
_in2$ = 20
_l2$ = 24
_out$ = 28
_lout$ = 32
_prvConvolve_XDS@28 PROC NEAR				; COMDAT

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 01 00
	00		 sub	 esp, 412		; 0000019cH

; 190  :   // In BUILD_INTEGER mode, in1 assumed to have FRACT_BITS_LSP and in2 to have FRACT_BITS_LP. Output will have
; 191  :   // FRACT_BITS_LP.
; 192  :   I32   i,j;
; 193  :   LpType ret[100];
; 194  :   
; 195  :   for (i=0; (i<l1)&&(i<l2); i++) {

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $L3797
$L3798:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L3797:
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0001e	3b 4d 10	 cmp	 ecx, DWORD PTR _l1$[ebp]
  00021	7d 6f		 jge	 SHORT $L3799
  00023	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00026	3b 55 18	 cmp	 edx, DWORD PTR _l2$[ebp]
  00029	7d 67		 jge	 SHORT $L3799

; 196  :     ret[i]=0;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002e	c7 84 85 68 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _ret$[ebp+eax*4], 0

; 197  :     for (j=0; j<=i; j++) {

  00039	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0
  00043	eb 0f		 jmp	 SHORT $L3800
$L3801:
  00045	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  0004b	83 c1 01	 add	 ecx, 1
  0004e	89 8d 64 fe ff
	ff		 mov	 DWORD PTR _j$[ebp], ecx
$L3800:
  00054	8b 95 64 fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  0005a	3b 55 fc	 cmp	 edx, DWORD PTR _i$[ebp]
  0005d	7f 31		 jg	 SHORT $L3802

; 198  :       ret[i] += MULT_LSP(in1[j],in2[i-j]);

  0005f	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _in1$[ebp]
  00068	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0006e	2b 95 64 fe ff
	ff		 sub	 edx, DWORD PTR _j$[ebp]
  00074	8b 45 14	 mov	 eax, DWORD PTR _in2$[ebp]
  00077	d8 0c 90	 fmul	 DWORD PTR [eax+edx*4]
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0007d	d8 84 8d 68 fe
	ff ff		 fadd	 DWORD PTR _ret$[ebp+ecx*4]
  00084	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00087	d9 9c 95 68 fe
	ff ff		 fstp	 DWORD PTR _ret$[ebp+edx*4]

; 199  :     }

  0008e	eb b5		 jmp	 SHORT $L3801
$L3802:

; 200  :   }

  00090	eb 80		 jmp	 SHORT $L3798
$L3799:

; 201  :   
; 202  :   for (i=l1; i<(l1+l2)/2; i++) {

  00092	8b 45 10	 mov	 eax, DWORD PTR _l1$[ebp]
  00095	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  00098	eb 09		 jmp	 SHORT $L3803
$L3804:
  0009a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0009d	83 c1 01	 add	 ecx, 1
  000a0	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L3803:
  000a3	8b 45 10	 mov	 eax, DWORD PTR _l1$[ebp]
  000a6	03 45 18	 add	 eax, DWORD PTR _l2$[ebp]
  000a9	99		 cdq
  000aa	2b c2		 sub	 eax, edx
  000ac	d1 f8		 sar	 eax, 1
  000ae	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  000b1	7d 67		 jge	 SHORT $L3805

; 203  :     ret[i]=0;

  000b3	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000b6	c7 84 95 68 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _ret$[ebp+edx*4], 0

; 204  :     for (j=0; j<l1; j++) {

  000c1	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0
  000cb	eb 0f		 jmp	 SHORT $L3806
$L3807:
  000cd	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  000d3	83 c0 01	 add	 eax, 1
  000d6	89 85 64 fe ff
	ff		 mov	 DWORD PTR _j$[ebp], eax
$L3806:
  000dc	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  000e2	3b 4d 10	 cmp	 ecx, DWORD PTR _l1$[ebp]
  000e5	7d 31		 jge	 SHORT $L3808

; 205  :       ret[i] += MULT_LSP(in1[j],in2[i-j]);

  000e7	8b 95 64 fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  000ed	8b 45 0c	 mov	 eax, DWORD PTR _in1$[ebp]
  000f0	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000f6	2b 8d 64 fe ff
	ff		 sub	 ecx, DWORD PTR _j$[ebp]
  000fc	8b 55 14	 mov	 edx, DWORD PTR _in2$[ebp]
  000ff	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  00102	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00105	d8 84 85 68 fe
	ff ff		 fadd	 DWORD PTR _ret$[ebp+eax*4]
  0010c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0010f	d9 9c 8d 68 fe
	ff ff		 fstp	 DWORD PTR _ret$[ebp+ecx*4]

; 206  :     }

  00116	eb b5		 jmp	 SHORT $L3807
$L3808:

; 207  :   }

  00118	eb 80		 jmp	 SHORT $L3804
$L3805:

; 208  :   
; 209  :   *lout=(l1+l2)-1;

  0011a	8b 55 18	 mov	 edx, DWORD PTR _l2$[ebp]
  0011d	8b 45 10	 mov	 eax, DWORD PTR _l1$[ebp]
  00120	8d 4c 10 ff	 lea	 ecx, DWORD PTR [eax+edx-1]
  00124	8b 55 20	 mov	 edx, DWORD PTR _lout$[ebp]
  00127	89 0a		 mov	 DWORD PTR [edx], ecx

; 210  :   for (i=0; i<(*lout)/2; i++) {

  00129	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00130	eb 09		 jmp	 SHORT $L3809
$L3810:
  00132	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00135	83 c0 01	 add	 eax, 1
  00138	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L3809:
  0013b	8b 4d 20	 mov	 ecx, DWORD PTR _lout$[ebp]
  0013e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00140	99		 cdq
  00141	2b c2		 sub	 eax, edx
  00143	d1 f8		 sar	 eax, 1
  00145	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00148	7d 30		 jge	 SHORT $L3793

; 211  :     out[i]=ret[i];

  0014a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0014d	8b 45 1c	 mov	 eax, DWORD PTR _out$[ebp]
  00150	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00153	8b 8c 8d 68 fe
	ff ff		 mov	 ecx, DWORD PTR _ret$[ebp+ecx*4]
  0015a	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 212  :     out[(*lout-1)-i]=ret[i];

  0015d	8b 55 20	 mov	 edx, DWORD PTR _lout$[ebp]
  00160	8b 02		 mov	 eax, DWORD PTR [edx]
  00162	83 e8 01	 sub	 eax, 1
  00165	2b 45 fc	 sub	 eax, DWORD PTR _i$[ebp]
  00168	8b 4d 1c	 mov	 ecx, DWORD PTR _out$[ebp]
  0016b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0016e	8b 94 95 68 fe
	ff ff		 mov	 edx, DWORD PTR _ret$[ebp+edx*4]
  00175	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 213  :   }

  00178	eb b8		 jmp	 SHORT $L3810
$L3793:

; 214  : }

  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 1c 00	 ret	 28			; 0000001cH
_prvConvolve_XDS@28 ENDP
WMADEC	ENDS
PUBLIC	_prvLsp2pq_XDS@20
; Function compile flags: /Odt
;	COMDAT _prvLsp2pq_XDS@20
WMADEC	SEGMENT
_long_length$ = -428
_i$ = -424
_short_seq$ = -420
_long_seq$ = -408
_short_length$ = -4
_pau$ = 8
_lsfQ$ = 12
_p$ = 16
_q$ = 20
_order$ = 24
_prvLsp2pq_XDS@20 PROC NEAR				; COMDAT

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 01 00
	00		 sub	 esp, 428		; 000001acH

; 238  :     I32     i;
; 239  :     LpType  long_seq[100];
; 240  :     LspType short_seq[3];
; 241  :     Int     long_length, short_length;
; 242  :     
; 243  : #if 0 // only to create preload for g_rgiLsfReconLevel in lpcconst.h
; 244  :     static int first = 1;
; 245  :     if (first)
; 246  :     {
; 247  :         for( i = 0; i<LPCORDER; i++ )
; 248  :         {
; 249  :             printf("LP_CONST16(");
; 250  :             for( first = 0; first < 15; first++ )
; 251  :                 printf("%.10f,", g_rgfltLsfReconLevel [i] [first] != 0 ? -2.0F*(Float)cos(2.0*PI*(g_rgfltLsfReconLevel [i] [first]) ) : 0.0f );
; 252  :             printf("%.10f),\n", g_rgfltLsfReconLevel [i] [first] != 0 ? -2.0F*(Float)cos(2.0*PI*(g_rgfltLsfReconLevel [i] [first]) ) : 0.0f );
; 253  :         }
; 254  :         first = 0;
; 255  :     }
; 256  : #endif
; 257  :     
; 258  :     short_length = 3; 

  00009	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _short_length$[ebp], 3

; 259  :     long_length  = 2;

  00010	c7 85 54 fe ff
	ff 02 00 00 00	 mov	 DWORD PTR _long_length$[ebp], 2

; 260  :     
; 261  :     short_seq[0] = short_seq[2] = LSP_FROM_FLOAT(1);

  0001a	c7 85 64 fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _short_seq$[ebp+8], 1065353216 ; 3f800000H
  00024	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _short_seq$[ebp+8]
  0002a	89 85 5c fe ff
	ff		 mov	 DWORD PTR _short_seq$[ebp], eax

; 262  :     long_seq[0]  = long_seq[1]  = LP_FROM_FLOAT(1);

  00030	c7 85 6c fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _long_seq$[ebp+4], 1065353216 ; 3f800000H
  0003a	8b 8d 6c fe ff
	ff		 mov	 ecx, DWORD PTR _long_seq$[ebp+4]
  00040	89 8d 68 fe ff
	ff		 mov	 DWORD PTR _long_seq$[ebp], ecx

; 263  :     
; 264  :     for (i = 0; i < order; i+= 2) {

  00046	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00050	eb 0f		 jmp	 SHORT $L3830
$L3831:
  00052	8b 95 58 fe ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  00058	83 c2 02	 add	 edx, 2
  0005b	89 95 58 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], edx
$L3830:
  00061	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00067	3b 45 18	 cmp	 eax, DWORD PTR _order$[ebp]
  0006a	7d 54		 jge	 SHORT $L3832

; 265  :         short_seq[1]= LSF_DECODE(i,lsfQ);   // -2.0F*(Float)cos(2.0*PI*lsp[i])

  0006c	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00072	c1 e1 06	 shl	 ecx, 6
  00075	8b 55 0c	 mov	 edx, DWORD PTR _lsfQ$[ebp]
  00078	03 95 58 fe ff
	ff		 add	 edx, DWORD PTR _i$[ebp]
  0007e	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00081	8b 8c 81 00 00
	00 00		 mov	 ecx, DWORD PTR _g_rgiLsfReconLevel_XDS[ecx+eax*4]
  00088	89 8d 60 fe ff
	ff		 mov	 DWORD PTR _short_seq$[ebp+4], ecx

; 266  :         prvConvolve(pau, short_seq, short_length, long_seq, long_length, 
; 267  :             long_seq, &long_length);

  0008e	8d 95 54 fe ff
	ff		 lea	 edx, DWORD PTR _long_length$[ebp]
  00094	52		 push	 edx
  00095	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR _long_seq$[ebp]
  0009b	50		 push	 eax
  0009c	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR _long_length$[ebp]
  000a2	51		 push	 ecx
  000a3	8d 95 68 fe ff
	ff		 lea	 edx, DWORD PTR _long_seq$[ebp]
  000a9	52		 push	 edx
  000aa	8b 45 fc	 mov	 eax, DWORD PTR _short_length$[ebp]
  000ad	50		 push	 eax
  000ae	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _short_seq$[ebp]
  000b4	51		 push	 ecx
  000b5	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  000b8	52		 push	 edx
  000b9	e8 00 00 00 00	 call	 _prvConvolve_XDS@28

; 268  :     }

  000be	eb 92		 jmp	 SHORT $L3831
$L3832:

; 269  :     
; 270  :     for (i=1; i<=order/2; i++) {

  000c0	c7 85 58 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _i$[ebp], 1
  000ca	eb 0f		 jmp	 SHORT $L3833
$L3834:
  000cc	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  000d2	83 c0 01	 add	 eax, 1
  000d5	89 85 58 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$L3833:
  000db	8b 45 18	 mov	 eax, DWORD PTR _order$[ebp]
  000de	99		 cdq
  000df	2b c2		 sub	 eax, edx
  000e1	d1 f8		 sar	 eax, 1
  000e3	39 85 58 fe ff
	ff		 cmp	 DWORD PTR _i$[ebp], eax
  000e9	7f 1b		 jg	 SHORT $L3835

; 271  :         p[i] = long_seq[i];

  000eb	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  000f1	8b 55 10	 mov	 edx, DWORD PTR _p$[ebp]
  000f4	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  000fa	8b 84 85 68 fe
	ff ff		 mov	 eax, DWORD PTR _long_seq$[ebp+eax*4]
  00101	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 272  :     }

  00104	eb c6		 jmp	 SHORT $L3834
$L3835:

; 273  :     
; 274  :     long_length = 3;

  00106	c7 85 54 fe ff
	ff 03 00 00 00	 mov	 DWORD PTR _long_length$[ebp], 3

; 275  :     long_seq[0] = LP_FROM_FLOAT(1);

  00110	c7 85 68 fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _long_seq$[ebp], 1065353216 ; 3f800000H

; 276  :     long_seq[1] = LP_DECODE(1,lsfQ);             // -2.0F*(Float)cos(2.0*PI*lsp[1])

  0011a	8b 4d 0c	 mov	 ecx, DWORD PTR _lsfQ$[ebp]
  0011d	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  00121	8b 04 95 40 00
	00 00		 mov	 eax, DWORD PTR _g_rgiLsfReconLevel_XDS[edx*4+64]
  00128	89 85 6c fe ff
	ff		 mov	 DWORD PTR _long_seq$[ebp+4], eax

; 277  :     long_seq[2] = LP_FROM_FLOAT(1);

  0012e	c7 85 70 fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _long_seq$[ebp+8], 1065353216 ; 3f800000H

; 278  :     
; 279  :     for (i = 3; i < order; i += 2) {

  00138	c7 85 58 fe ff
	ff 03 00 00 00	 mov	 DWORD PTR _i$[ebp], 3
  00142	eb 0f		 jmp	 SHORT $L3838
$L3839:
  00144	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0014a	83 c1 02	 add	 ecx, 2
  0014d	89 8d 58 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], ecx
$L3838:
  00153	8b 95 58 fe ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  00159	3b 55 18	 cmp	 edx, DWORD PTR _order$[ebp]
  0015c	7d 54		 jge	 SHORT $L3840

; 280  :         short_seq[1]= LSF_DECODE(i,lsfQ);   // -2.0F*(Float)cos(2.0*PI*lsp[i])

  0015e	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00164	c1 e0 06	 shl	 eax, 6
  00167	8b 4d 0c	 mov	 ecx, DWORD PTR _lsfQ$[ebp]
  0016a	03 8d 58 fe ff
	ff		 add	 ecx, DWORD PTR _i$[ebp]
  00170	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00173	8b 84 90 00 00
	00 00		 mov	 eax, DWORD PTR _g_rgiLsfReconLevel_XDS[eax+edx*4]
  0017a	89 85 60 fe ff
	ff		 mov	 DWORD PTR _short_seq$[ebp+4], eax

; 281  :         prvConvolve_odd(pau, short_seq, short_length, long_seq, long_length, 
; 282  :             long_seq, &long_length);

  00180	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR _long_length$[ebp]
  00186	51		 push	 ecx
  00187	8d 95 68 fe ff
	ff		 lea	 edx, DWORD PTR _long_seq$[ebp]
  0018d	52		 push	 edx
  0018e	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _long_length$[ebp]
  00194	50		 push	 eax
  00195	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _long_seq$[ebp]
  0019b	51		 push	 ecx
  0019c	8b 55 fc	 mov	 edx, DWORD PTR _short_length$[ebp]
  0019f	52		 push	 edx
  001a0	8d 85 5c fe ff
	ff		 lea	 eax, DWORD PTR _short_seq$[ebp]
  001a6	50		 push	 eax
  001a7	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  001aa	51		 push	 ecx
  001ab	e8 00 00 00 00	 call	 _prvConvolve_odd_XDS@28

; 283  :     }

  001b0	eb 92		 jmp	 SHORT $L3839
$L3840:

; 284  :     
; 285  :     for (i=1; i<=order/2; i++) {

  001b2	c7 85 58 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _i$[ebp], 1
  001bc	eb 0f		 jmp	 SHORT $L3841
$L3842:
  001be	8b 95 58 fe ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  001c4	83 c2 01	 add	 edx, 1
  001c7	89 95 58 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], edx
$L3841:
  001cd	8b 45 18	 mov	 eax, DWORD PTR _order$[ebp]
  001d0	99		 cdq
  001d1	2b c2		 sub	 eax, edx
  001d3	d1 f8		 sar	 eax, 1
  001d5	39 85 58 fe ff
	ff		 cmp	 DWORD PTR _i$[ebp], eax
  001db	7f 28		 jg	 SHORT $L3822

; 286  :         q[i]=long_seq[i]-long_seq[i-1];

  001dd	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  001e3	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  001e9	d9 84 85 68 fe
	ff ff		 fld	 DWORD PTR _long_seq$[ebp+eax*4]
  001f0	d8 a4 8d 64 fe
	ff ff		 fsub	 DWORD PTR _long_seq$[ebp+ecx*4-4]
  001f7	8b 95 58 fe ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  001fd	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  00200	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 287  :     }

  00203	eb b9		 jmp	 SHORT $L3842
$L3822:

; 288  : }

  00205	8b e5		 mov	 esp, ebp
  00207	5d		 pop	 ebp
  00208	c2 14 00	 ret	 20			; 00000014H
_prvLsp2pq_XDS@20 ENDP
WMADEC	ENDS
PUBLIC	_auLsp2lpc_XDS@16
; Function compile flags: /Odt
;	COMDAT _auLsp2lpc_XDS@16
WMADEC	SEGMENT
_q$ = -96
_p$ = -48
_pau$ = 8
_lsfQ$ = 12
_lpc$ = 16
_order$ = 20
_auLsp2lpc_XDS@16 PROC NEAR				; COMDAT

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H

; 293  :   LpType p[LPCORDER+2],q[LPCORDER+2];
; 294  :   
; 295  :   prvLsp2pq(pau, lsfQ,p,q,order);

  00006	8b 45 14	 mov	 eax, DWORD PTR _order$[ebp]
  00009	50		 push	 eax
  0000a	8d 4d a0	 lea	 ecx, DWORD PTR _q$[ebp]
  0000d	51		 push	 ecx
  0000e	8d 55 d0	 lea	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	8b 45 0c	 mov	 eax, DWORD PTR _lsfQ$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _pau$[ebp]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 _prvLsp2pq_XDS@20

; 296  :   
; 297  :   prvPq2lpc(pau, p,q,lpc,order);

  0001f	8b 55 14	 mov	 edx, DWORD PTR _order$[ebp]
  00022	52		 push	 edx
  00023	8b 45 10	 mov	 eax, DWORD PTR _lpc$[ebp]
  00026	50		 push	 eax
  00027	8d 4d a0	 lea	 ecx, DWORD PTR _q$[ebp]
  0002a	51		 push	 ecx
  0002b	8d 55 d0	 lea	 edx, DWORD PTR _p$[ebp]
  0002e	52		 push	 edx
  0002f	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _prvPq2lpc_XDS@20

; 298  : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 10 00	 ret	 16			; 00000010H
_auLsp2lpc_XDS@16 ENDP
WMADEC	ENDS
PUBLIC	_prvInitInverseQuadRootTable_XDS@4
PUBLIC	__real@3ff0000000000000
EXTRN	_sqrt:NEAR
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _prvInitInverseQuadRootTable_XDS@4
WMADEC	SEGMENT
_fltInt$3873 = -24
_f$3874 = -20
_invQuadRoot$3867 = -16
_fltInt$3864 = -12
_f$3865 = -8
_i$ = -4
_pau$ = 8
_prvInitInverseQuadRootTable_XDS@4 PROC NEAR		; COMDAT

; 517  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 518  :     //Iterate through floating point numbers with 12 bits of presition
; 519  :     //The folowing loop is equivalent to 
; 520  :     //for (Float i = 1.0; i < 1.999756;i+=1.000244)
; 521  :     Int i;
; 522  :     for (i = 0; i < 1<<(PRECESSION_BITS_FOR_INVQUADROOT); i++){          

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0000d	eb 09		 jmp	 SHORT $L3861
$L3862:
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00012	83 c0 01	 add	 eax, 1
  00015	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L3861:
  00018	81 7d fc 00 10
	00 00		 cmp	 DWORD PTR _i$[ebp], 4096 ; 00001000H
  0001f	7d 4c		 jge	 SHORT $L3863

; 523  :         Int fltInt = 0x3F800000 | (i << (23-PRECESSION_BITS_FOR_INVQUADROOT));//Build floating point      

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00024	c1 e1 0b	 shl	 ecx, 11			; 0000000bH
  00027	81 c9 00 00 80
	3f		 or	 ecx, 1065353216		; 3f800000H
  0002d	89 4d f4	 mov	 DWORD PTR _fltInt$3864[ebp], ecx

; 524  :         Float f = *(Float *)&fltInt;                       //number in the form of 1.i * pow(2,0);

  00030	8b 55 f4	 mov	 edx, DWORD PTR _fltInt$3864[ebp]
  00033	89 55 f8	 mov	 DWORD PTR _f$3865[ebp], edx

; 525  :         Float invQuadRoot = (Float)(1/sqrt(sqrt(f)));  //Calculate inverse quad root

  00036	d9 45 f8	 fld	 DWORD PTR _f$3865[ebp]
  00039	83 ec 08	 sub	 esp, 8
  0003c	dd 1c 24	 fstp	 QWORD PTR [esp]
  0003f	e8 00 00 00 00	 call	 _sqrt
  00044	dd 1c 24	 fstp	 QWORD PTR [esp]
  00047	e8 00 00 00 00	 call	 _sqrt
  0004c	83 c4 08	 add	 esp, 8
  0004f	dc 3d 00 00 00
	00		 fdivr	 QWORD PTR __real@3ff0000000000000
  00055	d9 5d f0	 fstp	 DWORD PTR _invQuadRoot$3867[ebp]

; 526  :         fltInt = *(Int *)&invQuadRoot;          

  00058	8b 45 f0	 mov	 eax, DWORD PTR _invQuadRoot$3867[ebp]
  0005b	89 45 f4	 mov	 DWORD PTR _fltInt$3864[ebp], eax

; 527  :         g_InvQuadRootMantissa[i] = fltInt;             //Store value in table

  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00061	8b 55 f4	 mov	 edx, DWORD PTR _fltInt$3864[ebp]
  00064	89 14 8d 00 00
	00 00		 mov	 DWORD PTR _g_InvQuadRootMantissa[ecx*4], edx

; 528  :     }

  0006b	eb a2		 jmp	 SHORT $L3862
$L3863:

; 529  :     
; 530  :     //Iterate through floating point exponents from pow(2,-126)...pow(2,127) by powers of 2
; 531  :     for (i = 1; i < 255; i++){

  0006d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00074	eb 09		 jmp	 SHORT $L3870
$L3871:
  00076	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00079	83 c0 01	 add	 eax, 1
  0007c	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L3870:
  0007f	81 7d fc ff 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 255	; 000000ffH
  00086	7d 40		 jge	 SHORT $L3859

; 532  :         Int fltInt = (i << 23);                             //Build floating point number in the form

  00088	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0008b	c1 e1 17	 shl	 ecx, 23			; 00000017H
  0008e	89 4d e8	 mov	 DWORD PTR _fltInt$3873[ebp], ecx

; 533  :         Float f = *(Float *)&fltInt;            //of 1.0 * pow(2,(i-125))

  00091	8b 55 e8	 mov	 edx, DWORD PTR _fltInt$3873[ebp]
  00094	89 55 ec	 mov	 DWORD PTR _f$3874[ebp], edx

; 534  :         f = (Float)(1/sqrt(sqrt(f)));           //calculate inverse quad root / 2

  00097	d9 45 ec	 fld	 DWORD PTR _f$3874[ebp]
  0009a	83 ec 08	 sub	 esp, 8
  0009d	dd 1c 24	 fstp	 QWORD PTR [esp]
  000a0	e8 00 00 00 00	 call	 _sqrt
  000a5	dd 1c 24	 fstp	 QWORD PTR [esp]
  000a8	e8 00 00 00 00	 call	 _sqrt
  000ad	83 c4 08	 add	 esp, 8
  000b0	dc 3d 00 00 00
	00		 fdivr	 QWORD PTR __real@3ff0000000000000
  000b6	d9 5d ec	 fstp	 DWORD PTR _f$3874[ebp]

; 535  :         g_InvQuadRootExponent[i] = *(Int *)&f;  //Store in table   

  000b9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000bc	8b 4d ec	 mov	 ecx, DWORD PTR _f$3874[ebp]
  000bf	89 0c 85 00 00
	00 00		 mov	 DWORD PTR _g_InvQuadRootExponent[eax*4], ecx

; 536  :     }

  000c6	eb ae		 jmp	 SHORT $L3871
$L3859:

; 537  :     SETUP_LPC_SPEC_TRIG(pau);
; 538  : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 04 00	 ret	 4
_prvInitInverseQuadRootTable_XDS@4 ENDP
WMADEC	ENDS
PUBLIC	__real@3f800000
PUBLIC	_InverseQuadRootOfSumSquares@8
PUBLIC	_prvDoLpc4_XDS@24
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _prvDoLpc4_XDS@24
WMADEC	SEGMENT
_CmS$ = -64
_T2$ = -60
_T4$ = -56
_T9$ = -52
_D$ = -48
_TA$ = -44
_C3$ = -40
_CpS$ = -36
_T6$ = -32
_T7$ = -28
_T8$ = -24
_S2$ = -20
_S3$ = -16
_TB$ = -12
_C2$ = -8
_E$ = -4
_k$ = 8
_pTmp$ = 12
_pWF$ = 16
_iSizeBy2$ = 20
_S1$ = 24
_C1$ = 28
_prvDoLpc4_XDS@24 PROC NEAR				; COMDAT

; 900  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H

; 901  :     BP2Type    CmS, CpS;
; 902  :     LpSpecType T2, T4, T6, T7, T8, T9, TA, TB;
; 903  :     LpSpecType D, E;
; 904  : 
; 905  :     BP2Type    C2, S2, C3, S3;
; 906  : 
; 907  : //#define DOLPC4_BREAK 243
; 908  : #if defined(DOLPC4_BREAK) && defined(_DEBUG)
; 909  :     if ( k==DOLPC4_BREAK || (iSizeBy2-k)==DOLPC4_BREAK || (iSizeBy2+k)==DOLPC4_BREAK || ((iSizeBy2<<1)-k)==DOLPC4_BREAK )
; 910  :     {
; 911  :         DEBUG_BREAK();
; 912  :     }
; 913  :     
; 914  : #endif
; 915  :     CmS = C1 - S1;                              // cnst4[i*6+4];

  00006	d9 45 1c	 fld	 DWORD PTR _C1$[ebp]
  00009	d8 65 18	 fsub	 DWORD PTR _S1$[ebp]
  0000c	d9 5d c0	 fstp	 DWORD PTR _CmS$[ebp]

; 916  :     CpS = C1 + S1;                              // cnst4[i*6+5];

  0000f	d9 45 1c	 fld	 DWORD PTR _C1$[ebp]
  00012	d8 45 18	 fadd	 DWORD PTR _S1$[ebp]
  00015	d9 5d dc	 fstp	 DWORD PTR _CpS$[ebp]

; 917  :     assert( BP2_FROM_FLOAT(1.0) <= CpS && CpS < BP2_FROM_FLOAT(1.5) );
; 918  :     T8 = MULT_BP2X(CmS,pTmp[2]) + MULT_BP2X(CpS,pTmp[3]);     // F[2048+j]    F[3072-j]

  00018	8b 45 0c	 mov	 eax, DWORD PTR _pTmp$[ebp]
  0001b	d9 40 08	 fld	 DWORD PTR [eax+8]
  0001e	d8 4d c0	 fmul	 DWORD PTR _CmS$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _pTmp$[ebp]
  00024	d9 41 0c	 fld	 DWORD PTR [ecx+12]
  00027	d8 4d dc	 fmul	 DWORD PTR _CpS$[ebp]
  0002a	de c1		 faddp	 ST(1), ST(0)
  0002c	d9 5d e8	 fstp	 DWORD PTR _T8$[ebp]

; 919  :     T6 = MULT_BP2X(CpS,pTmp[2]) - MULT_BP2X(CmS,pTmp[3]);     // F[2048+j]    F[3072-j]

  0002f	8b 55 0c	 mov	 edx, DWORD PTR _pTmp$[ebp]
  00032	d9 42 08	 fld	 DWORD PTR [edx+8]
  00035	d8 4d dc	 fmul	 DWORD PTR _CpS$[ebp]
  00038	8b 45 0c	 mov	 eax, DWORD PTR _pTmp$[ebp]
  0003b	d9 40 0c	 fld	 DWORD PTR [eax+12]
  0003e	d8 4d c0	 fmul	 DWORD PTR _CmS$[ebp]
  00041	de e9		 fsubp	 ST(1), ST(0)
  00043	d9 5d e0	 fstp	 DWORD PTR _T6$[ebp]

; 920  : 
; 921  :     S2 = MUL2(MULT_BP2X(C1,S1));                        // sin(2x)

  00046	d9 45 1c	 fld	 DWORD PTR _C1$[ebp]
  00049	d8 4d 18	 fmul	 DWORD PTR _S1$[ebp]
  0004c	dc c0		 fadd	 ST(0), ST(0)
  0004e	d9 5d ec	 fstp	 DWORD PTR _S2$[ebp]

; 922  :     C2 = BP2_FROM_FLOAT(1.0f) - MUL2(MULT_BP2X(S1,S1)); // cos(2x)

  00051	d9 45 18	 fld	 DWORD PTR _S1$[ebp]
  00054	d8 4d 18	 fmul	 DWORD PTR _S1$[ebp]
  00057	dc c0		 fadd	 ST(0), ST(0)
  00059	d8 2d 00 00 00
	00		 fsubr	 DWORD PTR __real@3f800000
  0005f	d9 55 f8	 fst	 DWORD PTR _C2$[ebp]

; 923  :     CmS = C2 - S2;                              // cnst4[i*6+2];

  00062	d8 65 ec	 fsub	 DWORD PTR _S2$[ebp]
  00065	d9 5d c0	 fstp	 DWORD PTR _CmS$[ebp]

; 924  :     CpS = C2 + S2;                              // cnst4[i*6+3];

  00068	d9 45 f8	 fld	 DWORD PTR _C2$[ebp]
  0006b	d8 45 ec	 fadd	 DWORD PTR _S2$[ebp]
  0006e	d9 5d dc	 fstp	 DWORD PTR _CpS$[ebp]

; 925  :     T7 = MULT_BP2X(CmS,pTmp[0]) + MULT_BP2X(CpS,pTmp[1]);     // F[1024+j]    F[2048-j]

  00071	8b 4d 0c	 mov	 ecx, DWORD PTR _pTmp$[ebp]
  00074	d9 45 c0	 fld	 DWORD PTR _CmS$[ebp]
  00077	d8 09		 fmul	 DWORD PTR [ecx]
  00079	8b 55 0c	 mov	 edx, DWORD PTR _pTmp$[ebp]
  0007c	d9 42 04	 fld	 DWORD PTR [edx+4]
  0007f	d8 4d dc	 fmul	 DWORD PTR _CpS$[ebp]
  00082	de c1		 faddp	 ST(1), ST(0)
  00084	d9 5d e4	 fstp	 DWORD PTR _T7$[ebp]

; 926  :     T4 = MULT_BP2X(CpS,pTmp[0]) - MULT_BP2X(CmS,pTmp[1]);     // F[1024+j]    F[2048-j]

  00087	8b 45 0c	 mov	 eax, DWORD PTR _pTmp$[ebp]
  0008a	d9 45 dc	 fld	 DWORD PTR _CpS$[ebp]
  0008d	d8 08		 fmul	 DWORD PTR [eax]
  0008f	8b 4d 0c	 mov	 ecx, DWORD PTR _pTmp$[ebp]
  00092	d9 41 04	 fld	 DWORD PTR [ecx+4]
  00095	d8 4d c0	 fmul	 DWORD PTR _CmS$[ebp]
  00098	de e9		 fsubp	 ST(1), ST(0)
  0009a	d9 5d c8	 fstp	 DWORD PTR _T4$[ebp]

; 927  : 
; 928  :     S3 = MULT_BP2X(S1,C2) + MULT_BP2X(C1,S2);   // sin(3x) = sin(x+2x)

  0009d	d9 45 18	 fld	 DWORD PTR _S1$[ebp]
  000a0	d8 4d f8	 fmul	 DWORD PTR _C2$[ebp]
  000a3	d9 45 1c	 fld	 DWORD PTR _C1$[ebp]
  000a6	d8 4d ec	 fmul	 DWORD PTR _S2$[ebp]
  000a9	de c1		 faddp	 ST(1), ST(0)
  000ab	d9 5d f0	 fstp	 DWORD PTR _S3$[ebp]

; 929  :     C3 = MULT_BP2X(C1,C2) - MULT_BP2X(S1,S2);   // cos(2x) = cos(x+2x)

  000ae	d9 45 1c	 fld	 DWORD PTR _C1$[ebp]
  000b1	d8 4d f8	 fmul	 DWORD PTR _C2$[ebp]
  000b4	d9 45 18	 fld	 DWORD PTR _S1$[ebp]
  000b7	d8 4d ec	 fmul	 DWORD PTR _S2$[ebp]
  000ba	de e9		 fsubp	 ST(1), ST(0)
  000bc	d9 55 d8	 fst	 DWORD PTR _C3$[ebp]

; 930  :     CmS = C3 - S3;                              // old cnst4[i*6];

  000bf	d8 65 f0	 fsub	 DWORD PTR _S3$[ebp]
  000c2	d9 5d c0	 fstp	 DWORD PTR _CmS$[ebp]

; 931  :     CpS = C3 + S3;                              // old cnst4[i*6+1];

  000c5	d9 45 d8	 fld	 DWORD PTR _C3$[ebp]
  000c8	d8 45 f0	 fadd	 DWORD PTR _S3$[ebp]
  000cb	d9 5d dc	 fstp	 DWORD PTR _CpS$[ebp]

; 932  :     T9 = MULT_BP2X(CmS,pTmp[4]) + MULT_BP2X(CpS,pTmp[5]);     // F[3072+j]    F[4096-j]

  000ce	8b 55 0c	 mov	 edx, DWORD PTR _pTmp$[ebp]
  000d1	d9 42 10	 fld	 DWORD PTR [edx+16]
  000d4	d8 4d c0	 fmul	 DWORD PTR _CmS$[ebp]
  000d7	8b 45 0c	 mov	 eax, DWORD PTR _pTmp$[ebp]
  000da	d9 40 14	 fld	 DWORD PTR [eax+20]
  000dd	d8 4d dc	 fmul	 DWORD PTR _CpS$[ebp]
  000e0	de c1		 faddp	 ST(1), ST(0)
  000e2	d9 5d cc	 fstp	 DWORD PTR _T9$[ebp]

; 933  :     T2 = MULT_BP2X(CpS,pTmp[4]) - MULT_BP2X(CmS,pTmp[5]);     // F[3072+j]    F[4096-j]

  000e5	8b 4d 0c	 mov	 ecx, DWORD PTR _pTmp$[ebp]
  000e8	d9 41 10	 fld	 DWORD PTR [ecx+16]
  000eb	d8 4d dc	 fmul	 DWORD PTR _CpS$[ebp]
  000ee	8b 55 0c	 mov	 edx, DWORD PTR _pTmp$[ebp]
  000f1	d9 42 14	 fld	 DWORD PTR [edx+20]
  000f4	d8 4d c0	 fmul	 DWORD PTR _CmS$[ebp]
  000f7	de e9		 fsubp	 ST(1), ST(0)
  000f9	d9 5d c4	 fstp	 DWORD PTR _T2$[ebp]

; 934  : 
; 935  :     TA = pTmp[6] + pTmp[7];                                   // F[j]      +  F[1024-j];

  000fc	8b 45 0c	 mov	 eax, DWORD PTR _pTmp$[ebp]
  000ff	8b 4d 0c	 mov	 ecx, DWORD PTR _pTmp$[ebp]
  00102	d9 40 18	 fld	 DWORD PTR [eax+24]
  00105	d8 41 1c	 fadd	 DWORD PTR [ecx+28]
  00108	d9 5d d4	 fstp	 DWORD PTR _TA$[ebp]

; 936  :     TB = pTmp[6] - pTmp[7];                                   // F[j]      -  F[1024-j];

  0010b	8b 55 0c	 mov	 edx, DWORD PTR _pTmp$[ebp]
  0010e	8b 45 0c	 mov	 eax, DWORD PTR _pTmp$[ebp]
  00111	d9 42 18	 fld	 DWORD PTR [edx+24]
  00114	d8 60 1c	 fsub	 DWORD PTR [eax+28]
  00117	d9 5d f4	 fstp	 DWORD PTR _TB$[ebp]

; 937  : 
; 938  :     D  = DIV2(+ T7  + T8 + T9 + TA);

  0011a	d9 45 e4	 fld	 DWORD PTR _T7$[ebp]
  0011d	d8 45 e8	 fadd	 DWORD PTR _T8$[ebp]
  00120	d8 45 cc	 fadd	 DWORD PTR _T9$[ebp]
  00123	d8 45 d4	 fadd	 DWORD PTR _TA$[ebp]
  00126	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  0012c	d9 5d d0	 fstp	 DWORD PTR _D$[ebp]

; 939  :     E  = DIV2(+ T4  + T6 + T2 + TB);

  0012f	d9 45 c8	 fld	 DWORD PTR _T4$[ebp]
  00132	d8 45 e0	 fadd	 DWORD PTR _T6$[ebp]
  00135	d8 45 c4	 fadd	 DWORD PTR _T2$[ebp]
  00138	d8 45 f4	 fadd	 DWORD PTR _TB$[ebp]
  0013b	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  00141	d9 5d fc	 fstp	 DWORD PTR _E$[ebp]

; 940  :     pWF[k]           = InverseQuadRootOfSumSquares(D, E);              // F[j]

  00144	8b 4d fc	 mov	 ecx, DWORD PTR _E$[ebp]
  00147	51		 push	 ecx
  00148	8b 55 d0	 mov	 edx, DWORD PTR _D$[ebp]
  0014b	52		 push	 edx
  0014c	e8 00 00 00 00	 call	 _InverseQuadRootOfSumSquares@8
  00151	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]
  00154	8b 4d 10	 mov	 ecx, DWORD PTR _pWF$[ebp]
  00157	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 941  : 
; 942  :     D  = DIV2(- T7  + T6 - T2 + TA);

  0015a	d9 45 e4	 fld	 DWORD PTR _T7$[ebp]
  0015d	d9 e0		 fchs
  0015f	d8 45 e0	 fadd	 DWORD PTR _T6$[ebp]
  00162	d8 65 c4	 fsub	 DWORD PTR _T2$[ebp]
  00165	d8 45 d4	 fadd	 DWORD PTR _TA$[ebp]
  00168	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  0016e	d9 5d d0	 fstp	 DWORD PTR _D$[ebp]

; 943  :     E  = DIV2(+ T4  + T8 - T9 - TB);

  00171	d9 45 c8	 fld	 DWORD PTR _T4$[ebp]
  00174	d8 45 e8	 fadd	 DWORD PTR _T8$[ebp]
  00177	d8 65 cc	 fsub	 DWORD PTR _T9$[ebp]
  0017a	d8 65 f4	 fsub	 DWORD PTR _TB$[ebp]
  0017d	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  00183	d9 5d fc	 fstp	 DWORD PTR _E$[ebp]

; 944  :     pWF[iSizeBy2-k]  = InverseQuadRootOfSumSquares(D, E);              // F[1024-j]

  00186	8b 55 fc	 mov	 edx, DWORD PTR _E$[ebp]
  00189	52		 push	 edx
  0018a	8b 45 d0	 mov	 eax, DWORD PTR _D$[ebp]
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 _InverseQuadRootOfSumSquares@8
  00193	8b 4d 14	 mov	 ecx, DWORD PTR _iSizeBy2$[ebp]
  00196	2b 4d 08	 sub	 ecx, DWORD PTR _k$[ebp]
  00199	8b 55 10	 mov	 edx, DWORD PTR _pWF$[ebp]
  0019c	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 945  : 
; 946  :     D  = DIV2(- T7  - T6 + T2 + TA);

  0019f	d9 45 e4	 fld	 DWORD PTR _T7$[ebp]
  001a2	d9 e0		 fchs
  001a4	d8 65 e0	 fsub	 DWORD PTR _T6$[ebp]
  001a7	d8 45 c4	 fadd	 DWORD PTR _T2$[ebp]
  001aa	d8 45 d4	 fadd	 DWORD PTR _TA$[ebp]
  001ad	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  001b3	d9 5d d0	 fstp	 DWORD PTR _D$[ebp]

; 947  :     E  = DIV2(- T4  + T8 - T9 + TB);

  001b6	d9 45 c8	 fld	 DWORD PTR _T4$[ebp]
  001b9	d9 e0		 fchs
  001bb	d8 45 e8	 fadd	 DWORD PTR _T8$[ebp]
  001be	d8 65 cc	 fsub	 DWORD PTR _T9$[ebp]
  001c1	d8 45 f4	 fadd	 DWORD PTR _TB$[ebp]
  001c4	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  001ca	d9 5d fc	 fstp	 DWORD PTR _E$[ebp]

; 948  :     pWF[iSizeBy2+k]  = InverseQuadRootOfSumSquares(D, E);              // F[1024+j]

  001cd	8b 45 fc	 mov	 eax, DWORD PTR _E$[ebp]
  001d0	50		 push	 eax
  001d1	8b 4d d0	 mov	 ecx, DWORD PTR _D$[ebp]
  001d4	51		 push	 ecx
  001d5	e8 00 00 00 00	 call	 _InverseQuadRootOfSumSquares@8
  001da	8b 55 14	 mov	 edx, DWORD PTR _iSizeBy2$[ebp]
  001dd	03 55 08	 add	 edx, DWORD PTR _k$[ebp]
  001e0	8b 45 10	 mov	 eax, DWORD PTR _pWF$[ebp]
  001e3	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 949  : 
; 950  :     D  = DIV2(- T4  + T6 + T2 - TB);

  001e6	d9 45 c8	 fld	 DWORD PTR _T4$[ebp]
  001e9	d9 e0		 fchs
  001eb	d8 45 e0	 fadd	 DWORD PTR _T6$[ebp]
  001ee	d8 45 c4	 fadd	 DWORD PTR _T2$[ebp]
  001f1	d8 65 f4	 fsub	 DWORD PTR _TB$[ebp]
  001f4	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  001fa	d9 5d d0	 fstp	 DWORD PTR _D$[ebp]

; 951  :     E  = DIV2(+ T7  - T8 - T9 + TA);

  001fd	d9 45 e4	 fld	 DWORD PTR _T7$[ebp]
  00200	d8 65 e8	 fsub	 DWORD PTR _T8$[ebp]
  00203	d8 65 cc	 fsub	 DWORD PTR _T9$[ebp]
  00206	d8 45 d4	 fadd	 DWORD PTR _TA$[ebp]
  00209	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  0020f	d9 5d fc	 fstp	 DWORD PTR _E$[ebp]

; 952  :     pWF[(iSizeBy2<<1)-k]  = InverseQuadRootOfSumSquares(D, E);         // F[2048-j]

  00212	8b 4d fc	 mov	 ecx, DWORD PTR _E$[ebp]
  00215	51		 push	 ecx
  00216	8b 55 d0	 mov	 edx, DWORD PTR _D$[ebp]
  00219	52		 push	 edx
  0021a	e8 00 00 00 00	 call	 _InverseQuadRootOfSumSquares@8
  0021f	8b 45 14	 mov	 eax, DWORD PTR _iSizeBy2$[ebp]
  00222	d1 e0		 shl	 eax, 1
  00224	2b 45 08	 sub	 eax, DWORD PTR _k$[ebp]
  00227	8b 4d 10	 mov	 ecx, DWORD PTR _pWF$[ebp]
  0022a	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 953  : 
; 954  :     //INTEGER_ONLY( assert( F[j]>=0 && F[(1024>>iShrink)-j]>=0 && F[(1024>>iShrink)+j]>=0 && F[(2048>>iShrink)-j]>=0 ) );
; 955  : 
; 956  :     //** This block uses 36 adds and 20 mults plus either 4 more mults or 4 shifts
; 957  : }

  0022d	8b e5		 mov	 esp, ebp
  0022f	5d		 pop	 ebp
  00230	c2 18 00	 ret	 24			; 00000018H
_prvDoLpc4_XDS@24 ENDP
WMADEC	ENDS
PUBLIC	_InverseQuadRootI@4
; Function compile flags: /Odt
;	COMDAT _InverseQuadRootOfSumSquares@8
WMADEC	SEGMENT
_f$ = -4
_F1$ = 8
_F2$ = 12
_InverseQuadRootOfSumSquares@8 PROC NEAR		; COMDAT

; 772  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 773  :     LpSpecPowerType f = SUM_SQUARES( F1, F2 );

  00004	d9 45 08	 fld	 DWORD PTR _F1$[ebp]
  00007	d8 4d 08	 fmul	 DWORD PTR _F1$[ebp]
  0000a	d9 45 0c	 fld	 DWORD PTR _F2$[ebp]
  0000d	d8 4d 0c	 fmul	 DWORD PTR _F2$[ebp]
  00010	de c1		 faddp	 ST(1), ST(0)
  00012	d9 5d fc	 fstp	 DWORD PTR _f$[ebp]

; 774  :     return InverseQuadRoot( f );

  00015	8b 45 fc	 mov	 eax, DWORD PTR _f$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _InverseQuadRootI@4

; 775  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
_InverseQuadRootOfSumSquares@8 ENDP
; Function compile flags: /Odt
WMADEC	ENDS
;	COMDAT _InverseQuadRootI@4
WMADEC	SEGMENT
_frac$ = -8
_exp$ = -4
_f$ = 8
_InverseQuadRootI@4 PROC NEAR				; COMDAT

; 546  : INLINE WeightType InverseQuadRootI(Int f){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 547  :     Float frac = (*(Float *)&(g_InvQuadRootMantissa[(f &   0x7FFFFF) >> (23-PRECESSION_BITS_FOR_INVQUADROOT)]));

  00006	8b 45 08	 mov	 eax, DWORD PTR _f$[ebp]
  00009	25 ff ff 7f 00	 and	 eax, 8388607		; 007fffffH
  0000e	c1 f8 0b	 sar	 eax, 11			; 0000000bH
  00011	d9 04 85 00 00
	00 00		 fld	 DWORD PTR _g_InvQuadRootMantissa[eax*4]
  00018	d9 5d f8	 fstp	 DWORD PTR _frac$[ebp]

; 548  :     Float exp  = (*(Float *)&(g_InvQuadRootExponent[(f & 0x7F800000) >> 23]));

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _f$[ebp]
  0001e	81 e1 00 00 80
	7f		 and	 ecx, 2139095040		; 7f800000H
  00024	c1 f9 17	 sar	 ecx, 23			; 00000017H
  00027	d9 04 8d 00 00
	00 00		 fld	 DWORD PTR _g_InvQuadRootExponent[ecx*4]
  0002e	d9 5d fc	 fstp	 DWORD PTR _exp$[ebp]

; 549  :     //fprintf(stdout, "%.20lf\n", ((double)*(Float*)(&f)));
; 550  :     //fprintf(stdout, "%.20lf\n", ((double)frac * (double)exp));
; 551  :     return (frac * exp);

  00031	d9 45 f8	 fld	 DWORD PTR _frac$[ebp]
  00034	d8 4d fc	 fmul	 DWORD PTR _exp$[ebp]

; 552  : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
_InverseQuadRootI@4 ENDP
WMADEC	ENDS
PUBLIC	_LOG2@4
PUBLIC	_prvLpcJLoopBottom_XDS@36
; Function compile flags: /Odt
;	COMDAT _prvLpcJLoopBottom_XDS@36
WMADEC	SEGMENT
_SL8$ = -64
_SL4$ = -60
_iSize$ = -56
_CL4$ = -52
_S1$ = -48
_SLS1$ = -44
_iSizeBy8$ = -40
_iSizeBy4$ = -36
_CLC1$ = -32
_SLC1$ = -28
_C1$ = -24
_S2$ = -20
_C2$ = -16
_iShrink$ = -12
_CL8$ = -8
_CLS1$ = -4
_j$ = 8
_pTmp$ = 12
_pWF$ = 16
_iSizeBy2$ = 20
_pS1$ = 24
_pC1$ = 28
_pS1p$ = 32
_pC1p$ = 36
_STEP1$ = 40
_prvLpcJLoopBottom_XDS@36 PROC NEAR			; COMDAT

; 1025 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H

; 1026 :         BP2Type S1 = *pS1;

  00006	8b 45 18	 mov	 eax, DWORD PTR _pS1$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 4d d0	 mov	 DWORD PTR _S1$[ebp], ecx

; 1027 :         BP2Type C1 = *pC1;

  0000e	8b 55 1c	 mov	 edx, DWORD PTR _pC1$[ebp]
  00011	8b 02		 mov	 eax, DWORD PTR [edx]
  00013	89 45 e8	 mov	 DWORD PTR _C1$[ebp], eax

; 1028 :         BP2Type S2, C2, SLS1, SLC1, CLS1, CLC1;
; 1029 :         int iSizeBy8 = iSizeBy2>>2;

  00016	8b 4d 14	 mov	 ecx, DWORD PTR _iSizeBy2$[ebp]
  00019	c1 f9 02	 sar	 ecx, 2
  0001c	89 4d d8	 mov	 DWORD PTR _iSizeBy8$[ebp], ecx

; 1030 :         const BP2Type SL8     = BP2_FROM_FLOAT(0.38268343236508977172845998403040);     // sim(pi/8)   = sin(pi*iSizeBy8*(1<<iShrink)/2048)

  0001f	c7 45 c0 15 ef
	c3 3e		 mov	 DWORD PTR _SL8$[ebp], 1053028117 ; 3ec3ef15H

; 1031 :         const BP2Type CL8     = BP2_FROM_FLOAT(0.92387953251128675612818318939679);     // cos(pi/8)   = sin(pi*iSizeBy8*(1<<iShrink)/2048)

  00026	c7 45 f8 5e 83
	6c 3f		 mov	 DWORD PTR _CL8$[ebp], 1064076126 ; 3f6c835eH

; 1032 :         const BP2Type SL4     = BP2_FROM_FLOAT(0.70710678118654752440084436210485);     // sim(pi/4)   = sin(pi*iSizeBy4*(1<<iShrink)/2048)

  0002d	c7 45 c4 f3 04
	35 3f		 mov	 DWORD PTR _SL4$[ebp], 1060439283 ; 3f3504f3H

; 1033 :         const BP2Type CL4     = BP2_FROM_FLOAT(0.70710678118654752440084436210485);     // cos(pi/4)   = sin(pi*iSizeBy4*(1<<iShrink)/2048)

  00034	c7 45 cc f3 04
	35 3f		 mov	 DWORD PTR _CL4$[ebp], 1060439283 ; 3f3504f3H

; 1034 :         DEBUG_ONLY( int iSize = iSizeBy2<<1; )

  0003b	8b 55 14	 mov	 edx, DWORD PTR _iSizeBy2$[ebp]
  0003e	d1 e2		 shl	 edx, 1
  00040	89 55 c8	 mov	 DWORD PTR _iSize$[ebp], edx

; 1035 :         DEBUG_ONLY( int iSizeBy4 = iSizeBy2>>1; )

  00043	8b 45 14	 mov	 eax, DWORD PTR _iSizeBy2$[ebp]
  00046	d1 f8		 sar	 eax, 1
  00048	89 45 dc	 mov	 DWORD PTR _iSizeBy4$[ebp], eax

; 1036 :         DEBUG_ONLY( int iShrink = LOG2(MAX_LP_SPEC_SIZE/iSize); )

  0004b	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00050	99		 cdq
  00051	f7 7d c8	 idiv	 DWORD PTR _iSize$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _LOG2@4
  0005a	89 45 f4	 mov	 DWORD PTR _iShrink$[ebp], eax

; 1037 : 
; 1038 :         assert( fabs(FLOAT_FROM_BP2(S1)-sin(PI*j/iSize)) < 0.0001 
; 1039 :              && fabs(FLOAT_FROM_BP2(C1)-cos(PI*j/iSize)) < 0.0001 );
; 1040 : 
; 1041 :         prvDoLpc4( j, pTmp, pWF, iSizeBy2, S1, C1 );

  0005d	8b 4d e8	 mov	 ecx, DWORD PTR _C1$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 d0	 mov	 edx, DWORD PTR _S1$[ebp]
  00064	52		 push	 edx
  00065	8b 45 14	 mov	 eax, DWORD PTR _iSizeBy2$[ebp]
  00068	50		 push	 eax
  00069	8b 4d 10	 mov	 ecx, DWORD PTR _pWF$[ebp]
  0006c	51		 push	 ecx
  0006d	8b 55 0c	 mov	 edx, DWORD PTR _pTmp$[ebp]
  00070	52		 push	 edx
  00071	8b 45 08	 mov	 eax, DWORD PTR _j$[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 _prvDoLpc4_XDS@24

; 1042 : 
; 1043 :         S2 = (SLC1 = MULT_BP2X(SL8,C1)) - (CLS1 = MULT_BP2X(CL8,S1));

  0007a	d9 45 c0	 fld	 DWORD PTR _SL8$[ebp]
  0007d	d8 4d e8	 fmul	 DWORD PTR _C1$[ebp]
  00080	d9 5d e4	 fstp	 DWORD PTR _SLC1$[ebp]
  00083	d9 45 f8	 fld	 DWORD PTR _CL8$[ebp]
  00086	d8 4d d0	 fmul	 DWORD PTR _S1$[ebp]
  00089	d9 55 fc	 fst	 DWORD PTR _CLS1$[ebp]
  0008c	d8 6d e4	 fsubr	 DWORD PTR _SLC1$[ebp]
  0008f	d9 5d ec	 fstp	 DWORD PTR _S2$[ebp]

; 1044 :         C2 = (CLC1 = MULT_BP2X(CL8,C1)) + (SLS1 = MULT_BP2X(SL8,S1));

  00092	d9 45 f8	 fld	 DWORD PTR _CL8$[ebp]
  00095	d8 4d e8	 fmul	 DWORD PTR _C1$[ebp]
  00098	d9 5d e0	 fstp	 DWORD PTR _CLC1$[ebp]
  0009b	d9 45 c0	 fld	 DWORD PTR _SL8$[ebp]
  0009e	d8 4d d0	 fmul	 DWORD PTR _S1$[ebp]
  000a1	d9 55 d4	 fst	 DWORD PTR _SLS1$[ebp]
  000a4	d8 45 e0	 fadd	 DWORD PTR _CLC1$[ebp]
  000a7	d9 5d f0	 fstp	 DWORD PTR _C2$[ebp]

; 1045 :         assert( fabs(FLOAT_FROM_BP2(S2)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy8-j,0)))<0.0001 
; 1046 :              && fabs(FLOAT_FROM_BP2(C2)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy8-j,1)))<0.0001 );
; 1047 :         prvDoLpc4( iSizeBy8 - j, pTmp+8,  pWF, iSizeBy2, S2, C2 );

  000aa	8b 4d f0	 mov	 ecx, DWORD PTR _C2$[ebp]
  000ad	51		 push	 ecx
  000ae	8b 55 ec	 mov	 edx, DWORD PTR _S2$[ebp]
  000b1	52		 push	 edx
  000b2	8b 45 14	 mov	 eax, DWORD PTR _iSizeBy2$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d 10	 mov	 ecx, DWORD PTR _pWF$[ebp]
  000b9	51		 push	 ecx
  000ba	8b 55 0c	 mov	 edx, DWORD PTR _pTmp$[ebp]
  000bd	83 c2 20	 add	 edx, 32			; 00000020H
  000c0	52		 push	 edx
  000c1	8b 45 d8	 mov	 eax, DWORD PTR _iSizeBy8$[ebp]
  000c4	2b 45 08	 sub	 eax, DWORD PTR _j$[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 _prvDoLpc4_XDS@24

; 1048 : 
; 1049 :         S2 = SLC1 + CLS1;

  000cd	d9 45 e4	 fld	 DWORD PTR _SLC1$[ebp]
  000d0	d8 45 fc	 fadd	 DWORD PTR _CLS1$[ebp]
  000d3	d9 5d ec	 fstp	 DWORD PTR _S2$[ebp]

; 1050 :         C2 = CLC1 - SLS1;

  000d6	d9 45 e0	 fld	 DWORD PTR _CLC1$[ebp]
  000d9	d8 65 d4	 fsub	 DWORD PTR _SLS1$[ebp]
  000dc	d9 5d f0	 fstp	 DWORD PTR _C2$[ebp]

; 1051 :         assert( fabs(FLOAT_FROM_BP2(S2)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy8+j,0)))<0.0001 
; 1052 :              && fabs(FLOAT_FROM_BP2(C2)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy8+j,1)))<0.0001 );
; 1053 :         prvDoLpc4( iSizeBy8 + j, pTmp+16, pWF, iSizeBy2, S2, C2 );

  000df	8b 4d f0	 mov	 ecx, DWORD PTR _C2$[ebp]
  000e2	51		 push	 ecx
  000e3	8b 55 ec	 mov	 edx, DWORD PTR _S2$[ebp]
  000e6	52		 push	 edx
  000e7	8b 45 14	 mov	 eax, DWORD PTR _iSizeBy2$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d 10	 mov	 ecx, DWORD PTR _pWF$[ebp]
  000ee	51		 push	 ecx
  000ef	8b 55 0c	 mov	 edx, DWORD PTR _pTmp$[ebp]
  000f2	83 c2 40	 add	 edx, 64			; 00000040H
  000f5	52		 push	 edx
  000f6	8b 45 d8	 mov	 eax, DWORD PTR _iSizeBy8$[ebp]
  000f9	03 45 08	 add	 eax, DWORD PTR _j$[ebp]
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 _prvDoLpc4_XDS@24

; 1054 : 
; 1055 :         S2 = MULT_BP2X(SL4,C1) - MULT_BP2X(CL4,S1);

  00102	d9 45 c4	 fld	 DWORD PTR _SL4$[ebp]
  00105	d8 4d e8	 fmul	 DWORD PTR _C1$[ebp]
  00108	d9 45 cc	 fld	 DWORD PTR _CL4$[ebp]
  0010b	d8 4d d0	 fmul	 DWORD PTR _S1$[ebp]
  0010e	de e9		 fsubp	 ST(1), ST(0)
  00110	d9 5d ec	 fstp	 DWORD PTR _S2$[ebp]

; 1056 :         C2 = MULT_BP2X(CL4,C1) + MULT_BP2X(SL4,S1);

  00113	d9 45 cc	 fld	 DWORD PTR _CL4$[ebp]
  00116	d8 4d e8	 fmul	 DWORD PTR _C1$[ebp]
  00119	d9 45 c4	 fld	 DWORD PTR _SL4$[ebp]
  0011c	d8 4d d0	 fmul	 DWORD PTR _S1$[ebp]
  0011f	de c1		 faddp	 ST(1), ST(0)
  00121	d9 5d f0	 fstp	 DWORD PTR _C2$[ebp]

; 1057 :         assert( fabs(FLOAT_FROM_BP2(S2)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy4-j,0)))<0.0001 
; 1058 :              && fabs(FLOAT_FROM_BP2(C2)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy4-j,1)))<0.0001 );
; 1059 :         prvDoLpc4( (iSizeBy2>>1) - j, pTmp+24, pWF, iSizeBy2, S2, C2 );

  00124	8b 4d f0	 mov	 ecx, DWORD PTR _C2$[ebp]
  00127	51		 push	 ecx
  00128	8b 55 ec	 mov	 edx, DWORD PTR _S2$[ebp]
  0012b	52		 push	 edx
  0012c	8b 45 14	 mov	 eax, DWORD PTR _iSizeBy2$[ebp]
  0012f	50		 push	 eax
  00130	8b 4d 10	 mov	 ecx, DWORD PTR _pWF$[ebp]
  00133	51		 push	 ecx
  00134	8b 55 0c	 mov	 edx, DWORD PTR _pTmp$[ebp]
  00137	83 c2 60	 add	 edx, 96			; 00000060H
  0013a	52		 push	 edx
  0013b	8b 45 14	 mov	 eax, DWORD PTR _iSizeBy2$[ebp]
  0013e	d1 f8		 sar	 eax, 1
  00140	2b 45 08	 sub	 eax, DWORD PTR _j$[ebp]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 _prvDoLpc4_XDS@24

; 1060 : 
; 1061 : 		// rotate angle by b = pi/iSize
; 1062 : 		// recursion: cos(a+b) = cos(a-b) + 2*sin(b)*sin(a)
; 1063 : 		// and:       sin(a+b) = sin(a-b) - 2*sin(b)*cos(a)
; 1064 : 		*pC1 = *pC1p - MULT_BP2X(STEP1,S1);

  00149	d9 45 28	 fld	 DWORD PTR _STEP1$[ebp]
  0014c	d8 4d d0	 fmul	 DWORD PTR _S1$[ebp]
  0014f	8b 4d 24	 mov	 ecx, DWORD PTR _pC1p$[ebp]
  00152	d8 29		 fsubr	 DWORD PTR [ecx]
  00154	8b 55 1c	 mov	 edx, DWORD PTR _pC1$[ebp]
  00157	d9 1a		 fstp	 DWORD PTR [edx]

; 1065 : 		*pS1 = *pS1p + MULT_BP2X(STEP1,C1);

  00159	d9 45 28	 fld	 DWORD PTR _STEP1$[ebp]
  0015c	d8 4d e8	 fmul	 DWORD PTR _C1$[ebp]
  0015f	8b 45 20	 mov	 eax, DWORD PTR _pS1p$[ebp]
  00162	d8 00		 fadd	 DWORD PTR [eax]
  00164	8b 4d 18	 mov	 ecx, DWORD PTR _pS1$[ebp]
  00167	d9 19		 fstp	 DWORD PTR [ecx]

; 1066 : 		*pC1p = C1;

  00169	8b 55 24	 mov	 edx, DWORD PTR _pC1p$[ebp]
  0016c	8b 45 e8	 mov	 eax, DWORD PTR _C1$[ebp]
  0016f	89 02		 mov	 DWORD PTR [edx], eax

; 1067 : 		*pS1p = S1;

  00171	8b 4d 20	 mov	 ecx, DWORD PTR _pS1p$[ebp]
  00174	8b 55 d0	 mov	 edx, DWORD PTR _S1$[ebp]
  00177	89 11		 mov	 DWORD PTR [ecx], edx

; 1068 :     }

  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c2 24 00	 ret	 36			; 00000024H
_prvLpcJLoopBottom_XDS@36 ENDP
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\wmalib\common\macros.h
WMADEC	ENDS
;	COMDAT _LOG2@4
WMADEC	SEGMENT
_iLog2$ = -4
_i$ = 8
_LOG2@4	PROC NEAR					; COMDAT

; 956  : {   // returns n where n = log2(2^n) = log2(2^(n+1)-1)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 957  :     U32 iLog2 = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _iLog2$[ebp], 0
$L1349:

; 958  :     assert (i != 0);
; 959  :     while ((i >> iLog2) > 1)

  0000b	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _iLog2$[ebp]
  00011	d3 e8		 shr	 eax, cl
  00013	83 f8 01	 cmp	 eax, 1
  00016	76 0b		 jbe	 SHORT $L1350

; 960  :         iLog2++;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _iLog2$[ebp]
  0001b	83 c1 01	 add	 ecx, 1
  0001e	89 4d fc	 mov	 DWORD PTR _iLog2$[ebp], ecx
  00021	eb e8		 jmp	 SHORT $L1349
$L1350:

; 961  : 
; 962  :     return iLog2;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _iLog2$[ebp]

; 963  : }

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
_LOG2@4	ENDP
WMADEC	ENDS
PUBLIC	??_C@_0EE@FFMKPEON@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CF@ECGGHIKF@?$CFs?$CI?$CFd?$CJ?5?3?5?$CK?$CK?$CK?5TRACE?5?$CK?$CK?$CK?5code?5?$DN?50x@ ; `string'
PUBLIC	_prvLpcToSpectrum_XDS@12
PUBLIC	__real@3fb504f3
PUBLIC	__real@3f3504f3
PUBLIC	__real@00000000
EXTRN	_MyOutputDbgStr:NEAR
EXTRN	_rgSinCosTables:BYTE
;	COMDAT __real@3fb504f3
; File c:\xbox\private\windows\directx\dsound\codecs\wmalib\wmadec_s\lpc.c
CONST	SEGMENT
__real@3fb504f3 DD 03fb504f3r			; 1.41421
CONST	ENDS
;	COMDAT __real@3f3504f3
CONST	SEGMENT
__real@3f3504f3 DD 03f3504f3r			; 0.707107
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0EE@FFMKPEON@c?3?2xbox?2private?2windows?2directx?2@
WMADEC_RD	SEGMENT
??_C@_0EE@FFMKPEON@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\wmalib\wmadec_s\lpc.c', 00H ; `string'
WMADEC_RD	ENDS
;	COMDAT ??_C@_0CF@ECGGHIKF@?$CFs?$CI?$CFd?$CJ?5?3?5?$CK?$CK?$CK?5TRACE?5?$CK?$CK?$CK?5code?5?$DN?50x@
WMADEC_RD	SEGMENT
??_C@_0CF@ECGGHIKF@?$CFs?$CI?$CFd?$CJ?5?3?5?$CK?$CK?$CK?5TRACE?5?$CK?$CK?$CK?5code?5?$DN?50x@ DB '%'
	DB	's(%d) : *** TRACE *** code = 0x%x!', 0aH, 00H ; `string'
; Function compile flags: /Odt
WMADEC_RD	ENDS
;	COMDAT _prvLpcToSpectrum_XDS@12
WMADEC	SEGMENT
tv662 = -468
_S2$4083 = -464
_S8$4086 = -460
_C2$4084 = -456
_C8$4085 = -452
_j$ = -448
_iStride$ = -444
_CT$ = -440
_ST$ = -436
_SL8$ = -432
_tO4mO6$ = -428
_G$ = -424
_I$ = -420
_rgwtLpcSpec$ = -416
_SL4$ = -412
_original$ = -408
_D$ = -368
_iSize$ = -364
_iSizeBy16$ = -360
_pFb$ = -356
_tCmS1x$ = -352
_tCpS2x$ = -348
_CmS1$ = -344
_CpS2$ = -340
_SL16$ = -336
_F$ = -332
_C4p$ = -328
_tCpS1x$ = -324
_CL4$ = -320
_tO1mO9$ = -316
_t1pO7mO3$ = -312
_tS2x$ = -308
_iFreq$ = -304
_iSizeBy4$ = -300
_iSizeBy8$ = -296
_SLS1$ = -292
_S4$ = -288
_C4$ = -284
_S1$ = -280
_tCmS2x$ = -276
_CmS2$ = -272
_tO4pO6$ = -268
_Tmp$ = -264
_pSinCosTable$ = -136
_CL3by16$ = -132
_t1mO7$ = -128
_t1pO7pO3$ = -124
_iLoopLimit$ = -120
_STEP1$ = -116
_J$ = -112
_pWF$ = -108
_CLC1$ = -104
_STEP4$ = -100
_iF$ = -96
_SLC1$ = -92
_S1p$ = -88
_i$ = -84
_t1pO7$ = -80
_wtLpcSpecMax$ = -76
_C1$ = -72
_tO0pO8$ = -68
_tO0mO8$ = -64
_tO1pO5pO9$ = -60
_iShrink$ = -56
_SL3by16$ = -52
_H$ = -48
_iSizeBy2$ = -44
_CL8$ = -40
_tO1pO9$ = -36
_tO0pO2pO4pO6pO8$ = -32
_CpS1$ = -28
_E$ = -24
_wtTemp$ = -20
_CLS1$ = -16
_S4p$ = -12
_C1p$ = -8
_CL16$ = -4
_pau$ = 8
_rgLpcCoef$ = 12
_ppcinfo$ = 16
_prvLpcToSpectrum_XDS@12 PROC NEAR			; COMDAT

; 1074 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 01 00
	00		 sub	 esp, 468		; 000001d4H

; 1075 :     // put often used variables near the top for easier access in platforms like the SH3 and SH4
; 1076 :     LpSpecType original[LPCORDER];
; 1077 :     LpSpecType *pFb;      
; 1078 :     Int i, j;
; 1079 :     LpSpecType t1pO7, t1mO7, tO1pO9, tO1mO9, tO0pO8, tO0mO8, tO4pO6, tO4mO6;
; 1080 :     LpSpecType t1pO7pO3, t1pO7mO3, tO1pO5pO9, tO0pO2pO4pO6pO8;
; 1081 :     LpSpecType tS2x; 
; 1082 :     LpSpecType tCpS1x, tCmS1x, tCpS2x, tCmS2x;
; 1083 :     LpSpecType CpS1, CmS1, CpS2, CmS2;
; 1084 :     LpSpecType D, E, F, G, H, I, J;
; 1085 :     
; 1086 :     LpSpecType* rgwtLpcSpec;
; 1087 :     WeightType wtLpcSpecMax, wtTemp;
; 1088 :     Int iFreq, iF, iLoopLimit;
; 1089 :     Int iShrink, iStride; 
; 1090 :     LpSpecType Tmp[32];
; 1091 :     WeightType* pWF = (WeightType*)INTEGER_OR_INT_FLOAT( (I32 *)ppcinfo->m_rguiWeightFactor, ppcinfo->m_rgfltWeightFactor ); 

  00009	8b 45 10	 mov	 eax, DWORD PTR _ppcinfo$[ebp]
  0000c	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  0000f	89 4d 94	 mov	 DWORD PTR _pWF$[ebp], ecx

; 1092 :     Int iSize, iSizeBy2, iSizeBy4, iSizeBy8, iSizeBy16;
; 1093 : 
; 1094 : #   if defined(PLATFORM_LPC_SMALL_TRIG_TABLE)
; 1095 :         BP2Type SLC1, CLS1, CLC1, SLS1;
; 1096 :         BP2Type S4, C4;
; 1097 :         BP2Type S1, C1;
; 1098 :         const BP2Type *pC4, *pC1;
; 1099 :         Int pCInc4, pCInc1;
; 1100 : 
; 1101 :         const BP2Type SL16    = BP2_FROM_FLOAT(0.19509032201612826784828486847702);     // sim(pi/16)  = sin(pi*iSizeBy16*(1<<iShrink)/2048)
; 1102 :         const BP2Type CL16    = BP2_FROM_FLOAT(0.98078528040323044912618223613424);     // cos(pi/16)  = sin(pi*iSizeBy16*(1<<iShrink)/2048)
; 1103 :         const BP2Type SL8     = BP2_FROM_FLOAT(0.38268343236508977172845998403040);     // sim(pi/8)   = sin(pi*iSizeBy8*(1<<iShrink)/2048)
; 1104 :         const BP2Type CL8     = BP2_FROM_FLOAT(0.92387953251128675612818318939679);     // cos(pi/8)   = sin(pi*iSizeBy8*(1<<iShrink)/2048)
; 1105 :         const BP2Type SL3by16 = BP2_FROM_FLOAT(0.55557023301960222474283081394853);     // sim(pi3/16) = sin(pi*3*iSizeBy16*(1<<iShrink)/2048)
; 1106 :         const BP2Type CL3by16 = BP2_FROM_FLOAT(0.83146961230254523707878837761791);     // cos(pi3/16) = sin(pi*3*iSizeBy16*(1<<iShrink)/2048)
; 1107 :         const BP2Type SL4     = BP2_FROM_FLOAT(0.70710678118654752440084436210485);     // sim(pi/4)   = sin(pi*iSizeBy4*(1<<iShrink)/2048)
; 1108 :         const BP2Type CL4     = BP2_FROM_FLOAT(0.70710678118654752440084436210485);     // cos(pi/4)   = sin(pi*iSizeBy4*(1<<iShrink)/2048)
; 1109 : #   elif defined(PLATFORM_LPC_NO_TRIG_TABLE)
; 1110 : #       if !defined(PLATFORM_SPECIFIC_LPC_JLOOP_BOTTOM)
; 1111 :             BP2Type SLC1, CLS1, CLC1, SLS1;
; 1112 : #       endif
; 1113 :         BP2Type CT, ST;
; 1114 :         const SinCosTable* pSinCosTable;
; 1115 :         BP2Type S4, C4, S4p, C4p, STEP4;
; 1116 :         BP2Type S1, C1, S1p, C1p, STEP1;
; 1117 : 
; 1118 :         const BP2Type SL16    = BP2_FROM_FLOAT(0.19509032201612826784828486847702);     // sim(pi/16)  = sin(pi*iSizeBy16*(1<<iShrink)/2048)

  00012	c7 85 b0 fe ff
	ff c2 c5 47 3e	 mov	 DWORD PTR _SL16$[ebp], 1044891074 ; 3e47c5c2H

; 1119 :         const BP2Type CL16    = BP2_FROM_FLOAT(0.98078528040323044912618223613424);     // cos(pi/16)  = sin(pi*iSizeBy16*(1<<iShrink)/2048)

  0001c	c7 45 fc be 14
	7b 3f		 mov	 DWORD PTR _CL16$[ebp], 1065030846 ; 3f7b14beH

; 1120 :         const BP2Type SL8     = BP2_FROM_FLOAT(0.38268343236508977172845998403040);     // sim(pi/8)   = sin(pi*iSizeBy8*(1<<iShrink)/2048)

  00023	c7 85 50 fe ff
	ff 15 ef c3 3e	 mov	 DWORD PTR _SL8$[ebp], 1053028117 ; 3ec3ef15H

; 1121 :         const BP2Type CL8     = BP2_FROM_FLOAT(0.92387953251128675612818318939679);     // cos(pi/8)   = sin(pi*iSizeBy8*(1<<iShrink)/2048)

  0002d	c7 45 d8 5e 83
	6c 3f		 mov	 DWORD PTR _CL8$[ebp], 1064076126 ; 3f6c835eH

; 1122 :         const BP2Type SL3by16 = BP2_FROM_FLOAT(0.55557023301960222474283081394853);     // sim(pi3/16) = sin(pi*3*iSizeBy16*(1<<iShrink)/2048)

  00034	c7 45 cc da 39
	0e 3f		 mov	 DWORD PTR _SL3by16$[ebp], 1057896922 ; 3f0e39daH

; 1123 :         const BP2Type CL3by16 = BP2_FROM_FLOAT(0.83146961230254523707878837761791);     // cos(pi3/16) = sin(pi*3*iSizeBy16*(1<<iShrink)/2048)

  0003b	c7 85 7c ff ff
	ff 31 db 54 3f	 mov	 DWORD PTR _CL3by16$[ebp], 1062525745 ; 3f54db31H

; 1124 :         const BP2Type SL4     = BP2_FROM_FLOAT(0.70710678118654752440084436210485);     // sim(pi/4)   = sin(pi*iSizeBy4*(1<<iShrink)/2048)

  00045	c7 85 64 fe ff
	ff f3 04 35 3f	 mov	 DWORD PTR _SL4$[ebp], 1060439283 ; 3f3504f3H

; 1125 :         const BP2Type CL4     = BP2_FROM_FLOAT(0.70710678118654752440084436210485);     // cos(pi/4)   = sin(pi*iSizeBy4*(1<<iShrink)/2048)

  0004f	c7 85 c0 fe ff
	ff f3 04 35 3f	 mov	 DWORD PTR _CL4$[ebp], 1060439283 ; 3f3504f3H

; 1126 : #   else
; 1127 :         Int k, jj;
; 1128 :         Int iMapLpcIdxOffset[4];
; 1129 :         LpSpecType* pTmp;
; 1130 :         const BP2Type* pC4;
; 1131 :         Int pCInc4;
; 1132 : #   endif
; 1133 :     
; 1134 :     FUNCTION_PROFILE(fp);
; 1135 :     FUNCTION_PROFILE_START(&fp,LPC_TO_SPECTRUM_PROFILE);
; 1136 :     
; 1137 : #ifdef REPLICATE_V4_LPC
; 1138 :     iSize = pau->m_cFrameSampleHalf;
; 1139 : #elif defined(REPLICATE_ARM_NON_TRUNCATED_LPC)
; 1140 :     iSize = pau->m_cSubband;
; 1141 : #else
; 1142 :     if (pau->m_fV5Lpc)

  00059	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  0005c	83 7a 6c 00	 cmp	 DWORD PTR [edx+108], 0
  00060	74 0e		 je	 SHORT $L4063

; 1143 :         iSize = pau->m_cSubband;

  00062	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00065	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00068	89 8d 94 fe ff
	ff		 mov	 DWORD PTR _iSize$[ebp], ecx

; 1144 :     else 

  0006e	eb 0f		 jmp	 SHORT $L4064
$L4063:

; 1145 :         iSize = pau->m_cFrameSampleHalf;

  00070	8b 55 08	 mov	 edx, DWORD PTR _pau$[ebp]
  00073	8b 82 1c 03 00
	00		 mov	 eax, DWORD PTR [edx+796]
  00079	89 85 94 fe ff
	ff		 mov	 DWORD PTR _iSize$[ebp], eax
$L4064:

; 1146 : #endif
; 1147 :     iShrink = LOG2(MAX_LP_SPEC_SIZE/iSize);     // for smaller transforms, shrink or expand indexing

  0007f	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00084	99		 cdq
  00085	f7 bd 94 fe ff
	ff		 idiv	 DWORD PTR _iSize$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _LOG2@4
  00091	89 45 c8	 mov	 DWORD PTR _iShrink$[ebp], eax

; 1148 :     iStride = MAX_LP_SPEC_SIZE/iSize;           // for smaller transforms, stride past unused (lpc_compare only)

  00094	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00099	99		 cdq
  0009a	f7 bd 94 fe ff
	ff		 idiv	 DWORD PTR _iSize$[ebp]
  000a0	89 85 44 fe ff
	ff		 mov	 DWORD PTR _iStride$[ebp], eax

; 1149 :     iSizeBy2 = iSize>>1;

  000a6	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR _iSize$[ebp]
  000ac	d1 f9		 sar	 ecx, 1
  000ae	89 4d d4	 mov	 DWORD PTR _iSizeBy2$[ebp], ecx

; 1150 :     iSizeBy4 = iSizeBy2>>1;

  000b1	8b 55 d4	 mov	 edx, DWORD PTR _iSizeBy2$[ebp]
  000b4	d1 fa		 sar	 edx, 1
  000b6	89 95 d4 fe ff
	ff		 mov	 DWORD PTR _iSizeBy4$[ebp], edx

; 1151 :     iSizeBy8 = iSizeBy4>>1;

  000bc	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _iSizeBy4$[ebp]
  000c2	d1 f8		 sar	 eax, 1
  000c4	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _iSizeBy8$[ebp], eax

; 1152 :     iSizeBy16 = iSizeBy8>>1;

  000ca	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _iSizeBy8$[ebp]
  000d0	d1 f9		 sar	 ecx, 1
  000d2	89 8d 98 fe ff
	ff		 mov	 DWORD PTR _iSizeBy16$[ebp], ecx

; 1153 :     // iSize can be 2048, 1024, 512, 256, or 128.
; 1154 :     //      at 32000 Hz: 2048, 1024, 512 and 256
; 1155 :     //      at 22050 Hz: 1024, 512, 256 and 128
; 1156 :     //      at 16000 Hz: 512, 256, and 128
; 1157 :     //      at 11025 Hz: 512, 256, and 128
; 1158 :     //      at  8000 Hz: 512.
; 1159 : 
; 1160 :     
; 1161 :         
; 1162 :     // DEBUG_ONLY( if (pau->m_iFrameNumber==32) { DEBUG_BREAK(); } );
; 1163 :     
; 1164 :     assert(pau->m_fltFlatenFactor == 0.5f); //So we can use quadRoot instead of pow(x,m_fltFlatenFactor/2);
; 1165 :     assert( iSize <= MAX_LP_SPEC_SIZE );
; 1166 :     
; 1167 :     //for (i = 0; i < LPCORDER; i++) 
; 1168 :     //fprintf(stdout, "%.20lf\n", (double) FLOAT_FROM_LP(rgLpcCoef[i])); 
; 1169 :     
; 1170 :     for (i = 0; i < LPCORDER; i++) 

  000d8	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000df	eb 09		 jmp	 SHORT $L4065
$L4066:
  000e1	8b 55 ac	 mov	 edx, DWORD PTR _i$[ebp]
  000e4	83 c2 01	 add	 edx, 1
  000e7	89 55 ac	 mov	 DWORD PTR _i$[ebp], edx
$L4065:
  000ea	83 7d ac 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  000ee	7d 17		 jge	 SHORT $L4067

; 1171 :         original[i] = -LP_SPEC_FROM_LP(rgLpcCoef[i]); 

  000f0	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  000f3	8b 4d 0c	 mov	 ecx, DWORD PTR _rgLpcCoef$[ebp]
  000f6	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  000f9	d9 e0		 fchs
  000fb	8b 55 ac	 mov	 edx, DWORD PTR _i$[ebp]
  000fe	d9 9c 95 68 fe
	ff ff		 fstp	 DWORD PTR _original$[ebp+edx*4]
  00105	eb da		 jmp	 SHORT $L4066
$L4067:

; 1172 :       
; 1173 :                                         // F[128]
; 1174 :     Tmp[14]  = (t1pO7 = LP_SPEC_FROM_FLOAT(1) + original[7]) + (tS2x = MULT_BP2X(SQRT2,original[3]));

  00107	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  0010d	d8 85 84 fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+28]
  00113	d9 5d b0	 fstp	 DWORD PTR _t1pO7$[ebp]
  00116	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fb504f3
  0011c	d8 8d 74 fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+12]
  00122	d9 95 cc fe ff
	ff		 fst	 DWORD PTR _tS2x$[ebp]
  00128	d8 45 b0	 fadd	 DWORD PTR _t1pO7$[ebp]
  0012b	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+56]

; 1175 :                                         // F[256]  
; 1176 :     Tmp[22]  = (t1mO7 = LP_SPEC_FROM_FLOAT(1) - original[7]) + original[3];

  00131	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  00137	d8 a5 84 fe ff
	ff		 fsub	 DWORD PTR _original$[ebp+28]
  0013d	d9 55 80	 fst	 DWORD PTR _t1mO7$[ebp]
  00140	d8 85 74 fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+12]
  00146	d9 9d 50 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+88]

; 1177 :     Tmp[30]  = t1mO7;                   // F[384]

  0014c	8b 45 80	 mov	 eax, DWORD PTR _t1mO7$[ebp]
  0014f	89 85 70 ff ff
	ff		 mov	 DWORD PTR _Tmp$[ebp+120], eax

; 1178 :     Tmp[31]  = t1pO7 - tS2x;            // F[640]

  00155	d9 45 b0	 fld	 DWORD PTR _t1pO7$[ebp]
  00158	d8 a5 cc fe ff
	ff		 fsub	 DWORD PTR _tS2x$[ebp]
  0015e	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+124]

; 1179 :     Tmp[23]  = t1mO7 - original[3];     // F[768]

  00164	d9 45 80	 fld	 DWORD PTR _t1mO7$[ebp]
  00167	d8 a5 74 fe ff
	ff		 fsub	 DWORD PTR _original$[ebp+12]
  0016d	d9 9d 54 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+92]

; 1180 :     Tmp[15]  = t1mO7;                   // F[896]

  00173	8b 4d 80	 mov	 ecx, DWORD PTR _t1mO7$[ebp]
  00176	89 8d 34 ff ff
	ff		 mov	 DWORD PTR _Tmp$[ebp+60], ecx

; 1181 :     
; 1182 :                                         // F[1152] 
; 1183 :     Tmp[8]  = (tO1pO9 = original[1] + original[9]) + (tS2x = MULT_BP2X(SQRT2,original[5]));

  0017c	d9 85 6c fe ff
	ff		 fld	 DWORD PTR _original$[ebp+4]
  00182	d8 85 8c fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+36]
  00188	d9 5d dc	 fstp	 DWORD PTR _tO1pO9$[ebp]
  0018b	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fb504f3
  00191	d8 8d 7c fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+20]
  00197	d9 95 cc fe ff
	ff		 fst	 DWORD PTR _tS2x$[ebp]
  0019d	d8 45 dc	 fadd	 DWORD PTR _tO1pO9$[ebp]
  001a0	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+32]

; 1184 :                                         // F[1280] 
; 1185 :     Tmp[16]  = (tO1mO9 = original[1] - original[9]) + original[5];

  001a6	d9 85 6c fe ff
	ff		 fld	 DWORD PTR _original$[ebp+4]
  001ac	d8 a5 8c fe ff
	ff		 fsub	 DWORD PTR _original$[ebp+36]
  001b2	d9 95 c4 fe ff
	ff		 fst	 DWORD PTR _tO1mO9$[ebp]
  001b8	d8 85 7c fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+20]
  001be	d9 9d 38 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+64]

; 1186 :     Tmp[24]  = tO1mO9;                  // F[1408]

  001c4	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _tO1mO9$[ebp]
  001ca	89 95 58 ff ff
	ff		 mov	 DWORD PTR _Tmp$[ebp+96], edx

; 1187 :     Tmp[25]  = tO1pO9 - tS2x;           // F[1664]

  001d0	d9 45 dc	 fld	 DWORD PTR _tO1pO9$[ebp]
  001d3	d8 a5 cc fe ff
	ff		 fsub	 DWORD PTR _tS2x$[ebp]
  001d9	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+100]

; 1188 :     Tmp[17]  = tO1mO9 - original[5];    // F[1792]

  001df	d9 85 c4 fe ff
	ff		 fld	 DWORD PTR _tO1mO9$[ebp]
  001e5	d8 a5 7c fe ff
	ff		 fsub	 DWORD PTR _original$[ebp+20]
  001eb	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+68]

; 1189 :     Tmp[9]  = tO1mO9;                   // F[1920] 

  001f1	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _tO1mO9$[ebp]
  001f7	89 85 1c ff ff
	ff		 mov	 DWORD PTR _Tmp$[ebp+36], eax

; 1190 :     
; 1191 :                                         // F[2176] 
; 1192 :     Tmp[10]  = (tO0pO8 = original[0] + original[8]) + (tS2x = MULT_BP2X(SQRT2,original[4]));

  001fd	d9 85 68 fe ff
	ff		 fld	 DWORD PTR _original$[ebp]
  00203	d8 85 88 fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+32]
  00209	d9 5d bc	 fstp	 DWORD PTR _tO0pO8$[ebp]
  0020c	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fb504f3
  00212	d8 8d 78 fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+16]
  00218	d9 95 cc fe ff
	ff		 fst	 DWORD PTR _tS2x$[ebp]
  0021e	d8 45 bc	 fadd	 DWORD PTR _tO0pO8$[ebp]
  00221	d9 9d 20 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+40]

; 1193 :                                         // F[2304] 
; 1194 :     Tmp[18]  = (tO0mO8 = original[0] - original[8]) + original[4];

  00227	d9 85 68 fe ff
	ff		 fld	 DWORD PTR _original$[ebp]
  0022d	d8 a5 88 fe ff
	ff		 fsub	 DWORD PTR _original$[ebp+32]
  00233	d9 55 c0	 fst	 DWORD PTR _tO0mO8$[ebp]
  00236	d8 85 78 fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+16]
  0023c	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+72]

; 1195 :     Tmp[26]  = tO0mO8;                  // F[2432]

  00242	8b 4d c0	 mov	 ecx, DWORD PTR _tO0mO8$[ebp]
  00245	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _Tmp$[ebp+104], ecx

; 1196 :     Tmp[27]  = tO0pO8 - tS2x;           // F[2688]

  0024b	d9 45 bc	 fld	 DWORD PTR _tO0pO8$[ebp]
  0024e	d8 a5 cc fe ff
	ff		 fsub	 DWORD PTR _tS2x$[ebp]
  00254	d9 9d 64 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+108]

; 1197 :     Tmp[19]  = tO0mO8 - original[4];    // F[2816] 

  0025a	d9 45 c0	 fld	 DWORD PTR _tO0mO8$[ebp]
  0025d	d8 a5 78 fe ff
	ff		 fsub	 DWORD PTR _original$[ebp+16]
  00263	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+76]

; 1198 :     Tmp[11]  = tO0mO8;                  // F[2944]

  00269	8b 55 c0	 mov	 edx, DWORD PTR _tO0mO8$[ebp]
  0026c	89 95 24 ff ff
	ff		 mov	 DWORD PTR _Tmp$[ebp+44], edx

; 1199 :     
; 1200 :                                         // F[3200] 
; 1201 :     Tmp[12]  = original[2] + (tS2x = MULT_BP2X(SQRT2,original[6]));

  00272	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fb504f3
  00278	d8 8d 80 fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+24]
  0027e	d9 95 cc fe ff
	ff		 fst	 DWORD PTR _tS2x$[ebp]
  00284	d8 85 70 fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+8]
  0028a	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+48]

; 1202 :     Tmp[20]  = original[2] + original[6]; // F[3328]

  00290	d9 85 70 fe ff
	ff		 fld	 DWORD PTR _original$[ebp+8]
  00296	d8 85 80 fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+24]
  0029c	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+80]

; 1203 :     Tmp[28]  = original[2];             // F[3456] 

  002a2	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _original$[ebp+8]
  002a8	89 85 68 ff ff
	ff		 mov	 DWORD PTR _Tmp$[ebp+112], eax

; 1204 :     Tmp[29]  = original[2] - tS2x;      // F[3712]

  002ae	d9 85 70 fe ff
	ff		 fld	 DWORD PTR _original$[ebp+8]
  002b4	d8 a5 cc fe ff
	ff		 fsub	 DWORD PTR _tS2x$[ebp]
  002ba	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+116]

; 1205 :     Tmp[21]  = original[2] - original[6]; // F[3840]

  002c0	d9 85 70 fe ff
	ff		 fld	 DWORD PTR _original$[ebp+8]
  002c6	d8 a5 80 fe ff
	ff		 fsub	 DWORD PTR _original$[ebp+24]
  002cc	d9 9d 4c ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+84]

; 1206 :     Tmp[13]  = original[2];             // F[3968]

  002d2	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _original$[ebp+8]
  002d8	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _Tmp$[ebp+52], ecx

; 1207 :     
; 1208 :     tO4pO6 = original[4] + original[6];

  002de	d9 85 78 fe ff
	ff		 fld	 DWORD PTR _original$[ebp+16]
  002e4	d8 85 80 fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+24]
  002ea	d9 9d f4 fe ff
	ff		 fstp	 DWORD PTR _tO4pO6$[ebp]

; 1209 :     tO4mO6 = original[4] - original[6];

  002f0	d9 85 78 fe ff
	ff		 fld	 DWORD PTR _original$[ebp+16]
  002f6	d8 a5 80 fe ff
	ff		 fsub	 DWORD PTR _original$[ebp+24]
  002fc	d9 9d 54 fe ff
	ff		 fstp	 DWORD PTR _tO4mO6$[ebp]

; 1210 :     t1pO7pO3 = t1pO7 + original[3];

  00302	d9 45 b0	 fld	 DWORD PTR _t1pO7$[ebp]
  00305	d8 85 74 fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+12]
  0030b	d9 5d 84	 fstp	 DWORD PTR _t1pO7pO3$[ebp]

; 1211 :     t1pO7mO3 = t1pO7 - original[3];

  0030e	d9 45 b0	 fld	 DWORD PTR _t1pO7$[ebp]
  00311	d8 a5 74 fe ff
	ff		 fsub	 DWORD PTR _original$[ebp+12]
  00317	d9 9d c8 fe ff
	ff		 fstp	 DWORD PTR _t1pO7mO3$[ebp]

; 1212 :     tO1pO5pO9 = tO1pO9 + original[5];

  0031d	d9 45 dc	 fld	 DWORD PTR _tO1pO9$[ebp]
  00320	d8 85 7c fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+20]
  00326	d9 5d c4	 fstp	 DWORD PTR _tO1pO5pO9$[ebp]

; 1213 :     tO0pO2pO4pO6pO8 = tO0pO8 + tO4pO6 + original[2];

  00329	d9 45 bc	 fld	 DWORD PTR _tO0pO8$[ebp]
  0032c	d8 85 f4 fe ff
	ff		 fadd	 DWORD PTR _tO4pO6$[ebp]
  00332	d8 85 70 fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+8]
  00338	d9 5d e0	 fstp	 DWORD PTR _tO0pO2pO4pO6pO8$[ebp]

; 1214 : 
; 1215 :     D  = t1pO7pO3 + tO1pO5pO9 + tO0pO2pO4pO6pO8;    // F[0]

  0033b	d9 45 84	 fld	 DWORD PTR _t1pO7pO3$[ebp]
  0033e	d8 45 c4	 fadd	 DWORD PTR _tO1pO5pO9$[ebp]
  00341	d8 45 e0	 fadd	 DWORD PTR _tO0pO2pO4pO6pO8$[ebp]
  00344	d9 9d 90 fe ff
	ff		 fstp	 DWORD PTR _D$[ebp]

; 1216 :     E  = t1pO7mO3 + (tS2x = MULT_BP2X(SQRT2_2, tO0pO8 - tO4mO6 - original[2]));     // F[512]

  0034a	d9 45 bc	 fld	 DWORD PTR _tO0pO8$[ebp]
  0034d	d8 a5 54 fe ff
	ff		 fsub	 DWORD PTR _tO4mO6$[ebp]
  00353	d8 a5 70 fe ff
	ff		 fsub	 DWORD PTR _original$[ebp+8]
  00359	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f3
  0035f	d9 95 cc fe ff
	ff		 fst	 DWORD PTR _tS2x$[ebp]
  00365	d8 85 c8 fe ff
	ff		 fadd	 DWORD PTR _t1pO7mO3$[ebp]
  0036b	d9 5d e8	 fstp	 DWORD PTR _E$[ebp]

; 1217 :     F  = t1pO7pO3 - tO1pO5pO9;                      // F[1024]

  0036e	d9 45 84	 fld	 DWORD PTR _t1pO7pO3$[ebp]
  00371	d8 65 c4	 fsub	 DWORD PTR _tO1pO5pO9$[ebp]
  00374	d9 9d b4 fe ff
	ff		 fstp	 DWORD PTR _F$[ebp]

; 1218 :     G  = t1pO7mO3 - tS2x;                           // F[1536]

  0037a	d9 85 c8 fe ff
	ff		 fld	 DWORD PTR _t1pO7mO3$[ebp]
  00380	d8 a5 cc fe ff
	ff		 fsub	 DWORD PTR _tS2x$[ebp]
  00386	d9 9d 58 fe ff
	ff		 fstp	 DWORD PTR _G$[ebp]

; 1219 :     H  = -tO1pO9 + original[5] + (tS2x = MULT_BP2X(SQRT2_2,tO0pO8 - tO4pO6 + original[2]));  // F[2560]

  0038c	d9 45 bc	 fld	 DWORD PTR _tO0pO8$[ebp]
  0038f	d8 a5 f4 fe ff
	ff		 fsub	 DWORD PTR _tO4pO6$[ebp]
  00395	d8 85 70 fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+8]
  0039b	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f3504f3
  003a1	d9 95 cc fe ff
	ff		 fst	 DWORD PTR _tS2x$[ebp]
  003a7	d9 45 dc	 fld	 DWORD PTR _tO1pO9$[ebp]
  003aa	d9 e0		 fchs
  003ac	d8 85 7c fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+20]
  003b2	de c1		 faddp	 ST(1), ST(0)
  003b4	d9 5d d0	 fstp	 DWORD PTR _H$[ebp]

; 1220 :     I  =  tO0pO8 + tO4mO6 - original[2];            // F[3072]

  003b7	d9 45 bc	 fld	 DWORD PTR _tO0pO8$[ebp]
  003ba	d8 85 54 fe ff
	ff		 fadd	 DWORD PTR _tO4mO6$[ebp]
  003c0	d8 a5 70 fe ff
	ff		 fsub	 DWORD PTR _original$[ebp+8]
  003c6	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR _I$[ebp]

; 1221 :     J  =  tO1pO9 - original[5] + tS2x;              // F[3584]

  003cc	d9 45 dc	 fld	 DWORD PTR _tO1pO9$[ebp]
  003cf	d8 a5 7c fe ff
	ff		 fsub	 DWORD PTR _original$[ebp+20]
  003d5	d8 85 cc fe ff
	ff		 fadd	 DWORD PTR _tS2x$[ebp]
  003db	d9 5d 90	 fstp	 DWORD PTR _J$[ebp]

; 1222 :     
; 1223 :     // j==0 and i==0 below.
; 1224 :     pFb   =  (LpSpecType*) &pWF[0];      

  003de	8b 55 94	 mov	 edx, DWORD PTR _pWF$[ebp]
  003e1	89 95 9c fe ff
	ff		 mov	 DWORD PTR _pFb$[ebp], edx

; 1225 :     *pFb  =  InverseQuadRootOfSumSquares(D, 0);     // F[0]

  003e7	6a 00		 push	 0
  003e9	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _D$[ebp]
  003ef	50		 push	 eax
  003f0	e8 00 00 00 00	 call	 _InverseQuadRootOfSumSquares@8
  003f5	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _pFb$[ebp]
  003fb	d9 19		 fstp	 DWORD PTR [ecx]

; 1226 :     pFb  +=  iSizeBy4;   

  003fd	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _iSizeBy4$[ebp]
  00403	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _pFb$[ebp]
  00409	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0040c	89 8d 9c fe ff
	ff		 mov	 DWORD PTR _pFb$[ebp], ecx

; 1227 :     *pFb  =  InverseQuadRootOfSumSquares(E, J);     // F[512]    b: F[512]    a: F[3584]

  00412	8b 55 90	 mov	 edx, DWORD PTR _J$[ebp]
  00415	52		 push	 edx
  00416	8b 45 e8	 mov	 eax, DWORD PTR _E$[ebp]
  00419	50		 push	 eax
  0041a	e8 00 00 00 00	 call	 _InverseQuadRootOfSumSquares@8
  0041f	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _pFb$[ebp]
  00425	d9 19		 fstp	 DWORD PTR [ecx]

; 1228 :     pFb  +=  iSizeBy4;    

  00427	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _iSizeBy4$[ebp]
  0042d	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _pFb$[ebp]
  00433	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00436	89 8d 9c fe ff
	ff		 mov	 DWORD PTR _pFb$[ebp], ecx

; 1229 :     *pFb  =  InverseQuadRootOfSumSquares(F, I);     // F[1024]    b: F[1024]   a: F[3072]

  0043c	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR _I$[ebp]
  00442	52		 push	 edx
  00443	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _F$[ebp]
  00449	50		 push	 eax
  0044a	e8 00 00 00 00	 call	 _InverseQuadRootOfSumSquares@8
  0044f	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _pFb$[ebp]
  00455	d9 19		 fstp	 DWORD PTR [ecx]

; 1230 :     pFb  +=  iSizeBy4;    

  00457	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _iSizeBy4$[ebp]
  0045d	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _pFb$[ebp]
  00463	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00466	89 8d 9c fe ff
	ff		 mov	 DWORD PTR _pFb$[ebp], ecx

; 1231 :     *pFb  =  InverseQuadRootOfSumSquares(G, H);     // F[1536]   b: F[1536]   a: F[2560]

  0046c	8b 55 d0	 mov	 edx, DWORD PTR _H$[ebp]
  0046f	52		 push	 edx
  00470	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _G$[ebp]
  00476	50		 push	 eax
  00477	e8 00 00 00 00	 call	 _InverseQuadRootOfSumSquares@8
  0047c	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _pFb$[ebp]
  00482	d9 19		 fstp	 DWORD PTR [ecx]

; 1232 : 
; 1233 :     // k - example:  iSize = 0x100 = 256, j==0
; 1234 :     //         i:  0   1   2   3 
; 1235 :     //    kdx         10  20  30 
; 1236 :     // 80-kdx         70  60  50  
; 1237 :     // 80+kdx         90  a0  b0
; 1238 :     //100-kdx         f0  e0  d0  
; 1239 : 
; 1240 : #   if defined(PLATFORM_LPC_NO_TRIG_TABLE) || defined(PLATFORM_LPC_SMALL_TRIG_TABLE)
; 1241 : 
; 1242 :         assert( fabs(FLOAT_FROM_BP2(SL16)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy16,0)))<0.0001 
; 1243 :              && fabs(FLOAT_FROM_BP2(CL16)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy16,1)))<0.0001 );
; 1244 : 
; 1245 :         prvDoLpc4( iSizeBy16, Tmp+8, pWF, iSizeBy2, SL16, CL16 );

  00484	8b 55 fc	 mov	 edx, DWORD PTR _CL16$[ebp]
  00487	52		 push	 edx
  00488	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _SL16$[ebp]
  0048e	50		 push	 eax
  0048f	8b 4d d4	 mov	 ecx, DWORD PTR _iSizeBy2$[ebp]
  00492	51		 push	 ecx
  00493	8b 55 94	 mov	 edx, DWORD PTR _pWF$[ebp]
  00496	52		 push	 edx
  00497	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _Tmp$[ebp+32]
  0049d	50		 push	 eax
  0049e	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _iSizeBy16$[ebp]
  004a4	51		 push	 ecx
  004a5	e8 00 00 00 00	 call	 _prvDoLpc4_XDS@24

; 1246 : 
; 1247 :         assert( fabs(FLOAT_FROM_BP2(SL8)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy8,0)))<0.0001 
; 1248 :              && fabs(FLOAT_FROM_BP2(CL8)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy8,1)))<0.0001 );
; 1249 : 
; 1250 :         prvDoLpc4( iSizeBy8,  Tmp+16, pWF, iSizeBy2, SL8,  CL8 );

  004aa	8b 55 d8	 mov	 edx, DWORD PTR _CL8$[ebp]
  004ad	52		 push	 edx
  004ae	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _SL8$[ebp]
  004b4	50		 push	 eax
  004b5	8b 4d d4	 mov	 ecx, DWORD PTR _iSizeBy2$[ebp]
  004b8	51		 push	 ecx
  004b9	8b 55 94	 mov	 edx, DWORD PTR _pWF$[ebp]
  004bc	52		 push	 edx
  004bd	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _Tmp$[ebp+64]
  004c3	50		 push	 eax
  004c4	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _iSizeBy8$[ebp]
  004ca	51		 push	 ecx
  004cb	e8 00 00 00 00	 call	 _prvDoLpc4_XDS@24

; 1251 : 
; 1252 :         assert( fabs(FLOAT_FROM_BP2(SL3by16)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy8 + iSizeBy16,0)))<0.0001 
; 1253 :              && fabs(FLOAT_FROM_BP2(CL3by16)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy8 + iSizeBy16,1)))<0.0001 );
; 1254 : 
; 1255 :         prvDoLpc4( iSizeBy8 + iSizeBy16, Tmp+24, pWF, iSizeBy2, SL3by16, CL3by16 );

  004d0	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _CL3by16$[ebp]
  004d6	52		 push	 edx
  004d7	8b 45 cc	 mov	 eax, DWORD PTR _SL3by16$[ebp]
  004da	50		 push	 eax
  004db	8b 4d d4	 mov	 ecx, DWORD PTR _iSizeBy2$[ebp]
  004de	51		 push	 ecx
  004df	8b 55 94	 mov	 edx, DWORD PTR _pWF$[ebp]
  004e2	52		 push	 edx
  004e3	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _Tmp$[ebp+96]
  004e9	50		 push	 eax
  004ea	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _iSizeBy8$[ebp]
  004f0	03 8d 98 fe ff
	ff		 add	 ecx, DWORD PTR _iSizeBy16$[ebp]
  004f6	51		 push	 ecx
  004f7	e8 00 00 00 00	 call	 _prvDoLpc4_XDS@24

; 1256 : 
; 1257 : #   else
; 1258 : 
; 1259 :         iMapLpcIdxOffset[0] = 0;  
; 1260 :         iMapLpcIdxOffset[1] = iSizeBy8;  
; 1261 :         iMapLpcIdxOffset[2] = iSizeBy8;  
; 1262 :         iMapLpcIdxOffset[3] = iSizeBy4;
; 1263 : 
; 1264 :         pTmp = Tmp+8;
; 1265 :         for( i = 1, jj = iSizeBy16; i<4; i++, pTmp += 8, jj = (i&1)*(iSizeBy16) ) 
; 1266 :         {
; 1267 :             k = iMapLpcIdxOffset[i] - jj;
; 1268 : 
; 1269 :             prvDoLpc4( k, pTmp, pWF, iSizeBy2, iShrink );
; 1270 :         }
; 1271 : 
; 1272 : #   endif
; 1273 : 
; 1274 : #   if defined(PLATFORM_LPC_SMALL_TRIG_TABLE)
; 1275 :         // 2 items per row, sample every fourth row.
; 1276 :         pC4 = &lpc_trig2048[(8<<iShrink)];
; 1277 :         pCInc4 = (8<<iShrink)-1;  // 1 of them gets done with ++
; 1278 :         // pC4 = lpc_Trigs[iShrink] + (2*4);
; 1279 :         // pCInc4 = 8-1;
; 1280 : 
; 1281 :         pC1 = &lpc_trig2048[(2<<iShrink)];
; 1282 :         pCInc1 = (2<<iShrink)-1;    // 1 of them gets done with ++;
; 1283 :         // pC1 = lpc_Trigs[iShrink] + 2;
; 1284 :         // pCInc1 = 1;
; 1285 : 
; 1286 : #   elif defined(PLATFORM_LPC_NO_TRIG_TABLE)
; 1287 : 
; 1288 :         assert( 64 <= iSize && iSize <= 2048 );
; 1289 : 
; 1290 :         pSinCosTable = rgSinCosTables[iSize>>7];

  004fc	8b 95 94 fe ff
	ff		 mov	 edx, DWORD PTR _iSize$[ebp]
  00502	c1 fa 07	 sar	 edx, 7
  00505	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _rgSinCosTables[edx*4]
  0050c	89 85 78 ff ff
	ff		 mov	 DWORD PTR _pSinCosTable$[ebp], eax

; 1291 :         S4  = pSinCosTable->sin_4PIbycSB;

  00512	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pSinCosTable$[ebp]
  00518	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0051b	89 95 e0 fe ff
	ff		 mov	 DWORD PTR _S4$[ebp], edx

; 1292 :         C4  = pSinCosTable->cos_4PIbycSB;

  00521	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _pSinCosTable$[ebp]
  00527	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0052a	89 8d e4 fe ff
	ff		 mov	 DWORD PTR _C4$[ebp], ecx

; 1293 :         S4p = 0;

  00530	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _S4p$[ebp], 0

; 1294 :         C4p = BP2_FROM_FLOAT(1.0f);

  00537	c7 85 b8 fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _C4p$[ebp], 1065353216 ; 3f800000H

; 1295 :         STEP4 = MUL2(S4);

  00541	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR _S4$[ebp]
  00547	dc c0		 fadd	 ST(0), ST(0)
  00549	d9 5d 9c	 fstp	 DWORD PTR _STEP4$[ebp]

; 1296 : 
; 1297 :         S1  = BP2_FROM_BP1(pSinCosTable->sin_PIbycSB);

  0054c	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _pSinCosTable$[ebp]
  00552	d9 42 10	 fld	 DWORD PTR [edx+16]
  00555	d9 9d e8 fe ff
	ff		 fstp	 DWORD PTR _S1$[ebp]

; 1298 :         C1  = BP2_FROM_BP1(pSinCosTable->cos_PIbycSB);

  0055b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _pSinCosTable$[ebp]
  00561	d9 40 14	 fld	 DWORD PTR [eax+20]
  00564	d9 5d b8	 fstp	 DWORD PTR _C1$[ebp]

; 1299 :         S1p = 0;

  00567	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _S1p$[ebp], 0

; 1300 :         C1p = BP2_FROM_FLOAT(1.0f);

  0056e	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _C1p$[ebp], 1065353216 ; 3f800000H

; 1301 :         STEP1 = BP2_FROM_BP1(pSinCosTable->two_sin_PIbycSB);

  00575	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pSinCosTable$[ebp]
  0057b	d9 41 28	 fld	 DWORD PTR [ecx+40]
  0057e	d9 5d 8c	 fstp	 DWORD PTR _STEP1$[ebp]

; 1302 : 
; 1303 : #   else   // so must be big lpc constants table
; 1304 : 
; 1305 :         pC4 = &lpc_cnst3[1*(4<<iShrink)];
; 1306 :         pCInc4 = (4<<iShrink)-3;  // 3 of them get done with ++
; 1307 : 
; 1308 : #   endif  // defined(PLATFORM_LPC_NO_TRIG_TABLE)
; 1309 : 
; 1310 :     for (j=1; j<iSizeBy16; j++ )

  00581	c7 85 40 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _j$[ebp], 1
  0058b	eb 0f		 jmp	 SHORT $L4080
$L4081:
  0058d	8b 95 40 fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  00593	83 c2 01	 add	 edx, 1
  00596	89 95 40 fe ff
	ff		 mov	 DWORD PTR _j$[ebp], edx
$L4080:
  0059c	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  005a2	3b 85 98 fe ff
	ff		 cmp	 eax, DWORD PTR _iSizeBy16$[ebp]
  005a8	0f 8d e0 05 00
	00		 jge	 $L4082

; 1311 :     {
; 1312 : #       if defined(PLATFORM_LPC_NO_TRIG_TABLE) || defined(PLATFORM_LPC_SMALL_TRIG_TABLE)
; 1313 : #           if !defined(PLATFORM_SPECIFIC_LPC_JLOOP_BOTTOM) || defined(PLATFORM_LPC_SMALL_TRIG_TABLE)
; 1314 :                 BP2Type S2, C2;
; 1315 : #           endif
; 1316 :             BP2Type C8, S8;
; 1317 : 
; 1318 : #           if defined(PLATFORM_LPC_SMALL_TRIG_TABLE)
; 1319 :                 S4 = *pC4++;                        // sin(x) = sin(pi*4*j/iSize)
; 1320 :                 C4 = *pC4;                          // cos(x) = cos(pi*4*j/iSize)
; 1321 :                 pC4 += pCInc4;
; 1322 : #           endif  // PLATFORM_LPC_SMALL_TRIG_TABLE
; 1323 : 
; 1324 :             assert( fabs(FLOAT_FROM_BP2(S4)-sin(PI*4*j/iSize)) < 0.0001 
; 1325 :                  && fabs(FLOAT_FROM_BP2(C4)-cos(PI*4*j/iSize)) < 0.0001 );
; 1326 : 
; 1327 :             CmS1 = -C4 + S4;                    // cnst3[i*(4<<iShrink)+3];

  005ae	d9 85 e4 fe ff
	ff		 fld	 DWORD PTR _C4$[ebp]
  005b4	d9 e0		 fchs
  005b6	d8 85 e0 fe ff
	ff		 fadd	 DWORD PTR _S4$[ebp]
  005bc	d9 9d a8 fe ff
	ff		 fstp	 DWORD PTR _CmS1$[ebp]

; 1328 :             CpS1 =  C4 + S4;                    // cnst3[i*(4<<iShinrk)+1];

  005c2	d9 85 e4 fe ff
	ff		 fld	 DWORD PTR _C4$[ebp]
  005c8	d8 85 e0 fe ff
	ff		 fadd	 DWORD PTR _S4$[ebp]
  005ce	d9 5d e4	 fstp	 DWORD PTR _CpS1$[ebp]

; 1329 : 
; 1330 :             S8 = MUL2(MULT_BP2X(C4,S4));                        // sin(2x)

  005d1	d9 85 e4 fe ff
	ff		 fld	 DWORD PTR _C4$[ebp]
  005d7	d8 8d e0 fe ff
	ff		 fmul	 DWORD PTR _S4$[ebp]
  005dd	dc c0		 fadd	 ST(0), ST(0)
  005df	d9 9d 34 fe ff
	ff		 fstp	 DWORD PTR _S8$4086[ebp]

; 1331 :             C8 = BP2_FROM_FLOAT(1.0f) - MUL2(MULT_BP2X(S4,S4)); // cos(2x)

  005e5	d9 85 e0 fe ff
	ff		 fld	 DWORD PTR _S4$[ebp]
  005eb	d8 8d e0 fe ff
	ff		 fmul	 DWORD PTR _S4$[ebp]
  005f1	dc c0		 fadd	 ST(0), ST(0)
  005f3	d8 2d 00 00 00
	00		 fsubr	 DWORD PTR __real@3f800000
  005f9	d9 95 3c fe ff
	ff		 fst	 DWORD PTR _C8$4085[ebp]

; 1332 :             CmS2 = -C8 + S8;                    // cnst3[i*(4<<iShrink)+2];

  005ff	d9 e0		 fchs
  00601	d8 85 34 fe ff
	ff		 fadd	 DWORD PTR _S8$4086[ebp]
  00607	d9 9d f0 fe ff
	ff		 fstp	 DWORD PTR _CmS2$[ebp]

; 1333 :             CpS2 =  C8 + S8;                    // cnst3[i*(4<<iShink)];

  0060d	d9 85 3c fe ff
	ff		 fld	 DWORD PTR _C8$4085[ebp]
  00613	d8 85 34 fe ff
	ff		 fadd	 DWORD PTR _S8$4086[ebp]
  00619	d9 9d ac fe ff
	ff		 fstp	 DWORD PTR _CpS2$[ebp]

; 1334 : 
; 1335 : #           if defined(PLATFORM_LPC_NO_TRIG_TABLE)
; 1336 : 		        // rotate angle by b = 4*pi/iSize
; 1337 : 		        // recursion: cos(a+b) = cos(a-b) + 2*sin(b)*sin(a)
; 1338 : 		        // and:       sin(a+b) = sin(a-b) - 2*sin(b)*cos(a)
; 1339 : 		        CT = C4p - MULT_BP2X(STEP4,S4);

  0061f	d9 45 9c	 fld	 DWORD PTR _STEP4$[ebp]
  00622	d8 8d e0 fe ff
	ff		 fmul	 DWORD PTR _S4$[ebp]
  00628	d8 ad b8 fe ff
	ff		 fsubr	 DWORD PTR _C4p$[ebp]
  0062e	d9 9d 48 fe ff
	ff		 fstp	 DWORD PTR _CT$[ebp]

; 1340 : 		        ST = S4p + MULT_BP2X(STEP4,C4);

  00634	d9 45 9c	 fld	 DWORD PTR _STEP4$[ebp]
  00637	d8 8d e4 fe ff
	ff		 fmul	 DWORD PTR _C4$[ebp]
  0063d	d8 45 f4	 fadd	 DWORD PTR _S4p$[ebp]
  00640	d9 9d 4c fe ff
	ff		 fstp	 DWORD PTR _ST$[ebp]

; 1341 : 		        C4p = C4;  C4 = CT;

  00646	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _C4$[ebp]
  0064c	89 8d b8 fe ff
	ff		 mov	 DWORD PTR _C4p$[ebp], ecx
  00652	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _CT$[ebp]
  00658	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _C4$[ebp], edx

; 1342 : 		        S4p = S4;  S4 = ST;

  0065e	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _S4$[ebp]
  00664	89 45 f4	 mov	 DWORD PTR _S4p$[ebp], eax
  00667	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _ST$[ebp]
  0066d	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _S4$[ebp], ecx

; 1343 : #           endif  // PLATFORM_LPC_NO_TRIG_TABLE
; 1344 : 
; 1345 : #       else    // PLATFORM_LPC_NO_TRIG_TABLE || PLATFORM_LPC_SMALL_TRIG_TABLE
; 1346 : 
; 1347 :             CpS2 = *pC4++;              // cnst3[i*(4<<iShink)];
; 1348 :             CpS1 = *pC4++;              // cnst3[i*(4<<iShinrk)+1];
; 1349 :             CmS2 = *pC4++;              // cnst3[i*(4<<iShrink)+2];
; 1350 :             CmS1 = *pC4;                // cnst3[i*(4<<iShrink)+3];
; 1351 :             pC4 += pCInc4;
; 1352 : 
; 1353 : #       endif
; 1354 :         assert( BP2_FROM_FLOAT(1) <= CpS2 && CpS2 <= BP2_FROM_FLOAT(1.5) );     
; 1355 : 
; 1356 :                                                         // F[j]
; 1357 :         Tmp[6]  = LP_SPEC_FROM_FLOAT(1) + (tCpS2x = MULT_BP2X(CpS2,original[7])) + (tCpS1x = MULT_BP2X(CpS1,original[3]));

  00673	d9 85 ac fe ff
	ff		 fld	 DWORD PTR _CpS2$[ebp]
  00679	d8 8d 84 fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+28]
  0067f	d9 9d a4 fe ff
	ff		 fstp	 DWORD PTR _tCpS2x$[ebp]
  00685	d9 45 e4	 fld	 DWORD PTR _CpS1$[ebp]
  00688	d8 8d 74 fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+12]
  0068e	d9 95 bc fe ff
	ff		 fst	 DWORD PTR _tCpS1x$[ebp]
  00694	d9 85 a4 fe ff
	ff		 fld	 DWORD PTR _tCpS2x$[ebp]
  0069a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3f800000
  006a0	de c1		 faddp	 ST(1), ST(0)
  006a2	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+24]

; 1358 :                                                         // F[256-j]
; 1359 :         Tmp[14] = LP_SPEC_FROM_FLOAT(1) + (tCmS2x = MULT_BP2X(CmS2,original[7])) + tCpS1x;

  006a8	d9 85 f0 fe ff
	ff		 fld	 DWORD PTR _CmS2$[ebp]
  006ae	d8 8d 84 fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+28]
  006b4	d9 95 ec fe ff
	ff		 fst	 DWORD PTR _tCmS2x$[ebp]
  006ba	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3f800000
  006c0	d8 85 bc fe ff
	ff		 fadd	 DWORD PTR _tCpS1x$[ebp]
  006c6	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+56]

; 1360 :                                                         // F[256+j]
; 1361 :         Tmp[22] = LP_SPEC_FROM_FLOAT(1) - tCpS2x - (tCmS1x = MULT_BP2X(CmS1,original[3]));    

  006cc	d9 85 a8 fe ff
	ff		 fld	 DWORD PTR _CmS1$[ebp]
  006d2	d8 8d 74 fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+12]
  006d8	d9 95 a0 fe ff
	ff		 fst	 DWORD PTR _tCmS1x$[ebp]
  006de	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  006e4	d8 a5 a4 fe ff
	ff		 fsub	 DWORD PTR _tCpS2x$[ebp]
  006ea	de e1		 fsubrp	 ST(1), ST(0)
  006ec	d9 9d 50 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+88]

; 1362 :         Tmp[30] = LP_SPEC_FROM_FLOAT(1) - tCmS2x + tCmS1x;  // F[512-j]

  006f2	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  006f8	d8 a5 ec fe ff
	ff		 fsub	 DWORD PTR _tCmS2x$[ebp]
  006fe	d8 85 a0 fe ff
	ff		 fadd	 DWORD PTR _tCmS1x$[ebp]
  00704	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+120]

; 1363 :         Tmp[31] = LP_SPEC_FROM_FLOAT(1) + tCpS2x - tCpS1x;  // F[512+j]

  0070a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  00710	d8 85 a4 fe ff
	ff		 fadd	 DWORD PTR _tCpS2x$[ebp]
  00716	d8 a5 bc fe ff
	ff		 fsub	 DWORD PTR _tCpS1x$[ebp]
  0071c	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+124]

; 1364 :         Tmp[23] = LP_SPEC_FROM_FLOAT(1) + tCmS2x - tCpS1x;  // F[768-j]

  00722	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  00728	d8 85 ec fe ff
	ff		 fadd	 DWORD PTR _tCmS2x$[ebp]
  0072e	d8 a5 bc fe ff
	ff		 fsub	 DWORD PTR _tCpS1x$[ebp]
  00734	d9 9d 54 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+92]

; 1365 :         Tmp[15] = LP_SPEC_FROM_FLOAT(1) - tCpS2x + tCmS1x;  // F[768+j]

  0073a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  00740	d8 a5 a4 fe ff
	ff		 fsub	 DWORD PTR _tCpS2x$[ebp]
  00746	d8 85 a0 fe ff
	ff		 fadd	 DWORD PTR _tCmS1x$[ebp]
  0074c	d9 9d 34 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+60]

; 1366 :         Tmp[7]  = LP_SPEC_FROM_FLOAT(1) - tCmS2x - tCmS1x;  // F[1024-j]

  00752	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  00758	d8 a5 ec fe ff
	ff		 fsub	 DWORD PTR _tCmS2x$[ebp]
  0075e	d8 a5 a0 fe ff
	ff		 fsub	 DWORD PTR _tCmS1x$[ebp]
  00764	d9 9d 14 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+28]

; 1367 :         
; 1368 :                                                         // F[1024+j]
; 1369 :         Tmp[0]  = original[1] + (tCpS2x = MULT_BP2X(CpS2,original[9])) + (tCpS1x = MULT_BP2X(CpS1,original[5]));

  0076a	d9 85 ac fe ff
	ff		 fld	 DWORD PTR _CpS2$[ebp]
  00770	d8 8d 8c fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+36]
  00776	d9 9d a4 fe ff
	ff		 fstp	 DWORD PTR _tCpS2x$[ebp]
  0077c	d9 45 e4	 fld	 DWORD PTR _CpS1$[ebp]
  0077f	d8 8d 7c fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+20]
  00785	d9 95 bc fe ff
	ff		 fst	 DWORD PTR _tCpS1x$[ebp]
  0078b	d9 85 a4 fe ff
	ff		 fld	 DWORD PTR _tCpS2x$[ebp]
  00791	d8 85 6c fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+4]
  00797	de c1		 faddp	 ST(1), ST(0)
  00799	d9 9d f8 fe ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp]

; 1370 :                                                         // F[1280-j]  
; 1371 :         Tmp[8]  = original[1] + (tCmS2x = MULT_BP2X(CmS2,original[9])) + tCpS1x;

  0079f	d9 85 f0 fe ff
	ff		 fld	 DWORD PTR _CmS2$[ebp]
  007a5	d8 8d 8c fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+36]
  007ab	d9 95 ec fe ff
	ff		 fst	 DWORD PTR _tCmS2x$[ebp]
  007b1	d8 85 6c fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+4]
  007b7	d8 85 bc fe ff
	ff		 fadd	 DWORD PTR _tCpS1x$[ebp]
  007bd	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+32]

; 1372 :                                                         // F[1280+j]  
; 1373 :         Tmp[16] = original[1] - tCpS2x - (tCmS1x = MULT_BP2X(CmS1,original[5]));

  007c3	d9 85 a8 fe ff
	ff		 fld	 DWORD PTR _CmS1$[ebp]
  007c9	d8 8d 7c fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+20]
  007cf	d9 95 a0 fe ff
	ff		 fst	 DWORD PTR _tCmS1x$[ebp]
  007d5	d9 85 6c fe ff
	ff		 fld	 DWORD PTR _original$[ebp+4]
  007db	d8 a5 a4 fe ff
	ff		 fsub	 DWORD PTR _tCpS2x$[ebp]
  007e1	de e1		 fsubrp	 ST(1), ST(0)
  007e3	d9 9d 38 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+64]

; 1374 :         Tmp[24] = original[1] - tCmS2x + tCmS1x;            // F[1536-j]

  007e9	d9 85 6c fe ff
	ff		 fld	 DWORD PTR _original$[ebp+4]
  007ef	d8 a5 ec fe ff
	ff		 fsub	 DWORD PTR _tCmS2x$[ebp]
  007f5	d8 85 a0 fe ff
	ff		 fadd	 DWORD PTR _tCmS1x$[ebp]
  007fb	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+96]

; 1375 :         Tmp[25] = original[1] + tCpS2x - tCpS1x;            // F[1536+j]

  00801	d9 85 6c fe ff
	ff		 fld	 DWORD PTR _original$[ebp+4]
  00807	d8 85 a4 fe ff
	ff		 fadd	 DWORD PTR _tCpS2x$[ebp]
  0080d	d8 a5 bc fe ff
	ff		 fsub	 DWORD PTR _tCpS1x$[ebp]
  00813	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+100]

; 1376 :         Tmp[17] = original[1] + tCmS2x - tCpS1x;            // F[1792-j]

  00819	d9 85 6c fe ff
	ff		 fld	 DWORD PTR _original$[ebp+4]
  0081f	d8 85 ec fe ff
	ff		 fadd	 DWORD PTR _tCmS2x$[ebp]
  00825	d8 a5 bc fe ff
	ff		 fsub	 DWORD PTR _tCpS1x$[ebp]
  0082b	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+68]

; 1377 :         Tmp[9]  = original[1] - tCpS2x + tCmS1x;            // F[1792+j]

  00831	d9 85 6c fe ff
	ff		 fld	 DWORD PTR _original$[ebp+4]
  00837	d8 a5 a4 fe ff
	ff		 fsub	 DWORD PTR _tCpS2x$[ebp]
  0083d	d8 85 a0 fe ff
	ff		 fadd	 DWORD PTR _tCmS1x$[ebp]
  00843	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+36]

; 1378 :         Tmp[1]  = original[1] - tCmS2x - tCmS1x;            // F[2048-j

  00849	d9 85 6c fe ff
	ff		 fld	 DWORD PTR _original$[ebp+4]
  0084f	d8 a5 ec fe ff
	ff		 fsub	 DWORD PTR _tCmS2x$[ebp]
  00855	d8 a5 a0 fe ff
	ff		 fsub	 DWORD PTR _tCmS1x$[ebp]
  0085b	d9 9d fc fe ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+4]

; 1379 :         
; 1380 :                                                         // F[2048+j]  
; 1381 :         Tmp[2]  = original[0] + (tCpS2x = MULT_BP2X(CpS2,original[8])) + (tCpS1x = MULT_BP2X(CpS1,original[4]));

  00861	d9 85 ac fe ff
	ff		 fld	 DWORD PTR _CpS2$[ebp]
  00867	d8 8d 88 fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+32]
  0086d	d9 9d a4 fe ff
	ff		 fstp	 DWORD PTR _tCpS2x$[ebp]
  00873	d9 45 e4	 fld	 DWORD PTR _CpS1$[ebp]
  00876	d8 8d 78 fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+16]
  0087c	d9 95 bc fe ff
	ff		 fst	 DWORD PTR _tCpS1x$[ebp]
  00882	d9 85 a4 fe ff
	ff		 fld	 DWORD PTR _tCpS2x$[ebp]
  00888	d8 85 68 fe ff
	ff		 fadd	 DWORD PTR _original$[ebp]
  0088e	de c1		 faddp	 ST(1), ST(0)
  00890	d9 9d 00 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+8]

; 1382 :                                                         // F[2304-j]  
; 1383 :         Tmp[10] = original[0] + (tCmS2x = MULT_BP2X(CmS2,original[8])) + tCpS1x;

  00896	d9 85 f0 fe ff
	ff		 fld	 DWORD PTR _CmS2$[ebp]
  0089c	d8 8d 88 fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+32]
  008a2	d9 95 ec fe ff
	ff		 fst	 DWORD PTR _tCmS2x$[ebp]
  008a8	d8 85 68 fe ff
	ff		 fadd	 DWORD PTR _original$[ebp]
  008ae	d8 85 bc fe ff
	ff		 fadd	 DWORD PTR _tCpS1x$[ebp]
  008b4	d9 9d 20 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+40]

; 1384 :                                                         // F[2304+j]  
; 1385 :         Tmp[18] = original[0] - tCpS2x - (tCmS1x = MULT_BP2X(CmS1,original[4]));

  008ba	d9 85 a8 fe ff
	ff		 fld	 DWORD PTR _CmS1$[ebp]
  008c0	d8 8d 78 fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+16]
  008c6	d9 95 a0 fe ff
	ff		 fst	 DWORD PTR _tCmS1x$[ebp]
  008cc	d9 85 68 fe ff
	ff		 fld	 DWORD PTR _original$[ebp]
  008d2	d8 a5 a4 fe ff
	ff		 fsub	 DWORD PTR _tCpS2x$[ebp]
  008d8	de e1		 fsubrp	 ST(1), ST(0)
  008da	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+72]

; 1386 :         Tmp[26] = original[0] - tCmS2x + tCmS1x;            // F[2560-j]

  008e0	d9 85 68 fe ff
	ff		 fld	 DWORD PTR _original$[ebp]
  008e6	d8 a5 ec fe ff
	ff		 fsub	 DWORD PTR _tCmS2x$[ebp]
  008ec	d8 85 a0 fe ff
	ff		 fadd	 DWORD PTR _tCmS1x$[ebp]
  008f2	d9 9d 60 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+104]

; 1387 :         Tmp[27] = original[0] + tCpS2x - tCpS1x;            // F[2560+j]

  008f8	d9 85 68 fe ff
	ff		 fld	 DWORD PTR _original$[ebp]
  008fe	d8 85 a4 fe ff
	ff		 fadd	 DWORD PTR _tCpS2x$[ebp]
  00904	d8 a5 bc fe ff
	ff		 fsub	 DWORD PTR _tCpS1x$[ebp]
  0090a	d9 9d 64 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+108]

; 1388 :         Tmp[19] = original[0] + tCmS2x - tCpS1x;            // F[2816-j]

  00910	d9 85 68 fe ff
	ff		 fld	 DWORD PTR _original$[ebp]
  00916	d8 85 ec fe ff
	ff		 fadd	 DWORD PTR _tCmS2x$[ebp]
  0091c	d8 a5 bc fe ff
	ff		 fsub	 DWORD PTR _tCpS1x$[ebp]
  00922	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+76]

; 1389 :         Tmp[11] = original[0] - tCpS2x + tCmS1x;            // F[2816+j]

  00928	d9 85 68 fe ff
	ff		 fld	 DWORD PTR _original$[ebp]
  0092e	d8 a5 a4 fe ff
	ff		 fsub	 DWORD PTR _tCpS2x$[ebp]
  00934	d8 85 a0 fe ff
	ff		 fadd	 DWORD PTR _tCmS1x$[ebp]
  0093a	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+44]

; 1390 :         Tmp[3]  = original[0] - tCmS2x - tCmS1x;            // F[3072-j]

  00940	d9 85 68 fe ff
	ff		 fld	 DWORD PTR _original$[ebp]
  00946	d8 a5 ec fe ff
	ff		 fsub	 DWORD PTR _tCmS2x$[ebp]
  0094c	d8 a5 a0 fe ff
	ff		 fsub	 DWORD PTR _tCmS1x$[ebp]
  00952	d9 9d 04 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+12]

; 1391 :         
; 1392 :                                                         // F[3072+j] 
; 1393 :                                                         // F[3328-j]
; 1394 :         Tmp[4]  =  Tmp[12]  = original[2] + (tCpS1x = MULT_BP2X(CpS1,original[6]));

  00958	d9 45 e4	 fld	 DWORD PTR _CpS1$[ebp]
  0095b	d8 8d 80 fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+24]
  00961	d9 95 bc fe ff
	ff		 fst	 DWORD PTR _tCpS1x$[ebp]
  00967	d8 85 70 fe ff
	ff		 fadd	 DWORD PTR _original$[ebp+8]
  0096d	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+48]
  00973	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _Tmp$[ebp+48]
  00979	89 95 08 ff ff
	ff		 mov	 DWORD PTR _Tmp$[ebp+16], edx

; 1395 :                                                         // F[3328+j] 
; 1396 :         Tmp[20] = original[2] - (tCmS1x = MULT_BP2X(CmS1,original[6]));

  0097f	d9 85 a8 fe ff
	ff		 fld	 DWORD PTR _CmS1$[ebp]
  00985	d8 8d 80 fe ff
	ff		 fmul	 DWORD PTR _original$[ebp+24]
  0098b	d9 95 a0 fe ff
	ff		 fst	 DWORD PTR _tCmS1x$[ebp]
  00991	d8 ad 70 fe ff
	ff		 fsubr	 DWORD PTR _original$[ebp+8]
  00997	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+80]

; 1397 :         Tmp[28] = original[2] + tCmS1x;                   // F[3584-j]

  0099d	d9 85 70 fe ff
	ff		 fld	 DWORD PTR _original$[ebp+8]
  009a3	d8 85 a0 fe ff
	ff		 fadd	 DWORD PTR _tCmS1x$[ebp]
  009a9	d9 9d 68 ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+112]

; 1398 :         Tmp[29] = original[2] - tCpS1x;                   // F[3584+j]

  009af	d9 85 70 fe ff
	ff		 fld	 DWORD PTR _original$[ebp+8]
  009b5	d8 a5 bc fe ff
	ff		 fsub	 DWORD PTR _tCpS1x$[ebp]
  009bb	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+116]

; 1399 :         Tmp[21] = original[2] - tCpS1x;                   // F[3840-j]

  009c1	d9 85 70 fe ff
	ff		 fld	 DWORD PTR _original$[ebp+8]
  009c7	d8 a5 bc fe ff
	ff		 fsub	 DWORD PTR _tCpS1x$[ebp]
  009cd	d9 9d 4c ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+84]

; 1400 :         Tmp[13] = original[2] + tCmS1x;                   // F[3840+j]

  009d3	d9 85 70 fe ff
	ff		 fld	 DWORD PTR _original$[ebp+8]
  009d9	d8 85 a0 fe ff
	ff		 fadd	 DWORD PTR _tCmS1x$[ebp]
  009df	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+52]

; 1401 :         Tmp[5]  = original[2] - tCmS1x;                   // F[4096-j]

  009e5	d9 85 70 fe ff
	ff		 fld	 DWORD PTR _original$[ebp+8]
  009eb	d8 a5 a0 fe ff
	ff		 fsub	 DWORD PTR _tCmS1x$[ebp]
  009f1	d9 9d 0c ff ff
	ff		 fstp	 DWORD PTR _Tmp$[ebp+20]

; 1402 :         
; 1403 :         //** this block uses 52 adds and 14 mults??
; 1404 :        
; 1405 : 
; 1406 :         // example:  iSize = 0x100 = 256.
; 1407 :         //            j==1         |   j==2          |  j==3
; 1408 :         //       i:  0   1   2   3 |   0   1   2   3 |  0
; 1409 :         //    k      1  1f  21  3f |   2  1e  22  3e |  3 ...
; 1410 :         // 80+k     81  9f  a1  bf |  82  9e  a2  be | 83 ...
; 1411 :         // 80-k     7f  61  5f  41 |  7e  62  5e  42 | 7e ...
; 1412 :         //100-k     ff  e1  df  c1 |  fe  e2  de  c2 | fd ...
; 1413 : 
; 1414 : 
; 1415 : #if defined(PLATFORM_LPC_NO_TRIG_TABLE) || defined(PLATFORM_LPC_SMALL_TRIG_TABLE)
; 1416 : 
; 1417 : #   if defined(PLATFORM_SPECIFIC_LPC_JLOOP_BOTTOM) && defined(PLATFORM_LPC_NO_TRIG_TABLE)
; 1418 :         prvLpcJLoopBottom( j, Tmp, pWF, iSizeBy2, &S1, &C1, &S1p, &C1p, STEP1 );
; 1419 : #   else    //  defined(PLATFORM_SPECIFIC_LPC_JLOOP_BOTTOM)
; 1420 : #       if defined(PLATFORM_LPC_SMALL_TRIG_TABLE)
; 1421 :             S1 = *pC1++;                        // sin(x) = sin(pi*4*j/iSize)
; 1422 :             C1 = *pC1;                          // cos(x) = cos(pi*4*j/iSize)
; 1423 :             pC1 += pCInc1;
; 1424 : #       endif  // PLATFORM_LPC_SMALL_TRIG_TABLE
; 1425 : 
; 1426 :         assert( fabs(FLOAT_FROM_BP2(S1)-sin(PI*j/iSize)) < 0.0001 
; 1427 :              && fabs(FLOAT_FROM_BP2(C1)-cos(PI*j/iSize)) < 0.0001 );
; 1428 : 
; 1429 :         prvDoLpc4( j, Tmp, pWF, iSizeBy2, S1, C1 );

  009f7	8b 45 b8	 mov	 eax, DWORD PTR _C1$[ebp]
  009fa	50		 push	 eax
  009fb	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _S1$[ebp]
  00a01	51		 push	 ecx
  00a02	8b 55 d4	 mov	 edx, DWORD PTR _iSizeBy2$[ebp]
  00a05	52		 push	 edx
  00a06	8b 45 94	 mov	 eax, DWORD PTR _pWF$[ebp]
  00a09	50		 push	 eax
  00a0a	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _Tmp$[ebp]
  00a10	51		 push	 ecx
  00a11	8b 95 40 fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  00a17	52		 push	 edx
  00a18	e8 00 00 00 00	 call	 _prvDoLpc4_XDS@24

; 1430 : 
; 1431 :         S2 = (SLC1 = MULT_BP2X(SL8,C1)) - (CLS1 = MULT_BP2X(CL8,S1));

  00a1d	d9 85 50 fe ff
	ff		 fld	 DWORD PTR _SL8$[ebp]
  00a23	d8 4d b8	 fmul	 DWORD PTR _C1$[ebp]
  00a26	d9 5d a4	 fstp	 DWORD PTR _SLC1$[ebp]
  00a29	d9 45 d8	 fld	 DWORD PTR _CL8$[ebp]
  00a2c	d8 8d e8 fe ff
	ff		 fmul	 DWORD PTR _S1$[ebp]
  00a32	d9 55 f0	 fst	 DWORD PTR _CLS1$[ebp]
  00a35	d8 6d a4	 fsubr	 DWORD PTR _SLC1$[ebp]
  00a38	d9 9d 30 fe ff
	ff		 fstp	 DWORD PTR _S2$4083[ebp]

; 1432 :         C2 = (CLC1 = MULT_BP2X(CL8,C1)) + (SLS1 = MULT_BP2X(SL8,S1));

  00a3e	d9 45 d8	 fld	 DWORD PTR _CL8$[ebp]
  00a41	d8 4d b8	 fmul	 DWORD PTR _C1$[ebp]
  00a44	d9 5d 98	 fstp	 DWORD PTR _CLC1$[ebp]
  00a47	d9 85 50 fe ff
	ff		 fld	 DWORD PTR _SL8$[ebp]
  00a4d	d8 8d e8 fe ff
	ff		 fmul	 DWORD PTR _S1$[ebp]
  00a53	d9 95 dc fe ff
	ff		 fst	 DWORD PTR _SLS1$[ebp]
  00a59	d8 45 98	 fadd	 DWORD PTR _CLC1$[ebp]
  00a5c	d9 9d 38 fe ff
	ff		 fstp	 DWORD PTR _C2$4084[ebp]

; 1433 :         assert( fabs(FLOAT_FROM_BP2(S2)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy8-j,0)))<0.0001 
; 1434 :              && fabs(FLOAT_FROM_BP2(C2)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy8-j,1)))<0.0001 );
; 1435 :         prvDoLpc4( iSizeBy8 - j, Tmp+8,  pWF, iSizeBy2, S2, C2 );

  00a62	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR _C2$4084[ebp]
  00a68	50		 push	 eax
  00a69	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _S2$4083[ebp]
  00a6f	51		 push	 ecx
  00a70	8b 55 d4	 mov	 edx, DWORD PTR _iSizeBy2$[ebp]
  00a73	52		 push	 edx
  00a74	8b 45 94	 mov	 eax, DWORD PTR _pWF$[ebp]
  00a77	50		 push	 eax
  00a78	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _Tmp$[ebp+32]
  00a7e	51		 push	 ecx
  00a7f	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _iSizeBy8$[ebp]
  00a85	2b 95 40 fe ff
	ff		 sub	 edx, DWORD PTR _j$[ebp]
  00a8b	52		 push	 edx
  00a8c	e8 00 00 00 00	 call	 _prvDoLpc4_XDS@24

; 1436 : 
; 1437 :         S2 = SLC1 + CLS1;

  00a91	d9 45 a4	 fld	 DWORD PTR _SLC1$[ebp]
  00a94	d8 45 f0	 fadd	 DWORD PTR _CLS1$[ebp]
  00a97	d9 9d 30 fe ff
	ff		 fstp	 DWORD PTR _S2$4083[ebp]

; 1438 :         C2 = CLC1 - SLS1;

  00a9d	d9 45 98	 fld	 DWORD PTR _CLC1$[ebp]
  00aa0	d8 a5 dc fe ff
	ff		 fsub	 DWORD PTR _SLS1$[ebp]
  00aa6	d9 9d 38 fe ff
	ff		 fstp	 DWORD PTR _C2$4084[ebp]

; 1439 :         assert( fabs(FLOAT_FROM_BP2(S2)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy8+j,0)))<0.0001 
; 1440 :              && fabs(FLOAT_FROM_BP2(C2)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy8+j,1)))<0.0001 );
; 1441 :         prvDoLpc4( iSizeBy8 + j, Tmp+16, pWF, iSizeBy2, S2, C2 );

  00aac	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR _C2$4084[ebp]
  00ab2	50		 push	 eax
  00ab3	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _S2$4083[ebp]
  00ab9	51		 push	 ecx
  00aba	8b 55 d4	 mov	 edx, DWORD PTR _iSizeBy2$[ebp]
  00abd	52		 push	 edx
  00abe	8b 45 94	 mov	 eax, DWORD PTR _pWF$[ebp]
  00ac1	50		 push	 eax
  00ac2	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _Tmp$[ebp+64]
  00ac8	51		 push	 ecx
  00ac9	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _iSizeBy8$[ebp]
  00acf	03 95 40 fe ff
	ff		 add	 edx, DWORD PTR _j$[ebp]
  00ad5	52		 push	 edx
  00ad6	e8 00 00 00 00	 call	 _prvDoLpc4_XDS@24

; 1442 : 
; 1443 :         S2 = MULT_BP2X(SL4,C1) - MULT_BP2X(CL4,S1);

  00adb	d9 85 64 fe ff
	ff		 fld	 DWORD PTR _SL4$[ebp]
  00ae1	d8 4d b8	 fmul	 DWORD PTR _C1$[ebp]
  00ae4	d9 85 c0 fe ff
	ff		 fld	 DWORD PTR _CL4$[ebp]
  00aea	d8 8d e8 fe ff
	ff		 fmul	 DWORD PTR _S1$[ebp]
  00af0	de e9		 fsubp	 ST(1), ST(0)
  00af2	d9 9d 30 fe ff
	ff		 fstp	 DWORD PTR _S2$4083[ebp]

; 1444 :         C2 = MULT_BP2X(CL4,C1) + MULT_BP2X(SL4,S1);

  00af8	d9 85 c0 fe ff
	ff		 fld	 DWORD PTR _CL4$[ebp]
  00afe	d8 4d b8	 fmul	 DWORD PTR _C1$[ebp]
  00b01	d9 85 64 fe ff
	ff		 fld	 DWORD PTR _SL4$[ebp]
  00b07	d8 8d e8 fe ff
	ff		 fmul	 DWORD PTR _S1$[ebp]
  00b0d	de c1		 faddp	 ST(1), ST(0)
  00b0f	d9 9d 38 fe ff
	ff		 fstp	 DWORD PTR _C2$4084[ebp]

; 1445 :         assert( fabs(FLOAT_FROM_BP2(S2)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy4-j,0)))<0.0001 
; 1446 :              && fabs(FLOAT_FROM_BP2(C2)-FLOAT_FROM_BP2(TRIGTBL(iSizeBy4-j,1)))<0.0001 );
; 1447 :         prvDoLpc4( iSizeBy4 - j, Tmp+24, pWF, iSizeBy2, S2, C2 );

  00b15	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR _C2$4084[ebp]
  00b1b	50		 push	 eax
  00b1c	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _S2$4083[ebp]
  00b22	51		 push	 ecx
  00b23	8b 55 d4	 mov	 edx, DWORD PTR _iSizeBy2$[ebp]
  00b26	52		 push	 edx
  00b27	8b 45 94	 mov	 eax, DWORD PTR _pWF$[ebp]
  00b2a	50		 push	 eax
  00b2b	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _Tmp$[ebp+96]
  00b31	51		 push	 ecx
  00b32	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _iSizeBy4$[ebp]
  00b38	2b 95 40 fe ff
	ff		 sub	 edx, DWORD PTR _j$[ebp]
  00b3e	52		 push	 edx
  00b3f	e8 00 00 00 00	 call	 _prvDoLpc4_XDS@24

; 1448 : 
; 1449 : #       if defined(PLATFORM_LPC_NO_TRIG_TABLE)
; 1450 : 		    // rotate angle by b = pi/iSize
; 1451 : 		    // recursion: cos(a+b) = cos(a-b) + 2*sin(b)*sin(a)
; 1452 : 		    // and:       sin(a+b) = sin(a-b) - 2*sin(b)*cos(a)
; 1453 : 		    CT = C1p - MULT_BP2X(STEP1,S1);

  00b44	d9 45 8c	 fld	 DWORD PTR _STEP1$[ebp]
  00b47	d8 8d e8 fe ff
	ff		 fmul	 DWORD PTR _S1$[ebp]
  00b4d	d8 6d f8	 fsubr	 DWORD PTR _C1p$[ebp]
  00b50	d9 9d 48 fe ff
	ff		 fstp	 DWORD PTR _CT$[ebp]

; 1454 : 		    ST = S1p + MULT_BP2X(STEP1,C1);

  00b56	d9 45 8c	 fld	 DWORD PTR _STEP1$[ebp]
  00b59	d8 4d b8	 fmul	 DWORD PTR _C1$[ebp]
  00b5c	d8 45 a8	 fadd	 DWORD PTR _S1p$[ebp]
  00b5f	d9 9d 4c fe ff
	ff		 fstp	 DWORD PTR _ST$[ebp]

; 1455 : 		    C1p = C1;  C1 = CT;

  00b65	8b 45 b8	 mov	 eax, DWORD PTR _C1$[ebp]
  00b68	89 45 f8	 mov	 DWORD PTR _C1p$[ebp], eax
  00b6b	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR _CT$[ebp]
  00b71	89 4d b8	 mov	 DWORD PTR _C1$[ebp], ecx

; 1456 : 		    S1p = S1;  S1 = ST;

  00b74	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _S1$[ebp]
  00b7a	89 55 a8	 mov	 DWORD PTR _S1p$[ebp], edx
  00b7d	8b 85 4c fe ff
	ff		 mov	 eax, DWORD PTR _ST$[ebp]
  00b83	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _S1$[ebp], eax

; 1457 : #       endif  // defined(PLATFORM_LPC_NO_TRIG_TABLE)
; 1458 : #   endif // defined(PLATFORM_SPECIFIC_LPC_JLOOP_BOTTOM)
; 1459 : #else
; 1460 : 
; 1461 :         pTmp = Tmp;
; 1462 :         for( i = 0, jj = j; i<4; i++, pTmp += 8, jj = -jj ) 
; 1463 :         {
; 1464 :             k = iMapLpcIdxOffset[i] + jj;
; 1465 : 
; 1466 :             prvDoLpc4( k, pTmp, pWF, iSizeBy2, iShrink );    
; 1467 :         }
; 1468 :     
; 1469 : #endif
; 1470 : 
; 1471 :     }

  00b89	e9 ff f9 ff ff	 jmp	 $L4081
$L4082:

; 1472 :     //** this loop uses (512>>iShrink) * (36 adds and 24 mults)
; 1473 :     
; 1474 :     //** total to here: 
; 1475 :     //**   (46 adds and 14 mults) + (N/16) * (52 adds and 14 mults) + (N/4) * (36 adds and 24 mults)
; 1476 :     //** TA = 46 + 3.25N + 9N      = 46 + 12.250N
; 1477 :     //** TM = 14 + (14/16)N + 6*N  = 14 +  6.875N
; 1478 :     //** An FFT takes order N*log(N)
; 1479 :     //** so we may need to substitute an optimized FFT for this on some platforms.
; 1480 :     
; 1481 :     // The inverse quad root has already been computed. Copy to destination, find max etc remain here.
; 1482 :     
; 1483 :     rgwtLpcSpec  = INTEGER_OR_INT_FLOAT( (I32 *)ppcinfo->m_rguiWeightFactor, ppcinfo->m_rgfltWeightFactor ); 

  00b8e	8b 4d 10	 mov	 ecx, DWORD PTR _ppcinfo$[ebp]
  00b91	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  00b94	89 95 60 fe ff
	ff		 mov	 DWORD PTR _rgwtLpcSpec$[ebp], edx

; 1484 :     wtLpcSpecMax = WEIGHT_FROM_FLOAT(0.0F);

  00b9a	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _wtLpcSpecMax$[ebp], 0

; 1485 :     iLoopLimit   = pau->m_cSubband;

  00ba1	8b 45 08	 mov	 eax, DWORD PTR _pau$[ebp]
  00ba4	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00ba7	89 4d 88	 mov	 DWORD PTR _iLoopLimit$[ebp], ecx

; 1486 :     
; 1487 :     for (iFreq = 0, iF = 0; iFreq < iLoopLimit; iFreq++, iF += iStride) 

  00baa	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iFreq$[ebp], 0
  00bb4	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _iF$[ebp], 0
  00bbb	eb 1b		 jmp	 SHORT $L4097
$L4098:
  00bbd	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _iFreq$[ebp]
  00bc3	83 c2 01	 add	 edx, 1
  00bc6	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _iFreq$[ebp], edx
  00bcc	8b 45 a0	 mov	 eax, DWORD PTR _iF$[ebp]
  00bcf	03 85 44 fe ff
	ff		 add	 eax, DWORD PTR _iStride$[ebp]
  00bd5	89 45 a0	 mov	 DWORD PTR _iF$[ebp], eax
$L4097:
  00bd8	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _iFreq$[ebp]
  00bde	3b 4d 88	 cmp	 ecx, DWORD PTR _iLoopLimit$[ebp]
  00be1	7d 24		 jge	 SHORT $L4099

; 1488 :     {
; 1489 :         LPC_COMPARE_DEBUG( pau, iFreq, iFreq, iF, pWF, rgLpcCoef );
; 1490 : 
; 1491 :         wtTemp = pWF[iFreq];

  00be3	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _iFreq$[ebp]
  00be9	8b 45 94	 mov	 eax, DWORD PTR _pWF$[ebp]
  00bec	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00bef	89 4d ec	 mov	 DWORD PTR _wtTemp$[ebp], ecx

; 1492 : 
; 1493 :         if ( wtTemp > wtLpcSpecMax )

  00bf2	d9 45 ec	 fld	 DWORD PTR _wtTemp$[ebp]
  00bf5	d8 5d b4	 fcomp	 DWORD PTR _wtLpcSpecMax$[ebp]
  00bf8	df e0		 fnstsw	 ax
  00bfa	f6 c4 41	 test	 ah, 65			; 00000041H
  00bfd	75 06		 jne	 SHORT $L4100

; 1494 :             wtLpcSpecMax = wtTemp;

  00bff	8b 55 ec	 mov	 edx, DWORD PTR _wtTemp$[ebp]
  00c02	89 55 b4	 mov	 DWORD PTR _wtLpcSpecMax$[ebp], edx
$L4100:

; 1495 :         
; 1496 :         INTEGER_ONLY( assert( wtTemp>= 0 ); );
; 1497 :         MONITOR_RANGE(gMR_rgfltWeightFactor,wtTemp);                                
; 1498 :         MONITOR_RANGE(gMR_fltLPC_F3,pWF[iFreq]);
; 1499 :     }

  00c05	eb b6		 jmp	 SHORT $L4098
$L4099:

; 1500 :     
; 1501 : 	WF_PRINT(pWF);
; 1502 : 
; 1503 :     if (wtLpcSpecMax == WEIGHT_FROM_FLOAT(0.0F))

  00c07	d9 45 b4	 fld	 DWORD PTR _wtLpcSpecMax$[ebp]
  00c0a	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00c10	df e0		 fnstsw	 ax
  00c12	f6 c4 44	 test	 ah, 68			; 00000044H
  00c15	7a 5b		 jp	 SHORT $L4102

; 1504 :     {
; 1505 :         FUNCTION_PROFILE_STOP(&fp);
; 1506 :         return TraceResult(WMA_E_FAIL);

  00c17	a1 00 00 00 00	 mov	 eax, DWORD PTR _WMA_E_FAIL
  00c1c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _WMA_E_ONHOLD
  00c22	74 3a		 je	 SHORT $L4168
  00c24	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WMA_E_FAIL
  00c2a	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _WMA_OK
  00c30	74 2c		 je	 SHORT $L4168
  00c32	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _WMA_E_FAIL
  00c38	52		 push	 edx
  00c39	68 e2 05 00 00	 push	 1506			; 000005e2H
  00c3e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@FFMKPEON@c?3?2xbox?2private?2windows?2directx?2@
  00c43	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@ECGGHIKF@?$CFs?$CI?$CFd?$CJ?5?3?5?$CK?$CK?$CK?5TRACE?5?$CK?$CK?$CK?5code?5?$DN?50x@
  00c48	a1 00 00 00 00	 mov	 eax, DWORD PTR _WMA_E_FAIL
  00c4d	50		 push	 eax
  00c4e	e8 00 00 00 00	 call	 _MyOutputDbgStr
  00c53	83 c4 14	 add	 esp, 20			; 00000014H
  00c56	89 85 2c fe ff
	ff		 mov	 DWORD PTR tv662[ebp], eax
  00c5c	eb 0c		 jmp	 SHORT $L4169
$L4168:
  00c5e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _WMA_E_FAIL
  00c64	89 8d 2c fe ff
	ff		 mov	 DWORD PTR tv662[ebp], ecx
$L4169:
  00c6a	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR tv662[ebp]
  00c70	eb 0e		 jmp	 SHORT $L3981
$L4102:

; 1507 :     }
; 1508 :     
; 1509 : #if defined(INTEGER_ENCODER)
; 1510 :     ppcinfo->m_iMaxWeight = wtLpcSpecMax;
; 1511 : #endif
; 1512 :     ppcinfo->m_wtMaxWeight = wtLpcSpecMax;

  00c72	8b 55 10	 mov	 edx, DWORD PTR _ppcinfo$[ebp]
  00c75	8b 45 b4	 mov	 eax, DWORD PTR _wtLpcSpecMax$[ebp]
  00c78	89 42 6c	 mov	 DWORD PTR [edx+108], eax

; 1513 :     
; 1514 :     FUNCTION_PROFILE_STOP(&fp);
; 1515 :     return WMA_OK;

  00c7b	a1 00 00 00 00	 mov	 eax, DWORD PTR _WMA_OK
$L3981:

; 1516 : }

  00c80	8b e5		 mov	 esp, ebp
  00c82	5d		 pop	 ebp
  00c83	c2 0c 00	 ret	 12			; 0000000cH
_prvLpcToSpectrum_XDS@12 ENDP
WMADEC	ENDS
END
