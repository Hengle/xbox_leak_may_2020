; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\pack12.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxPackVR12@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxUnPackVR12@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxPackVR12@20
EXTRN	_BitPackCBuffer@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\pack12.c
;	COMDAT _VoxPackVR12@20
_TEXT	SEGMENT
_Quan_mblk$ = -32
_CBuffer$ = -28
_i$ = -4
_pvQuan_mblk$ = 8
_PacketBuffer$ = 12
_ByteOffset$ = 16
_BitOffset$ = 20
_BufferSize$ = 24
_VoxPackVR12@20 PROC NEAR				; COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 42   :   QUAN_12 *Quan_mblk = (QUAN_12 *)pvQuan_mblk;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pvQuan_mblk$[ebp]
  00009	89 45 e0	 mov	 DWORD PTR _Quan_mblk$[ebp], eax

; 43   :   int i;
; 44   : 
; 45   :   C_BUFFER_TYPE CBuffer; 
; 46   : 
; 47   :   CBuffer.wBufferSize = BufferSize;

  0000c	66 8b 4d 18	 mov	 cx, WORD PTR _BufferSize$[ebp]
  00010	66 89 4d e8	 mov	 WORD PTR _CBuffer$[ebp+4], cx

; 48   :   CBuffer.pBufferWriteByteOffset = ByteOffset;

  00014	8b 55 10	 mov	 edx, DWORD PTR _ByteOffset$[ebp]
  00017	89 55 f4	 mov	 DWORD PTR _CBuffer$[ebp+16], edx

; 49   :   CBuffer.pBufferWriteBitOffset  = BitOffset;

  0001a	8b 45 14	 mov	 eax, DWORD PTR _BitOffset$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR _CBuffer$[ebp+20], eax

; 50   :   CBuffer.pBuffer = PacketBuffer;                                       

  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _PacketBuffer$[ebp]
  00023	89 4d e4	 mov	 DWORD PTR _CBuffer$[ebp], ecx

; 51   : 
; 52   : 
; 53   :   BitPackCBuffer(&CBuffer, (unsigned char)Quan_mblk->Class, CLASS_BITS_VR12);

  00026	6a 02		 push	 2
  00028	8b 55 e0	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0002b	8a 42 4c	 mov	 al, BYTE PTR [edx+76]
  0002e	50		 push	 eax
  0002f	8d 4d e4	 lea	 ecx, DWORD PTR _CBuffer$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 _BitPackCBuffer@12

; 54   : 
; 55   :   if (Quan_mblk->Class==UV_FRAME)

  00038	8b 55 e0	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0003b	0f bf 42 4c	 movsx	 eax, WORD PTR [edx+76]
  0003f	83 f8 02	 cmp	 eax, 2
  00042	75 44		 jne	 SHORT $L878

; 56   :   {
; 57   :      for (i=0; i<NUMSTAGES_LSPVQ_VR12_UNVOICED; i++)

  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0004b	eb 09		 jmp	 SHORT $L879
$L880:
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00050	83 c1 01	 add	 ecx, 1
  00053	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L879:
  00056	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  0005a	7d 1a		 jge	 SHORT $L881

; 58   :         BitPackCBuffer(&CBuffer, (unsigned char)Quan_mblk->Lsf_INDEX[i], TABLEBITS_LSPVQ_VR12);

  0005c	6a 04		 push	 4
  0005e	8b 55 e0	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00061	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00067	8a 14 48	 mov	 dl, BYTE PTR [eax+ecx*2]
  0006a	52		 push	 edx
  0006b	8d 45 e4	 lea	 eax, DWORD PTR _CBuffer$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _BitPackCBuffer@12
  00074	eb d7		 jmp	 SHORT $L880
$L881:

; 59   : 
; 60   :      BitPackCBuffer(&CBuffer, (unsigned char)Quan_mblk->Energy_INDEX, GAIN_BITS_VR12_UNVOICED);

  00076	6a 05		 push	 5
  00078	8b 4d e0	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0007b	8a 51 22	 mov	 dl, BYTE PTR [ecx+34]
  0007e	52		 push	 edx
  0007f	8d 45 e4	 lea	 eax, DWORD PTR _CBuffer$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _BitPackCBuffer@12
$L878:

; 61   :   }
; 62   :   if (Quan_mblk->Class==MIX_FRAME)

  00088	8b 4d e0	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0008b	0f bf 51 4c	 movsx	 edx, WORD PTR [ecx+76]
  0008f	83 fa 01	 cmp	 edx, 1
  00092	75 68		 jne	 SHORT $L884

; 63   :   {
; 64   :      BitPackCBuffer(&CBuffer, (unsigned char)Quan_mblk->Pv_INDEX, PV_BITS_VR12_MIXED);

  00094	6a 03		 push	 3
  00096	8b 45 e0	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00099	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  0009c	51		 push	 ecx
  0009d	8d 55 e4	 lea	 edx, DWORD PTR _CBuffer$[ebp]
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 _BitPackCBuffer@12

; 65   :      BitPackCBuffer(&CBuffer, (unsigned char)Quan_mblk->Pitch_INDEX, F0_BITS_VR12_MIXED);

  000a6	6a 07		 push	 7
  000a8	8b 45 e0	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  000ab	8a 48 12	 mov	 cl, BYTE PTR [eax+18]
  000ae	51		 push	 ecx
  000af	8d 55 e4	 lea	 edx, DWORD PTR _CBuffer$[ebp]
  000b2	52		 push	 edx
  000b3	e8 00 00 00 00	 call	 _BitPackCBuffer@12

; 66   :      for (i=0; i<NUMSTAGES_LSPVQ_VR12_MIXED; i++)

  000b8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000bf	eb 09		 jmp	 SHORT $L887
$L888:
  000c1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c4	83 c0 01	 add	 eax, 1
  000c7	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L887:
  000ca	83 7d fc 06	 cmp	 DWORD PTR _i$[ebp], 6
  000ce	7d 1a		 jge	 SHORT $L889

; 67   :         BitPackCBuffer(&CBuffer, (unsigned char)Quan_mblk->Lsf_INDEX[i], TABLEBITS_LSPVQ_VR12);

  000d0	6a 04		 push	 4
  000d2	8b 4d e0	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  000d5	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  000d8	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000db	8a 0c 42	 mov	 cl, BYTE PTR [edx+eax*2]
  000de	51		 push	 ecx
  000df	8d 55 e4	 lea	 edx, DWORD PTR _CBuffer$[ebp]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 _BitPackCBuffer@12
  000e8	eb d7		 jmp	 SHORT $L888
$L889:

; 68   : 
; 69   :      BitPackCBuffer(&CBuffer, (unsigned char)Quan_mblk->Energy_INDEX, GAIN_BITS_VR12_MIXED);

  000ea	6a 05		 push	 5
  000ec	8b 45 e0	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  000ef	8a 48 22	 mov	 cl, BYTE PTR [eax+34]
  000f2	51		 push	 ecx
  000f3	8d 55 e4	 lea	 edx, DWORD PTR _CBuffer$[ebp]
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _BitPackCBuffer@12
$L884:

; 70   :   }
; 71   : 
; 72   :   if (Quan_mblk->Class==V_FRAME)

  000fc	8b 45 e0	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  000ff	0f bf 48 4c	 movsx	 ecx, WORD PTR [eax+76]
  00103	85 c9		 test	 ecx, ecx
  00105	75 56		 jne	 SHORT $L892

; 73   :   {
; 74   :      BitPackCBuffer(&CBuffer, (unsigned char)Quan_mblk->Pitch_INDEX, F0_BITS_VR12_VOICED);

  00107	6a 07		 push	 7
  00109	8b 55 e0	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0010c	8a 42 12	 mov	 al, BYTE PTR [edx+18]
  0010f	50		 push	 eax
  00110	8d 4d e4	 lea	 ecx, DWORD PTR _CBuffer$[ebp]
  00113	51		 push	 ecx
  00114	e8 00 00 00 00	 call	 _BitPackCBuffer@12

; 75   :      for (i=0; i<NUMSTAGES_LSPVQ_VR12_VOICED; i++)

  00119	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00120	eb 09		 jmp	 SHORT $L894
$L895:
  00122	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00125	83 c2 01	 add	 edx, 1
  00128	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L894:
  0012b	83 7d fc 06	 cmp	 DWORD PTR _i$[ebp], 6
  0012f	7d 1a		 jge	 SHORT $L896

; 76   :         BitPackCBuffer(&CBuffer, (unsigned char)Quan_mblk->Lsf_INDEX[i], TABLEBITS_LSPVQ_VR12);

  00131	6a 04		 push	 4
  00133	8b 45 e0	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00136	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00139	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0013c	8a 04 51	 mov	 al, BYTE PTR [ecx+edx*2]
  0013f	50		 push	 eax
  00140	8d 4d e4	 lea	 ecx, DWORD PTR _CBuffer$[ebp]
  00143	51		 push	 ecx
  00144	e8 00 00 00 00	 call	 _BitPackCBuffer@12
  00149	eb d7		 jmp	 SHORT $L895
$L896:

; 77   : 
; 78   :      BitPackCBuffer(&CBuffer, (unsigned char)Quan_mblk->Energy_INDEX, GAIN_BITS_VR12_VOICED);

  0014b	6a 05		 push	 5
  0014d	8b 55 e0	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00150	8a 42 22	 mov	 al, BYTE PTR [edx+34]
  00153	50		 push	 eax
  00154	8d 4d e4	 lea	 ecx, DWORD PTR _CBuffer$[ebp]
  00157	51		 push	 ecx
  00158	e8 00 00 00 00	 call	 _BitPackCBuffer@12
$L892:

; 79   :   }
; 80   : 
; 81   : 
; 82   : 
; 83   :   return 0;

  0015d	66 33 c0	 xor	 ax, ax

; 84   : }

  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c2 14 00	 ret	 20			; 00000014H
_VoxPackVR12@20 ENDP
_TEXT	ENDS
PUBLIC	_VoxUnPackVR12@20
EXTRN	_BitUnpackCBuffer@12:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxUnPackVR12@20
_TEXT	SEGMENT
_Quan_mblk$ = -36
_CBuffer$ = -32
_pC$ = -5
_i$ = -4
_pvQuan_mblk$ = 8
_PacketBuffer$ = 12
_ByteOffset$ = 16
_BitOffset$ = 20
_BufferSize$ = 24
_VoxUnPackVR12@20 PROC NEAR				; COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 90   :   QUAN_12 *Quan_mblk = (QUAN_12 *)pvQuan_mblk;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pvQuan_mblk$[ebp]
  00009	89 45 dc	 mov	 DWORD PTR _Quan_mblk$[ebp], eax

; 91   :   unsigned char pC;
; 92   :   int i;
; 93   : 
; 94   :   C_BUFFER_TYPE CBuffer;
; 95   :   
; 96   :   CBuffer.wBufferSize = BufferSize;

  0000c	66 8b 4d 18	 mov	 cx, WORD PTR _BufferSize$[ebp]
  00010	66 89 4d e4	 mov	 WORD PTR _CBuffer$[ebp+4], cx

; 97   :   CBuffer.pBufferReadByteOffset = ByteOffset;

  00014	8b 55 10	 mov	 edx, DWORD PTR _ByteOffset$[ebp]
  00017	89 55 e8	 mov	 DWORD PTR _CBuffer$[ebp+8], edx

; 98   :   CBuffer.pBufferReadBitOffset  = BitOffset;

  0001a	8b 45 14	 mov	 eax, DWORD PTR _BitOffset$[ebp]
  0001d	89 45 ec	 mov	 DWORD PTR _CBuffer$[ebp+12], eax

; 99   :   CBuffer.pBuffer = PacketBuffer;                                       

  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _PacketBuffer$[ebp]
  00023	89 4d e0	 mov	 DWORD PTR _CBuffer$[ebp], ecx

; 100  : 
; 101  : 
; 102  :   BitUnpackCBuffer(&CBuffer, &pC, CLASS_BITS_VR12);

  00026	6a 02		 push	 2
  00028	8d 55 fb	 lea	 edx, DWORD PTR _pC$[ebp]
  0002b	52		 push	 edx
  0002c	8d 45 e0	 lea	 eax, DWORD PTR _CBuffer$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _BitUnpackCBuffer@12

; 103  :   Quan_mblk->Class = (short)pC;

  00035	66 0f b6 4d fb	 movzx	 cx, BYTE PTR _pC$[ebp]
  0003a	8b 55 dc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0003d	66 89 4a 4c	 mov	 WORD PTR [edx+76], cx

; 104  :   if (Quan_mblk->Class==UV_FRAME)

  00041	8b 45 dc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00044	0f bf 48 4c	 movsx	 ecx, WORD PTR [eax+76]
  00048	83 f9 02	 cmp	 ecx, 2
  0004b	75 56		 jne	 SHORT $L916

; 105  :   {
; 106  :      for (i=0; i<NUMSTAGES_LSPVQ_VR12_UNVOICED;i++)

  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00054	eb 09		 jmp	 SHORT $L917
$L918:
  00056	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00059	83 c2 01	 add	 edx, 1
  0005c	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L917:
  0005f	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  00063	7d 23		 jge	 SHORT $L919

; 107  :      {
; 108  :         BitUnpackCBuffer(&CBuffer, &pC, TABLEBITS_LSPVQ_VR12);

  00065	6a 04		 push	 4
  00067	8d 45 fb	 lea	 eax, DWORD PTR _pC$[ebp]
  0006a	50		 push	 eax
  0006b	8d 4d e0	 lea	 ecx, DWORD PTR _CBuffer$[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 _BitUnpackCBuffer@12

; 109  :         Quan_mblk->Lsf_INDEX[i] = (short)pC;

  00074	66 0f b6 55 fb	 movzx	 dx, BYTE PTR _pC$[ebp]
  00079	8b 45 dc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  0007c	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0007f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00082	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 110  :      }

  00086	eb ce		 jmp	 SHORT $L918
$L919:

; 111  :      BitUnpackCBuffer(&CBuffer, &pC, GAIN_BITS_VR12_UNVOICED);

  00088	6a 05		 push	 5
  0008a	8d 4d fb	 lea	 ecx, DWORD PTR _pC$[ebp]
  0008d	51		 push	 ecx
  0008e	8d 55 e0	 lea	 edx, DWORD PTR _CBuffer$[ebp]
  00091	52		 push	 edx
  00092	e8 00 00 00 00	 call	 _BitUnpackCBuffer@12

; 112  :      Quan_mblk->Energy_INDEX = (short)pC;

  00097	66 0f b6 45 fb	 movzx	 ax, BYTE PTR _pC$[ebp]
  0009c	8b 4d dc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  0009f	66 89 41 22	 mov	 WORD PTR [ecx+34], ax
$L916:

; 113  :   }
; 114  :   if (Quan_mblk->Class==MIX_FRAME)

  000a3	8b 55 dc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  000a6	0f bf 42 4c	 movsx	 eax, WORD PTR [edx+76]
  000aa	83 f8 01	 cmp	 eax, 1
  000ad	0f 85 8c 00 00
	00		 jne	 $L922

; 115  :   {
; 116  :      BitUnpackCBuffer(&CBuffer, &pC, PV_BITS_VR12_MIXED);

  000b3	6a 03		 push	 3
  000b5	8d 4d fb	 lea	 ecx, DWORD PTR _pC$[ebp]
  000b8	51		 push	 ecx
  000b9	8d 55 e0	 lea	 edx, DWORD PTR _CBuffer$[ebp]
  000bc	52		 push	 edx
  000bd	e8 00 00 00 00	 call	 _BitUnpackCBuffer@12

; 117  :      Quan_mblk->Pv_INDEX = (short)pC;

  000c2	66 0f b6 45 fb	 movzx	 ax, BYTE PTR _pC$[ebp]
  000c7	8b 4d dc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  000ca	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 118  :      BitUnpackCBuffer(&CBuffer, &pC, F0_BITS_VR12_MIXED);

  000ce	6a 07		 push	 7
  000d0	8d 55 fb	 lea	 edx, DWORD PTR _pC$[ebp]
  000d3	52		 push	 edx
  000d4	8d 45 e0	 lea	 eax, DWORD PTR _CBuffer$[ebp]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _BitUnpackCBuffer@12

; 119  :      Quan_mblk->Pitch_INDEX = (short)pC;

  000dd	66 0f b6 4d fb	 movzx	 cx, BYTE PTR _pC$[ebp]
  000e2	8b 55 dc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  000e5	66 89 4a 12	 mov	 WORD PTR [edx+18], cx

; 120  :      for (i=0; i<NUMSTAGES_LSPVQ_VR12_MIXED;i++)

  000e9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000f0	eb 09		 jmp	 SHORT $L925
$L926:
  000f2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000f5	83 c0 01	 add	 eax, 1
  000f8	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L925:
  000fb	83 7d fc 06	 cmp	 DWORD PTR _i$[ebp], 6
  000ff	7d 23		 jge	 SHORT $L927

; 121  :      {
; 122  :         BitUnpackCBuffer(&CBuffer, &pC, TABLEBITS_LSPVQ_VR12);

  00101	6a 04		 push	 4
  00103	8d 4d fb	 lea	 ecx, DWORD PTR _pC$[ebp]
  00106	51		 push	 ecx
  00107	8d 55 e0	 lea	 edx, DWORD PTR _CBuffer$[ebp]
  0010a	52		 push	 edx
  0010b	e8 00 00 00 00	 call	 _BitUnpackCBuffer@12

; 123  :         Quan_mblk->Lsf_INDEX[i] = (short)pC;

  00110	66 0f b6 45 fb	 movzx	 ax, BYTE PTR _pC$[ebp]
  00115	8b 4d dc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00118	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0011b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0011e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax

; 124  :      }

  00122	eb ce		 jmp	 SHORT $L926
$L927:

; 125  :      BitUnpackCBuffer(&CBuffer, &pC, GAIN_BITS_VR12_MIXED);

  00124	6a 05		 push	 5
  00126	8d 55 fb	 lea	 edx, DWORD PTR _pC$[ebp]
  00129	52		 push	 edx
  0012a	8d 45 e0	 lea	 eax, DWORD PTR _CBuffer$[ebp]
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 _BitUnpackCBuffer@12

; 126  :      Quan_mblk->Energy_INDEX = (short)pC;

  00133	66 0f b6 4d fb	 movzx	 cx, BYTE PTR _pC$[ebp]
  00138	8b 55 dc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  0013b	66 89 4a 22	 mov	 WORD PTR [edx+34], cx
$L922:

; 127  :   }
; 128  : 
; 129  :   if (Quan_mblk->Class==V_FRAME)

  0013f	8b 45 dc	 mov	 eax, DWORD PTR _Quan_mblk$[ebp]
  00142	0f bf 48 4c	 movsx	 ecx, WORD PTR [eax+76]
  00146	85 c9		 test	 ecx, ecx
  00148	75 71		 jne	 SHORT $L930

; 130  :   {
; 131  :      BitUnpackCBuffer(&CBuffer, &pC, F0_BITS_VR12_VOICED);

  0014a	6a 07		 push	 7
  0014c	8d 55 fb	 lea	 edx, DWORD PTR _pC$[ebp]
  0014f	52		 push	 edx
  00150	8d 45 e0	 lea	 eax, DWORD PTR _CBuffer$[ebp]
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _BitUnpackCBuffer@12

; 132  :      Quan_mblk->Pitch_INDEX = (short)pC;

  00159	66 0f b6 4d fb	 movzx	 cx, BYTE PTR _pC$[ebp]
  0015e	8b 55 dc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  00161	66 89 4a 12	 mov	 WORD PTR [edx+18], cx

; 133  :      for (i=0; i<NUMSTAGES_LSPVQ_VR12_VOICED;i++)

  00165	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0016c	eb 09		 jmp	 SHORT $L932
$L933:
  0016e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00171	83 c0 01	 add	 eax, 1
  00174	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L932:
  00177	83 7d fc 06	 cmp	 DWORD PTR _i$[ebp], 6
  0017b	7d 23		 jge	 SHORT $L934

; 134  :      {
; 135  :         BitUnpackCBuffer(&CBuffer, &pC, TABLEBITS_LSPVQ_VR12);

  0017d	6a 04		 push	 4
  0017f	8d 4d fb	 lea	 ecx, DWORD PTR _pC$[ebp]
  00182	51		 push	 ecx
  00183	8d 55 e0	 lea	 edx, DWORD PTR _CBuffer$[ebp]
  00186	52		 push	 edx
  00187	e8 00 00 00 00	 call	 _BitUnpackCBuffer@12

; 136  :         Quan_mblk->Lsf_INDEX[i] = (short)pC;

  0018c	66 0f b6 45 fb	 movzx	 ax, BYTE PTR _pC$[ebp]
  00191	8b 4d dc	 mov	 ecx, DWORD PTR _Quan_mblk$[ebp]
  00194	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00197	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0019a	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax

; 137  :      }

  0019e	eb ce		 jmp	 SHORT $L933
$L934:

; 138  :      BitUnpackCBuffer(&CBuffer, &pC, GAIN_BITS_VR12_VOICED);

  001a0	6a 05		 push	 5
  001a2	8d 55 fb	 lea	 edx, DWORD PTR _pC$[ebp]
  001a5	52		 push	 edx
  001a6	8d 45 e0	 lea	 eax, DWORD PTR _CBuffer$[ebp]
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 _BitUnpackCBuffer@12

; 139  :      Quan_mblk->Energy_INDEX = (short)pC;

  001af	66 0f b6 4d fb	 movzx	 cx, BYTE PTR _pC$[ebp]
  001b4	8b 55 dc	 mov	 edx, DWORD PTR _Quan_mblk$[ebp]
  001b7	66 89 4a 22	 mov	 WORD PTR [edx+34], cx
$L930:

; 140  :   }
; 141  : 
; 142  : 
; 143  :   return 0;

  001bb	66 33 c0	 xor	 ax, ax

; 144  : }

  001be	8b e5		 mov	 esp, ebp
  001c0	5d		 pop	 ebp
  001c1	c2 14 00	 ret	 20			; 00000014H
_VoxUnPackVR12@20 ENDP
_TEXT	ENDS
END
