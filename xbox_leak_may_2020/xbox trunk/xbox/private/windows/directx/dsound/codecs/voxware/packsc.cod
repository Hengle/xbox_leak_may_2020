; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\packsc.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CP@FJOGCGHJ@piQuanIndex?5?$CB?$DN?5NULL?5?$CG?$CG?5pchPacket@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@KOPJPDCJ@psByteOffset?5?$CB?$DN?5NULL?5?$CG?$CG?5pchBitOf@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@EADAJGED@psLongerFrameFlag?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxPackSC3@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxPackSC6@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxUnPackSC3@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxUnPackSC6@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_BitTable_SC3 DW 08H
	DW	06H
	DW	04H
	DW	05H
	DW	05H
	DW	05H
	DW	04H
	DW	05H
	DW	03H
	DW	05H
	DW	02H
	DW	05H
	DW	00H
	DW	05H
	DW	00H
	DW	01H
	DW	01H
	ORG $+2
_BitTable_SC6 DW 03H
	DW	03H
	DW	07H
	DW	07H
	DW	07H
	DW	07H
	DW	07H
	DW	07H
	DW	07H
	DW	07H
	DW	01H
	DW	01H
CONST	ENDS
PUBLIC	_VoxPackSC3@24
PUBLIC	??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CP@FJOGCGHJ@piQuanIndex?5?$CB?$DN?5NULL?5?$CG?$CG?5pchPacket@ ; `string'
PUBLIC	??_C@_0CN@KOPJPDCJ@psByteOffset?5?$CB?$DN?5NULL?5?$CG?$CG?5pchBitOf@ ; `string'
EXTRN	__assert:NEAR
EXTRN	_BitPackCBuffer@12:NEAR
;	COMDAT ??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\packsc.c
CONST	SEGMENT
??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\packsc.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@FJOGCGHJ@piQuanIndex?5?$CB?$DN?5NULL?5?$CG?$CG?5pchPacket@
CONST	SEGMENT
??_C@_0CP@FJOGCGHJ@piQuanIndex?5?$CB?$DN?5NULL?5?$CG?$CG?5pchPacket@ DB 'p'
	DB	'iQuanIndex != NULL && pchPacketBuffer != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KOPJPDCJ@psByteOffset?5?$CB?$DN?5NULL?5?$CG?$CG?5pchBitOf@
CONST	SEGMENT
??_C@_0CN@KOPJPDCJ@psByteOffset?5?$CB?$DN?5NULL?5?$CG?$CG?5pchBitOf@ DB 'p'
	DB	'sByteOffset != NULL && pchBitOffset != NULL', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxPackSC3@24
_TEXT	SEGMENT
_CBuffer$ = -28
_i$ = -4
_piQuanIndex$ = 8
_pchPacketBuffer$ = 12
_psByteOffset$ = 16
_pchBitOffset$ = 20
_sBufferSize$ = 24
_sLongerFrameFlag$ = 28
_VoxPackSC3@24 PROC NEAR				; COMDAT

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 107  :   C_BUFFER_TYPE  CBuffer; 
; 108  :   int i;
; 109  : 
; 110  :   /*-------------------------------------------------------------------
; 111  :     Error checking 
; 112  :   --------------------------------------------------------------------*/
; 113  :   assert(piQuanIndex != NULL && pchPacketBuffer != NULL);

  00006	83 7d 08 00	 cmp	 DWORD PTR _piQuanIndex$[ebp], 0
  0000a	74 06		 je	 SHORT $L963
  0000c	83 7d 0c 00	 cmp	 DWORD PTR _pchPacketBuffer$[ebp], 0
  00010	75 14		 jne	 SHORT $L964
$L963:
  00012	6a 71		 push	 113			; 00000071H
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@FJOGCGHJ@piQuanIndex?5?$CB?$DN?5NULL?5?$CG?$CG?5pchPacket@
  0001e	e8 00 00 00 00	 call	 __assert
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
$L964:

; 114  :   assert(psByteOffset != NULL && pchBitOffset != NULL);

  00026	83 7d 10 00	 cmp	 DWORD PTR _psByteOffset$[ebp], 0
  0002a	74 06		 je	 SHORT $L965
  0002c	83 7d 14 00	 cmp	 DWORD PTR _pchBitOffset$[ebp], 0
  00030	75 14		 jne	 SHORT $L966
$L965:
  00032	6a 72		 push	 114			; 00000072H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@KOPJPDCJ@psByteOffset?5?$CB?$DN?5NULL?5?$CG?$CG?5pchBitOf@
  0003e	e8 00 00 00 00	 call	 __assert
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
$L966:

; 115  : 
; 116  : 
; 117  :   CBuffer.wBufferSize = sBufferSize;

  00046	66 8b 55 18	 mov	 dx, WORD PTR _sBufferSize$[ebp]
  0004a	66 89 55 e8	 mov	 WORD PTR _CBuffer$[ebp+4], dx

; 118  :   CBuffer.pBufferWriteByteOffset = psByteOffset;

  0004e	8b 45 10	 mov	 eax, DWORD PTR _psByteOffset$[ebp]
  00051	89 45 f4	 mov	 DWORD PTR _CBuffer$[ebp+16], eax

; 119  :   CBuffer.pBufferWriteBitOffset  = pchBitOffset;

  00054	8b 4d 14	 mov	 ecx, DWORD PTR _pchBitOffset$[ebp]
  00057	89 4d f8	 mov	 DWORD PTR _CBuffer$[ebp+20], ecx

; 120  :   CBuffer.pBuffer = pchPacketBuffer;                                       

  0005a	8b 55 0c	 mov	 edx, DWORD PTR _pchPacketBuffer$[ebp]
  0005d	89 55 e4	 mov	 DWORD PTR _CBuffer$[ebp], edx

; 121  : 
; 122  :   /*---------------------------------------------------
; 123  :     Set for reserved bit
; 124  :     --------------------------------------------------*/
; 125  :    piQuanIndex[INDEX_RESERVE_BIT_SC3] = 0;

  00060	8b 45 08	 mov	 eax, DWORD PTR _piQuanIndex$[ebp]
  00063	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0

; 126  : 
; 127  :   /*---------------------------------------------------
; 128  :     Set for longer frame flag
; 129  :     --------------------------------------------------*/
; 130  :    piQuanIndex[INDEX_FLAG_BIT_SC3] = sLongerFrameFlag;

  0006a	0f b7 4d 1c	 movzx	 ecx, WORD PTR _sLongerFrameFlag$[ebp]
  0006e	8b 55 08	 mov	 edx, DWORD PTR _piQuanIndex$[ebp]
  00071	89 4a 40	 mov	 DWORD PTR [edx+64], ecx

; 131  : 
; 132  :   /*--------------------------------------------------------------------
; 133  :     Pack All
; 134  :   --------------------------------------------------------------------*/
; 135  :   for (i = 0; i < TOTAL_SC3_QUAN_INDICES; i++) 

  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0007b	eb 09		 jmp	 SHORT $L861
$L862:
  0007d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00080	83 c0 01	 add	 eax, 1
  00083	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L861:
  00086	83 7d fc 11	 cmp	 DWORD PTR _i$[ebp], 17	; 00000011H
  0008a	7d 21		 jge	 SHORT $L849

; 136  :     BitPackCBuffer(&CBuffer, (unsigned char)piQuanIndex[i], BitTable_SC3[i]);

  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0008f	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _BitTable_SC3[ecx*2]
  00097	52		 push	 edx
  00098	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _piQuanIndex$[ebp]
  0009e	8a 14 81	 mov	 dl, BYTE PTR [ecx+eax*4]
  000a1	52		 push	 edx
  000a2	8d 45 e4	 lea	 eax, DWORD PTR _CBuffer$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 _BitPackCBuffer@12
  000ab	eb d0		 jmp	 SHORT $L862
$L849:

; 137  : }

  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 18 00	 ret	 24			; 00000018H
_VoxPackSC3@24 ENDP
_TEXT	ENDS
PUBLIC	_VoxPackSC6@24
; Function compile flags: /Odt
;	COMDAT _VoxPackSC6@24
_TEXT	SEGMENT
_CBuffer$ = -28
_i$ = -4
_piQuanIndex$ = 8
_pchPacketBuffer$ = 12
_psByteOffset$ = 16
_pchBitOffset$ = 20
_sBufferSize$ = 24
_sLongerFrameFlag$ = 28
_VoxPackSC6@24 PROC NEAR				; COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 178  :   C_BUFFER_TYPE  CBuffer; 
; 179  :   int i;
; 180  : 
; 181  :   /*-------------------------------------------------------------------
; 182  :     Error checking 
; 183  :   --------------------------------------------------------------------*/
; 184  :   assert(piQuanIndex != NULL && pchPacketBuffer != NULL);

  00006	83 7d 08 00	 cmp	 DWORD PTR _piQuanIndex$[ebp], 0
  0000a	74 06		 je	 SHORT $L970
  0000c	83 7d 0c 00	 cmp	 DWORD PTR _pchPacketBuffer$[ebp], 0
  00010	75 17		 jne	 SHORT $L971
$L970:
  00012	68 b8 00 00 00	 push	 184			; 000000b8H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@FJOGCGHJ@piQuanIndex?5?$CB?$DN?5NULL?5?$CG?$CG?5pchPacket@
  00021	e8 00 00 00 00	 call	 __assert
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
$L971:

; 185  :   assert(psByteOffset != NULL && pchBitOffset != NULL);

  00029	83 7d 10 00	 cmp	 DWORD PTR _psByteOffset$[ebp], 0
  0002d	74 06		 je	 SHORT $L972
  0002f	83 7d 14 00	 cmp	 DWORD PTR _pchBitOffset$[ebp], 0
  00033	75 17		 jne	 SHORT $L973
$L972:
  00035	68 b9 00 00 00	 push	 185			; 000000b9H
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@KOPJPDCJ@psByteOffset?5?$CB?$DN?5NULL?5?$CG?$CG?5pchBitOf@
  00044	e8 00 00 00 00	 call	 __assert
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
$L973:

; 186  : 
; 187  :   CBuffer.wBufferSize = sBufferSize;

  0004c	66 8b 55 18	 mov	 dx, WORD PTR _sBufferSize$[ebp]
  00050	66 89 55 e8	 mov	 WORD PTR _CBuffer$[ebp+4], dx

; 188  :   CBuffer.pBufferWriteByteOffset = psByteOffset;

  00054	8b 45 10	 mov	 eax, DWORD PTR _psByteOffset$[ebp]
  00057	89 45 f4	 mov	 DWORD PTR _CBuffer$[ebp+16], eax

; 189  :   CBuffer.pBufferWriteBitOffset  = pchBitOffset;

  0005a	8b 4d 14	 mov	 ecx, DWORD PTR _pchBitOffset$[ebp]
  0005d	89 4d f8	 mov	 DWORD PTR _CBuffer$[ebp+20], ecx

; 190  :   CBuffer.pBuffer = pchPacketBuffer;                                       

  00060	8b 55 0c	 mov	 edx, DWORD PTR _pchPacketBuffer$[ebp]
  00063	89 55 e4	 mov	 DWORD PTR _CBuffer$[ebp], edx

; 191  : 
; 192  : 
; 193  :   /*---------------------------------------------------
; 194  :     Set for reserved bit
; 195  :     --------------------------------------------------*/
; 196  :    piQuanIndex[INDEX_RESERVE_BIT_SC6] = 0;

  00066	8b 45 08	 mov	 eax, DWORD PTR _piQuanIndex$[ebp]
  00069	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 197  : 
; 198  :   /*---------------------------------------------------
; 199  :     Set for longer frame flag
; 200  :     --------------------------------------------------*/
; 201  :    piQuanIndex[INDEX_FLAG_BIT_SC6] = sLongerFrameFlag;

  00070	0f b7 4d 1c	 movzx	 ecx, WORD PTR _sLongerFrameFlag$[ebp]
  00074	8b 55 08	 mov	 edx, DWORD PTR _piQuanIndex$[ebp]
  00077	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 202  : 
; 203  :   /*--------------------------------------------------------------------
; 204  :     Pack Phase VQ indices 
; 205  :   --------------------------------------------------------------------*/
; 206  :   for (i = 0; i < EXTRA_SC6_QUAN_INDICES; i++)

  0007a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00081	eb 09		 jmp	 SHORT $L886
$L887:
  00083	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00086	83 c0 01	 add	 eax, 1
  00089	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L886:
  0008c	83 7d fc 0c	 cmp	 DWORD PTR _i$[ebp], 12	; 0000000cH
  00090	7d 21		 jge	 SHORT $L877

; 207  :     BitPackCBuffer(&CBuffer, (unsigned char)piQuanIndex[i], BitTable_SC6[i]);

  00092	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00095	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _BitTable_SC6[ecx*2]
  0009d	52		 push	 edx
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _piQuanIndex$[ebp]
  000a4	8a 14 81	 mov	 dl, BYTE PTR [ecx+eax*4]
  000a7	52		 push	 edx
  000a8	8d 45 e4	 lea	 eax, DWORD PTR _CBuffer$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _BitPackCBuffer@12
  000b1	eb d0		 jmp	 SHORT $L887
$L877:

; 208  : 
; 209  : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 18 00	 ret	 24			; 00000018H
_VoxPackSC6@24 ENDP
_TEXT	ENDS
PUBLIC	_VoxUnPackSC3@24
PUBLIC	??_C@_0BK@EADAJGED@psLongerFrameFlag?5?$CB?$DN?5NULL?$AA@ ; `string'
EXTRN	_BitUnpackCBuffer@12:NEAR
;	COMDAT ??_C@_0BK@EADAJGED@psLongerFrameFlag?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BK@EADAJGED@psLongerFrameFlag?5?$CB?$DN?5NULL?$AA@ DB 'psLongerFra'
	DB	'meFlag != NULL', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxUnPackSC3@24
_TEXT	SEGMENT
_CBuffer$ = -32
_pC$ = -5
_i$ = -4
_piQuanIndex$ = 8
_pchPacketBuffer$ = 12
_psByteOffset$ = 16
_pchBitOffset$ = 20
_sBufferSize$ = 24
_psLongerFrameFlag$ = 28
_VoxUnPackSC3@24 PROC NEAR				; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 251  :   unsigned char pC;
; 252  :   int i;
; 253  : 
; 254  :   C_BUFFER_TYPE CBuffer;
; 255  : 
; 256  :   /*-------------------------------------------------------------------
; 257  :     Error checking 
; 258  :   --------------------------------------------------------------------*/
; 259  :   assert(piQuanIndex != NULL && pchPacketBuffer != NULL);

  00006	83 7d 08 00	 cmp	 DWORD PTR _piQuanIndex$[ebp], 0
  0000a	74 06		 je	 SHORT $L977
  0000c	83 7d 0c 00	 cmp	 DWORD PTR _pchPacketBuffer$[ebp], 0
  00010	75 17		 jne	 SHORT $L978
$L977:
  00012	68 03 01 00 00	 push	 259			; 00000103H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@FJOGCGHJ@piQuanIndex?5?$CB?$DN?5NULL?5?$CG?$CG?5pchPacket@
  00021	e8 00 00 00 00	 call	 __assert
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
$L978:

; 260  :   assert(psByteOffset != NULL && pchBitOffset != NULL);

  00029	83 7d 10 00	 cmp	 DWORD PTR _psByteOffset$[ebp], 0
  0002d	74 06		 je	 SHORT $L979
  0002f	83 7d 14 00	 cmp	 DWORD PTR _pchBitOffset$[ebp], 0
  00033	75 17		 jne	 SHORT $L980
$L979:
  00035	68 04 01 00 00	 push	 260			; 00000104H
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@KOPJPDCJ@psByteOffset?5?$CB?$DN?5NULL?5?$CG?$CG?5pchBitOf@
  00044	e8 00 00 00 00	 call	 __assert
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
$L980:

; 261  :   assert(psLongerFrameFlag != NULL);

  0004c	83 7d 1c 00	 cmp	 DWORD PTR _psLongerFrameFlag$[ebp], 0
  00050	75 17		 jne	 SHORT $L981
  00052	68 05 01 00 00	 push	 261			; 00000105H
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@EADAJGED@psLongerFrameFlag?5?$CB?$DN?5NULL?$AA@
  00061	e8 00 00 00 00	 call	 __assert
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
$L981:

; 262  :   
; 263  :   CBuffer.wBufferSize = sBufferSize;

  00069	66 8b 45 18	 mov	 ax, WORD PTR _sBufferSize$[ebp]
  0006d	66 89 45 e4	 mov	 WORD PTR _CBuffer$[ebp+4], ax

; 264  :   CBuffer.pBufferReadByteOffset = psByteOffset;

  00071	8b 4d 10	 mov	 ecx, DWORD PTR _psByteOffset$[ebp]
  00074	89 4d e8	 mov	 DWORD PTR _CBuffer$[ebp+8], ecx

; 265  :   CBuffer.pBufferReadBitOffset  = pchBitOffset;

  00077	8b 55 14	 mov	 edx, DWORD PTR _pchBitOffset$[ebp]
  0007a	89 55 ec	 mov	 DWORD PTR _CBuffer$[ebp+12], edx

; 266  :   CBuffer.pBuffer = pchPacketBuffer;                                       

  0007d	8b 45 0c	 mov	 eax, DWORD PTR _pchPacketBuffer$[ebp]
  00080	89 45 e0	 mov	 DWORD PTR _CBuffer$[ebp], eax

; 267  : 
; 268  :   /*--------------------------------------------------------------------
; 269  :     unpack all
; 270  :   --------------------------------------------------------------------*/
; 271  :   for (i = 0; i < TOTAL_SC3_QUAN_INDICES; i++) {

  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0008a	eb 09		 jmp	 SHORT $L915
$L916:
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0008f	83 c1 01	 add	 ecx, 1
  00092	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L915:
  00095	83 7d fc 11	 cmp	 DWORD PTR _i$[ebp], 17	; 00000011H
  00099	7d 28		 jge	 SHORT $L917

; 272  :     BitUnpackCBuffer(&CBuffer, &pC, BitTable_SC3[i]);

  0009b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0009e	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _BitTable_SC3[edx*2]
  000a6	50		 push	 eax
  000a7	8d 4d fb	 lea	 ecx, DWORD PTR _pC$[ebp]
  000aa	51		 push	 ecx
  000ab	8d 55 e0	 lea	 edx, DWORD PTR _CBuffer$[ebp]
  000ae	52		 push	 edx
  000af	e8 00 00 00 00	 call	 _BitUnpackCBuffer@12

; 273  :     piQuanIndex[i] = (int)pC;

  000b4	0f b6 45 fb	 movzx	 eax, BYTE PTR _pC$[ebp]
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000bb	8b 55 08	 mov	 edx, DWORD PTR _piQuanIndex$[ebp]
  000be	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 274  :   }

  000c1	eb c9		 jmp	 SHORT $L916
$L917:

; 275  : 
; 276  : 
; 277  :   /*---------------------------------------------------
; 278  :     Set for longer frame flag
; 279  :     --------------------------------------------------*/
; 280  :    *psLongerFrameFlag = (unsigned short)piQuanIndex[INDEX_FLAG_BIT_SC3];

  000c3	8b 45 1c	 mov	 eax, DWORD PTR _psLongerFrameFlag$[ebp]
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _piQuanIndex$[ebp]
  000c9	66 8b 51 40	 mov	 dx, WORD PTR [ecx+64]
  000cd	66 89 10	 mov	 WORD PTR [eax], dx

; 281  : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 18 00	 ret	 24			; 00000018H
_VoxUnPackSC3@24 ENDP
_TEXT	ENDS
PUBLIC	_VoxUnPackSC6@24
; Function compile flags: /Odt
;	COMDAT _VoxUnPackSC6@24
_TEXT	SEGMENT
_CBuffer$ = -32
_pC$ = -5
_i$ = -4
_piQuanIndex$ = 8
_pchPacketBuffer$ = 12
_psByteOffset$ = 16
_pchBitOffset$ = 20
_sBufferSize$ = 24
_psLongerFrameFlag$ = 28
_VoxUnPackSC6@24 PROC NEAR				; COMDAT

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 322  :   unsigned char pC;
; 323  :   int i;
; 324  :   C_BUFFER_TYPE CBuffer;
; 325  : 
; 326  :   /*-------------------------------------------------------------------
; 327  :     Error checking 
; 328  :   --------------------------------------------------------------------*/
; 329  :   assert(piQuanIndex != NULL && pchPacketBuffer != NULL);

  00006	83 7d 08 00	 cmp	 DWORD PTR _piQuanIndex$[ebp], 0
  0000a	74 06		 je	 SHORT $L985
  0000c	83 7d 0c 00	 cmp	 DWORD PTR _pchPacketBuffer$[ebp], 0
  00010	75 17		 jne	 SHORT $L986
$L985:
  00012	68 49 01 00 00	 push	 329			; 00000149H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@FJOGCGHJ@piQuanIndex?5?$CB?$DN?5NULL?5?$CG?$CG?5pchPacket@
  00021	e8 00 00 00 00	 call	 __assert
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
$L986:

; 330  :   assert(psByteOffset != NULL && pchBitOffset != NULL);

  00029	83 7d 10 00	 cmp	 DWORD PTR _psByteOffset$[ebp], 0
  0002d	74 06		 je	 SHORT $L987
  0002f	83 7d 14 00	 cmp	 DWORD PTR _pchBitOffset$[ebp], 0
  00033	75 17		 jne	 SHORT $L988
$L987:
  00035	68 4a 01 00 00	 push	 330			; 0000014aH
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@KOPJPDCJ@psByteOffset?5?$CB?$DN?5NULL?5?$CG?$CG?5pchBitOf@
  00044	e8 00 00 00 00	 call	 __assert
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
$L988:

; 331  :   assert(psLongerFrameFlag != NULL);

  0004c	83 7d 1c 00	 cmp	 DWORD PTR _psLongerFrameFlag$[ebp], 0
  00050	75 17		 jne	 SHORT $L989
  00052	68 4b 01 00 00	 push	 331			; 0000014bH
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@KPCCFDOM@c?3?2xbox?2private?2windows?2directx?2@
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@EADAJGED@psLongerFrameFlag?5?$CB?$DN?5NULL?$AA@
  00061	e8 00 00 00 00	 call	 __assert
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
$L989:

; 332  : 
; 333  :   CBuffer.wBufferSize = sBufferSize;

  00069	66 8b 45 18	 mov	 ax, WORD PTR _sBufferSize$[ebp]
  0006d	66 89 45 e4	 mov	 WORD PTR _CBuffer$[ebp+4], ax

; 334  :   CBuffer.pBufferReadByteOffset = psByteOffset;

  00071	8b 4d 10	 mov	 ecx, DWORD PTR _psByteOffset$[ebp]
  00074	89 4d e8	 mov	 DWORD PTR _CBuffer$[ebp+8], ecx

; 335  :   CBuffer.pBufferReadBitOffset  = pchBitOffset;

  00077	8b 55 14	 mov	 edx, DWORD PTR _pchBitOffset$[ebp]
  0007a	89 55 ec	 mov	 DWORD PTR _CBuffer$[ebp+12], edx

; 336  :   CBuffer.pBuffer = pchPacketBuffer;                                       

  0007d	8b 45 0c	 mov	 eax, DWORD PTR _pchPacketBuffer$[ebp]
  00080	89 45 e0	 mov	 DWORD PTR _CBuffer$[ebp], eax

; 337  : 
; 338  :   /*--------------------------------------------------------------------
; 339  :     Unpack all
; 340  :   --------------------------------------------------------------------*/
; 341  :   for (i = 0; i < EXTRA_SC6_QUAN_INDICES; i++)

  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0008a	eb 09		 jmp	 SHORT $L944
$L945:
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0008f	83 c1 01	 add	 ecx, 1
  00092	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L944:
  00095	83 7d fc 0c	 cmp	 DWORD PTR _i$[ebp], 12	; 0000000cH
  00099	7d 28		 jge	 SHORT $L946

; 342  :     {
; 343  :       BitUnpackCBuffer(&CBuffer, &pC, BitTable_SC6[i]);

  0009b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0009e	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _BitTable_SC6[edx*2]
  000a6	50		 push	 eax
  000a7	8d 4d fb	 lea	 ecx, DWORD PTR _pC$[ebp]
  000aa	51		 push	 ecx
  000ab	8d 55 e0	 lea	 edx, DWORD PTR _CBuffer$[ebp]
  000ae	52		 push	 edx
  000af	e8 00 00 00 00	 call	 _BitUnpackCBuffer@12

; 344  :       piQuanIndex[i] = (int)pC;

  000b4	0f b6 45 fb	 movzx	 eax, BYTE PTR _pC$[ebp]
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000bb	8b 55 08	 mov	 edx, DWORD PTR _piQuanIndex$[ebp]
  000be	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 345  :     }

  000c1	eb c9		 jmp	 SHORT $L945
$L946:

; 346  : 
; 347  :   *psLongerFrameFlag = (unsigned short)piQuanIndex[INDEX_FLAG_BIT_SC6];

  000c3	8b 45 1c	 mov	 eax, DWORD PTR _psLongerFrameFlag$[ebp]
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _piQuanIndex$[ebp]
  000c9	66 8b 51 2c	 mov	 dx, WORD PTR [ecx+44]
  000cd	66 89 10	 mov	 WORD PTR [eax], dx

; 348  : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 18 00	 ret	 24			; 00000018H
_VoxUnPackSC6@24 ENDP
_TEXT	ENDS
END
