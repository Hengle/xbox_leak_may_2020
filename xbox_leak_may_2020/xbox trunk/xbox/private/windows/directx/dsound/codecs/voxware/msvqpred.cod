; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\msvqpred.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@HKCJCIIE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@ONKADCJD@iOrder?5?$DN?$DN?5?$CISUB_VECTORS?$CKSUB_DIMEN@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CI@CGPINECO@?$CIpfCoef?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpiIndices?5?$CB@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CI@IAADCDFP@?$CIpiIndices?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfCoef?5?$CB@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@OALFJAOM@pfZMCoef?5?$CB?$DN?5NULL?5?$CG?$CG?5pfPredCoef?5?$CB@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxMSVQEncPred@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxMSVQDecPred@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CompPredCoef@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
CONST	SEGMENT
_tab_ASK12_V_Means DD 03f83e0dfr		; 1.0303
	DD	0bf444674r			; -0.7667
	DD	03e6dab9fr			; 0.2321
	DD	0beb0ff97r			; -0.3457
	DD	03dd59b3dr			; 0.1043
	DD	0bdc154car			; -0.0944
	DD	03e11d14er			; 0.1424
	DD	0bdebb98cr			; -0.1151
	DD	03d6147aer			; 0.055
	DD	0bdda8588r			; -0.1067
	DD	03d7765fer			; 0.0604
	DD	0bdd04817r			; -0.1017
_tab_ASK12_UV_Means DD 03f4e2824r		; 0.8053
	DD	0be9e83e4r			; -0.3096
	DD	03de1e4f7r			; 0.1103
	DD	0be53f7cfr			; -0.207
	DD	03bd4fdf4r			; 0.0065
	DD	0bdee6320r			; -0.1164
	DD	03d734d6ar			; 0.0594
	DD	0bdbc01a3r			; -0.0918
	DD	03ca8c155r			; 0.0206
	DD	0bdc7e282r			; -0.0976
	DD	03d34a234r			; 0.0441
	DD	0bdab9f56r			; -0.0838
_tab_ASK12_V_Predictors DD 0bf068a98r		; -0.525552
	DD	0bef6272dr			; -0.480768
	DD	03e38f3c8r			; 0.180617
	DD	0bec23dc7r			; -0.379378
	DD	03e677e6br			; 0.226068
	DD	0be7cad21r			; -0.246754
	DD	0bec872a7r			; -0.3915
	DD	0be96782dr			; -0.293886
	DD	03eb4543er			; 0.352205
	DD	0bcf810b3r			; -0.0302814
	DD	03bc406c0r			; 0.00598225
	DD	0be9f70afr			; -0.311407
	DD	03e199c7er			; 0.150011
	DD	0bca58805r			; -0.0202065
	DD	0bd0880f0r			; -0.0333261
	DD	0be07b5b9r			; -0.132529
	DD	0be9579a5r			; -0.291944
	DD	0bbd659d4r			; -0.00654147
	DD	03e4255aer			; 0.18978
	DD	0bc4b5de2r			; -0.0124125
	DD	03cc6de8cr			; 0.024276
	DD	0bd3e2a6br			; -0.0464272
	DD	0be3571e6r			; -0.177192
	DD	0be87a68br			; -0.264942
	DD	03d75a7f0r			; 0.0599746
	DD	03a5b85a2r			; 0.00083741
	DD	0bd163dbfr			; -0.03668
	DD	03d077d72r			; 0.0330786
	DD	0bd363a44r			; -0.0444892
	DD	0bd391890r			; -0.0451894
	DD	0be93c201r			; -0.28859
	DD	0be7d9608r			; -0.247643
	DD	03d932be0r			; 0.071861
	DD	0bcdf5affr			; -0.0272651
	DD	03d38d60ar			; 0.045126
	DD	0bcd30119r			; -0.0257574
	DD	03dc4d870r			; 0.0961159
	DD	03cff8c62r			; 0.0311949
	DD	03e34b672r			; 0.176477
	DD	0bdbfd71fr			; -0.093672
	DD	03c48b048r			; 0.0122491
	DD	03cf93c01r			; 0.0304241
	DD	0bce81d45r			; -0.0283343
	DD	03bf2594er			; 0.0073959
	DD	0bd54e1e4r			; -0.0519732
	DD	03d9fb29dr			; 0.0779774
	DD	0bde21ab9r			; -0.110403
	DD	03d677176r			; 0.0565047
	DD	0bdcb09b5r			; -0.0991396
	DD	0be8358far			; -0.256538
	DD	03d7aa68ar			; 0.061194
	DD	0bd1a1ae6r			; -0.0376233
	DD	03d7248e8r			; 0.0591516
	DD	03c581daer			; 0.0131907
	DD	03d88788dr			; 0.0666362
	DD	03d762091r			; 0.0600897
	DD	03daeb3ddr			; 0.085304
	DD	0bdadfe9ar			; -0.0849583
	DD	03d9ea9ccr			; 0.0774723
	DD	03d34b948r			; 0.044122
CONST	ENDS
_DATA	SEGMENT
_ptab_ASK12_V_Pred DD 00H
	DD	FLAT:_tab_ASK12_V_Predictors
	DD	FLAT:_tab_ASK12_V_Predictors+16
	DD	FLAT:_tab_ASK12_V_Predictors+48
	DD	FLAT:_tab_ASK12_V_Predictors+96
	DD	FLAT:_tab_ASK12_V_Predictors+160
_DATA	ENDS
CONST	SEGMENT
_tab_ASK12_UV_Predictors DD 0be034c4cr		; -0.128221
	DD	0bd85c225r			; -0.0653117
	DD	0bdb0c96ar			; -0.0863217
	DD	0bd241f3cr			; -0.0400688
	DD	0bd0567a6r			; -0.0325695
	DD	0bdd1bf82r			; -0.102416
	DD	0bdf84709r			; -0.121229
	DD	03d178fc9r			; 0.0370024
	DD	03d1bd79ar			; 0.0380474
	DD	0bcee6893r			; -0.0291026
	DD	0bd17a92ar			; -0.0370266
	DD	0bd8f59c8r			; -0.0699955
	DD	03c1bbdabr			; 0.00950567
	DD	0bd214126r			; -0.0393688
	DD	03d529bccr			; 0.0514181
	DD	0bda9edf1r			; -0.0829734
	DD	0bde4b0der			; -0.111665
	DD	03e1c9d6br			; 0.152944
	DD	03cd20e2ar			; 0.0256415
	DD	0bc4b820ar			; -0.0124211
	DD	03d1640f2r			; 0.036683
	DD	03d44c506r			; 0.0480395
	DD	0bd4f6388r			; -0.050632
	DD	0bd73d9efr			; -0.059534
	DD	0bc231ac2r			; -0.00995511
	DD	03a4a18e8r			; 0.00077094
	DD	0bcc3c6efr			; -0.0238986
	DD	0bb55926er			; -0.00325885
	DD	0bc77cc8br			; -0.0151245
	DD	03b085422r			; 0.00208021
	DD	0bdfe4577r			; -0.124156
	DD	0bbffc36fr			; -0.00780528
	DD	03d19c5c4r			; 0.0375421
	DD	03cbef0bcr			; 0.0233082
	DD	0bc284e93r			; -0.0102726
	DD	03cb6cf1fr			; 0.0223156
	DD	03d210a61r			; 0.0393165
	DD	03d11383fr			; 0.035454
	DD	03d70ef2er			; 0.0588218
	DD	0bc9fb4dcr			; -0.0194954
	DD	03b8a3cc5r			; 0.00421867
	DD	03c3ca23dr			; 0.0115133
	DD	03bc1238cr			; 0.00589413
	DD	0bc32673br			; -0.0108889
	DD	0bd1825b9r			; -0.0371454
	DD	03cc2879ar			; 0.0237463
	DD	0bd761bc0r			; -0.0600851
	DD	03d7f4550r			; 0.062322
	DD	0bc93d15er			; -0.0180442
	DD	0bcc76738r			; -0.0243412
	DD	03cc38fb2r			; 0.0238722
	DD	03d18ea6fr			; 0.0373329
	DD	03bf546d4r			; 0.00748525
	DD	03d56ea98r			; 0.0524698
	DD	03c66199ar			; 0.0140442
	DD	03d689d6br			; 0.0567908
	DD	03b9548fdr			; 0.00455582
	DD	0bd18a6ebr			; -0.0372686
	DD	03d508370r			; 0.0509066
	DD	03dced3a7r			; 0.10099
CONST	ENDS
_DATA	SEGMENT
_ptab_ASK12_UV_Pred DD 00H
	DD	FLAT:_tab_ASK12_UV_Predictors
	DD	FLAT:_tab_ASK12_UV_Predictors+16
	DD	FLAT:_tab_ASK12_UV_Predictors+48
	DD	FLAT:_tab_ASK12_UV_Predictors+96
	DD	FLAT:_tab_ASK12_UV_Predictors+160
_DATA	ENDS
CONST	SEGMENT
_tab_ASK0_1_V_CB DD 03e95306ar			; 0.291385
	DD	0be5baa58r			; -0.214517
	DD	03e87b17dr			; 0.265026
	DD	03e0d14a1r			; 0.137774
	DD	0bd8fd6d8r			; -0.070234
	DD	0be8402f3r			; -0.257835
	DD	03bf98740r			; 0.007615
	DD	03ec4d4ccr			; 0.384436
	DD	03da6748er			; 0.081277
	DD	03e54a340r			; 0.207654
	DD	03e12339cr			; 0.142775
	DD	03f52b496r			; 0.823068
	DD	0beda8262r			; -0.426776
	DD	03ea4894cr			; 0.32136
	DD	0bed8db27r			; -0.423547
	DD	03f898e43r			; 1.07465
	DD	03ea83105r			; 0.328499
	DD	0bf025c1cr			; -0.509218
	DD	03e04651fr			; 0.129292
	DD	0be3c63aer			; -0.183974
	DD	0bdb523b3r			; -0.088447
	DD	0bed44dcbr			; -0.414656
	DD	0be5c62a2r			; -0.21522
	DD	0bdf1a75dr			; -0.117995
	DD	03e027c39r			; 0.127427
	DD	0bec2e31dr			; -0.380639
	DD	0be363a19r			; -0.177956
	DD	03e772d5er			; 0.241384
	DD	0bed9b2c4r			; -0.425192
	DD	0be2e89ecr			; -0.170448
	DD	0bf44763ar			; -0.767429
	DD	03ef1ce4ar			; 0.472277
	DD	03e8febf2r			; 0.281097
	DD	0bd4dfacar			; -0.050288
	DD	03e707747r			; 0.23483
	DD	03eb45133r			; 0.352182
	DD	0bdc01c50r			; -0.093804
	DD	03d80a17br			; 0.062808
	DD	0be0e9c02r			; -0.139267
	DD	03f473248r			; 0.778111
	DD	03e1951c6r			; 0.149726
	DD	03f12f028r			; 0.573977
	DD	0bccc0160r			; -0.024903
	DD	03f91329cr			; 1.13436
	DD	0befd8601r			; -0.495163
	DD	03f23bebar			; 0.639629
	DD	0bf655758r			; -0.895864
	DD	03f707b24r			; 0.939379
	DD	03e9d69d3r			; 0.307448
	DD	0beb946a2r			; -0.361867
	DD	03de98138r			; 0.114016
	DD	03c76d331r			; 0.015065
	DD	0be846888r			; -0.25861
	DD	0bea74278r			; -0.326679
	DD	0bea01084r			; -0.312626
	DD	03d8b8d82r			; 0.068141
	DD	0bd0895d1r			; -0.033346
	DD	0bdcd25eer			; -0.10017
	DD	0be3d05f3r			; -0.184593
	DD	03effaa69r			; 0.499347
	DD	0bf21781cr			; -0.630739
	DD	03da5d639r			; 0.080975
	DD	0bfa3810fr			; -1.27738
	DD	03f0a35b5r			; 0.539882
	DD	0418458cdr			; 16.5434
	DD	03f853997r			; 1.04082
	DD	0415c2d8cr			; 13.7611
	DD	03ff46aecr			; 1.90951
	DD	0416675f7r			; 14.4038
	DD	0c065d75er			; -3.59127
	DD	040cf7380r			; 6.48285
	DD	04129ee05r			; 10.6206
	DD	04146374cr			; 12.3885
	DD	040ad3266r			; 5.4124
	DD	041117afar			; 9.09252
	DD	03ff10532r			; 1.88297
	DD	0c0e94fb1r			; -7.29098
	DD	040c1b2e1r			; 6.05309
	DD	0bfbea401r			; -1.48938
	DD	040abdb62r			; 5.37053
	DD	03fa215c2r			; 1.26629
	DD	0c1766f4ar			; -15.4022
	DD	040d0dc98r			; 6.52693
	DD	041508b24r			; 13.034
	DD	0c00e6d0dr			; -2.22541
	DD	0c15e4c79r			; -13.8937
	DD	0c0726152r			; -3.78719
	DD	0415bfd2cr			; 13.7493
	DD	000000000r			; 0
	DD	0c14cf0aer			; -12.8088
	DD	0c11c58e2r			; -9.7717
	DD	040ed5914r			; 7.41712
	DD	0c0f0859dr			; -7.51631
	DD	0c0dadbabr			; -6.83931
	DD	0c088ca3cr			; -4.27469
	DD	0c0b0593cr			; -5.51089
	DD	04175b06ar			; 15.3556
	DD	03fb49aedr			; 1.41098
	DD	04132d29er			; 11.1764
	DD	0408ab8b9r			; 4.33505
	DD	0c14ec116r			; -12.9221
	DD	0c098f61fr			; -4.78004
	DD	0c0433b60r			; -3.0505
	DD	040fa5f39r			; 7.82412
	DD	0411ec335r			; 9.92266
	DD	03ec32b59r			; 0.38119
	DD	0403503efr			; 2.82837
	DD	040b4bd5ar			; 5.64811
	DD	0c07c3c21r			; -3.94117
	DD	040d61adar			; 6.69078
	DD	0c0287c70r			; -2.6326
	DD	0408866b0r			; 4.26254
	DD	041843a8dr			; 16.5286
	DD	03fe5d588r			; 1.79558
	DD	0c107d1cfr			; -8.48872
	DD	04141f86cr			; 12.1231
	DD	0c0f3528fr			; -7.60383
	DD	0c128b001r			; -10.543
	DD	0c11fe6cdr			; -9.99385
	DD	040c27180r			; 6.07635
	DD	0c1776517r			; -15.4622
	DD	0407fec39r			; 3.99879
	DD	0c0a65793r			; -5.19819
	DD	0410dc2f9r			; 8.8601
	DD	0c0d62bb4r			; -6.69283
	DD	0c0246cc6r			; -2.56914
	DD	0c056258dr			; -3.34604
	DD	0bfb409bbr			; -1.40655
	DD	03f976be3r			; 1.18298
	DD	03f877354r			; 1.05821
	DD	03fb7ed96r			; 1.43694
	DD	03f095a7dr			; 0.536537
	DD	03e9da986r			; 0.307934
	DD	03f2ba909r			; 0.670548
	DD	03fa9ff1er			; 1.3281
	DD	0bf06d7f9r			; -0.526733
	DD	0bee6c1a0r			; -0.450696
	DD	03f950521r			; 1.16422
	DD	03e50e51dr			; 0.203999
	DD	0be70bcber			; -0.235095
	DD	0bf230707r			; -0.636826
	DD	03f250ba6r			; 0.644709
	DD	03d5bc665r			; 0.053656
	DD	0bf887653r			; -1.06611
	DD	03f5ca772r			; 0.86193
	DD	03f21360dr			; 0.629731
	DD	03fba990fr			; 1.4578
	DD	0bcef416cr			; -0.029206
	DD	03effc201r			; 0.499527
	DD	03e357f30r			; 0.177243
	DD	03f78ff76r			; 0.972648
	DD	0bf5b2160r			; -0.855978
	DD	0be4c386dr			; -0.199434
	DD	03f34e1d6r			; 0.706571
	DD	0be2faeffr			; -0.171566
	DD	0bf303361r			; -0.688284
	DD	0bf65171er			; -0.894884
	DD	0bd086488r			; -0.033299
	DD	0bdc936c6r			; -0.098249
	DD	0bfcf63c3r			; -1.62023
	DD	03f1e3a9fr			; 0.618082
	DD	03f9302e6r			; 1.14853
	DD	03f7f41e1r			; 0.997099
	DD	03e06d506r			; 0.131672
	DD	03b007358r			; 0.00196
	DD	03e759253r			; 0.239816
	DD	03ec81eacr			; 0.390859
	DD	0bf296de3r			; -0.661833
	DD	0bf755d2dr			; -0.958453
	DD	03f80639dr			; 1.00304
	DD	0be9eec5br			; -0.310397
	DD	0be750e34r			; -0.239312
	DD	0bfb07629r			; -1.37861
	DD	03d962a5er			; 0.073323
	DD	0bf0559f7r			; -0.520904
	DD	0bf8a1d65r			; -1.07902
	DD	03d6b4c7fr			; 0.057446
	DD	03f91689dr			; 1.13601
	DD	03f4afd65r			; 0.792929
	DD	0be9efd87r			; -0.310528
	DD	0bef77e1cr			; -0.483384
	DD	03e4358b0r			; 0.190768
	DD	03f0fa6cer			; 0.561139
	DD	0bf8fc4ebr			; -1.1232
	DD	0bf8a556dr			; -1.08073
	DD	03ef2643dr			; 0.473421
	DD	0bf30b945r			; -0.690327
	DD	0bf076417r			; -0.528871
	DD	0bf9a33b5r			; -1.2047
	DD	0bed35632r			; -0.412767
	DD	0bf7ec0e8r			; -0.995131
	DD	0bf6eb50br			; -0.93245
	DD	03f81b58dr			; 1.01335
	DD	03fb8618dr			; 1.44048
	DD	0bed69553r			; -0.419108
	DD	03f0be1car			; 0.546414
	DD	03fe06c01r			; 1.7533
	DD	0beab6178r			; -0.334728
	DD	03ec810e9r			; 0.390754
	DD	0be025bb8r			; -0.127303
	DD	0401ba5fcr			; 2.43201
	DD	03fa983b6r			; 1.32433
	DD	03e020cd0r			; 0.127002
	DD	03f3f51cer			; 0.747342
	DD	04023e52er			; 2.56086
	DD	03d263e8er			; 0.040587
	DD	03f8fbd30r			; 1.12296
	DD	0bf2ea61ar			; -0.682222
	DD	03e2fb0d5r			; 0.171573
	DD	03fa12407r			; 1.25891
	DD	0bf55477cr			; -0.833122
	DD	03f656ba9r			; 0.896174
	DD	03f8164d0r			; 1.01089
	DD	0bb72e05dr			; -0.003706
	DD	0bf1e96a2r			; -0.619486
	DD	0beb7079er			; -0.35748
	DD	03f1fc1f0r			; 0.624053
	DD	03f859885r			; 1.04372
	DD	0bead21bcr			; -0.338148
	DD	03f845858r			; 1.03395
	DD	03fcbe63fr			; 1.59296
	DD	03ebbfbdfr			; 0.367156
	DD	0bea7cbb4r			; -0.327726
	DD	0bf4f6dcar			; -0.810269
	DD	03f1d8f2er			; 0.615466
	DD	03ee4901dr			; 0.446412
	DD	0bf84fb44r			; -1.03892
	DD	0bed84428r			; -0.422395
	DD	03fbdabd2r			; 1.48181
	DD	0bf9ae5cdr			; -1.21014
	DD	03e0580c3r			; 0.130374
	DD	0bfa3db23r			; -1.28013
	DD	03f90dabar			; 1.13168
	DD	03f4612f9r			; 0.773727
	DD	0bde3c5bdr			; -0.111217
	DD	0be919d88r			; -0.284405
	DD	040324abar			; 2.78581
	DD	0bf945dc0r			; -1.15911
	DD	03f317a78r			; 0.693275
	DD	0bf9e7fe5r			; -1.23828
	DD	0bf041adfr			; -0.516035
	DD	03db444e1r			; 0.088022
	DD	0bf89161ar			; -1.07099
	DD	03ca74e23r			; 0.020423
	DD	03dc52c5ar			; 0.096276
	DD	0bf325f52r			; -0.696767
	DD	0bf5756b8r			; -0.841167
	DD	0bf61c5b5r			; -0.881923
	DD	03d5d27c4r			; 0.053993
	DD	03e6f8445r			; 0.233903
	DD	0bf6e176er			; -0.930045
	DD	03ee6b570r			; 0.450603
	DD	03f16e5efr			; 0.589446
	DD	0bf2bc2car			; -0.670941
	DD	0bed4d078r			; -0.415653
	DD	0bf9f5d3er			; -1.24503
_tab_ASK0_1_V_OutCellIndex DD 05H
	DD	07H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	0fH
	DD	015H
	DD	017H
	DD	01aH
	DD	01eH
	DD	01fH
_ASK0_1_V_mblk DD 020H
	DD	FLAT:_tab_ASK0_1_V_CB
	DD	FLAT:_tab_ASK0_1_V_CB+256
	DD	020H
	DD	FLAT:_tab_ASK0_1_V_CB+512
	DD	FLAT:_tab_ASK0_1_V_CB+768
	DD	0bH
	DD	FLAT:_tab_ASK0_1_V_OutCellIndex
	ORG $+4
_tab_ASK0_1_UV_CB DD 03f08dc12r			; 0.534608
	DD	0bcda4ce8r			; -0.026648
	DD	0bf3b483dr			; -0.731571
	DD	0bddab192r			; -0.106784
	DD	03f0df506r			; 0.55452
	DD	0bf5f8c97r			; -0.873239
	DD	0be0e31d7r			; -0.138862
	DD	0bf1e0be5r			; -0.617369
	DD	0bdeaac11r			; -0.114586
	DD	0be786e3br			; -0.242608
	DD	0bfd2c78fr			; -1.64672
	DD	0bf0e36a0r			; -0.555521
	DD	03e395aafr			; 0.18101
	DD	0bf3dd56fr			; -0.741538
	DD	0bf8a578er			; -1.0808
	DD	0bec57ffar			; -0.385742
	DD	03e8d31dbr			; 0.275771
	DD	03f20e315r			; 0.628465
	DD	0bf82dacbr			; -1.0223
	DD	03ef2b863r			; 0.474063
	DD	03e89ca5cr			; 0.269122
	DD	03e1ad752r			; 0.151212
	DD	0bf254be0r			; -0.645689
	DD	03e68cb8er			; 0.227339
	DD	0bf0ec3dbr			; -0.557676
	DD	03f164767r			; 0.587027
	DD	0bfcb4ccbr			; -1.58828
	DD	03f0c9918r			; 0.549211
	DD	0bec78f8ar			; -0.389767
	DD	0bd03c07fr			; -0.032166
	DD	0bfe43d36r			; -1.78312
	DD	03cb35f3dr			; 0.021896
	DD	03f085fd0r			; 0.532712
	DD	03e258213r			; 0.161629
	DD	0bd878facr			; -0.066192
	DD	03dce0fc3r			; 0.100616
	DD	03efa567ar			; 0.488941
	DD	0be9c794fr			; -0.305613
	DD	03e45f06fr			; 0.1933
	DD	0bedf3ader			; -0.435996
	DD	03e65b6c3r			; 0.22433
	DD	0be04c0dfr			; -0.129642
	DD	0bf7baa26r			; -0.983065
	DD	03d89b6b3r			; 0.067243
	DD	03f004999r			; 0.501123
	DD	0bf177176r			; -0.591575
	DD	0bf0e52acr			; -0.555949
	DD	0bef96db1r			; -0.487165
	DD	03dc068dcr			; 0.09395
	DD	03f81f2c3r			; 1.01522
	DD	0bef05404r			; -0.469391
	DD	03f853216r			; 1.04059
	DD	03ee43e75r			; 0.445789
	DD	03eafdda9r			; 0.343488
	DD	0be93b59er			; -0.288495
	DD	03eac9eaar			; 0.337148
	DD	0bde56712r			; -0.112013
	DD	03f215b14r			; 0.630296
	DD	0bf8bd999r			; -1.09258
	DD	03f6e9814r			; 0.932008
	DD	03dc7ed85r			; 0.097621
	DD	03eaf3062r			; 0.342166
	DD	0bfae038ar			; -1.35948
	DD	03d17353br			; 0.036916
	DD	0413f9e99r			; 11.9762
	DD	000000000r			; 0
	DD	0c0af2451r			; -5.47318
	DD	0c0af2451r			; -5.47318
	DD	000000000r			; 0
	DD	0c11912e6r			; -9.56711
	DD	0c0162e1br			; -2.34656
	DD	0c0c39dc5r			; -6.11301
	DD	0c0979bbfr			; -4.73776
	DD	0c0c20cc5r			; -6.06406
	DD	0c0044be4r			; -2.06713
	DD	0c081d2bdr			; -4.05697
	DD	0c031d6d4r			; -2.77874
	DD	0c0e7a4bar			; -7.23886
	DD	03eeca237r			; 0.462175
	DD	0c0a90bc4r			; -5.28269
	DD	040d59935r			; 6.67495
	DD	0403e3348r			; 2.97188
	DD	0c0b79e5ar			; -5.73808
	DD	0bf8181f1r			; -1.01178
	DD	04108f777r			; 8.56042
	DD	0409e27cer			; 4.94236
	DD	040f208a9r			; 7.56356
	DD	04001b49er			; 2.02665
	DD	040c91c19r			; 6.28468
	DD	03fd78c7er			; 1.68397
	DD	0c06ad834r			; -3.66945
	DD	04030f7d3r			; 2.76513
	DD	0c08a1206r			; -4.3147
	DD	0c0ccb2a2r			; -6.39681
	DD	0c09a1585r			; -4.81513
	DD	000000000r			; 0
	DD	04165876ar			; 14.3456
	DD	040116a51r			; 2.27211
	DD	0c0c11959r			; -6.03434
	DD	040c11959r			; 6.03434
	DD	0411621d8r			; 9.38326
	DD	0befbc771r			; -0.491756
	DD	0410822efr			; 8.50853
	DD	0be1814d0r			; -0.148517
	DD	0410a3d24r			; 8.63993
	DD	0bf1aaa66r			; -0.604163
	DD	0c03d793er			; -2.96053
	DD	0c0d4c847r			; -6.64945
	DD	04115b9e6r			; 9.35789
	DD	03ea75050r			; 0.326785
	DD	0bf9047c3r			; -1.12719
	DD	0c0a9b248r			; -5.30301
	DD	04041b695r			; 3.02677
	DD	0408a535br			; 4.32268
	DD	0be7c1f7fr			; -0.246214
	DD	040965658r			; 4.69804
	DD	0410fe56cr			; 8.99351
	DD	040a62831r			; 5.19241
	DD	0bf0b310br			; -0.543717
	DD	040f8d109r			; 7.77552
	DD	0be8453b1r			; -0.258451
	DD	040ecd58dr			; 7.40107
	DD	0bfab911dr			; -1.34037
	DD	0408401cfr			; 4.12522
	DD	040cb5f1er			; 6.35536
	DD	040cb5f1er			; 6.35536
	DD	000000000r			; 0
	DD	040b6eda8r			; 5.71651
	DD	0bebce54fr			; -0.368937
	DD	03f3a7eb7r			; 0.728496
	DD	03f7d335dr			; 0.989065
	DD	03ef9f98br			; 0.488232
	DD	0bfa80d02r			; -1.3129
	DD	03f46da01r			; 0.776764
	DD	03d809353r			; 0.062781
	DD	03f622e3cr			; 0.883518
	DD	0beda365dr			; -0.426196
	DD	0be83269er			; -0.256154
	DD	03f324389r			; 0.696343
	DD	0bf26e819r			; -0.651979
	DD	0bfa4fe69r			; -1.28901
	DD	0beba0fd4r			; -0.363402
	DD	0be7cd185r			; -0.246893
	DD	0bf3b72d6r			; -0.732221
	DD	0be8f92f3r			; -0.280418
	DD	03fa15f1cr			; 1.26072
	DD	03f74dc77r			; 0.956489
	DD	03f91758er			; 1.1364
	DD	0bf503dabr			; -0.813441
	DD	03f897ef6r			; 1.07419
	DD	03eb1bed3r			; 0.347159
	DD	03fa0e85cr			; 1.25709
	DD	03da6aec0r			; 0.081388
	DD	03ecee9ffr			; 0.404129
	DD	03fb1522ar			; 1.38532
	DD	03d91c64cr			; 0.071179
	DD	0bf62976cr			; -0.885123
	DD	0bca26e54r			; -0.019828
	DD	03ece66aar			; 0.403127
	DD	0be8646aer			; -0.262258
	DD	0beceb13er			; -0.403696
	DD	03e719115r			; 0.235905
	DD	03f65e050r			; 0.897954
	DD	0be115a4br			; -0.141946
	DD	0bfb59336r			; -1.41856
	DD	03e3db878r			; 0.185274
	DD	03c41c1d7r			; 0.011826
	DD	0be0d8cf4r			; -0.138233
	DD	0bf14485ar			; -0.579229
	DD	0bf9161e5r			; -1.1358
	DD	03f78e94fr			; 0.97231
	DD	0bf8ce126r			; -1.10062
	DD	0bf94c871r			; -1.16237
	DD	0bf7a4e9cr			; -0.977762
	DD	0bd1523b3r			; -0.036411
	DD	0bf9c7d67r			; -1.22258
	DD	03f0a2bf1r			; 0.539733
	DD	03f411f1dr			; 0.754381
	DD	03fc70bd0r			; 1.55505
	DD	03f3a16c6r			; 0.72691
	DD	0bf5c8f54r			; -0.861562
	DD	03f01e668r			; 0.507422
	DD	03f0afd76r			; 0.54293
	DD	03e5fac60r			; 0.218431
	DD	03e438d1er			; 0.190968
	DD	0bf357625r			; -0.708834
	DD	03f9fa9b9r			; 1.24737
	DD	0bf11f98br			; -0.570214
	DD	0bf47faa0r			; -0.781168
	DD	0bf1d12bar			; -0.613567
	DD	03ef492bcr			; 0.477682
	DD	0bf95f20ar			; -1.17145
	DD	03f725e03r			; 0.946747
	DD	0bf4be5dar			; -0.796476
	DD	0400398bbr			; 2.0562
	DD	03e6ec13cr			; 0.233159
	DD	0bf06642cr			; -0.524966
	DD	0beb9f42cr			; -0.363191
	DD	03f5b6199r			; 0.856958
	DD	03f480ad0r			; 0.781415
	DD	0be7ee782r			; -0.24893
	DD	03dad77b8r			; 0.084701
	DD	03f9d5bf7r			; 1.22937
	DD	03f9929c3r			; 1.19659
	DD	0bf6c36b9r			; -0.92271
	DD	03f3e3dd5r			; 0.743131
	DD	0bcf13cefr			; -0.029448
	DD	03f985cd5r			; 1.19033
	DD	03d108d4cr			; 0.035291
	DD	0bea6a099r			; -0.325444
	DD	03fe8522fr			; 1.81501
	DD	03f93c3a4r			; 1.15441
	DD	0bf38a4c2r			; -0.721264
	DD	03d45fd05r			; 0.048337
	DD	03eb9a0aer			; 0.362554
	DD	03f3c49aar			; 0.735499
	DD	0bf148616r			; -0.580171
	DD	03eee54f8r			; 0.465492
	DD	03f0e512br			; 0.555926
	DD	03facdde8r			; 1.35052
	DD	0bf8e9668r			; -1.11397
	DD	03e989b95r			; 0.298062
	DD	0bf0526b7r			; -0.520122
	DD	03f863748r			; 1.04856
	DD	03fada3ecr			; 1.35656
	DD	0bf9d6f4cr			; -1.22996
	DD	0400d9c52r			; 2.21267
	DD	0bf66e01ar			; -0.901857
	DD	0bd441030r			; -0.047867
	DD	0bf97be01r			; -1.18549
	DD	03f8b2064r			; 1.08693
	DD	0be354e6er			; -0.177057
	DD	03ec133a0r			; 0.377347
	DD	0bf57fb9cr			; -0.843683
	DD	03fad0481r			; 1.3517
	DD	03ec2491br			; 0.379464
	DD	0bf4e162fr			; -0.805026
	DD	0bf34c88ar			; -0.706185
	DD	03e59fc6er			; 0.212877
	DD	03e80e454r			; 0.251742
	DD	03f19a661r			; 0.600195
	DD	0bfa7700dr			; -1.30811
	DD	03fc5739fr			; 1.54259
	DD	0bf0fa051r			; -0.56104
	DD	0bf0dd15fr			; -0.553976
	DD	0bf8e3fb3r			; -1.11132
	DD	03f03b928r			; 0.514544
	DD	0beae3fffr			; -0.340332
	DD	0be6eacc9r			; -0.233081
	DD	0bf4224bcr			; -0.758373
	DD	03f3a70a0r			; 0.728281
	DD	03e5d438dr			; 0.216078
	DD	0bf8754d2r			; -1.05728
	DD	0be7ccab4r			; -0.246867
	DD	0be3a8eb4r			; -0.182185
	DD	03f32ddcer			; 0.698697
_tab_ASK0_1_UV_OutCellIndex DD 03H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0dH
	DD	0fH
	DD	017H
	DD	018H
	DD	019H
	DD	01dH
_ASK0_1_UV_mblk DD 020H
	DD	FLAT:_tab_ASK0_1_UV_CB
	DD	FLAT:_tab_ASK0_1_UV_CB+256
	DD	020H
	DD	FLAT:_tab_ASK0_1_UV_CB+512
	DD	FLAT:_tab_ASK0_1_UV_CB+768
	DD	0bH
	DD	FLAT:_tab_ASK0_1_UV_OutCellIndex
	ORG $+4
_tab_ASK2_3_CB DD 0be5de3fcr			; -0.21669
	DD	0bebdfdcer			; -0.371077
	DD	0bf2c6445r			; -0.673405
	DD	0bd4dca8er			; -0.050242
	DD	03e78c79fr			; 0.242949
	DD	0befeab9br			; -0.497403
	DD	0beebec25r			; -0.460786
	DD	0be8f735cr			; -0.280177
	DD	0bd0c21e2r			; -0.034212
	DD	0be6333b9r			; -0.221877
	DD	0bef673e7r			; -0.481353
	DD	03e14549br			; 0.144854
	DD	03ed6eb70r			; 0.419765
	DD	0bea22f6ar			; -0.316768
	DD	0bd6ee419r			; -0.058323
	DD	0bcf30e80r			; -0.02967
	DD	03c1d16fdr			; 0.009588
	DD	0bed83622r			; -0.422288
	DD	0becf7836r			; -0.405214
	DD	0bd5f8f47r			; -0.05458
	DD	03ef47171r			; 0.477428
	DD	0bf13b1afr			; -0.57693
	DD	03e003ab8r			; 0.125224
	DD	0bdb4aa11r			; -0.088215
	DD	03e9da33cr			; 0.307886
	DD	0be197bb7r			; -0.149886
	DD	0be8bd3a2r			; -0.273099
	DD	03e82cdc0r			; 0.255476
	DD	03f247ce9r			; 0.642531
	DD	0beb6db73r			; -0.357143
	DD	03e961f5cr			; 0.293208
	DD	03e7712e4r			; 0.241283
	DD	0be6bb16cr			; -0.230169
	DD	0be24ea4br			; -0.16105
	DD	0bf389d39r			; -0.721149
	DD	03eaa8998r			; 0.333081
	DD	03e2de764r			; 0.169828
	DD	0be9384dcr			; -0.288123
	DD	0be6a6480r			; -0.228899
	DD	03d68e4fcr			; 0.056859
	DD	0bd6e8e1dr			; -0.058241
	DD	03e46fe72r			; 0.19433
	DD	0bf168e1dr			; -0.588106
	DD	03f1c10b6r			; 0.60963
	DD	03ea6ee52r			; 0.326037
	DD	03d1d590cr			; 0.038415
	DD	0bdcd0dd0r			; -0.100124
	DD	03ee163bbr			; 0.440214
	DD	03de41e58r			; 0.111386
	DD	03dddf97br			; 0.108386
	DD	0becbda73r			; -0.398151
	DD	03ee21d11r			; 0.441628
	DD	03f0fbb30r			; 0.56145
	DD	0bd9b3850r			; -0.075791
	DD	03ddf1f15r			; 0.108946
	DD	03eb22a2cr			; 0.347978
	DD	03eb9a6f8r			; 0.362602
	DD	03eecad9br			; 0.462262
	DD	0be5d184cr			; -0.215913
	DD	03f3963edr			; 0.724181
	DD	03f06bf34r			; 0.526355
	DD	03e47aeder			; 0.195003
	DD	03df7e564r			; 0.121043
	DD	03f31b728r			; 0.694201
	DD	0c0b04110r			; -5.50794
	DD	0c116ea6dr			; -9.43223
	DD	0c1032691r			; -8.19692
	DD	0bf1c8f61r			; -0.611563
	DD	0409884eer			; 4.76623
	DD	0c11c216dr			; -9.75816
	DD	0c1014e22r			; -8.08158
	DD	0c09d3ef0r			; -4.91393
	DD	0c0084834r			; -2.12941
	DD	0c15cf599r			; -13.81
	DD	0c125d788r			; -10.3651
	DD	04047a0b6r			; 3.11918
	DD	04119589br			; 9.58413
	DD	0c0e77091r			; -7.23249
	DD	0c145f271r			; -12.3717
	DD	0c0c96617r			; -6.29371
	DD	03e89b824r			; 0.268983
	DD	0c13d8cfcr			; -11.8469
	DD	0c145ef9er			; -12.371
	DD	0bfd54962r			; -1.6663
	DD	040bb82a5r			; 5.8597
	DD	0c0e296ffr			; -7.08093
	DD	04136b7d4r			; 11.4199
	DD	0c100b795r			; -8.04482
	DD	04144c32dr			; 12.2977
	DD	0c0bf93adr			; -5.98678
	DD	0c1119244r			; -9.09821
	DD	041082d7br			; 8.5111
	DD	040fc9b91r			; 7.89399
	DD	0c08c68adr			; -4.38778
	DD	0411a1674r			; 9.63048
	DD	040fd998dr			; 7.92499
	DD	0c12b892dr			; -10.721
	DD	0c0f00c5dr			; -7.50151
	DD	0c0e204eer			; -7.0631
	DD	04050c915r			; 3.26227
	DD	040d8a166r			; 6.7697
	DD	0c137c357r			; -11.4852
	DD	0c14ef3f5r			; -12.9346
	DD	0404da15ar			; 3.21297
	DD	0c0730521r			; -3.79719
	DD	0414ab7e9r			; 12.6699
	DD	0c0ac6d1ar			; -5.38832
	DD	040b2bc9dr			; 5.58552
	DD	041473943r			; 12.4515
	DD	03fbbc960r			; 1.46708
	DD	0c013ed31r			; -2.31135
	DD	0412298bdr			; 10.1623
	DD	041197190r			; 9.59023
	DD	041154f94r			; 9.33193
	DD	0c0d3dfe3r			; -6.62108
	DD	040eb02bcr			; 7.34408
	DD	041180188r			; 9.50037
	DD	0bfa427far			; -1.28247
	DD	0405b7037r			; 3.42872
	DD	0412f394er			; 10.9515
	DD	040ad66e8r			; 5.41881
	DD	040dd0f9br			; 6.90815
	DD	0c00a3148r			; -2.15926
	DD	040e7c06er			; 7.24224
	DD	04107d561r			; 8.48959
	DD	040494b1br			; 3.14521
	DD	03fa55433r			; 1.29163
	DD	040ed0c09r			; 7.40772
	DD	03fa2778ar			; 1.26927
	DD	03e9f7f06r			; 0.311516
	DD	03df69db6r			; 0.120418
	DD	03f97afe2r			; 1.18506
	DD	03fa1bc2cr			; 1.26356
	DD	0bef26395r			; -0.473416
	DD	0bf1765cbr			; -0.591397
	DD	0be054c98r			; -0.130175
	DD	03f550daer			; 0.83224
	DD	03f7b0271r			; 0.980506
	DD	0bf16c5a0r			; -0.588953
	DD	03f823e08r			; 1.01752
	DD	03f1e8c48r			; 0.619328
	DD	0be8bb928r			; -0.272897
	DD	0bf944135r			; -1.15824
	DD	0be67a701r			; -0.226223
	DD	03eec6aa1r			; 0.461751
	DD	03ee45cffr			; 0.446022
	DD	0be86cf42r			; -0.2633
	DD	03eff43e9r			; 0.498565
	DD	03f24c6e7r			; 0.64366
	DD	0bf833fd1r			; -1.02539
	DD	0bdc70197r			; -0.097171
	DD	0bf24bdecr			; -0.643523
	DD	03c470868r			; 0.012148
	DD	0bd33c0c2r			; -0.043885
	DD	0bf83521ar			; -1.02594
	DD	03ee549d8r			; 0.447829
	DD	0bdd01c0dr			; -0.101616
	DD	0bf9e2164r			; -1.23539
	DD	0bf45d430r			; -0.772769
	DD	0bf5791a3r			; -0.842066
	DD	0bd2e3e6cr			; -0.04254
	DD	03f88eaear			; 1.06967
	DD	0be8a03a3r			; -0.269559
	DD	03ea265aer			; 0.317182
	DD	03f9f49f9r			; 1.24444
	DD	03e5f01b8r			; 0.21778
	DD	03fe12125r			; 1.75882
	DD	0bf30bab6r			; -0.690349
	DD	0bf713016r			; -0.94214
	DD	03e6a9479r			; 0.229082
	DD	0bf5224bcr			; -0.820873
	DD	0bea77c24r			; -0.327119
	DD	0bd9ee675r			; -0.077588
	DD	0be9b9abfr			; -0.303915
	DD	03db41bfcr			; 0.087944
	DD	0bf8f3398r			; -1.11876
	DD	03f30f52cr			; 0.691241
	DD	03f98302br			; 1.18897
	DD	03ed8b86br			; 0.423282
	DD	03ec88aadr			; 0.391683
	DD	03fdcac19r			; 1.724
	DD	03f8fde27r			; 1.12397
	DD	040389b3dr			; 2.88447
	DD	0bc1c94f7r			; -0.009557
	DD	0bf2b5eear			; -0.669417
	DD	03f525269r			; 0.82157
	DD	0bf0add6ar			; -0.542441
	DD	0bf5851car			; -0.844998
	DD	03f2294bcr			; 0.635082
	DD	0bee228bbr			; -0.441717
	DD	03f6aada3r			; 0.916712
	DD	0bf9b862br			; -1.21503
_tab_ASK2_3_OutCellIndex DD 00H
	DD	01H
	DD	02H
	DD	03H
	DD	08H
	DD	0aH
	DD	0eH
	DD	011H
	DD	015H
	DD	01aH
	DD	01cH
	DD	01dH
	DD	01eH
	DD	01fH
_ASK2_3_mblk DD	020H
	DD	FLAT:_tab_ASK2_3_CB
	DD	FLAT:_tab_ASK2_3_CB+256
	DD	010H
	DD	FLAT:_tab_ASK2_3_CB+512
	DD	FLAT:_tab_ASK2_3_CB+640
	DD	0eH
	DD	FLAT:_tab_ASK2_3_OutCellIndex
_tab_ASK4_5_CB DD 03f12aa4cr			; 0.572911
	DD	0bd35e84fr			; -0.044411
	DD	03c9c7ffer			; 0.019104
	DD	0bcd8ea7dr			; -0.026479
	DD	03eefec35r			; 0.468599
	DD	03e6c825ar			; 0.230966
	DD	03d61f9f0r			; 0.05517
	DD	03ef6f694r			; 0.48235
	DD	03f0880c7r			; 0.533215
	DD	0bea82a78r			; -0.328449
	DD	03d095d0br			; 0.033536
	DD	0bebb41c0r			; -0.365736
	DD	03ec1d042r			; 0.378542
	DD	03d572581r			; 0.052526
	DD	0bd43d35fr			; -0.047809
	DD	03e00b285r			; 0.125681
	DD	03e5b0b39r			; 0.21391
	DD	0bc055971r			; -0.008139
	DD	0be51db44r			; -0.204938
	DD	03df23034r			; 0.118256
	DD	03e8c3a00r			; 0.27388
	DD	03ec46b6ar			; 0.383632
	DD	0be5b20fbr			; -0.213993
	DD	03f0269ber			; 0.509426
	DD	03ec4c016r			; 0.384278
	DD	0be116378r			; -0.141981
	DD	0be412e84r			; -0.188654
	DD	0be944ef9r			; -0.289665
	DD	03e7cdff0r			; 0.246948
	DD	03e44cb9fr			; 0.192183
	DD	0bdd130e0r			; -0.102144
	DD	03e9e33adr			; 0.308988
	DD	03e86731dr			; 0.262597
	DD	0beaf39f3r			; -0.342239
	DD	0bea7d849r			; -0.327822
	DD	0be238a3br			; -0.159707
	DD	03dda3c21r			; 0.10656
	DD	03deaa64cr			; 0.114575
	DD	0bea4b253r			; -0.321673
	DD	03e7ce39br			; 0.246962
	DD	03ecf8d50r			; 0.405375
	DD	0bf11b185r			; -0.569115
	DD	0be2d6388r			; -0.169325
	DD	0bf02db62r			; -0.51116
	DD	03e24be40r			; 0.160882
	DD	0be31ca7dr			; -0.173624
	DD	0bebde00dr			; -0.37085
	DD	03ce7ff58r			; 0.02832
	DD	0bd216830r			; -0.039406
	DD	0be31ea79r			; -0.173746
	DD	0bf06e1cer			; -0.526883
	DD	0be143526r			; -0.144734
	DD	03d92dc2br			; 0.071709
	DD	03e8fdda9r			; 0.280988
	DD	0bef7f306r			; -0.484276
	DD	03ec66eebr			; 0.387565
	DD	03df9799er			; 0.121814
	DD	0bf13a15er			; -0.576681
	DD	0bed0b8d0r			; -0.40766
	DD	0bec5d9a1r			; -0.386426
	DD	0be2d933er			; -0.169507
	DD	0bd591cd2r			; -0.053006
	DD	0bf12a002r			; -0.572754
	DD	03e0752dbr			; 0.132152
	DD	0411e4683r			; 9.89221
	DD	0bf444eb9r			; -0.766826
	DD	04116b865r			; 9.42002
	DD	0c150e7b6r			; -13.0566
	DD	041101a16r			; 9.00637
	DD	0408e0d3br			; 4.43912
	DD	03f9ec93ar			; 1.24052
	DD	0412d8870r			; 10.8458
	DD	040fbe241r			; 7.87137
	DD	0c09b27afr			; -4.84859
	DD	03f8fd69dr			; 1.12374
	DD	0c1441562r			; -12.2552
	DD	0416944f0r			; 14.5793
	DD	0400178ffr			; 2.02301
	DD	0c0b935a4r			; -5.7878
	DD	0417370d8r			; 15.215
	DD	04175d293r			; 15.3639
	DD	0bf15a6d3r			; -0.584577
	DD	0c156ed14r			; -13.4329
	DD	040f809f6r			; 7.75122
	DD	040cb14b1r			; 6.34628
	DD	0410e3b12r			; 8.88942
	DD	0c063fcdfr			; -3.56231
	DD	04107af77r			; 8.48034
	DD	041428903r			; 12.1585
	DD	0c08fc06cr			; -4.49224
	DD	0c0e583aer			; -7.17232
	DD	0c130339cr			; -11.0126
	DD	0413c3effr			; 11.7654
	DD	041127fd0r			; 9.1562
	DD	0c089c8d2r			; -4.30576
	DD	041506690r			; 13.025
	DD	040effa7dr			; 7.49933
	DD	0c11c615br			; -9.77377
	DD	0c14759ber			; -12.4594
	DD	0c0c23cd1r			; -6.06992
	DD	04139e3d2r			; 11.6181
	DD	04147df26r			; 12.492
	DD	0c122d98ar			; -10.1781
	DD	040fa0da2r			; 7.81416
	DD	040a0e3b0r			; 5.02779
	DD	0c0e1e050r			; -7.05863
	DD	0c044377ar			; -3.06589
	DD	0c11415d1r			; -9.25533
	DD	04119897er			; 9.59607
	DD	0c125b281r			; -10.3561
	DD	0c1558d3br			; -13.347
	DD	03f82768er			; 1.01924
	DD	0c053d0d9r			; -3.30962
	DD	0c1697b0br			; -14.5925
	DD	0c1222ff7r			; -10.1367
	DD	0c03235e7r			; -2.78454
	DD	0406b0f6fr			; 3.67282
	DD	041664491r			; 14.3917
	DD	0c0e5b2e6r			; -7.17809
	DD	040b7d3d4r			; 5.74461
	DD	03ff0dcc2r			; 1.88174
	DD	0c10e889cr			; -8.90835
	DD	0c0e73c10r			; -7.22608
	DD	0c0db30afr			; -6.84969
	DD	0c16204f5r			; -14.1262
	DD	0c08d5b0ar			; -4.41736
	DD	0c1180367r			; -9.50083
	DD	0400c4becr			; 2.19213
	DD	03d2ef0aer			; 0.04271
	DD	03c842529r			; 0.016131
	DD	03d35fb2fr			; 0.044429
	DD	03f8cceffr			; 1.10007
	DD	03f8d6039r			; 1.1045
	DD	0be6bafd9r			; -0.230163
	DD	03f5fff7ar			; 0.874992
	DD	03f3a3bder			; 0.727476
	DD	0bf71f84dr			; -0.945195
	DD	0be99b845r			; -0.300234
	DD	0bf4a0dedr			; -0.789275
	DD	03f212285r			; 0.629433
	DD	03f0df81ar			; 0.554567
	DD	0bf800043r			; -1.00001
	DD	0bebc269ar			; -0.367482
	DD	0bf7485a1r			; -0.955164
	DD	0beec241cr			; -0.461213
	DD	0bf4206ear			; -0.757918
	DD	0bf446ee3r			; -0.767317
	DD	0bce1309cr			; -0.027489
	DD	03ef7ac1dr			; 0.483735
	DD	0bf862de8r			; -1.04828
	DD	0bf032e17r			; -0.512422
	DD	03f3cc8acr			; 0.737437
	DD	03ebc9e45r			; 0.368395
	DD	0bc99f3c7r			; -0.018793
	DD	03ec3fee3r			; 0.382804
	DD	03f816523r			; 1.0109
	DD	03fe38c09r			; 1.77771
	DD	0bf35ed39r			; -0.710651
	DD	03fd38c22r			; 1.65271
	DD	03f5d7785r			; 0.865105
_tab_ASK4_5_OutCellIndex DD 00H
	DD	02H
	DD	03H
	DD	04H
	DD	0aH
	DD	0bH
	DD	014H
	DD	015H
	DD	019H
	DD	01bH
	DD	01cH
	DD	01dH
	DD	01fH
_ASK4_5_mblk DD	020H
	DD	FLAT:_tab_ASK4_5_CB
	DD	FLAT:_tab_ASK4_5_CB+256
	DD	08H
	DD	FLAT:_tab_ASK4_5_CB+512
	DD	FLAT:_tab_ASK4_5_CB+576
	DD	0dH
	DD	FLAT:_tab_ASK4_5_OutCellIndex
	ORG $+4
_tab_ASK6_7_CB DD 0bccc76d1r			; -0.024959
	DD	03d16084ar			; 0.036629
	DD	0be687981r			; -0.227026
	DD	03ef89d6br			; 0.485576
	DD	03ea780dcr			; 0.327155
	DD	0bdf7329cr			; -0.120702
	DD	03d79e8c4r			; 0.061013
	DD	03ea729d4r			; 0.326491
	DD	03e74ca4fr			; 0.239053
	DD	0be89aae7r			; -0.268882
	DD	03c8307f2r			; 0.015995
	DD	03e327781r			; 0.174284
	DD	03ee7bdcfr			; 0.45262
	DD	0be94b8e1r			; -0.290473
	DD	03e8cc87ar			; 0.274967
	DD	03d3d47bfr			; 0.046211
	DD	0beefa0d7r			; -0.468024
	DD	0be937c13r			; -0.288056
	DD	0bee6fb6er			; -0.451137
	DD	03e0ba83fr			; 0.136384
	DD	03d954c12r			; 0.072899
	DD	0be7eb702r			; -0.248745
	DD	0be8a67a5r			; -0.270322
	DD	03ceb11c7r			; 0.028695
	DD	0be62e2b9r			; -0.221568
	DD	0bec0ccbcr			; -0.376562
	DD	0bf30622cr			; -0.688998
	DD	0bd4c74b8r			; -0.049916
	DD	0bbee6b83r			; -0.007276
	DD	0bed35ce2r			; -0.412818
	DD	0be020685r			; -0.126978
	DD	0bd7ac1d3r			; -0.06122
	DD	03dea17b1r			; 0.114303
	DD	03d31055cr			; 0.043218
	DD	03b7062d4r			; 0.003668
	DD	03f037a1cr			; 0.513582
	DD	03ec5095br			; 0.384837
	DD	03e647f99r			; 0.223143
	DD	03e7b4bf9r			; 0.245407
	DD	03eca849dr			; 0.395543
	DD	03e2d1a22r			; 0.169045
	DD	0bdda1d32r			; -0.106501
	DD	0bddec700r			; -0.108778
	DD	03e91d29er			; 0.28481
	DD	03ef691c9r			; 0.481581
	DD	0bbb367a1r			; -0.005475
	DD	03e3f7c67r			; 0.186998
	DD	03e508c3fr			; 0.20366
	DD	0be811926r			; -0.252145
	DD	0be220104r			; -0.158207
	DD	0bf002353r			; -0.500539
	DD	03ed99158r			; 0.424937
	DD	03cc766c7r			; 0.024341
	DD	0bdc795f6r			; -0.097454
	DD	0be8f37b9r			; -0.279722
	DD	03e7f9b99r			; 0.249617
	DD	0bda88acer			; -0.082296
	DD	0be621ccer			; -0.220813
	DD	0bedbbba5r			; -0.429166
	DD	0bd9a20der			; -0.075258
	DD	03e50a73fr			; 0.203763
	DD	0bee43c5cr			; -0.445773
	DD	0be10578er			; -0.140959
	DD	03de8cb4br			; 0.113669
	DD	0c1342435r			; -11.2588
	DD	041842f4fr			; 16.5231
	DD	0c087e7aer			; -4.24703
	DD	041115733r			; 9.08379
	DD	04167d307r			; 14.489
	DD	0c0ab0f80r			; -5.34564
	DD	0403935e3r			; 2.89391
	DD	04177c5f6r			; 15.4858
	DD	04122cbd1r			; 10.1748
	DD	0c1371c24r			; -11.4444
	DD	03fcb1066r			; 1.58644
	DD	0418a49e4r			; 17.2861
	DD	04105c3d0r			; 8.36031
	DD	0c0abb08er			; -5.3653
	DD	041721e3ar			; 15.1324
	DD	04022c2fcr			; 2.54315
	DD	0c105d059r			; -8.36337
	DD	0c0a4b7b3r			; -5.14742
	DD	0c12f8f9br			; -10.9726
	DD	040544be8r			; 3.31713
	DD	04093d48br			; 4.6197
	DD	0c17c3650r			; -15.7633
	DD	0c1785326r			; -15.5203
	DD	03fd2e13fr			; 1.6475
	DD	0c0acc85cr			; -5.39946
	DD	0c112d329r			; -9.17655
	DD	0c101ddadr			; -8.11662
	DD	0bf1688ebr			; -0.588027
	DD	0be61fafdr			; -0.220684
	DD	0c14855c5r			; -12.5209
	DD	0c18381d8r			; -16.4384
	DD	0c0fd9d5cr			; -7.92546
	DD	04182f65br			; 16.3703
	DD	040c6114br			; 6.18961
	DD	03d9bbc6fr			; 0.076043
	DD	0412a5b57r			; 10.6473
	DD	041242b75r			; 10.2606
	DD	040be6230r			; 5.94949
	DD	040c44960r			; 6.13396
	DD	0411e2f90r			; 9.88661
	DD	04167faecr			; 14.4988
	DD	0c11226b3r			; -9.13445
	DD	0c0ae99f8r			; -5.4563
	DD	04164939fr			; 14.286
	DD	04130890dr			; 11.0335
	DD	0be00729cr			; -0.125437
	DD	041291a41r			; 10.5689
	DD	041382b8ar			; 11.5106
	DD	0c14d353fr			; -12.8255
	DD	0c100c1b4r			; -8.04729
	DD	0c0bba0c7r			; -5.86338
	DD	0409f49dar			; 4.97777
	DD	040900494r			; 4.50056
	DD	0c19026abr			; -18.0189
	DD	0c11d539ar			; -9.83291
	DD	0410c64f3r			; 8.77465
	DD	0c0b6fdf2r			; -5.7185
	DD	0c1757f78r			; -15.3436
	DD	0c14bc285r			; -12.735
	DD	0c00eec9ar			; -2.23319
	DD	04096d8a5r			; 4.71395
	DD	0c12500dcr			; -10.3127
	DD	0c1563c75r			; -13.3898
	DD	0412cc270r			; 10.7975
	DD	0bf473376r			; -0.778129
	DD	0be7d9ad8r			; -0.247661
	DD	0be683c29r			; -0.226792
	DD	03f5dd80er			; 0.866578
	DD	03e819935r			; 0.253122
	DD	0bf62b28er			; -0.885537
	DD	03f76fb6er			; 0.964774
	DD	03e7458cdr			; 0.23862
	DD	0bea425f2r			; -0.320602
	DD	03f2284ber			; 0.634838
	DD	0bf13a15er			; -0.576681
	DD	0bee5690ar			; -0.448067
	DD	03f937050r			; 1.15187
	DD	03f4c8e9br			; 0.799051
	DD	03f3f5b92r			; 0.747491
	DD	0bf5234ecr			; -0.82112
_tab_ASK6_7_OutCellIndex DD 01H
	DD	06H
	DD	08H
	DD	0cH
	DD	0dH
	DD	0eH
	DD	011H
	DD	012H
	DD	013H
	DD	016H
	DD	019H
	DD	01eH
_ASK6_7_mblk DD	020H
	DD	FLAT:_tab_ASK6_7_CB
	DD	FLAT:_tab_ASK6_7_CB+256
	DD	04H
	DD	FLAT:_tab_ASK6_7_CB+512
	DD	FLAT:_tab_ASK6_7_CB+544
	DD	0cH
	DD	FLAT:_tab_ASK6_7_OutCellIndex
_tab_ASK8_9_CB DD 0bdb11be7r			; -0.086479
	DD	0bd80e6b0r			; -0.06294
	DD	03eb18266r			; 0.346698
	DD	0bec06184r			; -0.375744
	DD	03e57c3d7r			; 0.210708
	DD	03bf48c2er			; 0.007463
	DD	0beb28bd2r			; -0.348723
	DD	03c8f2bedr			; 0.017477
	DD	03db5e9e2r			; 0.088825
	DD	0beb9387ar			; -0.361759
	DD	03ebb6da8r			; 0.366071
	DD	03c9335d2r			; 0.01797
	DD	0be30795fr			; -0.172338
	DD	0be1d1aebr			; -0.153423
	DD	03d90e90cr			; 0.070757
	DD	0be5c4f3cr			; -0.215146
	DD	0bde65d7dr			; -0.112483
	DD	03d510f52r			; 0.05104
	DD	0be8c92ffr			; -0.274559
	DD	03eb8d36br			; 0.360988
	DD	0bc3f1e8er			; -0.011665
	DD	03dec93a7r			; 0.115516
	DD	0bea55971r			; -0.322948
	DD	0be1d640fr			; -0.153702
	DD	03e6fa1e4r			; 0.234016
	DD	03e1373b0r			; 0.143996
	DD	03dc5b0ffr			; 0.096529
	DD	03e3310dcr			; 0.174869
	DD	03bb2074fr			; 0.005433
	DD	03c2ed99dr			; 0.010672
	DD	0bbe05469r			; -0.006846
	DD	03e762520r			; 0.240376
	DD	0bdbdad75r			; -0.092616
	DD	0be9a0fd4r			; -0.300902
	DD	03e86f06br			; 0.263553
	DD	0bdd81f97r			; -0.105529
	DD	03e5c86cfr			; 0.215358
	DD	0be75edd0r			; -0.240165
	DD	0bd517f84r			; -0.051147
	DD	0be39c454r			; -0.181413
	DD	0be6541d9r			; -0.223884
	DD	03dd5fdcer			; 0.104488
	DD	0be53211dr			; -0.206181
	DD	03e6bfca8r			; 0.230456
	DD	03ec7d88cr			; 0.390324
	DD	0be419fc3r			; -0.189086
	DD	03cd173fbr			; 0.025568
	DD	0bdd4549br			; -0.103677
	DD	03e0a0a96r			; 0.134806
	DD	03ead8d15r			; 0.338967
	DD	0bddc5dear			; -0.107601
	DD	03e301cd6r			; 0.171985
	DD	03dd09071r			; 0.101838
	DD	0bd0c6c55r			; -0.034283
	DD	0bebb1705r			; -0.36541
	DD	03e437868r			; 0.190889
	DD	0be5bd380r			; -0.214674
	DD	0bce5b856r			; -0.028042
	DD	03e1ba5e3r			; 0.152
	DD	0be001755r			; -0.125089
	DD	0bdd16441r			; -0.102242
	DD	03ea7ebd1r			; 0.327971
	DD	03dd820a3r			; 0.105531
	DD	03d8d6e48r			; 0.069058
_tab_ASK10_11_CB DD 0bbd3415br			; -0.006447
	DD	0be21c68fr			; -0.157984
	DD	03e9e4d7fr			; 0.309185
	DD	0bda0bd45r			; -0.078486
	DD	03e917460r			; 0.284091
	DD	03dae978dr			; 0.08525
	DD	0bdaf3a9br			; -0.085561
	DD	03e49b131r			; 0.196965
	DD	03e16494dr			; 0.146764
	DD	0bea70d84r			; -0.326275
	DD	0bcec0d6fr			; -0.028815
	DD	0bd849668r			; -0.06474
	DD	0be4f6db9r			; -0.202567
	DD	03d6a3487r			; 0.057179
	DD	03e297918r			; 0.165501
	DD	03e5ef34dr			; 0.217725
	DD	0bdfa975br			; -0.122359
	DD	0be623a6dr			; -0.220926
	DD	0be678812r			; -0.226105
	DD	03ea1fe87r			; 0.316395
	DD	0babe2f7br			; -0.001451
	DD	0be920382r			; -0.285183
	DD	03d2556d2r			; 0.040366
	DD	0bc71f9adr			; -0.014769
	DD	0bea2aeb0r			; -0.317739
	DD	0bb9c022ar			; -0.004761
	DD	03d5c0981r			; 0.05372
	DD	03e2c5d64r			; 0.168325
	DD	03e542edcr			; 0.20721
	DD	0badde7a7r			; -0.001693
	DD	0bbeda22fr			; -0.007252
	DD	03e975a32r			; 0.29561
	DD	0be3f3bebr			; -0.186752
	DD	03e29042er			; 0.165055
	DD	03e31cac1r			; 0.173625
	DD	0bdd48dc1r			; -0.103786
	DD	0bde04a73r			; -0.109517
	DD	0bbff4ba5r			; -0.007791
	DD	0bde47cb7r			; -0.111566
	DD	0bddfd695r			; -0.109296
	DD	03d93c793r			; 0.072158
	DD	0bdc4bdbar			; -0.096065
	DD	0bea6f241r			; -0.326067
	DD	03e14d4ccr			; 0.145343
	DD	03d61dda0r			; 0.055143
	DD	03d8c6f7ar			; 0.068572
	DD	0bcb7542ar			; -0.022379
	DD	03df357e6r			; 0.11882
	DD	03e119978r			; 0.142187
	DD	03db4855er			; 0.088145
	DD	0be42b991r			; -0.190161
	DD	0bd37707ar			; -0.044785
	DD	03e801eefr			; 0.250236
	DD	0be51819dr			; -0.204596
	DD	03dee22a3r			; 0.116277
	DD	0bc5a8bd2r			; -0.013339
	DD	0be8217b1r			; -0.254087
	DD	0be160e0fr			; -0.146538
	DD	03dd9a390r			; 0.106269
	DD	0be41bc99r			; -0.189196
	DD	0bd01d7dcr			; -0.0317
	DD	03cebb774r			; 0.028774
	DD	0bdd5b036r			; -0.10434
	DD	03db8d046r			; 0.090241
_ASK8_9_mblk DD	020H
	DD	FLAT:_tab_ASK8_9_CB
_ASK10_11_mblk DD 020H
	DD	FLAT:_tab_ASK10_11_CB
CONST	ENDS
_DATA	SEGMENT
_pASK8_11_VQ DD	FLAT:_ASK8_9_mblk
	DD	FLAT:_ASK10_11_mblk
_DATA	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxMSVQEncPred@16
PUBLIC	??_C@_0EB@HKCJCIIE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CG@ONKADCJD@iOrder?5?$DN?$DN?5?$CISUB_VECTORS?$CKSUB_DIMEN@ ; `string'
PUBLIC	??_C@_0CI@CGPINECO@?$CIpfCoef?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpiIndices?5?$CB@ ; `string'
PUBLIC	__real@3f4ccccd
EXTRN	_Dim2VectorQuantize@12:NEAR
EXTRN	_Dim2VectorLUT@16:NEAR
EXTRN	_RS2StageVQ2Enc@44:NEAR
EXTRN	__fltused:NEAR
EXTRN	__assert:NEAR
;	COMDAT ??_C@_0EB@HKCJCIIE@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\msvqpred.c
CONST	SEGMENT
??_C@_0EB@HKCJCIIE@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\msvqpred.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ONKADCJD@iOrder?5?$DN?$DN?5?$CISUB_VECTORS?$CKSUB_DIMEN@
CONST	SEGMENT
??_C@_0CG@ONKADCJD@iOrder?5?$DN?$DN?5?$CISUB_VECTORS?$CKSUB_DIMEN@ DB 'iO'
	DB	'rder == (SUB_VECTORS*SUB_DIMENSION)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CGPINECO@?$CIpfCoef?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpiIndices?5?$CB@
CONST	SEGMENT
??_C@_0CI@CGPINECO@?$CIpfCoef?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpiIndices?5?$CB@ DB '('
	DB	'pfCoef != NULL) && (piIndices != NULL)', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxMSVQEncPred@16
_TEXT	SEGMENT
_j$ = -92
_tab_Means$ = -88
_ASKCB_mblk$ = -84
_pfPredCoef$ = -68
_iFirstLag$ = -60
_i$ = -56
_pfZMCoef$ = -52
_tab_Pred$ = -4
_pfCoef$ = 8
_piIndices$ = 12
_iOrder$ = 16
_fPv$ = 20
_VoxMSVQEncPred@16 PROC NEAR				; COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	56		 push	 esi

; 91   :   float *tab_Means;
; 92   :   float **tab_Pred;
; 93   :   int iFirstLag;
; 94   :   int i, j;
; 95   : 
; 96   : STACK_INIT
; 97   :   float  pfZMCoef[LPC_ORDER];
; 98   :   float  pfPredCoef[SUB_DIMENSION];
; 99   :   RS2StageVQ_MBlk * ASKCB_mblk[MSVQ_PAIRS];
; 100  : 
; 101  : STACK_INIT_END
; 102  :   STACK_ATTACH (float *, pfZMCoef)
; 103  :   STACK_ATTACH (float *, pfPredCoef)
; 104  :   STACK_ATTACH (RS2StageVQ_MBlk **, ASKCB_mblk)
; 105  : 
; 106  : STACK_START
; 107  : 
; 108  :   assert(iOrder == (SUB_VECTORS*SUB_DIMENSION));

  00007	83 7d 10 0c	 cmp	 DWORD PTR _iOrder$[ebp], 12 ; 0000000cH
  0000b	74 14		 je	 SHORT $L1425
  0000d	6a 6c		 push	 108			; 0000006cH
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@HKCJCIIE@c?3?2xbox?2private?2windows?2directx?2@
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@ONKADCJD@iOrder?5?$DN?$DN?5?$CISUB_VECTORS?$CKSUB_DIMEN@
  00019	e8 00 00 00 00	 call	 __assert
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1425:

; 109  :   assert(SUB_DIMENSION == 2);
; 110  :   assert((pfCoef != NULL) && (piIndices != NULL));

  00021	83 7d 08 00	 cmp	 DWORD PTR _pfCoef$[ebp], 0
  00025	74 06		 je	 SHORT $L1426
  00027	83 7d 0c 00	 cmp	 DWORD PTR _piIndices$[ebp], 0
  0002b	75 14		 jne	 SHORT $L1427
$L1426:
  0002d	6a 6e		 push	 110			; 0000006eH
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@HKCJCIIE@c?3?2xbox?2private?2windows?2directx?2@
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@CGPINECO@?$CIpfCoef?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpiIndices?5?$CB@
  00039	e8 00 00 00 00	 call	 __assert
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1427:

; 111  : 
; 112  :   /* choose the tables by comparing the voicing */
; 113  :   if (fPv>PV_THRESHOLD)

  00041	d9 45 14	 fld	 DWORD PTR _fPv$[ebp]
  00044	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f4ccccd
  0004a	df e0		 fnstsw	 ax
  0004c	f6 c4 41	 test	 ah, 65			; 00000041H
  0004f	75 17		 jne	 SHORT $L1321

; 114  :     {
; 115  :       tab_Means = (float *)tab_ASK12_V_Means;

  00051	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _tab_Means$[ebp], OFFSET FLAT:_tab_ASK12_V_Means

; 116  :       tab_Pred = (float **)ptab_ASK12_V_Pred;

  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _tab_Pred$[ebp], OFFSET FLAT:_ptab_ASK12_V_Pred

; 117  :       ASKCB_mblk[0] = (RS2StageVQ_MBlk *)&ASK0_1_V_mblk;

  0005f	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _ASKCB_mblk$[ebp], OFFSET FLAT:_ASK0_1_V_mblk

; 118  :     } 
; 119  :   else 

  00066	eb 15		 jmp	 SHORT $L1325
$L1321:

; 120  :     {
; 121  :       tab_Means = (float *)tab_ASK12_UV_Means;

  00068	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _tab_Means$[ebp], OFFSET FLAT:_tab_ASK12_UV_Means

; 122  :       tab_Pred = (float **)ptab_ASK12_UV_Pred;

  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _tab_Pred$[ebp], OFFSET FLAT:_ptab_ASK12_UV_Pred

; 123  :       ASKCB_mblk[0] = (RS2StageVQ_MBlk *)&ASK0_1_UV_mblk;

  00076	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _ASKCB_mblk$[ebp], OFFSET FLAT:_ASK0_1_UV_mblk
$L1325:

; 124  :     }
; 125  :    
; 126  :    ASKCB_mblk[1] = (RS2StageVQ_MBlk *)&ASK2_3_mblk;

  0007d	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _ASKCB_mblk$[ebp+4], OFFSET FLAT:_ASK2_3_mblk

; 127  :    ASKCB_mblk[2] = (RS2StageVQ_MBlk *)&ASK4_5_mblk;

  00084	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _ASKCB_mblk$[ebp+8], OFFSET FLAT:_ASK4_5_mblk

; 128  :    ASKCB_mblk[3] = (RS2StageVQ_MBlk *)&ASK6_7_mblk;

  0008b	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _ASKCB_mblk$[ebp+12], OFFSET FLAT:_ASK6_7_mblk

; 129  : 
; 130  : 
; 131  :    /*--------------------------------------------
; 132  :      Mean remover
; 133  :      --------------------------------------------*/
; 134  :    for (i=0; i<iOrder; i++)

  00092	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00099	eb 09		 jmp	 SHORT $L1332
$L1333:
  0009b	8b 55 c8	 mov	 edx, DWORD PTR _i$[ebp]
  0009e	83 c2 01	 add	 edx, 1
  000a1	89 55 c8	 mov	 DWORD PTR _i$[ebp], edx
$L1332:
  000a4	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  000a7	3b 45 10	 cmp	 eax, DWORD PTR _iOrder$[ebp]
  000aa	7d 1b		 jge	 SHORT $L1334

; 135  :      pfZMCoef[i] = pfCoef[i] - tab_Means[i];

  000ac	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  000af	8b 55 08	 mov	 edx, DWORD PTR _pfCoef$[ebp]
  000b2	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  000b5	8b 75 a8	 mov	 esi, DWORD PTR _tab_Means$[ebp]
  000b8	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  000bb	d8 24 86	 fsub	 DWORD PTR [esi+eax*4]
  000be	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  000c1	d9 5c 8d cc	 fstp	 DWORD PTR _pfZMCoef$[ebp+ecx*4]
  000c5	eb d4		 jmp	 SHORT $L1333
$L1334:

; 136  : 
; 137  :    /*--------------------------------------------
; 138  :      Encode each subvector
; 139  :    --------------------------------------------*/
; 140  :    iFirstLag = 0;

  000c7	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _iFirstLag$[ebp], 0

; 141  : 
; 142  :    for (i = 0; i < SUB_VECTORS; i++)

  000ce	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d5	eb 09		 jmp	 SHORT $L1335
$L1336:
  000d7	8b 55 c8	 mov	 edx, DWORD PTR _i$[ebp]
  000da	83 c2 01	 add	 edx, 1
  000dd	89 55 c8	 mov	 DWORD PTR _i$[ebp], edx
$L1335:
  000e0	83 7d c8 06	 cmp	 DWORD PTR _i$[ebp], 6
  000e4	0f 8d 6a 01 00
	00		 jge	 $L1337

; 143  :      {
; 144  :        /*--------------------------------------------
; 145  :          predict the ASK values and find the residual
; 146  :          --------------------------------------------*/
; 147  :        CompPredCoef(pfZMCoef, iFirstLag, tab_Pred[i], pfPredCoef, SUB_DIMENSION);

  000ea	6a 02		 push	 2
  000ec	8d 45 bc	 lea	 eax, DWORD PTR _pfPredCoef$[ebp]
  000ef	50		 push	 eax
  000f0	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  000f3	8b 55 fc	 mov	 edx, DWORD PTR _tab_Pred$[ebp]
  000f6	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  000f9	50		 push	 eax
  000fa	8b 4d c4	 mov	 ecx, DWORD PTR _iFirstLag$[ebp]
  000fd	51		 push	 ecx
  000fe	8d 55 cc	 lea	 edx, DWORD PTR _pfZMCoef$[ebp]
  00101	52		 push	 edx
  00102	e8 00 00 00 00	 call	 _CompPredCoef@20

; 148  : 
; 149  :        pfZMCoef[iFirstLag] -= pfPredCoef[0];

  00107	8b 45 c4	 mov	 eax, DWORD PTR _iFirstLag$[ebp]
  0010a	d9 44 85 cc	 fld	 DWORD PTR _pfZMCoef$[ebp+eax*4]
  0010e	d8 65 bc	 fsub	 DWORD PTR _pfPredCoef$[ebp]
  00111	8b 4d c4	 mov	 ecx, DWORD PTR _iFirstLag$[ebp]
  00114	d9 5c 8d cc	 fstp	 DWORD PTR _pfZMCoef$[ebp+ecx*4]

; 150  :        pfZMCoef[iFirstLag+1] -= pfPredCoef[1];

  00118	8b 55 c4	 mov	 edx, DWORD PTR _iFirstLag$[ebp]
  0011b	d9 44 95 d0	 fld	 DWORD PTR _pfZMCoef$[ebp+edx*4+4]
  0011f	d8 65 c0	 fsub	 DWORD PTR _pfPredCoef$[ebp+4]
  00122	8b 45 c4	 mov	 eax, DWORD PTR _iFirstLag$[ebp]
  00125	d9 5c 85 d0	 fstp	 DWORD PTR _pfZMCoef$[ebp+eax*4+4]

; 151  :  
; 152  :        if ( i < MSVQ_PAIRS) {

  00129	83 7d c8 04	 cmp	 DWORD PTR _i$[ebp], 4
  0012d	7d 72		 jge	 SHORT $L1338

; 153  :          /*--------------------------------------------
; 154  :            Encode the ASK residual using RSMSVQ
; 155  :            --------------------------------------------*/
; 156  :          RS2StageVQ2Enc(STACK_S &(piIndices[iFirstLag]), &pfZMCoef[iFirstLag], 
; 157  :                         NUMCAND, ASKCB_mblk[i]->iStage1Size, 
; 158  :                         ASKCB_mblk[i]->pfStage1CB, ASKCB_mblk[i]->pfRotScaleCB,
; 159  :                         ASKCB_mblk[i]->iStage2Size,
; 160  :                         ASKCB_mblk[i]->pfStage2InCellCB, 
; 161  :                         ASKCB_mblk[i]->pfStage2OutCellCB,
; 162  :                         ASKCB_mblk[i]->iNumOfOutCell, 
; 163  :                         ASKCB_mblk[i]->piIndexOfStage2OutCell);

  0012f	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  00132	8b 54 8d ac	 mov	 edx, DWORD PTR _ASKCB_mblk$[ebp+ecx*4]
  00136	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00139	50		 push	 eax
  0013a	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  0013d	8b 54 8d ac	 mov	 edx, DWORD PTR _ASKCB_mblk$[ebp+ecx*4]
  00141	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00144	50		 push	 eax
  00145	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  00148	8b 54 8d ac	 mov	 edx, DWORD PTR _ASKCB_mblk$[ebp+ecx*4]
  0014c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0014f	50		 push	 eax
  00150	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  00153	8b 54 8d ac	 mov	 edx, DWORD PTR _ASKCB_mblk$[ebp+ecx*4]
  00157	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0015a	50		 push	 eax
  0015b	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  0015e	8b 54 8d ac	 mov	 edx, DWORD PTR _ASKCB_mblk$[ebp+ecx*4]
  00162	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00165	50		 push	 eax
  00166	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  00169	8b 54 8d ac	 mov	 edx, DWORD PTR _ASKCB_mblk$[ebp+ecx*4]
  0016d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00170	50		 push	 eax
  00171	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  00174	8b 54 8d ac	 mov	 edx, DWORD PTR _ASKCB_mblk$[ebp+ecx*4]
  00178	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0017b	50		 push	 eax
  0017c	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  0017f	8b 54 8d ac	 mov	 edx, DWORD PTR _ASKCB_mblk$[ebp+ecx*4]
  00183	8b 02		 mov	 eax, DWORD PTR [edx]
  00185	50		 push	 eax
  00186	6a 02		 push	 2
  00188	8b 4d c4	 mov	 ecx, DWORD PTR _iFirstLag$[ebp]
  0018b	8d 54 8d cc	 lea	 edx, DWORD PTR _pfZMCoef$[ebp+ecx*4]
  0018f	52		 push	 edx
  00190	8b 45 c4	 mov	 eax, DWORD PTR _iFirstLag$[ebp]
  00193	8b 4d 0c	 mov	 ecx, DWORD PTR _piIndices$[ebp]
  00196	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00199	52		 push	 edx
  0019a	e8 00 00 00 00	 call	 _RS2StageVQ2Enc@44

; 164  :        }
; 165  :        else {

  0019f	eb 7a		 jmp	 SHORT $L1339
$L1338:

; 166  :          /*--------------------------------------------------
; 167  :            Encode the residual using 2-dimensional VQ 
; 168  :            --------------------------------------------------*/
; 169  :          j = i - MSVQ_PAIRS;

  001a1	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  001a4	83 e8 04	 sub	 eax, 4
  001a7	89 45 a4	 mov	 DWORD PTR _j$[ebp], eax

; 170  :          piIndices[iFirstLag] = Dim2VectorQuantize(&pfZMCoef[iFirstLag],
; 171  :                                       pASK8_11_VQ[j]->fCodeBook, 
; 172  :                                       pASK8_11_VQ[j]->iCodebookSize);

  001aa	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  001ad	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _pASK8_11_VQ[ecx*4]
  001b4	8b 02		 mov	 eax, DWORD PTR [edx]
  001b6	50		 push	 eax
  001b7	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  001ba	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _pASK8_11_VQ[ecx*4]
  001c1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001c4	50		 push	 eax
  001c5	8b 4d c4	 mov	 ecx, DWORD PTR _iFirstLag$[ebp]
  001c8	8d 54 8d cc	 lea	 edx, DWORD PTR _pfZMCoef$[ebp+ecx*4]
  001cc	52		 push	 edx
  001cd	e8 00 00 00 00	 call	 _Dim2VectorQuantize@12
  001d2	8b 4d c4	 mov	 ecx, DWORD PTR _iFirstLag$[ebp]
  001d5	8b 55 0c	 mov	 edx, DWORD PTR _piIndices$[ebp]
  001d8	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 173  : 
; 174  :          piIndices[iFirstLag+1] = 0;   /* single stage VQ */

  001db	8b 45 c4	 mov	 eax, DWORD PTR _iFirstLag$[ebp]
  001de	8b 4d 0c	 mov	 ecx, DWORD PTR _piIndices$[ebp]
  001e1	c7 44 81 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*4+4], 0

; 175  : 
; 176  :         /*--------------------------------------------
; 177  :           Decode the residual for the next sub-vector.
; 178  :           --------------------------------------------*/
; 179  :          Dim2VectorLUT( piIndices[iFirstLag], 
; 180  :                         pASK8_11_VQ[j]->fCodeBook, 
; 181  :                         pASK8_11_VQ[j]->iCodebookSize,
; 182  :                         &pfZMCoef[iFirstLag]);

  001e9	8b 55 c4	 mov	 edx, DWORD PTR _iFirstLag$[ebp]
  001ec	8d 44 95 cc	 lea	 eax, DWORD PTR _pfZMCoef$[ebp+edx*4]
  001f0	50		 push	 eax
  001f1	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  001f4	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _pASK8_11_VQ[ecx*4]
  001fb	8b 02		 mov	 eax, DWORD PTR [edx]
  001fd	50		 push	 eax
  001fe	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  00201	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _pASK8_11_VQ[ecx*4]
  00208	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0020b	50		 push	 eax
  0020c	8b 4d c4	 mov	 ecx, DWORD PTR _iFirstLag$[ebp]
  0020f	8b 55 0c	 mov	 edx, DWORD PTR _piIndices$[ebp]
  00212	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 _Dim2VectorLUT@16
$L1339:

; 183  :        }
; 184  : 
; 185  :        /*---------------------------------------------
; 186  :          Compute the quantized coefficients.
; 187  :         ---------------------------------------------*/
; 188  :        pfZMCoef[iFirstLag++] += pfPredCoef[0];

  0021b	8b 4d c4	 mov	 ecx, DWORD PTR _iFirstLag$[ebp]
  0021e	d9 45 bc	 fld	 DWORD PTR _pfPredCoef$[ebp]
  00221	d8 44 8d cc	 fadd	 DWORD PTR _pfZMCoef$[ebp+ecx*4]
  00225	8b 55 c4	 mov	 edx, DWORD PTR _iFirstLag$[ebp]
  00228	d9 5c 95 cc	 fstp	 DWORD PTR _pfZMCoef$[ebp+edx*4]
  0022c	8b 45 c4	 mov	 eax, DWORD PTR _iFirstLag$[ebp]
  0022f	83 c0 01	 add	 eax, 1
  00232	89 45 c4	 mov	 DWORD PTR _iFirstLag$[ebp], eax

; 189  :        pfZMCoef[iFirstLag++] += pfPredCoef[1];

  00235	8b 4d c4	 mov	 ecx, DWORD PTR _iFirstLag$[ebp]
  00238	d9 45 c0	 fld	 DWORD PTR _pfPredCoef$[ebp+4]
  0023b	d8 44 8d cc	 fadd	 DWORD PTR _pfZMCoef$[ebp+ecx*4]
  0023f	8b 55 c4	 mov	 edx, DWORD PTR _iFirstLag$[ebp]
  00242	d9 5c 95 cc	 fstp	 DWORD PTR _pfZMCoef$[ebp+edx*4]
  00246	8b 45 c4	 mov	 eax, DWORD PTR _iFirstLag$[ebp]
  00249	83 c0 01	 add	 eax, 1
  0024c	89 45 c4	 mov	 DWORD PTR _iFirstLag$[ebp], eax

; 190  :      }

  0024f	e9 83 fe ff ff	 jmp	 $L1336
$L1337:

; 191  : 
; 192  :    /*--------------------------------------------------
; 193  :      add the mean vector
; 194  :      --------------------------------------------------*/
; 195  :    for (i = 0; i < iOrder; i++)

  00254	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0025b	eb 09		 jmp	 SHORT $L1340
$L1341:
  0025d	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  00260	83 c1 01	 add	 ecx, 1
  00263	89 4d c8	 mov	 DWORD PTR _i$[ebp], ecx
$L1340:
  00266	8b 55 c8	 mov	 edx, DWORD PTR _i$[ebp]
  00269	3b 55 10	 cmp	 edx, DWORD PTR _iOrder$[ebp]
  0026c	7d 1b		 jge	 SHORT $L1304

; 196  :      pfCoef[i] = pfZMCoef[i] + tab_Means[i];

  0026e	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  00271	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  00274	8b 55 a8	 mov	 edx, DWORD PTR _tab_Means$[ebp]
  00277	d9 44 85 cc	 fld	 DWORD PTR _pfZMCoef$[ebp+eax*4]
  0027b	d8 04 8a	 fadd	 DWORD PTR [edx+ecx*4]
  0027e	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  00281	8b 4d 08	 mov	 ecx, DWORD PTR _pfCoef$[ebp]
  00284	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]
  00287	eb d4		 jmp	 SHORT $L1341
$L1304:

; 197  :     
; 198  :    STACK_END
; 199  : }

  00289	5e		 pop	 esi
  0028a	8b e5		 mov	 esp, ebp
  0028c	5d		 pop	 ebp
  0028d	c2 10 00	 ret	 16			; 00000010H
_VoxMSVQEncPred@16 ENDP
_TEXT	ENDS
PUBLIC	_VoxMSVQDecPred@16
PUBLIC	??_C@_0CI@IAADCDFP@?$CIpiIndices?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfCoef?5?$CB@ ; `string'
EXTRN	_RS2StageVQ2Dec@40:NEAR
;	COMDAT ??_C@_0CI@IAADCDFP@?$CIpiIndices?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfCoef?5?$CB@
CONST	SEGMENT
??_C@_0CI@IAADCDFP@?$CIpiIndices?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfCoef?5?$CB@ DB '('
	DB	'piIndices != NULL) && (pfCoef != NULL)', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxMSVQDecPred@16
_TEXT	SEGMENT
_j$ = -92
_tab_Means$ = -88
_ASKCB_mblk$ = -84
_pfPredCoef$ = -68
_iFirstLag$ = -60
_i$ = -56
_pfZMCoef$ = -52
_tab_Pred$ = -4
_piIndices$ = 8
_pfCoef$ = 12
_iOrder$ = 16
_fPv$ = 20
_VoxMSVQDecPred@16 PROC NEAR				; COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH

; 236  :   float *tab_Means;
; 237  :   float **tab_Pred;
; 238  :   int i, j; 
; 239  :   int iFirstLag;
; 240  : 
; 241  : STACK_INIT
; 242  :   float  pfZMCoef[LPC_ORDER];
; 243  :   float  pfPredCoef[SUB_DIMENSION];
; 244  :   RS2StageVQ_MBlk *ASKCB_mblk[MSVQ_PAIRS];
; 245  : 
; 246  : STACK_INIT_END
; 247  :   STACK_ATTACH (float *, pfZMCoef)
; 248  :   STACK_ATTACH (float *, pfPredCoef)
; 249  :   STACK_ATTACH (RS2StageVQ_MBlk **, ASKCB_mblk)
; 250  : 
; 251  : STACK_START
; 252  : 
; 253  :   assert(iOrder == (SUB_VECTORS*SUB_DIMENSION));

  00006	83 7d 10 0c	 cmp	 DWORD PTR _iOrder$[ebp], 12 ; 0000000cH
  0000a	74 17		 je	 SHORT $L1434
  0000c	68 fd 00 00 00	 push	 253			; 000000fdH
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@HKCJCIIE@c?3?2xbox?2private?2windows?2directx?2@
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@ONKADCJD@iOrder?5?$DN?$DN?5?$CISUB_VECTORS?$CKSUB_DIMEN@
  0001b	e8 00 00 00 00	 call	 __assert
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1434:

; 254  :   assert(SUB_DIMENSION == 2);
; 255  :   assert((piIndices != NULL) && (pfCoef != NULL));

  00023	83 7d 08 00	 cmp	 DWORD PTR _piIndices$[ebp], 0
  00027	74 06		 je	 SHORT $L1435
  00029	83 7d 0c 00	 cmp	 DWORD PTR _pfCoef$[ebp], 0
  0002d	75 17		 jne	 SHORT $L1436
$L1435:
  0002f	68 ff 00 00 00	 push	 255			; 000000ffH
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@HKCJCIIE@c?3?2xbox?2private?2windows?2directx?2@
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@IAADCDFP@?$CIpiIndices?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfCoef?5?$CB@
  0003e	e8 00 00 00 00	 call	 __assert
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1436:

; 256  : 
; 257  :   /* choose the tables by comparing the voicing */
; 258  :   if (fPv>PV_THRESHOLD)

  00046	d9 45 14	 fld	 DWORD PTR _fPv$[ebp]
  00049	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f4ccccd
  0004f	df e0		 fnstsw	 ax
  00051	f6 c4 41	 test	 ah, 65			; 00000041H
  00054	75 17		 jne	 SHORT $L1366

; 259  :     {
; 260  :       tab_Means = (float *)tab_ASK12_V_Means;

  00056	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _tab_Means$[ebp], OFFSET FLAT:_tab_ASK12_V_Means

; 261  :       tab_Pred = (float **)ptab_ASK12_V_Pred;

  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _tab_Pred$[ebp], OFFSET FLAT:_ptab_ASK12_V_Pred

; 262  :       ASKCB_mblk[0] = (RS2StageVQ_MBlk *)&ASK0_1_V_mblk;

  00064	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _ASKCB_mblk$[ebp], OFFSET FLAT:_ASK0_1_V_mblk

; 263  :     } 
; 264  :   else 

  0006b	eb 15		 jmp	 SHORT $L1370
$L1366:

; 265  :     {
; 266  :       tab_Means = (float *)tab_ASK12_UV_Means;

  0006d	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _tab_Means$[ebp], OFFSET FLAT:_tab_ASK12_UV_Means

; 267  :       tab_Pred = (float **)ptab_ASK12_UV_Pred;

  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _tab_Pred$[ebp], OFFSET FLAT:_ptab_ASK12_UV_Pred

; 268  :       ASKCB_mblk[0] = (RS2StageVQ_MBlk *)&ASK0_1_UV_mblk;

  0007b	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _ASKCB_mblk$[ebp], OFFSET FLAT:_ASK0_1_UV_mblk
$L1370:

; 269  :     }
; 270  :    
; 271  :   ASKCB_mblk[1] = (RS2StageVQ_MBlk *)&ASK2_3_mblk;

  00082	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _ASKCB_mblk$[ebp+4], OFFSET FLAT:_ASK2_3_mblk

; 272  :   ASKCB_mblk[2] = (RS2StageVQ_MBlk *)&ASK4_5_mblk;

  00089	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _ASKCB_mblk$[ebp+8], OFFSET FLAT:_ASK4_5_mblk

; 273  :   ASKCB_mblk[3] = (RS2StageVQ_MBlk *)&ASK6_7_mblk;

  00090	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _ASKCB_mblk$[ebp+12], OFFSET FLAT:_ASK6_7_mblk

; 274  : 
; 275  : 
; 276  :   /*--------------------------------------------
; 277  :     Decode each subvector
; 278  :    --------------------------------------------*/
; 279  :   iFirstLag = 0;

  00097	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _iFirstLag$[ebp], 0

; 280  : 
; 281  :   for (i = 0; i < SUB_VECTORS; i++)

  0009e	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000a5	eb 09		 jmp	 SHORT $L1377
$L1378:
  000a7	8b 55 c8	 mov	 edx, DWORD PTR _i$[ebp]
  000aa	83 c2 01	 add	 edx, 1
  000ad	89 55 c8	 mov	 DWORD PTR _i$[ebp], edx
$L1377:
  000b0	83 7d c8 06	 cmp	 DWORD PTR _i$[ebp], 6
  000b4	0f 8d 07 01 00
	00		 jge	 $L1379

; 282  :      {
; 283  :        if (i < MSVQ_PAIRS) {

  000ba	83 7d c8 04	 cmp	 DWORD PTR _i$[ebp], 4
  000be	7d 70		 jge	 SHORT $L1380

; 284  : 
; 285  :          /*--------------------------------------------------
; 286  :            Decode residual using RSMSVQ.
; 287  :            --------------------------------------------------*/
; 288  :          RS2StageVQ2Dec(STACK_S &(piIndices[iFirstLag]), 
; 289  :                         &(pfZMCoef[iFirstLag]), 
; 290  :                         ASKCB_mblk[i]->iStage1Size,
; 291  :                         ASKCB_mblk[i]->pfStage1CB,
; 292  :                         ASKCB_mblk[i]->pfRotScaleCB,
; 293  :                         ASKCB_mblk[i]->iStage2Size,
; 294  :                         ASKCB_mblk[i]->pfStage2InCellCB,
; 295  :                         ASKCB_mblk[i]->pfStage2OutCellCB,
; 296  :                         ASKCB_mblk[i]->iNumOfOutCell,
; 297  :                         ASKCB_mblk[i]->piIndexOfStage2OutCell);

  000c0	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  000c3	8b 4c 85 ac	 mov	 ecx, DWORD PTR _ASKCB_mblk$[ebp+eax*4]
  000c7	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000ca	52		 push	 edx
  000cb	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  000ce	8b 4c 85 ac	 mov	 ecx, DWORD PTR _ASKCB_mblk$[ebp+eax*4]
  000d2	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000d5	52		 push	 edx
  000d6	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  000d9	8b 4c 85 ac	 mov	 ecx, DWORD PTR _ASKCB_mblk$[ebp+eax*4]
  000dd	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000e0	52		 push	 edx
  000e1	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  000e4	8b 4c 85 ac	 mov	 ecx, DWORD PTR _ASKCB_mblk$[ebp+eax*4]
  000e8	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000eb	52		 push	 edx
  000ec	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  000ef	8b 4c 85 ac	 mov	 ecx, DWORD PTR _ASKCB_mblk$[ebp+eax*4]
  000f3	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000f6	52		 push	 edx
  000f7	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  000fa	8b 4c 85 ac	 mov	 ecx, DWORD PTR _ASKCB_mblk$[ebp+eax*4]
  000fe	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00101	52		 push	 edx
  00102	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  00105	8b 4c 85 ac	 mov	 ecx, DWORD PTR _ASKCB_mblk$[ebp+eax*4]
  00109	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0010c	52		 push	 edx
  0010d	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  00110	8b 4c 85 ac	 mov	 ecx, DWORD PTR _ASKCB_mblk$[ebp+eax*4]
  00114	8b 11		 mov	 edx, DWORD PTR [ecx]
  00116	52		 push	 edx
  00117	8b 45 c4	 mov	 eax, DWORD PTR _iFirstLag$[ebp]
  0011a	8d 4c 85 cc	 lea	 ecx, DWORD PTR _pfZMCoef$[ebp+eax*4]
  0011e	51		 push	 ecx
  0011f	8b 55 c4	 mov	 edx, DWORD PTR _iFirstLag$[ebp]
  00122	8b 45 08	 mov	 eax, DWORD PTR _piIndices$[ebp]
  00125	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00128	51		 push	 ecx
  00129	e8 00 00 00 00	 call	 _RS2StageVQ2Dec@40

; 298  :        }
; 299  :        else {

  0012e	eb 3b		 jmp	 SHORT $L1381
$L1380:

; 300  :           j = i-MSVQ_PAIRS;

  00130	8b 55 c8	 mov	 edx, DWORD PTR _i$[ebp]
  00133	83 ea 04	 sub	 edx, 4
  00136	89 55 a4	 mov	 DWORD PTR _j$[ebp], edx

; 301  :          /*--------------------------------------------
; 302  :            Decode the residual using 2-dimensional VQ
; 303  :            --------------------------------------------*/
; 304  :          Dim2VectorLUT( piIndices[iFirstLag], 
; 305  :                         pASK8_11_VQ[j]->fCodeBook, 
; 306  :                         pASK8_11_VQ[j]->iCodebookSize,
; 307  :                         &pfZMCoef[iFirstLag]);

  00139	8b 45 c4	 mov	 eax, DWORD PTR _iFirstLag$[ebp]
  0013c	8d 4c 85 cc	 lea	 ecx, DWORD PTR _pfZMCoef$[ebp+eax*4]
  00140	51		 push	 ecx
  00141	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00144	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _pASK8_11_VQ[edx*4]
  0014b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014d	51		 push	 ecx
  0014e	8b 55 a4	 mov	 edx, DWORD PTR _j$[ebp]
  00151	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _pASK8_11_VQ[edx*4]
  00158	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0015b	51		 push	 ecx
  0015c	8b 55 c4	 mov	 edx, DWORD PTR _iFirstLag$[ebp]
  0015f	8b 45 08	 mov	 eax, DWORD PTR _piIndices$[ebp]
  00162	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00165	51		 push	 ecx
  00166	e8 00 00 00 00	 call	 _Dim2VectorLUT@16
$L1381:

; 308  :        }
; 309  :          
; 310  :        /*--------------------------------------------
; 311  :          predict the ASK values
; 312  :          --------------------------------------------*/
; 313  :          CompPredCoef(pfZMCoef, iFirstLag, 
; 314  :                       tab_Pred[i], pfPredCoef, SUB_DIMENSION);

  0016b	6a 02		 push	 2
  0016d	8d 55 bc	 lea	 edx, DWORD PTR _pfPredCoef$[ebp]
  00170	52		 push	 edx
  00171	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  00174	8b 4d fc	 mov	 ecx, DWORD PTR _tab_Pred$[ebp]
  00177	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0017a	52		 push	 edx
  0017b	8b 45 c4	 mov	 eax, DWORD PTR _iFirstLag$[ebp]
  0017e	50		 push	 eax
  0017f	8d 4d cc	 lea	 ecx, DWORD PTR _pfZMCoef$[ebp]
  00182	51		 push	 ecx
  00183	e8 00 00 00 00	 call	 _CompPredCoef@20

; 315  : 
; 316  :        /*--------------------------------------------
; 317  :          Add predicted value to decoded residual
; 318  :          --------------------------------------------*/
; 319  :         pfZMCoef[iFirstLag++] += pfPredCoef[0];

  00188	8b 55 c4	 mov	 edx, DWORD PTR _iFirstLag$[ebp]
  0018b	d9 45 bc	 fld	 DWORD PTR _pfPredCoef$[ebp]
  0018e	d8 44 95 cc	 fadd	 DWORD PTR _pfZMCoef$[ebp+edx*4]
  00192	8b 45 c4	 mov	 eax, DWORD PTR _iFirstLag$[ebp]
  00195	d9 5c 85 cc	 fstp	 DWORD PTR _pfZMCoef$[ebp+eax*4]
  00199	8b 4d c4	 mov	 ecx, DWORD PTR _iFirstLag$[ebp]
  0019c	83 c1 01	 add	 ecx, 1
  0019f	89 4d c4	 mov	 DWORD PTR _iFirstLag$[ebp], ecx

; 320  :         pfZMCoef[iFirstLag++] += pfPredCoef[1];

  001a2	8b 55 c4	 mov	 edx, DWORD PTR _iFirstLag$[ebp]
  001a5	d9 45 c0	 fld	 DWORD PTR _pfPredCoef$[ebp+4]
  001a8	d8 44 95 cc	 fadd	 DWORD PTR _pfZMCoef$[ebp+edx*4]
  001ac	8b 45 c4	 mov	 eax, DWORD PTR _iFirstLag$[ebp]
  001af	d9 5c 85 cc	 fstp	 DWORD PTR _pfZMCoef$[ebp+eax*4]
  001b3	8b 4d c4	 mov	 ecx, DWORD PTR _iFirstLag$[ebp]
  001b6	83 c1 01	 add	 ecx, 1
  001b9	89 4d c4	 mov	 DWORD PTR _iFirstLag$[ebp], ecx

; 321  :      }

  001bc	e9 e6 fe ff ff	 jmp	 $L1378
$L1379:

; 322  : 
; 323  :   /*--------------------------------------------
; 324  :     Add the mean value to the ASKs
; 325  :     --------------------------------------------*/
; 326  :   for (i=0; i<iOrder; i++)

  001c1	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001c8	eb 09		 jmp	 SHORT $L1382
$L1383:
  001ca	8b 55 c8	 mov	 edx, DWORD PTR _i$[ebp]
  001cd	83 c2 01	 add	 edx, 1
  001d0	89 55 c8	 mov	 DWORD PTR _i$[ebp], edx
$L1382:
  001d3	8b 45 c8	 mov	 eax, DWORD PTR _i$[ebp]
  001d6	3b 45 10	 cmp	 eax, DWORD PTR _iOrder$[ebp]
  001d9	7d 1b		 jge	 SHORT $L1351

; 327  :     pfCoef[i] = pfZMCoef[i] + tab_Means[i];

  001db	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  001de	8b 55 c8	 mov	 edx, DWORD PTR _i$[ebp]
  001e1	8b 45 a8	 mov	 eax, DWORD PTR _tab_Means$[ebp]
  001e4	d9 44 8d cc	 fld	 DWORD PTR _pfZMCoef$[ebp+ecx*4]
  001e8	d8 04 90	 fadd	 DWORD PTR [eax+edx*4]
  001eb	8b 4d c8	 mov	 ecx, DWORD PTR _i$[ebp]
  001ee	8b 55 0c	 mov	 edx, DWORD PTR _pfCoef$[ebp]
  001f1	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]
  001f4	eb d4		 jmp	 SHORT $L1383
$L1351:

; 328  : 
; 329  : STACK_END
; 330  : }

  001f6	8b e5		 mov	 esp, ebp
  001f8	5d		 pop	 ebp
  001f9	c2 10 00	 ret	 16			; 00000010H
_VoxMSVQDecPred@16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@OALFJAOM@pfZMCoef?5?$CB?$DN?5NULL?5?$CG?$CG?5pfPredCoef?5?$CB@ ; `string'
;	COMDAT ??_C@_0CH@OALFJAOM@pfZMCoef?5?$CB?$DN?5NULL?5?$CG?$CG?5pfPredCoef?5?$CB@
CONST	SEGMENT
??_C@_0CH@OALFJAOM@pfZMCoef?5?$CB?$DN?5NULL?5?$CG?$CG?5pfPredCoef?5?$CB@ DB 'p'
	DB	'fZMCoef != NULL && pfPredCoef != NULL', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _CompPredCoef@20
_TEXT	SEGMENT
_j$ = -16
_i$ = -12
_pfPredTab$ = -8
_rPred$ = -4
_pfZMCoef$ = 8
_iNumPredOrd$ = 12
_tab_Pred$ = 16
_pfPredCoef$ = 20
_iSubDim$ = 24
_CompPredCoef@20 PROC NEAR				; COMDAT

; 365  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 366  :   register int i, j;
; 367  :   register float rPred;
; 368  :   float *pfPredTab;
; 369  : 
; 370  :   assert(pfZMCoef != NULL && pfPredCoef != NULL);

  00007	83 7d 08 00	 cmp	 DWORD PTR _pfZMCoef$[ebp], 0
  0000b	74 06		 je	 SHORT $L1440
  0000d	83 7d 14 00	 cmp	 DWORD PTR _pfPredCoef$[ebp], 0
  00011	75 17		 jne	 SHORT $L1441
$L1440:
  00013	68 72 01 00 00	 push	 370			; 00000172H
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@HKCJCIIE@c?3?2xbox?2private?2windows?2directx?2@
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@OALFJAOM@pfZMCoef?5?$CB?$DN?5NULL?5?$CG?$CG?5pfPredCoef?5?$CB@
  00022	e8 00 00 00 00	 call	 __assert
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1441:

; 371  : 
; 372  :   for (i = 0; i < iSubDim; i++) {

  0002a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00031	eb 09		 jmp	 SHORT $L1404
$L1405:
  00033	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00036	83 c1 01	 add	 ecx, 1
  00039	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$L1404:
  0003c	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0003f	3b 55 18	 cmp	 edx, DWORD PTR _iSubDim$[ebp]
  00042	7d 59		 jge	 SHORT $L1395

; 373  :     rPred = 0.0F;

  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rPred$[ebp], 0

; 374  :     pfPredTab = (float *)&(tab_Pred[i*iNumPredOrd]);

  0004b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0004e	0f af 45 0c	 imul	 eax, DWORD PTR _iNumPredOrd$[ebp]
  00052	8b 4d 10	 mov	 ecx, DWORD PTR _tab_Pred$[ebp]
  00055	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00058	89 55 f8	 mov	 DWORD PTR _pfPredTab$[ebp], edx

; 375  :     for (j = 0; j < iNumPredOrd; j++)

  0005b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00062	eb 09		 jmp	 SHORT $L1408
$L1409:
  00064	8b 45 f0	 mov	 eax, DWORD PTR _j$[ebp]
  00067	83 c0 01	 add	 eax, 1
  0006a	89 45 f0	 mov	 DWORD PTR _j$[ebp], eax
$L1408:
  0006d	8b 4d f0	 mov	 ecx, DWORD PTR _j$[ebp]
  00070	3b 4d 0c	 cmp	 ecx, DWORD PTR _iNumPredOrd$[ebp]
  00073	7d 1a		 jge	 SHORT $L1410

; 376  :       rPred += pfPredTab[j] * pfZMCoef[j];

  00075	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  00078	8b 45 f8	 mov	 eax, DWORD PTR _pfPredTab$[ebp]
  0007b	8b 4d f0	 mov	 ecx, DWORD PTR _j$[ebp]
  0007e	8b 75 08	 mov	 esi, DWORD PTR _pfZMCoef$[ebp]
  00081	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00084	d8 0c 8e	 fmul	 DWORD PTR [esi+ecx*4]
  00087	d8 45 fc	 fadd	 DWORD PTR _rPred$[ebp]
  0008a	d9 5d fc	 fstp	 DWORD PTR _rPred$[ebp]
  0008d	eb d5		 jmp	 SHORT $L1409
$L1410:

; 377  : 
; 378  :     pfPredCoef[i] = rPred;

  0008f	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00092	8b 45 14	 mov	 eax, DWORD PTR _pfPredCoef$[ebp]
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _rPred$[ebp]
  00098	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 379  :   }

  0009b	eb 96		 jmp	 SHORT $L1405
$L1395:

; 380  : }

  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 14 00	 ret	 20			; 00000014H
_CompPredCoef@20 ENDP
_TEXT	ENDS
END
