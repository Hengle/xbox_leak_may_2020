; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\voicld.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DP@POPGNNJN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@HAONGGNP@pfSW?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoicingLD@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FindBand4VoicLD@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_tfWinSpec DD	03c9be4cdr			; 0.01903
	DD	03ca7c67fr			; 0.0204804
	DD	03cbef1ear			; 0.0233087
	DD	03cd7975br			; 0.0263173
	DD	03cf1c073r			; 0.0295107
	DD	03d06bb49r			; 0.0328935
	DD	03d156166r			; 0.0364698
	DD	03d24d6f4r			; 0.0402441
	DD	03d35202br			; 0.0442201
	DD	03d464118r			; 0.0484019
	DD	03d583d96r			; 0.0527931
	DD	03d6b194er			; 0.0573972
	DD	03d7ed7b4r			; 0.0622174
	DD	03d89be01r			; 0.0672569
	DD	03d94849dr			; 0.0725186
	DD	03d9fc10fr			; 0.0780049
	DD	03dab7498r			; 0.0837185
	DD	03db7a05ar			; 0.0896613
	DD	03dc44551r			; 0.0958353
	DD	03dd16458r			; 0.102242
	DD	03ddefe24r			; 0.108883
	DD	03ded1345r			; 0.115759
	DD	03dfba426r			; 0.122872
	DD	03e055882r			; 0.13022
	DD	03e0d1cfer			; 0.137806
	DD	03e151f7er			; 0.145628
	DD	03e1d5fe3r			; 0.153686
	DD	03e25ddfcr			; 0.16198
	DD	03e2e997er			; 0.170507
	DD	03e37920br			; 0.179268
	DD	03e40c72dr			; 0.18826
	DD	03e4a3859r			; 0.197481
	DD	03e53e4ear			; 0.206928
	DD	03e5dcc27r			; 0.216599
	DD	03e67ed3er			; 0.226491
	DD	03e724747r			; 0.2366
	DD	03e7cd942r			; 0.246923
	DD	03e83d10cr			; 0.257454
	DD	03e89504cr			; 0.268191
	DD	03e8ee9c0r			; 0.279127
	DD	03e949cb8r			; 0.290258
	DD	03e9a687br			; 0.301578
	DD	03ea04c43r			; 0.313082
	DD	03ea6473fr			; 0.324762
	DD	03eac5894r			; 0.336613
	DD	03eb27f5br			; 0.348628
	DD	03eb8baa1r			; 0.360799
	DD	03ebf096cr			; 0.373119
	DD	03ec56ab3r			; 0.38558
	DD	03ecbdd67r			; 0.398174
	DD	03ed2606br			; 0.410892
	DD	03ed8f29cr			; 0.423726
	DD	03edf92cbr			; 0.436667
	DD	03ee63fc1r			; 0.449705
	DD	03eecf83fr			; 0.462831
	DD	03ef3bafcr			; 0.476036
	DD	03efa86a7r			; 0.489309
	DD	03f00acf5r			; 0.502639
	DD	03f0419b2r			; 0.516017
	DD	03f0788d7r			; 0.529432
	DD	03f0af9afr			; 0.542872
	DD	03f0e6b80r			; 0.556328
	DD	03f11dd8er			; 0.569787
	DD	03f154f1ar			; 0.583238
	DD	03f18bf64r			; 0.59667
	DD	03f1c2da8r			; 0.610072
	DD	03f1f9922r			; 0.62343
	DD	03f23010br			; 0.636735
	DD	03f26649cr			; 0.649973
	DD	03f29c30cr			; 0.663132
	DD	03f2d1b90r			; 0.676202
	DD	03f306d61r			; 0.689169
	DD	03f33b7b3r			; 0.702022
	DD	03f36f9bcr			; 0.714748
	DD	03f3a32b3r			; 0.727336
	DD	03f3d61cer			; 0.739774
	DD	03f408645r			; 0.752049
	DD	03f439f51r			; 0.76415
	DD	03f46ac2cr			; 0.776065
	DD	03f49ac13r			; 0.787782
	DD	03f4c9e44r			; 0.79929
	DD	03f4f81fer			; 0.810577
	DD	03f525686r			; 0.821633
	DD	03f551b20r			; 0.832445
	DD	03f57cf17r			; 0.843004
	DD	03f5a71b5r			; 0.853298
	DD	03f5d024cr			; 0.863316
	DD	03f5f802er			; 0.87305
	DD	03f61eab5r			; 0.882488
	DD	03f64413dr			; 0.89162
	DD	03f668326r			; 0.900439
	DD	03f68afd6r			; 0.908933
	DD	03f6ac6bar			; 0.917095
	DD	03f6cc740r			; 0.924915
	DD	03f6eb0e0r			; 0.932386
	DD	03f708315r			; 0.9395
	DD	03f723d60r			; 0.946249
	DD	03f73df4ar			; 0.952626
	DD	03f756861r			; 0.958624
	DD	03f76d839r			; 0.964237
	DD	03f782e6er			; 0.969458
	DD	03f796aa2r			; 0.974283
	DD	03f7a8c7fr			; 0.978706
	DD	03f7b93b4r			; 0.982723
	DD	03f7c7ff9r			; 0.986328
	DD	03f7d510dr			; 0.989518
	DD	03f7e06b5r			; 0.99229
	DD	03f7ea0c1r			; 0.99464
	DD	03f7f1f05r			; 0.996567
	DD	03f7f815er			; 0.998068
	DD	03f7fc7b2r			; 0.999141
	DD	03f7ff1ebr			; 0.999785
	DD	03f800000r			; 1
	DD	03f7ff1ebr			; 0.999785
	DD	03f7fc7b2r			; 0.999141
	DD	03f7f815er			; 0.998068
	DD	03f7f1f05r			; 0.996567
	DD	03f7ea0c1r			; 0.99464
	DD	03f7e06b5r			; 0.99229
	DD	03f7d510dr			; 0.989518
	DD	03f7c7ff9r			; 0.986328
	DD	03f7b93b4r			; 0.982723
	DD	03f7a8c7fr			; 0.978706
	DD	03f796aa2r			; 0.974283
	DD	03f782e6er			; 0.969458
	DD	03f76d839r			; 0.964237
	DD	03f756861r			; 0.958624
	DD	03f73df4ar			; 0.952626
	DD	03f723d60r			; 0.946249
	DD	03f708315r			; 0.9395
	DD	03f6eb0e0r			; 0.932386
	DD	03f6cc740r			; 0.924915
	DD	03f6ac6bar			; 0.917095
	DD	03f68afd6r			; 0.908933
	DD	03f668326r			; 0.900439
	DD	03f64413dr			; 0.89162
	DD	03f61eab5r			; 0.882488
	DD	03f5f802er			; 0.87305
	DD	03f5d024cr			; 0.863316
	DD	03f5a71b5r			; 0.853298
	DD	03f57cf17r			; 0.843004
	DD	03f551b20r			; 0.832445
	DD	03f525686r			; 0.821633
	DD	03f4f81fer			; 0.810577
	DD	03f4c9e44r			; 0.79929
	DD	03f49ac13r			; 0.787782
	DD	03f46ac2cr			; 0.776065
	DD	03f439f51r			; 0.76415
	DD	03f408645r			; 0.752049
	DD	03f3d61cer			; 0.739774
	DD	03f3a32b3r			; 0.727336
	DD	03f36f9bcr			; 0.714748
	DD	03f33b7b3r			; 0.702022
	DD	03f306d61r			; 0.689169
	DD	03f2d1b90r			; 0.676202
	DD	03f29c30cr			; 0.663132
	DD	03f26649cr			; 0.649973
	DD	03f23010br			; 0.636735
	DD	03f1f9922r			; 0.62343
	DD	03f1c2da8r			; 0.610072
	DD	03f18bf64r			; 0.59667
	DD	03f154f1ar			; 0.583238
	DD	03f11dd8er			; 0.569787
	DD	03f0e6b80r			; 0.556328
	DD	03f0af9afr			; 0.542872
	DD	03f0788d7r			; 0.529432
	DD	03f0419b2r			; 0.516017
	DD	03f00acf5r			; 0.502639
	DD	03efa86a7r			; 0.489309
	DD	03ef3bafcr			; 0.476036
	DD	03eecf83fr			; 0.462831
	DD	03ee63fc1r			; 0.449705
	DD	03edf92cbr			; 0.436667
	DD	03ed8f29cr			; 0.423726
	DD	03ed2606br			; 0.410892
	DD	03ecbdd67r			; 0.398174
	DD	03ec56ab3r			; 0.38558
	DD	03ebf096cr			; 0.373119
	DD	03eb8baa1r			; 0.360799
	DD	03eb27f5br			; 0.348628
	DD	03eac5894r			; 0.336613
	DD	03ea6473fr			; 0.324762
	DD	03ea04c43r			; 0.313082
	DD	03e9a687br			; 0.301578
	DD	03e949cb8r			; 0.290258
	DD	03e8ee9c0r			; 0.279127
	DD	03e89504cr			; 0.268191
	DD	03e83d10cr			; 0.257454
	DD	03e7cd942r			; 0.246923
	DD	03e724747r			; 0.2366
	DD	03e67ed3er			; 0.226491
	DD	03e5dcc27r			; 0.216599
	DD	03e53e4ear			; 0.206928
	DD	03e4a3859r			; 0.197481
	DD	03e40c72dr			; 0.18826
	DD	03e37920br			; 0.179268
	DD	03e2e997er			; 0.170507
	DD	03e25ddfcr			; 0.16198
	DD	03e1d5fe3r			; 0.153686
	DD	03e151f7er			; 0.145628
	DD	03e0d1cfer			; 0.137806
	DD	03e055882r			; 0.13022
	DD	03dfba426r			; 0.122872
	DD	03ded1345r			; 0.115759
	DD	03ddefe24r			; 0.108883
	DD	03dd16458r			; 0.102242
	DD	03dc44551r			; 0.0958353
	DD	03db7a05ar			; 0.0896613
	DD	03dab7498r			; 0.0837185
	DD	03d9fc10fr			; 0.0780049
	DD	03d94849dr			; 0.0725186
	DD	03d89be01r			; 0.0672569
	DD	03d7ed7b4r			; 0.0622174
	DD	03d6b194er			; 0.0573972
	DD	03d583d96r			; 0.0527931
	DD	03d464118r			; 0.0484019
	DD	03d35202br			; 0.0442201
	DD	03d24d6f4r			; 0.0402441
	DD	03d156166r			; 0.0364698
	DD	03d06bb49r			; 0.0328935
	DD	03cf1c073r			; 0.0295107
	DD	03cd7975br			; 0.0263173
	DD	03cbef1ear			; 0.0233087
	DD	03ca7c67fr			; 0.0204804
CONST	ENDS
PUBLIC	__real@44000000
PUBLIC	__real@47000000
PUBLIC	__real@3f800000
PUBLIC	_VoicingLD@12
PUBLIC	??_C@_0DP@POPGNNJN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0N@HAONGGNP@pfSW?5?$CB?$DN?5NULL?$AA@	; `string'
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
EXTRN	__assert:NEAR
;	COMDAT ??_C@_0DP@POPGNNJN@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\voicld.c
CONST	SEGMENT
??_C@_0DP@POPGNNJN@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\voicld.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HAONGGNP@pfSW?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0N@HAONGGNP@pfSW?5?$CB?$DN?5NULL?$AA@ DB 'pfSW != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT __real@44000000
CONST	SEGMENT
__real@44000000 DD 044000000r			; 512
CONST	ENDS
;	COMDAT __real@47000000
CONST	SEGMENT
__real@47000000 DD 047000000r			; 32768
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoicingLD@12
_TEXT	SEGMENT
_lHarmF0$ = -84
_j$ = -80
_ftmp$ = -76
_fErr2$ = -72
_fHarmMagImag$ = -68
_iHF0$ = -64
_fTotalPower$ = -60
_fF0$ = -56
_iNHarm$ = -52
_ptmpSW$ = -48
_lF0$ = -44
_fErr1$ = -40
_lBandWdth$ = -36
_fTotalError$ = -32
_i$ = -28
_iWinIndex$ = -24
_fVoicing$ = -20
_iLeftBound$ = -16
_iRightBound$ = -12
_fHarmMagReal$ = -8
_pfFWinCt$ = -4
_fPitch$ = 8
_pfSW$ = 12
_iNBand$ = 16
_VoicingLD@12 PROC NEAR					; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H

; 97   :    const float *pfFWinCt = &(tfWinSpec[REFINE_SPEC_SIZE]); /* shift to center */

  00006	c7 45 fc c0 01
	00 00		 mov	 DWORD PTR _pfFWinCt$[ebp], OFFSET FLAT:_tfWinSpec+448

; 98   :    float fF0;
; 99   :    int iNHarm;
; 100  :    long lF0, lBandWdth;
; 101  :    int iLeftBound, iRightBound;
; 102  :    long lHarmF0;
; 103  :    int i, j;
; 104  :    int iHF0;
; 105  :    float ftmp;
; 106  :    float fHarmMagReal, fHarmMagImag;
; 107  :    float fErr1, fErr2;
; 108  :    float fTotalError, fTotalPower;
; 109  :    float *ptmpSW;
; 110  :    int iWinIndex;
; 111  :    float fVoicing = 0.0F;

  0000d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _fVoicing$[ebp], 0

; 112  : 
; 113  :    assert(pfSW != NULL);

  00014	83 7d 0c 00	 cmp	 DWORD PTR _pfSW$[ebp], 0
  00018	75 14		 jne	 SHORT $L1039
  0001a	6a 71		 push	 113			; 00000071H
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@POPGNNJN@c?3?2xbox?2private?2windows?2directx?2@
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@HAONGGNP@pfSW?5?$CB?$DN?5NULL?$AA@
  00026	e8 00 00 00 00	 call	 __assert
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1039:

; 114  : 
; 115  :    /*** initializing fF0 -- F0 in DFT domain ***/
; 116  :    fF0 = (float)NFFT/fPitch;

  0002e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@44000000
  00034	d8 75 08	 fdiv	 DWORD PTR _fPitch$[ebp]
  00037	d9 5d c8	 fstp	 DWORD PTR _fF0$[ebp]

; 117  : 
; 118  :    /*** initializing iNHarm -- number of harmonics within [0 iNBand] ***/
; 119  :    iNHarm = (int)VoxFLOORpos((float)iNBand / fF0);

  0003a	db 45 10	 fild	 DWORD PTR _iNBand$[ebp]
  0003d	d8 75 c8	 fdiv	 DWORD PTR _fF0$[ebp]
  00040	e8 00 00 00 00	 call	 __ftol2
  00045	89 45 cc	 mov	 DWORD PTR _iNHarm$[ebp], eax

; 120  : 
; 121  :    /*** shift fF0 by REF_F0_SHIFT_BITS to get fix-point lF0 ***/
; 122  :    ftmp = REF_F0_SHIFT_SCALE * fF0;

  00048	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@47000000
  0004e	d8 4d c8	 fmul	 DWORD PTR _fF0$[ebp]
  00051	d9 5d b4	 fstp	 DWORD PTR _ftmp$[ebp]

; 123  :    VoxROUND2pos(ftmp, lF0);

  00054	d9 45 b4	 fld	 DWORD PTR _ftmp$[ebp]
  00057	db 5d d4	 fistp	 DWORD PTR _lF0$[ebp]

; 124  : 
; 125  :    /*** initialize fix point bandwidth ***/
; 126  :    lBandWdth = lF0 >> 1;

  0005a	8b 4d d4	 mov	 ecx, DWORD PTR _lF0$[ebp]
  0005d	d1 f9		 sar	 ecx, 1
  0005f	89 4d dc	 mov	 DWORD PTR _lBandWdth$[ebp], ecx

; 127  : 
; 128  :    /*** right boundary for each harmonics: round((i+0.5)*F0): i refers to 
; 129  :      i'th harmonic ***/
; 130  :    iRightBound = (int)((lBandWdth+REF_SCALED_05)>>REF_F0_SHIFT_BITS);

  00062	8b 55 dc	 mov	 edx, DWORD PTR _lBandWdth$[ebp]
  00065	81 c2 00 40 00
	00		 add	 edx, 16384		; 00004000H
  0006b	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  0006e	89 55 f4	 mov	 DWORD PTR _iRightBound$[ebp], edx

; 131  : 
; 132  :    /** compute reconstructed spectrum and compare it with original spectrum. **/
; 133  :    lHarmF0 = 0L;

  00071	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _lHarmF0$[ebp], 0

; 134  :    for (j=1; j<=iNHarm; j++) {

  00078	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _j$[ebp], 1
  0007f	eb 09		 jmp	 SHORT $L998
$L999:
  00081	8b 45 b0	 mov	 eax, DWORD PTR _j$[ebp]
  00084	83 c0 01	 add	 eax, 1
  00087	89 45 b0	 mov	 DWORD PTR _j$[ebp], eax
$L998:
  0008a	8b 4d b0	 mov	 ecx, DWORD PTR _j$[ebp]
  0008d	3b 4d cc	 cmp	 ecx, DWORD PTR _iNHarm$[ebp]
  00090	0f 8f b7 01 00
	00		 jg	 $L1000

; 135  : 
; 136  :      /*** update the left boundary and right boundary ***/
; 137  :      lHarmF0 += lF0;

  00096	8b 55 ac	 mov	 edx, DWORD PTR _lHarmF0$[ebp]
  00099	03 55 d4	 add	 edx, DWORD PTR _lF0$[ebp]
  0009c	89 55 ac	 mov	 DWORD PTR _lHarmF0$[ebp], edx

; 138  :      iLeftBound = iRightBound;

  0009f	8b 45 f4	 mov	 eax, DWORD PTR _iRightBound$[ebp]
  000a2	89 45 f0	 mov	 DWORD PTR _iLeftBound$[ebp], eax

; 139  :      iRightBound = (int)((lBandWdth+lHarmF0+REF_SCALED_05)
; 140  :                                 >>REF_F0_SHIFT_BITS);

  000a5	8b 4d ac	 mov	 ecx, DWORD PTR _lHarmF0$[ebp]
  000a8	8b 55 dc	 mov	 edx, DWORD PTR _lBandWdth$[ebp]
  000ab	8d 84 0a 00 40
	00 00		 lea	 eax, DWORD PTR [edx+ecx+16384]
  000b2	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  000b5	89 45 f4	 mov	 DWORD PTR _iRightBound$[ebp], eax

; 141  : 
; 142  :      /*** Get the magnitude of j'th harmonic ***/
; 143  :      iHF0 = (int)((lHarmF0+REF_SCALED_05)>>REF_F0_SHIFT_BITS);

  000b8	8b 4d ac	 mov	 ecx, DWORD PTR _lHarmF0$[ebp]
  000bb	81 c1 00 40 00
	00		 add	 ecx, 16384		; 00004000H
  000c1	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  000c4	89 4d c0	 mov	 DWORD PTR _iHF0$[ebp], ecx

; 144  : 
; 145  :      ptmpSW = (float *)(&(pfSW[iHF0 << 1]));

  000c7	8b 55 c0	 mov	 edx, DWORD PTR _iHF0$[ebp]
  000ca	d1 e2		 shl	 edx, 1
  000cc	8b 45 0c	 mov	 eax, DWORD PTR _pfSW$[ebp]
  000cf	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  000d2	89 4d d0	 mov	 DWORD PTR _ptmpSW$[ebp], ecx

; 146  :      fHarmMagReal = ptmpSW[0];

  000d5	8b 55 d0	 mov	 edx, DWORD PTR _ptmpSW$[ebp]
  000d8	8b 02		 mov	 eax, DWORD PTR [edx]
  000da	89 45 f8	 mov	 DWORD PTR _fHarmMagReal$[ebp], eax

; 147  :      fHarmMagImag = ptmpSW[1];

  000dd	8b 4d d0	 mov	 ecx, DWORD PTR _ptmpSW$[ebp]
  000e0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000e3	89 55 bc	 mov	 DWORD PTR _fHarmMagImag$[ebp], edx

; 148  : 
; 149  :      /**** reconstruct spectrum ****/
; 150  :      fTotalPower = EPS;

  000e6	c7 45 c4 95 95
	e6 24		 mov	 DWORD PTR _fTotalPower$[ebp], 619091349 ; 24e69595H

; 151  :      
; 152  :      /*** initialize window index from j'th harmonic ***/
; 153  :      iWinIndex = (int)(-((lHarmF0+F0_SCALED_05)>>F0_SHIFT_BIT)
; 154  :                        +((long)iLeftBound<<REFINE_SPEC_BITS));

  000ed	8b 45 ac	 mov	 eax, DWORD PTR _lHarmF0$[ebp]
  000f0	05 00 02 00 00	 add	 eax, 512		; 00000200H
  000f5	c1 f8 0a	 sar	 eax, 10			; 0000000aH
  000f8	f7 d8		 neg	 eax
  000fa	8b 4d f0	 mov	 ecx, DWORD PTR _iLeftBound$[ebp]
  000fd	c1 e1 05	 shl	 ecx, 5
  00100	03 c1		 add	 eax, ecx
  00102	89 45 e8	 mov	 DWORD PTR _iWinIndex$[ebp], eax

; 155  : 
; 156  :      /*** Since the indices for pfFWinCt[] is between [-REFINE_SPEC_SIZE
; 157  :           REFINE_SPEC_SIZE]. Outside that range assume window spectra are 0 */
; 158  :      /*** Deal with left side outliers: band error equals to band power ***/
; 159  :      i = iLeftBound;

  00105	8b 55 f0	 mov	 edx, DWORD PTR _iLeftBound$[ebp]
  00108	89 55 e4	 mov	 DWORD PTR _i$[ebp], edx

; 160  :      ptmpSW = (float *)(&(pfSW[i<<1]));

  0010b	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  0010e	d1 e0		 shl	 eax, 1
  00110	8b 4d 0c	 mov	 ecx, DWORD PTR _pfSW$[ebp]
  00113	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00116	89 55 d0	 mov	 DWORD PTR _ptmpSW$[ebp], edx
$L1010:

; 161  :      while (iWinIndex <= (-REFINE_SPEC_SIZE))

  00119	83 7d e8 90	 cmp	 DWORD PTR _iWinIndex$[ebp], -112 ; ffffff90H
  0011d	7f 41		 jg	 SHORT $L1011

; 162  :        {
; 163  :          fErr1 = ptmpSW[0]*ptmpSW[0]+ptmpSW[1]*ptmpSW[1];

  0011f	8b 45 d0	 mov	 eax, DWORD PTR _ptmpSW$[ebp]
  00122	8b 4d d0	 mov	 ecx, DWORD PTR _ptmpSW$[ebp]
  00125	d9 00		 fld	 DWORD PTR [eax]
  00127	d8 09		 fmul	 DWORD PTR [ecx]
  00129	8b 55 d0	 mov	 edx, DWORD PTR _ptmpSW$[ebp]
  0012c	8b 45 d0	 mov	 eax, DWORD PTR _ptmpSW$[ebp]
  0012f	d9 42 04	 fld	 DWORD PTR [edx+4]
  00132	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00135	de c1		 faddp	 ST(1), ST(0)
  00137	d9 5d d8	 fstp	 DWORD PTR _fErr1$[ebp]

; 164  : 
; 165  : 	 fTotalPower += fErr1;

  0013a	d9 45 c4	 fld	 DWORD PTR _fTotalPower$[ebp]
  0013d	d8 45 d8	 fadd	 DWORD PTR _fErr1$[ebp]
  00140	d9 5d c4	 fstp	 DWORD PTR _fTotalPower$[ebp]

; 166  : 	 iWinIndex += REFINE_SPEC_SCALE;

  00143	8b 4d e8	 mov	 ecx, DWORD PTR _iWinIndex$[ebp]
  00146	83 c1 20	 add	 ecx, 32			; 00000020H
  00149	89 4d e8	 mov	 DWORD PTR _iWinIndex$[ebp], ecx

; 167  : 	 i++;

  0014c	8b 55 e4	 mov	 edx, DWORD PTR _i$[ebp]
  0014f	83 c2 01	 add	 edx, 1
  00152	89 55 e4	 mov	 DWORD PTR _i$[ebp], edx

; 168  : 	 ptmpSW += 2;

  00155	8b 45 d0	 mov	 eax, DWORD PTR _ptmpSW$[ebp]
  00158	83 c0 08	 add	 eax, 8
  0015b	89 45 d0	 mov	 DWORD PTR _ptmpSW$[ebp], eax

; 169  :        }

  0015e	eb b9		 jmp	 SHORT $L1010
$L1011:

; 170  :      fTotalError = fTotalPower;

  00160	8b 4d c4	 mov	 ecx, DWORD PTR _fTotalPower$[ebp]
  00163	89 4d e0	 mov	 DWORD PTR _fTotalError$[ebp], ecx
$L1013:

; 171  : 
; 172  :      /*** Compute band errors and band power for the center part ***/
; 173  :      while ((iWinIndex < REFINE_SPEC_SIZE) && (i < iRightBound))

  00166	83 7d e8 70	 cmp	 DWORD PTR _iWinIndex$[ebp], 112 ; 00000070H
  0016a	0f 8d 83 00 00
	00		 jge	 $L1016
  00170	8b 55 e4	 mov	 edx, DWORD PTR _i$[ebp]
  00173	3b 55 f4	 cmp	 edx, DWORD PTR _iRightBound$[ebp]
  00176	7d 7b		 jge	 SHORT $L1016

; 174  :        {
; 175  : 	 fTotalPower += ptmpSW[0]*ptmpSW[0] + ptmpSW[1]*ptmpSW[1];

  00178	8b 45 d0	 mov	 eax, DWORD PTR _ptmpSW$[ebp]
  0017b	8b 4d d0	 mov	 ecx, DWORD PTR _ptmpSW$[ebp]
  0017e	d9 00		 fld	 DWORD PTR [eax]
  00180	d8 09		 fmul	 DWORD PTR [ecx]
  00182	8b 55 d0	 mov	 edx, DWORD PTR _ptmpSW$[ebp]
  00185	8b 45 d0	 mov	 eax, DWORD PTR _ptmpSW$[ebp]
  00188	d9 42 04	 fld	 DWORD PTR [edx+4]
  0018b	d8 48 04	 fmul	 DWORD PTR [eax+4]
  0018e	de c1		 faddp	 ST(1), ST(0)
  00190	d8 45 c4	 fadd	 DWORD PTR _fTotalPower$[ebp]
  00193	d9 5d c4	 fstp	 DWORD PTR _fTotalPower$[ebp]

; 176  : 
; 177  : 	 fErr1 = ptmpSW[0] - fHarmMagReal * pfFWinCt[iWinIndex];

  00196	8b 4d e8	 mov	 ecx, DWORD PTR _iWinIndex$[ebp]
  00199	8b 55 fc	 mov	 edx, DWORD PTR _pfFWinCt$[ebp]
  0019c	d9 45 f8	 fld	 DWORD PTR _fHarmMagReal$[ebp]
  0019f	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  001a2	8b 45 d0	 mov	 eax, DWORD PTR _ptmpSW$[ebp]
  001a5	d8 28		 fsubr	 DWORD PTR [eax]
  001a7	d9 5d d8	 fstp	 DWORD PTR _fErr1$[ebp]

; 178  : 	 fErr2 = ptmpSW[1] - fHarmMagImag * pfFWinCt[iWinIndex];

  001aa	8b 4d e8	 mov	 ecx, DWORD PTR _iWinIndex$[ebp]
  001ad	8b 55 fc	 mov	 edx, DWORD PTR _pfFWinCt$[ebp]
  001b0	d9 45 bc	 fld	 DWORD PTR _fHarmMagImag$[ebp]
  001b3	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  001b6	8b 45 d0	 mov	 eax, DWORD PTR _ptmpSW$[ebp]
  001b9	d8 68 04	 fsubr	 DWORD PTR [eax+4]
  001bc	d9 5d b8	 fstp	 DWORD PTR _fErr2$[ebp]

; 179  : 
; 180  : 	 fTotalError += fErr1 * fErr1 + fErr2 * fErr2;

  001bf	d9 45 d8	 fld	 DWORD PTR _fErr1$[ebp]
  001c2	d8 4d d8	 fmul	 DWORD PTR _fErr1$[ebp]
  001c5	d9 45 b8	 fld	 DWORD PTR _fErr2$[ebp]
  001c8	d8 4d b8	 fmul	 DWORD PTR _fErr2$[ebp]
  001cb	de c1		 faddp	 ST(1), ST(0)
  001cd	d8 45 e0	 fadd	 DWORD PTR _fTotalError$[ebp]
  001d0	d9 5d e0	 fstp	 DWORD PTR _fTotalError$[ebp]

; 181  : 	 iWinIndex += REFINE_SPEC_SCALE;

  001d3	8b 4d e8	 mov	 ecx, DWORD PTR _iWinIndex$[ebp]
  001d6	83 c1 20	 add	 ecx, 32			; 00000020H
  001d9	89 4d e8	 mov	 DWORD PTR _iWinIndex$[ebp], ecx

; 182  : 	 i++;

  001dc	8b 55 e4	 mov	 edx, DWORD PTR _i$[ebp]
  001df	83 c2 01	 add	 edx, 1
  001e2	89 55 e4	 mov	 DWORD PTR _i$[ebp], edx

; 183  : 	 ptmpSW += 2;

  001e5	8b 45 d0	 mov	 eax, DWORD PTR _ptmpSW$[ebp]
  001e8	83 c0 08	 add	 eax, 8
  001eb	89 45 d0	 mov	 DWORD PTR _ptmpSW$[ebp], eax

; 184  :        }

  001ee	e9 73 ff ff ff	 jmp	 $L1013
$L1016:

; 185  :      
; 186  :      /*** Deal with right side outliers: band errors equals to band power ***/
; 187  :      while(i < iRightBound) 

  001f3	8b 4d e4	 mov	 ecx, DWORD PTR _i$[ebp]
  001f6	3b 4d f4	 cmp	 ecx, DWORD PTR _iRightBound$[ebp]
  001f9	7d 41		 jge	 SHORT $L1017

; 188  :        {
; 189  : 	 fErr1 = ptmpSW[0]*ptmpSW[0]+ptmpSW[1]*ptmpSW[1]; 

  001fb	8b 55 d0	 mov	 edx, DWORD PTR _ptmpSW$[ebp]
  001fe	8b 45 d0	 mov	 eax, DWORD PTR _ptmpSW$[ebp]
  00201	d9 02		 fld	 DWORD PTR [edx]
  00203	d8 08		 fmul	 DWORD PTR [eax]
  00205	8b 4d d0	 mov	 ecx, DWORD PTR _ptmpSW$[ebp]
  00208	8b 55 d0	 mov	 edx, DWORD PTR _ptmpSW$[ebp]
  0020b	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0020e	d8 4a 04	 fmul	 DWORD PTR [edx+4]
  00211	de c1		 faddp	 ST(1), ST(0)
  00213	d9 5d d8	 fstp	 DWORD PTR _fErr1$[ebp]

; 190  : 	 fTotalPower += fErr1;

  00216	d9 45 c4	 fld	 DWORD PTR _fTotalPower$[ebp]
  00219	d8 45 d8	 fadd	 DWORD PTR _fErr1$[ebp]
  0021c	d9 5d c4	 fstp	 DWORD PTR _fTotalPower$[ebp]

; 191  : 	 fTotalError += fErr1;

  0021f	d9 45 e0	 fld	 DWORD PTR _fTotalError$[ebp]
  00222	d8 45 d8	 fadd	 DWORD PTR _fErr1$[ebp]
  00225	d9 5d e0	 fstp	 DWORD PTR _fTotalError$[ebp]

; 192  : 	 i++;

  00228	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  0022b	83 c0 01	 add	 eax, 1
  0022e	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax

; 193  : 	 ptmpSW += 2;

  00231	8b 4d d0	 mov	 ecx, DWORD PTR _ptmpSW$[ebp]
  00234	83 c1 08	 add	 ecx, 8
  00237	89 4d d0	 mov	 DWORD PTR _ptmpSW$[ebp], ecx

; 194  :        }

  0023a	eb b7		 jmp	 SHORT $L1016
$L1017:

; 195  : 
; 196  :      /**** voicing estimation of each band ****/
; 197  :      fVoicing += fTotalError / fTotalPower; 

  0023c	d9 45 e0	 fld	 DWORD PTR _fTotalError$[ebp]
  0023f	d8 75 c4	 fdiv	 DWORD PTR _fTotalPower$[ebp]
  00242	d8 45 ec	 fadd	 DWORD PTR _fVoicing$[ebp]
  00245	d9 5d ec	 fstp	 DWORD PTR _fVoicing$[ebp]

; 198  :    }

  00248	e9 34 fe ff ff	 jmp	 $L999
$L1000:

; 199  : 
; 200  :    return  (1.0F - fVoicing/(float)iNHarm);

  0024d	db 45 cc	 fild	 DWORD PTR _iNHarm$[ebp]
  00250	d8 7d ec	 fdivr	 DWORD PTR _fVoicing$[ebp]
  00253	d8 2d 00 00 00
	00		 fsubr	 DWORD PTR __real@3f800000

; 201  : } /* VoicingLD() */

  00259	8b e5		 mov	 esp, ebp
  0025b	5d		 pop	 ebp
  0025c	c2 0c 00	 ret	 12			; 0000000cH
_VoicingLD@12 ENDP
_TEXT	ENDS
PUBLIC	__real@4079999a
PUBLIC	_FindBand4VoicLD@8
;	COMDAT __real@4079999a
CONST	SEGMENT
__real@4079999a DD 04079999ar			; 3.9
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _FindBand4VoicLD@8
_TEXT	SEGMENT
_iNewBand$ = -8
_fBand$ = -4
_iBaseBand$ = 8
_fMinPitch$ = 12
_FindBand4VoicLD@8 PROC NEAR				; COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 234  :   int iNewBand;
; 235  :   float fBand;
; 236  : 
; 237  :   fBand = (float)NFFT/(float)fMinPitch;

  00006	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@44000000
  0000c	d8 75 0c	 fdiv	 DWORD PTR _fMinPitch$[ebp]
  0000f	d9 55 fc	 fst	 DWORD PTR _fBand$[ebp]

; 238  :   fBand *= CONST_EXTEND_BAND;

  00012	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@4079999a
  00018	d9 5d fc	 fstp	 DWORD PTR _fBand$[ebp]

; 239  : 
; 240  :   VoxROUND2pos(fBand, iNewBand);

  0001b	d9 45 fc	 fld	 DWORD PTR _fBand$[ebp]
  0001e	db 5d f8	 fistp	 DWORD PTR _iNewBand$[ebp]

; 241  : 
; 242  :   if (iNewBand > iBaseBand)

  00021	8b 45 f8	 mov	 eax, DWORD PTR _iNewBand$[ebp]
  00024	3b 45 08	 cmp	 eax, DWORD PTR _iBaseBand$[ebp]
  00027	7e 06		 jle	 SHORT $L1028

; 243  :     iNewBand = iBaseBand;

  00029	8b 4d 08	 mov	 ecx, DWORD PTR _iBaseBand$[ebp]
  0002c	89 4d f8	 mov	 DWORD PTR _iNewBand$[ebp], ecx
$L1028:

; 244  : 
; 245  :   return iNewBand;

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _iNewBand$[ebp]

; 246  : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
_FindBand4VoicLD@8 ENDP
_TEXT	ENDS
END
