; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\quadpeak.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@JMBBJKIN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@JIDHDNNM@?$CIfY0?5?$DO?$DN?5fY_1?$CJ?5?$CG?$CG?5?$CIfY0?5?$DO?$DN?5fY1?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _QuadraticPeak@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_QuadraticPeak@16
PUBLIC	??_C@_0EB@JMBBJKIN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BO@JIDHDNNM@?$CIfY0?5?$DO?$DN?5fY_1?$CJ?5?$CG?$CG?5?$CIfY0?5?$DO?$DN?5fY1?$CJ?$AA@ ; `string'
PUBLIC	__real@3f000000
PUBLIC	__real@00000000
PUBLIC	__real@40000000
EXTRN	__assert:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0EB@JMBBJKIN@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\quadpeak.c
CONST	SEGMENT
??_C@_0EB@JMBBJKIN@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\quadpeak.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JIDHDNNM@?$CIfY0?5?$DO?$DN?5fY_1?$CJ?5?$CG?$CG?5?$CIfY0?5?$DO?$DN?5fY1?$CJ?$AA@
CONST	SEGMENT
??_C@_0BO@JIDHDNNM@?$CIfY0?5?$DO?$DN?5fY_1?$CJ?5?$CG?$CG?5?$CIfY0?5?$DO?$DN?5fY1?$CJ?$AA@ DB '('
	DB	'fY0 >= fY_1) && (fY0 >= fY1)', 00H		; `string'
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _QuadraticPeak@16
_TEXT	SEGMENT
_c$ = -16
_b$ = -12
_fXpeak$ = -8
_a$ = -4
_fY_1$ = 8
_fY0$ = 12
_fY1$ = 16
_pfYpeak$ = 20
_QuadraticPeak@16 PROC NEAR				; COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 83   :    float a, b, c;   /* the coefficients for quadratic equation */
; 84   :    float fXpeak;
; 85   : 
; 86   :    /* do error checking */
; 87   :    assert((fY0 >= fY_1) && (fY0 >= fY1));

  00006	d9 45 0c	 fld	 DWORD PTR _fY0$[ebp]
  00009	d8 5d 08	 fcomp	 DWORD PTR _fY_1$[ebp]
  0000c	df e0		 fnstsw	 ax
  0000e	f6 c4 01	 test	 ah, 1
  00011	75 0d		 jne	 SHORT $L540
  00013	d9 45 0c	 fld	 DWORD PTR _fY0$[ebp]
  00016	d8 5d 10	 fcomp	 DWORD PTR _fY1$[ebp]
  00019	df e0		 fnstsw	 ax
  0001b	f6 c4 01	 test	 ah, 1
  0001e	74 14		 je	 SHORT $L541
$L540:
  00020	6a 57		 push	 87			; 00000057H
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@JMBBJKIN@c?3?2xbox?2private?2windows?2directx?2@
  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@JIDHDNNM@?$CIfY0?5?$DO?$DN?5fY_1?$CJ?5?$CG?$CG?5?$CIfY0?5?$DO?$DN?5fY1?$CJ?$AA@
  0002c	e8 00 00 00 00	 call	 __assert
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
$L541:

; 88   : 
; 89   :    /* compute the coefficients */
; 90   :    a = (fY_1 + fY1 ) * 0.5F - fY0;

  00034	d9 45 08	 fld	 DWORD PTR _fY_1$[ebp]
  00037	d8 45 10	 fadd	 DWORD PTR _fY1$[ebp]
  0003a	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  00040	d8 65 0c	 fsub	 DWORD PTR _fY0$[ebp]
  00043	d9 5d fc	 fstp	 DWORD PTR _a$[ebp]

; 91   :    b = (fY1  - fY_1) * 0.5F;

  00046	d9 45 10	 fld	 DWORD PTR _fY1$[ebp]
  00049	d8 65 08	 fsub	 DWORD PTR _fY_1$[ebp]
  0004c	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  00052	d9 5d f4	 fstp	 DWORD PTR _b$[ebp]

; 92   :    c = fY0;

  00055	8b 4d 0c	 mov	 ecx, DWORD PTR _fY0$[ebp]
  00058	89 4d f0	 mov	 DWORD PTR _c$[ebp], ecx

; 93   : 
; 94   :    /* compute the peak index */
; 95   :    if (a != 0.0F)

  0005b	d9 45 fc	 fld	 DWORD PTR _a$[ebp]
  0005e	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00064	df e0		 fnstsw	 ax
  00066	f6 c4 44	 test	 ah, 68			; 00000044H
  00069	7b 15		 jnp	 SHORT $L529

; 96   :       fXpeak = - b / (2.0F*a);

  0006b	d9 45 f4	 fld	 DWORD PTR _b$[ebp]
  0006e	d9 e0		 fchs
  00070	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  00076	d8 4d fc	 fmul	 DWORD PTR _a$[ebp]
  00079	de f9		 fdivp	 ST(1), ST(0)
  0007b	d9 5d f8	 fstp	 DWORD PTR _fXpeak$[ebp]

; 97   :    else

  0007e	eb 07		 jmp	 SHORT $L530
$L529:

; 98   :       fXpeak = 0.0F;

  00080	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _fXpeak$[ebp], 0
$L530:

; 99   :   
; 100  :    /* peak value */
; 101  :    *pfYpeak = (a*fXpeak + b)*fXpeak + c;

  00087	d9 45 fc	 fld	 DWORD PTR _a$[ebp]
  0008a	d8 4d f8	 fmul	 DWORD PTR _fXpeak$[ebp]
  0008d	d8 45 f4	 fadd	 DWORD PTR _b$[ebp]
  00090	d8 4d f8	 fmul	 DWORD PTR _fXpeak$[ebp]
  00093	d8 45 f0	 fadd	 DWORD PTR _c$[ebp]
  00096	8b 55 14	 mov	 edx, DWORD PTR _pfYpeak$[ebp]
  00099	d9 1a		 fstp	 DWORD PTR [edx]

; 102  : 
; 103  :    return fXpeak;

  0009b	d9 45 f8	 fld	 DWORD PTR _fXpeak$[ebp]

; 104  : }

  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 10 00	 ret	 16			; 00000010H
_QuadraticPeak@16 ENDP
_TEXT	ENDS
END
