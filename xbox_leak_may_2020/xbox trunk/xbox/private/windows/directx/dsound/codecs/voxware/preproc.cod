; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\preproc.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@MOKIKLLE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CC@EEECKNAA@?$CIpsIn?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfOut?5?$CB?$DN?5NULL@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@NMOGKMPH@hPreProcMblk?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxPreProcess@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxInitPreProc@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxFreePreProc@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_minValue DD	03727c5acr			; 1e-005
CONST	ENDS
PUBLIC	__real@00000000
PUBLIC	_VoxPreProcess@16
PUBLIC	??_C@_0EA@MOKIKLLE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CC@EEECKNAA@?$CIpsIn?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfOut?5?$CB?$DN?5NULL@ ; `string'
PUBLIC	??_C@_0BF@NMOGKMPH@hPreProcMblk?5?$CB?$DN?5NULL?$AA@ ; `string'
EXTRN	__fltused:NEAR
EXTRN	__assert:NEAR
;	COMDAT ??_C@_0EA@MOKIKLLE@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\preproc.c
CONST	SEGMENT
??_C@_0EA@MOKIKLLE@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\preproc.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EEECKNAA@?$CIpsIn?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfOut?5?$CB?$DN?5NULL@
CONST	SEGMENT
??_C@_0CC@EEECKNAA@?$CIpsIn?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfOut?5?$CB?$DN?5NULL@ DB '('
	DB	'psIn != NULL) && (pfOut != NULL)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NMOGKMPH@hPreProcMblk?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BF@NMOGKMPH@hPreProcMblk?5?$CB?$DN?5NULL?$AA@ DB 'hPreProcMblk != '
	DB	'NULL', 00H					; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxPreProcess@16
_TEXT	SEGMENT
tv145 = -24
tv79 = -20
_x1$ = -16
_Coef$ = -12
_x$ = -8
_y$ = -4
_psIn$ = 8
_pfOut$ = 12
_N$ = 16
_hPreProcMblk$ = 20
_VoxPreProcess@16 PROC NEAR				; COMDAT

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 106  :   float x1, x, y;
; 107  :   float Coef = ((PRE_PROC_mblk *)hPreProcMblk)->cPP_Coef;

  00006	8b 45 14	 mov	 eax, DWORD PTR _hPreProcMblk$[ebp]
  00009	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000c	89 4d f4	 mov	 DWORD PTR _Coef$[ebp], ecx

; 108  : 
; 109  :   /***** error checking *****/
; 110  :   assert((psIn != NULL) && (pfOut != NULL));

  0000f	83 7d 08 00	 cmp	 DWORD PTR _psIn$[ebp], 0
  00013	74 06		 je	 SHORT $L1043
  00015	83 7d 0c 00	 cmp	 DWORD PTR _pfOut$[ebp], 0
  00019	75 14		 jne	 SHORT $L1044
$L1043:
  0001b	6a 6e		 push	 110			; 0000006eH
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MOKIKLLE@c?3?2xbox?2private?2windows?2directx?2@
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@EEECKNAA@?$CIpsIn?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpfOut?5?$CB?$DN?5NULL@
  00027	e8 00 00 00 00	 call	 __assert
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1044:

; 111  :   assert(hPreProcMblk != NULL);

  0002f	83 7d 14 00	 cmp	 DWORD PTR _hPreProcMblk$[ebp], 0
  00033	75 14		 jne	 SHORT $L1045
  00035	6a 6f		 push	 111			; 0000006fH
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@MOKIKLLE@c?3?2xbox?2private?2windows?2directx?2@
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@NMOGKMPH@hPreProcMblk?5?$CB?$DN?5NULL?$AA@
  00041	e8 00 00 00 00	 call	 __assert
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1045:

; 112  : 
; 113  :   /***** get the memory from the previous frame *****/
; 114  :   x = ((PRE_PROC_mblk *)hPreProcMblk)->fInX;

  00049	8b 4d 14	 mov	 ecx, DWORD PTR _hPreProcMblk$[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	89 55 f8	 mov	 DWORD PTR _x$[ebp], edx

; 115  :   y = ((PRE_PROC_mblk *)hPreProcMblk)->fOutY;

  00051	8b 45 14	 mov	 eax, DWORD PTR _hPreProcMblk$[ebp]
  00054	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00057	89 4d fc	 mov	 DWORD PTR _y$[ebp], ecx

; 116  : 
; 117  :   if (VoxABS(y) < minValue)

  0005a	d9 45 fc	 fld	 DWORD PTR _y$[ebp]
  0005d	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00063	df e0		 fnstsw	 ax
  00065	f6 c4 41	 test	 ah, 65			; 00000041H
  00068	75 08		 jne	 SHORT $L1046
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _y$[ebp]
  0006d	89 55 ec	 mov	 DWORD PTR tv79[ebp], edx
  00070	eb 08		 jmp	 SHORT $L1047
$L1046:
  00072	d9 45 fc	 fld	 DWORD PTR _y$[ebp]
  00075	d9 e0		 fchs
  00077	d9 5d ec	 fstp	 DWORD PTR tv79[ebp]
$L1047:
  0007a	d9 45 ec	 fld	 DWORD PTR tv79[ebp]
  0007d	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR _minValue
  00083	df e0		 fnstsw	 ax
  00085	f6 c4 05	 test	 ah, 5
  00088	7a 07		 jp	 SHORT $L1006

; 118  :      y =  0.0F;

  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0
$L1006:

; 119  : 
; 120  :   /***** filter the signal sample-by-sample *****/
; 121  :   while ((N--) > 0)

  00091	8b 45 10	 mov	 eax, DWORD PTR _N$[ebp]
  00094	8b 4d 10	 mov	 ecx, DWORD PTR _N$[ebp]
  00097	83 e9 01	 sub	 ecx, 1
  0009a	89 4d 10	 mov	 DWORD PTR _N$[ebp], ecx
  0009d	85 c0		 test	 eax, eax
  0009f	7e 42		 jle	 SHORT $L1007

; 122  :     {
; 123  :       x1 = (float)*psIn++;

  000a1	8b 55 08	 mov	 edx, DWORD PTR _psIn$[ebp]
  000a4	0f bf 02	 movsx	 eax, WORD PTR [edx]
  000a7	89 45 e8	 mov	 DWORD PTR tv145[ebp], eax
  000aa	db 45 e8	 fild	 DWORD PTR tv145[ebp]
  000ad	d9 5d f0	 fstp	 DWORD PTR _x1$[ebp]
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _psIn$[ebp]
  000b3	83 c1 02	 add	 ecx, 2
  000b6	89 4d 08	 mov	 DWORD PTR _psIn$[ebp], ecx

; 124  :       y = x1 - x + Coef * y;

  000b9	d9 45 f0	 fld	 DWORD PTR _x1$[ebp]
  000bc	d8 65 f8	 fsub	 DWORD PTR _x$[ebp]
  000bf	d9 45 f4	 fld	 DWORD PTR _Coef$[ebp]
  000c2	d8 4d fc	 fmul	 DWORD PTR _y$[ebp]
  000c5	de c1		 faddp	 ST(1), ST(0)
  000c7	d9 5d fc	 fstp	 DWORD PTR _y$[ebp]

; 125  :       x = x1;

  000ca	8b 55 f0	 mov	 edx, DWORD PTR _x1$[ebp]
  000cd	89 55 f8	 mov	 DWORD PTR _x$[ebp], edx

; 126  :       *pfOut++ = y;

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _pfOut$[ebp]
  000d3	8b 4d fc	 mov	 ecx, DWORD PTR _y$[ebp]
  000d6	89 08		 mov	 DWORD PTR [eax], ecx
  000d8	8b 55 0c	 mov	 edx, DWORD PTR _pfOut$[ebp]
  000db	83 c2 04	 add	 edx, 4
  000de	89 55 0c	 mov	 DWORD PTR _pfOut$[ebp], edx

; 127  :     }

  000e1	eb ae		 jmp	 SHORT $L1006
$L1007:

; 128  :   
; 129  :   /***** update the internal memory *****/ 
; 130  :   ((PRE_PROC_mblk *)hPreProcMblk)->fInX = x;

  000e3	8b 45 14	 mov	 eax, DWORD PTR _hPreProcMblk$[ebp]
  000e6	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  000e9	89 08		 mov	 DWORD PTR [eax], ecx

; 131  :   ((PRE_PROC_mblk *)hPreProcMblk)->fOutY = y;

  000eb	8b 55 14	 mov	 edx, DWORD PTR _hPreProcMblk$[ebp]
  000ee	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  000f1	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 132  : }

  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 10 00	 ret	 16			; 00000010H
_VoxPreProcess@16 ENDP
_TEXT	ENDS
PUBLIC	_VoxInitPreProc@8
EXTRN	_calloc:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxInitPreProc@8
_TEXT	SEGMENT
_RetFlag$ = -4
_hPreProcMblk$ = 8
_cPP_Coef$ = 12
_VoxInitPreProc@8 PROC NEAR				; COMDAT

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 154  :   unsigned short RetFlag = 0;

  00004	66 c7 45 fc 00
	00		 mov	 WORD PTR _RetFlag$[ebp], 0

; 155  : 
; 156  :   *hPreProcMblk = (void *)calloc(1, sizeof(PRE_PROC_mblk));

  0000a	6a 0c		 push	 12			; 0000000cH
  0000c	6a 01		 push	 1
  0000e	e8 00 00 00 00	 call	 _calloc
  00013	83 c4 08	 add	 esp, 8
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _hPreProcMblk$[ebp]
  00019	89 01		 mov	 DWORD PTR [ecx], eax

; 157  :   if (*hPreProcMblk == NULL)

  0001b	8b 55 08	 mov	 edx, DWORD PTR _hPreProcMblk$[ebp]
  0001e	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00021	75 08		 jne	 SHORT $L1020

; 158  :       RetFlag = 1;

  00023	66 c7 45 fc 01
	00		 mov	 WORD PTR _RetFlag$[ebp], 1

; 159  :   else {

  00029	eb 22		 jmp	 SHORT $L1021
$L1020:

; 160  :      /* initialize the internal memories */
; 161  :     ((PRE_PROC_mblk *)*hPreProcMblk)->fInX = 0.0F;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _hPreProcMblk$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 162  :     ((PRE_PROC_mblk *)*hPreProcMblk)->fOutY = 0.0F;

  00036	8b 55 08	 mov	 edx, DWORD PTR _hPreProcMblk$[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 163  :     ((PRE_PROC_mblk *)*hPreProcMblk)->cPP_Coef = cPP_Coef;

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _hPreProcMblk$[ebp]
  00045	8b 11		 mov	 edx, DWORD PTR [ecx]
  00047	8b 45 0c	 mov	 eax, DWORD PTR _cPP_Coef$[ebp]
  0004a	89 42 08	 mov	 DWORD PTR [edx+8], eax
$L1021:

; 164  :   }
; 165  : 
; 166  :   return RetFlag;

  0004d	66 8b 45 fc	 mov	 ax, WORD PTR _RetFlag$[ebp]

; 167  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
_VoxInitPreProc@8 ENDP
_TEXT	ENDS
PUBLIC	_VoxFreePreProc@4
EXTRN	_free:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxFreePreProc@4
_TEXT	SEGMENT
_hPreProcMblk$ = 8
_VoxFreePreProc@4 PROC NEAR				; COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 186  :   SafeFree(*hPreProcMblk);

  00003	8b 45 08	 mov	 eax, DWORD PTR _hPreProcMblk$[ebp]
  00006	83 38 00	 cmp	 DWORD PTR [eax], 0
  00009	74 17		 je	 SHORT $L1027
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _hPreProcMblk$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _free
  00016	83 c4 04	 add	 esp, 4
  00019	8b 45 08	 mov	 eax, DWORD PTR _hPreProcMblk$[ebp]
  0001c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L1027:

; 187  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
_VoxFreePreProc@4 ENDP
_TEXT	ENDS
END
