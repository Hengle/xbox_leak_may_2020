; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\voicedecoder.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_AddRef@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_Release@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_BeginScene@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_EndScene@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DPalette_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CVoiceDecoderXmo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CVoiceDecoderXmo@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CVoiceDecoderXmo@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XMediaObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCVoiceDecoderXmo@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceDecoderCreateMediaObject@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CVoiceDecoderXmo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CVoiceDecoderXmo@@QAEJKPAUtWAVEFORMATEX@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Flush@CVoiceDecoderXmo@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Process@CVoiceDecoderXmo@@UAGJPBU_XMEDIAPACKET@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetInfo@CVoiceDecoderXmo@@UAGJPAU_XMEDIAINFO@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Discontinuity@CVoiceDecoderXmo@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStatus@CVoiceDecoderXmo@@UAGJPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT ??_7CVoiceDecoderXmo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7XMediaObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	?g_VdXmoDebugLevel@@3KA				; g_VdXmoDebugLevel
PUBLIC	_XVoiceBuildNumberD
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
CONST	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
CONST	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
CONST	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
CONST	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
CONST	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
CONST	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
CONST	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
_DATA	SEGMENT
?g_VdXmoDebugLevel@@3KA DD 02H				; g_VdXmoDebugLevel
_DATA	ENDS
PUBLIC	_XVoiceDecoderCreateMediaObject@12
PUBLIC	??0CVoiceDecoderXmo@@QAE@XZ			; CVoiceDecoderXmo::CVoiceDecoderXmo
PUBLIC	?Init@CVoiceDecoderXmo@@QAEJKPAUtWAVEFORMATEX@@@Z ; CVoiceDecoderXmo::Init
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\voicedec\voicedecoder.cpp
;	COMDAT _XVoiceDecoderCreateMediaObject@12
_TEXT	SEGMENT
tv69 = -16
$T26128 = -12
_hr$ = -8
_pXmo$ = -4
_dwCodecTag$ = 8
_pwfx$ = 12
_ppXMO$ = 16
_XVoiceDecoderCreateMediaObject@12 PROC NEAR		; COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 48   :     XMediaObject *pXmo;
; 49   :     HRESULT hr;
; 50   : 
; 51   :     pXmo = new CVoiceDecoderXmo();

  00006	6a 18		 push	 24			; 00000018H
  00008	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000d	83 c4 04	 add	 esp, 4
  00010	89 45 f4	 mov	 DWORD PTR $T26128[ebp], eax
  00013	83 7d f4 00	 cmp	 DWORD PTR $T26128[ebp], 0
  00017	74 0d		 je	 SHORT $L26129
  00019	8b 4d f4	 mov	 ecx, DWORD PTR $T26128[ebp]
  0001c	e8 00 00 00 00	 call	 ??0CVoiceDecoderXmo@@QAE@XZ ; CVoiceDecoderXmo::CVoiceDecoderXmo
  00021	89 45 f0	 mov	 DWORD PTR tv69[ebp], eax
  00024	eb 07		 jmp	 SHORT $L26130
$L26129:
  00026	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$L26130:
  0002d	8b 45 f0	 mov	 eax, DWORD PTR tv69[ebp]
  00030	89 45 fc	 mov	 DWORD PTR _pXmo$[ebp], eax

; 52   :     MY_ASSERT(pXmo);

  00033	83 7d fc 00	 cmp	 DWORD PTR _pXmo$[ebp], 0
  00037	75 01		 jne	 SHORT $L25991
  00039	cc		 int	 3
$L25991:

; 53   : 
; 54   :     if (pXmo == NULL) {

  0003a	83 7d fc 00	 cmp	 DWORD PTR _pXmo$[ebp], 0
  0003e	75 07		 jne	 SHORT $L25992

; 55   :         return E_OUTOFMEMORY;

  00040	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00045	eb 24		 jmp	 SHORT $L25986
$L25992:

; 56   :     }
; 57   : 
; 58   :     hr = ((CVoiceDecoderXmo *)pXmo)->Init(
; 59   :              dwCodecTag,
; 60   :              pwfx);

  00047	8b 4d 0c	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  0004a	51		 push	 ecx
  0004b	8b 55 08	 mov	 edx, DWORD PTR _dwCodecTag$[ebp]
  0004e	52		 push	 edx
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _pXmo$[ebp]
  00052	e8 00 00 00 00	 call	 ?Init@CVoiceDecoderXmo@@QAEJKPAUtWAVEFORMATEX@@@Z ; CVoiceDecoderXmo::Init
  00057	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 61   : 
; 62   :     if (SUCCEEDED(hr)) {

  0005a	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005e	7c 08		 jl	 SHORT $L25996

; 63   : 
; 64   :         *ppXMO = pXmo;

  00060	8b 45 10	 mov	 eax, DWORD PTR _ppXMO$[ebp]
  00063	8b 4d fc	 mov	 ecx, DWORD PTR _pXmo$[ebp]
  00066	89 08		 mov	 DWORD PTR [eax], ecx
$L25996:

; 65   : 
; 66   :     }
; 67   : 
; 68   :     return hr;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L25986:

; 69   : 
; 70   : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 0c 00	 ret	 12			; 0000000cH
_XVoiceDecoderCreateMediaObject@12 ENDP
_TEXT	ENDS
PUBLIC	??0XMediaObject@@QAE@XZ				; XMediaObject::XMediaObject
PUBLIC	?AddRef@CVoiceDecoderXmo@@UAGKXZ		; CVoiceDecoderXmo::AddRef
PUBLIC	?Release@CVoiceDecoderXmo@@UAGKXZ		; CVoiceDecoderXmo::Release
PUBLIC	?Process@CVoiceDecoderXmo@@UAGJPBU_XMEDIAPACKET@@0@Z ; CVoiceDecoderXmo::Process
PUBLIC	?GetInfo@CVoiceDecoderXmo@@UAGJPAU_XMEDIAINFO@@@Z ; CVoiceDecoderXmo::GetInfo
PUBLIC	?Flush@CVoiceDecoderXmo@@UAGJXZ			; CVoiceDecoderXmo::Flush
PUBLIC	?Discontinuity@CVoiceDecoderXmo@@UAGJXZ		; CVoiceDecoderXmo::Discontinuity
PUBLIC	?GetStatus@CVoiceDecoderXmo@@UAGJPAK@Z		; CVoiceDecoderXmo::GetStatus
PUBLIC	??_7CVoiceDecoderXmo@@6B@			; CVoiceDecoderXmo::`vftable'
;	COMDAT ??_7CVoiceDecoderXmo@@6B@
; File c:\xbox\private\windows\directx\dsound\codecs\voicedec\voicedecoderp.h
CONST	SEGMENT
??_7CVoiceDecoderXmo@@6B@ DD FLAT:?AddRef@CVoiceDecoderXmo@@UAGKXZ ; CVoiceDecoderXmo::`vftable'
	DD	FLAT:?Release@CVoiceDecoderXmo@@UAGKXZ
	DD	FLAT:?GetInfo@CVoiceDecoderXmo@@UAGJPAU_XMEDIAINFO@@@Z
	DD	FLAT:?GetStatus@CVoiceDecoderXmo@@UAGJPAK@Z
	DD	FLAT:?Process@CVoiceDecoderXmo@@UAGJPBU_XMEDIAPACKET@@0@Z
	DD	FLAT:?Discontinuity@CVoiceDecoderXmo@@UAGJXZ
	DD	FLAT:?Flush@CVoiceDecoderXmo@@UAGJXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CVoiceDecoderXmo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CVoiceDecoderXmo@@QAE@XZ PROC NEAR			; CVoiceDecoderXmo::CVoiceDecoderXmo, COMDAT
; _this$ = ecx

; 54   : 		{};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0XMediaObject@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CVoiceDecoderXmo@@6B@
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	c7 42 08 04 00
	00 00		 mov	 DWORD PTR [edx+8], 4
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0CVoiceDecoderXmo@@QAE@XZ ENDP			; CVoiceDecoderXmo::CVoiceDecoderXmo
_TEXT	ENDS
EXTRN	__InterlockedIncrement@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?AddRef@CVoiceDecoderXmo@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@CVoiceDecoderXmo@@UAGKXZ PROC NEAR		; CVoiceDecoderXmo::AddRef, COMDAT

; 58   :     STDMETHODIMP_(ULONG) AddRef() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 59   :        return InterlockedIncrement((long*)&m_cRef);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 14	 add	 eax, 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __InterlockedIncrement@4

; 60   :     }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@CVoiceDecoderXmo@@UAGKXZ ENDP			; CVoiceDecoderXmo::AddRef
_TEXT	ENDS
PUBLIC	??_GCVoiceDecoderXmo@@QAEPAXI@Z			; CVoiceDecoderXmo::`scalar deleting destructor'
EXTRN	__InterlockedDecrement@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Release@CVoiceDecoderXmo@@UAGKXZ
_TEXT	SEGMENT
tv72 = -16
$T26141 = -12
$T26140 = -8
_l$ = -4
_this$ = 8
?Release@CVoiceDecoderXmo@@UAGKXZ PROC NEAR		; CVoiceDecoderXmo::Release, COMDAT

; 62   :     STDMETHODIMP_(ULONG) Release() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 63   :        long l = InterlockedDecrement((long*)&m_cRef);

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	83 c0 14	 add	 eax, 20			; 00000014H
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __InterlockedDecrement@4
  00012	89 45 fc	 mov	 DWORD PTR _l$[ebp], eax

; 64   :        if (l == 0)

  00015	83 7d fc 00	 cmp	 DWORD PTR _l$[ebp], 0
  00019	75 28		 jne	 SHORT $L25963

; 65   :           delete this;

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	89 4d f4	 mov	 DWORD PTR $T26141[ebp], ecx
  00021	8b 55 f4	 mov	 edx, DWORD PTR $T26141[ebp]
  00024	89 55 f8	 mov	 DWORD PTR $T26140[ebp], edx
  00027	83 7d f8 00	 cmp	 DWORD PTR $T26140[ebp], 0
  0002b	74 0f		 je	 SHORT $L26142
  0002d	6a 01		 push	 1
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR $T26140[ebp]
  00032	e8 00 00 00 00	 call	 ??_GCVoiceDecoderXmo@@QAEPAXI@Z
  00037	89 45 f0	 mov	 DWORD PTR tv72[ebp], eax
  0003a	eb 07		 jmp	 SHORT $L25963
$L26142:
  0003c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L25963:

; 66   :        return l;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _l$[ebp]

; 67   :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?Release@CVoiceDecoderXmo@@UAGKXZ ENDP			; CVoiceDecoderXmo::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??0XMediaObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0XMediaObject@@QAE@XZ PROC NEAR			; XMediaObject::XMediaObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0XMediaObject@@QAE@XZ ENDP				; XMediaObject::XMediaObject
_TEXT	ENDS
PUBLIC	??1CVoiceDecoderXmo@@QAE@XZ			; CVoiceDecoderXmo::~CVoiceDecoderXmo
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Odt
;	COMDAT ??_GCVoiceDecoderXmo@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4
___flags$ = 8
??_GCVoiceDecoderXmo@@QAEPAXI@Z PROC NEAR		; CVoiceDecoderXmo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CVoiceDecoderXmo@@QAE@XZ ; CVoiceDecoderXmo::~CVoiceDecoderXmo
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L25971
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L25971:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCVoiceDecoderXmo@@QAEPAXI@Z ENDP			; CVoiceDecoderXmo::`scalar deleting destructor'
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\voicedec\voicedecoder.cpp
_TEXT	ENDS
;	COMDAT ??1CVoiceDecoderXmo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CVoiceDecoderXmo@@QAE@XZ PROC NEAR			; CVoiceDecoderXmo::~CVoiceDecoderXmo, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CVoiceDecoderXmo@@6B@

; 76   : 
; 77   :     if (m_pDecoderXmo) {

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00017	74 1c		 je	 SHORT $L25999

; 78   : 
; 79   :         m_pDecoderXmo->Release();

  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00025	8b 00		 mov	 eax, DWORD PTR [eax]
  00027	52		 push	 edx
  00028	ff 50 04	 call	 DWORD PTR [eax+4]

; 80   :         m_pDecoderXmo = NULL;

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
$L25999:

; 81   : 
; 82   :     }
; 83   : 
; 84   : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??1CVoiceDecoderXmo@@QAE@XZ ENDP			; CVoiceDecoderXmo::~CVoiceDecoderXmo
_TEXT	ENDS
EXTRN	_VoxwareCreateConverter@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?Init@CVoiceDecoderXmo@@QAEJKPAUtWAVEFORMATEX@@@Z
_TEXT	SEGMENT
_this$ = -4
_dwCodecTag$ = 8
_pwfx$ = 12
?Init@CVoiceDecoderXmo@@QAEJKPAUtWAVEFORMATEX@@@Z PROC NEAR ; CVoiceDecoderXmo::Init, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 90   : 
; 91   :     MY_ASSERT(pwfx);

  00007	83 7d 0c 00	 cmp	 DWORD PTR _pwfx$[ebp], 0
  0000b	75 01		 jne	 SHORT $L26006
  0000d	cc		 int	 3
$L26006:

; 92   : 
; 93   : 
; 94   :     AddRef();

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	52		 push	 edx
  00017	ff 11		 call	 DWORD PTR [ecx]

; 95   : 
; 96   :     //
; 97   :     // instantiate the proper vox compressor
; 98   :     //
; 99   :     
; 100  :     return VoxwareCreateConverter((WORD)dwCodecTag,
; 101  :                                   FALSE,
; 102  :                                   NULL,
; 103  :                                   pwfx,
; 104  :                                   &m_pDecoderXmo);

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	83 c0 10	 add	 eax, 16			; 00000010H
  0001f	50		 push	 eax
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  00023	51		 push	 ecx
  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	66 8b 55 08	 mov	 dx, WORD PTR _dwCodecTag$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 _VoxwareCreateConverter@20

; 105  : 
; 106  :     
; 107  : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?Init@CVoiceDecoderXmo@@QAEJKPAUtWAVEFORMATEX@@@Z ENDP	; CVoiceDecoderXmo::Init
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Flush@CVoiceDecoderXmo@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?Flush@CVoiceDecoderXmo@@UAGJXZ PROC NEAR		; CVoiceDecoderXmo::Flush, COMDAT

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 
; 112  :     return S_OK;

  00003	33 c0		 xor	 eax, eax

; 113  : 
; 114  : }

  00005	5d		 pop	 ebp
  00006	c2 04 00	 ret	 4
?Flush@CVoiceDecoderXmo@@UAGJXZ ENDP			; CVoiceDecoderXmo::Flush
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Process@CVoiceDecoderXmo@@UAGJPBU_XMEDIAPACKET@@0@Z
_TEXT	SEGMENT
_pXmp$26028 = -12
_hr$ = -8
_pHeader$ = -4
_this$ = 8
_pSrc$ = 12
_pDst$ = 16
?Process@CVoiceDecoderXmo@@UAGJPBU_XMEDIAPACKET@@0@Z PROC NEAR ; CVoiceDecoderXmo::Process, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 121  :     PVOICE_ENCODER_HEADER pHeader;
; 122  :     HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 123  : 
; 124  :     MY_ASSERT(pSrc);

  0000d	83 7d 0c 00	 cmp	 DWORD PTR _pSrc$[ebp], 0
  00011	75 01		 jne	 SHORT $L26020
  00013	cc		 int	 3
$L26020:

; 125  :     MY_ASSERT(pDst);

  00014	83 7d 10 00	 cmp	 DWORD PTR _pDst$[ebp], 0
  00018	75 01		 jne	 SHORT $L26021
  0001a	cc		 int	 3
$L26021:

; 126  : 
; 127  :     MY_ASSERT(pSrc->dwMaxSize >= m_dwMinInputSize);

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _pSrc$[ebp]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00024	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00027	73 01		 jae	 SHORT $L26022
  00029	cc		 int	 3
$L26022:

; 128  :     MY_ASSERT(pDst->dwMaxSize >= m_dwMinOutputSize);

  0002a	8b 45 10	 mov	 eax, DWORD PTR _pDst$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00033	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00036	73 01		 jae	 SHORT $L26023
  00038	cc		 int	 3
$L26023:

; 129  : 
; 130  :     MY_ASSERT(pDst->pvBuffer);

  00039	8b 45 10	 mov	 eax, DWORD PTR _pDst$[ebp]
  0003c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003f	75 01		 jne	 SHORT $L26024
  00041	cc		 int	 3
$L26024:

; 131  :     MY_ASSERT(pSrc->pvBuffer);

  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _pSrc$[ebp]
  00045	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00048	75 01		 jne	 SHORT $L26025
  0004a	cc		 int	 3
$L26025:

; 132  : 
; 133  :     //
; 134  :     // get packet header form source packet
; 135  :     //
; 136  : 
; 137  :     pHeader = (PVOICE_ENCODER_HEADER) pSrc->pvBuffer;

  0004b	8b 55 0c	 mov	 edx, DWORD PTR _pSrc$[ebp]
  0004e	8b 02		 mov	 eax, DWORD PTR [edx]
  00050	89 45 fc	 mov	 DWORD PTR _pHeader$[ebp], eax

; 138  :     
; 139  : 
; 140  :     //
; 141  :     // now invoke the decoder XMO to decompress the data
; 142  :     //
; 143  : 
; 144  :     if (pHeader->bType == VOICE_MESSAGE_TYPE_VOICE) {

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _pHeader$[ebp]
  00056	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00059	83 fa 01	 cmp	 edx, 1
  0005c	75 60		 jne	 SHORT $L26027

; 145  : 
; 146  :         XMEDIAPACKET * pXmp;
; 147  :         MY_ASSERT(pSrc->dwMaxSize >= sizeof(VOICE_ENCODER_HEADER));

  0005e	8b 45 0c	 mov	 eax, DWORD PTR _pSrc$[ebp]
  00061	83 78 04 04	 cmp	 DWORD PTR [eax+4], 4
  00065	73 01		 jae	 SHORT $L26030
  00067	cc		 int	 3
$L26030:

; 148  : 
; 149  :         pXmp = (XMEDIAPACKET *)pSrc;

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _pSrc$[ebp]
  0006b	89 4d f4	 mov	 DWORD PTR _pXmp$26028[ebp], ecx

; 150  : 
; 151  :         //
; 152  :         // change the src packet buffer so the decoder does not try to munge the header
; 153  :         //
; 154  : 
; 155  :         pXmp->pvBuffer = (PUCHAR)pHeader + sizeof(VOICE_ENCODER_HEADER);

  0006e	8b 55 fc	 mov	 edx, DWORD PTR _pHeader$[ebp]
  00071	83 c2 04	 add	 edx, 4
  00074	8b 45 f4	 mov	 eax, DWORD PTR _pXmp$26028[ebp]
  00077	89 10		 mov	 DWORD PTR [eax], edx

; 156  :         pXmp->dwMaxSize -= sizeof(VOICE_ENCODER_HEADER);

  00079	8b 4d f4	 mov	 ecx, DWORD PTR _pXmp$26028[ebp]
  0007c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007f	83 ea 04	 sub	 edx, 4
  00082	8b 45 f4	 mov	 eax, DWORD PTR _pXmp$26028[ebp]
  00085	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 157  : 
; 158  :         hr = m_pDecoderXmo->Process(pSrc,
; 159  :                                     pDst);

  00088	8b 4d 10	 mov	 ecx, DWORD PTR _pDst$[ebp]
  0008b	51		 push	 ecx
  0008c	8b 55 0c	 mov	 edx, DWORD PTR _pSrc$[ebp]
  0008f	52		 push	 edx
  00090	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00096	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00099	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0009c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0009e	50		 push	 eax
  0009f	ff 51 10	 call	 DWORD PTR [ecx+16]
  000a2	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 160  : 
; 161  : 
; 162  :         //
; 163  :         // re adjust src packet buffer and size
; 164  :         //
; 165  : 
; 166  :         pXmp->pvBuffer = (PUCHAR)pHeader;

  000a5	8b 55 f4	 mov	 edx, DWORD PTR _pXmp$26028[ebp]
  000a8	8b 45 fc	 mov	 eax, DWORD PTR _pHeader$[ebp]
  000ab	89 02		 mov	 DWORD PTR [edx], eax

; 167  :         pXmp->dwMaxSize += sizeof(VOICE_ENCODER_HEADER);

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR _pXmp$26028[ebp]
  000b0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b3	83 c2 04	 add	 edx, 4
  000b6	8b 45 f4	 mov	 eax, DWORD PTR _pXmp$26028[ebp]
  000b9	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 168  : 
; 169  :         //
; 170  :         // the intermediate codec XMO has already updated pdwstatus, etc
; 171  :         // 
; 172  : 
; 173  : 
; 174  :     } else {

  000bc	eb 2a		 jmp	 SHORT $L26037
$L26027:

; 175  : 
; 176  :         //
; 177  :         // if not voice was send, return zero
; 178  :         //
; 179  : 
; 180  :         if (pDst->pdwCompletedSize) {

  000be	8b 4d 10	 mov	 ecx, DWORD PTR _pDst$[ebp]
  000c1	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  000c5	74 0c		 je	 SHORT $L26038

; 181  : 
; 182  :             *pDst->pdwCompletedSize = 0;

  000c7	8b 55 10	 mov	 edx, DWORD PTR _pDst$[ebp]
  000ca	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000cd	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L26038:

; 183  : 
; 184  :         }
; 185  : 
; 186  :         if (pDst->pdwStatus) {

  000d3	8b 4d 10	 mov	 ecx, DWORD PTR _pDst$[ebp]
  000d6	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  000da	74 0c		 je	 SHORT $L26037

; 187  : 
; 188  :             *pDst->pdwStatus = XMEDIAPACKET_STATUS_SUCCESS;

  000dc	8b 55 10	 mov	 edx, DWORD PTR _pDst$[ebp]
  000df	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000e2	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L26037:

; 189  : 
; 190  :         }
; 191  : 
; 192  :     }
; 193  : 
; 194  :     //
; 195  :     // set input packet results
; 196  :     //
; 197  : 
; 198  :     if (pSrc->pdwCompletedSize) {

  000e8	8b 4d 0c	 mov	 ecx, DWORD PTR _pSrc$[ebp]
  000eb	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  000ef	74 0e		 je	 SHORT $L26041

; 199  : 
; 200  :         *pSrc->pdwCompletedSize = pSrc->dwMaxSize;

  000f1	8b 55 0c	 mov	 edx, DWORD PTR _pSrc$[ebp]
  000f4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000f7	8b 4d 0c	 mov	 ecx, DWORD PTR _pSrc$[ebp]
  000fa	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000fd	89 10		 mov	 DWORD PTR [eax], edx
$L26041:

; 201  : 
; 202  :     }
; 203  : 
; 204  :     if (pSrc->pdwStatus) {

  000ff	8b 45 0c	 mov	 eax, DWORD PTR _pSrc$[ebp]
  00102	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00106	74 20		 je	 SHORT $L26042

; 205  : 
; 206  :         if (FAILED(hr)) {

  00108	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0010c	7d 0e		 jge	 SHORT $L26044

; 207  : 
; 208  :             *pSrc->pdwStatus = XMEDIAPACKET_STATUS_FAILURE;

  0010e	8b 4d 0c	 mov	 ecx, DWORD PTR _pSrc$[ebp]
  00111	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00114	c7 02 05 40 00
	80		 mov	 DWORD PTR [edx], -2147467259 ; 80004005H

; 209  : 
; 210  :         } else {

  0011a	eb 0c		 jmp	 SHORT $L26042
$L26044:

; 211  : 
; 212  :             *pSrc->pdwStatus = XMEDIAPACKET_STATUS_SUCCESS;

  0011c	8b 45 0c	 mov	 eax, DWORD PTR _pSrc$[ebp]
  0011f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00122	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L26042:

; 213  : 
; 214  :         }
; 215  :         
; 216  :     }
; 217  : 
; 218  :     return hr;

  00128	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 219  : }

  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c2 0c 00	 ret	 12			; 0000000cH
?Process@CVoiceDecoderXmo@@UAGJPBU_XMEDIAPACKET@@0@Z ENDP ; CVoiceDecoderXmo::Process
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetInfo@CVoiceDecoderXmo@@UAGJPAU_XMEDIAINFO@@@Z
_TEXT	SEGMENT
_hr$ = -4
_this$ = 8
_pInfo$ = 12
?GetInfo@CVoiceDecoderXmo@@UAGJPAU_XMEDIAINFO@@@Z PROC NEAR ; CVoiceDecoderXmo::GetInfo, COMDAT

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 224  :     HRESULT hr;
; 225  :     MY_ASSERT(pInfo);

  00004	83 7d 0c 00	 cmp	 DWORD PTR _pInfo$[ebp], 0
  00008	75 01		 jne	 SHORT $L26053
  0000a	cc		 int	 3
$L26053:

; 226  : 
; 227  :     //
; 228  :     // use the info from the encoder xmo
; 229  :     //
; 230  : 
; 231  :     hr = m_pDecoderXmo->GetInfo(pInfo);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _pInfo$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00015	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001b	8b 12		 mov	 edx, DWORD PTR [edx]
  0001d	51		 push	 ecx
  0001e	ff 52 08	 call	 DWORD PTR [edx+8]
  00021	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 232  :     if (FAILED(hr)) {

  00024	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00028	7d 05		 jge	 SHORT $L26055

; 233  :         return hr;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  0002d	eb 1d		 jmp	 SHORT $L26051
$L26055:

; 234  :     }
; 235  : 
; 236  :     //
; 237  :     // our minimum size has to account for the header
; 238  :     //
; 239  :     pInfo->dwInputSize += sizeof(VOICE_ENCODER_HEADER); 

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _pInfo$[ebp]
  00032	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00035	83 c1 04	 add	 ecx, 4
  00038	8b 55 0c	 mov	 edx, DWORD PTR _pInfo$[ebp]
  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 240  :     m_dwMinOutputSize = pInfo->dwOutputSize;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  00044	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00047	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 241  : 
; 242  :     return S_OK;

  0004a	33 c0		 xor	 eax, eax
$L26051:

; 243  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
?GetInfo@CVoiceDecoderXmo@@UAGJPAU_XMEDIAINFO@@@Z ENDP	; CVoiceDecoderXmo::GetInfo
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Discontinuity@CVoiceDecoderXmo@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8
?Discontinuity@CVoiceDecoderXmo@@UAGJXZ PROC NEAR	; CVoiceDecoderXmo::Discontinuity, COMDAT

; 245  : HRESULT STDMETHODCALLTYPE CVoiceDecoderXmo::Discontinuity(void){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 246  :    return S_OK;

  00003	33 c0		 xor	 eax, eax

; 247  : }

  00005	5d		 pop	 ebp
  00006	c2 04 00	 ret	 4
?Discontinuity@CVoiceDecoderXmo@@UAGJXZ ENDP		; CVoiceDecoderXmo::Discontinuity
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetStatus@CVoiceDecoderXmo@@UAGJPAK@Z
_TEXT	SEGMENT
_this$ = 8
_pdwStatus$ = 12
?GetStatus@CVoiceDecoderXmo@@UAGJPAK@Z PROC NEAR	; CVoiceDecoderXmo::GetStatus, COMDAT

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 253  : 
; 254  :     if (pdwStatus) {

  00003	83 7d 0c 00	 cmp	 DWORD PTR _pdwStatus$[ebp], 0
  00007	74 09		 je	 SHORT $L26067

; 255  : 
; 256  :         *pdwStatus = XMO_STATUSF_ACCEPT_OUTPUT_DATA | XMO_STATUSF_ACCEPT_INPUT_DATA;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  0000c	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3
$L26067:

; 257  : 
; 258  :     }
; 259  : 
; 260  :     return S_OK;

  00012	33 c0		 xor	 eax, eax

; 261  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?GetStatus@CVoiceDecoderXmo@@UAGJPAK@Z ENDP		; CVoiceDecoderXmo::GetStatus
_TEXT	ENDS
END
