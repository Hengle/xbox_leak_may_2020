; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\corrcost.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@JAGJJGKA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DL@DKEHHBMD@ref_Frame?5?$DN?$DN?5NUM_SUBFRAME?92?5?$HM?$HM?5r@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@FDBLGFNJ@iend?5?$DM?5PITCH_CAND?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@DGNKILAE@iend?$CL1?5?$DM?5PITCH_CAND?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxCalcCrossCorrCost@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CalcSubCross@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CalcEnergy@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FindRefFrame@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _CalcFrameCosts@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _BiasCosts@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxCalcCrossCorrCost@16
PUBLIC	__real@3e19999a
EXTRN	_QuadraticPeak@16:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@3e19999a
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\corrcost.c
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxCalcCrossCorrCost@16
_TEXT	SEGMENT
_EnergyRef$ = -1672
_frameEnergy$ = -1064
_fDSlope$ = -1060
_sigRef$ = -1056
_fSlope$ = -1052
_subcosts$ = -1048
_pEnergyRef$ = -12
_i$ = -8
_ref_Frame$ = -4
_sigBuf$ = 8
_normcost$ = 12
_myCorrPDA_mblk$ = 16
_pbias_floor$ = 20
_VoxCalcCrossCorrCost@16 PROC NEAR			; COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 06 00
	00		 sub	 esp, 1672		; 00000688H
  00009	56		 push	 esi

; 78   :   STACK_INIT
; 79   :   float subcosts[3*PITCH_CAND];
; 80   :   float EnergyRef[LPITCH_MAX+LFRAME_LEN-LSUBFRAME_LEN+1];
; 81   :   STACK_INIT_END
; 82   :   STACK_ATTACH(float*,subcosts)
; 83   :   STACK_ATTACH(float*,EnergyRef)
; 84   :   float *sigRef;
; 85   :   float frameEnergy;
; 86   :   int ref_Frame;
; 87   :   float *pEnergyRef;
; 88   :   float fSlope, fDSlope;
; 89   :   int i;
; 90   : 
; 91   :   STACK_START
; 92   : 
; 93   :   assert(LPITCH_MAX <= LFRAME_LEN);
; 94   : 
; 95   :   /*--------------------------------------------------
; 96   :     Window the decimated signal: keep the current frame
; 97   :     signal and decay the previous frame signal.
; 98   :     --------------------------------------------------*/
; 99   :   fSlope = PDA_WIN_COEF;

  0000a	c7 85 e4 fb ff
	ff e1 7a 14 3f	 mov	 DWORD PTR _fSlope$[ebp], 1058306785 ; 3f147ae1H

; 100  :   fDSlope = PDA_WIN_DIFFC;

  00014	c7 85 dc fb ff
	ff d7 ea 98 3b	 mov	 DWORD PTR _fDSlope$[ebp], 999877335 ; 3b98ead7H

; 101  :   for (i = 0; i < LFRAME_LEN; i++) {

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00025	eb 09		 jmp	 SHORT $L1435
$L1436:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L1435:
  00030	83 7d f8 5a	 cmp	 DWORD PTR _i$[ebp], 90	; 0000005aH
  00034	7d 2c		 jge	 SHORT $L1437

; 102  :     sigBuf[i] *= fSlope;

  00036	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00039	8b 55 08	 mov	 edx, DWORD PTR _sigBuf$[ebp]
  0003c	d9 85 e4 fb ff
	ff		 fld	 DWORD PTR _fSlope$[ebp]
  00042	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  00045	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _sigBuf$[ebp]
  0004b	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 103  :     fSlope += fDSlope;

  0004e	d9 85 e4 fb ff
	ff		 fld	 DWORD PTR _fSlope$[ebp]
  00054	d8 85 dc fb ff
	ff		 fadd	 DWORD PTR _fDSlope$[ebp]
  0005a	d9 9d e4 fb ff
	ff		 fstp	 DWORD PTR _fSlope$[ebp]

; 104  :   }

  00060	eb c5		 jmp	 SHORT $L1436
$L1437:

; 105  : 
; 106  :   /*------------------------------------------------------------
; 107  :     reference signal:sigBuf[LFRAME_LEN ... LFRAME_LEN+LFRAME_LEN].
; 108  :     ------------------------------------------------------------*/
; 109  :   sigRef = sigBuf+LFRAME_LEN;

  00062	8b 55 08	 mov	 edx, DWORD PTR _sigBuf$[ebp]
  00065	81 c2 68 01 00
	00		 add	 edx, 360		; 00000168H
  0006b	89 95 e0 fb ff
	ff		 mov	 DWORD PTR _sigRef$[ebp], edx

; 110  : 
; 111  :   /*--------------------------------------------------
; 112  :     calculate the cross correlation of subframes.
; 113  :     --------------------------------------------------*/
; 114  :   CalcSubCross(sigRef, subcosts); 

  00071	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _subcosts$[ebp]
  00077	50		 push	 eax
  00078	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _sigRef$[ebp]
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 _CalcSubCross@8

; 115  : 
; 116  : 
; 117  :   /*--------------------------------------------------
; 118  :     calculate the energy of subframes and the cross-
; 119  :     referenced energy.
; 120  :     I calculate from backward.
; 121  :     --------------------------------------------------*/
; 122  :   CalcEnergy(sigRef, EnergyRef);

  00084	8d 95 78 f9 ff
	ff		 lea	 edx, DWORD PTR _EnergyRef$[ebp]
  0008a	52		 push	 edx
  0008b	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR _sigRef$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _CalcEnergy@8

; 123  : 
; 124  : 
; 125  :   /*--------------------------------------------------
; 126  :     calculate the energy of subframes.
; 127  :     find out which subframe as the center reference.
; 128  :     --------------------------------------------------*/
; 129  :   /***** point EnergyRef[] to the start of the frame ******/
; 130  :   pEnergyRef = EnergyRef + LFRAME_LEN - LSUBFRAME_LEN;

  00097	8d 8d 68 fa ff
	ff		 lea	 ecx, DWORD PTR _EnergyRef$[ebp+240]
  0009d	89 4d f4	 mov	 DWORD PTR _pEnergyRef$[ebp], ecx

; 131  : 
; 132  :   ref_Frame = FindRefFrame(pEnergyRef, &frameEnergy);

  000a0	8d 95 d8 fb ff
	ff		 lea	 edx, DWORD PTR _frameEnergy$[ebp]
  000a6	52		 push	 edx
  000a7	8b 45 f4	 mov	 eax, DWORD PTR _pEnergyRef$[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _FindRefFrame@8
  000b0	89 45 fc	 mov	 DWORD PTR _ref_Frame$[ebp], eax

; 133  :   
; 134  : 
; 135  :   /*------------------------------------------------------------
; 136  :     calculate the total cost by aligning three subcosts.
; 137  :     ------------------------------------------------------------*/
; 138  :   CalcFrameCosts(normcost, ref_Frame, frameEnergy, 
; 139  : 		 myCorrPDA_mblk->dIntraLagStart,
; 140  : 		 myCorrPDA_mblk->dIntraLagLength,
; 141  : 		 pEnergyRef, subcosts);

  000b3	8d 8d e8 fb ff
	ff		 lea	 ecx, DWORD PTR _subcosts$[ebp]
  000b9	51		 push	 ecx
  000ba	8b 55 f4	 mov	 edx, DWORD PTR _pEnergyRef$[ebp]
  000bd	52		 push	 edx
  000be	8b 45 10	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  000c1	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  000c4	51		 push	 ecx
  000c5	8b 55 10	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  000c8	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  000cb	50		 push	 eax
  000cc	8b 8d d8 fb ff
	ff		 mov	 ecx, DWORD PTR _frameEnergy$[ebp]
  000d2	51		 push	 ecx
  000d3	8b 55 fc	 mov	 edx, DWORD PTR _ref_Frame$[ebp]
  000d6	52		 push	 edx
  000d7	8b 45 0c	 mov	 eax, DWORD PTR _normcost$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _CalcFrameCosts@28

; 142  : 
; 143  : 
; 144  :   /*------------------------------------------------------------
; 145  :     Sharp the peaks of costs function.
; 146  :     ------------------------------------------------------------*/
; 147  :   for (i = 1; i < (LPITCH_CONF-LPITCH_MIN+1); i++)

  000e0	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  000e7	eb 09		 jmp	 SHORT $L1438
$L1439:
  000e9	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000ec	83 c1 01	 add	 ecx, 1
  000ef	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L1438:
  000f2	83 7d f8 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  000f6	0f 8d 80 00 00
	00		 jge	 $L1440

; 148  :     if (normcost[i] > NOISE_FLOOR) {

  000fc	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000ff	8b 45 0c	 mov	 eax, DWORD PTR _normcost$[ebp]
  00102	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00105	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3e19999a
  0010b	df e0		 fnstsw	 ax
  0010d	f6 c4 41	 test	 ah, 65			; 00000041H
  00110	75 65		 jne	 SHORT $L1441

; 149  :       if (normcost[i] > normcost[i-1] && normcost[i] > normcost[i+1])  /* find a peak */

  00112	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00115	8b 55 0c	 mov	 edx, DWORD PTR _normcost$[ebp]
  00118	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0011b	8b 75 0c	 mov	 esi, DWORD PTR _normcost$[ebp]
  0011e	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00121	d8 5c 86 fc	 fcomp	 DWORD PTR [esi+eax*4-4]
  00125	df e0		 fnstsw	 ax
  00127	f6 c4 41	 test	 ah, 65			; 00000041H
  0012a	75 4b		 jne	 SHORT $L1441
  0012c	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0012f	8b 55 0c	 mov	 edx, DWORD PTR _normcost$[ebp]
  00132	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00135	8b 75 0c	 mov	 esi, DWORD PTR _normcost$[ebp]
  00138	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  0013b	d8 5c 86 04	 fcomp	 DWORD PTR [esi+eax*4+4]
  0013f	df e0		 fnstsw	 ax
  00141	f6 c4 41	 test	 ah, 65			; 00000041H
  00144	75 31		 jne	 SHORT $L1441

; 150  : 	QuadraticPeak(normcost[i-1], normcost[i], normcost[i+1], &normcost[i]);

  00146	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00149	8b 55 0c	 mov	 edx, DWORD PTR _normcost$[ebp]
  0014c	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0014f	50		 push	 eax
  00150	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00153	8b 55 0c	 mov	 edx, DWORD PTR _normcost$[ebp]
  00156	8b 44 8a 04	 mov	 eax, DWORD PTR [edx+ecx*4+4]
  0015a	50		 push	 eax
  0015b	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0015e	8b 55 0c	 mov	 edx, DWORD PTR _normcost$[ebp]
  00161	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00164	50		 push	 eax
  00165	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00168	8b 55 0c	 mov	 edx, DWORD PTR _normcost$[ebp]
  0016b	8b 44 8a fc	 mov	 eax, DWORD PTR [edx+ecx*4-4]
  0016f	50		 push	 eax
  00170	e8 00 00 00 00	 call	 _QuadraticPeak@16
  00175	dd d8		 fstp	 ST(0)
$L1441:

; 151  :     }
; 152  : 
; 153  : 
; 154  :   /*------------------------------------------------------------
; 155  :     bias the cost function. 
; 156  :     ------------------------------------------------------------*/
; 157  :   BiasCosts(normcost, myCorrPDA_mblk->biasTab, pbias_floor);

  00177	e9 6d ff ff ff	 jmp	 $L1439
$L1440:
  0017c	8b 4d 14	 mov	 ecx, DWORD PTR _pbias_floor$[ebp]
  0017f	51		 push	 ecx
  00180	8b 55 10	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00183	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00186	50		 push	 eax
  00187	8b 4d 0c	 mov	 ecx, DWORD PTR _normcost$[ebp]
  0018a	51		 push	 ecx
  0018b	e8 00 00 00 00	 call	 _BiasCosts@12

; 158  :   STACK_END
; 159  : }

  00190	5e		 pop	 esi
  00191	8b e5		 mov	 esp, ebp
  00193	5d		 pop	 ebp
  00194	c2 10 00	 ret	 16			; 00000010H
_VoxCalcCrossCorrCost@16 ENDP
_TEXT	ENDS
EXTRN	_DotProd@12:NEAR
; Function compile flags: /Odt
;	COMDAT _CalcSubCross@8
_TEXT	SEGMENT
_isub$ = -8
_jlag$ = -4
_sigRef$ = 8
_psubcosts$ = 12
_CalcSubCross@8 PROC NEAR				; COMDAT

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 169  :   register int jlag;
; 170  :   int isub;
; 171  : 
; 172  :   for (isub = 0; isub < NUM_SUBFRAME; isub++, sigRef += LSUBFRAME_LEN)

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _isub$[ebp], 0
  0000d	eb 12		 jmp	 SHORT $L1450
$L1451:
  0000f	8b 45 f8	 mov	 eax, DWORD PTR _isub$[ebp]
  00012	83 c0 01	 add	 eax, 1
  00015	89 45 f8	 mov	 DWORD PTR _isub$[ebp], eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _sigRef$[ebp]
  0001b	83 c1 78	 add	 ecx, 120		; 00000078H
  0001e	89 4d 08	 mov	 DWORD PTR _sigRef$[ebp], ecx
$L1450:
  00021	83 7d f8 03	 cmp	 DWORD PTR _isub$[ebp], 3
  00025	7d 3d		 jge	 SHORT $L1447

; 173  :     {
; 174  :       jlag = LPITCH_MIN;

  00027	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _jlag$[ebp], 5
$L1453:

; 175  :       do {    
; 176  : 	  *psubcosts++ = (float)DotProd(sigRef, sigRef-jlag,LSUBFRAME_LEN);

  0002e	6a 1e		 push	 30			; 0000001eH
  00030	8b 55 fc	 mov	 edx, DWORD PTR _jlag$[ebp]
  00033	c1 e2 02	 shl	 edx, 2
  00036	8b 45 08	 mov	 eax, DWORD PTR _sigRef$[ebp]
  00039	2b c2		 sub	 eax, edx
  0003b	50		 push	 eax
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _sigRef$[ebp]
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 _DotProd@12
  00045	8b 55 0c	 mov	 edx, DWORD PTR _psubcosts$[ebp]
  00048	d9 1a		 fstp	 DWORD PTR [edx]
  0004a	8b 45 0c	 mov	 eax, DWORD PTR _psubcosts$[ebp]
  0004d	83 c0 04	 add	 eax, 4
  00050	89 45 0c	 mov	 DWORD PTR _psubcosts$[ebp], eax

; 177  : 	} while(++jlag <= LPITCH_MAX);

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _jlag$[ebp]
  00056	83 c1 01	 add	 ecx, 1
  00059	89 4d fc	 mov	 DWORD PTR _jlag$[ebp], ecx
  0005c	83 7d fc 5a	 cmp	 DWORD PTR _jlag$[ebp], 90 ; 0000005aH
  00060	7e cc		 jle	 SHORT $L1453

; 178  :     }

  00062	eb ab		 jmp	 SHORT $L1451
$L1447:

; 179  : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
_CalcSubCross@8 ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _CalcEnergy@8
_TEXT	SEGMENT
_dsum$ = -24
_pS1$ = -12
_k$ = -8
_pS2$ = -4
_sigRef$ = 8
_EngRef$ = 12
_CalcEnergy@8 PROC NEAR					; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 189  :   register float *pS1, *pS2;
; 190  :   register double dsum;
; 191  :   register int k;
; 192  : 
; 193  :   pS1 = sigRef + LFRAME_LEN - 1;

  00006	8b 45 08	 mov	 eax, DWORD PTR _sigRef$[ebp]
  00009	05 64 01 00 00	 add	 eax, 356		; 00000164H
  0000e	89 45 f4	 mov	 DWORD PTR _pS1$[ebp], eax

; 194  : 
; 195  :   pS2 = pS1-LSUBFRAME_LEN + 1;

  00011	8b 4d f4	 mov	 ecx, DWORD PTR _pS1$[ebp]
  00014	83 e9 74	 sub	 ecx, 116		; 00000074H
  00017	89 4d fc	 mov	 DWORD PTR _pS2$[ebp], ecx

; 196  : 
; 197  :   dsum = DotProd(pS2, pS2, LSUBFRAME_LEN);

  0001a	6a 1e		 push	 30			; 0000001eH
  0001c	8b 55 fc	 mov	 edx, DWORD PTR _pS2$[ebp]
  0001f	52		 push	 edx
  00020	8b 45 fc	 mov	 eax, DWORD PTR _pS2$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _DotProd@12
  00029	dd 55 e8	 fst	 QWORD PTR _dsum$[ebp]

; 198  :   *EngRef++ = (float)dsum;

  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _EngRef$[ebp]
  0002f	d9 19		 fstp	 DWORD PTR [ecx]
  00031	8b 55 0c	 mov	 edx, DWORD PTR _EngRef$[ebp]
  00034	83 c2 04	 add	 edx, 4
  00037	89 55 0c	 mov	 DWORD PTR _EngRef$[ebp], edx

; 199  : 
; 200  :   pS2--;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _pS2$[ebp]
  0003d	83 e8 04	 sub	 eax, 4
  00040	89 45 fc	 mov	 DWORD PTR _pS2$[ebp], eax

; 201  :   for (k = 1; k <= LPITCH_MAX+LFRAME_LEN-LSUBFRAME_LEN; k++) {

  00043	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _k$[ebp], 1
  0004a	eb 09		 jmp	 SHORT $L1467
$L1468:
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _k$[ebp]
  0004f	83 c1 01	 add	 ecx, 1
  00052	89 4d f8	 mov	 DWORD PTR _k$[ebp], ecx
$L1467:
  00055	81 7d f8 96 00
	00 00		 cmp	 DWORD PTR _k$[ebp], 150	; 00000096H
  0005c	7f 63		 jg	 SHORT $L1461

; 202  :     /*** we just need to take one sample out and add one sample in ***/
; 203  :     dsum += ((double)*pS2 * *pS2); 

  0005e	8b 55 fc	 mov	 edx, DWORD PTR _pS2$[ebp]
  00061	d9 02		 fld	 DWORD PTR [edx]
  00063	8b 45 fc	 mov	 eax, DWORD PTR _pS2$[ebp]
  00066	d8 08		 fmul	 DWORD PTR [eax]
  00068	dc 45 e8	 fadd	 QWORD PTR _dsum$[ebp]
  0006b	dd 5d e8	 fstp	 QWORD PTR _dsum$[ebp]

; 204  :     pS2--;

  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _pS2$[ebp]
  00071	83 e9 04	 sub	 ecx, 4
  00074	89 4d fc	 mov	 DWORD PTR _pS2$[ebp], ecx

; 205  :     dsum -= ((double)*pS1 * *pS1);

  00077	8b 55 f4	 mov	 edx, DWORD PTR _pS1$[ebp]
  0007a	d9 02		 fld	 DWORD PTR [edx]
  0007c	8b 45 f4	 mov	 eax, DWORD PTR _pS1$[ebp]
  0007f	d8 08		 fmul	 DWORD PTR [eax]
  00081	dc 6d e8	 fsubr	 QWORD PTR _dsum$[ebp]
  00084	dd 5d e8	 fstp	 QWORD PTR _dsum$[ebp]

; 206  :     pS1--;

  00087	8b 4d f4	 mov	 ecx, DWORD PTR _pS1$[ebp]
  0008a	83 e9 04	 sub	 ecx, 4
  0008d	89 4d f4	 mov	 DWORD PTR _pS1$[ebp], ecx

; 207  :     if (dsum < 0) dsum = 0;

  00090	dd 45 e8	 fld	 QWORD PTR _dsum$[ebp]
  00093	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00099	df e0		 fnstsw	 ax
  0009b	f6 c4 05	 test	 ah, 5
  0009e	7a 0e		 jp	 SHORT $L1472
  000a0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dsum$[ebp], 0
  000a7	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dsum$[ebp+4], 0
$L1472:

; 208  :     *EngRef ++ = (float)dsum;

  000ae	dd 45 e8	 fld	 QWORD PTR _dsum$[ebp]
  000b1	8b 55 0c	 mov	 edx, DWORD PTR _EngRef$[ebp]
  000b4	d9 1a		 fstp	 DWORD PTR [edx]
  000b6	8b 45 0c	 mov	 eax, DWORD PTR _EngRef$[ebp]
  000b9	83 c0 04	 add	 eax, 4
  000bc	89 45 0c	 mov	 DWORD PTR _EngRef$[ebp], eax

; 209  :   }

  000bf	eb 8b		 jmp	 SHORT $L1468
$L1461:

; 210  : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 08 00	 ret	 8
_CalcEnergy@8 ENDP
_TEXT	ENDS
PUBLIC	__real@3f000000
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _FindRefFrame@8
_TEXT	SEGMENT
_energy1$ = -20
_dsum$ = -16
_isub$ = -12
_TotalEnergy$ = -8
_energy2$ = -4
_EnergyRef$ = 8
_frameEnergy$ = 12
_FindRefFrame@8 PROC NEAR				; COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 221  :   float TotalEnergy = 0.0f;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _TotalEnergy$[ebp], 0

; 222  :   int isub;
; 223  :   float dsum;
; 224  :   float energy1, energy2;
; 225  : 
; 226  :   /* The first subframe */
; 227  :   for (isub = 0; isub < NUM_SUBFRAME - 2; isub++) {

  0000d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _isub$[ebp], 0
  00014	eb 09		 jmp	 SHORT $L1484
$L1485:
  00016	8b 45 f4	 mov	 eax, DWORD PTR _isub$[ebp]
  00019	83 c0 01	 add	 eax, 1
  0001c	89 45 f4	 mov	 DWORD PTR _isub$[ebp], eax
$L1484:
  0001f	83 7d f4 01	 cmp	 DWORD PTR _isub$[ebp], 1
  00023	7d 16		 jge	 SHORT $L1486

; 228  :     TotalEnergy += EnergyRef[-isub*LSUBFRAME_LEN];

  00025	8b 4d f4	 mov	 ecx, DWORD PTR _isub$[ebp]
  00028	f7 d9		 neg	 ecx
  0002a	6b c9 1e	 imul	 ecx, 30			; 0000001eH
  0002d	8b 55 08	 mov	 edx, DWORD PTR _EnergyRef$[ebp]
  00030	d9 45 f8	 fld	 DWORD PTR _TotalEnergy$[ebp]
  00033	d8 04 8a	 fadd	 DWORD PTR [edx+ecx*4]
  00036	d9 5d f8	 fstp	 DWORD PTR _TotalEnergy$[ebp]

; 229  :   }

  00039	eb db		 jmp	 SHORT $L1485
$L1486:

; 230  : 
; 231  :   /* the NUM_SUBFRAME-1th subframe */
; 232  :   dsum = EnergyRef[-isub*LSUBFRAME_LEN];

  0003b	8b 45 f4	 mov	 eax, DWORD PTR _isub$[ebp]
  0003e	f7 d8		 neg	 eax
  00040	6b c0 1e	 imul	 eax, 30			; 0000001eH
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _EnergyRef$[ebp]
  00046	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00049	89 55 f0	 mov	 DWORD PTR _dsum$[ebp], edx

; 233  :   TotalEnergy += dsum;

  0004c	d9 45 f8	 fld	 DWORD PTR _TotalEnergy$[ebp]
  0004f	d8 45 f0	 fadd	 DWORD PTR _dsum$[ebp]
  00052	d9 5d f8	 fstp	 DWORD PTR _TotalEnergy$[ebp]

; 234  :   energy1 = dsum;

  00055	8b 45 f0	 mov	 eax, DWORD PTR _dsum$[ebp]
  00058	89 45 ec	 mov	 DWORD PTR _energy1$[ebp], eax

; 235  : 
; 236  :   /* the last subframe */
; 237  :   isub++;

  0005b	8b 4d f4	 mov	 ecx, DWORD PTR _isub$[ebp]
  0005e	83 c1 01	 add	 ecx, 1
  00061	89 4d f4	 mov	 DWORD PTR _isub$[ebp], ecx

; 238  :   dsum = EnergyRef[-isub*LSUBFRAME_LEN];

  00064	8b 55 f4	 mov	 edx, DWORD PTR _isub$[ebp]
  00067	f7 da		 neg	 edx
  00069	6b d2 1e	 imul	 edx, 30			; 0000001eH
  0006c	8b 45 08	 mov	 eax, DWORD PTR _EnergyRef$[ebp]
  0006f	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00072	89 4d f0	 mov	 DWORD PTR _dsum$[ebp], ecx

; 239  :   TotalEnergy += dsum;

  00075	d9 45 f8	 fld	 DWORD PTR _TotalEnergy$[ebp]
  00078	d8 45 f0	 fadd	 DWORD PTR _dsum$[ebp]
  0007b	d9 5d f8	 fstp	 DWORD PTR _TotalEnergy$[ebp]

; 240  :   energy2 = LAST_SUBFRAME_WEIGHT * dsum;

  0007e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f000000
  00084	d8 4d f0	 fmul	 DWORD PTR _dsum$[ebp]
  00087	d9 5d fc	 fstp	 DWORD PTR _energy2$[ebp]

; 241  : 
; 242  :   *frameEnergy = TotalEnergy;

  0008a	8b 55 0c	 mov	 edx, DWORD PTR _frameEnergy$[ebp]
  0008d	8b 45 f8	 mov	 eax, DWORD PTR _TotalEnergy$[ebp]
  00090	89 02		 mov	 DWORD PTR [edx], eax

; 243  : 
; 244  :   /* find out the reference frame */
; 245  :   if (energy1 >= energy2)

  00092	d9 45 ec	 fld	 DWORD PTR _energy1$[ebp]
  00095	d8 5d fc	 fcomp	 DWORD PTR _energy2$[ebp]
  00098	df e0		 fnstsw	 ax
  0009a	f6 c4 01	 test	 ah, 1
  0009d	75 07		 jne	 SHORT $L1487

; 246  :     return NUM_SUBFRAME-2;

  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	eb 05		 jmp	 SHORT $L1478
$L1487:

; 247  :   else
; 248  :     return NUM_SUBFRAME-1;

  000a6	b8 02 00 00 00	 mov	 eax, 2
$L1478:

; 249  : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 08 00	 ret	 8
_FindRefFrame@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EB@JAGJJGKA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0DL@DKEHHBMD@ref_Frame?5?$DN?$DN?5NUM_SUBFRAME?92?5?$HM?$HM?5r@ ; `string'
PUBLIC	??_C@_0BC@FDBLGFNJ@iend?5?$DM?5PITCH_CAND?$AA@	; `string'
PUBLIC	??_C@_0BE@DGNKILAE@iend?$CL1?5?$DM?5PITCH_CAND?$AA@ ; `string'
PUBLIC	__real@3e800000
PUBLIC	__real@358637bd
EXTRN	__assert:NEAR
EXTRN	_FindMaxValueFlt@16:NEAR
EXTRN	_sqrt:NEAR
EXTRN	_memcpy:NEAR
;	COMDAT ??_C@_0EB@JAGJJGKA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0EB@JAGJJGKA@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\corrcost.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@DKEHHBMD@ref_Frame?5?$DN?$DN?5NUM_SUBFRAME?92?5?$HM?$HM?5r@
CONST	SEGMENT
??_C@_0DL@DKEHHBMD@ref_Frame?5?$DN?$DN?5NUM_SUBFRAME?92?5?$HM?$HM?5r@ DB 'r'
	DB	'ef_Frame == NUM_SUBFRAME-2 || ref_Frame == NUM_SUBFRAME-1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FDBLGFNJ@iend?5?$DM?5PITCH_CAND?$AA@
CONST	SEGMENT
??_C@_0BC@FDBLGFNJ@iend?5?$DM?5PITCH_CAND?$AA@ DB 'iend < PITCH_CAND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DGNKILAE@iend?$CL1?5?$DM?5PITCH_CAND?$AA@
CONST	SEGMENT
??_C@_0BE@DGNKILAE@iend?$CL1?5?$DM?5PITCH_CAND?$AA@ DB 'iend+1 < PITCH_CA'
	DB	'ND', 00H					; `string'
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@358637bd
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-006
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _CalcFrameCosts@28
_TEXT	SEGMENT
tv388 = -68
_temp2$1550 = -64
_temp1$1549 = -60
_temp3$1551 = -56
_tmpmaxlag1$1527 = -52
_tmpmaxcost1$1526 = -48
_iend$1525 = -44
_length$1524 = -40
_isub$ = -36
_tmpmaxcost$ = -32
_tmpmaxlag$ = -28
_psubcosts_isub$ = -24
_tempcrossEnergy$ = -20
_pEnergyRef$ = -16
_small_corr_energy$ = -12
_jlag$ = -8
_istart$ = -4
_normcost$ = 8
_ref_Frame$ = 12
_frameEnergy$ = 16
_dLagStart$ = 20
_dLagLength$ = 24
_EnergyRef$ = 28
_psubcosts$ = 32
_CalcFrameCosts@28 PROC NEAR				; COMDAT

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	56		 push	 esi

; 261  :   float *tempcrossEnergy;
; 262  :   float *pEnergyRef;
; 263  :   float *psubcosts_isub;
; 264  :   int isub;
; 265  :   int jlag;
; 266  :   int istart;
; 267  :   int tmpmaxlag;
; 268  :   float tmpmaxcost;
; 269  :   float small_corr_energy;
; 270  : 
; 271  :   /* first find out which subframe will be center one. */
; 272  :   assert(ref_Frame == NUM_SUBFRAME-2 || ref_Frame == NUM_SUBFRAME-1);

  00007	83 7d 0c 01	 cmp	 DWORD PTR _ref_Frame$[ebp], 1
  0000b	74 1d		 je	 SHORT $L1613
  0000d	83 7d 0c 02	 cmp	 DWORD PTR _ref_Frame$[ebp], 2
  00011	74 17		 je	 SHORT $L1613
  00013	68 10 01 00 00	 push	 272			; 00000110H
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@JAGJJGKA@c?3?2xbox?2private?2windows?2directx?2@
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@DKEHHBMD@ref_Frame?5?$DN?$DN?5NUM_SUBFRAME?92?5?$HM?$HM?5r@
  00022	e8 00 00 00 00	 call	 __assert
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1613:

; 273  : 
; 274  :   /* We do not need tracking the reference subframe, so copy its costs to normcost */
; 275  :   /* then borrow the subcosts array of the reference subframe for tempcrossEnergy array */
; 276  :   EnergyRef += LPITCH_MIN;

  0002a	8b 4d 1c	 mov	 ecx, DWORD PTR _EnergyRef$[ebp]
  0002d	83 c1 14	 add	 ecx, 20			; 00000014H
  00030	89 4d 1c	 mov	 DWORD PTR _EnergyRef$[ebp], ecx

; 277  :   tempcrossEnergy = &(psubcosts[ref_Frame*PITCH_CAND]);

  00033	8b 55 0c	 mov	 edx, DWORD PTR _ref_Frame$[ebp]
  00036	6b d2 56	 imul	 edx, 86			; 00000056H
  00039	8b 45 20	 mov	 eax, DWORD PTR _psubcosts$[ebp]
  0003c	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0003f	89 4d ec	 mov	 DWORD PTR _tempcrossEnergy$[ebp], ecx

; 278  :   memcpy(normcost, tempcrossEnergy, PITCH_CAND*sizeof(float));

  00042	68 58 01 00 00	 push	 344			; 00000158H
  00047	8b 55 ec	 mov	 edx, DWORD PTR _tempcrossEnergy$[ebp]
  0004a	52		 push	 edx
  0004b	8b 45 08	 mov	 eax, DWORD PTR _normcost$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _memcpy
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 279  :   memcpy(tempcrossEnergy, EnergyRef-ref_Frame*LSUBFRAME_LEN, PITCH_CAND*sizeof(float));

  00057	68 58 01 00 00	 push	 344			; 00000158H
  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR _ref_Frame$[ebp]
  0005f	6b c9 1e	 imul	 ecx, 30			; 0000001eH
  00062	c1 e1 02	 shl	 ecx, 2
  00065	8b 55 1c	 mov	 edx, DWORD PTR _EnergyRef$[ebp]
  00068	2b d1		 sub	 edx, ecx
  0006a	52		 push	 edx
  0006b	8b 45 ec	 mov	 eax, DWORD PTR _tempcrossEnergy$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _memcpy
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 280  :     
; 281  : 
; 282  :   /* If the reference subframe is the last subframe, we do not need to track the first
; 283  :      subframe. */
; 284  :   if (ref_Frame == NUM_SUBFRAME - 2) {

  00077	83 7d 0c 01	 cmp	 DWORD PTR _ref_Frame$[ebp], 1
  0007b	75 15		 jne	 SHORT $L1518

; 285  :     isub = 0;

  0007d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _isub$[ebp], 0

; 286  :     pEnergyRef = EnergyRef;

  00084	8b 4d 1c	 mov	 ecx, DWORD PTR _EnergyRef$[ebp]
  00087	89 4d f0	 mov	 DWORD PTR _pEnergyRef$[ebp], ecx

; 287  :     psubcosts_isub = psubcosts;

  0008a	8b 55 20	 mov	 edx, DWORD PTR _psubcosts$[ebp]
  0008d	89 55 e8	 mov	 DWORD PTR _psubcosts_isub$[ebp], edx

; 288  :   }
; 289  :   else {

  00090	eb 1c		 jmp	 SHORT $L1519
$L1518:

; 290  :     isub = 1;

  00092	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _isub$[ebp], 1

; 291  :     pEnergyRef = EnergyRef-LSUBFRAME_LEN;

  00099	8b 45 1c	 mov	 eax, DWORD PTR _EnergyRef$[ebp]
  0009c	83 e8 78	 sub	 eax, 120		; 00000078H
  0009f	89 45 f0	 mov	 DWORD PTR _pEnergyRef$[ebp], eax

; 292  :     psubcosts_isub = &(psubcosts[PITCH_CAND]);

  000a2	8b 4d 20	 mov	 ecx, DWORD PTR _psubcosts$[ebp]
  000a5	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  000ab	89 4d e8	 mov	 DWORD PTR _psubcosts_isub$[ebp], ecx
$L1519:

; 293  :   }    
; 294  : 
; 295  : 
; 296  :   /* then process other subframes */
; 297  :   for(; isub < NUM_SUBFRAME; isub++) {

  000ae	eb 09		 jmp	 SHORT $L1520
$L1521:
  000b0	8b 55 dc	 mov	 edx, DWORD PTR _isub$[ebp]
  000b3	83 c2 01	 add	 edx, 1
  000b6	89 55 dc	 mov	 DWORD PTR _isub$[ebp], edx
$L1520:
  000b9	83 7d dc 03	 cmp	 DWORD PTR _isub$[ebp], 3
  000bd	0f 8d 94 01 00
	00		 jge	 $L1522

; 298  :     if (isub != ref_Frame) {

  000c3	8b 45 dc	 mov	 eax, DWORD PTR _isub$[ebp]
  000c6	3b 45 0c	 cmp	 eax, DWORD PTR _ref_Frame$[ebp]
  000c9	0f 84 6e 01 00
	00		 je	 $L1523

; 299  :       {
; 300  : 	int length;
; 301  : 	int iend;
; 302  : 	float tmpmaxcost1;
; 303  : 	int tmpmaxlag1;
; 304  : 
; 305  : 	/* faster searching code */
; 306  : 	/* search for the maximum costs within the pitch range */
; 307  : 	iend = 0;

  000cf	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _iend$1525[ebp], 0

; 308  : 	tmpmaxlag = -1;

  000d6	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _tmpmaxlag$[ebp], -1

; 309  : 	tmpmaxcost = -1.0F;

  000dd	c7 45 e0 00 00
	80 bf		 mov	 DWORD PTR _tmpmaxcost$[ebp], -1082130432 ; bf800000H

; 310  :           
; 311  : 	for (jlag = 0; jlag < PITCH_CAND; jlag++) {

  000e4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _jlag$[ebp], 0
  000eb	eb 09		 jmp	 SHORT $L1528
$L1529:
  000ed	8b 4d f8	 mov	 ecx, DWORD PTR _jlag$[ebp]
  000f0	83 c1 01	 add	 ecx, 1
  000f3	89 4d f8	 mov	 DWORD PTR _jlag$[ebp], ecx
$L1528:
  000f6	83 7d f8 56	 cmp	 DWORD PTR _jlag$[ebp], 86 ; 00000056H
  000fa	0f 8d 3d 01 00
	00		 jge	 $L1523

; 312  : 	  istart = dLagStart[jlag];

  00100	8b 55 f8	 mov	 edx, DWORD PTR _jlag$[ebp]
  00103	8b 45 14	 mov	 eax, DWORD PTR _dLagStart$[ebp]
  00106	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00109	89 4d fc	 mov	 DWORD PTR _istart$[ebp], ecx

; 313  : 	  if(tmpmaxlag < istart) {

  0010c	8b 55 e4	 mov	 edx, DWORD PTR _tmpmaxlag$[ebp]
  0010f	3b 55 fc	 cmp	 edx, DWORD PTR _istart$[ebp]
  00112	7d 2f		 jge	 SHORT $L1531

; 314  : 	    FindMaxValueFlt(&psubcosts_isub[istart], dLagLength[jlag], 
; 315  : 			    &tmpmaxlag, &tmpmaxcost);

  00114	8d 45 e0	 lea	 eax, DWORD PTR _tmpmaxcost$[ebp]
  00117	50		 push	 eax
  00118	8d 4d e4	 lea	 ecx, DWORD PTR _tmpmaxlag$[ebp]
  0011b	51		 push	 ecx
  0011c	8b 55 f8	 mov	 edx, DWORD PTR _jlag$[ebp]
  0011f	8b 45 18	 mov	 eax, DWORD PTR _dLagLength$[ebp]
  00122	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00125	51		 push	 ecx
  00126	8b 55 fc	 mov	 edx, DWORD PTR _istart$[ebp]
  00129	8b 45 e8	 mov	 eax, DWORD PTR _psubcosts_isub$[ebp]
  0012c	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0012f	51		 push	 ecx
  00130	e8 00 00 00 00	 call	 _FindMaxValueFlt@16

; 316  : 	    tmpmaxlag +=istart;

  00135	8b 55 e4	 mov	 edx, DWORD PTR _tmpmaxlag$[ebp]
  00138	03 55 fc	 add	 edx, DWORD PTR _istart$[ebp]
  0013b	89 55 e4	 mov	 DWORD PTR _tmpmaxlag$[ebp], edx

; 317  : 	  }
; 318  : 	  else {

  0013e	e9 b6 00 00 00	 jmp	 $L1532
$L1531:

; 319  : 	    length = istart + dLagLength[jlag] - iend;

  00143	8b 45 f8	 mov	 eax, DWORD PTR _jlag$[ebp]
  00146	8b 4d 18	 mov	 ecx, DWORD PTR _dLagLength$[ebp]
  00149	8b 55 fc	 mov	 edx, DWORD PTR _istart$[ebp]
  0014c	03 14 81	 add	 edx, DWORD PTR [ecx+eax*4]
  0014f	2b 55 d4	 sub	 edx, DWORD PTR _iend$1525[ebp]
  00152	89 55 d8	 mov	 DWORD PTR _length$1524[ebp], edx

; 320  : 	    if(length) {

  00155	83 7d d8 00	 cmp	 DWORD PTR _length$1524[ebp], 0
  00159	0f 84 9a 00 00
	00		 je	 $L1532

; 321  : 	      assert(iend < PITCH_CAND);

  0015f	83 7d d4 56	 cmp	 DWORD PTR _iend$1525[ebp], 86 ; 00000056H
  00163	7c 17		 jl	 SHORT $L1614
  00165	68 41 01 00 00	 push	 321			; 00000141H
  0016a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@JAGJJGKA@c?3?2xbox?2private?2windows?2directx?2@
  0016f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@FDBLGFNJ@iend?5?$DM?5PITCH_CAND?$AA@
  00174	e8 00 00 00 00	 call	 __assert
  00179	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1614:

; 322  : 	      tmpmaxcost1 = psubcosts_isub[iend];

  0017c	8b 4d d4	 mov	 ecx, DWORD PTR _iend$1525[ebp]
  0017f	8b 55 e8	 mov	 edx, DWORD PTR _psubcosts_isub$[ebp]
  00182	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00185	89 45 d0	 mov	 DWORD PTR _tmpmaxcost1$1526[ebp], eax

; 323  : 	      tmpmaxlag1 = iend;

  00188	8b 4d d4	 mov	 ecx, DWORD PTR _iend$1525[ebp]
  0018b	89 4d cc	 mov	 DWORD PTR _tmpmaxlag1$1527[ebp], ecx

; 324  : 	      if(length == 2) {

  0018e	83 7d d8 02	 cmp	 DWORD PTR _length$1524[ebp], 2
  00192	75 4c		 jne	 SHORT $L1536

; 325  : 		assert(iend+1 < PITCH_CAND);

  00194	8b 55 d4	 mov	 edx, DWORD PTR _iend$1525[ebp]
  00197	83 c2 01	 add	 edx, 1
  0019a	83 fa 56	 cmp	 edx, 86			; 00000056H
  0019d	7c 17		 jl	 SHORT $L1615
  0019f	68 45 01 00 00	 push	 325			; 00000145H
  001a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@JAGJJGKA@c?3?2xbox?2private?2windows?2directx?2@
  001a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DGNKILAE@iend?$CL1?5?$DM?5PITCH_CAND?$AA@
  001ae	e8 00 00 00 00	 call	 __assert
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1615:

; 326  : 		if(psubcosts_isub[iend+1] >tmpmaxcost1) {

  001b6	8b 4d d4	 mov	 ecx, DWORD PTR _iend$1525[ebp]
  001b9	8b 55 e8	 mov	 edx, DWORD PTR _psubcosts_isub$[ebp]
  001bc	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  001c0	d8 5d d0	 fcomp	 DWORD PTR _tmpmaxcost1$1526[ebp]
  001c3	df e0		 fnstsw	 ax
  001c5	f6 c4 41	 test	 ah, 65			; 00000041H
  001c8	75 16		 jne	 SHORT $L1536

; 327  : 		  tmpmaxcost1 = psubcosts_isub[iend+1];

  001ca	8b 45 d4	 mov	 eax, DWORD PTR _iend$1525[ebp]
  001cd	8b 4d e8	 mov	 ecx, DWORD PTR _psubcosts_isub$[ebp]
  001d0	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  001d4	89 55 d0	 mov	 DWORD PTR _tmpmaxcost1$1526[ebp], edx

; 328  : 		  tmpmaxlag1 = iend+1;

  001d7	8b 45 d4	 mov	 eax, DWORD PTR _iend$1525[ebp]
  001da	83 c0 01	 add	 eax, 1
  001dd	89 45 cc	 mov	 DWORD PTR _tmpmaxlag1$1527[ebp], eax
$L1536:

; 329  : 		}
; 330  : 	      }
; 331  : 	      if(tmpmaxcost1 > tmpmaxcost) {

  001e0	d9 45 d0	 fld	 DWORD PTR _tmpmaxcost1$1526[ebp]
  001e3	d8 5d e0	 fcomp	 DWORD PTR _tmpmaxcost$[ebp]
  001e6	df e0		 fnstsw	 ax
  001e8	f6 c4 41	 test	 ah, 65			; 00000041H
  001eb	75 0c		 jne	 SHORT $L1532

; 332  : 		tmpmaxcost = tmpmaxcost1;

  001ed	8b 4d d0	 mov	 ecx, DWORD PTR _tmpmaxcost1$1526[ebp]
  001f0	89 4d e0	 mov	 DWORD PTR _tmpmaxcost$[ebp], ecx

; 333  : 		tmpmaxlag = tmpmaxlag1;

  001f3	8b 55 cc	 mov	 edx, DWORD PTR _tmpmaxlag1$1527[ebp]
  001f6	89 55 e4	 mov	 DWORD PTR _tmpmaxlag$[ebp], edx
$L1532:

; 334  : 	      }
; 335  : 	    }
; 336  : 	  }/* end if(tmpmaxlag ...) */
; 337  : 	  iend = istart + dLagLength[jlag];

  001f9	8b 45 f8	 mov	 eax, DWORD PTR _jlag$[ebp]
  001fc	8b 4d 18	 mov	 ecx, DWORD PTR _dLagLength$[ebp]
  001ff	8b 55 fc	 mov	 edx, DWORD PTR _istart$[ebp]
  00202	03 14 81	 add	 edx, DWORD PTR [ecx+eax*4]
  00205	89 55 d4	 mov	 DWORD PTR _iend$1525[ebp], edx

; 338  : 	  normcost[jlag] += tmpmaxcost;

  00208	8b 45 f8	 mov	 eax, DWORD PTR _jlag$[ebp]
  0020b	8b 4d 08	 mov	 ecx, DWORD PTR _normcost$[ebp]
  0020e	d9 45 e0	 fld	 DWORD PTR _tmpmaxcost$[ebp]
  00211	d8 04 81	 fadd	 DWORD PTR [ecx+eax*4]
  00214	8b 55 f8	 mov	 edx, DWORD PTR _jlag$[ebp]
  00217	8b 45 08	 mov	 eax, DWORD PTR _normcost$[ebp]
  0021a	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 339  : 	  tempcrossEnergy[jlag] += (float)pEnergyRef[tmpmaxlag];

  0021d	8b 4d f8	 mov	 ecx, DWORD PTR _jlag$[ebp]
  00220	8b 55 ec	 mov	 edx, DWORD PTR _tempcrossEnergy$[ebp]
  00223	8b 45 e4	 mov	 eax, DWORD PTR _tmpmaxlag$[ebp]
  00226	8b 75 f0	 mov	 esi, DWORD PTR _pEnergyRef$[ebp]
  00229	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  0022c	d8 04 86	 fadd	 DWORD PTR [esi+eax*4]
  0022f	8b 4d f8	 mov	 ecx, DWORD PTR _jlag$[ebp]
  00232	8b 55 ec	 mov	 edx, DWORD PTR _tempcrossEnergy$[ebp]
  00235	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 340  :         } /* end jlag */

  00238	e9 b0 fe ff ff	 jmp	 $L1529
$L1523:

; 341  :       }
; 342  :     } /* end if(iframe == 0) */
; 343  :     pEnergyRef -= LSUBFRAME_LEN;

  0023d	8b 45 f0	 mov	 eax, DWORD PTR _pEnergyRef$[ebp]
  00240	83 e8 78	 sub	 eax, 120		; 00000078H
  00243	89 45 f0	 mov	 DWORD PTR _pEnergyRef$[ebp], eax

; 344  :     psubcosts_isub += PITCH_CAND;

  00246	8b 4d e8	 mov	 ecx, DWORD PTR _psubcosts_isub$[ebp]
  00249	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  0024f	89 4d e8	 mov	 DWORD PTR _psubcosts_isub$[ebp], ecx

; 345  :   }

  00252	e9 59 fe ff ff	 jmp	 $L1521
$L1522:

; 346  : 
; 347  : 
; 348  :   FindMaxValueFlt(tempcrossEnergy, PITCH_CAND, &tmpmaxlag, &tmpmaxcost);

  00257	8d 55 e0	 lea	 edx, DWORD PTR _tmpmaxcost$[ebp]
  0025a	52		 push	 edx
  0025b	8d 45 e4	 lea	 eax, DWORD PTR _tmpmaxlag$[ebp]
  0025e	50		 push	 eax
  0025f	6a 56		 push	 86			; 00000056H
  00261	8b 4d ec	 mov	 ecx, DWORD PTR _tempcrossEnergy$[ebp]
  00264	51		 push	 ecx
  00265	e8 00 00 00 00	 call	 _FindMaxValueFlt@16

; 349  :   small_corr_energy = LOW_ENERGY_RATIO * tmpmaxcost + MINCON;

  0026a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3e800000
  00270	d8 4d e0	 fmul	 DWORD PTR _tmpmaxcost$[ebp]
  00273	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@358637bd
  00279	d9 5d f4	 fstp	 DWORD PTR _small_corr_energy$[ebp]

; 350  : 
; 351  :   /* truncate low energy to the threshold value */
; 352  :   for (jlag = 0; jlag < PITCH_CAND; jlag ++)

  0027c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _jlag$[ebp], 0
  00283	eb 09		 jmp	 SHORT $L1542
$L1543:
  00285	8b 55 f8	 mov	 edx, DWORD PTR _jlag$[ebp]
  00288	83 c2 01	 add	 edx, 1
  0028b	89 55 f8	 mov	 DWORD PTR _jlag$[ebp], edx
$L1542:
  0028e	83 7d f8 56	 cmp	 DWORD PTR _jlag$[ebp], 86 ; 00000056H
  00292	7d 21		 jge	 SHORT $L1544

; 353  :     if (tempcrossEnergy[jlag] < small_corr_energy)

  00294	8b 45 f8	 mov	 eax, DWORD PTR _jlag$[ebp]
  00297	8b 4d ec	 mov	 ecx, DWORD PTR _tempcrossEnergy$[ebp]
  0029a	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  0029d	d8 5d f4	 fcomp	 DWORD PTR _small_corr_energy$[ebp]
  002a0	df e0		 fnstsw	 ax
  002a2	f6 c4 05	 test	 ah, 5
  002a5	7a 0c		 jp	 SHORT $L1545

; 354  :       tempcrossEnergy[jlag] = small_corr_energy;

  002a7	8b 55 f8	 mov	 edx, DWORD PTR _jlag$[ebp]
  002aa	8b 45 ec	 mov	 eax, DWORD PTR _tempcrossEnergy$[ebp]
  002ad	8b 4d f4	 mov	 ecx, DWORD PTR _small_corr_energy$[ebp]
  002b0	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
$L1545:

; 355  : 
; 356  : 
; 357  :   /* now calculate the normalized pitch costs */
; 358  :   for(jlag=0; jlag+2<PITCH_CAND; jlag+=3) {

  002b3	eb d0		 jmp	 SHORT $L1543
$L1544:
  002b5	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _jlag$[ebp], 0
  002bc	eb 09		 jmp	 SHORT $L1546
$L1547:
  002be	8b 55 f8	 mov	 edx, DWORD PTR _jlag$[ebp]
  002c1	83 c2 03	 add	 edx, 3
  002c4	89 55 f8	 mov	 DWORD PTR _jlag$[ebp], edx
$L1546:
  002c7	8b 45 f8	 mov	 eax, DWORD PTR _jlag$[ebp]
  002ca	83 c0 02	 add	 eax, 2
  002cd	83 f8 56	 cmp	 eax, 86			; 00000056H
  002d0	0f 8d b3 00 00
	00		 jge	 $L1548

; 359  :     register float temp1; 
; 360  :     register float temp2; 
; 361  :     register float temp3; 
; 362  : 
; 363  :     temp1 = (float)sqrt((double)(frameEnergy*tempcrossEnergy[jlag]+MINCON));

  002d6	8b 4d f8	 mov	 ecx, DWORD PTR _jlag$[ebp]
  002d9	8b 55 ec	 mov	 edx, DWORD PTR _tempcrossEnergy$[ebp]
  002dc	d9 45 10	 fld	 DWORD PTR _frameEnergy$[ebp]
  002df	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  002e2	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@358637bd
  002e8	83 ec 08	 sub	 esp, 8
  002eb	dd 1c 24	 fstp	 QWORD PTR [esp]
  002ee	e8 00 00 00 00	 call	 _sqrt
  002f3	83 c4 08	 add	 esp, 8
  002f6	d9 5d c4	 fstp	 DWORD PTR _temp1$1549[ebp]

; 364  : 
; 365  :     temp2 = (float)sqrt((double)(frameEnergy*tempcrossEnergy[jlag+1]+MINCON));

  002f9	8b 45 f8	 mov	 eax, DWORD PTR _jlag$[ebp]
  002fc	8b 4d ec	 mov	 ecx, DWORD PTR _tempcrossEnergy$[ebp]
  002ff	d9 45 10	 fld	 DWORD PTR _frameEnergy$[ebp]
  00302	d8 4c 81 04	 fmul	 DWORD PTR [ecx+eax*4+4]
  00306	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@358637bd
  0030c	83 ec 08	 sub	 esp, 8
  0030f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00312	e8 00 00 00 00	 call	 _sqrt
  00317	83 c4 08	 add	 esp, 8
  0031a	d9 5d c0	 fstp	 DWORD PTR _temp2$1550[ebp]

; 366  : 
; 367  :     temp3 = (float)sqrt((double)(frameEnergy*tempcrossEnergy[jlag+2]+MINCON));

  0031d	8b 55 f8	 mov	 edx, DWORD PTR _jlag$[ebp]
  00320	8b 45 ec	 mov	 eax, DWORD PTR _tempcrossEnergy$[ebp]
  00323	d9 45 10	 fld	 DWORD PTR _frameEnergy$[ebp]
  00326	d8 4c 90 08	 fmul	 DWORD PTR [eax+edx*4+8]
  0032a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@358637bd
  00330	83 ec 08	 sub	 esp, 8
  00333	dd 1c 24	 fstp	 QWORD PTR [esp]
  00336	e8 00 00 00 00	 call	 _sqrt
  0033b	83 c4 08	 add	 esp, 8
  0033e	d9 5d c8	 fstp	 DWORD PTR _temp3$1551[ebp]

; 368  : 
; 369  :     normcost[jlag] = normcost[jlag]/temp1;

  00341	8b 4d f8	 mov	 ecx, DWORD PTR _jlag$[ebp]
  00344	8b 55 08	 mov	 edx, DWORD PTR _normcost$[ebp]
  00347	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  0034a	d8 75 c4	 fdiv	 DWORD PTR _temp1$1549[ebp]
  0034d	8b 45 f8	 mov	 eax, DWORD PTR _jlag$[ebp]
  00350	8b 4d 08	 mov	 ecx, DWORD PTR _normcost$[ebp]
  00353	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 370  :     normcost[jlag+1] = normcost[jlag+1]/temp2;

  00356	8b 55 f8	 mov	 edx, DWORD PTR _jlag$[ebp]
  00359	8b 45 08	 mov	 eax, DWORD PTR _normcost$[ebp]
  0035c	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  00360	d8 75 c0	 fdiv	 DWORD PTR _temp2$1550[ebp]
  00363	8b 4d f8	 mov	 ecx, DWORD PTR _jlag$[ebp]
  00366	8b 55 08	 mov	 edx, DWORD PTR _normcost$[ebp]
  00369	d9 5c 8a 04	 fstp	 DWORD PTR [edx+ecx*4+4]

; 371  :     normcost[jlag+2] = normcost[jlag+2]/temp3;

  0036d	8b 45 f8	 mov	 eax, DWORD PTR _jlag$[ebp]
  00370	8b 4d 08	 mov	 ecx, DWORD PTR _normcost$[ebp]
  00373	d9 44 81 08	 fld	 DWORD PTR [ecx+eax*4+8]
  00377	d8 75 c8	 fdiv	 DWORD PTR _temp3$1551[ebp]
  0037a	8b 55 f8	 mov	 edx, DWORD PTR _jlag$[ebp]
  0037d	8b 45 08	 mov	 eax, DWORD PTR _normcost$[ebp]
  00380	d9 5c 90 08	 fstp	 DWORD PTR [eax+edx*4+8]

; 372  :   }

  00384	e9 35 ff ff ff	 jmp	 $L1547
$L1548:

; 373  : 
; 374  :   for( ;jlag<PITCH_CAND; jlag++) {

  00389	eb 09		 jmp	 SHORT $L1558
$L1559:
  0038b	8b 4d f8	 mov	 ecx, DWORD PTR _jlag$[ebp]
  0038e	83 c1 01	 add	 ecx, 1
  00391	89 4d f8	 mov	 DWORD PTR _jlag$[ebp], ecx
$L1558:
  00394	83 7d f8 56	 cmp	 DWORD PTR _jlag$[ebp], 86 ; 00000056H
  00398	7d 37		 jge	 SHORT $L1503

; 375  :     normcost[jlag] = normcost[jlag]/(float)sqrt((double)(frameEnergy*tempcrossEnergy[jlag]+MINCON));

  0039a	8b 55 f8	 mov	 edx, DWORD PTR _jlag$[ebp]
  0039d	8b 45 ec	 mov	 eax, DWORD PTR _tempcrossEnergy$[ebp]
  003a0	d9 45 10	 fld	 DWORD PTR _frameEnergy$[ebp]
  003a3	d8 0c 90	 fmul	 DWORD PTR [eax+edx*4]
  003a6	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@358637bd
  003ac	83 ec 08	 sub	 esp, 8
  003af	dd 1c 24	 fstp	 QWORD PTR [esp]
  003b2	e8 00 00 00 00	 call	 _sqrt
  003b7	83 c4 08	 add	 esp, 8
  003ba	d9 55 bc	 fst	 DWORD PTR tv388[ebp]
  003bd	8b 4d f8	 mov	 ecx, DWORD PTR _jlag$[ebp]
  003c0	8b 55 08	 mov	 edx, DWORD PTR _normcost$[ebp]
  003c3	d8 3c 8a	 fdivr	 DWORD PTR [edx+ecx*4]
  003c6	8b 45 f8	 mov	 eax, DWORD PTR _jlag$[ebp]
  003c9	8b 4d 08	 mov	 ecx, DWORD PTR _normcost$[ebp]
  003cc	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 376  :   } 

  003cf	eb ba		 jmp	 SHORT $L1559
$L1503:

; 377  : }

  003d1	5e		 pop	 esi
  003d2	8b e5		 mov	 esp, ebp
  003d4	5d		 pop	 ebp
  003d5	c2 1c 00	 ret	 28			; 0000001cH
_CalcFrameCosts@28 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT _BiasCosts@12
_TEXT	SEGMENT
_bias_f$ = -8
_i$ = -4
_costs$ = 8
_biasTab$ = 12
_bias_floor$ = 16
_BiasCosts@12 PROC NEAR					; COMDAT

; 382  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 383  :   register int i;
; 384  :   register float bias_f = 1.0F;

  00007	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _bias_f$[ebp], 1065353216 ; 3f800000H

; 385  : 
; 386  :   /*------------------------------------------------------------
; 387  :     Apply the new bias to the cost function.
; 388  :     ------------------------------------------------------------*/
; 389  :   for (i = 0; i+2 < PITCH_CAND; i+=3) {

  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00015	eb 09		 jmp	 SHORT $L1572
$L1573:
  00017	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001a	83 c0 03	 add	 eax, 3
  0001d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L1572:
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00023	83 c1 02	 add	 ecx, 2
  00026	83 f9 56	 cmp	 ecx, 86			; 00000056H
  00029	7d 59		 jge	 SHORT $L1574

; 390  :     costs[i] *= biasTab[i];

  0002b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0002e	8b 45 08	 mov	 eax, DWORD PTR _costs$[ebp]
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00034	8b 75 0c	 mov	 esi, DWORD PTR _biasTab$[ebp]
  00037	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  0003a	d8 0c 8e	 fmul	 DWORD PTR [esi+ecx*4]
  0003d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00040	8b 45 08	 mov	 eax, DWORD PTR _costs$[ebp]
  00043	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 391  :     costs[i+1] *= biasTab[i+1];

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00049	8b 55 08	 mov	 edx, DWORD PTR _costs$[ebp]
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004f	8b 75 0c	 mov	 esi, DWORD PTR _biasTab$[ebp]
  00052	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  00056	d8 4c 86 04	 fmul	 DWORD PTR [esi+eax*4+4]
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0005d	8b 55 08	 mov	 edx, DWORD PTR _costs$[ebp]
  00060	d9 5c 8a 04	 fstp	 DWORD PTR [edx+ecx*4+4]

; 392  :     costs[i+2] *= biasTab[i+2];

  00064	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _costs$[ebp]
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0006d	8b 75 0c	 mov	 esi, DWORD PTR _biasTab$[ebp]
  00070	d9 44 81 08	 fld	 DWORD PTR [ecx+eax*4+8]
  00074	d8 4c 96 08	 fmul	 DWORD PTR [esi+edx*4+8]
  00078	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _costs$[ebp]
  0007e	d9 5c 81 08	 fstp	 DWORD PTR [ecx+eax*4+8]

; 393  :   }

  00082	eb 93		 jmp	 SHORT $L1573
$L1574:

; 394  : 
; 395  :   for (; i < PITCH_CAND; i++)

  00084	eb 09		 jmp	 SHORT $L1575
$L1576:
  00086	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00089	83 c2 01	 add	 edx, 1
  0008c	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L1575:
  0008f	83 7d fc 56	 cmp	 DWORD PTR _i$[ebp], 86	; 00000056H
  00093	7d 1d		 jge	 SHORT $L1577

; 396  :     costs[i] *= biasTab[i];

  00095	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00098	8b 4d 08	 mov	 ecx, DWORD PTR _costs$[ebp]
  0009b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0009e	8b 75 0c	 mov	 esi, DWORD PTR _biasTab$[ebp]
  000a1	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  000a4	d8 0c 96	 fmul	 DWORD PTR [esi+edx*4]
  000a7	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000aa	8b 4d 08	 mov	 ecx, DWORD PTR _costs$[ebp]
  000ad	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]
  000b0	eb d4		 jmp	 SHORT $L1576
$L1577:

; 397  : 
; 398  :   *bias_floor = bias_f;

  000b2	8b 55 10	 mov	 edx, DWORD PTR _bias_floor$[ebp]
  000b5	8b 45 f8	 mov	 eax, DWORD PTR _bias_f$[ebp]
  000b8	89 02		 mov	 DWORD PTR [edx], eax

; 399  : }

  000ba	5e		 pop	 esi
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 0c 00	 ret	 12			; 0000000cH
_BiasCosts@12 ENDP
_TEXT	ENDS
END
