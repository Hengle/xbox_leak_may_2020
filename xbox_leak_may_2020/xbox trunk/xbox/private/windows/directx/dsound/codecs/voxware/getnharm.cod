; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\getnharm.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _getnHarm@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _getvHarm@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _getPv@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_getnHarm@4
PUBLIC	__real@3f000000
PUBLIC	__real@3f7f0000
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
EXTRN	_floor:NEAR
;	COMDAT __real@3f000000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\getnharm.c
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3f7f0000
CONST	SEGMENT
__real@3f7f0000 DD 03f7f0000r			; 0.996094
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _getnHarm@4
_TEXT	SEGMENT
_nHarm$ = -4
_Pitch$ = 8
_getnHarm@4 PROC NEAR					; COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 42   :    short nHarm;
; 43   :    nHarm        = (short)floor(Pitch*0.5F*ARBITRARY_CUTOFF);   /* 255/(512/pitch) */

  00004	d9 45 08	 fld	 DWORD PTR _Pitch$[ebp]
  00007	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  0000d	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f7f0000
  00013	83 ec 08	 sub	 esp, 8
  00016	dd 1c 24	 fstp	 QWORD PTR [esp]
  00019	e8 00 00 00 00	 call	 _floor
  0001e	83 c4 08	 add	 esp, 8
  00021	e8 00 00 00 00	 call	 __ftol2
  00026	66 89 45 fc	 mov	 WORD PTR _nHarm$[ebp], ax

; 44   :    return(nHarm);

  0002a	66 8b 45 fc	 mov	 ax, WORD PTR _nHarm$[ebp]

; 45   : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
_getnHarm@4 ENDP
_TEXT	ENDS
PUBLIC	_getvHarm@8
; Function compile flags: /Odt
;	COMDAT _getvHarm@8
_TEXT	SEGMENT
tv83 = -8
_nHarm$ = -4
_Pitch$ = 8
_Pv$ = 12
_getvHarm@8 PROC NEAR					; COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 49   :    short nHarm;
; 50   :    nHarm        = (short)floor(Pitch*0.5F*ARBITRARY_CUTOFF);   /* 255/(512/pitch) */

  00006	d9 45 08	 fld	 DWORD PTR _Pitch$[ebp]
  00009	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  0000f	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f7f0000
  00015	83 ec 08	 sub	 esp, 8
  00018	dd 1c 24	 fstp	 QWORD PTR [esp]
  0001b	e8 00 00 00 00	 call	 _floor
  00020	83 c4 08	 add	 esp, 8
  00023	e8 00 00 00 00	 call	 __ftol2
  00028	66 89 45 fc	 mov	 WORD PTR _nHarm$[ebp], ax

; 51   :    nHarm        = (short)floor((float)nHarm*Pv+0.5F);

  0002c	0f bf 45 fc	 movsx	 eax, WORD PTR _nHarm$[ebp]
  00030	89 45 f8	 mov	 DWORD PTR tv83[ebp], eax
  00033	db 45 f8	 fild	 DWORD PTR tv83[ebp]
  00036	d8 4d 0c	 fmul	 DWORD PTR _Pv$[ebp]
  00039	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3f000000
  0003f	83 ec 08	 sub	 esp, 8
  00042	dd 1c 24	 fstp	 QWORD PTR [esp]
  00045	e8 00 00 00 00	 call	 _floor
  0004a	83 c4 08	 add	 esp, 8
  0004d	e8 00 00 00 00	 call	 __ftol2
  00052	66 89 45 fc	 mov	 WORD PTR _nHarm$[ebp], ax

; 52   :    return(nHarm);

  00056	66 8b 45 fc	 mov	 ax, WORD PTR _nHarm$[ebp]

; 53   : }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
_getvHarm@8 ENDP
_TEXT	ENDS
PUBLIC	_getPv@8
PUBLIC	__real@3f800000
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _getPv@8
_TEXT	SEGMENT
tv73 = -12
tv72 = -8
_Pv$ = -4
_iVHarm$ = 8
_nHarm$ = 12
_getPv@8 PROC NEAR					; COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 57   :   float Pv;
; 58   : 
; 59   :   if (nHarm <= 0) Pv = 0.0F;      /* should never happen */

  00006	0f bf 45 0c	 movsx	 eax, WORD PTR _nHarm$[ebp]
  0000a	85 c0		 test	 eax, eax
  0000c	7f 07		 jg	 SHORT $L1229
  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Pv$[ebp], 0
$L1229:

; 60   :   Pv=(float)(iVHarm)/(float)nHarm;

  00015	0f bf 4d 08	 movsx	 ecx, WORD PTR _iVHarm$[ebp]
  00019	89 4d f8	 mov	 DWORD PTR tv72[ebp], ecx
  0001c	db 45 f8	 fild	 DWORD PTR tv72[ebp]
  0001f	0f bf 55 0c	 movsx	 edx, WORD PTR _nHarm$[ebp]
  00023	89 55 f4	 mov	 DWORD PTR tv73[ebp], edx
  00026	da 75 f4	 fidiv	 DWORD PTR tv73[ebp]
  00029	d9 55 fc	 fst	 DWORD PTR _Pv$[ebp]

; 61   : 
; 62   :   if (Pv > 1.0F)   Pv = 1.0F;     /* should never happen too! */

  0002c	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f800000
  00032	df e0		 fnstsw	 ax
  00034	f6 c4 41	 test	 ah, 65			; 00000041H
  00037	75 07		 jne	 SHORT $L1232
  00039	c7 45 fc 00 00
	80 3f		 mov	 DWORD PTR _Pv$[ebp], 1065353216 ; 3f800000H
$L1232:

; 63   :   return Pv;

  00040	d9 45 fc	 fld	 DWORD PTR _Pv$[ebp]

; 64   : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
_getPv@8 ENDP
_TEXT	ENDS
END
