; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\autocor.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@GDANBAPN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@PDPOOAJM@iOrder?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08HJPEENFP@pcfVecIn?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08ODGBJAGD@pfVecOut?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _AutoCor@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_AutoCor@16
PUBLIC	??_C@_0EA@GDANBAPN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0L@PDPOOAJM@iOrder?5?$DO?50?$AA@		; `string'
PUBLIC	??_C@_08HJPEENFP@pcfVecIn?$AA@			; `string'
PUBLIC	??_C@_08ODGBJAGD@pfVecOut?$AA@			; `string'
EXTRN	__assert:NEAR
EXTRN	_DotProd@12:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0EA@GDANBAPN@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\autocor.c
CONST	SEGMENT
??_C@_0EA@GDANBAPN@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\autocor.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PDPOOAJM@iOrder?5?$DO?50?$AA@
CONST	SEGMENT
??_C@_0L@PDPOOAJM@iOrder?5?$DO?50?$AA@ DB 'iOrder > 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HJPEENFP@pcfVecIn?$AA@
CONST	SEGMENT
??_C@_08HJPEENFP@pcfVecIn?$AA@ DB 'pcfVecIn', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08ODGBJAGD@pfVecOut?$AA@
CONST	SEGMENT
??_C@_08ODGBJAGD@pfVecOut?$AA@ DB 'pfVecOut', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _AutoCor@16
_TEXT	SEGMENT
_pcfData$ = -4
_iOrder$ = 8
_pcfVecIn$ = 12
_iLength$ = 16
_pfVecOut$ = 20
_AutoCor@16 PROC NEAR					; COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 54   :     const float *pcfData;
; 55   : 
; 56   :     assert( iOrder > 0 );

  00004	83 7d 08 00	 cmp	 DWORD PTR _iOrder$[ebp], 0
  00008	7f 14		 jg	 SHORT $L570
  0000a	6a 38		 push	 56			; 00000038H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@GDANBAPN@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@PDPOOAJM@iOrder?5?$DO?50?$AA@
  00016	e8 00 00 00 00	 call	 __assert
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L570:

; 57   :     assert( pcfVecIn );

  0001e	83 7d 0c 00	 cmp	 DWORD PTR _pcfVecIn$[ebp], 0
  00022	75 14		 jne	 SHORT $L571
  00024	6a 39		 push	 57			; 00000039H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@GDANBAPN@c?3?2xbox?2private?2windows?2directx?2@
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08HJPEENFP@pcfVecIn?$AA@
  00030	e8 00 00 00 00	 call	 __assert
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
$L571:

; 58   :     assert( pfVecOut );

  00038	83 7d 14 00	 cmp	 DWORD PTR _pfVecOut$[ebp], 0
  0003c	75 14		 jne	 SHORT $L572
  0003e	6a 3a		 push	 58			; 0000003aH
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@GDANBAPN@c?3?2xbox?2private?2windows?2directx?2@
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08ODGBJAGD@pfVecOut?$AA@
  0004a	e8 00 00 00 00	 call	 __assert
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
$L572:

; 59   : 
; 60   :     for(pcfData=pcfVecIn;iOrder > 0;pcfData++, iLength--, iOrder--) 

  00052	8b 45 0c	 mov	 eax, DWORD PTR _pcfVecIn$[ebp]
  00055	89 45 fc	 mov	 DWORD PTR _pcfData$[ebp], eax
  00058	eb 1b		 jmp	 SHORT $L556
$L557:
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _pcfData$[ebp]
  0005d	83 c1 04	 add	 ecx, 4
  00060	89 4d fc	 mov	 DWORD PTR _pcfData$[ebp], ecx
  00063	8b 55 10	 mov	 edx, DWORD PTR _iLength$[ebp]
  00066	83 ea 01	 sub	 edx, 1
  00069	89 55 10	 mov	 DWORD PTR _iLength$[ebp], edx
  0006c	8b 45 08	 mov	 eax, DWORD PTR _iOrder$[ebp]
  0006f	83 e8 01	 sub	 eax, 1
  00072	89 45 08	 mov	 DWORD PTR _iOrder$[ebp], eax
$L556:
  00075	83 7d 08 00	 cmp	 DWORD PTR _iOrder$[ebp], 0
  00079	7e 21		 jle	 SHORT $L547

; 61   :        *pfVecOut++= DotProd(pcfVecIn, pcfData, iLength);

  0007b	8b 4d 10	 mov	 ecx, DWORD PTR _iLength$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 fc	 mov	 edx, DWORD PTR _pcfData$[ebp]
  00082	52		 push	 edx
  00083	8b 45 0c	 mov	 eax, DWORD PTR _pcfVecIn$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _DotProd@12
  0008c	8b 4d 14	 mov	 ecx, DWORD PTR _pfVecOut$[ebp]
  0008f	d9 19		 fstp	 DWORD PTR [ecx]
  00091	8b 55 14	 mov	 edx, DWORD PTR _pfVecOut$[ebp]
  00094	83 c2 04	 add	 edx, 4
  00097	89 55 14	 mov	 DWORD PTR _pfVecOut$[ebp], edx
  0009a	eb be		 jmp	 SHORT $L557
$L547:

; 62   : }

  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 10 00	 ret	 16			; 00000010H
_AutoCor@16 ENDP
_TEXT	ENDS
END
