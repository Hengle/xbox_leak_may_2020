; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\vem2.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DN@DNOAOBC@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@KCLLLNDL@hVemMemHandle?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _vemUnregisterState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemRegisterState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemServiceState@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemDisableState@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemEnableState@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemGetState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemUnregisterExtension@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemRegisterExtension@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemDisableExtension@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemEnableExtension@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemGetExtension@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemAttachExtension@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemDetachExtension@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemGetExtensionFunc@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemSetExtensionFunc@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemGetExtensionData@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemSetExtensionData@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemFree@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemInit@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemShowStates@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vemShowExtensions@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_vemUnregisterState@8
PUBLIC	_vemDetachExtension@8
EXTRN	_vecFree@4:NEAR
EXTRN	_vecDelElement@8:NEAR
EXTRN	_vecFindElement@12:NEAR
EXTRN	_vecGetFirstElement@4:NEAR
EXTRN	_vecGetData@4:NEAR
EXTRN	_free:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\vem2.c
;	COMDAT _vemUnregisterState@8
_TEXT	SEGMENT
_pElement$ = -20
_pVemMemHandler$ = -16
_pVemState$ = -12
_extensionKey$ = -8
_pVemAttach$ = -4
_hVemMemHandle$ = 8
_stateKey$ = 12
_vemUnregisterState@8 PROC NEAR				; COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 114  :    VEM_ATTACH        *pVemAttach       = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVemAttach$[ebp], 0

; 115  :    VEM_KEY            extensionKey     = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _extensionKey$[ebp], 0

; 116  :    void              *pElement;
; 117  :    VEM2              *pVemMemHandler   = (VEM2 *)hVemMemHandle;

  00014	8b 45 08	 mov	 eax, DWORD PTR _hVemMemHandle$[ebp]
  00017	89 45 f0	 mov	 DWORD PTR _pVemMemHandler$[ebp], eax

; 118  : 
; 119  :    VEM_STATE         *pVemState        = (VEM_STATE *)vecGetData((void *)stateKey);

  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _stateKey$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _vecGetData@4
  00023	89 45 f4	 mov	 DWORD PTR _pVemState$[ebp], eax

; 120  :  
; 121  :    if(pVemState) {

  00026	83 7d f4 00	 cmp	 DWORD PTR _pVemState$[ebp], 0
  0002a	0f 84 ae 00 00
	00		 je	 $L1556

; 122  :       if(pVemState->pAttachVec) {

  00030	8b 55 f4	 mov	 edx, DWORD PTR _pVemState$[ebp]
  00033	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00037	74 5e		 je	 SHORT $L1557
$L1559:

; 123  : 
; 124  :          while(0 != (pElement=vecGetFirstElement(pVemState->pAttachVec))) {

  00039	8b 45 f4	 mov	 eax, DWORD PTR _pVemState$[ebp]
  0003c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 _vecGetFirstElement@4
  00045	89 45 ec	 mov	 DWORD PTR _pElement$[ebp], eax
  00048	83 7d ec 00	 cmp	 DWORD PTR _pElement$[ebp], 0
  0004c	74 33		 je	 SHORT $L1560

; 125  :             pVemAttach=(VEM_ATTACH *)vecGetData(pElement);

  0004e	8b 55 ec	 mov	 edx, DWORD PTR _pElement$[ebp]
  00051	52		 push	 edx
  00052	e8 00 00 00 00	 call	 _vecGetData@4
  00057	89 45 fc	 mov	 DWORD PTR _pVemAttach$[ebp], eax

; 126  :             extensionKey=(VEM_KEY)vecFindElement(pVemMemHandler->pVemExtensions, 
; 127  :                pVemAttach->pVemExtension, FORWARDS);

  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _pVemAttach$[ebp]
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	51		 push	 ecx
  00063	8b 55 f0	 mov	 edx, DWORD PTR _pVemMemHandler$[ebp]
  00066	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _vecFindElement@12
  0006f	89 45 f8	 mov	 DWORD PTR _extensionKey$[ebp], eax

; 128  : 
; 129  :             vemDetachExtension(stateKey, extensionKey);

  00072	8b 4d f8	 mov	 ecx, DWORD PTR _extensionKey$[ebp]
  00075	51		 push	 ecx
  00076	8b 55 0c	 mov	 edx, DWORD PTR _stateKey$[ebp]
  00079	52		 push	 edx
  0007a	e8 00 00 00 00	 call	 _vemDetachExtension@8

; 130  :          }

  0007f	eb b8		 jmp	 SHORT $L1559
$L1560:

; 131  : 
; 132  :          vecFree(pVemState->pAttachVec);

  00081	8b 45 f4	 mov	 eax, DWORD PTR _pVemState$[ebp]
  00084	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 _vecFree@4

; 133  :          pVemState->pAttachVec=NULL;

  0008d	8b 55 f4	 mov	 edx, DWORD PTR _pVemState$[ebp]
  00090	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L1557:

; 134  :       }
; 135  :       vecDelElement(pVemMemHandler->pVemStates, stateKey);

  00097	8b 45 0c	 mov	 eax, DWORD PTR _stateKey$[ebp]
  0009a	50		 push	 eax
  0009b	8b 4d f0	 mov	 ecx, DWORD PTR _pVemMemHandler$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 _vecDelElement@8

; 136  :       VOX_MEM_FREE(pVemState->pszKey);

  000a6	8b 45 f4	 mov	 eax, DWORD PTR _pVemState$[ebp]
  000a9	83 38 00	 cmp	 DWORD PTR [eax], 0
  000ac	74 17		 je	 SHORT $L1564
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR _pVemState$[ebp]
  000b1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b3	52		 push	 edx
  000b4	e8 00 00 00 00	 call	 _free
  000b9	83 c4 04	 add	 esp, 4
  000bc	8b 45 f4	 mov	 eax, DWORD PTR _pVemState$[ebp]
  000bf	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L1564:

; 137  :       VOX_MEM_FREE(pVemState);

  000c5	83 7d f4 00	 cmp	 DWORD PTR _pVemState$[ebp], 0
  000c9	74 13		 je	 SHORT $L1556
  000cb	8b 4d f4	 mov	 ecx, DWORD PTR _pVemState$[ebp]
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 _free
  000d4	83 c4 04	 add	 esp, 4
  000d7	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pVemState$[ebp], 0
$L1556:

; 138  :    }
; 139  : 
; 140  :    return NULL;

  000de	33 c0		 xor	 eax, eax

; 141  : }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
_vemUnregisterState@8 ENDP
_TEXT	ENDS
PUBLIC	_vemRegisterState@8
EXTRN	_vecInit@0:NEAR
EXTRN	_vecAddElement@12:NEAR
EXTRN	_calloc:NEAR
EXTRN	_strcpy:NEAR
EXTRN	_strlen:NEAR
; Function compile flags: /Odt
;	COMDAT _vemRegisterState@8
_TEXT	SEGMENT
_pVemMemHandler$ = -12
_pVemState$ = -8
_pKey$ = -4
_hVemMemHandle$ = 8
_pszKey$ = 12
_vemRegisterState@8 PROC NEAR				; COMDAT

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 174  :    VEM_STATE         *pVemState        = NULL;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pVemState$[ebp], 0

; 175  :    VEM_KEY           *pKey             = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pKey$[ebp], 0

; 176  :    VEM2              *pVemMemHandler   = (VEM2 *)hVemMemHandle;

  00014	8b 45 08	 mov	 eax, DWORD PTR _hVemMemHandle$[ebp]
  00017	89 45 f4	 mov	 DWORD PTR _pVemMemHandler$[ebp], eax

; 177  : 
; 178  :    /* initialize main vem state memory */
; 179  :    if(VOX_MEM_INIT(pVemState,1,sizeof(VEM_STATE)))

  0001a	6a 0c		 push	 12			; 0000000cH
  0001c	6a 01		 push	 1
  0001e	e8 00 00 00 00	 call	 _calloc
  00023	83 c4 08	 add	 esp, 8
  00026	89 45 f8	 mov	 DWORD PTR _pVemState$[ebp], eax
  00029	83 7d f8 00	 cmp	 DWORD PTR _pVemState$[ebp], 0
  0002d	75 07		 jne	 SHORT $L1581

; 180  :        return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	e9 c2 00 00 00	 jmp	 $L1573
$L1581:

; 181  :    else {
; 182  :       pVemState->pszKey=NULL;

  00036	8b 4d f8	 mov	 ecx, DWORD PTR _pVemState$[ebp]
  00039	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 183  :       pVemState->pAttachVec=NULL;

  0003f	8b 55 f8	 mov	 edx, DWORD PTR _pVemState$[ebp]
  00042	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 184  :       pVemState->enable=ENABLED;

  00049	8b 45 f8	 mov	 eax, DWORD PTR _pVemState$[ebp]
  0004c	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [eax+8], 1

; 185  :    }
; 186  :       
; 187  : 
; 188  :    /* initialize and store the vector key */
; 189  :    if(!(pKey=(VEM_KEY)vecAddElement(pVemMemHandler->pVemStates, pVemState, FORWARDS))) {

  00053	6a 01		 push	 1
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _pVemState$[ebp]
  00058	51		 push	 ecx
  00059	8b 55 f4	 mov	 edx, DWORD PTR _pVemMemHandler$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _vecAddElement@12
  00064	89 45 fc	 mov	 DWORD PTR _pKey$[ebp], eax
  00067	83 7d fc 00	 cmp	 DWORD PTR _pKey$[ebp], 0
  0006b	75 1d		 jne	 SHORT $L1587

; 190  :       VOX_MEM_FREE(pVemState);

  0006d	83 7d f8 00	 cmp	 DWORD PTR _pVemState$[ebp], 0
  00071	74 13		 je	 SHORT $L1588
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _pVemState$[ebp]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 _free
  0007c	83 c4 04	 add	 esp, 4
  0007f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pVemState$[ebp], 0
$L1588:

; 191  :       return NULL;

  00086	33 c0		 xor	 eax, eax
  00088	eb 6e		 jmp	 SHORT $L1573
$L1587:

; 192  :    }
; 193  : 
; 194  :    /* initialize the string key */
; 195  :    if(VOX_MEM_INIT(pVemState->pszKey,strlen(pszKey)+1,sizeof(char))) 

  0008a	6a 01		 push	 1
  0008c	8b 55 0c	 mov	 edx, DWORD PTR _pszKey$[ebp]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 _strlen
  00095	83 c4 04	 add	 esp, 4
  00098	83 c0 01	 add	 eax, 1
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 _calloc
  000a1	83 c4 08	 add	 esp, 8
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _pVemState$[ebp]
  000a7	89 01		 mov	 DWORD PTR [ecx], eax
  000a9	8b 55 f8	 mov	 edx, DWORD PTR _pVemState$[ebp]
  000ac	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000af	75 0f		 jne	 SHORT $L1592

; 196  :       return(vemUnregisterState(hVemMemHandle, pKey));

  000b1	8b 45 fc	 mov	 eax, DWORD PTR _pKey$[ebp]
  000b4	50		 push	 eax
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _hVemMemHandle$[ebp]
  000b8	51		 push	 ecx
  000b9	e8 00 00 00 00	 call	 _vemUnregisterState@8
  000be	eb 38		 jmp	 SHORT $L1573
$L1592:

; 197  :    else
; 198  :       strcpy(pVemState->pszKey,pszKey);

  000c0	8b 55 0c	 mov	 edx, DWORD PTR _pszKey$[ebp]
  000c3	52		 push	 edx
  000c4	8b 45 f8	 mov	 eax, DWORD PTR _pVemState$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _strcpy
  000cf	83 c4 08	 add	 esp, 8

; 199  : 
; 200  :    /* initialize the state's extension vector */
; 201  :    if(!(pVemState->pAttachVec=vecInit())) 

  000d2	e8 00 00 00 00	 call	 _vecInit@0
  000d7	8b 55 f8	 mov	 edx, DWORD PTR _pVemState$[ebp]
  000da	89 42 04	 mov	 DWORD PTR [edx+4], eax
  000dd	8b 45 f8	 mov	 eax, DWORD PTR _pVemState$[ebp]
  000e0	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000e4	75 0f		 jne	 SHORT $L1594

; 202  :       return(vemUnregisterState(hVemMemHandle, pKey));

  000e6	8b 4d fc	 mov	 ecx, DWORD PTR _pKey$[ebp]
  000e9	51		 push	 ecx
  000ea	8b 55 08	 mov	 edx, DWORD PTR _hVemMemHandle$[ebp]
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 _vemUnregisterState@8
  000f3	eb 03		 jmp	 SHORT $L1573
$L1594:

; 203  : 
; 204  :    return(pKey);

  000f5	8b 45 fc	 mov	 eax, DWORD PTR _pKey$[ebp]
$L1573:

; 205  : }

  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
_vemRegisterState@8 ENDP
_TEXT	ENDS
PUBLIC	_vemServiceState@4
EXTRN	_vecGetNextElement@8:NEAR
; Function compile flags: /Odt
;	COMDAT _vemServiceState@4
_TEXT	SEGMENT
_pElement$ = -12
_pVemState$ = -8
_pVemExtension$ = -4
_stateKey$ = 8
_vemServiceState@4 PROC NEAR				; COMDAT

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 239  :    VEM_STATE         *pVemState        = NULL;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pVemState$[ebp], 0

; 240  :    VEM_EXTENSION     *pVemExtension    = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVemExtension$[ebp], 0

; 241  :    void              *pElement         = NULL;

  00014	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pElement$[ebp], 0

; 242  : 
; 243  :    if(!(pVemState=(VEM_STATE *)vecGetData((void *)stateKey)))

  0001b	8b 45 08	 mov	 eax, DWORD PTR _stateKey$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _vecGetData@4
  00024	89 45 f8	 mov	 DWORD PTR _pVemState$[ebp], eax
  00027	83 7d f8 00	 cmp	 DWORD PTR _pVemState$[ebp], 0
  0002b	75 06		 jne	 SHORT $L1606

; 244  :       return 1;

  0002d	66 b8 01 00	 mov	 ax, 1
  00031	eb 60		 jmp	 SHORT $L1597
$L1606:

; 245  : 
; 246  :    if(pVemState->enable==DISABLED)

  00033	8b 4d f8	 mov	 ecx, DWORD PTR _pVemState$[ebp]
  00036	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0003a	75 06		 jne	 SHORT $L1607

; 247  :       return 1;

  0003c	66 b8 01 00	 mov	 ax, 1
  00040	eb 51		 jmp	 SHORT $L1597
$L1607:

; 248  : 
; 249  :    pElement = vecGetFirstElement(pVemState->pAttachVec);

  00042	8b 55 f8	 mov	 edx, DWORD PTR _pVemState$[ebp]
  00045	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _vecGetFirstElement@4
  0004e	89 45 f4	 mov	 DWORD PTR _pElement$[ebp], eax
$L1609:

; 250  : 
; 251  :    while(pElement) {

  00051	83 7d f4 00	 cmp	 DWORD PTR _pElement$[ebp], 0
  00055	74 39		 je	 SHORT $L1610

; 252  :       pVemExtension=((VEM_ATTACH*)vecGetData(pElement))->pVemExtension;

  00057	8b 4d f4	 mov	 ecx, DWORD PTR _pElement$[ebp]
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 _vecGetData@4
  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	89 55 fc	 mov	 DWORD PTR _pVemExtension$[ebp], edx

; 253  :       if(pVemExtension->enable==ENABLED)

  00066	8b 45 fc	 mov	 eax, DWORD PTR _pVemExtension$[ebp]
  00069	83 78 14 01	 cmp	 DWORD PTR [eax+20], 1
  0006d	75 11		 jne	 SHORT $L1612

; 254  :          (pVemExtension->vemFunc)(pVemExtension->vemFuncMem, stateKey);

  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _stateKey$[ebp]
  00072	51		 push	 ecx
  00073	8b 55 fc	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  00076	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00079	50		 push	 eax
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  0007d	ff 51 04	 call	 DWORD PTR [ecx+4]
$L1612:

; 255  : 
; 256  :       pElement=vecGetNextElement(pElement, FORWARDS);

  00080	6a 01		 push	 1
  00082	8b 55 f4	 mov	 edx, DWORD PTR _pElement$[ebp]
  00085	52		 push	 edx
  00086	e8 00 00 00 00	 call	 _vecGetNextElement@8
  0008b	89 45 f4	 mov	 DWORD PTR _pElement$[ebp], eax

; 257  :    }

  0008e	eb c1		 jmp	 SHORT $L1609
$L1610:

; 258  :    return 0;

  00090	66 33 c0	 xor	 ax, ax
$L1597:

; 259  : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
_vemServiceState@4 ENDP
_TEXT	ENDS
PUBLIC	_vemDisableState@4
; Function compile flags: /Odt
;	COMDAT _vemDisableState@4
_TEXT	SEGMENT
_pVemState$ = -4
_stateKey$ = 8
_vemDisableState@4 PROC NEAR				; COMDAT

; 291  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 292  :    VEM_STATE *pVemState=vecGetData((void *)stateKey);

  00004	8b 45 08	 mov	 eax, DWORD PTR _stateKey$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _vecGetData@4
  0000d	89 45 fc	 mov	 DWORD PTR _pVemState$[ebp], eax

; 293  : 
; 294  :    if(!pVemState)

  00010	83 7d fc 00	 cmp	 DWORD PTR _pVemState$[ebp], 0
  00014	75 06		 jne	 SHORT $L1618

; 295  :       return 1;

  00016	66 b8 01 00	 mov	 ax, 1
  0001a	eb 0d		 jmp	 SHORT $L1615
$L1618:

; 296  :    else
; 297  :       pVemState->enable=DISABLED;

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _pVemState$[ebp]
  0001f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 298  :    return 0;

  00026	66 33 c0	 xor	 ax, ax
$L1615:

; 299  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
_vemDisableState@4 ENDP
_TEXT	ENDS
PUBLIC	_vemEnableState@4
; Function compile flags: /Odt
;	COMDAT _vemEnableState@4
_TEXT	SEGMENT
_pVemState$ = -4
_stateKey$ = 8
_vemEnableState@4 PROC NEAR				; COMDAT

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 332  :    VEM_STATE *pVemState=vecGetData((void *)stateKey);

  00004	8b 45 08	 mov	 eax, DWORD PTR _stateKey$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _vecGetData@4
  0000d	89 45 fc	 mov	 DWORD PTR _pVemState$[ebp], eax

; 333  : 
; 334  :    if(!pVemState)

  00010	83 7d fc 00	 cmp	 DWORD PTR _pVemState$[ebp], 0
  00014	75 06		 jne	 SHORT $L1625

; 335  :       return 1;

  00016	66 b8 01 00	 mov	 ax, 1
  0001a	eb 0d		 jmp	 SHORT $L1622
$L1625:

; 336  :    else
; 337  :       pVemState->enable=ENABLED;

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _pVemState$[ebp]
  0001f	c7 41 08 01 00
	00 00		 mov	 DWORD PTR [ecx+8], 1

; 338  :    return 0;

  00026	66 33 c0	 xor	 ax, ax
$L1622:

; 339  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
_vemEnableState@4 ENDP
_TEXT	ENDS
PUBLIC	_vemGetState@8
EXTRN	_strcmp:NEAR
; Function compile flags: /Odt
;	COMDAT _vemGetState@8
_TEXT	SEGMENT
_pVemMemHandler$ = -8
_pVemElement$ = -4
_hVemMemHandle$ = 8
_pszKey$ = 12
_vemGetState@8 PROC NEAR				; COMDAT

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 372  :    void              *pVemElement      = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVemElement$[ebp], 0

; 373  :    VEM2              *pVemMemHandler   = (VEM2 *)hVemMemHandle;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _hVemMemHandle$[ebp]
  00010	89 45 f8	 mov	 DWORD PTR _pVemMemHandler$[ebp], eax

; 374  : 
; 375  :    pVemElement = vecGetFirstElement(pVemMemHandler->pVemStates);

  00013	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMemHandler$[ebp]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 _vecGetFirstElement@4
  0001e	89 45 fc	 mov	 DWORD PTR _pVemElement$[ebp], eax
$L1637:

; 376  :    while(pVemElement) {

  00021	83 7d fc 00	 cmp	 DWORD PTR _pVemElement$[ebp], 0
  00025	74 2e		 je	 SHORT $L1638

; 377  :       if(!strcmp(pszKey, ((VEM_STATE *)vecGetData(pVemElement))->pszKey))

  00027	8b 45 fc	 mov	 eax, DWORD PTR _pVemElement$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _vecGetData@4
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	51		 push	 ecx
  00033	8b 55 0c	 mov	 edx, DWORD PTR _pszKey$[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 _strcmp
  0003c	83 c4 08	 add	 esp, 8
  0003f	85 c0		 test	 eax, eax
  00041	75 02		 jne	 SHORT $L1640

; 378  :          break; /* match! */

  00043	eb 10		 jmp	 SHORT $L1638
$L1640:

; 379  :       pVemElement=vecGetNextElement(pVemElement, FORWARDS);

  00045	6a 01		 push	 1
  00047	8b 45 fc	 mov	 eax, DWORD PTR _pVemElement$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _vecGetNextElement@8
  00050	89 45 fc	 mov	 DWORD PTR _pVemElement$[ebp], eax

; 380  :    }

  00053	eb cc		 jmp	 SHORT $L1637
$L1638:

; 381  :    return ((VEM_KEY)pVemElement); /* could be null if it wasn't found */

  00055	8b 45 fc	 mov	 eax, DWORD PTR _pVemElement$[ebp]

; 382  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
_vemGetState@8 ENDP
_TEXT	ENDS
PUBLIC	_vemUnregisterExtension@8
; Function compile flags: /Odt
;	COMDAT _vemUnregisterExtension@8
_TEXT	SEGMENT
_pElement$ = -20
_pVemMemHandler$ = -16
_pVemExtension$ = -12
_pVemAttach$ = -8
_stateKey$ = -4
_hVemMemHandle$ = 8
_extensionKey$ = 12
_vemUnregisterExtension@8 PROC NEAR			; COMDAT

; 416  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 417  :    VEM_EXTENSION     *pVemExtension    = NULL;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pVemExtension$[ebp], 0

; 418  :    VEM_ATTACH        *pVemAttach       = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pVemAttach$[ebp], 0

; 419  :    VEM_KEY            stateKey         = NULL;

  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _stateKey$[ebp], 0

; 420  :    void              *pElement         = NULL;

  0001b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pElement$[ebp], 0

; 421  :    VEM2              *pVemMemHandler   = (VEM2 *)hVemMemHandle;

  00022	8b 45 08	 mov	 eax, DWORD PTR _hVemMemHandle$[ebp]
  00025	89 45 f0	 mov	 DWORD PTR _pVemMemHandler$[ebp], eax

; 422  :    
; 423  :    if(!extensionKey)

  00028	83 7d 0c 00	 cmp	 DWORD PTR _extensionKey$[ebp], 0
  0002c	75 07		 jne	 SHORT $L1657

; 424  :       return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	e9 e0 00 00 00	 jmp	 $L1646
$L1657:

; 425  : 
; 426  :    pVemExtension=(VEM_EXTENSION *)vecGetData((void *)extensionKey);

  00035	8b 4d 0c	 mov	 ecx, DWORD PTR _extensionKey$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 _vecGetData@4
  0003e	89 45 f4	 mov	 DWORD PTR _pVemExtension$[ebp], eax

; 427  : 
; 428  :    if(pVemExtension) {

  00041	83 7d f4 00	 cmp	 DWORD PTR _pVemExtension$[ebp], 0
  00045	0f 84 c8 00 00
	00		 je	 $L1661

; 429  :       if(pVemExtension->pAttachVec) {

  0004b	8b 55 f4	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  0004e	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00052	74 5d		 je	 SHORT $L1662
$L1664:

; 430  : 
; 431  :          while(0 != (pElement=vecGetFirstElement(pVemExtension->pAttachVec))) {

  00054	8b 45 f4	 mov	 eax, DWORD PTR _pVemExtension$[ebp]
  00057	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 _vecGetFirstElement@4
  00060	89 45 ec	 mov	 DWORD PTR _pElement$[ebp], eax
  00063	83 7d ec 00	 cmp	 DWORD PTR _pElement$[ebp], 0
  00067	74 32		 je	 SHORT $L1665

; 432  :             pVemAttach=(VEM_ATTACH *)vecGetData(pElement);

  00069	8b 55 ec	 mov	 edx, DWORD PTR _pElement$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 _vecGetData@4
  00072	89 45 f8	 mov	 DWORD PTR _pVemAttach$[ebp], eax

; 433  :             stateKey=(VEM_KEY)vecFindElement(pVemMemHandler->pVemStates, 
; 434  :                pVemAttach->pVemState, FORWARDS);

  00075	6a 01		 push	 1
  00077	8b 45 f8	 mov	 eax, DWORD PTR _pVemAttach$[ebp]
  0007a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007d	51		 push	 ecx
  0007e	8b 55 f0	 mov	 edx, DWORD PTR _pVemMemHandler$[ebp]
  00081	8b 02		 mov	 eax, DWORD PTR [edx]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _vecFindElement@12
  00089	89 45 fc	 mov	 DWORD PTR _stateKey$[ebp], eax

; 435  : 
; 436  :             vemDetachExtension(stateKey, extensionKey);

  0008c	8b 4d 0c	 mov	 ecx, DWORD PTR _extensionKey$[ebp]
  0008f	51		 push	 ecx
  00090	8b 55 fc	 mov	 edx, DWORD PTR _stateKey$[ebp]
  00093	52		 push	 edx
  00094	e8 00 00 00 00	 call	 _vemDetachExtension@8

; 437  :          }

  00099	eb b9		 jmp	 SHORT $L1664
$L1665:

; 438  : 
; 439  :          vecFree(pVemExtension->pAttachVec);

  0009b	8b 45 f4	 mov	 eax, DWORD PTR _pVemExtension$[ebp]
  0009e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 _vecFree@4

; 440  :          pVemExtension->pAttachVec=NULL;

  000a7	8b 55 f4	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  000aa	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
$L1662:

; 441  :       }
; 442  :       /* call the extension's termination routine */
; 443  :       if(pVemExtension->vemFuncFree)

  000b1	8b 45 f4	 mov	 eax, DWORD PTR _pVemExtension$[ebp]
  000b4	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000b8	74 11		 je	 SHORT $L1669

; 444  :          (pVemExtension->vemFuncFree)(pVemExtension->vemFuncMem, extensionKey);

  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _extensionKey$[ebp]
  000bd	51		 push	 ecx
  000be	8b 55 f4	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  000c1	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000c4	50		 push	 eax
  000c5	8b 4d f4	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  000c8	ff 51 08	 call	 DWORD PTR [ecx+8]
$L1669:

; 445  : 
; 446  :       vecDelElement(pVemMemHandler->pVemExtensions, extensionKey);

  000cb	8b 55 0c	 mov	 edx, DWORD PTR _extensionKey$[ebp]
  000ce	52		 push	 edx
  000cf	8b 45 f0	 mov	 eax, DWORD PTR _pVemMemHandler$[ebp]
  000d2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 _vecDelElement@8

; 447  :       VOX_MEM_FREE(pVemExtension->pszKey);

  000db	8b 55 f4	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  000de	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000e1	74 17		 je	 SHORT $L1670
  000e3	8b 45 f4	 mov	 eax, DWORD PTR _pVemExtension$[ebp]
  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 _free
  000ee	83 c4 04	 add	 esp, 4
  000f1	8b 55 f4	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  000f4	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L1670:

; 448  :       VOX_MEM_FREE(pVemExtension);

  000fa	83 7d f4 00	 cmp	 DWORD PTR _pVemExtension$[ebp], 0
  000fe	74 13		 je	 SHORT $L1661
  00100	8b 45 f4	 mov	 eax, DWORD PTR _pVemExtension$[ebp]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _free
  00109	83 c4 04	 add	 esp, 4
  0010c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pVemExtension$[ebp], 0
$L1661:

; 449  :    }
; 450  :    return NULL;

  00113	33 c0		 xor	 eax, eax
$L1646:

; 451  : }

  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 08 00	 ret	 8
_vemUnregisterExtension@8 ENDP
_TEXT	ENDS
PUBLIC	_vemRegisterExtension@20
; Function compile flags: /Odt
;	COMDAT _vemRegisterExtension@20
_TEXT	SEGMENT
_pVemMemHandler$ = -12
_pKey$ = -8
_pVemExtension$ = -4
_hVemMemHandle$ = 8
_pszKey$ = 12
_pVemFunc$ = 16
_pVemFuncFree$ = 20
_pVemFuncMem$ = 24
_vemRegisterExtension@20 PROC NEAR			; COMDAT

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 490  :    VEM_EXTENSION     *pVemExtension    = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVemExtension$[ebp], 0

; 491  :    VEM_KEY           *pKey             = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pKey$[ebp], 0

; 492  :    VEM2              *pVemMemHandler   = (VEM2 *)hVemMemHandle;

  00014	8b 45 08	 mov	 eax, DWORD PTR _hVemMemHandle$[ebp]
  00017	89 45 f4	 mov	 DWORD PTR _pVemMemHandler$[ebp], eax

; 493  : 
; 494  :    if(VOX_MEM_INIT(pVemExtension,1,sizeof(VEM_EXTENSION)))

  0001a	6a 18		 push	 24			; 00000018H
  0001c	6a 01		 push	 1
  0001e	e8 00 00 00 00	 call	 _calloc
  00023	83 c4 08	 add	 esp, 8
  00026	89 45 fc	 mov	 DWORD PTR _pVemExtension$[ebp], eax
  00029	83 7d fc 00	 cmp	 DWORD PTR _pVemExtension$[ebp], 0
  0002d	75 07		 jne	 SHORT $L1693

; 495  :        return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	e9 de 00 00 00	 jmp	 $L1685
$L1693:

; 496  :    else {
; 497  :       pVemExtension->pszKey=NULL;

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  00039	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 498  :       pVemExtension->vemFunc=pVemFunc;

  0003f	8b 55 fc	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  00042	8b 45 10	 mov	 eax, DWORD PTR _pVemFunc$[ebp]
  00045	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 499  :       pVemExtension->vemFuncFree=pVemFuncFree;

  00048	8b 4d fc	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  0004b	8b 55 14	 mov	 edx, DWORD PTR _pVemFuncFree$[ebp]
  0004e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 500  :       pVemExtension->vemFuncMem=pVemFuncMem;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _pVemExtension$[ebp]
  00054	8b 4d 18	 mov	 ecx, DWORD PTR _pVemFuncMem$[ebp]
  00057	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 501  :       pVemExtension->pAttachVec=NULL;

  0005a	8b 55 fc	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  0005d	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 502  :       pVemExtension->enable=ENABLED;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _pVemExtension$[ebp]
  00067	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [eax+20], 1

; 503  :    }
; 504  : 
; 505  :    if(!(pKey=vecAddElement(pVemMemHandler->pVemExtensions, pVemExtension, FORWARDS))) {

  0006e	6a 01		 push	 1
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 f4	 mov	 edx, DWORD PTR _pVemMemHandler$[ebp]
  00077	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _vecAddElement@12
  00080	89 45 f8	 mov	 DWORD PTR _pKey$[ebp], eax
  00083	83 7d f8 00	 cmp	 DWORD PTR _pKey$[ebp], 0
  00087	75 1d		 jne	 SHORT $L1698

; 506  :       VOX_MEM_FREE(pVemExtension);

  00089	83 7d fc 00	 cmp	 DWORD PTR _pVemExtension$[ebp], 0
  0008d	74 13		 je	 SHORT $L1699
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 _free
  00098	83 c4 04	 add	 esp, 4
  0009b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVemExtension$[ebp], 0
$L1699:

; 507  :       return NULL;

  000a2	33 c0		 xor	 eax, eax
  000a4	eb 6e		 jmp	 SHORT $L1685
$L1698:

; 508  :    }
; 509  : 
; 510  :    /* initialize the string key */
; 511  :    if(VOX_MEM_INIT(pVemExtension->pszKey,strlen(pszKey)+1,sizeof(char))) 

  000a6	6a 01		 push	 1
  000a8	8b 55 0c	 mov	 edx, DWORD PTR _pszKey$[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 _strlen
  000b1	83 c4 04	 add	 esp, 4
  000b4	83 c0 01	 add	 eax, 1
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _calloc
  000bd	83 c4 08	 add	 esp, 8
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  000c3	89 01		 mov	 DWORD PTR [ecx], eax
  000c5	8b 55 fc	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  000c8	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000cb	75 0f		 jne	 SHORT $L1703

; 512  :       return(vemUnregisterExtension(hVemMemHandle, pKey));

  000cd	8b 45 f8	 mov	 eax, DWORD PTR _pKey$[ebp]
  000d0	50		 push	 eax
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR _hVemMemHandle$[ebp]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 _vemUnregisterExtension@8
  000da	eb 38		 jmp	 SHORT $L1685
$L1703:

; 513  :    else
; 514  :       strcpy(pVemExtension->pszKey,pszKey);

  000dc	8b 55 0c	 mov	 edx, DWORD PTR _pszKey$[ebp]
  000df	52		 push	 edx
  000e0	8b 45 fc	 mov	 eax, DWORD PTR _pVemExtension$[ebp]
  000e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 _strcpy
  000eb	83 c4 08	 add	 esp, 8

; 515  : 
; 516  :    /* initialize the extension's state vector */
; 517  :    if(!(pVemExtension->pAttachVec=vecInit())) 

  000ee	e8 00 00 00 00	 call	 _vecInit@0
  000f3	8b 55 fc	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  000f6	89 42 10	 mov	 DWORD PTR [edx+16], eax
  000f9	8b 45 fc	 mov	 eax, DWORD PTR _pVemExtension$[ebp]
  000fc	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00100	75 0f		 jne	 SHORT $L1705

; 518  :       return(vemUnregisterExtension(hVemMemHandle, pKey));

  00102	8b 4d f8	 mov	 ecx, DWORD PTR _pKey$[ebp]
  00105	51		 push	 ecx
  00106	8b 55 08	 mov	 edx, DWORD PTR _hVemMemHandle$[ebp]
  00109	52		 push	 edx
  0010a	e8 00 00 00 00	 call	 _vemUnregisterExtension@8
  0010f	eb 03		 jmp	 SHORT $L1685
$L1705:

; 519  : 
; 520  :    /* initialize and store the vector key */
; 521  :    return(pKey);

  00111	8b 45 f8	 mov	 eax, DWORD PTR _pKey$[ebp]
$L1685:

; 522  : }

  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 14 00	 ret	 20			; 00000014H
_vemRegisterExtension@20 ENDP
_TEXT	ENDS
PUBLIC	_vemDisableExtension@4
; Function compile flags: /Odt
;	COMDAT _vemDisableExtension@4
_TEXT	SEGMENT
_pVemExtension$ = -4
_extensionKey$ = 8
_vemDisableExtension@4 PROC NEAR			; COMDAT

; 555  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 556  :    VEM_EXTENSION *pVemExtension=(VEM_EXTENSION *)vecGetData((void *)extensionKey);

  00004	8b 45 08	 mov	 eax, DWORD PTR _extensionKey$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _vecGetData@4
  0000d	89 45 fc	 mov	 DWORD PTR _pVemExtension$[ebp], eax

; 557  : 
; 558  :    if(!pVemExtension)

  00010	83 7d fc 00	 cmp	 DWORD PTR _pVemExtension$[ebp], 0
  00014	75 06		 jne	 SHORT $L1712

; 559  :       return 1;

  00016	66 b8 01 00	 mov	 ax, 1
  0001a	eb 0d		 jmp	 SHORT $L1708
$L1712:

; 560  :    else
; 561  :       pVemExtension->enable=DISABLED;

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  0001f	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 562  : 
; 563  :    return 0;

  00026	66 33 c0	 xor	 ax, ax
$L1708:

; 564  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
_vemDisableExtension@4 ENDP
_TEXT	ENDS
PUBLIC	_vemEnableExtension@4
; Function compile flags: /Odt
;	COMDAT _vemEnableExtension@4
_TEXT	SEGMENT
_pVemExtension$ = -4
_extensionKey$ = 8
_vemEnableExtension@4 PROC NEAR				; COMDAT

; 596  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 597  :    VEM_EXTENSION *pVemExtension=(VEM_EXTENSION *)vecGetData((void *)extensionKey);

  00004	8b 45 08	 mov	 eax, DWORD PTR _extensionKey$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _vecGetData@4
  0000d	89 45 fc	 mov	 DWORD PTR _pVemExtension$[ebp], eax

; 598  : 
; 599  :    if(!pVemExtension)

  00010	83 7d fc 00	 cmp	 DWORD PTR _pVemExtension$[ebp], 0
  00014	75 06		 jne	 SHORT $L1720

; 600  :       return 1;

  00016	66 b8 01 00	 mov	 ax, 1
  0001a	eb 0d		 jmp	 SHORT $L1716
$L1720:

; 601  :    else
; 602  :       pVemExtension->enable=ENABLED;

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  0001f	c7 41 14 01 00
	00 00		 mov	 DWORD PTR [ecx+20], 1

; 603  : 
; 604  :    return 0;

  00026	66 33 c0	 xor	 ax, ax
$L1716:

; 605  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
_vemEnableExtension@4 ENDP
_TEXT	ENDS
PUBLIC	_vemGetExtension@8
PUBLIC	??_C@_0DN@DNOAOBC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BG@KCLLLNDL@hVemMemHandle?5?$CB?$DN?5NULL?$AA@ ; `string'
EXTRN	__assert:NEAR
;	COMDAT ??_C@_0DN@DNOAOBC@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DN@DNOAOBC@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pri'
	DB	'vate\windows\directx\dsound\codecs\voxware\vem2.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KCLLLNDL@hVemMemHandle?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BG@KCLLLNDL@hVemMemHandle?5?$CB?$DN?5NULL?$AA@ DB 'hVemMemHandle !'
	DB	'= NULL', 00H				; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _vemGetExtension@8
_TEXT	SEGMENT
_pVemMemHandler$ = -8
_pVemElement$ = -4
_hVemMemHandle$ = 8
_pszKey$ = 12
_vemGetExtension@8 PROC NEAR				; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 639  :    void              *pVemElement      = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVemElement$[ebp], 0

; 640  :    VEM2              *pVemMemHandler   = (VEM2 *)hVemMemHandle;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _hVemMemHandle$[ebp]
  00010	89 45 f8	 mov	 DWORD PTR _pVemMemHandler$[ebp], eax

; 641  : 
; 642  :    assert(hVemMemHandle != NULL);

  00013	83 7d 08 00	 cmp	 DWORD PTR _hVemMemHandle$[ebp], 0
  00017	75 17		 jne	 SHORT $L1956
  00019	68 82 02 00 00	 push	 642			; 00000282H
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@DNOAOBC@c?3?2xbox?2private?2windows?2directx?2@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@KCLLLNDL@hVemMemHandle?5?$CB?$DN?5NULL?$AA@
  00028	e8 00 00 00 00	 call	 __assert
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1956:

; 643  : 
; 644  :    pVemElement = vecGetFirstElement(pVemMemHandler->pVemExtensions);

  00030	8b 55 f8	 mov	 edx, DWORD PTR _pVemMemHandler$[ebp]
  00033	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _vecGetFirstElement@4
  0003c	89 45 fc	 mov	 DWORD PTR _pVemElement$[ebp], eax
$L1736:

; 645  :    while(pVemElement) {

  0003f	83 7d fc 00	 cmp	 DWORD PTR _pVemElement$[ebp], 0
  00043	74 2e		 je	 SHORT $L1737

; 646  :       if(!strcmp(pszKey, ((VEM_EXTENSION *)vecGetData(pVemElement))->pszKey))

  00045	8b 4d fc	 mov	 ecx, DWORD PTR _pVemElement$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 _vecGetData@4
  0004e	8b 10		 mov	 edx, DWORD PTR [eax]
  00050	52		 push	 edx
  00051	8b 45 0c	 mov	 eax, DWORD PTR _pszKey$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _strcmp
  0005a	83 c4 08	 add	 esp, 8
  0005d	85 c0		 test	 eax, eax
  0005f	75 02		 jne	 SHORT $L1739

; 647  :          break; /* match! */

  00061	eb 10		 jmp	 SHORT $L1737
$L1739:

; 648  :       pVemElement=vecGetNextElement(pVemElement, FORWARDS);

  00063	6a 01		 push	 1
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _pVemElement$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 _vecGetNextElement@8
  0006e	89 45 fc	 mov	 DWORD PTR _pVemElement$[ebp], eax

; 649  :    }

  00071	eb cc		 jmp	 SHORT $L1736
$L1737:

; 650  :    return pVemElement; /* could be null if it wasn't found */

  00073	8b 45 fc	 mov	 eax, DWORD PTR _pVemElement$[ebp]

; 651  : }

  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 08 00	 ret	 8
_vemGetExtension@8 ENDP
_TEXT	ENDS
PUBLIC	_vemAttachExtension@12
EXTRN	_vecAddElementAt@16:NEAR
; Function compile flags: /Odt
;	COMDAT _vemAttachExtension@12
_TEXT	SEGMENT
_pVemState$ = -16
_pVemExtension$ = -12
_pVemAttach$ = -8
_pVemAttachSeek$ = -4
_stateKey$ = 8
_extensionKey$ = 12
_priority$ = 16
_vemAttachExtension@12 PROC NEAR			; COMDAT

; 686  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 687  :    VEM_STATE         *pVemState        = NULL;

  00006	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pVemState$[ebp], 0

; 688  :    VEM_EXTENSION     *pVemExtension    = NULL;

  0000d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pVemExtension$[ebp], 0

; 689  :    VEM_ATTACH        *pVemAttach       = NULL;

  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pVemAttach$[ebp], 0

; 690  :    VEM_ATTACH        *pVemAttachSeek   = NULL;

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVemAttachSeek$[ebp], 0

; 691  : 
; 692  :    pVemState=(VEM_STATE *)vecGetData((void*)stateKey);

  00022	8b 45 08	 mov	 eax, DWORD PTR _stateKey$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _vecGetData@4
  0002b	89 45 f0	 mov	 DWORD PTR _pVemState$[ebp], eax

; 693  :    pVemExtension=(VEM_EXTENSION *)vecGetData((void*)extensionKey);

  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _extensionKey$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _vecGetData@4
  00037	89 45 f4	 mov	 DWORD PTR _pVemExtension$[ebp], eax

; 694  : 
; 695  :    if(VOX_MEM_INIT(pVemAttach,1,sizeof(VEM_ATTACH)))

  0003a	6a 0c		 push	 12			; 0000000cH
  0003c	6a 01		 push	 1
  0003e	e8 00 00 00 00	 call	 _calloc
  00043	83 c4 08	 add	 esp, 8
  00046	89 45 f8	 mov	 DWORD PTR _pVemAttach$[ebp], eax
  00049	83 7d f8 00	 cmp	 DWORD PTR _pVemAttach$[ebp], 0
  0004d	75 09		 jne	 SHORT $L1760

; 696  :       return 1;

  0004f	66 b8 01 00	 mov	 ax, 1
  00053	e9 0b 01 00 00	 jmp	 $L1746
$L1760:

; 697  :    else {
; 698  :       pVemAttach->priority=priority;

  00058	8b 55 f8	 mov	 edx, DWORD PTR _pVemAttach$[ebp]
  0005b	66 8b 45 10	 mov	 ax, WORD PTR _priority$[ebp]
  0005f	66 89 02	 mov	 WORD PTR [edx], ax

; 699  :       pVemAttach->pVemExtension=pVemExtension;

  00062	8b 4d f8	 mov	 ecx, DWORD PTR _pVemAttach$[ebp]
  00065	8b 55 f4	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  00068	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 700  :       pVemAttach->pVemState=pVemState;

  0006b	8b 45 f8	 mov	 eax, DWORD PTR _pVemAttach$[ebp]
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _pVemState$[ebp]
  00071	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 701  :    }
; 702  : 
; 703  :    /* adding the state to the extension's list */
; 704  :    pVemAttachSeek=vecGetFirstElement(pVemExtension->pAttachVec);

  00074	8b 55 f4	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  00077	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _vecGetFirstElement@4
  00080	89 45 fc	 mov	 DWORD PTR _pVemAttachSeek$[ebp], eax
$L1763:

; 705  :       
; 706  :    while(pVemAttachSeek) {

  00083	83 7d fc 00	 cmp	 DWORD PTR _pVemAttachSeek$[ebp], 0
  00087	74 3f		 je	 SHORT $L1764

; 707  :       if(((VEM_ATTACH *)vecGetData(pVemAttachSeek))->priority<priority) {

  00089	8b 4d fc	 mov	 ecx, DWORD PTR _pVemAttachSeek$[ebp]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 _vecGetData@4
  00092	0f b7 10	 movzx	 edx, WORD PTR [eax]
  00095	0f b7 45 10	 movzx	 eax, WORD PTR _priority$[ebp]
  00099	3b d0		 cmp	 edx, eax
  0009b	7d 1b		 jge	 SHORT $L1766

; 708  :          pVemAttachSeek=vecAddElementAt(pVemExtension->pAttachVec, pVemAttachSeek, 
; 709  :             pVemAttach, BACKWARDS);

  0009d	6a 00		 push	 0
  0009f	8b 4d f8	 mov	 ecx, DWORD PTR _pVemAttach$[ebp]
  000a2	51		 push	 ecx
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _pVemAttachSeek$[ebp]
  000a6	52		 push	 edx
  000a7	8b 45 f4	 mov	 eax, DWORD PTR _pVemExtension$[ebp]
  000aa	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 _vecAddElementAt@16
  000b3	89 45 fc	 mov	 DWORD PTR _pVemAttachSeek$[ebp], eax

; 710  :          break;

  000b6	eb 10		 jmp	 SHORT $L1764
$L1766:

; 711  :       }
; 712  :       pVemAttachSeek=vecGetNextElement(pVemAttachSeek, FORWARDS);

  000b8	6a 01		 push	 1
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _pVemAttachSeek$[ebp]
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 _vecGetNextElement@8
  000c3	89 45 fc	 mov	 DWORD PTR _pVemAttachSeek$[ebp], eax

; 713  :    }

  000c6	eb bb		 jmp	 SHORT $L1763
$L1764:

; 714  :    if(!pVemAttachSeek)

  000c8	83 7d fc 00	 cmp	 DWORD PTR _pVemAttachSeek$[ebp], 0
  000cc	75 1c		 jne	 SHORT $L1767

; 715  :       if(!vecAddElement(pVemExtension->pAttachVec, pVemAttach, FORWARDS))

  000ce	6a 01		 push	 1
  000d0	8b 45 f8	 mov	 eax, DWORD PTR _pVemAttach$[ebp]
  000d3	50		 push	 eax
  000d4	8b 4d f4	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  000d7	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000da	52		 push	 edx
  000db	e8 00 00 00 00	 call	 _vecAddElement@12
  000e0	85 c0		 test	 eax, eax
  000e2	75 06		 jne	 SHORT $L1767

; 716  :          return 1;

  000e4	66 b8 01 00	 mov	 ax, 1
  000e8	eb 79		 jmp	 SHORT $L1746
$L1767:

; 717  : 
; 718  :    /* adding the extension to the state's list */
; 719  :    pVemAttachSeek=vecGetFirstElement(pVemState->pAttachVec);

  000ea	8b 45 f0	 mov	 eax, DWORD PTR _pVemState$[ebp]
  000ed	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f0	51		 push	 ecx
  000f1	e8 00 00 00 00	 call	 _vecGetFirstElement@4
  000f6	89 45 fc	 mov	 DWORD PTR _pVemAttachSeek$[ebp], eax
$L1770:

; 720  :       
; 721  :    while(pVemAttachSeek) {

  000f9	83 7d fc 00	 cmp	 DWORD PTR _pVemAttachSeek$[ebp], 0
  000fd	74 3f		 je	 SHORT $L1771

; 722  :       if(((VEM_ATTACH *)vecGetData(pVemAttachSeek))->priority<priority) {

  000ff	8b 55 fc	 mov	 edx, DWORD PTR _pVemAttachSeek$[ebp]
  00102	52		 push	 edx
  00103	e8 00 00 00 00	 call	 _vecGetData@4
  00108	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0010b	0f b7 4d 10	 movzx	 ecx, WORD PTR _priority$[ebp]
  0010f	3b c1		 cmp	 eax, ecx
  00111	7d 1b		 jge	 SHORT $L1773

; 723  :          pVemAttachSeek=vecAddElementAt(pVemState->pAttachVec, pVemAttachSeek, 
; 724  :             pVemAttach, BACKWARDS);

  00113	6a 00		 push	 0
  00115	8b 55 f8	 mov	 edx, DWORD PTR _pVemAttach$[ebp]
  00118	52		 push	 edx
  00119	8b 45 fc	 mov	 eax, DWORD PTR _pVemAttachSeek$[ebp]
  0011c	50		 push	 eax
  0011d	8b 4d f0	 mov	 ecx, DWORD PTR _pVemState$[ebp]
  00120	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00123	52		 push	 edx
  00124	e8 00 00 00 00	 call	 _vecAddElementAt@16
  00129	89 45 fc	 mov	 DWORD PTR _pVemAttachSeek$[ebp], eax

; 725  :          break;

  0012c	eb 10		 jmp	 SHORT $L1771
$L1773:

; 726  :       }
; 727  :       pVemAttachSeek=vecGetNextElement(pVemAttachSeek, FORWARDS);

  0012e	6a 01		 push	 1
  00130	8b 45 fc	 mov	 eax, DWORD PTR _pVemAttachSeek$[ebp]
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 _vecGetNextElement@8
  00139	89 45 fc	 mov	 DWORD PTR _pVemAttachSeek$[ebp], eax

; 728  :    }

  0013c	eb bb		 jmp	 SHORT $L1770
$L1771:

; 729  : 
; 730  :    /* either the list was empty or the priorities were too high.. insert at end */
; 731  :    if(!pVemAttachSeek)

  0013e	83 7d fc 00	 cmp	 DWORD PTR _pVemAttachSeek$[ebp], 0
  00142	75 1c		 jne	 SHORT $L1774

; 732  :       if(!vecAddElement(pVemState->pAttachVec, pVemAttach, FORWARDS))

  00144	6a 01		 push	 1
  00146	8b 4d f8	 mov	 ecx, DWORD PTR _pVemAttach$[ebp]
  00149	51		 push	 ecx
  0014a	8b 55 f0	 mov	 edx, DWORD PTR _pVemState$[ebp]
  0014d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 _vecAddElement@12
  00156	85 c0		 test	 eax, eax
  00158	75 06		 jne	 SHORT $L1774

; 733  :          return 1;

  0015a	66 b8 01 00	 mov	 ax, 1
  0015e	eb 03		 jmp	 SHORT $L1746
$L1774:

; 734  : 
; 735  :       return 0;

  00160	66 33 c0	 xor	 ax, ax
$L1746:

; 736  : }

  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 0c 00	 ret	 12			; 0000000cH
_vemAttachExtension@12 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT _vemDetachExtension@8
_TEXT	SEGMENT
_pElement$ = -16
_pVemState$ = -12
_pVemExtension$ = -8
_pVemAttach$ = -4
_stateKey$ = 8
_extensionKey$ = 12
_vemDetachExtension@8 PROC NEAR				; COMDAT

; 769  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 770  :    VEM_STATE         *pVemState        = NULL;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pVemState$[ebp], 0

; 771  :    VEM_EXTENSION     *pVemExtension    = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pVemExtension$[ebp], 0

; 772  :    VEM_ATTACH        *pVemAttach       = NULL;

  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVemAttach$[ebp], 0

; 773  :    void              *pElement         = NULL;

  0001b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pElement$[ebp], 0

; 774  : 
; 775  :    pVemState=(VEM_STATE *)vecGetData((void*)stateKey);

  00022	8b 45 08	 mov	 eax, DWORD PTR _stateKey$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _vecGetData@4
  0002b	89 45 f4	 mov	 DWORD PTR _pVemState$[ebp], eax

; 776  :    pVemExtension=(VEM_EXTENSION *)vecGetData((void*)extensionKey);

  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _extensionKey$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _vecGetData@4
  00037	89 45 f8	 mov	 DWORD PTR _pVemExtension$[ebp], eax

; 777  : 
; 778  :    /* detaching state from extension */
; 779  :    pElement=vecGetFirstElement(pVemExtension->pAttachVec);

  0003a	8b 55 f8	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  0003d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _vecGetFirstElement@4
  00046	89 45 f0	 mov	 DWORD PTR _pElement$[ebp], eax
$L1794:

; 780  :    while(pElement) {

  00049	83 7d f0 00	 cmp	 DWORD PTR _pElement$[ebp], 0
  0004d	74 64		 je	 SHORT $L1795

; 781  :       pVemAttach=(VEM_ATTACH *)vecGetData(pElement);

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _pElement$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 _vecGetData@4
  00058	89 45 fc	 mov	 DWORD PTR _pVemAttach$[ebp], eax

; 782  :       if(pVemAttach->pVemState==pVemState) {

  0005b	8b 55 fc	 mov	 edx, DWORD PTR _pVemAttach$[ebp]
  0005e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00061	3b 45 f4	 cmp	 eax, DWORD PTR _pVemState$[ebp]
  00064	75 3d		 jne	 SHORT $L1797

; 783  :          vecDelElement(pVemExtension->pAttachVec, pElement);

  00066	8b 4d f0	 mov	 ecx, DWORD PTR _pElement$[ebp]
  00069	51		 push	 ecx
  0006a	8b 55 f8	 mov	 edx, DWORD PTR _pVemExtension$[ebp]
  0006d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _vecDelElement@8

; 784  :          if(0 != (pElement=vecFindElement(pVemState->pAttachVec, pVemAttach, FORWARDS)))

  00076	6a 01		 push	 1
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _pVemAttach$[ebp]
  0007b	51		 push	 ecx
  0007c	8b 55 f4	 mov	 edx, DWORD PTR _pVemState$[ebp]
  0007f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _vecFindElement@12
  00088	89 45 f0	 mov	 DWORD PTR _pElement$[ebp], eax
  0008b	83 7d f0 00	 cmp	 DWORD PTR _pElement$[ebp], 0
  0008f	74 10		 je	 SHORT $L1798

; 785  :             vecDelElement(pVemState->pAttachVec,pElement);

  00091	8b 4d f0	 mov	 ecx, DWORD PTR _pElement$[ebp]
  00094	51		 push	 ecx
  00095	8b 55 f4	 mov	 edx, DWORD PTR _pVemState$[ebp]
  00098	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 _vecDelElement@8
$L1798:

; 786  :          break;

  000a1	eb 10		 jmp	 SHORT $L1795
$L1797:

; 787  :       }
; 788  :       pElement=vecGetNextElement(pElement, FORWARDS);

  000a3	6a 01		 push	 1
  000a5	8b 4d f0	 mov	 ecx, DWORD PTR _pElement$[ebp]
  000a8	51		 push	 ecx
  000a9	e8 00 00 00 00	 call	 _vecGetNextElement@8
  000ae	89 45 f0	 mov	 DWORD PTR _pElement$[ebp], eax

; 789  :    }

  000b1	eb 96		 jmp	 SHORT $L1794
$L1795:

; 790  : 
; 791  :    if(!pElement)

  000b3	83 7d f0 00	 cmp	 DWORD PTR _pElement$[ebp], 0
  000b7	75 06		 jne	 SHORT $L1799

; 792  :       return 1; /* couldn't find it */

  000b9	66 b8 01 00	 mov	 ax, 1
  000bd	eb 1c		 jmp	 SHORT $L1780
$L1799:

; 793  : 
; 794  :    VOX_MEM_FREE(pVemAttach);

  000bf	83 7d fc 00	 cmp	 DWORD PTR _pVemAttach$[ebp], 0
  000c3	74 13		 je	 SHORT $L1800
  000c5	8b 55 fc	 mov	 edx, DWORD PTR _pVemAttach$[ebp]
  000c8	52		 push	 edx
  000c9	e8 00 00 00 00	 call	 _free
  000ce	83 c4 04	 add	 esp, 4
  000d1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVemAttach$[ebp], 0
$L1800:

; 795  :    
; 796  :    return 0;

  000d8	66 33 c0	 xor	 ax, ax
$L1780:

; 797  : }

  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 08 00	 ret	 8
_vemDetachExtension@8 ENDP
_TEXT	ENDS
PUBLIC	_vemGetExtensionFunc@4
; Function compile flags: /Odt
;	COMDAT _vemGetExtensionFunc@4
_TEXT	SEGMENT
tv68 = -8
_pVemExtension$ = -4
_extensionKey$ = 8
_vemGetExtensionFunc@4 PROC NEAR			; COMDAT

; 828  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 829  :    VEM_EXTENSION *pVemExtension=(VEM_EXTENSION *)vecGetData((void *)extensionKey);

  00006	8b 45 08	 mov	 eax, DWORD PTR _extensionKey$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _vecGetData@4
  0000f	89 45 fc	 mov	 DWORD PTR _pVemExtension$[ebp], eax

; 830  : 
; 831  :    return((pVemExtension)?pVemExtension->vemFunc:NULL);

  00012	83 7d fc 00	 cmp	 DWORD PTR _pVemExtension$[ebp], 0
  00016	74 0b		 je	 SHORT $L1966
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  0001b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001e	89 55 f8	 mov	 DWORD PTR tv68[ebp], edx
  00021	eb 07		 jmp	 SHORT $L1967
$L1966:
  00023	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$L1967:
  0002a	8b 45 f8	 mov	 eax, DWORD PTR tv68[ebp]

; 832  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
_vemGetExtensionFunc@4 ENDP
_TEXT	ENDS
PUBLIC	_vemSetExtensionFunc@8
; Function compile flags: /Odt
;	COMDAT _vemSetExtensionFunc@8
_TEXT	SEGMENT
_pVemExtension$ = -4
_extensionKey$ = 8
_vemFunc$ = 12
_vemSetExtensionFunc@8 PROC NEAR			; COMDAT

; 865  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 866  :    VEM_EXTENSION *pVemExtension=(VEM_EXTENSION *)vecGetData((void *)extensionKey);

  00004	8b 45 08	 mov	 eax, DWORD PTR _extensionKey$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _vecGetData@4
  0000d	89 45 fc	 mov	 DWORD PTR _pVemExtension$[ebp], eax

; 867  : 
; 868  :    if(pVemExtension) {

  00010	83 7d fc 00	 cmp	 DWORD PTR _pVemExtension$[ebp], 0
  00014	74 0e		 je	 SHORT $L1817

; 869  :       pVemExtension->vemFunc=vemFunc;

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  00019	8b 55 0c	 mov	 edx, DWORD PTR _vemFunc$[ebp]
  0001c	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 870  :       return 0;

  0001f	66 33 c0	 xor	 ax, ax
  00022	eb 04		 jmp	 SHORT $L1813
$L1817:

; 871  :    } else
; 872  :       return 1;

  00024	66 b8 01 00	 mov	 ax, 1
$L1813:

; 873  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
_vemSetExtensionFunc@8 ENDP
_TEXT	ENDS
PUBLIC	_vemGetExtensionData@4
; Function compile flags: /Odt
;	COMDAT _vemGetExtensionData@4
_TEXT	SEGMENT
tv68 = -8
_pVemExtension$ = -4
_extensionKey$ = 8
_vemGetExtensionData@4 PROC NEAR			; COMDAT

; 902  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 903  :    VEM_EXTENSION *pVemExtension=(VEM_EXTENSION *)vecGetData((void *)extensionKey);

  00006	8b 45 08	 mov	 eax, DWORD PTR _extensionKey$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _vecGetData@4
  0000f	89 45 fc	 mov	 DWORD PTR _pVemExtension$[ebp], eax

; 904  : 
; 905  :    return((pVemExtension)?pVemExtension->vemFuncMem:NULL);

  00012	83 7d fc 00	 cmp	 DWORD PTR _pVemExtension$[ebp], 0
  00016	74 0b		 je	 SHORT $L1974
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  0001b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0001e	89 55 f8	 mov	 DWORD PTR tv68[ebp], edx
  00021	eb 07		 jmp	 SHORT $L1975
$L1974:
  00023	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$L1975:
  0002a	8b 45 f8	 mov	 eax, DWORD PTR tv68[ebp]

; 906  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
_vemGetExtensionData@4 ENDP
_TEXT	ENDS
PUBLIC	_vemSetExtensionData@8
; Function compile flags: /Odt
;	COMDAT _vemSetExtensionData@8
_TEXT	SEGMENT
_pVemExtension$ = -4
_extensionKey$ = 8
_vemFuncMem$ = 12
_vemSetExtensionData@8 PROC NEAR			; COMDAT

; 938  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 939  :    VEM_EXTENSION *pVemExtension=(VEM_EXTENSION *)vecGetData((void *)extensionKey);

  00004	8b 45 08	 mov	 eax, DWORD PTR _extensionKey$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _vecGetData@4
  0000d	89 45 fc	 mov	 DWORD PTR _pVemExtension$[ebp], eax

; 940  : 
; 941  :    if(pVemExtension) {

  00010	83 7d fc 00	 cmp	 DWORD PTR _pVemExtension$[ebp], 0
  00014	74 0e		 je	 SHORT $L1834

; 942  :       pVemExtension->vemFuncMem=vemFuncMem;

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _pVemExtension$[ebp]
  00019	8b 55 0c	 mov	 edx, DWORD PTR _vemFuncMem$[ebp]
  0001c	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 943  :       return 0;

  0001f	66 33 c0	 xor	 ax, ax
  00022	eb 04		 jmp	 SHORT $L1830
$L1834:

; 944  :    } else
; 945  :       return 1;

  00024	66 b8 01 00	 mov	 ax, 1
$L1830:

; 946  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
_vemSetExtensionData@8 ENDP
_TEXT	ENDS
PUBLIC	_vemFree@4
EXTRN	_vemUnregisterParameter@8:NEAR
; Function compile flags: /Odt
;	COMDAT _vemFree@4
_TEXT	SEGMENT
_pElement$ = -12
_pVemMainStruct$ = -8
_pVemMemHandler$ = -4
_hVemMainHandle$ = 8
_vemFree@4 PROC NEAR					; COMDAT

; 976  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 977  :    VEM_KEY            pElement         = NULL;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pElement$[ebp], 0

; 978  :    VEM_MAIN_STRUCT   *pVemMainStruct   = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pVemMainStruct$[ebp], 0

; 979  :    VEM2              *pVemMemHandler   = NULL;

  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVemMemHandler$[ebp], 0

; 980  : 
; 981  :    if(hVemMainHandle)

  0001b	83 7d 08 00	 cmp	 DWORD PTR _hVemMainHandle$[ebp], 0
  0001f	74 06		 je	 SHORT $L1845

; 982  :       pVemMainStruct   = (VEM_MAIN_STRUCT *)hVemMainHandle;

  00021	8b 45 08	 mov	 eax, DWORD PTR _hVemMainHandle$[ebp]
  00024	89 45 f8	 mov	 DWORD PTR _pVemMainStruct$[ebp], eax
$L1845:

; 983  :    pVemMemHandler = pVemMainStruct->pMemoryHandler;

  00027	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMainStruct$[ebp]
  0002a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002c	89 55 fc	 mov	 DWORD PTR _pVemMemHandler$[ebp], edx

; 984  : 
; 985  :    if(0 != (pVemMemHandler=pVemMainStruct->pMemoryHandler)) {

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _pVemMainStruct$[ebp]
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	89 4d fc	 mov	 DWORD PTR _pVemMemHandler$[ebp], ecx
  00037	83 7d fc 00	 cmp	 DWORD PTR _pVemMemHandler$[ebp], 0
  0003b	0f 84 03 01 00
	00		 je	 $L1847

; 986  :       if(pVemMemHandler->pVemStates) {

  00041	8b 55 fc	 mov	 edx, DWORD PTR _pVemMemHandler$[ebp]
  00044	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00047	74 37		 je	 SHORT $L1848
$L1851:

; 987  :          while(0 != (pElement=(VEM_KEY)vecGetFirstElement(pVemMemHandler->pVemStates))) 

  00049	8b 45 fc	 mov	 eax, DWORD PTR _pVemMemHandler$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _vecGetFirstElement@4
  00054	89 45 f4	 mov	 DWORD PTR _pElement$[ebp], eax
  00057	83 7d f4 00	 cmp	 DWORD PTR _pElement$[ebp], 0
  0005b	74 0f		 je	 SHORT $L1852

; 988  :             vemUnregisterState(pVemMemHandler, pElement);

  0005d	8b 55 f4	 mov	 edx, DWORD PTR _pElement$[ebp]
  00060	52		 push	 edx
  00061	8b 45 fc	 mov	 eax, DWORD PTR _pVemMemHandler$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _vemUnregisterState@8
  0006a	eb dd		 jmp	 SHORT $L1851
$L1852:

; 989  :          vecFree(pVemMemHandler->pVemStates);

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _pVemMemHandler$[ebp]
  0006f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 _vecFree@4

; 990  :          pVemMemHandler->pVemStates=NULL;

  00077	8b 45 fc	 mov	 eax, DWORD PTR _pVemMemHandler$[ebp]
  0007a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L1848:

; 991  :       }
; 992  :       if(pVemMemHandler->pVemExtensions) {

  00080	8b 4d fc	 mov	 ecx, DWORD PTR _pVemMemHandler$[ebp]
  00083	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00087	74 3a		 je	 SHORT $L1854
$L1856:

; 993  :          while(0 != (pElement=vecGetFirstElement(pVemMemHandler->pVemExtensions))) 

  00089	8b 55 fc	 mov	 edx, DWORD PTR _pVemMemHandler$[ebp]
  0008c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _vecGetFirstElement@4
  00095	89 45 f4	 mov	 DWORD PTR _pElement$[ebp], eax
  00098	83 7d f4 00	 cmp	 DWORD PTR _pElement$[ebp], 0
  0009c	74 0f		 je	 SHORT $L1857

; 994  :             vemUnregisterExtension(pVemMemHandler, pElement);

  0009e	8b 4d f4	 mov	 ecx, DWORD PTR _pElement$[ebp]
  000a1	51		 push	 ecx
  000a2	8b 55 fc	 mov	 edx, DWORD PTR _pVemMemHandler$[ebp]
  000a5	52		 push	 edx
  000a6	e8 00 00 00 00	 call	 _vemUnregisterExtension@8
  000ab	eb dc		 jmp	 SHORT $L1856
$L1857:

; 995  :          vecFree(pVemMemHandler->pVemExtensions);

  000ad	8b 45 fc	 mov	 eax, DWORD PTR _pVemMemHandler$[ebp]
  000b0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 _vecFree@4

; 996  :          pVemMemHandler->pVemExtensions=NULL;

  000b9	8b 55 fc	 mov	 edx, DWORD PTR _pVemMemHandler$[ebp]
  000bc	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L1854:

; 997  :       }
; 998  :       if(pVemMemHandler->pVemParameters) {

  000c3	8b 45 fc	 mov	 eax, DWORD PTR _pVemMemHandler$[ebp]
  000c6	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000ca	74 3a		 je	 SHORT $L1859
$L1861:

; 999  :          while(0 != (pElement=vecGetFirstElement(pVemMemHandler->pVemParameters)))

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR _pVemMemHandler$[ebp]
  000cf	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 _vecGetFirstElement@4
  000d8	89 45 f4	 mov	 DWORD PTR _pElement$[ebp], eax
  000db	83 7d f4 00	 cmp	 DWORD PTR _pElement$[ebp], 0
  000df	74 0f		 je	 SHORT $L1862

; 1000 :             vemUnregisterParameter(pVemMemHandler, pElement);

  000e1	8b 45 f4	 mov	 eax, DWORD PTR _pElement$[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d fc	 mov	 ecx, DWORD PTR _pVemMemHandler$[ebp]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 _vemUnregisterParameter@8
  000ee	eb dc		 jmp	 SHORT $L1861
$L1862:

; 1001 :          vecFree(pVemMemHandler->pVemParameters);

  000f0	8b 55 fc	 mov	 edx, DWORD PTR _pVemMemHandler$[ebp]
  000f3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 _vecFree@4

; 1002 :          pVemMemHandler->pVemParameters=NULL;

  000fc	8b 4d fc	 mov	 ecx, DWORD PTR _pVemMemHandler$[ebp]
  000ff	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$L1859:

; 1003 :       }
; 1004 :       if(pVemMemHandler->pFunctions)

  00106	8b 55 fc	 mov	 edx, DWORD PTR _pVemMemHandler$[ebp]
  00109	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0010d	74 0c		 je	 SHORT $L1864

; 1005 :          vecFree(pVemMemHandler->pFunctions);

  0010f	8b 45 fc	 mov	 eax, DWORD PTR _pVemMemHandler$[ebp]
  00112	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00115	51		 push	 ecx
  00116	e8 00 00 00 00	 call	 _vecFree@4
$L1864:

; 1006 :       pVemMemHandler->pFunctions=NULL;

  0011b	8b 55 fc	 mov	 edx, DWORD PTR _pVemMemHandler$[ebp]
  0011e	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 1007 : 
; 1008 :       VOX_MEM_FREE(pVemMainStruct->pMemoryHandler);

  00125	8b 45 f8	 mov	 eax, DWORD PTR _pVemMainStruct$[ebp]
  00128	83 38 00	 cmp	 DWORD PTR [eax], 0
  0012b	74 17		 je	 SHORT $L1847
  0012d	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMainStruct$[ebp]
  00130	8b 11		 mov	 edx, DWORD PTR [ecx]
  00132	52		 push	 edx
  00133	e8 00 00 00 00	 call	 _free
  00138	83 c4 04	 add	 esp, 4
  0013b	8b 45 f8	 mov	 eax, DWORD PTR _pVemMainStruct$[ebp]
  0013e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L1847:

; 1009 :    }
; 1010 : 
; 1011 :    VOX_MEM_FREE(pVemMainStruct->pVemMethodStruct);

  00144	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMainStruct$[ebp]
  00147	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0014b	74 19		 je	 SHORT $L1868
  0014d	8b 55 f8	 mov	 edx, DWORD PTR _pVemMainStruct$[ebp]
  00150	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _free
  00159	83 c4 04	 add	 esp, 4
  0015c	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMainStruct$[ebp]
  0015f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
$L1868:

; 1012 : 
; 1013 :    VOX_MEM_FREE(hVemMainHandle);

  00166	83 7d 08 00	 cmp	 DWORD PTR _hVemMainHandle$[ebp], 0
  0016a	74 13		 je	 SHORT $L1870
  0016c	8b 55 08	 mov	 edx, DWORD PTR _hVemMainHandle$[ebp]
  0016f	52		 push	 edx
  00170	e8 00 00 00 00	 call	 _free
  00175	83 c4 04	 add	 esp, 4
  00178	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _hVemMainHandle$[ebp], 0
$L1870:

; 1014 : 
; 1015 :    return hVemMainHandle;

  0017f	8b 45 08	 mov	 eax, DWORD PTR _hVemMainHandle$[ebp]

; 1016 : }

  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c2 04 00	 ret	 4
_vemFree@4 ENDP
_TEXT	ENDS
PUBLIC	_vemShowStates@4
PUBLIC	_vemShowExtensions@4
PUBLIC	_vemInit@0
EXTRN	_vemRegisterArray@20:NEAR
EXTRN	_vemRegisterTable@20:NEAR
EXTRN	_vemRegisterVariable@16:NEAR
EXTRN	_vemRegisterStruct@16:NEAR
EXTRN	_vemRegisterConstFloat@12:NEAR
EXTRN	_vemRegisterConstShort@12:NEAR
EXTRN	_vemGetParameter@8:NEAR
EXTRN	_vemGetParameterData@8:NEAR
EXTRN	_vemSetParameterData@8:NEAR
EXTRN	_vemShowParameters@4:NEAR
; Function compile flags: /Odt
;	COMDAT _vemInit@0
_TEXT	SEGMENT
_pVemMainStruct$ = -12
_pVemMethodStruct$ = -8
_pMemoryHandler$ = -4
_vemInit@0 PROC NEAR					; COMDAT

; 1049 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1050 :    VEM_MAIN_STRUCT   *pVemMainStruct   = NULL;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pVemMainStruct$[ebp], 0

; 1051 :    VEM2              *pMemoryHandler   = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pMemoryHandler$[ebp], 0

; 1052 :    VEM_METHOD_STRUCT *pVemMethodStruct = NULL;

  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pVemMethodStruct$[ebp], 0

; 1053 : 
; 1054 :    if(VOX_MEM_INIT(pVemMainStruct,1,sizeof(VEM_MAIN_STRUCT)))

  0001b	6a 08		 push	 8
  0001d	6a 01		 push	 1
  0001f	e8 00 00 00 00	 call	 _calloc
  00024	83 c4 08	 add	 esp, 8
  00027	89 45 f4	 mov	 DWORD PTR _pVemMainStruct$[ebp], eax
  0002a	83 7d f4 00	 cmp	 DWORD PTR _pVemMainStruct$[ebp], 0
  0002e	75 0e		 jne	 SHORT $L1880

; 1055 :       return(vemFree(pVemMainStruct));

  00030	8b 45 f4	 mov	 eax, DWORD PTR _pVemMainStruct$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _vemFree@4
  00039	e9 10 02 00 00	 jmp	 $L1872
$L1880:

; 1056 : 
; 1057 :    if(VOX_MEM_INIT(pMemoryHandler = pVemMainStruct->pMemoryHandler,1,sizeof(VEM2)))

  0003e	6a 10		 push	 16			; 00000010H
  00040	6a 01		 push	 1
  00042	e8 00 00 00 00	 call	 _calloc
  00047	83 c4 08	 add	 esp, 8
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR _pVemMainStruct$[ebp]
  0004d	89 01		 mov	 DWORD PTR [ecx], eax
  0004f	8b 55 f4	 mov	 edx, DWORD PTR _pVemMainStruct$[ebp]
  00052	8b 02		 mov	 eax, DWORD PTR [edx]
  00054	89 45 fc	 mov	 DWORD PTR _pMemoryHandler$[ebp], eax
  00057	83 7d fc 00	 cmp	 DWORD PTR _pMemoryHandler$[ebp], 0
  0005b	75 0e		 jne	 SHORT $L1882

; 1058 :       return(vemFree(pVemMainStruct));

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _pVemMainStruct$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _vemFree@4
  00066	e9 e3 01 00 00	 jmp	 $L1872
$L1882:

; 1059 :    else {
; 1060 :       if(!(pMemoryHandler->pVemStates=vecInit())) 

  0006b	e8 00 00 00 00	 call	 _vecInit@0
  00070	8b 55 fc	 mov	 edx, DWORD PTR _pMemoryHandler$[ebp]
  00073	89 02		 mov	 DWORD PTR [edx], eax
  00075	8b 45 fc	 mov	 eax, DWORD PTR _pMemoryHandler$[ebp]
  00078	83 38 00	 cmp	 DWORD PTR [eax], 0
  0007b	75 0e		 jne	 SHORT $L1884

; 1061 :          return(vemFree(pVemMainStruct));

  0007d	8b 4d f4	 mov	 ecx, DWORD PTR _pVemMainStruct$[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 _vemFree@4
  00086	e9 c3 01 00 00	 jmp	 $L1872
$L1884:

; 1062 : 
; 1063 :       if(!(pMemoryHandler->pVemExtensions=vecInit())) 

  0008b	e8 00 00 00 00	 call	 _vecInit@0
  00090	8b 55 fc	 mov	 edx, DWORD PTR _pMemoryHandler$[ebp]
  00093	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00096	8b 45 fc	 mov	 eax, DWORD PTR _pMemoryHandler$[ebp]
  00099	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0009d	75 0e		 jne	 SHORT $L1885

; 1064 :          return(vemFree(pVemMainStruct));

  0009f	8b 4d f4	 mov	 ecx, DWORD PTR _pVemMainStruct$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _vemFree@4
  000a8	e9 a1 01 00 00	 jmp	 $L1872
$L1885:

; 1065 : 
; 1066 :       if(!(pMemoryHandler->pVemParameters=vecInit())) 

  000ad	e8 00 00 00 00	 call	 _vecInit@0
  000b2	8b 55 fc	 mov	 edx, DWORD PTR _pMemoryHandler$[ebp]
  000b5	89 42 08	 mov	 DWORD PTR [edx+8], eax
  000b8	8b 45 fc	 mov	 eax, DWORD PTR _pMemoryHandler$[ebp]
  000bb	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000bf	75 0e		 jne	 SHORT $L1886

; 1067 :          return(vemFree(pVemMainStruct));

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR _pVemMainStruct$[ebp]
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 _vemFree@4
  000ca	e9 7f 01 00 00	 jmp	 $L1872
$L1886:

; 1068 : 
; 1069 :       if(!(pMemoryHandler->pFunctions=vecInit())) 

  000cf	e8 00 00 00 00	 call	 _vecInit@0
  000d4	8b 55 fc	 mov	 edx, DWORD PTR _pMemoryHandler$[ebp]
  000d7	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  000da	8b 45 fc	 mov	 eax, DWORD PTR _pMemoryHandler$[ebp]
  000dd	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  000e1	75 0e		 jne	 SHORT $L1883

; 1070 :          return(vemFree(pVemMainStruct));

  000e3	8b 4d f4	 mov	 ecx, DWORD PTR _pVemMainStruct$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 _vemFree@4
  000ec	e9 5d 01 00 00	 jmp	 $L1872
$L1883:

; 1071 :    }
; 1072 :       
; 1073 : 
; 1074 :    if(VOX_MEM_INIT(pVemMethodStruct = pVemMainStruct->pVemMethodStruct,1,
; 1075 :       sizeof(VEM_METHOD_STRUCT))) 

  000f1	6a 78		 push	 120			; 00000078H
  000f3	6a 01		 push	 1
  000f5	e8 00 00 00 00	 call	 _calloc
  000fa	83 c4 08	 add	 esp, 8
  000fd	8b 55 f4	 mov	 edx, DWORD PTR _pVemMainStruct$[ebp]
  00100	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00103	8b 45 f4	 mov	 eax, DWORD PTR _pVemMainStruct$[ebp]
  00106	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00109	89 4d f8	 mov	 DWORD PTR _pVemMethodStruct$[ebp], ecx
  0010c	83 7d f8 00	 cmp	 DWORD PTR _pVemMethodStruct$[ebp], 0
  00110	75 0e		 jne	 SHORT $L1889

; 1076 :       return(vemFree(pVemMainStruct));

  00112	8b 55 f4	 mov	 edx, DWORD PTR _pVemMainStruct$[ebp]
  00115	52		 push	 edx
  00116	e8 00 00 00 00	 call	 _vemFree@4
  0011b	e9 2e 01 00 00	 jmp	 $L1872
$L1889:

; 1077 : 
; 1078 :    /* Put in the callbacks for the extrinsic interface */
; 1079 : 
; 1080 :    /******* Extensions *******/
; 1081 :    pVemMethodStruct->lpfnVemUnregisterState     = vemUnregisterState;

  00120	8b 45 f8	 mov	 eax, DWORD PTR _pVemMethodStruct$[ebp]
  00123	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:_vemUnregisterState@8

; 1082 :    pVemMethodStruct->lpfnVemRegisterState       = vemRegisterState;

  00129	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMethodStruct$[ebp]
  0012c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:_vemRegisterState@8

; 1083 :    pVemMethodStruct->lpfnVemServiceState        = vemServiceState;

  00133	8b 55 f8	 mov	 edx, DWORD PTR _pVemMethodStruct$[ebp]
  00136	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET FLAT:_vemServiceState@4

; 1084 :    pVemMethodStruct->lpfnVemDisableState        = vemDisableState;

  0013d	8b 45 f8	 mov	 eax, DWORD PTR _pVemMethodStruct$[ebp]
  00140	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET FLAT:_vemDisableState@4

; 1085 :    pVemMethodStruct->lpfnVemEnableState         = vemEnableState;

  00147	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMethodStruct$[ebp]
  0014a	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET FLAT:_vemEnableState@4

; 1086 :    pVemMethodStruct->lpfnVemGetState            = vemGetState;

  00151	8b 55 f8	 mov	 edx, DWORD PTR _pVemMethodStruct$[ebp]
  00154	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET FLAT:_vemGetState@8

; 1087 : 
; 1088 :    pVemMethodStruct->lpfnVemShowStates          = vemShowStates;

  0015b	8b 45 f8	 mov	 eax, DWORD PTR _pVemMethodStruct$[ebp]
  0015e	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET FLAT:_vemShowStates@4

; 1089 : 
; 1090 :    /******* Extensions *******/
; 1091 :    pVemMethodStruct->lpfnVemUnregisterExtension = vemUnregisterExtension;

  00165	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMethodStruct$[ebp]
  00168	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], OFFSET FLAT:_vemUnregisterExtension@8

; 1092 :    pVemMethodStruct->lpfnVemRegisterExtension   = vemRegisterExtension;

  0016f	8b 55 f8	 mov	 edx, DWORD PTR _pVemMethodStruct$[ebp]
  00172	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], OFFSET FLAT:_vemRegisterExtension@20

; 1093 :    pVemMethodStruct->lpfnVemGetExtension        = vemGetExtension;

  00179	8b 45 f8	 mov	 eax, DWORD PTR _pVemMethodStruct$[ebp]
  0017c	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], OFFSET FLAT:_vemGetExtension@8

; 1094 :    pVemMethodStruct->lpfnVemDisableExtension    = vemDisableExtension;

  00183	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMethodStruct$[ebp]
  00186	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], OFFSET FLAT:_vemDisableExtension@4

; 1095 :    pVemMethodStruct->lpfnVemEnableExtension     = vemEnableExtension;

  0018d	8b 55 f8	 mov	 edx, DWORD PTR _pVemMethodStruct$[ebp]
  00190	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], OFFSET FLAT:_vemEnableExtension@4

; 1096 :    pVemMethodStruct->lpfnVemAttachExtension     = vemAttachExtension;

  00197	8b 45 f8	 mov	 eax, DWORD PTR _pVemMethodStruct$[ebp]
  0019a	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], OFFSET FLAT:_vemAttachExtension@12

; 1097 :    pVemMethodStruct->lpfnVemDetachExtension     = vemDetachExtension;

  001a1	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMethodStruct$[ebp]
  001a4	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], OFFSET FLAT:_vemDetachExtension@8

; 1098 :    pVemMethodStruct->lpfnVemGetExtensionFunc    = vemGetExtensionFunc;

  001ab	8b 55 f8	 mov	 edx, DWORD PTR _pVemMethodStruct$[ebp]
  001ae	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], OFFSET FLAT:_vemGetExtensionFunc@4

; 1099 :    pVemMethodStruct->lpfnVemSetExtensionFunc    = vemSetExtensionFunc;

  001b5	8b 45 f8	 mov	 eax, DWORD PTR _pVemMethodStruct$[ebp]
  001b8	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], OFFSET FLAT:_vemSetExtensionFunc@8

; 1100 :    pVemMethodStruct->lpfnVemGetExtensionData    = vemGetExtensionData;

  001bf	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMethodStruct$[ebp]
  001c2	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], OFFSET FLAT:_vemGetExtensionData@4

; 1101 :    pVemMethodStruct->lpfnVemSetExtensionData    = vemSetExtensionData;

  001c9	8b 55 f8	 mov	 edx, DWORD PTR _pVemMethodStruct$[ebp]
  001cc	c7 42 44 00 00
	00 00		 mov	 DWORD PTR [edx+68], OFFSET FLAT:_vemSetExtensionData@8

; 1102 :    pVemMethodStruct->lpfnVemShowExtensions      = vemShowExtensions;

  001d3	8b 45 f8	 mov	 eax, DWORD PTR _pVemMethodStruct$[ebp]
  001d6	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], OFFSET FLAT:_vemShowExtensions@4

; 1103 : 
; 1104 :    /******* Parameters *******/
; 1105 :    pVemMethodStruct->lpfnVemUnregisterParameter = vemUnregisterParameter;

  001dd	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMethodStruct$[ebp]
  001e0	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], OFFSET FLAT:_vemUnregisterParameter@8

; 1106 :    pVemMethodStruct->lpfnVemRegisterArray       = vemRegisterArray;

  001e7	8b 55 f8	 mov	 edx, DWORD PTR _pVemMethodStruct$[ebp]
  001ea	c7 42 50 00 00
	00 00		 mov	 DWORD PTR [edx+80], OFFSET FLAT:_vemRegisterArray@20

; 1107 :    pVemMethodStruct->lpfnVemRegisterTable       = vemRegisterTable;

  001f1	8b 45 f8	 mov	 eax, DWORD PTR _pVemMethodStruct$[ebp]
  001f4	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], OFFSET FLAT:_vemRegisterTable@20

; 1108 :    pVemMethodStruct->lpfnVemRegisterVariable    = vemRegisterVariable;

  001fb	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMethodStruct$[ebp]
  001fe	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], OFFSET FLAT:_vemRegisterVariable@16

; 1109 :    pVemMethodStruct->lpfnVemRegisterStruct      = vemRegisterStruct;

  00205	8b 55 f8	 mov	 edx, DWORD PTR _pVemMethodStruct$[ebp]
  00208	c7 42 5c 00 00
	00 00		 mov	 DWORD PTR [edx+92], OFFSET FLAT:_vemRegisterStruct@16

; 1110 :    pVemMethodStruct->lpfnVemRegisterConstFloat  = vemRegisterConstFloat;

  0020f	8b 45 f8	 mov	 eax, DWORD PTR _pVemMethodStruct$[ebp]
  00212	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], OFFSET FLAT:_vemRegisterConstFloat@12

; 1111 :    pVemMethodStruct->lpfnVemRegisterConstShort  = vemRegisterConstShort;

  00219	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMethodStruct$[ebp]
  0021c	c7 41 64 00 00
	00 00		 mov	 DWORD PTR [ecx+100], OFFSET FLAT:_vemRegisterConstShort@12

; 1112 :    pVemMethodStruct->lpfnVemGetParameter        = vemGetParameter;

  00223	8b 55 f8	 mov	 edx, DWORD PTR _pVemMethodStruct$[ebp]
  00226	c7 42 68 00 00
	00 00		 mov	 DWORD PTR [edx+104], OFFSET FLAT:_vemGetParameter@8

; 1113 :    pVemMethodStruct->lpfnVemGetParameterData    = vemGetParameterData;

  0022d	8b 45 f8	 mov	 eax, DWORD PTR _pVemMethodStruct$[ebp]
  00230	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [eax+108], OFFSET FLAT:_vemGetParameterData@8

; 1114 :    pVemMethodStruct->lpfnVemSetParameterData    = vemSetParameterData;

  00237	8b 4d f8	 mov	 ecx, DWORD PTR _pVemMethodStruct$[ebp]
  0023a	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], OFFSET FLAT:_vemSetParameterData@8

; 1115 :    pVemMethodStruct->lpfnVemShowParameters      = vemShowParameters;

  00241	8b 55 f8	 mov	 edx, DWORD PTR _pVemMethodStruct$[ebp]
  00244	c7 42 74 00 00
	00 00		 mov	 DWORD PTR [edx+116], OFFSET FLAT:_vemShowParameters@4

; 1116 :       
; 1117 :    return((void *)pVemMainStruct);

  0024b	8b 45 f4	 mov	 eax, DWORD PTR _pVemMainStruct$[ebp]
$L1872:

; 1118 : }

  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c3		 ret	 0
_vemInit@0 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT _vemShowStates@4
_TEXT	SEGMENT
_hVemMemHandle$ = 8
_vemShowStates@4 PROC NEAR				; COMDAT

; 1248 : void vemShowStates(const void *hVemMemHandle) {return;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c2 04 00	 ret	 4
_vemShowStates@4 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT _vemShowExtensions@4
_TEXT	SEGMENT
_hVemMemHandle$ = 8
_vemShowExtensions@4 PROC NEAR				; COMDAT

; 1249 : void vemShowExtensions(const void *hVemMemHandle) {return;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c2 04 00	 ret	 4
_vemShowExtensions@4 ENDP
_TEXT	ENDS
END
