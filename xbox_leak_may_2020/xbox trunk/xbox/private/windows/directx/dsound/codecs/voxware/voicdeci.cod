; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\voicdeci.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@HHODBGBI@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09BMKOKMKD@NHarm?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxVocDecision@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxInitVoicing@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxFreeVoicing@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxVocDecision@28
PUBLIC	??_C@_0EB@HHODBGBI@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_09BMKOKMKD@NHarm?5?$DO?50?$AA@		; `string'
PUBLIC	__real@43800000
PUBLIC	__real@3f800000
PUBLIC	__real@358637bd
PUBLIC	__real@3f000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@471c4000
PUBLIC	__real@3ba3d70a
PUBLIC	__real@40a00000
PUBLIC	__real@42820000
PUBLIC	__real@3ff8febe
PUBLIC	__real@3f59999a
PUBLIC	__real@3f733333
PUBLIC	__real@3f266666
PUBLIC	__real@3f666666
PUBLIC	__real@3f400000
PUBLIC	__real@38d1b717
PUBLIC	__real@3a03126f
PUBLIC	__real@43160000
PUBLIC	__real@3a9d4952
PUBLIC	__real@41a00000
PUBLIC	__real@3cac0831
PUBLIC	__real@3fa28f5c
PUBLIC	__real@3eb33333
PUBLIC	__real@00000000
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3f90a3d7
PUBLIC	__real@3e6147ae
PUBLIC	__real@3e8f5c29
PUBLIC	__real@3df5c28f
PUBLIC	__real@3cbc6a7f
PUBLIC	__real@3e428f5c
PUBLIC	__real@3d27ef9e
PUBLIC	__real@3e99999a
PUBLIC	__real@3e19999a
PUBLIC	__real@3deb851f
PUBLIC	__real@3f1eb852
PUBLIC	__real@3eae147b
PUBLIC	__real@42c80000
PUBLIC	__real@3d3020c5
PUBLIC	__real@40066666
PUBLIC	__real@3f147ae1
PUBLIC	__real@42dc0000
PUBLIC	__real@0000000000000000
EXTRN	_getnHarm@4:NEAR
EXTRN	_getPv@8:NEAR
EXTRN	__fltused:NEAR
EXTRN	_sqrt:NEAR
EXTRN	__assert:NEAR
;	COMDAT __real@43800000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\voicdeci.c
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@358637bd
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-006
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@471c4000
CONST	SEGMENT
__real@471c4000 DD 0471c4000r			; 40000
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@42820000
CONST	SEGMENT
__real@42820000 DD 042820000r			; 65
CONST	ENDS
;	COMDAT __real@3ff8febe
CONST	SEGMENT
__real@3ff8febe DD 03ff8feber			; 1.94527
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT ??_C@_0EB@HHODBGBI@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0EB@HHODBGBI@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\voicdeci.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BMKOKMKD@NHarm?5?$DO?50?$AA@
CONST	SEGMENT
??_C@_09BMKOKMKD@NHarm?5?$DO?50?$AA@ DB 'NHarm > 0', 00H ; `string'
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@3a03126f
CONST	SEGMENT
__real@3a03126f DD 03a03126fr			; 0.0005
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@3a9d4952
CONST	SEGMENT
__real@3a9d4952 DD 03a9d4952r			; 0.0012
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@3cac0831
CONST	SEGMENT
__real@3cac0831 DD 03cac0831r			; 0.021
CONST	ENDS
;	COMDAT __real@3fa28f5c
CONST	SEGMENT
__real@3fa28f5c DD 03fa28f5cr			; 1.27
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3f90a3d7
CONST	SEGMENT
__real@3f90a3d7 DD 03f90a3d7r			; 1.13
CONST	ENDS
;	COMDAT __real@3e6147ae
CONST	SEGMENT
__real@3e6147ae DD 03e6147aer			; 0.22
CONST	ENDS
;	COMDAT __real@3e8f5c29
CONST	SEGMENT
__real@3e8f5c29 DD 03e8f5c29r			; 0.28
CONST	ENDS
;	COMDAT __real@3df5c28f
CONST	SEGMENT
__real@3df5c28f DD 03df5c28fr			; 0.12
CONST	ENDS
;	COMDAT __real@3cbc6a7f
CONST	SEGMENT
__real@3cbc6a7f DD 03cbc6a7fr			; 0.023
CONST	ENDS
;	COMDAT __real@3e428f5c
CONST	SEGMENT
__real@3e428f5c DD 03e428f5cr			; 0.19
CONST	ENDS
;	COMDAT __real@3d27ef9e
CONST	SEGMENT
__real@3d27ef9e DD 03d27ef9er			; 0.041
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3deb851f
CONST	SEGMENT
__real@3deb851f DD 03deb851fr			; 0.115
CONST	ENDS
;	COMDAT __real@3f1eb852
CONST	SEGMENT
__real@3f1eb852 DD 03f1eb852r			; 0.62
CONST	ENDS
;	COMDAT __real@3eae147b
CONST	SEGMENT
__real@3eae147b DD 03eae147br			; 0.34
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@3d3020c5
CONST	SEGMENT
__real@3d3020c5 DD 03d3020c5r			; 0.043
CONST	ENDS
;	COMDAT __real@40066666
CONST	SEGMENT
__real@40066666 DD 040066666r			; 2.1
CONST	ENDS
;	COMDAT __real@3f147ae1
CONST	SEGMENT
__real@3f147ae1 DD 03f147ae1r			; 0.58
CONST	ENDS
;	COMDAT __real@42dc0000
CONST	SEGMENT
__real@42dc0000 DD 042dc0000r			; 110
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxVocDecision@28
_TEXT	SEGMENT
tv254 = -96
_pVoicing_mblk$ = -88
_fThrdDelta$ = -84
_NHarm$ = -80
_fHighBandEng$ = -76
_fBiasL2H$ = -72
_fThreshold$ = -68
_fBiasP0$ = -64
_Zlf2Zhf$ = -60
_fMaxEng$ = -56
_fNormScale$ = -52
_Z02Zmax$ = -48
_iVHarm$ = -44
_fBiasEng$ = -40
_iClass$ = -36
_i$ = -32
_fBiasAll$ = -28
_Pv$ = -24
_M$ = -20
_iPrevVUV$ = -16
_fLowBandEng$ = -12
_fTotalEng$ = -8
_fPrevPv$ = -4
_fPitch$ = 8
_Voicing_mblk$ = 12
_pPv$ = 16
_pPower$ = 20
_pBandErr$ = 24
_uiWinLen$ = 28
_Class$ = 32
_VoxVocDecision@28 PROC NEAR				; COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H

; 90   :   Voicing *pVoicing_mblk = (Voicing *)Voicing_mblk;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _Voicing_mblk$[ebp]
  00009	89 45 a8	 mov	 DWORD PTR _pVoicing_mblk$[ebp], eax

; 91   :   float fNormScale;
; 92   :   int i;
; 93   :   float fLowBandEng, fHighBandEng, fTotalEng;
; 94   :   float Pv;
; 95   :   float fMaxEng = pVoicing_mblk->Zmax;

  0000c	8b 4d a8	 mov	 ecx, DWORD PTR _pVoicing_mblk$[ebp]
  0000f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00012	89 55 c8	 mov	 DWORD PTR _fMaxEng$[ebp], edx

; 96   :   float fBiasEng, fBiasL2H, fBiasP0, fBiasAll;
; 97   :   float fThrdDelta;
; 98   :   float fThreshold;
; 99   :   short *iPrevVUV = pVoicing_mblk->prev_vuv;

  00015	8b 45 a8	 mov	 eax, DWORD PTR _pVoicing_mblk$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d f0	 mov	 DWORD PTR _iPrevVUV$[ebp], ecx

; 100  :   float fPrevPv = pVoicing_mblk->P_v;

  0001d	8b 55 a8	 mov	 edx, DWORD PTR _pVoicing_mblk$[ebp]
  00020	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00023	89 45 fc	 mov	 DWORD PTR _fPrevPv$[ebp], eax

; 101  :   int iVHarm;
; 102  :   unsigned short iClass=*Class;

  00026	8b 4d 20	 mov	 ecx, DWORD PTR _Class$[ebp]
  00029	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0002c	66 89 55 dc	 mov	 WORD PTR _iClass$[ebp], dx

; 103  :   float Z02Zmax, Zlf2Zhf, M;
; 104  :   int NHarm;
; 105  : 
; 106  :   /*************************************************************
; 107  :     get number of harmonics 
; 108  :     ************************************************************/
; 109  :   NHarm = getnHarm(fPitch);

  00030	8b 45 08	 mov	 eax, DWORD PTR _fPitch$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _getnHarm@4
  00039	0f bf c8	 movsx	 ecx, ax
  0003c	89 4d b0	 mov	 DWORD PTR _NHarm$[ebp], ecx

; 110  : 
; 111  :   /*************************************************************
; 112  :     calculate energy 
; 113  :     ************************************************************/
; 114  :   fNormScale = 1.0F / ((float)NFFT_2 * (float)uiWinLen);

  0003f	8b 55 1c	 mov	 edx, DWORD PTR _uiWinLen$[ebp]
  00042	89 55 a0	 mov	 DWORD PTR tv254[ebp], edx
  00045	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv254[ebp+4], 0
  0004c	df 6d a0	 fild	 QWORD PTR tv254[ebp]
  0004f	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@43800000
  00055	d8 3d 00 00 00
	00		 fdivr	 DWORD PTR __real@3f800000
  0005b	d9 5d cc	 fstp	 DWORD PTR _fNormScale$[ebp]

; 115  : 
; 116  :   fLowBandEng = MINCON;

  0005e	c7 45 f4 bd 37
	86 35		 mov	 DWORD PTR _fLowBandEng$[ebp], 897988541 ; 358637bdH

; 117  :   for (i = 0; i < NFFT_4; i++)  fLowBandEng += *pPower++;

  00065	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0006c	eb 09		 jmp	 SHORT $L1335
$L1336:
  0006e	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  00071	83 c0 01	 add	 eax, 1
  00074	89 45 e0	 mov	 DWORD PTR _i$[ebp], eax
$L1335:
  00077	81 7d e0 80 00
	00 00		 cmp	 DWORD PTR _i$[ebp], 128	; 00000080H
  0007e	7d 16		 jge	 SHORT $L1337
  00080	8b 4d 14	 mov	 ecx, DWORD PTR _pPower$[ebp]
  00083	d9 45 f4	 fld	 DWORD PTR _fLowBandEng$[ebp]
  00086	d8 01		 fadd	 DWORD PTR [ecx]
  00088	d9 5d f4	 fstp	 DWORD PTR _fLowBandEng$[ebp]
  0008b	8b 55 14	 mov	 edx, DWORD PTR _pPower$[ebp]
  0008e	83 c2 04	 add	 edx, 4
  00091	89 55 14	 mov	 DWORD PTR _pPower$[ebp], edx
  00094	eb d8		 jmp	 SHORT $L1336
$L1337:

; 118  :   fLowBandEng *= fNormScale;

  00096	d9 45 f4	 fld	 DWORD PTR _fLowBandEng$[ebp]
  00099	d8 4d cc	 fmul	 DWORD PTR _fNormScale$[ebp]
  0009c	d9 5d f4	 fstp	 DWORD PTR _fLowBandEng$[ebp]

; 119  : 
; 120  :   fHighBandEng = MINCON;

  0009f	c7 45 b4 bd 37
	86 35		 mov	 DWORD PTR _fHighBandEng$[ebp], 897988541 ; 358637bdH

; 121  :   for (; i < NFFT_2; i++)   fHighBandEng += *pPower++;

  000a6	eb 09		 jmp	 SHORT $L1338
$L1339:
  000a8	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  000ab	83 c0 01	 add	 eax, 1
  000ae	89 45 e0	 mov	 DWORD PTR _i$[ebp], eax
$L1338:
  000b1	81 7d e0 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  000b8	7d 16		 jge	 SHORT $L1340
  000ba	8b 4d 14	 mov	 ecx, DWORD PTR _pPower$[ebp]
  000bd	d9 45 b4	 fld	 DWORD PTR _fHighBandEng$[ebp]
  000c0	d8 01		 fadd	 DWORD PTR [ecx]
  000c2	d9 5d b4	 fstp	 DWORD PTR _fHighBandEng$[ebp]
  000c5	8b 55 14	 mov	 edx, DWORD PTR _pPower$[ebp]
  000c8	83 c2 04	 add	 edx, 4
  000cb	89 55 14	 mov	 DWORD PTR _pPower$[ebp], edx
  000ce	eb d8		 jmp	 SHORT $L1339
$L1340:

; 122  :   fHighBandEng *= fNormScale;

  000d0	d9 45 b4	 fld	 DWORD PTR _fHighBandEng$[ebp]
  000d3	d8 4d cc	 fmul	 DWORD PTR _fNormScale$[ebp]
  000d6	d9 5d b4	 fstp	 DWORD PTR _fHighBandEng$[ebp]

; 123  : 
; 124  :   fTotalEng = fLowBandEng + fHighBandEng;   /* leave for VAD */

  000d9	d9 45 f4	 fld	 DWORD PTR _fLowBandEng$[ebp]
  000dc	d8 45 b4	 fadd	 DWORD PTR _fHighBandEng$[ebp]
  000df	d9 55 f8	 fst	 DWORD PTR _fTotalEng$[ebp]

; 125  :   
; 126  :   if (fTotalEng < MINCON) 

  000e2	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@358637bd
  000e8	df e0		 fnstsw	 ax
  000ea	f6 c4 05	 test	 ah, 5
  000ed	7a 0c		 jp	 SHORT $L1341

; 127  :     Pv = 0.0F;

  000ef	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Pv$[ebp], 0

; 128  :   else {

  000f6	e9 ac 04 00 00	 jmp	 $L1342
$L1341:

; 129  :     /*************************************************************
; 130  :       calculate the bias for voicing threshold 
; 131  :       ************************************************************/
; 132  :     /* Ratio related to maximum energy. For a low energy, voicing decision
; 133  :        tends to unvoice. But this parameter seems have very little influence 
; 134  :        to voicing calculation. */
; 135  :     if (fTotalEng > fMaxEng)

  000fb	d9 45 f8	 fld	 DWORD PTR _fTotalEng$[ebp]
  000fe	d8 5d c8	 fcomp	 DWORD PTR _fMaxEng$[ebp]
  00101	df e0		 fnstsw	 ax
  00103	f6 c4 41	 test	 ah, 65			; 00000041H
  00106	75 11		 jne	 SHORT $L1343

; 136  :       fMaxEng = 0.5F*(fTotalEng+fMaxEng);

  00108	d9 45 f8	 fld	 DWORD PTR _fTotalEng$[ebp]
  0010b	d8 45 c8	 fadd	 DWORD PTR _fMaxEng$[ebp]
  0010e	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  00114	d9 5d c8	 fstp	 DWORD PTR _fMaxEng$[ebp]

; 137  :     else

  00117	eb 12		 jmp	 SHORT $L1344
$L1343:

; 138  :       fMaxEng = fMaxEng+0.01F*(fTotalEng-fMaxEng);

  00119	d9 45 f8	 fld	 DWORD PTR _fTotalEng$[ebp]
  0011c	d8 65 c8	 fsub	 DWORD PTR _fMaxEng$[ebp]
  0011f	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3c23d70a
  00125	d8 45 c8	 fadd	 DWORD PTR _fMaxEng$[ebp]
  00128	d9 5d c8	 fstp	 DWORD PTR _fMaxEng$[ebp]
$L1344:

; 139  : 
; 140  :     if (fMaxEng > 40000.0F)          /* this energy is too small */

  0012b	d9 45 c8	 fld	 DWORD PTR _fMaxEng$[ebp]
  0012e	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@471c4000
  00134	df e0		 fnstsw	 ax
  00136	f6 c4 41	 test	 ah, 65			; 00000041H
  00139	75 07		 jne	 SHORT $L1345

; 141  :       fMaxEng = 40000.0F;

  0013b	c7 45 c8 00 40
	1c 47		 mov	 DWORD PTR _fMaxEng$[ebp], 1193033728 ; 471c4000H
$L1345:

; 142  : 
; 143  :     fBiasEng = (0.005F*fMaxEng + fTotalEng)/(0.01F*fMaxEng+fTotalEng);

  00142	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3ba3d70a
  00148	d8 4d c8	 fmul	 DWORD PTR _fMaxEng$[ebp]
  0014b	d8 45 f8	 fadd	 DWORD PTR _fTotalEng$[ebp]
  0014e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3c23d70a
  00154	d8 4d c8	 fmul	 DWORD PTR _fMaxEng$[ebp]
  00157	d8 45 f8	 fadd	 DWORD PTR _fTotalEng$[ebp]
  0015a	de f9		 fdivp	 ST(1), ST(0)
  0015c	d9 5d d8	 fstp	 DWORD PTR _fBiasEng$[ebp]

; 144  : 
; 145  :     /* ratio related to low band energy to high band energy. If high band
; 146  :        energy is too high compare to low band energy, the speech is noise-like.
; 147  :        However, this condition can never be over-used, because it also depends 
; 148  :        on the channel condition. */
; 149  :     fBiasL2H = (float)sqrt(fLowBandEng / (5.0F*fHighBandEng));

  0015f	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40a00000
  00165	d8 4d b4	 fmul	 DWORD PTR _fHighBandEng$[ebp]
  00168	d8 7d f4	 fdivr	 DWORD PTR _fLowBandEng$[ebp]
  0016b	83 ec 08	 sub	 esp, 8
  0016e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00171	e8 00 00 00 00	 call	 _sqrt
  00176	83 c4 08	 add	 esp, 8
  00179	d9 55 b8	 fst	 DWORD PTR _fBiasL2H$[ebp]

; 150  :     if (fBiasL2H > 1.0F) fBiasL2H = 1.0F;

  0017c	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f800000
  00182	df e0		 fnstsw	 ax
  00184	f6 c4 41	 test	 ah, 65			; 00000041H
  00187	75 07		 jne	 SHORT $L1347
  00189	c7 45 b8 00 00
	80 3f		 mov	 DWORD PTR _fBiasL2H$[ebp], 1065353216 ; 3f800000H
$L1347:

; 151  :     
; 152  : 
; 153  :     /* ratio related to pitch value. When pitch is too large, the spectrum is 
; 154  :        too smeared. It's due to bandwidth of harmonics is smaller than the window 
; 155  :        bandwidth. For Kaiser window with beta = 6.0, the window bandwidth is 
; 156  :        around 8. So I simplified the condition to: */
; 157  :     fBiasP0 = 65.0F/fPitch;

  00190	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42820000
  00196	d8 75 08	 fdiv	 DWORD PTR _fPitch$[ebp]
  00199	d9 55 c0	 fst	 DWORD PTR _fBiasP0$[ebp]

; 158  :     if (fBiasP0 > 1.0F) fBiasP0 = 1.0F;

  0019c	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f800000
  001a2	df e0		 fnstsw	 ax
  001a4	f6 c4 41	 test	 ah, 65			; 00000041H
  001a7	75 07		 jne	 SHORT $L1348
  001a9	c7 45 c0 00 00
	80 3f		 mov	 DWORD PTR _fBiasP0$[ebp], 1065353216 ; 3f800000H
$L1348:

; 159  : 
; 160  :     fBiasAll = fBiasP0 * fBiasL2H * fBiasEng;

  001b0	d9 45 c0	 fld	 DWORD PTR _fBiasP0$[ebp]
  001b3	d8 4d b8	 fmul	 DWORD PTR _fBiasL2H$[ebp]
  001b6	d8 4d d8	 fmul	 DWORD PTR _fBiasEng$[ebp]
  001b9	d9 55 e4	 fst	 DWORD PTR _fBiasAll$[ebp]

; 161  : 
; 162  :     /* now we can make the decision based on the each harmonics */
; 163  :     /* still use Suat's decision in this release until I find out
; 164  :        more sophisticate classifier and threshold */
; 165  :     fThrdDelta = fBiasAll * (float)CONSTANT4PV / fPitch;

  001bc	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3ff8febe
  001c2	d8 75 08	 fdiv	 DWORD PTR _fPitch$[ebp]
  001c5	d9 5d ac	 fstp	 DWORD PTR _fThrdDelta$[ebp]

; 166  :     iVHarm = 0;

  001c8	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _iVHarm$[ebp], 0

; 167  :     for (i = 0; i < NHarm; i++) {

  001cf	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001d6	eb 09		 jmp	 SHORT $L1351
$L1352:
  001d8	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  001db	83 c0 01	 add	 eax, 1
  001de	89 45 e0	 mov	 DWORD PTR _i$[ebp], eax
$L1351:
  001e1	8b 4d e0	 mov	 ecx, DWORD PTR _i$[ebp]
  001e4	3b 4d b0	 cmp	 ecx, DWORD PTR _NHarm$[ebp]
  001e7	0f 8d eb 00 00
	00		 jge	 $L1353

; 168  :       fThreshold = fBiasAll - fThrdDelta * (float)i;

  001ed	db 45 e0	 fild	 DWORD PTR _i$[ebp]
  001f0	d8 4d ac	 fmul	 DWORD PTR _fThrdDelta$[ebp]
  001f3	d8 6d e4	 fsubr	 DWORD PTR _fBiasAll$[ebp]
  001f6	d9 5d bc	 fstp	 DWORD PTR _fThreshold$[ebp]

; 169  :       /* make the threshold adaptive to previous decision */
; 170  :       if(fPrevPv >= 0.85F) fThreshold *= 0.95F;

  001f9	d9 45 fc	 fld	 DWORD PTR _fPrevPv$[ebp]
  001fc	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f59999a
  00202	df e0		 fnstsw	 ax
  00204	f6 c4 01	 test	 ah, 1
  00207	75 11		 jne	 SHORT $L1355
  00209	d9 45 bc	 fld	 DWORD PTR _fThreshold$[ebp]
  0020c	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f733333
  00212	d9 5d bc	 fstp	 DWORD PTR _fThreshold$[ebp]

; 171  :       else if (iPrevVUV[i]==1&&fPrevPv>=0.65F) fThreshold *= 0.9F;

  00215	e9 83 00 00 00	 jmp	 $L1356
$L1355:
  0021a	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  0021d	8b 45 f0	 mov	 eax, DWORD PTR _iPrevVUV$[ebp]
  00220	0f bf 0c 50	 movsx	 ecx, WORD PTR [eax+edx*2]
  00224	83 f9 01	 cmp	 ecx, 1
  00227	75 1e		 jne	 SHORT $L1357
  00229	d9 45 fc	 fld	 DWORD PTR _fPrevPv$[ebp]
  0022c	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f266666
  00232	df e0		 fnstsw	 ax
  00234	f6 c4 01	 test	 ah, 1
  00237	75 0e		 jne	 SHORT $L1357
  00239	d9 45 bc	 fld	 DWORD PTR _fThreshold$[ebp]
  0023c	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f666666
  00242	d9 5d bc	 fstp	 DWORD PTR _fThreshold$[ebp]

; 172  :       else if (iPrevVUV[i]==1&&fPrevPv>=0.5F)  fThreshold *= 0.85F;

  00245	eb 56		 jmp	 SHORT $L1356
$L1357:
  00247	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  0024a	8b 45 f0	 mov	 eax, DWORD PTR _iPrevVUV$[ebp]
  0024d	0f bf 0c 50	 movsx	 ecx, WORD PTR [eax+edx*2]
  00251	83 f9 01	 cmp	 ecx, 1
  00254	75 1e		 jne	 SHORT $L1359
  00256	d9 45 fc	 fld	 DWORD PTR _fPrevPv$[ebp]
  00259	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f000000
  0025f	df e0		 fnstsw	 ax
  00261	f6 c4 01	 test	 ah, 1
  00264	75 0e		 jne	 SHORT $L1359
  00266	d9 45 bc	 fld	 DWORD PTR _fThreshold$[ebp]
  00269	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f59999a
  0026f	d9 5d bc	 fstp	 DWORD PTR _fThreshold$[ebp]

; 173  :       else if (iPrevVUV[i]==1)  fThreshold *= 0.75F;

  00272	eb 29		 jmp	 SHORT $L1356
$L1359:
  00274	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  00277	8b 45 f0	 mov	 eax, DWORD PTR _iPrevVUV$[ebp]
  0027a	0f bf 0c 50	 movsx	 ecx, WORD PTR [eax+edx*2]
  0027e	83 f9 01	 cmp	 ecx, 1
  00281	75 0e		 jne	 SHORT $L1361
  00283	d9 45 bc	 fld	 DWORD PTR _fThreshold$[ebp]
  00286	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f400000
  0028c	d9 5d bc	 fstp	 DWORD PTR _fThreshold$[ebp]

; 174  :       else     fThreshold *= 0.65F;

  0028f	eb 0c		 jmp	 SHORT $L1356
$L1361:
  00291	d9 45 bc	 fld	 DWORD PTR _fThreshold$[ebp]
  00294	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f266666
  0029a	d9 5d bc	 fstp	 DWORD PTR _fThreshold$[ebp]
$L1356:

; 175  : 
; 176  :       /* make the decision by comparing the threshold and band error */
; 177  :       if ( pBandErr[i] < fThreshold) {

  0029d	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  002a0	8b 45 18	 mov	 eax, DWORD PTR _pBandErr$[ebp]
  002a3	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  002a6	d8 5d bc	 fcomp	 DWORD PTR _fThreshold$[ebp]
  002a9	df e0		 fnstsw	 ax
  002ab	f6 c4 05	 test	 ah, 5
  002ae	7a 17		 jp	 SHORT $L1363

; 178  : 	iPrevVUV[i] = 1;

  002b0	8b 4d e0	 mov	 ecx, DWORD PTR _i$[ebp]
  002b3	8b 55 f0	 mov	 edx, DWORD PTR _iPrevVUV$[ebp]
  002b6	66 c7 04 4a 01
	00		 mov	 WORD PTR [edx+ecx*2], 1

; 179  : 	iVHarm ++;

  002bc	8b 45 d4	 mov	 eax, DWORD PTR _iVHarm$[ebp]
  002bf	83 c0 01	 add	 eax, 1
  002c2	89 45 d4	 mov	 DWORD PTR _iVHarm$[ebp], eax

; 180  :       }
; 181  :       else {

  002c5	eb 0c		 jmp	 SHORT $L1364
$L1363:

; 182  : 	iPrevVUV[i] = 0;

  002c7	8b 4d e0	 mov	 ecx, DWORD PTR _i$[ebp]
  002ca	8b 55 f0	 mov	 edx, DWORD PTR _iPrevVUV$[ebp]
  002cd	66 c7 04 4a 00
	00		 mov	 WORD PTR [edx+ecx*2], 0
$L1364:

; 183  :       }
; 184  :     }

  002d3	e9 00 ff ff ff	 jmp	 $L1352
$L1353:

; 185  : 
; 186  :     for (; i < MAXHARM; i++)

  002d8	eb 09		 jmp	 SHORT $L1365
$L1366:
  002da	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  002dd	83 c0 01	 add	 eax, 1
  002e0	89 45 e0	 mov	 DWORD PTR _i$[ebp], eax
$L1365:
  002e3	83 7d e0 5a	 cmp	 DWORD PTR _i$[ebp], 90	; 0000005aH
  002e7	7d 0e		 jge	 SHORT $L1367

; 187  :       iPrevVUV[i] = 0;

  002e9	8b 4d e0	 mov	 ecx, DWORD PTR _i$[ebp]
  002ec	8b 55 f0	 mov	 edx, DWORD PTR _iPrevVUV$[ebp]
  002ef	66 c7 04 4a 00
	00		 mov	 WORD PTR [edx+ecx*2], 0
  002f5	eb e3		 jmp	 SHORT $L1366
$L1367:

; 188  : 
; 189  :     assert(NHarm > 0);

  002f7	83 7d b0 00	 cmp	 DWORD PTR _NHarm$[ebp], 0
  002fb	7f 17		 jg	 SHORT $L1421
  002fd	68 bd 00 00 00	 push	 189			; 000000bdH
  00302	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@HHODBGBI@c?3?2xbox?2private?2windows?2directx?2@
  00307	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09BMKOKMKD@NHarm?5?$DO?50?$AA@
  0030c	e8 00 00 00 00	 call	 __assert
  00311	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1421:

; 190  :     
; 191  : 
; 192  :     Pv = getPv((short)iVHarm, (short)NHarm);   /* Pv=(float)((int)(iVHarm*NFFT/fPitch+0.5F))/(0.93F*NFFT_2); */

  00314	66 8b 4d b0	 mov	 cx, WORD PTR _NHarm$[ebp]
  00318	51		 push	 ecx
  00319	66 8b 55 d4	 mov	 dx, WORD PTR _iVHarm$[ebp]
  0031d	52		 push	 edx
  0031e	e8 00 00 00 00	 call	 _getPv@8
  00323	d9 5d e8	 fstp	 DWORD PTR _Pv$[ebp]

; 193  : 
; 194  :     /*************************************************************
; 195  :       use Suat's decision
; 196  :       ************************************************************/
; 197  :     Z02Zmax = fTotalEng/fMaxEng;

  00326	d9 45 f8	 fld	 DWORD PTR _fTotalEng$[ebp]
  00329	d8 75 c8	 fdiv	 DWORD PTR _fMaxEng$[ebp]
  0032c	d9 5d d0	 fstp	 DWORD PTR _Z02Zmax$[ebp]

; 198  :     Zlf2Zhf = fLowBandEng/fHighBandEng;

  0032f	d9 45 f4	 fld	 DWORD PTR _fLowBandEng$[ebp]
  00332	d8 75 b4	 fdiv	 DWORD PTR _fHighBandEng$[ebp]
  00335	d9 5d c4	 fstp	 DWORD PTR _Zlf2Zhf$[ebp]

; 199  :     M = fBiasL2H * fBiasEng;

  00338	d9 45 b8	 fld	 DWORD PTR _fBiasL2H$[ebp]
  0033b	d8 4d d8	 fmul	 DWORD PTR _fBiasEng$[ebp]
  0033e	d9 5d ec	 fstp	 DWORD PTR _M$[ebp]

; 200  :     if((Z02Zmax<0.0001F) ||
; 201  :        (Z02Zmax<0.0005F && Zlf2Zhf<150.0F) ||
; 202  :        (Z02Zmax<0.0012F && Zlf2Zhf<20.0F) ||
; 203  :        (Z02Zmax<0.021F  && Zlf2Zhf<1.27F && M<0.35F && fPrevPv==0.0F) ||
; 204  :        (Z02Zmax<0.02F   && Zlf2Zhf<1.13F && M<0.22F && fPrevPv==0.0F) ||
; 205  :        (Z02Zmax<0.02F   && Zlf2Zhf<1.13F && M<0.28F && fPrevPv<0.12F) ||
; 206  :        (Z02Zmax<0.023F  && Zlf2Zhf<1.0F  && M<0.19F && fPrevPv<0.12F) ||
; 207  :        (Z02Zmax<0.041F  && Zlf2Zhf<0.3F  && M<0.15F && fPrevPv==0.0F) ||
; 208  :        (Z02Zmax<0.115F  && Zlf2Zhf<0.62F && M<0.34F && fPrevPv==0.0F && fPitch>100.0F) ||
; 209  :        (Z02Zmax<0.043F  && Zlf2Zhf<2.1F  && M<0.58F && fPrevPv==0.0F && fPitch>110.0F))

  00341	d9 45 d0	 fld	 DWORD PTR _Z02Zmax$[ebp]
  00344	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@38d1b717
  0034a	df e0		 fnstsw	 ax
  0034c	f6 c4 05	 test	 ah, 5
  0034f	0f 8b 3c 02 00
	00		 jnp	 $L1374
  00355	d9 45 d0	 fld	 DWORD PTR _Z02Zmax$[ebp]
  00358	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3a03126f
  0035e	df e0		 fnstsw	 ax
  00360	f6 c4 05	 test	 ah, 5
  00363	7a 14		 jp	 SHORT $L1375
  00365	d9 45 c4	 fld	 DWORD PTR _Zlf2Zhf$[ebp]
  00368	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@43160000
  0036e	df e0		 fnstsw	 ax
  00370	f6 c4 05	 test	 ah, 5
  00373	0f 8b 18 02 00
	00		 jnp	 $L1374
$L1375:
  00379	d9 45 d0	 fld	 DWORD PTR _Z02Zmax$[ebp]
  0037c	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3a9d4952
  00382	df e0		 fnstsw	 ax
  00384	f6 c4 05	 test	 ah, 5
  00387	7a 14		 jp	 SHORT $L1376
  00389	d9 45 c4	 fld	 DWORD PTR _Zlf2Zhf$[ebp]
  0038c	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41a00000
  00392	df e0		 fnstsw	 ax
  00394	f6 c4 05	 test	 ah, 5
  00397	0f 8b f4 01 00
	00		 jnp	 $L1374
$L1376:
  0039d	d9 45 d0	 fld	 DWORD PTR _Z02Zmax$[ebp]
  003a0	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3cac0831
  003a6	df e0		 fnstsw	 ax
  003a8	f6 c4 05	 test	 ah, 5
  003ab	7a 34		 jp	 SHORT $L1377
  003ad	d9 45 c4	 fld	 DWORD PTR _Zlf2Zhf$[ebp]
  003b0	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3fa28f5c
  003b6	df e0		 fnstsw	 ax
  003b8	f6 c4 05	 test	 ah, 5
  003bb	7a 24		 jp	 SHORT $L1377
  003bd	d9 45 ec	 fld	 DWORD PTR _M$[ebp]
  003c0	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3eb33333
  003c6	df e0		 fnstsw	 ax
  003c8	f6 c4 05	 test	 ah, 5
  003cb	7a 14		 jp	 SHORT $L1377
  003cd	d9 45 fc	 fld	 DWORD PTR _fPrevPv$[ebp]
  003d0	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  003d6	df e0		 fnstsw	 ax
  003d8	f6 c4 44	 test	 ah, 68			; 00000044H
  003db	0f 8b b0 01 00
	00		 jnp	 $L1374
$L1377:
  003e1	d9 45 d0	 fld	 DWORD PTR _Z02Zmax$[ebp]
  003e4	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3ca3d70a
  003ea	df e0		 fnstsw	 ax
  003ec	f6 c4 05	 test	 ah, 5
  003ef	7a 34		 jp	 SHORT $L1378
  003f1	d9 45 c4	 fld	 DWORD PTR _Zlf2Zhf$[ebp]
  003f4	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f90a3d7
  003fa	df e0		 fnstsw	 ax
  003fc	f6 c4 05	 test	 ah, 5
  003ff	7a 24		 jp	 SHORT $L1378
  00401	d9 45 ec	 fld	 DWORD PTR _M$[ebp]
  00404	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3e6147ae
  0040a	df e0		 fnstsw	 ax
  0040c	f6 c4 05	 test	 ah, 5
  0040f	7a 14		 jp	 SHORT $L1378
  00411	d9 45 fc	 fld	 DWORD PTR _fPrevPv$[ebp]
  00414	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0041a	df e0		 fnstsw	 ax
  0041c	f6 c4 44	 test	 ah, 68			; 00000044H
  0041f	0f 8b 6c 01 00
	00		 jnp	 $L1374
$L1378:
  00425	d9 45 d0	 fld	 DWORD PTR _Z02Zmax$[ebp]
  00428	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3ca3d70a
  0042e	df e0		 fnstsw	 ax
  00430	f6 c4 05	 test	 ah, 5
  00433	7a 34		 jp	 SHORT $L1379
  00435	d9 45 c4	 fld	 DWORD PTR _Zlf2Zhf$[ebp]
  00438	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f90a3d7
  0043e	df e0		 fnstsw	 ax
  00440	f6 c4 05	 test	 ah, 5
  00443	7a 24		 jp	 SHORT $L1379
  00445	d9 45 ec	 fld	 DWORD PTR _M$[ebp]
  00448	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3e8f5c29
  0044e	df e0		 fnstsw	 ax
  00450	f6 c4 05	 test	 ah, 5
  00453	7a 14		 jp	 SHORT $L1379
  00455	d9 45 fc	 fld	 DWORD PTR _fPrevPv$[ebp]
  00458	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3df5c28f
  0045e	df e0		 fnstsw	 ax
  00460	f6 c4 05	 test	 ah, 5
  00463	0f 8b 28 01 00
	00		 jnp	 $L1374
$L1379:
  00469	d9 45 d0	 fld	 DWORD PTR _Z02Zmax$[ebp]
  0046c	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3cbc6a7f
  00472	df e0		 fnstsw	 ax
  00474	f6 c4 05	 test	 ah, 5
  00477	7a 34		 jp	 SHORT $L1380
  00479	d9 45 c4	 fld	 DWORD PTR _Zlf2Zhf$[ebp]
  0047c	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f800000
  00482	df e0		 fnstsw	 ax
  00484	f6 c4 05	 test	 ah, 5
  00487	7a 24		 jp	 SHORT $L1380
  00489	d9 45 ec	 fld	 DWORD PTR _M$[ebp]
  0048c	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3e428f5c
  00492	df e0		 fnstsw	 ax
  00494	f6 c4 05	 test	 ah, 5
  00497	7a 14		 jp	 SHORT $L1380
  00499	d9 45 fc	 fld	 DWORD PTR _fPrevPv$[ebp]
  0049c	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3df5c28f
  004a2	df e0		 fnstsw	 ax
  004a4	f6 c4 05	 test	 ah, 5
  004a7	0f 8b e4 00 00
	00		 jnp	 $L1374
$L1380:
  004ad	d9 45 d0	 fld	 DWORD PTR _Z02Zmax$[ebp]
  004b0	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3d27ef9e
  004b6	df e0		 fnstsw	 ax
  004b8	f6 c4 05	 test	 ah, 5
  004bb	7a 34		 jp	 SHORT $L1381
  004bd	d9 45 c4	 fld	 DWORD PTR _Zlf2Zhf$[ebp]
  004c0	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3e99999a
  004c6	df e0		 fnstsw	 ax
  004c8	f6 c4 05	 test	 ah, 5
  004cb	7a 24		 jp	 SHORT $L1381
  004cd	d9 45 ec	 fld	 DWORD PTR _M$[ebp]
  004d0	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3e19999a
  004d6	df e0		 fnstsw	 ax
  004d8	f6 c4 05	 test	 ah, 5
  004db	7a 14		 jp	 SHORT $L1381
  004dd	d9 45 fc	 fld	 DWORD PTR _fPrevPv$[ebp]
  004e0	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  004e6	df e0		 fnstsw	 ax
  004e8	f6 c4 44	 test	 ah, 68			; 00000044H
  004eb	0f 8b a0 00 00
	00		 jnp	 $L1374
$L1381:
  004f1	d9 45 d0	 fld	 DWORD PTR _Z02Zmax$[ebp]
  004f4	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3deb851f
  004fa	df e0		 fnstsw	 ax
  004fc	f6 c4 05	 test	 ah, 5
  004ff	7a 40		 jp	 SHORT $L1382
  00501	d9 45 c4	 fld	 DWORD PTR _Zlf2Zhf$[ebp]
  00504	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f1eb852
  0050a	df e0		 fnstsw	 ax
  0050c	f6 c4 05	 test	 ah, 5
  0050f	7a 30		 jp	 SHORT $L1382
  00511	d9 45 ec	 fld	 DWORD PTR _M$[ebp]
  00514	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3eae147b
  0051a	df e0		 fnstsw	 ax
  0051c	f6 c4 05	 test	 ah, 5
  0051f	7a 20		 jp	 SHORT $L1382
  00521	d9 45 fc	 fld	 DWORD PTR _fPrevPv$[ebp]
  00524	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0052a	df e0		 fnstsw	 ax
  0052c	f6 c4 44	 test	 ah, 68			; 00000044H
  0052f	7a 10		 jp	 SHORT $L1382
  00531	d9 45 08	 fld	 DWORD PTR _fPitch$[ebp]
  00534	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@42c80000
  0053a	df e0		 fnstsw	 ax
  0053c	f6 c4 41	 test	 ah, 65			; 00000041H
  0053f	74 50		 je	 SHORT $L1374
$L1382:
  00541	d9 45 d0	 fld	 DWORD PTR _Z02Zmax$[ebp]
  00544	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3d3020c5
  0054a	df e0		 fnstsw	 ax
  0054c	f6 c4 05	 test	 ah, 5
  0054f	7a 47		 jp	 SHORT $L1373
  00551	d9 45 c4	 fld	 DWORD PTR _Zlf2Zhf$[ebp]
  00554	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@40066666
  0055a	df e0		 fnstsw	 ax
  0055c	f6 c4 05	 test	 ah, 5
  0055f	7a 37		 jp	 SHORT $L1373
  00561	d9 45 ec	 fld	 DWORD PTR _M$[ebp]
  00564	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f147ae1
  0056a	df e0		 fnstsw	 ax
  0056c	f6 c4 05	 test	 ah, 5
  0056f	7a 27		 jp	 SHORT $L1373
  00571	d9 45 fc	 fld	 DWORD PTR _fPrevPv$[ebp]
  00574	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0057a	df e0		 fnstsw	 ax
  0057c	f6 c4 44	 test	 ah, 68			; 00000044H
  0057f	7a 17		 jp	 SHORT $L1373
  00581	d9 45 08	 fld	 DWORD PTR _fPitch$[ebp]
  00584	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@42dc0000
  0058a	df e0		 fnstsw	 ax
  0058c	f6 c4 41	 test	 ah, 65			; 00000041H
  0058f	75 07		 jne	 SHORT $L1373
$L1374:

; 210  :       {
; 211  : 	Pv=0.0F;

  00591	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Pv$[ebp], 0
$L1373:

; 212  :       }
; 213  : 
; 214  :     /*************************************************************
; 215  :       use voicing activity classifier to find silence frames
; 216  :       ************************************************************/
; 217  :     if (iClass == 0) 

  00598	0f b7 45 dc	 movzx	 eax, WORD PTR _iClass$[ebp]
  0059c	85 c0		 test	 eax, eax
  0059e	75 07		 jne	 SHORT $L1342

; 218  :     {
; 219  :       Pv = 0.0F;

  005a0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Pv$[ebp], 0
$L1342:

; 220  :     }
; 221  :   }
; 222  : 
; 223  : 
; 224  :   /*************************************************************
; 225  :     save all the condition.
; 226  :     ************************************************************/
; 227  :   if (Pv == 0.0) {

  005a7	d9 45 e8	 fld	 DWORD PTR _Pv$[ebp]
  005aa	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  005b0	df e0		 fnstsw	 ax
  005b2	f6 c4 44	 test	 ah, 68			; 00000044H
  005b5	7a 26		 jp	 SHORT $L1384

; 228  :     for (i = 0; i < MAXHARM; i++)

  005b7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  005be	eb 09		 jmp	 SHORT $L1385
$L1386:
  005c0	8b 4d e0	 mov	 ecx, DWORD PTR _i$[ebp]
  005c3	83 c1 01	 add	 ecx, 1
  005c6	89 4d e0	 mov	 DWORD PTR _i$[ebp], ecx
$L1385:
  005c9	83 7d e0 5a	 cmp	 DWORD PTR _i$[ebp], 90	; 0000005aH
  005cd	7d 0e		 jge	 SHORT $L1384

; 229  :       iPrevVUV[i] = 0;

  005cf	8b 55 e0	 mov	 edx, DWORD PTR _i$[ebp]
  005d2	8b 45 f0	 mov	 eax, DWORD PTR _iPrevVUV$[ebp]
  005d5	66 c7 04 50 00
	00		 mov	 WORD PTR [eax+edx*2], 0
  005db	eb e3		 jmp	 SHORT $L1386
$L1384:

; 230  :   }
; 231  : 
; 232  :   pVoicing_mblk->P_v = Pv;

  005dd	8b 4d a8	 mov	 ecx, DWORD PTR _pVoicing_mblk$[ebp]
  005e0	8b 55 e8	 mov	 edx, DWORD PTR _Pv$[ebp]
  005e3	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 233  : 
; 234  :   *pPv = Pv;

  005e6	8b 45 10	 mov	 eax, DWORD PTR _pPv$[ebp]
  005e9	8b 4d e8	 mov	 ecx, DWORD PTR _Pv$[ebp]
  005ec	89 08		 mov	 DWORD PTR [eax], ecx

; 235  : 
; 236  :   pVoicing_mblk->Zmax = fMaxEng;

  005ee	8b 55 a8	 mov	 edx, DWORD PTR _pVoicing_mblk$[ebp]
  005f1	8b 45 c8	 mov	 eax, DWORD PTR _fMaxEng$[ebp]
  005f4	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 237  : 
; 238  :   pVoicing_mblk->P_v = Pv;

  005f7	8b 4d a8	 mov	 ecx, DWORD PTR _pVoicing_mblk$[ebp]
  005fa	8b 55 e8	 mov	 edx, DWORD PTR _Pv$[ebp]
  005fd	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 239  : 
; 240  :   return 0;

  00600	66 33 c0	 xor	 ax, ax

; 241  : }

  00603	8b e5		 mov	 esp, ebp
  00605	5d		 pop	 ebp
  00606	c2 1c 00	 ret	 28			; 0000001cH
_VoxVocDecision@28 ENDP
_TEXT	ENDS
PUBLIC	_VoxInitVoicing@4
EXTRN	_calloc:NEAR
EXTRN	_free:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxInitVoicing@4
_TEXT	SEGMENT
_myVoicing_mblk$ = -4
_Voicing_mblk$ = 8
_VoxInitVoicing@4 PROC NEAR				; COMDAT

; 267  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 268  :   Voicing *myVoicing_mblk;
; 269  :   /***** temporary memories *****/
; 270  :   if(VOX_MEM_INIT(myVoicing_mblk=*Voicing_mblk,1,sizeof(Voicing))) 

  00004	6a 10		 push	 16			; 00000010H
  00006	6a 01		 push	 1
  00008	e8 00 00 00 00	 call	 _calloc
  0000d	83 c4 08	 add	 esp, 8
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _Voicing_mblk$[ebp]
  00013	89 01		 mov	 DWORD PTR [ecx], eax
  00015	8b 55 08	 mov	 edx, DWORD PTR _Voicing_mblk$[ebp]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	89 45 fc	 mov	 DWORD PTR _myVoicing_mblk$[ebp], eax
  0001d	83 7d fc 00	 cmp	 DWORD PTR _myVoicing_mblk$[ebp], 0
  00021	75 06		 jne	 SHORT $L1393

; 271  :       return 1;

  00023	66 b8 01 00	 mov	 ax, 1
  00027	eb 4f		 jmp	 SHORT $L1390
$L1393:

; 272  : 
; 273  :   if(VOX_MEM_INIT(myVoicing_mblk->prev_vuv,MAXHARM,sizeof(short))) {

  00029	6a 02		 push	 2
  0002b	6a 5a		 push	 90			; 0000005aH
  0002d	e8 00 00 00 00	 call	 _calloc
  00032	83 c4 08	 add	 esp, 8
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _myVoicing_mblk$[ebp]
  00038	89 01		 mov	 DWORD PTR [ecx], eax
  0003a	8b 55 fc	 mov	 edx, DWORD PTR _myVoicing_mblk$[ebp]
  0003d	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00040	75 1f		 jne	 SHORT $L1395

; 274  :      VOX_MEM_FREE(myVoicing_mblk);

  00042	83 7d fc 00	 cmp	 DWORD PTR _myVoicing_mblk$[ebp], 0
  00046	74 13		 je	 SHORT $L1396
  00048	8b 45 fc	 mov	 eax, DWORD PTR _myVoicing_mblk$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _free
  00051	83 c4 04	 add	 esp, 4
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _myVoicing_mblk$[ebp], 0
$L1396:

; 275  :      return 1;

  0005b	66 b8 01 00	 mov	 ax, 1
  0005f	eb 17		 jmp	 SHORT $L1390
$L1395:

; 276  :   }
; 277  : 
; 278  :   myVoicing_mblk->Zmax = 1000000.0F;    /*  was 20000.0 */

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _myVoicing_mblk$[ebp]
  00064	c7 41 04 00 24
	74 49		 mov	 DWORD PTR [ecx+4], 1232348160 ; 49742400H

; 279  :   myVoicing_mblk->P_v = 0.0F;

  0006b	8b 55 fc	 mov	 edx, DWORD PTR _myVoicing_mblk$[ebp]
  0006e	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 280  : 
; 281  :   return 0;

  00075	66 33 c0	 xor	 ax, ax
$L1390:

; 282  : 
; 283  : } /* initPDA() */

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
_VoxInitVoicing@4 ENDP
_TEXT	ENDS
PUBLIC	_VoxFreeVoicing@4
; Function compile flags: /Odt
;	COMDAT _VoxFreeVoicing@4
_TEXT	SEGMENT
_myVoicing_mblk$ = -4
_hVoicing_mblk$ = 8
_VoxFreeVoicing@4 PROC NEAR				; COMDAT

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 310  :   Voicing *myVoicing_mblk=(Voicing*)*hVoicing_mblk;

  00004	8b 45 08	 mov	 eax, DWORD PTR _hVoicing_mblk$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	89 4d fc	 mov	 DWORD PTR _myVoicing_mblk$[ebp], ecx

; 311  : 
; 312  :   if (*hVoicing_mblk) {

  0000c	8b 55 08	 mov	 edx, DWORD PTR _hVoicing_mblk$[ebp]
  0000f	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00012	74 60		 je	 SHORT $L1403

; 313  :     VOX_MEM_FREE(myVoicing_mblk->myVAD_mblk);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _myVoicing_mblk$[ebp]
  00017	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001b	74 19		 je	 SHORT $L1404
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _myVoicing_mblk$[ebp]
  00020	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 _free
  00029	83 c4 04	 add	 esp, 4
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _myVoicing_mblk$[ebp]
  0002f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$L1404:

; 314  : 
; 315  :     VOX_MEM_FREE(myVoicing_mblk->prev_vuv);

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _myVoicing_mblk$[ebp]
  00039	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0003c	74 17		 je	 SHORT $L1406
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _myVoicing_mblk$[ebp]
  00041	8b 02		 mov	 eax, DWORD PTR [edx]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _free
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _myVoicing_mblk$[ebp]
  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L1406:

; 316  : 
; 317  :     VOX_MEM_FREE(*hVoicing_mblk);

  00055	8b 55 08	 mov	 edx, DWORD PTR _hVoicing_mblk$[ebp]
  00058	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0005b	74 17		 je	 SHORT $L1403
  0005d	8b 45 08	 mov	 eax, DWORD PTR _hVoicing_mblk$[ebp]
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 _free
  00068	83 c4 04	 add	 esp, 4
  0006b	8b 55 08	 mov	 edx, DWORD PTR _hVoicing_mblk$[ebp]
  0006e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L1403:

; 318  :   }
; 319  :   return 0;

  00074	66 33 c0	 xor	 ax, ax

; 320  : 
; 321  : } /* freeVoicing() */

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
_VoxFreeVoicing@4 ENDP
_TEXT	ENDS
END
