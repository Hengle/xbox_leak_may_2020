; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\lineintp.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _linearinterp@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_linearinterp@12
EXTRN	_fLog2@4:NEAR
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\lineintp.c
;	COMDAT _linearinterp@12
_TEXT	SEGMENT
tv207 = -1356
tv175 = -1352
_k$ = -1348
_piFreqLoc$ = -1344
_pfY$ = -1340
_fScratchRam$ = -1336
_iPeaks$ = -20
_pfX$ = -16
_i$ = -12
_iTemp$ = -8
_fSeeFreq$ = -4
_fPitchDFT$ = 8
_fSeeVoc$ = 12
_iLfft2$ = 16
_linearinterp@12 PROC NEAR				; COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 05 00
	00		 sub	 esp, 1356		; 0000054cH
  00009	56		 push	 esi

; 81   :    int    i, k;
; 82   :    int    iPeaks;
; 83   :    int    iTemp;
; 84   :    int   *piFreqLoc;
; 85   :    float  fSeeFreq;
; 86   :    float *pfX;
; 87   :    float *pfY;
; 88   :    float  fScratchRam[4*NPEAKS_LINEAR+8];     /* scratch memory */
; 89   : 
; 90   :    /* Compute the number of harmonic peaks to interpolate */
; 91   :    iPeaks = (int)((iLfft2-1)/fPitchDFT);

  0000a	8b 45 10	 mov	 eax, DWORD PTR _iLfft2$[ebp]
  0000d	83 e8 01	 sub	 eax, 1
  00010	89 85 b8 fa ff
	ff		 mov	 DWORD PTR tv175[ebp], eax
  00016	db 85 b8 fa ff
	ff		 fild	 DWORD PTR tv175[ebp]
  0001c	d8 75 08	 fdiv	 DWORD PTR _fPitchDFT$[ebp]
  0001f	e8 00 00 00 00	 call	 __ftol2
  00024	89 45 ec	 mov	 DWORD PTR _iPeaks$[ebp], eax

; 92   :    iPeaks ++;                           /* count the extra peak at DC */

  00027	8b 4d ec	 mov	 ecx, DWORD PTR _iPeaks$[ebp]
  0002a	83 c1 01	 add	 ecx, 1
  0002d	89 4d ec	 mov	 DWORD PTR _iPeaks$[ebp], ecx

; 93   :    if (iPeaks > NPEAKS_LINEAR)

  00030	83 7d ec 50	 cmp	 DWORD PTR _iPeaks$[ebp], 80 ; 00000050H
  00034	7e 07		 jle	 SHORT $L967

; 94   :       iPeaks = NPEAKS_LINEAR;

  00036	c7 45 ec 50 00
	00 00		 mov	 DWORD PTR _iPeaks$[ebp], 80 ; 00000050H
$L967:

; 95   :    
; 96   :    pfY = fScratchRam;

  0003d	8d 95 c8 fa ff
	ff		 lea	 edx, DWORD PTR _fScratchRam$[ebp]
  00043	89 95 c4 fa ff
	ff		 mov	 DWORD PTR _pfY$[ebp], edx

; 97   :    pfX = fScratchRam + iPeaks + 4;

  00049	8b 45 ec	 mov	 eax, DWORD PTR _iPeaks$[ebp]
  0004c	8d 8c 85 d8 fa
	ff ff		 lea	 ecx, DWORD PTR _fScratchRam$[ebp+eax*4+16]
  00053	89 4d f0	 mov	 DWORD PTR _pfX$[ebp], ecx

; 98   :    piFreqLoc = (int *) (fScratchRam + 2*(iPeaks+4)) ;

  00056	8b 55 ec	 mov	 edx, DWORD PTR _iPeaks$[ebp]
  00059	8d 44 12 08	 lea	 eax, DWORD PTR [edx+edx+8]
  0005d	8d 8c 85 c8 fa
	ff ff		 lea	 ecx, DWORD PTR _fScratchRam$[ebp+eax*4]
  00064	89 8d c0 fa ff
	ff		 mov	 DWORD PTR _piFreqLoc$[ebp], ecx

; 99   : 
; 100  :    /* Sample the flattop envelope at the pitch harmonics */
; 101  :    fSeeFreq = 0.0F;

  0006a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fSeeFreq$[ebp], 0

; 102  :    for (i = 0; i < iPeaks; i++)

  00071	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00078	eb 09		 jmp	 SHORT $L969
$L970:
  0007a	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0007d	83 c2 01	 add	 edx, 1
  00080	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$L969:
  00083	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00086	3b 45 ec	 cmp	 eax, DWORD PTR _iPeaks$[ebp]
  00089	7d 47		 jge	 SHORT $L971

; 103  :    {
; 104  :       VoxROUND2pos( fSeeFreq, iTemp );

  0008b	d9 45 fc	 fld	 DWORD PTR _fSeeFreq$[ebp]
  0008e	db 5d f8	 fistp	 DWORD PTR _iTemp$[ebp]

; 105  :       pfY[i] = fLog2( fSeeVoc[iTemp] );

  00091	8b 4d f8	 mov	 ecx, DWORD PTR _iTemp$[ebp]
  00094	8b 55 0c	 mov	 edx, DWORD PTR _fSeeVoc$[ebp]
  00097	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _fLog2@4
  000a0	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  000a3	8b 95 c4 fa ff
	ff		 mov	 edx, DWORD PTR _pfY$[ebp]
  000a9	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 106  :       piFreqLoc[i] = iTemp;

  000ac	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000af	8b 8d c0 fa ff
	ff		 mov	 ecx, DWORD PTR _piFreqLoc$[ebp]
  000b5	8b 55 f8	 mov	 edx, DWORD PTR _iTemp$[ebp]
  000b8	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 107  :       pfX[i] = fSeeFreq;

  000bb	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000be	8b 4d f0	 mov	 ecx, DWORD PTR _pfX$[ebp]
  000c1	8b 55 fc	 mov	 edx, DWORD PTR _fSeeFreq$[ebp]
  000c4	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 108  :       fSeeFreq += fPitchDFT;

  000c7	d9 45 fc	 fld	 DWORD PTR _fSeeFreq$[ebp]
  000ca	d8 45 08	 fadd	 DWORD PTR _fPitchDFT$[ebp]
  000cd	d9 5d fc	 fstp	 DWORD PTR _fSeeFreq$[ebp]

; 109  :    }

  000d0	eb a8		 jmp	 SHORT $L970
$L971:

; 110  : 
; 111  :    pfY[iPeaks]=fLog2(fSeeVoc[iLfft2-1]);

  000d2	8b 45 10	 mov	 eax, DWORD PTR _iLfft2$[ebp]
  000d5	8b 4d 0c	 mov	 ecx, DWORD PTR _fSeeVoc$[ebp]
  000d8	8b 54 81 fc	 mov	 edx, DWORD PTR [ecx+eax*4-4]
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 _fLog2@4
  000e2	8b 45 ec	 mov	 eax, DWORD PTR _iPeaks$[ebp]
  000e5	8b 8d c4 fa ff
	ff		 mov	 ecx, DWORD PTR _pfY$[ebp]
  000eb	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 112  :    piFreqLoc[iPeaks] =iLfft2;

  000ee	8b 55 ec	 mov	 edx, DWORD PTR _iPeaks$[ebp]
  000f1	8b 85 c0 fa ff
	ff		 mov	 eax, DWORD PTR _piFreqLoc$[ebp]
  000f7	8b 4d 10	 mov	 ecx, DWORD PTR _iLfft2$[ebp]
  000fa	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 113  :    pfX[iPeaks]=(float) (iLfft2-1);

  000fd	8b 55 10	 mov	 edx, DWORD PTR _iLfft2$[ebp]
  00100	83 ea 01	 sub	 edx, 1
  00103	89 95 b4 fa ff
	ff		 mov	 DWORD PTR tv207[ebp], edx
  00109	db 85 b4 fa ff
	ff		 fild	 DWORD PTR tv207[ebp]
  0010f	8b 45 ec	 mov	 eax, DWORD PTR _iPeaks$[ebp]
  00112	8b 4d f0	 mov	 ecx, DWORD PTR _pfX$[ebp]
  00115	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 114  : 
; 115  :    for(i=1; i<iPeaks+1;i++)

  00118	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0011f	eb 09		 jmp	 SHORT $L973
$L974:
  00121	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00124	83 c2 01	 add	 edx, 1
  00127	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$L973:
  0012a	8b 45 ec	 mov	 eax, DWORD PTR _iPeaks$[ebp]
  0012d	83 c0 01	 add	 eax, 1
  00130	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  00133	0f 8d 98 00 00
	00		 jge	 $L956

; 116  :    {
; 117  :    for(k=piFreqLoc[i-1]; k<piFreqLoc[i]; k++)

  00139	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0013c	8b 95 c0 fa ff
	ff		 mov	 edx, DWORD PTR _piFreqLoc$[ebp]
  00142	8b 44 8a fc	 mov	 eax, DWORD PTR [edx+ecx*4-4]
  00146	89 85 bc fa ff
	ff		 mov	 DWORD PTR _k$[ebp], eax
  0014c	eb 0f		 jmp	 SHORT $L976
$L977:
  0014e	8b 8d bc fa ff
	ff		 mov	 ecx, DWORD PTR _k$[ebp]
  00154	83 c1 01	 add	 ecx, 1
  00157	89 8d bc fa ff
	ff		 mov	 DWORD PTR _k$[ebp], ecx
$L976:
  0015d	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00160	8b 85 c0 fa ff
	ff		 mov	 eax, DWORD PTR _piFreqLoc$[ebp]
  00166	8b 8d bc fa ff
	ff		 mov	 ecx, DWORD PTR _k$[ebp]
  0016c	3b 0c 90	 cmp	 ecx, DWORD PTR [eax+edx*4]
  0016f	7d 5b		 jge	 SHORT $L978

; 118  :    fSeeVoc[k]=pfY[i-1]+(pfY[i]-pfY[i-1])*(k-pfX[i-1])/(pfX[i]-pfX[i-1]);

  00171	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00174	8b 85 c4 fa ff
	ff		 mov	 eax, DWORD PTR _pfY$[ebp]
  0017a	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0017d	8b b5 c4 fa ff
	ff		 mov	 esi, DWORD PTR _pfY$[ebp]
  00183	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00186	d8 64 8e fc	 fsub	 DWORD PTR [esi+ecx*4-4]
  0018a	db 85 bc fa ff
	ff		 fild	 DWORD PTR _k$[ebp]
  00190	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00193	8b 45 f0	 mov	 eax, DWORD PTR _pfX$[ebp]
  00196	d8 64 90 fc	 fsub	 DWORD PTR [eax+edx*4-4]
  0019a	de c9		 fmulp	 ST(1), ST(0)
  0019c	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0019f	8b 55 f0	 mov	 edx, DWORD PTR _pfX$[ebp]
  001a2	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001a5	8b 75 f0	 mov	 esi, DWORD PTR _pfX$[ebp]
  001a8	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  001ab	d8 64 86 fc	 fsub	 DWORD PTR [esi+eax*4-4]
  001af	de f9		 fdivp	 ST(1), ST(0)
  001b1	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  001b4	8b 95 c4 fa ff
	ff		 mov	 edx, DWORD PTR _pfY$[ebp]
  001ba	d8 44 8a fc	 fadd	 DWORD PTR [edx+ecx*4-4]
  001be	8b 85 bc fa ff
	ff		 mov	 eax, DWORD PTR _k$[ebp]
  001c4	8b 4d 0c	 mov	 ecx, DWORD PTR _fSeeVoc$[ebp]
  001c7	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]
  001ca	eb 82		 jmp	 SHORT $L977
$L978:

; 119  :    }

  001cc	e9 50 ff ff ff	 jmp	 $L974
$L956:

; 120  :  }

  001d1	5e		 pop	 esi
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c2 0c 00	 ret	 12			; 0000000cH
_linearinterp@12 ENDP
_TEXT	ENDS
END
