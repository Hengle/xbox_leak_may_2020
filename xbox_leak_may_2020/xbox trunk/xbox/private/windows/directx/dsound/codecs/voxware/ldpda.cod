; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\ldpda.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@HAONGGNP@pfSW?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@NDAOMJBD@hLD_PDA_mblk?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@FCBICEDO@fMaxPower?5?$DO?$DN?50?40F?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@PFNDEBJA@pfPitchTable?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@GBGKNCGC@piSize?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GGOKBJCK@pfPower?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@EJJAGIDA@pfPv?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxLDPDA@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _GetPitchTable@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxInitLDPDA@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxFreeLDPDA@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FindBaseBand@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _FindBestCandidates@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _UpdateLDPDA_MBlk@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
PUBLIC	_CpfPitchTable
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_CpfPitchTable DD 041000000r			; 8
	DD	041050000r			; 8.3125
	DD	0410a0000r			; 8.625
	DD	041100000r			; 9
	DD	041160000r			; 9.375
	DD	0411d0000r			; 9.8125
	DD	041240000r			; 10.25
	DD	0412c0000r			; 10.75
	DD	041340000r			; 11.25
	DD	0413e0000r			; 11.875
	DD	041490000r			; 12.5625
	DD	041550000r			; 13.3125
	DD	0415b0000r			; 13.6875
	DD	041620000r			; 14.125
	DD	0416a0000r			; 14.625
	DD	041720000r			; 15.125
	DD	0417a0000r			; 15.625
	DD	041818000r			; 16.1875
	DD	041868000r			; 16.8125
	DD	0418c0000r			; 17.5
	DD	041918000r			; 18.1875
	DD	041980000r			; 19
	DD	0419e8000r			; 19.8125
	DD	041a38000r			; 20.4375
	DD	041a88000r			; 21.0625
	DD	041ae0000r			; 21.75
	DD	041b40000r			; 22.5
	DD	041ba0000r			; 23.25
	DD	041c10000r			; 24.125
	DD	041c80000r			; 25
	DD	041d00000r			; 26
	DD	041d60000r			; 26.75
	DD	041dd0000r			; 27.625
	DD	041e40000r			; 28.5
	DD	041eb8000r			; 29.4375
	DD	041f38000r			; 30.4375
	DD	041fc0000r			; 31.5
	DD	042028000r			; 32.625
	DD	042068000r			; 33.625
	DD	0420ac000r			; 34.6875
	DD	0420f4000r			; 35.8125
	DD	042140000r			; 37
	DD	042190000r			; 38.25
	DD	0421e8000r			; 39.625
	DD	042234000r			; 40.8125
	DD	042288000r			; 42.125
	DD	0422e0000r			; 43.5
	DD	04233c000r			; 44.9375
	DD	0423a4000r			; 46.5625
	DD	0423fc000r			; 47.9375
	DD	042460000r			; 49.5
	DD	0424c8000r			; 51.125
	DD	042538000r			; 52.875
	DD	04259c000r			; 54.4375
	DD	04260c000r			; 56.1875
	DD	042680000r			; 58
	DD	0426fc000r			; 59.9375
	DD	042774000r			; 61.8125
	DD	0427f0000r			; 63.75
	DD	04283c000r			; 65.875
	DD	04287c000r			; 67.875
	DD	0428c0000r			; 70
	DD	04290a000r			; 72.3125
	DD	042950000r			; 74.5
	DD	04299a000r			; 76.8125
	DD	0429ea000r			; 79.3125
	DD	042a38000r			; 81.75
	DD	042a8a000r			; 84.3125
	DD	042adc000r			; 86.875
	DD	042b32000r			; 89.5625
	DD	042b8c000r			; 92.375
	DD	042be8000r			; 95.25
	DD	042c48000r			; 98.25
	DD	042ca6000r			; 101.188
	DD	042d0c000r			; 104.375
	DD	042d70000r			; 107.5
	DD	042ddc000r			; 110.875
	DD	042e46000r			; 114.188
	DD	042eb8000r			; 117.75
	DD	042f2a000r			; 121.313
	DD	042fa4000r			; 125.125
	DD	04300f000r			; 128.938
	DD	043050000r			; 133
	DD	043091000r			; 137.063
	DD	0430d4000r			; 141.25
	DD	04311a000r			; 145.625
	DD	043161000r			; 150.063
	DD	0431aa000r			; 154.625
	DD	0431f7000r			; 159.438
?PV_TH@?1??FindBestCandidates@@9@9 DD 03f400000r ; 0.75	; `FindBestCandidates'::`2'::PV_TH
	DD	03f8ccccdr			; 1.1
	DD	03f6147aer			; 0.88
CONST	ENDS
PUBLIC	_VoxLDPDA@8
PUBLIC	??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0N@HAONGGNP@pfSW?5?$CB?$DN?5NULL?$AA@	; `string'
PUBLIC	??_C@_0BF@NDAOMJBD@hLD_PDA_mblk?5?$CB?$DN?5NULL?$AA@ ; `string'
PUBLIC	??_C@_0BC@FCBICEDO@fMaxPower?5?$DO?$DN?50?40F?$AA@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
EXTRN	__assert:NEAR
EXTRN	_FindMaxValueFlt@16:NEAR
EXTRN	_MagSqIL@12:NEAR
EXTRN	_SelectPeaks@16:NEAR
EXTRN	_powerpoly_125@4:NEAR
EXTRN	_SelectPitchCandidates@32:NEAR
EXTRN	_VoicingLD@12:NEAR
EXTRN	_FindBand4VoicLD@8:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\ldpda.c
CONST	SEGMENT
??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\ldpda.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HAONGGNP@pfSW?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0N@HAONGGNP@pfSW?5?$CB?$DN?5NULL?$AA@ DB 'pfSW != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NDAOMJBD@hLD_PDA_mblk?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BF@NDAOMJBD@hLD_PDA_mblk?5?$CB?$DN?5NULL?$AA@ DB 'hLD_PDA_mblk != '
	DB	'NULL', 00H					; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0BC@FCBICEDO@fMaxPower?5?$DO?$DN?50?40F?$AA@
CONST	SEGMENT
??_C@_0BC@FCBICEDO@fMaxPower?5?$DO?$DN?50?40F?$AA@ DB 'fMaxPower >= 0.0F', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxLDPDA@8
_TEXT	SEGMENT
_pfPitchCand$ = -664
_fPitch$ = -652
_iNumCand$ = -648
_pfCandCost$ = -644
_iBaseBand$ = -632
_pfPv$ = -628
_piPeakFreq$ = -616
_pfPower$ = -424
_fMaxPower$ = -12
_i$ = -8
_iHP_Index$ = -4
_pfSW$ = 8
_hLD_PDA_mblk$ = 12
_VoxLDPDA@8 PROC NEAR					; COMDAT

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 02 00
	00		 sub	 esp, 664		; 00000298H

; 123  :   /***** STACK memory ******/
; 124  : STACK_INIT
; 125  :   float pfPower[FAR_EXTEND_CUT_LC];
; 126  :   float pfCandCost[NCAND];
; 127  :   float pfPitchCand[NCAND];
; 128  :   float pfPv[NCAND];
; 129  :   int   piPeakFreq[MAX_NPEAKS];
; 130  : STACK_INIT_END
; 131  : 
; 132  :   STACK_ATTACH(float *, pfPower)
; 133  :   STACK_ATTACH(float *, pfCandCost)
; 134  :   STACK_ATTACH(float *, pfPitchCand)
; 135  :   STACK_ATTACH(float *, pfPv)
; 136  :   STACK_ATTACH(int *, piPeakFreq)
; 137  : 
; 138  :   /***** regular varibles *****/
; 139  :   int iBaseBand;    
; 140  :   float fMaxPower;  
; 141  :   int i;
; 142  :   int iNumCand;
; 143  :   int iHP_Index;
; 144  :   float fPitch;
; 145  : 
; 146  : STACK_START
; 147  :   /*-------------------------------------------
; 148  :     (0) Check input arrays.
; 149  :     -------------------------------------------*/
; 150  :   assert(pfSW != NULL);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pfSW$[ebp], 0
  0000d	75 17		 jne	 SHORT $L1506
  0000f	68 96 00 00 00	 push	 150			; 00000096H
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@HAONGGNP@pfSW?5?$CB?$DN?5NULL?$AA@
  0001e	e8 00 00 00 00	 call	 __assert
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1506:

; 151  :   assert(hLD_PDA_mblk != NULL);

  00026	83 7d 0c 00	 cmp	 DWORD PTR _hLD_PDA_mblk$[ebp], 0
  0002a	75 17		 jne	 SHORT $L1507
  0002c	68 97 00 00 00	 push	 151			; 00000097H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@NDAOMJBD@hLD_PDA_mblk?5?$CB?$DN?5NULL?$AA@
  0003b	e8 00 00 00 00	 call	 __assert
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1507:

; 152  : 
; 153  :   /*----------------------------------------------------------------------
; 154  :     (1) compute the power spectrum of the STFT of the signal.
; 155  :     Then find the maximum value.
; 156  :     ----------------------------------------------------------------------*/
; 157  :   MagSqIL(pfSW, FAR_EXTEND_CUT_LC, pfPower);

  00043	8d 95 58 fe ff
	ff		 lea	 edx, DWORD PTR _pfPower$[ebp]
  00049	52		 push	 edx
  0004a	6a 66		 push	 102			; 00000066H
  0004c	8b 45 08	 mov	 eax, DWORD PTR _pfSW$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _MagSqIL@12

; 158  : 
; 159  :   FindMaxValueFlt(pfPower, FAR_EXTEND_CUT_LC, &i, &fMaxPower);

  00055	8d 4d f4	 lea	 ecx, DWORD PTR _fMaxPower$[ebp]
  00058	51		 push	 ecx
  00059	8d 55 f8	 lea	 edx, DWORD PTR _i$[ebp]
  0005c	52		 push	 edx
  0005d	6a 66		 push	 102			; 00000066H
  0005f	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _pfPower$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _FindMaxValueFlt@16

; 160  :   assert(fMaxPower >= 0.0F);

  0006b	d9 45 f4	 fld	 DWORD PTR _fMaxPower$[ebp]
  0006e	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 01	 test	 ah, 1
  00079	74 17		 je	 SHORT $L1508
  0007b	68 a0 00 00 00	 push	 160			; 000000a0H
  00080	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@
  00085	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@FCBICEDO@fMaxPower?5?$DO?$DN?50?40F?$AA@
  0008a	e8 00 00 00 00	 call	 __assert
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1508:

; 161  : 
; 162  : 
; 163  :   /*----------------------------------------------------------------------
; 164  :     (2) Choose the baseband. Then select the peaks for pitch estimation.
; 165  :     ----------------------------------------------------------------------*/
; 166  :   iBaseBand = FindBaseBand(pfPower, EXTEND_CUT_LC);

  00092	6a 60		 push	 96			; 00000060H
  00094	8d 95 58 fe ff
	ff		 lea	 edx, DWORD PTR _pfPower$[ebp]
  0009a	52		 push	 edx
  0009b	e8 00 00 00 00	 call	 _FindBaseBand@8
  000a0	89 85 88 fd ff
	ff		 mov	 DWORD PTR _iBaseBand$[ebp], eax

; 167  :   
; 168  :   SelectPeaks(STACK_S pfPower, iBaseBand, piPeakFreq, fMaxPower); 

  000a6	8b 45 f4	 mov	 eax, DWORD PTR _fMaxPower$[ebp]
  000a9	50		 push	 eax
  000aa	8d 8d 98 fd ff
	ff		 lea	 ecx, DWORD PTR _piPeakFreq$[ebp]
  000b0	51		 push	 ecx
  000b1	8b 95 88 fd ff
	ff		 mov	 edx, DWORD PTR _iBaseBand$[ebp]
  000b7	52		 push	 edx
  000b8	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _pfPower$[ebp]
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _SelectPeaks@16

; 169  : 
; 170  : 
; 171  :   /*----------------------------------------------------------------------
; 172  :     (3) Normalize the power spectrum between 0 and 1. Then compress it to 
; 173  :     get the magnitude spectrum by x^(1/8).
; 174  :     ----------------------------------------------------------------------*/
; 175  :   if (fMaxPower > 0.0F)

  000c4	d9 45 f4	 fld	 DWORD PTR _fMaxPower$[ebp]
  000c7	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  000cd	df e0		 fnstsw	 ax
  000cf	f6 c4 41	 test	 ah, 65			; 00000041H
  000d2	75 0c		 jne	 SHORT $L1396

; 176  :     fMaxPower = 1.0F/fMaxPower;

  000d4	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  000da	d8 75 f4	 fdiv	 DWORD PTR _fMaxPower$[ebp]
  000dd	d9 5d f4	 fstp	 DWORD PTR _fMaxPower$[ebp]
$L1396:

; 177  : 
; 178  :   for (i = iBaseBand-1; i >= 0; i--)

  000e0	8b 8d 88 fd ff
	ff		 mov	 ecx, DWORD PTR _iBaseBand$[ebp]
  000e6	83 e9 01	 sub	 ecx, 1
  000e9	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
  000ec	eb 09		 jmp	 SHORT $L1397
$L1398:
  000ee	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000f1	83 ea 01	 sub	 edx, 1
  000f4	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L1397:
  000f7	83 7d f8 00	 cmp	 DWORD PTR _i$[ebp], 0
  000fb	7c 33		 jl	 SHORT $L1399

; 179  :     {
; 180  :       pfPower[i] *= fMaxPower;

  000fd	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00100	d9 45 f4	 fld	 DWORD PTR _fMaxPower$[ebp]
  00103	d8 8c 85 58 fe
	ff ff		 fmul	 DWORD PTR _pfPower$[ebp+eax*4]
  0010a	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0010d	d9 9c 8d 58 fe
	ff ff		 fstp	 DWORD PTR _pfPower$[ebp+ecx*4]

; 181  :       pfPower[i] = powerpoly_125(pfPower[i]);

  00114	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00117	8b 84 95 58 fe
	ff ff		 mov	 eax, DWORD PTR _pfPower$[ebp+edx*4]
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 _powerpoly_125@4
  00124	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00127	d9 9c 8d 58 fe
	ff ff		 fstp	 DWORD PTR _pfPower$[ebp+ecx*4]

; 182  :    }

  0012e	eb be		 jmp	 SHORT $L1398
$L1399:

; 183  : 
; 184  :   /*----------------------------------------------------------------------
; 185  :     (4) Select the good candidates and do pitch refinement.
; 186  :     ----------------------------------------------------------------------*/
; 187  :   iNumCand = SelectPitchCandidates(STACK_S pfPower, iBaseBand, piPeakFreq, 
; 188  :                                    pfPitchCand, pfCandCost, 
; 189  :                                    ((LD_PDA_MBlk *)hLD_PDA_mblk)->fLastP0, 
; 190  :                                    ((LD_PDA_MBlk *)hLD_PDA_mblk)->fLastCost,
; 191  :                                    &iHP_Index);

  00130	8d 55 fc	 lea	 edx, DWORD PTR _iHP_Index$[ebp]
  00133	52		 push	 edx
  00134	8b 45 0c	 mov	 eax, DWORD PTR _hLD_PDA_mblk$[ebp]
  00137	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0013a	51		 push	 ecx
  0013b	8b 55 0c	 mov	 edx, DWORD PTR _hLD_PDA_mblk$[ebp]
  0013e	8b 02		 mov	 eax, DWORD PTR [edx]
  00140	50		 push	 eax
  00141	8d 8d 7c fd ff
	ff		 lea	 ecx, DWORD PTR _pfCandCost$[ebp]
  00147	51		 push	 ecx
  00148	8d 95 68 fd ff
	ff		 lea	 edx, DWORD PTR _pfPitchCand$[ebp]
  0014e	52		 push	 edx
  0014f	8d 85 98 fd ff
	ff		 lea	 eax, DWORD PTR _piPeakFreq$[ebp]
  00155	50		 push	 eax
  00156	8b 8d 88 fd ff
	ff		 mov	 ecx, DWORD PTR _iBaseBand$[ebp]
  0015c	51		 push	 ecx
  0015d	8d 95 58 fe ff
	ff		 lea	 edx, DWORD PTR _pfPower$[ebp]
  00163	52		 push	 edx
  00164	e8 00 00 00 00	 call	 _SelectPitchCandidates@32
  00169	89 85 78 fd ff
	ff		 mov	 DWORD PTR _iNumCand$[ebp], eax

; 192  : 
; 193  :   
; 194  :   /*----------------------------------------------------------------------
; 195  :     (5) Find the estimated pitch from at most 3 candidates: 
; 196  :     pfPitchCand[0], pfPitchCand[iHP_Index], pfPitchCand[iNumCand-1]
; 197  :     using frequency-domain analysis-by-synthesis.
; 198  :     ----------------------------------------------------------------------*/
; 199  :   /* Re-calculate iBaseBand for voicingLD calculation. */
; 200  :   iBaseBand = FindBand4VoicLD(iBaseBand, pfPitchCand[iNumCand-1]);

  0016f	8b 85 78 fd ff
	ff		 mov	 eax, DWORD PTR _iNumCand$[ebp]
  00175	8b 8c 85 64 fd
	ff ff		 mov	 ecx, DWORD PTR _pfPitchCand$[ebp+eax*4-4]
  0017c	51		 push	 ecx
  0017d	8b 95 88 fd ff
	ff		 mov	 edx, DWORD PTR _iBaseBand$[ebp]
  00183	52		 push	 edx
  00184	e8 00 00 00 00	 call	 _FindBand4VoicLD@8
  00189	89 85 88 fd ff
	ff		 mov	 DWORD PTR _iBaseBand$[ebp], eax

; 201  :     
; 202  :   /* do freqeuncy-domain analysis-by-synthesis voicing calculation */
; 203  :   for (i = iNumCand-1; i >= 0; i--) 

  0018f	8b 85 78 fd ff
	ff		 mov	 eax, DWORD PTR _iNumCand$[ebp]
  00195	83 e8 01	 sub	 eax, 1
  00198	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  0019b	eb 09		 jmp	 SHORT $L1402
$L1403:
  0019d	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001a0	83 e9 01	 sub	 ecx, 1
  001a3	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L1402:
  001a6	83 7d f8 00	 cmp	 DWORD PTR _i$[ebp], 0
  001aa	7c 27		 jl	 SHORT $L1404

; 204  :     pfPv[i] = VoicingLD(pfPitchCand[i], pfSW, iBaseBand);

  001ac	8b 95 88 fd ff
	ff		 mov	 edx, DWORD PTR _iBaseBand$[ebp]
  001b2	52		 push	 edx
  001b3	8b 45 08	 mov	 eax, DWORD PTR _pfSW$[ebp]
  001b6	50		 push	 eax
  001b7	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001ba	8b 94 8d 68 fd
	ff ff		 mov	 edx, DWORD PTR _pfPitchCand$[ebp+ecx*4]
  001c1	52		 push	 edx
  001c2	e8 00 00 00 00	 call	 _VoicingLD@12
  001c7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001ca	d9 9c 85 8c fd
	ff ff		 fstp	 DWORD PTR _pfPv$[ebp+eax*4]
  001d1	eb ca		 jmp	 SHORT $L1403
$L1404:

; 205  : 
; 206  :   /* do the final decision and pitch is pfPitchCand[iHP_Index] */
; 207  :   iHP_Index = FindBestCandidates(pfPv, iNumCand, iHP_Index);

  001d3	8b 4d fc	 mov	 ecx, DWORD PTR _iHP_Index$[ebp]
  001d6	51		 push	 ecx
  001d7	8b 95 78 fd ff
	ff		 mov	 edx, DWORD PTR _iNumCand$[ebp]
  001dd	52		 push	 edx
  001de	8d 85 8c fd ff
	ff		 lea	 eax, DWORD PTR _pfPv$[ebp]
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 _FindBestCandidates@12
  001ea	89 45 fc	 mov	 DWORD PTR _iHP_Index$[ebp], eax

; 208  : 
; 209  :   fPitch = pfPitchCand[iHP_Index];

  001ed	8b 4d fc	 mov	 ecx, DWORD PTR _iHP_Index$[ebp]
  001f0	8b 94 8d 68 fd
	ff ff		 mov	 edx, DWORD PTR _pfPitchCand$[ebp+ecx*4]
  001f7	89 95 74 fd ff
	ff		 mov	 DWORD PTR _fPitch$[ebp], edx

; 210  :   
; 211  :   /*----------------------------------------------------------------------
; 212  :     (6) update the information.
; 213  :     ----------------------------------------------------------------------*/
; 214  :   UpdateLDPDA_MBlk(hLD_PDA_mblk, fPitch, pfCandCost[iHP_Index]);

  001fd	8b 45 fc	 mov	 eax, DWORD PTR _iHP_Index$[ebp]
  00200	8b 8c 85 7c fd
	ff ff		 mov	 ecx, DWORD PTR _pfCandCost$[ebp+eax*4]
  00207	51		 push	 ecx
  00208	8b 95 74 fd ff
	ff		 mov	 edx, DWORD PTR _fPitch$[ebp]
  0020e	52		 push	 edx
  0020f	8b 45 0c	 mov	 eax, DWORD PTR _hLD_PDA_mblk$[ebp]
  00212	50		 push	 eax
  00213	e8 00 00 00 00	 call	 _UpdateLDPDA_MBlk@12

; 215  : 
; 216  : STACK_END
; 217  : 
; 218  :   return fPitch;  

  00218	d9 85 74 fd ff
	ff		 fld	 DWORD PTR _fPitch$[ebp]

; 219  : }

  0021e	8b e5		 mov	 esp, ebp
  00220	5d		 pop	 ebp
  00221	c2 08 00	 ret	 8
_VoxLDPDA@8 ENDP
_TEXT	ENDS
PUBLIC	_GetPitchTable@8
PUBLIC	??_C@_0BF@PFNDEBJA@pfPitchTable?5?$CB?$DN?5NULL?$AA@ ; `string'
PUBLIC	??_C@_0P@GBGKNCGC@piSize?5?$CB?$DN?5NULL?$AA@	; `string'
;	COMDAT ??_C@_0BF@PFNDEBJA@pfPitchTable?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BF@PFNDEBJA@pfPitchTable?5?$CB?$DN?5NULL?$AA@ DB 'pfPitchTable != '
	DB	'NULL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GBGKNCGC@piSize?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0P@GBGKNCGC@piSize?5?$CB?$DN?5NULL?$AA@ DB 'piSize != NULL', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _GetPitchTable@8
_TEXT	SEGMENT
_pfPitchTable$ = 8
_piSize$ = 12
_GetPitchTable@8 PROC NEAR				; COMDAT

; 249  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 250  :   assert(pfPitchTable != NULL);

  00003	83 7d 08 00	 cmp	 DWORD PTR _pfPitchTable$[ebp], 0
  00007	75 17		 jne	 SHORT $L1517
  00009	68 fa 00 00 00	 push	 250			; 000000faH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@PFNDEBJA@pfPitchTable?5?$CB?$DN?5NULL?$AA@
  00018	e8 00 00 00 00	 call	 __assert
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1517:

; 251  :   assert(piSize != NULL);

  00020	83 7d 0c 00	 cmp	 DWORD PTR _piSize$[ebp], 0
  00024	75 17		 jne	 SHORT $L1518
  00026	68 fb 00 00 00	 push	 251			; 000000fbH
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@GBGKNCGC@piSize?5?$CB?$DN?5NULL?$AA@
  00035	e8 00 00 00 00	 call	 __assert
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1518:

; 252  : 
; 253  :   *pfPitchTable = (float *)CpfPitchTable;

  0003d	8b 55 08	 mov	 edx, DWORD PTR _pfPitchTable$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET FLAT:_CpfPitchTable

; 254  :   *piSize = PITCH_TABLE_SIZE;

  00046	8b 45 0c	 mov	 eax, DWORD PTR _piSize$[ebp]
  00049	c7 00 59 00 00
	00		 mov	 DWORD PTR [eax], 89	; 00000059H

; 255  : }

  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
_GetPitchTable@8 ENDP
_TEXT	ENDS
PUBLIC	_VoxInitLDPDA@4
EXTRN	_calloc:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxInitLDPDA@4
_TEXT	SEGMENT
_hLD_PDA_mblk$ = 8
_VoxInitLDPDA@4 PROC NEAR				; COMDAT

; 281  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 282  :   assert(hLD_PDA_mblk != NULL);

  00003	83 7d 08 00	 cmp	 DWORD PTR _hLD_PDA_mblk$[ebp], 0
  00007	75 17		 jne	 SHORT $L1522
  00009	68 1a 01 00 00	 push	 282			; 0000011aH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@NDAOMJBD@hLD_PDA_mblk?5?$CB?$DN?5NULL?$AA@
  00018	e8 00 00 00 00	 call	 __assert
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1522:

; 283  : 
; 284  :   /* initialize the structure */
; 285  :   if(VOX_MEM_INIT(*hLD_PDA_mblk, 1, sizeof(LD_PDA_MBlk))) 

  00020	6a 08		 push	 8
  00022	6a 01		 push	 1
  00024	e8 00 00 00 00	 call	 _calloc
  00029	83 c4 08	 add	 esp, 8
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _hLD_PDA_mblk$[ebp]
  0002f	89 01		 mov	 DWORD PTR [ecx], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _hLD_PDA_mblk$[ebp]
  00034	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00037	75 06		 jne	 SHORT $L1423

; 286  :     return 1;

  00039	66 b8 01 00	 mov	 ax, 1
  0003d	eb 1a		 jmp	 SHORT $L1419
$L1423:

; 287  : 
; 288  :   ((LD_PDA_MBlk *)*hLD_PDA_mblk)->fLastP0 = 100.0F;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _hLD_PDA_mblk$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	c7 01 00 00 c8
	42		 mov	 DWORD PTR [ecx], 1120403456 ; 42c80000H

; 289  :   ((LD_PDA_MBlk *)*hLD_PDA_mblk)->fLastCost = 0.0F;

  0004a	8b 55 08	 mov	 edx, DWORD PTR _hLD_PDA_mblk$[ebp]
  0004d	8b 02		 mov	 eax, DWORD PTR [edx]
  0004f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 290  : 
; 291  :   return 0;

  00056	66 33 c0	 xor	 ax, ax
$L1419:

; 292  : }

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
_VoxInitLDPDA@4 ENDP
_TEXT	ENDS
PUBLIC	_VoxFreeLDPDA@4
EXTRN	_free:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxFreeLDPDA@4
_TEXT	SEGMENT
_hLD_PDA_mblk$ = 8
_VoxFreeLDPDA@4 PROC NEAR				; COMDAT

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 319  :   assert(hLD_PDA_mblk != NULL);

  00003	83 7d 08 00	 cmp	 DWORD PTR _hLD_PDA_mblk$[ebp], 0
  00007	75 17		 jne	 SHORT $L1526
  00009	68 3f 01 00 00	 push	 319			; 0000013fH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@NDAOMJBD@hLD_PDA_mblk?5?$CB?$DN?5NULL?$AA@
  00018	e8 00 00 00 00	 call	 __assert
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1526:

; 320  : 
; 321  :   if (*hLD_PDA_mblk) 

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _hLD_PDA_mblk$[ebp]
  00023	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00026	74 1f		 je	 SHORT $L1431

; 322  :     VOX_MEM_FREE(*hLD_PDA_mblk);

  00028	8b 55 08	 mov	 edx, DWORD PTR _hLD_PDA_mblk$[ebp]
  0002b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002e	74 17		 je	 SHORT $L1431
  00030	8b 45 08	 mov	 eax, DWORD PTR _hLD_PDA_mblk$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 _free
  0003b	83 c4 04	 add	 esp, 4
  0003e	8b 55 08	 mov	 edx, DWORD PTR _hLD_PDA_mblk$[ebp]
  00041	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L1431:

; 323  : 
; 324  :   return 0;

  00047	66 33 c0	 xor	 ax, ax

; 325  : }

  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
_VoxFreeLDPDA@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@GGOKBJCK@pfPower?5?$CB?$DN?5NULL?$AA@	; `string'
PUBLIC	__real@3d4ccccd
;	COMDAT ??_C@_0BA@GGOKBJCK@pfPower?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BA@GGOKBJCK@pfPower?5?$CB?$DN?5NULL?$AA@ DB 'pfPower != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _FindBaseBand@8
_TEXT	SEGMENT
_fEnergyThreshold$ = -12
_fHighEndEnergy$ = -8
_i$ = -4
_pfPower$ = 8
_iLength$ = 12
_FindBaseBand@8 PROC NEAR				; COMDAT

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 359  :   float fEnergyThreshold;
; 360  :   float fHighEndEnergy;
; 361  :   int i;
; 362  : 
; 363  :   assert(pfPower != NULL);

  00006	83 7d 08 00	 cmp	 DWORD PTR _pfPower$[ebp], 0
  0000a	75 17		 jne	 SHORT $L1530
  0000c	68 6b 01 00 00	 push	 363			; 0000016bH
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@GGOKBJCK@pfPower?5?$CB?$DN?5NULL?$AA@
  0001b	e8 00 00 00 00	 call	 __assert
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1530:

; 364  : 
; 365  :   iLength --;

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR _iLength$[ebp]
  00026	83 e9 01	 sub	 ecx, 1
  00029	89 4d 0c	 mov	 DWORD PTR _iLength$[ebp], ecx

; 366  :   /*--------------------------------------------------
; 367  :     (1) Compute the energy cutoff threshold
; 368  :     --------------------------------------------------*/
; 369  :   fEnergyThreshold = 0.0F;

  0002c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _fEnergyThreshold$[ebp], 0

; 370  :   for (i = iLength; i >= 0; i--)

  00033	8b 55 0c	 mov	 edx, DWORD PTR _iLength$[ebp]
  00036	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  00039	eb 09		 jmp	 SHORT $L1445
$L1446:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003e	83 e8 01	 sub	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L1445:
  00044	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00048	7c 11		 jl	 SHORT $L1447

; 371  :     fEnergyThreshold += pfPower[i];

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _pfPower$[ebp]
  00050	d9 45 f4	 fld	 DWORD PTR _fEnergyThreshold$[ebp]
  00053	d8 04 8a	 fadd	 DWORD PTR [edx+ecx*4]
  00056	d9 5d f4	 fstp	 DWORD PTR _fEnergyThreshold$[ebp]
  00059	eb e0		 jmp	 SHORT $L1446
$L1447:

; 372  :   fEnergyThreshold *= ENERGY_CUT_OFF;

  0005b	d9 45 f4	 fld	 DWORD PTR _fEnergyThreshold$[ebp]
  0005e	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3d4ccccd
  00064	d9 5d f4	 fstp	 DWORD PTR _fEnergyThreshold$[ebp]

; 373  : 
; 374  :   /*--------------------------------------------------
; 375  :     (2) Find the cutoff BaseBand.
; 376  :     --------------------------------------------------*/
; 377  :   fHighEndEnergy = 0.0F;

  00067	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _fHighEndEnergy$[ebp], 0

; 378  :   for (i = iLength; i>=0; i--)

  0006e	8b 45 0c	 mov	 eax, DWORD PTR _iLength$[ebp]
  00071	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
  00074	eb 09		 jmp	 SHORT $L1448
$L1449:
  00076	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00079	83 e9 01	 sub	 ecx, 1
  0007c	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L1448:
  0007f	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00083	7c 1d		 jl	 SHORT $L1450

; 379  :     {
; 380  :       fHighEndEnergy += pfPower[i];

  00085	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00088	8b 45 08	 mov	 eax, DWORD PTR _pfPower$[ebp]
  0008b	d9 45 f8	 fld	 DWORD PTR _fHighEndEnergy$[ebp]
  0008e	d8 04 90	 fadd	 DWORD PTR [eax+edx*4]
  00091	d9 55 f8	 fst	 DWORD PTR _fHighEndEnergy$[ebp]

; 381  :       if (fHighEndEnergy >= fEnergyThreshold)

  00094	d8 5d f4	 fcomp	 DWORD PTR _fEnergyThreshold$[ebp]
  00097	df e0		 fnstsw	 ax
  00099	f6 c4 01	 test	 ah, 1
  0009c	75 02		 jne	 SHORT $L1451

; 382  :         break;

  0009e	eb 02		 jmp	 SHORT $L1450
$L1451:

; 383  :     }

  000a0	eb d4		 jmp	 SHORT $L1449
$L1450:

; 384  :   
; 385  :   i += 2;

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000a5	83 c1 02	 add	 ecx, 2
  000a8	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx

; 386  :   if (i < FREQ_CUT_LC)

  000ab	83 7d fc 4c	 cmp	 DWORD PTR _i$[ebp], 76	; 0000004cH
  000af	7d 07		 jge	 SHORT $L1452

; 387  :     i = FREQ_CUT_LC;

  000b1	c7 45 fc 4c 00
	00 00		 mov	 DWORD PTR _i$[ebp], 76	; 0000004cH
$L1452:

; 388  : 
; 389  :   return i;

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]

; 390  : }

  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
_FindBaseBand@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@EJJAGIDA@pfPv?5?$CB?$DN?5NULL?$AA@	; `string'
;	COMDAT ??_C@_0N@EJJAGIDA@pfPv?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0N@EJJAGIDA@pfPv?5?$CB?$DN?5NULL?$AA@ DB 'pfPv != NULL', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _FindBestCandidates@12
_TEXT	SEGMENT
_iLastIndex$ = -8
_iBestIndex$ = -4
_pfPv$ = 8
_iNumCand$ = 12
_iHpIndex$ = 16
_FindBestCandidates@12 PROC NEAR			; COMDAT

; 426  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 427  :   int iLastIndex = iNumCand - 1;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _iNumCand$[ebp]
  00009	83 e8 01	 sub	 eax, 1
  0000c	89 45 f8	 mov	 DWORD PTR _iLastIndex$[ebp], eax

; 428  :   int iBestIndex;
; 429  :   const static float PV_TH[3] = {0.75F, 1.1F, 0.88F};
; 430  : 
; 431  :   assert(pfPv != NULL);

  0000f	83 7d 08 00	 cmp	 DWORD PTR _pfPv$[ebp], 0
  00013	75 17		 jne	 SHORT $L1536
  00015	68 af 01 00 00	 push	 431			; 000001afH
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@EJJAGIDA@pfPv?5?$CB?$DN?5NULL?$AA@
  00024	e8 00 00 00 00	 call	 __assert
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1536:

; 432  : 
; 433  :   /*------------------------------------------------------------
; 434  :     Resolve most likely pitch candidate using the following 
; 435  :     conditions:
; 436  :     ------------------------------------------------------------*/
; 437  :   iBestIndex = 0; 

  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _iBestIndex$[ebp], 0

; 438  : 
; 439  :   if (iHpIndex<(iLastIndex))    

  00033	8b 55 10	 mov	 edx, DWORD PTR _iHpIndex$[ebp]
  00036	3b 55 f8	 cmp	 edx, DWORD PTR _iLastIndex$[ebp]
  00039	7d 50		 jge	 SHORT $L1467

; 440  :     {      
; 441  :       if ((iHpIndex == 0) || (pfPv[iHpIndex] >= (PV_TH[0]*pfPv[0])))

  0003b	83 7d 10 00	 cmp	 DWORD PTR _iHpIndex$[ebp], 0
  0003f	74 1b		 je	 SHORT $L1469
  00041	8b 45 08	 mov	 eax, DWORD PTR _pfPv$[ebp]
  00044	d9 05 00 00 00
	00		 fld	 DWORD PTR ?PV_TH@?1??FindBestCandidates@@9@9
  0004a	d8 08		 fmul	 DWORD PTR [eax]
  0004c	8b 4d 10	 mov	 ecx, DWORD PTR _iHpIndex$[ebp]
  0004f	8b 55 08	 mov	 edx, DWORD PTR _pfPv$[ebp]
  00052	d8 1c 8a	 fcomp	 DWORD PTR [edx+ecx*4]
  00055	df e0		 fnstsw	 ax
  00057	f6 c4 41	 test	 ah, 65			; 00000041H
  0005a	7a 2d		 jp	 SHORT $L1468
$L1469:

; 442  :         {
; 443  :           if (pfPv[iLastIndex] >= (PV_TH[1]*pfPv[iHpIndex]))

  0005c	8b 45 10	 mov	 eax, DWORD PTR _iHpIndex$[ebp]
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _pfPv$[ebp]
  00062	d9 05 04 00 00
	00		 fld	 DWORD PTR ?PV_TH@?1??FindBestCandidates@@9@9+4
  00068	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  0006b	8b 55 f8	 mov	 edx, DWORD PTR _iLastIndex$[ebp]
  0006e	8b 45 08	 mov	 eax, DWORD PTR _pfPv$[ebp]
  00071	d8 1c 90	 fcomp	 DWORD PTR [eax+edx*4]
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 41	 test	 ah, 65			; 00000041H
  00079	7a 08		 jp	 SHORT $L1470

; 444  :             iBestIndex = iLastIndex;

  0007b	8b 4d f8	 mov	 ecx, DWORD PTR _iLastIndex$[ebp]
  0007e	89 4d fc	 mov	 DWORD PTR _iBestIndex$[ebp], ecx

; 445  :           else

  00081	eb 06		 jmp	 SHORT $L1468
$L1470:

; 446  :             iBestIndex = iHpIndex;

  00083	8b 55 10	 mov	 edx, DWORD PTR _iHpIndex$[ebp]
  00086	89 55 fc	 mov	 DWORD PTR _iBestIndex$[ebp], edx
$L1468:

; 447  :         } 
; 448  :     }
; 449  :   else 

  00089	eb 21		 jmp	 SHORT $L1472
$L1467:

; 450  :     {
; 451  :       if (pfPv[iLastIndex] >= (PV_TH[2]*pfPv[0]))

  0008b	8b 45 08	 mov	 eax, DWORD PTR _pfPv$[ebp]
  0008e	d9 05 08 00 00
	00		 fld	 DWORD PTR ?PV_TH@?1??FindBestCandidates@@9@9+8
  00094	d8 08		 fmul	 DWORD PTR [eax]
  00096	8b 4d f8	 mov	 ecx, DWORD PTR _iLastIndex$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR _pfPv$[ebp]
  0009c	d8 1c 8a	 fcomp	 DWORD PTR [edx+ecx*4]
  0009f	df e0		 fnstsw	 ax
  000a1	f6 c4 41	 test	 ah, 65			; 00000041H
  000a4	7a 06		 jp	 SHORT $L1472

; 452  :         iBestIndex  = iLastIndex;

  000a6	8b 45 f8	 mov	 eax, DWORD PTR _iLastIndex$[ebp]
  000a9	89 45 fc	 mov	 DWORD PTR _iBestIndex$[ebp], eax
$L1472:

; 453  :     }
; 454  : 
; 455  :   return iBestIndex;

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _iBestIndex$[ebp]

; 456  : }

  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 0c 00	 ret	 12			; 0000000cH
_FindBestCandidates@12 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT _UpdateLDPDA_MBlk@12
_TEXT	SEGMENT
_hLD_PDA_mblk$ = 8
_fPitch$ = 12
_fCost$ = 16
_UpdateLDPDA_MBlk@12 PROC NEAR				; COMDAT

; 485  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 486  :   assert(hLD_PDA_mblk != NULL);

  00003	83 7d 08 00	 cmp	 DWORD PTR _hLD_PDA_mblk$[ebp], 0
  00007	75 17		 jne	 SHORT $L1540
  00009	68 e6 01 00 00	 push	 486			; 000001e6H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EFEIMMKD@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@NDAOMJBD@hLD_PDA_mblk?5?$CB?$DN?5NULL?$AA@
  00018	e8 00 00 00 00	 call	 __assert
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1540:

; 487  : 
; 488  :   ((LD_PDA_MBlk *)hLD_PDA_mblk)->fLastP0 = fPitch;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _hLD_PDA_mblk$[ebp]
  00023	8b 55 0c	 mov	 edx, DWORD PTR _fPitch$[ebp]
  00026	89 11		 mov	 DWORD PTR [ecx], edx

; 489  :   ((LD_PDA_MBlk *)hLD_PDA_mblk)->fLastCost = fCost;

  00028	8b 45 08	 mov	 eax, DWORD PTR _hLD_PDA_mblk$[ebp]
  0002b	8b 4d 10	 mov	 ecx, DWORD PTR _fCost$[ebp]
  0002e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 490  : }

  00031	5d		 pop	 ebp
  00032	c2 0c 00	 ret	 12			; 0000000cH
_UpdateLDPDA_MBlk@12 ENDP
_TEXT	ENDS
END
